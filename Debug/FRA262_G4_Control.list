
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012374  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08012518  08012518  00022518  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c38  08012c38  00030430  2**0
                  CONTENTS
  4 .ARM          00000008  08012c38  08012c38  00022c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c40  08012c40  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c40  08012c40  00022c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c44  08012c44  00022c44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  08012c48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000430  08013078  00030430  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  08013078  00031114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015693  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276c  00000000  00000000  00045af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00048260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00049480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b78  00000000  00000000  000638bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0291  00000000  00000000  00079433  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001196c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006654  00000000  00000000  00119714  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000430 	.word	0x20000430
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080124fc 	.word	0x080124fc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000434 	.word	0x20000434
 80001dc:	080124fc 	.word	0x080124fc

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000044c 	.word	0x2000044c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000044c 	.word	0x2000044c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a f8c8 	bl	800b222 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000044c 	.word	0x2000044c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fa14 	bl	800a4fc <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fa0c 	bl	800a4fc <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 ffaa 	bl	800b048 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f886 	bl	800b222 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fa69 	bl	8009604 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fcce 	bl	8009adc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000044c 	.word	0x2000044c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f009 ffd1 	bl	800b222 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f91e 	bl	800c5a8 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f009 fff6 	bl	800b380 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000044c 	.word	0x2000044c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b f8b2 	bl	800c5a8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000044c 	.word	0x2000044c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000044c 	.word	0x2000044c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000044c 	.word	0x2000044c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00a ffd8 	bl	800c5a8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 fdfe 	bl	800b284 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f003 fceb 	bl	8005098 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fb8d 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fe7f 	bl	80023c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fe47 	bl	800235c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fe19 	bl	8002304 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fd0b 	bl	80020ec <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fc79 	bl	8001fcc <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 fbe9 	bl	8001eb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fde7 	bl	80022b0 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fd91 	bl	8002208 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fd55 	bl	8002194 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ea:	f000 fc41 	bl	8001f70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ee:	4bae      	ldr	r3, [pc, #696]	; (80019a8 <main+0x2f0>)
 80016f0:	4aae      	ldr	r2, [pc, #696]	; (80019ac <main+0x2f4>)
 80016f2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f4:	4bac      	ldr	r3, [pc, #688]	; (80019a8 <main+0x2f0>)
 80016f6:	4aae      	ldr	r2, [pc, #696]	; (80019b0 <main+0x2f8>)
 80016f8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fa:	4bab      	ldr	r3, [pc, #684]	; (80019a8 <main+0x2f0>)
 80016fc:	2215      	movs	r2, #21
 80016fe:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001700:	4ba9      	ldr	r3, [pc, #676]	; (80019a8 <main+0x2f0>)
 8001702:	2246      	movs	r2, #70	; 0x46
 8001704:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001706:	49ab      	ldr	r1, [pc, #684]	; (80019b4 <main+0x2fc>)
 8001708:	48a7      	ldr	r0, [pc, #668]	; (80019a8 <main+0x2f0>)
 800170a:	f7ff fccf 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	48a9      	ldr	r0, [pc, #676]	; (80019b8 <main+0x300>)
 8001712:	f008 fafd 	bl	8009d10 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001716:	48a9      	ldr	r0, [pc, #676]	; (80019bc <main+0x304>)
 8001718:	f007 ff1a 	bl	8009550 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	48a7      	ldr	r0, [pc, #668]	; (80019bc <main+0x304>)
 8001720:	f008 f8c4 	bl	80098ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	48a5      	ldr	r0, [pc, #660]	; (80019bc <main+0x304>)
 8001728:	f008 f8c0 	bl	80098ac <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172c:	4ba4      	ldr	r3, [pc, #656]	; (80019c0 <main+0x308>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001738:	48a2      	ldr	r0, [pc, #648]	; (80019c4 <main+0x30c>)
 800173a:	f005 f80f 	bl	800675c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <main+0x310>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2110      	movs	r1, #16
 8001748:	489e      	ldr	r0, [pc, #632]	; (80019c4 <main+0x30c>)
 800174a:	f005 f807 	bl	800675c <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 800174e:	2202      	movs	r2, #2
 8001750:	499e      	ldr	r1, [pc, #632]	; (80019cc <main+0x314>)
 8001752:	489f      	ldr	r0, [pc, #636]	; (80019d0 <main+0x318>)
 8001754:	f003 fd7a 	bl	800524c <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 8001758:	4b96      	ldr	r3, [pc, #600]	; (80019b4 <main+0x2fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <main+0x31c>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001764:	4b9c      	ldr	r3, [pc, #624]	; (80019d8 <main+0x320>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176a:	f000 ff85 	bl	8002678 <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800176e:	f7ff fd29 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001772:	f003 fcf7 	bl	8005164 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	4b98      	ldr	r3, [pc, #608]	; (80019dc <main+0x324>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d909      	bls.n	8001794 <main+0xdc>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001780:	f003 fcf0 	bl	8005164 <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	33c8      	adds	r3, #200	; 0xc8
 8001788:	4a94      	ldr	r2, [pc, #592]	; (80019dc <main+0x324>)
 800178a:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178c:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <main+0x2fc>)
 800178e:	f645 1261 	movw	r2, #22881	; 0x5961
 8001792:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <main+0x328>)
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d130      	bne.n	8001802 <main+0x14a>
 80017a0:	f003 fce0 	bl	8005164 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <main+0x32c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d329      	bcc.n	8001802 <main+0x14a>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f\r\n",position, setposition, setvelocity);
 80017ae:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <main+0x330>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	461e      	mov	r6, r3
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <main+0x334>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fecc 	bl	8000558 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <main+0x338>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d6:	e9cd 4500 	strd	r4, r5, [sp]
 80017da:	4632      	mov	r2, r6
 80017dc:	4985      	ldr	r1, [pc, #532]	; (80019f4 <main+0x33c>)
 80017de:	4886      	ldr	r0, [pc, #536]	; (80019f8 <main+0x340>)
 80017e0:	f00b fd78 	bl	800d2d4 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017e4:	4884      	ldr	r0, [pc, #528]	; (80019f8 <main+0x340>)
 80017e6:	f7fe fcfb 	bl	80001e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	4981      	ldr	r1, [pc, #516]	; (80019f8 <main+0x340>)
 80017f2:	487b      	ldr	r0, [pc, #492]	; (80019e0 <main+0x328>)
 80017f4:	f009 fcd0 	bl	800b198 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017f8:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <main+0x32c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3314      	adds	r3, #20
 80017fe:	4a79      	ldr	r2, [pc, #484]	; (80019e4 <main+0x32c>)
 8001800:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VelocityApprox();
 8001802:	f001 f8a9 	bl	8002958 <VelocityApprox>
	  AccelerationApprox();
 8001806:	f001 f8d5 	bl	80029b4 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800180a:	f001 f8f1 	bl	80029f0 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 800180e:	f001 f9e1 	bl	8002bd4 <JoystickPinUpdate>

	  switch(scheduler)
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <main+0x344>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b07      	cmp	r3, #7
 8001818:	d8a9      	bhi.n	800176e <main+0xb6>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <main+0x168>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001841 	.word	0x08001841
 8001824:	08001885 	.word	0x08001885
 8001828:	08001913 	.word	0x08001913
 800182c:	08001a1d 	.word	0x08001a1d
 8001830:	08001bd1 	.word	0x08001bd1
 8001834:	08001c19 	.word	0x08001c19
 8001838:	08001c71 	.word	0x08001c71
 800183c:	08001cb3 	.word	0x08001cb3
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <main+0x300>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <main+0x330>)
 800184a:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 800184c:	f001 fa5e 	bl	8002d0c <JoystickControl>
		  JoystickLocationState();
 8001850:	f001 fb2a 	bl	8002ea8 <JoystickLocationState>

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <main+0x2fc>)
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d103      	bne.n	8001864 <main+0x1ac>
		  {
			  scheduler = 7;
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <main+0x344>)
 800185e:	2207      	movs	r2, #7
 8001860:	601a      	str	r2, [r3, #0]
		  {
			  registerFrame[64].U16 = 1;
			  Proximity = 3;
			  scheduler = 5;
		  }
		  break;
 8001862:	e294      	b.n	8001d8e <main+0x6d6>
		  else if(registerFrame[1].U16 == 4) //Home
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <main+0x2fc>)
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	2b04      	cmp	r3, #4
 800186a:	f040 8290 	bne.w	8001d8e <main+0x6d6>
			  registerFrame[64].U16 = 1;
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <main+0x2fc>)
 8001870:	2201      	movs	r2, #1
 8001872:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  Proximity = 3;
 8001876:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <main+0x348>)
 8001878:	2203      	movs	r2, #3
 800187a:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 800187c:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <main+0x344>)
 800187e:	2205      	movs	r2, #5
 8001880:	601a      	str	r2, [r3, #0]
		  break;
 8001882:	e284      	b.n	8001d8e <main+0x6d6>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <main+0x2fc>)
 8001886:	2208      	movs	r2, #8
 8001888:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <main+0x34c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <main+0x350>)
 8001890:	330c      	adds	r3, #12
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3304      	adds	r3, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe5c 	bl	8000558 <__aeabi_f2d>
 80018a0:	a33f      	add	r3, pc, #252	; (adr r3, 80019a0 <main+0x2e8>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f9a1 	bl	8000bf8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <main+0x354>)
 80018ba:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <main+0x34c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <main+0x350>)
 80018c2:	3304      	adds	r3, #4
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <main+0x2fc>)
 80018e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <main+0x2fc>)
 80018e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018ea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <main+0x2fc>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <main+0x2fc>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <main+0x358>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001904:	4843      	ldr	r0, [pc, #268]	; (8001a14 <main+0x35c>)
 8001906:	f007 fe7d 	bl	8009604 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <main+0x344>)
 800190c:	2203      	movs	r2, #3
 800190e:	601a      	str	r2, [r3, #0]
		  break;
 8001910:	e242      	b.n	8001d98 <main+0x6e0>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <main+0x2fc>)
 8001914:	2210      	movs	r2, #16
 8001916:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <main+0x34c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <main+0x360>)
 800191e:	330c      	adds	r3, #12
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe15 	bl	8000558 <__aeabi_f2d>
 800192e:	a31c      	add	r3, pc, #112	; (adr r3, 80019a0 <main+0x2e8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe ff92 	bl	800085c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f95a 	bl	8000bf8 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <main+0x354>)
 8001948:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <main+0x34c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <main+0x360>)
 8001950:	3304      	adds	r3, #4
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <main+0x2fc>)
 800196e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <main+0x2fc>)
 8001974:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001978:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <main+0x2fc>)
 800197e:	2201      	movs	r2, #1
 8001980:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <main+0x2fc>)
 8001986:	2202      	movs	r2, #2
 8001988:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <main+0x358>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <main+0x35c>)
 8001994:	f007 fe36 	bl	8009604 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <main+0x344>)
 800199a:	2203      	movs	r2, #3
 800199c:	601a      	str	r2, [r3, #0]
		  break;
 800199e:	e1fb      	b.n	8001d98 <main+0x6e0>
 80019a0:	70a3d70a 	.word	0x70a3d70a
 80019a4:	3fa70a3d 	.word	0x3fa70a3d
 80019a8:	20000b28 	.word	0x20000b28
 80019ac:	20000890 	.word	0x20000890
 80019b0:	20000768 	.word	0x20000768
 80019b4:	20001000 	.word	0x20001000
 80019b8:	20000600 	.word	0x20000600
 80019bc:	2000054c 	.word	0x2000054c
 80019c0:	2000020c 	.word	0x2000020c
 80019c4:	40020400 	.word	0x40020400
 80019c8:	20000208 	.word	0x20000208
 80019cc:	20000b0c 	.word	0x20000b0c
 80019d0:	20000450 	.word	0x20000450
 80019d4:	20000b20 	.word	0x20000b20
 80019d8:	20000b18 	.word	0x20000b18
 80019dc:	200010e4 	.word	0x200010e4
 80019e0:	2000081c 	.word	0x2000081c
 80019e4:	200010e8 	.word	0x200010e8
 80019e8:	200009ac 	.word	0x200009ac
 80019ec:	200009bc 	.word	0x200009bc
 80019f0:	200009dc 	.word	0x200009dc
 80019f4:	08012518 	.word	0x08012518
 80019f8:	2000108c 	.word	0x2000108c
 80019fc:	20000200 	.word	0x20000200
 8001a00:	2000024c 	.word	0x2000024c
 8001a04:	20000964 	.word	0x20000964
 8001a08:	200009e4 	.word	0x200009e4
 8001a0c:	20000974 	.word	0x20000974
 8001a10:	2000096c 	.word	0x2000096c
 8001a14:	200006b4 	.word	0x200006b4
 8001a18:	20000a48 	.word	0x20000a48

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001a1c:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <main+0x568>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <main+0x56c>)
 8001a26:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001a28:	f003 fb9c 	bl	8005164 <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <main+0x570>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d909      	bls.n	8001a4a <main+0x392>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001a36:	f003 fb95 	bl	8005164 <HAL_GetTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a7a      	ldr	r2, [pc, #488]	; (8001c28 <main+0x570>)
 8001a40:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a42:	f000 ff89 	bl	8002958 <VelocityApprox>
			  AccelerationApprox();
 8001a46:	f000 ffb5 	bl	80029b4 <AccelerationApprox>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a4a:	f003 fb8b 	bl	8005164 <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <main+0x574>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d33b      	bcc.n	8001ad0 <main+0x418>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a58:	f003 fb84 	bl	8005164 <HAL_GetTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <main+0x574>)
 8001a62:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a64:	f001 f824 	bl	8002ab0 <PIDcal>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <main+0x578>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a72:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <main+0x578>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	db0e      	blt.n	8001aa0 <main+0x3e8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a82:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <main+0x57c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a8a:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <main+0x578>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <main+0x57c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 2a90 	vmov	r2, s15
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9e:	e017      	b.n	8001ad0 <main+0x418>
			  }
			  else if (duty < 0)
 8001aa0:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <main+0x578>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d50f      	bpl.n	8001ad0 <main+0x418>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ab0:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <main+0x57c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <main+0x578>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eef1 7a67 	vneg.f32	s15, s15
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <main+0x57c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aca:	ee17 2a90 	vmov	r2, s15
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  if(position > Overshootposition){
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <main+0x56c>)
 8001ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <main+0x580>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dd21      	ble.n	8001b24 <main+0x46c>
			  Overshootposition = position;
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <main+0x56c>)
 8001ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <main+0x580>)
 8001ae8:	801a      	strh	r2, [r3, #0]
			  PercentOS = ((Overshootposition-qf)/(qf-qi))*100;
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <main+0x580>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <main+0x584>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <main+0x584>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <main+0x588>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b16:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001c44 <main+0x58c>
 8001b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <main+0x590>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		  }
		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <main+0x56c>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <main+0x584>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	db36      	blt.n	8001bb8 <main+0x500>
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <main+0x56c>)
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <main+0x584>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d823      	bhi.n	8001bb8 <main+0x500>
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <main+0x594>)
 8001b72:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11e      	bne.n	8001bb8 <main+0x500>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <main+0x57c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <main+0x57c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
			  Overshootposition = 0;
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <main+0x580>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]

			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001b90:	482f      	ldr	r0, [pc, #188]	; (8001c50 <main+0x598>)
 8001b92:	f007 fd99 	bl	80096c8 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <main+0x59c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d106      	bne.n	8001bac <main+0x4f4>
			  {
				  registerFrame[16].U16 = 0;
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <main+0x594>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <main+0x5a0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e005      	b.n	8001bb8 <main+0x500>
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0x5a4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <main+0x5a0>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
			  }

		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <main+0x5a8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	f040 80e8 	bne.w	8001d92 <main+0x6da>
		  {
			  ResetButton.flag = 0;
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <main+0x5a8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <main+0x5a0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001bce:	e0e0      	b.n	8001d92 <main+0x6da>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <main+0x5ac>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	dc13      	bgt.n	8001c00 <main+0x548>
		  {
			  if (TaskType == 1)
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <main+0x5b0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <main+0x534>
			  {
				  EndEffectorState = 4;			//Pick
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <main+0x5b4>)
 8001be2:	2204      	movs	r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001be6:	f000 fd47 	bl	8002678 <EndEffectorWrite>
 8001bea:	e009      	b.n	8001c00 <main+0x548>
//				  TaskType = -1; 			// TestYesterday
//				  HAL_Delay(2000);		    // TestYesterday
//				  scheduler = 2; 			// TestYesterday
			  }
			  else if (TaskType == -1)
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <main+0x5b0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d104      	bne.n	8001c00 <main+0x548>
			  {
				  EndEffectorState = 5;			//Place
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <main+0x5b4>)
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001bfc:	f000 fd3c 	bl	8002678 <EndEffectorWrite>
//				  {
//					  scheduler = 1; 		// TestYesterday
//				  }
			  }
		  }
		  if (ResetButton.flag == 1)
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <main+0x5a8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	f040 80c6 	bne.w	8001d96 <main+0x6de>
			  {
				  ResetButton.flag = 0;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <main+0x5a8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <main+0x5a0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001c16:	e0be      	b.n	8001d96 <main+0x6de>

	  //Homing
	  case 5:
		  Homing();
 8001c18:	f000 fcce 	bl	80025b8 <Homing>
		  break;
 8001c1c:	e0bc      	b.n	8001d98 <main+0x6e0>
 8001c1e:	bf00      	nop
 8001c20:	20000600 	.word	0x20000600
 8001c24:	200009ac 	.word	0x200009ac
 8001c28:	200010ec 	.word	0x200010ec
 8001c2c:	200010f0 	.word	0x200010f0
 8001c30:	20000968 	.word	0x20000968
 8001c34:	2000054c 	.word	0x2000054c
 8001c38:	200009ae 	.word	0x200009ae
 8001c3c:	20000974 	.word	0x20000974
 8001c40:	20000978 	.word	0x20000978
 8001c44:	42c80000 	.word	0x42c80000
 8001c48:	200009b0 	.word	0x200009b0
 8001c4c:	20001000 	.word	0x20001000
 8001c50:	200006b4 	.word	0x200006b4
 8001c54:	200010e0 	.word	0x200010e0
 8001c58:	20000200 	.word	0x20000200
 8001c5c:	20000b18 	.word	0x20000b18
 8001c60:	20000adc 	.word	0x20000adc
 8001c64:	20000964 	.word	0x20000964
 8001c68:	20000204 	.word	0x20000204
 8001c6c:	20000b20 	.word	0x20000b20

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c70:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <main+0x6f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <main+0x6f0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 8001c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c84:	4849      	ldr	r0, [pc, #292]	; (8001dac <main+0x6f4>)
 8001c86:	f004 fd51 	bl	800672c <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d110      	bne.n	8001cb2 <main+0x5fa>
		  {
			  Emercount = 0;
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <main+0x6f8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
			  EndEffectorState = 8;		//Quit Emergency
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <main+0x6fc>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <main+0x700>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001ca2:	f000 fce9 	bl	8002678 <EndEffectorWrite>
			  Proximity = 3;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <main+0x704>)
 8001ca8:	2203      	movs	r2, #3
 8001caa:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <main+0x708>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	601a      	str	r2, [r3, #0]
		  }

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <main+0x70c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <main+0x70c>)
 8001cba:	2220      	movs	r2, #32
 8001cbc:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <main+0x70c>)
 8001cc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <main+0x710>)
 8001cc8:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <main+0x710>)
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <main+0x70c>)
 8001cd4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <main+0x70c>)
 8001cda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cde:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;        // 500 ms
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <main+0x70c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <main+0x70c>)
 8001cec:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <main+0x714>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d003      	beq.n	8001d04 <main+0x64c>
			  registerFrame[64].U16 = 2;  	// RUN
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <main+0x70c>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <main+0x70c>)
 8001d06:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <main+0x714>)
 8001d0e:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <main+0x718>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <main+0x70c>)
 8001d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d916      	bls.n	8001d52 <main+0x69a>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <main+0x70c>)
 8001d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d2a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc00 	bl	8000534 <__aeabi_i2d>
 8001d34:	a31a      	add	r3, pc, #104	; (adr r3, 8001da0 <main+0x6e8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fd8f 	bl	800085c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff57 	bl	8000bf8 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <main+0x71c>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e013      	b.n	8001d7a <main+0x6c2>
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <main+0x70c>)
 8001d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbeb 	bl	8000534 <__aeabi_i2d>
 8001d5e:	a310      	add	r3, pc, #64	; (adr r3, 8001da0 <main+0x6e8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fd7a 	bl	800085c <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff42 	bl	8000bf8 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <main+0x71c>)
 8001d78:	6013      	str	r3, [r2, #0]
		  }
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <main+0x720>)
 8001d7c:	f007 fc42 	bl	8009604 <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <main+0x724>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <main+0x708>)
 8001d88:	2203      	movs	r2, #3
 8001d8a:	601a      	str	r2, [r3, #0]
		  break;
 8001d8c:	e004      	b.n	8001d98 <main+0x6e0>
		  break;
 8001d8e:	bf00      	nop
 8001d90:	e4ed      	b.n	800176e <main+0xb6>
		  break;
 8001d92:	bf00      	nop
 8001d94:	e4eb      	b.n	800176e <main+0xb6>
		  break;
 8001d96:	bf00      	nop
  {
 8001d98:	e4e9      	b.n	800176e <main+0xb6>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	cccccccd 	.word	0xcccccccd
 8001da4:	3fdccccc 	.word	0x3fdccccc
 8001da8:	2000054c 	.word	0x2000054c
 8001dac:	40020400 	.word	0x40020400
 8001db0:	20000b24 	.word	0x20000b24
 8001db4:	20000b20 	.word	0x20000b20
 8001db8:	20000b18 	.word	0x20000b18
 8001dbc:	2000024c 	.word	0x2000024c
 8001dc0:	20000200 	.word	0x20000200
 8001dc4:	20001000 	.word	0x20001000
 8001dc8:	200010dc 	.word	0x200010dc
 8001dcc:	200010de 	.word	0x200010de
 8001dd0:	2000096c 	.word	0x2000096c
 8001dd4:	20000974 	.word	0x20000974
 8001dd8:	200006b4 	.word	0x200006b4
 8001ddc:	200010e0 	.word	0x200010e0

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	; 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00a fbe8 	bl	800c5c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <SystemClock_Config+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <SystemClock_Config+0xcc>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <SystemClock_Config+0xcc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e44:	2310      	movs	r3, #16
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e50:	2308      	movs	r3, #8
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f006 fe7f 	bl	8008b68 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e70:	f002 fca4 	bl	80047bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 f8e1 	bl	8009058 <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e9c:	f002 fc8e 	bl	80047bc <Error_Handler>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3750      	adds	r7, #80	; 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <MX_ADC1_Init+0xb8>)
 8001ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001eca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <MX_ADC1_Init+0xbc>)
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001efe:	2202      	movs	r2, #2
 8001f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f12:	f003 f957 	bl	80051c4 <HAL_ADC_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f1c:	f002 fc4e 	bl	80047bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f32:	f003 fa99 	bl	8005468 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f3c:	f002 fc3e 	bl	80047bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f4e:	f003 fa8b 	bl	8005468 <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f58:	f002 fc30 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000450 	.word	0x20000450
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <MX_I2C1_Init+0x54>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_I2C1_Init+0x58>)
 8001f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fae:	f004 fc07 	bl	80067c0 <HAL_I2C_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb8:	f002 fc00 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200004f8 	.word	0x200004f8
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	000186a0 	.word	0x000186a0

08001fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b092      	sub	sp, #72	; 0x48
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00a fae4 	bl	800c5c4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <MX_TIM1_Init+0x118>)
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <MX_TIM1_Init+0x11c>)
 8002000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <MX_TIM1_Init+0x118>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002010:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <MX_TIM1_Init+0x118>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002028:	482e      	ldr	r0, [pc, #184]	; (80020e4 <MX_TIM1_Init+0x118>)
 800202a:	f007 fbe3 	bl	80097f4 <HAL_TIM_PWM_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002034:	f002 fbc2 	bl	80047bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002044:	4619      	mov	r1, r3
 8002046:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002048:	f008 fec6 	bl	800add8 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002052:	f002 fbb3 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002056:	2360      	movs	r3, #96	; 0x60
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	481a      	ldr	r0, [pc, #104]	; (80020e4 <MX_TIM1_Init+0x118>)
 800207c:	f008 f85a 	bl	800a134 <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002086:	f002 fb99 	bl	80047bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	2204      	movs	r2, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002094:	f008 f84e 	bl	800a134 <HAL_TIM_PWM_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800209e:	f002 fb8d 	bl	80047bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM1_Init+0x118>)
 80020c6:	f008 fef5 	bl	800aeb4 <HAL_TIMEx_ConfigBreakDeadTime>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020d0:	f002 fb74 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM1_Init+0x118>)
 80020d6:	f002 fd2d 	bl	8004b34 <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3748      	adds	r7, #72	; 0x48
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000054c 	.word	0x2000054c
 80020e8:	40010000 	.word	0x40010000

080020ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00a fa62 	bl	800c5c4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM3_Init+0xa0>)
 800210a:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_TIM3_Init+0xa4>)
 800210c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_TIM3_Init+0xa0>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_TIM3_Init+0xa0>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_TIM3_Init+0xa0>)
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_TIM3_Init+0xa0>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_TIM3_Init+0xa0>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800212e:	2303      	movs	r3, #3
 8002130:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002136:	2301      	movs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800213e:	230f      	movs	r3, #15
 8002140:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002146:	2301      	movs	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800214e:	230f      	movs	r3, #15
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_TIM3_Init+0xa0>)
 800215a:	f007 fd25 	bl	8009ba8 <HAL_TIM_Encoder_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002164:	f002 fb2a 	bl	80047bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM3_Init+0xa0>)
 8002176:	f008 fe2f 	bl	800add8 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002180:	f002 fb1c 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	; 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000600 	.word	0x20000600
 8002190:	40000400 	.word	0x40000400

08002194 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <MX_TIM9_Init+0x70>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ae:	2263      	movs	r2, #99	; 0x63
 80021b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ce:	f007 f963 	bl	8009498 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80021d8:	f002 faf0 	bl	80047bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021e8:	f008 f866 	bl	800a2b8 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80021f2:	f002 fae3 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200006b4 	.word	0x200006b4
 8002204:	40014000 	.word	0x40014000

08002208 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <MX_TIM11_Init+0xa4>)
 8002224:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002228:	2263      	movs	r2, #99	; 0x63
 800222a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002234:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002238:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002246:	4818      	ldr	r0, [pc, #96]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002248:	f007 f926 	bl	8009498 <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002252:	f002 fab3 	bl	80047bc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002258:	f007 fa66 	bl	8009728 <HAL_TIM_OC_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002262:	f002 faab 	bl	80047bc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002266:	2108      	movs	r1, #8
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800226a:	f007 fbcf 	bl	8009a0c <HAL_TIM_OnePulse_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002274:	f002 faa2 	bl	80047bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002278:	2310      	movs	r3, #16
 800227a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800227c:	f240 5399 	movw	r3, #1433	; 0x599
 8002280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002292:	f007 fef3 	bl	800a07c <HAL_TIM_OC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800229c:	f002 fa8e 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000768 	.word	0x20000768
 80022ac:	40014800 	.word	0x40014800

080022b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <MX_USART1_UART_Init+0x50>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e8:	f008 fe54 	bl	800af94 <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022f2:	f002 fa63 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000081c 	.word	0x2000081c
 8002300:	40011000 	.word	0x40011000

08002304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <MX_USART2_UART_Init+0x54>)
 800230c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002310:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002340:	f008 fe28 	bl	800af94 <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800234a:	f002 fa37 	bl	80047bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000890 	.word	0x20000890
 8002358:	40004400 	.word	0x40004400

0800235c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_DMA_Init+0x68>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <MX_DMA_Init+0x68>)
 800236c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_DMA_Init+0x68>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_DMA_Init+0x68>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <MX_DMA_Init+0x68>)
 8002388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_DMA_Init+0x68>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2011      	movs	r0, #17
 80023a0:	f003 fbed 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023a4:	2011      	movs	r0, #17
 80023a6:	f003 fc06 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2038      	movs	r0, #56	; 0x38
 80023b0:	f003 fbe5 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023b4:	2038      	movs	r0, #56	; 0x38
 80023b6:	f003 fbfe 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <MX_GPIO_Init+0x168>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a52      	ldr	r2, [pc, #328]	; (8002530 <MX_GPIO_Init+0x168>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <MX_GPIO_Init+0x168>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <MX_GPIO_Init+0x168>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <MX_GPIO_Init+0x168>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <MX_GPIO_Init+0x168>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <MX_GPIO_Init+0x168>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a44      	ldr	r2, [pc, #272]	; (8002530 <MX_GPIO_Init+0x168>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b42      	ldr	r3, [pc, #264]	; (8002530 <MX_GPIO_Init+0x168>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <MX_GPIO_Init+0x168>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <MX_GPIO_Init+0x168>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <MX_GPIO_Init+0x168>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002454:	4837      	ldr	r0, [pc, #220]	; (8002534 <MX_GPIO_Init+0x16c>)
 8002456:	f004 f981 	bl	800675c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800245a:	2302      	movs	r3, #2
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4832      	ldr	r0, [pc, #200]	; (8002538 <MX_GPIO_Init+0x170>)
 800246e:	f003 ffd9 	bl	8006424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002472:	230c      	movs	r3, #12
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002476:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800247a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	482c      	ldr	r0, [pc, #176]	; (8002538 <MX_GPIO_Init+0x170>)
 8002488:	f003 ffcc 	bl	8006424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800248c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4826      	ldr	r0, [pc, #152]	; (800253c <MX_GPIO_Init+0x174>)
 80024a2:	f003 ffbf 	bl	8006424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80024a6:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80024aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	481d      	ldr	r0, [pc, #116]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024c0:	f003 ffb0 	bl	8006424 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024dc:	f003 ffa2 	bl	8006424 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024e0:	2360      	movs	r3, #96	; 0x60
 80024e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4810      	ldr	r0, [pc, #64]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024f4:	f003 ff96 	bl	8006424 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	2008      	movs	r0, #8
 80024fe:	f003 fb3e 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002502:	2008      	movs	r0, #8
 8002504:	f003 fb57 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2009      	movs	r0, #9
 800250e:	f003 fb36 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002512:	2009      	movs	r0, #9
 8002514:	f003 fb4f 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2028      	movs	r0, #40	; 0x28
 800251e:	f003 fb2e 	bl	8005b7e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002522:	2028      	movs	r0, #40	; 0x28
 8002524:	f003 fb47 	bl	8005bb6 <HAL_NVIC_EnableIRQ>

}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d106      	bne.n	800255e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002552:	2205      	movs	r2, #5
 8002554:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002558:	2203      	movs	r2, #3
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e008      	b.n	8002570 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin == GPIO_PIN_3)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d105      	bne.n	8002570 <HAL_GPIO_EXTI_Callback+0x30>
	{
		scheduler = 5;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002566:	2205      	movs	r2, #5
 8002568:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x68>)
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_15) //Push Emergency
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d111      	bne.n	800259c <HAL_GPIO_EXTI_Callback+0x5c>
	{
		if(Emercount == 0)
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			EndEffectorState = 7;			//Emergency
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002582:	2207      	movs	r2, #7
 8002584:	601a      	str	r2, [r3, #0]
			EndEffectorWriteFlag = 1;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
			EndEffectorWrite();
 800258c:	f000 f874 	bl	8002678 <EndEffectorWrite>
			Emercount = 1;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
			scheduler = 6;
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002598:	2206      	movs	r2, #6
 800259a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000200 	.word	0x20000200
 80025a8:	2000024c 	.word	0x2000024c
 80025ac:	20000b24 	.word	0x20000b24
 80025b0:	20000b20 	.word	0x20000b20
 80025b4:	20000b18 	.word	0x20000b18

080025b8 <Homing>:

void Homing()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <Homing+0xa4>)
 80025be:	2204      	movs	r2, #4
 80025c0:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <Homing+0xa4>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <Homing+0xa4>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <Homing+0xa8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d109      	bne.n	80025ec <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <Homing+0xac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <Homing+0xac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ea:	e00c      	b.n	8002606 <Homing+0x4e>
	}

	else if (Proximity == 2)
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <Homing+0xa8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d108      	bne.n	8002606 <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <Homing+0xac>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <Homing+0xac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 8002606:	2102      	movs	r1, #2
 8002608:	4817      	ldr	r0, [pc, #92]	; (8002668 <Homing+0xb0>)
 800260a:	f004 f88f 	bl	800672c <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d120      	bne.n	8002656 <Homing+0x9e>
	{
		Proximity = 0;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <Homing+0xa8>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <Homing+0xb4>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <Homing+0xa4>)
 8002622:	2200      	movs	r2, #0
 8002624:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <Homing+0xa4>)
 8002628:	2200      	movs	r2, #0
 800262a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <Homing+0xa4>)
 8002630:	2200      	movs	r2, #0
 8002632:	841a      	strh	r2, [r3, #32]

		HAL_Delay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f002 fda1 	bl	800517c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <Homing+0xac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <Homing+0xac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <Homing+0xb8>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <Homing+0xbc>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
	}
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20001000 	.word	0x20001000
 8002660:	2000024c 	.word	0x2000024c
 8002664:	2000054c 	.word	0x2000054c
 8002668:	40020800 	.word	0x40020800
 800266c:	20000b24 	.word	0x20000b24
 8002670:	20000b14 	.word	0x20000b14
 8002674:	20000200 	.word	0x20000200

08002678 <EndEffectorWrite>:

void EndEffectorWrite()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 800267e:	4ba2      	ldr	r3, [pc, #648]	; (8002908 <EndEffectorWrite+0x290>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b08      	cmp	r3, #8
 8002684:	f200 813c 	bhi.w	8002900 <EndEffectorWrite+0x288>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <EndEffectorWrite+0x18>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026b5 	.word	0x080026b5
 8002694:	080026d7 	.word	0x080026d7
 8002698:	080026ff 	.word	0x080026ff
 800269c:	08002727 	.word	0x08002727
 80026a0:	0800274f 	.word	0x0800274f
 80026a4:	080027c3 	.word	0x080027c3
 80026a8:	0800286d 	.word	0x0800286d
 80026ac:	08002893 	.word	0x08002893
 80026b0:	080028b9 	.word	0x080028b9
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 80026b4:	4b95      	ldr	r3, [pc, #596]	; (800290c <EndEffectorWrite+0x294>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f040 8110 	bne.w	80028de <EndEffectorWrite+0x266>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 80026be:	2364      	movs	r3, #100	; 0x64
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a92      	ldr	r2, [pc, #584]	; (8002910 <EndEffectorWrite+0x298>)
 80026c6:	212a      	movs	r1, #42	; 0x2a
 80026c8:	4892      	ldr	r0, [pc, #584]	; (8002914 <EndEffectorWrite+0x29c>)
 80026ca:	f004 f9bd 	bl	8006a48 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 80026ce:	4b8f      	ldr	r3, [pc, #572]	; (800290c <EndEffectorWrite+0x294>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026d4:	e103      	b.n	80028de <EndEffectorWrite+0x266>
	case 1:
		if(EndEffectorWriteFlag == 1)
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <EndEffectorWrite+0x294>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 8101 	bne.w	80028e2 <EndEffectorWrite+0x26a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 80026e0:	2364      	movs	r3, #100	; 0x64
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2302      	movs	r3, #2
 80026e6:	4a8c      	ldr	r2, [pc, #560]	; (8002918 <EndEffectorWrite+0x2a0>)
 80026e8:	212a      	movs	r1, #42	; 0x2a
 80026ea:	488a      	ldr	r0, [pc, #552]	; (8002914 <EndEffectorWrite+0x29c>)
 80026ec:	f004 f9ac 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 80026f0:	4b8a      	ldr	r3, [pc, #552]	; (800291c <EndEffectorWrite+0x2a4>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <EndEffectorWrite+0x294>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026fc:	e0f1      	b.n	80028e2 <EndEffectorWrite+0x26a>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80026fe:	4b83      	ldr	r3, [pc, #524]	; (800290c <EndEffectorWrite+0x294>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 80ef 	bne.w	80028e6 <EndEffectorWrite+0x26e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2302      	movs	r3, #2
 800270e:	4a84      	ldr	r2, [pc, #528]	; (8002920 <EndEffectorWrite+0x2a8>)
 8002710:	212a      	movs	r1, #42	; 0x2a
 8002712:	4880      	ldr	r0, [pc, #512]	; (8002914 <EndEffectorWrite+0x29c>)
 8002714:	f004 f998 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 8002718:	4b80      	ldr	r3, [pc, #512]	; (800291c <EndEffectorWrite+0x2a4>)
 800271a:	2200      	movs	r2, #0
 800271c:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800271e:	4b7b      	ldr	r3, [pc, #492]	; (800290c <EndEffectorWrite+0x294>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002724:	e0df      	b.n	80028e6 <EndEffectorWrite+0x26e>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002726:	4b79      	ldr	r3, [pc, #484]	; (800290c <EndEffectorWrite+0x294>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 80dd 	bne.w	80028ea <EndEffectorWrite+0x272>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 8002730:	2364      	movs	r3, #100	; 0x64
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2302      	movs	r3, #2
 8002736:	4a7b      	ldr	r2, [pc, #492]	; (8002924 <EndEffectorWrite+0x2ac>)
 8002738:	212a      	movs	r1, #42	; 0x2a
 800273a:	4876      	ldr	r0, [pc, #472]	; (8002914 <EndEffectorWrite+0x29c>)
 800273c:	f004 f984 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002740:	4b76      	ldr	r3, [pc, #472]	; (800291c <EndEffectorWrite+0x2a4>)
 8002742:	2202      	movs	r2, #2
 8002744:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002746:	4b71      	ldr	r3, [pc, #452]	; (800290c <EndEffectorWrite+0x294>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800274c:	e0cd      	b.n	80028ea <EndEffectorWrite+0x272>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <EndEffectorWrite+0x294>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d114      	bne.n	8002780 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 8002756:	2364      	movs	r3, #100	; 0x64
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2302      	movs	r3, #2
 800275c:	4a72      	ldr	r2, [pc, #456]	; (8002928 <EndEffectorWrite+0x2b0>)
 800275e:	212a      	movs	r1, #42	; 0x2a
 8002760:	486c      	ldr	r0, [pc, #432]	; (8002914 <EndEffectorWrite+0x29c>)
 8002762:	f004 f971 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <EndEffectorWrite+0x2a4>)
 8002768:	2206      	movs	r2, #6
 800276a:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 800276c:	2064      	movs	r0, #100	; 0x64
 800276e:	f002 fd05 	bl	800517c <HAL_Delay>
				EndEffectorReadFlag = 1;
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <EndEffectorWrite+0x2b4>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <EndEffectorWrite+0x294>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e00f      	b.n	80027a0 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <EndEffectorWrite+0x2b4>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10b      	bne.n	80027a0 <EndEffectorWrite+0x128>
 8002788:	4b62      	ldr	r3, [pc, #392]	; (8002914 <EndEffectorWrite+0x29c>)
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d105      	bne.n	80027a0 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002794:	2301      	movs	r3, #1
 8002796:	4a66      	ldr	r2, [pc, #408]	; (8002930 <EndEffectorWrite+0x2b8>)
 8002798:	212a      	movs	r1, #42	; 0x2a
 800279a:	485e      	ldr	r0, [pc, #376]	; (8002914 <EndEffectorWrite+0x29c>)
 800279c:	f004 fa52 	bl	8006c44 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <EndEffectorWrite+0x2b8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	f040 80a2 	bne.w	80028ee <EndEffectorWrite+0x276>
			{
				TaskType *= -1;
 80027aa:	4b62      	ldr	r3, [pc, #392]	; (8002934 <EndEffectorWrite+0x2bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	425b      	negs	r3, r3
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <EndEffectorWrite+0x2bc>)
 80027b2:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80027b4:	4b5d      	ldr	r3, [pc, #372]	; (800292c <EndEffectorWrite+0x2b4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <EndEffectorWrite+0x2c0>)
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
			}
		break;
 80027c0:	e095      	b.n	80028ee <EndEffectorWrite+0x276>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <EndEffectorWrite+0x294>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d114      	bne.n	80027f4 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 80027ca:	2364      	movs	r3, #100	; 0x64
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2302      	movs	r3, #2
 80027d0:	4a5a      	ldr	r2, [pc, #360]	; (800293c <EndEffectorWrite+0x2c4>)
 80027d2:	212a      	movs	r1, #42	; 0x2a
 80027d4:	484f      	ldr	r0, [pc, #316]	; (8002914 <EndEffectorWrite+0x29c>)
 80027d6:	f004 f937 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <EndEffectorWrite+0x2a4>)
 80027dc:	220a      	movs	r2, #10
 80027de:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	f002 fccb 	bl	800517c <HAL_Delay>
				EndEffectorReadFlag = 1;
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <EndEffectorWrite+0x2b4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <EndEffectorWrite+0x294>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <EndEffectorWrite+0x2b4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10b      	bne.n	8002814 <EndEffectorWrite+0x19c>
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <EndEffectorWrite+0x29c>)
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d105      	bne.n	8002814 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002808:	2301      	movs	r3, #1
 800280a:	4a49      	ldr	r2, [pc, #292]	; (8002930 <EndEffectorWrite+0x2b8>)
 800280c:	212a      	movs	r1, #42	; 0x2a
 800280e:	4841      	ldr	r0, [pc, #260]	; (8002914 <EndEffectorWrite+0x29c>)
 8002810:	f004 fa18 	bl	8006c44 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <EndEffectorWrite+0x2b8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d16a      	bne.n	80028f2 <EndEffectorWrite+0x27a>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <EndEffectorWrite+0x2a4>)
 800281e:	2202      	movs	r2, #2
 8002820:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <EndEffectorWrite+0x2bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	425b      	negs	r3, r3
 8002828:	4a42      	ldr	r2, [pc, #264]	; (8002934 <EndEffectorWrite+0x2bc>)
 800282a:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 800282c:	4b3f      	ldr	r3, [pc, #252]	; (800292c <EndEffectorWrite+0x2b4>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <EndEffectorWrite+0x2c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	4a41      	ldr	r2, [pc, #260]	; (8002940 <EndEffectorWrite+0x2c8>)
 800283a:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 800283c:	4b40      	ldr	r3, [pc, #256]	; (8002940 <EndEffectorWrite+0x2c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b09      	cmp	r3, #9
 8002842:	d10f      	bne.n	8002864 <EndEffectorWrite+0x1ec>
				{
					HoleSequence = 0;
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <EndEffectorWrite+0x2c8>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <EndEffectorWrite+0x2bc>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <EndEffectorWrite+0x2a4>)
 8002852:	2200      	movs	r2, #0
 8002854:	805a      	strh	r2, [r3, #2]
					Proximity = 3;
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <EndEffectorWrite+0x2cc>)
 8002858:	2203      	movs	r2, #3
 800285a:	601a      	str	r2, [r3, #0]
					scheduler = 5;
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <EndEffectorWrite+0x2c0>)
 800285e:	2205      	movs	r2, #5
 8002860:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 8002862:	e046      	b.n	80028f2 <EndEffectorWrite+0x27a>
					scheduler = 1;
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <EndEffectorWrite+0x2c0>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
		break;
 800286a:	e042      	b.n	80028f2 <EndEffectorWrite+0x27a>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <EndEffectorWrite+0x294>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d140      	bne.n	80028f6 <EndEffectorWrite+0x27e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 8002874:	2364      	movs	r3, #100	; 0x64
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2302      	movs	r3, #2
 800287a:	4a33      	ldr	r2, [pc, #204]	; (8002948 <EndEffectorWrite+0x2d0>)
 800287c:	212a      	movs	r1, #42	; 0x2a
 800287e:	4825      	ldr	r0, [pc, #148]	; (8002914 <EndEffectorWrite+0x29c>)
 8002880:	f004 f8e2 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <EndEffectorWrite+0x2a4>)
 8002886:	2200      	movs	r2, #0
 8002888:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <EndEffectorWrite+0x294>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002890:	e031      	b.n	80028f6 <EndEffectorWrite+0x27e>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <EndEffectorWrite+0x294>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d12f      	bne.n	80028fa <EndEffectorWrite+0x282>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 800289a:	2364      	movs	r3, #100	; 0x64
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <EndEffectorWrite+0x2d4>)
 80028a2:	212a      	movs	r1, #42	; 0x2a
 80028a4:	481b      	ldr	r0, [pc, #108]	; (8002914 <EndEffectorWrite+0x29c>)
 80028a6:	f004 f8cf 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <EndEffectorWrite+0x2a4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <EndEffectorWrite+0x294>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80028b6:	e020      	b.n	80028fa <EndEffectorWrite+0x282>
	case 8:
		if(EndEffectorWriteFlag == 1)
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <EndEffectorWrite+0x294>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d11e      	bne.n	80028fe <EndEffectorWrite+0x286>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 80028c0:	2364      	movs	r3, #100	; 0x64
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2304      	movs	r3, #4
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <EndEffectorWrite+0x2d8>)
 80028c8:	212a      	movs	r1, #42	; 0x2a
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <EndEffectorWrite+0x29c>)
 80028cc:	f004 f8bc 	bl	8006a48 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <EndEffectorWrite+0x2a4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <EndEffectorWrite+0x294>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			}
		break;
 80028dc:	e00f      	b.n	80028fe <EndEffectorWrite+0x286>
		break;
 80028de:	bf00      	nop
 80028e0:	e00e      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028e2:	bf00      	nop
 80028e4:	e00c      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028e6:	bf00      	nop
 80028e8:	e00a      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028ea:	bf00      	nop
 80028ec:	e008      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028ee:	bf00      	nop
 80028f0:	e006      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028f2:	bf00      	nop
 80028f4:	e004      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028fe:	bf00      	nop
	}
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000b20 	.word	0x20000b20
 800290c:	20000b18 	.word	0x20000b18
 8002910:	20000228 	.word	0x20000228
 8002914:	200004f8 	.word	0x200004f8
 8002918:	20000234 	.word	0x20000234
 800291c:	20001000 	.word	0x20001000
 8002920:	20000238 	.word	0x20000238
 8002924:	2000023c 	.word	0x2000023c
 8002928:	20000244 	.word	0x20000244
 800292c:	20000b19 	.word	0x20000b19
 8002930:	20000b1c 	.word	0x20000b1c
 8002934:	20000204 	.word	0x20000204
 8002938:	20000200 	.word	0x20000200
 800293c:	20000248 	.word	0x20000248
 8002940:	20000964 	.word	0x20000964
 8002944:	2000024c 	.word	0x2000024c
 8002948:	20000240 	.word	0x20000240
 800294c:	2000022c 	.word	0x2000022c
 8002950:	20000230 	.word	0x20000230
 8002954:	00000000 	.word	0x00000000

08002958 <VelocityApprox>:

void VelocityApprox()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <VelocityApprox+0x50>)
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	461a      	mov	r2, r3
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <VelocityApprox+0x54>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fde1 	bl	8000534 <__aeabi_i2d>
 8002972:	a30b      	add	r3, pc, #44	; (adr r3, 80029a0 <VelocityApprox+0x48>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd ff70 	bl	800085c <__aeabi_ddiv>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f938 	bl	8000bf8 <__aeabi_d2f>
 8002988:	4603      	mov	r3, r0
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <VelocityApprox+0x58>)
 800298c:	6013      	str	r3, [r2, #0]
	lastposition = position;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <VelocityApprox+0x50>)
 8002990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <VelocityApprox+0x54>)
 8002996:	801a      	strh	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	f3af 8000 	nop.w
 80029a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029a4:	3f50624d 	.word	0x3f50624d
 80029a8:	200009ac 	.word	0x200009ac
 80029ac:	200010f4 	.word	0x200010f4
 80029b0:	200009d4 	.word	0x200009d4

080029b4 <AccelerationApprox>:

void AccelerationApprox()
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <AccelerationApprox+0x2c>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <AccelerationApprox+0x30>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <AccelerationApprox+0x34>)
 80029ca:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <AccelerationApprox+0x2c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <AccelerationApprox+0x30>)
 80029d4:	6013      	str	r3, [r2, #0]

}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200009d4 	.word	0x200009d4
 80029e4:	200010f8 	.word	0x200010f8
 80029e8:	200009d8 	.word	0x200009d8
 80029ec:	00000000 	.word	0x00000000

080029f0 <Routine>:

void Routine()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	position_f = position;
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <Routine+0xa8>)
 80029f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <Routine+0xac>)
 8002a04:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <Routine+0xac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	a31f      	add	r3, pc, #124	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fdf6 	bl	8000608 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f8a0 	bl	8000b68 <__aeabi_d2iz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <Routine+0xb0>)
 8002a2e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <Routine+0xb0>)
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <Routine+0xb4>)
 8002a3a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <Routine+0xb8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd89 	bl	8000558 <__aeabi_f2d>
 8002a46:	a312      	add	r3, pc, #72	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fddc 	bl	8000608 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ae 	bl	8000bb8 <__aeabi_d2uiz>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <Routine+0xb4>)
 8002a62:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <Routine+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd75 	bl	8000558 <__aeabi_f2d>
 8002a6e:	a308      	add	r3, pc, #32	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdc8 	bl	8000608 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f89a 	bl	8000bb8 <__aeabi_d2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <Routine+0xb4>)
 8002a8a:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	3fdccccc 	.word	0x3fdccccc
 8002a98:	200009ac 	.word	0x200009ac
 8002a9c:	200009b4 	.word	0x200009b4
 8002aa0:	200009b8 	.word	0x200009b8
 8002aa4:	20001000 	.word	0x20001000
 8002aa8:	200009d4 	.word	0x200009d4
 8002aac:	200009d8 	.word	0x200009d8

08002ab0 <PIDcal>:

float PIDcal()
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <PIDcal+0xfc>)
 8002ab6:	ed93 7a00 	vldr	s14, [r3]
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <PIDcal+0x100>)
 8002abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <PIDcal+0x104>)
 8002ace:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <PIDcal+0x104>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae4:	db0a      	blt.n	8002afc <PIDcal+0x4c>
	{
		errorposition += 22;
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <PIDcal+0x104>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <PIDcal+0x104>)
 8002af6:	edc3 7a00 	vstr	s15, [r3]
 8002afa:	e013      	b.n	8002b24 <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <PIDcal+0x104>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	d809      	bhi.n	8002b24 <PIDcal+0x74>
	{
		errorposition -= 22;
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <PIDcal+0x104>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <PIDcal+0x104>)
 8002b20:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <PIDcal+0x108>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <PIDcal+0x104>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <PIDcal+0x108>)
 8002b36:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <PIDcal+0x104>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <PIDcal+0x10c>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <PIDcal+0x110>)
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <PIDcal+0x114>)
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <PIDcal+0x104>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <PIDcal+0x118>)
 8002b62:	edd3 6a00 	vldr	s13, [r3]
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <PIDcal+0x108>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <PIDcal+0x11c>)
 8002b76:	edd3 6a00 	vldr	s13, [r3]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <PIDcal+0x110>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <PIDcal+0x120>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <PIDcal+0x104>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <PIDcal+0x10c>)
 8002b94:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <PIDcal+0x120>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	ee07 3a90 	vmov	s15, r3
}
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200009bc 	.word	0x200009bc
 8002bb0:	200009ac 	.word	0x200009ac
 8002bb4:	200009c0 	.word	0x200009c0
 8002bb8:	200009cc 	.word	0x200009cc
 8002bbc:	200009c8 	.word	0x200009c8
 8002bc0:	200009d0 	.word	0x200009d0
 8002bc4:	20000218 	.word	0x20000218
 8002bc8:	2000021c 	.word	0x2000021c
 8002bcc:	20000220 	.word	0x20000220
 8002bd0:	200009c4 	.word	0x200009c4

08002bd4 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	4845      	ldr	r0, [pc, #276]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002bdc:	f003 fda6 	bl	800672c <HAL_GPIO_ReadPin>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002be6:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <JoystickPinUpdate+0x2c>
 8002bf0:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e002      	b.n	8002c06 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a3a      	ldr	r2, [pc, #232]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c0c:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002c0e:	2120      	movs	r1, #32
 8002c10:	4839      	ldr	r0, [pc, #228]	; (8002cf8 <JoystickPinUpdate+0x124>)
 8002c12:	f003 fd8b 	bl	800672c <HAL_GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c1c:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <JoystickPinUpdate+0x62>
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e002      	b.n	8002c3c <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c42:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c48:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <JoystickPinUpdate+0x124>)
 8002c4a:	f003 fd6f 	bl	800672c <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c54:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <JoystickPinUpdate+0x9a>
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e002      	b.n	8002c74 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c7a:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002c80:	f003 fd54 	bl	800672c <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c8a:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <JoystickPinUpdate+0xd0>
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e002      	b.n	8002caa <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002cb0:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002cb8:	f003 fd38 	bl	800672c <HAL_GPIO_ReadPin>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cc2:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <JoystickPinUpdate+0x108>
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	e002      	b.n	8002ce2 <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	20000ad0 	.word	0x20000ad0
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	20000adc 	.word	0x20000adc
 8002d00:	20000ae8 	.word	0x20000ae8
 8002d04:	20000af4 	.word	0x20000af4
 8002d08:	20000b00 	.word	0x20000b00

08002d0c <JoystickControl>:

void JoystickControl()
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <JoystickControl+0x180>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <JoystickControl+0x184>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <JoystickControl+0x180>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e014      	b.n	8002d50 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <JoystickControl+0x188>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <JoystickControl+0x184>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002d34:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <JoystickControl+0x188>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	e009      	b.n	8002d50 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002d3c:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <JoystickControl+0x18c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <JoystickControl+0x184>)
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <JoystickControl+0x18c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002d50:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <JoystickControl+0x184>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f000 808a 	beq.w	8002e6e <JoystickControl+0x162>
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f300 8093 	bgt.w	8002e86 <JoystickControl+0x17a>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <JoystickControl+0x5e>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d041      	beq.n	8002dec <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002d68:	e08d      	b.n	8002e86 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <JoystickControl+0x190>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d72:	4293      	cmp	r3, r2
 8002d74:	dd09      	ble.n	8002d8a <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <JoystickControl+0x194>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002d7e:	4b48      	ldr	r3, [pc, #288]	; (8002ea0 <JoystickControl+0x194>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
 8002d88:	e016      	b.n	8002db8 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <JoystickControl+0x190>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d92:	da09      	bge.n	8002da8 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002d94:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <JoystickControl+0x194>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <JoystickControl+0x194>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	e007      	b.n	8002db8 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <JoystickControl+0x194>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <JoystickControl+0x194>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <JoystickControl+0x190>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dd04      	ble.n	8002dce <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002dc4:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <JoystickControl+0x198>)
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dcc:	e05b      	b.n	8002e86 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <JoystickControl+0x190>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd6:	da04      	bge.n	8002de2 <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <JoystickControl+0x198>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002de0:	e051      	b.n	8002e86 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <JoystickControl+0x198>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dea:	e04c      	b.n	8002e86 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <JoystickControl+0x190>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002df4:	4293      	cmp	r3, r2
 8002df6:	dd09      	ble.n	8002e0c <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <JoystickControl+0x194>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <JoystickControl+0x194>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
 8002e0a:	e016      	b.n	8002e3a <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <JoystickControl+0x190>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e14:	da09      	bge.n	8002e2a <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <JoystickControl+0x194>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <JoystickControl+0x194>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	635a      	str	r2, [r3, #52]	; 0x34
 8002e28:	e007      	b.n	8002e3a <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <JoystickControl+0x194>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <JoystickControl+0x194>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <JoystickControl+0x190>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e42:	4293      	cmp	r3, r2
 8002e44:	dd04      	ble.n	8002e50 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <JoystickControl+0x198>)
 8002e48:	2204      	movs	r2, #4
 8002e4a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e4e:	e01a      	b.n	8002e86 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <JoystickControl+0x190>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e58:	da04      	bge.n	8002e64 <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <JoystickControl+0x198>)
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e62:	e010      	b.n	8002e86 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <JoystickControl+0x198>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e6c:	e00b      	b.n	8002e86 <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <JoystickControl+0x194>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <JoystickControl+0x194>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002e80:	f7ff fb9a 	bl	80025b8 <Homing>
		break;
 8002e84:	bf00      	nop
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000af4 	.word	0x20000af4
 8002e90:	20000b14 	.word	0x20000b14
 8002e94:	20000ae8 	.word	0x20000ae8
 8002e98:	20000b00 	.word	0x20000b00
 8002e9c:	20000b0c 	.word	0x20000b0c
 8002ea0:	2000054c 	.word	0x2000054c
 8002ea4:	20001000 	.word	0x20001000

08002ea8 <JoystickLocationState>:

void JoystickLocationState()
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <JoystickLocationState+0x188>)
 8002eae:	885b      	ldrh	r3, [r3, #2]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d114      	bne.n	8002ede <JoystickLocationState+0x36>
	{
		registerFrame[1].U16 = 0;
 8002eb4:	4b5e      	ldr	r3, [pc, #376]	; (8003030 <JoystickLocationState+0x188>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <JoystickLocationState+0x188>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <JoystickLocationState+0x18c>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <JoystickLocationState+0x188>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <JoystickLocationState+0x190>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002ed2:	f7ff fbd1 	bl	8002678 <EndEffectorWrite>
		state = 1;					//Go Pick state
 8002ed6:	4b59      	ldr	r3, [pc, #356]	; (800303c <JoystickLocationState+0x194>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e00f      	b.n	8002efe <JoystickLocationState+0x56>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <JoystickLocationState+0x188>)
 8002ee0:	885b      	ldrh	r3, [r3, #2]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d10b      	bne.n	8002efe <JoystickLocationState+0x56>
	{
		registerFrame[1].U16 = 0;
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <JoystickLocationState+0x188>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <JoystickLocationState+0x188>)
 8002eee:	2202      	movs	r2, #2
 8002ef0:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <JoystickLocationState+0x188>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <JoystickLocationState+0x194>)
 8002efa:	2203      	movs	r2, #3
 8002efc:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <JoystickLocationState+0x188>)
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d102      	bne.n	8002f0c <JoystickLocationState+0x64>
	{
		state = 5;
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <JoystickLocationState+0x194>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <JoystickLocationState+0x194>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	f200 86dc 	bhi.w	8003cd0 <JoystickLocationState+0xe28>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <JoystickLocationState+0x78>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f35 	.word	0x08002f35
 8002f24:	08002fe9 	.word	0x08002fe9
 8002f28:	080035b7 	.word	0x080035b7
 8002f2c:	0800367f 	.word	0x0800367f
 8002f30:	08003c65 	.word	0x08003c65
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <JoystickLocationState+0x198>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <JoystickLocationState+0x198>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <JoystickLocationState+0x198>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002f4c:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <JoystickLocationState+0x198>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <JoystickLocationState+0x19c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 86b0 	bne.w	8003cbe <JoystickLocationState+0xe16>
		{
			if(registerFrame[68].U16 >= 30000)
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <JoystickLocationState+0x188>)
 8002f60:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f64:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d912      	bls.n	8002f92 <JoystickLocationState+0xea>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <JoystickLocationState+0x188>)
 8002f6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f72:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f76:	4a34      	ldr	r2, [pc, #208]	; (8003048 <JoystickLocationState+0x1a0>)
 8002f78:	fb82 1203 	smull	r1, r2, r2, r3
 8002f7c:	1092      	asrs	r2, r2, #2
 8002f7e:	17db      	asrs	r3, r3, #31
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <JoystickLocationState+0x198>)
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
 8002f90:	e00e      	b.n	8002fb0 <JoystickLocationState+0x108>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <JoystickLocationState+0x188>)
 8002f94:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f98:	4a2c      	ldr	r2, [pc, #176]	; (800304c <JoystickLocationState+0x1a4>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <JoystickLocationState+0x198>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <JoystickLocationState+0x1a8>)
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fabc 	bl	8000534 <__aeabi_i2d>
 8002fbc:	a31a      	add	r3, pc, #104	; (adr r3, 8003028 <JoystickLocationState+0x180>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fb21 	bl	8000608 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fe13 	bl	8000bf8 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <JoystickLocationState+0x198>)
 8002fd6:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <JoystickLocationState+0x19c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
			state = 2;
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <JoystickLocationState+0x194>)
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
		}
		break;
 8002fe4:	f000 be6b 	b.w	8003cbe <JoystickLocationState+0xe16>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <JoystickLocationState+0x19c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 82d6 	bne.w	800359e <JoystickLocationState+0x6f6>
		{
			if(registerFrame[68].U16 >= 30000)
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <JoystickLocationState+0x188>)
 8002ff4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ff8:	f247 522f 	movw	r2, #29999	; 0x752f
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d929      	bls.n	8003054 <JoystickLocationState+0x1ac>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <JoystickLocationState+0x188>)
 8003002:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003006:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800300a:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <JoystickLocationState+0x1a0>)
 800300c:	fb82 1203 	smull	r1, r2, r2, r3
 8003010:	1092      	asrs	r2, r2, #2
 8003012:	17db      	asrs	r3, r3, #31
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <JoystickLocationState+0x198>)
 8003020:	edc3 7a02 	vstr	s15, [r3, #8]
 8003024:	e025      	b.n	8003072 <JoystickLocationState+0x1ca>
 8003026:	bf00      	nop
 8003028:	70a3d70a 	.word	0x70a3d70a
 800302c:	3fa70a3d 	.word	0x3fa70a3d
 8003030:	20001000 	.word	0x20001000
 8003034:	20000b20 	.word	0x20000b20
 8003038:	20000b18 	.word	0x20000b18
 800303c:	20000224 	.word	0x20000224
 8003040:	200009e4 	.word	0x200009e4
 8003044:	20000ad0 	.word	0x20000ad0
 8003048:	66666667 	.word	0x66666667
 800304c:	cccccccd 	.word	0xcccccccd
 8003050:	200009ac 	.word	0x200009ac
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003054:	4bd6      	ldr	r3, [pc, #856]	; (80033b0 <JoystickLocationState+0x508>)
 8003056:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800305a:	4ad6      	ldr	r2, [pc, #856]	; (80033b4 <JoystickLocationState+0x50c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	b29b      	uxth	r3, r3
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	4bd2      	ldr	r3, [pc, #840]	; (80033b8 <JoystickLocationState+0x510>)
 800306e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8003072:	4bd2      	ldr	r3, [pc, #840]	; (80033bc <JoystickLocationState+0x514>)
 8003074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa5b 	bl	8000534 <__aeabi_i2d>
 800307e:	a3ca      	add	r3, pc, #808	; (adr r3, 80033a8 <JoystickLocationState+0x500>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fac0 	bl	8000608 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fdb2 	bl	8000bf8 <__aeabi_d2f>
 8003094:	4603      	mov	r3, r0
 8003096:	4ac8      	ldr	r2, [pc, #800]	; (80033b8 <JoystickLocationState+0x510>)
 8003098:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800309a:	4bc9      	ldr	r3, [pc, #804]	; (80033c0 <JoystickLocationState+0x518>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]

			DeltaX = PickTray.L2[0]-PickTray.L1[0];
 80030a0:	4bc5      	ldr	r3, [pc, #788]	; (80033b8 <JoystickLocationState+0x510>)
 80030a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a6:	4bc4      	ldr	r3, [pc, #784]	; (80033b8 <JoystickLocationState+0x510>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd fa50 	bl	8000558 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	49c1      	ldr	r1, [pc, #772]	; (80033c4 <JoystickLocationState+0x51c>)
 80030be:	e9c1 2300 	strd	r2, r3, [r1]
			DeltaY = PickTray.L2[1]-PickTray.L1[1];
 80030c2:	4bbd      	ldr	r3, [pc, #756]	; (80033b8 <JoystickLocationState+0x510>)
 80030c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030c8:	4bbb      	ldr	r3, [pc, #748]	; (80033b8 <JoystickLocationState+0x510>)
 80030ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d2:	ee17 0a90 	vmov	r0, s15
 80030d6:	f7fd fa3f 	bl	8000558 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	49ba      	ldr	r1, [pc, #744]	; (80033c8 <JoystickLocationState+0x520>)
 80030e0:	e9c1 2300 	strd	r2, r3, [r1]
			angle = atan2(DeltaY, DeltaX);
 80030e4:	4bb8      	ldr	r3, [pc, #736]	; (80033c8 <JoystickLocationState+0x520>)
 80030e6:	ed93 7b00 	vldr	d7, [r3]
 80030ea:	4bb6      	ldr	r3, [pc, #728]	; (80033c4 <JoystickLocationState+0x51c>)
 80030ec:	ed93 6b00 	vldr	d6, [r3]
 80030f0:	eeb0 1a46 	vmov.f32	s2, s12
 80030f4:	eef0 1a66 	vmov.f32	s3, s13
 80030f8:	eeb0 0a47 	vmov.f32	s0, s14
 80030fc:	eef0 0a67 	vmov.f32	s1, s15
 8003100:	f00d ff76 	bl	8010ff0 <atan2>
 8003104:	eeb0 7a40 	vmov.f32	s14, s0
 8003108:	eef0 7a60 	vmov.f32	s15, s1
 800310c:	4baf      	ldr	r3, [pc, #700]	; (80033cc <JoystickLocationState+0x524>)
 800310e:	ed83 7b00 	vstr	d7, [r3]

			cos_Theta = cos(angle);
 8003112:	4bae      	ldr	r3, [pc, #696]	; (80033cc <JoystickLocationState+0x524>)
 8003114:	ed93 7b00 	vldr	d7, [r3]
 8003118:	eeb0 0a47 	vmov.f32	s0, s14
 800311c:	eef0 0a67 	vmov.f32	s1, s15
 8003120:	f00d feba 	bl	8010e98 <cos>
 8003124:	ec53 2b10 	vmov	r2, r3, d0
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fd64 	bl	8000bf8 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	4aa7      	ldr	r2, [pc, #668]	; (80033d0 <JoystickLocationState+0x528>)
 8003134:	6013      	str	r3, [r2, #0]
			sin_Theta = sin(angle);
 8003136:	4ba5      	ldr	r3, [pc, #660]	; (80033cc <JoystickLocationState+0x524>)
 8003138:	ed93 7b00 	vldr	d7, [r3]
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	eef0 0a67 	vmov.f32	s1, s15
 8003144:	f00d fefc 	bl	8010f40 <sin>
 8003148:	ec53 2b10 	vmov	r2, r3, d0
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fd52 	bl	8000bf8 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	4a9f      	ldr	r2, [pc, #636]	; (80033d4 <JoystickLocationState+0x52c>)
 8003158:	6013      	str	r3, [r2, #0]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*10)+PickTray.L1[0];
 800315a:	4b9d      	ldr	r3, [pc, #628]	; (80033d0 <JoystickLocationState+0x528>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003168:	4b9a      	ldr	r3, [pc, #616]	; (80033d4 <JoystickLocationState+0x52c>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eef1 7a67 	vneg.f32	s15, s15
 8003172:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <JoystickLocationState+0x510>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <JoystickLocationState+0x510>)
 800318a:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*10)+PickTray.L1[1];
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <JoystickLocationState+0x52c>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003198:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319c:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <JoystickLocationState+0x528>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <JoystickLocationState+0x510>)
 80031b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <JoystickLocationState+0x510>)
 80031ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*10)+PickTray.L1[0];
 80031be:	4b84      	ldr	r3, [pc, #528]	; (80033d0 <JoystickLocationState+0x528>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <JoystickLocationState+0x52c>)
 80031ce:	edd3 7a00 	vldr	s15, [r3]
 80031d2:	eef1 7a67 	vneg.f32	s15, s15
 80031d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e2:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <JoystickLocationState+0x510>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <JoystickLocationState+0x510>)
 80031ee:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*10)+PickTray.L1[1];
 80031f2:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <JoystickLocationState+0x52c>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <JoystickLocationState+0x528>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800320a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <JoystickLocationState+0x510>)
 8003214:	edd3 7a01 	vldr	s15, [r3, #4]
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <JoystickLocationState+0x510>)
 800321e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*10)+PickTray.L1[0];
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <JoystickLocationState+0x528>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80033d8 <JoystickLocationState+0x530>
 800322c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <JoystickLocationState+0x52c>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eef1 7a67 	vneg.f32	s15, s15
 800323a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800323e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <JoystickLocationState+0x510>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <JoystickLocationState+0x510>)
 8003252:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*10)+PickTray.L1[1];
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <JoystickLocationState+0x52c>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80033d8 <JoystickLocationState+0x530>
 8003260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <JoystickLocationState+0x528>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800326e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <JoystickLocationState+0x510>)
 8003278:	edd3 7a01 	vldr	s15, [r3, #4]
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <JoystickLocationState+0x510>)
 8003282:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*25)+PickTray.L1[0];
 8003286:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <JoystickLocationState+0x528>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <JoystickLocationState+0x52c>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	eef1 7a67 	vneg.f32	s15, s15
 800329e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <JoystickLocationState+0x510>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <JoystickLocationState+0x510>)
 80032b6:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*25)+PickTray.L1[1];
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <JoystickLocationState+0x52c>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <JoystickLocationState+0x528>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <JoystickLocationState+0x510>)
 80032dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <JoystickLocationState+0x510>)
 80032e6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*25)+PickTray.L1[0];
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <JoystickLocationState+0x528>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <JoystickLocationState+0x52c>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	eef1 7a67 	vneg.f32	s15, s15
 8003302:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <JoystickLocationState+0x510>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <JoystickLocationState+0x510>)
 800331a:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*25)+PickTray.L1[1];
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <JoystickLocationState+0x52c>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <JoystickLocationState+0x528>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800333a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <JoystickLocationState+0x510>)
 8003340:	edd3 7a01 	vldr	s15, [r3, #4]
 8003344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <JoystickLocationState+0x510>)
 800334a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*25)+PickTray.L1[0];
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <JoystickLocationState+0x528>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80033d8 <JoystickLocationState+0x530>
 8003358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <JoystickLocationState+0x52c>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eef1 7a67 	vneg.f32	s15, s15
 8003366:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800336a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <JoystickLocationState+0x510>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <JoystickLocationState+0x510>)
 800337e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*25)+PickTray.L1[1];
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <JoystickLocationState+0x52c>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80033d8 <JoystickLocationState+0x530>
 800338c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <JoystickLocationState+0x528>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800339a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a2:	e01b      	b.n	80033dc <JoystickLocationState+0x534>
 80033a4:	f3af 8000 	nop.w
 80033a8:	70a3d70a 	.word	0x70a3d70a
 80033ac:	3fa70a3d 	.word	0x3fa70a3d
 80033b0:	20001000 	.word	0x20001000
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	200009e4 	.word	0x200009e4
 80033bc:	200009ac 	.word	0x200009ac
 80033c0:	20000ad0 	.word	0x20000ad0
 80033c4:	20000ab0 	.word	0x20000ab0
 80033c8:	20000ab8 	.word	0x20000ab8
 80033cc:	20000ac0 	.word	0x20000ac0
 80033d0:	20000ac8 	.word	0x20000ac8
 80033d4:	20000acc 	.word	0x20000acc
 80033d8:	42480000 	.word	0x42480000
 80033dc:	4bba      	ldr	r3, [pc, #744]	; (80036c8 <JoystickLocationState+0x820>)
 80033de:	edd3 7a01 	vldr	s15, [r3, #4]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	4bb8      	ldr	r3, [pc, #736]	; (80036c8 <JoystickLocationState+0x820>)
 80033e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*40)+PickTray.L1[0];
 80033ec:	4bb7      	ldr	r3, [pc, #732]	; (80036cc <JoystickLocationState+0x824>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033fa:	4bb5      	ldr	r3, [pc, #724]	; (80036d0 <JoystickLocationState+0x828>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	eef1 7a67 	vneg.f32	s15, s15
 8003404:	eddf 6ab3 	vldr	s13, [pc, #716]	; 80036d4 <JoystickLocationState+0x82c>
 8003408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800340c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003410:	4bad      	ldr	r3, [pc, #692]	; (80036c8 <JoystickLocationState+0x820>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	4bab      	ldr	r3, [pc, #684]	; (80036c8 <JoystickLocationState+0x820>)
 800341c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*40)+PickTray.L1[1];
 8003420:	4bab      	ldr	r3, [pc, #684]	; (80036d0 <JoystickLocationState+0x828>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800342a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800342e:	4ba7      	ldr	r3, [pc, #668]	; (80036cc <JoystickLocationState+0x824>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eddf 6aa7 	vldr	s13, [pc, #668]	; 80036d4 <JoystickLocationState+0x82c>
 8003438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800343c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003440:	4ba1      	ldr	r3, [pc, #644]	; (80036c8 <JoystickLocationState+0x820>)
 8003442:	edd3 7a01 	vldr	s15, [r3, #4]
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	4b9f      	ldr	r3, [pc, #636]	; (80036c8 <JoystickLocationState+0x820>)
 800344c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*40)+PickTray.L1[0];
 8003450:	4b9e      	ldr	r3, [pc, #632]	; (80036cc <JoystickLocationState+0x824>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800345a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345e:	4b9c      	ldr	r3, [pc, #624]	; (80036d0 <JoystickLocationState+0x828>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	eef1 7a67 	vneg.f32	s15, s15
 8003468:	eddf 6a9a 	vldr	s13, [pc, #616]	; 80036d4 <JoystickLocationState+0x82c>
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b94      	ldr	r3, [pc, #592]	; (80036c8 <JoystickLocationState+0x820>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347e:	4b92      	ldr	r3, [pc, #584]	; (80036c8 <JoystickLocationState+0x820>)
 8003480:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*40)+PickTray.L1[1];
 8003484:	4b92      	ldr	r3, [pc, #584]	; (80036d0 <JoystickLocationState+0x828>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800348e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003492:	4b8e      	ldr	r3, [pc, #568]	; (80036cc <JoystickLocationState+0x824>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	eddf 6a8e 	vldr	s13, [pc, #568]	; 80036d4 <JoystickLocationState+0x82c>
 800349c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <JoystickLocationState+0x820>)
 80034a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	4b86      	ldr	r3, [pc, #536]	; (80036c8 <JoystickLocationState+0x820>)
 80034b0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*40)+PickTray.L1[0];
 80034b4:	4b85      	ldr	r3, [pc, #532]	; (80036cc <JoystickLocationState+0x824>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80036d8 <JoystickLocationState+0x830>
 80034be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c2:	4b83      	ldr	r3, [pc, #524]	; (80036d0 <JoystickLocationState+0x828>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef1 7a67 	vneg.f32	s15, s15
 80034cc:	eddf 6a81 	vldr	s13, [pc, #516]	; 80036d4 <JoystickLocationState+0x82c>
 80034d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d8:	4b7b      	ldr	r3, [pc, #492]	; (80036c8 <JoystickLocationState+0x820>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	4b79      	ldr	r3, [pc, #484]	; (80036c8 <JoystickLocationState+0x820>)
 80034e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*40)+PickTray.L1[1];
 80034e8:	4b79      	ldr	r3, [pc, #484]	; (80036d0 <JoystickLocationState+0x828>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80036d8 <JoystickLocationState+0x830>
 80034f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f6:	4b75      	ldr	r3, [pc, #468]	; (80036cc <JoystickLocationState+0x824>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eddf 6a75 	vldr	s13, [pc, #468]	; 80036d4 <JoystickLocationState+0x82c>
 8003500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003508:	4b6f      	ldr	r3, [pc, #444]	; (80036c8 <JoystickLocationState+0x820>)
 800350a:	edd3 7a01 	vldr	s15, [r3, #4]
 800350e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003512:	4b6d      	ldr	r3, [pc, #436]	; (80036c8 <JoystickLocationState+0x820>)
 8003514:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0];
 8003518:	4b6b      	ldr	r3, [pc, #428]	; (80036c8 <JoystickLocationState+0x820>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a6a      	ldr	r2, [pc, #424]	; (80036c8 <JoystickLocationState+0x820>)
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1];
 8003520:	4b69      	ldr	r3, [pc, #420]	; (80036c8 <JoystickLocationState+0x820>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a68      	ldr	r2, [pc, #416]	; (80036c8 <JoystickLocationState+0x820>)
 8003526:	65d3      	str	r3, [r2, #92]	; 0x5c
			PickTray.orientation = angle;
 8003528:	4b6c      	ldr	r3, [pc, #432]	; (80036dc <JoystickLocationState+0x834>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb61 	bl	8000bf8 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <JoystickLocationState+0x820>)
 800353a:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PickTray.origin_x * 10;
 800353c:	4b62      	ldr	r3, [pc, #392]	; (80036c8 <JoystickLocationState+0x820>)
 800353e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003542:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003546:	ee67 7a87 	vmul.f32	s15, s15, s14
 800354a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354e:	ee17 3a90 	vmov	r3, s15
 8003552:	b29a      	uxth	r2, r3
 8003554:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <JoystickLocationState+0x838>)
 8003556:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PickTray.origin_y * 10;
 800355a:	4b5b      	ldr	r3, [pc, #364]	; (80036c8 <JoystickLocationState+0x820>)
 800355c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003560:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003564:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	b29a      	uxth	r2, r3
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <JoystickLocationState+0x838>)
 8003574:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PickTray.orientation * 100;
 8003578:	4b53      	ldr	r3, [pc, #332]	; (80036c8 <JoystickLocationState+0x820>)
 800357a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800357e:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80036e4 <JoystickLocationState+0x83c>
 8003582:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003586:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358a:	ee17 3a90 	vmov	r3, s15
 800358e:	b29a      	uxth	r2, r3
 8003590:	4b53      	ldr	r3, [pc, #332]	; (80036e0 <JoystickLocationState+0x838>)
 8003592:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <JoystickLocationState+0x838>)
 8003598:	2200      	movs	r2, #0
 800359a:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 800359c:	e391      	b.n	8003cc2 <JoystickLocationState+0xe1a>
		else if (ResetButton.flag == 1)
 800359e:	4b52      	ldr	r3, [pc, #328]	; (80036e8 <JoystickLocationState+0x840>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	f040 838d 	bne.w	8003cc2 <JoystickLocationState+0xe1a>
			ResetButton.flag = 0;
 80035a8:	4b4f      	ldr	r3, [pc, #316]	; (80036e8 <JoystickLocationState+0x840>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	609a      	str	r2, [r3, #8]
			state = 1;
 80035ae:	4b4f      	ldr	r3, [pc, #316]	; (80036ec <JoystickLocationState+0x844>)
 80035b0:	2201      	movs	r2, #1
 80035b2:	601a      	str	r2, [r3, #0]
		break;
 80035b4:	e385      	b.n	8003cc2 <JoystickLocationState+0xe1a>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 80035b6:	4b4e      	ldr	r3, [pc, #312]	; (80036f0 <JoystickLocationState+0x848>)
 80035b8:	f04f 0200 	mov.w	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 80035be:	4b4c      	ldr	r3, [pc, #304]	; (80036f0 <JoystickLocationState+0x848>)
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 80035c6:	4b4a      	ldr	r3, [pc, #296]	; (80036f0 <JoystickLocationState+0x848>)
 80035c8:	f04f 0200 	mov.w	r2, #0
 80035cc:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 80035ce:	4b48      	ldr	r3, [pc, #288]	; (80036f0 <JoystickLocationState+0x848>)
 80035d0:	f04f 0200 	mov.w	r2, #0
 80035d4:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <JoystickLocationState+0x84c>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d143      	bne.n	8003666 <JoystickLocationState+0x7be>
		{
			if(registerFrame[68].U16 >= 30000)
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <JoystickLocationState+0x838>)
 80035e0:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80035e4:	f247 522f 	movw	r2, #29999	; 0x752f
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d912      	bls.n	8003612 <JoystickLocationState+0x76a>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 80035ec:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <JoystickLocationState+0x838>)
 80035ee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80035f2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80035f6:	4a40      	ldr	r2, [pc, #256]	; (80036f8 <JoystickLocationState+0x850>)
 80035f8:	fb82 1203 	smull	r1, r2, r2, r3
 80035fc:	1092      	asrs	r2, r2, #2
 80035fe:	17db      	asrs	r3, r3, #31
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	ee07 3a90 	vmov	s15, r3
 8003606:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800360a:	4b39      	ldr	r3, [pc, #228]	; (80036f0 <JoystickLocationState+0x848>)
 800360c:	edc3 7a00 	vstr	s15, [r3]
 8003610:	e00e      	b.n	8003630 <JoystickLocationState+0x788>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003612:	4b33      	ldr	r3, [pc, #204]	; (80036e0 <JoystickLocationState+0x838>)
 8003614:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003618:	4a38      	ldr	r2, [pc, #224]	; (80036fc <JoystickLocationState+0x854>)
 800361a:	fba2 2303 	umull	r2, r3, r2, r3
 800361e:	08db      	lsrs	r3, r3, #3
 8003620:	b29b      	uxth	r3, r3
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362a:	4b31      	ldr	r3, [pc, #196]	; (80036f0 <JoystickLocationState+0x848>)
 800362c:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8003630:	4b33      	ldr	r3, [pc, #204]	; (8003700 <JoystickLocationState+0x858>)
 8003632:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fc ff7c 	bl	8000534 <__aeabi_i2d>
 800363c:	a320      	add	r3, pc, #128	; (adr r3, 80036c0 <JoystickLocationState+0x818>)
 800363e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003642:	f7fc ffe1 	bl	8000608 <__aeabi_dmul>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	4610      	mov	r0, r2
 800364c:	4619      	mov	r1, r3
 800364e:	f7fd fad3 	bl	8000bf8 <__aeabi_d2f>
 8003652:	4603      	mov	r3, r0
 8003654:	4a26      	ldr	r2, [pc, #152]	; (80036f0 <JoystickLocationState+0x848>)
 8003656:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8003658:	4b26      	ldr	r3, [pc, #152]	; (80036f4 <JoystickLocationState+0x84c>)
 800365a:	2200      	movs	r2, #0
 800365c:	609a      	str	r2, [r3, #8]
			state = 4;
 800365e:	4b23      	ldr	r3, [pc, #140]	; (80036ec <JoystickLocationState+0x844>)
 8003660:	2204      	movs	r2, #4
 8003662:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003664:	e32f      	b.n	8003cc6 <JoystickLocationState+0xe1e>
		else if (ResetButton.flag == 1)
 8003666:	4b20      	ldr	r3, [pc, #128]	; (80036e8 <JoystickLocationState+0x840>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b01      	cmp	r3, #1
 800366c:	f040 832b 	bne.w	8003cc6 <JoystickLocationState+0xe1e>
			ResetButton.flag = 0;
 8003670:	4b1d      	ldr	r3, [pc, #116]	; (80036e8 <JoystickLocationState+0x840>)
 8003672:	2200      	movs	r2, #0
 8003674:	609a      	str	r2, [r3, #8]
			state = 1;
 8003676:	4b1d      	ldr	r3, [pc, #116]	; (80036ec <JoystickLocationState+0x844>)
 8003678:	2201      	movs	r2, #1
 800367a:	601a      	str	r2, [r3, #0]
		break;
 800367c:	e323      	b.n	8003cc6 <JoystickLocationState+0xe1e>

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 800367e:	4b1d      	ldr	r3, [pc, #116]	; (80036f4 <JoystickLocationState+0x84c>)
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b01      	cmp	r3, #1
 8003684:	f040 82e3 	bne.w	8003c4e <JoystickLocationState+0xda6>
		{
			if(registerFrame[68].U16 >= 30000)
 8003688:	4b15      	ldr	r3, [pc, #84]	; (80036e0 <JoystickLocationState+0x838>)
 800368a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800368e:	f247 522f 	movw	r2, #29999	; 0x752f
 8003692:	4293      	cmp	r3, r2
 8003694:	d936      	bls.n	8003704 <JoystickLocationState+0x85c>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003696:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <JoystickLocationState+0x838>)
 8003698:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800369c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80036a0:	4a15      	ldr	r2, [pc, #84]	; (80036f8 <JoystickLocationState+0x850>)
 80036a2:	fb82 1203 	smull	r1, r2, r2, r3
 80036a6:	1092      	asrs	r2, r2, #2
 80036a8:	17db      	asrs	r3, r3, #31
 80036aa:	1ad3      	subs	r3, r2, r3
 80036ac:	ee07 3a90 	vmov	s15, r3
 80036b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <JoystickLocationState+0x848>)
 80036b6:	edc3 7a02 	vstr	s15, [r3, #8]
 80036ba:	e032      	b.n	8003722 <JoystickLocationState+0x87a>
 80036bc:	f3af 8000 	nop.w
 80036c0:	70a3d70a 	.word	0x70a3d70a
 80036c4:	3fa70a3d 	.word	0x3fa70a3d
 80036c8:	200009e4 	.word	0x200009e4
 80036cc:	20000ac8 	.word	0x20000ac8
 80036d0:	20000acc 	.word	0x20000acc
 80036d4:	42200000 	.word	0x42200000
 80036d8:	42480000 	.word	0x42480000
 80036dc:	20000ac0 	.word	0x20000ac0
 80036e0:	20001000 	.word	0x20001000
 80036e4:	42c80000 	.word	0x42c80000
 80036e8:	20000adc 	.word	0x20000adc
 80036ec:	20000224 	.word	0x20000224
 80036f0:	20000a48 	.word	0x20000a48
 80036f4:	20000ad0 	.word	0x20000ad0
 80036f8:	66666667 	.word	0x66666667
 80036fc:	cccccccd 	.word	0xcccccccd
 8003700:	200009ac 	.word	0x200009ac
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003704:	4bd6      	ldr	r3, [pc, #856]	; (8003a60 <JoystickLocationState+0xbb8>)
 8003706:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800370a:	4ad6      	ldr	r2, [pc, #856]	; (8003a64 <JoystickLocationState+0xbbc>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	08db      	lsrs	r3, r3, #3
 8003712:	b29b      	uxth	r3, r3
 8003714:	ee07 3a90 	vmov	s15, r3
 8003718:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800371c:	4bd2      	ldr	r3, [pc, #840]	; (8003a68 <JoystickLocationState+0xbc0>)
 800371e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003722:	4bd2      	ldr	r3, [pc, #840]	; (8003a6c <JoystickLocationState+0xbc4>)
 8003724:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003728:	4618      	mov	r0, r3
 800372a:	f7fc ff03 	bl	8000534 <__aeabi_i2d>
 800372e:	a3ca      	add	r3, pc, #808	; (adr r3, 8003a58 <JoystickLocationState+0xbb0>)
 8003730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003734:	f7fc ff68 	bl	8000608 <__aeabi_dmul>
 8003738:	4602      	mov	r2, r0
 800373a:	460b      	mov	r3, r1
 800373c:	4610      	mov	r0, r2
 800373e:	4619      	mov	r1, r3
 8003740:	f7fd fa5a 	bl	8000bf8 <__aeabi_d2f>
 8003744:	4603      	mov	r3, r0
 8003746:	4ac8      	ldr	r2, [pc, #800]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003748:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800374a:	4bc9      	ldr	r3, [pc, #804]	; (8003a70 <JoystickLocationState+0xbc8>)
 800374c:	2200      	movs	r2, #0
 800374e:	609a      	str	r2, [r3, #8]

			DeltaX = PlaceTray.L2[0]-PlaceTray.L1[0];
 8003750:	4bc5      	ldr	r3, [pc, #788]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003752:	ed93 7a02 	vldr	s14, [r3, #8]
 8003756:	4bc4      	ldr	r3, [pc, #784]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003760:	ee17 0a90 	vmov	r0, s15
 8003764:	f7fc fef8 	bl	8000558 <__aeabi_f2d>
 8003768:	4602      	mov	r2, r0
 800376a:	460b      	mov	r3, r1
 800376c:	49c1      	ldr	r1, [pc, #772]	; (8003a74 <JoystickLocationState+0xbcc>)
 800376e:	e9c1 2300 	strd	r2, r3, [r1]
			DeltaY = PlaceTray.L2[1]-PlaceTray.L1[1];
 8003772:	4bbd      	ldr	r3, [pc, #756]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003774:	ed93 7a03 	vldr	s14, [r3, #12]
 8003778:	4bbb      	ldr	r3, [pc, #748]	; (8003a68 <JoystickLocationState+0xbc0>)
 800377a:	edd3 7a01 	vldr	s15, [r3, #4]
 800377e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003782:	ee17 0a90 	vmov	r0, s15
 8003786:	f7fc fee7 	bl	8000558 <__aeabi_f2d>
 800378a:	4602      	mov	r2, r0
 800378c:	460b      	mov	r3, r1
 800378e:	49ba      	ldr	r1, [pc, #744]	; (8003a78 <JoystickLocationState+0xbd0>)
 8003790:	e9c1 2300 	strd	r2, r3, [r1]
			angle = atan2(DeltaY, DeltaX);
 8003794:	4bb8      	ldr	r3, [pc, #736]	; (8003a78 <JoystickLocationState+0xbd0>)
 8003796:	ed93 7b00 	vldr	d7, [r3]
 800379a:	4bb6      	ldr	r3, [pc, #728]	; (8003a74 <JoystickLocationState+0xbcc>)
 800379c:	ed93 6b00 	vldr	d6, [r3]
 80037a0:	eeb0 1a46 	vmov.f32	s2, s12
 80037a4:	eef0 1a66 	vmov.f32	s3, s13
 80037a8:	eeb0 0a47 	vmov.f32	s0, s14
 80037ac:	eef0 0a67 	vmov.f32	s1, s15
 80037b0:	f00d fc1e 	bl	8010ff0 <atan2>
 80037b4:	eeb0 7a40 	vmov.f32	s14, s0
 80037b8:	eef0 7a60 	vmov.f32	s15, s1
 80037bc:	4baf      	ldr	r3, [pc, #700]	; (8003a7c <JoystickLocationState+0xbd4>)
 80037be:	ed83 7b00 	vstr	d7, [r3]

			cos_Theta = cos(angle);
 80037c2:	4bae      	ldr	r3, [pc, #696]	; (8003a7c <JoystickLocationState+0xbd4>)
 80037c4:	ed93 7b00 	vldr	d7, [r3]
 80037c8:	eeb0 0a47 	vmov.f32	s0, s14
 80037cc:	eef0 0a67 	vmov.f32	s1, s15
 80037d0:	f00d fb62 	bl	8010e98 <cos>
 80037d4:	ec53 2b10 	vmov	r2, r3, d0
 80037d8:	4610      	mov	r0, r2
 80037da:	4619      	mov	r1, r3
 80037dc:	f7fd fa0c 	bl	8000bf8 <__aeabi_d2f>
 80037e0:	4603      	mov	r3, r0
 80037e2:	4aa7      	ldr	r2, [pc, #668]	; (8003a80 <JoystickLocationState+0xbd8>)
 80037e4:	6013      	str	r3, [r2, #0]
			sin_Theta = sin(angle);
 80037e6:	4ba5      	ldr	r3, [pc, #660]	; (8003a7c <JoystickLocationState+0xbd4>)
 80037e8:	ed93 7b00 	vldr	d7, [r3]
 80037ec:	eeb0 0a47 	vmov.f32	s0, s14
 80037f0:	eef0 0a67 	vmov.f32	s1, s15
 80037f4:	f00d fba4 	bl	8010f40 <sin>
 80037f8:	ec53 2b10 	vmov	r2, r3, d0
 80037fc:	4610      	mov	r0, r2
 80037fe:	4619      	mov	r1, r3
 8003800:	f7fd f9fa 	bl	8000bf8 <__aeabi_d2f>
 8003804:	4603      	mov	r3, r0
 8003806:	4a9f      	ldr	r2, [pc, #636]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003808:	6013      	str	r3, [r2, #0]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*10)+PlaceTray.L1[0];
 800380a:	4b9d      	ldr	r3, [pc, #628]	; (8003a80 <JoystickLocationState+0xbd8>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003818:	4b9a      	ldr	r3, [pc, #616]	; (8003a84 <JoystickLocationState+0xbdc>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	eef1 7a67 	vneg.f32	s15, s15
 8003822:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003826:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800382a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800382e:	4b8e      	ldr	r3, [pc, #568]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003830:	edd3 7a00 	vldr	s15, [r3]
 8003834:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003838:	4b8b      	ldr	r3, [pc, #556]	; (8003a68 <JoystickLocationState+0xbc0>)
 800383a:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*10)+PlaceTray.L1[1];
 800383e:	4b91      	ldr	r3, [pc, #580]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003840:	edd3 7a00 	vldr	s15, [r3]
 8003844:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003848:	ee27 7a87 	vmul.f32	s14, s15, s14
 800384c:	4b8c      	ldr	r3, [pc, #560]	; (8003a80 <JoystickLocationState+0xbd8>)
 800384e:	edd3 7a00 	vldr	s15, [r3]
 8003852:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003856:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800385a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385e:	4b82      	ldr	r3, [pc, #520]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003860:	edd3 7a01 	vldr	s15, [r3, #4]
 8003864:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003868:	4b7f      	ldr	r3, [pc, #508]	; (8003a68 <JoystickLocationState+0xbc0>)
 800386a:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*10)+PlaceTray.L1[0];
 800386e:	4b84      	ldr	r3, [pc, #528]	; (8003a80 <JoystickLocationState+0xbd8>)
 8003870:	edd3 7a00 	vldr	s15, [r3]
 8003874:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003878:	ee27 7a87 	vmul.f32	s14, s15, s14
 800387c:	4b81      	ldr	r3, [pc, #516]	; (8003a84 <JoystickLocationState+0xbdc>)
 800387e:	edd3 7a00 	vldr	s15, [r3]
 8003882:	eef1 7a67 	vneg.f32	s15, s15
 8003886:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800388a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800388e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003892:	4b75      	ldr	r3, [pc, #468]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003894:	edd3 7a00 	vldr	s15, [r3]
 8003898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800389c:	4b72      	ldr	r3, [pc, #456]	; (8003a68 <JoystickLocationState+0xbc0>)
 800389e:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*10)+PlaceTray.L1[1];
 80038a2:	4b78      	ldr	r3, [pc, #480]	; (8003a84 <JoystickLocationState+0xbdc>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80038ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038b0:	4b73      	ldr	r3, [pc, #460]	; (8003a80 <JoystickLocationState+0xbd8>)
 80038b2:	edd3 7a00 	vldr	s15, [r3]
 80038b6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038c2:	4b69      	ldr	r3, [pc, #420]	; (8003a68 <JoystickLocationState+0xbc0>)
 80038c4:	edd3 7a01 	vldr	s15, [r3, #4]
 80038c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038cc:	4b66      	ldr	r3, [pc, #408]	; (8003a68 <JoystickLocationState+0xbc0>)
 80038ce:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*10)+PlaceTray.L1[0];
 80038d2:	4b6b      	ldr	r3, [pc, #428]	; (8003a80 <JoystickLocationState+0xbd8>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8003a88 <JoystickLocationState+0xbe0>
 80038dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038e0:	4b68      	ldr	r3, [pc, #416]	; (8003a84 <JoystickLocationState+0xbdc>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	eef1 7a67 	vneg.f32	s15, s15
 80038ea:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038f6:	4b5c      	ldr	r3, [pc, #368]	; (8003a68 <JoystickLocationState+0xbc0>)
 80038f8:	edd3 7a00 	vldr	s15, [r3]
 80038fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003900:	4b59      	ldr	r3, [pc, #356]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003902:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*10)+PlaceTray.L1[1];
 8003906:	4b5f      	ldr	r3, [pc, #380]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003a88 <JoystickLocationState+0xbe0>
 8003910:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003914:	4b5a      	ldr	r3, [pc, #360]	; (8003a80 <JoystickLocationState+0xbd8>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800391e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003922:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003926:	4b50      	ldr	r3, [pc, #320]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003928:	edd3 7a01 	vldr	s15, [r3, #4]
 800392c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003930:	4b4d      	ldr	r3, [pc, #308]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003932:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*25)+PlaceTray.L1[0];
 8003936:	4b52      	ldr	r3, [pc, #328]	; (8003a80 <JoystickLocationState+0xbd8>)
 8003938:	edd3 7a00 	vldr	s15, [r3]
 800393c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003940:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003944:	4b4f      	ldr	r3, [pc, #316]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	eef1 7a67 	vneg.f32	s15, s15
 800394e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003952:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003956:	ee37 7a27 	vadd.f32	s14, s14, s15
 800395a:	4b43      	ldr	r3, [pc, #268]	; (8003a68 <JoystickLocationState+0xbc0>)
 800395c:	edd3 7a00 	vldr	s15, [r3]
 8003960:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003964:	4b40      	ldr	r3, [pc, #256]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003966:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*25)+PlaceTray.L1[1];
 800396a:	4b46      	ldr	r3, [pc, #280]	; (8003a84 <JoystickLocationState+0xbdc>)
 800396c:	edd3 7a00 	vldr	s15, [r3]
 8003970:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <JoystickLocationState+0xbd8>)
 800397a:	edd3 7a00 	vldr	s15, [r3]
 800397e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003982:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003986:	ee37 7a27 	vadd.f32	s14, s14, s15
 800398a:	4b37      	ldr	r3, [pc, #220]	; (8003a68 <JoystickLocationState+0xbc0>)
 800398c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003994:	4b34      	ldr	r3, [pc, #208]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003996:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*25)+PlaceTray.L1[0];
 800399a:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <JoystickLocationState+0xbd8>)
 800399c:	edd3 7a00 	vldr	s15, [r3]
 80039a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80039a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039a8:	4b36      	ldr	r3, [pc, #216]	; (8003a84 <JoystickLocationState+0xbdc>)
 80039aa:	edd3 7a00 	vldr	s15, [r3]
 80039ae:	eef1 7a67 	vneg.f32	s15, s15
 80039b2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039be:	4b2a      	ldr	r3, [pc, #168]	; (8003a68 <JoystickLocationState+0xbc0>)
 80039c0:	edd3 7a00 	vldr	s15, [r3]
 80039c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c8:	4b27      	ldr	r3, [pc, #156]	; (8003a68 <JoystickLocationState+0xbc0>)
 80039ca:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*25)+PlaceTray.L1[1];
 80039ce:	4b2d      	ldr	r3, [pc, #180]	; (8003a84 <JoystickLocationState+0xbdc>)
 80039d0:	edd3 7a00 	vldr	s15, [r3]
 80039d4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80039d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039dc:	4b28      	ldr	r3, [pc, #160]	; (8003a80 <JoystickLocationState+0xbd8>)
 80039de:	edd3 7a00 	vldr	s15, [r3]
 80039e2:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ee:	4b1e      	ldr	r3, [pc, #120]	; (8003a68 <JoystickLocationState+0xbc0>)
 80039f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80039f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f8:	4b1b      	ldr	r3, [pc, #108]	; (8003a68 <JoystickLocationState+0xbc0>)
 80039fa:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*25)+PlaceTray.L1[0];
 80039fe:	4b20      	ldr	r3, [pc, #128]	; (8003a80 <JoystickLocationState+0xbd8>)
 8003a00:	edd3 7a00 	vldr	s15, [r3]
 8003a04:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8003a88 <JoystickLocationState+0xbe0>
 8003a08:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a0c:	4b1d      	ldr	r3, [pc, #116]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003a0e:	edd3 7a00 	vldr	s15, [r3]
 8003a12:	eef1 7a67 	vneg.f32	s15, s15
 8003a16:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a22:	4b11      	ldr	r3, [pc, #68]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003a24:	edd3 7a00 	vldr	s15, [r3]
 8003a28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a2c:	4b0e      	ldr	r3, [pc, #56]	; (8003a68 <JoystickLocationState+0xbc0>)
 8003a2e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*25)+PlaceTray.L1[1];
 8003a32:	4b14      	ldr	r3, [pc, #80]	; (8003a84 <JoystickLocationState+0xbdc>)
 8003a34:	edd3 7a00 	vldr	s15, [r3]
 8003a38:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8003a88 <JoystickLocationState+0xbe0>
 8003a3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <JoystickLocationState+0xbd8>)
 8003a42:	edd3 7a00 	vldr	s15, [r3]
 8003a46:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a52:	e01b      	b.n	8003a8c <JoystickLocationState+0xbe4>
 8003a54:	f3af 8000 	nop.w
 8003a58:	70a3d70a 	.word	0x70a3d70a
 8003a5c:	3fa70a3d 	.word	0x3fa70a3d
 8003a60:	20001000 	.word	0x20001000
 8003a64:	cccccccd 	.word	0xcccccccd
 8003a68:	20000a48 	.word	0x20000a48
 8003a6c:	200009ac 	.word	0x200009ac
 8003a70:	20000ad0 	.word	0x20000ad0
 8003a74:	20000ab0 	.word	0x20000ab0
 8003a78:	20000ab8 	.word	0x20000ab8
 8003a7c:	20000ac0 	.word	0x20000ac0
 8003a80:	20000ac8 	.word	0x20000ac8
 8003a84:	20000acc 	.word	0x20000acc
 8003a88:	42480000 	.word	0x42480000
 8003a8c:	4b91      	ldr	r3, [pc, #580]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003a8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a96:	4b8f      	ldr	r3, [pc, #572]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003a98:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003a9c:	4b8e      	ldr	r3, [pc, #568]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003a9e:	edd3 7a00 	vldr	s15, [r3]
 8003aa2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aa6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003aaa:	4b8c      	ldr	r3, [pc, #560]	; (8003cdc <JoystickLocationState+0xe34>)
 8003aac:	edd3 7a00 	vldr	s15, [r3]
 8003ab0:	eef1 7a67 	vneg.f32	s15, s15
 8003ab4:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8003ce0 <JoystickLocationState+0xe38>
 8003ab8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ac0:	4b84      	ldr	r3, [pc, #528]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003ac2:	edd3 7a00 	vldr	s15, [r3]
 8003ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003aca:	4b82      	ldr	r3, [pc, #520]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003acc:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*40)+PlaceTray.L1[1];
 8003ad0:	4b82      	ldr	r3, [pc, #520]	; (8003cdc <JoystickLocationState+0xe34>)
 8003ad2:	edd3 7a00 	vldr	s15, [r3]
 8003ad6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ada:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ade:	4b7e      	ldr	r3, [pc, #504]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003ae0:	edd3 7a00 	vldr	s15, [r3]
 8003ae4:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003ce0 <JoystickLocationState+0xe38>
 8003ae8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af0:	4b78      	ldr	r3, [pc, #480]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003af2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afa:	4b76      	ldr	r3, [pc, #472]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003afc:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003b00:	4b75      	ldr	r3, [pc, #468]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003b02:	edd3 7a00 	vldr	s15, [r3]
 8003b06:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b0e:	4b73      	ldr	r3, [pc, #460]	; (8003cdc <JoystickLocationState+0xe34>)
 8003b10:	edd3 7a00 	vldr	s15, [r3]
 8003b14:	eef1 7a67 	vneg.f32	s15, s15
 8003b18:	eddf 6a71 	vldr	s13, [pc, #452]	; 8003ce0 <JoystickLocationState+0xe38>
 8003b1c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b24:	4b6b      	ldr	r3, [pc, #428]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b26:	edd3 7a00 	vldr	s15, [r3]
 8003b2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2e:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b30:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*40)+PlaceTray.L1[1];
 8003b34:	4b69      	ldr	r3, [pc, #420]	; (8003cdc <JoystickLocationState+0xe34>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b3e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b42:	4b65      	ldr	r3, [pc, #404]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003b44:	edd3 7a00 	vldr	s15, [r3]
 8003b48:	eddf 6a65 	vldr	s13, [pc, #404]	; 8003ce0 <JoystickLocationState+0xe38>
 8003b4c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b54:	4b5f      	ldr	r3, [pc, #380]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5e:	4b5d      	ldr	r3, [pc, #372]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b60:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003b64:	4b5c      	ldr	r3, [pc, #368]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8003ce4 <JoystickLocationState+0xe3c>
 8003b6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b72:	4b5a      	ldr	r3, [pc, #360]	; (8003cdc <JoystickLocationState+0xe34>)
 8003b74:	edd3 7a00 	vldr	s15, [r3]
 8003b78:	eef1 7a67 	vneg.f32	s15, s15
 8003b7c:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003ce0 <JoystickLocationState+0xe38>
 8003b80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b84:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b88:	4b52      	ldr	r3, [pc, #328]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b8a:	edd3 7a00 	vldr	s15, [r3]
 8003b8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b92:	4b50      	ldr	r3, [pc, #320]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003b94:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*40)+PlaceTray.L1[1];
 8003b98:	4b50      	ldr	r3, [pc, #320]	; (8003cdc <JoystickLocationState+0xe34>)
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8003ce4 <JoystickLocationState+0xe3c>
 8003ba2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ba6:	4b4c      	ldr	r3, [pc, #304]	; (8003cd8 <JoystickLocationState+0xe30>)
 8003ba8:	edd3 7a00 	vldr	s15, [r3]
 8003bac:	eddf 6a4c 	vldr	s13, [pc, #304]	; 8003ce0 <JoystickLocationState+0xe38>
 8003bb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bb4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb8:	4b46      	ldr	r3, [pc, #280]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bba:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bc4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0];
 8003bc8:	4b42      	ldr	r3, [pc, #264]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	4a41      	ldr	r2, [pc, #260]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bce:	6593      	str	r3, [r2, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1];
 8003bd0:	4b40      	ldr	r3, [pc, #256]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a3f      	ldr	r2, [pc, #252]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bd6:	65d3      	str	r3, [r2, #92]	; 0x5c
			PlaceTray.orientation = angle;
 8003bd8:	4b43      	ldr	r3, [pc, #268]	; (8003ce8 <JoystickLocationState+0xe40>)
 8003bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bde:	4610      	mov	r0, r2
 8003be0:	4619      	mov	r1, r3
 8003be2:	f7fd f809 	bl	8000bf8 <__aeabi_d2f>
 8003be6:	4603      	mov	r3, r0
 8003be8:	4a3a      	ldr	r2, [pc, #232]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bea:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003bec:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003bee:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003bf2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bf6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003bfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003bfe:	ee17 3a90 	vmov	r3, s15
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	4b39      	ldr	r3, [pc, #228]	; (8003cec <JoystickLocationState+0xe44>)
 8003c06:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003c0a:	4b32      	ldr	r3, [pc, #200]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003c0c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003c10:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c14:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c1c:	ee17 3a90 	vmov	r3, s15
 8003c20:	b29a      	uxth	r2, r3
 8003c22:	4b32      	ldr	r3, [pc, #200]	; (8003cec <JoystickLocationState+0xe44>)
 8003c24:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003c28:	4b2a      	ldr	r3, [pc, #168]	; (8003cd4 <JoystickLocationState+0xe2c>)
 8003c2a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003c2e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003cf0 <JoystickLocationState+0xe48>
 8003c32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c3a:	ee17 3a90 	vmov	r3, s15
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	4b2a      	ldr	r3, [pc, #168]	; (8003cec <JoystickLocationState+0xe44>)
 8003c42:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003c46:	4b29      	ldr	r3, [pc, #164]	; (8003cec <JoystickLocationState+0xe44>)
 8003c48:	2200      	movs	r2, #0
 8003c4a:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003c4c:	e03d      	b.n	8003cca <JoystickLocationState+0xe22>
		else if (ResetButton.flag == 1)
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <JoystickLocationState+0xe4c>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d139      	bne.n	8003cca <JoystickLocationState+0xe22>
			ResetButton.flag = 0;
 8003c56:	4b27      	ldr	r3, [pc, #156]	; (8003cf4 <JoystickLocationState+0xe4c>)
 8003c58:	2200      	movs	r2, #0
 8003c5a:	609a      	str	r2, [r3, #8]
			state = 1;
 8003c5c:	4b26      	ldr	r3, [pc, #152]	; (8003cf8 <JoystickLocationState+0xe50>)
 8003c5e:	2201      	movs	r2, #1
 8003c60:	601a      	str	r2, [r3, #0]
		break;
 8003c62:	e032      	b.n	8003cca <JoystickLocationState+0xe22>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003c64:	4b25      	ldr	r3, [pc, #148]	; (8003cfc <JoystickLocationState+0xe54>)
 8003c66:	2202      	movs	r2, #2
 8003c68:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003c6a:	4b20      	ldr	r3, [pc, #128]	; (8003cec <JoystickLocationState+0xe44>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003c70:	4b23      	ldr	r3, [pc, #140]	; (8003d00 <JoystickLocationState+0xe58>)
 8003c72:	2201      	movs	r2, #1
 8003c74:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003c76:	f7fe fcff 	bl	8002678 <EndEffectorWrite>

		HAL_Delay(100);
 8003c7a:	2064      	movs	r0, #100	; 0x64
 8003c7c:	f001 fa7e 	bl	800517c <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003c80:	4b1e      	ldr	r3, [pc, #120]	; (8003cfc <JoystickLocationState+0xe54>)
 8003c82:	2203      	movs	r2, #3
 8003c84:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003c86:	4b19      	ldr	r3, [pc, #100]	; (8003cec <JoystickLocationState+0xe44>)
 8003c88:	2202      	movs	r2, #2
 8003c8a:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003c8c:	4b1c      	ldr	r3, [pc, #112]	; (8003d00 <JoystickLocationState+0xe58>)
 8003c8e:	2201      	movs	r2, #1
 8003c90:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003c92:	f7fe fcf1 	bl	8002678 <EndEffectorWrite>

		HAL_Delay(100);
 8003c96:	2064      	movs	r0, #100	; 0x64
 8003c98:	f001 fa70 	bl	800517c <HAL_Delay>

		state = 1;
 8003c9c:	4b16      	ldr	r3, [pc, #88]	; (8003cf8 <JoystickLocationState+0xe50>)
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003ca2:	4b18      	ldr	r3, [pc, #96]	; (8003d04 <JoystickLocationState+0xe5c>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003ca8:	4b12      	ldr	r3, [pc, #72]	; (8003cf4 <JoystickLocationState+0xe4c>)
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d10e      	bne.n	8003cce <JoystickLocationState+0xe26>
		{
			ResetButton.flag = 0;
 8003cb0:	4b10      	ldr	r3, [pc, #64]	; (8003cf4 <JoystickLocationState+0xe4c>)
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	609a      	str	r2, [r3, #8]
			state = 1;
 8003cb6:	4b10      	ldr	r3, [pc, #64]	; (8003cf8 <JoystickLocationState+0xe50>)
 8003cb8:	2201      	movs	r2, #1
 8003cba:	601a      	str	r2, [r3, #0]
		}
		break;
 8003cbc:	e007      	b.n	8003cce <JoystickLocationState+0xe26>
		break;
 8003cbe:	bf00      	nop
 8003cc0:	e006      	b.n	8003cd0 <JoystickLocationState+0xe28>
		break;
 8003cc2:	bf00      	nop
 8003cc4:	e004      	b.n	8003cd0 <JoystickLocationState+0xe28>
		break;
 8003cc6:	bf00      	nop
 8003cc8:	e002      	b.n	8003cd0 <JoystickLocationState+0xe28>
		break;
 8003cca:	bf00      	nop
 8003ccc:	e000      	b.n	8003cd0 <JoystickLocationState+0xe28>
		break;
 8003cce:	bf00      	nop
	}
}
 8003cd0:	bf00      	nop
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	20000a48 	.word	0x20000a48
 8003cd8:	20000ac8 	.word	0x20000ac8
 8003cdc:	20000acc 	.word	0x20000acc
 8003ce0:	42200000 	.word	0x42200000
 8003ce4:	42480000 	.word	0x42480000
 8003ce8:	20000ac0 	.word	0x20000ac0
 8003cec:	20001000 	.word	0x20001000
 8003cf0:	42c80000 	.word	0x42c80000
 8003cf4:	20000adc 	.word	0x20000adc
 8003cf8:	20000224 	.word	0x20000224
 8003cfc:	20000b20 	.word	0x20000b20
 8003d00:	20000b18 	.word	0x20000b18
 8003d04:	20000200 	.word	0x20000200

08003d08 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b082      	sub	sp, #8
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a06      	ldr	r2, [pc, #24]	; (8003d2c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d105      	bne.n	8003d24 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2b03      	cmp	r3, #3
 8003d1e:	d101      	bne.n	8003d24 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 8003d20:	f000 f80a 	bl	8003d38 <TrajectoryGenerator>
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 8003d24:	bf00      	nop
 8003d26:	3708      	adds	r7, #8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	200006b4 	.word	0x200006b4
 8003d30:	20000200 	.word	0x20000200
 8003d34:	00000000 	.word	0x00000000

08003d38 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003d38:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d3c:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8003d3e:	4b93      	ldr	r3, [pc, #588]	; (8003f8c <TrajectoryGenerator+0x254>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	2b03      	cmp	r3, #3
 8003d44:	f200 8519 	bhi.w	800477a <TrajectoryGenerator+0xa42>
 8003d48:	a201      	add	r2, pc, #4	; (adr r2, 8003d50 <TrajectoryGenerator+0x18>)
 8003d4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4e:	bf00      	nop
 8003d50:	08003d61 	.word	0x08003d61
 8003d54:	08003fd5 	.word	0x08003fd5
 8003d58:	08004315 	.word	0x08004315
 8003d5c:	08004779 	.word	0x08004779
	{
	case 0: //initial Condition & Case Check
			qi = position;
 8003d60:	4b8b      	ldr	r3, [pc, #556]	; (8003f90 <TrajectoryGenerator+0x258>)
 8003d62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d6e:	4b89      	ldr	r3, [pc, #548]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003d70:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 8003d74:	4b88      	ldr	r3, [pc, #544]	; (8003f98 <TrajectoryGenerator+0x260>)
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
			qd_max = 22222;  //1000 pulse/s
 8003d7c:	4b87      	ldr	r3, [pc, #540]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003d7e:	4a88      	ldr	r2, [pc, #544]	; (8003fa0 <TrajectoryGenerator+0x268>)
 8003d80:	601a      	str	r2, [r3, #0]
			qdd_max = 55555; //3000 pulse/s^2 /0.045
 8003d82:	4b88      	ldr	r3, [pc, #544]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003d84:	4a88      	ldr	r2, [pc, #544]	; (8003fa8 <TrajectoryGenerator+0x270>)
 8003d86:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 8003d88:	4b88      	ldr	r3, [pc, #544]	; (8003fac <TrajectoryGenerator+0x274>)
 8003d8a:	ed93 7a00 	vldr	s14, [r3]
 8003d8e:	4b81      	ldr	r3, [pc, #516]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003d90:	edd3 7a00 	vldr	s15, [r3]
 8003d94:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d9c:	dd16      	ble.n	8003dcc <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003d9e:	4b83      	ldr	r3, [pc, #524]	; (8003fac <TrajectoryGenerator+0x274>)
 8003da0:	ed93 7a00 	vldr	s14, [r3]
 8003da4:	4b7b      	ldr	r3, [pc, #492]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dae:	4b7d      	ldr	r3, [pc, #500]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003db8:	eeb0 0a66 	vmov.f32	s0, s13
 8003dbc:	f00d f91a 	bl	8010ff4 <sqrtf>
 8003dc0:	eef0 7a40 	vmov.f32	s15, s0
 8003dc4:	4b7a      	ldr	r3, [pc, #488]	; (8003fb0 <TrajectoryGenerator+0x278>)
 8003dc6:	edc3 7a00 	vstr	s15, [r3]
 8003dca:	e022      	b.n	8003e12 <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003dcc:	4b77      	ldr	r3, [pc, #476]	; (8003fac <TrajectoryGenerator+0x274>)
 8003dce:	ed93 7a00 	vldr	s14, [r3]
 8003dd2:	4b70      	ldr	r3, [pc, #448]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003dd4:	edd3 7a00 	vldr	s15, [r3]
 8003dd8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003ddc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003de0:	d517      	bpl.n	8003e12 <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003de2:	4b72      	ldr	r3, [pc, #456]	; (8003fac <TrajectoryGenerator+0x274>)
 8003de4:	ed93 7a00 	vldr	s14, [r3]
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003dea:	edd3 7a00 	vldr	s15, [r3]
 8003dee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003df2:	eeb1 7a67 	vneg.f32	s14, s15
 8003df6:	4b6b      	ldr	r3, [pc, #428]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003df8:	edd3 7a00 	vldr	s15, [r3]
 8003dfc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e00:	eeb0 0a66 	vmov.f32	s0, s13
 8003e04:	f00d f8f6 	bl	8010ff4 <sqrtf>
 8003e08:	eef0 7a40 	vmov.f32	s15, s0
 8003e0c:	4b68      	ldr	r3, [pc, #416]	; (8003fb0 <TrajectoryGenerator+0x278>)
 8003e0e:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8003e12:	4b66      	ldr	r3, [pc, #408]	; (8003fac <TrajectoryGenerator+0x274>)
 8003e14:	ed93 7a00 	vldr	s14, [r3]
 8003e18:	4b5e      	ldr	r3, [pc, #376]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003e1a:	edd3 7a00 	vldr	s15, [r3]
 8003e1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e22:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e2a:	d50f      	bpl.n	8003e4c <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003e2c:	4b5b      	ldr	r3, [pc, #364]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003e2e:	edd3 7a00 	vldr	s15, [r3]
 8003e32:	eef1 7a67 	vneg.f32	s15, s15
 8003e36:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003e38:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8003e3c:	4b59      	ldr	r3, [pc, #356]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	eef1 7a67 	vneg.f32	s15, s15
 8003e46:	4b57      	ldr	r3, [pc, #348]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003e48:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 8003e4c:	4b53      	ldr	r3, [pc, #332]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003e4e:	ed93 7a00 	vldr	s14, [r3]
 8003e52:	4b51      	ldr	r3, [pc, #324]	; (8003f98 <TrajectoryGenerator+0x260>)
 8003e54:	edd3 7a00 	vldr	s15, [r3]
 8003e58:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e5c:	4b51      	ldr	r3, [pc, #324]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003e5e:	ed93 7a00 	vldr	s14, [r3]
 8003e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e66:	4b53      	ldr	r3, [pc, #332]	; (8003fb4 <TrajectoryGenerator+0x27c>)
 8003e68:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003e6c:	4b4a      	ldr	r3, [pc, #296]	; (8003f98 <TrajectoryGenerator+0x260>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	4b50      	ldr	r3, [pc, #320]	; (8003fb4 <TrajectoryGenerator+0x27c>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e7c:	ee17 0a90 	vmov	r0, s15
 8003e80:	f7fc fb6a 	bl	8000558 <__aeabi_f2d>
 8003e84:	4604      	mov	r4, r0
 8003e86:	460d      	mov	r5, r1
 8003e88:	4b46      	ldr	r3, [pc, #280]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fb63 	bl	8000558 <__aeabi_f2d>
 8003e92:	f04f 0200 	mov.w	r2, #0
 8003e96:	4b48      	ldr	r3, [pc, #288]	; (8003fb8 <TrajectoryGenerator+0x280>)
 8003e98:	f7fc fbb6 	bl	8000608 <__aeabi_dmul>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	4690      	mov	r8, r2
 8003ea2:	4699      	mov	r9, r3
 8003ea4:	4b43      	ldr	r3, [pc, #268]	; (8003fb4 <TrajectoryGenerator+0x27c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f7fc fb55 	bl	8000558 <__aeabi_f2d>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	4640      	mov	r0, r8
 8003eb4:	4649      	mov	r1, r9
 8003eb6:	f7fc fba7 	bl	8000608 <__aeabi_dmul>
 8003eba:	4602      	mov	r2, r0
 8003ebc:	460b      	mov	r3, r1
 8003ebe:	4690      	mov	r8, r2
 8003ec0:	4699      	mov	r9, r3
 8003ec2:	4b3c      	ldr	r3, [pc, #240]	; (8003fb4 <TrajectoryGenerator+0x27c>)
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7fc fb46 	bl	8000558 <__aeabi_f2d>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	460b      	mov	r3, r1
 8003ed0:	4640      	mov	r0, r8
 8003ed2:	4649      	mov	r1, r9
 8003ed4:	f7fc fb98 	bl	8000608 <__aeabi_dmul>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc f9dc 	bl	800029c <__adddf3>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f7fc fe84 	bl	8000bf8 <__aeabi_d2f>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	4a32      	ldr	r2, [pc, #200]	; (8003fbc <TrajectoryGenerator+0x284>)
 8003ef4:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 8003ef6:	4b31      	ldr	r3, [pc, #196]	; (8003fbc <TrajectoryGenerator+0x284>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a31      	ldr	r2, [pc, #196]	; (8003fc0 <TrajectoryGenerator+0x288>)
 8003efc:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003efe:	4b2b      	ldr	r3, [pc, #172]	; (8003fac <TrajectoryGenerator+0x274>)
 8003f00:	ed93 7a00 	vldr	s14, [r3]
 8003f04:	4b23      	ldr	r3, [pc, #140]	; (8003f94 <TrajectoryGenerator+0x25c>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f0e:	4b2b      	ldr	r3, [pc, #172]	; (8003fbc <TrajectoryGenerator+0x284>)
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f18:	4b29      	ldr	r3, [pc, #164]	; (8003fc0 <TrajectoryGenerator+0x288>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f22:	4b1e      	ldr	r3, [pc, #120]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003f24:	ed93 7a00 	vldr	s14, [r3]
 8003f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f2c:	4b25      	ldr	r3, [pc, #148]	; (8003fc4 <TrajectoryGenerator+0x28c>)
 8003f2e:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8003f32:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <TrajectoryGenerator+0x27c>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4a24      	ldr	r2, [pc, #144]	; (8003fc8 <TrajectoryGenerator+0x290>)
 8003f38:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 8003f3a:	4b1a      	ldr	r3, [pc, #104]	; (8003fa4 <TrajectoryGenerator+0x26c>)
 8003f3c:	ed93 7a00 	vldr	s14, [r3]
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <TrajectoryGenerator+0x278>)
 8003f42:	edd3 7a00 	vldr	s15, [r3]
 8003f46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f4a:	4b13      	ldr	r3, [pc, #76]	; (8003f98 <TrajectoryGenerator+0x260>)
 8003f4c:	edd3 7a00 	vldr	s15, [r3]
 8003f50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f54:	eeb0 7ae7 	vabs.f32	s14, s15
 8003f58:	4b10      	ldr	r3, [pc, #64]	; (8003f9c <TrajectoryGenerator+0x264>)
 8003f5a:	edd3 7a00 	vldr	s15, [r3]
 8003f5e:	eef0 7ae7 	vabs.f32	s15, s15
 8003f62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f6a:	db07      	blt.n	8003f7c <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 8003f6c:	4b17      	ldr	r3, [pc, #92]	; (8003fcc <TrajectoryGenerator+0x294>)
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TrajectoryGenerator+0x298>)
 8003f72:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8003f74:	4b05      	ldr	r3, [pc, #20]	; (8003f8c <TrajectoryGenerator+0x254>)
 8003f76:	2202      	movs	r2, #2
 8003f78:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 8003f7a:	e3fe      	b.n	800477a <TrajectoryGenerator+0xa42>
			  initime = time;
 8003f7c:	4b13      	ldr	r3, [pc, #76]	; (8003fcc <TrajectoryGenerator+0x294>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	4a13      	ldr	r2, [pc, #76]	; (8003fd0 <TrajectoryGenerator+0x298>)
 8003f82:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8003f84:	4b01      	ldr	r3, [pc, #4]	; (8003f8c <TrajectoryGenerator+0x254>)
 8003f86:	2201      	movs	r2, #1
 8003f88:	601a      	str	r2, [r3, #0]
		  break;
 8003f8a:	e3f6      	b.n	800477a <TrajectoryGenerator+0xa42>
 8003f8c:	2000096c 	.word	0x2000096c
 8003f90:	200009ac 	.word	0x200009ac
 8003f94:	20000978 	.word	0x20000978
 8003f98:	2000097c 	.word	0x2000097c
 8003f9c:	20000210 	.word	0x20000210
 8003fa0:	46ad9c00 	.word	0x46ad9c00
 8003fa4:	20000214 	.word	0x20000214
 8003fa8:	47590300 	.word	0x47590300
 8003fac:	20000974 	.word	0x20000974
 8003fb0:	20000984 	.word	0x20000984
 8003fb4:	20000998 	.word	0x20000998
 8003fb8:	3fe00000 	.word	0x3fe00000
 8003fbc:	2000099c 	.word	0x2000099c
 8003fc0:	200009a0 	.word	0x200009a0
 8003fc4:	200009a4 	.word	0x200009a4
 8003fc8:	200009a8 	.word	0x200009a8
 8003fcc:	20000970 	.word	0x20000970
 8003fd0:	20000980 	.word	0x20000980

	case 1:
		  if(time <= t_half + initime)
 8003fd4:	4bc2      	ldr	r3, [pc, #776]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 8003fd6:	ed93 7a00 	vldr	s14, [r3]
 8003fda:	4bc2      	ldr	r3, [pc, #776]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8003fdc:	edd3 7a00 	vldr	s15, [r3]
 8003fe0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003fe4:	4bc0      	ldr	r3, [pc, #768]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8003fe6:	edd3 7a00 	vldr	s15, [r3]
 8003fea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003ff2:	f2c0 8092 	blt.w	800411a <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 8003ff6:	4bbd      	ldr	r3, [pc, #756]	; (80042ec <TrajectoryGenerator+0x5b4>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4abd      	ldr	r2, [pc, #756]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 8003ffc:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 8003ffe:	4bba      	ldr	r3, [pc, #744]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004000:	ed93 7a00 	vldr	s14, [r3]
 8004004:	4bb7      	ldr	r3, [pc, #732]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800400e:	4bb8      	ldr	r3, [pc, #736]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 8004010:	edd3 7a00 	vldr	s15, [r3]
 8004014:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004018:	4bb6      	ldr	r3, [pc, #728]	; (80042f4 <TrajectoryGenerator+0x5bc>)
 800401a:	edd3 7a00 	vldr	s15, [r3]
 800401e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004022:	4bb5      	ldr	r3, [pc, #724]	; (80042f8 <TrajectoryGenerator+0x5c0>)
 8004024:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004028:	4baf      	ldr	r3, [pc, #700]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 800402a:	ed93 7a00 	vldr	s14, [r3]
 800402e:	4bad      	ldr	r3, [pc, #692]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004038:	4bae      	ldr	r3, [pc, #696]	; (80042f4 <TrajectoryGenerator+0x5bc>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004042:	4bae      	ldr	r3, [pc, #696]	; (80042fc <TrajectoryGenerator+0x5c4>)
 8004044:	edd3 7a00 	vldr	s15, [r3]
 8004048:	ee77 7a27 	vadd.f32	s15, s14, s15
 800404c:	ee17 0a90 	vmov	r0, s15
 8004050:	f7fc fa82 	bl	8000558 <__aeabi_f2d>
 8004054:	4604      	mov	r4, r0
 8004056:	460d      	mov	r5, r1
 8004058:	4ba5      	ldr	r3, [pc, #660]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4618      	mov	r0, r3
 800405e:	f7fc fa7b 	bl	8000558 <__aeabi_f2d>
 8004062:	f04f 0200 	mov.w	r2, #0
 8004066:	4ba6      	ldr	r3, [pc, #664]	; (8004300 <TrajectoryGenerator+0x5c8>)
 8004068:	f7fc face 	bl	8000608 <__aeabi_dmul>
 800406c:	4602      	mov	r2, r0
 800406e:	460b      	mov	r3, r1
 8004070:	4690      	mov	r8, r2
 8004072:	4699      	mov	r9, r3
 8004074:	4b9c      	ldr	r3, [pc, #624]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004076:	ed93 7a00 	vldr	s14, [r3]
 800407a:	4b9a      	ldr	r3, [pc, #616]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 800407c:	edd3 7a00 	vldr	s15, [r3]
 8004080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004084:	ee17 0a90 	vmov	r0, s15
 8004088:	f7fc fa66 	bl	8000558 <__aeabi_f2d>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4640      	mov	r0, r8
 8004092:	4649      	mov	r1, r9
 8004094:	f7fc fab8 	bl	8000608 <__aeabi_dmul>
 8004098:	4602      	mov	r2, r0
 800409a:	460b      	mov	r3, r1
 800409c:	4690      	mov	r8, r2
 800409e:	4699      	mov	r9, r3
 80040a0:	4b91      	ldr	r3, [pc, #580]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80040a2:	ed93 7a00 	vldr	s14, [r3]
 80040a6:	4b8f      	ldr	r3, [pc, #572]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 80040a8:	edd3 7a00 	vldr	s15, [r3]
 80040ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040b0:	ee17 0a90 	vmov	r0, s15
 80040b4:	f7fc fa50 	bl	8000558 <__aeabi_f2d>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4640      	mov	r0, r8
 80040be:	4649      	mov	r1, r9
 80040c0:	f7fc faa2 	bl	8000608 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4620      	mov	r0, r4
 80040ca:	4629      	mov	r1, r5
 80040cc:	f7fc f8e6 	bl	800029c <__adddf3>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4610      	mov	r0, r2
 80040d6:	4619      	mov	r1, r3
 80040d8:	f7fc fd8e 	bl	8000bf8 <__aeabi_d2f>
 80040dc:	4603      	mov	r3, r0
 80040de:	4a89      	ldr	r2, [pc, #548]	; (8004304 <TrajectoryGenerator+0x5cc>)
 80040e0:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 80040e2:	4b88      	ldr	r3, [pc, #544]	; (8004304 <TrajectoryGenerator+0x5cc>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a88      	ldr	r2, [pc, #544]	; (8004308 <TrajectoryGenerator+0x5d0>)
 80040e8:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 80040ea:	4b83      	ldr	r3, [pc, #524]	; (80042f8 <TrajectoryGenerator+0x5c0>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a87      	ldr	r2, [pc, #540]	; (800430c <TrajectoryGenerator+0x5d4>)
 80040f0:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 80040f2:	4b7d      	ldr	r3, [pc, #500]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4618      	mov	r0, r3
 80040f8:	f7fc fa2e 	bl	8000558 <__aeabi_f2d>
 80040fc:	a376      	add	r3, pc, #472	; (adr r3, 80042d8 <TrajectoryGenerator+0x5a0>)
 80040fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004102:	f7fc f8cb 	bl	800029c <__adddf3>
 8004106:	4602      	mov	r2, r0
 8004108:	460b      	mov	r3, r1
 800410a:	4610      	mov	r0, r2
 800410c:	4619      	mov	r1, r3
 800410e:	f7fc fd73 	bl	8000bf8 <__aeabi_d2f>
 8004112:	4603      	mov	r3, r0
 8004114:	4a74      	ldr	r2, [pc, #464]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004116:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 8004118:	e32f      	b.n	800477a <TrajectoryGenerator+0xa42>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 800411a:	4b71      	ldr	r3, [pc, #452]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 800411c:	ed93 7a00 	vldr	s14, [r3]
 8004120:	4b70      	ldr	r3, [pc, #448]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8004122:	edd3 7a00 	vldr	s15, [r3]
 8004126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800412a:	4b6f      	ldr	r3, [pc, #444]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 800412c:	edd3 7a00 	vldr	s15, [r3]
 8004130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004138:	f140 80b5 	bpl.w	80042a6 <TrajectoryGenerator+0x56e>
 800413c:	4b68      	ldr	r3, [pc, #416]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 800413e:	edd3 7a00 	vldr	s15, [r3]
 8004142:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004146:	4b67      	ldr	r3, [pc, #412]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8004148:	edd3 7a00 	vldr	s15, [r3]
 800414c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004150:	4b65      	ldr	r3, [pc, #404]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	f2c0 80a2 	blt.w	80042a6 <TrajectoryGenerator+0x56e>
			  setacc = -qdd_max;
 8004162:	4b62      	ldr	r3, [pc, #392]	; (80042ec <TrajectoryGenerator+0x5b4>)
 8004164:	edd3 7a00 	vldr	s15, [r3]
 8004168:	eef1 7a67 	vneg.f32	s15, s15
 800416c:	4b60      	ldr	r3, [pc, #384]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 800416e:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8004172:	4b5d      	ldr	r3, [pc, #372]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	4b5a      	ldr	r3, [pc, #360]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004182:	4b57      	ldr	r3, [pc, #348]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	ee37 7a67 	vsub.f32	s14, s14, s15
 800418c:	4b58      	ldr	r3, [pc, #352]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004196:	4b5d      	ldr	r3, [pc, #372]	; (800430c <TrajectoryGenerator+0x5d4>)
 8004198:	edd3 7a00 	vldr	s15, [r3]
 800419c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041a0:	4b55      	ldr	r3, [pc, #340]	; (80042f8 <TrajectoryGenerator+0x5c0>)
 80041a2:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 80041a6:	4b50      	ldr	r3, [pc, #320]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80041a8:	ed93 7a00 	vldr	s14, [r3]
 80041ac:	4b4d      	ldr	r3, [pc, #308]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041b6:	4b4a      	ldr	r3, [pc, #296]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 80041b8:	edd3 7a00 	vldr	s15, [r3]
 80041bc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041c0:	4b52      	ldr	r3, [pc, #328]	; (800430c <TrajectoryGenerator+0x5d4>)
 80041c2:	edd3 7a00 	vldr	s15, [r3]
 80041c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ca:	4b4f      	ldr	r3, [pc, #316]	; (8004308 <TrajectoryGenerator+0x5d0>)
 80041cc:	edd3 7a00 	vldr	s15, [r3]
 80041d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041d4:	ee17 0a90 	vmov	r0, s15
 80041d8:	f7fc f9be 	bl	8000558 <__aeabi_f2d>
 80041dc:	4604      	mov	r4, r0
 80041de:	460d      	mov	r5, r1
 80041e0:	4b43      	ldr	r3, [pc, #268]	; (80042f0 <TrajectoryGenerator+0x5b8>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4618      	mov	r0, r3
 80041e6:	f7fc f9b7 	bl	8000558 <__aeabi_f2d>
 80041ea:	f04f 0200 	mov.w	r2, #0
 80041ee:	4b44      	ldr	r3, [pc, #272]	; (8004300 <TrajectoryGenerator+0x5c8>)
 80041f0:	f7fc fa0a 	bl	8000608 <__aeabi_dmul>
 80041f4:	4602      	mov	r2, r0
 80041f6:	460b      	mov	r3, r1
 80041f8:	4690      	mov	r8, r2
 80041fa:	4699      	mov	r9, r3
 80041fc:	4b3a      	ldr	r3, [pc, #232]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80041fe:	ed93 7a00 	vldr	s14, [r3]
 8004202:	4b38      	ldr	r3, [pc, #224]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	ee37 7a67 	vsub.f32	s14, s14, s15
 800420c:	4b34      	ldr	r3, [pc, #208]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 800420e:	edd3 7a00 	vldr	s15, [r3]
 8004212:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004216:	ee17 0a90 	vmov	r0, s15
 800421a:	f7fc f99d 	bl	8000558 <__aeabi_f2d>
 800421e:	4602      	mov	r2, r0
 8004220:	460b      	mov	r3, r1
 8004222:	4640      	mov	r0, r8
 8004224:	4649      	mov	r1, r9
 8004226:	f7fc f9ef 	bl	8000608 <__aeabi_dmul>
 800422a:	4602      	mov	r2, r0
 800422c:	460b      	mov	r3, r1
 800422e:	4690      	mov	r8, r2
 8004230:	4699      	mov	r9, r3
 8004232:	4b2d      	ldr	r3, [pc, #180]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004234:	ed93 7a00 	vldr	s14, [r3]
 8004238:	4b2a      	ldr	r3, [pc, #168]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 800423a:	edd3 7a00 	vldr	s15, [r3]
 800423e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004242:	4b27      	ldr	r3, [pc, #156]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 8004244:	edd3 7a00 	vldr	s15, [r3]
 8004248:	ee77 7a67 	vsub.f32	s15, s14, s15
 800424c:	ee17 0a90 	vmov	r0, s15
 8004250:	f7fc f982 	bl	8000558 <__aeabi_f2d>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4640      	mov	r0, r8
 800425a:	4649      	mov	r1, r9
 800425c:	f7fc f9d4 	bl	8000608 <__aeabi_dmul>
 8004260:	4602      	mov	r2, r0
 8004262:	460b      	mov	r3, r1
 8004264:	4620      	mov	r0, r4
 8004266:	4629      	mov	r1, r5
 8004268:	f7fc f818 	bl	800029c <__adddf3>
 800426c:	4602      	mov	r2, r0
 800426e:	460b      	mov	r3, r1
 8004270:	4610      	mov	r0, r2
 8004272:	4619      	mov	r1, r3
 8004274:	f7fc fcc0 	bl	8000bf8 <__aeabi_d2f>
 8004278:	4603      	mov	r3, r0
 800427a:	4a22      	ldr	r2, [pc, #136]	; (8004304 <TrajectoryGenerator+0x5cc>)
 800427c:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800427e:	4b1a      	ldr	r3, [pc, #104]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	4618      	mov	r0, r3
 8004284:	f7fc f968 	bl	8000558 <__aeabi_f2d>
 8004288:	a313      	add	r3, pc, #76	; (adr r3, 80042d8 <TrajectoryGenerator+0x5a0>)
 800428a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800428e:	f7fc f805 	bl	800029c <__adddf3>
 8004292:	4602      	mov	r2, r0
 8004294:	460b      	mov	r3, r1
 8004296:	4610      	mov	r0, r2
 8004298:	4619      	mov	r1, r3
 800429a:	f7fc fcad 	bl	8000bf8 <__aeabi_d2f>
 800429e:	4603      	mov	r3, r0
 80042a0:	4a11      	ldr	r2, [pc, #68]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80042a2:	6013      	str	r3, [r2, #0]
		break;
 80042a4:	e269      	b.n	800477a <TrajectoryGenerator+0xa42>
		  else if(time > (2*t_half) + initime){
 80042a6:	4b0e      	ldr	r3, [pc, #56]	; (80042e0 <TrajectoryGenerator+0x5a8>)
 80042a8:	edd3 7a00 	vldr	s15, [r3]
 80042ac:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042b0:	4b0c      	ldr	r3, [pc, #48]	; (80042e4 <TrajectoryGenerator+0x5ac>)
 80042b2:	edd3 7a00 	vldr	s15, [r3]
 80042b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042ba:	4b0b      	ldr	r3, [pc, #44]	; (80042e8 <TrajectoryGenerator+0x5b0>)
 80042bc:	edd3 7a00 	vldr	s15, [r3]
 80042c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042c8:	d400      	bmi.n	80042cc <TrajectoryGenerator+0x594>
		break;
 80042ca:	e256      	b.n	800477a <TrajectoryGenerator+0xa42>
			  setposition = qf;
 80042cc:	4b10      	ldr	r3, [pc, #64]	; (8004310 <TrajectoryGenerator+0x5d8>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4a0c      	ldr	r2, [pc, #48]	; (8004304 <TrajectoryGenerator+0x5cc>)
 80042d2:	6013      	str	r3, [r2, #0]
		break;
 80042d4:	e251      	b.n	800477a <TrajectoryGenerator+0xa42>
 80042d6:	bf00      	nop
 80042d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80042dc:	3f50624d 	.word	0x3f50624d
 80042e0:	20000984 	.word	0x20000984
 80042e4:	20000980 	.word	0x20000980
 80042e8:	20000970 	.word	0x20000970
 80042ec:	20000214 	.word	0x20000214
 80042f0:	200009e0 	.word	0x200009e0
 80042f4:	2000097c 	.word	0x2000097c
 80042f8:	200009dc 	.word	0x200009dc
 80042fc:	20000978 	.word	0x20000978
 8004300:	3fe00000 	.word	0x3fe00000
 8004304:	200009bc 	.word	0x200009bc
 8004308:	20000990 	.word	0x20000990
 800430c:	20000988 	.word	0x20000988
 8004310:	20000974 	.word	0x20000974

	case 2:
		 if(time <= tacc + initime)
 8004314:	4b84      	ldr	r3, [pc, #528]	; (8004528 <TrajectoryGenerator+0x7f0>)
 8004316:	ed93 7a00 	vldr	s14, [r3]
 800431a:	4b84      	ldr	r3, [pc, #528]	; (800452c <TrajectoryGenerator+0x7f4>)
 800431c:	edd3 7a00 	vldr	s15, [r3]
 8004320:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004324:	4b82      	ldr	r3, [pc, #520]	; (8004530 <TrajectoryGenerator+0x7f8>)
 8004326:	edd3 7a00 	vldr	s15, [r3]
 800432a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800432e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004332:	f2c0 8092 	blt.w	800445a <TrajectoryGenerator+0x722>
		 {
			 setacc = qdd_max;
 8004336:	4b7f      	ldr	r3, [pc, #508]	; (8004534 <TrajectoryGenerator+0x7fc>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a7f      	ldr	r2, [pc, #508]	; (8004538 <TrajectoryGenerator+0x800>)
 800433c:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 800433e:	4b7c      	ldr	r3, [pc, #496]	; (8004530 <TrajectoryGenerator+0x7f8>)
 8004340:	ed93 7a00 	vldr	s14, [r3]
 8004344:	4b79      	ldr	r3, [pc, #484]	; (800452c <TrajectoryGenerator+0x7f4>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800434e:	4b7a      	ldr	r3, [pc, #488]	; (8004538 <TrajectoryGenerator+0x800>)
 8004350:	edd3 7a00 	vldr	s15, [r3]
 8004354:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004358:	4b78      	ldr	r3, [pc, #480]	; (800453c <TrajectoryGenerator+0x804>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004362:	4b77      	ldr	r3, [pc, #476]	; (8004540 <TrajectoryGenerator+0x808>)
 8004364:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004368:	4b71      	ldr	r3, [pc, #452]	; (8004530 <TrajectoryGenerator+0x7f8>)
 800436a:	ed93 7a00 	vldr	s14, [r3]
 800436e:	4b6f      	ldr	r3, [pc, #444]	; (800452c <TrajectoryGenerator+0x7f4>)
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004378:	4b70      	ldr	r3, [pc, #448]	; (800453c <TrajectoryGenerator+0x804>)
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004382:	4b70      	ldr	r3, [pc, #448]	; (8004544 <TrajectoryGenerator+0x80c>)
 8004384:	edd3 7a00 	vldr	s15, [r3]
 8004388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800438c:	ee17 0a90 	vmov	r0, s15
 8004390:	f7fc f8e2 	bl	8000558 <__aeabi_f2d>
 8004394:	4604      	mov	r4, r0
 8004396:	460d      	mov	r5, r1
 8004398:	4b67      	ldr	r3, [pc, #412]	; (8004538 <TrajectoryGenerator+0x800>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	4618      	mov	r0, r3
 800439e:	f7fc f8db 	bl	8000558 <__aeabi_f2d>
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	4b68      	ldr	r3, [pc, #416]	; (8004548 <TrajectoryGenerator+0x810>)
 80043a8:	f7fc f92e 	bl	8000608 <__aeabi_dmul>
 80043ac:	4602      	mov	r2, r0
 80043ae:	460b      	mov	r3, r1
 80043b0:	4690      	mov	r8, r2
 80043b2:	4699      	mov	r9, r3
 80043b4:	4b5e      	ldr	r3, [pc, #376]	; (8004530 <TrajectoryGenerator+0x7f8>)
 80043b6:	ed93 7a00 	vldr	s14, [r3]
 80043ba:	4b5c      	ldr	r3, [pc, #368]	; (800452c <TrajectoryGenerator+0x7f4>)
 80043bc:	edd3 7a00 	vldr	s15, [r3]
 80043c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043c4:	ee17 0a90 	vmov	r0, s15
 80043c8:	f7fc f8c6 	bl	8000558 <__aeabi_f2d>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4640      	mov	r0, r8
 80043d2:	4649      	mov	r1, r9
 80043d4:	f7fc f918 	bl	8000608 <__aeabi_dmul>
 80043d8:	4602      	mov	r2, r0
 80043da:	460b      	mov	r3, r1
 80043dc:	4690      	mov	r8, r2
 80043de:	4699      	mov	r9, r3
 80043e0:	4b53      	ldr	r3, [pc, #332]	; (8004530 <TrajectoryGenerator+0x7f8>)
 80043e2:	ed93 7a00 	vldr	s14, [r3]
 80043e6:	4b51      	ldr	r3, [pc, #324]	; (800452c <TrajectoryGenerator+0x7f4>)
 80043e8:	edd3 7a00 	vldr	s15, [r3]
 80043ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043f0:	ee17 0a90 	vmov	r0, s15
 80043f4:	f7fc f8b0 	bl	8000558 <__aeabi_f2d>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4640      	mov	r0, r8
 80043fe:	4649      	mov	r1, r9
 8004400:	f7fc f902 	bl	8000608 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4620      	mov	r0, r4
 800440a:	4629      	mov	r1, r5
 800440c:	f7fb ff46 	bl	800029c <__adddf3>
 8004410:	4602      	mov	r2, r0
 8004412:	460b      	mov	r3, r1
 8004414:	4610      	mov	r0, r2
 8004416:	4619      	mov	r1, r3
 8004418:	f7fc fbee 	bl	8000bf8 <__aeabi_d2f>
 800441c:	4603      	mov	r3, r0
 800441e:	4a4b      	ldr	r2, [pc, #300]	; (800454c <TrajectoryGenerator+0x814>)
 8004420:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 8004422:	4b4a      	ldr	r3, [pc, #296]	; (800454c <TrajectoryGenerator+0x814>)
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a4a      	ldr	r2, [pc, #296]	; (8004550 <TrajectoryGenerator+0x818>)
 8004428:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 800442a:	4b45      	ldr	r3, [pc, #276]	; (8004540 <TrajectoryGenerator+0x808>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	4a49      	ldr	r2, [pc, #292]	; (8004554 <TrajectoryGenerator+0x81c>)
 8004430:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004432:	4b3f      	ldr	r3, [pc, #252]	; (8004530 <TrajectoryGenerator+0x7f8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4618      	mov	r0, r3
 8004438:	f7fc f88e 	bl	8000558 <__aeabi_f2d>
 800443c:	a338      	add	r3, pc, #224	; (adr r3, 8004520 <TrajectoryGenerator+0x7e8>)
 800443e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004442:	f7fb ff2b 	bl	800029c <__adddf3>
 8004446:	4602      	mov	r2, r0
 8004448:	460b      	mov	r3, r1
 800444a:	4610      	mov	r0, r2
 800444c:	4619      	mov	r1, r3
 800444e:	f7fc fbd3 	bl	8000bf8 <__aeabi_d2f>
 8004452:	4603      	mov	r3, r0
 8004454:	4a36      	ldr	r2, [pc, #216]	; (8004530 <TrajectoryGenerator+0x7f8>)
 8004456:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 8004458:	e18f      	b.n	800477a <TrajectoryGenerator+0xa42>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 800445a:	4b33      	ldr	r3, [pc, #204]	; (8004528 <TrajectoryGenerator+0x7f0>)
 800445c:	ed93 7a00 	vldr	s14, [r3]
 8004460:	4b32      	ldr	r3, [pc, #200]	; (800452c <TrajectoryGenerator+0x7f4>)
 8004462:	edd3 7a00 	vldr	s15, [r3]
 8004466:	ee37 7a27 	vadd.f32	s14, s14, s15
 800446a:	4b31      	ldr	r3, [pc, #196]	; (8004530 <TrajectoryGenerator+0x7f8>)
 800446c:	edd3 7a00 	vldr	s15, [r3]
 8004470:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004474:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004478:	d576      	bpl.n	8004568 <TrajectoryGenerator+0x830>
 800447a:	4b2c      	ldr	r3, [pc, #176]	; (800452c <TrajectoryGenerator+0x7f4>)
 800447c:	ed93 7a00 	vldr	s14, [r3]
 8004480:	4b29      	ldr	r3, [pc, #164]	; (8004528 <TrajectoryGenerator+0x7f0>)
 8004482:	edd3 7a00 	vldr	s15, [r3]
 8004486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800448a:	4b33      	ldr	r3, [pc, #204]	; (8004558 <TrajectoryGenerator+0x820>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004494:	4b26      	ldr	r3, [pc, #152]	; (8004530 <TrajectoryGenerator+0x7f8>)
 8004496:	edd3 7a00 	vldr	s15, [r3]
 800449a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800449e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044a2:	db61      	blt.n	8004568 <TrajectoryGenerator+0x830>
			 setacc = 0;
 80044a4:	4b24      	ldr	r3, [pc, #144]	; (8004538 <TrajectoryGenerator+0x800>)
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 80044ac:	4b2b      	ldr	r3, [pc, #172]	; (800455c <TrajectoryGenerator+0x824>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a23      	ldr	r2, [pc, #140]	; (8004540 <TrajectoryGenerator+0x808>)
 80044b2:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 80044b4:	4b1e      	ldr	r3, [pc, #120]	; (8004530 <TrajectoryGenerator+0x7f8>)
 80044b6:	ed93 7a00 	vldr	s14, [r3]
 80044ba:	4b1c      	ldr	r3, [pc, #112]	; (800452c <TrajectoryGenerator+0x7f4>)
 80044bc:	edd3 7a00 	vldr	s15, [r3]
 80044c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044c4:	4b18      	ldr	r3, [pc, #96]	; (8004528 <TrajectoryGenerator+0x7f0>)
 80044c6:	edd3 7a00 	vldr	s15, [r3]
 80044ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044ce:	4b23      	ldr	r3, [pc, #140]	; (800455c <TrajectoryGenerator+0x824>)
 80044d0:	edd3 7a00 	vldr	s15, [r3]
 80044d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044d8:	4b1d      	ldr	r3, [pc, #116]	; (8004550 <TrajectoryGenerator+0x818>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <TrajectoryGenerator+0x814>)
 80044e4:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 80044e8:	4b18      	ldr	r3, [pc, #96]	; (800454c <TrajectoryGenerator+0x814>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	; (8004560 <TrajectoryGenerator+0x828>)
 80044ee:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 80044f0:	4b13      	ldr	r3, [pc, #76]	; (8004540 <TrajectoryGenerator+0x808>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a1b      	ldr	r2, [pc, #108]	; (8004564 <TrajectoryGenerator+0x82c>)
 80044f6:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 80044f8:	4b0d      	ldr	r3, [pc, #52]	; (8004530 <TrajectoryGenerator+0x7f8>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4618      	mov	r0, r3
 80044fe:	f7fc f82b 	bl	8000558 <__aeabi_f2d>
 8004502:	a307      	add	r3, pc, #28	; (adr r3, 8004520 <TrajectoryGenerator+0x7e8>)
 8004504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004508:	f7fb fec8 	bl	800029c <__adddf3>
 800450c:	4602      	mov	r2, r0
 800450e:	460b      	mov	r3, r1
 8004510:	4610      	mov	r0, r2
 8004512:	4619      	mov	r1, r3
 8004514:	f7fc fb70 	bl	8000bf8 <__aeabi_d2f>
 8004518:	4603      	mov	r3, r0
 800451a:	4a05      	ldr	r2, [pc, #20]	; (8004530 <TrajectoryGenerator+0x7f8>)
 800451c:	6013      	str	r3, [r2, #0]
 800451e:	e12a      	b.n	8004776 <TrajectoryGenerator+0xa3e>
 8004520:	d2f1a9fc 	.word	0xd2f1a9fc
 8004524:	3f50624d 	.word	0x3f50624d
 8004528:	20000998 	.word	0x20000998
 800452c:	20000980 	.word	0x20000980
 8004530:	20000970 	.word	0x20000970
 8004534:	20000214 	.word	0x20000214
 8004538:	200009e0 	.word	0x200009e0
 800453c:	2000097c 	.word	0x2000097c
 8004540:	200009dc 	.word	0x200009dc
 8004544:	20000978 	.word	0x20000978
 8004548:	3fe00000 	.word	0x3fe00000
 800454c:	200009bc 	.word	0x200009bc
 8004550:	20000990 	.word	0x20000990
 8004554:	20000988 	.word	0x20000988
 8004558:	200009a4 	.word	0x200009a4
 800455c:	20000210 	.word	0x20000210
 8004560:	20000994 	.word	0x20000994
 8004564:	2000098c 	.word	0x2000098c
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8004568:	4b87      	ldr	r3, [pc, #540]	; (8004788 <TrajectoryGenerator+0xa50>)
 800456a:	ed93 7a00 	vldr	s14, [r3]
 800456e:	4b87      	ldr	r3, [pc, #540]	; (800478c <TrajectoryGenerator+0xa54>)
 8004570:	edd3 7a00 	vldr	s15, [r3]
 8004574:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004578:	4b85      	ldr	r3, [pc, #532]	; (8004790 <TrajectoryGenerator+0xa58>)
 800457a:	edd3 7a00 	vldr	s15, [r3]
 800457e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004582:	4b84      	ldr	r3, [pc, #528]	; (8004794 <TrajectoryGenerator+0xa5c>)
 8004584:	edd3 7a00 	vldr	s15, [r3]
 8004588:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004590:	f140 80d1 	bpl.w	8004736 <TrajectoryGenerator+0x9fe>
 8004594:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <TrajectoryGenerator+0xa50>)
 8004596:	ed93 7a00 	vldr	s14, [r3]
 800459a:	4b7c      	ldr	r3, [pc, #496]	; (800478c <TrajectoryGenerator+0xa54>)
 800459c:	edd3 7a00 	vldr	s15, [r3]
 80045a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a4:	4b7c      	ldr	r3, [pc, #496]	; (8004798 <TrajectoryGenerator+0xa60>)
 80045a6:	edd3 7a00 	vldr	s15, [r3]
 80045aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ae:	4b78      	ldr	r3, [pc, #480]	; (8004790 <TrajectoryGenerator+0xa58>)
 80045b0:	edd3 7a00 	vldr	s15, [r3]
 80045b4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045b8:	4b76      	ldr	r3, [pc, #472]	; (8004794 <TrajectoryGenerator+0xa5c>)
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045c6:	f2c0 80b6 	blt.w	8004736 <TrajectoryGenerator+0x9fe>
			 setacc = -qdd_max;
 80045ca:	4b74      	ldr	r3, [pc, #464]	; (800479c <TrajectoryGenerator+0xa64>)
 80045cc:	edd3 7a00 	vldr	s15, [r3]
 80045d0:	eef1 7a67 	vneg.f32	s15, s15
 80045d4:	4b72      	ldr	r3, [pc, #456]	; (80047a0 <TrajectoryGenerator+0xa68>)
 80045d6:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 80045da:	4b6e      	ldr	r3, [pc, #440]	; (8004794 <TrajectoryGenerator+0xa5c>)
 80045dc:	ed93 7a00 	vldr	s14, [r3]
 80045e0:	4b6b      	ldr	r3, [pc, #428]	; (8004790 <TrajectoryGenerator+0xa58>)
 80045e2:	edd3 7a00 	vldr	s15, [r3]
 80045e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <TrajectoryGenerator+0xa50>)
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045f4:	4b65      	ldr	r3, [pc, #404]	; (800478c <TrajectoryGenerator+0xa54>)
 80045f6:	edd3 7a00 	vldr	s15, [r3]
 80045fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045fe:	4b68      	ldr	r3, [pc, #416]	; (80047a0 <TrajectoryGenerator+0xa68>)
 8004600:	edd3 7a00 	vldr	s15, [r3]
 8004604:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004608:	4b66      	ldr	r3, [pc, #408]	; (80047a4 <TrajectoryGenerator+0xa6c>)
 800460a:	edd3 7a00 	vldr	s15, [r3]
 800460e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004612:	4b65      	ldr	r3, [pc, #404]	; (80047a8 <TrajectoryGenerator+0xa70>)
 8004614:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8004618:	4b5e      	ldr	r3, [pc, #376]	; (8004794 <TrajectoryGenerator+0xa5c>)
 800461a:	ed93 7a00 	vldr	s14, [r3]
 800461e:	4b5c      	ldr	r3, [pc, #368]	; (8004790 <TrajectoryGenerator+0xa58>)
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004628:	4b57      	ldr	r3, [pc, #348]	; (8004788 <TrajectoryGenerator+0xa50>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004632:	4b56      	ldr	r3, [pc, #344]	; (800478c <TrajectoryGenerator+0xa54>)
 8004634:	edd3 7a00 	vldr	s15, [r3]
 8004638:	ee37 7a67 	vsub.f32	s14, s14, s15
 800463c:	4b59      	ldr	r3, [pc, #356]	; (80047a4 <TrajectoryGenerator+0xa6c>)
 800463e:	edd3 7a00 	vldr	s15, [r3]
 8004642:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004646:	4b59      	ldr	r3, [pc, #356]	; (80047ac <TrajectoryGenerator+0xa74>)
 8004648:	edd3 7a00 	vldr	s15, [r3]
 800464c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004650:	ee17 0a90 	vmov	r0, s15
 8004654:	f7fb ff80 	bl	8000558 <__aeabi_f2d>
 8004658:	4604      	mov	r4, r0
 800465a:	460d      	mov	r5, r1
 800465c:	4b50      	ldr	r3, [pc, #320]	; (80047a0 <TrajectoryGenerator+0xa68>)
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f7fb ff79 	bl	8000558 <__aeabi_f2d>
 8004666:	f04f 0200 	mov.w	r2, #0
 800466a:	4b51      	ldr	r3, [pc, #324]	; (80047b0 <TrajectoryGenerator+0xa78>)
 800466c:	f7fb ffcc 	bl	8000608 <__aeabi_dmul>
 8004670:	4602      	mov	r2, r0
 8004672:	460b      	mov	r3, r1
 8004674:	4690      	mov	r8, r2
 8004676:	4699      	mov	r9, r3
 8004678:	4b46      	ldr	r3, [pc, #280]	; (8004794 <TrajectoryGenerator+0xa5c>)
 800467a:	ed93 7a00 	vldr	s14, [r3]
 800467e:	4b44      	ldr	r3, [pc, #272]	; (8004790 <TrajectoryGenerator+0xa58>)
 8004680:	edd3 7a00 	vldr	s15, [r3]
 8004684:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004688:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <TrajectoryGenerator+0xa50>)
 800468a:	edd3 7a00 	vldr	s15, [r3]
 800468e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004692:	4b3e      	ldr	r3, [pc, #248]	; (800478c <TrajectoryGenerator+0xa54>)
 8004694:	edd3 7a00 	vldr	s15, [r3]
 8004698:	ee77 7a67 	vsub.f32	s15, s14, s15
 800469c:	ee17 0a90 	vmov	r0, s15
 80046a0:	f7fb ff5a 	bl	8000558 <__aeabi_f2d>
 80046a4:	4602      	mov	r2, r0
 80046a6:	460b      	mov	r3, r1
 80046a8:	4640      	mov	r0, r8
 80046aa:	4649      	mov	r1, r9
 80046ac:	f7fb ffac 	bl	8000608 <__aeabi_dmul>
 80046b0:	4602      	mov	r2, r0
 80046b2:	460b      	mov	r3, r1
 80046b4:	4690      	mov	r8, r2
 80046b6:	4699      	mov	r9, r3
 80046b8:	4b36      	ldr	r3, [pc, #216]	; (8004794 <TrajectoryGenerator+0xa5c>)
 80046ba:	ed93 7a00 	vldr	s14, [r3]
 80046be:	4b34      	ldr	r3, [pc, #208]	; (8004790 <TrajectoryGenerator+0xa58>)
 80046c0:	edd3 7a00 	vldr	s15, [r3]
 80046c4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046c8:	4b2f      	ldr	r3, [pc, #188]	; (8004788 <TrajectoryGenerator+0xa50>)
 80046ca:	edd3 7a00 	vldr	s15, [r3]
 80046ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046d2:	4b2e      	ldr	r3, [pc, #184]	; (800478c <TrajectoryGenerator+0xa54>)
 80046d4:	edd3 7a00 	vldr	s15, [r3]
 80046d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046dc:	ee17 0a90 	vmov	r0, s15
 80046e0:	f7fb ff3a 	bl	8000558 <__aeabi_f2d>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	f7fb ff8c 	bl	8000608 <__aeabi_dmul>
 80046f0:	4602      	mov	r2, r0
 80046f2:	460b      	mov	r3, r1
 80046f4:	4620      	mov	r0, r4
 80046f6:	4629      	mov	r1, r5
 80046f8:	f7fb fdd0 	bl	800029c <__adddf3>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4610      	mov	r0, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f7fc fa78 	bl	8000bf8 <__aeabi_d2f>
 8004708:	4603      	mov	r3, r0
 800470a:	4a2a      	ldr	r2, [pc, #168]	; (80047b4 <TrajectoryGenerator+0xa7c>)
 800470c:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 800470e:	4b21      	ldr	r3, [pc, #132]	; (8004794 <TrajectoryGenerator+0xa5c>)
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4618      	mov	r0, r3
 8004714:	f7fb ff20 	bl	8000558 <__aeabi_f2d>
 8004718:	a319      	add	r3, pc, #100	; (adr r3, 8004780 <TrajectoryGenerator+0xa48>)
 800471a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800471e:	f7fb fdbd 	bl	800029c <__adddf3>
 8004722:	4602      	mov	r2, r0
 8004724:	460b      	mov	r3, r1
 8004726:	4610      	mov	r0, r2
 8004728:	4619      	mov	r1, r3
 800472a:	f7fc fa65 	bl	8000bf8 <__aeabi_d2f>
 800472e:	4603      	mov	r3, r0
 8004730:	4a18      	ldr	r2, [pc, #96]	; (8004794 <TrajectoryGenerator+0xa5c>)
 8004732:	6013      	str	r3, [r2, #0]
 8004734:	e01f      	b.n	8004776 <TrajectoryGenerator+0xa3e>
		 else if(time > tacc+tconst+tdec+initime){
 8004736:	4b14      	ldr	r3, [pc, #80]	; (8004788 <TrajectoryGenerator+0xa50>)
 8004738:	ed93 7a00 	vldr	s14, [r3]
 800473c:	4b13      	ldr	r3, [pc, #76]	; (800478c <TrajectoryGenerator+0xa54>)
 800473e:	edd3 7a00 	vldr	s15, [r3]
 8004742:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004746:	4b14      	ldr	r3, [pc, #80]	; (8004798 <TrajectoryGenerator+0xa60>)
 8004748:	edd3 7a00 	vldr	s15, [r3]
 800474c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004750:	4b0f      	ldr	r3, [pc, #60]	; (8004790 <TrajectoryGenerator+0xa58>)
 8004752:	edd3 7a00 	vldr	s15, [r3]
 8004756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800475a:	4b0e      	ldr	r3, [pc, #56]	; (8004794 <TrajectoryGenerator+0xa5c>)
 800475c:	edd3 7a00 	vldr	s15, [r3]
 8004760:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004764:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004768:	d400      	bmi.n	800476c <TrajectoryGenerator+0xa34>
		 break;
 800476a:	e006      	b.n	800477a <TrajectoryGenerator+0xa42>
			 setposition = qf;
 800476c:	4b12      	ldr	r3, [pc, #72]	; (80047b8 <TrajectoryGenerator+0xa80>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a10      	ldr	r2, [pc, #64]	; (80047b4 <TrajectoryGenerator+0xa7c>)
 8004772:	6013      	str	r3, [r2, #0]
		 break;
 8004774:	e001      	b.n	800477a <TrajectoryGenerator+0xa42>
 8004776:	e000      	b.n	800477a <TrajectoryGenerator+0xa42>
	case 3: // wait state
//		setposition = position;
		break;
 8004778:	bf00      	nop
	}

}
 800477a:	bf00      	nop
 800477c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004780:	d2f1a9fc 	.word	0xd2f1a9fc
 8004784:	3f50624d 	.word	0x3f50624d
 8004788:	20000998 	.word	0x20000998
 800478c:	200009a4 	.word	0x200009a4
 8004790:	20000980 	.word	0x20000980
 8004794:	20000970 	.word	0x20000970
 8004798:	200009a8 	.word	0x200009a8
 800479c:	20000214 	.word	0x20000214
 80047a0:	200009e0 	.word	0x200009e0
 80047a4:	2000098c 	.word	0x2000098c
 80047a8:	200009dc 	.word	0x200009dc
 80047ac:	20000994 	.word	0x20000994
 80047b0:	3fe00000 	.word	0x3fe00000
 80047b4:	200009bc 	.word	0x200009bc
 80047b8:	20000974 	.word	0x20000974

080047bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047bc:	b480      	push	{r7}
 80047be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047c0:	b672      	cpsid	i
}
 80047c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047c4:	e7fe      	b.n	80047c4 <Error_Handler+0x8>
	...

080047c8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b082      	sub	sp, #8
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ce:	2300      	movs	r3, #0
 80047d0:	607b      	str	r3, [r7, #4]
 80047d2:	4b10      	ldr	r3, [pc, #64]	; (8004814 <HAL_MspInit+0x4c>)
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	4a0f      	ldr	r2, [pc, #60]	; (8004814 <HAL_MspInit+0x4c>)
 80047d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047dc:	6453      	str	r3, [r2, #68]	; 0x44
 80047de:	4b0d      	ldr	r3, [pc, #52]	; (8004814 <HAL_MspInit+0x4c>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047e6:	607b      	str	r3, [r7, #4]
 80047e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047ea:	2300      	movs	r3, #0
 80047ec:	603b      	str	r3, [r7, #0]
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_MspInit+0x4c>)
 80047f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f2:	4a08      	ldr	r2, [pc, #32]	; (8004814 <HAL_MspInit+0x4c>)
 80047f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047f8:	6413      	str	r3, [r2, #64]	; 0x40
 80047fa:	4b06      	ldr	r3, [pc, #24]	; (8004814 <HAL_MspInit+0x4c>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004802:	603b      	str	r3, [r7, #0]
 8004804:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004806:	2007      	movs	r0, #7
 8004808:	f001 f9ae 	bl	8005b68 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800480c:	bf00      	nop
 800480e:	3708      	adds	r7, #8
 8004810:	46bd      	mov	sp, r7
 8004812:	bd80      	pop	{r7, pc}
 8004814:	40023800 	.word	0x40023800

08004818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004820:	f107 0314 	add.w	r3, r7, #20
 8004824:	2200      	movs	r2, #0
 8004826:	601a      	str	r2, [r3, #0]
 8004828:	605a      	str	r2, [r3, #4]
 800482a:	609a      	str	r2, [r3, #8]
 800482c:	60da      	str	r2, [r3, #12]
 800482e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a2f      	ldr	r2, [pc, #188]	; (80048f4 <HAL_ADC_MspInit+0xdc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d157      	bne.n	80048ea <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800483a:	2300      	movs	r3, #0
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	4b2e      	ldr	r3, [pc, #184]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 8004844:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004848:	6453      	str	r3, [r2, #68]	; 0x44
 800484a:	4b2b      	ldr	r3, [pc, #172]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 800484c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800484e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004852:	613b      	str	r3, [r7, #16]
 8004854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004856:	2300      	movs	r3, #0
 8004858:	60fb      	str	r3, [r7, #12]
 800485a:	4b27      	ldr	r3, [pc, #156]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485e:	4a26      	ldr	r2, [pc, #152]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 8004860:	f043 0301 	orr.w	r3, r3, #1
 8004864:	6313      	str	r3, [r2, #48]	; 0x30
 8004866:	4b24      	ldr	r3, [pc, #144]	; (80048f8 <HAL_ADC_MspInit+0xe0>)
 8004868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486a:	f003 0301 	and.w	r3, r3, #1
 800486e:	60fb      	str	r3, [r7, #12]
 8004870:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004872:	2303      	movs	r3, #3
 8004874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004876:	2303      	movs	r3, #3
 8004878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800487a:	2300      	movs	r3, #0
 800487c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	4619      	mov	r1, r3
 8004884:	481d      	ldr	r0, [pc, #116]	; (80048fc <HAL_ADC_MspInit+0xe4>)
 8004886:	f001 fdcd 	bl	8006424 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800488a:	4b1d      	ldr	r3, [pc, #116]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 800488c:	4a1d      	ldr	r2, [pc, #116]	; (8004904 <HAL_ADC_MspInit+0xec>)
 800488e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004890:	4b1b      	ldr	r3, [pc, #108]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 8004892:	2200      	movs	r2, #0
 8004894:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004896:	4b1a      	ldr	r3, [pc, #104]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 8004898:	2200      	movs	r2, #0
 800489a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800489c:	4b18      	ldr	r3, [pc, #96]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 800489e:	2200      	movs	r2, #0
 80048a0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048a2:	4b17      	ldr	r3, [pc, #92]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048a4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048a8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048aa:	4b15      	ldr	r3, [pc, #84]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048ac:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048b0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048b2:	4b13      	ldr	r3, [pc, #76]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048b4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048b8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048ba:	4b11      	ldr	r3, [pc, #68]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048bc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048c0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048c2:	4b0f      	ldr	r3, [pc, #60]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048c4:	2200      	movs	r2, #0
 80048c6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048c8:	4b0d      	ldr	r3, [pc, #52]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048ca:	2200      	movs	r2, #0
 80048cc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048ce:	480c      	ldr	r0, [pc, #48]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048d0:	f001 f98c 	bl	8005bec <HAL_DMA_Init>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d001      	beq.n	80048de <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80048da:	f7ff ff6f 	bl	80047bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	4a07      	ldr	r2, [pc, #28]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048e2:	639a      	str	r2, [r3, #56]	; 0x38
 80048e4:	4a06      	ldr	r2, [pc, #24]	; (8004900 <HAL_ADC_MspInit+0xe8>)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80048ea:	bf00      	nop
 80048ec:	3728      	adds	r7, #40	; 0x28
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	40012000 	.word	0x40012000
 80048f8:	40023800 	.word	0x40023800
 80048fc:	40020000 	.word	0x40020000
 8004900:	20000498 	.word	0x20000498
 8004904:	40026410 	.word	0x40026410

08004908 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	; 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004910:	f107 0314 	add.w	r3, r7, #20
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
 8004918:	605a      	str	r2, [r3, #4]
 800491a:	609a      	str	r2, [r3, #8]
 800491c:	60da      	str	r2, [r3, #12]
 800491e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	4a21      	ldr	r2, [pc, #132]	; (80049ac <HAL_I2C_MspInit+0xa4>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d13c      	bne.n	80049a4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800492a:	2300      	movs	r3, #0
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	4b20      	ldr	r3, [pc, #128]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 8004930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004932:	4a1f      	ldr	r2, [pc, #124]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 8004934:	f043 0302 	orr.w	r3, r3, #2
 8004938:	6313      	str	r3, [r2, #48]	; 0x30
 800493a:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 800493c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800493e:	f003 0302 	and.w	r3, r3, #2
 8004942:	613b      	str	r3, [r7, #16]
 8004944:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004946:	f44f 7340 	mov.w	r3, #768	; 0x300
 800494a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800494c:	2312      	movs	r3, #18
 800494e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004958:	2304      	movs	r3, #4
 800495a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800495c:	f107 0314 	add.w	r3, r7, #20
 8004960:	4619      	mov	r1, r3
 8004962:	4814      	ldr	r0, [pc, #80]	; (80049b4 <HAL_I2C_MspInit+0xac>)
 8004964:	f001 fd5e 	bl	8006424 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004968:	2300      	movs	r3, #0
 800496a:	60fb      	str	r3, [r7, #12]
 800496c:	4b10      	ldr	r3, [pc, #64]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 800496e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004970:	4a0f      	ldr	r2, [pc, #60]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 8004972:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004976:	6413      	str	r3, [r2, #64]	; 0x40
 8004978:	4b0d      	ldr	r3, [pc, #52]	; (80049b0 <HAL_I2C_MspInit+0xa8>)
 800497a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004980:	60fb      	str	r3, [r7, #12]
 8004982:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004984:	2200      	movs	r2, #0
 8004986:	2100      	movs	r1, #0
 8004988:	201f      	movs	r0, #31
 800498a:	f001 f8f8 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800498e:	201f      	movs	r0, #31
 8004990:	f001 f911 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004994:	2200      	movs	r2, #0
 8004996:	2100      	movs	r1, #0
 8004998:	2020      	movs	r0, #32
 800499a:	f001 f8f0 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800499e:	2020      	movs	r0, #32
 80049a0:	f001 f909 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049a4:	bf00      	nop
 80049a6:	3728      	adds	r7, #40	; 0x28
 80049a8:	46bd      	mov	sp, r7
 80049aa:	bd80      	pop	{r7, pc}
 80049ac:	40005400 	.word	0x40005400
 80049b0:	40023800 	.word	0x40023800
 80049b4:	40020400 	.word	0x40020400

080049b8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b084      	sub	sp, #16
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a12      	ldr	r2, [pc, #72]	; (8004a10 <HAL_TIM_PWM_MspInit+0x58>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d11d      	bne.n	8004a06 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ca:	2300      	movs	r3, #0
 80049cc:	60fb      	str	r3, [r7, #12]
 80049ce:	4b11      	ldr	r3, [pc, #68]	; (8004a14 <HAL_TIM_PWM_MspInit+0x5c>)
 80049d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d2:	4a10      	ldr	r2, [pc, #64]	; (8004a14 <HAL_TIM_PWM_MspInit+0x5c>)
 80049d4:	f043 0301 	orr.w	r3, r3, #1
 80049d8:	6453      	str	r3, [r2, #68]	; 0x44
 80049da:	4b0e      	ldr	r3, [pc, #56]	; (8004a14 <HAL_TIM_PWM_MspInit+0x5c>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 80049e6:	2205      	movs	r2, #5
 80049e8:	2100      	movs	r1, #0
 80049ea:	2018      	movs	r0, #24
 80049ec:	f001 f8c7 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80049f0:	2018      	movs	r0, #24
 80049f2:	f001 f8e0 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 80049f6:	2200      	movs	r2, #0
 80049f8:	2100      	movs	r1, #0
 80049fa:	201a      	movs	r0, #26
 80049fc:	f001 f8bf 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a00:	201a      	movs	r0, #26
 8004a02:	f001 f8d8 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a06:	bf00      	nop
 8004a08:	3710      	adds	r7, #16
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
 8004a0e:	bf00      	nop
 8004a10:	40010000 	.word	0x40010000
 8004a14:	40023800 	.word	0x40023800

08004a18 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b08a      	sub	sp, #40	; 0x28
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a20:	f107 0314 	add.w	r3, r7, #20
 8004a24:	2200      	movs	r2, #0
 8004a26:	601a      	str	r2, [r3, #0]
 8004a28:	605a      	str	r2, [r3, #4]
 8004a2a:	609a      	str	r2, [r3, #8]
 8004a2c:	60da      	str	r2, [r3, #12]
 8004a2e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a19      	ldr	r2, [pc, #100]	; (8004a9c <HAL_TIM_Encoder_MspInit+0x84>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d12b      	bne.n	8004a92 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	4b18      	ldr	r3, [pc, #96]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	4a17      	ldr	r2, [pc, #92]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a44:	f043 0302 	orr.w	r3, r3, #2
 8004a48:	6413      	str	r3, [r2, #64]	; 0x40
 8004a4a:	4b15      	ldr	r3, [pc, #84]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a4e:	f003 0302 	and.w	r3, r3, #2
 8004a52:	613b      	str	r3, [r7, #16]
 8004a54:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a5e:	4a10      	ldr	r2, [pc, #64]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6313      	str	r3, [r2, #48]	; 0x30
 8004a66:	4b0e      	ldr	r3, [pc, #56]	; (8004aa0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a6a:	f003 0301 	and.w	r3, r3, #1
 8004a6e:	60fb      	str	r3, [r7, #12]
 8004a70:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a72:	23c0      	movs	r3, #192	; 0xc0
 8004a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a76:	2302      	movs	r3, #2
 8004a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a7e:	2300      	movs	r3, #0
 8004a80:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004a82:	2302      	movs	r3, #2
 8004a84:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a86:	f107 0314 	add.w	r3, r7, #20
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	4805      	ldr	r0, [pc, #20]	; (8004aa4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004a8e:	f001 fcc9 	bl	8006424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004a92:	bf00      	nop
 8004a94:	3728      	adds	r7, #40	; 0x28
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}
 8004a9a:	bf00      	nop
 8004a9c:	40000400 	.word	0x40000400
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	40020000 	.word	0x40020000

08004aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a1c      	ldr	r2, [pc, #112]	; (8004b28 <HAL_TIM_Base_MspInit+0x80>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d116      	bne.n	8004ae8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004aba:	2300      	movs	r3, #0
 8004abc:	60fb      	str	r3, [r7, #12]
 8004abe:	4b1b      	ldr	r3, [pc, #108]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ac2:	4a1a      	ldr	r2, [pc, #104]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ac8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aca:	4b18      	ldr	r3, [pc, #96]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ad2:	60fb      	str	r3, [r7, #12]
 8004ad4:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	2100      	movs	r1, #0
 8004ada:	2018      	movs	r0, #24
 8004adc:	f001 f84f 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004ae0:	2018      	movs	r0, #24
 8004ae2:	f001 f868 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004ae6:	e01a      	b.n	8004b1e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	4a10      	ldr	r2, [pc, #64]	; (8004b30 <HAL_TIM_Base_MspInit+0x88>)
 8004aee:	4293      	cmp	r3, r2
 8004af0:	d115      	bne.n	8004b1e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004af2:	2300      	movs	r3, #0
 8004af4:	60bb      	str	r3, [r7, #8]
 8004af6:	4b0d      	ldr	r3, [pc, #52]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004afa:	4a0c      	ldr	r2, [pc, #48]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004afc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b00:	6453      	str	r3, [r2, #68]	; 0x44
 8004b02:	4b0a      	ldr	r3, [pc, #40]	; (8004b2c <HAL_TIM_Base_MspInit+0x84>)
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b0a:	60bb      	str	r3, [r7, #8]
 8004b0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004b0e:	2200      	movs	r2, #0
 8004b10:	2100      	movs	r1, #0
 8004b12:	201a      	movs	r0, #26
 8004b14:	f001 f833 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004b18:	201a      	movs	r0, #26
 8004b1a:	f001 f84c 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
}
 8004b1e:	bf00      	nop
 8004b20:	3710      	adds	r7, #16
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	40014000 	.word	0x40014000
 8004b2c:	40023800 	.word	0x40023800
 8004b30:	40014800 	.word	0x40014800

08004b34 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b088      	sub	sp, #32
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b3c:	f107 030c 	add.w	r3, r7, #12
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	605a      	str	r2, [r3, #4]
 8004b46:	609a      	str	r2, [r3, #8]
 8004b48:	60da      	str	r2, [r3, #12]
 8004b4a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	4a12      	ldr	r2, [pc, #72]	; (8004b9c <HAL_TIM_MspPostInit+0x68>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d11e      	bne.n	8004b94 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b56:	2300      	movs	r3, #0
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	4b11      	ldr	r3, [pc, #68]	; (8004ba0 <HAL_TIM_MspPostInit+0x6c>)
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	4a10      	ldr	r2, [pc, #64]	; (8004ba0 <HAL_TIM_MspPostInit+0x6c>)
 8004b60:	f043 0301 	orr.w	r3, r3, #1
 8004b64:	6313      	str	r3, [r2, #48]	; 0x30
 8004b66:	4b0e      	ldr	r3, [pc, #56]	; (8004ba0 <HAL_TIM_MspPostInit+0x6c>)
 8004b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6a:	f003 0301 	and.w	r3, r3, #1
 8004b6e:	60bb      	str	r3, [r7, #8]
 8004b70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b72:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b76:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b78:	2302      	movs	r3, #2
 8004b7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b80:	2300      	movs	r3, #0
 8004b82:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004b84:	2301      	movs	r3, #1
 8004b86:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b88:	f107 030c 	add.w	r3, r7, #12
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	4805      	ldr	r0, [pc, #20]	; (8004ba4 <HAL_TIM_MspPostInit+0x70>)
 8004b90:	f001 fc48 	bl	8006424 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004b94:	bf00      	nop
 8004b96:	3720      	adds	r7, #32
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	40010000 	.word	0x40010000
 8004ba0:	40023800 	.word	0x40023800
 8004ba4:	40020000 	.word	0x40020000

08004ba8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb0:	f107 031c 	add.w	r3, r7, #28
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	609a      	str	r2, [r3, #8]
 8004bbc:	60da      	str	r2, [r3, #12]
 8004bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a60      	ldr	r2, [pc, #384]	; (8004d48 <HAL_UART_MspInit+0x1a0>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d153      	bne.n	8004c72 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bca:	2300      	movs	r3, #0
 8004bcc:	61bb      	str	r3, [r7, #24]
 8004bce:	4b5f      	ldr	r3, [pc, #380]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bd2:	4a5e      	ldr	r2, [pc, #376]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bd4:	f043 0310 	orr.w	r3, r3, #16
 8004bd8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bda:	4b5c      	ldr	r3, [pc, #368]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bde:	f003 0310 	and.w	r3, r3, #16
 8004be2:	61bb      	str	r3, [r7, #24]
 8004be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004be6:	2300      	movs	r3, #0
 8004be8:	617b      	str	r3, [r7, #20]
 8004bea:	4b58      	ldr	r3, [pc, #352]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bee:	4a57      	ldr	r2, [pc, #348]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8004bf6:	4b55      	ldr	r3, [pc, #340]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	617b      	str	r3, [r7, #20]
 8004c00:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c02:	2300      	movs	r3, #0
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	4b51      	ldr	r3, [pc, #324]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0a:	4a50      	ldr	r2, [pc, #320]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c0c:	f043 0302 	orr.w	r3, r3, #2
 8004c10:	6313      	str	r3, [r2, #48]	; 0x30
 8004c12:	4b4e      	ldr	r3, [pc, #312]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c16:	f003 0302 	and.w	r3, r3, #2
 8004c1a:	613b      	str	r3, [r7, #16]
 8004c1c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c24:	2302      	movs	r3, #2
 8004c26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c28:	2300      	movs	r3, #0
 8004c2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c30:	2307      	movs	r3, #7
 8004c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c34:	f107 031c 	add.w	r3, r7, #28
 8004c38:	4619      	mov	r1, r3
 8004c3a:	4845      	ldr	r0, [pc, #276]	; (8004d50 <HAL_UART_MspInit+0x1a8>)
 8004c3c:	f001 fbf2 	bl	8006424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c40:	2380      	movs	r3, #128	; 0x80
 8004c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c50:	2307      	movs	r3, #7
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	4619      	mov	r1, r3
 8004c5a:	483e      	ldr	r0, [pc, #248]	; (8004d54 <HAL_UART_MspInit+0x1ac>)
 8004c5c:	f001 fbe2 	bl	8006424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c60:	2200      	movs	r2, #0
 8004c62:	2100      	movs	r1, #0
 8004c64:	2025      	movs	r0, #37	; 0x25
 8004c66:	f000 ff8a 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c6a:	2025      	movs	r0, #37	; 0x25
 8004c6c:	f000 ffa3 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c70:	e066      	b.n	8004d40 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4a38      	ldr	r2, [pc, #224]	; (8004d58 <HAL_UART_MspInit+0x1b0>)
 8004c78:	4293      	cmp	r3, r2
 8004c7a:	d161      	bne.n	8004d40 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	60fb      	str	r3, [r7, #12]
 8004c80:	4b32      	ldr	r3, [pc, #200]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c84:	4a31      	ldr	r2, [pc, #196]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c86:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c8a:	6413      	str	r3, [r2, #64]	; 0x40
 8004c8c:	4b2f      	ldr	r3, [pc, #188]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c98:	2300      	movs	r3, #0
 8004c9a:	60bb      	str	r3, [r7, #8]
 8004c9c:	4b2b      	ldr	r3, [pc, #172]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ca0:	4a2a      	ldr	r2, [pc, #168]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004ca2:	f043 0301 	orr.w	r3, r3, #1
 8004ca6:	6313      	str	r3, [r2, #48]	; 0x30
 8004ca8:	4b28      	ldr	r3, [pc, #160]	; (8004d4c <HAL_UART_MspInit+0x1a4>)
 8004caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cac:	f003 0301 	and.w	r3, r3, #1
 8004cb0:	60bb      	str	r3, [r7, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004cb4:	230c      	movs	r3, #12
 8004cb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cb8:	2302      	movs	r3, #2
 8004cba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004cc0:	2303      	movs	r3, #3
 8004cc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004cc4:	2307      	movs	r3, #7
 8004cc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cc8:	f107 031c 	add.w	r3, r7, #28
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4820      	ldr	r0, [pc, #128]	; (8004d50 <HAL_UART_MspInit+0x1a8>)
 8004cd0:	f001 fba8 	bl	8006424 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004cd4:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cd6:	4a22      	ldr	r2, [pc, #136]	; (8004d60 <HAL_UART_MspInit+0x1b8>)
 8004cd8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004cda:	4b20      	ldr	r3, [pc, #128]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cdc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004ce0:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004ce2:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004ce4:	2240      	movs	r2, #64	; 0x40
 8004ce6:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004ce8:	4b1c      	ldr	r3, [pc, #112]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cea:	2200      	movs	r2, #0
 8004cec:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004cee:	4b1b      	ldr	r3, [pc, #108]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cf4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004cf6:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004cfc:	4b17      	ldr	r3, [pc, #92]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d02:	4b16      	ldr	r3, [pc, #88]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d08:	4b14      	ldr	r3, [pc, #80]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d0e:	4b13      	ldr	r3, [pc, #76]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d10:	2200      	movs	r2, #0
 8004d12:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d14:	4811      	ldr	r0, [pc, #68]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d16:	f000 ff69 	bl	8005bec <HAL_DMA_Init>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004d20:	f7ff fd4c 	bl	80047bc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0d      	ldr	r2, [pc, #52]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d28:	635a      	str	r2, [r3, #52]	; 0x34
 8004d2a:	4a0c      	ldr	r2, [pc, #48]	; (8004d5c <HAL_UART_MspInit+0x1b4>)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d30:	2200      	movs	r2, #0
 8004d32:	2100      	movs	r1, #0
 8004d34:	2026      	movs	r0, #38	; 0x26
 8004d36:	f000 ff22 	bl	8005b7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d3a:	2026      	movs	r0, #38	; 0x26
 8004d3c:	f000 ff3b 	bl	8005bb6 <HAL_NVIC_EnableIRQ>
}
 8004d40:	bf00      	nop
 8004d42:	3730      	adds	r7, #48	; 0x30
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	40011000 	.word	0x40011000
 8004d4c:	40023800 	.word	0x40023800
 8004d50:	40020000 	.word	0x40020000
 8004d54:	40020400 	.word	0x40020400
 8004d58:	40004400 	.word	0x40004400
 8004d5c:	20000904 	.word	0x20000904
 8004d60:	400260a0 	.word	0x400260a0

08004d64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d64:	b480      	push	{r7}
 8004d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d68:	e7fe      	b.n	8004d68 <NMI_Handler+0x4>

08004d6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d6a:	b480      	push	{r7}
 8004d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d6e:	e7fe      	b.n	8004d6e <HardFault_Handler+0x4>

08004d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d70:	b480      	push	{r7}
 8004d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d74:	e7fe      	b.n	8004d74 <MemManage_Handler+0x4>

08004d76 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d76:	b480      	push	{r7}
 8004d78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d7a:	e7fe      	b.n	8004d7a <BusFault_Handler+0x4>

08004d7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004d80:	e7fe      	b.n	8004d80 <UsageFault_Handler+0x4>

08004d82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004d82:	b480      	push	{r7}
 8004d84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004d86:	bf00      	nop
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004d94:	bf00      	nop
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004da2:	bf00      	nop
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004db0:	f000 f9c4 	bl	800513c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	bd80      	pop	{r7, pc}

08004db8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004dbc:	2004      	movs	r0, #4
 8004dbe:	f001 fce7 	bl	8006790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	bd80      	pop	{r7, pc}

08004dc6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004dc6:	b580      	push	{r7, lr}
 8004dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004dca:	2008      	movs	r0, #8
 8004dcc:	f001 fce0 	bl	8006790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004dd0:	bf00      	nop
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004dd8:	4802      	ldr	r0, [pc, #8]	; (8004de4 <DMA1_Stream6_IRQHandler+0x10>)
 8004dda:	f001 f89f 	bl	8005f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	20000904 	.word	0x20000904

08004de8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004dec:	4803      	ldr	r0, [pc, #12]	; (8004dfc <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004dee:	f005 f81d 	bl	8009e2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004df2:	4803      	ldr	r0, [pc, #12]	; (8004e00 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004df4:	f005 f81a 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004df8:	bf00      	nop
 8004dfa:	bd80      	pop	{r7, pc}
 8004dfc:	2000054c 	.word	0x2000054c
 8004e00:	200006b4 	.word	0x200006b4

08004e04 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e08:	4803      	ldr	r0, [pc, #12]	; (8004e18 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004e0a:	f005 f80f 	bl	8009e2c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004e0e:	4803      	ldr	r0, [pc, #12]	; (8004e1c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e10:	f005 f80c 	bl	8009e2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e14:	bf00      	nop
 8004e16:	bd80      	pop	{r7, pc}
 8004e18:	2000054c 	.word	0x2000054c
 8004e1c:	20000768 	.word	0x20000768

08004e20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e24:	4802      	ldr	r0, [pc, #8]	; (8004e30 <I2C1_EV_IRQHandler+0x10>)
 8004e26:	f001 ffbb 	bl	8006da0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e2a:	bf00      	nop
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	200004f8 	.word	0x200004f8

08004e34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e38:	4802      	ldr	r0, [pc, #8]	; (8004e44 <I2C1_ER_IRQHandler+0x10>)
 8004e3a:	f002 f922 	bl	8007082 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e3e:	bf00      	nop
 8004e40:	bd80      	pop	{r7, pc}
 8004e42:	bf00      	nop
 8004e44:	200004f8 	.word	0x200004f8

08004e48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e4c:	4802      	ldr	r0, [pc, #8]	; (8004e58 <USART1_IRQHandler+0x10>)
 8004e4e:	f006 fb3b 	bl	800b4c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	2000081c 	.word	0x2000081c

08004e5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e60:	4802      	ldr	r0, [pc, #8]	; (8004e6c <USART2_IRQHandler+0x10>)
 8004e62:	f006 fb31 	bl	800b4c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e66:	bf00      	nop
 8004e68:	bd80      	pop	{r7, pc}
 8004e6a:	bf00      	nop
 8004e6c:	20000890 	.word	0x20000890

08004e70 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e70:	b580      	push	{r7, lr}
 8004e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004e74:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e78:	f001 fc8a 	bl	8006790 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e7c:	bf00      	nop
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004e84:	4802      	ldr	r0, [pc, #8]	; (8004e90 <DMA2_Stream0_IRQHandler+0x10>)
 8004e86:	f001 f849 	bl	8005f1c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004e8a:	bf00      	nop
 8004e8c:	bd80      	pop	{r7, pc}
 8004e8e:	bf00      	nop
 8004e90:	20000498 	.word	0x20000498

08004e94 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004e94:	b480      	push	{r7}
 8004e96:	af00      	add	r7, sp, #0
  return 1;
 8004e98:	2301      	movs	r3, #1
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea2:	4770      	bx	lr

08004ea4 <_kill>:

int _kill(int pid, int sig)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004eae:	f007 fb51 	bl	800c554 <__errno>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2216      	movs	r2, #22
 8004eb6:	601a      	str	r2, [r3, #0]
  return -1;
 8004eb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3708      	adds	r7, #8
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bd80      	pop	{r7, pc}

08004ec4 <_exit>:

void _exit (int status)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004ecc:	f04f 31ff 	mov.w	r1, #4294967295
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff ffe7 	bl	8004ea4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ed6:	e7fe      	b.n	8004ed6 <_exit+0x12>

08004ed8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b086      	sub	sp, #24
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	60f8      	str	r0, [r7, #12]
 8004ee0:	60b9      	str	r1, [r7, #8]
 8004ee2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	617b      	str	r3, [r7, #20]
 8004ee8:	e00a      	b.n	8004f00 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004eea:	f3af 8000 	nop.w
 8004eee:	4601      	mov	r1, r0
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	1c5a      	adds	r2, r3, #1
 8004ef4:	60ba      	str	r2, [r7, #8]
 8004ef6:	b2ca      	uxtb	r2, r1
 8004ef8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	3301      	adds	r3, #1
 8004efe:	617b      	str	r3, [r7, #20]
 8004f00:	697a      	ldr	r2, [r7, #20]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	429a      	cmp	r2, r3
 8004f06:	dbf0      	blt.n	8004eea <_read+0x12>
  }

  return len;
 8004f08:	687b      	ldr	r3, [r7, #4]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}

08004f12 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f12:	b580      	push	{r7, lr}
 8004f14:	b086      	sub	sp, #24
 8004f16:	af00      	add	r7, sp, #0
 8004f18:	60f8      	str	r0, [r7, #12]
 8004f1a:	60b9      	str	r1, [r7, #8]
 8004f1c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f1e:	2300      	movs	r3, #0
 8004f20:	617b      	str	r3, [r7, #20]
 8004f22:	e009      	b.n	8004f38 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	60ba      	str	r2, [r7, #8]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	3301      	adds	r3, #1
 8004f36:	617b      	str	r3, [r7, #20]
 8004f38:	697a      	ldr	r2, [r7, #20]
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	dbf1      	blt.n	8004f24 <_write+0x12>
  }
  return len;
 8004f40:	687b      	ldr	r3, [r7, #4]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3718      	adds	r7, #24
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_close>:

int _close(int file)
{
 8004f4a:	b480      	push	{r7}
 8004f4c:	b083      	sub	sp, #12
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	370c      	adds	r7, #12
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f60:	4770      	bx	lr

08004f62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f62:	b480      	push	{r7}
 8004f64:	b083      	sub	sp, #12
 8004f66:	af00      	add	r7, sp, #0
 8004f68:	6078      	str	r0, [r7, #4]
 8004f6a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f72:	605a      	str	r2, [r3, #4]
  return 0;
 8004f74:	2300      	movs	r3, #0
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <_isatty>:

int _isatty(int file)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004f8a:	2301      	movs	r3, #1
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	370c      	adds	r7, #12
 8004f90:	46bd      	mov	sp, r7
 8004f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f96:	4770      	bx	lr

08004f98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
	...

08004fb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fbc:	4a14      	ldr	r2, [pc, #80]	; (8005010 <_sbrk+0x5c>)
 8004fbe:	4b15      	ldr	r3, [pc, #84]	; (8005014 <_sbrk+0x60>)
 8004fc0:	1ad3      	subs	r3, r2, r3
 8004fc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fc8:	4b13      	ldr	r3, [pc, #76]	; (8005018 <_sbrk+0x64>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d102      	bne.n	8004fd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004fd0:	4b11      	ldr	r3, [pc, #68]	; (8005018 <_sbrk+0x64>)
 8004fd2:	4a12      	ldr	r2, [pc, #72]	; (800501c <_sbrk+0x68>)
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004fd6:	4b10      	ldr	r3, [pc, #64]	; (8005018 <_sbrk+0x64>)
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	693a      	ldr	r2, [r7, #16]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d207      	bcs.n	8004ff4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004fe4:	f007 fab6 	bl	800c554 <__errno>
 8004fe8:	4603      	mov	r3, r0
 8004fea:	220c      	movs	r2, #12
 8004fec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004fee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ff2:	e009      	b.n	8005008 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ff4:	4b08      	ldr	r3, [pc, #32]	; (8005018 <_sbrk+0x64>)
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ffa:	4b07      	ldr	r3, [pc, #28]	; (8005018 <_sbrk+0x64>)
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4413      	add	r3, r2
 8005002:	4a05      	ldr	r2, [pc, #20]	; (8005018 <_sbrk+0x64>)
 8005004:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005006:	68fb      	ldr	r3, [r7, #12]
}
 8005008:	4618      	mov	r0, r3
 800500a:	3718      	adds	r7, #24
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	20020000 	.word	0x20020000
 8005014:	00000400 	.word	0x00000400
 8005018:	200010fc 	.word	0x200010fc
 800501c:	20001118 	.word	0x20001118

08005020 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005020:	b480      	push	{r7}
 8005022:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005024:	4b06      	ldr	r3, [pc, #24]	; (8005040 <SystemInit+0x20>)
 8005026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800502a:	4a05      	ldr	r2, [pc, #20]	; (8005040 <SystemInit+0x20>)
 800502c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005030:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005034:	bf00      	nop
 8005036:	46bd      	mov	sp, r7
 8005038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503c:	4770      	bx	lr
 800503e:	bf00      	nop
 8005040:	e000ed00 	.word	0xe000ed00

08005044 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8005044:	f8df d034 	ldr.w	sp, [pc, #52]	; 800507c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005048:	480d      	ldr	r0, [pc, #52]	; (8005080 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800504a:	490e      	ldr	r1, [pc, #56]	; (8005084 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800504c:	4a0e      	ldr	r2, [pc, #56]	; (8005088 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800504e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005050:	e002      	b.n	8005058 <LoopCopyDataInit>

08005052 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005052:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005054:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005056:	3304      	adds	r3, #4

08005058 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005058:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800505a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800505c:	d3f9      	bcc.n	8005052 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800505e:	4a0b      	ldr	r2, [pc, #44]	; (800508c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005060:	4c0b      	ldr	r4, [pc, #44]	; (8005090 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005062:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005064:	e001      	b.n	800506a <LoopFillZerobss>

08005066 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005066:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005068:	3204      	adds	r2, #4

0800506a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800506a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800506c:	d3fb      	bcc.n	8005066 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800506e:	f7ff ffd7 	bl	8005020 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005072:	f007 fa75 	bl	800c560 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005076:	f7fc fb1f 	bl	80016b8 <main>
  bx  lr    
 800507a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800507c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8005080:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005084:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 8005088:	08012c48 	.word	0x08012c48
  ldr r2, =_sbss
 800508c:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 8005090:	20001114 	.word	0x20001114

08005094 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005094:	e7fe      	b.n	8005094 <ADC_IRQHandler>
	...

08005098 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800509c:	4b0e      	ldr	r3, [pc, #56]	; (80050d8 <HAL_Init+0x40>)
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a0d      	ldr	r2, [pc, #52]	; (80050d8 <HAL_Init+0x40>)
 80050a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050a8:	4b0b      	ldr	r3, [pc, #44]	; (80050d8 <HAL_Init+0x40>)
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a0a      	ldr	r2, [pc, #40]	; (80050d8 <HAL_Init+0x40>)
 80050ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050b4:	4b08      	ldr	r3, [pc, #32]	; (80050d8 <HAL_Init+0x40>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a07      	ldr	r2, [pc, #28]	; (80050d8 <HAL_Init+0x40>)
 80050ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050c0:	2003      	movs	r0, #3
 80050c2:	f000 fd51 	bl	8005b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050c6:	2000      	movs	r0, #0
 80050c8:	f000 f808 	bl	80050dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050cc:	f7ff fb7c 	bl	80047c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050d0:	2300      	movs	r3, #0
}
 80050d2:	4618      	mov	r0, r3
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	bf00      	nop
 80050d8:	40023c00 	.word	0x40023c00

080050dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80050e4:	4b12      	ldr	r3, [pc, #72]	; (8005130 <HAL_InitTick+0x54>)
 80050e6:	681a      	ldr	r2, [r3, #0]
 80050e8:	4b12      	ldr	r3, [pc, #72]	; (8005134 <HAL_InitTick+0x58>)
 80050ea:	781b      	ldrb	r3, [r3, #0]
 80050ec:	4619      	mov	r1, r3
 80050ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80050f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80050f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fd69 	bl	8005bd2 <HAL_SYSTICK_Config>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d001      	beq.n	800510a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005106:	2301      	movs	r3, #1
 8005108:	e00e      	b.n	8005128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2b0f      	cmp	r3, #15
 800510e:	d80a      	bhi.n	8005126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005110:	2200      	movs	r2, #0
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	f04f 30ff 	mov.w	r0, #4294967295
 8005118:	f000 fd31 	bl	8005b7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800511c:	4a06      	ldr	r2, [pc, #24]	; (8005138 <HAL_InitTick+0x5c>)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005122:	2300      	movs	r3, #0
 8005124:	e000      	b.n	8005128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
}
 8005128:	4618      	mov	r0, r3
 800512a:	3708      	adds	r7, #8
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}
 8005130:	20000250 	.word	0x20000250
 8005134:	20000258 	.word	0x20000258
 8005138:	20000254 	.word	0x20000254

0800513c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800513c:	b480      	push	{r7}
 800513e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005140:	4b06      	ldr	r3, [pc, #24]	; (800515c <HAL_IncTick+0x20>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	461a      	mov	r2, r3
 8005146:	4b06      	ldr	r3, [pc, #24]	; (8005160 <HAL_IncTick+0x24>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4413      	add	r3, r2
 800514c:	4a04      	ldr	r2, [pc, #16]	; (8005160 <HAL_IncTick+0x24>)
 800514e:	6013      	str	r3, [r2, #0]
}
 8005150:	bf00      	nop
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000258 	.word	0x20000258
 8005160:	20001100 	.word	0x20001100

08005164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005164:	b480      	push	{r7}
 8005166:	af00      	add	r7, sp, #0
  return uwTick;
 8005168:	4b03      	ldr	r3, [pc, #12]	; (8005178 <HAL_GetTick+0x14>)
 800516a:	681b      	ldr	r3, [r3, #0]
}
 800516c:	4618      	mov	r0, r3
 800516e:	46bd      	mov	sp, r7
 8005170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005174:	4770      	bx	lr
 8005176:	bf00      	nop
 8005178:	20001100 	.word	0x20001100

0800517c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005184:	f7ff ffee 	bl	8005164 <HAL_GetTick>
 8005188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005194:	d005      	beq.n	80051a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005196:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <HAL_Delay+0x44>)
 8005198:	781b      	ldrb	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4413      	add	r3, r2
 80051a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051a2:	bf00      	nop
 80051a4:	f7ff ffde 	bl	8005164 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	68fa      	ldr	r2, [r7, #12]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d8f7      	bhi.n	80051a4 <HAL_Delay+0x28>
  {
  }
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop
 80051b8:	3710      	adds	r7, #16
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000258 	.word	0x20000258

080051c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b084      	sub	sp, #16
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051cc:	2300      	movs	r3, #0
 80051ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d101      	bne.n	80051da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e033      	b.n	8005242 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d109      	bne.n	80051f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7ff fb18 	bl	8004818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2200      	movs	r2, #0
 80051ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2200      	movs	r2, #0
 80051f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fa:	f003 0310 	and.w	r3, r3, #16
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d118      	bne.n	8005234 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005206:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800520a:	f023 0302 	bic.w	r3, r3, #2
 800520e:	f043 0202 	orr.w	r2, r3, #2
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 fa58 	bl	80056cc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f023 0303 	bic.w	r3, r3, #3
 800522a:	f043 0201 	orr.w	r2, r3, #1
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	641a      	str	r2, [r3, #64]	; 0x40
 8005232:	e001      	b.n	8005238 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005234:	2301      	movs	r3, #1
 8005236:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2200      	movs	r2, #0
 800523c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005240:	7bfb      	ldrb	r3, [r7, #15]
}
 8005242:	4618      	mov	r0, r3
 8005244:	3710      	adds	r7, #16
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <HAL_ADC_Start_DMA+0x1e>
 8005266:	2302      	movs	r3, #2
 8005268:	e0ce      	b.n	8005408 <HAL_ADC_Start_DMA+0x1bc>
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2201      	movs	r2, #1
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	689b      	ldr	r3, [r3, #8]
 8005278:	f003 0301 	and.w	r3, r3, #1
 800527c:	2b01      	cmp	r3, #1
 800527e:	d018      	beq.n	80052b2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	689a      	ldr	r2, [r3, #8]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f042 0201 	orr.w	r2, r2, #1
 800528e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005290:	4b5f      	ldr	r3, [pc, #380]	; (8005410 <HAL_ADC_Start_DMA+0x1c4>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a5f      	ldr	r2, [pc, #380]	; (8005414 <HAL_ADC_Start_DMA+0x1c8>)
 8005296:	fba2 2303 	umull	r2, r3, r2, r3
 800529a:	0c9a      	lsrs	r2, r3, #18
 800529c:	4613      	mov	r3, r2
 800529e:	005b      	lsls	r3, r3, #1
 80052a0:	4413      	add	r3, r2
 80052a2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052a4:	e002      	b.n	80052ac <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052a6:	693b      	ldr	r3, [r7, #16]
 80052a8:	3b01      	subs	r3, #1
 80052aa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1f9      	bne.n	80052a6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052c0:	d107      	bne.n	80052d2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	689a      	ldr	r2, [r3, #8]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f003 0301 	and.w	r3, r3, #1
 80052dc:	2b01      	cmp	r3, #1
 80052de:	f040 8086 	bne.w	80053ee <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e6:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80052ea:	f023 0301 	bic.w	r3, r3, #1
 80052ee:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005300:	2b00      	cmp	r3, #0
 8005302:	d007      	beq.n	8005314 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005308:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800530c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005320:	d106      	bne.n	8005330 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005326:	f023 0206 	bic.w	r2, r3, #6
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	645a      	str	r2, [r3, #68]	; 0x44
 800532e:	e002      	b.n	8005336 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2200      	movs	r2, #0
 8005334:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800533e:	4b36      	ldr	r3, [pc, #216]	; (8005418 <HAL_ADC_Start_DMA+0x1cc>)
 8005340:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005346:	4a35      	ldr	r2, [pc, #212]	; (800541c <HAL_ADC_Start_DMA+0x1d0>)
 8005348:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800534e:	4a34      	ldr	r2, [pc, #208]	; (8005420 <HAL_ADC_Start_DMA+0x1d4>)
 8005350:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	4a33      	ldr	r2, [pc, #204]	; (8005424 <HAL_ADC_Start_DMA+0x1d8>)
 8005358:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005362:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	685a      	ldr	r2, [r3, #4]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005372:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	689a      	ldr	r2, [r3, #8]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005382:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	334c      	adds	r3, #76	; 0x4c
 800538e:	4619      	mov	r1, r3
 8005390:	68ba      	ldr	r2, [r7, #8]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f000 fcd8 	bl	8005d48 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 031f 	and.w	r3, r3, #31
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d10f      	bne.n	80053c4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d129      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689a      	ldr	r2, [r3, #8]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053c0:	609a      	str	r2, [r3, #8]
 80053c2:	e020      	b.n	8005406 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_ADC_Start_DMA+0x1dc>)
 80053ca:	4293      	cmp	r3, r2
 80053cc:	d11b      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1ba>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d114      	bne.n	8005406 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053ea:	609a      	str	r2, [r3, #8]
 80053ec:	e00b      	b.n	8005406 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053f2:	f043 0210 	orr.w	r2, r3, #16
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053fe:	f043 0201 	orr.w	r2, r3, #1
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005406:	2300      	movs	r3, #0
}
 8005408:	4618      	mov	r0, r3
 800540a:	3718      	adds	r7, #24
 800540c:	46bd      	mov	sp, r7
 800540e:	bd80      	pop	{r7, pc}
 8005410:	20000250 	.word	0x20000250
 8005414:	431bde83 	.word	0x431bde83
 8005418:	40012300 	.word	0x40012300
 800541c:	080058c5 	.word	0x080058c5
 8005420:	0800597f 	.word	0x0800597f
 8005424:	0800599b 	.word	0x0800599b
 8005428:	40012000 	.word	0x40012000

0800542c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800542c:	b480      	push	{r7}
 800542e:	b083      	sub	sp, #12
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005434:	bf00      	nop
 8005436:	370c      	adds	r7, #12
 8005438:	46bd      	mov	sp, r7
 800543a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543e:	4770      	bx	lr

08005440 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005440:	b480      	push	{r7}
 8005442:	b083      	sub	sp, #12
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005448:	bf00      	nop
 800544a:	370c      	adds	r7, #12
 800544c:	46bd      	mov	sp, r7
 800544e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005452:	4770      	bx	lr

08005454 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005454:	b480      	push	{r7}
 8005456:	b083      	sub	sp, #12
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
 8005470:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005472:	2300      	movs	r3, #0
 8005474:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800547c:	2b01      	cmp	r3, #1
 800547e:	d101      	bne.n	8005484 <HAL_ADC_ConfigChannel+0x1c>
 8005480:	2302      	movs	r3, #2
 8005482:	e113      	b.n	80056ac <HAL_ADC_ConfigChannel+0x244>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2201      	movs	r2, #1
 8005488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2b09      	cmp	r3, #9
 8005492:	d925      	bls.n	80054e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68d9      	ldr	r1, [r3, #12]
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	b29b      	uxth	r3, r3
 80054a0:	461a      	mov	r2, r3
 80054a2:	4613      	mov	r3, r2
 80054a4:	005b      	lsls	r3, r3, #1
 80054a6:	4413      	add	r3, r2
 80054a8:	3b1e      	subs	r3, #30
 80054aa:	2207      	movs	r2, #7
 80054ac:	fa02 f303 	lsl.w	r3, r2, r3
 80054b0:	43da      	mvns	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	400a      	ands	r2, r1
 80054b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68d9      	ldr	r1, [r3, #12]
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	689a      	ldr	r2, [r3, #8]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	b29b      	uxth	r3, r3
 80054ca:	4618      	mov	r0, r3
 80054cc:	4603      	mov	r3, r0
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	4403      	add	r3, r0
 80054d2:	3b1e      	subs	r3, #30
 80054d4:	409a      	lsls	r2, r3
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	430a      	orrs	r2, r1
 80054dc:	60da      	str	r2, [r3, #12]
 80054de:	e022      	b.n	8005526 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6919      	ldr	r1, [r3, #16]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	b29b      	uxth	r3, r3
 80054ec:	461a      	mov	r2, r3
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	2207      	movs	r2, #7
 80054f6:	fa02 f303 	lsl.w	r3, r2, r3
 80054fa:	43da      	mvns	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	400a      	ands	r2, r1
 8005502:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6919      	ldr	r1, [r3, #16]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	689a      	ldr	r2, [r3, #8]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	b29b      	uxth	r3, r3
 8005514:	4618      	mov	r0, r3
 8005516:	4603      	mov	r3, r0
 8005518:	005b      	lsls	r3, r3, #1
 800551a:	4403      	add	r3, r0
 800551c:	409a      	lsls	r2, r3
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	430a      	orrs	r2, r1
 8005524:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	2b06      	cmp	r3, #6
 800552c:	d824      	bhi.n	8005578 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	4613      	mov	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4413      	add	r3, r2
 800553e:	3b05      	subs	r3, #5
 8005540:	221f      	movs	r2, #31
 8005542:	fa02 f303 	lsl.w	r3, r2, r3
 8005546:	43da      	mvns	r2, r3
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	400a      	ands	r2, r1
 800554e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	b29b      	uxth	r3, r3
 800555c:	4618      	mov	r0, r3
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	4613      	mov	r3, r2
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	4413      	add	r3, r2
 8005568:	3b05      	subs	r3, #5
 800556a:	fa00 f203 	lsl.w	r2, r0, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	430a      	orrs	r2, r1
 8005574:	635a      	str	r2, [r3, #52]	; 0x34
 8005576:	e04c      	b.n	8005612 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005578:	683b      	ldr	r3, [r7, #0]
 800557a:	685b      	ldr	r3, [r3, #4]
 800557c:	2b0c      	cmp	r3, #12
 800557e:	d824      	bhi.n	80055ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	685a      	ldr	r2, [r3, #4]
 800558a:	4613      	mov	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4413      	add	r3, r2
 8005590:	3b23      	subs	r3, #35	; 0x23
 8005592:	221f      	movs	r2, #31
 8005594:	fa02 f303 	lsl.w	r3, r2, r3
 8005598:	43da      	mvns	r2, r3
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	400a      	ands	r2, r1
 80055a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	4618      	mov	r0, r3
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	4613      	mov	r3, r2
 80055b6:	009b      	lsls	r3, r3, #2
 80055b8:	4413      	add	r3, r2
 80055ba:	3b23      	subs	r3, #35	; 0x23
 80055bc:	fa00 f203 	lsl.w	r2, r0, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	430a      	orrs	r2, r1
 80055c6:	631a      	str	r2, [r3, #48]	; 0x30
 80055c8:	e023      	b.n	8005612 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	3b41      	subs	r3, #65	; 0x41
 80055dc:	221f      	movs	r2, #31
 80055de:	fa02 f303 	lsl.w	r3, r2, r3
 80055e2:	43da      	mvns	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	400a      	ands	r2, r1
 80055ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	b29b      	uxth	r3, r3
 80055f8:	4618      	mov	r0, r3
 80055fa:	683b      	ldr	r3, [r7, #0]
 80055fc:	685a      	ldr	r2, [r3, #4]
 80055fe:	4613      	mov	r3, r2
 8005600:	009b      	lsls	r3, r3, #2
 8005602:	4413      	add	r3, r2
 8005604:	3b41      	subs	r3, #65	; 0x41
 8005606:	fa00 f203 	lsl.w	r2, r0, r3
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005612:	4b29      	ldr	r3, [pc, #164]	; (80056b8 <HAL_ADC_ConfigChannel+0x250>)
 8005614:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a28      	ldr	r2, [pc, #160]	; (80056bc <HAL_ADC_ConfigChannel+0x254>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d10f      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x1d8>
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	2b12      	cmp	r3, #18
 8005626:	d10b      	bne.n	8005640 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	685b      	ldr	r3, [r3, #4]
 800562c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005630:	68fb      	ldr	r3, [r7, #12]
 8005632:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	4a1d      	ldr	r2, [pc, #116]	; (80056bc <HAL_ADC_ConfigChannel+0x254>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d12b      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x23a>
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a1c      	ldr	r2, [pc, #112]	; (80056c0 <HAL_ADC_ConfigChannel+0x258>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <HAL_ADC_ConfigChannel+0x1f4>
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	2b11      	cmp	r3, #17
 800565a:	d122      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	685b      	ldr	r3, [r3, #4]
 8005660:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	4a11      	ldr	r2, [pc, #68]	; (80056c0 <HAL_ADC_ConfigChannel+0x258>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d111      	bne.n	80056a2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800567e:	4b11      	ldr	r3, [pc, #68]	; (80056c4 <HAL_ADC_ConfigChannel+0x25c>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a11      	ldr	r2, [pc, #68]	; (80056c8 <HAL_ADC_ConfigChannel+0x260>)
 8005684:	fba2 2303 	umull	r2, r3, r2, r3
 8005688:	0c9a      	lsrs	r2, r3, #18
 800568a:	4613      	mov	r3, r2
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	4413      	add	r3, r2
 8005690:	005b      	lsls	r3, r3, #1
 8005692:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005694:	e002      	b.n	800569c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005696:	68bb      	ldr	r3, [r7, #8]
 8005698:	3b01      	subs	r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d1f9      	bne.n	8005696 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2200      	movs	r2, #0
 80056a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3714      	adds	r7, #20
 80056b0:	46bd      	mov	sp, r7
 80056b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b6:	4770      	bx	lr
 80056b8:	40012300 	.word	0x40012300
 80056bc:	40012000 	.word	0x40012000
 80056c0:	10000012 	.word	0x10000012
 80056c4:	20000250 	.word	0x20000250
 80056c8:	431bde83 	.word	0x431bde83

080056cc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b085      	sub	sp, #20
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056d4:	4b79      	ldr	r3, [pc, #484]	; (80058bc <ADC_Init+0x1f0>)
 80056d6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	685a      	ldr	r2, [r3, #4]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	685b      	ldr	r3, [r3, #4]
 80056ec:	431a      	orrs	r2, r3
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	685a      	ldr	r2, [r3, #4]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6859      	ldr	r1, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	691b      	ldr	r3, [r3, #16]
 800570c:	021a      	lsls	r2, r3, #8
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	430a      	orrs	r2, r1
 8005714:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005724:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	6859      	ldr	r1, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	689a      	ldr	r2, [r3, #8]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	430a      	orrs	r2, r1
 8005736:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689a      	ldr	r2, [r3, #8]
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005746:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	6899      	ldr	r1, [r3, #8]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68da      	ldr	r2, [r3, #12]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	430a      	orrs	r2, r1
 8005758:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800575e:	4a58      	ldr	r2, [pc, #352]	; (80058c0 <ADC_Init+0x1f4>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d022      	beq.n	80057aa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005772:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	6899      	ldr	r1, [r3, #8]
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	430a      	orrs	r2, r1
 8005784:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	6899      	ldr	r1, [r3, #8]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	430a      	orrs	r2, r1
 80057a6:	609a      	str	r2, [r3, #8]
 80057a8:	e00f      	b.n	80057ca <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	689a      	ldr	r2, [r3, #8]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057b8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	689a      	ldr	r2, [r3, #8]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057c8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 0202 	bic.w	r2, r2, #2
 80057d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	6899      	ldr	r1, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	7e1b      	ldrb	r3, [r3, #24]
 80057e4:	005a      	lsls	r2, r3, #1
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	430a      	orrs	r2, r1
 80057ec:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01b      	beq.n	8005830 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	685a      	ldr	r2, [r3, #4]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005806:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	685a      	ldr	r2, [r3, #4]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005816:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	6859      	ldr	r1, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005822:	3b01      	subs	r3, #1
 8005824:	035a      	lsls	r2, r3, #13
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	430a      	orrs	r2, r1
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	e007      	b.n	8005840 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800583e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800584e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	69db      	ldr	r3, [r3, #28]
 800585a:	3b01      	subs	r3, #1
 800585c:	051a      	lsls	r2, r3, #20
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	430a      	orrs	r2, r1
 8005864:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	689a      	ldr	r2, [r3, #8]
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005874:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005882:	025a      	lsls	r2, r3, #9
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	430a      	orrs	r2, r1
 800588a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	689a      	ldr	r2, [r3, #8]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800589a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	6899      	ldr	r1, [r3, #8]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	695b      	ldr	r3, [r3, #20]
 80058a6:	029a      	lsls	r2, r3, #10
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	430a      	orrs	r2, r1
 80058ae:	609a      	str	r2, [r3, #8]
}
 80058b0:	bf00      	nop
 80058b2:	3714      	adds	r7, #20
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr
 80058bc:	40012300 	.word	0x40012300
 80058c0:	0f000001 	.word	0x0f000001

080058c4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b084      	sub	sp, #16
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058d0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058d6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d13c      	bne.n	8005958 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	689b      	ldr	r3, [r3, #8]
 80058f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d12b      	bne.n	8005950 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d127      	bne.n	8005950 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005906:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800590a:	2b00      	cmp	r3, #0
 800590c:	d006      	beq.n	800591c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005918:	2b00      	cmp	r3, #0
 800591a:	d119      	bne.n	8005950 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	685a      	ldr	r2, [r3, #4]
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	f022 0220 	bic.w	r2, r2, #32
 800592a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005930:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d105      	bne.n	8005950 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005948:	f043 0201 	orr.w	r2, r3, #1
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005950:	68f8      	ldr	r0, [r7, #12]
 8005952:	f7ff fd6b 	bl	800542c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005956:	e00e      	b.n	8005976 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f003 0310 	and.w	r3, r3, #16
 8005960:	2b00      	cmp	r3, #0
 8005962:	d003      	beq.n	800596c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005964:	68f8      	ldr	r0, [r7, #12]
 8005966:	f7ff fd75 	bl	8005454 <HAL_ADC_ErrorCallback>
}
 800596a:	e004      	b.n	8005976 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	4798      	blx	r3
}
 8005976:	bf00      	nop
 8005978:	3710      	adds	r7, #16
 800597a:	46bd      	mov	sp, r7
 800597c:	bd80      	pop	{r7, pc}

0800597e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800597e:	b580      	push	{r7, lr}
 8005980:	b084      	sub	sp, #16
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800598a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f7ff fd57 	bl	8005440 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005992:	bf00      	nop
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059a6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2240      	movs	r2, #64	; 0x40
 80059ac:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059b2:	f043 0204 	orr.w	r2, r3, #4
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059ba:	68f8      	ldr	r0, [r7, #12]
 80059bc:	f7ff fd4a 	bl	8005454 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059c0:	bf00      	nop
 80059c2:	3710      	adds	r7, #16
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}

080059c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b085      	sub	sp, #20
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	f003 0307 	and.w	r3, r3, #7
 80059d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059d8:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059de:	68ba      	ldr	r2, [r7, #8]
 80059e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80059e4:	4013      	ands	r3, r2
 80059e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80059f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80059f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80059f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80059fa:	4a04      	ldr	r2, [pc, #16]	; (8005a0c <__NVIC_SetPriorityGrouping+0x44>)
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	60d3      	str	r3, [r2, #12]
}
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	e000ed00 	.word	0xe000ed00

08005a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a10:	b480      	push	{r7}
 8005a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a14:	4b04      	ldr	r3, [pc, #16]	; (8005a28 <__NVIC_GetPriorityGrouping+0x18>)
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	0a1b      	lsrs	r3, r3, #8
 8005a1a:	f003 0307 	and.w	r3, r3, #7
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr
 8005a28:	e000ed00 	.word	0xe000ed00

08005a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	4603      	mov	r3, r0
 8005a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	db0b      	blt.n	8005a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a3e:	79fb      	ldrb	r3, [r7, #7]
 8005a40:	f003 021f 	and.w	r2, r3, #31
 8005a44:	4907      	ldr	r1, [pc, #28]	; (8005a64 <__NVIC_EnableIRQ+0x38>)
 8005a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a4a:	095b      	lsrs	r3, r3, #5
 8005a4c:	2001      	movs	r0, #1
 8005a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a56:	bf00      	nop
 8005a58:	370c      	adds	r7, #12
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	e000e100 	.word	0xe000e100

08005a68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b083      	sub	sp, #12
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	4603      	mov	r3, r0
 8005a70:	6039      	str	r1, [r7, #0]
 8005a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	db0a      	blt.n	8005a92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	b2da      	uxtb	r2, r3
 8005a80:	490c      	ldr	r1, [pc, #48]	; (8005ab4 <__NVIC_SetPriority+0x4c>)
 8005a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a86:	0112      	lsls	r2, r2, #4
 8005a88:	b2d2      	uxtb	r2, r2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005a90:	e00a      	b.n	8005aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a92:	683b      	ldr	r3, [r7, #0]
 8005a94:	b2da      	uxtb	r2, r3
 8005a96:	4908      	ldr	r1, [pc, #32]	; (8005ab8 <__NVIC_SetPriority+0x50>)
 8005a98:	79fb      	ldrb	r3, [r7, #7]
 8005a9a:	f003 030f 	and.w	r3, r3, #15
 8005a9e:	3b04      	subs	r3, #4
 8005aa0:	0112      	lsls	r2, r2, #4
 8005aa2:	b2d2      	uxtb	r2, r2
 8005aa4:	440b      	add	r3, r1
 8005aa6:	761a      	strb	r2, [r3, #24]
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr
 8005ab4:	e000e100 	.word	0xe000e100
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005abc:	b480      	push	{r7}
 8005abe:	b089      	sub	sp, #36	; 0x24
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	60f8      	str	r0, [r7, #12]
 8005ac4:	60b9      	str	r1, [r7, #8]
 8005ac6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 0307 	and.w	r3, r3, #7
 8005ace:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	f1c3 0307 	rsb	r3, r3, #7
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	bf28      	it	cs
 8005ada:	2304      	movcs	r3, #4
 8005adc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	2b06      	cmp	r3, #6
 8005ae4:	d902      	bls.n	8005aec <NVIC_EncodePriority+0x30>
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3b03      	subs	r3, #3
 8005aea:	e000      	b.n	8005aee <NVIC_EncodePriority+0x32>
 8005aec:	2300      	movs	r3, #0
 8005aee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005af0:	f04f 32ff 	mov.w	r2, #4294967295
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	43da      	mvns	r2, r3
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	401a      	ands	r2, r3
 8005b00:	697b      	ldr	r3, [r7, #20]
 8005b02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b04:	f04f 31ff 	mov.w	r1, #4294967295
 8005b08:	697b      	ldr	r3, [r7, #20]
 8005b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b0e:	43d9      	mvns	r1, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b14:	4313      	orrs	r3, r2
         );
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3724      	adds	r7, #36	; 0x24
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
	...

08005b24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b082      	sub	sp, #8
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3b01      	subs	r3, #1
 8005b30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b34:	d301      	bcc.n	8005b3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b36:	2301      	movs	r3, #1
 8005b38:	e00f      	b.n	8005b5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b3a:	4a0a      	ldr	r2, [pc, #40]	; (8005b64 <SysTick_Config+0x40>)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3b01      	subs	r3, #1
 8005b40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b42:	210f      	movs	r1, #15
 8005b44:	f04f 30ff 	mov.w	r0, #4294967295
 8005b48:	f7ff ff8e 	bl	8005a68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b4c:	4b05      	ldr	r3, [pc, #20]	; (8005b64 <SysTick_Config+0x40>)
 8005b4e:	2200      	movs	r2, #0
 8005b50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b52:	4b04      	ldr	r3, [pc, #16]	; (8005b64 <SysTick_Config+0x40>)
 8005b54:	2207      	movs	r2, #7
 8005b56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	e000e010 	.word	0xe000e010

08005b68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ff29 	bl	80059c8 <__NVIC_SetPriorityGrouping>
}
 8005b76:	bf00      	nop
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}

08005b7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b086      	sub	sp, #24
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	4603      	mov	r3, r0
 8005b86:	60b9      	str	r1, [r7, #8]
 8005b88:	607a      	str	r2, [r7, #4]
 8005b8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005b90:	f7ff ff3e 	bl	8005a10 <__NVIC_GetPriorityGrouping>
 8005b94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f7ff ff8e 	bl	8005abc <NVIC_EncodePriority>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ba6:	4611      	mov	r1, r2
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff ff5d 	bl	8005a68 <__NVIC_SetPriority>
}
 8005bae:	bf00      	nop
 8005bb0:	3718      	adds	r7, #24
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b082      	sub	sp, #8
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	4603      	mov	r3, r0
 8005bbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bc4:	4618      	mov	r0, r3
 8005bc6:	f7ff ff31 	bl	8005a2c <__NVIC_EnableIRQ>
}
 8005bca:	bf00      	nop
 8005bcc:	3708      	adds	r7, #8
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b082      	sub	sp, #8
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f7ff ffa2 	bl	8005b24 <SysTick_Config>
 8005be0:	4603      	mov	r3, r0
}
 8005be2:	4618      	mov	r0, r3
 8005be4:	3708      	adds	r7, #8
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bd80      	pop	{r7, pc}
	...

08005bec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b086      	sub	sp, #24
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005bf8:	f7ff fab4 	bl	8005164 <HAL_GetTick>
 8005bfc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d101      	bne.n	8005c08 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	e099      	b.n	8005d3c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2202      	movs	r2, #2
 8005c0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	f022 0201 	bic.w	r2, r2, #1
 8005c26:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c28:	e00f      	b.n	8005c4a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c2a:	f7ff fa9b 	bl	8005164 <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	2b05      	cmp	r3, #5
 8005c36:	d908      	bls.n	8005c4a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2220      	movs	r2, #32
 8005c3c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2203      	movs	r2, #3
 8005c42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e078      	b.n	8005d3c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f003 0301 	and.w	r3, r3, #1
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1e8      	bne.n	8005c2a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	4b38      	ldr	r3, [pc, #224]	; (8005d44 <HAL_DMA_Init+0x158>)
 8005c64:	4013      	ands	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c76:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	691b      	ldr	r3, [r3, #16]
 8005c7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	699b      	ldr	r3, [r3, #24]
 8005c88:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	6a1b      	ldr	r3, [r3, #32]
 8005c94:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c96:	697a      	ldr	r2, [r7, #20]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca0:	2b04      	cmp	r3, #4
 8005ca2:	d107      	bne.n	8005cb4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	4313      	orrs	r3, r2
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	4313      	orrs	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	f023 0307 	bic.w	r3, r3, #7
 8005cca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cd0:	697a      	ldr	r2, [r7, #20]
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cda:	2b04      	cmp	r3, #4
 8005cdc:	d117      	bne.n	8005d0e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	4313      	orrs	r3, r2
 8005ce6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00e      	beq.n	8005d0e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 fb1b 	bl	800632c <DMA_CheckFifoParam>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d008      	beq.n	8005d0e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2240      	movs	r2, #64	; 0x40
 8005d00:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e016      	b.n	8005d3c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fad2 	bl	80062c0 <DMA_CalcBaseAndBitshift>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d24:	223f      	movs	r2, #63	; 0x3f
 8005d26:	409a      	lsls	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2201      	movs	r2, #1
 8005d36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3718      	adds	r7, #24
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	f010803f 	.word	0xf010803f

08005d48 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d56:	2300      	movs	r3, #0
 8005d58:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d66:	2b01      	cmp	r3, #1
 8005d68:	d101      	bne.n	8005d6e <HAL_DMA_Start_IT+0x26>
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e040      	b.n	8005df0 <HAL_DMA_Start_IT+0xa8>
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2201      	movs	r2, #1
 8005d72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d7c:	b2db      	uxtb	r3, r3
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d12f      	bne.n	8005de2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2202      	movs	r2, #2
 8005d86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	687a      	ldr	r2, [r7, #4]
 8005d94:	68b9      	ldr	r1, [r7, #8]
 8005d96:	68f8      	ldr	r0, [r7, #12]
 8005d98:	f000 fa64 	bl	8006264 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005da0:	223f      	movs	r2, #63	; 0x3f
 8005da2:	409a      	lsls	r2, r3
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f042 0216 	orr.w	r2, r2, #22
 8005db6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d007      	beq.n	8005dd0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f042 0208 	orr.w	r2, r2, #8
 8005dce:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	f042 0201 	orr.w	r2, r2, #1
 8005dde:	601a      	str	r2, [r3, #0]
 8005de0:	e005      	b.n	8005dee <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005dea:	2302      	movs	r3, #2
 8005dec:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3718      	adds	r7, #24
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e04:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e06:	f7ff f9ad 	bl	8005164 <HAL_GetTick>
 8005e0a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b02      	cmp	r3, #2
 8005e16:	d008      	beq.n	8005e2a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2280      	movs	r2, #128	; 0x80
 8005e1c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2200      	movs	r2, #0
 8005e22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e26:	2301      	movs	r3, #1
 8005e28:	e052      	b.n	8005ed0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f022 0216 	bic.w	r2, r2, #22
 8005e38:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	695a      	ldr	r2, [r3, #20]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e48:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d103      	bne.n	8005e5a <HAL_DMA_Abort+0x62>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d007      	beq.n	8005e6a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0208 	bic.w	r2, r2, #8
 8005e68:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	f022 0201 	bic.w	r2, r2, #1
 8005e78:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e7a:	e013      	b.n	8005ea4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e7c:	f7ff f972 	bl	8005164 <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	68bb      	ldr	r3, [r7, #8]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b05      	cmp	r3, #5
 8005e88:	d90c      	bls.n	8005ea4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2220      	movs	r2, #32
 8005e8e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2203      	movs	r2, #3
 8005e94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ea0:	2303      	movs	r3, #3
 8005ea2:	e015      	b.n	8005ed0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1e4      	bne.n	8005e7c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005eb6:	223f      	movs	r2, #63	; 0x3f
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2200      	movs	r2, #0
 8005eca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005ece:	2300      	movs	r3, #0
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3710      	adds	r7, #16
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005ee6:	b2db      	uxtb	r3, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d004      	beq.n	8005ef6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2280      	movs	r2, #128	; 0x80
 8005ef0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e00c      	b.n	8005f10 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2205      	movs	r2, #5
 8005efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	370c      	adds	r7, #12
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f24:	2300      	movs	r3, #0
 8005f26:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f28:	4b8e      	ldr	r3, [pc, #568]	; (8006164 <HAL_DMA_IRQHandler+0x248>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a8e      	ldr	r2, [pc, #568]	; (8006168 <HAL_DMA_IRQHandler+0x24c>)
 8005f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f32:	0a9b      	lsrs	r3, r3, #10
 8005f34:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f3a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f46:	2208      	movs	r2, #8
 8005f48:	409a      	lsls	r2, r3
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	4013      	ands	r3, r2
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d01a      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d013      	beq.n	8005f88 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681a      	ldr	r2, [r3, #0]
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f022 0204 	bic.w	r2, r2, #4
 8005f6e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f74:	2208      	movs	r2, #8
 8005f76:	409a      	lsls	r2, r3
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f80:	f043 0201 	orr.w	r2, r3, #1
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f8c:	2201      	movs	r2, #1
 8005f8e:	409a      	lsls	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4013      	ands	r3, r2
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d012      	beq.n	8005fbe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	695b      	ldr	r3, [r3, #20]
 8005f9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d00b      	beq.n	8005fbe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005faa:	2201      	movs	r2, #1
 8005fac:	409a      	lsls	r2, r3
 8005fae:	693b      	ldr	r3, [r7, #16]
 8005fb0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fb6:	f043 0202 	orr.w	r2, r3, #2
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	409a      	lsls	r2, r3
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	4013      	ands	r3, r2
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d012      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0302 	and.w	r3, r3, #2
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe0:	2204      	movs	r2, #4
 8005fe2:	409a      	lsls	r2, r3
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fec:	f043 0204 	orr.w	r2, r3, #4
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ff8:	2210      	movs	r2, #16
 8005ffa:	409a      	lsls	r2, r3
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b00      	cmp	r3, #0
 8006002:	d043      	beq.n	800608c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f003 0308 	and.w	r3, r3, #8
 800600e:	2b00      	cmp	r3, #0
 8006010:	d03c      	beq.n	800608c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006016:	2210      	movs	r2, #16
 8006018:	409a      	lsls	r2, r3
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006028:	2b00      	cmp	r3, #0
 800602a:	d018      	beq.n	800605e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006036:	2b00      	cmp	r3, #0
 8006038:	d108      	bne.n	800604c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800603e:	2b00      	cmp	r3, #0
 8006040:	d024      	beq.n	800608c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006046:	6878      	ldr	r0, [r7, #4]
 8006048:	4798      	blx	r3
 800604a:	e01f      	b.n	800608c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006050:	2b00      	cmp	r3, #0
 8006052:	d01b      	beq.n	800608c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	4798      	blx	r3
 800605c:	e016      	b.n	800608c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006068:	2b00      	cmp	r3, #0
 800606a:	d107      	bne.n	800607c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	681a      	ldr	r2, [r3, #0]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f022 0208 	bic.w	r2, r2, #8
 800607a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2b00      	cmp	r3, #0
 8006082:	d003      	beq.n	800608c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006090:	2220      	movs	r2, #32
 8006092:	409a      	lsls	r2, r3
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4013      	ands	r3, r2
 8006098:	2b00      	cmp	r3, #0
 800609a:	f000 808f 	beq.w	80061bc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0310 	and.w	r3, r3, #16
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 8087 	beq.w	80061bc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b2:	2220      	movs	r2, #32
 80060b4:	409a      	lsls	r2, r3
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b05      	cmp	r3, #5
 80060c4:	d136      	bne.n	8006134 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	681a      	ldr	r2, [r3, #0]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f022 0216 	bic.w	r2, r2, #22
 80060d4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	695a      	ldr	r2, [r3, #20]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060e4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d103      	bne.n	80060f6 <HAL_DMA_IRQHandler+0x1da>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d007      	beq.n	8006106 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681a      	ldr	r2, [r3, #0]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0208 	bic.w	r2, r2, #8
 8006104:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610a:	223f      	movs	r2, #63	; 0x3f
 800610c:	409a      	lsls	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2201      	movs	r2, #1
 8006116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006126:	2b00      	cmp	r3, #0
 8006128:	d07e      	beq.n	8006228 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800612e:	6878      	ldr	r0, [r7, #4]
 8006130:	4798      	blx	r3
        }
        return;
 8006132:	e079      	b.n	8006228 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800613e:	2b00      	cmp	r3, #0
 8006140:	d01d      	beq.n	800617e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800614c:	2b00      	cmp	r3, #0
 800614e:	d10d      	bne.n	800616c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006154:	2b00      	cmp	r3, #0
 8006156:	d031      	beq.n	80061bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800615c:	6878      	ldr	r0, [r7, #4]
 800615e:	4798      	blx	r3
 8006160:	e02c      	b.n	80061bc <HAL_DMA_IRQHandler+0x2a0>
 8006162:	bf00      	nop
 8006164:	20000250 	.word	0x20000250
 8006168:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006170:	2b00      	cmp	r3, #0
 8006172:	d023      	beq.n	80061bc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006178:	6878      	ldr	r0, [r7, #4]
 800617a:	4798      	blx	r3
 800617c:	e01e      	b.n	80061bc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006188:	2b00      	cmp	r3, #0
 800618a:	d10f      	bne.n	80061ac <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f022 0210 	bic.w	r2, r2, #16
 800619a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2200      	movs	r2, #0
 80061a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d003      	beq.n	80061bc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061b8:	6878      	ldr	r0, [r7, #4]
 80061ba:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d032      	beq.n	800622a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061c8:	f003 0301 	and.w	r3, r3, #1
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d022      	beq.n	8006216 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2205      	movs	r2, #5
 80061d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	681a      	ldr	r2, [r3, #0]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f022 0201 	bic.w	r2, r2, #1
 80061e6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60bb      	str	r3, [r7, #8]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d307      	bcc.n	8006204 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d1f2      	bne.n	80061e8 <HAL_DMA_IRQHandler+0x2cc>
 8006202:	e000      	b.n	8006206 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006204:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2201      	movs	r2, #1
 800620a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006222:	6878      	ldr	r0, [r7, #4]
 8006224:	4798      	blx	r3
 8006226:	e000      	b.n	800622a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006228:	bf00      	nop
    }
  }
}
 800622a:	3718      	adds	r7, #24
 800622c:	46bd      	mov	sp, r7
 800622e:	bd80      	pop	{r7, pc}

08006230 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800623e:	b2db      	uxtb	r3, r3
}
 8006240:	4618      	mov	r0, r3
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006258:	4618      	mov	r0, r3
 800625a:	370c      	adds	r7, #12
 800625c:	46bd      	mov	sp, r7
 800625e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006262:	4770      	bx	lr

08006264 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006264:	b480      	push	{r7}
 8006266:	b085      	sub	sp, #20
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	681a      	ldr	r2, [r3, #0]
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006280:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	683a      	ldr	r2, [r7, #0]
 8006288:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	2b40      	cmp	r3, #64	; 0x40
 8006290:	d108      	bne.n	80062a4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	68ba      	ldr	r2, [r7, #8]
 80062a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062a2:	e007      	b.n	80062b4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	68ba      	ldr	r2, [r7, #8]
 80062aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	687a      	ldr	r2, [r7, #4]
 80062b2:	60da      	str	r2, [r3, #12]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	3b10      	subs	r3, #16
 80062d0:	4a14      	ldr	r2, [pc, #80]	; (8006324 <DMA_CalcBaseAndBitshift+0x64>)
 80062d2:	fba2 2303 	umull	r2, r3, r2, r3
 80062d6:	091b      	lsrs	r3, r3, #4
 80062d8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062da:	4a13      	ldr	r2, [pc, #76]	; (8006328 <DMA_CalcBaseAndBitshift+0x68>)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	781b      	ldrb	r3, [r3, #0]
 80062e2:	461a      	mov	r2, r3
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b03      	cmp	r3, #3
 80062ec:	d909      	bls.n	8006302 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80062f6:	f023 0303 	bic.w	r3, r3, #3
 80062fa:	1d1a      	adds	r2, r3, #4
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	659a      	str	r2, [r3, #88]	; 0x58
 8006300:	e007      	b.n	8006312 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800630a:	f023 0303 	bic.w	r3, r3, #3
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	aaaaaaab 	.word	0xaaaaaaab
 8006328:	08012540 	.word	0x08012540

0800632c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800632c:	b480      	push	{r7}
 800632e:	b085      	sub	sp, #20
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006334:	2300      	movs	r3, #0
 8006336:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800633c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	699b      	ldr	r3, [r3, #24]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d11f      	bne.n	8006386 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	2b03      	cmp	r3, #3
 800634a:	d856      	bhi.n	80063fa <DMA_CheckFifoParam+0xce>
 800634c:	a201      	add	r2, pc, #4	; (adr r2, 8006354 <DMA_CheckFifoParam+0x28>)
 800634e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006352:	bf00      	nop
 8006354:	08006365 	.word	0x08006365
 8006358:	08006377 	.word	0x08006377
 800635c:	08006365 	.word	0x08006365
 8006360:	080063fb 	.word	0x080063fb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800636c:	2b00      	cmp	r3, #0
 800636e:	d046      	beq.n	80063fe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006374:	e043      	b.n	80063fe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800637e:	d140      	bne.n	8006402 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006380:	2301      	movs	r3, #1
 8006382:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006384:	e03d      	b.n	8006402 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	699b      	ldr	r3, [r3, #24]
 800638a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800638e:	d121      	bne.n	80063d4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	2b03      	cmp	r3, #3
 8006394:	d837      	bhi.n	8006406 <DMA_CheckFifoParam+0xda>
 8006396:	a201      	add	r2, pc, #4	; (adr r2, 800639c <DMA_CheckFifoParam+0x70>)
 8006398:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800639c:	080063ad 	.word	0x080063ad
 80063a0:	080063b3 	.word	0x080063b3
 80063a4:	080063ad 	.word	0x080063ad
 80063a8:	080063c5 	.word	0x080063c5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063ac:	2301      	movs	r3, #1
 80063ae:	73fb      	strb	r3, [r7, #15]
      break;
 80063b0:	e030      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063b6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d025      	beq.n	800640a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063c2:	e022      	b.n	800640a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063cc:	d11f      	bne.n	800640e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063ce:	2301      	movs	r3, #1
 80063d0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063d2:	e01c      	b.n	800640e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	2b02      	cmp	r3, #2
 80063d8:	d903      	bls.n	80063e2 <DMA_CheckFifoParam+0xb6>
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	2b03      	cmp	r3, #3
 80063de:	d003      	beq.n	80063e8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80063e0:	e018      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80063e2:	2301      	movs	r3, #1
 80063e4:	73fb      	strb	r3, [r7, #15]
      break;
 80063e6:	e015      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00e      	beq.n	8006412 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80063f4:	2301      	movs	r3, #1
 80063f6:	73fb      	strb	r3, [r7, #15]
      break;
 80063f8:	e00b      	b.n	8006412 <DMA_CheckFifoParam+0xe6>
      break;
 80063fa:	bf00      	nop
 80063fc:	e00a      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;
 80063fe:	bf00      	nop
 8006400:	e008      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;
 8006402:	bf00      	nop
 8006404:	e006      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;
 8006406:	bf00      	nop
 8006408:	e004      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;
 800640a:	bf00      	nop
 800640c:	e002      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;   
 800640e:	bf00      	nop
 8006410:	e000      	b.n	8006414 <DMA_CheckFifoParam+0xe8>
      break;
 8006412:	bf00      	nop
    }
  } 
  
  return status; 
 8006414:	7bfb      	ldrb	r3, [r7, #15]
}
 8006416:	4618      	mov	r0, r3
 8006418:	3714      	adds	r7, #20
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr
 8006422:	bf00      	nop

08006424 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006424:	b480      	push	{r7}
 8006426:	b089      	sub	sp, #36	; 0x24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
 800642c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800642e:	2300      	movs	r3, #0
 8006430:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006432:	2300      	movs	r3, #0
 8006434:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006436:	2300      	movs	r3, #0
 8006438:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
 800643e:	e159      	b.n	80066f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006440:	2201      	movs	r2, #1
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	697a      	ldr	r2, [r7, #20]
 8006450:	4013      	ands	r3, r2
 8006452:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	429a      	cmp	r2, r3
 800645a:	f040 8148 	bne.w	80066ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	f003 0303 	and.w	r3, r3, #3
 8006466:	2b01      	cmp	r3, #1
 8006468:	d005      	beq.n	8006476 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006472:	2b02      	cmp	r3, #2
 8006474:	d130      	bne.n	80064d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	2203      	movs	r2, #3
 8006482:	fa02 f303 	lsl.w	r3, r2, r3
 8006486:	43db      	mvns	r3, r3
 8006488:	69ba      	ldr	r2, [r7, #24]
 800648a:	4013      	ands	r3, r2
 800648c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68da      	ldr	r2, [r3, #12]
 8006492:	69fb      	ldr	r3, [r7, #28]
 8006494:	005b      	lsls	r3, r3, #1
 8006496:	fa02 f303 	lsl.w	r3, r2, r3
 800649a:	69ba      	ldr	r2, [r7, #24]
 800649c:	4313      	orrs	r3, r2
 800649e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064ac:	2201      	movs	r2, #1
 80064ae:	69fb      	ldr	r3, [r7, #28]
 80064b0:	fa02 f303 	lsl.w	r3, r2, r3
 80064b4:	43db      	mvns	r3, r3
 80064b6:	69ba      	ldr	r2, [r7, #24]
 80064b8:	4013      	ands	r3, r2
 80064ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064bc:	683b      	ldr	r3, [r7, #0]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	091b      	lsrs	r3, r3, #4
 80064c2:	f003 0201 	and.w	r2, r3, #1
 80064c6:	69fb      	ldr	r3, [r7, #28]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	69ba      	ldr	r2, [r7, #24]
 80064ce:	4313      	orrs	r3, r2
 80064d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	69ba      	ldr	r2, [r7, #24]
 80064d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	f003 0303 	and.w	r3, r3, #3
 80064e0:	2b03      	cmp	r3, #3
 80064e2:	d017      	beq.n	8006514 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	68db      	ldr	r3, [r3, #12]
 80064e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	2203      	movs	r2, #3
 80064f0:	fa02 f303 	lsl.w	r3, r2, r3
 80064f4:	43db      	mvns	r3, r3
 80064f6:	69ba      	ldr	r2, [r7, #24]
 80064f8:	4013      	ands	r3, r2
 80064fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	689a      	ldr	r2, [r3, #8]
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	005b      	lsls	r3, r3, #1
 8006504:	fa02 f303 	lsl.w	r3, r2, r3
 8006508:	69ba      	ldr	r2, [r7, #24]
 800650a:	4313      	orrs	r3, r2
 800650c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	69ba      	ldr	r2, [r7, #24]
 8006512:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	f003 0303 	and.w	r3, r3, #3
 800651c:	2b02      	cmp	r3, #2
 800651e:	d123      	bne.n	8006568 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	08da      	lsrs	r2, r3, #3
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3208      	adds	r2, #8
 8006528:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800652e:	69fb      	ldr	r3, [r7, #28]
 8006530:	f003 0307 	and.w	r3, r3, #7
 8006534:	009b      	lsls	r3, r3, #2
 8006536:	220f      	movs	r2, #15
 8006538:	fa02 f303 	lsl.w	r3, r2, r3
 800653c:	43db      	mvns	r3, r3
 800653e:	69ba      	ldr	r2, [r7, #24]
 8006540:	4013      	ands	r3, r2
 8006542:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	69fb      	ldr	r3, [r7, #28]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	009b      	lsls	r3, r3, #2
 8006550:	fa02 f303 	lsl.w	r3, r2, r3
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	4313      	orrs	r3, r2
 8006558:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	08da      	lsrs	r2, r3, #3
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	3208      	adds	r2, #8
 8006562:	69b9      	ldr	r1, [r7, #24]
 8006564:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	005b      	lsls	r3, r3, #1
 8006572:	2203      	movs	r2, #3
 8006574:	fa02 f303 	lsl.w	r3, r2, r3
 8006578:	43db      	mvns	r3, r3
 800657a:	69ba      	ldr	r2, [r7, #24]
 800657c:	4013      	ands	r3, r2
 800657e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006580:	683b      	ldr	r3, [r7, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	f003 0203 	and.w	r2, r3, #3
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	f000 80a2 	beq.w	80066ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60fb      	str	r3, [r7, #12]
 80065ae:	4b57      	ldr	r3, [pc, #348]	; (800670c <HAL_GPIO_Init+0x2e8>)
 80065b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b2:	4a56      	ldr	r2, [pc, #344]	; (800670c <HAL_GPIO_Init+0x2e8>)
 80065b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065b8:	6453      	str	r3, [r2, #68]	; 0x44
 80065ba:	4b54      	ldr	r3, [pc, #336]	; (800670c <HAL_GPIO_Init+0x2e8>)
 80065bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065c6:	4a52      	ldr	r2, [pc, #328]	; (8006710 <HAL_GPIO_Init+0x2ec>)
 80065c8:	69fb      	ldr	r3, [r7, #28]
 80065ca:	089b      	lsrs	r3, r3, #2
 80065cc:	3302      	adds	r3, #2
 80065ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065d4:	69fb      	ldr	r3, [r7, #28]
 80065d6:	f003 0303 	and.w	r3, r3, #3
 80065da:	009b      	lsls	r3, r3, #2
 80065dc:	220f      	movs	r2, #15
 80065de:	fa02 f303 	lsl.w	r3, r2, r3
 80065e2:	43db      	mvns	r3, r3
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	4013      	ands	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a49      	ldr	r2, [pc, #292]	; (8006714 <HAL_GPIO_Init+0x2f0>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d019      	beq.n	8006626 <HAL_GPIO_Init+0x202>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a48      	ldr	r2, [pc, #288]	; (8006718 <HAL_GPIO_Init+0x2f4>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d013      	beq.n	8006622 <HAL_GPIO_Init+0x1fe>
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	4a47      	ldr	r2, [pc, #284]	; (800671c <HAL_GPIO_Init+0x2f8>)
 80065fe:	4293      	cmp	r3, r2
 8006600:	d00d      	beq.n	800661e <HAL_GPIO_Init+0x1fa>
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a46      	ldr	r2, [pc, #280]	; (8006720 <HAL_GPIO_Init+0x2fc>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d007      	beq.n	800661a <HAL_GPIO_Init+0x1f6>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a45      	ldr	r2, [pc, #276]	; (8006724 <HAL_GPIO_Init+0x300>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d101      	bne.n	8006616 <HAL_GPIO_Init+0x1f2>
 8006612:	2304      	movs	r3, #4
 8006614:	e008      	b.n	8006628 <HAL_GPIO_Init+0x204>
 8006616:	2307      	movs	r3, #7
 8006618:	e006      	b.n	8006628 <HAL_GPIO_Init+0x204>
 800661a:	2303      	movs	r3, #3
 800661c:	e004      	b.n	8006628 <HAL_GPIO_Init+0x204>
 800661e:	2302      	movs	r3, #2
 8006620:	e002      	b.n	8006628 <HAL_GPIO_Init+0x204>
 8006622:	2301      	movs	r3, #1
 8006624:	e000      	b.n	8006628 <HAL_GPIO_Init+0x204>
 8006626:	2300      	movs	r3, #0
 8006628:	69fa      	ldr	r2, [r7, #28]
 800662a:	f002 0203 	and.w	r2, r2, #3
 800662e:	0092      	lsls	r2, r2, #2
 8006630:	4093      	lsls	r3, r2
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	4313      	orrs	r3, r2
 8006636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006638:	4935      	ldr	r1, [pc, #212]	; (8006710 <HAL_GPIO_Init+0x2ec>)
 800663a:	69fb      	ldr	r3, [r7, #28]
 800663c:	089b      	lsrs	r3, r3, #2
 800663e:	3302      	adds	r3, #2
 8006640:	69ba      	ldr	r2, [r7, #24]
 8006642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006646:	4b38      	ldr	r3, [pc, #224]	; (8006728 <HAL_GPIO_Init+0x304>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800664c:	693b      	ldr	r3, [r7, #16]
 800664e:	43db      	mvns	r3, r3
 8006650:	69ba      	ldr	r2, [r7, #24]
 8006652:	4013      	ands	r3, r2
 8006654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006662:	69ba      	ldr	r2, [r7, #24]
 8006664:	693b      	ldr	r3, [r7, #16]
 8006666:	4313      	orrs	r3, r2
 8006668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800666a:	4a2f      	ldr	r2, [pc, #188]	; (8006728 <HAL_GPIO_Init+0x304>)
 800666c:	69bb      	ldr	r3, [r7, #24]
 800666e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006670:	4b2d      	ldr	r3, [pc, #180]	; (8006728 <HAL_GPIO_Init+0x304>)
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	43db      	mvns	r3, r3
 800667a:	69ba      	ldr	r2, [r7, #24]
 800667c:	4013      	ands	r3, r2
 800667e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	685b      	ldr	r3, [r3, #4]
 8006684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006688:	2b00      	cmp	r3, #0
 800668a:	d003      	beq.n	8006694 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800668c:	69ba      	ldr	r2, [r7, #24]
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4313      	orrs	r3, r2
 8006692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006694:	4a24      	ldr	r2, [pc, #144]	; (8006728 <HAL_GPIO_Init+0x304>)
 8006696:	69bb      	ldr	r3, [r7, #24]
 8006698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800669a:	4b23      	ldr	r3, [pc, #140]	; (8006728 <HAL_GPIO_Init+0x304>)
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	43db      	mvns	r3, r3
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	4013      	ands	r3, r2
 80066a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066b6:	69ba      	ldr	r2, [r7, #24]
 80066b8:	693b      	ldr	r3, [r7, #16]
 80066ba:	4313      	orrs	r3, r2
 80066bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066be:	4a1a      	ldr	r2, [pc, #104]	; (8006728 <HAL_GPIO_Init+0x304>)
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066c4:	4b18      	ldr	r3, [pc, #96]	; (8006728 <HAL_GPIO_Init+0x304>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ca:	693b      	ldr	r3, [r7, #16]
 80066cc:	43db      	mvns	r3, r3
 80066ce:	69ba      	ldr	r2, [r7, #24]
 80066d0:	4013      	ands	r3, r2
 80066d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d003      	beq.n	80066e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80066e8:	4a0f      	ldr	r2, [pc, #60]	; (8006728 <HAL_GPIO_Init+0x304>)
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80066ee:	69fb      	ldr	r3, [r7, #28]
 80066f0:	3301      	adds	r3, #1
 80066f2:	61fb      	str	r3, [r7, #28]
 80066f4:	69fb      	ldr	r3, [r7, #28]
 80066f6:	2b0f      	cmp	r3, #15
 80066f8:	f67f aea2 	bls.w	8006440 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80066fc:	bf00      	nop
 80066fe:	bf00      	nop
 8006700:	3724      	adds	r7, #36	; 0x24
 8006702:	46bd      	mov	sp, r7
 8006704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006708:	4770      	bx	lr
 800670a:	bf00      	nop
 800670c:	40023800 	.word	0x40023800
 8006710:	40013800 	.word	0x40013800
 8006714:	40020000 	.word	0x40020000
 8006718:	40020400 	.word	0x40020400
 800671c:	40020800 	.word	0x40020800
 8006720:	40020c00 	.word	0x40020c00
 8006724:	40021000 	.word	0x40021000
 8006728:	40013c00 	.word	0x40013c00

0800672c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800672c:	b480      	push	{r7}
 800672e:	b085      	sub	sp, #20
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	460b      	mov	r3, r1
 8006736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	691a      	ldr	r2, [r3, #16]
 800673c:	887b      	ldrh	r3, [r7, #2]
 800673e:	4013      	ands	r3, r2
 8006740:	2b00      	cmp	r3, #0
 8006742:	d002      	beq.n	800674a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006744:	2301      	movs	r3, #1
 8006746:	73fb      	strb	r3, [r7, #15]
 8006748:	e001      	b.n	800674e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800674a:	2300      	movs	r3, #0
 800674c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800674e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006750:	4618      	mov	r0, r3
 8006752:	3714      	adds	r7, #20
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	460b      	mov	r3, r1
 8006766:	807b      	strh	r3, [r7, #2]
 8006768:	4613      	mov	r3, r2
 800676a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800676c:	787b      	ldrb	r3, [r7, #1]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d003      	beq.n	800677a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006772:	887a      	ldrh	r2, [r7, #2]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006778:	e003      	b.n	8006782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800677a:	887b      	ldrh	r3, [r7, #2]
 800677c:	041a      	lsls	r2, r3, #16
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	619a      	str	r2, [r3, #24]
}
 8006782:	bf00      	nop
 8006784:	370c      	adds	r7, #12
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
	...

08006790 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	4603      	mov	r3, r0
 8006798:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800679a:	4b08      	ldr	r3, [pc, #32]	; (80067bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800679c:	695a      	ldr	r2, [r3, #20]
 800679e:	88fb      	ldrh	r3, [r7, #6]
 80067a0:	4013      	ands	r3, r2
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d006      	beq.n	80067b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067a6:	4a05      	ldr	r2, [pc, #20]	; (80067bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067a8:	88fb      	ldrh	r3, [r7, #6]
 80067aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067ac:	88fb      	ldrh	r3, [r7, #6]
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fb fec6 	bl	8002540 <HAL_GPIO_EXTI_Callback>
  }
}
 80067b4:	bf00      	nop
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	40013c00 	.word	0x40013c00

080067c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b084      	sub	sp, #16
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e12b      	b.n	8006a2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067d8:	b2db      	uxtb	r3, r3
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d106      	bne.n	80067ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f7fe f88e 	bl	8004908 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2224      	movs	r2, #36	; 0x24
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	681a      	ldr	r2, [r3, #0]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f022 0201 	bic.w	r2, r2, #1
 8006802:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006812:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006822:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006824:	f002 fe10 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 8006828:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	4a81      	ldr	r2, [pc, #516]	; (8006a34 <HAL_I2C_Init+0x274>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d807      	bhi.n	8006844 <HAL_I2C_Init+0x84>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	4a80      	ldr	r2, [pc, #512]	; (8006a38 <HAL_I2C_Init+0x278>)
 8006838:	4293      	cmp	r3, r2
 800683a:	bf94      	ite	ls
 800683c:	2301      	movls	r3, #1
 800683e:	2300      	movhi	r3, #0
 8006840:	b2db      	uxtb	r3, r3
 8006842:	e006      	b.n	8006852 <HAL_I2C_Init+0x92>
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4a7d      	ldr	r2, [pc, #500]	; (8006a3c <HAL_I2C_Init+0x27c>)
 8006848:	4293      	cmp	r3, r2
 800684a:	bf94      	ite	ls
 800684c:	2301      	movls	r3, #1
 800684e:	2300      	movhi	r3, #0
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b00      	cmp	r3, #0
 8006854:	d001      	beq.n	800685a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0e7      	b.n	8006a2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	4a78      	ldr	r2, [pc, #480]	; (8006a40 <HAL_I2C_Init+0x280>)
 800685e:	fba2 2303 	umull	r2, r3, r2, r3
 8006862:	0c9b      	lsrs	r3, r3, #18
 8006864:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	68ba      	ldr	r2, [r7, #8]
 8006876:	430a      	orrs	r2, r1
 8006878:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	6a1b      	ldr	r3, [r3, #32]
 8006880:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	4a6a      	ldr	r2, [pc, #424]	; (8006a34 <HAL_I2C_Init+0x274>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d802      	bhi.n	8006894 <HAL_I2C_Init+0xd4>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	3301      	adds	r3, #1
 8006892:	e009      	b.n	80068a8 <HAL_I2C_Init+0xe8>
 8006894:	68bb      	ldr	r3, [r7, #8]
 8006896:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800689a:	fb02 f303 	mul.w	r3, r2, r3
 800689e:	4a69      	ldr	r2, [pc, #420]	; (8006a44 <HAL_I2C_Init+0x284>)
 80068a0:	fba2 2303 	umull	r2, r3, r2, r3
 80068a4:	099b      	lsrs	r3, r3, #6
 80068a6:	3301      	adds	r3, #1
 80068a8:	687a      	ldr	r2, [r7, #4]
 80068aa:	6812      	ldr	r2, [r2, #0]
 80068ac:	430b      	orrs	r3, r1
 80068ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	69db      	ldr	r3, [r3, #28]
 80068b6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068ba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	495c      	ldr	r1, [pc, #368]	; (8006a34 <HAL_I2C_Init+0x274>)
 80068c4:	428b      	cmp	r3, r1
 80068c6:	d819      	bhi.n	80068fc <HAL_I2C_Init+0x13c>
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	1e59      	subs	r1, r3, #1
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068d6:	1c59      	adds	r1, r3, #1
 80068d8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068dc:	400b      	ands	r3, r1
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00a      	beq.n	80068f8 <HAL_I2C_Init+0x138>
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	1e59      	subs	r1, r3, #1
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	005b      	lsls	r3, r3, #1
 80068ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80068f0:	3301      	adds	r3, #1
 80068f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80068f6:	e051      	b.n	800699c <HAL_I2C_Init+0x1dc>
 80068f8:	2304      	movs	r3, #4
 80068fa:	e04f      	b.n	800699c <HAL_I2C_Init+0x1dc>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	689b      	ldr	r3, [r3, #8]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d111      	bne.n	8006928 <HAL_I2C_Init+0x168>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	1e58      	subs	r0, r3, #1
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	6859      	ldr	r1, [r3, #4]
 800690c:	460b      	mov	r3, r1
 800690e:	005b      	lsls	r3, r3, #1
 8006910:	440b      	add	r3, r1
 8006912:	fbb0 f3f3 	udiv	r3, r0, r3
 8006916:	3301      	adds	r3, #1
 8006918:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800691c:	2b00      	cmp	r3, #0
 800691e:	bf0c      	ite	eq
 8006920:	2301      	moveq	r3, #1
 8006922:	2300      	movne	r3, #0
 8006924:	b2db      	uxtb	r3, r3
 8006926:	e012      	b.n	800694e <HAL_I2C_Init+0x18e>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	1e58      	subs	r0, r3, #1
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6859      	ldr	r1, [r3, #4]
 8006930:	460b      	mov	r3, r1
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	440b      	add	r3, r1
 8006936:	0099      	lsls	r1, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	fbb0 f3f3 	udiv	r3, r0, r3
 800693e:	3301      	adds	r3, #1
 8006940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006944:	2b00      	cmp	r3, #0
 8006946:	bf0c      	ite	eq
 8006948:	2301      	moveq	r3, #1
 800694a:	2300      	movne	r3, #0
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b00      	cmp	r3, #0
 8006950:	d001      	beq.n	8006956 <HAL_I2C_Init+0x196>
 8006952:	2301      	movs	r3, #1
 8006954:	e022      	b.n	800699c <HAL_I2C_Init+0x1dc>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	2b00      	cmp	r3, #0
 800695c:	d10e      	bne.n	800697c <HAL_I2C_Init+0x1bc>
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	1e58      	subs	r0, r3, #1
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6859      	ldr	r1, [r3, #4]
 8006966:	460b      	mov	r3, r1
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	440b      	add	r3, r1
 800696c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006970:	3301      	adds	r3, #1
 8006972:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006976:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800697a:	e00f      	b.n	800699c <HAL_I2C_Init+0x1dc>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	1e58      	subs	r0, r3, #1
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6859      	ldr	r1, [r3, #4]
 8006984:	460b      	mov	r3, r1
 8006986:	009b      	lsls	r3, r3, #2
 8006988:	440b      	add	r3, r1
 800698a:	0099      	lsls	r1, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	fbb0 f3f3 	udiv	r3, r0, r3
 8006992:	3301      	adds	r3, #1
 8006994:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006998:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800699c:	6879      	ldr	r1, [r7, #4]
 800699e:	6809      	ldr	r1, [r1, #0]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	69da      	ldr	r2, [r3, #28]
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	431a      	orrs	r2, r3
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	430a      	orrs	r2, r1
 80069be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	689b      	ldr	r3, [r3, #8]
 80069c6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069ce:	687a      	ldr	r2, [r7, #4]
 80069d0:	6911      	ldr	r1, [r2, #16]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	68d2      	ldr	r2, [r2, #12]
 80069d6:	4311      	orrs	r1, r2
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	6812      	ldr	r2, [r2, #0]
 80069dc:	430b      	orrs	r3, r1
 80069de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	68db      	ldr	r3, [r3, #12]
 80069e6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	695a      	ldr	r2, [r3, #20]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	699b      	ldr	r3, [r3, #24]
 80069f2:	431a      	orrs	r2, r3
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	430a      	orrs	r2, r1
 80069fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681a      	ldr	r2, [r3, #0]
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	f042 0201 	orr.w	r2, r2, #1
 8006a0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2220      	movs	r2, #32
 8006a16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a28:	2300      	movs	r3, #0
}
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	3710      	adds	r7, #16
 8006a2e:	46bd      	mov	sp, r7
 8006a30:	bd80      	pop	{r7, pc}
 8006a32:	bf00      	nop
 8006a34:	000186a0 	.word	0x000186a0
 8006a38:	001e847f 	.word	0x001e847f
 8006a3c:	003d08ff 	.word	0x003d08ff
 8006a40:	431bde83 	.word	0x431bde83
 8006a44:	10624dd3 	.word	0x10624dd3

08006a48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b088      	sub	sp, #32
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	60f8      	str	r0, [r7, #12]
 8006a50:	607a      	str	r2, [r7, #4]
 8006a52:	461a      	mov	r2, r3
 8006a54:	460b      	mov	r3, r1
 8006a56:	817b      	strh	r3, [r7, #10]
 8006a58:	4613      	mov	r3, r2
 8006a5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a5c:	f7fe fb82 	bl	8005164 <HAL_GetTick>
 8006a60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	2b20      	cmp	r3, #32
 8006a6c:	f040 80e0 	bne.w	8006c30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2319      	movs	r3, #25
 8006a76:	2201      	movs	r2, #1
 8006a78:	4970      	ldr	r1, [pc, #448]	; (8006c3c <HAL_I2C_Master_Transmit+0x1f4>)
 8006a7a:	68f8      	ldr	r0, [r7, #12]
 8006a7c:	f001 fea0 	bl	80087c0 <I2C_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d001      	beq.n	8006a8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006a86:	2302      	movs	r3, #2
 8006a88:	e0d3      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d101      	bne.n	8006a98 <HAL_I2C_Master_Transmit+0x50>
 8006a94:	2302      	movs	r3, #2
 8006a96:	e0cc      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d007      	beq.n	8006abe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f042 0201 	orr.w	r2, r2, #1
 8006abc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006acc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	2221      	movs	r2, #33	; 0x21
 8006ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2210      	movs	r2, #16
 8006ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	687a      	ldr	r2, [r7, #4]
 8006ae8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	893a      	ldrh	r2, [r7, #8]
 8006aee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006af4:	b29a      	uxth	r2, r3
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	4a50      	ldr	r2, [pc, #320]	; (8006c40 <HAL_I2C_Master_Transmit+0x1f8>)
 8006afe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b00:	8979      	ldrh	r1, [r7, #10]
 8006b02:	697b      	ldr	r3, [r7, #20]
 8006b04:	6a3a      	ldr	r2, [r7, #32]
 8006b06:	68f8      	ldr	r0, [r7, #12]
 8006b08:	f001 fd30 	bl	800856c <I2C_MasterRequestWrite>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d001      	beq.n	8006b16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b12:	2301      	movs	r3, #1
 8006b14:	e08d      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b16:	2300      	movs	r3, #0
 8006b18:	613b      	str	r3, [r7, #16]
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	613b      	str	r3, [r7, #16]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	699b      	ldr	r3, [r3, #24]
 8006b28:	613b      	str	r3, [r7, #16]
 8006b2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b2c:	e066      	b.n	8006bfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b2e:	697a      	ldr	r2, [r7, #20]
 8006b30:	6a39      	ldr	r1, [r7, #32]
 8006b32:	68f8      	ldr	r0, [r7, #12]
 8006b34:	f001 ff1a 	bl	800896c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d00d      	beq.n	8006b5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	d107      	bne.n	8006b56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	681b      	ldr	r3, [r3, #0]
 8006b4a:	681a      	ldr	r2, [r3, #0]
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b56:	2301      	movs	r3, #1
 8006b58:	e06b      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b5e:	781a      	ldrb	r2, [r3, #0]
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	3b01      	subs	r3, #1
 8006b78:	b29a      	uxth	r2, r3
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b82:	3b01      	subs	r3, #1
 8006b84:	b29a      	uxth	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b04      	cmp	r3, #4
 8006b96:	d11b      	bne.n	8006bd0 <HAL_I2C_Master_Transmit+0x188>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d017      	beq.n	8006bd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ba4:	781a      	ldrb	r2, [r3, #0]
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb0:	1c5a      	adds	r2, r3, #1
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	3b01      	subs	r3, #1
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	b29a      	uxth	r2, r3
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bd0:	697a      	ldr	r2, [r7, #20]
 8006bd2:	6a39      	ldr	r1, [r7, #32]
 8006bd4:	68f8      	ldr	r0, [r7, #12]
 8006bd6:	f001 ff0a 	bl	80089ee <I2C_WaitOnBTFFlagUntilTimeout>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00d      	beq.n	8006bfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006be4:	2b04      	cmp	r3, #4
 8006be6:	d107      	bne.n	8006bf8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	681a      	ldr	r2, [r3, #0]
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bf6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	e01a      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d194      	bne.n	8006b2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	681a      	ldr	r2, [r3, #0]
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2220      	movs	r2, #32
 8006c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	e000      	b.n	8006c32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c30:	2302      	movs	r3, #2
  }
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	00100002 	.word	0x00100002
 8006c40:	ffff0000 	.word	0xffff0000

08006c44 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006c44:	b480      	push	{r7}
 8006c46:	b087      	sub	sp, #28
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	60f8      	str	r0, [r7, #12]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	460b      	mov	r3, r1
 8006c52:	817b      	strh	r3, [r7, #10]
 8006c54:	4613      	mov	r3, r2
 8006c56:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006c58:	2300      	movs	r3, #0
 8006c5a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	f040 808d 	bne.w	8006d84 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c6a:	4b4a      	ldr	r3, [pc, #296]	; (8006d94 <HAL_I2C_Master_Receive_IT+0x150>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	08db      	lsrs	r3, r3, #3
 8006c70:	4a49      	ldr	r2, [pc, #292]	; (8006d98 <HAL_I2C_Master_Receive_IT+0x154>)
 8006c72:	fba2 2303 	umull	r2, r3, r2, r3
 8006c76:	0a1a      	lsrs	r2, r3, #8
 8006c78:	4613      	mov	r3, r2
 8006c7a:	009b      	lsls	r3, r3, #2
 8006c7c:	4413      	add	r3, r2
 8006c7e:	009a      	lsls	r2, r3, #2
 8006c80:	4413      	add	r3, r2
 8006c82:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	3b01      	subs	r3, #1
 8006c88:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d116      	bne.n	8006cbe <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	2200      	movs	r2, #0
 8006c94:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2220      	movs	r2, #32
 8006c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006caa:	f043 0220 	orr.w	r2, r3, #32
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e063      	b.n	8006d86 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	699b      	ldr	r3, [r3, #24]
 8006cc4:	f003 0302 	and.w	r3, r3, #2
 8006cc8:	2b02      	cmp	r3, #2
 8006cca:	d0db      	beq.n	8006c84 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d101      	bne.n	8006cda <HAL_I2C_Master_Receive_IT+0x96>
 8006cd6:	2302      	movs	r3, #2
 8006cd8:	e055      	b.n	8006d86 <HAL_I2C_Master_Receive_IT+0x142>
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	f003 0301 	and.w	r3, r3, #1
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d007      	beq.n	8006d00 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	f042 0201 	orr.w	r2, r2, #1
 8006cfe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	681a      	ldr	r2, [r3, #0]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d0e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2222      	movs	r2, #34	; 0x22
 8006d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2210      	movs	r2, #16
 8006d1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	687a      	ldr	r2, [r7, #4]
 8006d2a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	893a      	ldrh	r2, [r7, #8]
 8006d30:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d36:	b29a      	uxth	r2, r3
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	4a17      	ldr	r2, [pc, #92]	; (8006d9c <HAL_I2C_Master_Receive_IT+0x158>)
 8006d40:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d42:	897a      	ldrh	r2, [r7, #10]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	685a      	ldr	r2, [r3, #4]
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006d5e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681a      	ldr	r2, [r3, #0]
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d6e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d7e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006d80:	2300      	movs	r3, #0
 8006d82:	e000      	b.n	8006d86 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006d84:	2302      	movs	r3, #2
  }
}
 8006d86:	4618      	mov	r0, r3
 8006d88:	371c      	adds	r7, #28
 8006d8a:	46bd      	mov	sp, r7
 8006d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d90:	4770      	bx	lr
 8006d92:	bf00      	nop
 8006d94:	20000250 	.word	0x20000250
 8006d98:	14f8b589 	.word	0x14f8b589
 8006d9c:	ffff0000 	.word	0xffff0000

08006da0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006da8:	2300      	movs	r3, #0
 8006daa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006db8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006dc0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006dc8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dca:	7bfb      	ldrb	r3, [r7, #15]
 8006dcc:	2b10      	cmp	r3, #16
 8006dce:	d003      	beq.n	8006dd8 <HAL_I2C_EV_IRQHandler+0x38>
 8006dd0:	7bfb      	ldrb	r3, [r7, #15]
 8006dd2:	2b40      	cmp	r3, #64	; 0x40
 8006dd4:	f040 80c1 	bne.w	8006f5a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	695b      	ldr	r3, [r3, #20]
 8006de6:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f003 0301 	and.w	r3, r3, #1
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10d      	bne.n	8006e0e <HAL_I2C_EV_IRQHandler+0x6e>
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006df8:	d003      	beq.n	8006e02 <HAL_I2C_EV_IRQHandler+0x62>
 8006dfa:	693b      	ldr	r3, [r7, #16]
 8006dfc:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e00:	d101      	bne.n	8006e06 <HAL_I2C_EV_IRQHandler+0x66>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e000      	b.n	8006e08 <HAL_I2C_EV_IRQHandler+0x68>
 8006e06:	2300      	movs	r3, #0
 8006e08:	2b01      	cmp	r3, #1
 8006e0a:	f000 8132 	beq.w	8007072 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	f003 0301 	and.w	r3, r3, #1
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00c      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0x92>
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	0a5b      	lsrs	r3, r3, #9
 8006e1c:	f003 0301 	and.w	r3, r3, #1
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d006      	beq.n	8006e32 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f001 fe84 	bl	8008b32 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f000 fd83 	bl	8007936 <I2C_Master_SB>
 8006e30:	e092      	b.n	8006f58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	08db      	lsrs	r3, r3, #3
 8006e36:	f003 0301 	and.w	r3, r3, #1
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d009      	beq.n	8006e52 <HAL_I2C_EV_IRQHandler+0xb2>
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	0a5b      	lsrs	r3, r3, #9
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d003      	beq.n	8006e52 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fdf9 	bl	8007a42 <I2C_Master_ADD10>
 8006e50:	e082      	b.n	8006f58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	085b      	lsrs	r3, r3, #1
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_I2C_EV_IRQHandler+0xd2>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	0a5b      	lsrs	r3, r3, #9
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fe13 	bl	8007a96 <I2C_Master_ADDR>
 8006e70:	e072      	b.n	8006f58 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	089b      	lsrs	r3, r3, #2
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d03b      	beq.n	8006ef6 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	685b      	ldr	r3, [r3, #4]
 8006e84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e8c:	f000 80f3 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	09db      	lsrs	r3, r3, #7
 8006e94:	f003 0301 	and.w	r3, r3, #1
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00f      	beq.n	8006ebc <HAL_I2C_EV_IRQHandler+0x11c>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	0a9b      	lsrs	r3, r3, #10
 8006ea0:	f003 0301 	and.w	r3, r3, #1
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d009      	beq.n	8006ebc <HAL_I2C_EV_IRQHandler+0x11c>
 8006ea8:	69fb      	ldr	r3, [r7, #28]
 8006eaa:	089b      	lsrs	r3, r3, #2
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d103      	bne.n	8006ebc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f000 f9f3 	bl	80072a0 <I2C_MasterTransmit_TXE>
 8006eba:	e04d      	b.n	8006f58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ebc:	69fb      	ldr	r3, [r7, #28]
 8006ebe:	089b      	lsrs	r3, r3, #2
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80d6 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	0a5b      	lsrs	r3, r3, #9
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	f000 80cf 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ed8:	7bbb      	ldrb	r3, [r7, #14]
 8006eda:	2b21      	cmp	r3, #33	; 0x21
 8006edc:	d103      	bne.n	8006ee6 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 fa7a 	bl	80073d8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ee4:	e0c7      	b.n	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006ee6:	7bfb      	ldrb	r3, [r7, #15]
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	f040 80c4 	bne.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fae8 	bl	80074c4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006ef4:	e0bf      	b.n	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f04:	f000 80b7 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f08:	69fb      	ldr	r3, [r7, #28]
 8006f0a:	099b      	lsrs	r3, r3, #6
 8006f0c:	f003 0301 	and.w	r3, r3, #1
 8006f10:	2b00      	cmp	r3, #0
 8006f12:	d00f      	beq.n	8006f34 <HAL_I2C_EV_IRQHandler+0x194>
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	0a9b      	lsrs	r3, r3, #10
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d009      	beq.n	8006f34 <HAL_I2C_EV_IRQHandler+0x194>
 8006f20:	69fb      	ldr	r3, [r7, #28]
 8006f22:	089b      	lsrs	r3, r3, #2
 8006f24:	f003 0301 	and.w	r3, r3, #1
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d103      	bne.n	8006f34 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f000 fb5d 	bl	80075ec <I2C_MasterReceive_RXNE>
 8006f32:	e011      	b.n	8006f58 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	089b      	lsrs	r3, r3, #2
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	f000 809a 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	0a5b      	lsrs	r3, r3, #9
 8006f46:	f003 0301 	and.w	r3, r3, #1
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8093 	beq.w	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006f50:	6878      	ldr	r0, [r7, #4]
 8006f52:	f000 fc06 	bl	8007762 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f56:	e08e      	b.n	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f58:	e08d      	b.n	8007076 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d004      	beq.n	8006f6c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	695b      	ldr	r3, [r3, #20]
 8006f68:	61fb      	str	r3, [r7, #28]
 8006f6a:	e007      	b.n	8006f7c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	699b      	ldr	r3, [r3, #24]
 8006f72:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	695b      	ldr	r3, [r3, #20]
 8006f7a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f7c:	69fb      	ldr	r3, [r7, #28]
 8006f7e:	085b      	lsrs	r3, r3, #1
 8006f80:	f003 0301 	and.w	r3, r3, #1
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d012      	beq.n	8006fae <HAL_I2C_EV_IRQHandler+0x20e>
 8006f88:	697b      	ldr	r3, [r7, #20]
 8006f8a:	0a5b      	lsrs	r3, r3, #9
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00c      	beq.n	8006fae <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	699b      	ldr	r3, [r3, #24]
 8006fa2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006fa4:	69b9      	ldr	r1, [r7, #24]
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 ffc4 	bl	8007f34 <I2C_Slave_ADDR>
 8006fac:	e066      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	091b      	lsrs	r3, r3, #4
 8006fb2:	f003 0301 	and.w	r3, r3, #1
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d009      	beq.n	8006fce <HAL_I2C_EV_IRQHandler+0x22e>
 8006fba:	697b      	ldr	r3, [r7, #20]
 8006fbc:	0a5b      	lsrs	r3, r3, #9
 8006fbe:	f003 0301 	and.w	r3, r3, #1
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fffe 	bl	8007fc8 <I2C_Slave_STOPF>
 8006fcc:	e056      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fce:	7bbb      	ldrb	r3, [r7, #14]
 8006fd0:	2b21      	cmp	r3, #33	; 0x21
 8006fd2:	d002      	beq.n	8006fda <HAL_I2C_EV_IRQHandler+0x23a>
 8006fd4:	7bbb      	ldrb	r3, [r7, #14]
 8006fd6:	2b29      	cmp	r3, #41	; 0x29
 8006fd8:	d125      	bne.n	8007026 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	09db      	lsrs	r3, r3, #7
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00f      	beq.n	8007006 <HAL_I2C_EV_IRQHandler+0x266>
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	0a9b      	lsrs	r3, r3, #10
 8006fea:	f003 0301 	and.w	r3, r3, #1
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d009      	beq.n	8007006 <HAL_I2C_EV_IRQHandler+0x266>
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	089b      	lsrs	r3, r3, #2
 8006ff6:	f003 0301 	and.w	r3, r3, #1
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d103      	bne.n	8007006 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 feda 	bl	8007db8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007004:	e039      	b.n	800707a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	089b      	lsrs	r3, r3, #2
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d033      	beq.n	800707a <HAL_I2C_EV_IRQHandler+0x2da>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	0a5b      	lsrs	r3, r3, #9
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d02d      	beq.n	800707a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 ff07 	bl	8007e32 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007024:	e029      	b.n	800707a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	099b      	lsrs	r3, r3, #6
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d00f      	beq.n	8007052 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	0a9b      	lsrs	r3, r3, #10
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d009      	beq.n	8007052 <HAL_I2C_EV_IRQHandler+0x2b2>
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	089b      	lsrs	r3, r3, #2
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d103      	bne.n	8007052 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 ff12 	bl	8007e74 <I2C_SlaveReceive_RXNE>
 8007050:	e014      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	089b      	lsrs	r3, r3, #2
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d00e      	beq.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
 800705e:	697b      	ldr	r3, [r7, #20]
 8007060:	0a5b      	lsrs	r3, r3, #9
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d008      	beq.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 ff40 	bl	8007ef0 <I2C_SlaveReceive_BTF>
 8007070:	e004      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007072:	bf00      	nop
 8007074:	e002      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007076:	bf00      	nop
 8007078:	e000      	b.n	800707c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800707a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800707c:	3720      	adds	r7, #32
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b08a      	sub	sp, #40	; 0x28
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070a4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070a6:	6a3b      	ldr	r3, [r7, #32]
 80070a8:	0a1b      	lsrs	r3, r3, #8
 80070aa:	f003 0301 	and.w	r3, r3, #1
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d00e      	beq.n	80070d0 <HAL_I2C_ER_IRQHandler+0x4e>
 80070b2:	69fb      	ldr	r3, [r7, #28]
 80070b4:	0a1b      	lsrs	r3, r3, #8
 80070b6:	f003 0301 	and.w	r3, r3, #1
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d008      	beq.n	80070d0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	f043 0301 	orr.w	r3, r3, #1
 80070c4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070ce:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070d0:	6a3b      	ldr	r3, [r7, #32]
 80070d2:	0a5b      	lsrs	r3, r3, #9
 80070d4:	f003 0301 	and.w	r3, r3, #1
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00e      	beq.n	80070fa <HAL_I2C_ER_IRQHandler+0x78>
 80070dc:	69fb      	ldr	r3, [r7, #28]
 80070de:	0a1b      	lsrs	r3, r3, #8
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d008      	beq.n	80070fa <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80070e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ea:	f043 0302 	orr.w	r3, r3, #2
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80070f8:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070fa:	6a3b      	ldr	r3, [r7, #32]
 80070fc:	0a9b      	lsrs	r3, r3, #10
 80070fe:	f003 0301 	and.w	r3, r3, #1
 8007102:	2b00      	cmp	r3, #0
 8007104:	d03f      	beq.n	8007186 <HAL_I2C_ER_IRQHandler+0x104>
 8007106:	69fb      	ldr	r3, [r7, #28]
 8007108:	0a1b      	lsrs	r3, r3, #8
 800710a:	f003 0301 	and.w	r3, r3, #1
 800710e:	2b00      	cmp	r3, #0
 8007110:	d039      	beq.n	8007186 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007112:	7efb      	ldrb	r3, [r7, #27]
 8007114:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800711a:	b29b      	uxth	r3, r3
 800711c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007124:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800712a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800712c:	7ebb      	ldrb	r3, [r7, #26]
 800712e:	2b20      	cmp	r3, #32
 8007130:	d112      	bne.n	8007158 <HAL_I2C_ER_IRQHandler+0xd6>
 8007132:	697b      	ldr	r3, [r7, #20]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d10f      	bne.n	8007158 <HAL_I2C_ER_IRQHandler+0xd6>
 8007138:	7cfb      	ldrb	r3, [r7, #19]
 800713a:	2b21      	cmp	r3, #33	; 0x21
 800713c:	d008      	beq.n	8007150 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800713e:	7cfb      	ldrb	r3, [r7, #19]
 8007140:	2b29      	cmp	r3, #41	; 0x29
 8007142:	d005      	beq.n	8007150 <HAL_I2C_ER_IRQHandler+0xce>
 8007144:	7cfb      	ldrb	r3, [r7, #19]
 8007146:	2b28      	cmp	r3, #40	; 0x28
 8007148:	d106      	bne.n	8007158 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	2b21      	cmp	r3, #33	; 0x21
 800714e:	d103      	bne.n	8007158 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f001 f869 	bl	8008228 <I2C_Slave_AF>
 8007156:	e016      	b.n	8007186 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007160:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007164:	f043 0304 	orr.w	r3, r3, #4
 8007168:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800716a:	7efb      	ldrb	r3, [r7, #27]
 800716c:	2b10      	cmp	r3, #16
 800716e:	d002      	beq.n	8007176 <HAL_I2C_ER_IRQHandler+0xf4>
 8007170:	7efb      	ldrb	r3, [r7, #27]
 8007172:	2b40      	cmp	r3, #64	; 0x40
 8007174:	d107      	bne.n	8007186 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007184:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007186:	6a3b      	ldr	r3, [r7, #32]
 8007188:	0adb      	lsrs	r3, r3, #11
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b00      	cmp	r3, #0
 8007190:	d00e      	beq.n	80071b0 <HAL_I2C_ER_IRQHandler+0x12e>
 8007192:	69fb      	ldr	r3, [r7, #28]
 8007194:	0a1b      	lsrs	r3, r3, #8
 8007196:	f003 0301 	and.w	r3, r3, #1
 800719a:	2b00      	cmp	r3, #0
 800719c:	d008      	beq.n	80071b0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800719e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071a0:	f043 0308 	orr.w	r3, r3, #8
 80071a4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80071ae:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80071b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d008      	beq.n	80071c8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	431a      	orrs	r2, r3
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 f8a0 	bl	8008308 <I2C_ITError>
  }
}
 80071c8:	bf00      	nop
 80071ca:	3728      	adds	r7, #40	; 0x28
 80071cc:	46bd      	mov	sp, r7
 80071ce:	bd80      	pop	{r7, pc}

080071d0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
 80071d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80071d8:	bf00      	nop
 80071da:	370c      	adds	r7, #12
 80071dc:	46bd      	mov	sp, r7
 80071de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e2:	4770      	bx	lr

080071e4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071e4:	b480      	push	{r7}
 80071e6:	b083      	sub	sp, #12
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80071ec:	bf00      	nop
 80071ee:	370c      	adds	r7, #12
 80071f0:	46bd      	mov	sp, r7
 80071f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f6:	4770      	bx	lr

080071f8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b083      	sub	sp, #12
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr

0800720c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800720c:	b480      	push	{r7}
 800720e:	b083      	sub	sp, #12
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007214:	bf00      	nop
 8007216:	370c      	adds	r7, #12
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr

08007220 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007220:	b480      	push	{r7}
 8007222:	b083      	sub	sp, #12
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
 8007228:	460b      	mov	r3, r1
 800722a:	70fb      	strb	r3, [r7, #3]
 800722c:	4613      	mov	r3, r2
 800722e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8007280:	bf00      	nop
 8007282:	370c      	adds	r7, #12
 8007284:	46bd      	mov	sp, r7
 8007286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728a:	4770      	bx	lr

0800728c <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8007294:	bf00      	nop
 8007296:	370c      	adds	r7, #12
 8007298:	46bd      	mov	sp, r7
 800729a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729e:	4770      	bx	lr

080072a0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ae:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072b6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072bc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d150      	bne.n	8007368 <I2C_MasterTransmit_TXE+0xc8>
 80072c6:	7bfb      	ldrb	r3, [r7, #15]
 80072c8:	2b21      	cmp	r3, #33	; 0x21
 80072ca:	d14d      	bne.n	8007368 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072cc:	68bb      	ldr	r3, [r7, #8]
 80072ce:	2b08      	cmp	r3, #8
 80072d0:	d01d      	beq.n	800730e <I2C_MasterTransmit_TXE+0x6e>
 80072d2:	68bb      	ldr	r3, [r7, #8]
 80072d4:	2b20      	cmp	r3, #32
 80072d6:	d01a      	beq.n	800730e <I2C_MasterTransmit_TXE+0x6e>
 80072d8:	68bb      	ldr	r3, [r7, #8]
 80072da:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072de:	d016      	beq.n	800730e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	685a      	ldr	r2, [r3, #4]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80072ee:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2211      	movs	r2, #17
 80072f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	2200      	movs	r2, #0
 80072fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	2220      	movs	r2, #32
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f7ff ff62 	bl	80071d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800730c:	e060      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	685a      	ldr	r2, [r3, #4]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800731c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	681a      	ldr	r2, [r3, #0]
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800732c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2200      	movs	r2, #0
 8007332:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2220      	movs	r2, #32
 8007338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b40      	cmp	r3, #64	; 0x40
 8007346:	d107      	bne.n	8007358 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2200      	movs	r2, #0
 800734c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f7ff ff7d 	bl	8007250 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007356:	e03b      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	2200      	movs	r2, #0
 800735c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f7ff ff35 	bl	80071d0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007366:	e033      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007368:	7bfb      	ldrb	r3, [r7, #15]
 800736a:	2b21      	cmp	r3, #33	; 0x21
 800736c:	d005      	beq.n	800737a <I2C_MasterTransmit_TXE+0xda>
 800736e:	7bbb      	ldrb	r3, [r7, #14]
 8007370:	2b40      	cmp	r3, #64	; 0x40
 8007372:	d12d      	bne.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007374:	7bfb      	ldrb	r3, [r7, #15]
 8007376:	2b22      	cmp	r3, #34	; 0x22
 8007378:	d12a      	bne.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800737e:	b29b      	uxth	r3, r3
 8007380:	2b00      	cmp	r3, #0
 8007382:	d108      	bne.n	8007396 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	685a      	ldr	r2, [r3, #4]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007392:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007394:	e01c      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d103      	bne.n	80073aa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073a2:	6878      	ldr	r0, [r7, #4]
 80073a4:	f000 f88e 	bl	80074c4 <I2C_MemoryTransmit_TXE_BTF>
}
 80073a8:	e012      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ae:	781a      	ldrb	r2, [r3, #0]
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073c4:	b29b      	uxth	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	b29a      	uxth	r2, r3
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073ce:	e7ff      	b.n	80073d0 <I2C_MasterTransmit_TXE+0x130>
 80073d0:	bf00      	nop
 80073d2:	3710      	adds	r7, #16
 80073d4:	46bd      	mov	sp, r7
 80073d6:	bd80      	pop	{r7, pc}

080073d8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80073d8:	b580      	push	{r7, lr}
 80073da:	b084      	sub	sp, #16
 80073dc:	af00      	add	r7, sp, #0
 80073de:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e4:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ec:	b2db      	uxtb	r3, r3
 80073ee:	2b21      	cmp	r3, #33	; 0x21
 80073f0:	d164      	bne.n	80074bc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073f6:	b29b      	uxth	r3, r3
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d012      	beq.n	8007422 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007400:	781a      	ldrb	r2, [r3, #0]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800740c:	1c5a      	adds	r2, r3, #1
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	3b01      	subs	r3, #1
 800741a:	b29a      	uxth	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007420:	e04c      	b.n	80074bc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	2b08      	cmp	r3, #8
 8007426:	d01d      	beq.n	8007464 <I2C_MasterTransmit_BTF+0x8c>
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2b20      	cmp	r3, #32
 800742c:	d01a      	beq.n	8007464 <I2C_MasterTransmit_BTF+0x8c>
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007434:	d016      	beq.n	8007464 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	685a      	ldr	r2, [r3, #4]
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007444:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2211      	movs	r2, #17
 800744a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800745c:	6878      	ldr	r0, [r7, #4]
 800745e:	f7ff feb7 	bl	80071d0 <HAL_I2C_MasterTxCpltCallback>
}
 8007462:	e02b      	b.n	80074bc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	685a      	ldr	r2, [r3, #4]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007472:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007482:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2220      	movs	r2, #32
 800748e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b40      	cmp	r3, #64	; 0x40
 800749c:	d107      	bne.n	80074ae <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7ff fed2 	bl	8007250 <HAL_I2C_MemTxCpltCallback>
}
 80074ac:	e006      	b.n	80074bc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2200      	movs	r2, #0
 80074b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f7ff fe8a 	bl	80071d0 <HAL_I2C_MasterTxCpltCallback>
}
 80074bc:	bf00      	nop
 80074be:	3710      	adds	r7, #16
 80074c0:	46bd      	mov	sp, r7
 80074c2:	bd80      	pop	{r7, pc}

080074c4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d11d      	bne.n	8007518 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074e0:	2b01      	cmp	r3, #1
 80074e2:	d10b      	bne.n	80074fc <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f4:	1c9a      	adds	r2, r3, #2
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 80074fa:	e073      	b.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007500:	b29b      	uxth	r3, r3
 8007502:	121b      	asrs	r3, r3, #8
 8007504:	b2da      	uxtb	r2, r3
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007510:	1c5a      	adds	r2, r3, #1
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007516:	e065      	b.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800751c:	2b01      	cmp	r3, #1
 800751e:	d10b      	bne.n	8007538 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007536:	e055      	b.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	2b02      	cmp	r3, #2
 800753e:	d151      	bne.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	2b22      	cmp	r3, #34	; 0x22
 8007544:	d10d      	bne.n	8007562 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007554:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007560:	e040      	b.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d015      	beq.n	8007598 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	2b21      	cmp	r3, #33	; 0x21
 8007570:	d112      	bne.n	8007598 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007576:	781a      	ldrb	r2, [r3, #0]
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800758c:	b29b      	uxth	r3, r3
 800758e:	3b01      	subs	r3, #1
 8007590:	b29a      	uxth	r2, r3
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007596:	e025      	b.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800759c:	b29b      	uxth	r3, r3
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d120      	bne.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	2b21      	cmp	r3, #33	; 0x21
 80075a6:	d11d      	bne.n	80075e4 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	685a      	ldr	r2, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075b6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075c6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	2200      	movs	r2, #0
 80075cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2220      	movs	r2, #32
 80075d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2200      	movs	r2, #0
 80075da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fe36 	bl	8007250 <HAL_I2C_MemTxCpltCallback>
}
 80075e4:	bf00      	nop
 80075e6:	3710      	adds	r7, #16
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075fa:	b2db      	uxtb	r3, r3
 80075fc:	2b22      	cmp	r3, #34	; 0x22
 80075fe:	f040 80ac 	bne.w	800775a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2b03      	cmp	r3, #3
 800760e:	d921      	bls.n	8007654 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	691a      	ldr	r2, [r3, #16]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800761a:	b2d2      	uxtb	r2, r2
 800761c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007622:	1c5a      	adds	r2, r3, #1
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800762c:	b29b      	uxth	r3, r3
 800762e:	3b01      	subs	r3, #1
 8007630:	b29a      	uxth	r2, r3
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763a:	b29b      	uxth	r3, r3
 800763c:	2b03      	cmp	r3, #3
 800763e:	f040 808c 	bne.w	800775a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	685a      	ldr	r2, [r3, #4]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007650:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007652:	e082      	b.n	800775a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007658:	2b02      	cmp	r3, #2
 800765a:	d075      	beq.n	8007748 <I2C_MasterReceive_RXNE+0x15c>
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2b01      	cmp	r3, #1
 8007660:	d002      	beq.n	8007668 <I2C_MasterReceive_RXNE+0x7c>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d16f      	bne.n	8007748 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007668:	6878      	ldr	r0, [r7, #4]
 800766a:	f001 fa01 	bl	8008a70 <I2C_WaitOnSTOPRequestThroughIT>
 800766e:	4603      	mov	r3, r0
 8007670:	2b00      	cmp	r3, #0
 8007672:	d142      	bne.n	80076fa <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	681a      	ldr	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007682:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	685a      	ldr	r2, [r3, #4]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007692:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691a      	ldr	r2, [r3, #16]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800769e:	b2d2      	uxtb	r2, r2
 80076a0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a6:	1c5a      	adds	r2, r3, #1
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	3b01      	subs	r3, #1
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2220      	movs	r2, #32
 80076be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b40      	cmp	r3, #64	; 0x40
 80076cc:	d10a      	bne.n	80076e4 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f7ff fdc1 	bl	8007264 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076e2:	e03a      	b.n	800775a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	2200      	movs	r2, #0
 80076e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2212      	movs	r2, #18
 80076f0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f7ff fd76 	bl	80071e4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076f8:	e02f      	b.n	800775a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	685a      	ldr	r2, [r3, #4]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007708:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691a      	ldr	r2, [r3, #16]
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007714:	b2d2      	uxtb	r2, r2
 8007716:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800771c:	1c5a      	adds	r2, r3, #1
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007726:	b29b      	uxth	r3, r3
 8007728:	3b01      	subs	r3, #1
 800772a:	b29a      	uxth	r2, r3
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	2200      	movs	r2, #0
 800773c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	f7ff fd99 	bl	8007278 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007746:	e008      	b.n	800775a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	685a      	ldr	r2, [r3, #4]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007756:	605a      	str	r2, [r3, #4]
}
 8007758:	e7ff      	b.n	800775a <I2C_MasterReceive_RXNE+0x16e>
 800775a:	bf00      	nop
 800775c:	3710      	adds	r7, #16
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}

08007762 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007762:	b580      	push	{r7, lr}
 8007764:	b084      	sub	sp, #16
 8007766:	af00      	add	r7, sp, #0
 8007768:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800776e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007774:	b29b      	uxth	r3, r3
 8007776:	2b04      	cmp	r3, #4
 8007778:	d11b      	bne.n	80077b2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685a      	ldr	r2, [r3, #4]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007788:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	691a      	ldr	r2, [r3, #16]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	b2d2      	uxtb	r2, r2
 8007796:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800779c:	1c5a      	adds	r2, r3, #1
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077a6:	b29b      	uxth	r3, r3
 80077a8:	3b01      	subs	r3, #1
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80077b0:	e0bd      	b.n	800792e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077b6:	b29b      	uxth	r3, r3
 80077b8:	2b03      	cmp	r3, #3
 80077ba:	d129      	bne.n	8007810 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	685a      	ldr	r2, [r3, #4]
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ca:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d00a      	beq.n	80077e8 <I2C_MasterReceive_BTF+0x86>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d007      	beq.n	80077e8 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691a      	ldr	r2, [r3, #16]
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f2:	b2d2      	uxtb	r2, r2
 80077f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	1c5a      	adds	r2, r3, #1
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007804:	b29b      	uxth	r3, r3
 8007806:	3b01      	subs	r3, #1
 8007808:	b29a      	uxth	r2, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800780e:	e08e      	b.n	800792e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007814:	b29b      	uxth	r3, r3
 8007816:	2b02      	cmp	r3, #2
 8007818:	d176      	bne.n	8007908 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	2b01      	cmp	r3, #1
 800781e:	d002      	beq.n	8007826 <I2C_MasterReceive_BTF+0xc4>
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2b10      	cmp	r3, #16
 8007824:	d108      	bne.n	8007838 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007834:	601a      	str	r2, [r3, #0]
 8007836:	e019      	b.n	800786c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	2b04      	cmp	r3, #4
 800783c:	d002      	beq.n	8007844 <I2C_MasterReceive_BTF+0xe2>
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b02      	cmp	r3, #2
 8007842:	d108      	bne.n	8007856 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	e00a      	b.n	800786c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	2b10      	cmp	r3, #16
 800785a:	d007      	beq.n	800786c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800786a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	691a      	ldr	r2, [r3, #16]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	b2d2      	uxtb	r2, r2
 8007878:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800787e:	1c5a      	adds	r2, r3, #1
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007888:	b29b      	uxth	r3, r3
 800788a:	3b01      	subs	r3, #1
 800788c:	b29a      	uxth	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	691a      	ldr	r2, [r3, #16]
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789c:	b2d2      	uxtb	r2, r2
 800789e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078a4:	1c5a      	adds	r2, r3, #1
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ae:	b29b      	uxth	r3, r3
 80078b0:	3b01      	subs	r3, #1
 80078b2:	b29a      	uxth	r2, r3
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	685a      	ldr	r2, [r3, #4]
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078c6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2220      	movs	r2, #32
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b40      	cmp	r3, #64	; 0x40
 80078da:	d10a      	bne.n	80078f2 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff fcba 	bl	8007264 <HAL_I2C_MemRxCpltCallback>
}
 80078f0:	e01d      	b.n	800792e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2212      	movs	r2, #18
 80078fe:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f7ff fc6f 	bl	80071e4 <HAL_I2C_MasterRxCpltCallback>
}
 8007906:	e012      	b.n	800792e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	691a      	ldr	r2, [r3, #16]
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007912:	b2d2      	uxtb	r2, r2
 8007914:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800791a:	1c5a      	adds	r2, r3, #1
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	3b01      	subs	r3, #1
 8007928:	b29a      	uxth	r2, r3
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800792e:	bf00      	nop
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007936:	b480      	push	{r7}
 8007938:	b083      	sub	sp, #12
 800793a:	af00      	add	r7, sp, #0
 800793c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007944:	b2db      	uxtb	r3, r3
 8007946:	2b40      	cmp	r3, #64	; 0x40
 8007948:	d117      	bne.n	800797a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800794e:	2b00      	cmp	r3, #0
 8007950:	d109      	bne.n	8007966 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007956:	b2db      	uxtb	r3, r3
 8007958:	461a      	mov	r2, r3
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007962:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007964:	e067      	b.n	8007a36 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800796a:	b2db      	uxtb	r3, r3
 800796c:	f043 0301 	orr.w	r3, r3, #1
 8007970:	b2da      	uxtb	r2, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	611a      	str	r2, [r3, #16]
}
 8007978:	e05d      	b.n	8007a36 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	691b      	ldr	r3, [r3, #16]
 800797e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007982:	d133      	bne.n	80079ec <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800798a:	b2db      	uxtb	r3, r3
 800798c:	2b21      	cmp	r3, #33	; 0x21
 800798e:	d109      	bne.n	80079a4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007994:	b2db      	uxtb	r3, r3
 8007996:	461a      	mov	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079a0:	611a      	str	r2, [r3, #16]
 80079a2:	e008      	b.n	80079b6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079a8:	b2db      	uxtb	r3, r3
 80079aa:	f043 0301 	orr.w	r3, r3, #1
 80079ae:	b2da      	uxtb	r2, r3
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d004      	beq.n	80079c8 <I2C_Master_SB+0x92>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d108      	bne.n	80079da <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d032      	beq.n	8007a36 <I2C_Master_SB+0x100>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d02d      	beq.n	8007a36 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	685a      	ldr	r2, [r3, #4]
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079e8:	605a      	str	r2, [r3, #4]
}
 80079ea:	e024      	b.n	8007a36 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d10e      	bne.n	8007a12 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079f8:	b29b      	uxth	r3, r3
 80079fa:	11db      	asrs	r3, r3, #7
 80079fc:	b2db      	uxtb	r3, r3
 80079fe:	f003 0306 	and.w	r3, r3, #6
 8007a02:	b2db      	uxtb	r3, r3
 8007a04:	f063 030f 	orn	r3, r3, #15
 8007a08:	b2da      	uxtb	r2, r3
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	611a      	str	r2, [r3, #16]
}
 8007a10:	e011      	b.n	8007a36 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a16:	2b01      	cmp	r3, #1
 8007a18:	d10d      	bne.n	8007a36 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a1e:	b29b      	uxth	r3, r3
 8007a20:	11db      	asrs	r3, r3, #7
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f003 0306 	and.w	r3, r3, #6
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	f063 030e 	orn	r3, r3, #14
 8007a2e:	b2da      	uxtb	r2, r3
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	611a      	str	r2, [r3, #16]
}
 8007a36:	bf00      	nop
 8007a38:	370c      	adds	r7, #12
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b083      	sub	sp, #12
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d004      	beq.n	8007a68 <I2C_Master_ADD10+0x26>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d108      	bne.n	8007a7a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d00c      	beq.n	8007a8a <I2C_Master_ADD10+0x48>
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d007      	beq.n	8007a8a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	685a      	ldr	r2, [r3, #4]
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a88:	605a      	str	r2, [r3, #4]
  }
}
 8007a8a:	bf00      	nop
 8007a8c:	370c      	adds	r7, #12
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a94:	4770      	bx	lr

08007a96 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007a96:	b480      	push	{r7}
 8007a98:	b091      	sub	sp, #68	; 0x44
 8007a9a:	af00      	add	r7, sp, #0
 8007a9c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007aa4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aac:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007aba:	b2db      	uxtb	r3, r3
 8007abc:	2b22      	cmp	r3, #34	; 0x22
 8007abe:	f040 8169 	bne.w	8007d94 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d10f      	bne.n	8007aea <I2C_Master_ADDR+0x54>
 8007aca:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007ace:	2b40      	cmp	r3, #64	; 0x40
 8007ad0:	d10b      	bne.n	8007aea <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	695b      	ldr	r3, [r3, #20]
 8007adc:	633b      	str	r3, [r7, #48]	; 0x30
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	699b      	ldr	r3, [r3, #24]
 8007ae4:	633b      	str	r3, [r7, #48]	; 0x30
 8007ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ae8:	e160      	b.n	8007dac <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d11d      	bne.n	8007b2e <I2C_Master_ADDR+0x98>
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	691b      	ldr	r3, [r3, #16]
 8007af6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007afa:	d118      	bne.n	8007b2e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007afc:	2300      	movs	r3, #0
 8007afe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	695b      	ldr	r3, [r3, #20]
 8007b06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	699b      	ldr	r3, [r3, #24]
 8007b0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b20:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b26:	1c5a      	adds	r2, r3, #1
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	651a      	str	r2, [r3, #80]	; 0x50
 8007b2c:	e13e      	b.n	8007dac <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d113      	bne.n	8007b60 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	695b      	ldr	r3, [r3, #20]
 8007b42:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	699b      	ldr	r3, [r3, #24]
 8007b4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	681a      	ldr	r2, [r3, #0]
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b5c:	601a      	str	r2, [r3, #0]
 8007b5e:	e115      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b01      	cmp	r3, #1
 8007b68:	f040 808a 	bne.w	8007c80 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b6e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b72:	d137      	bne.n	8007be4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b82:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b92:	d113      	bne.n	8007bbc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	695b      	ldr	r3, [r3, #20]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bba:	e0e7      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bbc:	2300      	movs	r3, #0
 8007bbe:	623b      	str	r3, [r7, #32]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	695b      	ldr	r3, [r3, #20]
 8007bc6:	623b      	str	r3, [r7, #32]
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	623b      	str	r3, [r7, #32]
 8007bd0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	681a      	ldr	r2, [r3, #0]
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007be0:	601a      	str	r2, [r3, #0]
 8007be2:	e0d3      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007be4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be6:	2b08      	cmp	r3, #8
 8007be8:	d02e      	beq.n	8007c48 <I2C_Master_ADDR+0x1b2>
 8007bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bec:	2b20      	cmp	r3, #32
 8007bee:	d02b      	beq.n	8007c48 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007bf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bf2:	2b12      	cmp	r3, #18
 8007bf4:	d102      	bne.n	8007bfc <I2C_Master_ADDR+0x166>
 8007bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d125      	bne.n	8007c48 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007bfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d00e      	beq.n	8007c20 <I2C_Master_ADDR+0x18a>
 8007c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d00b      	beq.n	8007c20 <I2C_Master_ADDR+0x18a>
 8007c08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0a:	2b10      	cmp	r3, #16
 8007c0c:	d008      	beq.n	8007c20 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	681b      	ldr	r3, [r3, #0]
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c1c:	601a      	str	r2, [r3, #0]
 8007c1e:	e007      	b.n	8007c30 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	681a      	ldr	r2, [r3, #0]
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c2e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	695b      	ldr	r3, [r3, #20]
 8007c3a:	61fb      	str	r3, [r7, #28]
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	699b      	ldr	r3, [r3, #24]
 8007c42:	61fb      	str	r3, [r7, #28]
 8007c44:	69fb      	ldr	r3, [r7, #28]
 8007c46:	e0a1      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	681a      	ldr	r2, [r3, #0]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c56:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c58:	2300      	movs	r3, #0
 8007c5a:	61bb      	str	r3, [r7, #24]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	695b      	ldr	r3, [r3, #20]
 8007c62:	61bb      	str	r3, [r7, #24]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	699b      	ldr	r3, [r3, #24]
 8007c6a:	61bb      	str	r3, [r7, #24]
 8007c6c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	681a      	ldr	r2, [r3, #0]
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c7c:	601a      	str	r2, [r3, #0]
 8007c7e:	e085      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	2b02      	cmp	r3, #2
 8007c88:	d14d      	bne.n	8007d26 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c8c:	2b04      	cmp	r3, #4
 8007c8e:	d016      	beq.n	8007cbe <I2C_Master_ADDR+0x228>
 8007c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c92:	2b02      	cmp	r3, #2
 8007c94:	d013      	beq.n	8007cbe <I2C_Master_ADDR+0x228>
 8007c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c98:	2b10      	cmp	r3, #16
 8007c9a:	d010      	beq.n	8007cbe <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007caa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	e007      	b.n	8007cce <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007ccc:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cdc:	d117      	bne.n	8007d0e <I2C_Master_ADDR+0x278>
 8007cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ce4:	d00b      	beq.n	8007cfe <I2C_Master_ADDR+0x268>
 8007ce6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	d008      	beq.n	8007cfe <I2C_Master_ADDR+0x268>
 8007cec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cee:	2b08      	cmp	r3, #8
 8007cf0:	d005      	beq.n	8007cfe <I2C_Master_ADDR+0x268>
 8007cf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf4:	2b10      	cmp	r3, #16
 8007cf6:	d002      	beq.n	8007cfe <I2C_Master_ADDR+0x268>
 8007cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cfa:	2b20      	cmp	r3, #32
 8007cfc:	d107      	bne.n	8007d0e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	685a      	ldr	r2, [r3, #4]
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d0c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	617b      	str	r3, [r7, #20]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	695b      	ldr	r3, [r3, #20]
 8007d18:	617b      	str	r3, [r7, #20]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	699b      	ldr	r3, [r3, #24]
 8007d20:	617b      	str	r3, [r7, #20]
 8007d22:	697b      	ldr	r3, [r7, #20]
 8007d24:	e032      	b.n	8007d8c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d34:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d44:	d117      	bne.n	8007d76 <I2C_Master_ADDR+0x2e0>
 8007d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d4c:	d00b      	beq.n	8007d66 <I2C_Master_ADDR+0x2d0>
 8007d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d50:	2b01      	cmp	r3, #1
 8007d52:	d008      	beq.n	8007d66 <I2C_Master_ADDR+0x2d0>
 8007d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d56:	2b08      	cmp	r3, #8
 8007d58:	d005      	beq.n	8007d66 <I2C_Master_ADDR+0x2d0>
 8007d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d5c:	2b10      	cmp	r3, #16
 8007d5e:	d002      	beq.n	8007d66 <I2C_Master_ADDR+0x2d0>
 8007d60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d62:	2b20      	cmp	r3, #32
 8007d64:	d107      	bne.n	8007d76 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	685a      	ldr	r2, [r3, #4]
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d74:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d76:	2300      	movs	r3, #0
 8007d78:	613b      	str	r3, [r7, #16]
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	695b      	ldr	r3, [r3, #20]
 8007d80:	613b      	str	r3, [r7, #16]
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	699b      	ldr	r3, [r3, #24]
 8007d88:	613b      	str	r3, [r7, #16]
 8007d8a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007d92:	e00b      	b.n	8007dac <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d94:	2300      	movs	r3, #0
 8007d96:	60fb      	str	r3, [r7, #12]
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	695b      	ldr	r3, [r3, #20]
 8007d9e:	60fb      	str	r3, [r7, #12]
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699b      	ldr	r3, [r3, #24]
 8007da6:	60fb      	str	r3, [r7, #12]
 8007da8:	68fb      	ldr	r3, [r7, #12]
}
 8007daa:	e7ff      	b.n	8007dac <I2C_Master_ADDR+0x316>
 8007dac:	bf00      	nop
 8007dae:	3744      	adds	r7, #68	; 0x44
 8007db0:	46bd      	mov	sp, r7
 8007db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db6:	4770      	bx	lr

08007db8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b084      	sub	sp, #16
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dc6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dcc:	b29b      	uxth	r3, r3
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d02b      	beq.n	8007e2a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dd6:	781a      	ldrb	r2, [r3, #0]
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de2:	1c5a      	adds	r2, r3, #1
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	3b01      	subs	r3, #1
 8007df0:	b29a      	uxth	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dfa:	b29b      	uxth	r3, r3
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d114      	bne.n	8007e2a <I2C_SlaveTransmit_TXE+0x72>
 8007e00:	7bfb      	ldrb	r3, [r7, #15]
 8007e02:	2b29      	cmp	r3, #41	; 0x29
 8007e04:	d111      	bne.n	8007e2a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	685a      	ldr	r2, [r3, #4]
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e14:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2221      	movs	r2, #33	; 0x21
 8007e1a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	2228      	movs	r2, #40	; 0x28
 8007e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e24:	6878      	ldr	r0, [r7, #4]
 8007e26:	f7ff f9e7 	bl	80071f8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e2a:	bf00      	nop
 8007e2c:	3710      	adds	r7, #16
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}

08007e32 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e32:	b480      	push	{r7}
 8007e34:	b083      	sub	sp, #12
 8007e36:	af00      	add	r7, sp, #0
 8007e38:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d011      	beq.n	8007e68 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e54:	1c5a      	adds	r2, r3, #1
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	3b01      	subs	r3, #1
 8007e62:	b29a      	uxth	r2, r3
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e72:	4770      	bx	lr

08007e74 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b084      	sub	sp, #16
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e82:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d02c      	beq.n	8007ee8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	691a      	ldr	r2, [r3, #16]
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e98:	b2d2      	uxtb	r2, r2
 8007e9a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b29a      	uxth	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb8:	b29b      	uxth	r3, r3
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d114      	bne.n	8007ee8 <I2C_SlaveReceive_RXNE+0x74>
 8007ebe:	7bfb      	ldrb	r3, [r7, #15]
 8007ec0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec2:	d111      	bne.n	8007ee8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ec4:	687b      	ldr	r3, [r7, #4]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	685a      	ldr	r2, [r3, #4]
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ed2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2222      	movs	r2, #34	; 0x22
 8007ed8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2228      	movs	r2, #40	; 0x28
 8007ede:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff f992 	bl	800720c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007ee8:	bf00      	nop
 8007eea:	3710      	adds	r7, #16
 8007eec:	46bd      	mov	sp, r7
 8007eee:	bd80      	pop	{r7, pc}

08007ef0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007efc:	b29b      	uxth	r3, r3
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d012      	beq.n	8007f28 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	691a      	ldr	r2, [r3, #16]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	b2d2      	uxtb	r2, r2
 8007f0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f14:	1c5a      	adds	r2, r3, #1
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1e:	b29b      	uxth	r3, r3
 8007f20:	3b01      	subs	r3, #1
 8007f22:	b29a      	uxth	r2, r3
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f28:	bf00      	nop
 8007f2a:	370c      	adds	r7, #12
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f32:	4770      	bx	lr

08007f34 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b084      	sub	sp, #16
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]
 8007f3c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f3e:	2300      	movs	r3, #0
 8007f40:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f48:	b2db      	uxtb	r3, r3
 8007f4a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f4e:	2b28      	cmp	r3, #40	; 0x28
 8007f50:	d127      	bne.n	8007fa2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	685a      	ldr	r2, [r3, #4]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f60:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	089b      	lsrs	r3, r3, #2
 8007f66:	f003 0301 	and.w	r3, r3, #1
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d101      	bne.n	8007f72 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007f6e:	2301      	movs	r3, #1
 8007f70:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	09db      	lsrs	r3, r3, #7
 8007f76:	f003 0301 	and.w	r3, r3, #1
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d103      	bne.n	8007f86 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	68db      	ldr	r3, [r3, #12]
 8007f82:	81bb      	strh	r3, [r7, #12]
 8007f84:	e002      	b.n	8007f8c <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	699b      	ldr	r3, [r3, #24]
 8007f8a:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007f94:	89ba      	ldrh	r2, [r7, #12]
 8007f96:	7bfb      	ldrb	r3, [r7, #15]
 8007f98:	4619      	mov	r1, r3
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f7ff f940 	bl	8007220 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007fa0:	e00e      	b.n	8007fc0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fa2:	2300      	movs	r3, #0
 8007fa4:	60bb      	str	r3, [r7, #8]
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	695b      	ldr	r3, [r3, #20]
 8007fac:	60bb      	str	r3, [r7, #8]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	699b      	ldr	r3, [r3, #24]
 8007fb4:	60bb      	str	r3, [r7, #8]
 8007fb6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007fc0:	bf00      	nop
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fd6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	685a      	ldr	r2, [r3, #4]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007fe6:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007fe8:	2300      	movs	r3, #0
 8007fea:	60bb      	str	r3, [r7, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	60bb      	str	r3, [r7, #8]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f042 0201 	orr.w	r2, r2, #1
 8008002:	601a      	str	r2, [r3, #0]
 8008004:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008014:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	685b      	ldr	r3, [r3, #4]
 800801c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008020:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008024:	d172      	bne.n	800810c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008026:	7bfb      	ldrb	r3, [r7, #15]
 8008028:	2b22      	cmp	r3, #34	; 0x22
 800802a:	d002      	beq.n	8008032 <I2C_Slave_STOPF+0x6a>
 800802c:	7bfb      	ldrb	r3, [r7, #15]
 800802e:	2b2a      	cmp	r3, #42	; 0x2a
 8008030:	d135      	bne.n	800809e <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	b29a      	uxth	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008044:	b29b      	uxth	r3, r3
 8008046:	2b00      	cmp	r3, #0
 8008048:	d005      	beq.n	8008056 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804e:	f043 0204 	orr.w	r2, r3, #4
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	685a      	ldr	r2, [r3, #4]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008064:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800806a:	4618      	mov	r0, r3
 800806c:	f7fe f8e0 	bl	8006230 <HAL_DMA_GetState>
 8008070:	4603      	mov	r3, r0
 8008072:	2b01      	cmp	r3, #1
 8008074:	d049      	beq.n	800810a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800807a:	4a69      	ldr	r2, [pc, #420]	; (8008220 <I2C_Slave_STOPF+0x258>)
 800807c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008082:	4618      	mov	r0, r3
 8008084:	f7fd ff28 	bl	8005ed8 <HAL_DMA_Abort_IT>
 8008088:	4603      	mov	r3, r0
 800808a:	2b00      	cmp	r3, #0
 800808c:	d03d      	beq.n	800810a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008092:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008094:	687a      	ldr	r2, [r7, #4]
 8008096:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008098:	4610      	mov	r0, r2
 800809a:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800809c:	e035      	b.n	800810a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	b29a      	uxth	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080b0:	b29b      	uxth	r3, r3
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d005      	beq.n	80080c2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080ba:	f043 0204 	orr.w	r2, r3, #4
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	685a      	ldr	r2, [r3, #4]
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080d0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7fe f8aa 	bl	8006230 <HAL_DMA_GetState>
 80080dc:	4603      	mov	r3, r0
 80080de:	2b01      	cmp	r3, #1
 80080e0:	d014      	beq.n	800810c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080e6:	4a4e      	ldr	r2, [pc, #312]	; (8008220 <I2C_Slave_STOPF+0x258>)
 80080e8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080ee:	4618      	mov	r0, r3
 80080f0:	f7fd fef2 	bl	8005ed8 <HAL_DMA_Abort_IT>
 80080f4:	4603      	mov	r3, r0
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d008      	beq.n	800810c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008100:	687a      	ldr	r2, [r7, #4]
 8008102:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008104:	4610      	mov	r0, r2
 8008106:	4798      	blx	r3
 8008108:	e000      	b.n	800810c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800810a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2b00      	cmp	r3, #0
 8008114:	d03e      	beq.n	8008194 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	695b      	ldr	r3, [r3, #20]
 800811c:	f003 0304 	and.w	r3, r3, #4
 8008120:	2b04      	cmp	r3, #4
 8008122:	d112      	bne.n	800814a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	691a      	ldr	r2, [r3, #16]
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800812e:	b2d2      	uxtb	r2, r2
 8008130:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008136:	1c5a      	adds	r2, r3, #1
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008140:	b29b      	uxth	r3, r3
 8008142:	3b01      	subs	r3, #1
 8008144:	b29a      	uxth	r2, r3
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	681b      	ldr	r3, [r3, #0]
 800814e:	695b      	ldr	r3, [r3, #20]
 8008150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008154:	2b40      	cmp	r3, #64	; 0x40
 8008156:	d112      	bne.n	800817e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	691a      	ldr	r2, [r3, #16]
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	b2d2      	uxtb	r2, r2
 8008164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816a:	1c5a      	adds	r2, r3, #1
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008174:	b29b      	uxth	r3, r3
 8008176:	3b01      	subs	r3, #1
 8008178:	b29a      	uxth	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008182:	b29b      	uxth	r3, r3
 8008184:	2b00      	cmp	r3, #0
 8008186:	d005      	beq.n	8008194 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800818c:	f043 0204 	orr.w	r2, r3, #4
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008198:	2b00      	cmp	r3, #0
 800819a:	d003      	beq.n	80081a4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800819c:	6878      	ldr	r0, [r7, #4]
 800819e:	f000 f8b3 	bl	8008308 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80081a2:	e039      	b.n	8008218 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081a4:	7bfb      	ldrb	r3, [r7, #15]
 80081a6:	2b2a      	cmp	r3, #42	; 0x2a
 80081a8:	d109      	bne.n	80081be <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	2200      	movs	r2, #0
 80081ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	2228      	movs	r2, #40	; 0x28
 80081b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff f827 	bl	800720c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081c4:	b2db      	uxtb	r3, r3
 80081c6:	2b28      	cmp	r3, #40	; 0x28
 80081c8:	d111      	bne.n	80081ee <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a15      	ldr	r2, [pc, #84]	; (8008224 <I2C_Slave_STOPF+0x25c>)
 80081ce:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2200      	movs	r2, #0
 80081d4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	2220      	movs	r2, #32
 80081da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2200      	movs	r2, #0
 80081e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 80081e6:	6878      	ldr	r0, [r7, #4]
 80081e8:	f7ff f828 	bl	800723c <HAL_I2C_ListenCpltCallback>
}
 80081ec:	e014      	b.n	8008218 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081f2:	2b22      	cmp	r3, #34	; 0x22
 80081f4:	d002      	beq.n	80081fc <I2C_Slave_STOPF+0x234>
 80081f6:	7bfb      	ldrb	r3, [r7, #15]
 80081f8:	2b22      	cmp	r3, #34	; 0x22
 80081fa:	d10d      	bne.n	8008218 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	2200      	movs	r2, #0
 8008200:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2220      	movs	r2, #32
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008212:	6878      	ldr	r0, [r7, #4]
 8008214:	f7fe fffa 	bl	800720c <HAL_I2C_SlaveRxCpltCallback>
}
 8008218:	bf00      	nop
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}
 8008220:	08008671 	.word	0x08008671
 8008224:	ffff0000 	.word	0xffff0000

08008228 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008228:	b580      	push	{r7, lr}
 800822a:	b084      	sub	sp, #16
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008236:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800823c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	2b08      	cmp	r3, #8
 8008242:	d002      	beq.n	800824a <I2C_Slave_AF+0x22>
 8008244:	68bb      	ldr	r3, [r7, #8]
 8008246:	2b20      	cmp	r3, #32
 8008248:	d129      	bne.n	800829e <I2C_Slave_AF+0x76>
 800824a:	7bfb      	ldrb	r3, [r7, #15]
 800824c:	2b28      	cmp	r3, #40	; 0x28
 800824e:	d126      	bne.n	800829e <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	4a2c      	ldr	r2, [pc, #176]	; (8008304 <I2C_Slave_AF+0xdc>)
 8008254:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008264:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800826e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800827e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	2200      	movs	r2, #0
 8008284:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	2220      	movs	r2, #32
 800828a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	2200      	movs	r2, #0
 8008292:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fe ffd0 	bl	800723c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800829c:	e02e      	b.n	80082fc <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800829e:	7bfb      	ldrb	r3, [r7, #15]
 80082a0:	2b21      	cmp	r3, #33	; 0x21
 80082a2:	d126      	bne.n	80082f2 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	4a17      	ldr	r2, [pc, #92]	; (8008304 <I2C_Slave_AF+0xdc>)
 80082a8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2221      	movs	r2, #33	; 0x21
 80082ae:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	2220      	movs	r2, #32
 80082b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2200      	movs	r2, #0
 80082bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	685a      	ldr	r2, [r3, #4]
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082ce:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082d8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	681a      	ldr	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082e8:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80082ea:	6878      	ldr	r0, [r7, #4]
 80082ec:	f7fe ff84 	bl	80071f8 <HAL_I2C_SlaveTxCpltCallback>
}
 80082f0:	e004      	b.n	80082fc <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082fa:	615a      	str	r2, [r3, #20]
}
 80082fc:	bf00      	nop
 80082fe:	3710      	adds	r7, #16
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}
 8008304:	ffff0000 	.word	0xffff0000

08008308 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b084      	sub	sp, #16
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008316:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800831e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008320:	7bbb      	ldrb	r3, [r7, #14]
 8008322:	2b10      	cmp	r3, #16
 8008324:	d002      	beq.n	800832c <I2C_ITError+0x24>
 8008326:	7bbb      	ldrb	r3, [r7, #14]
 8008328:	2b40      	cmp	r3, #64	; 0x40
 800832a:	d10a      	bne.n	8008342 <I2C_ITError+0x3a>
 800832c:	7bfb      	ldrb	r3, [r7, #15]
 800832e:	2b22      	cmp	r3, #34	; 0x22
 8008330:	d107      	bne.n	8008342 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008340:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008342:	7bfb      	ldrb	r3, [r7, #15]
 8008344:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008348:	2b28      	cmp	r3, #40	; 0x28
 800834a:	d107      	bne.n	800835c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2228      	movs	r2, #40	; 0x28
 8008356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800835a:	e015      	b.n	8008388 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008366:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800836a:	d00a      	beq.n	8008382 <I2C_ITError+0x7a>
 800836c:	7bfb      	ldrb	r3, [r7, #15]
 800836e:	2b60      	cmp	r3, #96	; 0x60
 8008370:	d007      	beq.n	8008382 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2220      	movs	r2, #32
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	685b      	ldr	r3, [r3, #4]
 800838e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008392:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008396:	d162      	bne.n	800845e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	685a      	ldr	r2, [r3, #4]
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083a6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b01      	cmp	r3, #1
 80083b4:	d020      	beq.n	80083f8 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ba:	4a6a      	ldr	r2, [pc, #424]	; (8008564 <I2C_ITError+0x25c>)
 80083bc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c2:	4618      	mov	r0, r3
 80083c4:	f7fd fd88 	bl	8005ed8 <HAL_DMA_Abort_IT>
 80083c8:	4603      	mov	r3, r0
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	f000 8089 	beq.w	80084e2 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	681a      	ldr	r2, [r3, #0]
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	f022 0201 	bic.w	r2, r2, #1
 80083de:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2220      	movs	r2, #32
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083ee:	687a      	ldr	r2, [r7, #4]
 80083f0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80083f2:	4610      	mov	r0, r2
 80083f4:	4798      	blx	r3
 80083f6:	e074      	b.n	80084e2 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083fc:	4a59      	ldr	r2, [pc, #356]	; (8008564 <I2C_ITError+0x25c>)
 80083fe:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	4618      	mov	r0, r3
 8008406:	f7fd fd67 	bl	8005ed8 <HAL_DMA_Abort_IT>
 800840a:	4603      	mov	r3, r0
 800840c:	2b00      	cmp	r3, #0
 800840e:	d068      	beq.n	80084e2 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	695b      	ldr	r3, [r3, #20]
 8008416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800841a:	2b40      	cmp	r3, #64	; 0x40
 800841c:	d10b      	bne.n	8008436 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	691a      	ldr	r2, [r3, #16]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008428:	b2d2      	uxtb	r2, r2
 800842a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008430:	1c5a      	adds	r2, r3, #1
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	f022 0201 	bic.w	r2, r2, #1
 8008444:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008452:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008458:	4610      	mov	r0, r2
 800845a:	4798      	blx	r3
 800845c:	e041      	b.n	80084e2 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b60      	cmp	r3, #96	; 0x60
 8008468:	d125      	bne.n	80084b6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	2220      	movs	r2, #32
 800846e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	695b      	ldr	r3, [r3, #20]
 800847e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008482:	2b40      	cmp	r3, #64	; 0x40
 8008484:	d10b      	bne.n	800849e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008490:	b2d2      	uxtb	r2, r2
 8008492:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008498:	1c5a      	adds	r2, r3, #1
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	681a      	ldr	r2, [r3, #0]
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f022 0201 	bic.w	r2, r2, #1
 80084ac:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f7fe feec 	bl	800728c <HAL_I2C_AbortCpltCallback>
 80084b4:	e015      	b.n	80084e2 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	695b      	ldr	r3, [r3, #20]
 80084bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084c0:	2b40      	cmp	r3, #64	; 0x40
 80084c2:	d10b      	bne.n	80084dc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	691a      	ldr	r2, [r3, #16]
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ce:	b2d2      	uxtb	r2, r2
 80084d0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	1c5a      	adds	r2, r3, #1
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084dc:	6878      	ldr	r0, [r7, #4]
 80084de:	f7fe fecb 	bl	8007278 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084e6:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	f003 0301 	and.w	r3, r3, #1
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10e      	bne.n	8008510 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d109      	bne.n	8008510 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008502:	2b00      	cmp	r3, #0
 8008504:	d104      	bne.n	8008510 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800850c:	2b00      	cmp	r3, #0
 800850e:	d007      	beq.n	8008520 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	685a      	ldr	r2, [r3, #4]
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800851e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008526:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800852c:	f003 0304 	and.w	r3, r3, #4
 8008530:	2b04      	cmp	r3, #4
 8008532:	d113      	bne.n	800855c <I2C_ITError+0x254>
 8008534:	7bfb      	ldrb	r3, [r7, #15]
 8008536:	2b28      	cmp	r3, #40	; 0x28
 8008538:	d110      	bne.n	800855c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a0a      	ldr	r2, [pc, #40]	; (8008568 <I2C_ITError+0x260>)
 800853e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2220      	movs	r2, #32
 800854a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2200      	movs	r2, #0
 8008552:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008556:	6878      	ldr	r0, [r7, #4]
 8008558:	f7fe fe70 	bl	800723c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	08008671 	.word	0x08008671
 8008568:	ffff0000 	.word	0xffff0000

0800856c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800856c:	b580      	push	{r7, lr}
 800856e:	b088      	sub	sp, #32
 8008570:	af02      	add	r7, sp, #8
 8008572:	60f8      	str	r0, [r7, #12]
 8008574:	607a      	str	r2, [r7, #4]
 8008576:	603b      	str	r3, [r7, #0]
 8008578:	460b      	mov	r3, r1
 800857a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8008582:	697b      	ldr	r3, [r7, #20]
 8008584:	2b08      	cmp	r3, #8
 8008586:	d006      	beq.n	8008596 <I2C_MasterRequestWrite+0x2a>
 8008588:	697b      	ldr	r3, [r7, #20]
 800858a:	2b01      	cmp	r3, #1
 800858c:	d003      	beq.n	8008596 <I2C_MasterRequestWrite+0x2a>
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008594:	d108      	bne.n	80085a8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	681a      	ldr	r2, [r3, #0]
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085a4:	601a      	str	r2, [r3, #0]
 80085a6:	e00b      	b.n	80085c0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ac:	2b12      	cmp	r3, #18
 80085ae:	d107      	bne.n	80085c0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085be:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085c0:	683b      	ldr	r3, [r7, #0]
 80085c2:	9300      	str	r3, [sp, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2200      	movs	r2, #0
 80085c8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085cc:	68f8      	ldr	r0, [r7, #12]
 80085ce:	f000 f8f7 	bl	80087c0 <I2C_WaitOnFlagUntilTimeout>
 80085d2:	4603      	mov	r3, r0
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00d      	beq.n	80085f4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085d8:	68fb      	ldr	r3, [r7, #12]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80085e6:	d103      	bne.n	80085f0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e035      	b.n	8008660 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	691b      	ldr	r3, [r3, #16]
 80085f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80085fc:	d108      	bne.n	8008610 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80085fe:	897b      	ldrh	r3, [r7, #10]
 8008600:	b2db      	uxtb	r3, r3
 8008602:	461a      	mov	r2, r3
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800860c:	611a      	str	r2, [r3, #16]
 800860e:	e01b      	b.n	8008648 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008610:	897b      	ldrh	r3, [r7, #10]
 8008612:	11db      	asrs	r3, r3, #7
 8008614:	b2db      	uxtb	r3, r3
 8008616:	f003 0306 	and.w	r3, r3, #6
 800861a:	b2db      	uxtb	r3, r3
 800861c:	f063 030f 	orn	r3, r3, #15
 8008620:	b2da      	uxtb	r2, r3
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008628:	683b      	ldr	r3, [r7, #0]
 800862a:	687a      	ldr	r2, [r7, #4]
 800862c:	490e      	ldr	r1, [pc, #56]	; (8008668 <I2C_MasterRequestWrite+0xfc>)
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 f91d 	bl	800886e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	e010      	b.n	8008660 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800863e:	897b      	ldrh	r3, [r7, #10]
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	4907      	ldr	r1, [pc, #28]	; (800866c <I2C_MasterRequestWrite+0x100>)
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f90d 	bl	800886e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e000      	b.n	8008660 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800865e:	2300      	movs	r3, #0
}
 8008660:	4618      	mov	r0, r3
 8008662:	3718      	adds	r7, #24
 8008664:	46bd      	mov	sp, r7
 8008666:	bd80      	pop	{r7, pc}
 8008668:	00010008 	.word	0x00010008
 800866c:	00010002 	.word	0x00010002

08008670 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008678:	2300      	movs	r3, #0
 800867a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008680:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008682:	697b      	ldr	r3, [r7, #20]
 8008684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008688:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800868a:	4b4b      	ldr	r3, [pc, #300]	; (80087b8 <I2C_DMAAbort+0x148>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	08db      	lsrs	r3, r3, #3
 8008690:	4a4a      	ldr	r2, [pc, #296]	; (80087bc <I2C_DMAAbort+0x14c>)
 8008692:	fba2 2303 	umull	r2, r3, r2, r3
 8008696:	0a1a      	lsrs	r2, r3, #8
 8008698:	4613      	mov	r3, r2
 800869a:	009b      	lsls	r3, r3, #2
 800869c:	4413      	add	r3, r2
 800869e:	00da      	lsls	r2, r3, #3
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d106      	bne.n	80086b8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086aa:	697b      	ldr	r3, [r7, #20]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f043 0220 	orr.w	r2, r3, #32
 80086b2:	697b      	ldr	r3, [r7, #20]
 80086b4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086b6:	e00a      	b.n	80086ce <I2C_DMAAbort+0x5e>
    }
    count--;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	3b01      	subs	r3, #1
 80086bc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086cc:	d0ea      	beq.n	80086a4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d003      	beq.n	80086de <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80086d6:	697b      	ldr	r3, [r7, #20]
 80086d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086da:	2200      	movs	r2, #0
 80086dc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d003      	beq.n	80086ee <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80086e6:	697b      	ldr	r3, [r7, #20]
 80086e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086ea:	2200      	movs	r2, #0
 80086ec:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	681a      	ldr	r2, [r3, #0]
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086fc:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2200      	movs	r2, #0
 8008702:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008704:	697b      	ldr	r3, [r7, #20]
 8008706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008708:	2b00      	cmp	r3, #0
 800870a:	d003      	beq.n	8008714 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008710:	2200      	movs	r2, #0
 8008712:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008718:	2b00      	cmp	r3, #0
 800871a:	d003      	beq.n	8008724 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800871c:	697b      	ldr	r3, [r7, #20]
 800871e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008720:	2200      	movs	r2, #0
 8008722:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	681a      	ldr	r2, [r3, #0]
 800872a:	697b      	ldr	r3, [r7, #20]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	f022 0201 	bic.w	r2, r2, #1
 8008732:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800873a:	b2db      	uxtb	r3, r3
 800873c:	2b60      	cmp	r3, #96	; 0x60
 800873e:	d10e      	bne.n	800875e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008740:	697b      	ldr	r3, [r7, #20]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008748:	697b      	ldr	r3, [r7, #20]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2200      	movs	r2, #0
 8008754:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008756:	6978      	ldr	r0, [r7, #20]
 8008758:	f7fe fd98 	bl	800728c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800875c:	e027      	b.n	80087ae <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800875e:	7cfb      	ldrb	r3, [r7, #19]
 8008760:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008764:	2b28      	cmp	r3, #40	; 0x28
 8008766:	d117      	bne.n	8008798 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	681a      	ldr	r2, [r3, #0]
 800876e:	697b      	ldr	r3, [r7, #20]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	f042 0201 	orr.w	r2, r2, #1
 8008776:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008778:	697b      	ldr	r3, [r7, #20]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	681a      	ldr	r2, [r3, #0]
 800877e:	697b      	ldr	r3, [r7, #20]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008786:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	2200      	movs	r2, #0
 800878c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	2228      	movs	r2, #40	; 0x28
 8008792:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008796:	e007      	b.n	80087a8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087a8:	6978      	ldr	r0, [r7, #20]
 80087aa:	f7fe fd65 	bl	8007278 <HAL_I2C_ErrorCallback>
}
 80087ae:	bf00      	nop
 80087b0:	3718      	adds	r7, #24
 80087b2:	46bd      	mov	sp, r7
 80087b4:	bd80      	pop	{r7, pc}
 80087b6:	bf00      	nop
 80087b8:	20000250 	.word	0x20000250
 80087bc:	14f8b589 	.word	0x14f8b589

080087c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b084      	sub	sp, #16
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	60f8      	str	r0, [r7, #12]
 80087c8:	60b9      	str	r1, [r7, #8]
 80087ca:	603b      	str	r3, [r7, #0]
 80087cc:	4613      	mov	r3, r2
 80087ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087d0:	e025      	b.n	800881e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087d2:	683b      	ldr	r3, [r7, #0]
 80087d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087d8:	d021      	beq.n	800881e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087da:	f7fc fcc3 	bl	8005164 <HAL_GetTick>
 80087de:	4602      	mov	r2, r0
 80087e0:	69bb      	ldr	r3, [r7, #24]
 80087e2:	1ad3      	subs	r3, r2, r3
 80087e4:	683a      	ldr	r2, [r7, #0]
 80087e6:	429a      	cmp	r2, r3
 80087e8:	d302      	bcc.n	80087f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80087ea:	683b      	ldr	r3, [r7, #0]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d116      	bne.n	800881e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	2200      	movs	r2, #0
 80087f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80087fe:	68fb      	ldr	r3, [r7, #12]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800880a:	f043 0220 	orr.w	r2, r3, #32
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	e023      	b.n	8008866 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	b2db      	uxtb	r3, r3
 8008824:	2b01      	cmp	r3, #1
 8008826:	d10d      	bne.n	8008844 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	695b      	ldr	r3, [r3, #20]
 800882e:	43da      	mvns	r2, r3
 8008830:	68bb      	ldr	r3, [r7, #8]
 8008832:	4013      	ands	r3, r2
 8008834:	b29b      	uxth	r3, r3
 8008836:	2b00      	cmp	r3, #0
 8008838:	bf0c      	ite	eq
 800883a:	2301      	moveq	r3, #1
 800883c:	2300      	movne	r3, #0
 800883e:	b2db      	uxtb	r3, r3
 8008840:	461a      	mov	r2, r3
 8008842:	e00c      	b.n	800885e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	699b      	ldr	r3, [r3, #24]
 800884a:	43da      	mvns	r2, r3
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	4013      	ands	r3, r2
 8008850:	b29b      	uxth	r3, r3
 8008852:	2b00      	cmp	r3, #0
 8008854:	bf0c      	ite	eq
 8008856:	2301      	moveq	r3, #1
 8008858:	2300      	movne	r3, #0
 800885a:	b2db      	uxtb	r3, r3
 800885c:	461a      	mov	r2, r3
 800885e:	79fb      	ldrb	r3, [r7, #7]
 8008860:	429a      	cmp	r2, r3
 8008862:	d0b6      	beq.n	80087d2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	60b9      	str	r1, [r7, #8]
 8008878:	607a      	str	r2, [r7, #4]
 800887a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800887c:	e051      	b.n	8008922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	695b      	ldr	r3, [r3, #20]
 8008884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008888:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800888c:	d123      	bne.n	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800889c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088a6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	2200      	movs	r2, #0
 80088ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2220      	movs	r2, #32
 80088b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088c2:	f043 0204 	orr.w	r2, r3, #4
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088d2:	2301      	movs	r3, #1
 80088d4:	e046      	b.n	8008964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088dc:	d021      	beq.n	8008922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088de:	f7fc fc41 	bl	8005164 <HAL_GetTick>
 80088e2:	4602      	mov	r2, r0
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	1ad3      	subs	r3, r2, r3
 80088e8:	687a      	ldr	r2, [r7, #4]
 80088ea:	429a      	cmp	r2, r3
 80088ec:	d302      	bcc.n	80088f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d116      	bne.n	8008922 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	2200      	movs	r2, #0
 80088f8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	2220      	movs	r2, #32
 80088fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008902:	68fb      	ldr	r3, [r7, #12]
 8008904:	2200      	movs	r2, #0
 8008906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800890e:	f043 0220 	orr.w	r2, r3, #32
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	2200      	movs	r2, #0
 800891a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800891e:	2301      	movs	r3, #1
 8008920:	e020      	b.n	8008964 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008922:	68bb      	ldr	r3, [r7, #8]
 8008924:	0c1b      	lsrs	r3, r3, #16
 8008926:	b2db      	uxtb	r3, r3
 8008928:	2b01      	cmp	r3, #1
 800892a:	d10c      	bne.n	8008946 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800892c:	68fb      	ldr	r3, [r7, #12]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	43da      	mvns	r2, r3
 8008934:	68bb      	ldr	r3, [r7, #8]
 8008936:	4013      	ands	r3, r2
 8008938:	b29b      	uxth	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	bf14      	ite	ne
 800893e:	2301      	movne	r3, #1
 8008940:	2300      	moveq	r3, #0
 8008942:	b2db      	uxtb	r3, r3
 8008944:	e00b      	b.n	800895e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	43da      	mvns	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4013      	ands	r3, r2
 8008952:	b29b      	uxth	r3, r3
 8008954:	2b00      	cmp	r3, #0
 8008956:	bf14      	ite	ne
 8008958:	2301      	movne	r3, #1
 800895a:	2300      	moveq	r3, #0
 800895c:	b2db      	uxtb	r3, r3
 800895e:	2b00      	cmp	r3, #0
 8008960:	d18d      	bne.n	800887e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008962:	2300      	movs	r3, #0
}
 8008964:	4618      	mov	r0, r3
 8008966:	3710      	adds	r7, #16
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b084      	sub	sp, #16
 8008970:	af00      	add	r7, sp, #0
 8008972:	60f8      	str	r0, [r7, #12]
 8008974:	60b9      	str	r1, [r7, #8]
 8008976:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008978:	e02d      	b.n	80089d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800897a:	68f8      	ldr	r0, [r7, #12]
 800897c:	f000 f8aa 	bl	8008ad4 <I2C_IsAcknowledgeFailed>
 8008980:	4603      	mov	r3, r0
 8008982:	2b00      	cmp	r3, #0
 8008984:	d001      	beq.n	800898a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e02d      	b.n	80089e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008990:	d021      	beq.n	80089d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008992:	f7fc fbe7 	bl	8005164 <HAL_GetTick>
 8008996:	4602      	mov	r2, r0
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	1ad3      	subs	r3, r2, r3
 800899c:	68ba      	ldr	r2, [r7, #8]
 800899e:	429a      	cmp	r2, r3
 80089a0:	d302      	bcc.n	80089a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d116      	bne.n	80089d6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	2200      	movs	r2, #0
 80089ac:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	2220      	movs	r2, #32
 80089b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	2200      	movs	r2, #0
 80089ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f043 0220 	orr.w	r2, r3, #32
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	e007      	b.n	80089e6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	695b      	ldr	r3, [r3, #20]
 80089dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80089e0:	2b80      	cmp	r3, #128	; 0x80
 80089e2:	d1ca      	bne.n	800897a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b084      	sub	sp, #16
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	60f8      	str	r0, [r7, #12]
 80089f6:	60b9      	str	r1, [r7, #8]
 80089f8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80089fa:	e02d      	b.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089fc:	68f8      	ldr	r0, [r7, #12]
 80089fe:	f000 f869 	bl	8008ad4 <I2C_IsAcknowledgeFailed>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	e02d      	b.n	8008a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a12:	d021      	beq.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a14:	f7fc fba6 	bl	8005164 <HAL_GetTick>
 8008a18:	4602      	mov	r2, r0
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	1ad3      	subs	r3, r2, r3
 8008a1e:	68ba      	ldr	r2, [r7, #8]
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d302      	bcc.n	8008a2a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d116      	bne.n	8008a58 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2220      	movs	r2, #32
 8008a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a40:	68fb      	ldr	r3, [r7, #12]
 8008a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a44:	f043 0220 	orr.w	r2, r3, #32
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	2200      	movs	r2, #0
 8008a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a54:	2301      	movs	r3, #1
 8008a56:	e007      	b.n	8008a68 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	695b      	ldr	r3, [r3, #20]
 8008a5e:	f003 0304 	and.w	r3, r3, #4
 8008a62:	2b04      	cmp	r3, #4
 8008a64:	d1ca      	bne.n	80089fc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a66:	2300      	movs	r3, #0
}
 8008a68:	4618      	mov	r0, r3
 8008a6a:	3710      	adds	r7, #16
 8008a6c:	46bd      	mov	sp, r7
 8008a6e:	bd80      	pop	{r7, pc}

08008a70 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a70:	b480      	push	{r7}
 8008a72:	b085      	sub	sp, #20
 8008a74:	af00      	add	r7, sp, #0
 8008a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a78:	2300      	movs	r3, #0
 8008a7a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a7c:	4b13      	ldr	r3, [pc, #76]	; (8008acc <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	08db      	lsrs	r3, r3, #3
 8008a82:	4a13      	ldr	r2, [pc, #76]	; (8008ad0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008a84:	fba2 2303 	umull	r2, r3, r2, r3
 8008a88:	0a1a      	lsrs	r2, r3, #8
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	009b      	lsls	r3, r3, #2
 8008a8e:	4413      	add	r3, r2
 8008a90:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	3b01      	subs	r3, #1
 8008a96:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d107      	bne.n	8008aae <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008aa2:	f043 0220 	orr.w	r2, r3, #32
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008aaa:	2301      	movs	r3, #1
 8008aac:	e008      	b.n	8008ac0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008abc:	d0e9      	beq.n	8008a92 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3714      	adds	r7, #20
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aca:	4770      	bx	lr
 8008acc:	20000250 	.word	0x20000250
 8008ad0:	14f8b589 	.word	0x14f8b589

08008ad4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b083      	sub	sp, #12
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	695b      	ldr	r3, [r3, #20]
 8008ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ae6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008aea:	d11b      	bne.n	8008b24 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	681b      	ldr	r3, [r3, #0]
 8008af0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008af4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2200      	movs	r2, #0
 8008afa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2220      	movs	r2, #32
 8008b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	2200      	movs	r2, #0
 8008b08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b10:	f043 0204 	orr.w	r2, r3, #4
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b20:	2301      	movs	r3, #1
 8008b22:	e000      	b.n	8008b26 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	370c      	adds	r7, #12
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr

08008b32 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b32:	b480      	push	{r7}
 8008b34:	b083      	sub	sp, #12
 8008b36:	af00      	add	r7, sp, #0
 8008b38:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b42:	d103      	bne.n	8008b4c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	2201      	movs	r2, #1
 8008b48:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b4a:	e007      	b.n	8008b5c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b50:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b54:	d102      	bne.n	8008b5c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2208      	movs	r2, #8
 8008b5a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b5c:	bf00      	nop
 8008b5e:	370c      	adds	r7, #12
 8008b60:	46bd      	mov	sp, r7
 8008b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b66:	4770      	bx	lr

08008b68 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b68:	b580      	push	{r7, lr}
 8008b6a:	b086      	sub	sp, #24
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d101      	bne.n	8008b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b76:	2301      	movs	r3, #1
 8008b78:	e267      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	f003 0301 	and.w	r3, r3, #1
 8008b82:	2b00      	cmp	r3, #0
 8008b84:	d075      	beq.n	8008c72 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b86:	4b88      	ldr	r3, [pc, #544]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008b88:	689b      	ldr	r3, [r3, #8]
 8008b8a:	f003 030c 	and.w	r3, r3, #12
 8008b8e:	2b04      	cmp	r3, #4
 8008b90:	d00c      	beq.n	8008bac <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b92:	4b85      	ldr	r3, [pc, #532]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008b9a:	2b08      	cmp	r3, #8
 8008b9c:	d112      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008b9e:	4b82      	ldr	r3, [pc, #520]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008ba0:	685b      	ldr	r3, [r3, #4]
 8008ba2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ba6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008baa:	d10b      	bne.n	8008bc4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bac:	4b7e      	ldr	r3, [pc, #504]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bb4:	2b00      	cmp	r3, #0
 8008bb6:	d05b      	beq.n	8008c70 <HAL_RCC_OscConfig+0x108>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	685b      	ldr	r3, [r3, #4]
 8008bbc:	2b00      	cmp	r3, #0
 8008bbe:	d157      	bne.n	8008c70 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008bc0:	2301      	movs	r3, #1
 8008bc2:	e242      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bcc:	d106      	bne.n	8008bdc <HAL_RCC_OscConfig+0x74>
 8008bce:	4b76      	ldr	r3, [pc, #472]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a75      	ldr	r2, [pc, #468]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bd8:	6013      	str	r3, [r2, #0]
 8008bda:	e01d      	b.n	8008c18 <HAL_RCC_OscConfig+0xb0>
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	685b      	ldr	r3, [r3, #4]
 8008be0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008be4:	d10c      	bne.n	8008c00 <HAL_RCC_OscConfig+0x98>
 8008be6:	4b70      	ldr	r3, [pc, #448]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	4a6f      	ldr	r2, [pc, #444]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008bf0:	6013      	str	r3, [r2, #0]
 8008bf2:	4b6d      	ldr	r3, [pc, #436]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	4a6c      	ldr	r2, [pc, #432]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bfc:	6013      	str	r3, [r2, #0]
 8008bfe:	e00b      	b.n	8008c18 <HAL_RCC_OscConfig+0xb0>
 8008c00:	4b69      	ldr	r3, [pc, #420]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	4a68      	ldr	r2, [pc, #416]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c06:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c0a:	6013      	str	r3, [r2, #0]
 8008c0c:	4b66      	ldr	r3, [pc, #408]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	4a65      	ldr	r2, [pc, #404]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c12:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c16:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	685b      	ldr	r3, [r3, #4]
 8008c1c:	2b00      	cmp	r3, #0
 8008c1e:	d013      	beq.n	8008c48 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c20:	f7fc faa0 	bl	8005164 <HAL_GetTick>
 8008c24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c26:	e008      	b.n	8008c3a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c28:	f7fc fa9c 	bl	8005164 <HAL_GetTick>
 8008c2c:	4602      	mov	r2, r0
 8008c2e:	693b      	ldr	r3, [r7, #16]
 8008c30:	1ad3      	subs	r3, r2, r3
 8008c32:	2b64      	cmp	r3, #100	; 0x64
 8008c34:	d901      	bls.n	8008c3a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c36:	2303      	movs	r3, #3
 8008c38:	e207      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c3a:	4b5b      	ldr	r3, [pc, #364]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d0f0      	beq.n	8008c28 <HAL_RCC_OscConfig+0xc0>
 8008c46:	e014      	b.n	8008c72 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c48:	f7fc fa8c 	bl	8005164 <HAL_GetTick>
 8008c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c4e:	e008      	b.n	8008c62 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c50:	f7fc fa88 	bl	8005164 <HAL_GetTick>
 8008c54:	4602      	mov	r2, r0
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	1ad3      	subs	r3, r2, r3
 8008c5a:	2b64      	cmp	r3, #100	; 0x64
 8008c5c:	d901      	bls.n	8008c62 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e1f3      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c62:	4b51      	ldr	r3, [pc, #324]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d1f0      	bne.n	8008c50 <HAL_RCC_OscConfig+0xe8>
 8008c6e:	e000      	b.n	8008c72 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c70:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	f003 0302 	and.w	r3, r3, #2
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d063      	beq.n	8008d46 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c7e:	4b4a      	ldr	r3, [pc, #296]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c80:	689b      	ldr	r3, [r3, #8]
 8008c82:	f003 030c 	and.w	r3, r3, #12
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d00b      	beq.n	8008ca2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c8a:	4b47      	ldr	r3, [pc, #284]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c8c:	689b      	ldr	r3, [r3, #8]
 8008c8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d11c      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008c96:	4b44      	ldr	r3, [pc, #272]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d116      	bne.n	8008cd0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ca2:	4b41      	ldr	r3, [pc, #260]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d005      	beq.n	8008cba <HAL_RCC_OscConfig+0x152>
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68db      	ldr	r3, [r3, #12]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d001      	beq.n	8008cba <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cb6:	2301      	movs	r3, #1
 8008cb8:	e1c7      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cba:	4b3b      	ldr	r3, [pc, #236]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	00db      	lsls	r3, r3, #3
 8008cc8:	4937      	ldr	r1, [pc, #220]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cce:	e03a      	b.n	8008d46 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	68db      	ldr	r3, [r3, #12]
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d020      	beq.n	8008d1a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cd8:	4b34      	ldr	r3, [pc, #208]	; (8008dac <HAL_RCC_OscConfig+0x244>)
 8008cda:	2201      	movs	r2, #1
 8008cdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cde:	f7fc fa41 	bl	8005164 <HAL_GetTick>
 8008ce2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ce4:	e008      	b.n	8008cf8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008ce6:	f7fc fa3d 	bl	8005164 <HAL_GetTick>
 8008cea:	4602      	mov	r2, r0
 8008cec:	693b      	ldr	r3, [r7, #16]
 8008cee:	1ad3      	subs	r3, r2, r3
 8008cf0:	2b02      	cmp	r3, #2
 8008cf2:	d901      	bls.n	8008cf8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008cf4:	2303      	movs	r3, #3
 8008cf6:	e1a8      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cf8:	4b2b      	ldr	r3, [pc, #172]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	f003 0302 	and.w	r3, r3, #2
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d0f0      	beq.n	8008ce6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d04:	4b28      	ldr	r3, [pc, #160]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	691b      	ldr	r3, [r3, #16]
 8008d10:	00db      	lsls	r3, r3, #3
 8008d12:	4925      	ldr	r1, [pc, #148]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008d14:	4313      	orrs	r3, r2
 8008d16:	600b      	str	r3, [r1, #0]
 8008d18:	e015      	b.n	8008d46 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d1a:	4b24      	ldr	r3, [pc, #144]	; (8008dac <HAL_RCC_OscConfig+0x244>)
 8008d1c:	2200      	movs	r2, #0
 8008d1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d20:	f7fc fa20 	bl	8005164 <HAL_GetTick>
 8008d24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d26:	e008      	b.n	8008d3a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d28:	f7fc fa1c 	bl	8005164 <HAL_GetTick>
 8008d2c:	4602      	mov	r2, r0
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	2b02      	cmp	r3, #2
 8008d34:	d901      	bls.n	8008d3a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d36:	2303      	movs	r3, #3
 8008d38:	e187      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d3a:	4b1b      	ldr	r3, [pc, #108]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	f003 0302 	and.w	r3, r3, #2
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d1f0      	bne.n	8008d28 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 0308 	and.w	r3, r3, #8
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d036      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	695b      	ldr	r3, [r3, #20]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d016      	beq.n	8008d88 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d5a:	4b15      	ldr	r3, [pc, #84]	; (8008db0 <HAL_RCC_OscConfig+0x248>)
 8008d5c:	2201      	movs	r2, #1
 8008d5e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d60:	f7fc fa00 	bl	8005164 <HAL_GetTick>
 8008d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d66:	e008      	b.n	8008d7a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d68:	f7fc f9fc 	bl	8005164 <HAL_GetTick>
 8008d6c:	4602      	mov	r2, r0
 8008d6e:	693b      	ldr	r3, [r7, #16]
 8008d70:	1ad3      	subs	r3, r2, r3
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d901      	bls.n	8008d7a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d76:	2303      	movs	r3, #3
 8008d78:	e167      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d7a:	4b0b      	ldr	r3, [pc, #44]	; (8008da8 <HAL_RCC_OscConfig+0x240>)
 8008d7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d7e:	f003 0302 	and.w	r3, r3, #2
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d0f0      	beq.n	8008d68 <HAL_RCC_OscConfig+0x200>
 8008d86:	e01b      	b.n	8008dc0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008d88:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <HAL_RCC_OscConfig+0x248>)
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008d8e:	f7fc f9e9 	bl	8005164 <HAL_GetTick>
 8008d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008d94:	e00e      	b.n	8008db4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d96:	f7fc f9e5 	bl	8005164 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d907      	bls.n	8008db4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e150      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
 8008da8:	40023800 	.word	0x40023800
 8008dac:	42470000 	.word	0x42470000
 8008db0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008db4:	4b88      	ldr	r3, [pc, #544]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008db6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008db8:	f003 0302 	and.w	r3, r3, #2
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1ea      	bne.n	8008d96 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	f003 0304 	and.w	r3, r3, #4
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	f000 8097 	beq.w	8008efc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008dd2:	4b81      	ldr	r3, [pc, #516]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d10f      	bne.n	8008dfe <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dde:	2300      	movs	r3, #0
 8008de0:	60bb      	str	r3, [r7, #8]
 8008de2:	4b7d      	ldr	r3, [pc, #500]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008de6:	4a7c      	ldr	r2, [pc, #496]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dec:	6413      	str	r3, [r2, #64]	; 0x40
 8008dee:	4b7a      	ldr	r3, [pc, #488]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008df6:	60bb      	str	r3, [r7, #8]
 8008df8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008dfe:	4b77      	ldr	r3, [pc, #476]	; (8008fdc <HAL_RCC_OscConfig+0x474>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d118      	bne.n	8008e3c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e0a:	4b74      	ldr	r3, [pc, #464]	; (8008fdc <HAL_RCC_OscConfig+0x474>)
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a73      	ldr	r2, [pc, #460]	; (8008fdc <HAL_RCC_OscConfig+0x474>)
 8008e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e16:	f7fc f9a5 	bl	8005164 <HAL_GetTick>
 8008e1a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1c:	e008      	b.n	8008e30 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e1e:	f7fc f9a1 	bl	8005164 <HAL_GetTick>
 8008e22:	4602      	mov	r2, r0
 8008e24:	693b      	ldr	r3, [r7, #16]
 8008e26:	1ad3      	subs	r3, r2, r3
 8008e28:	2b02      	cmp	r3, #2
 8008e2a:	d901      	bls.n	8008e30 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e2c:	2303      	movs	r3, #3
 8008e2e:	e10c      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e30:	4b6a      	ldr	r3, [pc, #424]	; (8008fdc <HAL_RCC_OscConfig+0x474>)
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d0f0      	beq.n	8008e1e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	689b      	ldr	r3, [r3, #8]
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d106      	bne.n	8008e52 <HAL_RCC_OscConfig+0x2ea>
 8008e44:	4b64      	ldr	r3, [pc, #400]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e48:	4a63      	ldr	r2, [pc, #396]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e4a:	f043 0301 	orr.w	r3, r3, #1
 8008e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e50:	e01c      	b.n	8008e8c <HAL_RCC_OscConfig+0x324>
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	689b      	ldr	r3, [r3, #8]
 8008e56:	2b05      	cmp	r3, #5
 8008e58:	d10c      	bne.n	8008e74 <HAL_RCC_OscConfig+0x30c>
 8008e5a:	4b5f      	ldr	r3, [pc, #380]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e5e:	4a5e      	ldr	r2, [pc, #376]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e60:	f043 0304 	orr.w	r3, r3, #4
 8008e64:	6713      	str	r3, [r2, #112]	; 0x70
 8008e66:	4b5c      	ldr	r3, [pc, #368]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e6a:	4a5b      	ldr	r2, [pc, #364]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e6c:	f043 0301 	orr.w	r3, r3, #1
 8008e70:	6713      	str	r3, [r2, #112]	; 0x70
 8008e72:	e00b      	b.n	8008e8c <HAL_RCC_OscConfig+0x324>
 8008e74:	4b58      	ldr	r3, [pc, #352]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e78:	4a57      	ldr	r2, [pc, #348]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e7a:	f023 0301 	bic.w	r3, r3, #1
 8008e7e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e80:	4b55      	ldr	r3, [pc, #340]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e84:	4a54      	ldr	r2, [pc, #336]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008e86:	f023 0304 	bic.w	r3, r3, #4
 8008e8a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	689b      	ldr	r3, [r3, #8]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d015      	beq.n	8008ec0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e94:	f7fc f966 	bl	8005164 <HAL_GetTick>
 8008e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008e9a:	e00a      	b.n	8008eb2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008e9c:	f7fc f962 	bl	8005164 <HAL_GetTick>
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	1ad3      	subs	r3, r2, r3
 8008ea6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eaa:	4293      	cmp	r3, r2
 8008eac:	d901      	bls.n	8008eb2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008eae:	2303      	movs	r3, #3
 8008eb0:	e0cb      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eb2:	4b49      	ldr	r3, [pc, #292]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	f003 0302 	and.w	r3, r3, #2
 8008eba:	2b00      	cmp	r3, #0
 8008ebc:	d0ee      	beq.n	8008e9c <HAL_RCC_OscConfig+0x334>
 8008ebe:	e014      	b.n	8008eea <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ec0:	f7fc f950 	bl	8005164 <HAL_GetTick>
 8008ec4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ec6:	e00a      	b.n	8008ede <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ec8:	f7fc f94c 	bl	8005164 <HAL_GetTick>
 8008ecc:	4602      	mov	r2, r0
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	1ad3      	subs	r3, r2, r3
 8008ed2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed6:	4293      	cmp	r3, r2
 8008ed8:	d901      	bls.n	8008ede <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008eda:	2303      	movs	r3, #3
 8008edc:	e0b5      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ede:	4b3e      	ldr	r3, [pc, #248]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ee2:	f003 0302 	and.w	r3, r3, #2
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1ee      	bne.n	8008ec8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008eea:	7dfb      	ldrb	r3, [r7, #23]
 8008eec:	2b01      	cmp	r3, #1
 8008eee:	d105      	bne.n	8008efc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ef0:	4b39      	ldr	r3, [pc, #228]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ef4:	4a38      	ldr	r2, [pc, #224]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008ef6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008efa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	699b      	ldr	r3, [r3, #24]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 80a1 	beq.w	8009048 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f06:	4b34      	ldr	r3, [pc, #208]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 030c 	and.w	r3, r3, #12
 8008f0e:	2b08      	cmp	r3, #8
 8008f10:	d05c      	beq.n	8008fcc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	699b      	ldr	r3, [r3, #24]
 8008f16:	2b02      	cmp	r3, #2
 8008f18:	d141      	bne.n	8008f9e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f1a:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <HAL_RCC_OscConfig+0x478>)
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f20:	f7fc f920 	bl	8005164 <HAL_GetTick>
 8008f24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f26:	e008      	b.n	8008f3a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f28:	f7fc f91c 	bl	8005164 <HAL_GetTick>
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	693b      	ldr	r3, [r7, #16]
 8008f30:	1ad3      	subs	r3, r2, r3
 8008f32:	2b02      	cmp	r3, #2
 8008f34:	d901      	bls.n	8008f3a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f36:	2303      	movs	r3, #3
 8008f38:	e087      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f3a:	4b27      	ldr	r3, [pc, #156]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d1f0      	bne.n	8008f28 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	69da      	ldr	r2, [r3, #28]
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	6a1b      	ldr	r3, [r3, #32]
 8008f4e:	431a      	orrs	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f54:	019b      	lsls	r3, r3, #6
 8008f56:	431a      	orrs	r2, r3
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f5c:	085b      	lsrs	r3, r3, #1
 8008f5e:	3b01      	subs	r3, #1
 8008f60:	041b      	lsls	r3, r3, #16
 8008f62:	431a      	orrs	r2, r3
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f68:	061b      	lsls	r3, r3, #24
 8008f6a:	491b      	ldr	r1, [pc, #108]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008f6c:	4313      	orrs	r3, r2
 8008f6e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f70:	4b1b      	ldr	r3, [pc, #108]	; (8008fe0 <HAL_RCC_OscConfig+0x478>)
 8008f72:	2201      	movs	r2, #1
 8008f74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f76:	f7fc f8f5 	bl	8005164 <HAL_GetTick>
 8008f7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f7c:	e008      	b.n	8008f90 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f7e:	f7fc f8f1 	bl	8005164 <HAL_GetTick>
 8008f82:	4602      	mov	r2, r0
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	1ad3      	subs	r3, r2, r3
 8008f88:	2b02      	cmp	r3, #2
 8008f8a:	d901      	bls.n	8008f90 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008f8c:	2303      	movs	r3, #3
 8008f8e:	e05c      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f90:	4b11      	ldr	r3, [pc, #68]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f98:	2b00      	cmp	r3, #0
 8008f9a:	d0f0      	beq.n	8008f7e <HAL_RCC_OscConfig+0x416>
 8008f9c:	e054      	b.n	8009048 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f9e:	4b10      	ldr	r3, [pc, #64]	; (8008fe0 <HAL_RCC_OscConfig+0x478>)
 8008fa0:	2200      	movs	r2, #0
 8008fa2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fa4:	f7fc f8de 	bl	8005164 <HAL_GetTick>
 8008fa8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008faa:	e008      	b.n	8008fbe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fac:	f7fc f8da 	bl	8005164 <HAL_GetTick>
 8008fb0:	4602      	mov	r2, r0
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	1ad3      	subs	r3, r2, r3
 8008fb6:	2b02      	cmp	r3, #2
 8008fb8:	d901      	bls.n	8008fbe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fba:	2303      	movs	r3, #3
 8008fbc:	e045      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fbe:	4b06      	ldr	r3, [pc, #24]	; (8008fd8 <HAL_RCC_OscConfig+0x470>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d1f0      	bne.n	8008fac <HAL_RCC_OscConfig+0x444>
 8008fca:	e03d      	b.n	8009048 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	699b      	ldr	r3, [r3, #24]
 8008fd0:	2b01      	cmp	r3, #1
 8008fd2:	d107      	bne.n	8008fe4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008fd4:	2301      	movs	r3, #1
 8008fd6:	e038      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
 8008fd8:	40023800 	.word	0x40023800
 8008fdc:	40007000 	.word	0x40007000
 8008fe0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008fe4:	4b1b      	ldr	r3, [pc, #108]	; (8009054 <HAL_RCC_OscConfig+0x4ec>)
 8008fe6:	685b      	ldr	r3, [r3, #4]
 8008fe8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	699b      	ldr	r3, [r3, #24]
 8008fee:	2b01      	cmp	r3, #1
 8008ff0:	d028      	beq.n	8009044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008ffc:	429a      	cmp	r2, r3
 8008ffe:	d121      	bne.n	8009044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800900a:	429a      	cmp	r2, r3
 800900c:	d11a      	bne.n	8009044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009014:	4013      	ands	r3, r2
 8009016:	687a      	ldr	r2, [r7, #4]
 8009018:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800901a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800901c:	4293      	cmp	r3, r2
 800901e:	d111      	bne.n	8009044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800902a:	085b      	lsrs	r3, r3, #1
 800902c:	3b01      	subs	r3, #1
 800902e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009030:	429a      	cmp	r2, r3
 8009032:	d107      	bne.n	8009044 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800903e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009040:	429a      	cmp	r2, r3
 8009042:	d001      	beq.n	8009048 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e000      	b.n	800904a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009048:	2300      	movs	r3, #0
}
 800904a:	4618      	mov	r0, r3
 800904c:	3718      	adds	r7, #24
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	40023800 	.word	0x40023800

08009058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2b00      	cmp	r3, #0
 8009066:	d101      	bne.n	800906c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e0cc      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800906c:	4b68      	ldr	r3, [pc, #416]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f003 0307 	and.w	r3, r3, #7
 8009074:	683a      	ldr	r2, [r7, #0]
 8009076:	429a      	cmp	r2, r3
 8009078:	d90c      	bls.n	8009094 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800907a:	4b65      	ldr	r3, [pc, #404]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 800907c:	683a      	ldr	r2, [r7, #0]
 800907e:	b2d2      	uxtb	r2, r2
 8009080:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009082:	4b63      	ldr	r3, [pc, #396]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	683a      	ldr	r2, [r7, #0]
 800908c:	429a      	cmp	r2, r3
 800908e:	d001      	beq.n	8009094 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8009090:	2301      	movs	r3, #1
 8009092:	e0b8      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f003 0302 	and.w	r3, r3, #2
 800909c:	2b00      	cmp	r3, #0
 800909e:	d020      	beq.n	80090e2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f003 0304 	and.w	r3, r3, #4
 80090a8:	2b00      	cmp	r3, #0
 80090aa:	d005      	beq.n	80090b8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090ac:	4b59      	ldr	r3, [pc, #356]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090ae:	689b      	ldr	r3, [r3, #8]
 80090b0:	4a58      	ldr	r2, [pc, #352]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090b2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090b6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	f003 0308 	and.w	r3, r3, #8
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d005      	beq.n	80090d0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090c4:	4b53      	ldr	r3, [pc, #332]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090c6:	689b      	ldr	r3, [r3, #8]
 80090c8:	4a52      	ldr	r2, [pc, #328]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090ca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090ce:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090d0:	4b50      	ldr	r3, [pc, #320]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	689b      	ldr	r3, [r3, #8]
 80090d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	494d      	ldr	r1, [pc, #308]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090de:	4313      	orrs	r3, r2
 80090e0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f003 0301 	and.w	r3, r3, #1
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d044      	beq.n	8009178 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	685b      	ldr	r3, [r3, #4]
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d107      	bne.n	8009106 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80090f6:	4b47      	ldr	r3, [pc, #284]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d119      	bne.n	8009136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009102:	2301      	movs	r3, #1
 8009104:	e07f      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	685b      	ldr	r3, [r3, #4]
 800910a:	2b02      	cmp	r3, #2
 800910c:	d003      	beq.n	8009116 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009112:	2b03      	cmp	r3, #3
 8009114:	d107      	bne.n	8009126 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009116:	4b3f      	ldr	r3, [pc, #252]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d109      	bne.n	8009136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e06f      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009126:	4b3b      	ldr	r3, [pc, #236]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0302 	and.w	r3, r3, #2
 800912e:	2b00      	cmp	r3, #0
 8009130:	d101      	bne.n	8009136 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009132:	2301      	movs	r3, #1
 8009134:	e067      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009136:	4b37      	ldr	r3, [pc, #220]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	f023 0203 	bic.w	r2, r3, #3
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	685b      	ldr	r3, [r3, #4]
 8009142:	4934      	ldr	r1, [pc, #208]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 8009144:	4313      	orrs	r3, r2
 8009146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009148:	f7fc f80c 	bl	8005164 <HAL_GetTick>
 800914c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800914e:	e00a      	b.n	8009166 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009150:	f7fc f808 	bl	8005164 <HAL_GetTick>
 8009154:	4602      	mov	r2, r0
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	1ad3      	subs	r3, r2, r3
 800915a:	f241 3288 	movw	r2, #5000	; 0x1388
 800915e:	4293      	cmp	r3, r2
 8009160:	d901      	bls.n	8009166 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009162:	2303      	movs	r3, #3
 8009164:	e04f      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009166:	4b2b      	ldr	r3, [pc, #172]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 8009168:	689b      	ldr	r3, [r3, #8]
 800916a:	f003 020c 	and.w	r2, r3, #12
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	009b      	lsls	r3, r3, #2
 8009174:	429a      	cmp	r2, r3
 8009176:	d1eb      	bne.n	8009150 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009178:	4b25      	ldr	r3, [pc, #148]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f003 0307 	and.w	r3, r3, #7
 8009180:	683a      	ldr	r2, [r7, #0]
 8009182:	429a      	cmp	r2, r3
 8009184:	d20c      	bcs.n	80091a0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009186:	4b22      	ldr	r3, [pc, #136]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 8009188:	683a      	ldr	r2, [r7, #0]
 800918a:	b2d2      	uxtb	r2, r2
 800918c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800918e:	4b20      	ldr	r3, [pc, #128]	; (8009210 <HAL_RCC_ClockConfig+0x1b8>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	f003 0307 	and.w	r3, r3, #7
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	429a      	cmp	r2, r3
 800919a:	d001      	beq.n	80091a0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800919c:	2301      	movs	r3, #1
 800919e:	e032      	b.n	8009206 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f003 0304 	and.w	r3, r3, #4
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d008      	beq.n	80091be <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091ac:	4b19      	ldr	r3, [pc, #100]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80091ae:	689b      	ldr	r3, [r3, #8]
 80091b0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4916      	ldr	r1, [pc, #88]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80091ba:	4313      	orrs	r3, r2
 80091bc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f003 0308 	and.w	r3, r3, #8
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d009      	beq.n	80091de <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091ca:	4b12      	ldr	r3, [pc, #72]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80091cc:	689b      	ldr	r3, [r3, #8]
 80091ce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	691b      	ldr	r3, [r3, #16]
 80091d6:	00db      	lsls	r3, r3, #3
 80091d8:	490e      	ldr	r1, [pc, #56]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091de:	f000 f821 	bl	8009224 <HAL_RCC_GetSysClockFreq>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b0b      	ldr	r3, [pc, #44]	; (8009214 <HAL_RCC_ClockConfig+0x1bc>)
 80091e6:	689b      	ldr	r3, [r3, #8]
 80091e8:	091b      	lsrs	r3, r3, #4
 80091ea:	f003 030f 	and.w	r3, r3, #15
 80091ee:	490a      	ldr	r1, [pc, #40]	; (8009218 <HAL_RCC_ClockConfig+0x1c0>)
 80091f0:	5ccb      	ldrb	r3, [r1, r3]
 80091f2:	fa22 f303 	lsr.w	r3, r2, r3
 80091f6:	4a09      	ldr	r2, [pc, #36]	; (800921c <HAL_RCC_ClockConfig+0x1c4>)
 80091f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80091fa:	4b09      	ldr	r3, [pc, #36]	; (8009220 <HAL_RCC_ClockConfig+0x1c8>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	4618      	mov	r0, r3
 8009200:	f7fb ff6c 	bl	80050dc <HAL_InitTick>

  return HAL_OK;
 8009204:	2300      	movs	r3, #0
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	40023c00 	.word	0x40023c00
 8009214:	40023800 	.word	0x40023800
 8009218:	08012528 	.word	0x08012528
 800921c:	20000250 	.word	0x20000250
 8009220:	20000254 	.word	0x20000254

08009224 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009228:	b094      	sub	sp, #80	; 0x50
 800922a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800922c:	2300      	movs	r3, #0
 800922e:	647b      	str	r3, [r7, #68]	; 0x44
 8009230:	2300      	movs	r3, #0
 8009232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009234:	2300      	movs	r3, #0
 8009236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009238:	2300      	movs	r3, #0
 800923a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800923c:	4b79      	ldr	r3, [pc, #484]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	f003 030c 	and.w	r3, r3, #12
 8009244:	2b08      	cmp	r3, #8
 8009246:	d00d      	beq.n	8009264 <HAL_RCC_GetSysClockFreq+0x40>
 8009248:	2b08      	cmp	r3, #8
 800924a:	f200 80e1 	bhi.w	8009410 <HAL_RCC_GetSysClockFreq+0x1ec>
 800924e:	2b00      	cmp	r3, #0
 8009250:	d002      	beq.n	8009258 <HAL_RCC_GetSysClockFreq+0x34>
 8009252:	2b04      	cmp	r3, #4
 8009254:	d003      	beq.n	800925e <HAL_RCC_GetSysClockFreq+0x3a>
 8009256:	e0db      	b.n	8009410 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009258:	4b73      	ldr	r3, [pc, #460]	; (8009428 <HAL_RCC_GetSysClockFreq+0x204>)
 800925a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800925c:	e0db      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800925e:	4b73      	ldr	r3, [pc, #460]	; (800942c <HAL_RCC_GetSysClockFreq+0x208>)
 8009260:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009262:	e0d8      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009264:	4b6f      	ldr	r3, [pc, #444]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 8009266:	685b      	ldr	r3, [r3, #4]
 8009268:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800926c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800926e:	4b6d      	ldr	r3, [pc, #436]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 8009270:	685b      	ldr	r3, [r3, #4]
 8009272:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009276:	2b00      	cmp	r3, #0
 8009278:	d063      	beq.n	8009342 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800927a:	4b6a      	ldr	r3, [pc, #424]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 800927c:	685b      	ldr	r3, [r3, #4]
 800927e:	099b      	lsrs	r3, r3, #6
 8009280:	2200      	movs	r2, #0
 8009282:	63bb      	str	r3, [r7, #56]	; 0x38
 8009284:	63fa      	str	r2, [r7, #60]	; 0x3c
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800928c:	633b      	str	r3, [r7, #48]	; 0x30
 800928e:	2300      	movs	r3, #0
 8009290:	637b      	str	r3, [r7, #52]	; 0x34
 8009292:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8009296:	4622      	mov	r2, r4
 8009298:	462b      	mov	r3, r5
 800929a:	f04f 0000 	mov.w	r0, #0
 800929e:	f04f 0100 	mov.w	r1, #0
 80092a2:	0159      	lsls	r1, r3, #5
 80092a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092a8:	0150      	lsls	r0, r2, #5
 80092aa:	4602      	mov	r2, r0
 80092ac:	460b      	mov	r3, r1
 80092ae:	4621      	mov	r1, r4
 80092b0:	1a51      	subs	r1, r2, r1
 80092b2:	6139      	str	r1, [r7, #16]
 80092b4:	4629      	mov	r1, r5
 80092b6:	eb63 0301 	sbc.w	r3, r3, r1
 80092ba:	617b      	str	r3, [r7, #20]
 80092bc:	f04f 0200 	mov.w	r2, #0
 80092c0:	f04f 0300 	mov.w	r3, #0
 80092c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092c8:	4659      	mov	r1, fp
 80092ca:	018b      	lsls	r3, r1, #6
 80092cc:	4651      	mov	r1, sl
 80092ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092d2:	4651      	mov	r1, sl
 80092d4:	018a      	lsls	r2, r1, #6
 80092d6:	4651      	mov	r1, sl
 80092d8:	ebb2 0801 	subs.w	r8, r2, r1
 80092dc:	4659      	mov	r1, fp
 80092de:	eb63 0901 	sbc.w	r9, r3, r1
 80092e2:	f04f 0200 	mov.w	r2, #0
 80092e6:	f04f 0300 	mov.w	r3, #0
 80092ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80092ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80092f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80092f6:	4690      	mov	r8, r2
 80092f8:	4699      	mov	r9, r3
 80092fa:	4623      	mov	r3, r4
 80092fc:	eb18 0303 	adds.w	r3, r8, r3
 8009300:	60bb      	str	r3, [r7, #8]
 8009302:	462b      	mov	r3, r5
 8009304:	eb49 0303 	adc.w	r3, r9, r3
 8009308:	60fb      	str	r3, [r7, #12]
 800930a:	f04f 0200 	mov.w	r2, #0
 800930e:	f04f 0300 	mov.w	r3, #0
 8009312:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009316:	4629      	mov	r1, r5
 8009318:	024b      	lsls	r3, r1, #9
 800931a:	4621      	mov	r1, r4
 800931c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009320:	4621      	mov	r1, r4
 8009322:	024a      	lsls	r2, r1, #9
 8009324:	4610      	mov	r0, r2
 8009326:	4619      	mov	r1, r3
 8009328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800932a:	2200      	movs	r2, #0
 800932c:	62bb      	str	r3, [r7, #40]	; 0x28
 800932e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009330:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009334:	f7f7 fcb0 	bl	8000c98 <__aeabi_uldivmod>
 8009338:	4602      	mov	r2, r0
 800933a:	460b      	mov	r3, r1
 800933c:	4613      	mov	r3, r2
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009340:	e058      	b.n	80093f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009342:	4b38      	ldr	r3, [pc, #224]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	099b      	lsrs	r3, r3, #6
 8009348:	2200      	movs	r2, #0
 800934a:	4618      	mov	r0, r3
 800934c:	4611      	mov	r1, r2
 800934e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009352:	623b      	str	r3, [r7, #32]
 8009354:	2300      	movs	r3, #0
 8009356:	627b      	str	r3, [r7, #36]	; 0x24
 8009358:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800935c:	4642      	mov	r2, r8
 800935e:	464b      	mov	r3, r9
 8009360:	f04f 0000 	mov.w	r0, #0
 8009364:	f04f 0100 	mov.w	r1, #0
 8009368:	0159      	lsls	r1, r3, #5
 800936a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800936e:	0150      	lsls	r0, r2, #5
 8009370:	4602      	mov	r2, r0
 8009372:	460b      	mov	r3, r1
 8009374:	4641      	mov	r1, r8
 8009376:	ebb2 0a01 	subs.w	sl, r2, r1
 800937a:	4649      	mov	r1, r9
 800937c:	eb63 0b01 	sbc.w	fp, r3, r1
 8009380:	f04f 0200 	mov.w	r2, #0
 8009384:	f04f 0300 	mov.w	r3, #0
 8009388:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800938c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8009390:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8009394:	ebb2 040a 	subs.w	r4, r2, sl
 8009398:	eb63 050b 	sbc.w	r5, r3, fp
 800939c:	f04f 0200 	mov.w	r2, #0
 80093a0:	f04f 0300 	mov.w	r3, #0
 80093a4:	00eb      	lsls	r3, r5, #3
 80093a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093aa:	00e2      	lsls	r2, r4, #3
 80093ac:	4614      	mov	r4, r2
 80093ae:	461d      	mov	r5, r3
 80093b0:	4643      	mov	r3, r8
 80093b2:	18e3      	adds	r3, r4, r3
 80093b4:	603b      	str	r3, [r7, #0]
 80093b6:	464b      	mov	r3, r9
 80093b8:	eb45 0303 	adc.w	r3, r5, r3
 80093bc:	607b      	str	r3, [r7, #4]
 80093be:	f04f 0200 	mov.w	r2, #0
 80093c2:	f04f 0300 	mov.w	r3, #0
 80093c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ca:	4629      	mov	r1, r5
 80093cc:	028b      	lsls	r3, r1, #10
 80093ce:	4621      	mov	r1, r4
 80093d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093d4:	4621      	mov	r1, r4
 80093d6:	028a      	lsls	r2, r1, #10
 80093d8:	4610      	mov	r0, r2
 80093da:	4619      	mov	r1, r3
 80093dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093de:	2200      	movs	r2, #0
 80093e0:	61bb      	str	r3, [r7, #24]
 80093e2:	61fa      	str	r2, [r7, #28]
 80093e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80093e8:	f7f7 fc56 	bl	8000c98 <__aeabi_uldivmod>
 80093ec:	4602      	mov	r2, r0
 80093ee:	460b      	mov	r3, r1
 80093f0:	4613      	mov	r3, r2
 80093f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80093f4:	4b0b      	ldr	r3, [pc, #44]	; (8009424 <HAL_RCC_GetSysClockFreq+0x200>)
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	0c1b      	lsrs	r3, r3, #16
 80093fa:	f003 0303 	and.w	r3, r3, #3
 80093fe:	3301      	adds	r3, #1
 8009400:	005b      	lsls	r3, r3, #1
 8009402:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009404:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009406:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009408:	fbb2 f3f3 	udiv	r3, r2, r3
 800940c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800940e:	e002      	b.n	8009416 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009410:	4b05      	ldr	r3, [pc, #20]	; (8009428 <HAL_RCC_GetSysClockFreq+0x204>)
 8009412:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009414:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009416:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009418:	4618      	mov	r0, r3
 800941a:	3750      	adds	r7, #80	; 0x50
 800941c:	46bd      	mov	sp, r7
 800941e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009422:	bf00      	nop
 8009424:	40023800 	.word	0x40023800
 8009428:	00f42400 	.word	0x00f42400
 800942c:	007a1200 	.word	0x007a1200

08009430 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009430:	b480      	push	{r7}
 8009432:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009434:	4b03      	ldr	r3, [pc, #12]	; (8009444 <HAL_RCC_GetHCLKFreq+0x14>)
 8009436:	681b      	ldr	r3, [r3, #0]
}
 8009438:	4618      	mov	r0, r3
 800943a:	46bd      	mov	sp, r7
 800943c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009440:	4770      	bx	lr
 8009442:	bf00      	nop
 8009444:	20000250 	.word	0x20000250

08009448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800944c:	f7ff fff0 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8009450:	4602      	mov	r2, r0
 8009452:	4b05      	ldr	r3, [pc, #20]	; (8009468 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009454:	689b      	ldr	r3, [r3, #8]
 8009456:	0a9b      	lsrs	r3, r3, #10
 8009458:	f003 0307 	and.w	r3, r3, #7
 800945c:	4903      	ldr	r1, [pc, #12]	; (800946c <HAL_RCC_GetPCLK1Freq+0x24>)
 800945e:	5ccb      	ldrb	r3, [r1, r3]
 8009460:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009464:	4618      	mov	r0, r3
 8009466:	bd80      	pop	{r7, pc}
 8009468:	40023800 	.word	0x40023800
 800946c:	08012538 	.word	0x08012538

08009470 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009474:	f7ff ffdc 	bl	8009430 <HAL_RCC_GetHCLKFreq>
 8009478:	4602      	mov	r2, r0
 800947a:	4b05      	ldr	r3, [pc, #20]	; (8009490 <HAL_RCC_GetPCLK2Freq+0x20>)
 800947c:	689b      	ldr	r3, [r3, #8]
 800947e:	0b5b      	lsrs	r3, r3, #13
 8009480:	f003 0307 	and.w	r3, r3, #7
 8009484:	4903      	ldr	r1, [pc, #12]	; (8009494 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009486:	5ccb      	ldrb	r3, [r1, r3]
 8009488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800948c:	4618      	mov	r0, r3
 800948e:	bd80      	pop	{r7, pc}
 8009490:	40023800 	.word	0x40023800
 8009494:	08012538 	.word	0x08012538

08009498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b082      	sub	sp, #8
 800949c:	af00      	add	r7, sp, #0
 800949e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d101      	bne.n	80094aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094a6:	2301      	movs	r3, #1
 80094a8:	e04c      	b.n	8009544 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094b0:	b2db      	uxtb	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d111      	bne.n	80094da <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f001 fc32 	bl	800ad28 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d102      	bne.n	80094d2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	4a1f      	ldr	r2, [pc, #124]	; (800954c <HAL_TIM_Base_Init+0xb4>)
 80094d0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094d6:	6878      	ldr	r0, [r7, #4]
 80094d8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2202      	movs	r2, #2
 80094de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681a      	ldr	r2, [r3, #0]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	3304      	adds	r3, #4
 80094ea:	4619      	mov	r1, r3
 80094ec:	4610      	mov	r0, r2
 80094ee:	f001 f94f 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	2201      	movs	r2, #1
 80094f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2201      	movs	r2, #1
 80094fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	2201      	movs	r2, #1
 8009506:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2201      	movs	r2, #1
 800950e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009542:	2300      	movs	r3, #0
}
 8009544:	4618      	mov	r0, r3
 8009546:	3708      	adds	r7, #8
 8009548:	46bd      	mov	sp, r7
 800954a:	bd80      	pop	{r7, pc}
 800954c:	08004aa9 	.word	0x08004aa9

08009550 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009550:	b480      	push	{r7}
 8009552:	b085      	sub	sp, #20
 8009554:	af00      	add	r7, sp, #0
 8009556:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b01      	cmp	r3, #1
 8009562:	d001      	beq.n	8009568 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	e03c      	b.n	80095e2 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	2202      	movs	r2, #2
 800956c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009570:	687b      	ldr	r3, [r7, #4]
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a1e      	ldr	r2, [pc, #120]	; (80095f0 <HAL_TIM_Base_Start+0xa0>)
 8009576:	4293      	cmp	r3, r2
 8009578:	d018      	beq.n	80095ac <HAL_TIM_Base_Start+0x5c>
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009582:	d013      	beq.n	80095ac <HAL_TIM_Base_Start+0x5c>
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	4a1a      	ldr	r2, [pc, #104]	; (80095f4 <HAL_TIM_Base_Start+0xa4>)
 800958a:	4293      	cmp	r3, r2
 800958c:	d00e      	beq.n	80095ac <HAL_TIM_Base_Start+0x5c>
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	4a19      	ldr	r2, [pc, #100]	; (80095f8 <HAL_TIM_Base_Start+0xa8>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d009      	beq.n	80095ac <HAL_TIM_Base_Start+0x5c>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4a17      	ldr	r2, [pc, #92]	; (80095fc <HAL_TIM_Base_Start+0xac>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d004      	beq.n	80095ac <HAL_TIM_Base_Start+0x5c>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4a16      	ldr	r2, [pc, #88]	; (8009600 <HAL_TIM_Base_Start+0xb0>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d111      	bne.n	80095d0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	689b      	ldr	r3, [r3, #8]
 80095b2:	f003 0307 	and.w	r3, r3, #7
 80095b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	2b06      	cmp	r3, #6
 80095bc:	d010      	beq.n	80095e0 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	681a      	ldr	r2, [r3, #0]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f042 0201 	orr.w	r2, r2, #1
 80095cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ce:	e007      	b.n	80095e0 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	681a      	ldr	r2, [r3, #0]
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f042 0201 	orr.w	r2, r2, #1
 80095de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40010000 	.word	0x40010000
 80095f4:	40000400 	.word	0x40000400
 80095f8:	40000800 	.word	0x40000800
 80095fc:	40000c00 	.word	0x40000c00
 8009600:	40014000 	.word	0x40014000

08009604 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009604:	b480      	push	{r7}
 8009606:	b085      	sub	sp, #20
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009612:	b2db      	uxtb	r3, r3
 8009614:	2b01      	cmp	r3, #1
 8009616:	d001      	beq.n	800961c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009618:	2301      	movs	r3, #1
 800961a:	e044      	b.n	80096a6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	2202      	movs	r2, #2
 8009620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009624:	687b      	ldr	r3, [r7, #4]
 8009626:	681b      	ldr	r3, [r3, #0]
 8009628:	68da      	ldr	r2, [r3, #12]
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	f042 0201 	orr.w	r2, r2, #1
 8009632:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a1e      	ldr	r2, [pc, #120]	; (80096b4 <HAL_TIM_Base_Start_IT+0xb0>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d018      	beq.n	8009670 <HAL_TIM_Base_Start_IT+0x6c>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009646:	d013      	beq.n	8009670 <HAL_TIM_Base_Start_IT+0x6c>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a1a      	ldr	r2, [pc, #104]	; (80096b8 <HAL_TIM_Base_Start_IT+0xb4>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d00e      	beq.n	8009670 <HAL_TIM_Base_Start_IT+0x6c>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a19      	ldr	r2, [pc, #100]	; (80096bc <HAL_TIM_Base_Start_IT+0xb8>)
 8009658:	4293      	cmp	r3, r2
 800965a:	d009      	beq.n	8009670 <HAL_TIM_Base_Start_IT+0x6c>
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	4a17      	ldr	r2, [pc, #92]	; (80096c0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009662:	4293      	cmp	r3, r2
 8009664:	d004      	beq.n	8009670 <HAL_TIM_Base_Start_IT+0x6c>
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	4a16      	ldr	r2, [pc, #88]	; (80096c4 <HAL_TIM_Base_Start_IT+0xc0>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d111      	bne.n	8009694 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	689b      	ldr	r3, [r3, #8]
 8009676:	f003 0307 	and.w	r3, r3, #7
 800967a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800967c:	68fb      	ldr	r3, [r7, #12]
 800967e:	2b06      	cmp	r3, #6
 8009680:	d010      	beq.n	80096a4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	681a      	ldr	r2, [r3, #0]
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f042 0201 	orr.w	r2, r2, #1
 8009690:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009692:	e007      	b.n	80096a4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	681a      	ldr	r2, [r3, #0]
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f042 0201 	orr.w	r2, r2, #1
 80096a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096a4:	2300      	movs	r3, #0
}
 80096a6:	4618      	mov	r0, r3
 80096a8:	3714      	adds	r7, #20
 80096aa:	46bd      	mov	sp, r7
 80096ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b0:	4770      	bx	lr
 80096b2:	bf00      	nop
 80096b4:	40010000 	.word	0x40010000
 80096b8:	40000400 	.word	0x40000400
 80096bc:	40000800 	.word	0x40000800
 80096c0:	40000c00 	.word	0x40000c00
 80096c4:	40014000 	.word	0x40014000

080096c8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	68da      	ldr	r2, [r3, #12]
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f022 0201 	bic.w	r2, r2, #1
 80096de:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	6a1a      	ldr	r2, [r3, #32]
 80096e6:	f241 1311 	movw	r3, #4369	; 0x1111
 80096ea:	4013      	ands	r3, r2
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10f      	bne.n	8009710 <HAL_TIM_Base_Stop_IT+0x48>
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	6a1a      	ldr	r2, [r3, #32]
 80096f6:	f240 4344 	movw	r3, #1092	; 0x444
 80096fa:	4013      	ands	r3, r2
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d107      	bne.n	8009710 <HAL_TIM_Base_Stop_IT+0x48>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	681a      	ldr	r2, [r3, #0]
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	f022 0201 	bic.w	r2, r2, #1
 800970e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2201      	movs	r2, #1
 8009714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009718:	2300      	movs	r3, #0
}
 800971a:	4618      	mov	r0, r3
 800971c:	370c      	adds	r7, #12
 800971e:	46bd      	mov	sp, r7
 8009720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009724:	4770      	bx	lr
	...

08009728 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009728:	b580      	push	{r7, lr}
 800972a:	b082      	sub	sp, #8
 800972c:	af00      	add	r7, sp, #0
 800972e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d101      	bne.n	800973a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009736:	2301      	movs	r3, #1
 8009738:	e04c      	b.n	80097d4 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009740:	b2db      	uxtb	r3, r3
 8009742:	2b00      	cmp	r3, #0
 8009744:	d111      	bne.n	800976a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	2200      	movs	r2, #0
 800974a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800974e:	6878      	ldr	r0, [r7, #4]
 8009750:	f001 faea 	bl	800ad28 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009758:	2b00      	cmp	r3, #0
 800975a:	d102      	bne.n	8009762 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	4a1f      	ldr	r2, [pc, #124]	; (80097dc <HAL_TIM_OC_Init+0xb4>)
 8009760:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009766:	6878      	ldr	r0, [r7, #4]
 8009768:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	2202      	movs	r2, #2
 800976e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681a      	ldr	r2, [r3, #0]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	3304      	adds	r3, #4
 800977a:	4619      	mov	r1, r3
 800977c:	4610      	mov	r0, r2
 800977e:	f001 f807 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	2201      	movs	r2, #1
 8009786:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2201      	movs	r2, #1
 800978e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	2201      	movs	r2, #1
 8009796:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097d2:	2300      	movs	r3, #0
}
 80097d4:	4618      	mov	r0, r3
 80097d6:	3708      	adds	r7, #8
 80097d8:	46bd      	mov	sp, r7
 80097da:	bd80      	pop	{r7, pc}
 80097dc:	080097e1 	.word	0x080097e1

080097e0 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d101      	bne.n	8009806 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009802:	2301      	movs	r3, #1
 8009804:	e04c      	b.n	80098a0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800980c:	b2db      	uxtb	r3, r3
 800980e:	2b00      	cmp	r3, #0
 8009810:	d111      	bne.n	8009836 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2200      	movs	r2, #0
 8009816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800981a:	6878      	ldr	r0, [r7, #4]
 800981c:	f001 fa84 	bl	800ad28 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009824:	2b00      	cmp	r3, #0
 8009826:	d102      	bne.n	800982e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	4a1f      	ldr	r2, [pc, #124]	; (80098a8 <HAL_TIM_PWM_Init+0xb4>)
 800982c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	2202      	movs	r2, #2
 800983a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	681a      	ldr	r2, [r3, #0]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	3304      	adds	r3, #4
 8009846:	4619      	mov	r1, r3
 8009848:	4610      	mov	r0, r2
 800984a:	f000 ffa1 	bl	800a790 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	2201      	movs	r2, #1
 8009852:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2201      	movs	r2, #1
 800985a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	2201      	movs	r2, #1
 8009862:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800989e:	2300      	movs	r3, #0
}
 80098a0:	4618      	mov	r0, r3
 80098a2:	3708      	adds	r7, #8
 80098a4:	46bd      	mov	sp, r7
 80098a6:	bd80      	pop	{r7, pc}
 80098a8:	080049b9 	.word	0x080049b9

080098ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b084      	sub	sp, #16
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d109      	bne.n	80098d0 <HAL_TIM_PWM_Start+0x24>
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098c2:	b2db      	uxtb	r3, r3
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	bf14      	ite	ne
 80098c8:	2301      	movne	r3, #1
 80098ca:	2300      	moveq	r3, #0
 80098cc:	b2db      	uxtb	r3, r3
 80098ce:	e022      	b.n	8009916 <HAL_TIM_PWM_Start+0x6a>
 80098d0:	683b      	ldr	r3, [r7, #0]
 80098d2:	2b04      	cmp	r3, #4
 80098d4:	d109      	bne.n	80098ea <HAL_TIM_PWM_Start+0x3e>
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098dc:	b2db      	uxtb	r3, r3
 80098de:	2b01      	cmp	r3, #1
 80098e0:	bf14      	ite	ne
 80098e2:	2301      	movne	r3, #1
 80098e4:	2300      	moveq	r3, #0
 80098e6:	b2db      	uxtb	r3, r3
 80098e8:	e015      	b.n	8009916 <HAL_TIM_PWM_Start+0x6a>
 80098ea:	683b      	ldr	r3, [r7, #0]
 80098ec:	2b08      	cmp	r3, #8
 80098ee:	d109      	bne.n	8009904 <HAL_TIM_PWM_Start+0x58>
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80098f6:	b2db      	uxtb	r3, r3
 80098f8:	2b01      	cmp	r3, #1
 80098fa:	bf14      	ite	ne
 80098fc:	2301      	movne	r3, #1
 80098fe:	2300      	moveq	r3, #0
 8009900:	b2db      	uxtb	r3, r3
 8009902:	e008      	b.n	8009916 <HAL_TIM_PWM_Start+0x6a>
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800990a:	b2db      	uxtb	r3, r3
 800990c:	2b01      	cmp	r3, #1
 800990e:	bf14      	ite	ne
 8009910:	2301      	movne	r3, #1
 8009912:	2300      	moveq	r3, #0
 8009914:	b2db      	uxtb	r3, r3
 8009916:	2b00      	cmp	r3, #0
 8009918:	d001      	beq.n	800991e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800991a:	2301      	movs	r3, #1
 800991c:	e068      	b.n	80099f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	2b00      	cmp	r3, #0
 8009922:	d104      	bne.n	800992e <HAL_TIM_PWM_Start+0x82>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	2202      	movs	r2, #2
 8009928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800992c:	e013      	b.n	8009956 <HAL_TIM_PWM_Start+0xaa>
 800992e:	683b      	ldr	r3, [r7, #0]
 8009930:	2b04      	cmp	r3, #4
 8009932:	d104      	bne.n	800993e <HAL_TIM_PWM_Start+0x92>
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	2202      	movs	r2, #2
 8009938:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800993c:	e00b      	b.n	8009956 <HAL_TIM_PWM_Start+0xaa>
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b08      	cmp	r3, #8
 8009942:	d104      	bne.n	800994e <HAL_TIM_PWM_Start+0xa2>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800994c:	e003      	b.n	8009956 <HAL_TIM_PWM_Start+0xaa>
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2202      	movs	r2, #2
 8009952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	2201      	movs	r2, #1
 800995c:	6839      	ldr	r1, [r7, #0]
 800995e:	4618      	mov	r0, r3
 8009960:	f001 f9bc 	bl	800acdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	4a23      	ldr	r2, [pc, #140]	; (80099f8 <HAL_TIM_PWM_Start+0x14c>)
 800996a:	4293      	cmp	r3, r2
 800996c:	d107      	bne.n	800997e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800997c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a1d      	ldr	r2, [pc, #116]	; (80099f8 <HAL_TIM_PWM_Start+0x14c>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d018      	beq.n	80099ba <HAL_TIM_PWM_Start+0x10e>
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009990:	d013      	beq.n	80099ba <HAL_TIM_PWM_Start+0x10e>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a19      	ldr	r2, [pc, #100]	; (80099fc <HAL_TIM_PWM_Start+0x150>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d00e      	beq.n	80099ba <HAL_TIM_PWM_Start+0x10e>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a17      	ldr	r2, [pc, #92]	; (8009a00 <HAL_TIM_PWM_Start+0x154>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d009      	beq.n	80099ba <HAL_TIM_PWM_Start+0x10e>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a16      	ldr	r2, [pc, #88]	; (8009a04 <HAL_TIM_PWM_Start+0x158>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d004      	beq.n	80099ba <HAL_TIM_PWM_Start+0x10e>
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a14      	ldr	r2, [pc, #80]	; (8009a08 <HAL_TIM_PWM_Start+0x15c>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d111      	bne.n	80099de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	689b      	ldr	r3, [r3, #8]
 80099c0:	f003 0307 	and.w	r3, r3, #7
 80099c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099c6:	68fb      	ldr	r3, [r7, #12]
 80099c8:	2b06      	cmp	r3, #6
 80099ca:	d010      	beq.n	80099ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	681a      	ldr	r2, [r3, #0]
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	681b      	ldr	r3, [r3, #0]
 80099d6:	f042 0201 	orr.w	r2, r2, #1
 80099da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099dc:	e007      	b.n	80099ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	f042 0201 	orr.w	r2, r2, #1
 80099ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80099ee:	2300      	movs	r3, #0
}
 80099f0:	4618      	mov	r0, r3
 80099f2:	3710      	adds	r7, #16
 80099f4:	46bd      	mov	sp, r7
 80099f6:	bd80      	pop	{r7, pc}
 80099f8:	40010000 	.word	0x40010000
 80099fc:	40000400 	.word	0x40000400
 8009a00:	40000800 	.word	0x40000800
 8009a04:	40000c00 	.word	0x40000c00
 8009a08:	40014000 	.word	0x40014000

08009a0c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b082      	sub	sp, #8
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	6078      	str	r0, [r7, #4]
 8009a14:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d101      	bne.n	8009a20 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009a1c:	2301      	movs	r3, #1
 8009a1e:	e04c      	b.n	8009aba <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a26:	b2db      	uxtb	r3, r3
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d111      	bne.n	8009a50 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	2200      	movs	r2, #0
 8009a30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	f001 f977 	bl	800ad28 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d102      	bne.n	8009a48 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009a42:	687b      	ldr	r3, [r7, #4]
 8009a44:	4a1f      	ldr	r2, [pc, #124]	; (8009ac4 <HAL_TIM_OnePulse_Init+0xb8>)
 8009a46:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a4c:	6878      	ldr	r0, [r7, #4]
 8009a4e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2202      	movs	r2, #2
 8009a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681a      	ldr	r2, [r3, #0]
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	3304      	adds	r3, #4
 8009a60:	4619      	mov	r1, r3
 8009a62:	4610      	mov	r0, r2
 8009a64:	f000 fe94 	bl	800a790 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681a      	ldr	r2, [r3, #0]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f022 0208 	bic.w	r2, r2, #8
 8009a76:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	6819      	ldr	r1, [r3, #0]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	683a      	ldr	r2, [r7, #0]
 8009a84:	430a      	orrs	r2, r1
 8009a86:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2201      	movs	r2, #1
 8009a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	2201      	movs	r2, #1
 8009a9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	2201      	movs	r2, #1
 8009aa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3708      	adds	r7, #8
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	bd80      	pop	{r7, pc}
 8009ac2:	bf00      	nop
 8009ac4:	08009ac9 	.word	0x08009ac9

08009ac8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009ac8:	b480      	push	{r7}
 8009aca:	b083      	sub	sp, #12
 8009acc:	af00      	add	r7, sp, #0
 8009ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009ad0:	bf00      	nop
 8009ad2:	370c      	adds	r7, #12
 8009ad4:	46bd      	mov	sp, r7
 8009ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ada:	4770      	bx	lr

08009adc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009adc:	b580      	push	{r7, lr}
 8009ade:	b084      	sub	sp, #16
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	6078      	str	r0, [r7, #4]
 8009ae4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009aec:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009af4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009afc:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b04:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b06:	7bfb      	ldrb	r3, [r7, #15]
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	d108      	bne.n	8009b1e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b0c:	7bbb      	ldrb	r3, [r7, #14]
 8009b0e:	2b01      	cmp	r3, #1
 8009b10:	d105      	bne.n	8009b1e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b12:	7b7b      	ldrb	r3, [r7, #13]
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d102      	bne.n	8009b1e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b18:	7b3b      	ldrb	r3, [r7, #12]
 8009b1a:	2b01      	cmp	r3, #1
 8009b1c:	d001      	beq.n	8009b22 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009b1e:	2301      	movs	r3, #1
 8009b20:	e03b      	b.n	8009b9a <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	2202      	movs	r2, #2
 8009b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	2202      	movs	r2, #2
 8009b2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	2202      	movs	r2, #2
 8009b36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	2202      	movs	r2, #2
 8009b3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	68da      	ldr	r2, [r3, #12]
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	f042 0202 	orr.w	r2, r2, #2
 8009b50:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	68da      	ldr	r2, [r3, #12]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	f042 0204 	orr.w	r2, r2, #4
 8009b60:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2201      	movs	r2, #1
 8009b68:	2100      	movs	r1, #0
 8009b6a:	4618      	mov	r0, r3
 8009b6c:	f001 f8b6 	bl	800acdc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2201      	movs	r2, #1
 8009b76:	2104      	movs	r1, #4
 8009b78:	4618      	mov	r0, r3
 8009b7a:	f001 f8af 	bl	800acdc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	4a08      	ldr	r2, [pc, #32]	; (8009ba4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d107      	bne.n	8009b98 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009b96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009b98:	2300      	movs	r3, #0
}
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	3710      	adds	r7, #16
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	bf00      	nop
 8009ba4:	40010000 	.word	0x40010000

08009ba8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b086      	sub	sp, #24
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d101      	bne.n	8009bbc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009bb8:	2301      	movs	r3, #1
 8009bba:	e0a2      	b.n	8009d02 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bc2:	b2db      	uxtb	r3, r3
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d111      	bne.n	8009bec <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	2200      	movs	r2, #0
 8009bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f001 f8a9 	bl	800ad28 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d102      	bne.n	8009be4 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	4a4a      	ldr	r2, [pc, #296]	; (8009d0c <HAL_TIM_Encoder_Init+0x164>)
 8009be2:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2202      	movs	r2, #2
 8009bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	689b      	ldr	r3, [r3, #8]
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	6812      	ldr	r2, [r2, #0]
 8009bfe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c02:	f023 0307 	bic.w	r3, r3, #7
 8009c06:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681a      	ldr	r2, [r3, #0]
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	3304      	adds	r3, #4
 8009c10:	4619      	mov	r1, r3
 8009c12:	4610      	mov	r0, r2
 8009c14:	f000 fdbc 	bl	800a790 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	689b      	ldr	r3, [r3, #8]
 8009c1e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	699b      	ldr	r3, [r3, #24]
 8009c26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c30:	683b      	ldr	r3, [r7, #0]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	697a      	ldr	r2, [r7, #20]
 8009c36:	4313      	orrs	r3, r2
 8009c38:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c3a:	693b      	ldr	r3, [r7, #16]
 8009c3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c40:	f023 0303 	bic.w	r3, r3, #3
 8009c44:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c46:	683b      	ldr	r3, [r7, #0]
 8009c48:	689a      	ldr	r2, [r3, #8]
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	699b      	ldr	r3, [r3, #24]
 8009c4e:	021b      	lsls	r3, r3, #8
 8009c50:	4313      	orrs	r3, r2
 8009c52:	693a      	ldr	r2, [r7, #16]
 8009c54:	4313      	orrs	r3, r2
 8009c56:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c58:	693b      	ldr	r3, [r7, #16]
 8009c5a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009c5e:	f023 030c 	bic.w	r3, r3, #12
 8009c62:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c6e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68da      	ldr	r2, [r3, #12]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	69db      	ldr	r3, [r3, #28]
 8009c78:	021b      	lsls	r3, r3, #8
 8009c7a:	4313      	orrs	r3, r2
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	4313      	orrs	r3, r2
 8009c80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	011a      	lsls	r2, r3, #4
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	6a1b      	ldr	r3, [r3, #32]
 8009c8c:	031b      	lsls	r3, r3, #12
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	693a      	ldr	r2, [r7, #16]
 8009c92:	4313      	orrs	r3, r2
 8009c94:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009c96:	68fb      	ldr	r3, [r7, #12]
 8009c98:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009c9c:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009ca4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	685a      	ldr	r2, [r3, #4]
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	695b      	ldr	r3, [r3, #20]
 8009cae:	011b      	lsls	r3, r3, #4
 8009cb0:	4313      	orrs	r3, r2
 8009cb2:	68fa      	ldr	r2, [r7, #12]
 8009cb4:	4313      	orrs	r3, r2
 8009cb6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	681b      	ldr	r3, [r3, #0]
 8009cbc:	697a      	ldr	r2, [r7, #20]
 8009cbe:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	693a      	ldr	r2, [r7, #16]
 8009cc6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	68fa      	ldr	r2, [r7, #12]
 8009cce:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	2201      	movs	r2, #1
 8009cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	2201      	movs	r2, #1
 8009ce4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	2201      	movs	r2, #1
 8009cec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d00:	2300      	movs	r3, #0
}
 8009d02:	4618      	mov	r0, r3
 8009d04:	3718      	adds	r7, #24
 8009d06:	46bd      	mov	sp, r7
 8009d08:	bd80      	pop	{r7, pc}
 8009d0a:	bf00      	nop
 8009d0c:	08004a19 	.word	0x08004a19

08009d10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d10:	b580      	push	{r7, lr}
 8009d12:	b084      	sub	sp, #16
 8009d14:	af00      	add	r7, sp, #0
 8009d16:	6078      	str	r0, [r7, #4]
 8009d18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d3a:	683b      	ldr	r3, [r7, #0]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d110      	bne.n	8009d62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d40:	7bfb      	ldrb	r3, [r7, #15]
 8009d42:	2b01      	cmp	r3, #1
 8009d44:	d102      	bne.n	8009d4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d46:	7b7b      	ldrb	r3, [r7, #13]
 8009d48:	2b01      	cmp	r3, #1
 8009d4a:	d001      	beq.n	8009d50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e069      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2202      	movs	r2, #2
 8009d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	2202      	movs	r2, #2
 8009d5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d60:	e031      	b.n	8009dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d62:	683b      	ldr	r3, [r7, #0]
 8009d64:	2b04      	cmp	r3, #4
 8009d66:	d110      	bne.n	8009d8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d68:	7bbb      	ldrb	r3, [r7, #14]
 8009d6a:	2b01      	cmp	r3, #1
 8009d6c:	d102      	bne.n	8009d74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d6e:	7b3b      	ldrb	r3, [r7, #12]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d001      	beq.n	8009d78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e055      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2202      	movs	r2, #2
 8009d84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009d88:	e01d      	b.n	8009dc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b01      	cmp	r3, #1
 8009d8e:	d108      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d90:	7bbb      	ldrb	r3, [r7, #14]
 8009d92:	2b01      	cmp	r3, #1
 8009d94:	d105      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d96:	7b7b      	ldrb	r3, [r7, #13]
 8009d98:	2b01      	cmp	r3, #1
 8009d9a:	d102      	bne.n	8009da2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d9c:	7b3b      	ldrb	r3, [r7, #12]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d001      	beq.n	8009da6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	e03e      	b.n	8009e24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	2202      	movs	r2, #2
 8009daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2202      	movs	r2, #2
 8009dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2202      	movs	r2, #2
 8009dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009dc6:	683b      	ldr	r3, [r7, #0]
 8009dc8:	2b00      	cmp	r3, #0
 8009dca:	d003      	beq.n	8009dd4 <HAL_TIM_Encoder_Start+0xc4>
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	2b04      	cmp	r3, #4
 8009dd0:	d008      	beq.n	8009de4 <HAL_TIM_Encoder_Start+0xd4>
 8009dd2:	e00f      	b.n	8009df4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	2201      	movs	r2, #1
 8009dda:	2100      	movs	r1, #0
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 ff7d 	bl	800acdc <TIM_CCxChannelCmd>
      break;
 8009de2:	e016      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	2201      	movs	r2, #1
 8009dea:	2104      	movs	r1, #4
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 ff75 	bl	800acdc <TIM_CCxChannelCmd>
      break;
 8009df2:	e00e      	b.n	8009e12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 ff6d 	bl	800acdc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	2201      	movs	r2, #1
 8009e08:	2104      	movs	r1, #4
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	f000 ff66 	bl	800acdc <TIM_CCxChannelCmd>
      break;
 8009e10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	681a      	ldr	r2, [r3, #0]
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	f042 0201 	orr.w	r2, r2, #1
 8009e20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e22:	2300      	movs	r3, #0
}
 8009e24:	4618      	mov	r0, r3
 8009e26:	3710      	adds	r7, #16
 8009e28:	46bd      	mov	sp, r7
 8009e2a:	bd80      	pop	{r7, pc}

08009e2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b082      	sub	sp, #8
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	691b      	ldr	r3, [r3, #16]
 8009e3a:	f003 0302 	and.w	r3, r3, #2
 8009e3e:	2b02      	cmp	r3, #2
 8009e40:	d128      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	68db      	ldr	r3, [r3, #12]
 8009e48:	f003 0302 	and.w	r3, r3, #2
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d121      	bne.n	8009e94 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	f06f 0202 	mvn.w	r2, #2
 8009e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	2201      	movs	r2, #1
 8009e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	f003 0303 	and.w	r3, r3, #3
 8009e6a:	2b00      	cmp	r3, #0
 8009e6c:	d005      	beq.n	8009e7a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e74:	6878      	ldr	r0, [r7, #4]
 8009e76:	4798      	blx	r3
 8009e78:	e009      	b.n	8009e8e <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009e80:	6878      	ldr	r0, [r7, #4]
 8009e82:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2200      	movs	r2, #0
 8009e92:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	681b      	ldr	r3, [r3, #0]
 8009e98:	691b      	ldr	r3, [r3, #16]
 8009e9a:	f003 0304 	and.w	r3, r3, #4
 8009e9e:	2b04      	cmp	r3, #4
 8009ea0:	d128      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	f003 0304 	and.w	r3, r3, #4
 8009eac:	2b04      	cmp	r3, #4
 8009eae:	d121      	bne.n	8009ef4 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f06f 0204 	mvn.w	r2, #4
 8009eb8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	2202      	movs	r2, #2
 8009ebe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	699b      	ldr	r3, [r3, #24]
 8009ec6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eca:	2b00      	cmp	r3, #0
 8009ecc:	d005      	beq.n	8009eda <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	4798      	blx	r3
 8009ed8:	e009      	b.n	8009eee <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eea:	6878      	ldr	r0, [r7, #4]
 8009eec:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2200      	movs	r2, #0
 8009ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	691b      	ldr	r3, [r3, #16]
 8009efa:	f003 0308 	and.w	r3, r3, #8
 8009efe:	2b08      	cmp	r3, #8
 8009f00:	d128      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0308 	and.w	r3, r3, #8
 8009f0c:	2b08      	cmp	r3, #8
 8009f0e:	d121      	bne.n	8009f54 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	f06f 0208 	mvn.w	r2, #8
 8009f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2204      	movs	r2, #4
 8009f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	69db      	ldr	r3, [r3, #28]
 8009f26:	f003 0303 	and.w	r3, r3, #3
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d005      	beq.n	8009f3a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	4798      	blx	r3
 8009f38:	e009      	b.n	8009f4e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f4a:	6878      	ldr	r0, [r7, #4]
 8009f4c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	691b      	ldr	r3, [r3, #16]
 8009f5a:	f003 0310 	and.w	r3, r3, #16
 8009f5e:	2b10      	cmp	r3, #16
 8009f60:	d128      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	f003 0310 	and.w	r3, r3, #16
 8009f6c:	2b10      	cmp	r3, #16
 8009f6e:	d121      	bne.n	8009fb4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	f06f 0210 	mvn.w	r2, #16
 8009f78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2208      	movs	r2, #8
 8009f7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	69db      	ldr	r3, [r3, #28]
 8009f86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	d005      	beq.n	8009f9a <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f94:	6878      	ldr	r0, [r7, #4]
 8009f96:	4798      	blx	r3
 8009f98:	e009      	b.n	8009fae <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fa0:	6878      	ldr	r0, [r7, #4]
 8009fa2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009faa:	6878      	ldr	r0, [r7, #4]
 8009fac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	691b      	ldr	r3, [r3, #16]
 8009fba:	f003 0301 	and.w	r3, r3, #1
 8009fbe:	2b01      	cmp	r3, #1
 8009fc0:	d110      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	68db      	ldr	r3, [r3, #12]
 8009fc8:	f003 0301 	and.w	r3, r3, #1
 8009fcc:	2b01      	cmp	r3, #1
 8009fce:	d109      	bne.n	8009fe4 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f06f 0201 	mvn.w	r2, #1
 8009fd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009fe0:	6878      	ldr	r0, [r7, #4]
 8009fe2:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	691b      	ldr	r3, [r3, #16]
 8009fea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fee:	2b80      	cmp	r3, #128	; 0x80
 8009ff0:	d110      	bne.n	800a014 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	68db      	ldr	r3, [r3, #12]
 8009ff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d109      	bne.n	800a014 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a008:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a010:	6878      	ldr	r0, [r7, #4]
 800a012:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	691b      	ldr	r3, [r3, #16]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b40      	cmp	r3, #64	; 0x40
 800a020:	d110      	bne.n	800a044 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a02c:	2b40      	cmp	r3, #64	; 0x40
 800a02e:	d109      	bne.n	800a044 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a038:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a040:	6878      	ldr	r0, [r7, #4]
 800a042:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	691b      	ldr	r3, [r3, #16]
 800a04a:	f003 0320 	and.w	r3, r3, #32
 800a04e:	2b20      	cmp	r3, #32
 800a050:	d110      	bne.n	800a074 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a052:	687b      	ldr	r3, [r7, #4]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	68db      	ldr	r3, [r3, #12]
 800a058:	f003 0320 	and.w	r3, r3, #32
 800a05c:	2b20      	cmp	r3, #32
 800a05e:	d109      	bne.n	800a074 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	f06f 0220 	mvn.w	r2, #32
 800a068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a074:	bf00      	nop
 800a076:	3708      	adds	r7, #8
 800a078:	46bd      	mov	sp, r7
 800a07a:	bd80      	pop	{r7, pc}

0800a07c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b086      	sub	sp, #24
 800a080:	af00      	add	r7, sp, #0
 800a082:	60f8      	str	r0, [r7, #12]
 800a084:	60b9      	str	r1, [r7, #8]
 800a086:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a088:	2300      	movs	r3, #0
 800a08a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a092:	2b01      	cmp	r3, #1
 800a094:	d101      	bne.n	800a09a <HAL_TIM_OC_ConfigChannel+0x1e>
 800a096:	2302      	movs	r3, #2
 800a098:	e048      	b.n	800a12c <HAL_TIM_OC_ConfigChannel+0xb0>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2b0c      	cmp	r3, #12
 800a0a6:	d839      	bhi.n	800a11c <HAL_TIM_OC_ConfigChannel+0xa0>
 800a0a8:	a201      	add	r2, pc, #4	; (adr r2, 800a0b0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a0aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ae:	bf00      	nop
 800a0b0:	0800a0e5 	.word	0x0800a0e5
 800a0b4:	0800a11d 	.word	0x0800a11d
 800a0b8:	0800a11d 	.word	0x0800a11d
 800a0bc:	0800a11d 	.word	0x0800a11d
 800a0c0:	0800a0f3 	.word	0x0800a0f3
 800a0c4:	0800a11d 	.word	0x0800a11d
 800a0c8:	0800a11d 	.word	0x0800a11d
 800a0cc:	0800a11d 	.word	0x0800a11d
 800a0d0:	0800a101 	.word	0x0800a101
 800a0d4:	0800a11d 	.word	0x0800a11d
 800a0d8:	0800a11d 	.word	0x0800a11d
 800a0dc:	0800a11d 	.word	0x0800a11d
 800a0e0:	0800a10f 	.word	0x0800a10f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	681b      	ldr	r3, [r3, #0]
 800a0e8:	68b9      	ldr	r1, [r7, #8]
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	f000 fbd0 	bl	800a890 <TIM_OC1_SetConfig>
      break;
 800a0f0:	e017      	b.n	800a122 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	68b9      	ldr	r1, [r7, #8]
 800a0f8:	4618      	mov	r0, r3
 800a0fa:	f000 fc2f 	bl	800a95c <TIM_OC2_SetConfig>
      break;
 800a0fe:	e010      	b.n	800a122 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	68b9      	ldr	r1, [r7, #8]
 800a106:	4618      	mov	r0, r3
 800a108:	f000 fc94 	bl	800aa34 <TIM_OC3_SetConfig>
      break;
 800a10c:	e009      	b.n	800a122 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	68b9      	ldr	r1, [r7, #8]
 800a114:	4618      	mov	r0, r3
 800a116:	f000 fcf7 	bl	800ab08 <TIM_OC4_SetConfig>
      break;
 800a11a:	e002      	b.n	800a122 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a11c:	2301      	movs	r3, #1
 800a11e:	75fb      	strb	r3, [r7, #23]
      break;
 800a120:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	2200      	movs	r2, #0
 800a126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3718      	adds	r7, #24
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}

0800a134 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a134:	b580      	push	{r7, lr}
 800a136:	b086      	sub	sp, #24
 800a138:	af00      	add	r7, sp, #0
 800a13a:	60f8      	str	r0, [r7, #12]
 800a13c:	60b9      	str	r1, [r7, #8]
 800a13e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a140:	2300      	movs	r3, #0
 800a142:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a14a:	2b01      	cmp	r3, #1
 800a14c:	d101      	bne.n	800a152 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a14e:	2302      	movs	r3, #2
 800a150:	e0ae      	b.n	800a2b0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	2201      	movs	r2, #1
 800a156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b0c      	cmp	r3, #12
 800a15e:	f200 809f 	bhi.w	800a2a0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a162:	a201      	add	r2, pc, #4	; (adr r2, 800a168 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a168:	0800a19d 	.word	0x0800a19d
 800a16c:	0800a2a1 	.word	0x0800a2a1
 800a170:	0800a2a1 	.word	0x0800a2a1
 800a174:	0800a2a1 	.word	0x0800a2a1
 800a178:	0800a1dd 	.word	0x0800a1dd
 800a17c:	0800a2a1 	.word	0x0800a2a1
 800a180:	0800a2a1 	.word	0x0800a2a1
 800a184:	0800a2a1 	.word	0x0800a2a1
 800a188:	0800a21f 	.word	0x0800a21f
 800a18c:	0800a2a1 	.word	0x0800a2a1
 800a190:	0800a2a1 	.word	0x0800a2a1
 800a194:	0800a2a1 	.word	0x0800a2a1
 800a198:	0800a25f 	.word	0x0800a25f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	68b9      	ldr	r1, [r7, #8]
 800a1a2:	4618      	mov	r0, r3
 800a1a4:	f000 fb74 	bl	800a890 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	699a      	ldr	r2, [r3, #24]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f042 0208 	orr.w	r2, r2, #8
 800a1b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	699a      	ldr	r2, [r3, #24]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f022 0204 	bic.w	r2, r2, #4
 800a1c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	6999      	ldr	r1, [r3, #24]
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	691a      	ldr	r2, [r3, #16]
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	430a      	orrs	r2, r1
 800a1d8:	619a      	str	r2, [r3, #24]
      break;
 800a1da:	e064      	b.n	800a2a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	68b9      	ldr	r1, [r7, #8]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 fbba 	bl	800a95c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	699a      	ldr	r2, [r3, #24]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a1f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	681b      	ldr	r3, [r3, #0]
 800a1fc:	699a      	ldr	r2, [r3, #24]
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a206:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	6999      	ldr	r1, [r3, #24]
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	691b      	ldr	r3, [r3, #16]
 800a212:	021a      	lsls	r2, r3, #8
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	430a      	orrs	r2, r1
 800a21a:	619a      	str	r2, [r3, #24]
      break;
 800a21c:	e043      	b.n	800a2a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	68b9      	ldr	r1, [r7, #8]
 800a224:	4618      	mov	r0, r3
 800a226:	f000 fc05 	bl	800aa34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	69da      	ldr	r2, [r3, #28]
 800a230:	68fb      	ldr	r3, [r7, #12]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	f042 0208 	orr.w	r2, r2, #8
 800a238:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	69da      	ldr	r2, [r3, #28]
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	f022 0204 	bic.w	r2, r2, #4
 800a248:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69d9      	ldr	r1, [r3, #28]
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	691a      	ldr	r2, [r3, #16]
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	430a      	orrs	r2, r1
 800a25a:	61da      	str	r2, [r3, #28]
      break;
 800a25c:	e023      	b.n	800a2a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	681b      	ldr	r3, [r3, #0]
 800a262:	68b9      	ldr	r1, [r7, #8]
 800a264:	4618      	mov	r0, r3
 800a266:	f000 fc4f 	bl	800ab08 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69da      	ldr	r2, [r3, #28]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a278:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	69da      	ldr	r2, [r3, #28]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a288:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69d9      	ldr	r1, [r3, #28]
 800a290:	68bb      	ldr	r3, [r7, #8]
 800a292:	691b      	ldr	r3, [r3, #16]
 800a294:	021a      	lsls	r2, r3, #8
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	430a      	orrs	r2, r1
 800a29c:	61da      	str	r2, [r3, #28]
      break;
 800a29e:	e002      	b.n	800a2a6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2a4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2a6:	68fb      	ldr	r3, [r7, #12]
 800a2a8:	2200      	movs	r2, #0
 800a2aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2ae:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2b0:	4618      	mov	r0, r3
 800a2b2:	3718      	adds	r7, #24
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b084      	sub	sp, #16
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
 800a2c0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2c2:	2300      	movs	r3, #0
 800a2c4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2cc:	2b01      	cmp	r3, #1
 800a2ce:	d101      	bne.n	800a2d4 <HAL_TIM_ConfigClockSource+0x1c>
 800a2d0:	2302      	movs	r3, #2
 800a2d2:	e0b4      	b.n	800a43e <HAL_TIM_ConfigClockSource+0x186>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	2201      	movs	r2, #1
 800a2d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	2202      	movs	r2, #2
 800a2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	689b      	ldr	r3, [r3, #8]
 800a2ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a2f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2fa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	68ba      	ldr	r2, [r7, #8]
 800a302:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a30c:	d03e      	beq.n	800a38c <HAL_TIM_ConfigClockSource+0xd4>
 800a30e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a312:	f200 8087 	bhi.w	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a316:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a31a:	f000 8086 	beq.w	800a42a <HAL_TIM_ConfigClockSource+0x172>
 800a31e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a322:	d87f      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a324:	2b70      	cmp	r3, #112	; 0x70
 800a326:	d01a      	beq.n	800a35e <HAL_TIM_ConfigClockSource+0xa6>
 800a328:	2b70      	cmp	r3, #112	; 0x70
 800a32a:	d87b      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a32c:	2b60      	cmp	r3, #96	; 0x60
 800a32e:	d050      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0x11a>
 800a330:	2b60      	cmp	r3, #96	; 0x60
 800a332:	d877      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a334:	2b50      	cmp	r3, #80	; 0x50
 800a336:	d03c      	beq.n	800a3b2 <HAL_TIM_ConfigClockSource+0xfa>
 800a338:	2b50      	cmp	r3, #80	; 0x50
 800a33a:	d873      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a33c:	2b40      	cmp	r3, #64	; 0x40
 800a33e:	d058      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x13a>
 800a340:	2b40      	cmp	r3, #64	; 0x40
 800a342:	d86f      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a344:	2b30      	cmp	r3, #48	; 0x30
 800a346:	d064      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x15a>
 800a348:	2b30      	cmp	r3, #48	; 0x30
 800a34a:	d86b      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a34c:	2b20      	cmp	r3, #32
 800a34e:	d060      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x15a>
 800a350:	2b20      	cmp	r3, #32
 800a352:	d867      	bhi.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d05c      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x15a>
 800a358:	2b10      	cmp	r3, #16
 800a35a:	d05a      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x15a>
 800a35c:	e062      	b.n	800a424 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	6818      	ldr	r0, [r3, #0]
 800a362:	683b      	ldr	r3, [r7, #0]
 800a364:	6899      	ldr	r1, [r3, #8]
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	68db      	ldr	r3, [r3, #12]
 800a36e:	f000 fc95 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a37a:	68bb      	ldr	r3, [r7, #8]
 800a37c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a380:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	681b      	ldr	r3, [r3, #0]
 800a386:	68ba      	ldr	r2, [r7, #8]
 800a388:	609a      	str	r2, [r3, #8]
      break;
 800a38a:	e04f      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	6818      	ldr	r0, [r3, #0]
 800a390:	683b      	ldr	r3, [r7, #0]
 800a392:	6899      	ldr	r1, [r3, #8]
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685a      	ldr	r2, [r3, #4]
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	f000 fc7e 	bl	800ac9c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	681b      	ldr	r3, [r3, #0]
 800a3a4:	689a      	ldr	r2, [r3, #8]
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3ae:	609a      	str	r2, [r3, #8]
      break;
 800a3b0:	e03c      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	6818      	ldr	r0, [r3, #0]
 800a3b6:	683b      	ldr	r3, [r7, #0]
 800a3b8:	6859      	ldr	r1, [r3, #4]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	68db      	ldr	r3, [r3, #12]
 800a3be:	461a      	mov	r2, r3
 800a3c0:	f000 fbf2 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	2150      	movs	r1, #80	; 0x50
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f000 fc4b 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a3d0:	e02c      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6818      	ldr	r0, [r3, #0]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6859      	ldr	r1, [r3, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f000 fc11 	bl	800ac06 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2160      	movs	r1, #96	; 0x60
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fc3b 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a3f0:	e01c      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6859      	ldr	r1, [r3, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	461a      	mov	r2, r3
 800a400:	f000 fbd2 	bl	800aba8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2140      	movs	r1, #64	; 0x40
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fc2b 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a410:	e00c      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681a      	ldr	r2, [r3, #0]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4619      	mov	r1, r3
 800a41c:	4610      	mov	r0, r2
 800a41e:	f000 fc22 	bl	800ac66 <TIM_ITRx_SetConfig>
      break;
 800a422:	e003      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a424:	2301      	movs	r3, #1
 800a426:	73fb      	strb	r3, [r7, #15]
      break;
 800a428:	e000      	b.n	800a42c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a42a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	2201      	movs	r2, #1
 800a430:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	2200      	movs	r2, #0
 800a438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a43c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a43e:	4618      	mov	r0, r3
 800a440:	3710      	adds	r7, #16
 800a442:	46bd      	mov	sp, r7
 800a444:	bd80      	pop	{r7, pc}

0800a446 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a446:	b480      	push	{r7}
 800a448:	b083      	sub	sp, #12
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a44e:	bf00      	nop
 800a450:	370c      	adds	r7, #12
 800a452:	46bd      	mov	sp, r7
 800a454:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a458:	4770      	bx	lr

0800a45a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a45a:	b480      	push	{r7}
 800a45c:	b083      	sub	sp, #12
 800a45e:	af00      	add	r7, sp, #0
 800a460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a462:	bf00      	nop
 800a464:	370c      	adds	r7, #12
 800a466:	46bd      	mov	sp, r7
 800a468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46c:	4770      	bx	lr

0800a46e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a46e:	b480      	push	{r7}
 800a470:	b083      	sub	sp, #12
 800a472:	af00      	add	r7, sp, #0
 800a474:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a476:	bf00      	nop
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a48a:	bf00      	nop
 800a48c:	370c      	adds	r7, #12
 800a48e:	46bd      	mov	sp, r7
 800a490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a494:	4770      	bx	lr

0800a496 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a496:	b480      	push	{r7}
 800a498:	b083      	sub	sp, #12
 800a49a:	af00      	add	r7, sp, #0
 800a49c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a49e:	bf00      	nop
 800a4a0:	370c      	adds	r7, #12
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a8:	4770      	bx	lr

0800a4aa <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4aa:	b480      	push	{r7}
 800a4ac:	b083      	sub	sp, #12
 800a4ae:	af00      	add	r7, sp, #0
 800a4b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a4b2:	bf00      	nop
 800a4b4:	370c      	adds	r7, #12
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4be:	b480      	push	{r7}
 800a4c0:	b083      	sub	sp, #12
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4c6:	bf00      	nop
 800a4c8:	370c      	adds	r7, #12
 800a4ca:	46bd      	mov	sp, r7
 800a4cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d0:	4770      	bx	lr

0800a4d2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4d2:	b480      	push	{r7}
 800a4d4:	b083      	sub	sp, #12
 800a4d6:	af00      	add	r7, sp, #0
 800a4d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a4da:	bf00      	nop
 800a4dc:	370c      	adds	r7, #12
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e4:	4770      	bx	lr

0800a4e6 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a4e6:	b480      	push	{r7}
 800a4e8:	b083      	sub	sp, #12
 800a4ea:	af00      	add	r7, sp, #0
 800a4ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a4ee:	bf00      	nop
 800a4f0:	370c      	adds	r7, #12
 800a4f2:	46bd      	mov	sp, r7
 800a4f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f8:	4770      	bx	lr
	...

0800a4fc <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a4fc:	b480      	push	{r7}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	460b      	mov	r3, r1
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a50a:	2300      	movs	r3, #0
 800a50c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	2b00      	cmp	r3, #0
 800a512:	d101      	bne.n	800a518 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a514:	2301      	movs	r3, #1
 800a516:	e135      	b.n	800a784 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d101      	bne.n	800a526 <HAL_TIM_RegisterCallback+0x2a>
 800a522:	2302      	movs	r3, #2
 800a524:	e12e      	b.n	800a784 <HAL_TIM_RegisterCallback+0x288>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2201      	movs	r2, #1
 800a52a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a534:	b2db      	uxtb	r3, r3
 800a536:	2b01      	cmp	r3, #1
 800a538:	f040 80ba 	bne.w	800a6b0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a53c:	7afb      	ldrb	r3, [r7, #11]
 800a53e:	2b1a      	cmp	r3, #26
 800a540:	f200 80b3 	bhi.w	800a6aa <HAL_TIM_RegisterCallback+0x1ae>
 800a544:	a201      	add	r2, pc, #4	; (adr r2, 800a54c <HAL_TIM_RegisterCallback+0x50>)
 800a546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54a:	bf00      	nop
 800a54c:	0800a5b9 	.word	0x0800a5b9
 800a550:	0800a5c1 	.word	0x0800a5c1
 800a554:	0800a5c9 	.word	0x0800a5c9
 800a558:	0800a5d1 	.word	0x0800a5d1
 800a55c:	0800a5d9 	.word	0x0800a5d9
 800a560:	0800a5e1 	.word	0x0800a5e1
 800a564:	0800a5e9 	.word	0x0800a5e9
 800a568:	0800a5f1 	.word	0x0800a5f1
 800a56c:	0800a5f9 	.word	0x0800a5f9
 800a570:	0800a601 	.word	0x0800a601
 800a574:	0800a609 	.word	0x0800a609
 800a578:	0800a611 	.word	0x0800a611
 800a57c:	0800a619 	.word	0x0800a619
 800a580:	0800a621 	.word	0x0800a621
 800a584:	0800a629 	.word	0x0800a629
 800a588:	0800a633 	.word	0x0800a633
 800a58c:	0800a63d 	.word	0x0800a63d
 800a590:	0800a647 	.word	0x0800a647
 800a594:	0800a651 	.word	0x0800a651
 800a598:	0800a65b 	.word	0x0800a65b
 800a59c:	0800a665 	.word	0x0800a665
 800a5a0:	0800a66f 	.word	0x0800a66f
 800a5a4:	0800a679 	.word	0x0800a679
 800a5a8:	0800a683 	.word	0x0800a683
 800a5ac:	0800a68d 	.word	0x0800a68d
 800a5b0:	0800a697 	.word	0x0800a697
 800a5b4:	0800a6a1 	.word	0x0800a6a1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	687a      	ldr	r2, [r7, #4]
 800a5bc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a5be:	e0dc      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a5c0:	68fb      	ldr	r3, [r7, #12]
 800a5c2:	687a      	ldr	r2, [r7, #4]
 800a5c4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a5c6:	e0d8      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	687a      	ldr	r2, [r7, #4]
 800a5cc:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a5ce:	e0d4      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	687a      	ldr	r2, [r7, #4]
 800a5d4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a5d6:	e0d0      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a5de:	e0cc      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a5e6:	e0c8      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a5ee:	e0c4      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a5f6:	e0c0      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a5fe:	e0bc      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a606:	e0b8      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a60e:	e0b4      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a616:	e0b0      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a61e:	e0ac      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a626:	e0a8      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a630:	e0a3      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	687a      	ldr	r2, [r7, #4]
 800a636:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a63a:	e09e      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	687a      	ldr	r2, [r7, #4]
 800a640:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a644:	e099      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	687a      	ldr	r2, [r7, #4]
 800a64a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a64e:	e094      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a658:	e08f      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	687a      	ldr	r2, [r7, #4]
 800a65e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a662:	e08a      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a66c:	e085      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	687a      	ldr	r2, [r7, #4]
 800a672:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a676:	e080      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a680:	e07b      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	687a      	ldr	r2, [r7, #4]
 800a686:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a68a:	e076      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	687a      	ldr	r2, [r7, #4]
 800a690:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a694:	e071      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	687a      	ldr	r2, [r7, #4]
 800a69a:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a69e:	e06c      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a6a8:	e067      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a6aa:	2301      	movs	r3, #1
 800a6ac:	75fb      	strb	r3, [r7, #23]
        break;
 800a6ae:	e064      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a6b0:	68fb      	ldr	r3, [r7, #12]
 800a6b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6b6:	b2db      	uxtb	r3, r3
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d15c      	bne.n	800a776 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a6bc:	7afb      	ldrb	r3, [r7, #11]
 800a6be:	2b0d      	cmp	r3, #13
 800a6c0:	d856      	bhi.n	800a770 <HAL_TIM_RegisterCallback+0x274>
 800a6c2:	a201      	add	r2, pc, #4	; (adr r2, 800a6c8 <HAL_TIM_RegisterCallback+0x1cc>)
 800a6c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6c8:	0800a701 	.word	0x0800a701
 800a6cc:	0800a709 	.word	0x0800a709
 800a6d0:	0800a711 	.word	0x0800a711
 800a6d4:	0800a719 	.word	0x0800a719
 800a6d8:	0800a721 	.word	0x0800a721
 800a6dc:	0800a729 	.word	0x0800a729
 800a6e0:	0800a731 	.word	0x0800a731
 800a6e4:	0800a739 	.word	0x0800a739
 800a6e8:	0800a741 	.word	0x0800a741
 800a6ec:	0800a749 	.word	0x0800a749
 800a6f0:	0800a751 	.word	0x0800a751
 800a6f4:	0800a759 	.word	0x0800a759
 800a6f8:	0800a761 	.word	0x0800a761
 800a6fc:	0800a769 	.word	0x0800a769
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	687a      	ldr	r2, [r7, #4]
 800a704:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a706:	e038      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	687a      	ldr	r2, [r7, #4]
 800a70c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a70e:	e034      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	687a      	ldr	r2, [r7, #4]
 800a714:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a716:	e030      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	687a      	ldr	r2, [r7, #4]
 800a71c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a71e:	e02c      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a726:	e028      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a72e:	e024      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a736:	e020      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a73e:	e01c      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a746:	e018      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a74e:	e014      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a756:	e010      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a75e:	e00c      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a766:	e008      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a76e:	e004      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a770:	2301      	movs	r3, #1
 800a772:	75fb      	strb	r3, [r7, #23]
        break;
 800a774:	e001      	b.n	800a77a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a776:	2301      	movs	r3, #1
 800a778:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	2200      	movs	r2, #0
 800a77e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a782:	7dfb      	ldrb	r3, [r7, #23]
}
 800a784:	4618      	mov	r0, r3
 800a786:	371c      	adds	r7, #28
 800a788:	46bd      	mov	sp, r7
 800a78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78e:	4770      	bx	lr

0800a790 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a790:	b480      	push	{r7}
 800a792:	b085      	sub	sp, #20
 800a794:	af00      	add	r7, sp, #0
 800a796:	6078      	str	r0, [r7, #4]
 800a798:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a34      	ldr	r2, [pc, #208]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00f      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ae:	d00b      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	4a31      	ldr	r2, [pc, #196]	; (800a878 <TIM_Base_SetConfig+0xe8>)
 800a7b4:	4293      	cmp	r3, r2
 800a7b6:	d007      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	4a30      	ldr	r2, [pc, #192]	; (800a87c <TIM_Base_SetConfig+0xec>)
 800a7bc:	4293      	cmp	r3, r2
 800a7be:	d003      	beq.n	800a7c8 <TIM_Base_SetConfig+0x38>
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a2f      	ldr	r2, [pc, #188]	; (800a880 <TIM_Base_SetConfig+0xf0>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d108      	bne.n	800a7da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	685b      	ldr	r3, [r3, #4]
 800a7d4:	68fa      	ldr	r2, [r7, #12]
 800a7d6:	4313      	orrs	r3, r2
 800a7d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	4a25      	ldr	r2, [pc, #148]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a7de:	4293      	cmp	r3, r2
 800a7e0:	d01b      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7e8:	d017      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	4a22      	ldr	r2, [pc, #136]	; (800a878 <TIM_Base_SetConfig+0xe8>)
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d013      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	4a21      	ldr	r2, [pc, #132]	; (800a87c <TIM_Base_SetConfig+0xec>)
 800a7f6:	4293      	cmp	r3, r2
 800a7f8:	d00f      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a20      	ldr	r2, [pc, #128]	; (800a880 <TIM_Base_SetConfig+0xf0>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d00b      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	4a1f      	ldr	r2, [pc, #124]	; (800a884 <TIM_Base_SetConfig+0xf4>)
 800a806:	4293      	cmp	r3, r2
 800a808:	d007      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a1e      	ldr	r2, [pc, #120]	; (800a888 <TIM_Base_SetConfig+0xf8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d003      	beq.n	800a81a <TIM_Base_SetConfig+0x8a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a1d      	ldr	r2, [pc, #116]	; (800a88c <TIM_Base_SetConfig+0xfc>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d108      	bne.n	800a82c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a820:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	4313      	orrs	r3, r2
 800a82a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a832:	683b      	ldr	r3, [r7, #0]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	4313      	orrs	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	68fa      	ldr	r2, [r7, #12]
 800a83e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	689a      	ldr	r2, [r3, #8]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a848:	683b      	ldr	r3, [r7, #0]
 800a84a:	681a      	ldr	r2, [r3, #0]
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a08      	ldr	r2, [pc, #32]	; (800a874 <TIM_Base_SetConfig+0xe4>)
 800a854:	4293      	cmp	r3, r2
 800a856:	d103      	bne.n	800a860 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a858:	683b      	ldr	r3, [r7, #0]
 800a85a:	691a      	ldr	r2, [r3, #16]
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	2201      	movs	r2, #1
 800a864:	615a      	str	r2, [r3, #20]
}
 800a866:	bf00      	nop
 800a868:	3714      	adds	r7, #20
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	40010000 	.word	0x40010000
 800a878:	40000400 	.word	0x40000400
 800a87c:	40000800 	.word	0x40000800
 800a880:	40000c00 	.word	0x40000c00
 800a884:	40014000 	.word	0x40014000
 800a888:	40014400 	.word	0x40014400
 800a88c:	40014800 	.word	0x40014800

0800a890 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a890:	b480      	push	{r7}
 800a892:	b087      	sub	sp, #28
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
 800a898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a1b      	ldr	r3, [r3, #32]
 800a89e:	f023 0201 	bic.w	r2, r3, #1
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	6a1b      	ldr	r3, [r3, #32]
 800a8aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	685b      	ldr	r3, [r3, #4]
 800a8b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	699b      	ldr	r3, [r3, #24]
 800a8b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	f023 0303 	bic.w	r3, r3, #3
 800a8c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8c8:	683b      	ldr	r3, [r7, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	68fa      	ldr	r2, [r7, #12]
 800a8ce:	4313      	orrs	r3, r2
 800a8d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8d2:	697b      	ldr	r3, [r7, #20]
 800a8d4:	f023 0302 	bic.w	r3, r3, #2
 800a8d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8da:	683b      	ldr	r3, [r7, #0]
 800a8dc:	689b      	ldr	r3, [r3, #8]
 800a8de:	697a      	ldr	r2, [r7, #20]
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	4a1c      	ldr	r2, [pc, #112]	; (800a958 <TIM_OC1_SetConfig+0xc8>)
 800a8e8:	4293      	cmp	r3, r2
 800a8ea:	d10c      	bne.n	800a906 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a8ec:	697b      	ldr	r3, [r7, #20]
 800a8ee:	f023 0308 	bic.w	r3, r3, #8
 800a8f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a8f4:	683b      	ldr	r3, [r7, #0]
 800a8f6:	68db      	ldr	r3, [r3, #12]
 800a8f8:	697a      	ldr	r2, [r7, #20]
 800a8fa:	4313      	orrs	r3, r2
 800a8fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a8fe:	697b      	ldr	r3, [r7, #20]
 800a900:	f023 0304 	bic.w	r3, r3, #4
 800a904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	4a13      	ldr	r2, [pc, #76]	; (800a958 <TIM_OC1_SetConfig+0xc8>)
 800a90a:	4293      	cmp	r3, r2
 800a90c:	d111      	bne.n	800a932 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a90e:	693b      	ldr	r3, [r7, #16]
 800a910:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a914:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a91c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	695b      	ldr	r3, [r3, #20]
 800a922:	693a      	ldr	r2, [r7, #16]
 800a924:	4313      	orrs	r3, r2
 800a926:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a928:	683b      	ldr	r3, [r7, #0]
 800a92a:	699b      	ldr	r3, [r3, #24]
 800a92c:	693a      	ldr	r2, [r7, #16]
 800a92e:	4313      	orrs	r3, r2
 800a930:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	68fa      	ldr	r2, [r7, #12]
 800a93c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685a      	ldr	r2, [r3, #4]
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	697a      	ldr	r2, [r7, #20]
 800a94a:	621a      	str	r2, [r3, #32]
}
 800a94c:	bf00      	nop
 800a94e:	371c      	adds	r7, #28
 800a950:	46bd      	mov	sp, r7
 800a952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a956:	4770      	bx	lr
 800a958:	40010000 	.word	0x40010000

0800a95c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	6078      	str	r0, [r7, #4]
 800a964:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f023 0210 	bic.w	r2, r3, #16
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a1b      	ldr	r3, [r3, #32]
 800a976:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	685b      	ldr	r3, [r3, #4]
 800a97c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	699b      	ldr	r3, [r3, #24]
 800a982:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a98a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a992:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	021b      	lsls	r3, r3, #8
 800a99a:	68fa      	ldr	r2, [r7, #12]
 800a99c:	4313      	orrs	r3, r2
 800a99e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9a0:	697b      	ldr	r3, [r7, #20]
 800a9a2:	f023 0320 	bic.w	r3, r3, #32
 800a9a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9a8:	683b      	ldr	r3, [r7, #0]
 800a9aa:	689b      	ldr	r3, [r3, #8]
 800a9ac:	011b      	lsls	r3, r3, #4
 800a9ae:	697a      	ldr	r2, [r7, #20]
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	4a1e      	ldr	r2, [pc, #120]	; (800aa30 <TIM_OC2_SetConfig+0xd4>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d10d      	bne.n	800a9d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9bc:	697b      	ldr	r3, [r7, #20]
 800a9be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9c4:	683b      	ldr	r3, [r7, #0]
 800a9c6:	68db      	ldr	r3, [r3, #12]
 800a9c8:	011b      	lsls	r3, r3, #4
 800a9ca:	697a      	ldr	r2, [r7, #20]
 800a9cc:	4313      	orrs	r3, r2
 800a9ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9d0:	697b      	ldr	r3, [r7, #20]
 800a9d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	4a15      	ldr	r2, [pc, #84]	; (800aa30 <TIM_OC2_SetConfig+0xd4>)
 800a9dc:	4293      	cmp	r3, r2
 800a9de:	d113      	bne.n	800aa08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a9e0:	693b      	ldr	r3, [r7, #16]
 800a9e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a9e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a9e8:	693b      	ldr	r3, [r7, #16]
 800a9ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a9ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a9f0:	683b      	ldr	r3, [r7, #0]
 800a9f2:	695b      	ldr	r3, [r3, #20]
 800a9f4:	009b      	lsls	r3, r3, #2
 800a9f6:	693a      	ldr	r2, [r7, #16]
 800a9f8:	4313      	orrs	r3, r2
 800a9fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a9fc:	683b      	ldr	r3, [r7, #0]
 800a9fe:	699b      	ldr	r3, [r3, #24]
 800aa00:	009b      	lsls	r3, r3, #2
 800aa02:	693a      	ldr	r2, [r7, #16]
 800aa04:	4313      	orrs	r3, r2
 800aa06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	693a      	ldr	r2, [r7, #16]
 800aa0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	68fa      	ldr	r2, [r7, #12]
 800aa12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa14:	683b      	ldr	r3, [r7, #0]
 800aa16:	685a      	ldr	r2, [r3, #4]
 800aa18:	687b      	ldr	r3, [r7, #4]
 800aa1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	697a      	ldr	r2, [r7, #20]
 800aa20:	621a      	str	r2, [r3, #32]
}
 800aa22:	bf00      	nop
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr
 800aa2e:	bf00      	nop
 800aa30:	40010000 	.word	0x40010000

0800aa34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa34:	b480      	push	{r7}
 800aa36:	b087      	sub	sp, #28
 800aa38:	af00      	add	r7, sp, #0
 800aa3a:	6078      	str	r0, [r7, #4]
 800aa3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	6a1b      	ldr	r3, [r3, #32]
 800aa42:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	6a1b      	ldr	r3, [r3, #32]
 800aa4e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	685b      	ldr	r3, [r3, #4]
 800aa54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	69db      	ldr	r3, [r3, #28]
 800aa5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	f023 0303 	bic.w	r3, r3, #3
 800aa6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	68fa      	ldr	r2, [r7, #12]
 800aa72:	4313      	orrs	r3, r2
 800aa74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa7e:	683b      	ldr	r3, [r7, #0]
 800aa80:	689b      	ldr	r3, [r3, #8]
 800aa82:	021b      	lsls	r3, r3, #8
 800aa84:	697a      	ldr	r2, [r7, #20]
 800aa86:	4313      	orrs	r3, r2
 800aa88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	4a1d      	ldr	r2, [pc, #116]	; (800ab04 <TIM_OC3_SetConfig+0xd0>)
 800aa8e:	4293      	cmp	r3, r2
 800aa90:	d10d      	bne.n	800aaae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aa92:	697b      	ldr	r3, [r7, #20]
 800aa94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aa9a:	683b      	ldr	r3, [r7, #0]
 800aa9c:	68db      	ldr	r3, [r3, #12]
 800aa9e:	021b      	lsls	r3, r3, #8
 800aaa0:	697a      	ldr	r2, [r7, #20]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aaa6:	697b      	ldr	r3, [r7, #20]
 800aaa8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aaac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	4a14      	ldr	r2, [pc, #80]	; (800ab04 <TIM_OC3_SetConfig+0xd0>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d113      	bne.n	800aade <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aabc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aac4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	695b      	ldr	r3, [r3, #20]
 800aaca:	011b      	lsls	r3, r3, #4
 800aacc:	693a      	ldr	r2, [r7, #16]
 800aace:	4313      	orrs	r3, r2
 800aad0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aad2:	683b      	ldr	r3, [r7, #0]
 800aad4:	699b      	ldr	r3, [r3, #24]
 800aad6:	011b      	lsls	r3, r3, #4
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	4313      	orrs	r3, r2
 800aadc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	693a      	ldr	r2, [r7, #16]
 800aae2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	68fa      	ldr	r2, [r7, #12]
 800aae8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685a      	ldr	r2, [r3, #4]
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	697a      	ldr	r2, [r7, #20]
 800aaf6:	621a      	str	r2, [r3, #32]
}
 800aaf8:	bf00      	nop
 800aafa:	371c      	adds	r7, #28
 800aafc:	46bd      	mov	sp, r7
 800aafe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab02:	4770      	bx	lr
 800ab04:	40010000 	.word	0x40010000

0800ab08 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab08:	b480      	push	{r7}
 800ab0a:	b087      	sub	sp, #28
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
 800ab10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	6a1b      	ldr	r3, [r3, #32]
 800ab22:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	69db      	ldr	r3, [r3, #28]
 800ab2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab3e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab40:	683b      	ldr	r3, [r7, #0]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	021b      	lsls	r3, r3, #8
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	4313      	orrs	r3, r2
 800ab4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab52:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab54:	683b      	ldr	r3, [r7, #0]
 800ab56:	689b      	ldr	r3, [r3, #8]
 800ab58:	031b      	lsls	r3, r3, #12
 800ab5a:	693a      	ldr	r2, [r7, #16]
 800ab5c:	4313      	orrs	r3, r2
 800ab5e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	4a10      	ldr	r2, [pc, #64]	; (800aba4 <TIM_OC4_SetConfig+0x9c>)
 800ab64:	4293      	cmp	r3, r2
 800ab66:	d109      	bne.n	800ab7c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab68:	697b      	ldr	r3, [r7, #20]
 800ab6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab70:	683b      	ldr	r3, [r7, #0]
 800ab72:	695b      	ldr	r3, [r3, #20]
 800ab74:	019b      	lsls	r3, r3, #6
 800ab76:	697a      	ldr	r2, [r7, #20]
 800ab78:	4313      	orrs	r3, r2
 800ab7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	697a      	ldr	r2, [r7, #20]
 800ab80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	68fa      	ldr	r2, [r7, #12]
 800ab86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	685a      	ldr	r2, [r3, #4]
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	621a      	str	r2, [r3, #32]
}
 800ab96:	bf00      	nop
 800ab98:	371c      	adds	r7, #28
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba0:	4770      	bx	lr
 800aba2:	bf00      	nop
 800aba4:	40010000 	.word	0x40010000

0800aba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aba8:	b480      	push	{r7}
 800abaa:	b087      	sub	sp, #28
 800abac:	af00      	add	r7, sp, #0
 800abae:	60f8      	str	r0, [r7, #12]
 800abb0:	60b9      	str	r1, [r7, #8]
 800abb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abb4:	68fb      	ldr	r3, [r7, #12]
 800abb6:	6a1b      	ldr	r3, [r3, #32]
 800abb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abba:	68fb      	ldr	r3, [r7, #12]
 800abbc:	6a1b      	ldr	r3, [r3, #32]
 800abbe:	f023 0201 	bic.w	r2, r3, #1
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	699b      	ldr	r3, [r3, #24]
 800abca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abcc:	693b      	ldr	r3, [r7, #16]
 800abce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	011b      	lsls	r3, r3, #4
 800abd8:	693a      	ldr	r2, [r7, #16]
 800abda:	4313      	orrs	r3, r2
 800abdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f023 030a 	bic.w	r3, r3, #10
 800abe4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800abe6:	697a      	ldr	r2, [r7, #20]
 800abe8:	68bb      	ldr	r3, [r7, #8]
 800abea:	4313      	orrs	r3, r2
 800abec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	693a      	ldr	r2, [r7, #16]
 800abf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	697a      	ldr	r2, [r7, #20]
 800abf8:	621a      	str	r2, [r3, #32]
}
 800abfa:	bf00      	nop
 800abfc:	371c      	adds	r7, #28
 800abfe:	46bd      	mov	sp, r7
 800ac00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac04:	4770      	bx	lr

0800ac06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac06:	b480      	push	{r7}
 800ac08:	b087      	sub	sp, #28
 800ac0a:	af00      	add	r7, sp, #0
 800ac0c:	60f8      	str	r0, [r7, #12]
 800ac0e:	60b9      	str	r1, [r7, #8]
 800ac10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0210 	bic.w	r2, r3, #16
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	6a1b      	ldr	r3, [r3, #32]
 800ac28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	031b      	lsls	r3, r3, #12
 800ac36:	697a      	ldr	r2, [r7, #20]
 800ac38:	4313      	orrs	r3, r2
 800ac3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac3c:	693b      	ldr	r3, [r7, #16]
 800ac3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac44:	68bb      	ldr	r3, [r7, #8]
 800ac46:	011b      	lsls	r3, r3, #4
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	4313      	orrs	r3, r2
 800ac4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	697a      	ldr	r2, [r7, #20]
 800ac52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	693a      	ldr	r2, [r7, #16]
 800ac58:	621a      	str	r2, [r3, #32]
}
 800ac5a:	bf00      	nop
 800ac5c:	371c      	adds	r7, #28
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr

0800ac66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac66:	b480      	push	{r7}
 800ac68:	b085      	sub	sp, #20
 800ac6a:	af00      	add	r7, sp, #0
 800ac6c:	6078      	str	r0, [r7, #4]
 800ac6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	689b      	ldr	r3, [r3, #8]
 800ac74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac7e:	683a      	ldr	r2, [r7, #0]
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	4313      	orrs	r3, r2
 800ac84:	f043 0307 	orr.w	r3, r3, #7
 800ac88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	609a      	str	r2, [r3, #8]
}
 800ac90:	bf00      	nop
 800ac92:	3714      	adds	r7, #20
 800ac94:	46bd      	mov	sp, r7
 800ac96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac9a:	4770      	bx	lr

0800ac9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800ac9c:	b480      	push	{r7}
 800ac9e:	b087      	sub	sp, #28
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	60f8      	str	r0, [r7, #12]
 800aca4:	60b9      	str	r1, [r7, #8]
 800aca6:	607a      	str	r2, [r7, #4]
 800aca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	689b      	ldr	r3, [r3, #8]
 800acae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acb0:	697b      	ldr	r3, [r7, #20]
 800acb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	021a      	lsls	r2, r3, #8
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	431a      	orrs	r2, r3
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	4313      	orrs	r3, r2
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	4313      	orrs	r3, r2
 800acc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	697a      	ldr	r2, [r7, #20]
 800acce:	609a      	str	r2, [r3, #8]
}
 800acd0:	bf00      	nop
 800acd2:	371c      	adds	r7, #28
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr

0800acdc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acdc:	b480      	push	{r7}
 800acde:	b087      	sub	sp, #28
 800ace0:	af00      	add	r7, sp, #0
 800ace2:	60f8      	str	r0, [r7, #12]
 800ace4:	60b9      	str	r1, [r7, #8]
 800ace6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f003 031f 	and.w	r3, r3, #31
 800acee:	2201      	movs	r2, #1
 800acf0:	fa02 f303 	lsl.w	r3, r2, r3
 800acf4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800acf6:	68fb      	ldr	r3, [r7, #12]
 800acf8:	6a1a      	ldr	r2, [r3, #32]
 800acfa:	697b      	ldr	r3, [r7, #20]
 800acfc:	43db      	mvns	r3, r3
 800acfe:	401a      	ands	r2, r3
 800ad00:	68fb      	ldr	r3, [r7, #12]
 800ad02:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	6a1a      	ldr	r2, [r3, #32]
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f003 031f 	and.w	r3, r3, #31
 800ad0e:	6879      	ldr	r1, [r7, #4]
 800ad10:	fa01 f303 	lsl.w	r3, r1, r3
 800ad14:	431a      	orrs	r2, r3
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	621a      	str	r2, [r3, #32]
}
 800ad1a:	bf00      	nop
 800ad1c:	371c      	adds	r7, #28
 800ad1e:	46bd      	mov	sp, r7
 800ad20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad24:	4770      	bx	lr
	...

0800ad28 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad28:	b480      	push	{r7}
 800ad2a:	b083      	sub	sp, #12
 800ad2c:	af00      	add	r7, sp, #0
 800ad2e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad30:	687b      	ldr	r3, [r7, #4]
 800ad32:	4a1c      	ldr	r2, [pc, #112]	; (800ada4 <TIM_ResetCallback+0x7c>)
 800ad34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	4a1b      	ldr	r2, [pc, #108]	; (800ada8 <TIM_ResetCallback+0x80>)
 800ad3c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	4a1a      	ldr	r2, [pc, #104]	; (800adac <TIM_ResetCallback+0x84>)
 800ad44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	4a19      	ldr	r2, [pc, #100]	; (800adb0 <TIM_ResetCallback+0x88>)
 800ad4c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a18      	ldr	r2, [pc, #96]	; (800adb4 <TIM_ResetCallback+0x8c>)
 800ad54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a17      	ldr	r2, [pc, #92]	; (800adb8 <TIM_ResetCallback+0x90>)
 800ad5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a16      	ldr	r2, [pc, #88]	; (800adbc <TIM_ResetCallback+0x94>)
 800ad64:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a15      	ldr	r2, [pc, #84]	; (800adc0 <TIM_ResetCallback+0x98>)
 800ad6c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a14      	ldr	r2, [pc, #80]	; (800adc4 <TIM_ResetCallback+0x9c>)
 800ad74:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a13      	ldr	r2, [pc, #76]	; (800adc8 <TIM_ResetCallback+0xa0>)
 800ad7c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a12      	ldr	r2, [pc, #72]	; (800adcc <TIM_ResetCallback+0xa4>)
 800ad84:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a11      	ldr	r2, [pc, #68]	; (800add0 <TIM_ResetCallback+0xa8>)
 800ad8c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a10      	ldr	r2, [pc, #64]	; (800add4 <TIM_ResetCallback+0xac>)
 800ad94:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800ad98:	bf00      	nop
 800ad9a:	370c      	adds	r7, #12
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	08003d09 	.word	0x08003d09
 800ada8:	0800a447 	.word	0x0800a447
 800adac:	0800a4bf 	.word	0x0800a4bf
 800adb0:	0800a4d3 	.word	0x0800a4d3
 800adb4:	0800a46f 	.word	0x0800a46f
 800adb8:	0800a483 	.word	0x0800a483
 800adbc:	0800a45b 	.word	0x0800a45b
 800adc0:	0800a497 	.word	0x0800a497
 800adc4:	0800a4ab 	.word	0x0800a4ab
 800adc8:	0800a4e7 	.word	0x0800a4e7
 800adcc:	0800af59 	.word	0x0800af59
 800add0:	0800af6d 	.word	0x0800af6d
 800add4:	0800af81 	.word	0x0800af81

0800add8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800add8:	b480      	push	{r7}
 800adda:	b085      	sub	sp, #20
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
 800ade0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ade8:	2b01      	cmp	r3, #1
 800adea:	d101      	bne.n	800adf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800adec:	2302      	movs	r3, #2
 800adee:	e050      	b.n	800ae92 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2201      	movs	r2, #1
 800adf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2202      	movs	r2, #2
 800adfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae00:	687b      	ldr	r3, [r7, #4]
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	681b      	ldr	r3, [r3, #0]
 800ae0c:	689b      	ldr	r3, [r3, #8]
 800ae0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	68fa      	ldr	r2, [r7, #12]
 800ae1e:	4313      	orrs	r3, r2
 800ae20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	68fa      	ldr	r2, [r7, #12]
 800ae28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a1c      	ldr	r2, [pc, #112]	; (800aea0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d018      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae3c:	d013      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a18      	ldr	r2, [pc, #96]	; (800aea4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d00e      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a16      	ldr	r2, [pc, #88]	; (800aea8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d009      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a15      	ldr	r2, [pc, #84]	; (800aeac <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d004      	beq.n	800ae66 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a13      	ldr	r2, [pc, #76]	; (800aeb0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d10c      	bne.n	800ae80 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae66:	68bb      	ldr	r3, [r7, #8]
 800ae68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae6c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae6e:	683b      	ldr	r3, [r7, #0]
 800ae70:	685b      	ldr	r3, [r3, #4]
 800ae72:	68ba      	ldr	r2, [r7, #8]
 800ae74:	4313      	orrs	r3, r2
 800ae76:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	68ba      	ldr	r2, [r7, #8]
 800ae7e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	2201      	movs	r2, #1
 800ae84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ae90:	2300      	movs	r3, #0
}
 800ae92:	4618      	mov	r0, r3
 800ae94:	3714      	adds	r7, #20
 800ae96:	46bd      	mov	sp, r7
 800ae98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae9c:	4770      	bx	lr
 800ae9e:	bf00      	nop
 800aea0:	40010000 	.word	0x40010000
 800aea4:	40000400 	.word	0x40000400
 800aea8:	40000800 	.word	0x40000800
 800aeac:	40000c00 	.word	0x40000c00
 800aeb0:	40014000 	.word	0x40014000

0800aeb4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aeb4:	b480      	push	{r7}
 800aeb6:	b085      	sub	sp, #20
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	6078      	str	r0, [r7, #4]
 800aebc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aec8:	2b01      	cmp	r3, #1
 800aeca:	d101      	bne.n	800aed0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aecc:	2302      	movs	r3, #2
 800aece:	e03d      	b.n	800af4c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2201      	movs	r2, #1
 800aed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	68db      	ldr	r3, [r3, #12]
 800aee2:	4313      	orrs	r3, r2
 800aee4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800aeec:	683b      	ldr	r3, [r7, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	4313      	orrs	r3, r2
 800aef2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	685b      	ldr	r3, [r3, #4]
 800aefe:	4313      	orrs	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af08:	683b      	ldr	r3, [r7, #0]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	4313      	orrs	r3, r2
 800af0e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af10:	68fb      	ldr	r3, [r7, #12]
 800af12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	691b      	ldr	r3, [r3, #16]
 800af1a:	4313      	orrs	r3, r2
 800af1c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af24:	683b      	ldr	r3, [r7, #0]
 800af26:	695b      	ldr	r3, [r3, #20]
 800af28:	4313      	orrs	r3, r2
 800af2a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	69db      	ldr	r3, [r3, #28]
 800af36:	4313      	orrs	r3, r2
 800af38:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	68fa      	ldr	r2, [r7, #12]
 800af40:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	2200      	movs	r2, #0
 800af46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af4a:	2300      	movs	r3, #0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3714      	adds	r7, #20
 800af50:	46bd      	mov	sp, r7
 800af52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af56:	4770      	bx	lr

0800af58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af58:	b480      	push	{r7}
 800af5a:	b083      	sub	sp, #12
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af60:	bf00      	nop
 800af62:	370c      	adds	r7, #12
 800af64:	46bd      	mov	sp, r7
 800af66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af6a:	4770      	bx	lr

0800af6c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af6c:	b480      	push	{r7}
 800af6e:	b083      	sub	sp, #12
 800af70:	af00      	add	r7, sp, #0
 800af72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800af74:	bf00      	nop
 800af76:	370c      	adds	r7, #12
 800af78:	46bd      	mov	sp, r7
 800af7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7e:	4770      	bx	lr

0800af80 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800af80:	b480      	push	{r7}
 800af82:	b083      	sub	sp, #12
 800af84:	af00      	add	r7, sp, #0
 800af86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	370c      	adds	r7, #12
 800af8c:	46bd      	mov	sp, r7
 800af8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af92:	4770      	bx	lr

0800af94 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800af94:	b580      	push	{r7, lr}
 800af96:	b082      	sub	sp, #8
 800af98:	af00      	add	r7, sp, #0
 800af9a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	2b00      	cmp	r3, #0
 800afa0:	d101      	bne.n	800afa6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afa2:	2301      	movs	r3, #1
 800afa4:	e04a      	b.n	800b03c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afac:	b2db      	uxtb	r3, r3
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d111      	bne.n	800afd6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	2200      	movs	r2, #0
 800afb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f000 fd72 	bl	800baa4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d102      	bne.n	800afce <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	4a1e      	ldr	r2, [pc, #120]	; (800b044 <HAL_UART_Init+0xb0>)
 800afcc:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2224      	movs	r2, #36	; 0x24
 800afda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	681b      	ldr	r3, [r3, #0]
 800afe2:	68da      	ldr	r2, [r3, #12]
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afec:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800afee:	6878      	ldr	r0, [r7, #4]
 800aff0:	f001 f83c 	bl	800c06c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	691a      	ldr	r2, [r3, #16]
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b002:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	695a      	ldr	r2, [r3, #20]
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	681b      	ldr	r3, [r3, #0]
 800b00e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b012:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	68da      	ldr	r2, [r3, #12]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b022:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2200      	movs	r2, #0
 800b028:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	2220      	movs	r2, #32
 800b02e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2220      	movs	r2, #32
 800b036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	3708      	adds	r7, #8
 800b040:	46bd      	mov	sp, r7
 800b042:	bd80      	pop	{r7, pc}
 800b044:	08004ba9 	.word	0x08004ba9

0800b048 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b048:	b480      	push	{r7}
 800b04a:	b087      	sub	sp, #28
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	60f8      	str	r0, [r7, #12]
 800b050:	460b      	mov	r3, r1
 800b052:	607a      	str	r2, [r7, #4]
 800b054:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b056:	2300      	movs	r3, #0
 800b058:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d107      	bne.n	800b070 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b064:	f043 0220 	orr.w	r2, r3, #32
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b06c:	2301      	movs	r3, #1
 800b06e:	e08c      	b.n	800b18a <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b076:	2b01      	cmp	r3, #1
 800b078:	d101      	bne.n	800b07e <HAL_UART_RegisterCallback+0x36>
 800b07a:	2302      	movs	r3, #2
 800b07c:	e085      	b.n	800b18a <HAL_UART_RegisterCallback+0x142>
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	2201      	movs	r2, #1
 800b082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b08c:	b2db      	uxtb	r3, r3
 800b08e:	2b20      	cmp	r3, #32
 800b090:	d151      	bne.n	800b136 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b092:	7afb      	ldrb	r3, [r7, #11]
 800b094:	2b0c      	cmp	r3, #12
 800b096:	d845      	bhi.n	800b124 <HAL_UART_RegisterCallback+0xdc>
 800b098:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <HAL_UART_RegisterCallback+0x58>)
 800b09a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b09e:	bf00      	nop
 800b0a0:	0800b0d5 	.word	0x0800b0d5
 800b0a4:	0800b0dd 	.word	0x0800b0dd
 800b0a8:	0800b0e5 	.word	0x0800b0e5
 800b0ac:	0800b0ed 	.word	0x0800b0ed
 800b0b0:	0800b0f5 	.word	0x0800b0f5
 800b0b4:	0800b0fd 	.word	0x0800b0fd
 800b0b8:	0800b105 	.word	0x0800b105
 800b0bc:	0800b10d 	.word	0x0800b10d
 800b0c0:	0800b125 	.word	0x0800b125
 800b0c4:	0800b125 	.word	0x0800b125
 800b0c8:	0800b125 	.word	0x0800b125
 800b0cc:	0800b115 	.word	0x0800b115
 800b0d0:	0800b11d 	.word	0x0800b11d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b0da:	e051      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	687a      	ldr	r2, [r7, #4]
 800b0e0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b0e2:	e04d      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b0ea:	e049      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	687a      	ldr	r2, [r7, #4]
 800b0f0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b0f2:	e045      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b0fa:	e041      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b102:	e03d      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b10a:	e039      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b112:	e035      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b11a:	e031      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b122:	e02d      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b128:	f043 0220 	orr.w	r2, r3, #32
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b130:	2301      	movs	r3, #1
 800b132:	75fb      	strb	r3, [r7, #23]
        break;
 800b134:	e024      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b13c:	b2db      	uxtb	r3, r3
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d116      	bne.n	800b170 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b142:	7afb      	ldrb	r3, [r7, #11]
 800b144:	2b0b      	cmp	r3, #11
 800b146:	d002      	beq.n	800b14e <HAL_UART_RegisterCallback+0x106>
 800b148:	2b0c      	cmp	r3, #12
 800b14a:	d004      	beq.n	800b156 <HAL_UART_RegisterCallback+0x10e>
 800b14c:	e007      	b.n	800b15e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	687a      	ldr	r2, [r7, #4]
 800b152:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b154:	e014      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	687a      	ldr	r2, [r7, #4]
 800b15a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b15c:	e010      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b162:	f043 0220 	orr.w	r2, r3, #32
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b16a:	2301      	movs	r3, #1
 800b16c:	75fb      	strb	r3, [r7, #23]
        break;
 800b16e:	e007      	b.n	800b180 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b174:	f043 0220 	orr.w	r2, r3, #32
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b17c:	2301      	movs	r3, #1
 800b17e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b180:	68fb      	ldr	r3, [r7, #12]
 800b182:	2200      	movs	r2, #0
 800b184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b188:	7dfb      	ldrb	r3, [r7, #23]
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	371c      	adds	r7, #28
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr
 800b196:	bf00      	nop

0800b198 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b198:	b480      	push	{r7}
 800b19a:	b085      	sub	sp, #20
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	60f8      	str	r0, [r7, #12]
 800b1a0:	60b9      	str	r1, [r7, #8]
 800b1a2:	4613      	mov	r3, r2
 800b1a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1ac:	b2db      	uxtb	r3, r3
 800b1ae:	2b20      	cmp	r3, #32
 800b1b0:	d130      	bne.n	800b214 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d002      	beq.n	800b1be <HAL_UART_Transmit_IT+0x26>
 800b1b8:	88fb      	ldrh	r3, [r7, #6]
 800b1ba:	2b00      	cmp	r3, #0
 800b1bc:	d101      	bne.n	800b1c2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	e029      	b.n	800b216 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1c8:	2b01      	cmp	r3, #1
 800b1ca:	d101      	bne.n	800b1d0 <HAL_UART_Transmit_IT+0x38>
 800b1cc:	2302      	movs	r3, #2
 800b1ce:	e022      	b.n	800b216 <HAL_UART_Transmit_IT+0x7e>
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	2201      	movs	r2, #1
 800b1d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	88fa      	ldrh	r2, [r7, #6]
 800b1e2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	88fa      	ldrh	r2, [r7, #6]
 800b1e8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b1ea:	68fb      	ldr	r3, [r7, #12]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2221      	movs	r2, #33	; 0x21
 800b1f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	2200      	movs	r2, #0
 800b1fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	68da      	ldr	r2, [r3, #12]
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b20e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	e000      	b.n	800b216 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b214:	2302      	movs	r3, #2
  }
}
 800b216:	4618      	mov	r0, r3
 800b218:	3714      	adds	r7, #20
 800b21a:	46bd      	mov	sp, r7
 800b21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b220:	4770      	bx	lr

0800b222 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b222:	b580      	push	{r7, lr}
 800b224:	b084      	sub	sp, #16
 800b226:	af00      	add	r7, sp, #0
 800b228:	60f8      	str	r0, [r7, #12]
 800b22a:	60b9      	str	r1, [r7, #8]
 800b22c:	4613      	mov	r3, r2
 800b22e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b236:	b2db      	uxtb	r3, r3
 800b238:	2b20      	cmp	r3, #32
 800b23a:	d11d      	bne.n	800b278 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b23c:	68bb      	ldr	r3, [r7, #8]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	d002      	beq.n	800b248 <HAL_UART_Receive_IT+0x26>
 800b242:	88fb      	ldrh	r3, [r7, #6]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d101      	bne.n	800b24c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b248:	2301      	movs	r3, #1
 800b24a:	e016      	b.n	800b27a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b252:	2b01      	cmp	r3, #1
 800b254:	d101      	bne.n	800b25a <HAL_UART_Receive_IT+0x38>
 800b256:	2302      	movs	r3, #2
 800b258:	e00f      	b.n	800b27a <HAL_UART_Receive_IT+0x58>
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	2201      	movs	r2, #1
 800b25e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	2200      	movs	r2, #0
 800b266:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b268:	88fb      	ldrh	r3, [r7, #6]
 800b26a:	461a      	mov	r2, r3
 800b26c:	68b9      	ldr	r1, [r7, #8]
 800b26e:	68f8      	ldr	r0, [r7, #12]
 800b270:	f000 fcf8 	bl	800bc64 <UART_Start_Receive_IT>
 800b274:	4603      	mov	r3, r0
 800b276:	e000      	b.n	800b27a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b278:	2302      	movs	r3, #2
  }
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3710      	adds	r7, #16
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b08c      	sub	sp, #48	; 0x30
 800b288:	af00      	add	r7, sp, #0
 800b28a:	60f8      	str	r0, [r7, #12]
 800b28c:	60b9      	str	r1, [r7, #8]
 800b28e:	4613      	mov	r3, r2
 800b290:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b298:	b2db      	uxtb	r3, r3
 800b29a:	2b20      	cmp	r3, #32
 800b29c:	d165      	bne.n	800b36a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b29e:	68bb      	ldr	r3, [r7, #8]
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d002      	beq.n	800b2aa <HAL_UART_Transmit_DMA+0x26>
 800b2a4:	88fb      	ldrh	r3, [r7, #6]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d101      	bne.n	800b2ae <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b2aa:	2301      	movs	r3, #1
 800b2ac:	e05e      	b.n	800b36c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ae:	68fb      	ldr	r3, [r7, #12]
 800b2b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UART_Transmit_DMA+0x38>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e057      	b.n	800b36c <HAL_UART_Transmit_DMA+0xe8>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b2c4:	68ba      	ldr	r2, [r7, #8]
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	88fa      	ldrh	r2, [r7, #6]
 800b2ce:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2d0:	68fb      	ldr	r3, [r7, #12]
 800b2d2:	88fa      	ldrh	r2, [r7, #6]
 800b2d4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2200      	movs	r2, #0
 800b2da:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2221      	movs	r2, #33	; 0x21
 800b2e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2e8:	4a22      	ldr	r2, [pc, #136]	; (800b374 <HAL_UART_Transmit_DMA+0xf0>)
 800b2ea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f0:	4a21      	ldr	r2, [pc, #132]	; (800b378 <HAL_UART_Transmit_DMA+0xf4>)
 800b2f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b2f8:	4a20      	ldr	r2, [pc, #128]	; (800b37c <HAL_UART_Transmit_DMA+0xf8>)
 800b2fa:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b300:	2200      	movs	r2, #0
 800b302:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b304:	f107 0308 	add.w	r3, r7, #8
 800b308:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b30e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b310:	6819      	ldr	r1, [r3, #0]
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	681b      	ldr	r3, [r3, #0]
 800b316:	3304      	adds	r3, #4
 800b318:	461a      	mov	r2, r3
 800b31a:	88fb      	ldrh	r3, [r7, #6]
 800b31c:	f7fa fd14 	bl	8005d48 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b320:	68fb      	ldr	r3, [r7, #12]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b328:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	2200      	movs	r2, #0
 800b32e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3314      	adds	r3, #20
 800b338:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	617b      	str	r3, [r7, #20]
   return(result);
 800b342:	697b      	ldr	r3, [r7, #20]
 800b344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b348:	62bb      	str	r3, [r7, #40]	; 0x28
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3314      	adds	r3, #20
 800b350:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b352:	627a      	str	r2, [r7, #36]	; 0x24
 800b354:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6a39      	ldr	r1, [r7, #32]
 800b358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b360:	69fb      	ldr	r3, [r7, #28]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e5      	bne.n	800b332 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b366:	2300      	movs	r3, #0
 800b368:	e000      	b.n	800b36c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b36a:	2302      	movs	r3, #2
  }
}
 800b36c:	4618      	mov	r0, r3
 800b36e:	3730      	adds	r7, #48	; 0x30
 800b370:	46bd      	mov	sp, r7
 800b372:	bd80      	pop	{r7, pc}
 800b374:	0800bb15 	.word	0x0800bb15
 800b378:	0800bbb1 	.word	0x0800bbb1
 800b37c:	0800bbcf 	.word	0x0800bbcf

0800b380 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b09a      	sub	sp, #104	; 0x68
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	330c      	adds	r3, #12
 800b38e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b390:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b392:	e853 3f00 	ldrex	r3, [r3]
 800b396:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b398:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b39a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b39e:	667b      	str	r3, [r7, #100]	; 0x64
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	330c      	adds	r3, #12
 800b3a6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3a8:	657a      	str	r2, [r7, #84]	; 0x54
 800b3aa:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3b0:	e841 2300 	strex	r3, r2, [r1]
 800b3b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3b8:	2b00      	cmp	r3, #0
 800b3ba:	d1e5      	bne.n	800b388 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	3314      	adds	r3, #20
 800b3c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3c6:	e853 3f00 	ldrex	r3, [r3]
 800b3ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	f023 0301 	bic.w	r3, r3, #1
 800b3d2:	663b      	str	r3, [r7, #96]	; 0x60
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	3314      	adds	r3, #20
 800b3da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3dc:	643a      	str	r2, [r7, #64]	; 0x40
 800b3de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b3e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b3e4:	e841 2300 	strex	r3, r2, [r1]
 800b3e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b3ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b3ec:	2b00      	cmp	r3, #0
 800b3ee:	d1e5      	bne.n	800b3bc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b3f0:	687b      	ldr	r3, [r7, #4]
 800b3f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3f4:	2b01      	cmp	r3, #1
 800b3f6:	d119      	bne.n	800b42c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	330c      	adds	r3, #12
 800b3fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b400:	6a3b      	ldr	r3, [r7, #32]
 800b402:	e853 3f00 	ldrex	r3, [r3]
 800b406:	61fb      	str	r3, [r7, #28]
   return(result);
 800b408:	69fb      	ldr	r3, [r7, #28]
 800b40a:	f023 0310 	bic.w	r3, r3, #16
 800b40e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	330c      	adds	r3, #12
 800b416:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b418:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b41a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b41c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b41e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b420:	e841 2300 	strex	r3, r2, [r1]
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d1e5      	bne.n	800b3f8 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	695b      	ldr	r3, [r3, #20]
 800b432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b436:	2b40      	cmp	r3, #64	; 0x40
 800b438:	d136      	bne.n	800b4a8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	3314      	adds	r3, #20
 800b440:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	e853 3f00 	ldrex	r3, [r3]
 800b448:	60bb      	str	r3, [r7, #8]
   return(result);
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b450:	65bb      	str	r3, [r7, #88]	; 0x58
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3314      	adds	r3, #20
 800b458:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b45a:	61ba      	str	r2, [r7, #24]
 800b45c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b45e:	6979      	ldr	r1, [r7, #20]
 800b460:	69ba      	ldr	r2, [r7, #24]
 800b462:	e841 2300 	strex	r3, r2, [r1]
 800b466:	613b      	str	r3, [r7, #16]
   return(result);
 800b468:	693b      	ldr	r3, [r7, #16]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d1e5      	bne.n	800b43a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b472:	2b00      	cmp	r3, #0
 800b474:	d018      	beq.n	800b4a8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b47a:	2200      	movs	r2, #0
 800b47c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b482:	4618      	mov	r0, r3
 800b484:	f7fa fcb8 	bl	8005df8 <HAL_DMA_Abort>
 800b488:	4603      	mov	r3, r0
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d00c      	beq.n	800b4a8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	4618      	mov	r0, r3
 800b494:	f7fa feda 	bl	800624c <HAL_DMA_GetError>
 800b498:	4603      	mov	r3, r0
 800b49a:	2b20      	cmp	r3, #32
 800b49c:	d104      	bne.n	800b4a8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	2210      	movs	r2, #16
 800b4a2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b4a4:	2303      	movs	r3, #3
 800b4a6:	e00a      	b.n	800b4be <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	2200      	movs	r2, #0
 800b4ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b4bc:	2300      	movs	r3, #0
}
 800b4be:	4618      	mov	r0, r3
 800b4c0:	3768      	adds	r7, #104	; 0x68
 800b4c2:	46bd      	mov	sp, r7
 800b4c4:	bd80      	pop	{r7, pc}
	...

0800b4c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b0ba      	sub	sp, #232	; 0xe8
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	681b      	ldr	r3, [r3, #0]
 800b4d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	68db      	ldr	r3, [r3, #12]
 800b4e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	695b      	ldr	r3, [r3, #20]
 800b4ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b4fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4fe:	f003 030f 	and.w	r3, r3, #15
 800b502:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b506:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d10f      	bne.n	800b52e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b50e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b512:	f003 0320 	and.w	r3, r3, #32
 800b516:	2b00      	cmp	r3, #0
 800b518:	d009      	beq.n	800b52e <HAL_UART_IRQHandler+0x66>
 800b51a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b51e:	f003 0320 	and.w	r3, r3, #32
 800b522:	2b00      	cmp	r3, #0
 800b524:	d003      	beq.n	800b52e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fce3 	bl	800bef2 <UART_Receive_IT>
      return;
 800b52c:	e25b      	b.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b52e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b532:	2b00      	cmp	r3, #0
 800b534:	f000 80e1 	beq.w	800b6fa <HAL_UART_IRQHandler+0x232>
 800b538:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b00      	cmp	r3, #0
 800b542:	d106      	bne.n	800b552 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b544:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b548:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	f000 80d4 	beq.w	800b6fa <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b556:	f003 0301 	and.w	r3, r3, #1
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d00b      	beq.n	800b576 <HAL_UART_IRQHandler+0xae>
 800b55e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b566:	2b00      	cmp	r3, #0
 800b568:	d005      	beq.n	800b576 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b56a:	687b      	ldr	r3, [r7, #4]
 800b56c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b56e:	f043 0201 	orr.w	r2, r3, #1
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b576:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b57a:	f003 0304 	and.w	r3, r3, #4
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d00b      	beq.n	800b59a <HAL_UART_IRQHandler+0xd2>
 800b582:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b586:	f003 0301 	and.w	r3, r3, #1
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d005      	beq.n	800b59a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b592:	f043 0202 	orr.w	r2, r3, #2
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b59a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59e:	f003 0302 	and.w	r3, r3, #2
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d00b      	beq.n	800b5be <HAL_UART_IRQHandler+0xf6>
 800b5a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5aa:	f003 0301 	and.w	r3, r3, #1
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d005      	beq.n	800b5be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b6:	f043 0204 	orr.w	r2, r3, #4
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b5be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5c2:	f003 0308 	and.w	r3, r3, #8
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d011      	beq.n	800b5ee <HAL_UART_IRQHandler+0x126>
 800b5ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ce:	f003 0320 	and.w	r3, r3, #32
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d105      	bne.n	800b5e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b5d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5da:	f003 0301 	and.w	r3, r3, #1
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d005      	beq.n	800b5ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5e6:	f043 0208 	orr.w	r2, r3, #8
 800b5ea:	687b      	ldr	r3, [r7, #4]
 800b5ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	f000 81f2 	beq.w	800b9dc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b5f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5fc:	f003 0320 	and.w	r3, r3, #32
 800b600:	2b00      	cmp	r3, #0
 800b602:	d008      	beq.n	800b616 <HAL_UART_IRQHandler+0x14e>
 800b604:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b608:	f003 0320 	and.w	r3, r3, #32
 800b60c:	2b00      	cmp	r3, #0
 800b60e:	d002      	beq.n	800b616 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b610:	6878      	ldr	r0, [r7, #4]
 800b612:	f000 fc6e 	bl	800bef2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	695b      	ldr	r3, [r3, #20]
 800b61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b620:	2b40      	cmp	r3, #64	; 0x40
 800b622:	bf0c      	ite	eq
 800b624:	2301      	moveq	r3, #1
 800b626:	2300      	movne	r3, #0
 800b628:	b2db      	uxtb	r3, r3
 800b62a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b632:	f003 0308 	and.w	r3, r3, #8
 800b636:	2b00      	cmp	r3, #0
 800b638:	d103      	bne.n	800b642 <HAL_UART_IRQHandler+0x17a>
 800b63a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d051      	beq.n	800b6e6 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 fb74 	bl	800bd30 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	681b      	ldr	r3, [r3, #0]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b652:	2b40      	cmp	r3, #64	; 0x40
 800b654:	d142      	bne.n	800b6dc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	3314      	adds	r3, #20
 800b65c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b660:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b664:	e853 3f00 	ldrex	r3, [r3]
 800b668:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b66c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b670:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b674:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	3314      	adds	r3, #20
 800b67e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b682:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b686:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b68a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b68e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b692:	e841 2300 	strex	r3, r2, [r1]
 800b696:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b69a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d1d9      	bne.n	800b656 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d013      	beq.n	800b6d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ae:	4a7f      	ldr	r2, [pc, #508]	; (800b8ac <HAL_UART_IRQHandler+0x3e4>)
 800b6b0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6b6:	4618      	mov	r0, r3
 800b6b8:	f7fa fc0e 	bl	8005ed8 <HAL_DMA_Abort_IT>
 800b6bc:	4603      	mov	r3, r0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d019      	beq.n	800b6f6 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6d0:	e011      	b.n	800b6f6 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6da:	e00c      	b.n	800b6f6 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6e4:	e007      	b.n	800b6f6 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6ea:	6878      	ldr	r0, [r7, #4]
 800b6ec:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	2200      	movs	r2, #0
 800b6f2:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b6f4:	e172      	b.n	800b9dc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f6:	bf00      	nop
    return;
 800b6f8:	e170      	b.n	800b9dc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b6fe:	2b01      	cmp	r3, #1
 800b700:	f040 814c 	bne.w	800b99c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b708:	f003 0310 	and.w	r3, r3, #16
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	f000 8145 	beq.w	800b99c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b716:	f003 0310 	and.w	r3, r3, #16
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	f000 813e 	beq.w	800b99c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b720:	2300      	movs	r3, #0
 800b722:	60bb      	str	r3, [r7, #8]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	60bb      	str	r3, [r7, #8]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	685b      	ldr	r3, [r3, #4]
 800b732:	60bb      	str	r3, [r7, #8]
 800b734:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	695b      	ldr	r3, [r3, #20]
 800b73c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b740:	2b40      	cmp	r3, #64	; 0x40
 800b742:	f040 80b5 	bne.w	800b8b0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	685b      	ldr	r3, [r3, #4]
 800b74e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b752:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b756:	2b00      	cmp	r3, #0
 800b758:	f000 8142 	beq.w	800b9e0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b760:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b764:	429a      	cmp	r2, r3
 800b766:	f080 813b 	bcs.w	800b9e0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b770:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b77c:	f000 8088 	beq.w	800b890 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	330c      	adds	r3, #12
 800b786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b78a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b78e:	e853 3f00 	ldrex	r3, [r3]
 800b792:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b796:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b79a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b79e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	681b      	ldr	r3, [r3, #0]
 800b7a6:	330c      	adds	r3, #12
 800b7a8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b7ac:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7b8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7bc:	e841 2300 	strex	r3, r2, [r1]
 800b7c0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d1d9      	bne.n	800b780 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	681b      	ldr	r3, [r3, #0]
 800b7d0:	3314      	adds	r3, #20
 800b7d2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7d6:	e853 3f00 	ldrex	r3, [r3]
 800b7da:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7de:	f023 0301 	bic.w	r3, r3, #1
 800b7e2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	3314      	adds	r3, #20
 800b7ec:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b7f0:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b7f4:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b7f8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b7fc:	e841 2300 	strex	r3, r2, [r1]
 800b800:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b802:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b804:	2b00      	cmp	r3, #0
 800b806:	d1e1      	bne.n	800b7cc <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	3314      	adds	r3, #20
 800b80e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b810:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b812:	e853 3f00 	ldrex	r3, [r3]
 800b816:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b818:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b81a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b81e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	3314      	adds	r3, #20
 800b828:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b82c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b82e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b830:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b832:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b834:	e841 2300 	strex	r3, r2, [r1]
 800b838:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b83a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d1e3      	bne.n	800b808 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	2220      	movs	r2, #32
 800b844:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	2200      	movs	r2, #0
 800b84c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	330c      	adds	r3, #12
 800b854:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b856:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b858:	e853 3f00 	ldrex	r3, [r3]
 800b85c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b85e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b860:	f023 0310 	bic.w	r3, r3, #16
 800b864:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	681b      	ldr	r3, [r3, #0]
 800b86c:	330c      	adds	r3, #12
 800b86e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b872:	65ba      	str	r2, [r7, #88]	; 0x58
 800b874:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b876:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b878:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b87a:	e841 2300 	strex	r3, r2, [r1]
 800b87e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b880:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b882:	2b00      	cmp	r3, #0
 800b884:	d1e3      	bne.n	800b84e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b88a:	4618      	mov	r0, r3
 800b88c:	f7fa fab4 	bl	8005df8 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b894:	687a      	ldr	r2, [r7, #4]
 800b896:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b898:	687a      	ldr	r2, [r7, #4]
 800b89a:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b89c:	b292      	uxth	r2, r2
 800b89e:	1a8a      	subs	r2, r1, r2
 800b8a0:	b292      	uxth	r2, r2
 800b8a2:	4611      	mov	r1, r2
 800b8a4:	6878      	ldr	r0, [r7, #4]
 800b8a6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8a8:	e09a      	b.n	800b9e0 <HAL_UART_IRQHandler+0x518>
 800b8aa:	bf00      	nop
 800b8ac:	0800bdf7 	.word	0x0800bdf7
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8b8:	b29b      	uxth	r3, r3
 800b8ba:	1ad3      	subs	r3, r2, r3
 800b8bc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	f000 808c 	beq.w	800b9e4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b8cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	f000 8087 	beq.w	800b9e4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	330c      	adds	r3, #12
 800b8dc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b8e0:	e853 3f00 	ldrex	r3, [r3]
 800b8e4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8e8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b8ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	681b      	ldr	r3, [r3, #0]
 800b8f4:	330c      	adds	r3, #12
 800b8f6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b8fa:	647a      	str	r2, [r7, #68]	; 0x44
 800b8fc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8fe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b902:	e841 2300 	strex	r3, r2, [r1]
 800b906:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d1e3      	bne.n	800b8d6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	681b      	ldr	r3, [r3, #0]
 800b912:	3314      	adds	r3, #20
 800b914:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b918:	e853 3f00 	ldrex	r3, [r3]
 800b91c:	623b      	str	r3, [r7, #32]
   return(result);
 800b91e:	6a3b      	ldr	r3, [r7, #32]
 800b920:	f023 0301 	bic.w	r3, r3, #1
 800b924:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	3314      	adds	r3, #20
 800b92e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b932:	633a      	str	r2, [r7, #48]	; 0x30
 800b934:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b936:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b938:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b93a:	e841 2300 	strex	r3, r2, [r1]
 800b93e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b942:	2b00      	cmp	r3, #0
 800b944:	d1e3      	bne.n	800b90e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	2220      	movs	r2, #32
 800b94a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2200      	movs	r2, #0
 800b952:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b954:	687b      	ldr	r3, [r7, #4]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	330c      	adds	r3, #12
 800b95a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b95c:	693b      	ldr	r3, [r7, #16]
 800b95e:	e853 3f00 	ldrex	r3, [r3]
 800b962:	60fb      	str	r3, [r7, #12]
   return(result);
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	f023 0310 	bic.w	r3, r3, #16
 800b96a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	330c      	adds	r3, #12
 800b974:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b978:	61fa      	str	r2, [r7, #28]
 800b97a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b97c:	69b9      	ldr	r1, [r7, #24]
 800b97e:	69fa      	ldr	r2, [r7, #28]
 800b980:	e841 2300 	strex	r3, r2, [r1]
 800b984:	617b      	str	r3, [r7, #20]
   return(result);
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d1e3      	bne.n	800b954 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b990:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b994:	4611      	mov	r1, r2
 800b996:	6878      	ldr	r0, [r7, #4]
 800b998:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b99a:	e023      	b.n	800b9e4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b99c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d009      	beq.n	800b9bc <HAL_UART_IRQHandler+0x4f4>
 800b9a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9b0:	2b00      	cmp	r3, #0
 800b9b2:	d003      	beq.n	800b9bc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b9b4:	6878      	ldr	r0, [r7, #4]
 800b9b6:	f000 fa33 	bl	800be20 <UART_Transmit_IT>
    return;
 800b9ba:	e014      	b.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00e      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
 800b9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d008      	beq.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fa73 	bl	800bec0 <UART_EndTransmit_IT>
    return;
 800b9da:	e004      	b.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
    return;
 800b9dc:	bf00      	nop
 800b9de:	e002      	b.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b9e0:	bf00      	nop
 800b9e2:	e000      	b.n	800b9e6 <HAL_UART_IRQHandler+0x51e>
      return;
 800b9e4:	bf00      	nop
  }
}
 800b9e6:	37e8      	adds	r7, #232	; 0xe8
 800b9e8:	46bd      	mov	sp, r7
 800b9ea:	bd80      	pop	{r7, pc}

0800b9ec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ec:	b480      	push	{r7}
 800b9ee:	b083      	sub	sp, #12
 800b9f0:	af00      	add	r7, sp, #0
 800b9f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b9f4:	bf00      	nop
 800b9f6:	370c      	adds	r7, #12
 800b9f8:	46bd      	mov	sp, r7
 800b9fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9fe:	4770      	bx	lr

0800ba00 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba00:	b480      	push	{r7}
 800ba02:	b083      	sub	sp, #12
 800ba04:	af00      	add	r7, sp, #0
 800ba06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ba08:	bf00      	nop
 800ba0a:	370c      	adds	r7, #12
 800ba0c:	46bd      	mov	sp, r7
 800ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba12:	4770      	bx	lr

0800ba14 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba1c:	bf00      	nop
 800ba1e:	370c      	adds	r7, #12
 800ba20:	46bd      	mov	sp, r7
 800ba22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba26:	4770      	bx	lr

0800ba28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba28:	b480      	push	{r7}
 800ba2a:	b083      	sub	sp, #12
 800ba2c:	af00      	add	r7, sp, #0
 800ba2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ba30:	bf00      	nop
 800ba32:	370c      	adds	r7, #12
 800ba34:	46bd      	mov	sp, r7
 800ba36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba3a:	4770      	bx	lr

0800ba3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba3c:	b480      	push	{r7}
 800ba3e:	b083      	sub	sp, #12
 800ba40:	af00      	add	r7, sp, #0
 800ba42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba44:	bf00      	nop
 800ba46:	370c      	adds	r7, #12
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba4e:	4770      	bx	lr

0800ba50 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ba50:	b480      	push	{r7}
 800ba52:	b083      	sub	sp, #12
 800ba54:	af00      	add	r7, sp, #0
 800ba56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ba58:	bf00      	nop
 800ba5a:	370c      	adds	r7, #12
 800ba5c:	46bd      	mov	sp, r7
 800ba5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba62:	4770      	bx	lr

0800ba64 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b083      	sub	sp, #12
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800ba80:	bf00      	nop
 800ba82:	370c      	adds	r7, #12
 800ba84:	46bd      	mov	sp, r7
 800ba86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba8a:	4770      	bx	lr

0800ba8c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	6078      	str	r0, [r7, #4]
 800ba94:	460b      	mov	r3, r1
 800ba96:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ba98:	bf00      	nop
 800ba9a:	370c      	adds	r7, #12
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa2:	4770      	bx	lr

0800baa4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800baa4:	b480      	push	{r7}
 800baa6:	b083      	sub	sp, #12
 800baa8:	af00      	add	r7, sp, #0
 800baaa:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a10      	ldr	r2, [pc, #64]	; (800baf0 <UART_InitCallbacksToDefault+0x4c>)
 800bab0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bab2:	687b      	ldr	r3, [r7, #4]
 800bab4:	4a0f      	ldr	r2, [pc, #60]	; (800baf4 <UART_InitCallbacksToDefault+0x50>)
 800bab6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	4a0f      	ldr	r2, [pc, #60]	; (800baf8 <UART_InitCallbacksToDefault+0x54>)
 800babc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	4a0e      	ldr	r2, [pc, #56]	; (800bafc <UART_InitCallbacksToDefault+0x58>)
 800bac2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	4a0e      	ldr	r2, [pc, #56]	; (800bb00 <UART_InitCallbacksToDefault+0x5c>)
 800bac8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	4a0d      	ldr	r2, [pc, #52]	; (800bb04 <UART_InitCallbacksToDefault+0x60>)
 800bace:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	4a0d      	ldr	r2, [pc, #52]	; (800bb08 <UART_InitCallbacksToDefault+0x64>)
 800bad4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a0c      	ldr	r2, [pc, #48]	; (800bb0c <UART_InitCallbacksToDefault+0x68>)
 800bada:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	4a0c      	ldr	r2, [pc, #48]	; (800bb10 <UART_InitCallbacksToDefault+0x6c>)
 800bae0:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bae2:	bf00      	nop
 800bae4:	370c      	adds	r7, #12
 800bae6:	46bd      	mov	sp, r7
 800bae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baec:	4770      	bx	lr
 800baee:	bf00      	nop
 800baf0:	0800ba01 	.word	0x0800ba01
 800baf4:	0800b9ed 	.word	0x0800b9ed
 800baf8:	0800ba29 	.word	0x0800ba29
 800bafc:	0800ba15 	.word	0x0800ba15
 800bb00:	0800ba3d 	.word	0x0800ba3d
 800bb04:	0800ba51 	.word	0x0800ba51
 800bb08:	0800ba65 	.word	0x0800ba65
 800bb0c:	0800ba79 	.word	0x0800ba79
 800bb10:	0800ba8d 	.word	0x0800ba8d

0800bb14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb14:	b580      	push	{r7, lr}
 800bb16:	b090      	sub	sp, #64	; 0x40
 800bb18:	af00      	add	r7, sp, #0
 800bb1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb20:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	681b      	ldr	r3, [r3, #0]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d137      	bne.n	800bba0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bb30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb32:	2200      	movs	r2, #0
 800bb34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	3314      	adds	r3, #20
 800bb3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb40:	e853 3f00 	ldrex	r3, [r3]
 800bb44:	623b      	str	r3, [r7, #32]
   return(result);
 800bb46:	6a3b      	ldr	r3, [r7, #32]
 800bb48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb4c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	3314      	adds	r3, #20
 800bb54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb56:	633a      	str	r2, [r7, #48]	; 0x30
 800bb58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb5e:	e841 2300 	strex	r3, r2, [r1]
 800bb62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb66:	2b00      	cmp	r3, #0
 800bb68:	d1e5      	bne.n	800bb36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	330c      	adds	r3, #12
 800bb70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb72:	693b      	ldr	r3, [r7, #16]
 800bb74:	e853 3f00 	ldrex	r3, [r3]
 800bb78:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb80:	637b      	str	r3, [r7, #52]	; 0x34
 800bb82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	330c      	adds	r3, #12
 800bb88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb8a:	61fa      	str	r2, [r7, #28]
 800bb8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb8e:	69b9      	ldr	r1, [r7, #24]
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	e841 2300 	strex	r3, r2, [r1]
 800bb96:	617b      	str	r3, [r7, #20]
   return(result);
 800bb98:	697b      	ldr	r3, [r7, #20]
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d1e5      	bne.n	800bb6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bb9e:	e003      	b.n	800bba8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bba4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bba6:	4798      	blx	r3
}
 800bba8:	bf00      	nop
 800bbaa:	3740      	adds	r7, #64	; 0x40
 800bbac:	46bd      	mov	sp, r7
 800bbae:	bd80      	pop	{r7, pc}

0800bbb0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b084      	sub	sp, #16
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbbc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbc2:	68f8      	ldr	r0, [r7, #12]
 800bbc4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbc6:	bf00      	nop
 800bbc8:	3710      	adds	r7, #16
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bd80      	pop	{r7, pc}

0800bbce <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbce:	b580      	push	{r7, lr}
 800bbd0:	b084      	sub	sp, #16
 800bbd2:	af00      	add	r7, sp, #0
 800bbd4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbde:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bbe0:	68bb      	ldr	r3, [r7, #8]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	695b      	ldr	r3, [r3, #20]
 800bbe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbea:	2b80      	cmp	r3, #128	; 0x80
 800bbec:	bf0c      	ite	eq
 800bbee:	2301      	moveq	r3, #1
 800bbf0:	2300      	movne	r3, #0
 800bbf2:	b2db      	uxtb	r3, r3
 800bbf4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bbf6:	68bb      	ldr	r3, [r7, #8]
 800bbf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bbfc:	b2db      	uxtb	r3, r3
 800bbfe:	2b21      	cmp	r3, #33	; 0x21
 800bc00:	d108      	bne.n	800bc14 <UART_DMAError+0x46>
 800bc02:	68fb      	ldr	r3, [r7, #12]
 800bc04:	2b00      	cmp	r3, #0
 800bc06:	d005      	beq.n	800bc14 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bc0e:	68b8      	ldr	r0, [r7, #8]
 800bc10:	f000 f866 	bl	800bce0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc14:	68bb      	ldr	r3, [r7, #8]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	695b      	ldr	r3, [r3, #20]
 800bc1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc1e:	2b40      	cmp	r3, #64	; 0x40
 800bc20:	bf0c      	ite	eq
 800bc22:	2301      	moveq	r3, #1
 800bc24:	2300      	movne	r3, #0
 800bc26:	b2db      	uxtb	r3, r3
 800bc28:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc30:	b2db      	uxtb	r3, r3
 800bc32:	2b22      	cmp	r3, #34	; 0x22
 800bc34:	d108      	bne.n	800bc48 <UART_DMAError+0x7a>
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d005      	beq.n	800bc48 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc3c:	68bb      	ldr	r3, [r7, #8]
 800bc3e:	2200      	movs	r2, #0
 800bc40:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc42:	68b8      	ldr	r0, [r7, #8]
 800bc44:	f000 f874 	bl	800bd30 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc4c:	f043 0210 	orr.w	r2, r3, #16
 800bc50:	68bb      	ldr	r3, [r7, #8]
 800bc52:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc58:	68b8      	ldr	r0, [r7, #8]
 800bc5a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc5c:	bf00      	nop
 800bc5e:	3710      	adds	r7, #16
 800bc60:	46bd      	mov	sp, r7
 800bc62:	bd80      	pop	{r7, pc}

0800bc64 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc64:	b480      	push	{r7}
 800bc66:	b085      	sub	sp, #20
 800bc68:	af00      	add	r7, sp, #0
 800bc6a:	60f8      	str	r0, [r7, #12]
 800bc6c:	60b9      	str	r1, [r7, #8]
 800bc6e:	4613      	mov	r3, r2
 800bc70:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	88fa      	ldrh	r2, [r7, #6]
 800bc7c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	88fa      	ldrh	r2, [r7, #6]
 800bc82:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc84:	68fb      	ldr	r3, [r7, #12]
 800bc86:	2200      	movs	r2, #0
 800bc88:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	2222      	movs	r2, #34	; 0x22
 800bc8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	2200      	movs	r2, #0
 800bc96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	691b      	ldr	r3, [r3, #16]
 800bc9e:	2b00      	cmp	r3, #0
 800bca0:	d007      	beq.n	800bcb2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	68da      	ldr	r2, [r3, #12]
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcb0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	695a      	ldr	r2, [r3, #20]
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	f042 0201 	orr.w	r2, r2, #1
 800bcc0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f042 0220 	orr.w	r2, r2, #32
 800bcd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bcd2:	2300      	movs	r3, #0
}
 800bcd4:	4618      	mov	r0, r3
 800bcd6:	3714      	adds	r7, #20
 800bcd8:	46bd      	mov	sp, r7
 800bcda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcde:	4770      	bx	lr

0800bce0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bce0:	b480      	push	{r7}
 800bce2:	b089      	sub	sp, #36	; 0x24
 800bce4:	af00      	add	r7, sp, #0
 800bce6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	330c      	adds	r3, #12
 800bcee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	e853 3f00 	ldrex	r3, [r3]
 800bcf6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bcfe:	61fb      	str	r3, [r7, #28]
 800bd00:	687b      	ldr	r3, [r7, #4]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	330c      	adds	r3, #12
 800bd06:	69fa      	ldr	r2, [r7, #28]
 800bd08:	61ba      	str	r2, [r7, #24]
 800bd0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	6979      	ldr	r1, [r7, #20]
 800bd0e:	69ba      	ldr	r2, [r7, #24]
 800bd10:	e841 2300 	strex	r3, r2, [r1]
 800bd14:	613b      	str	r3, [r7, #16]
   return(result);
 800bd16:	693b      	ldr	r3, [r7, #16]
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d1e5      	bne.n	800bce8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	2220      	movs	r2, #32
 800bd20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bd24:	bf00      	nop
 800bd26:	3724      	adds	r7, #36	; 0x24
 800bd28:	46bd      	mov	sp, r7
 800bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd2e:	4770      	bx	lr

0800bd30 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd30:	b480      	push	{r7}
 800bd32:	b095      	sub	sp, #84	; 0x54
 800bd34:	af00      	add	r7, sp, #0
 800bd36:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	330c      	adds	r3, #12
 800bd3e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd42:	e853 3f00 	ldrex	r3, [r3]
 800bd46:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd4a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	330c      	adds	r3, #12
 800bd56:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd58:	643a      	str	r2, [r7, #64]	; 0x40
 800bd5a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd5e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd60:	e841 2300 	strex	r3, r2, [r1]
 800bd64:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd68:	2b00      	cmp	r3, #0
 800bd6a:	d1e5      	bne.n	800bd38 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	681b      	ldr	r3, [r3, #0]
 800bd70:	3314      	adds	r3, #20
 800bd72:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd74:	6a3b      	ldr	r3, [r7, #32]
 800bd76:	e853 3f00 	ldrex	r3, [r3]
 800bd7a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	f023 0301 	bic.w	r3, r3, #1
 800bd82:	64bb      	str	r3, [r7, #72]	; 0x48
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	3314      	adds	r3, #20
 800bd8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bd8c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bd8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd90:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bd92:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bd94:	e841 2300 	strex	r3, r2, [r1]
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bd9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d1e5      	bne.n	800bd6c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bda4:	2b01      	cmp	r3, #1
 800bda6:	d119      	bne.n	800bddc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	330c      	adds	r3, #12
 800bdae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	e853 3f00 	ldrex	r3, [r3]
 800bdb6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdb8:	68bb      	ldr	r3, [r7, #8]
 800bdba:	f023 0310 	bic.w	r3, r3, #16
 800bdbe:	647b      	str	r3, [r7, #68]	; 0x44
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	330c      	adds	r3, #12
 800bdc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bdc8:	61ba      	str	r2, [r7, #24]
 800bdca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdcc:	6979      	ldr	r1, [r7, #20]
 800bdce:	69ba      	ldr	r2, [r7, #24]
 800bdd0:	e841 2300 	strex	r3, r2, [r1]
 800bdd4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdd6:	693b      	ldr	r3, [r7, #16]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d1e5      	bne.n	800bda8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	2220      	movs	r2, #32
 800bde0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2200      	movs	r2, #0
 800bde8:	631a      	str	r2, [r3, #48]	; 0x30
}
 800bdea:	bf00      	nop
 800bdec:	3754      	adds	r7, #84	; 0x54
 800bdee:	46bd      	mov	sp, r7
 800bdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdf4:	4770      	bx	lr

0800bdf6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bdf6:	b580      	push	{r7, lr}
 800bdf8:	b084      	sub	sp, #16
 800bdfa:	af00      	add	r7, sp, #0
 800bdfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	2200      	movs	r2, #0
 800be08:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be0a:	68fb      	ldr	r3, [r7, #12]
 800be0c:	2200      	movs	r2, #0
 800be0e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800be10:	68fb      	ldr	r3, [r7, #12]
 800be12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be14:	68f8      	ldr	r0, [r7, #12]
 800be16:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be18:	bf00      	nop
 800be1a:	3710      	adds	r7, #16
 800be1c:	46bd      	mov	sp, r7
 800be1e:	bd80      	pop	{r7, pc}

0800be20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be20:	b480      	push	{r7}
 800be22:	b085      	sub	sp, #20
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b21      	cmp	r3, #33	; 0x21
 800be32:	d13e      	bne.n	800beb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	689b      	ldr	r3, [r3, #8]
 800be38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be3c:	d114      	bne.n	800be68 <UART_Transmit_IT+0x48>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	691b      	ldr	r3, [r3, #16]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d110      	bne.n	800be68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6a1b      	ldr	r3, [r3, #32]
 800be4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	881b      	ldrh	r3, [r3, #0]
 800be50:	461a      	mov	r2, r3
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	6a1b      	ldr	r3, [r3, #32]
 800be60:	1c9a      	adds	r2, r3, #2
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	621a      	str	r2, [r3, #32]
 800be66:	e008      	b.n	800be7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a1b      	ldr	r3, [r3, #32]
 800be6c:	1c59      	adds	r1, r3, #1
 800be6e:	687a      	ldr	r2, [r7, #4]
 800be70:	6211      	str	r1, [r2, #32]
 800be72:	781a      	ldrb	r2, [r3, #0]
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be7e:	b29b      	uxth	r3, r3
 800be80:	3b01      	subs	r3, #1
 800be82:	b29b      	uxth	r3, r3
 800be84:	687a      	ldr	r2, [r7, #4]
 800be86:	4619      	mov	r1, r3
 800be88:	84d1      	strh	r1, [r2, #38]	; 0x26
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d10f      	bne.n	800beae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	68da      	ldr	r2, [r3, #12]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800be9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	68da      	ldr	r2, [r3, #12]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800beac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800beae:	2300      	movs	r3, #0
 800beb0:	e000      	b.n	800beb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800beb2:	2302      	movs	r3, #2
  }
}
 800beb4:	4618      	mov	r0, r3
 800beb6:	3714      	adds	r7, #20
 800beb8:	46bd      	mov	sp, r7
 800beba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bebe:	4770      	bx	lr

0800bec0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b082      	sub	sp, #8
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	68da      	ldr	r2, [r3, #12]
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bed6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2220      	movs	r2, #32
 800bedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bee4:	6878      	ldr	r0, [r7, #4]
 800bee6:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bee8:	2300      	movs	r3, #0
}
 800beea:	4618      	mov	r0, r3
 800beec:	3708      	adds	r7, #8
 800beee:	46bd      	mov	sp, r7
 800bef0:	bd80      	pop	{r7, pc}

0800bef2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bef2:	b580      	push	{r7, lr}
 800bef4:	b08c      	sub	sp, #48	; 0x30
 800bef6:	af00      	add	r7, sp, #0
 800bef8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf00:	b2db      	uxtb	r3, r3
 800bf02:	2b22      	cmp	r3, #34	; 0x22
 800bf04:	f040 80ad 	bne.w	800c062 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	689b      	ldr	r3, [r3, #8]
 800bf0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf10:	d117      	bne.n	800bf42 <UART_Receive_IT+0x50>
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	691b      	ldr	r3, [r3, #16]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d113      	bne.n	800bf42 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf22:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	685b      	ldr	r3, [r3, #4]
 800bf2a:	b29b      	uxth	r3, r3
 800bf2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf30:	b29a      	uxth	r2, r3
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf3a:	1c9a      	adds	r2, r3, #2
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf40:	e026      	b.n	800bf90 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf46:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf48:	2300      	movs	r3, #0
 800bf4a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	689b      	ldr	r3, [r3, #8]
 800bf50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf54:	d007      	beq.n	800bf66 <UART_Receive_IT+0x74>
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	689b      	ldr	r3, [r3, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10a      	bne.n	800bf74 <UART_Receive_IT+0x82>
 800bf5e:	687b      	ldr	r3, [r7, #4]
 800bf60:	691b      	ldr	r3, [r3, #16]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d106      	bne.n	800bf74 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	685b      	ldr	r3, [r3, #4]
 800bf6c:	b2da      	uxtb	r2, r3
 800bf6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf70:	701a      	strb	r2, [r3, #0]
 800bf72:	e008      	b.n	800bf86 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	685b      	ldr	r3, [r3, #4]
 800bf7a:	b2db      	uxtb	r3, r3
 800bf7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bf80:	b2da      	uxtb	r2, r3
 800bf82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf84:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	1c5a      	adds	r2, r3, #1
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	3b01      	subs	r3, #1
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	687a      	ldr	r2, [r7, #4]
 800bf9c:	4619      	mov	r1, r3
 800bf9e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bfa0:	2b00      	cmp	r3, #0
 800bfa2:	d15c      	bne.n	800c05e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68da      	ldr	r2, [r3, #12]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	f022 0220 	bic.w	r2, r2, #32
 800bfb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	68da      	ldr	r2, [r3, #12]
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfc2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	695a      	ldr	r2, [r3, #20]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 0201 	bic.w	r2, r2, #1
 800bfd2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	2220      	movs	r2, #32
 800bfd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bfe0:	2b01      	cmp	r3, #1
 800bfe2:	d136      	bne.n	800c052 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	330c      	adds	r3, #12
 800bff0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bff2:	697b      	ldr	r3, [r7, #20]
 800bff4:	e853 3f00 	ldrex	r3, [r3]
 800bff8:	613b      	str	r3, [r7, #16]
   return(result);
 800bffa:	693b      	ldr	r3, [r7, #16]
 800bffc:	f023 0310 	bic.w	r3, r3, #16
 800c000:	627b      	str	r3, [r7, #36]	; 0x24
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	330c      	adds	r3, #12
 800c008:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c00a:	623a      	str	r2, [r7, #32]
 800c00c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c00e:	69f9      	ldr	r1, [r7, #28]
 800c010:	6a3a      	ldr	r2, [r7, #32]
 800c012:	e841 2300 	strex	r3, r2, [r1]
 800c016:	61bb      	str	r3, [r7, #24]
   return(result);
 800c018:	69bb      	ldr	r3, [r7, #24]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d1e5      	bne.n	800bfea <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	f003 0310 	and.w	r3, r3, #16
 800c028:	2b10      	cmp	r3, #16
 800c02a:	d10a      	bne.n	800c042 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c02c:	2300      	movs	r3, #0
 800c02e:	60fb      	str	r3, [r7, #12]
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	60fb      	str	r3, [r7, #12]
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	685b      	ldr	r3, [r3, #4]
 800c03e:	60fb      	str	r3, [r7, #12]
 800c040:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c046:	687a      	ldr	r2, [r7, #4]
 800c048:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c04a:	4611      	mov	r1, r2
 800c04c:	6878      	ldr	r0, [r7, #4]
 800c04e:	4798      	blx	r3
 800c050:	e003      	b.n	800c05a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c056:	6878      	ldr	r0, [r7, #4]
 800c058:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c05a:	2300      	movs	r3, #0
 800c05c:	e002      	b.n	800c064 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c05e:	2300      	movs	r3, #0
 800c060:	e000      	b.n	800c064 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c062:	2302      	movs	r3, #2
  }
}
 800c064:	4618      	mov	r0, r3
 800c066:	3730      	adds	r7, #48	; 0x30
 800c068:	46bd      	mov	sp, r7
 800c06a:	bd80      	pop	{r7, pc}

0800c06c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c06c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c070:	b0c0      	sub	sp, #256	; 0x100
 800c072:	af00      	add	r7, sp, #0
 800c074:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	691b      	ldr	r3, [r3, #16]
 800c080:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c088:	68d9      	ldr	r1, [r3, #12]
 800c08a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c08e:	681a      	ldr	r2, [r3, #0]
 800c090:	ea40 0301 	orr.w	r3, r0, r1
 800c094:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c096:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c09a:	689a      	ldr	r2, [r3, #8]
 800c09c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a0:	691b      	ldr	r3, [r3, #16]
 800c0a2:	431a      	orrs	r2, r3
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0b0:	69db      	ldr	r3, [r3, #28]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68db      	ldr	r3, [r3, #12]
 800c0c0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c0c4:	f021 010c 	bic.w	r1, r1, #12
 800c0c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0cc:	681a      	ldr	r2, [r3, #0]
 800c0ce:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0d2:	430b      	orrs	r3, r1
 800c0d4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	695b      	ldr	r3, [r3, #20]
 800c0de:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e6:	6999      	ldr	r1, [r3, #24]
 800c0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	ea40 0301 	orr.w	r3, r0, r1
 800c0f2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	4b8f      	ldr	r3, [pc, #572]	; (800c338 <UART_SetConfig+0x2cc>)
 800c0fc:	429a      	cmp	r2, r3
 800c0fe:	d005      	beq.n	800c10c <UART_SetConfig+0xa0>
 800c100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	4b8d      	ldr	r3, [pc, #564]	; (800c33c <UART_SetConfig+0x2d0>)
 800c108:	429a      	cmp	r2, r3
 800c10a:	d104      	bne.n	800c116 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c10c:	f7fd f9b0 	bl	8009470 <HAL_RCC_GetPCLK2Freq>
 800c110:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c114:	e003      	b.n	800c11e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c116:	f7fd f997 	bl	8009448 <HAL_RCC_GetPCLK1Freq>
 800c11a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c11e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c128:	f040 810c 	bne.w	800c344 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c12c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c130:	2200      	movs	r2, #0
 800c132:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c136:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c13a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c13e:	4622      	mov	r2, r4
 800c140:	462b      	mov	r3, r5
 800c142:	1891      	adds	r1, r2, r2
 800c144:	65b9      	str	r1, [r7, #88]	; 0x58
 800c146:	415b      	adcs	r3, r3
 800c148:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c14a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c14e:	4621      	mov	r1, r4
 800c150:	eb12 0801 	adds.w	r8, r2, r1
 800c154:	4629      	mov	r1, r5
 800c156:	eb43 0901 	adc.w	r9, r3, r1
 800c15a:	f04f 0200 	mov.w	r2, #0
 800c15e:	f04f 0300 	mov.w	r3, #0
 800c162:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c166:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c16a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c16e:	4690      	mov	r8, r2
 800c170:	4699      	mov	r9, r3
 800c172:	4623      	mov	r3, r4
 800c174:	eb18 0303 	adds.w	r3, r8, r3
 800c178:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c17c:	462b      	mov	r3, r5
 800c17e:	eb49 0303 	adc.w	r3, r9, r3
 800c182:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c18a:	685b      	ldr	r3, [r3, #4]
 800c18c:	2200      	movs	r2, #0
 800c18e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c192:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c196:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c19a:	460b      	mov	r3, r1
 800c19c:	18db      	adds	r3, r3, r3
 800c19e:	653b      	str	r3, [r7, #80]	; 0x50
 800c1a0:	4613      	mov	r3, r2
 800c1a2:	eb42 0303 	adc.w	r3, r2, r3
 800c1a6:	657b      	str	r3, [r7, #84]	; 0x54
 800c1a8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c1ac:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c1b0:	f7f4 fd72 	bl	8000c98 <__aeabi_uldivmod>
 800c1b4:	4602      	mov	r2, r0
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4b61      	ldr	r3, [pc, #388]	; (800c340 <UART_SetConfig+0x2d4>)
 800c1ba:	fba3 2302 	umull	r2, r3, r3, r2
 800c1be:	095b      	lsrs	r3, r3, #5
 800c1c0:	011c      	lsls	r4, r3, #4
 800c1c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1cc:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c1d0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c1d4:	4642      	mov	r2, r8
 800c1d6:	464b      	mov	r3, r9
 800c1d8:	1891      	adds	r1, r2, r2
 800c1da:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1dc:	415b      	adcs	r3, r3
 800c1de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1e0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c1e4:	4641      	mov	r1, r8
 800c1e6:	eb12 0a01 	adds.w	sl, r2, r1
 800c1ea:	4649      	mov	r1, r9
 800c1ec:	eb43 0b01 	adc.w	fp, r3, r1
 800c1f0:	f04f 0200 	mov.w	r2, #0
 800c1f4:	f04f 0300 	mov.w	r3, #0
 800c1f8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c1fc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c200:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c204:	4692      	mov	sl, r2
 800c206:	469b      	mov	fp, r3
 800c208:	4643      	mov	r3, r8
 800c20a:	eb1a 0303 	adds.w	r3, sl, r3
 800c20e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c212:	464b      	mov	r3, r9
 800c214:	eb4b 0303 	adc.w	r3, fp, r3
 800c218:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c21c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	2200      	movs	r2, #0
 800c224:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c228:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c22c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c230:	460b      	mov	r3, r1
 800c232:	18db      	adds	r3, r3, r3
 800c234:	643b      	str	r3, [r7, #64]	; 0x40
 800c236:	4613      	mov	r3, r2
 800c238:	eb42 0303 	adc.w	r3, r2, r3
 800c23c:	647b      	str	r3, [r7, #68]	; 0x44
 800c23e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c242:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c246:	f7f4 fd27 	bl	8000c98 <__aeabi_uldivmod>
 800c24a:	4602      	mov	r2, r0
 800c24c:	460b      	mov	r3, r1
 800c24e:	4611      	mov	r1, r2
 800c250:	4b3b      	ldr	r3, [pc, #236]	; (800c340 <UART_SetConfig+0x2d4>)
 800c252:	fba3 2301 	umull	r2, r3, r3, r1
 800c256:	095b      	lsrs	r3, r3, #5
 800c258:	2264      	movs	r2, #100	; 0x64
 800c25a:	fb02 f303 	mul.w	r3, r2, r3
 800c25e:	1acb      	subs	r3, r1, r3
 800c260:	00db      	lsls	r3, r3, #3
 800c262:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c266:	4b36      	ldr	r3, [pc, #216]	; (800c340 <UART_SetConfig+0x2d4>)
 800c268:	fba3 2302 	umull	r2, r3, r3, r2
 800c26c:	095b      	lsrs	r3, r3, #5
 800c26e:	005b      	lsls	r3, r3, #1
 800c270:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c274:	441c      	add	r4, r3
 800c276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c280:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c284:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c288:	4642      	mov	r2, r8
 800c28a:	464b      	mov	r3, r9
 800c28c:	1891      	adds	r1, r2, r2
 800c28e:	63b9      	str	r1, [r7, #56]	; 0x38
 800c290:	415b      	adcs	r3, r3
 800c292:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c294:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c298:	4641      	mov	r1, r8
 800c29a:	1851      	adds	r1, r2, r1
 800c29c:	6339      	str	r1, [r7, #48]	; 0x30
 800c29e:	4649      	mov	r1, r9
 800c2a0:	414b      	adcs	r3, r1
 800c2a2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2a4:	f04f 0200 	mov.w	r2, #0
 800c2a8:	f04f 0300 	mov.w	r3, #0
 800c2ac:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c2b0:	4659      	mov	r1, fp
 800c2b2:	00cb      	lsls	r3, r1, #3
 800c2b4:	4651      	mov	r1, sl
 800c2b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2ba:	4651      	mov	r1, sl
 800c2bc:	00ca      	lsls	r2, r1, #3
 800c2be:	4610      	mov	r0, r2
 800c2c0:	4619      	mov	r1, r3
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	189b      	adds	r3, r3, r2
 800c2c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2cc:	464b      	mov	r3, r9
 800c2ce:	460a      	mov	r2, r1
 800c2d0:	eb42 0303 	adc.w	r3, r2, r3
 800c2d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2dc:	685b      	ldr	r3, [r3, #4]
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c2e4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c2e8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c2ec:	460b      	mov	r3, r1
 800c2ee:	18db      	adds	r3, r3, r3
 800c2f0:	62bb      	str	r3, [r7, #40]	; 0x28
 800c2f2:	4613      	mov	r3, r2
 800c2f4:	eb42 0303 	adc.w	r3, r2, r3
 800c2f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c2fe:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c302:	f7f4 fcc9 	bl	8000c98 <__aeabi_uldivmod>
 800c306:	4602      	mov	r2, r0
 800c308:	460b      	mov	r3, r1
 800c30a:	4b0d      	ldr	r3, [pc, #52]	; (800c340 <UART_SetConfig+0x2d4>)
 800c30c:	fba3 1302 	umull	r1, r3, r3, r2
 800c310:	095b      	lsrs	r3, r3, #5
 800c312:	2164      	movs	r1, #100	; 0x64
 800c314:	fb01 f303 	mul.w	r3, r1, r3
 800c318:	1ad3      	subs	r3, r2, r3
 800c31a:	00db      	lsls	r3, r3, #3
 800c31c:	3332      	adds	r3, #50	; 0x32
 800c31e:	4a08      	ldr	r2, [pc, #32]	; (800c340 <UART_SetConfig+0x2d4>)
 800c320:	fba2 2303 	umull	r2, r3, r2, r3
 800c324:	095b      	lsrs	r3, r3, #5
 800c326:	f003 0207 	and.w	r2, r3, #7
 800c32a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4422      	add	r2, r4
 800c332:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c334:	e105      	b.n	800c542 <UART_SetConfig+0x4d6>
 800c336:	bf00      	nop
 800c338:	40011000 	.word	0x40011000
 800c33c:	40011400 	.word	0x40011400
 800c340:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c348:	2200      	movs	r2, #0
 800c34a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c34e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c352:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c356:	4642      	mov	r2, r8
 800c358:	464b      	mov	r3, r9
 800c35a:	1891      	adds	r1, r2, r2
 800c35c:	6239      	str	r1, [r7, #32]
 800c35e:	415b      	adcs	r3, r3
 800c360:	627b      	str	r3, [r7, #36]	; 0x24
 800c362:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c366:	4641      	mov	r1, r8
 800c368:	1854      	adds	r4, r2, r1
 800c36a:	4649      	mov	r1, r9
 800c36c:	eb43 0501 	adc.w	r5, r3, r1
 800c370:	f04f 0200 	mov.w	r2, #0
 800c374:	f04f 0300 	mov.w	r3, #0
 800c378:	00eb      	lsls	r3, r5, #3
 800c37a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c37e:	00e2      	lsls	r2, r4, #3
 800c380:	4614      	mov	r4, r2
 800c382:	461d      	mov	r5, r3
 800c384:	4643      	mov	r3, r8
 800c386:	18e3      	adds	r3, r4, r3
 800c388:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c38c:	464b      	mov	r3, r9
 800c38e:	eb45 0303 	adc.w	r3, r5, r3
 800c392:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	2200      	movs	r2, #0
 800c39e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3a2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3a6:	f04f 0200 	mov.w	r2, #0
 800c3aa:	f04f 0300 	mov.w	r3, #0
 800c3ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c3b2:	4629      	mov	r1, r5
 800c3b4:	008b      	lsls	r3, r1, #2
 800c3b6:	4621      	mov	r1, r4
 800c3b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3bc:	4621      	mov	r1, r4
 800c3be:	008a      	lsls	r2, r1, #2
 800c3c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c3c4:	f7f4 fc68 	bl	8000c98 <__aeabi_uldivmod>
 800c3c8:	4602      	mov	r2, r0
 800c3ca:	460b      	mov	r3, r1
 800c3cc:	4b60      	ldr	r3, [pc, #384]	; (800c550 <UART_SetConfig+0x4e4>)
 800c3ce:	fba3 2302 	umull	r2, r3, r3, r2
 800c3d2:	095b      	lsrs	r3, r3, #5
 800c3d4:	011c      	lsls	r4, r3, #4
 800c3d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3da:	2200      	movs	r2, #0
 800c3dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c3e0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c3e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c3e8:	4642      	mov	r2, r8
 800c3ea:	464b      	mov	r3, r9
 800c3ec:	1891      	adds	r1, r2, r2
 800c3ee:	61b9      	str	r1, [r7, #24]
 800c3f0:	415b      	adcs	r3, r3
 800c3f2:	61fb      	str	r3, [r7, #28]
 800c3f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c3f8:	4641      	mov	r1, r8
 800c3fa:	1851      	adds	r1, r2, r1
 800c3fc:	6139      	str	r1, [r7, #16]
 800c3fe:	4649      	mov	r1, r9
 800c400:	414b      	adcs	r3, r1
 800c402:	617b      	str	r3, [r7, #20]
 800c404:	f04f 0200 	mov.w	r2, #0
 800c408:	f04f 0300 	mov.w	r3, #0
 800c40c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c410:	4659      	mov	r1, fp
 800c412:	00cb      	lsls	r3, r1, #3
 800c414:	4651      	mov	r1, sl
 800c416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c41a:	4651      	mov	r1, sl
 800c41c:	00ca      	lsls	r2, r1, #3
 800c41e:	4610      	mov	r0, r2
 800c420:	4619      	mov	r1, r3
 800c422:	4603      	mov	r3, r0
 800c424:	4642      	mov	r2, r8
 800c426:	189b      	adds	r3, r3, r2
 800c428:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c42c:	464b      	mov	r3, r9
 800c42e:	460a      	mov	r2, r1
 800c430:	eb42 0303 	adc.w	r3, r2, r3
 800c434:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c43c:	685b      	ldr	r3, [r3, #4]
 800c43e:	2200      	movs	r2, #0
 800c440:	67bb      	str	r3, [r7, #120]	; 0x78
 800c442:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c444:	f04f 0200 	mov.w	r2, #0
 800c448:	f04f 0300 	mov.w	r3, #0
 800c44c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c450:	4649      	mov	r1, r9
 800c452:	008b      	lsls	r3, r1, #2
 800c454:	4641      	mov	r1, r8
 800c456:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c45a:	4641      	mov	r1, r8
 800c45c:	008a      	lsls	r2, r1, #2
 800c45e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c462:	f7f4 fc19 	bl	8000c98 <__aeabi_uldivmod>
 800c466:	4602      	mov	r2, r0
 800c468:	460b      	mov	r3, r1
 800c46a:	4b39      	ldr	r3, [pc, #228]	; (800c550 <UART_SetConfig+0x4e4>)
 800c46c:	fba3 1302 	umull	r1, r3, r3, r2
 800c470:	095b      	lsrs	r3, r3, #5
 800c472:	2164      	movs	r1, #100	; 0x64
 800c474:	fb01 f303 	mul.w	r3, r1, r3
 800c478:	1ad3      	subs	r3, r2, r3
 800c47a:	011b      	lsls	r3, r3, #4
 800c47c:	3332      	adds	r3, #50	; 0x32
 800c47e:	4a34      	ldr	r2, [pc, #208]	; (800c550 <UART_SetConfig+0x4e4>)
 800c480:	fba2 2303 	umull	r2, r3, r2, r3
 800c484:	095b      	lsrs	r3, r3, #5
 800c486:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c48a:	441c      	add	r4, r3
 800c48c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c490:	2200      	movs	r2, #0
 800c492:	673b      	str	r3, [r7, #112]	; 0x70
 800c494:	677a      	str	r2, [r7, #116]	; 0x74
 800c496:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c49a:	4642      	mov	r2, r8
 800c49c:	464b      	mov	r3, r9
 800c49e:	1891      	adds	r1, r2, r2
 800c4a0:	60b9      	str	r1, [r7, #8]
 800c4a2:	415b      	adcs	r3, r3
 800c4a4:	60fb      	str	r3, [r7, #12]
 800c4a6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4aa:	4641      	mov	r1, r8
 800c4ac:	1851      	adds	r1, r2, r1
 800c4ae:	6039      	str	r1, [r7, #0]
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	414b      	adcs	r3, r1
 800c4b4:	607b      	str	r3, [r7, #4]
 800c4b6:	f04f 0200 	mov.w	r2, #0
 800c4ba:	f04f 0300 	mov.w	r3, #0
 800c4be:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4c2:	4659      	mov	r1, fp
 800c4c4:	00cb      	lsls	r3, r1, #3
 800c4c6:	4651      	mov	r1, sl
 800c4c8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4cc:	4651      	mov	r1, sl
 800c4ce:	00ca      	lsls	r2, r1, #3
 800c4d0:	4610      	mov	r0, r2
 800c4d2:	4619      	mov	r1, r3
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	4642      	mov	r2, r8
 800c4d8:	189b      	adds	r3, r3, r2
 800c4da:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4dc:	464b      	mov	r3, r9
 800c4de:	460a      	mov	r2, r1
 800c4e0:	eb42 0303 	adc.w	r3, r2, r3
 800c4e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c4e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ea:	685b      	ldr	r3, [r3, #4]
 800c4ec:	2200      	movs	r2, #0
 800c4ee:	663b      	str	r3, [r7, #96]	; 0x60
 800c4f0:	667a      	str	r2, [r7, #100]	; 0x64
 800c4f2:	f04f 0200 	mov.w	r2, #0
 800c4f6:	f04f 0300 	mov.w	r3, #0
 800c4fa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c4fe:	4649      	mov	r1, r9
 800c500:	008b      	lsls	r3, r1, #2
 800c502:	4641      	mov	r1, r8
 800c504:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c508:	4641      	mov	r1, r8
 800c50a:	008a      	lsls	r2, r1, #2
 800c50c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c510:	f7f4 fbc2 	bl	8000c98 <__aeabi_uldivmod>
 800c514:	4602      	mov	r2, r0
 800c516:	460b      	mov	r3, r1
 800c518:	4b0d      	ldr	r3, [pc, #52]	; (800c550 <UART_SetConfig+0x4e4>)
 800c51a:	fba3 1302 	umull	r1, r3, r3, r2
 800c51e:	095b      	lsrs	r3, r3, #5
 800c520:	2164      	movs	r1, #100	; 0x64
 800c522:	fb01 f303 	mul.w	r3, r1, r3
 800c526:	1ad3      	subs	r3, r2, r3
 800c528:	011b      	lsls	r3, r3, #4
 800c52a:	3332      	adds	r3, #50	; 0x32
 800c52c:	4a08      	ldr	r2, [pc, #32]	; (800c550 <UART_SetConfig+0x4e4>)
 800c52e:	fba2 2303 	umull	r2, r3, r2, r3
 800c532:	095b      	lsrs	r3, r3, #5
 800c534:	f003 020f 	and.w	r2, r3, #15
 800c538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	4422      	add	r2, r4
 800c540:	609a      	str	r2, [r3, #8]
}
 800c542:	bf00      	nop
 800c544:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c548:	46bd      	mov	sp, r7
 800c54a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c54e:	bf00      	nop
 800c550:	51eb851f 	.word	0x51eb851f

0800c554 <__errno>:
 800c554:	4b01      	ldr	r3, [pc, #4]	; (800c55c <__errno+0x8>)
 800c556:	6818      	ldr	r0, [r3, #0]
 800c558:	4770      	bx	lr
 800c55a:	bf00      	nop
 800c55c:	2000025c 	.word	0x2000025c

0800c560 <__libc_init_array>:
 800c560:	b570      	push	{r4, r5, r6, lr}
 800c562:	4d0d      	ldr	r5, [pc, #52]	; (800c598 <__libc_init_array+0x38>)
 800c564:	4c0d      	ldr	r4, [pc, #52]	; (800c59c <__libc_init_array+0x3c>)
 800c566:	1b64      	subs	r4, r4, r5
 800c568:	10a4      	asrs	r4, r4, #2
 800c56a:	2600      	movs	r6, #0
 800c56c:	42a6      	cmp	r6, r4
 800c56e:	d109      	bne.n	800c584 <__libc_init_array+0x24>
 800c570:	4d0b      	ldr	r5, [pc, #44]	; (800c5a0 <__libc_init_array+0x40>)
 800c572:	4c0c      	ldr	r4, [pc, #48]	; (800c5a4 <__libc_init_array+0x44>)
 800c574:	f005 ffc2 	bl	80124fc <_init>
 800c578:	1b64      	subs	r4, r4, r5
 800c57a:	10a4      	asrs	r4, r4, #2
 800c57c:	2600      	movs	r6, #0
 800c57e:	42a6      	cmp	r6, r4
 800c580:	d105      	bne.n	800c58e <__libc_init_array+0x2e>
 800c582:	bd70      	pop	{r4, r5, r6, pc}
 800c584:	f855 3b04 	ldr.w	r3, [r5], #4
 800c588:	4798      	blx	r3
 800c58a:	3601      	adds	r6, #1
 800c58c:	e7ee      	b.n	800c56c <__libc_init_array+0xc>
 800c58e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c592:	4798      	blx	r3
 800c594:	3601      	adds	r6, #1
 800c596:	e7f2      	b.n	800c57e <__libc_init_array+0x1e>
 800c598:	08012c40 	.word	0x08012c40
 800c59c:	08012c40 	.word	0x08012c40
 800c5a0:	08012c40 	.word	0x08012c40
 800c5a4:	08012c44 	.word	0x08012c44

0800c5a8 <memcpy>:
 800c5a8:	440a      	add	r2, r1
 800c5aa:	4291      	cmp	r1, r2
 800c5ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5b0:	d100      	bne.n	800c5b4 <memcpy+0xc>
 800c5b2:	4770      	bx	lr
 800c5b4:	b510      	push	{r4, lr}
 800c5b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5be:	4291      	cmp	r1, r2
 800c5c0:	d1f9      	bne.n	800c5b6 <memcpy+0xe>
 800c5c2:	bd10      	pop	{r4, pc}

0800c5c4 <memset>:
 800c5c4:	4402      	add	r2, r0
 800c5c6:	4603      	mov	r3, r0
 800c5c8:	4293      	cmp	r3, r2
 800c5ca:	d100      	bne.n	800c5ce <memset+0xa>
 800c5cc:	4770      	bx	lr
 800c5ce:	f803 1b01 	strb.w	r1, [r3], #1
 800c5d2:	e7f9      	b.n	800c5c8 <memset+0x4>

0800c5d4 <__cvt>:
 800c5d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5d8:	ec55 4b10 	vmov	r4, r5, d0
 800c5dc:	2d00      	cmp	r5, #0
 800c5de:	460e      	mov	r6, r1
 800c5e0:	4619      	mov	r1, r3
 800c5e2:	462b      	mov	r3, r5
 800c5e4:	bfbb      	ittet	lt
 800c5e6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c5ea:	461d      	movlt	r5, r3
 800c5ec:	2300      	movge	r3, #0
 800c5ee:	232d      	movlt	r3, #45	; 0x2d
 800c5f0:	700b      	strb	r3, [r1, #0]
 800c5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c5f4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c5f8:	4691      	mov	r9, r2
 800c5fa:	f023 0820 	bic.w	r8, r3, #32
 800c5fe:	bfbc      	itt	lt
 800c600:	4622      	movlt	r2, r4
 800c602:	4614      	movlt	r4, r2
 800c604:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c608:	d005      	beq.n	800c616 <__cvt+0x42>
 800c60a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c60e:	d100      	bne.n	800c612 <__cvt+0x3e>
 800c610:	3601      	adds	r6, #1
 800c612:	2102      	movs	r1, #2
 800c614:	e000      	b.n	800c618 <__cvt+0x44>
 800c616:	2103      	movs	r1, #3
 800c618:	ab03      	add	r3, sp, #12
 800c61a:	9301      	str	r3, [sp, #4]
 800c61c:	ab02      	add	r3, sp, #8
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	ec45 4b10 	vmov	d0, r4, r5
 800c624:	4653      	mov	r3, sl
 800c626:	4632      	mov	r2, r6
 800c628:	f001 fdae 	bl	800e188 <_dtoa_r>
 800c62c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c630:	4607      	mov	r7, r0
 800c632:	d102      	bne.n	800c63a <__cvt+0x66>
 800c634:	f019 0f01 	tst.w	r9, #1
 800c638:	d022      	beq.n	800c680 <__cvt+0xac>
 800c63a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c63e:	eb07 0906 	add.w	r9, r7, r6
 800c642:	d110      	bne.n	800c666 <__cvt+0x92>
 800c644:	783b      	ldrb	r3, [r7, #0]
 800c646:	2b30      	cmp	r3, #48	; 0x30
 800c648:	d10a      	bne.n	800c660 <__cvt+0x8c>
 800c64a:	2200      	movs	r2, #0
 800c64c:	2300      	movs	r3, #0
 800c64e:	4620      	mov	r0, r4
 800c650:	4629      	mov	r1, r5
 800c652:	f7f4 fa41 	bl	8000ad8 <__aeabi_dcmpeq>
 800c656:	b918      	cbnz	r0, 800c660 <__cvt+0x8c>
 800c658:	f1c6 0601 	rsb	r6, r6, #1
 800c65c:	f8ca 6000 	str.w	r6, [sl]
 800c660:	f8da 3000 	ldr.w	r3, [sl]
 800c664:	4499      	add	r9, r3
 800c666:	2200      	movs	r2, #0
 800c668:	2300      	movs	r3, #0
 800c66a:	4620      	mov	r0, r4
 800c66c:	4629      	mov	r1, r5
 800c66e:	f7f4 fa33 	bl	8000ad8 <__aeabi_dcmpeq>
 800c672:	b108      	cbz	r0, 800c678 <__cvt+0xa4>
 800c674:	f8cd 900c 	str.w	r9, [sp, #12]
 800c678:	2230      	movs	r2, #48	; 0x30
 800c67a:	9b03      	ldr	r3, [sp, #12]
 800c67c:	454b      	cmp	r3, r9
 800c67e:	d307      	bcc.n	800c690 <__cvt+0xbc>
 800c680:	9b03      	ldr	r3, [sp, #12]
 800c682:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c684:	1bdb      	subs	r3, r3, r7
 800c686:	4638      	mov	r0, r7
 800c688:	6013      	str	r3, [r2, #0]
 800c68a:	b004      	add	sp, #16
 800c68c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c690:	1c59      	adds	r1, r3, #1
 800c692:	9103      	str	r1, [sp, #12]
 800c694:	701a      	strb	r2, [r3, #0]
 800c696:	e7f0      	b.n	800c67a <__cvt+0xa6>

0800c698 <__exponent>:
 800c698:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c69a:	4603      	mov	r3, r0
 800c69c:	2900      	cmp	r1, #0
 800c69e:	bfb8      	it	lt
 800c6a0:	4249      	neglt	r1, r1
 800c6a2:	f803 2b02 	strb.w	r2, [r3], #2
 800c6a6:	bfb4      	ite	lt
 800c6a8:	222d      	movlt	r2, #45	; 0x2d
 800c6aa:	222b      	movge	r2, #43	; 0x2b
 800c6ac:	2909      	cmp	r1, #9
 800c6ae:	7042      	strb	r2, [r0, #1]
 800c6b0:	dd2a      	ble.n	800c708 <__exponent+0x70>
 800c6b2:	f10d 0407 	add.w	r4, sp, #7
 800c6b6:	46a4      	mov	ip, r4
 800c6b8:	270a      	movs	r7, #10
 800c6ba:	46a6      	mov	lr, r4
 800c6bc:	460a      	mov	r2, r1
 800c6be:	fb91 f6f7 	sdiv	r6, r1, r7
 800c6c2:	fb07 1516 	mls	r5, r7, r6, r1
 800c6c6:	3530      	adds	r5, #48	; 0x30
 800c6c8:	2a63      	cmp	r2, #99	; 0x63
 800c6ca:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6ce:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	dcf1      	bgt.n	800c6ba <__exponent+0x22>
 800c6d6:	3130      	adds	r1, #48	; 0x30
 800c6d8:	f1ae 0502 	sub.w	r5, lr, #2
 800c6dc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c6e0:	1c44      	adds	r4, r0, #1
 800c6e2:	4629      	mov	r1, r5
 800c6e4:	4561      	cmp	r1, ip
 800c6e6:	d30a      	bcc.n	800c6fe <__exponent+0x66>
 800c6e8:	f10d 0209 	add.w	r2, sp, #9
 800c6ec:	eba2 020e 	sub.w	r2, r2, lr
 800c6f0:	4565      	cmp	r5, ip
 800c6f2:	bf88      	it	hi
 800c6f4:	2200      	movhi	r2, #0
 800c6f6:	4413      	add	r3, r2
 800c6f8:	1a18      	subs	r0, r3, r0
 800c6fa:	b003      	add	sp, #12
 800c6fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c6fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c702:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c706:	e7ed      	b.n	800c6e4 <__exponent+0x4c>
 800c708:	2330      	movs	r3, #48	; 0x30
 800c70a:	3130      	adds	r1, #48	; 0x30
 800c70c:	7083      	strb	r3, [r0, #2]
 800c70e:	70c1      	strb	r1, [r0, #3]
 800c710:	1d03      	adds	r3, r0, #4
 800c712:	e7f1      	b.n	800c6f8 <__exponent+0x60>

0800c714 <_printf_float>:
 800c714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c718:	ed2d 8b02 	vpush	{d8}
 800c71c:	b08d      	sub	sp, #52	; 0x34
 800c71e:	460c      	mov	r4, r1
 800c720:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c724:	4616      	mov	r6, r2
 800c726:	461f      	mov	r7, r3
 800c728:	4605      	mov	r5, r0
 800c72a:	f002 fe8b 	bl	800f444 <_localeconv_r>
 800c72e:	f8d0 a000 	ldr.w	sl, [r0]
 800c732:	4650      	mov	r0, sl
 800c734:	f7f3 fd54 	bl	80001e0 <strlen>
 800c738:	2300      	movs	r3, #0
 800c73a:	930a      	str	r3, [sp, #40]	; 0x28
 800c73c:	6823      	ldr	r3, [r4, #0]
 800c73e:	9305      	str	r3, [sp, #20]
 800c740:	f8d8 3000 	ldr.w	r3, [r8]
 800c744:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c748:	3307      	adds	r3, #7
 800c74a:	f023 0307 	bic.w	r3, r3, #7
 800c74e:	f103 0208 	add.w	r2, r3, #8
 800c752:	f8c8 2000 	str.w	r2, [r8]
 800c756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c75a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c75e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c762:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c766:	9307      	str	r3, [sp, #28]
 800c768:	f8cd 8018 	str.w	r8, [sp, #24]
 800c76c:	ee08 0a10 	vmov	s16, r0
 800c770:	4b9f      	ldr	r3, [pc, #636]	; (800c9f0 <_printf_float+0x2dc>)
 800c772:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c776:	f04f 32ff 	mov.w	r2, #4294967295
 800c77a:	f7f4 f9df 	bl	8000b3c <__aeabi_dcmpun>
 800c77e:	bb88      	cbnz	r0, 800c7e4 <_printf_float+0xd0>
 800c780:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c784:	4b9a      	ldr	r3, [pc, #616]	; (800c9f0 <_printf_float+0x2dc>)
 800c786:	f04f 32ff 	mov.w	r2, #4294967295
 800c78a:	f7f4 f9b9 	bl	8000b00 <__aeabi_dcmple>
 800c78e:	bb48      	cbnz	r0, 800c7e4 <_printf_float+0xd0>
 800c790:	2200      	movs	r2, #0
 800c792:	2300      	movs	r3, #0
 800c794:	4640      	mov	r0, r8
 800c796:	4649      	mov	r1, r9
 800c798:	f7f4 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800c79c:	b110      	cbz	r0, 800c7a4 <_printf_float+0x90>
 800c79e:	232d      	movs	r3, #45	; 0x2d
 800c7a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7a4:	4b93      	ldr	r3, [pc, #588]	; (800c9f4 <_printf_float+0x2e0>)
 800c7a6:	4894      	ldr	r0, [pc, #592]	; (800c9f8 <_printf_float+0x2e4>)
 800c7a8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7ac:	bf94      	ite	ls
 800c7ae:	4698      	movls	r8, r3
 800c7b0:	4680      	movhi	r8, r0
 800c7b2:	2303      	movs	r3, #3
 800c7b4:	6123      	str	r3, [r4, #16]
 800c7b6:	9b05      	ldr	r3, [sp, #20]
 800c7b8:	f023 0204 	bic.w	r2, r3, #4
 800c7bc:	6022      	str	r2, [r4, #0]
 800c7be:	f04f 0900 	mov.w	r9, #0
 800c7c2:	9700      	str	r7, [sp, #0]
 800c7c4:	4633      	mov	r3, r6
 800c7c6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7c8:	4621      	mov	r1, r4
 800c7ca:	4628      	mov	r0, r5
 800c7cc:	f000 f9d8 	bl	800cb80 <_printf_common>
 800c7d0:	3001      	adds	r0, #1
 800c7d2:	f040 8090 	bne.w	800c8f6 <_printf_float+0x1e2>
 800c7d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7da:	b00d      	add	sp, #52	; 0x34
 800c7dc:	ecbd 8b02 	vpop	{d8}
 800c7e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7e4:	4642      	mov	r2, r8
 800c7e6:	464b      	mov	r3, r9
 800c7e8:	4640      	mov	r0, r8
 800c7ea:	4649      	mov	r1, r9
 800c7ec:	f7f4 f9a6 	bl	8000b3c <__aeabi_dcmpun>
 800c7f0:	b140      	cbz	r0, 800c804 <_printf_float+0xf0>
 800c7f2:	464b      	mov	r3, r9
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	bfbc      	itt	lt
 800c7f8:	232d      	movlt	r3, #45	; 0x2d
 800c7fa:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c7fe:	487f      	ldr	r0, [pc, #508]	; (800c9fc <_printf_float+0x2e8>)
 800c800:	4b7f      	ldr	r3, [pc, #508]	; (800ca00 <_printf_float+0x2ec>)
 800c802:	e7d1      	b.n	800c7a8 <_printf_float+0x94>
 800c804:	6863      	ldr	r3, [r4, #4]
 800c806:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c80a:	9206      	str	r2, [sp, #24]
 800c80c:	1c5a      	adds	r2, r3, #1
 800c80e:	d13f      	bne.n	800c890 <_printf_float+0x17c>
 800c810:	2306      	movs	r3, #6
 800c812:	6063      	str	r3, [r4, #4]
 800c814:	9b05      	ldr	r3, [sp, #20]
 800c816:	6861      	ldr	r1, [r4, #4]
 800c818:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c81c:	2300      	movs	r3, #0
 800c81e:	9303      	str	r3, [sp, #12]
 800c820:	ab0a      	add	r3, sp, #40	; 0x28
 800c822:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c826:	ab09      	add	r3, sp, #36	; 0x24
 800c828:	ec49 8b10 	vmov	d0, r8, r9
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	6022      	str	r2, [r4, #0]
 800c830:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c834:	4628      	mov	r0, r5
 800c836:	f7ff fecd 	bl	800c5d4 <__cvt>
 800c83a:	9b06      	ldr	r3, [sp, #24]
 800c83c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c83e:	2b47      	cmp	r3, #71	; 0x47
 800c840:	4680      	mov	r8, r0
 800c842:	d108      	bne.n	800c856 <_printf_float+0x142>
 800c844:	1cc8      	adds	r0, r1, #3
 800c846:	db02      	blt.n	800c84e <_printf_float+0x13a>
 800c848:	6863      	ldr	r3, [r4, #4]
 800c84a:	4299      	cmp	r1, r3
 800c84c:	dd41      	ble.n	800c8d2 <_printf_float+0x1be>
 800c84e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c852:	fa5f fb8b 	uxtb.w	fp, fp
 800c856:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c85a:	d820      	bhi.n	800c89e <_printf_float+0x18a>
 800c85c:	3901      	subs	r1, #1
 800c85e:	465a      	mov	r2, fp
 800c860:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c864:	9109      	str	r1, [sp, #36]	; 0x24
 800c866:	f7ff ff17 	bl	800c698 <__exponent>
 800c86a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c86c:	1813      	adds	r3, r2, r0
 800c86e:	2a01      	cmp	r2, #1
 800c870:	4681      	mov	r9, r0
 800c872:	6123      	str	r3, [r4, #16]
 800c874:	dc02      	bgt.n	800c87c <_printf_float+0x168>
 800c876:	6822      	ldr	r2, [r4, #0]
 800c878:	07d2      	lsls	r2, r2, #31
 800c87a:	d501      	bpl.n	800c880 <_printf_float+0x16c>
 800c87c:	3301      	adds	r3, #1
 800c87e:	6123      	str	r3, [r4, #16]
 800c880:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c884:	2b00      	cmp	r3, #0
 800c886:	d09c      	beq.n	800c7c2 <_printf_float+0xae>
 800c888:	232d      	movs	r3, #45	; 0x2d
 800c88a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c88e:	e798      	b.n	800c7c2 <_printf_float+0xae>
 800c890:	9a06      	ldr	r2, [sp, #24]
 800c892:	2a47      	cmp	r2, #71	; 0x47
 800c894:	d1be      	bne.n	800c814 <_printf_float+0x100>
 800c896:	2b00      	cmp	r3, #0
 800c898:	d1bc      	bne.n	800c814 <_printf_float+0x100>
 800c89a:	2301      	movs	r3, #1
 800c89c:	e7b9      	b.n	800c812 <_printf_float+0xfe>
 800c89e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8a2:	d118      	bne.n	800c8d6 <_printf_float+0x1c2>
 800c8a4:	2900      	cmp	r1, #0
 800c8a6:	6863      	ldr	r3, [r4, #4]
 800c8a8:	dd0b      	ble.n	800c8c2 <_printf_float+0x1ae>
 800c8aa:	6121      	str	r1, [r4, #16]
 800c8ac:	b913      	cbnz	r3, 800c8b4 <_printf_float+0x1a0>
 800c8ae:	6822      	ldr	r2, [r4, #0]
 800c8b0:	07d0      	lsls	r0, r2, #31
 800c8b2:	d502      	bpl.n	800c8ba <_printf_float+0x1a6>
 800c8b4:	3301      	adds	r3, #1
 800c8b6:	440b      	add	r3, r1
 800c8b8:	6123      	str	r3, [r4, #16]
 800c8ba:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8bc:	f04f 0900 	mov.w	r9, #0
 800c8c0:	e7de      	b.n	800c880 <_printf_float+0x16c>
 800c8c2:	b913      	cbnz	r3, 800c8ca <_printf_float+0x1b6>
 800c8c4:	6822      	ldr	r2, [r4, #0]
 800c8c6:	07d2      	lsls	r2, r2, #31
 800c8c8:	d501      	bpl.n	800c8ce <_printf_float+0x1ba>
 800c8ca:	3302      	adds	r3, #2
 800c8cc:	e7f4      	b.n	800c8b8 <_printf_float+0x1a4>
 800c8ce:	2301      	movs	r3, #1
 800c8d0:	e7f2      	b.n	800c8b8 <_printf_float+0x1a4>
 800c8d2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c8d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8d8:	4299      	cmp	r1, r3
 800c8da:	db05      	blt.n	800c8e8 <_printf_float+0x1d4>
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	6121      	str	r1, [r4, #16]
 800c8e0:	07d8      	lsls	r0, r3, #31
 800c8e2:	d5ea      	bpl.n	800c8ba <_printf_float+0x1a6>
 800c8e4:	1c4b      	adds	r3, r1, #1
 800c8e6:	e7e7      	b.n	800c8b8 <_printf_float+0x1a4>
 800c8e8:	2900      	cmp	r1, #0
 800c8ea:	bfd4      	ite	le
 800c8ec:	f1c1 0202 	rsble	r2, r1, #2
 800c8f0:	2201      	movgt	r2, #1
 800c8f2:	4413      	add	r3, r2
 800c8f4:	e7e0      	b.n	800c8b8 <_printf_float+0x1a4>
 800c8f6:	6823      	ldr	r3, [r4, #0]
 800c8f8:	055a      	lsls	r2, r3, #21
 800c8fa:	d407      	bmi.n	800c90c <_printf_float+0x1f8>
 800c8fc:	6923      	ldr	r3, [r4, #16]
 800c8fe:	4642      	mov	r2, r8
 800c900:	4631      	mov	r1, r6
 800c902:	4628      	mov	r0, r5
 800c904:	47b8      	blx	r7
 800c906:	3001      	adds	r0, #1
 800c908:	d12c      	bne.n	800c964 <_printf_float+0x250>
 800c90a:	e764      	b.n	800c7d6 <_printf_float+0xc2>
 800c90c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c910:	f240 80e0 	bls.w	800cad4 <_printf_float+0x3c0>
 800c914:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c918:	2200      	movs	r2, #0
 800c91a:	2300      	movs	r3, #0
 800c91c:	f7f4 f8dc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c920:	2800      	cmp	r0, #0
 800c922:	d034      	beq.n	800c98e <_printf_float+0x27a>
 800c924:	4a37      	ldr	r2, [pc, #220]	; (800ca04 <_printf_float+0x2f0>)
 800c926:	2301      	movs	r3, #1
 800c928:	4631      	mov	r1, r6
 800c92a:	4628      	mov	r0, r5
 800c92c:	47b8      	blx	r7
 800c92e:	3001      	adds	r0, #1
 800c930:	f43f af51 	beq.w	800c7d6 <_printf_float+0xc2>
 800c934:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c938:	429a      	cmp	r2, r3
 800c93a:	db02      	blt.n	800c942 <_printf_float+0x22e>
 800c93c:	6823      	ldr	r3, [r4, #0]
 800c93e:	07d8      	lsls	r0, r3, #31
 800c940:	d510      	bpl.n	800c964 <_printf_float+0x250>
 800c942:	ee18 3a10 	vmov	r3, s16
 800c946:	4652      	mov	r2, sl
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	f43f af41 	beq.w	800c7d6 <_printf_float+0xc2>
 800c954:	f04f 0800 	mov.w	r8, #0
 800c958:	f104 091a 	add.w	r9, r4, #26
 800c95c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c95e:	3b01      	subs	r3, #1
 800c960:	4543      	cmp	r3, r8
 800c962:	dc09      	bgt.n	800c978 <_printf_float+0x264>
 800c964:	6823      	ldr	r3, [r4, #0]
 800c966:	079b      	lsls	r3, r3, #30
 800c968:	f100 8105 	bmi.w	800cb76 <_printf_float+0x462>
 800c96c:	68e0      	ldr	r0, [r4, #12]
 800c96e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c970:	4298      	cmp	r0, r3
 800c972:	bfb8      	it	lt
 800c974:	4618      	movlt	r0, r3
 800c976:	e730      	b.n	800c7da <_printf_float+0xc6>
 800c978:	2301      	movs	r3, #1
 800c97a:	464a      	mov	r2, r9
 800c97c:	4631      	mov	r1, r6
 800c97e:	4628      	mov	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	3001      	adds	r0, #1
 800c984:	f43f af27 	beq.w	800c7d6 <_printf_float+0xc2>
 800c988:	f108 0801 	add.w	r8, r8, #1
 800c98c:	e7e6      	b.n	800c95c <_printf_float+0x248>
 800c98e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c990:	2b00      	cmp	r3, #0
 800c992:	dc39      	bgt.n	800ca08 <_printf_float+0x2f4>
 800c994:	4a1b      	ldr	r2, [pc, #108]	; (800ca04 <_printf_float+0x2f0>)
 800c996:	2301      	movs	r3, #1
 800c998:	4631      	mov	r1, r6
 800c99a:	4628      	mov	r0, r5
 800c99c:	47b8      	blx	r7
 800c99e:	3001      	adds	r0, #1
 800c9a0:	f43f af19 	beq.w	800c7d6 <_printf_float+0xc2>
 800c9a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9a8:	4313      	orrs	r3, r2
 800c9aa:	d102      	bne.n	800c9b2 <_printf_float+0x29e>
 800c9ac:	6823      	ldr	r3, [r4, #0]
 800c9ae:	07d9      	lsls	r1, r3, #31
 800c9b0:	d5d8      	bpl.n	800c964 <_printf_float+0x250>
 800c9b2:	ee18 3a10 	vmov	r3, s16
 800c9b6:	4652      	mov	r2, sl
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f43f af09 	beq.w	800c7d6 <_printf_float+0xc2>
 800c9c4:	f04f 0900 	mov.w	r9, #0
 800c9c8:	f104 0a1a 	add.w	sl, r4, #26
 800c9cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ce:	425b      	negs	r3, r3
 800c9d0:	454b      	cmp	r3, r9
 800c9d2:	dc01      	bgt.n	800c9d8 <_printf_float+0x2c4>
 800c9d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9d6:	e792      	b.n	800c8fe <_printf_float+0x1ea>
 800c9d8:	2301      	movs	r3, #1
 800c9da:	4652      	mov	r2, sl
 800c9dc:	4631      	mov	r1, r6
 800c9de:	4628      	mov	r0, r5
 800c9e0:	47b8      	blx	r7
 800c9e2:	3001      	adds	r0, #1
 800c9e4:	f43f aef7 	beq.w	800c7d6 <_printf_float+0xc2>
 800c9e8:	f109 0901 	add.w	r9, r9, #1
 800c9ec:	e7ee      	b.n	800c9cc <_printf_float+0x2b8>
 800c9ee:	bf00      	nop
 800c9f0:	7fefffff 	.word	0x7fefffff
 800c9f4:	0801254c 	.word	0x0801254c
 800c9f8:	08012550 	.word	0x08012550
 800c9fc:	08012558 	.word	0x08012558
 800ca00:	08012554 	.word	0x08012554
 800ca04:	0801255c 	.word	0x0801255c
 800ca08:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca0a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca0c:	429a      	cmp	r2, r3
 800ca0e:	bfa8      	it	ge
 800ca10:	461a      	movge	r2, r3
 800ca12:	2a00      	cmp	r2, #0
 800ca14:	4691      	mov	r9, r2
 800ca16:	dc37      	bgt.n	800ca88 <_printf_float+0x374>
 800ca18:	f04f 0b00 	mov.w	fp, #0
 800ca1c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca20:	f104 021a 	add.w	r2, r4, #26
 800ca24:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca26:	9305      	str	r3, [sp, #20]
 800ca28:	eba3 0309 	sub.w	r3, r3, r9
 800ca2c:	455b      	cmp	r3, fp
 800ca2e:	dc33      	bgt.n	800ca98 <_printf_float+0x384>
 800ca30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca34:	429a      	cmp	r2, r3
 800ca36:	db3b      	blt.n	800cab0 <_printf_float+0x39c>
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	07da      	lsls	r2, r3, #31
 800ca3c:	d438      	bmi.n	800cab0 <_printf_float+0x39c>
 800ca3e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca40:	9a05      	ldr	r2, [sp, #20]
 800ca42:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca44:	1a9a      	subs	r2, r3, r2
 800ca46:	eba3 0901 	sub.w	r9, r3, r1
 800ca4a:	4591      	cmp	r9, r2
 800ca4c:	bfa8      	it	ge
 800ca4e:	4691      	movge	r9, r2
 800ca50:	f1b9 0f00 	cmp.w	r9, #0
 800ca54:	dc35      	bgt.n	800cac2 <_printf_float+0x3ae>
 800ca56:	f04f 0800 	mov.w	r8, #0
 800ca5a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca5e:	f104 0a1a 	add.w	sl, r4, #26
 800ca62:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca66:	1a9b      	subs	r3, r3, r2
 800ca68:	eba3 0309 	sub.w	r3, r3, r9
 800ca6c:	4543      	cmp	r3, r8
 800ca6e:	f77f af79 	ble.w	800c964 <_printf_float+0x250>
 800ca72:	2301      	movs	r3, #1
 800ca74:	4652      	mov	r2, sl
 800ca76:	4631      	mov	r1, r6
 800ca78:	4628      	mov	r0, r5
 800ca7a:	47b8      	blx	r7
 800ca7c:	3001      	adds	r0, #1
 800ca7e:	f43f aeaa 	beq.w	800c7d6 <_printf_float+0xc2>
 800ca82:	f108 0801 	add.w	r8, r8, #1
 800ca86:	e7ec      	b.n	800ca62 <_printf_float+0x34e>
 800ca88:	4613      	mov	r3, r2
 800ca8a:	4631      	mov	r1, r6
 800ca8c:	4642      	mov	r2, r8
 800ca8e:	4628      	mov	r0, r5
 800ca90:	47b8      	blx	r7
 800ca92:	3001      	adds	r0, #1
 800ca94:	d1c0      	bne.n	800ca18 <_printf_float+0x304>
 800ca96:	e69e      	b.n	800c7d6 <_printf_float+0xc2>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4631      	mov	r1, r6
 800ca9c:	4628      	mov	r0, r5
 800ca9e:	9205      	str	r2, [sp, #20]
 800caa0:	47b8      	blx	r7
 800caa2:	3001      	adds	r0, #1
 800caa4:	f43f ae97 	beq.w	800c7d6 <_printf_float+0xc2>
 800caa8:	9a05      	ldr	r2, [sp, #20]
 800caaa:	f10b 0b01 	add.w	fp, fp, #1
 800caae:	e7b9      	b.n	800ca24 <_printf_float+0x310>
 800cab0:	ee18 3a10 	vmov	r3, s16
 800cab4:	4652      	mov	r2, sl
 800cab6:	4631      	mov	r1, r6
 800cab8:	4628      	mov	r0, r5
 800caba:	47b8      	blx	r7
 800cabc:	3001      	adds	r0, #1
 800cabe:	d1be      	bne.n	800ca3e <_printf_float+0x32a>
 800cac0:	e689      	b.n	800c7d6 <_printf_float+0xc2>
 800cac2:	9a05      	ldr	r2, [sp, #20]
 800cac4:	464b      	mov	r3, r9
 800cac6:	4442      	add	r2, r8
 800cac8:	4631      	mov	r1, r6
 800caca:	4628      	mov	r0, r5
 800cacc:	47b8      	blx	r7
 800cace:	3001      	adds	r0, #1
 800cad0:	d1c1      	bne.n	800ca56 <_printf_float+0x342>
 800cad2:	e680      	b.n	800c7d6 <_printf_float+0xc2>
 800cad4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cad6:	2a01      	cmp	r2, #1
 800cad8:	dc01      	bgt.n	800cade <_printf_float+0x3ca>
 800cada:	07db      	lsls	r3, r3, #31
 800cadc:	d538      	bpl.n	800cb50 <_printf_float+0x43c>
 800cade:	2301      	movs	r3, #1
 800cae0:	4642      	mov	r2, r8
 800cae2:	4631      	mov	r1, r6
 800cae4:	4628      	mov	r0, r5
 800cae6:	47b8      	blx	r7
 800cae8:	3001      	adds	r0, #1
 800caea:	f43f ae74 	beq.w	800c7d6 <_printf_float+0xc2>
 800caee:	ee18 3a10 	vmov	r3, s16
 800caf2:	4652      	mov	r2, sl
 800caf4:	4631      	mov	r1, r6
 800caf6:	4628      	mov	r0, r5
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	f43f ae6b 	beq.w	800c7d6 <_printf_float+0xc2>
 800cb00:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb04:	2200      	movs	r2, #0
 800cb06:	2300      	movs	r3, #0
 800cb08:	f7f3 ffe6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb0c:	b9d8      	cbnz	r0, 800cb46 <_printf_float+0x432>
 800cb0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb10:	f108 0201 	add.w	r2, r8, #1
 800cb14:	3b01      	subs	r3, #1
 800cb16:	4631      	mov	r1, r6
 800cb18:	4628      	mov	r0, r5
 800cb1a:	47b8      	blx	r7
 800cb1c:	3001      	adds	r0, #1
 800cb1e:	d10e      	bne.n	800cb3e <_printf_float+0x42a>
 800cb20:	e659      	b.n	800c7d6 <_printf_float+0xc2>
 800cb22:	2301      	movs	r3, #1
 800cb24:	4652      	mov	r2, sl
 800cb26:	4631      	mov	r1, r6
 800cb28:	4628      	mov	r0, r5
 800cb2a:	47b8      	blx	r7
 800cb2c:	3001      	adds	r0, #1
 800cb2e:	f43f ae52 	beq.w	800c7d6 <_printf_float+0xc2>
 800cb32:	f108 0801 	add.w	r8, r8, #1
 800cb36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb38:	3b01      	subs	r3, #1
 800cb3a:	4543      	cmp	r3, r8
 800cb3c:	dcf1      	bgt.n	800cb22 <_printf_float+0x40e>
 800cb3e:	464b      	mov	r3, r9
 800cb40:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb44:	e6dc      	b.n	800c900 <_printf_float+0x1ec>
 800cb46:	f04f 0800 	mov.w	r8, #0
 800cb4a:	f104 0a1a 	add.w	sl, r4, #26
 800cb4e:	e7f2      	b.n	800cb36 <_printf_float+0x422>
 800cb50:	2301      	movs	r3, #1
 800cb52:	4642      	mov	r2, r8
 800cb54:	e7df      	b.n	800cb16 <_printf_float+0x402>
 800cb56:	2301      	movs	r3, #1
 800cb58:	464a      	mov	r2, r9
 800cb5a:	4631      	mov	r1, r6
 800cb5c:	4628      	mov	r0, r5
 800cb5e:	47b8      	blx	r7
 800cb60:	3001      	adds	r0, #1
 800cb62:	f43f ae38 	beq.w	800c7d6 <_printf_float+0xc2>
 800cb66:	f108 0801 	add.w	r8, r8, #1
 800cb6a:	68e3      	ldr	r3, [r4, #12]
 800cb6c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb6e:	1a5b      	subs	r3, r3, r1
 800cb70:	4543      	cmp	r3, r8
 800cb72:	dcf0      	bgt.n	800cb56 <_printf_float+0x442>
 800cb74:	e6fa      	b.n	800c96c <_printf_float+0x258>
 800cb76:	f04f 0800 	mov.w	r8, #0
 800cb7a:	f104 0919 	add.w	r9, r4, #25
 800cb7e:	e7f4      	b.n	800cb6a <_printf_float+0x456>

0800cb80 <_printf_common>:
 800cb80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb84:	4616      	mov	r6, r2
 800cb86:	4699      	mov	r9, r3
 800cb88:	688a      	ldr	r2, [r1, #8]
 800cb8a:	690b      	ldr	r3, [r1, #16]
 800cb8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cb90:	4293      	cmp	r3, r2
 800cb92:	bfb8      	it	lt
 800cb94:	4613      	movlt	r3, r2
 800cb96:	6033      	str	r3, [r6, #0]
 800cb98:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cb9c:	4607      	mov	r7, r0
 800cb9e:	460c      	mov	r4, r1
 800cba0:	b10a      	cbz	r2, 800cba6 <_printf_common+0x26>
 800cba2:	3301      	adds	r3, #1
 800cba4:	6033      	str	r3, [r6, #0]
 800cba6:	6823      	ldr	r3, [r4, #0]
 800cba8:	0699      	lsls	r1, r3, #26
 800cbaa:	bf42      	ittt	mi
 800cbac:	6833      	ldrmi	r3, [r6, #0]
 800cbae:	3302      	addmi	r3, #2
 800cbb0:	6033      	strmi	r3, [r6, #0]
 800cbb2:	6825      	ldr	r5, [r4, #0]
 800cbb4:	f015 0506 	ands.w	r5, r5, #6
 800cbb8:	d106      	bne.n	800cbc8 <_printf_common+0x48>
 800cbba:	f104 0a19 	add.w	sl, r4, #25
 800cbbe:	68e3      	ldr	r3, [r4, #12]
 800cbc0:	6832      	ldr	r2, [r6, #0]
 800cbc2:	1a9b      	subs	r3, r3, r2
 800cbc4:	42ab      	cmp	r3, r5
 800cbc6:	dc26      	bgt.n	800cc16 <_printf_common+0x96>
 800cbc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbcc:	1e13      	subs	r3, r2, #0
 800cbce:	6822      	ldr	r2, [r4, #0]
 800cbd0:	bf18      	it	ne
 800cbd2:	2301      	movne	r3, #1
 800cbd4:	0692      	lsls	r2, r2, #26
 800cbd6:	d42b      	bmi.n	800cc30 <_printf_common+0xb0>
 800cbd8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbdc:	4649      	mov	r1, r9
 800cbde:	4638      	mov	r0, r7
 800cbe0:	47c0      	blx	r8
 800cbe2:	3001      	adds	r0, #1
 800cbe4:	d01e      	beq.n	800cc24 <_printf_common+0xa4>
 800cbe6:	6823      	ldr	r3, [r4, #0]
 800cbe8:	68e5      	ldr	r5, [r4, #12]
 800cbea:	6832      	ldr	r2, [r6, #0]
 800cbec:	f003 0306 	and.w	r3, r3, #6
 800cbf0:	2b04      	cmp	r3, #4
 800cbf2:	bf08      	it	eq
 800cbf4:	1aad      	subeq	r5, r5, r2
 800cbf6:	68a3      	ldr	r3, [r4, #8]
 800cbf8:	6922      	ldr	r2, [r4, #16]
 800cbfa:	bf0c      	ite	eq
 800cbfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc00:	2500      	movne	r5, #0
 800cc02:	4293      	cmp	r3, r2
 800cc04:	bfc4      	itt	gt
 800cc06:	1a9b      	subgt	r3, r3, r2
 800cc08:	18ed      	addgt	r5, r5, r3
 800cc0a:	2600      	movs	r6, #0
 800cc0c:	341a      	adds	r4, #26
 800cc0e:	42b5      	cmp	r5, r6
 800cc10:	d11a      	bne.n	800cc48 <_printf_common+0xc8>
 800cc12:	2000      	movs	r0, #0
 800cc14:	e008      	b.n	800cc28 <_printf_common+0xa8>
 800cc16:	2301      	movs	r3, #1
 800cc18:	4652      	mov	r2, sl
 800cc1a:	4649      	mov	r1, r9
 800cc1c:	4638      	mov	r0, r7
 800cc1e:	47c0      	blx	r8
 800cc20:	3001      	adds	r0, #1
 800cc22:	d103      	bne.n	800cc2c <_printf_common+0xac>
 800cc24:	f04f 30ff 	mov.w	r0, #4294967295
 800cc28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc2c:	3501      	adds	r5, #1
 800cc2e:	e7c6      	b.n	800cbbe <_printf_common+0x3e>
 800cc30:	18e1      	adds	r1, r4, r3
 800cc32:	1c5a      	adds	r2, r3, #1
 800cc34:	2030      	movs	r0, #48	; 0x30
 800cc36:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc3a:	4422      	add	r2, r4
 800cc3c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc40:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc44:	3302      	adds	r3, #2
 800cc46:	e7c7      	b.n	800cbd8 <_printf_common+0x58>
 800cc48:	2301      	movs	r3, #1
 800cc4a:	4622      	mov	r2, r4
 800cc4c:	4649      	mov	r1, r9
 800cc4e:	4638      	mov	r0, r7
 800cc50:	47c0      	blx	r8
 800cc52:	3001      	adds	r0, #1
 800cc54:	d0e6      	beq.n	800cc24 <_printf_common+0xa4>
 800cc56:	3601      	adds	r6, #1
 800cc58:	e7d9      	b.n	800cc0e <_printf_common+0x8e>
	...

0800cc5c <_printf_i>:
 800cc5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc60:	7e0f      	ldrb	r7, [r1, #24]
 800cc62:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc64:	2f78      	cmp	r7, #120	; 0x78
 800cc66:	4691      	mov	r9, r2
 800cc68:	4680      	mov	r8, r0
 800cc6a:	460c      	mov	r4, r1
 800cc6c:	469a      	mov	sl, r3
 800cc6e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc72:	d807      	bhi.n	800cc84 <_printf_i+0x28>
 800cc74:	2f62      	cmp	r7, #98	; 0x62
 800cc76:	d80a      	bhi.n	800cc8e <_printf_i+0x32>
 800cc78:	2f00      	cmp	r7, #0
 800cc7a:	f000 80d8 	beq.w	800ce2e <_printf_i+0x1d2>
 800cc7e:	2f58      	cmp	r7, #88	; 0x58
 800cc80:	f000 80a3 	beq.w	800cdca <_printf_i+0x16e>
 800cc84:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cc88:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cc8c:	e03a      	b.n	800cd04 <_printf_i+0xa8>
 800cc8e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800cc92:	2b15      	cmp	r3, #21
 800cc94:	d8f6      	bhi.n	800cc84 <_printf_i+0x28>
 800cc96:	a101      	add	r1, pc, #4	; (adr r1, 800cc9c <_printf_i+0x40>)
 800cc98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800cc9c:	0800ccf5 	.word	0x0800ccf5
 800cca0:	0800cd09 	.word	0x0800cd09
 800cca4:	0800cc85 	.word	0x0800cc85
 800cca8:	0800cc85 	.word	0x0800cc85
 800ccac:	0800cc85 	.word	0x0800cc85
 800ccb0:	0800cc85 	.word	0x0800cc85
 800ccb4:	0800cd09 	.word	0x0800cd09
 800ccb8:	0800cc85 	.word	0x0800cc85
 800ccbc:	0800cc85 	.word	0x0800cc85
 800ccc0:	0800cc85 	.word	0x0800cc85
 800ccc4:	0800cc85 	.word	0x0800cc85
 800ccc8:	0800ce15 	.word	0x0800ce15
 800cccc:	0800cd39 	.word	0x0800cd39
 800ccd0:	0800cdf7 	.word	0x0800cdf7
 800ccd4:	0800cc85 	.word	0x0800cc85
 800ccd8:	0800cc85 	.word	0x0800cc85
 800ccdc:	0800ce37 	.word	0x0800ce37
 800cce0:	0800cc85 	.word	0x0800cc85
 800cce4:	0800cd39 	.word	0x0800cd39
 800cce8:	0800cc85 	.word	0x0800cc85
 800ccec:	0800cc85 	.word	0x0800cc85
 800ccf0:	0800cdff 	.word	0x0800cdff
 800ccf4:	682b      	ldr	r3, [r5, #0]
 800ccf6:	1d1a      	adds	r2, r3, #4
 800ccf8:	681b      	ldr	r3, [r3, #0]
 800ccfa:	602a      	str	r2, [r5, #0]
 800ccfc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd00:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd04:	2301      	movs	r3, #1
 800cd06:	e0a3      	b.n	800ce50 <_printf_i+0x1f4>
 800cd08:	6820      	ldr	r0, [r4, #0]
 800cd0a:	6829      	ldr	r1, [r5, #0]
 800cd0c:	0606      	lsls	r6, r0, #24
 800cd0e:	f101 0304 	add.w	r3, r1, #4
 800cd12:	d50a      	bpl.n	800cd2a <_printf_i+0xce>
 800cd14:	680e      	ldr	r6, [r1, #0]
 800cd16:	602b      	str	r3, [r5, #0]
 800cd18:	2e00      	cmp	r6, #0
 800cd1a:	da03      	bge.n	800cd24 <_printf_i+0xc8>
 800cd1c:	232d      	movs	r3, #45	; 0x2d
 800cd1e:	4276      	negs	r6, r6
 800cd20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd24:	485e      	ldr	r0, [pc, #376]	; (800cea0 <_printf_i+0x244>)
 800cd26:	230a      	movs	r3, #10
 800cd28:	e019      	b.n	800cd5e <_printf_i+0x102>
 800cd2a:	680e      	ldr	r6, [r1, #0]
 800cd2c:	602b      	str	r3, [r5, #0]
 800cd2e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd32:	bf18      	it	ne
 800cd34:	b236      	sxthne	r6, r6
 800cd36:	e7ef      	b.n	800cd18 <_printf_i+0xbc>
 800cd38:	682b      	ldr	r3, [r5, #0]
 800cd3a:	6820      	ldr	r0, [r4, #0]
 800cd3c:	1d19      	adds	r1, r3, #4
 800cd3e:	6029      	str	r1, [r5, #0]
 800cd40:	0601      	lsls	r1, r0, #24
 800cd42:	d501      	bpl.n	800cd48 <_printf_i+0xec>
 800cd44:	681e      	ldr	r6, [r3, #0]
 800cd46:	e002      	b.n	800cd4e <_printf_i+0xf2>
 800cd48:	0646      	lsls	r6, r0, #25
 800cd4a:	d5fb      	bpl.n	800cd44 <_printf_i+0xe8>
 800cd4c:	881e      	ldrh	r6, [r3, #0]
 800cd4e:	4854      	ldr	r0, [pc, #336]	; (800cea0 <_printf_i+0x244>)
 800cd50:	2f6f      	cmp	r7, #111	; 0x6f
 800cd52:	bf0c      	ite	eq
 800cd54:	2308      	moveq	r3, #8
 800cd56:	230a      	movne	r3, #10
 800cd58:	2100      	movs	r1, #0
 800cd5a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd5e:	6865      	ldr	r5, [r4, #4]
 800cd60:	60a5      	str	r5, [r4, #8]
 800cd62:	2d00      	cmp	r5, #0
 800cd64:	bfa2      	ittt	ge
 800cd66:	6821      	ldrge	r1, [r4, #0]
 800cd68:	f021 0104 	bicge.w	r1, r1, #4
 800cd6c:	6021      	strge	r1, [r4, #0]
 800cd6e:	b90e      	cbnz	r6, 800cd74 <_printf_i+0x118>
 800cd70:	2d00      	cmp	r5, #0
 800cd72:	d04d      	beq.n	800ce10 <_printf_i+0x1b4>
 800cd74:	4615      	mov	r5, r2
 800cd76:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd7a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd7e:	5dc7      	ldrb	r7, [r0, r7]
 800cd80:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cd84:	4637      	mov	r7, r6
 800cd86:	42bb      	cmp	r3, r7
 800cd88:	460e      	mov	r6, r1
 800cd8a:	d9f4      	bls.n	800cd76 <_printf_i+0x11a>
 800cd8c:	2b08      	cmp	r3, #8
 800cd8e:	d10b      	bne.n	800cda8 <_printf_i+0x14c>
 800cd90:	6823      	ldr	r3, [r4, #0]
 800cd92:	07de      	lsls	r6, r3, #31
 800cd94:	d508      	bpl.n	800cda8 <_printf_i+0x14c>
 800cd96:	6923      	ldr	r3, [r4, #16]
 800cd98:	6861      	ldr	r1, [r4, #4]
 800cd9a:	4299      	cmp	r1, r3
 800cd9c:	bfde      	ittt	le
 800cd9e:	2330      	movle	r3, #48	; 0x30
 800cda0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cda4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cda8:	1b52      	subs	r2, r2, r5
 800cdaa:	6122      	str	r2, [r4, #16]
 800cdac:	f8cd a000 	str.w	sl, [sp]
 800cdb0:	464b      	mov	r3, r9
 800cdb2:	aa03      	add	r2, sp, #12
 800cdb4:	4621      	mov	r1, r4
 800cdb6:	4640      	mov	r0, r8
 800cdb8:	f7ff fee2 	bl	800cb80 <_printf_common>
 800cdbc:	3001      	adds	r0, #1
 800cdbe:	d14c      	bne.n	800ce5a <_printf_i+0x1fe>
 800cdc0:	f04f 30ff 	mov.w	r0, #4294967295
 800cdc4:	b004      	add	sp, #16
 800cdc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdca:	4835      	ldr	r0, [pc, #212]	; (800cea0 <_printf_i+0x244>)
 800cdcc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cdd0:	6829      	ldr	r1, [r5, #0]
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdd8:	6029      	str	r1, [r5, #0]
 800cdda:	061d      	lsls	r5, r3, #24
 800cddc:	d514      	bpl.n	800ce08 <_printf_i+0x1ac>
 800cdde:	07df      	lsls	r7, r3, #31
 800cde0:	bf44      	itt	mi
 800cde2:	f043 0320 	orrmi.w	r3, r3, #32
 800cde6:	6023      	strmi	r3, [r4, #0]
 800cde8:	b91e      	cbnz	r6, 800cdf2 <_printf_i+0x196>
 800cdea:	6823      	ldr	r3, [r4, #0]
 800cdec:	f023 0320 	bic.w	r3, r3, #32
 800cdf0:	6023      	str	r3, [r4, #0]
 800cdf2:	2310      	movs	r3, #16
 800cdf4:	e7b0      	b.n	800cd58 <_printf_i+0xfc>
 800cdf6:	6823      	ldr	r3, [r4, #0]
 800cdf8:	f043 0320 	orr.w	r3, r3, #32
 800cdfc:	6023      	str	r3, [r4, #0]
 800cdfe:	2378      	movs	r3, #120	; 0x78
 800ce00:	4828      	ldr	r0, [pc, #160]	; (800cea4 <_printf_i+0x248>)
 800ce02:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce06:	e7e3      	b.n	800cdd0 <_printf_i+0x174>
 800ce08:	0659      	lsls	r1, r3, #25
 800ce0a:	bf48      	it	mi
 800ce0c:	b2b6      	uxthmi	r6, r6
 800ce0e:	e7e6      	b.n	800cdde <_printf_i+0x182>
 800ce10:	4615      	mov	r5, r2
 800ce12:	e7bb      	b.n	800cd8c <_printf_i+0x130>
 800ce14:	682b      	ldr	r3, [r5, #0]
 800ce16:	6826      	ldr	r6, [r4, #0]
 800ce18:	6961      	ldr	r1, [r4, #20]
 800ce1a:	1d18      	adds	r0, r3, #4
 800ce1c:	6028      	str	r0, [r5, #0]
 800ce1e:	0635      	lsls	r5, r6, #24
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	d501      	bpl.n	800ce28 <_printf_i+0x1cc>
 800ce24:	6019      	str	r1, [r3, #0]
 800ce26:	e002      	b.n	800ce2e <_printf_i+0x1d2>
 800ce28:	0670      	lsls	r0, r6, #25
 800ce2a:	d5fb      	bpl.n	800ce24 <_printf_i+0x1c8>
 800ce2c:	8019      	strh	r1, [r3, #0]
 800ce2e:	2300      	movs	r3, #0
 800ce30:	6123      	str	r3, [r4, #16]
 800ce32:	4615      	mov	r5, r2
 800ce34:	e7ba      	b.n	800cdac <_printf_i+0x150>
 800ce36:	682b      	ldr	r3, [r5, #0]
 800ce38:	1d1a      	adds	r2, r3, #4
 800ce3a:	602a      	str	r2, [r5, #0]
 800ce3c:	681d      	ldr	r5, [r3, #0]
 800ce3e:	6862      	ldr	r2, [r4, #4]
 800ce40:	2100      	movs	r1, #0
 800ce42:	4628      	mov	r0, r5
 800ce44:	f7f3 f9d4 	bl	80001f0 <memchr>
 800ce48:	b108      	cbz	r0, 800ce4e <_printf_i+0x1f2>
 800ce4a:	1b40      	subs	r0, r0, r5
 800ce4c:	6060      	str	r0, [r4, #4]
 800ce4e:	6863      	ldr	r3, [r4, #4]
 800ce50:	6123      	str	r3, [r4, #16]
 800ce52:	2300      	movs	r3, #0
 800ce54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce58:	e7a8      	b.n	800cdac <_printf_i+0x150>
 800ce5a:	6923      	ldr	r3, [r4, #16]
 800ce5c:	462a      	mov	r2, r5
 800ce5e:	4649      	mov	r1, r9
 800ce60:	4640      	mov	r0, r8
 800ce62:	47d0      	blx	sl
 800ce64:	3001      	adds	r0, #1
 800ce66:	d0ab      	beq.n	800cdc0 <_printf_i+0x164>
 800ce68:	6823      	ldr	r3, [r4, #0]
 800ce6a:	079b      	lsls	r3, r3, #30
 800ce6c:	d413      	bmi.n	800ce96 <_printf_i+0x23a>
 800ce6e:	68e0      	ldr	r0, [r4, #12]
 800ce70:	9b03      	ldr	r3, [sp, #12]
 800ce72:	4298      	cmp	r0, r3
 800ce74:	bfb8      	it	lt
 800ce76:	4618      	movlt	r0, r3
 800ce78:	e7a4      	b.n	800cdc4 <_printf_i+0x168>
 800ce7a:	2301      	movs	r3, #1
 800ce7c:	4632      	mov	r2, r6
 800ce7e:	4649      	mov	r1, r9
 800ce80:	4640      	mov	r0, r8
 800ce82:	47d0      	blx	sl
 800ce84:	3001      	adds	r0, #1
 800ce86:	d09b      	beq.n	800cdc0 <_printf_i+0x164>
 800ce88:	3501      	adds	r5, #1
 800ce8a:	68e3      	ldr	r3, [r4, #12]
 800ce8c:	9903      	ldr	r1, [sp, #12]
 800ce8e:	1a5b      	subs	r3, r3, r1
 800ce90:	42ab      	cmp	r3, r5
 800ce92:	dcf2      	bgt.n	800ce7a <_printf_i+0x21e>
 800ce94:	e7eb      	b.n	800ce6e <_printf_i+0x212>
 800ce96:	2500      	movs	r5, #0
 800ce98:	f104 0619 	add.w	r6, r4, #25
 800ce9c:	e7f5      	b.n	800ce8a <_printf_i+0x22e>
 800ce9e:	bf00      	nop
 800cea0:	0801255e 	.word	0x0801255e
 800cea4:	0801256f 	.word	0x0801256f

0800cea8 <_scanf_float>:
 800cea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceac:	b087      	sub	sp, #28
 800ceae:	4617      	mov	r7, r2
 800ceb0:	9303      	str	r3, [sp, #12]
 800ceb2:	688b      	ldr	r3, [r1, #8]
 800ceb4:	1e5a      	subs	r2, r3, #1
 800ceb6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ceba:	bf83      	ittte	hi
 800cebc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cec0:	195b      	addhi	r3, r3, r5
 800cec2:	9302      	strhi	r3, [sp, #8]
 800cec4:	2300      	movls	r3, #0
 800cec6:	bf86      	itte	hi
 800cec8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cecc:	608b      	strhi	r3, [r1, #8]
 800cece:	9302      	strls	r3, [sp, #8]
 800ced0:	680b      	ldr	r3, [r1, #0]
 800ced2:	468b      	mov	fp, r1
 800ced4:	2500      	movs	r5, #0
 800ced6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ceda:	f84b 3b1c 	str.w	r3, [fp], #28
 800cede:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cee2:	4680      	mov	r8, r0
 800cee4:	460c      	mov	r4, r1
 800cee6:	465e      	mov	r6, fp
 800cee8:	46aa      	mov	sl, r5
 800ceea:	46a9      	mov	r9, r5
 800ceec:	9501      	str	r5, [sp, #4]
 800ceee:	68a2      	ldr	r2, [r4, #8]
 800cef0:	b152      	cbz	r2, 800cf08 <_scanf_float+0x60>
 800cef2:	683b      	ldr	r3, [r7, #0]
 800cef4:	781b      	ldrb	r3, [r3, #0]
 800cef6:	2b4e      	cmp	r3, #78	; 0x4e
 800cef8:	d864      	bhi.n	800cfc4 <_scanf_float+0x11c>
 800cefa:	2b40      	cmp	r3, #64	; 0x40
 800cefc:	d83c      	bhi.n	800cf78 <_scanf_float+0xd0>
 800cefe:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf02:	b2c8      	uxtb	r0, r1
 800cf04:	280e      	cmp	r0, #14
 800cf06:	d93a      	bls.n	800cf7e <_scanf_float+0xd6>
 800cf08:	f1b9 0f00 	cmp.w	r9, #0
 800cf0c:	d003      	beq.n	800cf16 <_scanf_float+0x6e>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf14:	6023      	str	r3, [r4, #0]
 800cf16:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf1a:	f1ba 0f01 	cmp.w	sl, #1
 800cf1e:	f200 8113 	bhi.w	800d148 <_scanf_float+0x2a0>
 800cf22:	455e      	cmp	r6, fp
 800cf24:	f200 8105 	bhi.w	800d132 <_scanf_float+0x28a>
 800cf28:	2501      	movs	r5, #1
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	b007      	add	sp, #28
 800cf2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf32:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf36:	2a0d      	cmp	r2, #13
 800cf38:	d8e6      	bhi.n	800cf08 <_scanf_float+0x60>
 800cf3a:	a101      	add	r1, pc, #4	; (adr r1, 800cf40 <_scanf_float+0x98>)
 800cf3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf40:	0800d07f 	.word	0x0800d07f
 800cf44:	0800cf09 	.word	0x0800cf09
 800cf48:	0800cf09 	.word	0x0800cf09
 800cf4c:	0800cf09 	.word	0x0800cf09
 800cf50:	0800d0df 	.word	0x0800d0df
 800cf54:	0800d0b7 	.word	0x0800d0b7
 800cf58:	0800cf09 	.word	0x0800cf09
 800cf5c:	0800cf09 	.word	0x0800cf09
 800cf60:	0800d08d 	.word	0x0800d08d
 800cf64:	0800cf09 	.word	0x0800cf09
 800cf68:	0800cf09 	.word	0x0800cf09
 800cf6c:	0800cf09 	.word	0x0800cf09
 800cf70:	0800cf09 	.word	0x0800cf09
 800cf74:	0800d045 	.word	0x0800d045
 800cf78:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cf7c:	e7db      	b.n	800cf36 <_scanf_float+0x8e>
 800cf7e:	290e      	cmp	r1, #14
 800cf80:	d8c2      	bhi.n	800cf08 <_scanf_float+0x60>
 800cf82:	a001      	add	r0, pc, #4	; (adr r0, 800cf88 <_scanf_float+0xe0>)
 800cf84:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cf88:	0800d037 	.word	0x0800d037
 800cf8c:	0800cf09 	.word	0x0800cf09
 800cf90:	0800d037 	.word	0x0800d037
 800cf94:	0800d0cb 	.word	0x0800d0cb
 800cf98:	0800cf09 	.word	0x0800cf09
 800cf9c:	0800cfe5 	.word	0x0800cfe5
 800cfa0:	0800d021 	.word	0x0800d021
 800cfa4:	0800d021 	.word	0x0800d021
 800cfa8:	0800d021 	.word	0x0800d021
 800cfac:	0800d021 	.word	0x0800d021
 800cfb0:	0800d021 	.word	0x0800d021
 800cfb4:	0800d021 	.word	0x0800d021
 800cfb8:	0800d021 	.word	0x0800d021
 800cfbc:	0800d021 	.word	0x0800d021
 800cfc0:	0800d021 	.word	0x0800d021
 800cfc4:	2b6e      	cmp	r3, #110	; 0x6e
 800cfc6:	d809      	bhi.n	800cfdc <_scanf_float+0x134>
 800cfc8:	2b60      	cmp	r3, #96	; 0x60
 800cfca:	d8b2      	bhi.n	800cf32 <_scanf_float+0x8a>
 800cfcc:	2b54      	cmp	r3, #84	; 0x54
 800cfce:	d077      	beq.n	800d0c0 <_scanf_float+0x218>
 800cfd0:	2b59      	cmp	r3, #89	; 0x59
 800cfd2:	d199      	bne.n	800cf08 <_scanf_float+0x60>
 800cfd4:	2d07      	cmp	r5, #7
 800cfd6:	d197      	bne.n	800cf08 <_scanf_float+0x60>
 800cfd8:	2508      	movs	r5, #8
 800cfda:	e029      	b.n	800d030 <_scanf_float+0x188>
 800cfdc:	2b74      	cmp	r3, #116	; 0x74
 800cfde:	d06f      	beq.n	800d0c0 <_scanf_float+0x218>
 800cfe0:	2b79      	cmp	r3, #121	; 0x79
 800cfe2:	e7f6      	b.n	800cfd2 <_scanf_float+0x12a>
 800cfe4:	6821      	ldr	r1, [r4, #0]
 800cfe6:	05c8      	lsls	r0, r1, #23
 800cfe8:	d51a      	bpl.n	800d020 <_scanf_float+0x178>
 800cfea:	9b02      	ldr	r3, [sp, #8]
 800cfec:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800cff0:	6021      	str	r1, [r4, #0]
 800cff2:	f109 0901 	add.w	r9, r9, #1
 800cff6:	b11b      	cbz	r3, 800d000 <_scanf_float+0x158>
 800cff8:	3b01      	subs	r3, #1
 800cffa:	3201      	adds	r2, #1
 800cffc:	9302      	str	r3, [sp, #8]
 800cffe:	60a2      	str	r2, [r4, #8]
 800d000:	68a3      	ldr	r3, [r4, #8]
 800d002:	3b01      	subs	r3, #1
 800d004:	60a3      	str	r3, [r4, #8]
 800d006:	6923      	ldr	r3, [r4, #16]
 800d008:	3301      	adds	r3, #1
 800d00a:	6123      	str	r3, [r4, #16]
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	3b01      	subs	r3, #1
 800d010:	2b00      	cmp	r3, #0
 800d012:	607b      	str	r3, [r7, #4]
 800d014:	f340 8084 	ble.w	800d120 <_scanf_float+0x278>
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	3301      	adds	r3, #1
 800d01c:	603b      	str	r3, [r7, #0]
 800d01e:	e766      	b.n	800ceee <_scanf_float+0x46>
 800d020:	eb1a 0f05 	cmn.w	sl, r5
 800d024:	f47f af70 	bne.w	800cf08 <_scanf_float+0x60>
 800d028:	6822      	ldr	r2, [r4, #0]
 800d02a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d02e:	6022      	str	r2, [r4, #0]
 800d030:	f806 3b01 	strb.w	r3, [r6], #1
 800d034:	e7e4      	b.n	800d000 <_scanf_float+0x158>
 800d036:	6822      	ldr	r2, [r4, #0]
 800d038:	0610      	lsls	r0, r2, #24
 800d03a:	f57f af65 	bpl.w	800cf08 <_scanf_float+0x60>
 800d03e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d042:	e7f4      	b.n	800d02e <_scanf_float+0x186>
 800d044:	f1ba 0f00 	cmp.w	sl, #0
 800d048:	d10e      	bne.n	800d068 <_scanf_float+0x1c0>
 800d04a:	f1b9 0f00 	cmp.w	r9, #0
 800d04e:	d10e      	bne.n	800d06e <_scanf_float+0x1c6>
 800d050:	6822      	ldr	r2, [r4, #0]
 800d052:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d056:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d05a:	d108      	bne.n	800d06e <_scanf_float+0x1c6>
 800d05c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d060:	6022      	str	r2, [r4, #0]
 800d062:	f04f 0a01 	mov.w	sl, #1
 800d066:	e7e3      	b.n	800d030 <_scanf_float+0x188>
 800d068:	f1ba 0f02 	cmp.w	sl, #2
 800d06c:	d055      	beq.n	800d11a <_scanf_float+0x272>
 800d06e:	2d01      	cmp	r5, #1
 800d070:	d002      	beq.n	800d078 <_scanf_float+0x1d0>
 800d072:	2d04      	cmp	r5, #4
 800d074:	f47f af48 	bne.w	800cf08 <_scanf_float+0x60>
 800d078:	3501      	adds	r5, #1
 800d07a:	b2ed      	uxtb	r5, r5
 800d07c:	e7d8      	b.n	800d030 <_scanf_float+0x188>
 800d07e:	f1ba 0f01 	cmp.w	sl, #1
 800d082:	f47f af41 	bne.w	800cf08 <_scanf_float+0x60>
 800d086:	f04f 0a02 	mov.w	sl, #2
 800d08a:	e7d1      	b.n	800d030 <_scanf_float+0x188>
 800d08c:	b97d      	cbnz	r5, 800d0ae <_scanf_float+0x206>
 800d08e:	f1b9 0f00 	cmp.w	r9, #0
 800d092:	f47f af3c 	bne.w	800cf0e <_scanf_float+0x66>
 800d096:	6822      	ldr	r2, [r4, #0]
 800d098:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d09c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0a0:	f47f af39 	bne.w	800cf16 <_scanf_float+0x6e>
 800d0a4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0a8:	6022      	str	r2, [r4, #0]
 800d0aa:	2501      	movs	r5, #1
 800d0ac:	e7c0      	b.n	800d030 <_scanf_float+0x188>
 800d0ae:	2d03      	cmp	r5, #3
 800d0b0:	d0e2      	beq.n	800d078 <_scanf_float+0x1d0>
 800d0b2:	2d05      	cmp	r5, #5
 800d0b4:	e7de      	b.n	800d074 <_scanf_float+0x1cc>
 800d0b6:	2d02      	cmp	r5, #2
 800d0b8:	f47f af26 	bne.w	800cf08 <_scanf_float+0x60>
 800d0bc:	2503      	movs	r5, #3
 800d0be:	e7b7      	b.n	800d030 <_scanf_float+0x188>
 800d0c0:	2d06      	cmp	r5, #6
 800d0c2:	f47f af21 	bne.w	800cf08 <_scanf_float+0x60>
 800d0c6:	2507      	movs	r5, #7
 800d0c8:	e7b2      	b.n	800d030 <_scanf_float+0x188>
 800d0ca:	6822      	ldr	r2, [r4, #0]
 800d0cc:	0591      	lsls	r1, r2, #22
 800d0ce:	f57f af1b 	bpl.w	800cf08 <_scanf_float+0x60>
 800d0d2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d0d6:	6022      	str	r2, [r4, #0]
 800d0d8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d0dc:	e7a8      	b.n	800d030 <_scanf_float+0x188>
 800d0de:	6822      	ldr	r2, [r4, #0]
 800d0e0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d0e4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d0e8:	d006      	beq.n	800d0f8 <_scanf_float+0x250>
 800d0ea:	0550      	lsls	r0, r2, #21
 800d0ec:	f57f af0c 	bpl.w	800cf08 <_scanf_float+0x60>
 800d0f0:	f1b9 0f00 	cmp.w	r9, #0
 800d0f4:	f43f af0f 	beq.w	800cf16 <_scanf_float+0x6e>
 800d0f8:	0591      	lsls	r1, r2, #22
 800d0fa:	bf58      	it	pl
 800d0fc:	9901      	ldrpl	r1, [sp, #4]
 800d0fe:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d102:	bf58      	it	pl
 800d104:	eba9 0101 	subpl.w	r1, r9, r1
 800d108:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d10c:	bf58      	it	pl
 800d10e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d112:	6022      	str	r2, [r4, #0]
 800d114:	f04f 0900 	mov.w	r9, #0
 800d118:	e78a      	b.n	800d030 <_scanf_float+0x188>
 800d11a:	f04f 0a03 	mov.w	sl, #3
 800d11e:	e787      	b.n	800d030 <_scanf_float+0x188>
 800d120:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d124:	4639      	mov	r1, r7
 800d126:	4640      	mov	r0, r8
 800d128:	4798      	blx	r3
 800d12a:	2800      	cmp	r0, #0
 800d12c:	f43f aedf 	beq.w	800ceee <_scanf_float+0x46>
 800d130:	e6ea      	b.n	800cf08 <_scanf_float+0x60>
 800d132:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d136:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d13a:	463a      	mov	r2, r7
 800d13c:	4640      	mov	r0, r8
 800d13e:	4798      	blx	r3
 800d140:	6923      	ldr	r3, [r4, #16]
 800d142:	3b01      	subs	r3, #1
 800d144:	6123      	str	r3, [r4, #16]
 800d146:	e6ec      	b.n	800cf22 <_scanf_float+0x7a>
 800d148:	1e6b      	subs	r3, r5, #1
 800d14a:	2b06      	cmp	r3, #6
 800d14c:	d825      	bhi.n	800d19a <_scanf_float+0x2f2>
 800d14e:	2d02      	cmp	r5, #2
 800d150:	d836      	bhi.n	800d1c0 <_scanf_float+0x318>
 800d152:	455e      	cmp	r6, fp
 800d154:	f67f aee8 	bls.w	800cf28 <_scanf_float+0x80>
 800d158:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d15c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d160:	463a      	mov	r2, r7
 800d162:	4640      	mov	r0, r8
 800d164:	4798      	blx	r3
 800d166:	6923      	ldr	r3, [r4, #16]
 800d168:	3b01      	subs	r3, #1
 800d16a:	6123      	str	r3, [r4, #16]
 800d16c:	e7f1      	b.n	800d152 <_scanf_float+0x2aa>
 800d16e:	9802      	ldr	r0, [sp, #8]
 800d170:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d174:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d178:	9002      	str	r0, [sp, #8]
 800d17a:	463a      	mov	r2, r7
 800d17c:	4640      	mov	r0, r8
 800d17e:	4798      	blx	r3
 800d180:	6923      	ldr	r3, [r4, #16]
 800d182:	3b01      	subs	r3, #1
 800d184:	6123      	str	r3, [r4, #16]
 800d186:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d18a:	fa5f fa8a 	uxtb.w	sl, sl
 800d18e:	f1ba 0f02 	cmp.w	sl, #2
 800d192:	d1ec      	bne.n	800d16e <_scanf_float+0x2c6>
 800d194:	3d03      	subs	r5, #3
 800d196:	b2ed      	uxtb	r5, r5
 800d198:	1b76      	subs	r6, r6, r5
 800d19a:	6823      	ldr	r3, [r4, #0]
 800d19c:	05da      	lsls	r2, r3, #23
 800d19e:	d52f      	bpl.n	800d200 <_scanf_float+0x358>
 800d1a0:	055b      	lsls	r3, r3, #21
 800d1a2:	d510      	bpl.n	800d1c6 <_scanf_float+0x31e>
 800d1a4:	455e      	cmp	r6, fp
 800d1a6:	f67f aebf 	bls.w	800cf28 <_scanf_float+0x80>
 800d1aa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1ae:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1b2:	463a      	mov	r2, r7
 800d1b4:	4640      	mov	r0, r8
 800d1b6:	4798      	blx	r3
 800d1b8:	6923      	ldr	r3, [r4, #16]
 800d1ba:	3b01      	subs	r3, #1
 800d1bc:	6123      	str	r3, [r4, #16]
 800d1be:	e7f1      	b.n	800d1a4 <_scanf_float+0x2fc>
 800d1c0:	46aa      	mov	sl, r5
 800d1c2:	9602      	str	r6, [sp, #8]
 800d1c4:	e7df      	b.n	800d186 <_scanf_float+0x2de>
 800d1c6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d1ca:	6923      	ldr	r3, [r4, #16]
 800d1cc:	2965      	cmp	r1, #101	; 0x65
 800d1ce:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1d2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d1d6:	6123      	str	r3, [r4, #16]
 800d1d8:	d00c      	beq.n	800d1f4 <_scanf_float+0x34c>
 800d1da:	2945      	cmp	r1, #69	; 0x45
 800d1dc:	d00a      	beq.n	800d1f4 <_scanf_float+0x34c>
 800d1de:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1e2:	463a      	mov	r2, r7
 800d1e4:	4640      	mov	r0, r8
 800d1e6:	4798      	blx	r3
 800d1e8:	6923      	ldr	r3, [r4, #16]
 800d1ea:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	1eb5      	subs	r5, r6, #2
 800d1f2:	6123      	str	r3, [r4, #16]
 800d1f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1f8:	463a      	mov	r2, r7
 800d1fa:	4640      	mov	r0, r8
 800d1fc:	4798      	blx	r3
 800d1fe:	462e      	mov	r6, r5
 800d200:	6825      	ldr	r5, [r4, #0]
 800d202:	f015 0510 	ands.w	r5, r5, #16
 800d206:	d159      	bne.n	800d2bc <_scanf_float+0x414>
 800d208:	7035      	strb	r5, [r6, #0]
 800d20a:	6823      	ldr	r3, [r4, #0]
 800d20c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d210:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d214:	d11b      	bne.n	800d24e <_scanf_float+0x3a6>
 800d216:	9b01      	ldr	r3, [sp, #4]
 800d218:	454b      	cmp	r3, r9
 800d21a:	eba3 0209 	sub.w	r2, r3, r9
 800d21e:	d123      	bne.n	800d268 <_scanf_float+0x3c0>
 800d220:	2200      	movs	r2, #0
 800d222:	4659      	mov	r1, fp
 800d224:	4640      	mov	r0, r8
 800d226:	f000 fe99 	bl	800df5c <_strtod_r>
 800d22a:	6822      	ldr	r2, [r4, #0]
 800d22c:	9b03      	ldr	r3, [sp, #12]
 800d22e:	f012 0f02 	tst.w	r2, #2
 800d232:	ec57 6b10 	vmov	r6, r7, d0
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	d021      	beq.n	800d27e <_scanf_float+0x3d6>
 800d23a:	9903      	ldr	r1, [sp, #12]
 800d23c:	1d1a      	adds	r2, r3, #4
 800d23e:	600a      	str	r2, [r1, #0]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	e9c3 6700 	strd	r6, r7, [r3]
 800d246:	68e3      	ldr	r3, [r4, #12]
 800d248:	3301      	adds	r3, #1
 800d24a:	60e3      	str	r3, [r4, #12]
 800d24c:	e66d      	b.n	800cf2a <_scanf_float+0x82>
 800d24e:	9b04      	ldr	r3, [sp, #16]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d0e5      	beq.n	800d220 <_scanf_float+0x378>
 800d254:	9905      	ldr	r1, [sp, #20]
 800d256:	230a      	movs	r3, #10
 800d258:	462a      	mov	r2, r5
 800d25a:	3101      	adds	r1, #1
 800d25c:	4640      	mov	r0, r8
 800d25e:	f000 ff05 	bl	800e06c <_strtol_r>
 800d262:	9b04      	ldr	r3, [sp, #16]
 800d264:	9e05      	ldr	r6, [sp, #20]
 800d266:	1ac2      	subs	r2, r0, r3
 800d268:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d26c:	429e      	cmp	r6, r3
 800d26e:	bf28      	it	cs
 800d270:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d274:	4912      	ldr	r1, [pc, #72]	; (800d2c0 <_scanf_float+0x418>)
 800d276:	4630      	mov	r0, r6
 800d278:	f000 f82c 	bl	800d2d4 <siprintf>
 800d27c:	e7d0      	b.n	800d220 <_scanf_float+0x378>
 800d27e:	9903      	ldr	r1, [sp, #12]
 800d280:	f012 0f04 	tst.w	r2, #4
 800d284:	f103 0204 	add.w	r2, r3, #4
 800d288:	600a      	str	r2, [r1, #0]
 800d28a:	d1d9      	bne.n	800d240 <_scanf_float+0x398>
 800d28c:	f8d3 8000 	ldr.w	r8, [r3]
 800d290:	ee10 2a10 	vmov	r2, s0
 800d294:	ee10 0a10 	vmov	r0, s0
 800d298:	463b      	mov	r3, r7
 800d29a:	4639      	mov	r1, r7
 800d29c:	f7f3 fc4e 	bl	8000b3c <__aeabi_dcmpun>
 800d2a0:	b128      	cbz	r0, 800d2ae <_scanf_float+0x406>
 800d2a2:	4808      	ldr	r0, [pc, #32]	; (800d2c4 <_scanf_float+0x41c>)
 800d2a4:	f000 f810 	bl	800d2c8 <nanf>
 800d2a8:	ed88 0a00 	vstr	s0, [r8]
 800d2ac:	e7cb      	b.n	800d246 <_scanf_float+0x39e>
 800d2ae:	4630      	mov	r0, r6
 800d2b0:	4639      	mov	r1, r7
 800d2b2:	f7f3 fca1 	bl	8000bf8 <__aeabi_d2f>
 800d2b6:	f8c8 0000 	str.w	r0, [r8]
 800d2ba:	e7c4      	b.n	800d246 <_scanf_float+0x39e>
 800d2bc:	2500      	movs	r5, #0
 800d2be:	e634      	b.n	800cf2a <_scanf_float+0x82>
 800d2c0:	08012580 	.word	0x08012580
 800d2c4:	08012988 	.word	0x08012988

0800d2c8 <nanf>:
 800d2c8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d2d0 <nanf+0x8>
 800d2cc:	4770      	bx	lr
 800d2ce:	bf00      	nop
 800d2d0:	7fc00000 	.word	0x7fc00000

0800d2d4 <siprintf>:
 800d2d4:	b40e      	push	{r1, r2, r3}
 800d2d6:	b500      	push	{lr}
 800d2d8:	b09c      	sub	sp, #112	; 0x70
 800d2da:	ab1d      	add	r3, sp, #116	; 0x74
 800d2dc:	9002      	str	r0, [sp, #8]
 800d2de:	9006      	str	r0, [sp, #24]
 800d2e0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d2e4:	4809      	ldr	r0, [pc, #36]	; (800d30c <siprintf+0x38>)
 800d2e6:	9107      	str	r1, [sp, #28]
 800d2e8:	9104      	str	r1, [sp, #16]
 800d2ea:	4909      	ldr	r1, [pc, #36]	; (800d310 <siprintf+0x3c>)
 800d2ec:	f853 2b04 	ldr.w	r2, [r3], #4
 800d2f0:	9105      	str	r1, [sp, #20]
 800d2f2:	6800      	ldr	r0, [r0, #0]
 800d2f4:	9301      	str	r3, [sp, #4]
 800d2f6:	a902      	add	r1, sp, #8
 800d2f8:	f002 fed6 	bl	80100a8 <_svfiprintf_r>
 800d2fc:	9b02      	ldr	r3, [sp, #8]
 800d2fe:	2200      	movs	r2, #0
 800d300:	701a      	strb	r2, [r3, #0]
 800d302:	b01c      	add	sp, #112	; 0x70
 800d304:	f85d eb04 	ldr.w	lr, [sp], #4
 800d308:	b003      	add	sp, #12
 800d30a:	4770      	bx	lr
 800d30c:	2000025c 	.word	0x2000025c
 800d310:	ffff0208 	.word	0xffff0208

0800d314 <sulp>:
 800d314:	b570      	push	{r4, r5, r6, lr}
 800d316:	4604      	mov	r4, r0
 800d318:	460d      	mov	r5, r1
 800d31a:	ec45 4b10 	vmov	d0, r4, r5
 800d31e:	4616      	mov	r6, r2
 800d320:	f002 fc20 	bl	800fb64 <__ulp>
 800d324:	ec51 0b10 	vmov	r0, r1, d0
 800d328:	b17e      	cbz	r6, 800d34a <sulp+0x36>
 800d32a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d32e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d332:	2b00      	cmp	r3, #0
 800d334:	dd09      	ble.n	800d34a <sulp+0x36>
 800d336:	051b      	lsls	r3, r3, #20
 800d338:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d33c:	2400      	movs	r4, #0
 800d33e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d342:	4622      	mov	r2, r4
 800d344:	462b      	mov	r3, r5
 800d346:	f7f3 f95f 	bl	8000608 <__aeabi_dmul>
 800d34a:	bd70      	pop	{r4, r5, r6, pc}
 800d34c:	0000      	movs	r0, r0
	...

0800d350 <_strtod_l>:
 800d350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d354:	ed2d 8b02 	vpush	{d8}
 800d358:	b09d      	sub	sp, #116	; 0x74
 800d35a:	461f      	mov	r7, r3
 800d35c:	2300      	movs	r3, #0
 800d35e:	9318      	str	r3, [sp, #96]	; 0x60
 800d360:	4ba2      	ldr	r3, [pc, #648]	; (800d5ec <_strtod_l+0x29c>)
 800d362:	9213      	str	r2, [sp, #76]	; 0x4c
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	9305      	str	r3, [sp, #20]
 800d368:	4604      	mov	r4, r0
 800d36a:	4618      	mov	r0, r3
 800d36c:	4688      	mov	r8, r1
 800d36e:	f7f2 ff37 	bl	80001e0 <strlen>
 800d372:	f04f 0a00 	mov.w	sl, #0
 800d376:	4605      	mov	r5, r0
 800d378:	f04f 0b00 	mov.w	fp, #0
 800d37c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d380:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d382:	781a      	ldrb	r2, [r3, #0]
 800d384:	2a2b      	cmp	r2, #43	; 0x2b
 800d386:	d04e      	beq.n	800d426 <_strtod_l+0xd6>
 800d388:	d83b      	bhi.n	800d402 <_strtod_l+0xb2>
 800d38a:	2a0d      	cmp	r2, #13
 800d38c:	d834      	bhi.n	800d3f8 <_strtod_l+0xa8>
 800d38e:	2a08      	cmp	r2, #8
 800d390:	d834      	bhi.n	800d3fc <_strtod_l+0xac>
 800d392:	2a00      	cmp	r2, #0
 800d394:	d03e      	beq.n	800d414 <_strtod_l+0xc4>
 800d396:	2300      	movs	r3, #0
 800d398:	930a      	str	r3, [sp, #40]	; 0x28
 800d39a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d39c:	7833      	ldrb	r3, [r6, #0]
 800d39e:	2b30      	cmp	r3, #48	; 0x30
 800d3a0:	f040 80b0 	bne.w	800d504 <_strtod_l+0x1b4>
 800d3a4:	7873      	ldrb	r3, [r6, #1]
 800d3a6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3aa:	2b58      	cmp	r3, #88	; 0x58
 800d3ac:	d168      	bne.n	800d480 <_strtod_l+0x130>
 800d3ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3b0:	9301      	str	r3, [sp, #4]
 800d3b2:	ab18      	add	r3, sp, #96	; 0x60
 800d3b4:	9702      	str	r7, [sp, #8]
 800d3b6:	9300      	str	r3, [sp, #0]
 800d3b8:	4a8d      	ldr	r2, [pc, #564]	; (800d5f0 <_strtod_l+0x2a0>)
 800d3ba:	ab19      	add	r3, sp, #100	; 0x64
 800d3bc:	a917      	add	r1, sp, #92	; 0x5c
 800d3be:	4620      	mov	r0, r4
 800d3c0:	f001 fd38 	bl	800ee34 <__gethex>
 800d3c4:	f010 0707 	ands.w	r7, r0, #7
 800d3c8:	4605      	mov	r5, r0
 800d3ca:	d005      	beq.n	800d3d8 <_strtod_l+0x88>
 800d3cc:	2f06      	cmp	r7, #6
 800d3ce:	d12c      	bne.n	800d42a <_strtod_l+0xda>
 800d3d0:	3601      	adds	r6, #1
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d3d6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	f040 8590 	bne.w	800df00 <_strtod_l+0xbb0>
 800d3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3e2:	b1eb      	cbz	r3, 800d420 <_strtod_l+0xd0>
 800d3e4:	4652      	mov	r2, sl
 800d3e6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d3ea:	ec43 2b10 	vmov	d0, r2, r3
 800d3ee:	b01d      	add	sp, #116	; 0x74
 800d3f0:	ecbd 8b02 	vpop	{d8}
 800d3f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3f8:	2a20      	cmp	r2, #32
 800d3fa:	d1cc      	bne.n	800d396 <_strtod_l+0x46>
 800d3fc:	3301      	adds	r3, #1
 800d3fe:	9317      	str	r3, [sp, #92]	; 0x5c
 800d400:	e7be      	b.n	800d380 <_strtod_l+0x30>
 800d402:	2a2d      	cmp	r2, #45	; 0x2d
 800d404:	d1c7      	bne.n	800d396 <_strtod_l+0x46>
 800d406:	2201      	movs	r2, #1
 800d408:	920a      	str	r2, [sp, #40]	; 0x28
 800d40a:	1c5a      	adds	r2, r3, #1
 800d40c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d40e:	785b      	ldrb	r3, [r3, #1]
 800d410:	2b00      	cmp	r3, #0
 800d412:	d1c2      	bne.n	800d39a <_strtod_l+0x4a>
 800d414:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d416:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d41a:	2b00      	cmp	r3, #0
 800d41c:	f040 856e 	bne.w	800defc <_strtod_l+0xbac>
 800d420:	4652      	mov	r2, sl
 800d422:	465b      	mov	r3, fp
 800d424:	e7e1      	b.n	800d3ea <_strtod_l+0x9a>
 800d426:	2200      	movs	r2, #0
 800d428:	e7ee      	b.n	800d408 <_strtod_l+0xb8>
 800d42a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d42c:	b13a      	cbz	r2, 800d43e <_strtod_l+0xee>
 800d42e:	2135      	movs	r1, #53	; 0x35
 800d430:	a81a      	add	r0, sp, #104	; 0x68
 800d432:	f002 fca2 	bl	800fd7a <__copybits>
 800d436:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d438:	4620      	mov	r0, r4
 800d43a:	f002 f861 	bl	800f500 <_Bfree>
 800d43e:	3f01      	subs	r7, #1
 800d440:	2f04      	cmp	r7, #4
 800d442:	d806      	bhi.n	800d452 <_strtod_l+0x102>
 800d444:	e8df f007 	tbb	[pc, r7]
 800d448:	1714030a 	.word	0x1714030a
 800d44c:	0a          	.byte	0x0a
 800d44d:	00          	.byte	0x00
 800d44e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d452:	0728      	lsls	r0, r5, #28
 800d454:	d5c0      	bpl.n	800d3d8 <_strtod_l+0x88>
 800d456:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d45a:	e7bd      	b.n	800d3d8 <_strtod_l+0x88>
 800d45c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d460:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d462:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d466:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d46a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d46e:	e7f0      	b.n	800d452 <_strtod_l+0x102>
 800d470:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d5f4 <_strtod_l+0x2a4>
 800d474:	e7ed      	b.n	800d452 <_strtod_l+0x102>
 800d476:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d47a:	f04f 3aff 	mov.w	sl, #4294967295
 800d47e:	e7e8      	b.n	800d452 <_strtod_l+0x102>
 800d480:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	9217      	str	r2, [sp, #92]	; 0x5c
 800d486:	785b      	ldrb	r3, [r3, #1]
 800d488:	2b30      	cmp	r3, #48	; 0x30
 800d48a:	d0f9      	beq.n	800d480 <_strtod_l+0x130>
 800d48c:	2b00      	cmp	r3, #0
 800d48e:	d0a3      	beq.n	800d3d8 <_strtod_l+0x88>
 800d490:	2301      	movs	r3, #1
 800d492:	f04f 0900 	mov.w	r9, #0
 800d496:	9304      	str	r3, [sp, #16]
 800d498:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d49a:	9308      	str	r3, [sp, #32]
 800d49c:	f8cd 901c 	str.w	r9, [sp, #28]
 800d4a0:	464f      	mov	r7, r9
 800d4a2:	220a      	movs	r2, #10
 800d4a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d4a6:	7806      	ldrb	r6, [r0, #0]
 800d4a8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d4ac:	b2d9      	uxtb	r1, r3
 800d4ae:	2909      	cmp	r1, #9
 800d4b0:	d92a      	bls.n	800d508 <_strtod_l+0x1b8>
 800d4b2:	9905      	ldr	r1, [sp, #20]
 800d4b4:	462a      	mov	r2, r5
 800d4b6:	f002 ff0f 	bl	80102d8 <strncmp>
 800d4ba:	b398      	cbz	r0, 800d524 <_strtod_l+0x1d4>
 800d4bc:	2000      	movs	r0, #0
 800d4be:	4632      	mov	r2, r6
 800d4c0:	463d      	mov	r5, r7
 800d4c2:	9005      	str	r0, [sp, #20]
 800d4c4:	4603      	mov	r3, r0
 800d4c6:	2a65      	cmp	r2, #101	; 0x65
 800d4c8:	d001      	beq.n	800d4ce <_strtod_l+0x17e>
 800d4ca:	2a45      	cmp	r2, #69	; 0x45
 800d4cc:	d118      	bne.n	800d500 <_strtod_l+0x1b0>
 800d4ce:	b91d      	cbnz	r5, 800d4d8 <_strtod_l+0x188>
 800d4d0:	9a04      	ldr	r2, [sp, #16]
 800d4d2:	4302      	orrs	r2, r0
 800d4d4:	d09e      	beq.n	800d414 <_strtod_l+0xc4>
 800d4d6:	2500      	movs	r5, #0
 800d4d8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d4dc:	f108 0201 	add.w	r2, r8, #1
 800d4e0:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4e2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d4e6:	2a2b      	cmp	r2, #43	; 0x2b
 800d4e8:	d075      	beq.n	800d5d6 <_strtod_l+0x286>
 800d4ea:	2a2d      	cmp	r2, #45	; 0x2d
 800d4ec:	d07b      	beq.n	800d5e6 <_strtod_l+0x296>
 800d4ee:	f04f 0c00 	mov.w	ip, #0
 800d4f2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d4f6:	2909      	cmp	r1, #9
 800d4f8:	f240 8082 	bls.w	800d600 <_strtod_l+0x2b0>
 800d4fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d500:	2600      	movs	r6, #0
 800d502:	e09d      	b.n	800d640 <_strtod_l+0x2f0>
 800d504:	2300      	movs	r3, #0
 800d506:	e7c4      	b.n	800d492 <_strtod_l+0x142>
 800d508:	2f08      	cmp	r7, #8
 800d50a:	bfd8      	it	le
 800d50c:	9907      	ldrle	r1, [sp, #28]
 800d50e:	f100 0001 	add.w	r0, r0, #1
 800d512:	bfda      	itte	le
 800d514:	fb02 3301 	mlale	r3, r2, r1, r3
 800d518:	9307      	strle	r3, [sp, #28]
 800d51a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d51e:	3701      	adds	r7, #1
 800d520:	9017      	str	r0, [sp, #92]	; 0x5c
 800d522:	e7bf      	b.n	800d4a4 <_strtod_l+0x154>
 800d524:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d526:	195a      	adds	r2, r3, r5
 800d528:	9217      	str	r2, [sp, #92]	; 0x5c
 800d52a:	5d5a      	ldrb	r2, [r3, r5]
 800d52c:	2f00      	cmp	r7, #0
 800d52e:	d037      	beq.n	800d5a0 <_strtod_l+0x250>
 800d530:	9005      	str	r0, [sp, #20]
 800d532:	463d      	mov	r5, r7
 800d534:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d538:	2b09      	cmp	r3, #9
 800d53a:	d912      	bls.n	800d562 <_strtod_l+0x212>
 800d53c:	2301      	movs	r3, #1
 800d53e:	e7c2      	b.n	800d4c6 <_strtod_l+0x176>
 800d540:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d542:	1c5a      	adds	r2, r3, #1
 800d544:	9217      	str	r2, [sp, #92]	; 0x5c
 800d546:	785a      	ldrb	r2, [r3, #1]
 800d548:	3001      	adds	r0, #1
 800d54a:	2a30      	cmp	r2, #48	; 0x30
 800d54c:	d0f8      	beq.n	800d540 <_strtod_l+0x1f0>
 800d54e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d552:	2b08      	cmp	r3, #8
 800d554:	f200 84d9 	bhi.w	800df0a <_strtod_l+0xbba>
 800d558:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d55a:	9005      	str	r0, [sp, #20]
 800d55c:	2000      	movs	r0, #0
 800d55e:	9308      	str	r3, [sp, #32]
 800d560:	4605      	mov	r5, r0
 800d562:	3a30      	subs	r2, #48	; 0x30
 800d564:	f100 0301 	add.w	r3, r0, #1
 800d568:	d014      	beq.n	800d594 <_strtod_l+0x244>
 800d56a:	9905      	ldr	r1, [sp, #20]
 800d56c:	4419      	add	r1, r3
 800d56e:	9105      	str	r1, [sp, #20]
 800d570:	462b      	mov	r3, r5
 800d572:	eb00 0e05 	add.w	lr, r0, r5
 800d576:	210a      	movs	r1, #10
 800d578:	4573      	cmp	r3, lr
 800d57a:	d113      	bne.n	800d5a4 <_strtod_l+0x254>
 800d57c:	182b      	adds	r3, r5, r0
 800d57e:	2b08      	cmp	r3, #8
 800d580:	f105 0501 	add.w	r5, r5, #1
 800d584:	4405      	add	r5, r0
 800d586:	dc1c      	bgt.n	800d5c2 <_strtod_l+0x272>
 800d588:	9907      	ldr	r1, [sp, #28]
 800d58a:	230a      	movs	r3, #10
 800d58c:	fb03 2301 	mla	r3, r3, r1, r2
 800d590:	9307      	str	r3, [sp, #28]
 800d592:	2300      	movs	r3, #0
 800d594:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d596:	1c51      	adds	r1, r2, #1
 800d598:	9117      	str	r1, [sp, #92]	; 0x5c
 800d59a:	7852      	ldrb	r2, [r2, #1]
 800d59c:	4618      	mov	r0, r3
 800d59e:	e7c9      	b.n	800d534 <_strtod_l+0x1e4>
 800d5a0:	4638      	mov	r0, r7
 800d5a2:	e7d2      	b.n	800d54a <_strtod_l+0x1fa>
 800d5a4:	2b08      	cmp	r3, #8
 800d5a6:	dc04      	bgt.n	800d5b2 <_strtod_l+0x262>
 800d5a8:	9e07      	ldr	r6, [sp, #28]
 800d5aa:	434e      	muls	r6, r1
 800d5ac:	9607      	str	r6, [sp, #28]
 800d5ae:	3301      	adds	r3, #1
 800d5b0:	e7e2      	b.n	800d578 <_strtod_l+0x228>
 800d5b2:	f103 0c01 	add.w	ip, r3, #1
 800d5b6:	f1bc 0f10 	cmp.w	ip, #16
 800d5ba:	bfd8      	it	le
 800d5bc:	fb01 f909 	mulle.w	r9, r1, r9
 800d5c0:	e7f5      	b.n	800d5ae <_strtod_l+0x25e>
 800d5c2:	2d10      	cmp	r5, #16
 800d5c4:	bfdc      	itt	le
 800d5c6:	230a      	movle	r3, #10
 800d5c8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d5cc:	e7e1      	b.n	800d592 <_strtod_l+0x242>
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	9305      	str	r3, [sp, #20]
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e77c      	b.n	800d4d0 <_strtod_l+0x180>
 800d5d6:	f04f 0c00 	mov.w	ip, #0
 800d5da:	f108 0202 	add.w	r2, r8, #2
 800d5de:	9217      	str	r2, [sp, #92]	; 0x5c
 800d5e0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d5e4:	e785      	b.n	800d4f2 <_strtod_l+0x1a2>
 800d5e6:	f04f 0c01 	mov.w	ip, #1
 800d5ea:	e7f6      	b.n	800d5da <_strtod_l+0x28a>
 800d5ec:	080127d0 	.word	0x080127d0
 800d5f0:	08012588 	.word	0x08012588
 800d5f4:	7ff00000 	.word	0x7ff00000
 800d5f8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5fa:	1c51      	adds	r1, r2, #1
 800d5fc:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5fe:	7852      	ldrb	r2, [r2, #1]
 800d600:	2a30      	cmp	r2, #48	; 0x30
 800d602:	d0f9      	beq.n	800d5f8 <_strtod_l+0x2a8>
 800d604:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d608:	2908      	cmp	r1, #8
 800d60a:	f63f af79 	bhi.w	800d500 <_strtod_l+0x1b0>
 800d60e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d612:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d614:	9206      	str	r2, [sp, #24]
 800d616:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d618:	1c51      	adds	r1, r2, #1
 800d61a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d61c:	7852      	ldrb	r2, [r2, #1]
 800d61e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d622:	2e09      	cmp	r6, #9
 800d624:	d937      	bls.n	800d696 <_strtod_l+0x346>
 800d626:	9e06      	ldr	r6, [sp, #24]
 800d628:	1b89      	subs	r1, r1, r6
 800d62a:	2908      	cmp	r1, #8
 800d62c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d630:	dc02      	bgt.n	800d638 <_strtod_l+0x2e8>
 800d632:	4576      	cmp	r6, lr
 800d634:	bfa8      	it	ge
 800d636:	4676      	movge	r6, lr
 800d638:	f1bc 0f00 	cmp.w	ip, #0
 800d63c:	d000      	beq.n	800d640 <_strtod_l+0x2f0>
 800d63e:	4276      	negs	r6, r6
 800d640:	2d00      	cmp	r5, #0
 800d642:	d14d      	bne.n	800d6e0 <_strtod_l+0x390>
 800d644:	9904      	ldr	r1, [sp, #16]
 800d646:	4301      	orrs	r1, r0
 800d648:	f47f aec6 	bne.w	800d3d8 <_strtod_l+0x88>
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	f47f aee1 	bne.w	800d414 <_strtod_l+0xc4>
 800d652:	2a69      	cmp	r2, #105	; 0x69
 800d654:	d027      	beq.n	800d6a6 <_strtod_l+0x356>
 800d656:	dc24      	bgt.n	800d6a2 <_strtod_l+0x352>
 800d658:	2a49      	cmp	r2, #73	; 0x49
 800d65a:	d024      	beq.n	800d6a6 <_strtod_l+0x356>
 800d65c:	2a4e      	cmp	r2, #78	; 0x4e
 800d65e:	f47f aed9 	bne.w	800d414 <_strtod_l+0xc4>
 800d662:	499f      	ldr	r1, [pc, #636]	; (800d8e0 <_strtod_l+0x590>)
 800d664:	a817      	add	r0, sp, #92	; 0x5c
 800d666:	f001 fe3d 	bl	800f2e4 <__match>
 800d66a:	2800      	cmp	r0, #0
 800d66c:	f43f aed2 	beq.w	800d414 <_strtod_l+0xc4>
 800d670:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d672:	781b      	ldrb	r3, [r3, #0]
 800d674:	2b28      	cmp	r3, #40	; 0x28
 800d676:	d12d      	bne.n	800d6d4 <_strtod_l+0x384>
 800d678:	499a      	ldr	r1, [pc, #616]	; (800d8e4 <_strtod_l+0x594>)
 800d67a:	aa1a      	add	r2, sp, #104	; 0x68
 800d67c:	a817      	add	r0, sp, #92	; 0x5c
 800d67e:	f001 fe45 	bl	800f30c <__hexnan>
 800d682:	2805      	cmp	r0, #5
 800d684:	d126      	bne.n	800d6d4 <_strtod_l+0x384>
 800d686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d688:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d68c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d690:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d694:	e6a0      	b.n	800d3d8 <_strtod_l+0x88>
 800d696:	210a      	movs	r1, #10
 800d698:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d69c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d6a0:	e7b9      	b.n	800d616 <_strtod_l+0x2c6>
 800d6a2:	2a6e      	cmp	r2, #110	; 0x6e
 800d6a4:	e7db      	b.n	800d65e <_strtod_l+0x30e>
 800d6a6:	4990      	ldr	r1, [pc, #576]	; (800d8e8 <_strtod_l+0x598>)
 800d6a8:	a817      	add	r0, sp, #92	; 0x5c
 800d6aa:	f001 fe1b 	bl	800f2e4 <__match>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	f43f aeb0 	beq.w	800d414 <_strtod_l+0xc4>
 800d6b4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6b6:	498d      	ldr	r1, [pc, #564]	; (800d8ec <_strtod_l+0x59c>)
 800d6b8:	3b01      	subs	r3, #1
 800d6ba:	a817      	add	r0, sp, #92	; 0x5c
 800d6bc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6be:	f001 fe11 	bl	800f2e4 <__match>
 800d6c2:	b910      	cbnz	r0, 800d6ca <_strtod_l+0x37a>
 800d6c4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6c6:	3301      	adds	r3, #1
 800d6c8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6ca:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d8fc <_strtod_l+0x5ac>
 800d6ce:	f04f 0a00 	mov.w	sl, #0
 800d6d2:	e681      	b.n	800d3d8 <_strtod_l+0x88>
 800d6d4:	4886      	ldr	r0, [pc, #536]	; (800d8f0 <_strtod_l+0x5a0>)
 800d6d6:	f002 fde7 	bl	80102a8 <nan>
 800d6da:	ec5b ab10 	vmov	sl, fp, d0
 800d6de:	e67b      	b.n	800d3d8 <_strtod_l+0x88>
 800d6e0:	9b05      	ldr	r3, [sp, #20]
 800d6e2:	9807      	ldr	r0, [sp, #28]
 800d6e4:	1af3      	subs	r3, r6, r3
 800d6e6:	2f00      	cmp	r7, #0
 800d6e8:	bf08      	it	eq
 800d6ea:	462f      	moveq	r7, r5
 800d6ec:	2d10      	cmp	r5, #16
 800d6ee:	9306      	str	r3, [sp, #24]
 800d6f0:	46a8      	mov	r8, r5
 800d6f2:	bfa8      	it	ge
 800d6f4:	f04f 0810 	movge.w	r8, #16
 800d6f8:	f7f2 ff0c 	bl	8000514 <__aeabi_ui2d>
 800d6fc:	2d09      	cmp	r5, #9
 800d6fe:	4682      	mov	sl, r0
 800d700:	468b      	mov	fp, r1
 800d702:	dd13      	ble.n	800d72c <_strtod_l+0x3dc>
 800d704:	4b7b      	ldr	r3, [pc, #492]	; (800d8f4 <_strtod_l+0x5a4>)
 800d706:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d70a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d70e:	f7f2 ff7b 	bl	8000608 <__aeabi_dmul>
 800d712:	4682      	mov	sl, r0
 800d714:	4648      	mov	r0, r9
 800d716:	468b      	mov	fp, r1
 800d718:	f7f2 fefc 	bl	8000514 <__aeabi_ui2d>
 800d71c:	4602      	mov	r2, r0
 800d71e:	460b      	mov	r3, r1
 800d720:	4650      	mov	r0, sl
 800d722:	4659      	mov	r1, fp
 800d724:	f7f2 fdba 	bl	800029c <__adddf3>
 800d728:	4682      	mov	sl, r0
 800d72a:	468b      	mov	fp, r1
 800d72c:	2d0f      	cmp	r5, #15
 800d72e:	dc38      	bgt.n	800d7a2 <_strtod_l+0x452>
 800d730:	9b06      	ldr	r3, [sp, #24]
 800d732:	2b00      	cmp	r3, #0
 800d734:	f43f ae50 	beq.w	800d3d8 <_strtod_l+0x88>
 800d738:	dd24      	ble.n	800d784 <_strtod_l+0x434>
 800d73a:	2b16      	cmp	r3, #22
 800d73c:	dc0b      	bgt.n	800d756 <_strtod_l+0x406>
 800d73e:	496d      	ldr	r1, [pc, #436]	; (800d8f4 <_strtod_l+0x5a4>)
 800d740:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d744:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d748:	4652      	mov	r2, sl
 800d74a:	465b      	mov	r3, fp
 800d74c:	f7f2 ff5c 	bl	8000608 <__aeabi_dmul>
 800d750:	4682      	mov	sl, r0
 800d752:	468b      	mov	fp, r1
 800d754:	e640      	b.n	800d3d8 <_strtod_l+0x88>
 800d756:	9a06      	ldr	r2, [sp, #24]
 800d758:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d75c:	4293      	cmp	r3, r2
 800d75e:	db20      	blt.n	800d7a2 <_strtod_l+0x452>
 800d760:	4c64      	ldr	r4, [pc, #400]	; (800d8f4 <_strtod_l+0x5a4>)
 800d762:	f1c5 050f 	rsb	r5, r5, #15
 800d766:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d76a:	4652      	mov	r2, sl
 800d76c:	465b      	mov	r3, fp
 800d76e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d772:	f7f2 ff49 	bl	8000608 <__aeabi_dmul>
 800d776:	9b06      	ldr	r3, [sp, #24]
 800d778:	1b5d      	subs	r5, r3, r5
 800d77a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d77e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d782:	e7e3      	b.n	800d74c <_strtod_l+0x3fc>
 800d784:	9b06      	ldr	r3, [sp, #24]
 800d786:	3316      	adds	r3, #22
 800d788:	db0b      	blt.n	800d7a2 <_strtod_l+0x452>
 800d78a:	9b05      	ldr	r3, [sp, #20]
 800d78c:	1b9e      	subs	r6, r3, r6
 800d78e:	4b59      	ldr	r3, [pc, #356]	; (800d8f4 <_strtod_l+0x5a4>)
 800d790:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d794:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	f7f3 f85e 	bl	800085c <__aeabi_ddiv>
 800d7a0:	e7d6      	b.n	800d750 <_strtod_l+0x400>
 800d7a2:	9b06      	ldr	r3, [sp, #24]
 800d7a4:	eba5 0808 	sub.w	r8, r5, r8
 800d7a8:	4498      	add	r8, r3
 800d7aa:	f1b8 0f00 	cmp.w	r8, #0
 800d7ae:	dd74      	ble.n	800d89a <_strtod_l+0x54a>
 800d7b0:	f018 030f 	ands.w	r3, r8, #15
 800d7b4:	d00a      	beq.n	800d7cc <_strtod_l+0x47c>
 800d7b6:	494f      	ldr	r1, [pc, #316]	; (800d8f4 <_strtod_l+0x5a4>)
 800d7b8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7bc:	4652      	mov	r2, sl
 800d7be:	465b      	mov	r3, fp
 800d7c0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7c4:	f7f2 ff20 	bl	8000608 <__aeabi_dmul>
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	468b      	mov	fp, r1
 800d7cc:	f038 080f 	bics.w	r8, r8, #15
 800d7d0:	d04f      	beq.n	800d872 <_strtod_l+0x522>
 800d7d2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d7d6:	dd22      	ble.n	800d81e <_strtod_l+0x4ce>
 800d7d8:	2500      	movs	r5, #0
 800d7da:	462e      	mov	r6, r5
 800d7dc:	9507      	str	r5, [sp, #28]
 800d7de:	9505      	str	r5, [sp, #20]
 800d7e0:	2322      	movs	r3, #34	; 0x22
 800d7e2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d8fc <_strtod_l+0x5ac>
 800d7e6:	6023      	str	r3, [r4, #0]
 800d7e8:	f04f 0a00 	mov.w	sl, #0
 800d7ec:	9b07      	ldr	r3, [sp, #28]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	f43f adf2 	beq.w	800d3d8 <_strtod_l+0x88>
 800d7f4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d7f6:	4620      	mov	r0, r4
 800d7f8:	f001 fe82 	bl	800f500 <_Bfree>
 800d7fc:	9905      	ldr	r1, [sp, #20]
 800d7fe:	4620      	mov	r0, r4
 800d800:	f001 fe7e 	bl	800f500 <_Bfree>
 800d804:	4631      	mov	r1, r6
 800d806:	4620      	mov	r0, r4
 800d808:	f001 fe7a 	bl	800f500 <_Bfree>
 800d80c:	9907      	ldr	r1, [sp, #28]
 800d80e:	4620      	mov	r0, r4
 800d810:	f001 fe76 	bl	800f500 <_Bfree>
 800d814:	4629      	mov	r1, r5
 800d816:	4620      	mov	r0, r4
 800d818:	f001 fe72 	bl	800f500 <_Bfree>
 800d81c:	e5dc      	b.n	800d3d8 <_strtod_l+0x88>
 800d81e:	4b36      	ldr	r3, [pc, #216]	; (800d8f8 <_strtod_l+0x5a8>)
 800d820:	9304      	str	r3, [sp, #16]
 800d822:	2300      	movs	r3, #0
 800d824:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d828:	4650      	mov	r0, sl
 800d82a:	4659      	mov	r1, fp
 800d82c:	4699      	mov	r9, r3
 800d82e:	f1b8 0f01 	cmp.w	r8, #1
 800d832:	dc21      	bgt.n	800d878 <_strtod_l+0x528>
 800d834:	b10b      	cbz	r3, 800d83a <_strtod_l+0x4ea>
 800d836:	4682      	mov	sl, r0
 800d838:	468b      	mov	fp, r1
 800d83a:	4b2f      	ldr	r3, [pc, #188]	; (800d8f8 <_strtod_l+0x5a8>)
 800d83c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d840:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d844:	4652      	mov	r2, sl
 800d846:	465b      	mov	r3, fp
 800d848:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d84c:	f7f2 fedc 	bl	8000608 <__aeabi_dmul>
 800d850:	4b2a      	ldr	r3, [pc, #168]	; (800d8fc <_strtod_l+0x5ac>)
 800d852:	460a      	mov	r2, r1
 800d854:	400b      	ands	r3, r1
 800d856:	492a      	ldr	r1, [pc, #168]	; (800d900 <_strtod_l+0x5b0>)
 800d858:	428b      	cmp	r3, r1
 800d85a:	4682      	mov	sl, r0
 800d85c:	d8bc      	bhi.n	800d7d8 <_strtod_l+0x488>
 800d85e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d862:	428b      	cmp	r3, r1
 800d864:	bf86      	itte	hi
 800d866:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d904 <_strtod_l+0x5b4>
 800d86a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d86e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d872:	2300      	movs	r3, #0
 800d874:	9304      	str	r3, [sp, #16]
 800d876:	e084      	b.n	800d982 <_strtod_l+0x632>
 800d878:	f018 0f01 	tst.w	r8, #1
 800d87c:	d005      	beq.n	800d88a <_strtod_l+0x53a>
 800d87e:	9b04      	ldr	r3, [sp, #16]
 800d880:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d884:	f7f2 fec0 	bl	8000608 <__aeabi_dmul>
 800d888:	2301      	movs	r3, #1
 800d88a:	9a04      	ldr	r2, [sp, #16]
 800d88c:	3208      	adds	r2, #8
 800d88e:	f109 0901 	add.w	r9, r9, #1
 800d892:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d896:	9204      	str	r2, [sp, #16]
 800d898:	e7c9      	b.n	800d82e <_strtod_l+0x4de>
 800d89a:	d0ea      	beq.n	800d872 <_strtod_l+0x522>
 800d89c:	f1c8 0800 	rsb	r8, r8, #0
 800d8a0:	f018 020f 	ands.w	r2, r8, #15
 800d8a4:	d00a      	beq.n	800d8bc <_strtod_l+0x56c>
 800d8a6:	4b13      	ldr	r3, [pc, #76]	; (800d8f4 <_strtod_l+0x5a4>)
 800d8a8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8ac:	4650      	mov	r0, sl
 800d8ae:	4659      	mov	r1, fp
 800d8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8b4:	f7f2 ffd2 	bl	800085c <__aeabi_ddiv>
 800d8b8:	4682      	mov	sl, r0
 800d8ba:	468b      	mov	fp, r1
 800d8bc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d8c0:	d0d7      	beq.n	800d872 <_strtod_l+0x522>
 800d8c2:	f1b8 0f1f 	cmp.w	r8, #31
 800d8c6:	dd1f      	ble.n	800d908 <_strtod_l+0x5b8>
 800d8c8:	2500      	movs	r5, #0
 800d8ca:	462e      	mov	r6, r5
 800d8cc:	9507      	str	r5, [sp, #28]
 800d8ce:	9505      	str	r5, [sp, #20]
 800d8d0:	2322      	movs	r3, #34	; 0x22
 800d8d2:	f04f 0a00 	mov.w	sl, #0
 800d8d6:	f04f 0b00 	mov.w	fp, #0
 800d8da:	6023      	str	r3, [r4, #0]
 800d8dc:	e786      	b.n	800d7ec <_strtod_l+0x49c>
 800d8de:	bf00      	nop
 800d8e0:	08012559 	.word	0x08012559
 800d8e4:	0801259c 	.word	0x0801259c
 800d8e8:	08012551 	.word	0x08012551
 800d8ec:	080126dc 	.word	0x080126dc
 800d8f0:	08012988 	.word	0x08012988
 800d8f4:	08012868 	.word	0x08012868
 800d8f8:	08012840 	.word	0x08012840
 800d8fc:	7ff00000 	.word	0x7ff00000
 800d900:	7ca00000 	.word	0x7ca00000
 800d904:	7fefffff 	.word	0x7fefffff
 800d908:	f018 0310 	ands.w	r3, r8, #16
 800d90c:	bf18      	it	ne
 800d90e:	236a      	movne	r3, #106	; 0x6a
 800d910:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dcc0 <_strtod_l+0x970>
 800d914:	9304      	str	r3, [sp, #16]
 800d916:	4650      	mov	r0, sl
 800d918:	4659      	mov	r1, fp
 800d91a:	2300      	movs	r3, #0
 800d91c:	f018 0f01 	tst.w	r8, #1
 800d920:	d004      	beq.n	800d92c <_strtod_l+0x5dc>
 800d922:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d926:	f7f2 fe6f 	bl	8000608 <__aeabi_dmul>
 800d92a:	2301      	movs	r3, #1
 800d92c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d930:	f109 0908 	add.w	r9, r9, #8
 800d934:	d1f2      	bne.n	800d91c <_strtod_l+0x5cc>
 800d936:	b10b      	cbz	r3, 800d93c <_strtod_l+0x5ec>
 800d938:	4682      	mov	sl, r0
 800d93a:	468b      	mov	fp, r1
 800d93c:	9b04      	ldr	r3, [sp, #16]
 800d93e:	b1c3      	cbz	r3, 800d972 <_strtod_l+0x622>
 800d940:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d944:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d948:	2b00      	cmp	r3, #0
 800d94a:	4659      	mov	r1, fp
 800d94c:	dd11      	ble.n	800d972 <_strtod_l+0x622>
 800d94e:	2b1f      	cmp	r3, #31
 800d950:	f340 8124 	ble.w	800db9c <_strtod_l+0x84c>
 800d954:	2b34      	cmp	r3, #52	; 0x34
 800d956:	bfde      	ittt	le
 800d958:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d95c:	f04f 33ff 	movle.w	r3, #4294967295
 800d960:	fa03 f202 	lslle.w	r2, r3, r2
 800d964:	f04f 0a00 	mov.w	sl, #0
 800d968:	bfcc      	ite	gt
 800d96a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d96e:	ea02 0b01 	andle.w	fp, r2, r1
 800d972:	2200      	movs	r2, #0
 800d974:	2300      	movs	r3, #0
 800d976:	4650      	mov	r0, sl
 800d978:	4659      	mov	r1, fp
 800d97a:	f7f3 f8ad 	bl	8000ad8 <__aeabi_dcmpeq>
 800d97e:	2800      	cmp	r0, #0
 800d980:	d1a2      	bne.n	800d8c8 <_strtod_l+0x578>
 800d982:	9b07      	ldr	r3, [sp, #28]
 800d984:	9300      	str	r3, [sp, #0]
 800d986:	9908      	ldr	r1, [sp, #32]
 800d988:	462b      	mov	r3, r5
 800d98a:	463a      	mov	r2, r7
 800d98c:	4620      	mov	r0, r4
 800d98e:	f001 fe1f 	bl	800f5d0 <__s2b>
 800d992:	9007      	str	r0, [sp, #28]
 800d994:	2800      	cmp	r0, #0
 800d996:	f43f af1f 	beq.w	800d7d8 <_strtod_l+0x488>
 800d99a:	9b05      	ldr	r3, [sp, #20]
 800d99c:	1b9e      	subs	r6, r3, r6
 800d99e:	9b06      	ldr	r3, [sp, #24]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	bfb4      	ite	lt
 800d9a4:	4633      	movlt	r3, r6
 800d9a6:	2300      	movge	r3, #0
 800d9a8:	930c      	str	r3, [sp, #48]	; 0x30
 800d9aa:	9b06      	ldr	r3, [sp, #24]
 800d9ac:	2500      	movs	r5, #0
 800d9ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d9b2:	9312      	str	r3, [sp, #72]	; 0x48
 800d9b4:	462e      	mov	r6, r5
 800d9b6:	9b07      	ldr	r3, [sp, #28]
 800d9b8:	4620      	mov	r0, r4
 800d9ba:	6859      	ldr	r1, [r3, #4]
 800d9bc:	f001 fd60 	bl	800f480 <_Balloc>
 800d9c0:	9005      	str	r0, [sp, #20]
 800d9c2:	2800      	cmp	r0, #0
 800d9c4:	f43f af0c 	beq.w	800d7e0 <_strtod_l+0x490>
 800d9c8:	9b07      	ldr	r3, [sp, #28]
 800d9ca:	691a      	ldr	r2, [r3, #16]
 800d9cc:	3202      	adds	r2, #2
 800d9ce:	f103 010c 	add.w	r1, r3, #12
 800d9d2:	0092      	lsls	r2, r2, #2
 800d9d4:	300c      	adds	r0, #12
 800d9d6:	f7fe fde7 	bl	800c5a8 <memcpy>
 800d9da:	ec4b ab10 	vmov	d0, sl, fp
 800d9de:	aa1a      	add	r2, sp, #104	; 0x68
 800d9e0:	a919      	add	r1, sp, #100	; 0x64
 800d9e2:	4620      	mov	r0, r4
 800d9e4:	f002 f93a 	bl	800fc5c <__d2b>
 800d9e8:	ec4b ab18 	vmov	d8, sl, fp
 800d9ec:	9018      	str	r0, [sp, #96]	; 0x60
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	f43f aef6 	beq.w	800d7e0 <_strtod_l+0x490>
 800d9f4:	2101      	movs	r1, #1
 800d9f6:	4620      	mov	r0, r4
 800d9f8:	f001 fe84 	bl	800f704 <__i2b>
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	2800      	cmp	r0, #0
 800da00:	f43f aeee 	beq.w	800d7e0 <_strtod_l+0x490>
 800da04:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da06:	9904      	ldr	r1, [sp, #16]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	bfab      	itete	ge
 800da0c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800da0e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800da10:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800da12:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800da16:	bfac      	ite	ge
 800da18:	eb03 0902 	addge.w	r9, r3, r2
 800da1c:	1ad7      	sublt	r7, r2, r3
 800da1e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da20:	eba3 0801 	sub.w	r8, r3, r1
 800da24:	4490      	add	r8, r2
 800da26:	4ba1      	ldr	r3, [pc, #644]	; (800dcac <_strtod_l+0x95c>)
 800da28:	f108 38ff 	add.w	r8, r8, #4294967295
 800da2c:	4598      	cmp	r8, r3
 800da2e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da32:	f280 80c7 	bge.w	800dbc4 <_strtod_l+0x874>
 800da36:	eba3 0308 	sub.w	r3, r3, r8
 800da3a:	2b1f      	cmp	r3, #31
 800da3c:	eba2 0203 	sub.w	r2, r2, r3
 800da40:	f04f 0101 	mov.w	r1, #1
 800da44:	f300 80b1 	bgt.w	800dbaa <_strtod_l+0x85a>
 800da48:	fa01 f303 	lsl.w	r3, r1, r3
 800da4c:	930d      	str	r3, [sp, #52]	; 0x34
 800da4e:	2300      	movs	r3, #0
 800da50:	9308      	str	r3, [sp, #32]
 800da52:	eb09 0802 	add.w	r8, r9, r2
 800da56:	9b04      	ldr	r3, [sp, #16]
 800da58:	45c1      	cmp	r9, r8
 800da5a:	4417      	add	r7, r2
 800da5c:	441f      	add	r7, r3
 800da5e:	464b      	mov	r3, r9
 800da60:	bfa8      	it	ge
 800da62:	4643      	movge	r3, r8
 800da64:	42bb      	cmp	r3, r7
 800da66:	bfa8      	it	ge
 800da68:	463b      	movge	r3, r7
 800da6a:	2b00      	cmp	r3, #0
 800da6c:	bfc2      	ittt	gt
 800da6e:	eba8 0803 	subgt.w	r8, r8, r3
 800da72:	1aff      	subgt	r7, r7, r3
 800da74:	eba9 0903 	subgt.w	r9, r9, r3
 800da78:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da7a:	2b00      	cmp	r3, #0
 800da7c:	dd17      	ble.n	800daae <_strtod_l+0x75e>
 800da7e:	4631      	mov	r1, r6
 800da80:	461a      	mov	r2, r3
 800da82:	4620      	mov	r0, r4
 800da84:	f001 fefe 	bl	800f884 <__pow5mult>
 800da88:	4606      	mov	r6, r0
 800da8a:	2800      	cmp	r0, #0
 800da8c:	f43f aea8 	beq.w	800d7e0 <_strtod_l+0x490>
 800da90:	4601      	mov	r1, r0
 800da92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800da94:	4620      	mov	r0, r4
 800da96:	f001 fe4b 	bl	800f730 <__multiply>
 800da9a:	900b      	str	r0, [sp, #44]	; 0x2c
 800da9c:	2800      	cmp	r0, #0
 800da9e:	f43f ae9f 	beq.w	800d7e0 <_strtod_l+0x490>
 800daa2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800daa4:	4620      	mov	r0, r4
 800daa6:	f001 fd2b 	bl	800f500 <_Bfree>
 800daaa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800daac:	9318      	str	r3, [sp, #96]	; 0x60
 800daae:	f1b8 0f00 	cmp.w	r8, #0
 800dab2:	f300 808c 	bgt.w	800dbce <_strtod_l+0x87e>
 800dab6:	9b06      	ldr	r3, [sp, #24]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	dd08      	ble.n	800dace <_strtod_l+0x77e>
 800dabc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dabe:	9905      	ldr	r1, [sp, #20]
 800dac0:	4620      	mov	r0, r4
 800dac2:	f001 fedf 	bl	800f884 <__pow5mult>
 800dac6:	9005      	str	r0, [sp, #20]
 800dac8:	2800      	cmp	r0, #0
 800daca:	f43f ae89 	beq.w	800d7e0 <_strtod_l+0x490>
 800dace:	2f00      	cmp	r7, #0
 800dad0:	dd08      	ble.n	800dae4 <_strtod_l+0x794>
 800dad2:	9905      	ldr	r1, [sp, #20]
 800dad4:	463a      	mov	r2, r7
 800dad6:	4620      	mov	r0, r4
 800dad8:	f001 ff2e 	bl	800f938 <__lshift>
 800dadc:	9005      	str	r0, [sp, #20]
 800dade:	2800      	cmp	r0, #0
 800dae0:	f43f ae7e 	beq.w	800d7e0 <_strtod_l+0x490>
 800dae4:	f1b9 0f00 	cmp.w	r9, #0
 800dae8:	dd08      	ble.n	800dafc <_strtod_l+0x7ac>
 800daea:	4631      	mov	r1, r6
 800daec:	464a      	mov	r2, r9
 800daee:	4620      	mov	r0, r4
 800daf0:	f001 ff22 	bl	800f938 <__lshift>
 800daf4:	4606      	mov	r6, r0
 800daf6:	2800      	cmp	r0, #0
 800daf8:	f43f ae72 	beq.w	800d7e0 <_strtod_l+0x490>
 800dafc:	9a05      	ldr	r2, [sp, #20]
 800dafe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db00:	4620      	mov	r0, r4
 800db02:	f001 ffa5 	bl	800fa50 <__mdiff>
 800db06:	4605      	mov	r5, r0
 800db08:	2800      	cmp	r0, #0
 800db0a:	f43f ae69 	beq.w	800d7e0 <_strtod_l+0x490>
 800db0e:	68c3      	ldr	r3, [r0, #12]
 800db10:	930b      	str	r3, [sp, #44]	; 0x2c
 800db12:	2300      	movs	r3, #0
 800db14:	60c3      	str	r3, [r0, #12]
 800db16:	4631      	mov	r1, r6
 800db18:	f001 ff7e 	bl	800fa18 <__mcmp>
 800db1c:	2800      	cmp	r0, #0
 800db1e:	da60      	bge.n	800dbe2 <_strtod_l+0x892>
 800db20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db22:	ea53 030a 	orrs.w	r3, r3, sl
 800db26:	f040 8082 	bne.w	800dc2e <_strtod_l+0x8de>
 800db2a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db2e:	2b00      	cmp	r3, #0
 800db30:	d17d      	bne.n	800dc2e <_strtod_l+0x8de>
 800db32:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db36:	0d1b      	lsrs	r3, r3, #20
 800db38:	051b      	lsls	r3, r3, #20
 800db3a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db3e:	d976      	bls.n	800dc2e <_strtod_l+0x8de>
 800db40:	696b      	ldr	r3, [r5, #20]
 800db42:	b913      	cbnz	r3, 800db4a <_strtod_l+0x7fa>
 800db44:	692b      	ldr	r3, [r5, #16]
 800db46:	2b01      	cmp	r3, #1
 800db48:	dd71      	ble.n	800dc2e <_strtod_l+0x8de>
 800db4a:	4629      	mov	r1, r5
 800db4c:	2201      	movs	r2, #1
 800db4e:	4620      	mov	r0, r4
 800db50:	f001 fef2 	bl	800f938 <__lshift>
 800db54:	4631      	mov	r1, r6
 800db56:	4605      	mov	r5, r0
 800db58:	f001 ff5e 	bl	800fa18 <__mcmp>
 800db5c:	2800      	cmp	r0, #0
 800db5e:	dd66      	ble.n	800dc2e <_strtod_l+0x8de>
 800db60:	9904      	ldr	r1, [sp, #16]
 800db62:	4a53      	ldr	r2, [pc, #332]	; (800dcb0 <_strtod_l+0x960>)
 800db64:	465b      	mov	r3, fp
 800db66:	2900      	cmp	r1, #0
 800db68:	f000 8081 	beq.w	800dc6e <_strtod_l+0x91e>
 800db6c:	ea02 010b 	and.w	r1, r2, fp
 800db70:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db74:	dc7b      	bgt.n	800dc6e <_strtod_l+0x91e>
 800db76:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db7a:	f77f aea9 	ble.w	800d8d0 <_strtod_l+0x580>
 800db7e:	4b4d      	ldr	r3, [pc, #308]	; (800dcb4 <_strtod_l+0x964>)
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	2200      	movs	r2, #0
 800db86:	f7f2 fd3f 	bl	8000608 <__aeabi_dmul>
 800db8a:	460b      	mov	r3, r1
 800db8c:	4303      	orrs	r3, r0
 800db8e:	bf08      	it	eq
 800db90:	2322      	moveq	r3, #34	; 0x22
 800db92:	4682      	mov	sl, r0
 800db94:	468b      	mov	fp, r1
 800db96:	bf08      	it	eq
 800db98:	6023      	streq	r3, [r4, #0]
 800db9a:	e62b      	b.n	800d7f4 <_strtod_l+0x4a4>
 800db9c:	f04f 32ff 	mov.w	r2, #4294967295
 800dba0:	fa02 f303 	lsl.w	r3, r2, r3
 800dba4:	ea03 0a0a 	and.w	sl, r3, sl
 800dba8:	e6e3      	b.n	800d972 <_strtod_l+0x622>
 800dbaa:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dbae:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dbb2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dbb6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dbba:	fa01 f308 	lsl.w	r3, r1, r8
 800dbbe:	9308      	str	r3, [sp, #32]
 800dbc0:	910d      	str	r1, [sp, #52]	; 0x34
 800dbc2:	e746      	b.n	800da52 <_strtod_l+0x702>
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	9308      	str	r3, [sp, #32]
 800dbc8:	2301      	movs	r3, #1
 800dbca:	930d      	str	r3, [sp, #52]	; 0x34
 800dbcc:	e741      	b.n	800da52 <_strtod_l+0x702>
 800dbce:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbd0:	4642      	mov	r2, r8
 800dbd2:	4620      	mov	r0, r4
 800dbd4:	f001 feb0 	bl	800f938 <__lshift>
 800dbd8:	9018      	str	r0, [sp, #96]	; 0x60
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	f47f af6b 	bne.w	800dab6 <_strtod_l+0x766>
 800dbe0:	e5fe      	b.n	800d7e0 <_strtod_l+0x490>
 800dbe2:	465f      	mov	r7, fp
 800dbe4:	d16e      	bne.n	800dcc4 <_strtod_l+0x974>
 800dbe6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dbe8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dbec:	b342      	cbz	r2, 800dc40 <_strtod_l+0x8f0>
 800dbee:	4a32      	ldr	r2, [pc, #200]	; (800dcb8 <_strtod_l+0x968>)
 800dbf0:	4293      	cmp	r3, r2
 800dbf2:	d128      	bne.n	800dc46 <_strtod_l+0x8f6>
 800dbf4:	9b04      	ldr	r3, [sp, #16]
 800dbf6:	4651      	mov	r1, sl
 800dbf8:	b1eb      	cbz	r3, 800dc36 <_strtod_l+0x8e6>
 800dbfa:	4b2d      	ldr	r3, [pc, #180]	; (800dcb0 <_strtod_l+0x960>)
 800dbfc:	403b      	ands	r3, r7
 800dbfe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc02:	f04f 32ff 	mov.w	r2, #4294967295
 800dc06:	d819      	bhi.n	800dc3c <_strtod_l+0x8ec>
 800dc08:	0d1b      	lsrs	r3, r3, #20
 800dc0a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc0e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc12:	4299      	cmp	r1, r3
 800dc14:	d117      	bne.n	800dc46 <_strtod_l+0x8f6>
 800dc16:	4b29      	ldr	r3, [pc, #164]	; (800dcbc <_strtod_l+0x96c>)
 800dc18:	429f      	cmp	r7, r3
 800dc1a:	d102      	bne.n	800dc22 <_strtod_l+0x8d2>
 800dc1c:	3101      	adds	r1, #1
 800dc1e:	f43f addf 	beq.w	800d7e0 <_strtod_l+0x490>
 800dc22:	4b23      	ldr	r3, [pc, #140]	; (800dcb0 <_strtod_l+0x960>)
 800dc24:	403b      	ands	r3, r7
 800dc26:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dc2a:	f04f 0a00 	mov.w	sl, #0
 800dc2e:	9b04      	ldr	r3, [sp, #16]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d1a4      	bne.n	800db7e <_strtod_l+0x82e>
 800dc34:	e5de      	b.n	800d7f4 <_strtod_l+0x4a4>
 800dc36:	f04f 33ff 	mov.w	r3, #4294967295
 800dc3a:	e7ea      	b.n	800dc12 <_strtod_l+0x8c2>
 800dc3c:	4613      	mov	r3, r2
 800dc3e:	e7e8      	b.n	800dc12 <_strtod_l+0x8c2>
 800dc40:	ea53 030a 	orrs.w	r3, r3, sl
 800dc44:	d08c      	beq.n	800db60 <_strtod_l+0x810>
 800dc46:	9b08      	ldr	r3, [sp, #32]
 800dc48:	b1db      	cbz	r3, 800dc82 <_strtod_l+0x932>
 800dc4a:	423b      	tst	r3, r7
 800dc4c:	d0ef      	beq.n	800dc2e <_strtod_l+0x8de>
 800dc4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc50:	9a04      	ldr	r2, [sp, #16]
 800dc52:	4650      	mov	r0, sl
 800dc54:	4659      	mov	r1, fp
 800dc56:	b1c3      	cbz	r3, 800dc8a <_strtod_l+0x93a>
 800dc58:	f7ff fb5c 	bl	800d314 <sulp>
 800dc5c:	4602      	mov	r2, r0
 800dc5e:	460b      	mov	r3, r1
 800dc60:	ec51 0b18 	vmov	r0, r1, d8
 800dc64:	f7f2 fb1a 	bl	800029c <__adddf3>
 800dc68:	4682      	mov	sl, r0
 800dc6a:	468b      	mov	fp, r1
 800dc6c:	e7df      	b.n	800dc2e <_strtod_l+0x8de>
 800dc6e:	4013      	ands	r3, r2
 800dc70:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc74:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc78:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc7c:	f04f 3aff 	mov.w	sl, #4294967295
 800dc80:	e7d5      	b.n	800dc2e <_strtod_l+0x8de>
 800dc82:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dc84:	ea13 0f0a 	tst.w	r3, sl
 800dc88:	e7e0      	b.n	800dc4c <_strtod_l+0x8fc>
 800dc8a:	f7ff fb43 	bl	800d314 <sulp>
 800dc8e:	4602      	mov	r2, r0
 800dc90:	460b      	mov	r3, r1
 800dc92:	ec51 0b18 	vmov	r0, r1, d8
 800dc96:	f7f2 faff 	bl	8000298 <__aeabi_dsub>
 800dc9a:	2200      	movs	r2, #0
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	4682      	mov	sl, r0
 800dca0:	468b      	mov	fp, r1
 800dca2:	f7f2 ff19 	bl	8000ad8 <__aeabi_dcmpeq>
 800dca6:	2800      	cmp	r0, #0
 800dca8:	d0c1      	beq.n	800dc2e <_strtod_l+0x8de>
 800dcaa:	e611      	b.n	800d8d0 <_strtod_l+0x580>
 800dcac:	fffffc02 	.word	0xfffffc02
 800dcb0:	7ff00000 	.word	0x7ff00000
 800dcb4:	39500000 	.word	0x39500000
 800dcb8:	000fffff 	.word	0x000fffff
 800dcbc:	7fefffff 	.word	0x7fefffff
 800dcc0:	080125b0 	.word	0x080125b0
 800dcc4:	4631      	mov	r1, r6
 800dcc6:	4628      	mov	r0, r5
 800dcc8:	f002 f824 	bl	800fd14 <__ratio>
 800dccc:	ec59 8b10 	vmov	r8, r9, d0
 800dcd0:	ee10 0a10 	vmov	r0, s0
 800dcd4:	2200      	movs	r2, #0
 800dcd6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcda:	4649      	mov	r1, r9
 800dcdc:	f7f2 ff10 	bl	8000b00 <__aeabi_dcmple>
 800dce0:	2800      	cmp	r0, #0
 800dce2:	d07a      	beq.n	800ddda <_strtod_l+0xa8a>
 800dce4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dce6:	2b00      	cmp	r3, #0
 800dce8:	d04a      	beq.n	800dd80 <_strtod_l+0xa30>
 800dcea:	4b95      	ldr	r3, [pc, #596]	; (800df40 <_strtod_l+0xbf0>)
 800dcec:	2200      	movs	r2, #0
 800dcee:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dcf2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800df40 <_strtod_l+0xbf0>
 800dcf6:	f04f 0800 	mov.w	r8, #0
 800dcfa:	4b92      	ldr	r3, [pc, #584]	; (800df44 <_strtod_l+0xbf4>)
 800dcfc:	403b      	ands	r3, r7
 800dcfe:	930d      	str	r3, [sp, #52]	; 0x34
 800dd00:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd02:	4b91      	ldr	r3, [pc, #580]	; (800df48 <_strtod_l+0xbf8>)
 800dd04:	429a      	cmp	r2, r3
 800dd06:	f040 80b0 	bne.w	800de6a <_strtod_l+0xb1a>
 800dd0a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd0e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dd12:	ec4b ab10 	vmov	d0, sl, fp
 800dd16:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd1a:	f001 ff23 	bl	800fb64 <__ulp>
 800dd1e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd22:	ec53 2b10 	vmov	r2, r3, d0
 800dd26:	f7f2 fc6f 	bl	8000608 <__aeabi_dmul>
 800dd2a:	4652      	mov	r2, sl
 800dd2c:	465b      	mov	r3, fp
 800dd2e:	f7f2 fab5 	bl	800029c <__adddf3>
 800dd32:	460b      	mov	r3, r1
 800dd34:	4983      	ldr	r1, [pc, #524]	; (800df44 <_strtod_l+0xbf4>)
 800dd36:	4a85      	ldr	r2, [pc, #532]	; (800df4c <_strtod_l+0xbfc>)
 800dd38:	4019      	ands	r1, r3
 800dd3a:	4291      	cmp	r1, r2
 800dd3c:	4682      	mov	sl, r0
 800dd3e:	d960      	bls.n	800de02 <_strtod_l+0xab2>
 800dd40:	ee18 3a90 	vmov	r3, s17
 800dd44:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dd48:	4293      	cmp	r3, r2
 800dd4a:	d104      	bne.n	800dd56 <_strtod_l+0xa06>
 800dd4c:	ee18 3a10 	vmov	r3, s16
 800dd50:	3301      	adds	r3, #1
 800dd52:	f43f ad45 	beq.w	800d7e0 <_strtod_l+0x490>
 800dd56:	f8df b200 	ldr.w	fp, [pc, #512]	; 800df58 <_strtod_l+0xc08>
 800dd5a:	f04f 3aff 	mov.w	sl, #4294967295
 800dd5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd60:	4620      	mov	r0, r4
 800dd62:	f001 fbcd 	bl	800f500 <_Bfree>
 800dd66:	9905      	ldr	r1, [sp, #20]
 800dd68:	4620      	mov	r0, r4
 800dd6a:	f001 fbc9 	bl	800f500 <_Bfree>
 800dd6e:	4631      	mov	r1, r6
 800dd70:	4620      	mov	r0, r4
 800dd72:	f001 fbc5 	bl	800f500 <_Bfree>
 800dd76:	4629      	mov	r1, r5
 800dd78:	4620      	mov	r0, r4
 800dd7a:	f001 fbc1 	bl	800f500 <_Bfree>
 800dd7e:	e61a      	b.n	800d9b6 <_strtod_l+0x666>
 800dd80:	f1ba 0f00 	cmp.w	sl, #0
 800dd84:	d11b      	bne.n	800ddbe <_strtod_l+0xa6e>
 800dd86:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dd8a:	b9f3      	cbnz	r3, 800ddca <_strtod_l+0xa7a>
 800dd8c:	4b6c      	ldr	r3, [pc, #432]	; (800df40 <_strtod_l+0xbf0>)
 800dd8e:	2200      	movs	r2, #0
 800dd90:	4640      	mov	r0, r8
 800dd92:	4649      	mov	r1, r9
 800dd94:	f7f2 feaa 	bl	8000aec <__aeabi_dcmplt>
 800dd98:	b9d0      	cbnz	r0, 800ddd0 <_strtod_l+0xa80>
 800dd9a:	4640      	mov	r0, r8
 800dd9c:	4649      	mov	r1, r9
 800dd9e:	4b6c      	ldr	r3, [pc, #432]	; (800df50 <_strtod_l+0xc00>)
 800dda0:	2200      	movs	r2, #0
 800dda2:	f7f2 fc31 	bl	8000608 <__aeabi_dmul>
 800dda6:	4680      	mov	r8, r0
 800dda8:	4689      	mov	r9, r1
 800ddaa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ddae:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ddb2:	9315      	str	r3, [sp, #84]	; 0x54
 800ddb4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ddb8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ddbc:	e79d      	b.n	800dcfa <_strtod_l+0x9aa>
 800ddbe:	f1ba 0f01 	cmp.w	sl, #1
 800ddc2:	d102      	bne.n	800ddca <_strtod_l+0xa7a>
 800ddc4:	2f00      	cmp	r7, #0
 800ddc6:	f43f ad83 	beq.w	800d8d0 <_strtod_l+0x580>
 800ddca:	4b62      	ldr	r3, [pc, #392]	; (800df54 <_strtod_l+0xc04>)
 800ddcc:	2200      	movs	r2, #0
 800ddce:	e78e      	b.n	800dcee <_strtod_l+0x99e>
 800ddd0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800df50 <_strtod_l+0xc00>
 800ddd4:	f04f 0800 	mov.w	r8, #0
 800ddd8:	e7e7      	b.n	800ddaa <_strtod_l+0xa5a>
 800ddda:	4b5d      	ldr	r3, [pc, #372]	; (800df50 <_strtod_l+0xc00>)
 800dddc:	4640      	mov	r0, r8
 800ddde:	4649      	mov	r1, r9
 800dde0:	2200      	movs	r2, #0
 800dde2:	f7f2 fc11 	bl	8000608 <__aeabi_dmul>
 800dde6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dde8:	4680      	mov	r8, r0
 800ddea:	4689      	mov	r9, r1
 800ddec:	b933      	cbnz	r3, 800ddfc <_strtod_l+0xaac>
 800ddee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddf2:	900e      	str	r0, [sp, #56]	; 0x38
 800ddf4:	930f      	str	r3, [sp, #60]	; 0x3c
 800ddf6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ddfa:	e7dd      	b.n	800ddb8 <_strtod_l+0xa68>
 800ddfc:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800de00:	e7f9      	b.n	800ddf6 <_strtod_l+0xaa6>
 800de02:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800de06:	9b04      	ldr	r3, [sp, #16]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d1a8      	bne.n	800dd5e <_strtod_l+0xa0e>
 800de0c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de10:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de12:	0d1b      	lsrs	r3, r3, #20
 800de14:	051b      	lsls	r3, r3, #20
 800de16:	429a      	cmp	r2, r3
 800de18:	d1a1      	bne.n	800dd5e <_strtod_l+0xa0e>
 800de1a:	4640      	mov	r0, r8
 800de1c:	4649      	mov	r1, r9
 800de1e:	f7f2 ff53 	bl	8000cc8 <__aeabi_d2lz>
 800de22:	f7f2 fbc3 	bl	80005ac <__aeabi_l2d>
 800de26:	4602      	mov	r2, r0
 800de28:	460b      	mov	r3, r1
 800de2a:	4640      	mov	r0, r8
 800de2c:	4649      	mov	r1, r9
 800de2e:	f7f2 fa33 	bl	8000298 <__aeabi_dsub>
 800de32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de38:	ea43 030a 	orr.w	r3, r3, sl
 800de3c:	4313      	orrs	r3, r2
 800de3e:	4680      	mov	r8, r0
 800de40:	4689      	mov	r9, r1
 800de42:	d055      	beq.n	800def0 <_strtod_l+0xba0>
 800de44:	a336      	add	r3, pc, #216	; (adr r3, 800df20 <_strtod_l+0xbd0>)
 800de46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de4a:	f7f2 fe4f 	bl	8000aec <__aeabi_dcmplt>
 800de4e:	2800      	cmp	r0, #0
 800de50:	f47f acd0 	bne.w	800d7f4 <_strtod_l+0x4a4>
 800de54:	a334      	add	r3, pc, #208	; (adr r3, 800df28 <_strtod_l+0xbd8>)
 800de56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de5a:	4640      	mov	r0, r8
 800de5c:	4649      	mov	r1, r9
 800de5e:	f7f2 fe63 	bl	8000b28 <__aeabi_dcmpgt>
 800de62:	2800      	cmp	r0, #0
 800de64:	f43f af7b 	beq.w	800dd5e <_strtod_l+0xa0e>
 800de68:	e4c4      	b.n	800d7f4 <_strtod_l+0x4a4>
 800de6a:	9b04      	ldr	r3, [sp, #16]
 800de6c:	b333      	cbz	r3, 800debc <_strtod_l+0xb6c>
 800de6e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de70:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de74:	d822      	bhi.n	800debc <_strtod_l+0xb6c>
 800de76:	a32e      	add	r3, pc, #184	; (adr r3, 800df30 <_strtod_l+0xbe0>)
 800de78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7c:	4640      	mov	r0, r8
 800de7e:	4649      	mov	r1, r9
 800de80:	f7f2 fe3e 	bl	8000b00 <__aeabi_dcmple>
 800de84:	b1a0      	cbz	r0, 800deb0 <_strtod_l+0xb60>
 800de86:	4649      	mov	r1, r9
 800de88:	4640      	mov	r0, r8
 800de8a:	f7f2 fe95 	bl	8000bb8 <__aeabi_d2uiz>
 800de8e:	2801      	cmp	r0, #1
 800de90:	bf38      	it	cc
 800de92:	2001      	movcc	r0, #1
 800de94:	f7f2 fb3e 	bl	8000514 <__aeabi_ui2d>
 800de98:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de9a:	4680      	mov	r8, r0
 800de9c:	4689      	mov	r9, r1
 800de9e:	bb23      	cbnz	r3, 800deea <_strtod_l+0xb9a>
 800dea0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dea4:	9010      	str	r0, [sp, #64]	; 0x40
 800dea6:	9311      	str	r3, [sp, #68]	; 0x44
 800dea8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800deac:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800deb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800deb2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800deb4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800deb8:	1a9b      	subs	r3, r3, r2
 800deba:	9309      	str	r3, [sp, #36]	; 0x24
 800debc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dec0:	eeb0 0a48 	vmov.f32	s0, s16
 800dec4:	eef0 0a68 	vmov.f32	s1, s17
 800dec8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800decc:	f001 fe4a 	bl	800fb64 <__ulp>
 800ded0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ded4:	ec53 2b10 	vmov	r2, r3, d0
 800ded8:	f7f2 fb96 	bl	8000608 <__aeabi_dmul>
 800dedc:	ec53 2b18 	vmov	r2, r3, d8
 800dee0:	f7f2 f9dc 	bl	800029c <__adddf3>
 800dee4:	4682      	mov	sl, r0
 800dee6:	468b      	mov	fp, r1
 800dee8:	e78d      	b.n	800de06 <_strtod_l+0xab6>
 800deea:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800deee:	e7db      	b.n	800dea8 <_strtod_l+0xb58>
 800def0:	a311      	add	r3, pc, #68	; (adr r3, 800df38 <_strtod_l+0xbe8>)
 800def2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800def6:	f7f2 fdf9 	bl	8000aec <__aeabi_dcmplt>
 800defa:	e7b2      	b.n	800de62 <_strtod_l+0xb12>
 800defc:	2300      	movs	r3, #0
 800defe:	930a      	str	r3, [sp, #40]	; 0x28
 800df00:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df02:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df04:	6013      	str	r3, [r2, #0]
 800df06:	f7ff ba6b 	b.w	800d3e0 <_strtod_l+0x90>
 800df0a:	2a65      	cmp	r2, #101	; 0x65
 800df0c:	f43f ab5f 	beq.w	800d5ce <_strtod_l+0x27e>
 800df10:	2a45      	cmp	r2, #69	; 0x45
 800df12:	f43f ab5c 	beq.w	800d5ce <_strtod_l+0x27e>
 800df16:	2301      	movs	r3, #1
 800df18:	f7ff bb94 	b.w	800d644 <_strtod_l+0x2f4>
 800df1c:	f3af 8000 	nop.w
 800df20:	94a03595 	.word	0x94a03595
 800df24:	3fdfffff 	.word	0x3fdfffff
 800df28:	35afe535 	.word	0x35afe535
 800df2c:	3fe00000 	.word	0x3fe00000
 800df30:	ffc00000 	.word	0xffc00000
 800df34:	41dfffff 	.word	0x41dfffff
 800df38:	94a03595 	.word	0x94a03595
 800df3c:	3fcfffff 	.word	0x3fcfffff
 800df40:	3ff00000 	.word	0x3ff00000
 800df44:	7ff00000 	.word	0x7ff00000
 800df48:	7fe00000 	.word	0x7fe00000
 800df4c:	7c9fffff 	.word	0x7c9fffff
 800df50:	3fe00000 	.word	0x3fe00000
 800df54:	bff00000 	.word	0xbff00000
 800df58:	7fefffff 	.word	0x7fefffff

0800df5c <_strtod_r>:
 800df5c:	4b01      	ldr	r3, [pc, #4]	; (800df64 <_strtod_r+0x8>)
 800df5e:	f7ff b9f7 	b.w	800d350 <_strtod_l>
 800df62:	bf00      	nop
 800df64:	200002c4 	.word	0x200002c4

0800df68 <_strtol_l.constprop.0>:
 800df68:	2b01      	cmp	r3, #1
 800df6a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df6e:	d001      	beq.n	800df74 <_strtol_l.constprop.0+0xc>
 800df70:	2b24      	cmp	r3, #36	; 0x24
 800df72:	d906      	bls.n	800df82 <_strtol_l.constprop.0+0x1a>
 800df74:	f7fe faee 	bl	800c554 <__errno>
 800df78:	2316      	movs	r3, #22
 800df7a:	6003      	str	r3, [r0, #0]
 800df7c:	2000      	movs	r0, #0
 800df7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df82:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e068 <_strtol_l.constprop.0+0x100>
 800df86:	460d      	mov	r5, r1
 800df88:	462e      	mov	r6, r5
 800df8a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800df8e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800df92:	f017 0708 	ands.w	r7, r7, #8
 800df96:	d1f7      	bne.n	800df88 <_strtol_l.constprop.0+0x20>
 800df98:	2c2d      	cmp	r4, #45	; 0x2d
 800df9a:	d132      	bne.n	800e002 <_strtol_l.constprop.0+0x9a>
 800df9c:	782c      	ldrb	r4, [r5, #0]
 800df9e:	2701      	movs	r7, #1
 800dfa0:	1cb5      	adds	r5, r6, #2
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d05b      	beq.n	800e05e <_strtol_l.constprop.0+0xf6>
 800dfa6:	2b10      	cmp	r3, #16
 800dfa8:	d109      	bne.n	800dfbe <_strtol_l.constprop.0+0x56>
 800dfaa:	2c30      	cmp	r4, #48	; 0x30
 800dfac:	d107      	bne.n	800dfbe <_strtol_l.constprop.0+0x56>
 800dfae:	782c      	ldrb	r4, [r5, #0]
 800dfb0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfb4:	2c58      	cmp	r4, #88	; 0x58
 800dfb6:	d14d      	bne.n	800e054 <_strtol_l.constprop.0+0xec>
 800dfb8:	786c      	ldrb	r4, [r5, #1]
 800dfba:	2310      	movs	r3, #16
 800dfbc:	3502      	adds	r5, #2
 800dfbe:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dfc2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfc6:	f04f 0c00 	mov.w	ip, #0
 800dfca:	fbb8 f9f3 	udiv	r9, r8, r3
 800dfce:	4666      	mov	r6, ip
 800dfd0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dfd4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dfd8:	f1be 0f09 	cmp.w	lr, #9
 800dfdc:	d816      	bhi.n	800e00c <_strtol_l.constprop.0+0xa4>
 800dfde:	4674      	mov	r4, lr
 800dfe0:	42a3      	cmp	r3, r4
 800dfe2:	dd24      	ble.n	800e02e <_strtol_l.constprop.0+0xc6>
 800dfe4:	f1bc 0f00 	cmp.w	ip, #0
 800dfe8:	db1e      	blt.n	800e028 <_strtol_l.constprop.0+0xc0>
 800dfea:	45b1      	cmp	r9, r6
 800dfec:	d31c      	bcc.n	800e028 <_strtol_l.constprop.0+0xc0>
 800dfee:	d101      	bne.n	800dff4 <_strtol_l.constprop.0+0x8c>
 800dff0:	45a2      	cmp	sl, r4
 800dff2:	db19      	blt.n	800e028 <_strtol_l.constprop.0+0xc0>
 800dff4:	fb06 4603 	mla	r6, r6, r3, r4
 800dff8:	f04f 0c01 	mov.w	ip, #1
 800dffc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e000:	e7e8      	b.n	800dfd4 <_strtol_l.constprop.0+0x6c>
 800e002:	2c2b      	cmp	r4, #43	; 0x2b
 800e004:	bf04      	itt	eq
 800e006:	782c      	ldrbeq	r4, [r5, #0]
 800e008:	1cb5      	addeq	r5, r6, #2
 800e00a:	e7ca      	b.n	800dfa2 <_strtol_l.constprop.0+0x3a>
 800e00c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e010:	f1be 0f19 	cmp.w	lr, #25
 800e014:	d801      	bhi.n	800e01a <_strtol_l.constprop.0+0xb2>
 800e016:	3c37      	subs	r4, #55	; 0x37
 800e018:	e7e2      	b.n	800dfe0 <_strtol_l.constprop.0+0x78>
 800e01a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e01e:	f1be 0f19 	cmp.w	lr, #25
 800e022:	d804      	bhi.n	800e02e <_strtol_l.constprop.0+0xc6>
 800e024:	3c57      	subs	r4, #87	; 0x57
 800e026:	e7db      	b.n	800dfe0 <_strtol_l.constprop.0+0x78>
 800e028:	f04f 3cff 	mov.w	ip, #4294967295
 800e02c:	e7e6      	b.n	800dffc <_strtol_l.constprop.0+0x94>
 800e02e:	f1bc 0f00 	cmp.w	ip, #0
 800e032:	da05      	bge.n	800e040 <_strtol_l.constprop.0+0xd8>
 800e034:	2322      	movs	r3, #34	; 0x22
 800e036:	6003      	str	r3, [r0, #0]
 800e038:	4646      	mov	r6, r8
 800e03a:	b942      	cbnz	r2, 800e04e <_strtol_l.constprop.0+0xe6>
 800e03c:	4630      	mov	r0, r6
 800e03e:	e79e      	b.n	800df7e <_strtol_l.constprop.0+0x16>
 800e040:	b107      	cbz	r7, 800e044 <_strtol_l.constprop.0+0xdc>
 800e042:	4276      	negs	r6, r6
 800e044:	2a00      	cmp	r2, #0
 800e046:	d0f9      	beq.n	800e03c <_strtol_l.constprop.0+0xd4>
 800e048:	f1bc 0f00 	cmp.w	ip, #0
 800e04c:	d000      	beq.n	800e050 <_strtol_l.constprop.0+0xe8>
 800e04e:	1e69      	subs	r1, r5, #1
 800e050:	6011      	str	r1, [r2, #0]
 800e052:	e7f3      	b.n	800e03c <_strtol_l.constprop.0+0xd4>
 800e054:	2430      	movs	r4, #48	; 0x30
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1b1      	bne.n	800dfbe <_strtol_l.constprop.0+0x56>
 800e05a:	2308      	movs	r3, #8
 800e05c:	e7af      	b.n	800dfbe <_strtol_l.constprop.0+0x56>
 800e05e:	2c30      	cmp	r4, #48	; 0x30
 800e060:	d0a5      	beq.n	800dfae <_strtol_l.constprop.0+0x46>
 800e062:	230a      	movs	r3, #10
 800e064:	e7ab      	b.n	800dfbe <_strtol_l.constprop.0+0x56>
 800e066:	bf00      	nop
 800e068:	080125d9 	.word	0x080125d9

0800e06c <_strtol_r>:
 800e06c:	f7ff bf7c 	b.w	800df68 <_strtol_l.constprop.0>

0800e070 <quorem>:
 800e070:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e074:	6903      	ldr	r3, [r0, #16]
 800e076:	690c      	ldr	r4, [r1, #16]
 800e078:	42a3      	cmp	r3, r4
 800e07a:	4607      	mov	r7, r0
 800e07c:	f2c0 8081 	blt.w	800e182 <quorem+0x112>
 800e080:	3c01      	subs	r4, #1
 800e082:	f101 0814 	add.w	r8, r1, #20
 800e086:	f100 0514 	add.w	r5, r0, #20
 800e08a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e08e:	9301      	str	r3, [sp, #4]
 800e090:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e094:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e098:	3301      	adds	r3, #1
 800e09a:	429a      	cmp	r2, r3
 800e09c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0a0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0a4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0a8:	d331      	bcc.n	800e10e <quorem+0x9e>
 800e0aa:	f04f 0e00 	mov.w	lr, #0
 800e0ae:	4640      	mov	r0, r8
 800e0b0:	46ac      	mov	ip, r5
 800e0b2:	46f2      	mov	sl, lr
 800e0b4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0b8:	b293      	uxth	r3, r2
 800e0ba:	fb06 e303 	mla	r3, r6, r3, lr
 800e0be:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e0c2:	b29b      	uxth	r3, r3
 800e0c4:	ebaa 0303 	sub.w	r3, sl, r3
 800e0c8:	f8dc a000 	ldr.w	sl, [ip]
 800e0cc:	0c12      	lsrs	r2, r2, #16
 800e0ce:	fa13 f38a 	uxtah	r3, r3, sl
 800e0d2:	fb06 e202 	mla	r2, r6, r2, lr
 800e0d6:	9300      	str	r3, [sp, #0]
 800e0d8:	9b00      	ldr	r3, [sp, #0]
 800e0da:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e0de:	b292      	uxth	r2, r2
 800e0e0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e0e4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e0e8:	f8bd 3000 	ldrh.w	r3, [sp]
 800e0ec:	4581      	cmp	r9, r0
 800e0ee:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e0f2:	f84c 3b04 	str.w	r3, [ip], #4
 800e0f6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e0fa:	d2db      	bcs.n	800e0b4 <quorem+0x44>
 800e0fc:	f855 300b 	ldr.w	r3, [r5, fp]
 800e100:	b92b      	cbnz	r3, 800e10e <quorem+0x9e>
 800e102:	9b01      	ldr	r3, [sp, #4]
 800e104:	3b04      	subs	r3, #4
 800e106:	429d      	cmp	r5, r3
 800e108:	461a      	mov	r2, r3
 800e10a:	d32e      	bcc.n	800e16a <quorem+0xfa>
 800e10c:	613c      	str	r4, [r7, #16]
 800e10e:	4638      	mov	r0, r7
 800e110:	f001 fc82 	bl	800fa18 <__mcmp>
 800e114:	2800      	cmp	r0, #0
 800e116:	db24      	blt.n	800e162 <quorem+0xf2>
 800e118:	3601      	adds	r6, #1
 800e11a:	4628      	mov	r0, r5
 800e11c:	f04f 0c00 	mov.w	ip, #0
 800e120:	f858 2b04 	ldr.w	r2, [r8], #4
 800e124:	f8d0 e000 	ldr.w	lr, [r0]
 800e128:	b293      	uxth	r3, r2
 800e12a:	ebac 0303 	sub.w	r3, ip, r3
 800e12e:	0c12      	lsrs	r2, r2, #16
 800e130:	fa13 f38e 	uxtah	r3, r3, lr
 800e134:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e138:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e13c:	b29b      	uxth	r3, r3
 800e13e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e142:	45c1      	cmp	r9, r8
 800e144:	f840 3b04 	str.w	r3, [r0], #4
 800e148:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e14c:	d2e8      	bcs.n	800e120 <quorem+0xb0>
 800e14e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e152:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e156:	b922      	cbnz	r2, 800e162 <quorem+0xf2>
 800e158:	3b04      	subs	r3, #4
 800e15a:	429d      	cmp	r5, r3
 800e15c:	461a      	mov	r2, r3
 800e15e:	d30a      	bcc.n	800e176 <quorem+0x106>
 800e160:	613c      	str	r4, [r7, #16]
 800e162:	4630      	mov	r0, r6
 800e164:	b003      	add	sp, #12
 800e166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16a:	6812      	ldr	r2, [r2, #0]
 800e16c:	3b04      	subs	r3, #4
 800e16e:	2a00      	cmp	r2, #0
 800e170:	d1cc      	bne.n	800e10c <quorem+0x9c>
 800e172:	3c01      	subs	r4, #1
 800e174:	e7c7      	b.n	800e106 <quorem+0x96>
 800e176:	6812      	ldr	r2, [r2, #0]
 800e178:	3b04      	subs	r3, #4
 800e17a:	2a00      	cmp	r2, #0
 800e17c:	d1f0      	bne.n	800e160 <quorem+0xf0>
 800e17e:	3c01      	subs	r4, #1
 800e180:	e7eb      	b.n	800e15a <quorem+0xea>
 800e182:	2000      	movs	r0, #0
 800e184:	e7ee      	b.n	800e164 <quorem+0xf4>
	...

0800e188 <_dtoa_r>:
 800e188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e18c:	ed2d 8b04 	vpush	{d8-d9}
 800e190:	ec57 6b10 	vmov	r6, r7, d0
 800e194:	b093      	sub	sp, #76	; 0x4c
 800e196:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e198:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e19c:	9106      	str	r1, [sp, #24]
 800e19e:	ee10 aa10 	vmov	sl, s0
 800e1a2:	4604      	mov	r4, r0
 800e1a4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1a6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1a8:	46bb      	mov	fp, r7
 800e1aa:	b975      	cbnz	r5, 800e1ca <_dtoa_r+0x42>
 800e1ac:	2010      	movs	r0, #16
 800e1ae:	f001 f94d 	bl	800f44c <malloc>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	6260      	str	r0, [r4, #36]	; 0x24
 800e1b6:	b920      	cbnz	r0, 800e1c2 <_dtoa_r+0x3a>
 800e1b8:	4ba7      	ldr	r3, [pc, #668]	; (800e458 <_dtoa_r+0x2d0>)
 800e1ba:	21ea      	movs	r1, #234	; 0xea
 800e1bc:	48a7      	ldr	r0, [pc, #668]	; (800e45c <_dtoa_r+0x2d4>)
 800e1be:	f002 f8ad 	bl	801031c <__assert_func>
 800e1c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1c6:	6005      	str	r5, [r0, #0]
 800e1c8:	60c5      	str	r5, [r0, #12]
 800e1ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1cc:	6819      	ldr	r1, [r3, #0]
 800e1ce:	b151      	cbz	r1, 800e1e6 <_dtoa_r+0x5e>
 800e1d0:	685a      	ldr	r2, [r3, #4]
 800e1d2:	604a      	str	r2, [r1, #4]
 800e1d4:	2301      	movs	r3, #1
 800e1d6:	4093      	lsls	r3, r2
 800e1d8:	608b      	str	r3, [r1, #8]
 800e1da:	4620      	mov	r0, r4
 800e1dc:	f001 f990 	bl	800f500 <_Bfree>
 800e1e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]
 800e1e6:	1e3b      	subs	r3, r7, #0
 800e1e8:	bfaa      	itet	ge
 800e1ea:	2300      	movge	r3, #0
 800e1ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e1f0:	f8c8 3000 	strge.w	r3, [r8]
 800e1f4:	4b9a      	ldr	r3, [pc, #616]	; (800e460 <_dtoa_r+0x2d8>)
 800e1f6:	bfbc      	itt	lt
 800e1f8:	2201      	movlt	r2, #1
 800e1fa:	f8c8 2000 	strlt.w	r2, [r8]
 800e1fe:	ea33 030b 	bics.w	r3, r3, fp
 800e202:	d11b      	bne.n	800e23c <_dtoa_r+0xb4>
 800e204:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e206:	f242 730f 	movw	r3, #9999	; 0x270f
 800e20a:	6013      	str	r3, [r2, #0]
 800e20c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e210:	4333      	orrs	r3, r6
 800e212:	f000 8592 	beq.w	800ed3a <_dtoa_r+0xbb2>
 800e216:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e218:	b963      	cbnz	r3, 800e234 <_dtoa_r+0xac>
 800e21a:	4b92      	ldr	r3, [pc, #584]	; (800e464 <_dtoa_r+0x2dc>)
 800e21c:	e022      	b.n	800e264 <_dtoa_r+0xdc>
 800e21e:	4b92      	ldr	r3, [pc, #584]	; (800e468 <_dtoa_r+0x2e0>)
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	3308      	adds	r3, #8
 800e224:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e226:	6013      	str	r3, [r2, #0]
 800e228:	9801      	ldr	r0, [sp, #4]
 800e22a:	b013      	add	sp, #76	; 0x4c
 800e22c:	ecbd 8b04 	vpop	{d8-d9}
 800e230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e234:	4b8b      	ldr	r3, [pc, #556]	; (800e464 <_dtoa_r+0x2dc>)
 800e236:	9301      	str	r3, [sp, #4]
 800e238:	3303      	adds	r3, #3
 800e23a:	e7f3      	b.n	800e224 <_dtoa_r+0x9c>
 800e23c:	2200      	movs	r2, #0
 800e23e:	2300      	movs	r3, #0
 800e240:	4650      	mov	r0, sl
 800e242:	4659      	mov	r1, fp
 800e244:	f7f2 fc48 	bl	8000ad8 <__aeabi_dcmpeq>
 800e248:	ec4b ab19 	vmov	d9, sl, fp
 800e24c:	4680      	mov	r8, r0
 800e24e:	b158      	cbz	r0, 800e268 <_dtoa_r+0xe0>
 800e250:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e252:	2301      	movs	r3, #1
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e258:	2b00      	cmp	r3, #0
 800e25a:	f000 856b 	beq.w	800ed34 <_dtoa_r+0xbac>
 800e25e:	4883      	ldr	r0, [pc, #524]	; (800e46c <_dtoa_r+0x2e4>)
 800e260:	6018      	str	r0, [r3, #0]
 800e262:	1e43      	subs	r3, r0, #1
 800e264:	9301      	str	r3, [sp, #4]
 800e266:	e7df      	b.n	800e228 <_dtoa_r+0xa0>
 800e268:	ec4b ab10 	vmov	d0, sl, fp
 800e26c:	aa10      	add	r2, sp, #64	; 0x40
 800e26e:	a911      	add	r1, sp, #68	; 0x44
 800e270:	4620      	mov	r0, r4
 800e272:	f001 fcf3 	bl	800fc5c <__d2b>
 800e276:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e27a:	ee08 0a10 	vmov	s16, r0
 800e27e:	2d00      	cmp	r5, #0
 800e280:	f000 8084 	beq.w	800e38c <_dtoa_r+0x204>
 800e284:	ee19 3a90 	vmov	r3, s19
 800e288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e28c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e290:	4656      	mov	r6, sl
 800e292:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e296:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e29a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e29e:	4b74      	ldr	r3, [pc, #464]	; (800e470 <_dtoa_r+0x2e8>)
 800e2a0:	2200      	movs	r2, #0
 800e2a2:	4630      	mov	r0, r6
 800e2a4:	4639      	mov	r1, r7
 800e2a6:	f7f1 fff7 	bl	8000298 <__aeabi_dsub>
 800e2aa:	a365      	add	r3, pc, #404	; (adr r3, 800e440 <_dtoa_r+0x2b8>)
 800e2ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2b0:	f7f2 f9aa 	bl	8000608 <__aeabi_dmul>
 800e2b4:	a364      	add	r3, pc, #400	; (adr r3, 800e448 <_dtoa_r+0x2c0>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	f7f1 ffef 	bl	800029c <__adddf3>
 800e2be:	4606      	mov	r6, r0
 800e2c0:	4628      	mov	r0, r5
 800e2c2:	460f      	mov	r7, r1
 800e2c4:	f7f2 f936 	bl	8000534 <__aeabi_i2d>
 800e2c8:	a361      	add	r3, pc, #388	; (adr r3, 800e450 <_dtoa_r+0x2c8>)
 800e2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ce:	f7f2 f99b 	bl	8000608 <__aeabi_dmul>
 800e2d2:	4602      	mov	r2, r0
 800e2d4:	460b      	mov	r3, r1
 800e2d6:	4630      	mov	r0, r6
 800e2d8:	4639      	mov	r1, r7
 800e2da:	f7f1 ffdf 	bl	800029c <__adddf3>
 800e2de:	4606      	mov	r6, r0
 800e2e0:	460f      	mov	r7, r1
 800e2e2:	f7f2 fc41 	bl	8000b68 <__aeabi_d2iz>
 800e2e6:	2200      	movs	r2, #0
 800e2e8:	9000      	str	r0, [sp, #0]
 800e2ea:	2300      	movs	r3, #0
 800e2ec:	4630      	mov	r0, r6
 800e2ee:	4639      	mov	r1, r7
 800e2f0:	f7f2 fbfc 	bl	8000aec <__aeabi_dcmplt>
 800e2f4:	b150      	cbz	r0, 800e30c <_dtoa_r+0x184>
 800e2f6:	9800      	ldr	r0, [sp, #0]
 800e2f8:	f7f2 f91c 	bl	8000534 <__aeabi_i2d>
 800e2fc:	4632      	mov	r2, r6
 800e2fe:	463b      	mov	r3, r7
 800e300:	f7f2 fbea 	bl	8000ad8 <__aeabi_dcmpeq>
 800e304:	b910      	cbnz	r0, 800e30c <_dtoa_r+0x184>
 800e306:	9b00      	ldr	r3, [sp, #0]
 800e308:	3b01      	subs	r3, #1
 800e30a:	9300      	str	r3, [sp, #0]
 800e30c:	9b00      	ldr	r3, [sp, #0]
 800e30e:	2b16      	cmp	r3, #22
 800e310:	d85a      	bhi.n	800e3c8 <_dtoa_r+0x240>
 800e312:	9a00      	ldr	r2, [sp, #0]
 800e314:	4b57      	ldr	r3, [pc, #348]	; (800e474 <_dtoa_r+0x2ec>)
 800e316:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e31a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e31e:	ec51 0b19 	vmov	r0, r1, d9
 800e322:	f7f2 fbe3 	bl	8000aec <__aeabi_dcmplt>
 800e326:	2800      	cmp	r0, #0
 800e328:	d050      	beq.n	800e3cc <_dtoa_r+0x244>
 800e32a:	9b00      	ldr	r3, [sp, #0]
 800e32c:	3b01      	subs	r3, #1
 800e32e:	9300      	str	r3, [sp, #0]
 800e330:	2300      	movs	r3, #0
 800e332:	930b      	str	r3, [sp, #44]	; 0x2c
 800e334:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e336:	1b5d      	subs	r5, r3, r5
 800e338:	1e6b      	subs	r3, r5, #1
 800e33a:	9305      	str	r3, [sp, #20]
 800e33c:	bf45      	ittet	mi
 800e33e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e342:	9304      	strmi	r3, [sp, #16]
 800e344:	2300      	movpl	r3, #0
 800e346:	2300      	movmi	r3, #0
 800e348:	bf4c      	ite	mi
 800e34a:	9305      	strmi	r3, [sp, #20]
 800e34c:	9304      	strpl	r3, [sp, #16]
 800e34e:	9b00      	ldr	r3, [sp, #0]
 800e350:	2b00      	cmp	r3, #0
 800e352:	db3d      	blt.n	800e3d0 <_dtoa_r+0x248>
 800e354:	9b05      	ldr	r3, [sp, #20]
 800e356:	9a00      	ldr	r2, [sp, #0]
 800e358:	920a      	str	r2, [sp, #40]	; 0x28
 800e35a:	4413      	add	r3, r2
 800e35c:	9305      	str	r3, [sp, #20]
 800e35e:	2300      	movs	r3, #0
 800e360:	9307      	str	r3, [sp, #28]
 800e362:	9b06      	ldr	r3, [sp, #24]
 800e364:	2b09      	cmp	r3, #9
 800e366:	f200 8089 	bhi.w	800e47c <_dtoa_r+0x2f4>
 800e36a:	2b05      	cmp	r3, #5
 800e36c:	bfc4      	itt	gt
 800e36e:	3b04      	subgt	r3, #4
 800e370:	9306      	strgt	r3, [sp, #24]
 800e372:	9b06      	ldr	r3, [sp, #24]
 800e374:	f1a3 0302 	sub.w	r3, r3, #2
 800e378:	bfcc      	ite	gt
 800e37a:	2500      	movgt	r5, #0
 800e37c:	2501      	movle	r5, #1
 800e37e:	2b03      	cmp	r3, #3
 800e380:	f200 8087 	bhi.w	800e492 <_dtoa_r+0x30a>
 800e384:	e8df f003 	tbb	[pc, r3]
 800e388:	59383a2d 	.word	0x59383a2d
 800e38c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e390:	441d      	add	r5, r3
 800e392:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e396:	2b20      	cmp	r3, #32
 800e398:	bfc1      	itttt	gt
 800e39a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e39e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3a2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3a6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3aa:	bfda      	itte	le
 800e3ac:	f1c3 0320 	rsble	r3, r3, #32
 800e3b0:	fa06 f003 	lslle.w	r0, r6, r3
 800e3b4:	4318      	orrgt	r0, r3
 800e3b6:	f7f2 f8ad 	bl	8000514 <__aeabi_ui2d>
 800e3ba:	2301      	movs	r3, #1
 800e3bc:	4606      	mov	r6, r0
 800e3be:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e3c2:	3d01      	subs	r5, #1
 800e3c4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3c6:	e76a      	b.n	800e29e <_dtoa_r+0x116>
 800e3c8:	2301      	movs	r3, #1
 800e3ca:	e7b2      	b.n	800e332 <_dtoa_r+0x1aa>
 800e3cc:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3ce:	e7b1      	b.n	800e334 <_dtoa_r+0x1ac>
 800e3d0:	9b04      	ldr	r3, [sp, #16]
 800e3d2:	9a00      	ldr	r2, [sp, #0]
 800e3d4:	1a9b      	subs	r3, r3, r2
 800e3d6:	9304      	str	r3, [sp, #16]
 800e3d8:	4253      	negs	r3, r2
 800e3da:	9307      	str	r3, [sp, #28]
 800e3dc:	2300      	movs	r3, #0
 800e3de:	930a      	str	r3, [sp, #40]	; 0x28
 800e3e0:	e7bf      	b.n	800e362 <_dtoa_r+0x1da>
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	9308      	str	r3, [sp, #32]
 800e3e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3e8:	2b00      	cmp	r3, #0
 800e3ea:	dc55      	bgt.n	800e498 <_dtoa_r+0x310>
 800e3ec:	2301      	movs	r3, #1
 800e3ee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e3f2:	461a      	mov	r2, r3
 800e3f4:	9209      	str	r2, [sp, #36]	; 0x24
 800e3f6:	e00c      	b.n	800e412 <_dtoa_r+0x28a>
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	e7f3      	b.n	800e3e4 <_dtoa_r+0x25c>
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e400:	9308      	str	r3, [sp, #32]
 800e402:	9b00      	ldr	r3, [sp, #0]
 800e404:	4413      	add	r3, r2
 800e406:	9302      	str	r3, [sp, #8]
 800e408:	3301      	adds	r3, #1
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	9303      	str	r3, [sp, #12]
 800e40e:	bfb8      	it	lt
 800e410:	2301      	movlt	r3, #1
 800e412:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e414:	2200      	movs	r2, #0
 800e416:	6042      	str	r2, [r0, #4]
 800e418:	2204      	movs	r2, #4
 800e41a:	f102 0614 	add.w	r6, r2, #20
 800e41e:	429e      	cmp	r6, r3
 800e420:	6841      	ldr	r1, [r0, #4]
 800e422:	d93d      	bls.n	800e4a0 <_dtoa_r+0x318>
 800e424:	4620      	mov	r0, r4
 800e426:	f001 f82b 	bl	800f480 <_Balloc>
 800e42a:	9001      	str	r0, [sp, #4]
 800e42c:	2800      	cmp	r0, #0
 800e42e:	d13b      	bne.n	800e4a8 <_dtoa_r+0x320>
 800e430:	4b11      	ldr	r3, [pc, #68]	; (800e478 <_dtoa_r+0x2f0>)
 800e432:	4602      	mov	r2, r0
 800e434:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e438:	e6c0      	b.n	800e1bc <_dtoa_r+0x34>
 800e43a:	2301      	movs	r3, #1
 800e43c:	e7df      	b.n	800e3fe <_dtoa_r+0x276>
 800e43e:	bf00      	nop
 800e440:	636f4361 	.word	0x636f4361
 800e444:	3fd287a7 	.word	0x3fd287a7
 800e448:	8b60c8b3 	.word	0x8b60c8b3
 800e44c:	3fc68a28 	.word	0x3fc68a28
 800e450:	509f79fb 	.word	0x509f79fb
 800e454:	3fd34413 	.word	0x3fd34413
 800e458:	080126e6 	.word	0x080126e6
 800e45c:	080126fd 	.word	0x080126fd
 800e460:	7ff00000 	.word	0x7ff00000
 800e464:	080126e2 	.word	0x080126e2
 800e468:	080126d9 	.word	0x080126d9
 800e46c:	0801255d 	.word	0x0801255d
 800e470:	3ff80000 	.word	0x3ff80000
 800e474:	08012868 	.word	0x08012868
 800e478:	08012758 	.word	0x08012758
 800e47c:	2501      	movs	r5, #1
 800e47e:	2300      	movs	r3, #0
 800e480:	9306      	str	r3, [sp, #24]
 800e482:	9508      	str	r5, [sp, #32]
 800e484:	f04f 33ff 	mov.w	r3, #4294967295
 800e488:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e48c:	2200      	movs	r2, #0
 800e48e:	2312      	movs	r3, #18
 800e490:	e7b0      	b.n	800e3f4 <_dtoa_r+0x26c>
 800e492:	2301      	movs	r3, #1
 800e494:	9308      	str	r3, [sp, #32]
 800e496:	e7f5      	b.n	800e484 <_dtoa_r+0x2fc>
 800e498:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e49a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e49e:	e7b8      	b.n	800e412 <_dtoa_r+0x28a>
 800e4a0:	3101      	adds	r1, #1
 800e4a2:	6041      	str	r1, [r0, #4]
 800e4a4:	0052      	lsls	r2, r2, #1
 800e4a6:	e7b8      	b.n	800e41a <_dtoa_r+0x292>
 800e4a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4aa:	9a01      	ldr	r2, [sp, #4]
 800e4ac:	601a      	str	r2, [r3, #0]
 800e4ae:	9b03      	ldr	r3, [sp, #12]
 800e4b0:	2b0e      	cmp	r3, #14
 800e4b2:	f200 809d 	bhi.w	800e5f0 <_dtoa_r+0x468>
 800e4b6:	2d00      	cmp	r5, #0
 800e4b8:	f000 809a 	beq.w	800e5f0 <_dtoa_r+0x468>
 800e4bc:	9b00      	ldr	r3, [sp, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	dd32      	ble.n	800e528 <_dtoa_r+0x3a0>
 800e4c2:	4ab7      	ldr	r2, [pc, #732]	; (800e7a0 <_dtoa_r+0x618>)
 800e4c4:	f003 030f 	and.w	r3, r3, #15
 800e4c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4cc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4d0:	9b00      	ldr	r3, [sp, #0]
 800e4d2:	05d8      	lsls	r0, r3, #23
 800e4d4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e4d8:	d516      	bpl.n	800e508 <_dtoa_r+0x380>
 800e4da:	4bb2      	ldr	r3, [pc, #712]	; (800e7a4 <_dtoa_r+0x61c>)
 800e4dc:	ec51 0b19 	vmov	r0, r1, d9
 800e4e0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e4e4:	f7f2 f9ba 	bl	800085c <__aeabi_ddiv>
 800e4e8:	f007 070f 	and.w	r7, r7, #15
 800e4ec:	4682      	mov	sl, r0
 800e4ee:	468b      	mov	fp, r1
 800e4f0:	2503      	movs	r5, #3
 800e4f2:	4eac      	ldr	r6, [pc, #688]	; (800e7a4 <_dtoa_r+0x61c>)
 800e4f4:	b957      	cbnz	r7, 800e50c <_dtoa_r+0x384>
 800e4f6:	4642      	mov	r2, r8
 800e4f8:	464b      	mov	r3, r9
 800e4fa:	4650      	mov	r0, sl
 800e4fc:	4659      	mov	r1, fp
 800e4fe:	f7f2 f9ad 	bl	800085c <__aeabi_ddiv>
 800e502:	4682      	mov	sl, r0
 800e504:	468b      	mov	fp, r1
 800e506:	e028      	b.n	800e55a <_dtoa_r+0x3d2>
 800e508:	2502      	movs	r5, #2
 800e50a:	e7f2      	b.n	800e4f2 <_dtoa_r+0x36a>
 800e50c:	07f9      	lsls	r1, r7, #31
 800e50e:	d508      	bpl.n	800e522 <_dtoa_r+0x39a>
 800e510:	4640      	mov	r0, r8
 800e512:	4649      	mov	r1, r9
 800e514:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e518:	f7f2 f876 	bl	8000608 <__aeabi_dmul>
 800e51c:	3501      	adds	r5, #1
 800e51e:	4680      	mov	r8, r0
 800e520:	4689      	mov	r9, r1
 800e522:	107f      	asrs	r7, r7, #1
 800e524:	3608      	adds	r6, #8
 800e526:	e7e5      	b.n	800e4f4 <_dtoa_r+0x36c>
 800e528:	f000 809b 	beq.w	800e662 <_dtoa_r+0x4da>
 800e52c:	9b00      	ldr	r3, [sp, #0]
 800e52e:	4f9d      	ldr	r7, [pc, #628]	; (800e7a4 <_dtoa_r+0x61c>)
 800e530:	425e      	negs	r6, r3
 800e532:	4b9b      	ldr	r3, [pc, #620]	; (800e7a0 <_dtoa_r+0x618>)
 800e534:	f006 020f 	and.w	r2, r6, #15
 800e538:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	ec51 0b19 	vmov	r0, r1, d9
 800e544:	f7f2 f860 	bl	8000608 <__aeabi_dmul>
 800e548:	1136      	asrs	r6, r6, #4
 800e54a:	4682      	mov	sl, r0
 800e54c:	468b      	mov	fp, r1
 800e54e:	2300      	movs	r3, #0
 800e550:	2502      	movs	r5, #2
 800e552:	2e00      	cmp	r6, #0
 800e554:	d17a      	bne.n	800e64c <_dtoa_r+0x4c4>
 800e556:	2b00      	cmp	r3, #0
 800e558:	d1d3      	bne.n	800e502 <_dtoa_r+0x37a>
 800e55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e55c:	2b00      	cmp	r3, #0
 800e55e:	f000 8082 	beq.w	800e666 <_dtoa_r+0x4de>
 800e562:	4b91      	ldr	r3, [pc, #580]	; (800e7a8 <_dtoa_r+0x620>)
 800e564:	2200      	movs	r2, #0
 800e566:	4650      	mov	r0, sl
 800e568:	4659      	mov	r1, fp
 800e56a:	f7f2 fabf 	bl	8000aec <__aeabi_dcmplt>
 800e56e:	2800      	cmp	r0, #0
 800e570:	d079      	beq.n	800e666 <_dtoa_r+0x4de>
 800e572:	9b03      	ldr	r3, [sp, #12]
 800e574:	2b00      	cmp	r3, #0
 800e576:	d076      	beq.n	800e666 <_dtoa_r+0x4de>
 800e578:	9b02      	ldr	r3, [sp, #8]
 800e57a:	2b00      	cmp	r3, #0
 800e57c:	dd36      	ble.n	800e5ec <_dtoa_r+0x464>
 800e57e:	9b00      	ldr	r3, [sp, #0]
 800e580:	4650      	mov	r0, sl
 800e582:	4659      	mov	r1, fp
 800e584:	1e5f      	subs	r7, r3, #1
 800e586:	2200      	movs	r2, #0
 800e588:	4b88      	ldr	r3, [pc, #544]	; (800e7ac <_dtoa_r+0x624>)
 800e58a:	f7f2 f83d 	bl	8000608 <__aeabi_dmul>
 800e58e:	9e02      	ldr	r6, [sp, #8]
 800e590:	4682      	mov	sl, r0
 800e592:	468b      	mov	fp, r1
 800e594:	3501      	adds	r5, #1
 800e596:	4628      	mov	r0, r5
 800e598:	f7f1 ffcc 	bl	8000534 <__aeabi_i2d>
 800e59c:	4652      	mov	r2, sl
 800e59e:	465b      	mov	r3, fp
 800e5a0:	f7f2 f832 	bl	8000608 <__aeabi_dmul>
 800e5a4:	4b82      	ldr	r3, [pc, #520]	; (800e7b0 <_dtoa_r+0x628>)
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	f7f1 fe78 	bl	800029c <__adddf3>
 800e5ac:	46d0      	mov	r8, sl
 800e5ae:	46d9      	mov	r9, fp
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e5b6:	2e00      	cmp	r6, #0
 800e5b8:	d158      	bne.n	800e66c <_dtoa_r+0x4e4>
 800e5ba:	4b7e      	ldr	r3, [pc, #504]	; (800e7b4 <_dtoa_r+0x62c>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4640      	mov	r0, r8
 800e5c0:	4649      	mov	r1, r9
 800e5c2:	f7f1 fe69 	bl	8000298 <__aeabi_dsub>
 800e5c6:	4652      	mov	r2, sl
 800e5c8:	465b      	mov	r3, fp
 800e5ca:	4680      	mov	r8, r0
 800e5cc:	4689      	mov	r9, r1
 800e5ce:	f7f2 faab 	bl	8000b28 <__aeabi_dcmpgt>
 800e5d2:	2800      	cmp	r0, #0
 800e5d4:	f040 8295 	bne.w	800eb02 <_dtoa_r+0x97a>
 800e5d8:	4652      	mov	r2, sl
 800e5da:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	f7f2 fa83 	bl	8000aec <__aeabi_dcmplt>
 800e5e6:	2800      	cmp	r0, #0
 800e5e8:	f040 8289 	bne.w	800eafe <_dtoa_r+0x976>
 800e5ec:	ec5b ab19 	vmov	sl, fp, d9
 800e5f0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	f2c0 8148 	blt.w	800e888 <_dtoa_r+0x700>
 800e5f8:	9a00      	ldr	r2, [sp, #0]
 800e5fa:	2a0e      	cmp	r2, #14
 800e5fc:	f300 8144 	bgt.w	800e888 <_dtoa_r+0x700>
 800e600:	4b67      	ldr	r3, [pc, #412]	; (800e7a0 <_dtoa_r+0x618>)
 800e602:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e606:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	f280 80d5 	bge.w	800e7bc <_dtoa_r+0x634>
 800e612:	9b03      	ldr	r3, [sp, #12]
 800e614:	2b00      	cmp	r3, #0
 800e616:	f300 80d1 	bgt.w	800e7bc <_dtoa_r+0x634>
 800e61a:	f040 826f 	bne.w	800eafc <_dtoa_r+0x974>
 800e61e:	4b65      	ldr	r3, [pc, #404]	; (800e7b4 <_dtoa_r+0x62c>)
 800e620:	2200      	movs	r2, #0
 800e622:	4640      	mov	r0, r8
 800e624:	4649      	mov	r1, r9
 800e626:	f7f1 ffef 	bl	8000608 <__aeabi_dmul>
 800e62a:	4652      	mov	r2, sl
 800e62c:	465b      	mov	r3, fp
 800e62e:	f7f2 fa71 	bl	8000b14 <__aeabi_dcmpge>
 800e632:	9e03      	ldr	r6, [sp, #12]
 800e634:	4637      	mov	r7, r6
 800e636:	2800      	cmp	r0, #0
 800e638:	f040 8245 	bne.w	800eac6 <_dtoa_r+0x93e>
 800e63c:	9d01      	ldr	r5, [sp, #4]
 800e63e:	2331      	movs	r3, #49	; 0x31
 800e640:	f805 3b01 	strb.w	r3, [r5], #1
 800e644:	9b00      	ldr	r3, [sp, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	9300      	str	r3, [sp, #0]
 800e64a:	e240      	b.n	800eace <_dtoa_r+0x946>
 800e64c:	07f2      	lsls	r2, r6, #31
 800e64e:	d505      	bpl.n	800e65c <_dtoa_r+0x4d4>
 800e650:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e654:	f7f1 ffd8 	bl	8000608 <__aeabi_dmul>
 800e658:	3501      	adds	r5, #1
 800e65a:	2301      	movs	r3, #1
 800e65c:	1076      	asrs	r6, r6, #1
 800e65e:	3708      	adds	r7, #8
 800e660:	e777      	b.n	800e552 <_dtoa_r+0x3ca>
 800e662:	2502      	movs	r5, #2
 800e664:	e779      	b.n	800e55a <_dtoa_r+0x3d2>
 800e666:	9f00      	ldr	r7, [sp, #0]
 800e668:	9e03      	ldr	r6, [sp, #12]
 800e66a:	e794      	b.n	800e596 <_dtoa_r+0x40e>
 800e66c:	9901      	ldr	r1, [sp, #4]
 800e66e:	4b4c      	ldr	r3, [pc, #304]	; (800e7a0 <_dtoa_r+0x618>)
 800e670:	4431      	add	r1, r6
 800e672:	910d      	str	r1, [sp, #52]	; 0x34
 800e674:	9908      	ldr	r1, [sp, #32]
 800e676:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e67a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e67e:	2900      	cmp	r1, #0
 800e680:	d043      	beq.n	800e70a <_dtoa_r+0x582>
 800e682:	494d      	ldr	r1, [pc, #308]	; (800e7b8 <_dtoa_r+0x630>)
 800e684:	2000      	movs	r0, #0
 800e686:	f7f2 f8e9 	bl	800085c <__aeabi_ddiv>
 800e68a:	4652      	mov	r2, sl
 800e68c:	465b      	mov	r3, fp
 800e68e:	f7f1 fe03 	bl	8000298 <__aeabi_dsub>
 800e692:	9d01      	ldr	r5, [sp, #4]
 800e694:	4682      	mov	sl, r0
 800e696:	468b      	mov	fp, r1
 800e698:	4649      	mov	r1, r9
 800e69a:	4640      	mov	r0, r8
 800e69c:	f7f2 fa64 	bl	8000b68 <__aeabi_d2iz>
 800e6a0:	4606      	mov	r6, r0
 800e6a2:	f7f1 ff47 	bl	8000534 <__aeabi_i2d>
 800e6a6:	4602      	mov	r2, r0
 800e6a8:	460b      	mov	r3, r1
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	4649      	mov	r1, r9
 800e6ae:	f7f1 fdf3 	bl	8000298 <__aeabi_dsub>
 800e6b2:	3630      	adds	r6, #48	; 0x30
 800e6b4:	f805 6b01 	strb.w	r6, [r5], #1
 800e6b8:	4652      	mov	r2, sl
 800e6ba:	465b      	mov	r3, fp
 800e6bc:	4680      	mov	r8, r0
 800e6be:	4689      	mov	r9, r1
 800e6c0:	f7f2 fa14 	bl	8000aec <__aeabi_dcmplt>
 800e6c4:	2800      	cmp	r0, #0
 800e6c6:	d163      	bne.n	800e790 <_dtoa_r+0x608>
 800e6c8:	4642      	mov	r2, r8
 800e6ca:	464b      	mov	r3, r9
 800e6cc:	4936      	ldr	r1, [pc, #216]	; (800e7a8 <_dtoa_r+0x620>)
 800e6ce:	2000      	movs	r0, #0
 800e6d0:	f7f1 fde2 	bl	8000298 <__aeabi_dsub>
 800e6d4:	4652      	mov	r2, sl
 800e6d6:	465b      	mov	r3, fp
 800e6d8:	f7f2 fa08 	bl	8000aec <__aeabi_dcmplt>
 800e6dc:	2800      	cmp	r0, #0
 800e6de:	f040 80b5 	bne.w	800e84c <_dtoa_r+0x6c4>
 800e6e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e6e4:	429d      	cmp	r5, r3
 800e6e6:	d081      	beq.n	800e5ec <_dtoa_r+0x464>
 800e6e8:	4b30      	ldr	r3, [pc, #192]	; (800e7ac <_dtoa_r+0x624>)
 800e6ea:	2200      	movs	r2, #0
 800e6ec:	4650      	mov	r0, sl
 800e6ee:	4659      	mov	r1, fp
 800e6f0:	f7f1 ff8a 	bl	8000608 <__aeabi_dmul>
 800e6f4:	4b2d      	ldr	r3, [pc, #180]	; (800e7ac <_dtoa_r+0x624>)
 800e6f6:	4682      	mov	sl, r0
 800e6f8:	468b      	mov	fp, r1
 800e6fa:	4640      	mov	r0, r8
 800e6fc:	4649      	mov	r1, r9
 800e6fe:	2200      	movs	r2, #0
 800e700:	f7f1 ff82 	bl	8000608 <__aeabi_dmul>
 800e704:	4680      	mov	r8, r0
 800e706:	4689      	mov	r9, r1
 800e708:	e7c6      	b.n	800e698 <_dtoa_r+0x510>
 800e70a:	4650      	mov	r0, sl
 800e70c:	4659      	mov	r1, fp
 800e70e:	f7f1 ff7b 	bl	8000608 <__aeabi_dmul>
 800e712:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e714:	9d01      	ldr	r5, [sp, #4]
 800e716:	930f      	str	r3, [sp, #60]	; 0x3c
 800e718:	4682      	mov	sl, r0
 800e71a:	468b      	mov	fp, r1
 800e71c:	4649      	mov	r1, r9
 800e71e:	4640      	mov	r0, r8
 800e720:	f7f2 fa22 	bl	8000b68 <__aeabi_d2iz>
 800e724:	4606      	mov	r6, r0
 800e726:	f7f1 ff05 	bl	8000534 <__aeabi_i2d>
 800e72a:	3630      	adds	r6, #48	; 0x30
 800e72c:	4602      	mov	r2, r0
 800e72e:	460b      	mov	r3, r1
 800e730:	4640      	mov	r0, r8
 800e732:	4649      	mov	r1, r9
 800e734:	f7f1 fdb0 	bl	8000298 <__aeabi_dsub>
 800e738:	f805 6b01 	strb.w	r6, [r5], #1
 800e73c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e73e:	429d      	cmp	r5, r3
 800e740:	4680      	mov	r8, r0
 800e742:	4689      	mov	r9, r1
 800e744:	f04f 0200 	mov.w	r2, #0
 800e748:	d124      	bne.n	800e794 <_dtoa_r+0x60c>
 800e74a:	4b1b      	ldr	r3, [pc, #108]	; (800e7b8 <_dtoa_r+0x630>)
 800e74c:	4650      	mov	r0, sl
 800e74e:	4659      	mov	r1, fp
 800e750:	f7f1 fda4 	bl	800029c <__adddf3>
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4640      	mov	r0, r8
 800e75a:	4649      	mov	r1, r9
 800e75c:	f7f2 f9e4 	bl	8000b28 <__aeabi_dcmpgt>
 800e760:	2800      	cmp	r0, #0
 800e762:	d173      	bne.n	800e84c <_dtoa_r+0x6c4>
 800e764:	4652      	mov	r2, sl
 800e766:	465b      	mov	r3, fp
 800e768:	4913      	ldr	r1, [pc, #76]	; (800e7b8 <_dtoa_r+0x630>)
 800e76a:	2000      	movs	r0, #0
 800e76c:	f7f1 fd94 	bl	8000298 <__aeabi_dsub>
 800e770:	4602      	mov	r2, r0
 800e772:	460b      	mov	r3, r1
 800e774:	4640      	mov	r0, r8
 800e776:	4649      	mov	r1, r9
 800e778:	f7f2 f9b8 	bl	8000aec <__aeabi_dcmplt>
 800e77c:	2800      	cmp	r0, #0
 800e77e:	f43f af35 	beq.w	800e5ec <_dtoa_r+0x464>
 800e782:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e784:	1e6b      	subs	r3, r5, #1
 800e786:	930f      	str	r3, [sp, #60]	; 0x3c
 800e788:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e78c:	2b30      	cmp	r3, #48	; 0x30
 800e78e:	d0f8      	beq.n	800e782 <_dtoa_r+0x5fa>
 800e790:	9700      	str	r7, [sp, #0]
 800e792:	e049      	b.n	800e828 <_dtoa_r+0x6a0>
 800e794:	4b05      	ldr	r3, [pc, #20]	; (800e7ac <_dtoa_r+0x624>)
 800e796:	f7f1 ff37 	bl	8000608 <__aeabi_dmul>
 800e79a:	4680      	mov	r8, r0
 800e79c:	4689      	mov	r9, r1
 800e79e:	e7bd      	b.n	800e71c <_dtoa_r+0x594>
 800e7a0:	08012868 	.word	0x08012868
 800e7a4:	08012840 	.word	0x08012840
 800e7a8:	3ff00000 	.word	0x3ff00000
 800e7ac:	40240000 	.word	0x40240000
 800e7b0:	401c0000 	.word	0x401c0000
 800e7b4:	40140000 	.word	0x40140000
 800e7b8:	3fe00000 	.word	0x3fe00000
 800e7bc:	9d01      	ldr	r5, [sp, #4]
 800e7be:	4656      	mov	r6, sl
 800e7c0:	465f      	mov	r7, fp
 800e7c2:	4642      	mov	r2, r8
 800e7c4:	464b      	mov	r3, r9
 800e7c6:	4630      	mov	r0, r6
 800e7c8:	4639      	mov	r1, r7
 800e7ca:	f7f2 f847 	bl	800085c <__aeabi_ddiv>
 800e7ce:	f7f2 f9cb 	bl	8000b68 <__aeabi_d2iz>
 800e7d2:	4682      	mov	sl, r0
 800e7d4:	f7f1 feae 	bl	8000534 <__aeabi_i2d>
 800e7d8:	4642      	mov	r2, r8
 800e7da:	464b      	mov	r3, r9
 800e7dc:	f7f1 ff14 	bl	8000608 <__aeabi_dmul>
 800e7e0:	4602      	mov	r2, r0
 800e7e2:	460b      	mov	r3, r1
 800e7e4:	4630      	mov	r0, r6
 800e7e6:	4639      	mov	r1, r7
 800e7e8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e7ec:	f7f1 fd54 	bl	8000298 <__aeabi_dsub>
 800e7f0:	f805 6b01 	strb.w	r6, [r5], #1
 800e7f4:	9e01      	ldr	r6, [sp, #4]
 800e7f6:	9f03      	ldr	r7, [sp, #12]
 800e7f8:	1bae      	subs	r6, r5, r6
 800e7fa:	42b7      	cmp	r7, r6
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	d135      	bne.n	800e86e <_dtoa_r+0x6e6>
 800e802:	f7f1 fd4b 	bl	800029c <__adddf3>
 800e806:	4642      	mov	r2, r8
 800e808:	464b      	mov	r3, r9
 800e80a:	4606      	mov	r6, r0
 800e80c:	460f      	mov	r7, r1
 800e80e:	f7f2 f98b 	bl	8000b28 <__aeabi_dcmpgt>
 800e812:	b9d0      	cbnz	r0, 800e84a <_dtoa_r+0x6c2>
 800e814:	4642      	mov	r2, r8
 800e816:	464b      	mov	r3, r9
 800e818:	4630      	mov	r0, r6
 800e81a:	4639      	mov	r1, r7
 800e81c:	f7f2 f95c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e820:	b110      	cbz	r0, 800e828 <_dtoa_r+0x6a0>
 800e822:	f01a 0f01 	tst.w	sl, #1
 800e826:	d110      	bne.n	800e84a <_dtoa_r+0x6c2>
 800e828:	4620      	mov	r0, r4
 800e82a:	ee18 1a10 	vmov	r1, s16
 800e82e:	f000 fe67 	bl	800f500 <_Bfree>
 800e832:	2300      	movs	r3, #0
 800e834:	9800      	ldr	r0, [sp, #0]
 800e836:	702b      	strb	r3, [r5, #0]
 800e838:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e83a:	3001      	adds	r0, #1
 800e83c:	6018      	str	r0, [r3, #0]
 800e83e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e840:	2b00      	cmp	r3, #0
 800e842:	f43f acf1 	beq.w	800e228 <_dtoa_r+0xa0>
 800e846:	601d      	str	r5, [r3, #0]
 800e848:	e4ee      	b.n	800e228 <_dtoa_r+0xa0>
 800e84a:	9f00      	ldr	r7, [sp, #0]
 800e84c:	462b      	mov	r3, r5
 800e84e:	461d      	mov	r5, r3
 800e850:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e854:	2a39      	cmp	r2, #57	; 0x39
 800e856:	d106      	bne.n	800e866 <_dtoa_r+0x6de>
 800e858:	9a01      	ldr	r2, [sp, #4]
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d1f7      	bne.n	800e84e <_dtoa_r+0x6c6>
 800e85e:	9901      	ldr	r1, [sp, #4]
 800e860:	2230      	movs	r2, #48	; 0x30
 800e862:	3701      	adds	r7, #1
 800e864:	700a      	strb	r2, [r1, #0]
 800e866:	781a      	ldrb	r2, [r3, #0]
 800e868:	3201      	adds	r2, #1
 800e86a:	701a      	strb	r2, [r3, #0]
 800e86c:	e790      	b.n	800e790 <_dtoa_r+0x608>
 800e86e:	4ba6      	ldr	r3, [pc, #664]	; (800eb08 <_dtoa_r+0x980>)
 800e870:	2200      	movs	r2, #0
 800e872:	f7f1 fec9 	bl	8000608 <__aeabi_dmul>
 800e876:	2200      	movs	r2, #0
 800e878:	2300      	movs	r3, #0
 800e87a:	4606      	mov	r6, r0
 800e87c:	460f      	mov	r7, r1
 800e87e:	f7f2 f92b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e882:	2800      	cmp	r0, #0
 800e884:	d09d      	beq.n	800e7c2 <_dtoa_r+0x63a>
 800e886:	e7cf      	b.n	800e828 <_dtoa_r+0x6a0>
 800e888:	9a08      	ldr	r2, [sp, #32]
 800e88a:	2a00      	cmp	r2, #0
 800e88c:	f000 80d7 	beq.w	800ea3e <_dtoa_r+0x8b6>
 800e890:	9a06      	ldr	r2, [sp, #24]
 800e892:	2a01      	cmp	r2, #1
 800e894:	f300 80ba 	bgt.w	800ea0c <_dtoa_r+0x884>
 800e898:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e89a:	2a00      	cmp	r2, #0
 800e89c:	f000 80b2 	beq.w	800ea04 <_dtoa_r+0x87c>
 800e8a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8a4:	9e07      	ldr	r6, [sp, #28]
 800e8a6:	9d04      	ldr	r5, [sp, #16]
 800e8a8:	9a04      	ldr	r2, [sp, #16]
 800e8aa:	441a      	add	r2, r3
 800e8ac:	9204      	str	r2, [sp, #16]
 800e8ae:	9a05      	ldr	r2, [sp, #20]
 800e8b0:	2101      	movs	r1, #1
 800e8b2:	441a      	add	r2, r3
 800e8b4:	4620      	mov	r0, r4
 800e8b6:	9205      	str	r2, [sp, #20]
 800e8b8:	f000 ff24 	bl	800f704 <__i2b>
 800e8bc:	4607      	mov	r7, r0
 800e8be:	2d00      	cmp	r5, #0
 800e8c0:	dd0c      	ble.n	800e8dc <_dtoa_r+0x754>
 800e8c2:	9b05      	ldr	r3, [sp, #20]
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	dd09      	ble.n	800e8dc <_dtoa_r+0x754>
 800e8c8:	42ab      	cmp	r3, r5
 800e8ca:	9a04      	ldr	r2, [sp, #16]
 800e8cc:	bfa8      	it	ge
 800e8ce:	462b      	movge	r3, r5
 800e8d0:	1ad2      	subs	r2, r2, r3
 800e8d2:	9204      	str	r2, [sp, #16]
 800e8d4:	9a05      	ldr	r2, [sp, #20]
 800e8d6:	1aed      	subs	r5, r5, r3
 800e8d8:	1ad3      	subs	r3, r2, r3
 800e8da:	9305      	str	r3, [sp, #20]
 800e8dc:	9b07      	ldr	r3, [sp, #28]
 800e8de:	b31b      	cbz	r3, 800e928 <_dtoa_r+0x7a0>
 800e8e0:	9b08      	ldr	r3, [sp, #32]
 800e8e2:	2b00      	cmp	r3, #0
 800e8e4:	f000 80af 	beq.w	800ea46 <_dtoa_r+0x8be>
 800e8e8:	2e00      	cmp	r6, #0
 800e8ea:	dd13      	ble.n	800e914 <_dtoa_r+0x78c>
 800e8ec:	4639      	mov	r1, r7
 800e8ee:	4632      	mov	r2, r6
 800e8f0:	4620      	mov	r0, r4
 800e8f2:	f000 ffc7 	bl	800f884 <__pow5mult>
 800e8f6:	ee18 2a10 	vmov	r2, s16
 800e8fa:	4601      	mov	r1, r0
 800e8fc:	4607      	mov	r7, r0
 800e8fe:	4620      	mov	r0, r4
 800e900:	f000 ff16 	bl	800f730 <__multiply>
 800e904:	ee18 1a10 	vmov	r1, s16
 800e908:	4680      	mov	r8, r0
 800e90a:	4620      	mov	r0, r4
 800e90c:	f000 fdf8 	bl	800f500 <_Bfree>
 800e910:	ee08 8a10 	vmov	s16, r8
 800e914:	9b07      	ldr	r3, [sp, #28]
 800e916:	1b9a      	subs	r2, r3, r6
 800e918:	d006      	beq.n	800e928 <_dtoa_r+0x7a0>
 800e91a:	ee18 1a10 	vmov	r1, s16
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 ffb0 	bl	800f884 <__pow5mult>
 800e924:	ee08 0a10 	vmov	s16, r0
 800e928:	2101      	movs	r1, #1
 800e92a:	4620      	mov	r0, r4
 800e92c:	f000 feea 	bl	800f704 <__i2b>
 800e930:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e932:	2b00      	cmp	r3, #0
 800e934:	4606      	mov	r6, r0
 800e936:	f340 8088 	ble.w	800ea4a <_dtoa_r+0x8c2>
 800e93a:	461a      	mov	r2, r3
 800e93c:	4601      	mov	r1, r0
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 ffa0 	bl	800f884 <__pow5mult>
 800e944:	9b06      	ldr	r3, [sp, #24]
 800e946:	2b01      	cmp	r3, #1
 800e948:	4606      	mov	r6, r0
 800e94a:	f340 8081 	ble.w	800ea50 <_dtoa_r+0x8c8>
 800e94e:	f04f 0800 	mov.w	r8, #0
 800e952:	6933      	ldr	r3, [r6, #16]
 800e954:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e958:	6918      	ldr	r0, [r3, #16]
 800e95a:	f000 fe83 	bl	800f664 <__hi0bits>
 800e95e:	f1c0 0020 	rsb	r0, r0, #32
 800e962:	9b05      	ldr	r3, [sp, #20]
 800e964:	4418      	add	r0, r3
 800e966:	f010 001f 	ands.w	r0, r0, #31
 800e96a:	f000 8092 	beq.w	800ea92 <_dtoa_r+0x90a>
 800e96e:	f1c0 0320 	rsb	r3, r0, #32
 800e972:	2b04      	cmp	r3, #4
 800e974:	f340 808a 	ble.w	800ea8c <_dtoa_r+0x904>
 800e978:	f1c0 001c 	rsb	r0, r0, #28
 800e97c:	9b04      	ldr	r3, [sp, #16]
 800e97e:	4403      	add	r3, r0
 800e980:	9304      	str	r3, [sp, #16]
 800e982:	9b05      	ldr	r3, [sp, #20]
 800e984:	4403      	add	r3, r0
 800e986:	4405      	add	r5, r0
 800e988:	9305      	str	r3, [sp, #20]
 800e98a:	9b04      	ldr	r3, [sp, #16]
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	dd07      	ble.n	800e9a0 <_dtoa_r+0x818>
 800e990:	ee18 1a10 	vmov	r1, s16
 800e994:	461a      	mov	r2, r3
 800e996:	4620      	mov	r0, r4
 800e998:	f000 ffce 	bl	800f938 <__lshift>
 800e99c:	ee08 0a10 	vmov	s16, r0
 800e9a0:	9b05      	ldr	r3, [sp, #20]
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	dd05      	ble.n	800e9b2 <_dtoa_r+0x82a>
 800e9a6:	4631      	mov	r1, r6
 800e9a8:	461a      	mov	r2, r3
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f000 ffc4 	bl	800f938 <__lshift>
 800e9b0:	4606      	mov	r6, r0
 800e9b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d06e      	beq.n	800ea96 <_dtoa_r+0x90e>
 800e9b8:	ee18 0a10 	vmov	r0, s16
 800e9bc:	4631      	mov	r1, r6
 800e9be:	f001 f82b 	bl	800fa18 <__mcmp>
 800e9c2:	2800      	cmp	r0, #0
 800e9c4:	da67      	bge.n	800ea96 <_dtoa_r+0x90e>
 800e9c6:	9b00      	ldr	r3, [sp, #0]
 800e9c8:	3b01      	subs	r3, #1
 800e9ca:	ee18 1a10 	vmov	r1, s16
 800e9ce:	9300      	str	r3, [sp, #0]
 800e9d0:	220a      	movs	r2, #10
 800e9d2:	2300      	movs	r3, #0
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	f000 fdb5 	bl	800f544 <__multadd>
 800e9da:	9b08      	ldr	r3, [sp, #32]
 800e9dc:	ee08 0a10 	vmov	s16, r0
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	f000 81b1 	beq.w	800ed48 <_dtoa_r+0xbc0>
 800e9e6:	2300      	movs	r3, #0
 800e9e8:	4639      	mov	r1, r7
 800e9ea:	220a      	movs	r2, #10
 800e9ec:	4620      	mov	r0, r4
 800e9ee:	f000 fda9 	bl	800f544 <__multadd>
 800e9f2:	9b02      	ldr	r3, [sp, #8]
 800e9f4:	2b00      	cmp	r3, #0
 800e9f6:	4607      	mov	r7, r0
 800e9f8:	f300 808e 	bgt.w	800eb18 <_dtoa_r+0x990>
 800e9fc:	9b06      	ldr	r3, [sp, #24]
 800e9fe:	2b02      	cmp	r3, #2
 800ea00:	dc51      	bgt.n	800eaa6 <_dtoa_r+0x91e>
 800ea02:	e089      	b.n	800eb18 <_dtoa_r+0x990>
 800ea04:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea06:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea0a:	e74b      	b.n	800e8a4 <_dtoa_r+0x71c>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	1e5e      	subs	r6, r3, #1
 800ea10:	9b07      	ldr	r3, [sp, #28]
 800ea12:	42b3      	cmp	r3, r6
 800ea14:	bfbf      	itttt	lt
 800ea16:	9b07      	ldrlt	r3, [sp, #28]
 800ea18:	9607      	strlt	r6, [sp, #28]
 800ea1a:	1af2      	sublt	r2, r6, r3
 800ea1c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea1e:	bfb6      	itet	lt
 800ea20:	189b      	addlt	r3, r3, r2
 800ea22:	1b9e      	subge	r6, r3, r6
 800ea24:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea26:	9b03      	ldr	r3, [sp, #12]
 800ea28:	bfb8      	it	lt
 800ea2a:	2600      	movlt	r6, #0
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	bfb7      	itett	lt
 800ea30:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea34:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea38:	1a9d      	sublt	r5, r3, r2
 800ea3a:	2300      	movlt	r3, #0
 800ea3c:	e734      	b.n	800e8a8 <_dtoa_r+0x720>
 800ea3e:	9e07      	ldr	r6, [sp, #28]
 800ea40:	9d04      	ldr	r5, [sp, #16]
 800ea42:	9f08      	ldr	r7, [sp, #32]
 800ea44:	e73b      	b.n	800e8be <_dtoa_r+0x736>
 800ea46:	9a07      	ldr	r2, [sp, #28]
 800ea48:	e767      	b.n	800e91a <_dtoa_r+0x792>
 800ea4a:	9b06      	ldr	r3, [sp, #24]
 800ea4c:	2b01      	cmp	r3, #1
 800ea4e:	dc18      	bgt.n	800ea82 <_dtoa_r+0x8fa>
 800ea50:	f1ba 0f00 	cmp.w	sl, #0
 800ea54:	d115      	bne.n	800ea82 <_dtoa_r+0x8fa>
 800ea56:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea5a:	b993      	cbnz	r3, 800ea82 <_dtoa_r+0x8fa>
 800ea5c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea60:	0d1b      	lsrs	r3, r3, #20
 800ea62:	051b      	lsls	r3, r3, #20
 800ea64:	b183      	cbz	r3, 800ea88 <_dtoa_r+0x900>
 800ea66:	9b04      	ldr	r3, [sp, #16]
 800ea68:	3301      	adds	r3, #1
 800ea6a:	9304      	str	r3, [sp, #16]
 800ea6c:	9b05      	ldr	r3, [sp, #20]
 800ea6e:	3301      	adds	r3, #1
 800ea70:	9305      	str	r3, [sp, #20]
 800ea72:	f04f 0801 	mov.w	r8, #1
 800ea76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	f47f af6a 	bne.w	800e952 <_dtoa_r+0x7ca>
 800ea7e:	2001      	movs	r0, #1
 800ea80:	e76f      	b.n	800e962 <_dtoa_r+0x7da>
 800ea82:	f04f 0800 	mov.w	r8, #0
 800ea86:	e7f6      	b.n	800ea76 <_dtoa_r+0x8ee>
 800ea88:	4698      	mov	r8, r3
 800ea8a:	e7f4      	b.n	800ea76 <_dtoa_r+0x8ee>
 800ea8c:	f43f af7d 	beq.w	800e98a <_dtoa_r+0x802>
 800ea90:	4618      	mov	r0, r3
 800ea92:	301c      	adds	r0, #28
 800ea94:	e772      	b.n	800e97c <_dtoa_r+0x7f4>
 800ea96:	9b03      	ldr	r3, [sp, #12]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	dc37      	bgt.n	800eb0c <_dtoa_r+0x984>
 800ea9c:	9b06      	ldr	r3, [sp, #24]
 800ea9e:	2b02      	cmp	r3, #2
 800eaa0:	dd34      	ble.n	800eb0c <_dtoa_r+0x984>
 800eaa2:	9b03      	ldr	r3, [sp, #12]
 800eaa4:	9302      	str	r3, [sp, #8]
 800eaa6:	9b02      	ldr	r3, [sp, #8]
 800eaa8:	b96b      	cbnz	r3, 800eac6 <_dtoa_r+0x93e>
 800eaaa:	4631      	mov	r1, r6
 800eaac:	2205      	movs	r2, #5
 800eaae:	4620      	mov	r0, r4
 800eab0:	f000 fd48 	bl	800f544 <__multadd>
 800eab4:	4601      	mov	r1, r0
 800eab6:	4606      	mov	r6, r0
 800eab8:	ee18 0a10 	vmov	r0, s16
 800eabc:	f000 ffac 	bl	800fa18 <__mcmp>
 800eac0:	2800      	cmp	r0, #0
 800eac2:	f73f adbb 	bgt.w	800e63c <_dtoa_r+0x4b4>
 800eac6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eac8:	9d01      	ldr	r5, [sp, #4]
 800eaca:	43db      	mvns	r3, r3
 800eacc:	9300      	str	r3, [sp, #0]
 800eace:	f04f 0800 	mov.w	r8, #0
 800ead2:	4631      	mov	r1, r6
 800ead4:	4620      	mov	r0, r4
 800ead6:	f000 fd13 	bl	800f500 <_Bfree>
 800eada:	2f00      	cmp	r7, #0
 800eadc:	f43f aea4 	beq.w	800e828 <_dtoa_r+0x6a0>
 800eae0:	f1b8 0f00 	cmp.w	r8, #0
 800eae4:	d005      	beq.n	800eaf2 <_dtoa_r+0x96a>
 800eae6:	45b8      	cmp	r8, r7
 800eae8:	d003      	beq.n	800eaf2 <_dtoa_r+0x96a>
 800eaea:	4641      	mov	r1, r8
 800eaec:	4620      	mov	r0, r4
 800eaee:	f000 fd07 	bl	800f500 <_Bfree>
 800eaf2:	4639      	mov	r1, r7
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 fd03 	bl	800f500 <_Bfree>
 800eafa:	e695      	b.n	800e828 <_dtoa_r+0x6a0>
 800eafc:	2600      	movs	r6, #0
 800eafe:	4637      	mov	r7, r6
 800eb00:	e7e1      	b.n	800eac6 <_dtoa_r+0x93e>
 800eb02:	9700      	str	r7, [sp, #0]
 800eb04:	4637      	mov	r7, r6
 800eb06:	e599      	b.n	800e63c <_dtoa_r+0x4b4>
 800eb08:	40240000 	.word	0x40240000
 800eb0c:	9b08      	ldr	r3, [sp, #32]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 80ca 	beq.w	800eca8 <_dtoa_r+0xb20>
 800eb14:	9b03      	ldr	r3, [sp, #12]
 800eb16:	9302      	str	r3, [sp, #8]
 800eb18:	2d00      	cmp	r5, #0
 800eb1a:	dd05      	ble.n	800eb28 <_dtoa_r+0x9a0>
 800eb1c:	4639      	mov	r1, r7
 800eb1e:	462a      	mov	r2, r5
 800eb20:	4620      	mov	r0, r4
 800eb22:	f000 ff09 	bl	800f938 <__lshift>
 800eb26:	4607      	mov	r7, r0
 800eb28:	f1b8 0f00 	cmp.w	r8, #0
 800eb2c:	d05b      	beq.n	800ebe6 <_dtoa_r+0xa5e>
 800eb2e:	6879      	ldr	r1, [r7, #4]
 800eb30:	4620      	mov	r0, r4
 800eb32:	f000 fca5 	bl	800f480 <_Balloc>
 800eb36:	4605      	mov	r5, r0
 800eb38:	b928      	cbnz	r0, 800eb46 <_dtoa_r+0x9be>
 800eb3a:	4b87      	ldr	r3, [pc, #540]	; (800ed58 <_dtoa_r+0xbd0>)
 800eb3c:	4602      	mov	r2, r0
 800eb3e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb42:	f7ff bb3b 	b.w	800e1bc <_dtoa_r+0x34>
 800eb46:	693a      	ldr	r2, [r7, #16]
 800eb48:	3202      	adds	r2, #2
 800eb4a:	0092      	lsls	r2, r2, #2
 800eb4c:	f107 010c 	add.w	r1, r7, #12
 800eb50:	300c      	adds	r0, #12
 800eb52:	f7fd fd29 	bl	800c5a8 <memcpy>
 800eb56:	2201      	movs	r2, #1
 800eb58:	4629      	mov	r1, r5
 800eb5a:	4620      	mov	r0, r4
 800eb5c:	f000 feec 	bl	800f938 <__lshift>
 800eb60:	9b01      	ldr	r3, [sp, #4]
 800eb62:	f103 0901 	add.w	r9, r3, #1
 800eb66:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb6a:	4413      	add	r3, r2
 800eb6c:	9305      	str	r3, [sp, #20]
 800eb6e:	f00a 0301 	and.w	r3, sl, #1
 800eb72:	46b8      	mov	r8, r7
 800eb74:	9304      	str	r3, [sp, #16]
 800eb76:	4607      	mov	r7, r0
 800eb78:	4631      	mov	r1, r6
 800eb7a:	ee18 0a10 	vmov	r0, s16
 800eb7e:	f7ff fa77 	bl	800e070 <quorem>
 800eb82:	4641      	mov	r1, r8
 800eb84:	9002      	str	r0, [sp, #8]
 800eb86:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800eb8a:	ee18 0a10 	vmov	r0, s16
 800eb8e:	f000 ff43 	bl	800fa18 <__mcmp>
 800eb92:	463a      	mov	r2, r7
 800eb94:	9003      	str	r0, [sp, #12]
 800eb96:	4631      	mov	r1, r6
 800eb98:	4620      	mov	r0, r4
 800eb9a:	f000 ff59 	bl	800fa50 <__mdiff>
 800eb9e:	68c2      	ldr	r2, [r0, #12]
 800eba0:	f109 3bff 	add.w	fp, r9, #4294967295
 800eba4:	4605      	mov	r5, r0
 800eba6:	bb02      	cbnz	r2, 800ebea <_dtoa_r+0xa62>
 800eba8:	4601      	mov	r1, r0
 800ebaa:	ee18 0a10 	vmov	r0, s16
 800ebae:	f000 ff33 	bl	800fa18 <__mcmp>
 800ebb2:	4602      	mov	r2, r0
 800ebb4:	4629      	mov	r1, r5
 800ebb6:	4620      	mov	r0, r4
 800ebb8:	9207      	str	r2, [sp, #28]
 800ebba:	f000 fca1 	bl	800f500 <_Bfree>
 800ebbe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ebc2:	ea43 0102 	orr.w	r1, r3, r2
 800ebc6:	9b04      	ldr	r3, [sp, #16]
 800ebc8:	430b      	orrs	r3, r1
 800ebca:	464d      	mov	r5, r9
 800ebcc:	d10f      	bne.n	800ebee <_dtoa_r+0xa66>
 800ebce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebd2:	d02a      	beq.n	800ec2a <_dtoa_r+0xaa2>
 800ebd4:	9b03      	ldr	r3, [sp, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	dd02      	ble.n	800ebe0 <_dtoa_r+0xa58>
 800ebda:	9b02      	ldr	r3, [sp, #8]
 800ebdc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ebe0:	f88b a000 	strb.w	sl, [fp]
 800ebe4:	e775      	b.n	800ead2 <_dtoa_r+0x94a>
 800ebe6:	4638      	mov	r0, r7
 800ebe8:	e7ba      	b.n	800eb60 <_dtoa_r+0x9d8>
 800ebea:	2201      	movs	r2, #1
 800ebec:	e7e2      	b.n	800ebb4 <_dtoa_r+0xa2c>
 800ebee:	9b03      	ldr	r3, [sp, #12]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	db04      	blt.n	800ebfe <_dtoa_r+0xa76>
 800ebf4:	9906      	ldr	r1, [sp, #24]
 800ebf6:	430b      	orrs	r3, r1
 800ebf8:	9904      	ldr	r1, [sp, #16]
 800ebfa:	430b      	orrs	r3, r1
 800ebfc:	d122      	bne.n	800ec44 <_dtoa_r+0xabc>
 800ebfe:	2a00      	cmp	r2, #0
 800ec00:	ddee      	ble.n	800ebe0 <_dtoa_r+0xa58>
 800ec02:	ee18 1a10 	vmov	r1, s16
 800ec06:	2201      	movs	r2, #1
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f000 fe95 	bl	800f938 <__lshift>
 800ec0e:	4631      	mov	r1, r6
 800ec10:	ee08 0a10 	vmov	s16, r0
 800ec14:	f000 ff00 	bl	800fa18 <__mcmp>
 800ec18:	2800      	cmp	r0, #0
 800ec1a:	dc03      	bgt.n	800ec24 <_dtoa_r+0xa9c>
 800ec1c:	d1e0      	bne.n	800ebe0 <_dtoa_r+0xa58>
 800ec1e:	f01a 0f01 	tst.w	sl, #1
 800ec22:	d0dd      	beq.n	800ebe0 <_dtoa_r+0xa58>
 800ec24:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec28:	d1d7      	bne.n	800ebda <_dtoa_r+0xa52>
 800ec2a:	2339      	movs	r3, #57	; 0x39
 800ec2c:	f88b 3000 	strb.w	r3, [fp]
 800ec30:	462b      	mov	r3, r5
 800ec32:	461d      	mov	r5, r3
 800ec34:	3b01      	subs	r3, #1
 800ec36:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec3a:	2a39      	cmp	r2, #57	; 0x39
 800ec3c:	d071      	beq.n	800ed22 <_dtoa_r+0xb9a>
 800ec3e:	3201      	adds	r2, #1
 800ec40:	701a      	strb	r2, [r3, #0]
 800ec42:	e746      	b.n	800ead2 <_dtoa_r+0x94a>
 800ec44:	2a00      	cmp	r2, #0
 800ec46:	dd07      	ble.n	800ec58 <_dtoa_r+0xad0>
 800ec48:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec4c:	d0ed      	beq.n	800ec2a <_dtoa_r+0xaa2>
 800ec4e:	f10a 0301 	add.w	r3, sl, #1
 800ec52:	f88b 3000 	strb.w	r3, [fp]
 800ec56:	e73c      	b.n	800ead2 <_dtoa_r+0x94a>
 800ec58:	9b05      	ldr	r3, [sp, #20]
 800ec5a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ec5e:	4599      	cmp	r9, r3
 800ec60:	d047      	beq.n	800ecf2 <_dtoa_r+0xb6a>
 800ec62:	ee18 1a10 	vmov	r1, s16
 800ec66:	2300      	movs	r3, #0
 800ec68:	220a      	movs	r2, #10
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	f000 fc6a 	bl	800f544 <__multadd>
 800ec70:	45b8      	cmp	r8, r7
 800ec72:	ee08 0a10 	vmov	s16, r0
 800ec76:	f04f 0300 	mov.w	r3, #0
 800ec7a:	f04f 020a 	mov.w	r2, #10
 800ec7e:	4641      	mov	r1, r8
 800ec80:	4620      	mov	r0, r4
 800ec82:	d106      	bne.n	800ec92 <_dtoa_r+0xb0a>
 800ec84:	f000 fc5e 	bl	800f544 <__multadd>
 800ec88:	4680      	mov	r8, r0
 800ec8a:	4607      	mov	r7, r0
 800ec8c:	f109 0901 	add.w	r9, r9, #1
 800ec90:	e772      	b.n	800eb78 <_dtoa_r+0x9f0>
 800ec92:	f000 fc57 	bl	800f544 <__multadd>
 800ec96:	4639      	mov	r1, r7
 800ec98:	4680      	mov	r8, r0
 800ec9a:	2300      	movs	r3, #0
 800ec9c:	220a      	movs	r2, #10
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f000 fc50 	bl	800f544 <__multadd>
 800eca4:	4607      	mov	r7, r0
 800eca6:	e7f1      	b.n	800ec8c <_dtoa_r+0xb04>
 800eca8:	9b03      	ldr	r3, [sp, #12]
 800ecaa:	9302      	str	r3, [sp, #8]
 800ecac:	9d01      	ldr	r5, [sp, #4]
 800ecae:	ee18 0a10 	vmov	r0, s16
 800ecb2:	4631      	mov	r1, r6
 800ecb4:	f7ff f9dc 	bl	800e070 <quorem>
 800ecb8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecbc:	9b01      	ldr	r3, [sp, #4]
 800ecbe:	f805 ab01 	strb.w	sl, [r5], #1
 800ecc2:	1aea      	subs	r2, r5, r3
 800ecc4:	9b02      	ldr	r3, [sp, #8]
 800ecc6:	4293      	cmp	r3, r2
 800ecc8:	dd09      	ble.n	800ecde <_dtoa_r+0xb56>
 800ecca:	ee18 1a10 	vmov	r1, s16
 800ecce:	2300      	movs	r3, #0
 800ecd0:	220a      	movs	r2, #10
 800ecd2:	4620      	mov	r0, r4
 800ecd4:	f000 fc36 	bl	800f544 <__multadd>
 800ecd8:	ee08 0a10 	vmov	s16, r0
 800ecdc:	e7e7      	b.n	800ecae <_dtoa_r+0xb26>
 800ecde:	9b02      	ldr	r3, [sp, #8]
 800ece0:	2b00      	cmp	r3, #0
 800ece2:	bfc8      	it	gt
 800ece4:	461d      	movgt	r5, r3
 800ece6:	9b01      	ldr	r3, [sp, #4]
 800ece8:	bfd8      	it	le
 800ecea:	2501      	movle	r5, #1
 800ecec:	441d      	add	r5, r3
 800ecee:	f04f 0800 	mov.w	r8, #0
 800ecf2:	ee18 1a10 	vmov	r1, s16
 800ecf6:	2201      	movs	r2, #1
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f000 fe1d 	bl	800f938 <__lshift>
 800ecfe:	4631      	mov	r1, r6
 800ed00:	ee08 0a10 	vmov	s16, r0
 800ed04:	f000 fe88 	bl	800fa18 <__mcmp>
 800ed08:	2800      	cmp	r0, #0
 800ed0a:	dc91      	bgt.n	800ec30 <_dtoa_r+0xaa8>
 800ed0c:	d102      	bne.n	800ed14 <_dtoa_r+0xb8c>
 800ed0e:	f01a 0f01 	tst.w	sl, #1
 800ed12:	d18d      	bne.n	800ec30 <_dtoa_r+0xaa8>
 800ed14:	462b      	mov	r3, r5
 800ed16:	461d      	mov	r5, r3
 800ed18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed1c:	2a30      	cmp	r2, #48	; 0x30
 800ed1e:	d0fa      	beq.n	800ed16 <_dtoa_r+0xb8e>
 800ed20:	e6d7      	b.n	800ead2 <_dtoa_r+0x94a>
 800ed22:	9a01      	ldr	r2, [sp, #4]
 800ed24:	429a      	cmp	r2, r3
 800ed26:	d184      	bne.n	800ec32 <_dtoa_r+0xaaa>
 800ed28:	9b00      	ldr	r3, [sp, #0]
 800ed2a:	3301      	adds	r3, #1
 800ed2c:	9300      	str	r3, [sp, #0]
 800ed2e:	2331      	movs	r3, #49	; 0x31
 800ed30:	7013      	strb	r3, [r2, #0]
 800ed32:	e6ce      	b.n	800ead2 <_dtoa_r+0x94a>
 800ed34:	4b09      	ldr	r3, [pc, #36]	; (800ed5c <_dtoa_r+0xbd4>)
 800ed36:	f7ff ba95 	b.w	800e264 <_dtoa_r+0xdc>
 800ed3a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	f47f aa6e 	bne.w	800e21e <_dtoa_r+0x96>
 800ed42:	4b07      	ldr	r3, [pc, #28]	; (800ed60 <_dtoa_r+0xbd8>)
 800ed44:	f7ff ba8e 	b.w	800e264 <_dtoa_r+0xdc>
 800ed48:	9b02      	ldr	r3, [sp, #8]
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	dcae      	bgt.n	800ecac <_dtoa_r+0xb24>
 800ed4e:	9b06      	ldr	r3, [sp, #24]
 800ed50:	2b02      	cmp	r3, #2
 800ed52:	f73f aea8 	bgt.w	800eaa6 <_dtoa_r+0x91e>
 800ed56:	e7a9      	b.n	800ecac <_dtoa_r+0xb24>
 800ed58:	08012758 	.word	0x08012758
 800ed5c:	0801255c 	.word	0x0801255c
 800ed60:	080126d9 	.word	0x080126d9

0800ed64 <rshift>:
 800ed64:	6903      	ldr	r3, [r0, #16]
 800ed66:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed6e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed72:	f100 0414 	add.w	r4, r0, #20
 800ed76:	dd45      	ble.n	800ee04 <rshift+0xa0>
 800ed78:	f011 011f 	ands.w	r1, r1, #31
 800ed7c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ed80:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ed84:	d10c      	bne.n	800eda0 <rshift+0x3c>
 800ed86:	f100 0710 	add.w	r7, r0, #16
 800ed8a:	4629      	mov	r1, r5
 800ed8c:	42b1      	cmp	r1, r6
 800ed8e:	d334      	bcc.n	800edfa <rshift+0x96>
 800ed90:	1a9b      	subs	r3, r3, r2
 800ed92:	009b      	lsls	r3, r3, #2
 800ed94:	1eea      	subs	r2, r5, #3
 800ed96:	4296      	cmp	r6, r2
 800ed98:	bf38      	it	cc
 800ed9a:	2300      	movcc	r3, #0
 800ed9c:	4423      	add	r3, r4
 800ed9e:	e015      	b.n	800edcc <rshift+0x68>
 800eda0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800eda4:	f1c1 0820 	rsb	r8, r1, #32
 800eda8:	40cf      	lsrs	r7, r1
 800edaa:	f105 0e04 	add.w	lr, r5, #4
 800edae:	46a1      	mov	r9, r4
 800edb0:	4576      	cmp	r6, lr
 800edb2:	46f4      	mov	ip, lr
 800edb4:	d815      	bhi.n	800ede2 <rshift+0x7e>
 800edb6:	1a9a      	subs	r2, r3, r2
 800edb8:	0092      	lsls	r2, r2, #2
 800edba:	3a04      	subs	r2, #4
 800edbc:	3501      	adds	r5, #1
 800edbe:	42ae      	cmp	r6, r5
 800edc0:	bf38      	it	cc
 800edc2:	2200      	movcc	r2, #0
 800edc4:	18a3      	adds	r3, r4, r2
 800edc6:	50a7      	str	r7, [r4, r2]
 800edc8:	b107      	cbz	r7, 800edcc <rshift+0x68>
 800edca:	3304      	adds	r3, #4
 800edcc:	1b1a      	subs	r2, r3, r4
 800edce:	42a3      	cmp	r3, r4
 800edd0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edd4:	bf08      	it	eq
 800edd6:	2300      	moveq	r3, #0
 800edd8:	6102      	str	r2, [r0, #16]
 800edda:	bf08      	it	eq
 800eddc:	6143      	streq	r3, [r0, #20]
 800edde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ede2:	f8dc c000 	ldr.w	ip, [ip]
 800ede6:	fa0c fc08 	lsl.w	ip, ip, r8
 800edea:	ea4c 0707 	orr.w	r7, ip, r7
 800edee:	f849 7b04 	str.w	r7, [r9], #4
 800edf2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edf6:	40cf      	lsrs	r7, r1
 800edf8:	e7da      	b.n	800edb0 <rshift+0x4c>
 800edfa:	f851 cb04 	ldr.w	ip, [r1], #4
 800edfe:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee02:	e7c3      	b.n	800ed8c <rshift+0x28>
 800ee04:	4623      	mov	r3, r4
 800ee06:	e7e1      	b.n	800edcc <rshift+0x68>

0800ee08 <__hexdig_fun>:
 800ee08:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee0c:	2b09      	cmp	r3, #9
 800ee0e:	d802      	bhi.n	800ee16 <__hexdig_fun+0xe>
 800ee10:	3820      	subs	r0, #32
 800ee12:	b2c0      	uxtb	r0, r0
 800ee14:	4770      	bx	lr
 800ee16:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee1a:	2b05      	cmp	r3, #5
 800ee1c:	d801      	bhi.n	800ee22 <__hexdig_fun+0x1a>
 800ee1e:	3847      	subs	r0, #71	; 0x47
 800ee20:	e7f7      	b.n	800ee12 <__hexdig_fun+0xa>
 800ee22:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee26:	2b05      	cmp	r3, #5
 800ee28:	d801      	bhi.n	800ee2e <__hexdig_fun+0x26>
 800ee2a:	3827      	subs	r0, #39	; 0x27
 800ee2c:	e7f1      	b.n	800ee12 <__hexdig_fun+0xa>
 800ee2e:	2000      	movs	r0, #0
 800ee30:	4770      	bx	lr
	...

0800ee34 <__gethex>:
 800ee34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee38:	ed2d 8b02 	vpush	{d8}
 800ee3c:	b089      	sub	sp, #36	; 0x24
 800ee3e:	ee08 0a10 	vmov	s16, r0
 800ee42:	9304      	str	r3, [sp, #16]
 800ee44:	4bb4      	ldr	r3, [pc, #720]	; (800f118 <__gethex+0x2e4>)
 800ee46:	681b      	ldr	r3, [r3, #0]
 800ee48:	9301      	str	r3, [sp, #4]
 800ee4a:	4618      	mov	r0, r3
 800ee4c:	468b      	mov	fp, r1
 800ee4e:	4690      	mov	r8, r2
 800ee50:	f7f1 f9c6 	bl	80001e0 <strlen>
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	f8db 2000 	ldr.w	r2, [fp]
 800ee5a:	4403      	add	r3, r0
 800ee5c:	4682      	mov	sl, r0
 800ee5e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ee62:	9305      	str	r3, [sp, #20]
 800ee64:	1c93      	adds	r3, r2, #2
 800ee66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ee6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee6e:	32fe      	adds	r2, #254	; 0xfe
 800ee70:	18d1      	adds	r1, r2, r3
 800ee72:	461f      	mov	r7, r3
 800ee74:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee78:	9100      	str	r1, [sp, #0]
 800ee7a:	2830      	cmp	r0, #48	; 0x30
 800ee7c:	d0f8      	beq.n	800ee70 <__gethex+0x3c>
 800ee7e:	f7ff ffc3 	bl	800ee08 <__hexdig_fun>
 800ee82:	4604      	mov	r4, r0
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d13a      	bne.n	800eefe <__gethex+0xca>
 800ee88:	9901      	ldr	r1, [sp, #4]
 800ee8a:	4652      	mov	r2, sl
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	f001 fa23 	bl	80102d8 <strncmp>
 800ee92:	4605      	mov	r5, r0
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d168      	bne.n	800ef6a <__gethex+0x136>
 800ee98:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ee9c:	eb07 060a 	add.w	r6, r7, sl
 800eea0:	f7ff ffb2 	bl	800ee08 <__hexdig_fun>
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d062      	beq.n	800ef6e <__gethex+0x13a>
 800eea8:	4633      	mov	r3, r6
 800eeaa:	7818      	ldrb	r0, [r3, #0]
 800eeac:	2830      	cmp	r0, #48	; 0x30
 800eeae:	461f      	mov	r7, r3
 800eeb0:	f103 0301 	add.w	r3, r3, #1
 800eeb4:	d0f9      	beq.n	800eeaa <__gethex+0x76>
 800eeb6:	f7ff ffa7 	bl	800ee08 <__hexdig_fun>
 800eeba:	2301      	movs	r3, #1
 800eebc:	fab0 f480 	clz	r4, r0
 800eec0:	0964      	lsrs	r4, r4, #5
 800eec2:	4635      	mov	r5, r6
 800eec4:	9300      	str	r3, [sp, #0]
 800eec6:	463a      	mov	r2, r7
 800eec8:	4616      	mov	r6, r2
 800eeca:	3201      	adds	r2, #1
 800eecc:	7830      	ldrb	r0, [r6, #0]
 800eece:	f7ff ff9b 	bl	800ee08 <__hexdig_fun>
 800eed2:	2800      	cmp	r0, #0
 800eed4:	d1f8      	bne.n	800eec8 <__gethex+0x94>
 800eed6:	9901      	ldr	r1, [sp, #4]
 800eed8:	4652      	mov	r2, sl
 800eeda:	4630      	mov	r0, r6
 800eedc:	f001 f9fc 	bl	80102d8 <strncmp>
 800eee0:	b980      	cbnz	r0, 800ef04 <__gethex+0xd0>
 800eee2:	b94d      	cbnz	r5, 800eef8 <__gethex+0xc4>
 800eee4:	eb06 050a 	add.w	r5, r6, sl
 800eee8:	462a      	mov	r2, r5
 800eeea:	4616      	mov	r6, r2
 800eeec:	3201      	adds	r2, #1
 800eeee:	7830      	ldrb	r0, [r6, #0]
 800eef0:	f7ff ff8a 	bl	800ee08 <__hexdig_fun>
 800eef4:	2800      	cmp	r0, #0
 800eef6:	d1f8      	bne.n	800eeea <__gethex+0xb6>
 800eef8:	1bad      	subs	r5, r5, r6
 800eefa:	00ad      	lsls	r5, r5, #2
 800eefc:	e004      	b.n	800ef08 <__gethex+0xd4>
 800eefe:	2400      	movs	r4, #0
 800ef00:	4625      	mov	r5, r4
 800ef02:	e7e0      	b.n	800eec6 <__gethex+0x92>
 800ef04:	2d00      	cmp	r5, #0
 800ef06:	d1f7      	bne.n	800eef8 <__gethex+0xc4>
 800ef08:	7833      	ldrb	r3, [r6, #0]
 800ef0a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef0e:	2b50      	cmp	r3, #80	; 0x50
 800ef10:	d13b      	bne.n	800ef8a <__gethex+0x156>
 800ef12:	7873      	ldrb	r3, [r6, #1]
 800ef14:	2b2b      	cmp	r3, #43	; 0x2b
 800ef16:	d02c      	beq.n	800ef72 <__gethex+0x13e>
 800ef18:	2b2d      	cmp	r3, #45	; 0x2d
 800ef1a:	d02e      	beq.n	800ef7a <__gethex+0x146>
 800ef1c:	1c71      	adds	r1, r6, #1
 800ef1e:	f04f 0900 	mov.w	r9, #0
 800ef22:	7808      	ldrb	r0, [r1, #0]
 800ef24:	f7ff ff70 	bl	800ee08 <__hexdig_fun>
 800ef28:	1e43      	subs	r3, r0, #1
 800ef2a:	b2db      	uxtb	r3, r3
 800ef2c:	2b18      	cmp	r3, #24
 800ef2e:	d82c      	bhi.n	800ef8a <__gethex+0x156>
 800ef30:	f1a0 0210 	sub.w	r2, r0, #16
 800ef34:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef38:	f7ff ff66 	bl	800ee08 <__hexdig_fun>
 800ef3c:	1e43      	subs	r3, r0, #1
 800ef3e:	b2db      	uxtb	r3, r3
 800ef40:	2b18      	cmp	r3, #24
 800ef42:	d91d      	bls.n	800ef80 <__gethex+0x14c>
 800ef44:	f1b9 0f00 	cmp.w	r9, #0
 800ef48:	d000      	beq.n	800ef4c <__gethex+0x118>
 800ef4a:	4252      	negs	r2, r2
 800ef4c:	4415      	add	r5, r2
 800ef4e:	f8cb 1000 	str.w	r1, [fp]
 800ef52:	b1e4      	cbz	r4, 800ef8e <__gethex+0x15a>
 800ef54:	9b00      	ldr	r3, [sp, #0]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	bf14      	ite	ne
 800ef5a:	2700      	movne	r7, #0
 800ef5c:	2706      	moveq	r7, #6
 800ef5e:	4638      	mov	r0, r7
 800ef60:	b009      	add	sp, #36	; 0x24
 800ef62:	ecbd 8b02 	vpop	{d8}
 800ef66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef6a:	463e      	mov	r6, r7
 800ef6c:	4625      	mov	r5, r4
 800ef6e:	2401      	movs	r4, #1
 800ef70:	e7ca      	b.n	800ef08 <__gethex+0xd4>
 800ef72:	f04f 0900 	mov.w	r9, #0
 800ef76:	1cb1      	adds	r1, r6, #2
 800ef78:	e7d3      	b.n	800ef22 <__gethex+0xee>
 800ef7a:	f04f 0901 	mov.w	r9, #1
 800ef7e:	e7fa      	b.n	800ef76 <__gethex+0x142>
 800ef80:	230a      	movs	r3, #10
 800ef82:	fb03 0202 	mla	r2, r3, r2, r0
 800ef86:	3a10      	subs	r2, #16
 800ef88:	e7d4      	b.n	800ef34 <__gethex+0x100>
 800ef8a:	4631      	mov	r1, r6
 800ef8c:	e7df      	b.n	800ef4e <__gethex+0x11a>
 800ef8e:	1bf3      	subs	r3, r6, r7
 800ef90:	3b01      	subs	r3, #1
 800ef92:	4621      	mov	r1, r4
 800ef94:	2b07      	cmp	r3, #7
 800ef96:	dc0b      	bgt.n	800efb0 <__gethex+0x17c>
 800ef98:	ee18 0a10 	vmov	r0, s16
 800ef9c:	f000 fa70 	bl	800f480 <_Balloc>
 800efa0:	4604      	mov	r4, r0
 800efa2:	b940      	cbnz	r0, 800efb6 <__gethex+0x182>
 800efa4:	4b5d      	ldr	r3, [pc, #372]	; (800f11c <__gethex+0x2e8>)
 800efa6:	4602      	mov	r2, r0
 800efa8:	21de      	movs	r1, #222	; 0xde
 800efaa:	485d      	ldr	r0, [pc, #372]	; (800f120 <__gethex+0x2ec>)
 800efac:	f001 f9b6 	bl	801031c <__assert_func>
 800efb0:	3101      	adds	r1, #1
 800efb2:	105b      	asrs	r3, r3, #1
 800efb4:	e7ee      	b.n	800ef94 <__gethex+0x160>
 800efb6:	f100 0914 	add.w	r9, r0, #20
 800efba:	f04f 0b00 	mov.w	fp, #0
 800efbe:	f1ca 0301 	rsb	r3, sl, #1
 800efc2:	f8cd 9008 	str.w	r9, [sp, #8]
 800efc6:	f8cd b000 	str.w	fp, [sp]
 800efca:	9306      	str	r3, [sp, #24]
 800efcc:	42b7      	cmp	r7, r6
 800efce:	d340      	bcc.n	800f052 <__gethex+0x21e>
 800efd0:	9802      	ldr	r0, [sp, #8]
 800efd2:	9b00      	ldr	r3, [sp, #0]
 800efd4:	f840 3b04 	str.w	r3, [r0], #4
 800efd8:	eba0 0009 	sub.w	r0, r0, r9
 800efdc:	1080      	asrs	r0, r0, #2
 800efde:	0146      	lsls	r6, r0, #5
 800efe0:	6120      	str	r0, [r4, #16]
 800efe2:	4618      	mov	r0, r3
 800efe4:	f000 fb3e 	bl	800f664 <__hi0bits>
 800efe8:	1a30      	subs	r0, r6, r0
 800efea:	f8d8 6000 	ldr.w	r6, [r8]
 800efee:	42b0      	cmp	r0, r6
 800eff0:	dd63      	ble.n	800f0ba <__gethex+0x286>
 800eff2:	1b87      	subs	r7, r0, r6
 800eff4:	4639      	mov	r1, r7
 800eff6:	4620      	mov	r0, r4
 800eff8:	f000 fee2 	bl	800fdc0 <__any_on>
 800effc:	4682      	mov	sl, r0
 800effe:	b1a8      	cbz	r0, 800f02c <__gethex+0x1f8>
 800f000:	1e7b      	subs	r3, r7, #1
 800f002:	1159      	asrs	r1, r3, #5
 800f004:	f003 021f 	and.w	r2, r3, #31
 800f008:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f00c:	f04f 0a01 	mov.w	sl, #1
 800f010:	fa0a f202 	lsl.w	r2, sl, r2
 800f014:	420a      	tst	r2, r1
 800f016:	d009      	beq.n	800f02c <__gethex+0x1f8>
 800f018:	4553      	cmp	r3, sl
 800f01a:	dd05      	ble.n	800f028 <__gethex+0x1f4>
 800f01c:	1eb9      	subs	r1, r7, #2
 800f01e:	4620      	mov	r0, r4
 800f020:	f000 fece 	bl	800fdc0 <__any_on>
 800f024:	2800      	cmp	r0, #0
 800f026:	d145      	bne.n	800f0b4 <__gethex+0x280>
 800f028:	f04f 0a02 	mov.w	sl, #2
 800f02c:	4639      	mov	r1, r7
 800f02e:	4620      	mov	r0, r4
 800f030:	f7ff fe98 	bl	800ed64 <rshift>
 800f034:	443d      	add	r5, r7
 800f036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f03a:	42ab      	cmp	r3, r5
 800f03c:	da4c      	bge.n	800f0d8 <__gethex+0x2a4>
 800f03e:	ee18 0a10 	vmov	r0, s16
 800f042:	4621      	mov	r1, r4
 800f044:	f000 fa5c 	bl	800f500 <_Bfree>
 800f048:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f04a:	2300      	movs	r3, #0
 800f04c:	6013      	str	r3, [r2, #0]
 800f04e:	27a3      	movs	r7, #163	; 0xa3
 800f050:	e785      	b.n	800ef5e <__gethex+0x12a>
 800f052:	1e73      	subs	r3, r6, #1
 800f054:	9a05      	ldr	r2, [sp, #20]
 800f056:	9303      	str	r3, [sp, #12]
 800f058:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f05c:	4293      	cmp	r3, r2
 800f05e:	d019      	beq.n	800f094 <__gethex+0x260>
 800f060:	f1bb 0f20 	cmp.w	fp, #32
 800f064:	d107      	bne.n	800f076 <__gethex+0x242>
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	9a00      	ldr	r2, [sp, #0]
 800f06a:	f843 2b04 	str.w	r2, [r3], #4
 800f06e:	9302      	str	r3, [sp, #8]
 800f070:	2300      	movs	r3, #0
 800f072:	9300      	str	r3, [sp, #0]
 800f074:	469b      	mov	fp, r3
 800f076:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f07a:	f7ff fec5 	bl	800ee08 <__hexdig_fun>
 800f07e:	9b00      	ldr	r3, [sp, #0]
 800f080:	f000 000f 	and.w	r0, r0, #15
 800f084:	fa00 f00b 	lsl.w	r0, r0, fp
 800f088:	4303      	orrs	r3, r0
 800f08a:	9300      	str	r3, [sp, #0]
 800f08c:	f10b 0b04 	add.w	fp, fp, #4
 800f090:	9b03      	ldr	r3, [sp, #12]
 800f092:	e00d      	b.n	800f0b0 <__gethex+0x27c>
 800f094:	9b03      	ldr	r3, [sp, #12]
 800f096:	9a06      	ldr	r2, [sp, #24]
 800f098:	4413      	add	r3, r2
 800f09a:	42bb      	cmp	r3, r7
 800f09c:	d3e0      	bcc.n	800f060 <__gethex+0x22c>
 800f09e:	4618      	mov	r0, r3
 800f0a0:	9901      	ldr	r1, [sp, #4]
 800f0a2:	9307      	str	r3, [sp, #28]
 800f0a4:	4652      	mov	r2, sl
 800f0a6:	f001 f917 	bl	80102d8 <strncmp>
 800f0aa:	9b07      	ldr	r3, [sp, #28]
 800f0ac:	2800      	cmp	r0, #0
 800f0ae:	d1d7      	bne.n	800f060 <__gethex+0x22c>
 800f0b0:	461e      	mov	r6, r3
 800f0b2:	e78b      	b.n	800efcc <__gethex+0x198>
 800f0b4:	f04f 0a03 	mov.w	sl, #3
 800f0b8:	e7b8      	b.n	800f02c <__gethex+0x1f8>
 800f0ba:	da0a      	bge.n	800f0d2 <__gethex+0x29e>
 800f0bc:	1a37      	subs	r7, r6, r0
 800f0be:	4621      	mov	r1, r4
 800f0c0:	ee18 0a10 	vmov	r0, s16
 800f0c4:	463a      	mov	r2, r7
 800f0c6:	f000 fc37 	bl	800f938 <__lshift>
 800f0ca:	1bed      	subs	r5, r5, r7
 800f0cc:	4604      	mov	r4, r0
 800f0ce:	f100 0914 	add.w	r9, r0, #20
 800f0d2:	f04f 0a00 	mov.w	sl, #0
 800f0d6:	e7ae      	b.n	800f036 <__gethex+0x202>
 800f0d8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f0dc:	42a8      	cmp	r0, r5
 800f0de:	dd72      	ble.n	800f1c6 <__gethex+0x392>
 800f0e0:	1b45      	subs	r5, r0, r5
 800f0e2:	42ae      	cmp	r6, r5
 800f0e4:	dc36      	bgt.n	800f154 <__gethex+0x320>
 800f0e6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f0ea:	2b02      	cmp	r3, #2
 800f0ec:	d02a      	beq.n	800f144 <__gethex+0x310>
 800f0ee:	2b03      	cmp	r3, #3
 800f0f0:	d02c      	beq.n	800f14c <__gethex+0x318>
 800f0f2:	2b01      	cmp	r3, #1
 800f0f4:	d11c      	bne.n	800f130 <__gethex+0x2fc>
 800f0f6:	42ae      	cmp	r6, r5
 800f0f8:	d11a      	bne.n	800f130 <__gethex+0x2fc>
 800f0fa:	2e01      	cmp	r6, #1
 800f0fc:	d112      	bne.n	800f124 <__gethex+0x2f0>
 800f0fe:	9a04      	ldr	r2, [sp, #16]
 800f100:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f104:	6013      	str	r3, [r2, #0]
 800f106:	2301      	movs	r3, #1
 800f108:	6123      	str	r3, [r4, #16]
 800f10a:	f8c9 3000 	str.w	r3, [r9]
 800f10e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f110:	2762      	movs	r7, #98	; 0x62
 800f112:	601c      	str	r4, [r3, #0]
 800f114:	e723      	b.n	800ef5e <__gethex+0x12a>
 800f116:	bf00      	nop
 800f118:	080127d0 	.word	0x080127d0
 800f11c:	08012758 	.word	0x08012758
 800f120:	08012769 	.word	0x08012769
 800f124:	1e71      	subs	r1, r6, #1
 800f126:	4620      	mov	r0, r4
 800f128:	f000 fe4a 	bl	800fdc0 <__any_on>
 800f12c:	2800      	cmp	r0, #0
 800f12e:	d1e6      	bne.n	800f0fe <__gethex+0x2ca>
 800f130:	ee18 0a10 	vmov	r0, s16
 800f134:	4621      	mov	r1, r4
 800f136:	f000 f9e3 	bl	800f500 <_Bfree>
 800f13a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f13c:	2300      	movs	r3, #0
 800f13e:	6013      	str	r3, [r2, #0]
 800f140:	2750      	movs	r7, #80	; 0x50
 800f142:	e70c      	b.n	800ef5e <__gethex+0x12a>
 800f144:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f146:	2b00      	cmp	r3, #0
 800f148:	d1f2      	bne.n	800f130 <__gethex+0x2fc>
 800f14a:	e7d8      	b.n	800f0fe <__gethex+0x2ca>
 800f14c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f14e:	2b00      	cmp	r3, #0
 800f150:	d1d5      	bne.n	800f0fe <__gethex+0x2ca>
 800f152:	e7ed      	b.n	800f130 <__gethex+0x2fc>
 800f154:	1e6f      	subs	r7, r5, #1
 800f156:	f1ba 0f00 	cmp.w	sl, #0
 800f15a:	d131      	bne.n	800f1c0 <__gethex+0x38c>
 800f15c:	b127      	cbz	r7, 800f168 <__gethex+0x334>
 800f15e:	4639      	mov	r1, r7
 800f160:	4620      	mov	r0, r4
 800f162:	f000 fe2d 	bl	800fdc0 <__any_on>
 800f166:	4682      	mov	sl, r0
 800f168:	117b      	asrs	r3, r7, #5
 800f16a:	2101      	movs	r1, #1
 800f16c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f170:	f007 071f 	and.w	r7, r7, #31
 800f174:	fa01 f707 	lsl.w	r7, r1, r7
 800f178:	421f      	tst	r7, r3
 800f17a:	4629      	mov	r1, r5
 800f17c:	4620      	mov	r0, r4
 800f17e:	bf18      	it	ne
 800f180:	f04a 0a02 	orrne.w	sl, sl, #2
 800f184:	1b76      	subs	r6, r6, r5
 800f186:	f7ff fded 	bl	800ed64 <rshift>
 800f18a:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f18e:	2702      	movs	r7, #2
 800f190:	f1ba 0f00 	cmp.w	sl, #0
 800f194:	d048      	beq.n	800f228 <__gethex+0x3f4>
 800f196:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f19a:	2b02      	cmp	r3, #2
 800f19c:	d015      	beq.n	800f1ca <__gethex+0x396>
 800f19e:	2b03      	cmp	r3, #3
 800f1a0:	d017      	beq.n	800f1d2 <__gethex+0x39e>
 800f1a2:	2b01      	cmp	r3, #1
 800f1a4:	d109      	bne.n	800f1ba <__gethex+0x386>
 800f1a6:	f01a 0f02 	tst.w	sl, #2
 800f1aa:	d006      	beq.n	800f1ba <__gethex+0x386>
 800f1ac:	f8d9 0000 	ldr.w	r0, [r9]
 800f1b0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f1b4:	f01a 0f01 	tst.w	sl, #1
 800f1b8:	d10e      	bne.n	800f1d8 <__gethex+0x3a4>
 800f1ba:	f047 0710 	orr.w	r7, r7, #16
 800f1be:	e033      	b.n	800f228 <__gethex+0x3f4>
 800f1c0:	f04f 0a01 	mov.w	sl, #1
 800f1c4:	e7d0      	b.n	800f168 <__gethex+0x334>
 800f1c6:	2701      	movs	r7, #1
 800f1c8:	e7e2      	b.n	800f190 <__gethex+0x35c>
 800f1ca:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1cc:	f1c3 0301 	rsb	r3, r3, #1
 800f1d0:	9315      	str	r3, [sp, #84]	; 0x54
 800f1d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d0f0      	beq.n	800f1ba <__gethex+0x386>
 800f1d8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f1dc:	f104 0314 	add.w	r3, r4, #20
 800f1e0:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f1e4:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f1e8:	f04f 0c00 	mov.w	ip, #0
 800f1ec:	4618      	mov	r0, r3
 800f1ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800f1f2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f1f6:	d01c      	beq.n	800f232 <__gethex+0x3fe>
 800f1f8:	3201      	adds	r2, #1
 800f1fa:	6002      	str	r2, [r0, #0]
 800f1fc:	2f02      	cmp	r7, #2
 800f1fe:	f104 0314 	add.w	r3, r4, #20
 800f202:	d13f      	bne.n	800f284 <__gethex+0x450>
 800f204:	f8d8 2000 	ldr.w	r2, [r8]
 800f208:	3a01      	subs	r2, #1
 800f20a:	42b2      	cmp	r2, r6
 800f20c:	d10a      	bne.n	800f224 <__gethex+0x3f0>
 800f20e:	1171      	asrs	r1, r6, #5
 800f210:	2201      	movs	r2, #1
 800f212:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f216:	f006 061f 	and.w	r6, r6, #31
 800f21a:	fa02 f606 	lsl.w	r6, r2, r6
 800f21e:	421e      	tst	r6, r3
 800f220:	bf18      	it	ne
 800f222:	4617      	movne	r7, r2
 800f224:	f047 0720 	orr.w	r7, r7, #32
 800f228:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f22a:	601c      	str	r4, [r3, #0]
 800f22c:	9b04      	ldr	r3, [sp, #16]
 800f22e:	601d      	str	r5, [r3, #0]
 800f230:	e695      	b.n	800ef5e <__gethex+0x12a>
 800f232:	4299      	cmp	r1, r3
 800f234:	f843 cc04 	str.w	ip, [r3, #-4]
 800f238:	d8d8      	bhi.n	800f1ec <__gethex+0x3b8>
 800f23a:	68a3      	ldr	r3, [r4, #8]
 800f23c:	459b      	cmp	fp, r3
 800f23e:	db19      	blt.n	800f274 <__gethex+0x440>
 800f240:	6861      	ldr	r1, [r4, #4]
 800f242:	ee18 0a10 	vmov	r0, s16
 800f246:	3101      	adds	r1, #1
 800f248:	f000 f91a 	bl	800f480 <_Balloc>
 800f24c:	4681      	mov	r9, r0
 800f24e:	b918      	cbnz	r0, 800f258 <__gethex+0x424>
 800f250:	4b1a      	ldr	r3, [pc, #104]	; (800f2bc <__gethex+0x488>)
 800f252:	4602      	mov	r2, r0
 800f254:	2184      	movs	r1, #132	; 0x84
 800f256:	e6a8      	b.n	800efaa <__gethex+0x176>
 800f258:	6922      	ldr	r2, [r4, #16]
 800f25a:	3202      	adds	r2, #2
 800f25c:	f104 010c 	add.w	r1, r4, #12
 800f260:	0092      	lsls	r2, r2, #2
 800f262:	300c      	adds	r0, #12
 800f264:	f7fd f9a0 	bl	800c5a8 <memcpy>
 800f268:	4621      	mov	r1, r4
 800f26a:	ee18 0a10 	vmov	r0, s16
 800f26e:	f000 f947 	bl	800f500 <_Bfree>
 800f272:	464c      	mov	r4, r9
 800f274:	6923      	ldr	r3, [r4, #16]
 800f276:	1c5a      	adds	r2, r3, #1
 800f278:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f27c:	6122      	str	r2, [r4, #16]
 800f27e:	2201      	movs	r2, #1
 800f280:	615a      	str	r2, [r3, #20]
 800f282:	e7bb      	b.n	800f1fc <__gethex+0x3c8>
 800f284:	6922      	ldr	r2, [r4, #16]
 800f286:	455a      	cmp	r2, fp
 800f288:	dd0b      	ble.n	800f2a2 <__gethex+0x46e>
 800f28a:	2101      	movs	r1, #1
 800f28c:	4620      	mov	r0, r4
 800f28e:	f7ff fd69 	bl	800ed64 <rshift>
 800f292:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f296:	3501      	adds	r5, #1
 800f298:	42ab      	cmp	r3, r5
 800f29a:	f6ff aed0 	blt.w	800f03e <__gethex+0x20a>
 800f29e:	2701      	movs	r7, #1
 800f2a0:	e7c0      	b.n	800f224 <__gethex+0x3f0>
 800f2a2:	f016 061f 	ands.w	r6, r6, #31
 800f2a6:	d0fa      	beq.n	800f29e <__gethex+0x46a>
 800f2a8:	4453      	add	r3, sl
 800f2aa:	f1c6 0620 	rsb	r6, r6, #32
 800f2ae:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f2b2:	f000 f9d7 	bl	800f664 <__hi0bits>
 800f2b6:	42b0      	cmp	r0, r6
 800f2b8:	dbe7      	blt.n	800f28a <__gethex+0x456>
 800f2ba:	e7f0      	b.n	800f29e <__gethex+0x46a>
 800f2bc:	08012758 	.word	0x08012758

0800f2c0 <L_shift>:
 800f2c0:	f1c2 0208 	rsb	r2, r2, #8
 800f2c4:	0092      	lsls	r2, r2, #2
 800f2c6:	b570      	push	{r4, r5, r6, lr}
 800f2c8:	f1c2 0620 	rsb	r6, r2, #32
 800f2cc:	6843      	ldr	r3, [r0, #4]
 800f2ce:	6804      	ldr	r4, [r0, #0]
 800f2d0:	fa03 f506 	lsl.w	r5, r3, r6
 800f2d4:	432c      	orrs	r4, r5
 800f2d6:	40d3      	lsrs	r3, r2
 800f2d8:	6004      	str	r4, [r0, #0]
 800f2da:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2de:	4288      	cmp	r0, r1
 800f2e0:	d3f4      	bcc.n	800f2cc <L_shift+0xc>
 800f2e2:	bd70      	pop	{r4, r5, r6, pc}

0800f2e4 <__match>:
 800f2e4:	b530      	push	{r4, r5, lr}
 800f2e6:	6803      	ldr	r3, [r0, #0]
 800f2e8:	3301      	adds	r3, #1
 800f2ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f2ee:	b914      	cbnz	r4, 800f2f6 <__match+0x12>
 800f2f0:	6003      	str	r3, [r0, #0]
 800f2f2:	2001      	movs	r0, #1
 800f2f4:	bd30      	pop	{r4, r5, pc}
 800f2f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2fa:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f2fe:	2d19      	cmp	r5, #25
 800f300:	bf98      	it	ls
 800f302:	3220      	addls	r2, #32
 800f304:	42a2      	cmp	r2, r4
 800f306:	d0f0      	beq.n	800f2ea <__match+0x6>
 800f308:	2000      	movs	r0, #0
 800f30a:	e7f3      	b.n	800f2f4 <__match+0x10>

0800f30c <__hexnan>:
 800f30c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f310:	680b      	ldr	r3, [r1, #0]
 800f312:	115e      	asrs	r6, r3, #5
 800f314:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f318:	f013 031f 	ands.w	r3, r3, #31
 800f31c:	b087      	sub	sp, #28
 800f31e:	bf18      	it	ne
 800f320:	3604      	addne	r6, #4
 800f322:	2500      	movs	r5, #0
 800f324:	1f37      	subs	r7, r6, #4
 800f326:	4690      	mov	r8, r2
 800f328:	6802      	ldr	r2, [r0, #0]
 800f32a:	9301      	str	r3, [sp, #4]
 800f32c:	4682      	mov	sl, r0
 800f32e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f332:	46b9      	mov	r9, r7
 800f334:	463c      	mov	r4, r7
 800f336:	9502      	str	r5, [sp, #8]
 800f338:	46ab      	mov	fp, r5
 800f33a:	7851      	ldrb	r1, [r2, #1]
 800f33c:	1c53      	adds	r3, r2, #1
 800f33e:	9303      	str	r3, [sp, #12]
 800f340:	b341      	cbz	r1, 800f394 <__hexnan+0x88>
 800f342:	4608      	mov	r0, r1
 800f344:	9205      	str	r2, [sp, #20]
 800f346:	9104      	str	r1, [sp, #16]
 800f348:	f7ff fd5e 	bl	800ee08 <__hexdig_fun>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	d14f      	bne.n	800f3f0 <__hexnan+0xe4>
 800f350:	9904      	ldr	r1, [sp, #16]
 800f352:	9a05      	ldr	r2, [sp, #20]
 800f354:	2920      	cmp	r1, #32
 800f356:	d818      	bhi.n	800f38a <__hexnan+0x7e>
 800f358:	9b02      	ldr	r3, [sp, #8]
 800f35a:	459b      	cmp	fp, r3
 800f35c:	dd13      	ble.n	800f386 <__hexnan+0x7a>
 800f35e:	454c      	cmp	r4, r9
 800f360:	d206      	bcs.n	800f370 <__hexnan+0x64>
 800f362:	2d07      	cmp	r5, #7
 800f364:	dc04      	bgt.n	800f370 <__hexnan+0x64>
 800f366:	462a      	mov	r2, r5
 800f368:	4649      	mov	r1, r9
 800f36a:	4620      	mov	r0, r4
 800f36c:	f7ff ffa8 	bl	800f2c0 <L_shift>
 800f370:	4544      	cmp	r4, r8
 800f372:	d950      	bls.n	800f416 <__hexnan+0x10a>
 800f374:	2300      	movs	r3, #0
 800f376:	f1a4 0904 	sub.w	r9, r4, #4
 800f37a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f37e:	f8cd b008 	str.w	fp, [sp, #8]
 800f382:	464c      	mov	r4, r9
 800f384:	461d      	mov	r5, r3
 800f386:	9a03      	ldr	r2, [sp, #12]
 800f388:	e7d7      	b.n	800f33a <__hexnan+0x2e>
 800f38a:	2929      	cmp	r1, #41	; 0x29
 800f38c:	d156      	bne.n	800f43c <__hexnan+0x130>
 800f38e:	3202      	adds	r2, #2
 800f390:	f8ca 2000 	str.w	r2, [sl]
 800f394:	f1bb 0f00 	cmp.w	fp, #0
 800f398:	d050      	beq.n	800f43c <__hexnan+0x130>
 800f39a:	454c      	cmp	r4, r9
 800f39c:	d206      	bcs.n	800f3ac <__hexnan+0xa0>
 800f39e:	2d07      	cmp	r5, #7
 800f3a0:	dc04      	bgt.n	800f3ac <__hexnan+0xa0>
 800f3a2:	462a      	mov	r2, r5
 800f3a4:	4649      	mov	r1, r9
 800f3a6:	4620      	mov	r0, r4
 800f3a8:	f7ff ff8a 	bl	800f2c0 <L_shift>
 800f3ac:	4544      	cmp	r4, r8
 800f3ae:	d934      	bls.n	800f41a <__hexnan+0x10e>
 800f3b0:	f1a8 0204 	sub.w	r2, r8, #4
 800f3b4:	4623      	mov	r3, r4
 800f3b6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f3ba:	f842 1f04 	str.w	r1, [r2, #4]!
 800f3be:	429f      	cmp	r7, r3
 800f3c0:	d2f9      	bcs.n	800f3b6 <__hexnan+0xaa>
 800f3c2:	1b3b      	subs	r3, r7, r4
 800f3c4:	f023 0303 	bic.w	r3, r3, #3
 800f3c8:	3304      	adds	r3, #4
 800f3ca:	3401      	adds	r4, #1
 800f3cc:	3e03      	subs	r6, #3
 800f3ce:	42b4      	cmp	r4, r6
 800f3d0:	bf88      	it	hi
 800f3d2:	2304      	movhi	r3, #4
 800f3d4:	4443      	add	r3, r8
 800f3d6:	2200      	movs	r2, #0
 800f3d8:	f843 2b04 	str.w	r2, [r3], #4
 800f3dc:	429f      	cmp	r7, r3
 800f3de:	d2fb      	bcs.n	800f3d8 <__hexnan+0xcc>
 800f3e0:	683b      	ldr	r3, [r7, #0]
 800f3e2:	b91b      	cbnz	r3, 800f3ec <__hexnan+0xe0>
 800f3e4:	4547      	cmp	r7, r8
 800f3e6:	d127      	bne.n	800f438 <__hexnan+0x12c>
 800f3e8:	2301      	movs	r3, #1
 800f3ea:	603b      	str	r3, [r7, #0]
 800f3ec:	2005      	movs	r0, #5
 800f3ee:	e026      	b.n	800f43e <__hexnan+0x132>
 800f3f0:	3501      	adds	r5, #1
 800f3f2:	2d08      	cmp	r5, #8
 800f3f4:	f10b 0b01 	add.w	fp, fp, #1
 800f3f8:	dd06      	ble.n	800f408 <__hexnan+0xfc>
 800f3fa:	4544      	cmp	r4, r8
 800f3fc:	d9c3      	bls.n	800f386 <__hexnan+0x7a>
 800f3fe:	2300      	movs	r3, #0
 800f400:	f844 3c04 	str.w	r3, [r4, #-4]
 800f404:	2501      	movs	r5, #1
 800f406:	3c04      	subs	r4, #4
 800f408:	6822      	ldr	r2, [r4, #0]
 800f40a:	f000 000f 	and.w	r0, r0, #15
 800f40e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f412:	6022      	str	r2, [r4, #0]
 800f414:	e7b7      	b.n	800f386 <__hexnan+0x7a>
 800f416:	2508      	movs	r5, #8
 800f418:	e7b5      	b.n	800f386 <__hexnan+0x7a>
 800f41a:	9b01      	ldr	r3, [sp, #4]
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d0df      	beq.n	800f3e0 <__hexnan+0xd4>
 800f420:	f04f 32ff 	mov.w	r2, #4294967295
 800f424:	f1c3 0320 	rsb	r3, r3, #32
 800f428:	fa22 f303 	lsr.w	r3, r2, r3
 800f42c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f430:	401a      	ands	r2, r3
 800f432:	f846 2c04 	str.w	r2, [r6, #-4]
 800f436:	e7d3      	b.n	800f3e0 <__hexnan+0xd4>
 800f438:	3f04      	subs	r7, #4
 800f43a:	e7d1      	b.n	800f3e0 <__hexnan+0xd4>
 800f43c:	2004      	movs	r0, #4
 800f43e:	b007      	add	sp, #28
 800f440:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f444 <_localeconv_r>:
 800f444:	4800      	ldr	r0, [pc, #0]	; (800f448 <_localeconv_r+0x4>)
 800f446:	4770      	bx	lr
 800f448:	200003b4 	.word	0x200003b4

0800f44c <malloc>:
 800f44c:	4b02      	ldr	r3, [pc, #8]	; (800f458 <malloc+0xc>)
 800f44e:	4601      	mov	r1, r0
 800f450:	6818      	ldr	r0, [r3, #0]
 800f452:	f000 bd59 	b.w	800ff08 <_malloc_r>
 800f456:	bf00      	nop
 800f458:	2000025c 	.word	0x2000025c

0800f45c <__ascii_mbtowc>:
 800f45c:	b082      	sub	sp, #8
 800f45e:	b901      	cbnz	r1, 800f462 <__ascii_mbtowc+0x6>
 800f460:	a901      	add	r1, sp, #4
 800f462:	b142      	cbz	r2, 800f476 <__ascii_mbtowc+0x1a>
 800f464:	b14b      	cbz	r3, 800f47a <__ascii_mbtowc+0x1e>
 800f466:	7813      	ldrb	r3, [r2, #0]
 800f468:	600b      	str	r3, [r1, #0]
 800f46a:	7812      	ldrb	r2, [r2, #0]
 800f46c:	1e10      	subs	r0, r2, #0
 800f46e:	bf18      	it	ne
 800f470:	2001      	movne	r0, #1
 800f472:	b002      	add	sp, #8
 800f474:	4770      	bx	lr
 800f476:	4610      	mov	r0, r2
 800f478:	e7fb      	b.n	800f472 <__ascii_mbtowc+0x16>
 800f47a:	f06f 0001 	mvn.w	r0, #1
 800f47e:	e7f8      	b.n	800f472 <__ascii_mbtowc+0x16>

0800f480 <_Balloc>:
 800f480:	b570      	push	{r4, r5, r6, lr}
 800f482:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f484:	4604      	mov	r4, r0
 800f486:	460d      	mov	r5, r1
 800f488:	b976      	cbnz	r6, 800f4a8 <_Balloc+0x28>
 800f48a:	2010      	movs	r0, #16
 800f48c:	f7ff ffde 	bl	800f44c <malloc>
 800f490:	4602      	mov	r2, r0
 800f492:	6260      	str	r0, [r4, #36]	; 0x24
 800f494:	b920      	cbnz	r0, 800f4a0 <_Balloc+0x20>
 800f496:	4b18      	ldr	r3, [pc, #96]	; (800f4f8 <_Balloc+0x78>)
 800f498:	4818      	ldr	r0, [pc, #96]	; (800f4fc <_Balloc+0x7c>)
 800f49a:	2166      	movs	r1, #102	; 0x66
 800f49c:	f000 ff3e 	bl	801031c <__assert_func>
 800f4a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4a4:	6006      	str	r6, [r0, #0]
 800f4a6:	60c6      	str	r6, [r0, #12]
 800f4a8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4aa:	68f3      	ldr	r3, [r6, #12]
 800f4ac:	b183      	cbz	r3, 800f4d0 <_Balloc+0x50>
 800f4ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4b0:	68db      	ldr	r3, [r3, #12]
 800f4b2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4b6:	b9b8      	cbnz	r0, 800f4e8 <_Balloc+0x68>
 800f4b8:	2101      	movs	r1, #1
 800f4ba:	fa01 f605 	lsl.w	r6, r1, r5
 800f4be:	1d72      	adds	r2, r6, #5
 800f4c0:	0092      	lsls	r2, r2, #2
 800f4c2:	4620      	mov	r0, r4
 800f4c4:	f000 fc9d 	bl	800fe02 <_calloc_r>
 800f4c8:	b160      	cbz	r0, 800f4e4 <_Balloc+0x64>
 800f4ca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ce:	e00e      	b.n	800f4ee <_Balloc+0x6e>
 800f4d0:	2221      	movs	r2, #33	; 0x21
 800f4d2:	2104      	movs	r1, #4
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 fc94 	bl	800fe02 <_calloc_r>
 800f4da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4dc:	60f0      	str	r0, [r6, #12]
 800f4de:	68db      	ldr	r3, [r3, #12]
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d1e4      	bne.n	800f4ae <_Balloc+0x2e>
 800f4e4:	2000      	movs	r0, #0
 800f4e6:	bd70      	pop	{r4, r5, r6, pc}
 800f4e8:	6802      	ldr	r2, [r0, #0]
 800f4ea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f4ee:	2300      	movs	r3, #0
 800f4f0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f4f4:	e7f7      	b.n	800f4e6 <_Balloc+0x66>
 800f4f6:	bf00      	nop
 800f4f8:	080126e6 	.word	0x080126e6
 800f4fc:	080127e4 	.word	0x080127e4

0800f500 <_Bfree>:
 800f500:	b570      	push	{r4, r5, r6, lr}
 800f502:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f504:	4605      	mov	r5, r0
 800f506:	460c      	mov	r4, r1
 800f508:	b976      	cbnz	r6, 800f528 <_Bfree+0x28>
 800f50a:	2010      	movs	r0, #16
 800f50c:	f7ff ff9e 	bl	800f44c <malloc>
 800f510:	4602      	mov	r2, r0
 800f512:	6268      	str	r0, [r5, #36]	; 0x24
 800f514:	b920      	cbnz	r0, 800f520 <_Bfree+0x20>
 800f516:	4b09      	ldr	r3, [pc, #36]	; (800f53c <_Bfree+0x3c>)
 800f518:	4809      	ldr	r0, [pc, #36]	; (800f540 <_Bfree+0x40>)
 800f51a:	218a      	movs	r1, #138	; 0x8a
 800f51c:	f000 fefe 	bl	801031c <__assert_func>
 800f520:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f524:	6006      	str	r6, [r0, #0]
 800f526:	60c6      	str	r6, [r0, #12]
 800f528:	b13c      	cbz	r4, 800f53a <_Bfree+0x3a>
 800f52a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f52c:	6862      	ldr	r2, [r4, #4]
 800f52e:	68db      	ldr	r3, [r3, #12]
 800f530:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f534:	6021      	str	r1, [r4, #0]
 800f536:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f53a:	bd70      	pop	{r4, r5, r6, pc}
 800f53c:	080126e6 	.word	0x080126e6
 800f540:	080127e4 	.word	0x080127e4

0800f544 <__multadd>:
 800f544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f548:	690d      	ldr	r5, [r1, #16]
 800f54a:	4607      	mov	r7, r0
 800f54c:	460c      	mov	r4, r1
 800f54e:	461e      	mov	r6, r3
 800f550:	f101 0c14 	add.w	ip, r1, #20
 800f554:	2000      	movs	r0, #0
 800f556:	f8dc 3000 	ldr.w	r3, [ip]
 800f55a:	b299      	uxth	r1, r3
 800f55c:	fb02 6101 	mla	r1, r2, r1, r6
 800f560:	0c1e      	lsrs	r6, r3, #16
 800f562:	0c0b      	lsrs	r3, r1, #16
 800f564:	fb02 3306 	mla	r3, r2, r6, r3
 800f568:	b289      	uxth	r1, r1
 800f56a:	3001      	adds	r0, #1
 800f56c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f570:	4285      	cmp	r5, r0
 800f572:	f84c 1b04 	str.w	r1, [ip], #4
 800f576:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f57a:	dcec      	bgt.n	800f556 <__multadd+0x12>
 800f57c:	b30e      	cbz	r6, 800f5c2 <__multadd+0x7e>
 800f57e:	68a3      	ldr	r3, [r4, #8]
 800f580:	42ab      	cmp	r3, r5
 800f582:	dc19      	bgt.n	800f5b8 <__multadd+0x74>
 800f584:	6861      	ldr	r1, [r4, #4]
 800f586:	4638      	mov	r0, r7
 800f588:	3101      	adds	r1, #1
 800f58a:	f7ff ff79 	bl	800f480 <_Balloc>
 800f58e:	4680      	mov	r8, r0
 800f590:	b928      	cbnz	r0, 800f59e <__multadd+0x5a>
 800f592:	4602      	mov	r2, r0
 800f594:	4b0c      	ldr	r3, [pc, #48]	; (800f5c8 <__multadd+0x84>)
 800f596:	480d      	ldr	r0, [pc, #52]	; (800f5cc <__multadd+0x88>)
 800f598:	21b5      	movs	r1, #181	; 0xb5
 800f59a:	f000 febf 	bl	801031c <__assert_func>
 800f59e:	6922      	ldr	r2, [r4, #16]
 800f5a0:	3202      	adds	r2, #2
 800f5a2:	f104 010c 	add.w	r1, r4, #12
 800f5a6:	0092      	lsls	r2, r2, #2
 800f5a8:	300c      	adds	r0, #12
 800f5aa:	f7fc fffd 	bl	800c5a8 <memcpy>
 800f5ae:	4621      	mov	r1, r4
 800f5b0:	4638      	mov	r0, r7
 800f5b2:	f7ff ffa5 	bl	800f500 <_Bfree>
 800f5b6:	4644      	mov	r4, r8
 800f5b8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5bc:	3501      	adds	r5, #1
 800f5be:	615e      	str	r6, [r3, #20]
 800f5c0:	6125      	str	r5, [r4, #16]
 800f5c2:	4620      	mov	r0, r4
 800f5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5c8:	08012758 	.word	0x08012758
 800f5cc:	080127e4 	.word	0x080127e4

0800f5d0 <__s2b>:
 800f5d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5d4:	460c      	mov	r4, r1
 800f5d6:	4615      	mov	r5, r2
 800f5d8:	461f      	mov	r7, r3
 800f5da:	2209      	movs	r2, #9
 800f5dc:	3308      	adds	r3, #8
 800f5de:	4606      	mov	r6, r0
 800f5e0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f5e4:	2100      	movs	r1, #0
 800f5e6:	2201      	movs	r2, #1
 800f5e8:	429a      	cmp	r2, r3
 800f5ea:	db09      	blt.n	800f600 <__s2b+0x30>
 800f5ec:	4630      	mov	r0, r6
 800f5ee:	f7ff ff47 	bl	800f480 <_Balloc>
 800f5f2:	b940      	cbnz	r0, 800f606 <__s2b+0x36>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	4b19      	ldr	r3, [pc, #100]	; (800f65c <__s2b+0x8c>)
 800f5f8:	4819      	ldr	r0, [pc, #100]	; (800f660 <__s2b+0x90>)
 800f5fa:	21ce      	movs	r1, #206	; 0xce
 800f5fc:	f000 fe8e 	bl	801031c <__assert_func>
 800f600:	0052      	lsls	r2, r2, #1
 800f602:	3101      	adds	r1, #1
 800f604:	e7f0      	b.n	800f5e8 <__s2b+0x18>
 800f606:	9b08      	ldr	r3, [sp, #32]
 800f608:	6143      	str	r3, [r0, #20]
 800f60a:	2d09      	cmp	r5, #9
 800f60c:	f04f 0301 	mov.w	r3, #1
 800f610:	6103      	str	r3, [r0, #16]
 800f612:	dd16      	ble.n	800f642 <__s2b+0x72>
 800f614:	f104 0909 	add.w	r9, r4, #9
 800f618:	46c8      	mov	r8, r9
 800f61a:	442c      	add	r4, r5
 800f61c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f620:	4601      	mov	r1, r0
 800f622:	3b30      	subs	r3, #48	; 0x30
 800f624:	220a      	movs	r2, #10
 800f626:	4630      	mov	r0, r6
 800f628:	f7ff ff8c 	bl	800f544 <__multadd>
 800f62c:	45a0      	cmp	r8, r4
 800f62e:	d1f5      	bne.n	800f61c <__s2b+0x4c>
 800f630:	f1a5 0408 	sub.w	r4, r5, #8
 800f634:	444c      	add	r4, r9
 800f636:	1b2d      	subs	r5, r5, r4
 800f638:	1963      	adds	r3, r4, r5
 800f63a:	42bb      	cmp	r3, r7
 800f63c:	db04      	blt.n	800f648 <__s2b+0x78>
 800f63e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f642:	340a      	adds	r4, #10
 800f644:	2509      	movs	r5, #9
 800f646:	e7f6      	b.n	800f636 <__s2b+0x66>
 800f648:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f64c:	4601      	mov	r1, r0
 800f64e:	3b30      	subs	r3, #48	; 0x30
 800f650:	220a      	movs	r2, #10
 800f652:	4630      	mov	r0, r6
 800f654:	f7ff ff76 	bl	800f544 <__multadd>
 800f658:	e7ee      	b.n	800f638 <__s2b+0x68>
 800f65a:	bf00      	nop
 800f65c:	08012758 	.word	0x08012758
 800f660:	080127e4 	.word	0x080127e4

0800f664 <__hi0bits>:
 800f664:	0c03      	lsrs	r3, r0, #16
 800f666:	041b      	lsls	r3, r3, #16
 800f668:	b9d3      	cbnz	r3, 800f6a0 <__hi0bits+0x3c>
 800f66a:	0400      	lsls	r0, r0, #16
 800f66c:	2310      	movs	r3, #16
 800f66e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f672:	bf04      	itt	eq
 800f674:	0200      	lsleq	r0, r0, #8
 800f676:	3308      	addeq	r3, #8
 800f678:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f67c:	bf04      	itt	eq
 800f67e:	0100      	lsleq	r0, r0, #4
 800f680:	3304      	addeq	r3, #4
 800f682:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f686:	bf04      	itt	eq
 800f688:	0080      	lsleq	r0, r0, #2
 800f68a:	3302      	addeq	r3, #2
 800f68c:	2800      	cmp	r0, #0
 800f68e:	db05      	blt.n	800f69c <__hi0bits+0x38>
 800f690:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f694:	f103 0301 	add.w	r3, r3, #1
 800f698:	bf08      	it	eq
 800f69a:	2320      	moveq	r3, #32
 800f69c:	4618      	mov	r0, r3
 800f69e:	4770      	bx	lr
 800f6a0:	2300      	movs	r3, #0
 800f6a2:	e7e4      	b.n	800f66e <__hi0bits+0xa>

0800f6a4 <__lo0bits>:
 800f6a4:	6803      	ldr	r3, [r0, #0]
 800f6a6:	f013 0207 	ands.w	r2, r3, #7
 800f6aa:	4601      	mov	r1, r0
 800f6ac:	d00b      	beq.n	800f6c6 <__lo0bits+0x22>
 800f6ae:	07da      	lsls	r2, r3, #31
 800f6b0:	d423      	bmi.n	800f6fa <__lo0bits+0x56>
 800f6b2:	0798      	lsls	r0, r3, #30
 800f6b4:	bf49      	itett	mi
 800f6b6:	085b      	lsrmi	r3, r3, #1
 800f6b8:	089b      	lsrpl	r3, r3, #2
 800f6ba:	2001      	movmi	r0, #1
 800f6bc:	600b      	strmi	r3, [r1, #0]
 800f6be:	bf5c      	itt	pl
 800f6c0:	600b      	strpl	r3, [r1, #0]
 800f6c2:	2002      	movpl	r0, #2
 800f6c4:	4770      	bx	lr
 800f6c6:	b298      	uxth	r0, r3
 800f6c8:	b9a8      	cbnz	r0, 800f6f6 <__lo0bits+0x52>
 800f6ca:	0c1b      	lsrs	r3, r3, #16
 800f6cc:	2010      	movs	r0, #16
 800f6ce:	b2da      	uxtb	r2, r3
 800f6d0:	b90a      	cbnz	r2, 800f6d6 <__lo0bits+0x32>
 800f6d2:	3008      	adds	r0, #8
 800f6d4:	0a1b      	lsrs	r3, r3, #8
 800f6d6:	071a      	lsls	r2, r3, #28
 800f6d8:	bf04      	itt	eq
 800f6da:	091b      	lsreq	r3, r3, #4
 800f6dc:	3004      	addeq	r0, #4
 800f6de:	079a      	lsls	r2, r3, #30
 800f6e0:	bf04      	itt	eq
 800f6e2:	089b      	lsreq	r3, r3, #2
 800f6e4:	3002      	addeq	r0, #2
 800f6e6:	07da      	lsls	r2, r3, #31
 800f6e8:	d403      	bmi.n	800f6f2 <__lo0bits+0x4e>
 800f6ea:	085b      	lsrs	r3, r3, #1
 800f6ec:	f100 0001 	add.w	r0, r0, #1
 800f6f0:	d005      	beq.n	800f6fe <__lo0bits+0x5a>
 800f6f2:	600b      	str	r3, [r1, #0]
 800f6f4:	4770      	bx	lr
 800f6f6:	4610      	mov	r0, r2
 800f6f8:	e7e9      	b.n	800f6ce <__lo0bits+0x2a>
 800f6fa:	2000      	movs	r0, #0
 800f6fc:	4770      	bx	lr
 800f6fe:	2020      	movs	r0, #32
 800f700:	4770      	bx	lr
	...

0800f704 <__i2b>:
 800f704:	b510      	push	{r4, lr}
 800f706:	460c      	mov	r4, r1
 800f708:	2101      	movs	r1, #1
 800f70a:	f7ff feb9 	bl	800f480 <_Balloc>
 800f70e:	4602      	mov	r2, r0
 800f710:	b928      	cbnz	r0, 800f71e <__i2b+0x1a>
 800f712:	4b05      	ldr	r3, [pc, #20]	; (800f728 <__i2b+0x24>)
 800f714:	4805      	ldr	r0, [pc, #20]	; (800f72c <__i2b+0x28>)
 800f716:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f71a:	f000 fdff 	bl	801031c <__assert_func>
 800f71e:	2301      	movs	r3, #1
 800f720:	6144      	str	r4, [r0, #20]
 800f722:	6103      	str	r3, [r0, #16]
 800f724:	bd10      	pop	{r4, pc}
 800f726:	bf00      	nop
 800f728:	08012758 	.word	0x08012758
 800f72c:	080127e4 	.word	0x080127e4

0800f730 <__multiply>:
 800f730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f734:	4691      	mov	r9, r2
 800f736:	690a      	ldr	r2, [r1, #16]
 800f738:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	bfb8      	it	lt
 800f740:	460b      	movlt	r3, r1
 800f742:	460c      	mov	r4, r1
 800f744:	bfbc      	itt	lt
 800f746:	464c      	movlt	r4, r9
 800f748:	4699      	movlt	r9, r3
 800f74a:	6927      	ldr	r7, [r4, #16]
 800f74c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f750:	68a3      	ldr	r3, [r4, #8]
 800f752:	6861      	ldr	r1, [r4, #4]
 800f754:	eb07 060a 	add.w	r6, r7, sl
 800f758:	42b3      	cmp	r3, r6
 800f75a:	b085      	sub	sp, #20
 800f75c:	bfb8      	it	lt
 800f75e:	3101      	addlt	r1, #1
 800f760:	f7ff fe8e 	bl	800f480 <_Balloc>
 800f764:	b930      	cbnz	r0, 800f774 <__multiply+0x44>
 800f766:	4602      	mov	r2, r0
 800f768:	4b44      	ldr	r3, [pc, #272]	; (800f87c <__multiply+0x14c>)
 800f76a:	4845      	ldr	r0, [pc, #276]	; (800f880 <__multiply+0x150>)
 800f76c:	f240 115d 	movw	r1, #349	; 0x15d
 800f770:	f000 fdd4 	bl	801031c <__assert_func>
 800f774:	f100 0514 	add.w	r5, r0, #20
 800f778:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f77c:	462b      	mov	r3, r5
 800f77e:	2200      	movs	r2, #0
 800f780:	4543      	cmp	r3, r8
 800f782:	d321      	bcc.n	800f7c8 <__multiply+0x98>
 800f784:	f104 0314 	add.w	r3, r4, #20
 800f788:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f78c:	f109 0314 	add.w	r3, r9, #20
 800f790:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f794:	9202      	str	r2, [sp, #8]
 800f796:	1b3a      	subs	r2, r7, r4
 800f798:	3a15      	subs	r2, #21
 800f79a:	f022 0203 	bic.w	r2, r2, #3
 800f79e:	3204      	adds	r2, #4
 800f7a0:	f104 0115 	add.w	r1, r4, #21
 800f7a4:	428f      	cmp	r7, r1
 800f7a6:	bf38      	it	cc
 800f7a8:	2204      	movcc	r2, #4
 800f7aa:	9201      	str	r2, [sp, #4]
 800f7ac:	9a02      	ldr	r2, [sp, #8]
 800f7ae:	9303      	str	r3, [sp, #12]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d80c      	bhi.n	800f7ce <__multiply+0x9e>
 800f7b4:	2e00      	cmp	r6, #0
 800f7b6:	dd03      	ble.n	800f7c0 <__multiply+0x90>
 800f7b8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	d05a      	beq.n	800f876 <__multiply+0x146>
 800f7c0:	6106      	str	r6, [r0, #16]
 800f7c2:	b005      	add	sp, #20
 800f7c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7c8:	f843 2b04 	str.w	r2, [r3], #4
 800f7cc:	e7d8      	b.n	800f780 <__multiply+0x50>
 800f7ce:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7d2:	f1ba 0f00 	cmp.w	sl, #0
 800f7d6:	d024      	beq.n	800f822 <__multiply+0xf2>
 800f7d8:	f104 0e14 	add.w	lr, r4, #20
 800f7dc:	46a9      	mov	r9, r5
 800f7de:	f04f 0c00 	mov.w	ip, #0
 800f7e2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f7e6:	f8d9 1000 	ldr.w	r1, [r9]
 800f7ea:	fa1f fb82 	uxth.w	fp, r2
 800f7ee:	b289      	uxth	r1, r1
 800f7f0:	fb0a 110b 	mla	r1, sl, fp, r1
 800f7f4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f7f8:	f8d9 2000 	ldr.w	r2, [r9]
 800f7fc:	4461      	add	r1, ip
 800f7fe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f802:	fb0a c20b 	mla	r2, sl, fp, ip
 800f806:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f80a:	b289      	uxth	r1, r1
 800f80c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f810:	4577      	cmp	r7, lr
 800f812:	f849 1b04 	str.w	r1, [r9], #4
 800f816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f81a:	d8e2      	bhi.n	800f7e2 <__multiply+0xb2>
 800f81c:	9a01      	ldr	r2, [sp, #4]
 800f81e:	f845 c002 	str.w	ip, [r5, r2]
 800f822:	9a03      	ldr	r2, [sp, #12]
 800f824:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f828:	3304      	adds	r3, #4
 800f82a:	f1b9 0f00 	cmp.w	r9, #0
 800f82e:	d020      	beq.n	800f872 <__multiply+0x142>
 800f830:	6829      	ldr	r1, [r5, #0]
 800f832:	f104 0c14 	add.w	ip, r4, #20
 800f836:	46ae      	mov	lr, r5
 800f838:	f04f 0a00 	mov.w	sl, #0
 800f83c:	f8bc b000 	ldrh.w	fp, [ip]
 800f840:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f844:	fb09 220b 	mla	r2, r9, fp, r2
 800f848:	4492      	add	sl, r2
 800f84a:	b289      	uxth	r1, r1
 800f84c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f850:	f84e 1b04 	str.w	r1, [lr], #4
 800f854:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f858:	f8be 1000 	ldrh.w	r1, [lr]
 800f85c:	0c12      	lsrs	r2, r2, #16
 800f85e:	fb09 1102 	mla	r1, r9, r2, r1
 800f862:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f866:	4567      	cmp	r7, ip
 800f868:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f86c:	d8e6      	bhi.n	800f83c <__multiply+0x10c>
 800f86e:	9a01      	ldr	r2, [sp, #4]
 800f870:	50a9      	str	r1, [r5, r2]
 800f872:	3504      	adds	r5, #4
 800f874:	e79a      	b.n	800f7ac <__multiply+0x7c>
 800f876:	3e01      	subs	r6, #1
 800f878:	e79c      	b.n	800f7b4 <__multiply+0x84>
 800f87a:	bf00      	nop
 800f87c:	08012758 	.word	0x08012758
 800f880:	080127e4 	.word	0x080127e4

0800f884 <__pow5mult>:
 800f884:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f888:	4615      	mov	r5, r2
 800f88a:	f012 0203 	ands.w	r2, r2, #3
 800f88e:	4606      	mov	r6, r0
 800f890:	460f      	mov	r7, r1
 800f892:	d007      	beq.n	800f8a4 <__pow5mult+0x20>
 800f894:	4c25      	ldr	r4, [pc, #148]	; (800f92c <__pow5mult+0xa8>)
 800f896:	3a01      	subs	r2, #1
 800f898:	2300      	movs	r3, #0
 800f89a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f89e:	f7ff fe51 	bl	800f544 <__multadd>
 800f8a2:	4607      	mov	r7, r0
 800f8a4:	10ad      	asrs	r5, r5, #2
 800f8a6:	d03d      	beq.n	800f924 <__pow5mult+0xa0>
 800f8a8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8aa:	b97c      	cbnz	r4, 800f8cc <__pow5mult+0x48>
 800f8ac:	2010      	movs	r0, #16
 800f8ae:	f7ff fdcd 	bl	800f44c <malloc>
 800f8b2:	4602      	mov	r2, r0
 800f8b4:	6270      	str	r0, [r6, #36]	; 0x24
 800f8b6:	b928      	cbnz	r0, 800f8c4 <__pow5mult+0x40>
 800f8b8:	4b1d      	ldr	r3, [pc, #116]	; (800f930 <__pow5mult+0xac>)
 800f8ba:	481e      	ldr	r0, [pc, #120]	; (800f934 <__pow5mult+0xb0>)
 800f8bc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8c0:	f000 fd2c 	bl	801031c <__assert_func>
 800f8c4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8c8:	6004      	str	r4, [r0, #0]
 800f8ca:	60c4      	str	r4, [r0, #12]
 800f8cc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8d0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8d4:	b94c      	cbnz	r4, 800f8ea <__pow5mult+0x66>
 800f8d6:	f240 2171 	movw	r1, #625	; 0x271
 800f8da:	4630      	mov	r0, r6
 800f8dc:	f7ff ff12 	bl	800f704 <__i2b>
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	f8c8 0008 	str.w	r0, [r8, #8]
 800f8e6:	4604      	mov	r4, r0
 800f8e8:	6003      	str	r3, [r0, #0]
 800f8ea:	f04f 0900 	mov.w	r9, #0
 800f8ee:	07eb      	lsls	r3, r5, #31
 800f8f0:	d50a      	bpl.n	800f908 <__pow5mult+0x84>
 800f8f2:	4639      	mov	r1, r7
 800f8f4:	4622      	mov	r2, r4
 800f8f6:	4630      	mov	r0, r6
 800f8f8:	f7ff ff1a 	bl	800f730 <__multiply>
 800f8fc:	4639      	mov	r1, r7
 800f8fe:	4680      	mov	r8, r0
 800f900:	4630      	mov	r0, r6
 800f902:	f7ff fdfd 	bl	800f500 <_Bfree>
 800f906:	4647      	mov	r7, r8
 800f908:	106d      	asrs	r5, r5, #1
 800f90a:	d00b      	beq.n	800f924 <__pow5mult+0xa0>
 800f90c:	6820      	ldr	r0, [r4, #0]
 800f90e:	b938      	cbnz	r0, 800f920 <__pow5mult+0x9c>
 800f910:	4622      	mov	r2, r4
 800f912:	4621      	mov	r1, r4
 800f914:	4630      	mov	r0, r6
 800f916:	f7ff ff0b 	bl	800f730 <__multiply>
 800f91a:	6020      	str	r0, [r4, #0]
 800f91c:	f8c0 9000 	str.w	r9, [r0]
 800f920:	4604      	mov	r4, r0
 800f922:	e7e4      	b.n	800f8ee <__pow5mult+0x6a>
 800f924:	4638      	mov	r0, r7
 800f926:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f92a:	bf00      	nop
 800f92c:	08012930 	.word	0x08012930
 800f930:	080126e6 	.word	0x080126e6
 800f934:	080127e4 	.word	0x080127e4

0800f938 <__lshift>:
 800f938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f93c:	460c      	mov	r4, r1
 800f93e:	6849      	ldr	r1, [r1, #4]
 800f940:	6923      	ldr	r3, [r4, #16]
 800f942:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f946:	68a3      	ldr	r3, [r4, #8]
 800f948:	4607      	mov	r7, r0
 800f94a:	4691      	mov	r9, r2
 800f94c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f950:	f108 0601 	add.w	r6, r8, #1
 800f954:	42b3      	cmp	r3, r6
 800f956:	db0b      	blt.n	800f970 <__lshift+0x38>
 800f958:	4638      	mov	r0, r7
 800f95a:	f7ff fd91 	bl	800f480 <_Balloc>
 800f95e:	4605      	mov	r5, r0
 800f960:	b948      	cbnz	r0, 800f976 <__lshift+0x3e>
 800f962:	4602      	mov	r2, r0
 800f964:	4b2a      	ldr	r3, [pc, #168]	; (800fa10 <__lshift+0xd8>)
 800f966:	482b      	ldr	r0, [pc, #172]	; (800fa14 <__lshift+0xdc>)
 800f968:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f96c:	f000 fcd6 	bl	801031c <__assert_func>
 800f970:	3101      	adds	r1, #1
 800f972:	005b      	lsls	r3, r3, #1
 800f974:	e7ee      	b.n	800f954 <__lshift+0x1c>
 800f976:	2300      	movs	r3, #0
 800f978:	f100 0114 	add.w	r1, r0, #20
 800f97c:	f100 0210 	add.w	r2, r0, #16
 800f980:	4618      	mov	r0, r3
 800f982:	4553      	cmp	r3, sl
 800f984:	db37      	blt.n	800f9f6 <__lshift+0xbe>
 800f986:	6920      	ldr	r0, [r4, #16]
 800f988:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f98c:	f104 0314 	add.w	r3, r4, #20
 800f990:	f019 091f 	ands.w	r9, r9, #31
 800f994:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f998:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f99c:	d02f      	beq.n	800f9fe <__lshift+0xc6>
 800f99e:	f1c9 0e20 	rsb	lr, r9, #32
 800f9a2:	468a      	mov	sl, r1
 800f9a4:	f04f 0c00 	mov.w	ip, #0
 800f9a8:	681a      	ldr	r2, [r3, #0]
 800f9aa:	fa02 f209 	lsl.w	r2, r2, r9
 800f9ae:	ea42 020c 	orr.w	r2, r2, ip
 800f9b2:	f84a 2b04 	str.w	r2, [sl], #4
 800f9b6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9ba:	4298      	cmp	r0, r3
 800f9bc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f9c0:	d8f2      	bhi.n	800f9a8 <__lshift+0x70>
 800f9c2:	1b03      	subs	r3, r0, r4
 800f9c4:	3b15      	subs	r3, #21
 800f9c6:	f023 0303 	bic.w	r3, r3, #3
 800f9ca:	3304      	adds	r3, #4
 800f9cc:	f104 0215 	add.w	r2, r4, #21
 800f9d0:	4290      	cmp	r0, r2
 800f9d2:	bf38      	it	cc
 800f9d4:	2304      	movcc	r3, #4
 800f9d6:	f841 c003 	str.w	ip, [r1, r3]
 800f9da:	f1bc 0f00 	cmp.w	ip, #0
 800f9de:	d001      	beq.n	800f9e4 <__lshift+0xac>
 800f9e0:	f108 0602 	add.w	r6, r8, #2
 800f9e4:	3e01      	subs	r6, #1
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	612e      	str	r6, [r5, #16]
 800f9ea:	4621      	mov	r1, r4
 800f9ec:	f7ff fd88 	bl	800f500 <_Bfree>
 800f9f0:	4628      	mov	r0, r5
 800f9f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f9f6:	f842 0f04 	str.w	r0, [r2, #4]!
 800f9fa:	3301      	adds	r3, #1
 800f9fc:	e7c1      	b.n	800f982 <__lshift+0x4a>
 800f9fe:	3904      	subs	r1, #4
 800fa00:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa04:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa08:	4298      	cmp	r0, r3
 800fa0a:	d8f9      	bhi.n	800fa00 <__lshift+0xc8>
 800fa0c:	e7ea      	b.n	800f9e4 <__lshift+0xac>
 800fa0e:	bf00      	nop
 800fa10:	08012758 	.word	0x08012758
 800fa14:	080127e4 	.word	0x080127e4

0800fa18 <__mcmp>:
 800fa18:	b530      	push	{r4, r5, lr}
 800fa1a:	6902      	ldr	r2, [r0, #16]
 800fa1c:	690c      	ldr	r4, [r1, #16]
 800fa1e:	1b12      	subs	r2, r2, r4
 800fa20:	d10e      	bne.n	800fa40 <__mcmp+0x28>
 800fa22:	f100 0314 	add.w	r3, r0, #20
 800fa26:	3114      	adds	r1, #20
 800fa28:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa2c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa30:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa34:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa38:	42a5      	cmp	r5, r4
 800fa3a:	d003      	beq.n	800fa44 <__mcmp+0x2c>
 800fa3c:	d305      	bcc.n	800fa4a <__mcmp+0x32>
 800fa3e:	2201      	movs	r2, #1
 800fa40:	4610      	mov	r0, r2
 800fa42:	bd30      	pop	{r4, r5, pc}
 800fa44:	4283      	cmp	r3, r0
 800fa46:	d3f3      	bcc.n	800fa30 <__mcmp+0x18>
 800fa48:	e7fa      	b.n	800fa40 <__mcmp+0x28>
 800fa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa4e:	e7f7      	b.n	800fa40 <__mcmp+0x28>

0800fa50 <__mdiff>:
 800fa50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa54:	460c      	mov	r4, r1
 800fa56:	4606      	mov	r6, r0
 800fa58:	4611      	mov	r1, r2
 800fa5a:	4620      	mov	r0, r4
 800fa5c:	4690      	mov	r8, r2
 800fa5e:	f7ff ffdb 	bl	800fa18 <__mcmp>
 800fa62:	1e05      	subs	r5, r0, #0
 800fa64:	d110      	bne.n	800fa88 <__mdiff+0x38>
 800fa66:	4629      	mov	r1, r5
 800fa68:	4630      	mov	r0, r6
 800fa6a:	f7ff fd09 	bl	800f480 <_Balloc>
 800fa6e:	b930      	cbnz	r0, 800fa7e <__mdiff+0x2e>
 800fa70:	4b3a      	ldr	r3, [pc, #232]	; (800fb5c <__mdiff+0x10c>)
 800fa72:	4602      	mov	r2, r0
 800fa74:	f240 2132 	movw	r1, #562	; 0x232
 800fa78:	4839      	ldr	r0, [pc, #228]	; (800fb60 <__mdiff+0x110>)
 800fa7a:	f000 fc4f 	bl	801031c <__assert_func>
 800fa7e:	2301      	movs	r3, #1
 800fa80:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fa84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa88:	bfa4      	itt	ge
 800fa8a:	4643      	movge	r3, r8
 800fa8c:	46a0      	movge	r8, r4
 800fa8e:	4630      	mov	r0, r6
 800fa90:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fa94:	bfa6      	itte	ge
 800fa96:	461c      	movge	r4, r3
 800fa98:	2500      	movge	r5, #0
 800fa9a:	2501      	movlt	r5, #1
 800fa9c:	f7ff fcf0 	bl	800f480 <_Balloc>
 800faa0:	b920      	cbnz	r0, 800faac <__mdiff+0x5c>
 800faa2:	4b2e      	ldr	r3, [pc, #184]	; (800fb5c <__mdiff+0x10c>)
 800faa4:	4602      	mov	r2, r0
 800faa6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800faaa:	e7e5      	b.n	800fa78 <__mdiff+0x28>
 800faac:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fab0:	6926      	ldr	r6, [r4, #16]
 800fab2:	60c5      	str	r5, [r0, #12]
 800fab4:	f104 0914 	add.w	r9, r4, #20
 800fab8:	f108 0514 	add.w	r5, r8, #20
 800fabc:	f100 0e14 	add.w	lr, r0, #20
 800fac0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fac4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fac8:	f108 0210 	add.w	r2, r8, #16
 800facc:	46f2      	mov	sl, lr
 800face:	2100      	movs	r1, #0
 800fad0:	f859 3b04 	ldr.w	r3, [r9], #4
 800fad4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fad8:	fa1f f883 	uxth.w	r8, r3
 800fadc:	fa11 f18b 	uxtah	r1, r1, fp
 800fae0:	0c1b      	lsrs	r3, r3, #16
 800fae2:	eba1 0808 	sub.w	r8, r1, r8
 800fae6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800faea:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800faee:	fa1f f888 	uxth.w	r8, r8
 800faf2:	1419      	asrs	r1, r3, #16
 800faf4:	454e      	cmp	r6, r9
 800faf6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fafa:	f84a 3b04 	str.w	r3, [sl], #4
 800fafe:	d8e7      	bhi.n	800fad0 <__mdiff+0x80>
 800fb00:	1b33      	subs	r3, r6, r4
 800fb02:	3b15      	subs	r3, #21
 800fb04:	f023 0303 	bic.w	r3, r3, #3
 800fb08:	3304      	adds	r3, #4
 800fb0a:	3415      	adds	r4, #21
 800fb0c:	42a6      	cmp	r6, r4
 800fb0e:	bf38      	it	cc
 800fb10:	2304      	movcc	r3, #4
 800fb12:	441d      	add	r5, r3
 800fb14:	4473      	add	r3, lr
 800fb16:	469e      	mov	lr, r3
 800fb18:	462e      	mov	r6, r5
 800fb1a:	4566      	cmp	r6, ip
 800fb1c:	d30e      	bcc.n	800fb3c <__mdiff+0xec>
 800fb1e:	f10c 0203 	add.w	r2, ip, #3
 800fb22:	1b52      	subs	r2, r2, r5
 800fb24:	f022 0203 	bic.w	r2, r2, #3
 800fb28:	3d03      	subs	r5, #3
 800fb2a:	45ac      	cmp	ip, r5
 800fb2c:	bf38      	it	cc
 800fb2e:	2200      	movcc	r2, #0
 800fb30:	441a      	add	r2, r3
 800fb32:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb36:	b17b      	cbz	r3, 800fb58 <__mdiff+0x108>
 800fb38:	6107      	str	r7, [r0, #16]
 800fb3a:	e7a3      	b.n	800fa84 <__mdiff+0x34>
 800fb3c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb40:	fa11 f288 	uxtah	r2, r1, r8
 800fb44:	1414      	asrs	r4, r2, #16
 800fb46:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb4a:	b292      	uxth	r2, r2
 800fb4c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb50:	f84e 2b04 	str.w	r2, [lr], #4
 800fb54:	1421      	asrs	r1, r4, #16
 800fb56:	e7e0      	b.n	800fb1a <__mdiff+0xca>
 800fb58:	3f01      	subs	r7, #1
 800fb5a:	e7ea      	b.n	800fb32 <__mdiff+0xe2>
 800fb5c:	08012758 	.word	0x08012758
 800fb60:	080127e4 	.word	0x080127e4

0800fb64 <__ulp>:
 800fb64:	b082      	sub	sp, #8
 800fb66:	ed8d 0b00 	vstr	d0, [sp]
 800fb6a:	9b01      	ldr	r3, [sp, #4]
 800fb6c:	4912      	ldr	r1, [pc, #72]	; (800fbb8 <__ulp+0x54>)
 800fb6e:	4019      	ands	r1, r3
 800fb70:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fb74:	2900      	cmp	r1, #0
 800fb76:	dd05      	ble.n	800fb84 <__ulp+0x20>
 800fb78:	2200      	movs	r2, #0
 800fb7a:	460b      	mov	r3, r1
 800fb7c:	ec43 2b10 	vmov	d0, r2, r3
 800fb80:	b002      	add	sp, #8
 800fb82:	4770      	bx	lr
 800fb84:	4249      	negs	r1, r1
 800fb86:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fb8a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fb8e:	f04f 0200 	mov.w	r2, #0
 800fb92:	f04f 0300 	mov.w	r3, #0
 800fb96:	da04      	bge.n	800fba2 <__ulp+0x3e>
 800fb98:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fb9c:	fa41 f300 	asr.w	r3, r1, r0
 800fba0:	e7ec      	b.n	800fb7c <__ulp+0x18>
 800fba2:	f1a0 0114 	sub.w	r1, r0, #20
 800fba6:	291e      	cmp	r1, #30
 800fba8:	bfda      	itte	le
 800fbaa:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fbae:	fa20 f101 	lsrle.w	r1, r0, r1
 800fbb2:	2101      	movgt	r1, #1
 800fbb4:	460a      	mov	r2, r1
 800fbb6:	e7e1      	b.n	800fb7c <__ulp+0x18>
 800fbb8:	7ff00000 	.word	0x7ff00000

0800fbbc <__b2d>:
 800fbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbbe:	6905      	ldr	r5, [r0, #16]
 800fbc0:	f100 0714 	add.w	r7, r0, #20
 800fbc4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fbc8:	1f2e      	subs	r6, r5, #4
 800fbca:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fbce:	4620      	mov	r0, r4
 800fbd0:	f7ff fd48 	bl	800f664 <__hi0bits>
 800fbd4:	f1c0 0320 	rsb	r3, r0, #32
 800fbd8:	280a      	cmp	r0, #10
 800fbda:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fc58 <__b2d+0x9c>
 800fbde:	600b      	str	r3, [r1, #0]
 800fbe0:	dc14      	bgt.n	800fc0c <__b2d+0x50>
 800fbe2:	f1c0 0e0b 	rsb	lr, r0, #11
 800fbe6:	fa24 f10e 	lsr.w	r1, r4, lr
 800fbea:	42b7      	cmp	r7, r6
 800fbec:	ea41 030c 	orr.w	r3, r1, ip
 800fbf0:	bf34      	ite	cc
 800fbf2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fbf6:	2100      	movcs	r1, #0
 800fbf8:	3015      	adds	r0, #21
 800fbfa:	fa04 f000 	lsl.w	r0, r4, r0
 800fbfe:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc02:	ea40 0201 	orr.w	r2, r0, r1
 800fc06:	ec43 2b10 	vmov	d0, r2, r3
 800fc0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc0c:	42b7      	cmp	r7, r6
 800fc0e:	bf3a      	itte	cc
 800fc10:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc14:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc18:	2100      	movcs	r1, #0
 800fc1a:	380b      	subs	r0, #11
 800fc1c:	d017      	beq.n	800fc4e <__b2d+0x92>
 800fc1e:	f1c0 0c20 	rsb	ip, r0, #32
 800fc22:	fa04 f500 	lsl.w	r5, r4, r0
 800fc26:	42be      	cmp	r6, r7
 800fc28:	fa21 f40c 	lsr.w	r4, r1, ip
 800fc2c:	ea45 0504 	orr.w	r5, r5, r4
 800fc30:	bf8c      	ite	hi
 800fc32:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc36:	2400      	movls	r4, #0
 800fc38:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fc3c:	fa01 f000 	lsl.w	r0, r1, r0
 800fc40:	fa24 f40c 	lsr.w	r4, r4, ip
 800fc44:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc48:	ea40 0204 	orr.w	r2, r0, r4
 800fc4c:	e7db      	b.n	800fc06 <__b2d+0x4a>
 800fc4e:	ea44 030c 	orr.w	r3, r4, ip
 800fc52:	460a      	mov	r2, r1
 800fc54:	e7d7      	b.n	800fc06 <__b2d+0x4a>
 800fc56:	bf00      	nop
 800fc58:	3ff00000 	.word	0x3ff00000

0800fc5c <__d2b>:
 800fc5c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc60:	4689      	mov	r9, r1
 800fc62:	2101      	movs	r1, #1
 800fc64:	ec57 6b10 	vmov	r6, r7, d0
 800fc68:	4690      	mov	r8, r2
 800fc6a:	f7ff fc09 	bl	800f480 <_Balloc>
 800fc6e:	4604      	mov	r4, r0
 800fc70:	b930      	cbnz	r0, 800fc80 <__d2b+0x24>
 800fc72:	4602      	mov	r2, r0
 800fc74:	4b25      	ldr	r3, [pc, #148]	; (800fd0c <__d2b+0xb0>)
 800fc76:	4826      	ldr	r0, [pc, #152]	; (800fd10 <__d2b+0xb4>)
 800fc78:	f240 310a 	movw	r1, #778	; 0x30a
 800fc7c:	f000 fb4e 	bl	801031c <__assert_func>
 800fc80:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fc84:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fc88:	bb35      	cbnz	r5, 800fcd8 <__d2b+0x7c>
 800fc8a:	2e00      	cmp	r6, #0
 800fc8c:	9301      	str	r3, [sp, #4]
 800fc8e:	d028      	beq.n	800fce2 <__d2b+0x86>
 800fc90:	4668      	mov	r0, sp
 800fc92:	9600      	str	r6, [sp, #0]
 800fc94:	f7ff fd06 	bl	800f6a4 <__lo0bits>
 800fc98:	9900      	ldr	r1, [sp, #0]
 800fc9a:	b300      	cbz	r0, 800fcde <__d2b+0x82>
 800fc9c:	9a01      	ldr	r2, [sp, #4]
 800fc9e:	f1c0 0320 	rsb	r3, r0, #32
 800fca2:	fa02 f303 	lsl.w	r3, r2, r3
 800fca6:	430b      	orrs	r3, r1
 800fca8:	40c2      	lsrs	r2, r0
 800fcaa:	6163      	str	r3, [r4, #20]
 800fcac:	9201      	str	r2, [sp, #4]
 800fcae:	9b01      	ldr	r3, [sp, #4]
 800fcb0:	61a3      	str	r3, [r4, #24]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	bf14      	ite	ne
 800fcb6:	2202      	movne	r2, #2
 800fcb8:	2201      	moveq	r2, #1
 800fcba:	6122      	str	r2, [r4, #16]
 800fcbc:	b1d5      	cbz	r5, 800fcf4 <__d2b+0x98>
 800fcbe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fcc2:	4405      	add	r5, r0
 800fcc4:	f8c9 5000 	str.w	r5, [r9]
 800fcc8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fccc:	f8c8 0000 	str.w	r0, [r8]
 800fcd0:	4620      	mov	r0, r4
 800fcd2:	b003      	add	sp, #12
 800fcd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcdc:	e7d5      	b.n	800fc8a <__d2b+0x2e>
 800fcde:	6161      	str	r1, [r4, #20]
 800fce0:	e7e5      	b.n	800fcae <__d2b+0x52>
 800fce2:	a801      	add	r0, sp, #4
 800fce4:	f7ff fcde 	bl	800f6a4 <__lo0bits>
 800fce8:	9b01      	ldr	r3, [sp, #4]
 800fcea:	6163      	str	r3, [r4, #20]
 800fcec:	2201      	movs	r2, #1
 800fcee:	6122      	str	r2, [r4, #16]
 800fcf0:	3020      	adds	r0, #32
 800fcf2:	e7e3      	b.n	800fcbc <__d2b+0x60>
 800fcf4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fcf8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fcfc:	f8c9 0000 	str.w	r0, [r9]
 800fd00:	6918      	ldr	r0, [r3, #16]
 800fd02:	f7ff fcaf 	bl	800f664 <__hi0bits>
 800fd06:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd0a:	e7df      	b.n	800fccc <__d2b+0x70>
 800fd0c:	08012758 	.word	0x08012758
 800fd10:	080127e4 	.word	0x080127e4

0800fd14 <__ratio>:
 800fd14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd18:	4688      	mov	r8, r1
 800fd1a:	4669      	mov	r1, sp
 800fd1c:	4681      	mov	r9, r0
 800fd1e:	f7ff ff4d 	bl	800fbbc <__b2d>
 800fd22:	a901      	add	r1, sp, #4
 800fd24:	4640      	mov	r0, r8
 800fd26:	ec55 4b10 	vmov	r4, r5, d0
 800fd2a:	f7ff ff47 	bl	800fbbc <__b2d>
 800fd2e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd32:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd36:	eba3 0c02 	sub.w	ip, r3, r2
 800fd3a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd3e:	1a9b      	subs	r3, r3, r2
 800fd40:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd44:	ec51 0b10 	vmov	r0, r1, d0
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	bfd6      	itet	le
 800fd4c:	460a      	movle	r2, r1
 800fd4e:	462a      	movgt	r2, r5
 800fd50:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd54:	468b      	mov	fp, r1
 800fd56:	462f      	mov	r7, r5
 800fd58:	bfd4      	ite	le
 800fd5a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fd5e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd62:	4620      	mov	r0, r4
 800fd64:	ee10 2a10 	vmov	r2, s0
 800fd68:	465b      	mov	r3, fp
 800fd6a:	4639      	mov	r1, r7
 800fd6c:	f7f0 fd76 	bl	800085c <__aeabi_ddiv>
 800fd70:	ec41 0b10 	vmov	d0, r0, r1
 800fd74:	b003      	add	sp, #12
 800fd76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd7a <__copybits>:
 800fd7a:	3901      	subs	r1, #1
 800fd7c:	b570      	push	{r4, r5, r6, lr}
 800fd7e:	1149      	asrs	r1, r1, #5
 800fd80:	6914      	ldr	r4, [r2, #16]
 800fd82:	3101      	adds	r1, #1
 800fd84:	f102 0314 	add.w	r3, r2, #20
 800fd88:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fd8c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fd90:	1f05      	subs	r5, r0, #4
 800fd92:	42a3      	cmp	r3, r4
 800fd94:	d30c      	bcc.n	800fdb0 <__copybits+0x36>
 800fd96:	1aa3      	subs	r3, r4, r2
 800fd98:	3b11      	subs	r3, #17
 800fd9a:	f023 0303 	bic.w	r3, r3, #3
 800fd9e:	3211      	adds	r2, #17
 800fda0:	42a2      	cmp	r2, r4
 800fda2:	bf88      	it	hi
 800fda4:	2300      	movhi	r3, #0
 800fda6:	4418      	add	r0, r3
 800fda8:	2300      	movs	r3, #0
 800fdaa:	4288      	cmp	r0, r1
 800fdac:	d305      	bcc.n	800fdba <__copybits+0x40>
 800fdae:	bd70      	pop	{r4, r5, r6, pc}
 800fdb0:	f853 6b04 	ldr.w	r6, [r3], #4
 800fdb4:	f845 6f04 	str.w	r6, [r5, #4]!
 800fdb8:	e7eb      	b.n	800fd92 <__copybits+0x18>
 800fdba:	f840 3b04 	str.w	r3, [r0], #4
 800fdbe:	e7f4      	b.n	800fdaa <__copybits+0x30>

0800fdc0 <__any_on>:
 800fdc0:	f100 0214 	add.w	r2, r0, #20
 800fdc4:	6900      	ldr	r0, [r0, #16]
 800fdc6:	114b      	asrs	r3, r1, #5
 800fdc8:	4298      	cmp	r0, r3
 800fdca:	b510      	push	{r4, lr}
 800fdcc:	db11      	blt.n	800fdf2 <__any_on+0x32>
 800fdce:	dd0a      	ble.n	800fde6 <__any_on+0x26>
 800fdd0:	f011 011f 	ands.w	r1, r1, #31
 800fdd4:	d007      	beq.n	800fde6 <__any_on+0x26>
 800fdd6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fdda:	fa24 f001 	lsr.w	r0, r4, r1
 800fdde:	fa00 f101 	lsl.w	r1, r0, r1
 800fde2:	428c      	cmp	r4, r1
 800fde4:	d10b      	bne.n	800fdfe <__any_on+0x3e>
 800fde6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fdea:	4293      	cmp	r3, r2
 800fdec:	d803      	bhi.n	800fdf6 <__any_on+0x36>
 800fdee:	2000      	movs	r0, #0
 800fdf0:	bd10      	pop	{r4, pc}
 800fdf2:	4603      	mov	r3, r0
 800fdf4:	e7f7      	b.n	800fde6 <__any_on+0x26>
 800fdf6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fdfa:	2900      	cmp	r1, #0
 800fdfc:	d0f5      	beq.n	800fdea <__any_on+0x2a>
 800fdfe:	2001      	movs	r0, #1
 800fe00:	e7f6      	b.n	800fdf0 <__any_on+0x30>

0800fe02 <_calloc_r>:
 800fe02:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe04:	fba1 2402 	umull	r2, r4, r1, r2
 800fe08:	b94c      	cbnz	r4, 800fe1e <_calloc_r+0x1c>
 800fe0a:	4611      	mov	r1, r2
 800fe0c:	9201      	str	r2, [sp, #4]
 800fe0e:	f000 f87b 	bl	800ff08 <_malloc_r>
 800fe12:	9a01      	ldr	r2, [sp, #4]
 800fe14:	4605      	mov	r5, r0
 800fe16:	b930      	cbnz	r0, 800fe26 <_calloc_r+0x24>
 800fe18:	4628      	mov	r0, r5
 800fe1a:	b003      	add	sp, #12
 800fe1c:	bd30      	pop	{r4, r5, pc}
 800fe1e:	220c      	movs	r2, #12
 800fe20:	6002      	str	r2, [r0, #0]
 800fe22:	2500      	movs	r5, #0
 800fe24:	e7f8      	b.n	800fe18 <_calloc_r+0x16>
 800fe26:	4621      	mov	r1, r4
 800fe28:	f7fc fbcc 	bl	800c5c4 <memset>
 800fe2c:	e7f4      	b.n	800fe18 <_calloc_r+0x16>
	...

0800fe30 <_free_r>:
 800fe30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe32:	2900      	cmp	r1, #0
 800fe34:	d044      	beq.n	800fec0 <_free_r+0x90>
 800fe36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe3a:	9001      	str	r0, [sp, #4]
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	f1a1 0404 	sub.w	r4, r1, #4
 800fe42:	bfb8      	it	lt
 800fe44:	18e4      	addlt	r4, r4, r3
 800fe46:	f000 fab3 	bl	80103b0 <__malloc_lock>
 800fe4a:	4a1e      	ldr	r2, [pc, #120]	; (800fec4 <_free_r+0x94>)
 800fe4c:	9801      	ldr	r0, [sp, #4]
 800fe4e:	6813      	ldr	r3, [r2, #0]
 800fe50:	b933      	cbnz	r3, 800fe60 <_free_r+0x30>
 800fe52:	6063      	str	r3, [r4, #4]
 800fe54:	6014      	str	r4, [r2, #0]
 800fe56:	b003      	add	sp, #12
 800fe58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe5c:	f000 baae 	b.w	80103bc <__malloc_unlock>
 800fe60:	42a3      	cmp	r3, r4
 800fe62:	d908      	bls.n	800fe76 <_free_r+0x46>
 800fe64:	6825      	ldr	r5, [r4, #0]
 800fe66:	1961      	adds	r1, r4, r5
 800fe68:	428b      	cmp	r3, r1
 800fe6a:	bf01      	itttt	eq
 800fe6c:	6819      	ldreq	r1, [r3, #0]
 800fe6e:	685b      	ldreq	r3, [r3, #4]
 800fe70:	1949      	addeq	r1, r1, r5
 800fe72:	6021      	streq	r1, [r4, #0]
 800fe74:	e7ed      	b.n	800fe52 <_free_r+0x22>
 800fe76:	461a      	mov	r2, r3
 800fe78:	685b      	ldr	r3, [r3, #4]
 800fe7a:	b10b      	cbz	r3, 800fe80 <_free_r+0x50>
 800fe7c:	42a3      	cmp	r3, r4
 800fe7e:	d9fa      	bls.n	800fe76 <_free_r+0x46>
 800fe80:	6811      	ldr	r1, [r2, #0]
 800fe82:	1855      	adds	r5, r2, r1
 800fe84:	42a5      	cmp	r5, r4
 800fe86:	d10b      	bne.n	800fea0 <_free_r+0x70>
 800fe88:	6824      	ldr	r4, [r4, #0]
 800fe8a:	4421      	add	r1, r4
 800fe8c:	1854      	adds	r4, r2, r1
 800fe8e:	42a3      	cmp	r3, r4
 800fe90:	6011      	str	r1, [r2, #0]
 800fe92:	d1e0      	bne.n	800fe56 <_free_r+0x26>
 800fe94:	681c      	ldr	r4, [r3, #0]
 800fe96:	685b      	ldr	r3, [r3, #4]
 800fe98:	6053      	str	r3, [r2, #4]
 800fe9a:	4421      	add	r1, r4
 800fe9c:	6011      	str	r1, [r2, #0]
 800fe9e:	e7da      	b.n	800fe56 <_free_r+0x26>
 800fea0:	d902      	bls.n	800fea8 <_free_r+0x78>
 800fea2:	230c      	movs	r3, #12
 800fea4:	6003      	str	r3, [r0, #0]
 800fea6:	e7d6      	b.n	800fe56 <_free_r+0x26>
 800fea8:	6825      	ldr	r5, [r4, #0]
 800feaa:	1961      	adds	r1, r4, r5
 800feac:	428b      	cmp	r3, r1
 800feae:	bf04      	itt	eq
 800feb0:	6819      	ldreq	r1, [r3, #0]
 800feb2:	685b      	ldreq	r3, [r3, #4]
 800feb4:	6063      	str	r3, [r4, #4]
 800feb6:	bf04      	itt	eq
 800feb8:	1949      	addeq	r1, r1, r5
 800feba:	6021      	streq	r1, [r4, #0]
 800febc:	6054      	str	r4, [r2, #4]
 800febe:	e7ca      	b.n	800fe56 <_free_r+0x26>
 800fec0:	b003      	add	sp, #12
 800fec2:	bd30      	pop	{r4, r5, pc}
 800fec4:	20001104 	.word	0x20001104

0800fec8 <sbrk_aligned>:
 800fec8:	b570      	push	{r4, r5, r6, lr}
 800feca:	4e0e      	ldr	r6, [pc, #56]	; (800ff04 <sbrk_aligned+0x3c>)
 800fecc:	460c      	mov	r4, r1
 800fece:	6831      	ldr	r1, [r6, #0]
 800fed0:	4605      	mov	r5, r0
 800fed2:	b911      	cbnz	r1, 800feda <sbrk_aligned+0x12>
 800fed4:	f000 f9f0 	bl	80102b8 <_sbrk_r>
 800fed8:	6030      	str	r0, [r6, #0]
 800feda:	4621      	mov	r1, r4
 800fedc:	4628      	mov	r0, r5
 800fede:	f000 f9eb 	bl	80102b8 <_sbrk_r>
 800fee2:	1c43      	adds	r3, r0, #1
 800fee4:	d00a      	beq.n	800fefc <sbrk_aligned+0x34>
 800fee6:	1cc4      	adds	r4, r0, #3
 800fee8:	f024 0403 	bic.w	r4, r4, #3
 800feec:	42a0      	cmp	r0, r4
 800feee:	d007      	beq.n	800ff00 <sbrk_aligned+0x38>
 800fef0:	1a21      	subs	r1, r4, r0
 800fef2:	4628      	mov	r0, r5
 800fef4:	f000 f9e0 	bl	80102b8 <_sbrk_r>
 800fef8:	3001      	adds	r0, #1
 800fefa:	d101      	bne.n	800ff00 <sbrk_aligned+0x38>
 800fefc:	f04f 34ff 	mov.w	r4, #4294967295
 800ff00:	4620      	mov	r0, r4
 800ff02:	bd70      	pop	{r4, r5, r6, pc}
 800ff04:	20001108 	.word	0x20001108

0800ff08 <_malloc_r>:
 800ff08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff0c:	1ccd      	adds	r5, r1, #3
 800ff0e:	f025 0503 	bic.w	r5, r5, #3
 800ff12:	3508      	adds	r5, #8
 800ff14:	2d0c      	cmp	r5, #12
 800ff16:	bf38      	it	cc
 800ff18:	250c      	movcc	r5, #12
 800ff1a:	2d00      	cmp	r5, #0
 800ff1c:	4607      	mov	r7, r0
 800ff1e:	db01      	blt.n	800ff24 <_malloc_r+0x1c>
 800ff20:	42a9      	cmp	r1, r5
 800ff22:	d905      	bls.n	800ff30 <_malloc_r+0x28>
 800ff24:	230c      	movs	r3, #12
 800ff26:	603b      	str	r3, [r7, #0]
 800ff28:	2600      	movs	r6, #0
 800ff2a:	4630      	mov	r0, r6
 800ff2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff30:	4e2e      	ldr	r6, [pc, #184]	; (800ffec <_malloc_r+0xe4>)
 800ff32:	f000 fa3d 	bl	80103b0 <__malloc_lock>
 800ff36:	6833      	ldr	r3, [r6, #0]
 800ff38:	461c      	mov	r4, r3
 800ff3a:	bb34      	cbnz	r4, 800ff8a <_malloc_r+0x82>
 800ff3c:	4629      	mov	r1, r5
 800ff3e:	4638      	mov	r0, r7
 800ff40:	f7ff ffc2 	bl	800fec8 <sbrk_aligned>
 800ff44:	1c43      	adds	r3, r0, #1
 800ff46:	4604      	mov	r4, r0
 800ff48:	d14d      	bne.n	800ffe6 <_malloc_r+0xde>
 800ff4a:	6834      	ldr	r4, [r6, #0]
 800ff4c:	4626      	mov	r6, r4
 800ff4e:	2e00      	cmp	r6, #0
 800ff50:	d140      	bne.n	800ffd4 <_malloc_r+0xcc>
 800ff52:	6823      	ldr	r3, [r4, #0]
 800ff54:	4631      	mov	r1, r6
 800ff56:	4638      	mov	r0, r7
 800ff58:	eb04 0803 	add.w	r8, r4, r3
 800ff5c:	f000 f9ac 	bl	80102b8 <_sbrk_r>
 800ff60:	4580      	cmp	r8, r0
 800ff62:	d13a      	bne.n	800ffda <_malloc_r+0xd2>
 800ff64:	6821      	ldr	r1, [r4, #0]
 800ff66:	3503      	adds	r5, #3
 800ff68:	1a6d      	subs	r5, r5, r1
 800ff6a:	f025 0503 	bic.w	r5, r5, #3
 800ff6e:	3508      	adds	r5, #8
 800ff70:	2d0c      	cmp	r5, #12
 800ff72:	bf38      	it	cc
 800ff74:	250c      	movcc	r5, #12
 800ff76:	4629      	mov	r1, r5
 800ff78:	4638      	mov	r0, r7
 800ff7a:	f7ff ffa5 	bl	800fec8 <sbrk_aligned>
 800ff7e:	3001      	adds	r0, #1
 800ff80:	d02b      	beq.n	800ffda <_malloc_r+0xd2>
 800ff82:	6823      	ldr	r3, [r4, #0]
 800ff84:	442b      	add	r3, r5
 800ff86:	6023      	str	r3, [r4, #0]
 800ff88:	e00e      	b.n	800ffa8 <_malloc_r+0xa0>
 800ff8a:	6822      	ldr	r2, [r4, #0]
 800ff8c:	1b52      	subs	r2, r2, r5
 800ff8e:	d41e      	bmi.n	800ffce <_malloc_r+0xc6>
 800ff90:	2a0b      	cmp	r2, #11
 800ff92:	d916      	bls.n	800ffc2 <_malloc_r+0xba>
 800ff94:	1961      	adds	r1, r4, r5
 800ff96:	42a3      	cmp	r3, r4
 800ff98:	6025      	str	r5, [r4, #0]
 800ff9a:	bf18      	it	ne
 800ff9c:	6059      	strne	r1, [r3, #4]
 800ff9e:	6863      	ldr	r3, [r4, #4]
 800ffa0:	bf08      	it	eq
 800ffa2:	6031      	streq	r1, [r6, #0]
 800ffa4:	5162      	str	r2, [r4, r5]
 800ffa6:	604b      	str	r3, [r1, #4]
 800ffa8:	4638      	mov	r0, r7
 800ffaa:	f104 060b 	add.w	r6, r4, #11
 800ffae:	f000 fa05 	bl	80103bc <__malloc_unlock>
 800ffb2:	f026 0607 	bic.w	r6, r6, #7
 800ffb6:	1d23      	adds	r3, r4, #4
 800ffb8:	1af2      	subs	r2, r6, r3
 800ffba:	d0b6      	beq.n	800ff2a <_malloc_r+0x22>
 800ffbc:	1b9b      	subs	r3, r3, r6
 800ffbe:	50a3      	str	r3, [r4, r2]
 800ffc0:	e7b3      	b.n	800ff2a <_malloc_r+0x22>
 800ffc2:	6862      	ldr	r2, [r4, #4]
 800ffc4:	42a3      	cmp	r3, r4
 800ffc6:	bf0c      	ite	eq
 800ffc8:	6032      	streq	r2, [r6, #0]
 800ffca:	605a      	strne	r2, [r3, #4]
 800ffcc:	e7ec      	b.n	800ffa8 <_malloc_r+0xa0>
 800ffce:	4623      	mov	r3, r4
 800ffd0:	6864      	ldr	r4, [r4, #4]
 800ffd2:	e7b2      	b.n	800ff3a <_malloc_r+0x32>
 800ffd4:	4634      	mov	r4, r6
 800ffd6:	6876      	ldr	r6, [r6, #4]
 800ffd8:	e7b9      	b.n	800ff4e <_malloc_r+0x46>
 800ffda:	230c      	movs	r3, #12
 800ffdc:	603b      	str	r3, [r7, #0]
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f000 f9ec 	bl	80103bc <__malloc_unlock>
 800ffe4:	e7a1      	b.n	800ff2a <_malloc_r+0x22>
 800ffe6:	6025      	str	r5, [r4, #0]
 800ffe8:	e7de      	b.n	800ffa8 <_malloc_r+0xa0>
 800ffea:	bf00      	nop
 800ffec:	20001104 	.word	0x20001104

0800fff0 <__ssputs_r>:
 800fff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fff4:	688e      	ldr	r6, [r1, #8]
 800fff6:	429e      	cmp	r6, r3
 800fff8:	4682      	mov	sl, r0
 800fffa:	460c      	mov	r4, r1
 800fffc:	4690      	mov	r8, r2
 800fffe:	461f      	mov	r7, r3
 8010000:	d838      	bhi.n	8010074 <__ssputs_r+0x84>
 8010002:	898a      	ldrh	r2, [r1, #12]
 8010004:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010008:	d032      	beq.n	8010070 <__ssputs_r+0x80>
 801000a:	6825      	ldr	r5, [r4, #0]
 801000c:	6909      	ldr	r1, [r1, #16]
 801000e:	eba5 0901 	sub.w	r9, r5, r1
 8010012:	6965      	ldr	r5, [r4, #20]
 8010014:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010018:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801001c:	3301      	adds	r3, #1
 801001e:	444b      	add	r3, r9
 8010020:	106d      	asrs	r5, r5, #1
 8010022:	429d      	cmp	r5, r3
 8010024:	bf38      	it	cc
 8010026:	461d      	movcc	r5, r3
 8010028:	0553      	lsls	r3, r2, #21
 801002a:	d531      	bpl.n	8010090 <__ssputs_r+0xa0>
 801002c:	4629      	mov	r1, r5
 801002e:	f7ff ff6b 	bl	800ff08 <_malloc_r>
 8010032:	4606      	mov	r6, r0
 8010034:	b950      	cbnz	r0, 801004c <__ssputs_r+0x5c>
 8010036:	230c      	movs	r3, #12
 8010038:	f8ca 3000 	str.w	r3, [sl]
 801003c:	89a3      	ldrh	r3, [r4, #12]
 801003e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010042:	81a3      	strh	r3, [r4, #12]
 8010044:	f04f 30ff 	mov.w	r0, #4294967295
 8010048:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801004c:	6921      	ldr	r1, [r4, #16]
 801004e:	464a      	mov	r2, r9
 8010050:	f7fc faaa 	bl	800c5a8 <memcpy>
 8010054:	89a3      	ldrh	r3, [r4, #12]
 8010056:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801005a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801005e:	81a3      	strh	r3, [r4, #12]
 8010060:	6126      	str	r6, [r4, #16]
 8010062:	6165      	str	r5, [r4, #20]
 8010064:	444e      	add	r6, r9
 8010066:	eba5 0509 	sub.w	r5, r5, r9
 801006a:	6026      	str	r6, [r4, #0]
 801006c:	60a5      	str	r5, [r4, #8]
 801006e:	463e      	mov	r6, r7
 8010070:	42be      	cmp	r6, r7
 8010072:	d900      	bls.n	8010076 <__ssputs_r+0x86>
 8010074:	463e      	mov	r6, r7
 8010076:	6820      	ldr	r0, [r4, #0]
 8010078:	4632      	mov	r2, r6
 801007a:	4641      	mov	r1, r8
 801007c:	f000 f97e 	bl	801037c <memmove>
 8010080:	68a3      	ldr	r3, [r4, #8]
 8010082:	1b9b      	subs	r3, r3, r6
 8010084:	60a3      	str	r3, [r4, #8]
 8010086:	6823      	ldr	r3, [r4, #0]
 8010088:	4433      	add	r3, r6
 801008a:	6023      	str	r3, [r4, #0]
 801008c:	2000      	movs	r0, #0
 801008e:	e7db      	b.n	8010048 <__ssputs_r+0x58>
 8010090:	462a      	mov	r2, r5
 8010092:	f000 f999 	bl	80103c8 <_realloc_r>
 8010096:	4606      	mov	r6, r0
 8010098:	2800      	cmp	r0, #0
 801009a:	d1e1      	bne.n	8010060 <__ssputs_r+0x70>
 801009c:	6921      	ldr	r1, [r4, #16]
 801009e:	4650      	mov	r0, sl
 80100a0:	f7ff fec6 	bl	800fe30 <_free_r>
 80100a4:	e7c7      	b.n	8010036 <__ssputs_r+0x46>
	...

080100a8 <_svfiprintf_r>:
 80100a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100ac:	4698      	mov	r8, r3
 80100ae:	898b      	ldrh	r3, [r1, #12]
 80100b0:	061b      	lsls	r3, r3, #24
 80100b2:	b09d      	sub	sp, #116	; 0x74
 80100b4:	4607      	mov	r7, r0
 80100b6:	460d      	mov	r5, r1
 80100b8:	4614      	mov	r4, r2
 80100ba:	d50e      	bpl.n	80100da <_svfiprintf_r+0x32>
 80100bc:	690b      	ldr	r3, [r1, #16]
 80100be:	b963      	cbnz	r3, 80100da <_svfiprintf_r+0x32>
 80100c0:	2140      	movs	r1, #64	; 0x40
 80100c2:	f7ff ff21 	bl	800ff08 <_malloc_r>
 80100c6:	6028      	str	r0, [r5, #0]
 80100c8:	6128      	str	r0, [r5, #16]
 80100ca:	b920      	cbnz	r0, 80100d6 <_svfiprintf_r+0x2e>
 80100cc:	230c      	movs	r3, #12
 80100ce:	603b      	str	r3, [r7, #0]
 80100d0:	f04f 30ff 	mov.w	r0, #4294967295
 80100d4:	e0d1      	b.n	801027a <_svfiprintf_r+0x1d2>
 80100d6:	2340      	movs	r3, #64	; 0x40
 80100d8:	616b      	str	r3, [r5, #20]
 80100da:	2300      	movs	r3, #0
 80100dc:	9309      	str	r3, [sp, #36]	; 0x24
 80100de:	2320      	movs	r3, #32
 80100e0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80100e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80100e8:	2330      	movs	r3, #48	; 0x30
 80100ea:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010294 <_svfiprintf_r+0x1ec>
 80100ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80100f2:	f04f 0901 	mov.w	r9, #1
 80100f6:	4623      	mov	r3, r4
 80100f8:	469a      	mov	sl, r3
 80100fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80100fe:	b10a      	cbz	r2, 8010104 <_svfiprintf_r+0x5c>
 8010100:	2a25      	cmp	r2, #37	; 0x25
 8010102:	d1f9      	bne.n	80100f8 <_svfiprintf_r+0x50>
 8010104:	ebba 0b04 	subs.w	fp, sl, r4
 8010108:	d00b      	beq.n	8010122 <_svfiprintf_r+0x7a>
 801010a:	465b      	mov	r3, fp
 801010c:	4622      	mov	r2, r4
 801010e:	4629      	mov	r1, r5
 8010110:	4638      	mov	r0, r7
 8010112:	f7ff ff6d 	bl	800fff0 <__ssputs_r>
 8010116:	3001      	adds	r0, #1
 8010118:	f000 80aa 	beq.w	8010270 <_svfiprintf_r+0x1c8>
 801011c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801011e:	445a      	add	r2, fp
 8010120:	9209      	str	r2, [sp, #36]	; 0x24
 8010122:	f89a 3000 	ldrb.w	r3, [sl]
 8010126:	2b00      	cmp	r3, #0
 8010128:	f000 80a2 	beq.w	8010270 <_svfiprintf_r+0x1c8>
 801012c:	2300      	movs	r3, #0
 801012e:	f04f 32ff 	mov.w	r2, #4294967295
 8010132:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010136:	f10a 0a01 	add.w	sl, sl, #1
 801013a:	9304      	str	r3, [sp, #16]
 801013c:	9307      	str	r3, [sp, #28]
 801013e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010142:	931a      	str	r3, [sp, #104]	; 0x68
 8010144:	4654      	mov	r4, sl
 8010146:	2205      	movs	r2, #5
 8010148:	f814 1b01 	ldrb.w	r1, [r4], #1
 801014c:	4851      	ldr	r0, [pc, #324]	; (8010294 <_svfiprintf_r+0x1ec>)
 801014e:	f7f0 f84f 	bl	80001f0 <memchr>
 8010152:	9a04      	ldr	r2, [sp, #16]
 8010154:	b9d8      	cbnz	r0, 801018e <_svfiprintf_r+0xe6>
 8010156:	06d0      	lsls	r0, r2, #27
 8010158:	bf44      	itt	mi
 801015a:	2320      	movmi	r3, #32
 801015c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010160:	0711      	lsls	r1, r2, #28
 8010162:	bf44      	itt	mi
 8010164:	232b      	movmi	r3, #43	; 0x2b
 8010166:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801016a:	f89a 3000 	ldrb.w	r3, [sl]
 801016e:	2b2a      	cmp	r3, #42	; 0x2a
 8010170:	d015      	beq.n	801019e <_svfiprintf_r+0xf6>
 8010172:	9a07      	ldr	r2, [sp, #28]
 8010174:	4654      	mov	r4, sl
 8010176:	2000      	movs	r0, #0
 8010178:	f04f 0c0a 	mov.w	ip, #10
 801017c:	4621      	mov	r1, r4
 801017e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010182:	3b30      	subs	r3, #48	; 0x30
 8010184:	2b09      	cmp	r3, #9
 8010186:	d94e      	bls.n	8010226 <_svfiprintf_r+0x17e>
 8010188:	b1b0      	cbz	r0, 80101b8 <_svfiprintf_r+0x110>
 801018a:	9207      	str	r2, [sp, #28]
 801018c:	e014      	b.n	80101b8 <_svfiprintf_r+0x110>
 801018e:	eba0 0308 	sub.w	r3, r0, r8
 8010192:	fa09 f303 	lsl.w	r3, r9, r3
 8010196:	4313      	orrs	r3, r2
 8010198:	9304      	str	r3, [sp, #16]
 801019a:	46a2      	mov	sl, r4
 801019c:	e7d2      	b.n	8010144 <_svfiprintf_r+0x9c>
 801019e:	9b03      	ldr	r3, [sp, #12]
 80101a0:	1d19      	adds	r1, r3, #4
 80101a2:	681b      	ldr	r3, [r3, #0]
 80101a4:	9103      	str	r1, [sp, #12]
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	bfbb      	ittet	lt
 80101aa:	425b      	neglt	r3, r3
 80101ac:	f042 0202 	orrlt.w	r2, r2, #2
 80101b0:	9307      	strge	r3, [sp, #28]
 80101b2:	9307      	strlt	r3, [sp, #28]
 80101b4:	bfb8      	it	lt
 80101b6:	9204      	strlt	r2, [sp, #16]
 80101b8:	7823      	ldrb	r3, [r4, #0]
 80101ba:	2b2e      	cmp	r3, #46	; 0x2e
 80101bc:	d10c      	bne.n	80101d8 <_svfiprintf_r+0x130>
 80101be:	7863      	ldrb	r3, [r4, #1]
 80101c0:	2b2a      	cmp	r3, #42	; 0x2a
 80101c2:	d135      	bne.n	8010230 <_svfiprintf_r+0x188>
 80101c4:	9b03      	ldr	r3, [sp, #12]
 80101c6:	1d1a      	adds	r2, r3, #4
 80101c8:	681b      	ldr	r3, [r3, #0]
 80101ca:	9203      	str	r2, [sp, #12]
 80101cc:	2b00      	cmp	r3, #0
 80101ce:	bfb8      	it	lt
 80101d0:	f04f 33ff 	movlt.w	r3, #4294967295
 80101d4:	3402      	adds	r4, #2
 80101d6:	9305      	str	r3, [sp, #20]
 80101d8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102a4 <_svfiprintf_r+0x1fc>
 80101dc:	7821      	ldrb	r1, [r4, #0]
 80101de:	2203      	movs	r2, #3
 80101e0:	4650      	mov	r0, sl
 80101e2:	f7f0 f805 	bl	80001f0 <memchr>
 80101e6:	b140      	cbz	r0, 80101fa <_svfiprintf_r+0x152>
 80101e8:	2340      	movs	r3, #64	; 0x40
 80101ea:	eba0 000a 	sub.w	r0, r0, sl
 80101ee:	fa03 f000 	lsl.w	r0, r3, r0
 80101f2:	9b04      	ldr	r3, [sp, #16]
 80101f4:	4303      	orrs	r3, r0
 80101f6:	3401      	adds	r4, #1
 80101f8:	9304      	str	r3, [sp, #16]
 80101fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101fe:	4826      	ldr	r0, [pc, #152]	; (8010298 <_svfiprintf_r+0x1f0>)
 8010200:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010204:	2206      	movs	r2, #6
 8010206:	f7ef fff3 	bl	80001f0 <memchr>
 801020a:	2800      	cmp	r0, #0
 801020c:	d038      	beq.n	8010280 <_svfiprintf_r+0x1d8>
 801020e:	4b23      	ldr	r3, [pc, #140]	; (801029c <_svfiprintf_r+0x1f4>)
 8010210:	bb1b      	cbnz	r3, 801025a <_svfiprintf_r+0x1b2>
 8010212:	9b03      	ldr	r3, [sp, #12]
 8010214:	3307      	adds	r3, #7
 8010216:	f023 0307 	bic.w	r3, r3, #7
 801021a:	3308      	adds	r3, #8
 801021c:	9303      	str	r3, [sp, #12]
 801021e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010220:	4433      	add	r3, r6
 8010222:	9309      	str	r3, [sp, #36]	; 0x24
 8010224:	e767      	b.n	80100f6 <_svfiprintf_r+0x4e>
 8010226:	fb0c 3202 	mla	r2, ip, r2, r3
 801022a:	460c      	mov	r4, r1
 801022c:	2001      	movs	r0, #1
 801022e:	e7a5      	b.n	801017c <_svfiprintf_r+0xd4>
 8010230:	2300      	movs	r3, #0
 8010232:	3401      	adds	r4, #1
 8010234:	9305      	str	r3, [sp, #20]
 8010236:	4619      	mov	r1, r3
 8010238:	f04f 0c0a 	mov.w	ip, #10
 801023c:	4620      	mov	r0, r4
 801023e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010242:	3a30      	subs	r2, #48	; 0x30
 8010244:	2a09      	cmp	r2, #9
 8010246:	d903      	bls.n	8010250 <_svfiprintf_r+0x1a8>
 8010248:	2b00      	cmp	r3, #0
 801024a:	d0c5      	beq.n	80101d8 <_svfiprintf_r+0x130>
 801024c:	9105      	str	r1, [sp, #20]
 801024e:	e7c3      	b.n	80101d8 <_svfiprintf_r+0x130>
 8010250:	fb0c 2101 	mla	r1, ip, r1, r2
 8010254:	4604      	mov	r4, r0
 8010256:	2301      	movs	r3, #1
 8010258:	e7f0      	b.n	801023c <_svfiprintf_r+0x194>
 801025a:	ab03      	add	r3, sp, #12
 801025c:	9300      	str	r3, [sp, #0]
 801025e:	462a      	mov	r2, r5
 8010260:	4b0f      	ldr	r3, [pc, #60]	; (80102a0 <_svfiprintf_r+0x1f8>)
 8010262:	a904      	add	r1, sp, #16
 8010264:	4638      	mov	r0, r7
 8010266:	f7fc fa55 	bl	800c714 <_printf_float>
 801026a:	1c42      	adds	r2, r0, #1
 801026c:	4606      	mov	r6, r0
 801026e:	d1d6      	bne.n	801021e <_svfiprintf_r+0x176>
 8010270:	89ab      	ldrh	r3, [r5, #12]
 8010272:	065b      	lsls	r3, r3, #25
 8010274:	f53f af2c 	bmi.w	80100d0 <_svfiprintf_r+0x28>
 8010278:	9809      	ldr	r0, [sp, #36]	; 0x24
 801027a:	b01d      	add	sp, #116	; 0x74
 801027c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010280:	ab03      	add	r3, sp, #12
 8010282:	9300      	str	r3, [sp, #0]
 8010284:	462a      	mov	r2, r5
 8010286:	4b06      	ldr	r3, [pc, #24]	; (80102a0 <_svfiprintf_r+0x1f8>)
 8010288:	a904      	add	r1, sp, #16
 801028a:	4638      	mov	r0, r7
 801028c:	f7fc fce6 	bl	800cc5c <_printf_i>
 8010290:	e7eb      	b.n	801026a <_svfiprintf_r+0x1c2>
 8010292:	bf00      	nop
 8010294:	0801293c 	.word	0x0801293c
 8010298:	08012946 	.word	0x08012946
 801029c:	0800c715 	.word	0x0800c715
 80102a0:	0800fff1 	.word	0x0800fff1
 80102a4:	08012942 	.word	0x08012942

080102a8 <nan>:
 80102a8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80102b0 <nan+0x8>
 80102ac:	4770      	bx	lr
 80102ae:	bf00      	nop
 80102b0:	00000000 	.word	0x00000000
 80102b4:	7ff80000 	.word	0x7ff80000

080102b8 <_sbrk_r>:
 80102b8:	b538      	push	{r3, r4, r5, lr}
 80102ba:	4d06      	ldr	r5, [pc, #24]	; (80102d4 <_sbrk_r+0x1c>)
 80102bc:	2300      	movs	r3, #0
 80102be:	4604      	mov	r4, r0
 80102c0:	4608      	mov	r0, r1
 80102c2:	602b      	str	r3, [r5, #0]
 80102c4:	f7f4 fe76 	bl	8004fb4 <_sbrk>
 80102c8:	1c43      	adds	r3, r0, #1
 80102ca:	d102      	bne.n	80102d2 <_sbrk_r+0x1a>
 80102cc:	682b      	ldr	r3, [r5, #0]
 80102ce:	b103      	cbz	r3, 80102d2 <_sbrk_r+0x1a>
 80102d0:	6023      	str	r3, [r4, #0]
 80102d2:	bd38      	pop	{r3, r4, r5, pc}
 80102d4:	2000110c 	.word	0x2000110c

080102d8 <strncmp>:
 80102d8:	b510      	push	{r4, lr}
 80102da:	b17a      	cbz	r2, 80102fc <strncmp+0x24>
 80102dc:	4603      	mov	r3, r0
 80102de:	3901      	subs	r1, #1
 80102e0:	1884      	adds	r4, r0, r2
 80102e2:	f813 0b01 	ldrb.w	r0, [r3], #1
 80102e6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80102ea:	4290      	cmp	r0, r2
 80102ec:	d101      	bne.n	80102f2 <strncmp+0x1a>
 80102ee:	42a3      	cmp	r3, r4
 80102f0:	d101      	bne.n	80102f6 <strncmp+0x1e>
 80102f2:	1a80      	subs	r0, r0, r2
 80102f4:	bd10      	pop	{r4, pc}
 80102f6:	2800      	cmp	r0, #0
 80102f8:	d1f3      	bne.n	80102e2 <strncmp+0xa>
 80102fa:	e7fa      	b.n	80102f2 <strncmp+0x1a>
 80102fc:	4610      	mov	r0, r2
 80102fe:	e7f9      	b.n	80102f4 <strncmp+0x1c>

08010300 <__ascii_wctomb>:
 8010300:	b149      	cbz	r1, 8010316 <__ascii_wctomb+0x16>
 8010302:	2aff      	cmp	r2, #255	; 0xff
 8010304:	bf85      	ittet	hi
 8010306:	238a      	movhi	r3, #138	; 0x8a
 8010308:	6003      	strhi	r3, [r0, #0]
 801030a:	700a      	strbls	r2, [r1, #0]
 801030c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010310:	bf98      	it	ls
 8010312:	2001      	movls	r0, #1
 8010314:	4770      	bx	lr
 8010316:	4608      	mov	r0, r1
 8010318:	4770      	bx	lr
	...

0801031c <__assert_func>:
 801031c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801031e:	4614      	mov	r4, r2
 8010320:	461a      	mov	r2, r3
 8010322:	4b09      	ldr	r3, [pc, #36]	; (8010348 <__assert_func+0x2c>)
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	4605      	mov	r5, r0
 8010328:	68d8      	ldr	r0, [r3, #12]
 801032a:	b14c      	cbz	r4, 8010340 <__assert_func+0x24>
 801032c:	4b07      	ldr	r3, [pc, #28]	; (801034c <__assert_func+0x30>)
 801032e:	9100      	str	r1, [sp, #0]
 8010330:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010334:	4906      	ldr	r1, [pc, #24]	; (8010350 <__assert_func+0x34>)
 8010336:	462b      	mov	r3, r5
 8010338:	f000 f80e 	bl	8010358 <fiprintf>
 801033c:	f000 fa8c 	bl	8010858 <abort>
 8010340:	4b04      	ldr	r3, [pc, #16]	; (8010354 <__assert_func+0x38>)
 8010342:	461c      	mov	r4, r3
 8010344:	e7f3      	b.n	801032e <__assert_func+0x12>
 8010346:	bf00      	nop
 8010348:	2000025c 	.word	0x2000025c
 801034c:	0801294d 	.word	0x0801294d
 8010350:	0801295a 	.word	0x0801295a
 8010354:	08012988 	.word	0x08012988

08010358 <fiprintf>:
 8010358:	b40e      	push	{r1, r2, r3}
 801035a:	b503      	push	{r0, r1, lr}
 801035c:	4601      	mov	r1, r0
 801035e:	ab03      	add	r3, sp, #12
 8010360:	4805      	ldr	r0, [pc, #20]	; (8010378 <fiprintf+0x20>)
 8010362:	f853 2b04 	ldr.w	r2, [r3], #4
 8010366:	6800      	ldr	r0, [r0, #0]
 8010368:	9301      	str	r3, [sp, #4]
 801036a:	f000 f885 	bl	8010478 <_vfiprintf_r>
 801036e:	b002      	add	sp, #8
 8010370:	f85d eb04 	ldr.w	lr, [sp], #4
 8010374:	b003      	add	sp, #12
 8010376:	4770      	bx	lr
 8010378:	2000025c 	.word	0x2000025c

0801037c <memmove>:
 801037c:	4288      	cmp	r0, r1
 801037e:	b510      	push	{r4, lr}
 8010380:	eb01 0402 	add.w	r4, r1, r2
 8010384:	d902      	bls.n	801038c <memmove+0x10>
 8010386:	4284      	cmp	r4, r0
 8010388:	4623      	mov	r3, r4
 801038a:	d807      	bhi.n	801039c <memmove+0x20>
 801038c:	1e43      	subs	r3, r0, #1
 801038e:	42a1      	cmp	r1, r4
 8010390:	d008      	beq.n	80103a4 <memmove+0x28>
 8010392:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010396:	f803 2f01 	strb.w	r2, [r3, #1]!
 801039a:	e7f8      	b.n	801038e <memmove+0x12>
 801039c:	4402      	add	r2, r0
 801039e:	4601      	mov	r1, r0
 80103a0:	428a      	cmp	r2, r1
 80103a2:	d100      	bne.n	80103a6 <memmove+0x2a>
 80103a4:	bd10      	pop	{r4, pc}
 80103a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103ae:	e7f7      	b.n	80103a0 <memmove+0x24>

080103b0 <__malloc_lock>:
 80103b0:	4801      	ldr	r0, [pc, #4]	; (80103b8 <__malloc_lock+0x8>)
 80103b2:	f000 bc11 	b.w	8010bd8 <__retarget_lock_acquire_recursive>
 80103b6:	bf00      	nop
 80103b8:	20001110 	.word	0x20001110

080103bc <__malloc_unlock>:
 80103bc:	4801      	ldr	r0, [pc, #4]	; (80103c4 <__malloc_unlock+0x8>)
 80103be:	f000 bc0c 	b.w	8010bda <__retarget_lock_release_recursive>
 80103c2:	bf00      	nop
 80103c4:	20001110 	.word	0x20001110

080103c8 <_realloc_r>:
 80103c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103cc:	4680      	mov	r8, r0
 80103ce:	4614      	mov	r4, r2
 80103d0:	460e      	mov	r6, r1
 80103d2:	b921      	cbnz	r1, 80103de <_realloc_r+0x16>
 80103d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103d8:	4611      	mov	r1, r2
 80103da:	f7ff bd95 	b.w	800ff08 <_malloc_r>
 80103de:	b92a      	cbnz	r2, 80103ec <_realloc_r+0x24>
 80103e0:	f7ff fd26 	bl	800fe30 <_free_r>
 80103e4:	4625      	mov	r5, r4
 80103e6:	4628      	mov	r0, r5
 80103e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103ec:	f000 fc5c 	bl	8010ca8 <_malloc_usable_size_r>
 80103f0:	4284      	cmp	r4, r0
 80103f2:	4607      	mov	r7, r0
 80103f4:	d802      	bhi.n	80103fc <_realloc_r+0x34>
 80103f6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80103fa:	d812      	bhi.n	8010422 <_realloc_r+0x5a>
 80103fc:	4621      	mov	r1, r4
 80103fe:	4640      	mov	r0, r8
 8010400:	f7ff fd82 	bl	800ff08 <_malloc_r>
 8010404:	4605      	mov	r5, r0
 8010406:	2800      	cmp	r0, #0
 8010408:	d0ed      	beq.n	80103e6 <_realloc_r+0x1e>
 801040a:	42bc      	cmp	r4, r7
 801040c:	4622      	mov	r2, r4
 801040e:	4631      	mov	r1, r6
 8010410:	bf28      	it	cs
 8010412:	463a      	movcs	r2, r7
 8010414:	f7fc f8c8 	bl	800c5a8 <memcpy>
 8010418:	4631      	mov	r1, r6
 801041a:	4640      	mov	r0, r8
 801041c:	f7ff fd08 	bl	800fe30 <_free_r>
 8010420:	e7e1      	b.n	80103e6 <_realloc_r+0x1e>
 8010422:	4635      	mov	r5, r6
 8010424:	e7df      	b.n	80103e6 <_realloc_r+0x1e>

08010426 <__sfputc_r>:
 8010426:	6893      	ldr	r3, [r2, #8]
 8010428:	3b01      	subs	r3, #1
 801042a:	2b00      	cmp	r3, #0
 801042c:	b410      	push	{r4}
 801042e:	6093      	str	r3, [r2, #8]
 8010430:	da08      	bge.n	8010444 <__sfputc_r+0x1e>
 8010432:	6994      	ldr	r4, [r2, #24]
 8010434:	42a3      	cmp	r3, r4
 8010436:	db01      	blt.n	801043c <__sfputc_r+0x16>
 8010438:	290a      	cmp	r1, #10
 801043a:	d103      	bne.n	8010444 <__sfputc_r+0x1e>
 801043c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010440:	f000 b94a 	b.w	80106d8 <__swbuf_r>
 8010444:	6813      	ldr	r3, [r2, #0]
 8010446:	1c58      	adds	r0, r3, #1
 8010448:	6010      	str	r0, [r2, #0]
 801044a:	7019      	strb	r1, [r3, #0]
 801044c:	4608      	mov	r0, r1
 801044e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010452:	4770      	bx	lr

08010454 <__sfputs_r>:
 8010454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010456:	4606      	mov	r6, r0
 8010458:	460f      	mov	r7, r1
 801045a:	4614      	mov	r4, r2
 801045c:	18d5      	adds	r5, r2, r3
 801045e:	42ac      	cmp	r4, r5
 8010460:	d101      	bne.n	8010466 <__sfputs_r+0x12>
 8010462:	2000      	movs	r0, #0
 8010464:	e007      	b.n	8010476 <__sfputs_r+0x22>
 8010466:	f814 1b01 	ldrb.w	r1, [r4], #1
 801046a:	463a      	mov	r2, r7
 801046c:	4630      	mov	r0, r6
 801046e:	f7ff ffda 	bl	8010426 <__sfputc_r>
 8010472:	1c43      	adds	r3, r0, #1
 8010474:	d1f3      	bne.n	801045e <__sfputs_r+0xa>
 8010476:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010478 <_vfiprintf_r>:
 8010478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801047c:	460d      	mov	r5, r1
 801047e:	b09d      	sub	sp, #116	; 0x74
 8010480:	4614      	mov	r4, r2
 8010482:	4698      	mov	r8, r3
 8010484:	4606      	mov	r6, r0
 8010486:	b118      	cbz	r0, 8010490 <_vfiprintf_r+0x18>
 8010488:	6983      	ldr	r3, [r0, #24]
 801048a:	b90b      	cbnz	r3, 8010490 <_vfiprintf_r+0x18>
 801048c:	f000 fb06 	bl	8010a9c <__sinit>
 8010490:	4b89      	ldr	r3, [pc, #548]	; (80106b8 <_vfiprintf_r+0x240>)
 8010492:	429d      	cmp	r5, r3
 8010494:	d11b      	bne.n	80104ce <_vfiprintf_r+0x56>
 8010496:	6875      	ldr	r5, [r6, #4]
 8010498:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801049a:	07d9      	lsls	r1, r3, #31
 801049c:	d405      	bmi.n	80104aa <_vfiprintf_r+0x32>
 801049e:	89ab      	ldrh	r3, [r5, #12]
 80104a0:	059a      	lsls	r2, r3, #22
 80104a2:	d402      	bmi.n	80104aa <_vfiprintf_r+0x32>
 80104a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104a6:	f000 fb97 	bl	8010bd8 <__retarget_lock_acquire_recursive>
 80104aa:	89ab      	ldrh	r3, [r5, #12]
 80104ac:	071b      	lsls	r3, r3, #28
 80104ae:	d501      	bpl.n	80104b4 <_vfiprintf_r+0x3c>
 80104b0:	692b      	ldr	r3, [r5, #16]
 80104b2:	b9eb      	cbnz	r3, 80104f0 <_vfiprintf_r+0x78>
 80104b4:	4629      	mov	r1, r5
 80104b6:	4630      	mov	r0, r6
 80104b8:	f000 f960 	bl	801077c <__swsetup_r>
 80104bc:	b1c0      	cbz	r0, 80104f0 <_vfiprintf_r+0x78>
 80104be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104c0:	07dc      	lsls	r4, r3, #31
 80104c2:	d50e      	bpl.n	80104e2 <_vfiprintf_r+0x6a>
 80104c4:	f04f 30ff 	mov.w	r0, #4294967295
 80104c8:	b01d      	add	sp, #116	; 0x74
 80104ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ce:	4b7b      	ldr	r3, [pc, #492]	; (80106bc <_vfiprintf_r+0x244>)
 80104d0:	429d      	cmp	r5, r3
 80104d2:	d101      	bne.n	80104d8 <_vfiprintf_r+0x60>
 80104d4:	68b5      	ldr	r5, [r6, #8]
 80104d6:	e7df      	b.n	8010498 <_vfiprintf_r+0x20>
 80104d8:	4b79      	ldr	r3, [pc, #484]	; (80106c0 <_vfiprintf_r+0x248>)
 80104da:	429d      	cmp	r5, r3
 80104dc:	bf08      	it	eq
 80104de:	68f5      	ldreq	r5, [r6, #12]
 80104e0:	e7da      	b.n	8010498 <_vfiprintf_r+0x20>
 80104e2:	89ab      	ldrh	r3, [r5, #12]
 80104e4:	0598      	lsls	r0, r3, #22
 80104e6:	d4ed      	bmi.n	80104c4 <_vfiprintf_r+0x4c>
 80104e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104ea:	f000 fb76 	bl	8010bda <__retarget_lock_release_recursive>
 80104ee:	e7e9      	b.n	80104c4 <_vfiprintf_r+0x4c>
 80104f0:	2300      	movs	r3, #0
 80104f2:	9309      	str	r3, [sp, #36]	; 0x24
 80104f4:	2320      	movs	r3, #32
 80104f6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80104fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80104fe:	2330      	movs	r3, #48	; 0x30
 8010500:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106c4 <_vfiprintf_r+0x24c>
 8010504:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010508:	f04f 0901 	mov.w	r9, #1
 801050c:	4623      	mov	r3, r4
 801050e:	469a      	mov	sl, r3
 8010510:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010514:	b10a      	cbz	r2, 801051a <_vfiprintf_r+0xa2>
 8010516:	2a25      	cmp	r2, #37	; 0x25
 8010518:	d1f9      	bne.n	801050e <_vfiprintf_r+0x96>
 801051a:	ebba 0b04 	subs.w	fp, sl, r4
 801051e:	d00b      	beq.n	8010538 <_vfiprintf_r+0xc0>
 8010520:	465b      	mov	r3, fp
 8010522:	4622      	mov	r2, r4
 8010524:	4629      	mov	r1, r5
 8010526:	4630      	mov	r0, r6
 8010528:	f7ff ff94 	bl	8010454 <__sfputs_r>
 801052c:	3001      	adds	r0, #1
 801052e:	f000 80aa 	beq.w	8010686 <_vfiprintf_r+0x20e>
 8010532:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010534:	445a      	add	r2, fp
 8010536:	9209      	str	r2, [sp, #36]	; 0x24
 8010538:	f89a 3000 	ldrb.w	r3, [sl]
 801053c:	2b00      	cmp	r3, #0
 801053e:	f000 80a2 	beq.w	8010686 <_vfiprintf_r+0x20e>
 8010542:	2300      	movs	r3, #0
 8010544:	f04f 32ff 	mov.w	r2, #4294967295
 8010548:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801054c:	f10a 0a01 	add.w	sl, sl, #1
 8010550:	9304      	str	r3, [sp, #16]
 8010552:	9307      	str	r3, [sp, #28]
 8010554:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010558:	931a      	str	r3, [sp, #104]	; 0x68
 801055a:	4654      	mov	r4, sl
 801055c:	2205      	movs	r2, #5
 801055e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010562:	4858      	ldr	r0, [pc, #352]	; (80106c4 <_vfiprintf_r+0x24c>)
 8010564:	f7ef fe44 	bl	80001f0 <memchr>
 8010568:	9a04      	ldr	r2, [sp, #16]
 801056a:	b9d8      	cbnz	r0, 80105a4 <_vfiprintf_r+0x12c>
 801056c:	06d1      	lsls	r1, r2, #27
 801056e:	bf44      	itt	mi
 8010570:	2320      	movmi	r3, #32
 8010572:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010576:	0713      	lsls	r3, r2, #28
 8010578:	bf44      	itt	mi
 801057a:	232b      	movmi	r3, #43	; 0x2b
 801057c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010580:	f89a 3000 	ldrb.w	r3, [sl]
 8010584:	2b2a      	cmp	r3, #42	; 0x2a
 8010586:	d015      	beq.n	80105b4 <_vfiprintf_r+0x13c>
 8010588:	9a07      	ldr	r2, [sp, #28]
 801058a:	4654      	mov	r4, sl
 801058c:	2000      	movs	r0, #0
 801058e:	f04f 0c0a 	mov.w	ip, #10
 8010592:	4621      	mov	r1, r4
 8010594:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010598:	3b30      	subs	r3, #48	; 0x30
 801059a:	2b09      	cmp	r3, #9
 801059c:	d94e      	bls.n	801063c <_vfiprintf_r+0x1c4>
 801059e:	b1b0      	cbz	r0, 80105ce <_vfiprintf_r+0x156>
 80105a0:	9207      	str	r2, [sp, #28]
 80105a2:	e014      	b.n	80105ce <_vfiprintf_r+0x156>
 80105a4:	eba0 0308 	sub.w	r3, r0, r8
 80105a8:	fa09 f303 	lsl.w	r3, r9, r3
 80105ac:	4313      	orrs	r3, r2
 80105ae:	9304      	str	r3, [sp, #16]
 80105b0:	46a2      	mov	sl, r4
 80105b2:	e7d2      	b.n	801055a <_vfiprintf_r+0xe2>
 80105b4:	9b03      	ldr	r3, [sp, #12]
 80105b6:	1d19      	adds	r1, r3, #4
 80105b8:	681b      	ldr	r3, [r3, #0]
 80105ba:	9103      	str	r1, [sp, #12]
 80105bc:	2b00      	cmp	r3, #0
 80105be:	bfbb      	ittet	lt
 80105c0:	425b      	neglt	r3, r3
 80105c2:	f042 0202 	orrlt.w	r2, r2, #2
 80105c6:	9307      	strge	r3, [sp, #28]
 80105c8:	9307      	strlt	r3, [sp, #28]
 80105ca:	bfb8      	it	lt
 80105cc:	9204      	strlt	r2, [sp, #16]
 80105ce:	7823      	ldrb	r3, [r4, #0]
 80105d0:	2b2e      	cmp	r3, #46	; 0x2e
 80105d2:	d10c      	bne.n	80105ee <_vfiprintf_r+0x176>
 80105d4:	7863      	ldrb	r3, [r4, #1]
 80105d6:	2b2a      	cmp	r3, #42	; 0x2a
 80105d8:	d135      	bne.n	8010646 <_vfiprintf_r+0x1ce>
 80105da:	9b03      	ldr	r3, [sp, #12]
 80105dc:	1d1a      	adds	r2, r3, #4
 80105de:	681b      	ldr	r3, [r3, #0]
 80105e0:	9203      	str	r2, [sp, #12]
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	bfb8      	it	lt
 80105e6:	f04f 33ff 	movlt.w	r3, #4294967295
 80105ea:	3402      	adds	r4, #2
 80105ec:	9305      	str	r3, [sp, #20]
 80105ee:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106d4 <_vfiprintf_r+0x25c>
 80105f2:	7821      	ldrb	r1, [r4, #0]
 80105f4:	2203      	movs	r2, #3
 80105f6:	4650      	mov	r0, sl
 80105f8:	f7ef fdfa 	bl	80001f0 <memchr>
 80105fc:	b140      	cbz	r0, 8010610 <_vfiprintf_r+0x198>
 80105fe:	2340      	movs	r3, #64	; 0x40
 8010600:	eba0 000a 	sub.w	r0, r0, sl
 8010604:	fa03 f000 	lsl.w	r0, r3, r0
 8010608:	9b04      	ldr	r3, [sp, #16]
 801060a:	4303      	orrs	r3, r0
 801060c:	3401      	adds	r4, #1
 801060e:	9304      	str	r3, [sp, #16]
 8010610:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010614:	482c      	ldr	r0, [pc, #176]	; (80106c8 <_vfiprintf_r+0x250>)
 8010616:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801061a:	2206      	movs	r2, #6
 801061c:	f7ef fde8 	bl	80001f0 <memchr>
 8010620:	2800      	cmp	r0, #0
 8010622:	d03f      	beq.n	80106a4 <_vfiprintf_r+0x22c>
 8010624:	4b29      	ldr	r3, [pc, #164]	; (80106cc <_vfiprintf_r+0x254>)
 8010626:	bb1b      	cbnz	r3, 8010670 <_vfiprintf_r+0x1f8>
 8010628:	9b03      	ldr	r3, [sp, #12]
 801062a:	3307      	adds	r3, #7
 801062c:	f023 0307 	bic.w	r3, r3, #7
 8010630:	3308      	adds	r3, #8
 8010632:	9303      	str	r3, [sp, #12]
 8010634:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010636:	443b      	add	r3, r7
 8010638:	9309      	str	r3, [sp, #36]	; 0x24
 801063a:	e767      	b.n	801050c <_vfiprintf_r+0x94>
 801063c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010640:	460c      	mov	r4, r1
 8010642:	2001      	movs	r0, #1
 8010644:	e7a5      	b.n	8010592 <_vfiprintf_r+0x11a>
 8010646:	2300      	movs	r3, #0
 8010648:	3401      	adds	r4, #1
 801064a:	9305      	str	r3, [sp, #20]
 801064c:	4619      	mov	r1, r3
 801064e:	f04f 0c0a 	mov.w	ip, #10
 8010652:	4620      	mov	r0, r4
 8010654:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010658:	3a30      	subs	r2, #48	; 0x30
 801065a:	2a09      	cmp	r2, #9
 801065c:	d903      	bls.n	8010666 <_vfiprintf_r+0x1ee>
 801065e:	2b00      	cmp	r3, #0
 8010660:	d0c5      	beq.n	80105ee <_vfiprintf_r+0x176>
 8010662:	9105      	str	r1, [sp, #20]
 8010664:	e7c3      	b.n	80105ee <_vfiprintf_r+0x176>
 8010666:	fb0c 2101 	mla	r1, ip, r1, r2
 801066a:	4604      	mov	r4, r0
 801066c:	2301      	movs	r3, #1
 801066e:	e7f0      	b.n	8010652 <_vfiprintf_r+0x1da>
 8010670:	ab03      	add	r3, sp, #12
 8010672:	9300      	str	r3, [sp, #0]
 8010674:	462a      	mov	r2, r5
 8010676:	4b16      	ldr	r3, [pc, #88]	; (80106d0 <_vfiprintf_r+0x258>)
 8010678:	a904      	add	r1, sp, #16
 801067a:	4630      	mov	r0, r6
 801067c:	f7fc f84a 	bl	800c714 <_printf_float>
 8010680:	4607      	mov	r7, r0
 8010682:	1c78      	adds	r0, r7, #1
 8010684:	d1d6      	bne.n	8010634 <_vfiprintf_r+0x1bc>
 8010686:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010688:	07d9      	lsls	r1, r3, #31
 801068a:	d405      	bmi.n	8010698 <_vfiprintf_r+0x220>
 801068c:	89ab      	ldrh	r3, [r5, #12]
 801068e:	059a      	lsls	r2, r3, #22
 8010690:	d402      	bmi.n	8010698 <_vfiprintf_r+0x220>
 8010692:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010694:	f000 faa1 	bl	8010bda <__retarget_lock_release_recursive>
 8010698:	89ab      	ldrh	r3, [r5, #12]
 801069a:	065b      	lsls	r3, r3, #25
 801069c:	f53f af12 	bmi.w	80104c4 <_vfiprintf_r+0x4c>
 80106a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106a2:	e711      	b.n	80104c8 <_vfiprintf_r+0x50>
 80106a4:	ab03      	add	r3, sp, #12
 80106a6:	9300      	str	r3, [sp, #0]
 80106a8:	462a      	mov	r2, r5
 80106aa:	4b09      	ldr	r3, [pc, #36]	; (80106d0 <_vfiprintf_r+0x258>)
 80106ac:	a904      	add	r1, sp, #16
 80106ae:	4630      	mov	r0, r6
 80106b0:	f7fc fad4 	bl	800cc5c <_printf_i>
 80106b4:	e7e4      	b.n	8010680 <_vfiprintf_r+0x208>
 80106b6:	bf00      	nop
 80106b8:	080129ac 	.word	0x080129ac
 80106bc:	080129cc 	.word	0x080129cc
 80106c0:	0801298c 	.word	0x0801298c
 80106c4:	0801293c 	.word	0x0801293c
 80106c8:	08012946 	.word	0x08012946
 80106cc:	0800c715 	.word	0x0800c715
 80106d0:	08010455 	.word	0x08010455
 80106d4:	08012942 	.word	0x08012942

080106d8 <__swbuf_r>:
 80106d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106da:	460e      	mov	r6, r1
 80106dc:	4614      	mov	r4, r2
 80106de:	4605      	mov	r5, r0
 80106e0:	b118      	cbz	r0, 80106ea <__swbuf_r+0x12>
 80106e2:	6983      	ldr	r3, [r0, #24]
 80106e4:	b90b      	cbnz	r3, 80106ea <__swbuf_r+0x12>
 80106e6:	f000 f9d9 	bl	8010a9c <__sinit>
 80106ea:	4b21      	ldr	r3, [pc, #132]	; (8010770 <__swbuf_r+0x98>)
 80106ec:	429c      	cmp	r4, r3
 80106ee:	d12b      	bne.n	8010748 <__swbuf_r+0x70>
 80106f0:	686c      	ldr	r4, [r5, #4]
 80106f2:	69a3      	ldr	r3, [r4, #24]
 80106f4:	60a3      	str	r3, [r4, #8]
 80106f6:	89a3      	ldrh	r3, [r4, #12]
 80106f8:	071a      	lsls	r2, r3, #28
 80106fa:	d52f      	bpl.n	801075c <__swbuf_r+0x84>
 80106fc:	6923      	ldr	r3, [r4, #16]
 80106fe:	b36b      	cbz	r3, 801075c <__swbuf_r+0x84>
 8010700:	6923      	ldr	r3, [r4, #16]
 8010702:	6820      	ldr	r0, [r4, #0]
 8010704:	1ac0      	subs	r0, r0, r3
 8010706:	6963      	ldr	r3, [r4, #20]
 8010708:	b2f6      	uxtb	r6, r6
 801070a:	4283      	cmp	r3, r0
 801070c:	4637      	mov	r7, r6
 801070e:	dc04      	bgt.n	801071a <__swbuf_r+0x42>
 8010710:	4621      	mov	r1, r4
 8010712:	4628      	mov	r0, r5
 8010714:	f000 f92e 	bl	8010974 <_fflush_r>
 8010718:	bb30      	cbnz	r0, 8010768 <__swbuf_r+0x90>
 801071a:	68a3      	ldr	r3, [r4, #8]
 801071c:	3b01      	subs	r3, #1
 801071e:	60a3      	str	r3, [r4, #8]
 8010720:	6823      	ldr	r3, [r4, #0]
 8010722:	1c5a      	adds	r2, r3, #1
 8010724:	6022      	str	r2, [r4, #0]
 8010726:	701e      	strb	r6, [r3, #0]
 8010728:	6963      	ldr	r3, [r4, #20]
 801072a:	3001      	adds	r0, #1
 801072c:	4283      	cmp	r3, r0
 801072e:	d004      	beq.n	801073a <__swbuf_r+0x62>
 8010730:	89a3      	ldrh	r3, [r4, #12]
 8010732:	07db      	lsls	r3, r3, #31
 8010734:	d506      	bpl.n	8010744 <__swbuf_r+0x6c>
 8010736:	2e0a      	cmp	r6, #10
 8010738:	d104      	bne.n	8010744 <__swbuf_r+0x6c>
 801073a:	4621      	mov	r1, r4
 801073c:	4628      	mov	r0, r5
 801073e:	f000 f919 	bl	8010974 <_fflush_r>
 8010742:	b988      	cbnz	r0, 8010768 <__swbuf_r+0x90>
 8010744:	4638      	mov	r0, r7
 8010746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010748:	4b0a      	ldr	r3, [pc, #40]	; (8010774 <__swbuf_r+0x9c>)
 801074a:	429c      	cmp	r4, r3
 801074c:	d101      	bne.n	8010752 <__swbuf_r+0x7a>
 801074e:	68ac      	ldr	r4, [r5, #8]
 8010750:	e7cf      	b.n	80106f2 <__swbuf_r+0x1a>
 8010752:	4b09      	ldr	r3, [pc, #36]	; (8010778 <__swbuf_r+0xa0>)
 8010754:	429c      	cmp	r4, r3
 8010756:	bf08      	it	eq
 8010758:	68ec      	ldreq	r4, [r5, #12]
 801075a:	e7ca      	b.n	80106f2 <__swbuf_r+0x1a>
 801075c:	4621      	mov	r1, r4
 801075e:	4628      	mov	r0, r5
 8010760:	f000 f80c 	bl	801077c <__swsetup_r>
 8010764:	2800      	cmp	r0, #0
 8010766:	d0cb      	beq.n	8010700 <__swbuf_r+0x28>
 8010768:	f04f 37ff 	mov.w	r7, #4294967295
 801076c:	e7ea      	b.n	8010744 <__swbuf_r+0x6c>
 801076e:	bf00      	nop
 8010770:	080129ac 	.word	0x080129ac
 8010774:	080129cc 	.word	0x080129cc
 8010778:	0801298c 	.word	0x0801298c

0801077c <__swsetup_r>:
 801077c:	4b32      	ldr	r3, [pc, #200]	; (8010848 <__swsetup_r+0xcc>)
 801077e:	b570      	push	{r4, r5, r6, lr}
 8010780:	681d      	ldr	r5, [r3, #0]
 8010782:	4606      	mov	r6, r0
 8010784:	460c      	mov	r4, r1
 8010786:	b125      	cbz	r5, 8010792 <__swsetup_r+0x16>
 8010788:	69ab      	ldr	r3, [r5, #24]
 801078a:	b913      	cbnz	r3, 8010792 <__swsetup_r+0x16>
 801078c:	4628      	mov	r0, r5
 801078e:	f000 f985 	bl	8010a9c <__sinit>
 8010792:	4b2e      	ldr	r3, [pc, #184]	; (801084c <__swsetup_r+0xd0>)
 8010794:	429c      	cmp	r4, r3
 8010796:	d10f      	bne.n	80107b8 <__swsetup_r+0x3c>
 8010798:	686c      	ldr	r4, [r5, #4]
 801079a:	89a3      	ldrh	r3, [r4, #12]
 801079c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107a0:	0719      	lsls	r1, r3, #28
 80107a2:	d42c      	bmi.n	80107fe <__swsetup_r+0x82>
 80107a4:	06dd      	lsls	r5, r3, #27
 80107a6:	d411      	bmi.n	80107cc <__swsetup_r+0x50>
 80107a8:	2309      	movs	r3, #9
 80107aa:	6033      	str	r3, [r6, #0]
 80107ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107b0:	81a3      	strh	r3, [r4, #12]
 80107b2:	f04f 30ff 	mov.w	r0, #4294967295
 80107b6:	e03e      	b.n	8010836 <__swsetup_r+0xba>
 80107b8:	4b25      	ldr	r3, [pc, #148]	; (8010850 <__swsetup_r+0xd4>)
 80107ba:	429c      	cmp	r4, r3
 80107bc:	d101      	bne.n	80107c2 <__swsetup_r+0x46>
 80107be:	68ac      	ldr	r4, [r5, #8]
 80107c0:	e7eb      	b.n	801079a <__swsetup_r+0x1e>
 80107c2:	4b24      	ldr	r3, [pc, #144]	; (8010854 <__swsetup_r+0xd8>)
 80107c4:	429c      	cmp	r4, r3
 80107c6:	bf08      	it	eq
 80107c8:	68ec      	ldreq	r4, [r5, #12]
 80107ca:	e7e6      	b.n	801079a <__swsetup_r+0x1e>
 80107cc:	0758      	lsls	r0, r3, #29
 80107ce:	d512      	bpl.n	80107f6 <__swsetup_r+0x7a>
 80107d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107d2:	b141      	cbz	r1, 80107e6 <__swsetup_r+0x6a>
 80107d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107d8:	4299      	cmp	r1, r3
 80107da:	d002      	beq.n	80107e2 <__swsetup_r+0x66>
 80107dc:	4630      	mov	r0, r6
 80107de:	f7ff fb27 	bl	800fe30 <_free_r>
 80107e2:	2300      	movs	r3, #0
 80107e4:	6363      	str	r3, [r4, #52]	; 0x34
 80107e6:	89a3      	ldrh	r3, [r4, #12]
 80107e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80107ec:	81a3      	strh	r3, [r4, #12]
 80107ee:	2300      	movs	r3, #0
 80107f0:	6063      	str	r3, [r4, #4]
 80107f2:	6923      	ldr	r3, [r4, #16]
 80107f4:	6023      	str	r3, [r4, #0]
 80107f6:	89a3      	ldrh	r3, [r4, #12]
 80107f8:	f043 0308 	orr.w	r3, r3, #8
 80107fc:	81a3      	strh	r3, [r4, #12]
 80107fe:	6923      	ldr	r3, [r4, #16]
 8010800:	b94b      	cbnz	r3, 8010816 <__swsetup_r+0x9a>
 8010802:	89a3      	ldrh	r3, [r4, #12]
 8010804:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010808:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801080c:	d003      	beq.n	8010816 <__swsetup_r+0x9a>
 801080e:	4621      	mov	r1, r4
 8010810:	4630      	mov	r0, r6
 8010812:	f000 fa09 	bl	8010c28 <__smakebuf_r>
 8010816:	89a0      	ldrh	r0, [r4, #12]
 8010818:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801081c:	f010 0301 	ands.w	r3, r0, #1
 8010820:	d00a      	beq.n	8010838 <__swsetup_r+0xbc>
 8010822:	2300      	movs	r3, #0
 8010824:	60a3      	str	r3, [r4, #8]
 8010826:	6963      	ldr	r3, [r4, #20]
 8010828:	425b      	negs	r3, r3
 801082a:	61a3      	str	r3, [r4, #24]
 801082c:	6923      	ldr	r3, [r4, #16]
 801082e:	b943      	cbnz	r3, 8010842 <__swsetup_r+0xc6>
 8010830:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010834:	d1ba      	bne.n	80107ac <__swsetup_r+0x30>
 8010836:	bd70      	pop	{r4, r5, r6, pc}
 8010838:	0781      	lsls	r1, r0, #30
 801083a:	bf58      	it	pl
 801083c:	6963      	ldrpl	r3, [r4, #20]
 801083e:	60a3      	str	r3, [r4, #8]
 8010840:	e7f4      	b.n	801082c <__swsetup_r+0xb0>
 8010842:	2000      	movs	r0, #0
 8010844:	e7f7      	b.n	8010836 <__swsetup_r+0xba>
 8010846:	bf00      	nop
 8010848:	2000025c 	.word	0x2000025c
 801084c:	080129ac 	.word	0x080129ac
 8010850:	080129cc 	.word	0x080129cc
 8010854:	0801298c 	.word	0x0801298c

08010858 <abort>:
 8010858:	b508      	push	{r3, lr}
 801085a:	2006      	movs	r0, #6
 801085c:	f000 fa54 	bl	8010d08 <raise>
 8010860:	2001      	movs	r0, #1
 8010862:	f7f4 fb2f 	bl	8004ec4 <_exit>
	...

08010868 <__sflush_r>:
 8010868:	898a      	ldrh	r2, [r1, #12]
 801086a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801086e:	4605      	mov	r5, r0
 8010870:	0710      	lsls	r0, r2, #28
 8010872:	460c      	mov	r4, r1
 8010874:	d458      	bmi.n	8010928 <__sflush_r+0xc0>
 8010876:	684b      	ldr	r3, [r1, #4]
 8010878:	2b00      	cmp	r3, #0
 801087a:	dc05      	bgt.n	8010888 <__sflush_r+0x20>
 801087c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801087e:	2b00      	cmp	r3, #0
 8010880:	dc02      	bgt.n	8010888 <__sflush_r+0x20>
 8010882:	2000      	movs	r0, #0
 8010884:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010888:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801088a:	2e00      	cmp	r6, #0
 801088c:	d0f9      	beq.n	8010882 <__sflush_r+0x1a>
 801088e:	2300      	movs	r3, #0
 8010890:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010894:	682f      	ldr	r7, [r5, #0]
 8010896:	602b      	str	r3, [r5, #0]
 8010898:	d032      	beq.n	8010900 <__sflush_r+0x98>
 801089a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801089c:	89a3      	ldrh	r3, [r4, #12]
 801089e:	075a      	lsls	r2, r3, #29
 80108a0:	d505      	bpl.n	80108ae <__sflush_r+0x46>
 80108a2:	6863      	ldr	r3, [r4, #4]
 80108a4:	1ac0      	subs	r0, r0, r3
 80108a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108a8:	b10b      	cbz	r3, 80108ae <__sflush_r+0x46>
 80108aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108ac:	1ac0      	subs	r0, r0, r3
 80108ae:	2300      	movs	r3, #0
 80108b0:	4602      	mov	r2, r0
 80108b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108b4:	6a21      	ldr	r1, [r4, #32]
 80108b6:	4628      	mov	r0, r5
 80108b8:	47b0      	blx	r6
 80108ba:	1c43      	adds	r3, r0, #1
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	d106      	bne.n	80108ce <__sflush_r+0x66>
 80108c0:	6829      	ldr	r1, [r5, #0]
 80108c2:	291d      	cmp	r1, #29
 80108c4:	d82c      	bhi.n	8010920 <__sflush_r+0xb8>
 80108c6:	4a2a      	ldr	r2, [pc, #168]	; (8010970 <__sflush_r+0x108>)
 80108c8:	40ca      	lsrs	r2, r1
 80108ca:	07d6      	lsls	r6, r2, #31
 80108cc:	d528      	bpl.n	8010920 <__sflush_r+0xb8>
 80108ce:	2200      	movs	r2, #0
 80108d0:	6062      	str	r2, [r4, #4]
 80108d2:	04d9      	lsls	r1, r3, #19
 80108d4:	6922      	ldr	r2, [r4, #16]
 80108d6:	6022      	str	r2, [r4, #0]
 80108d8:	d504      	bpl.n	80108e4 <__sflush_r+0x7c>
 80108da:	1c42      	adds	r2, r0, #1
 80108dc:	d101      	bne.n	80108e2 <__sflush_r+0x7a>
 80108de:	682b      	ldr	r3, [r5, #0]
 80108e0:	b903      	cbnz	r3, 80108e4 <__sflush_r+0x7c>
 80108e2:	6560      	str	r0, [r4, #84]	; 0x54
 80108e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80108e6:	602f      	str	r7, [r5, #0]
 80108e8:	2900      	cmp	r1, #0
 80108ea:	d0ca      	beq.n	8010882 <__sflush_r+0x1a>
 80108ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80108f0:	4299      	cmp	r1, r3
 80108f2:	d002      	beq.n	80108fa <__sflush_r+0x92>
 80108f4:	4628      	mov	r0, r5
 80108f6:	f7ff fa9b 	bl	800fe30 <_free_r>
 80108fa:	2000      	movs	r0, #0
 80108fc:	6360      	str	r0, [r4, #52]	; 0x34
 80108fe:	e7c1      	b.n	8010884 <__sflush_r+0x1c>
 8010900:	6a21      	ldr	r1, [r4, #32]
 8010902:	2301      	movs	r3, #1
 8010904:	4628      	mov	r0, r5
 8010906:	47b0      	blx	r6
 8010908:	1c41      	adds	r1, r0, #1
 801090a:	d1c7      	bne.n	801089c <__sflush_r+0x34>
 801090c:	682b      	ldr	r3, [r5, #0]
 801090e:	2b00      	cmp	r3, #0
 8010910:	d0c4      	beq.n	801089c <__sflush_r+0x34>
 8010912:	2b1d      	cmp	r3, #29
 8010914:	d001      	beq.n	801091a <__sflush_r+0xb2>
 8010916:	2b16      	cmp	r3, #22
 8010918:	d101      	bne.n	801091e <__sflush_r+0xb6>
 801091a:	602f      	str	r7, [r5, #0]
 801091c:	e7b1      	b.n	8010882 <__sflush_r+0x1a>
 801091e:	89a3      	ldrh	r3, [r4, #12]
 8010920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010924:	81a3      	strh	r3, [r4, #12]
 8010926:	e7ad      	b.n	8010884 <__sflush_r+0x1c>
 8010928:	690f      	ldr	r7, [r1, #16]
 801092a:	2f00      	cmp	r7, #0
 801092c:	d0a9      	beq.n	8010882 <__sflush_r+0x1a>
 801092e:	0793      	lsls	r3, r2, #30
 8010930:	680e      	ldr	r6, [r1, #0]
 8010932:	bf08      	it	eq
 8010934:	694b      	ldreq	r3, [r1, #20]
 8010936:	600f      	str	r7, [r1, #0]
 8010938:	bf18      	it	ne
 801093a:	2300      	movne	r3, #0
 801093c:	eba6 0807 	sub.w	r8, r6, r7
 8010940:	608b      	str	r3, [r1, #8]
 8010942:	f1b8 0f00 	cmp.w	r8, #0
 8010946:	dd9c      	ble.n	8010882 <__sflush_r+0x1a>
 8010948:	6a21      	ldr	r1, [r4, #32]
 801094a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801094c:	4643      	mov	r3, r8
 801094e:	463a      	mov	r2, r7
 8010950:	4628      	mov	r0, r5
 8010952:	47b0      	blx	r6
 8010954:	2800      	cmp	r0, #0
 8010956:	dc06      	bgt.n	8010966 <__sflush_r+0xfe>
 8010958:	89a3      	ldrh	r3, [r4, #12]
 801095a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801095e:	81a3      	strh	r3, [r4, #12]
 8010960:	f04f 30ff 	mov.w	r0, #4294967295
 8010964:	e78e      	b.n	8010884 <__sflush_r+0x1c>
 8010966:	4407      	add	r7, r0
 8010968:	eba8 0800 	sub.w	r8, r8, r0
 801096c:	e7e9      	b.n	8010942 <__sflush_r+0xda>
 801096e:	bf00      	nop
 8010970:	20400001 	.word	0x20400001

08010974 <_fflush_r>:
 8010974:	b538      	push	{r3, r4, r5, lr}
 8010976:	690b      	ldr	r3, [r1, #16]
 8010978:	4605      	mov	r5, r0
 801097a:	460c      	mov	r4, r1
 801097c:	b913      	cbnz	r3, 8010984 <_fflush_r+0x10>
 801097e:	2500      	movs	r5, #0
 8010980:	4628      	mov	r0, r5
 8010982:	bd38      	pop	{r3, r4, r5, pc}
 8010984:	b118      	cbz	r0, 801098e <_fflush_r+0x1a>
 8010986:	6983      	ldr	r3, [r0, #24]
 8010988:	b90b      	cbnz	r3, 801098e <_fflush_r+0x1a>
 801098a:	f000 f887 	bl	8010a9c <__sinit>
 801098e:	4b14      	ldr	r3, [pc, #80]	; (80109e0 <_fflush_r+0x6c>)
 8010990:	429c      	cmp	r4, r3
 8010992:	d11b      	bne.n	80109cc <_fflush_r+0x58>
 8010994:	686c      	ldr	r4, [r5, #4]
 8010996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801099a:	2b00      	cmp	r3, #0
 801099c:	d0ef      	beq.n	801097e <_fflush_r+0xa>
 801099e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109a0:	07d0      	lsls	r0, r2, #31
 80109a2:	d404      	bmi.n	80109ae <_fflush_r+0x3a>
 80109a4:	0599      	lsls	r1, r3, #22
 80109a6:	d402      	bmi.n	80109ae <_fflush_r+0x3a>
 80109a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109aa:	f000 f915 	bl	8010bd8 <__retarget_lock_acquire_recursive>
 80109ae:	4628      	mov	r0, r5
 80109b0:	4621      	mov	r1, r4
 80109b2:	f7ff ff59 	bl	8010868 <__sflush_r>
 80109b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109b8:	07da      	lsls	r2, r3, #31
 80109ba:	4605      	mov	r5, r0
 80109bc:	d4e0      	bmi.n	8010980 <_fflush_r+0xc>
 80109be:	89a3      	ldrh	r3, [r4, #12]
 80109c0:	059b      	lsls	r3, r3, #22
 80109c2:	d4dd      	bmi.n	8010980 <_fflush_r+0xc>
 80109c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109c6:	f000 f908 	bl	8010bda <__retarget_lock_release_recursive>
 80109ca:	e7d9      	b.n	8010980 <_fflush_r+0xc>
 80109cc:	4b05      	ldr	r3, [pc, #20]	; (80109e4 <_fflush_r+0x70>)
 80109ce:	429c      	cmp	r4, r3
 80109d0:	d101      	bne.n	80109d6 <_fflush_r+0x62>
 80109d2:	68ac      	ldr	r4, [r5, #8]
 80109d4:	e7df      	b.n	8010996 <_fflush_r+0x22>
 80109d6:	4b04      	ldr	r3, [pc, #16]	; (80109e8 <_fflush_r+0x74>)
 80109d8:	429c      	cmp	r4, r3
 80109da:	bf08      	it	eq
 80109dc:	68ec      	ldreq	r4, [r5, #12]
 80109de:	e7da      	b.n	8010996 <_fflush_r+0x22>
 80109e0:	080129ac 	.word	0x080129ac
 80109e4:	080129cc 	.word	0x080129cc
 80109e8:	0801298c 	.word	0x0801298c

080109ec <std>:
 80109ec:	2300      	movs	r3, #0
 80109ee:	b510      	push	{r4, lr}
 80109f0:	4604      	mov	r4, r0
 80109f2:	e9c0 3300 	strd	r3, r3, [r0]
 80109f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80109fa:	6083      	str	r3, [r0, #8]
 80109fc:	8181      	strh	r1, [r0, #12]
 80109fe:	6643      	str	r3, [r0, #100]	; 0x64
 8010a00:	81c2      	strh	r2, [r0, #14]
 8010a02:	6183      	str	r3, [r0, #24]
 8010a04:	4619      	mov	r1, r3
 8010a06:	2208      	movs	r2, #8
 8010a08:	305c      	adds	r0, #92	; 0x5c
 8010a0a:	f7fb fddb 	bl	800c5c4 <memset>
 8010a0e:	4b05      	ldr	r3, [pc, #20]	; (8010a24 <std+0x38>)
 8010a10:	6263      	str	r3, [r4, #36]	; 0x24
 8010a12:	4b05      	ldr	r3, [pc, #20]	; (8010a28 <std+0x3c>)
 8010a14:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a16:	4b05      	ldr	r3, [pc, #20]	; (8010a2c <std+0x40>)
 8010a18:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a1a:	4b05      	ldr	r3, [pc, #20]	; (8010a30 <std+0x44>)
 8010a1c:	6224      	str	r4, [r4, #32]
 8010a1e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a20:	bd10      	pop	{r4, pc}
 8010a22:	bf00      	nop
 8010a24:	08010d41 	.word	0x08010d41
 8010a28:	08010d63 	.word	0x08010d63
 8010a2c:	08010d9b 	.word	0x08010d9b
 8010a30:	08010dbf 	.word	0x08010dbf

08010a34 <_cleanup_r>:
 8010a34:	4901      	ldr	r1, [pc, #4]	; (8010a3c <_cleanup_r+0x8>)
 8010a36:	f000 b8af 	b.w	8010b98 <_fwalk_reent>
 8010a3a:	bf00      	nop
 8010a3c:	08010975 	.word	0x08010975

08010a40 <__sfmoreglue>:
 8010a40:	b570      	push	{r4, r5, r6, lr}
 8010a42:	2268      	movs	r2, #104	; 0x68
 8010a44:	1e4d      	subs	r5, r1, #1
 8010a46:	4355      	muls	r5, r2
 8010a48:	460e      	mov	r6, r1
 8010a4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a4e:	f7ff fa5b 	bl	800ff08 <_malloc_r>
 8010a52:	4604      	mov	r4, r0
 8010a54:	b140      	cbz	r0, 8010a68 <__sfmoreglue+0x28>
 8010a56:	2100      	movs	r1, #0
 8010a58:	e9c0 1600 	strd	r1, r6, [r0]
 8010a5c:	300c      	adds	r0, #12
 8010a5e:	60a0      	str	r0, [r4, #8]
 8010a60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a64:	f7fb fdae 	bl	800c5c4 <memset>
 8010a68:	4620      	mov	r0, r4
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}

08010a6c <__sfp_lock_acquire>:
 8010a6c:	4801      	ldr	r0, [pc, #4]	; (8010a74 <__sfp_lock_acquire+0x8>)
 8010a6e:	f000 b8b3 	b.w	8010bd8 <__retarget_lock_acquire_recursive>
 8010a72:	bf00      	nop
 8010a74:	20001111 	.word	0x20001111

08010a78 <__sfp_lock_release>:
 8010a78:	4801      	ldr	r0, [pc, #4]	; (8010a80 <__sfp_lock_release+0x8>)
 8010a7a:	f000 b8ae 	b.w	8010bda <__retarget_lock_release_recursive>
 8010a7e:	bf00      	nop
 8010a80:	20001111 	.word	0x20001111

08010a84 <__sinit_lock_acquire>:
 8010a84:	4801      	ldr	r0, [pc, #4]	; (8010a8c <__sinit_lock_acquire+0x8>)
 8010a86:	f000 b8a7 	b.w	8010bd8 <__retarget_lock_acquire_recursive>
 8010a8a:	bf00      	nop
 8010a8c:	20001112 	.word	0x20001112

08010a90 <__sinit_lock_release>:
 8010a90:	4801      	ldr	r0, [pc, #4]	; (8010a98 <__sinit_lock_release+0x8>)
 8010a92:	f000 b8a2 	b.w	8010bda <__retarget_lock_release_recursive>
 8010a96:	bf00      	nop
 8010a98:	20001112 	.word	0x20001112

08010a9c <__sinit>:
 8010a9c:	b510      	push	{r4, lr}
 8010a9e:	4604      	mov	r4, r0
 8010aa0:	f7ff fff0 	bl	8010a84 <__sinit_lock_acquire>
 8010aa4:	69a3      	ldr	r3, [r4, #24]
 8010aa6:	b11b      	cbz	r3, 8010ab0 <__sinit+0x14>
 8010aa8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010aac:	f7ff bff0 	b.w	8010a90 <__sinit_lock_release>
 8010ab0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ab4:	6523      	str	r3, [r4, #80]	; 0x50
 8010ab6:	4b13      	ldr	r3, [pc, #76]	; (8010b04 <__sinit+0x68>)
 8010ab8:	4a13      	ldr	r2, [pc, #76]	; (8010b08 <__sinit+0x6c>)
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010abe:	42a3      	cmp	r3, r4
 8010ac0:	bf04      	itt	eq
 8010ac2:	2301      	moveq	r3, #1
 8010ac4:	61a3      	streq	r3, [r4, #24]
 8010ac6:	4620      	mov	r0, r4
 8010ac8:	f000 f820 	bl	8010b0c <__sfp>
 8010acc:	6060      	str	r0, [r4, #4]
 8010ace:	4620      	mov	r0, r4
 8010ad0:	f000 f81c 	bl	8010b0c <__sfp>
 8010ad4:	60a0      	str	r0, [r4, #8]
 8010ad6:	4620      	mov	r0, r4
 8010ad8:	f000 f818 	bl	8010b0c <__sfp>
 8010adc:	2200      	movs	r2, #0
 8010ade:	60e0      	str	r0, [r4, #12]
 8010ae0:	2104      	movs	r1, #4
 8010ae2:	6860      	ldr	r0, [r4, #4]
 8010ae4:	f7ff ff82 	bl	80109ec <std>
 8010ae8:	68a0      	ldr	r0, [r4, #8]
 8010aea:	2201      	movs	r2, #1
 8010aec:	2109      	movs	r1, #9
 8010aee:	f7ff ff7d 	bl	80109ec <std>
 8010af2:	68e0      	ldr	r0, [r4, #12]
 8010af4:	2202      	movs	r2, #2
 8010af6:	2112      	movs	r1, #18
 8010af8:	f7ff ff78 	bl	80109ec <std>
 8010afc:	2301      	movs	r3, #1
 8010afe:	61a3      	str	r3, [r4, #24]
 8010b00:	e7d2      	b.n	8010aa8 <__sinit+0xc>
 8010b02:	bf00      	nop
 8010b04:	08012548 	.word	0x08012548
 8010b08:	08010a35 	.word	0x08010a35

08010b0c <__sfp>:
 8010b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b0e:	4607      	mov	r7, r0
 8010b10:	f7ff ffac 	bl	8010a6c <__sfp_lock_acquire>
 8010b14:	4b1e      	ldr	r3, [pc, #120]	; (8010b90 <__sfp+0x84>)
 8010b16:	681e      	ldr	r6, [r3, #0]
 8010b18:	69b3      	ldr	r3, [r6, #24]
 8010b1a:	b913      	cbnz	r3, 8010b22 <__sfp+0x16>
 8010b1c:	4630      	mov	r0, r6
 8010b1e:	f7ff ffbd 	bl	8010a9c <__sinit>
 8010b22:	3648      	adds	r6, #72	; 0x48
 8010b24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b28:	3b01      	subs	r3, #1
 8010b2a:	d503      	bpl.n	8010b34 <__sfp+0x28>
 8010b2c:	6833      	ldr	r3, [r6, #0]
 8010b2e:	b30b      	cbz	r3, 8010b74 <__sfp+0x68>
 8010b30:	6836      	ldr	r6, [r6, #0]
 8010b32:	e7f7      	b.n	8010b24 <__sfp+0x18>
 8010b34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b38:	b9d5      	cbnz	r5, 8010b70 <__sfp+0x64>
 8010b3a:	4b16      	ldr	r3, [pc, #88]	; (8010b94 <__sfp+0x88>)
 8010b3c:	60e3      	str	r3, [r4, #12]
 8010b3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b42:	6665      	str	r5, [r4, #100]	; 0x64
 8010b44:	f000 f847 	bl	8010bd6 <__retarget_lock_init_recursive>
 8010b48:	f7ff ff96 	bl	8010a78 <__sfp_lock_release>
 8010b4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b54:	6025      	str	r5, [r4, #0]
 8010b56:	61a5      	str	r5, [r4, #24]
 8010b58:	2208      	movs	r2, #8
 8010b5a:	4629      	mov	r1, r5
 8010b5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b60:	f7fb fd30 	bl	800c5c4 <memset>
 8010b64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b6c:	4620      	mov	r0, r4
 8010b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b70:	3468      	adds	r4, #104	; 0x68
 8010b72:	e7d9      	b.n	8010b28 <__sfp+0x1c>
 8010b74:	2104      	movs	r1, #4
 8010b76:	4638      	mov	r0, r7
 8010b78:	f7ff ff62 	bl	8010a40 <__sfmoreglue>
 8010b7c:	4604      	mov	r4, r0
 8010b7e:	6030      	str	r0, [r6, #0]
 8010b80:	2800      	cmp	r0, #0
 8010b82:	d1d5      	bne.n	8010b30 <__sfp+0x24>
 8010b84:	f7ff ff78 	bl	8010a78 <__sfp_lock_release>
 8010b88:	230c      	movs	r3, #12
 8010b8a:	603b      	str	r3, [r7, #0]
 8010b8c:	e7ee      	b.n	8010b6c <__sfp+0x60>
 8010b8e:	bf00      	nop
 8010b90:	08012548 	.word	0x08012548
 8010b94:	ffff0001 	.word	0xffff0001

08010b98 <_fwalk_reent>:
 8010b98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010b9c:	4606      	mov	r6, r0
 8010b9e:	4688      	mov	r8, r1
 8010ba0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010ba4:	2700      	movs	r7, #0
 8010ba6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010baa:	f1b9 0901 	subs.w	r9, r9, #1
 8010bae:	d505      	bpl.n	8010bbc <_fwalk_reent+0x24>
 8010bb0:	6824      	ldr	r4, [r4, #0]
 8010bb2:	2c00      	cmp	r4, #0
 8010bb4:	d1f7      	bne.n	8010ba6 <_fwalk_reent+0xe>
 8010bb6:	4638      	mov	r0, r7
 8010bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bbc:	89ab      	ldrh	r3, [r5, #12]
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d907      	bls.n	8010bd2 <_fwalk_reent+0x3a>
 8010bc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010bc6:	3301      	adds	r3, #1
 8010bc8:	d003      	beq.n	8010bd2 <_fwalk_reent+0x3a>
 8010bca:	4629      	mov	r1, r5
 8010bcc:	4630      	mov	r0, r6
 8010bce:	47c0      	blx	r8
 8010bd0:	4307      	orrs	r7, r0
 8010bd2:	3568      	adds	r5, #104	; 0x68
 8010bd4:	e7e9      	b.n	8010baa <_fwalk_reent+0x12>

08010bd6 <__retarget_lock_init_recursive>:
 8010bd6:	4770      	bx	lr

08010bd8 <__retarget_lock_acquire_recursive>:
 8010bd8:	4770      	bx	lr

08010bda <__retarget_lock_release_recursive>:
 8010bda:	4770      	bx	lr

08010bdc <__swhatbuf_r>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	460e      	mov	r6, r1
 8010be0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010be4:	2900      	cmp	r1, #0
 8010be6:	b096      	sub	sp, #88	; 0x58
 8010be8:	4614      	mov	r4, r2
 8010bea:	461d      	mov	r5, r3
 8010bec:	da08      	bge.n	8010c00 <__swhatbuf_r+0x24>
 8010bee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010bf2:	2200      	movs	r2, #0
 8010bf4:	602a      	str	r2, [r5, #0]
 8010bf6:	061a      	lsls	r2, r3, #24
 8010bf8:	d410      	bmi.n	8010c1c <__swhatbuf_r+0x40>
 8010bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010bfe:	e00e      	b.n	8010c1e <__swhatbuf_r+0x42>
 8010c00:	466a      	mov	r2, sp
 8010c02:	f000 f903 	bl	8010e0c <_fstat_r>
 8010c06:	2800      	cmp	r0, #0
 8010c08:	dbf1      	blt.n	8010bee <__swhatbuf_r+0x12>
 8010c0a:	9a01      	ldr	r2, [sp, #4]
 8010c0c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c10:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c14:	425a      	negs	r2, r3
 8010c16:	415a      	adcs	r2, r3
 8010c18:	602a      	str	r2, [r5, #0]
 8010c1a:	e7ee      	b.n	8010bfa <__swhatbuf_r+0x1e>
 8010c1c:	2340      	movs	r3, #64	; 0x40
 8010c1e:	2000      	movs	r0, #0
 8010c20:	6023      	str	r3, [r4, #0]
 8010c22:	b016      	add	sp, #88	; 0x58
 8010c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c28 <__smakebuf_r>:
 8010c28:	898b      	ldrh	r3, [r1, #12]
 8010c2a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c2c:	079d      	lsls	r5, r3, #30
 8010c2e:	4606      	mov	r6, r0
 8010c30:	460c      	mov	r4, r1
 8010c32:	d507      	bpl.n	8010c44 <__smakebuf_r+0x1c>
 8010c34:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c38:	6023      	str	r3, [r4, #0]
 8010c3a:	6123      	str	r3, [r4, #16]
 8010c3c:	2301      	movs	r3, #1
 8010c3e:	6163      	str	r3, [r4, #20]
 8010c40:	b002      	add	sp, #8
 8010c42:	bd70      	pop	{r4, r5, r6, pc}
 8010c44:	ab01      	add	r3, sp, #4
 8010c46:	466a      	mov	r2, sp
 8010c48:	f7ff ffc8 	bl	8010bdc <__swhatbuf_r>
 8010c4c:	9900      	ldr	r1, [sp, #0]
 8010c4e:	4605      	mov	r5, r0
 8010c50:	4630      	mov	r0, r6
 8010c52:	f7ff f959 	bl	800ff08 <_malloc_r>
 8010c56:	b948      	cbnz	r0, 8010c6c <__smakebuf_r+0x44>
 8010c58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c5c:	059a      	lsls	r2, r3, #22
 8010c5e:	d4ef      	bmi.n	8010c40 <__smakebuf_r+0x18>
 8010c60:	f023 0303 	bic.w	r3, r3, #3
 8010c64:	f043 0302 	orr.w	r3, r3, #2
 8010c68:	81a3      	strh	r3, [r4, #12]
 8010c6a:	e7e3      	b.n	8010c34 <__smakebuf_r+0xc>
 8010c6c:	4b0d      	ldr	r3, [pc, #52]	; (8010ca4 <__smakebuf_r+0x7c>)
 8010c6e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c70:	89a3      	ldrh	r3, [r4, #12]
 8010c72:	6020      	str	r0, [r4, #0]
 8010c74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c78:	81a3      	strh	r3, [r4, #12]
 8010c7a:	9b00      	ldr	r3, [sp, #0]
 8010c7c:	6163      	str	r3, [r4, #20]
 8010c7e:	9b01      	ldr	r3, [sp, #4]
 8010c80:	6120      	str	r0, [r4, #16]
 8010c82:	b15b      	cbz	r3, 8010c9c <__smakebuf_r+0x74>
 8010c84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010c88:	4630      	mov	r0, r6
 8010c8a:	f000 f8d1 	bl	8010e30 <_isatty_r>
 8010c8e:	b128      	cbz	r0, 8010c9c <__smakebuf_r+0x74>
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	f023 0303 	bic.w	r3, r3, #3
 8010c96:	f043 0301 	orr.w	r3, r3, #1
 8010c9a:	81a3      	strh	r3, [r4, #12]
 8010c9c:	89a0      	ldrh	r0, [r4, #12]
 8010c9e:	4305      	orrs	r5, r0
 8010ca0:	81a5      	strh	r5, [r4, #12]
 8010ca2:	e7cd      	b.n	8010c40 <__smakebuf_r+0x18>
 8010ca4:	08010a35 	.word	0x08010a35

08010ca8 <_malloc_usable_size_r>:
 8010ca8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010cac:	1f18      	subs	r0, r3, #4
 8010cae:	2b00      	cmp	r3, #0
 8010cb0:	bfbc      	itt	lt
 8010cb2:	580b      	ldrlt	r3, [r1, r0]
 8010cb4:	18c0      	addlt	r0, r0, r3
 8010cb6:	4770      	bx	lr

08010cb8 <_raise_r>:
 8010cb8:	291f      	cmp	r1, #31
 8010cba:	b538      	push	{r3, r4, r5, lr}
 8010cbc:	4604      	mov	r4, r0
 8010cbe:	460d      	mov	r5, r1
 8010cc0:	d904      	bls.n	8010ccc <_raise_r+0x14>
 8010cc2:	2316      	movs	r3, #22
 8010cc4:	6003      	str	r3, [r0, #0]
 8010cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cca:	bd38      	pop	{r3, r4, r5, pc}
 8010ccc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cce:	b112      	cbz	r2, 8010cd6 <_raise_r+0x1e>
 8010cd0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cd4:	b94b      	cbnz	r3, 8010cea <_raise_r+0x32>
 8010cd6:	4620      	mov	r0, r4
 8010cd8:	f000 f830 	bl	8010d3c <_getpid_r>
 8010cdc:	462a      	mov	r2, r5
 8010cde:	4601      	mov	r1, r0
 8010ce0:	4620      	mov	r0, r4
 8010ce2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ce6:	f000 b817 	b.w	8010d18 <_kill_r>
 8010cea:	2b01      	cmp	r3, #1
 8010cec:	d00a      	beq.n	8010d04 <_raise_r+0x4c>
 8010cee:	1c59      	adds	r1, r3, #1
 8010cf0:	d103      	bne.n	8010cfa <_raise_r+0x42>
 8010cf2:	2316      	movs	r3, #22
 8010cf4:	6003      	str	r3, [r0, #0]
 8010cf6:	2001      	movs	r0, #1
 8010cf8:	e7e7      	b.n	8010cca <_raise_r+0x12>
 8010cfa:	2400      	movs	r4, #0
 8010cfc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d00:	4628      	mov	r0, r5
 8010d02:	4798      	blx	r3
 8010d04:	2000      	movs	r0, #0
 8010d06:	e7e0      	b.n	8010cca <_raise_r+0x12>

08010d08 <raise>:
 8010d08:	4b02      	ldr	r3, [pc, #8]	; (8010d14 <raise+0xc>)
 8010d0a:	4601      	mov	r1, r0
 8010d0c:	6818      	ldr	r0, [r3, #0]
 8010d0e:	f7ff bfd3 	b.w	8010cb8 <_raise_r>
 8010d12:	bf00      	nop
 8010d14:	2000025c 	.word	0x2000025c

08010d18 <_kill_r>:
 8010d18:	b538      	push	{r3, r4, r5, lr}
 8010d1a:	4d07      	ldr	r5, [pc, #28]	; (8010d38 <_kill_r+0x20>)
 8010d1c:	2300      	movs	r3, #0
 8010d1e:	4604      	mov	r4, r0
 8010d20:	4608      	mov	r0, r1
 8010d22:	4611      	mov	r1, r2
 8010d24:	602b      	str	r3, [r5, #0]
 8010d26:	f7f4 f8bd 	bl	8004ea4 <_kill>
 8010d2a:	1c43      	adds	r3, r0, #1
 8010d2c:	d102      	bne.n	8010d34 <_kill_r+0x1c>
 8010d2e:	682b      	ldr	r3, [r5, #0]
 8010d30:	b103      	cbz	r3, 8010d34 <_kill_r+0x1c>
 8010d32:	6023      	str	r3, [r4, #0]
 8010d34:	bd38      	pop	{r3, r4, r5, pc}
 8010d36:	bf00      	nop
 8010d38:	2000110c 	.word	0x2000110c

08010d3c <_getpid_r>:
 8010d3c:	f7f4 b8aa 	b.w	8004e94 <_getpid>

08010d40 <__sread>:
 8010d40:	b510      	push	{r4, lr}
 8010d42:	460c      	mov	r4, r1
 8010d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d48:	f000 f894 	bl	8010e74 <_read_r>
 8010d4c:	2800      	cmp	r0, #0
 8010d4e:	bfab      	itete	ge
 8010d50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d52:	89a3      	ldrhlt	r3, [r4, #12]
 8010d54:	181b      	addge	r3, r3, r0
 8010d56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d5a:	bfac      	ite	ge
 8010d5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d5e:	81a3      	strhlt	r3, [r4, #12]
 8010d60:	bd10      	pop	{r4, pc}

08010d62 <__swrite>:
 8010d62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d66:	461f      	mov	r7, r3
 8010d68:	898b      	ldrh	r3, [r1, #12]
 8010d6a:	05db      	lsls	r3, r3, #23
 8010d6c:	4605      	mov	r5, r0
 8010d6e:	460c      	mov	r4, r1
 8010d70:	4616      	mov	r6, r2
 8010d72:	d505      	bpl.n	8010d80 <__swrite+0x1e>
 8010d74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d78:	2302      	movs	r3, #2
 8010d7a:	2200      	movs	r2, #0
 8010d7c:	f000 f868 	bl	8010e50 <_lseek_r>
 8010d80:	89a3      	ldrh	r3, [r4, #12]
 8010d82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010d86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010d8a:	81a3      	strh	r3, [r4, #12]
 8010d8c:	4632      	mov	r2, r6
 8010d8e:	463b      	mov	r3, r7
 8010d90:	4628      	mov	r0, r5
 8010d92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010d96:	f000 b817 	b.w	8010dc8 <_write_r>

08010d9a <__sseek>:
 8010d9a:	b510      	push	{r4, lr}
 8010d9c:	460c      	mov	r4, r1
 8010d9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da2:	f000 f855 	bl	8010e50 <_lseek_r>
 8010da6:	1c43      	adds	r3, r0, #1
 8010da8:	89a3      	ldrh	r3, [r4, #12]
 8010daa:	bf15      	itete	ne
 8010dac:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010db2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010db6:	81a3      	strheq	r3, [r4, #12]
 8010db8:	bf18      	it	ne
 8010dba:	81a3      	strhne	r3, [r4, #12]
 8010dbc:	bd10      	pop	{r4, pc}

08010dbe <__sclose>:
 8010dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc2:	f000 b813 	b.w	8010dec <_close_r>
	...

08010dc8 <_write_r>:
 8010dc8:	b538      	push	{r3, r4, r5, lr}
 8010dca:	4d07      	ldr	r5, [pc, #28]	; (8010de8 <_write_r+0x20>)
 8010dcc:	4604      	mov	r4, r0
 8010dce:	4608      	mov	r0, r1
 8010dd0:	4611      	mov	r1, r2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	602a      	str	r2, [r5, #0]
 8010dd6:	461a      	mov	r2, r3
 8010dd8:	f7f4 f89b 	bl	8004f12 <_write>
 8010ddc:	1c43      	adds	r3, r0, #1
 8010dde:	d102      	bne.n	8010de6 <_write_r+0x1e>
 8010de0:	682b      	ldr	r3, [r5, #0]
 8010de2:	b103      	cbz	r3, 8010de6 <_write_r+0x1e>
 8010de4:	6023      	str	r3, [r4, #0]
 8010de6:	bd38      	pop	{r3, r4, r5, pc}
 8010de8:	2000110c 	.word	0x2000110c

08010dec <_close_r>:
 8010dec:	b538      	push	{r3, r4, r5, lr}
 8010dee:	4d06      	ldr	r5, [pc, #24]	; (8010e08 <_close_r+0x1c>)
 8010df0:	2300      	movs	r3, #0
 8010df2:	4604      	mov	r4, r0
 8010df4:	4608      	mov	r0, r1
 8010df6:	602b      	str	r3, [r5, #0]
 8010df8:	f7f4 f8a7 	bl	8004f4a <_close>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_close_r+0x1a>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_close_r+0x1a>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	2000110c 	.word	0x2000110c

08010e0c <_fstat_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d07      	ldr	r5, [pc, #28]	; (8010e2c <_fstat_r+0x20>)
 8010e10:	2300      	movs	r3, #0
 8010e12:	4604      	mov	r4, r0
 8010e14:	4608      	mov	r0, r1
 8010e16:	4611      	mov	r1, r2
 8010e18:	602b      	str	r3, [r5, #0]
 8010e1a:	f7f4 f8a2 	bl	8004f62 <_fstat>
 8010e1e:	1c43      	adds	r3, r0, #1
 8010e20:	d102      	bne.n	8010e28 <_fstat_r+0x1c>
 8010e22:	682b      	ldr	r3, [r5, #0]
 8010e24:	b103      	cbz	r3, 8010e28 <_fstat_r+0x1c>
 8010e26:	6023      	str	r3, [r4, #0]
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop
 8010e2c:	2000110c 	.word	0x2000110c

08010e30 <_isatty_r>:
 8010e30:	b538      	push	{r3, r4, r5, lr}
 8010e32:	4d06      	ldr	r5, [pc, #24]	; (8010e4c <_isatty_r+0x1c>)
 8010e34:	2300      	movs	r3, #0
 8010e36:	4604      	mov	r4, r0
 8010e38:	4608      	mov	r0, r1
 8010e3a:	602b      	str	r3, [r5, #0]
 8010e3c:	f7f4 f8a1 	bl	8004f82 <_isatty>
 8010e40:	1c43      	adds	r3, r0, #1
 8010e42:	d102      	bne.n	8010e4a <_isatty_r+0x1a>
 8010e44:	682b      	ldr	r3, [r5, #0]
 8010e46:	b103      	cbz	r3, 8010e4a <_isatty_r+0x1a>
 8010e48:	6023      	str	r3, [r4, #0]
 8010e4a:	bd38      	pop	{r3, r4, r5, pc}
 8010e4c:	2000110c 	.word	0x2000110c

08010e50 <_lseek_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d07      	ldr	r5, [pc, #28]	; (8010e70 <_lseek_r+0x20>)
 8010e54:	4604      	mov	r4, r0
 8010e56:	4608      	mov	r0, r1
 8010e58:	4611      	mov	r1, r2
 8010e5a:	2200      	movs	r2, #0
 8010e5c:	602a      	str	r2, [r5, #0]
 8010e5e:	461a      	mov	r2, r3
 8010e60:	f7f4 f89a 	bl	8004f98 <_lseek>
 8010e64:	1c43      	adds	r3, r0, #1
 8010e66:	d102      	bne.n	8010e6e <_lseek_r+0x1e>
 8010e68:	682b      	ldr	r3, [r5, #0]
 8010e6a:	b103      	cbz	r3, 8010e6e <_lseek_r+0x1e>
 8010e6c:	6023      	str	r3, [r4, #0]
 8010e6e:	bd38      	pop	{r3, r4, r5, pc}
 8010e70:	2000110c 	.word	0x2000110c

08010e74 <_read_r>:
 8010e74:	b538      	push	{r3, r4, r5, lr}
 8010e76:	4d07      	ldr	r5, [pc, #28]	; (8010e94 <_read_r+0x20>)
 8010e78:	4604      	mov	r4, r0
 8010e7a:	4608      	mov	r0, r1
 8010e7c:	4611      	mov	r1, r2
 8010e7e:	2200      	movs	r2, #0
 8010e80:	602a      	str	r2, [r5, #0]
 8010e82:	461a      	mov	r2, r3
 8010e84:	f7f4 f828 	bl	8004ed8 <_read>
 8010e88:	1c43      	adds	r3, r0, #1
 8010e8a:	d102      	bne.n	8010e92 <_read_r+0x1e>
 8010e8c:	682b      	ldr	r3, [r5, #0]
 8010e8e:	b103      	cbz	r3, 8010e92 <_read_r+0x1e>
 8010e90:	6023      	str	r3, [r4, #0]
 8010e92:	bd38      	pop	{r3, r4, r5, pc}
 8010e94:	2000110c 	.word	0x2000110c

08010e98 <cos>:
 8010e98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010e9a:	ec53 2b10 	vmov	r2, r3, d0
 8010e9e:	4826      	ldr	r0, [pc, #152]	; (8010f38 <cos+0xa0>)
 8010ea0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010ea4:	4281      	cmp	r1, r0
 8010ea6:	dc06      	bgt.n	8010eb6 <cos+0x1e>
 8010ea8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010f30 <cos+0x98>
 8010eac:	b005      	add	sp, #20
 8010eae:	f85d eb04 	ldr.w	lr, [sp], #4
 8010eb2:	f000 bb99 	b.w	80115e8 <__kernel_cos>
 8010eb6:	4821      	ldr	r0, [pc, #132]	; (8010f3c <cos+0xa4>)
 8010eb8:	4281      	cmp	r1, r0
 8010eba:	dd09      	ble.n	8010ed0 <cos+0x38>
 8010ebc:	ee10 0a10 	vmov	r0, s0
 8010ec0:	4619      	mov	r1, r3
 8010ec2:	f7ef f9e9 	bl	8000298 <__aeabi_dsub>
 8010ec6:	ec41 0b10 	vmov	d0, r0, r1
 8010eca:	b005      	add	sp, #20
 8010ecc:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ed0:	4668      	mov	r0, sp
 8010ed2:	f000 f979 	bl	80111c8 <__ieee754_rem_pio2>
 8010ed6:	f000 0003 	and.w	r0, r0, #3
 8010eda:	2801      	cmp	r0, #1
 8010edc:	d00b      	beq.n	8010ef6 <cos+0x5e>
 8010ede:	2802      	cmp	r0, #2
 8010ee0:	d016      	beq.n	8010f10 <cos+0x78>
 8010ee2:	b9e0      	cbnz	r0, 8010f1e <cos+0x86>
 8010ee4:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ee8:	ed9d 0b00 	vldr	d0, [sp]
 8010eec:	f000 fb7c 	bl	80115e8 <__kernel_cos>
 8010ef0:	ec51 0b10 	vmov	r0, r1, d0
 8010ef4:	e7e7      	b.n	8010ec6 <cos+0x2e>
 8010ef6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010efa:	ed9d 0b00 	vldr	d0, [sp]
 8010efe:	f000 ff8b 	bl	8011e18 <__kernel_sin>
 8010f02:	ec53 2b10 	vmov	r2, r3, d0
 8010f06:	ee10 0a10 	vmov	r0, s0
 8010f0a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f0e:	e7da      	b.n	8010ec6 <cos+0x2e>
 8010f10:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f14:	ed9d 0b00 	vldr	d0, [sp]
 8010f18:	f000 fb66 	bl	80115e8 <__kernel_cos>
 8010f1c:	e7f1      	b.n	8010f02 <cos+0x6a>
 8010f1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f22:	ed9d 0b00 	vldr	d0, [sp]
 8010f26:	2001      	movs	r0, #1
 8010f28:	f000 ff76 	bl	8011e18 <__kernel_sin>
 8010f2c:	e7e0      	b.n	8010ef0 <cos+0x58>
 8010f2e:	bf00      	nop
	...
 8010f38:	3fe921fb 	.word	0x3fe921fb
 8010f3c:	7fefffff 	.word	0x7fefffff

08010f40 <sin>:
 8010f40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f42:	ec53 2b10 	vmov	r2, r3, d0
 8010f46:	4828      	ldr	r0, [pc, #160]	; (8010fe8 <sin+0xa8>)
 8010f48:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010f4c:	4281      	cmp	r1, r0
 8010f4e:	dc07      	bgt.n	8010f60 <sin+0x20>
 8010f50:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010fe0 <sin+0xa0>
 8010f54:	2000      	movs	r0, #0
 8010f56:	b005      	add	sp, #20
 8010f58:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f5c:	f000 bf5c 	b.w	8011e18 <__kernel_sin>
 8010f60:	4822      	ldr	r0, [pc, #136]	; (8010fec <sin+0xac>)
 8010f62:	4281      	cmp	r1, r0
 8010f64:	dd09      	ble.n	8010f7a <sin+0x3a>
 8010f66:	ee10 0a10 	vmov	r0, s0
 8010f6a:	4619      	mov	r1, r3
 8010f6c:	f7ef f994 	bl	8000298 <__aeabi_dsub>
 8010f70:	ec41 0b10 	vmov	d0, r0, r1
 8010f74:	b005      	add	sp, #20
 8010f76:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f7a:	4668      	mov	r0, sp
 8010f7c:	f000 f924 	bl	80111c8 <__ieee754_rem_pio2>
 8010f80:	f000 0003 	and.w	r0, r0, #3
 8010f84:	2801      	cmp	r0, #1
 8010f86:	d00c      	beq.n	8010fa2 <sin+0x62>
 8010f88:	2802      	cmp	r0, #2
 8010f8a:	d011      	beq.n	8010fb0 <sin+0x70>
 8010f8c:	b9f0      	cbnz	r0, 8010fcc <sin+0x8c>
 8010f8e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f92:	ed9d 0b00 	vldr	d0, [sp]
 8010f96:	2001      	movs	r0, #1
 8010f98:	f000 ff3e 	bl	8011e18 <__kernel_sin>
 8010f9c:	ec51 0b10 	vmov	r0, r1, d0
 8010fa0:	e7e6      	b.n	8010f70 <sin+0x30>
 8010fa2:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fa6:	ed9d 0b00 	vldr	d0, [sp]
 8010faa:	f000 fb1d 	bl	80115e8 <__kernel_cos>
 8010fae:	e7f5      	b.n	8010f9c <sin+0x5c>
 8010fb0:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fb4:	ed9d 0b00 	vldr	d0, [sp]
 8010fb8:	2001      	movs	r0, #1
 8010fba:	f000 ff2d 	bl	8011e18 <__kernel_sin>
 8010fbe:	ec53 2b10 	vmov	r2, r3, d0
 8010fc2:	ee10 0a10 	vmov	r0, s0
 8010fc6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010fca:	e7d1      	b.n	8010f70 <sin+0x30>
 8010fcc:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fd0:	ed9d 0b00 	vldr	d0, [sp]
 8010fd4:	f000 fb08 	bl	80115e8 <__kernel_cos>
 8010fd8:	e7f1      	b.n	8010fbe <sin+0x7e>
 8010fda:	bf00      	nop
 8010fdc:	f3af 8000 	nop.w
	...
 8010fe8:	3fe921fb 	.word	0x3fe921fb
 8010fec:	7fefffff 	.word	0x7fefffff

08010ff0 <atan2>:
 8010ff0:	f000 b81e 	b.w	8011030 <__ieee754_atan2>

08010ff4 <sqrtf>:
 8010ff4:	b508      	push	{r3, lr}
 8010ff6:	ed2d 8b02 	vpush	{d8}
 8010ffa:	eeb0 8a40 	vmov.f32	s16, s0
 8010ffe:	f000 faef 	bl	80115e0 <__ieee754_sqrtf>
 8011002:	eeb4 8a48 	vcmp.f32	s16, s16
 8011006:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801100a:	d60c      	bvs.n	8011026 <sqrtf+0x32>
 801100c:	eddf 8a07 	vldr	s17, [pc, #28]	; 801102c <sqrtf+0x38>
 8011010:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011014:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011018:	d505      	bpl.n	8011026 <sqrtf+0x32>
 801101a:	f7fb fa9b 	bl	800c554 <__errno>
 801101e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011022:	2321      	movs	r3, #33	; 0x21
 8011024:	6003      	str	r3, [r0, #0]
 8011026:	ecbd 8b02 	vpop	{d8}
 801102a:	bd08      	pop	{r3, pc}
 801102c:	00000000 	.word	0x00000000

08011030 <__ieee754_atan2>:
 8011030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011034:	ec57 6b11 	vmov	r6, r7, d1
 8011038:	4273      	negs	r3, r6
 801103a:	f8df e184 	ldr.w	lr, [pc, #388]	; 80111c0 <__ieee754_atan2+0x190>
 801103e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8011042:	4333      	orrs	r3, r6
 8011044:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8011048:	4573      	cmp	r3, lr
 801104a:	ec51 0b10 	vmov	r0, r1, d0
 801104e:	ee11 8a10 	vmov	r8, s2
 8011052:	d80a      	bhi.n	801106a <__ieee754_atan2+0x3a>
 8011054:	4244      	negs	r4, r0
 8011056:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801105a:	4304      	orrs	r4, r0
 801105c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8011060:	4574      	cmp	r4, lr
 8011062:	ee10 9a10 	vmov	r9, s0
 8011066:	468c      	mov	ip, r1
 8011068:	d907      	bls.n	801107a <__ieee754_atan2+0x4a>
 801106a:	4632      	mov	r2, r6
 801106c:	463b      	mov	r3, r7
 801106e:	f7ef f915 	bl	800029c <__adddf3>
 8011072:	ec41 0b10 	vmov	d0, r0, r1
 8011076:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801107a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 801107e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8011082:	4334      	orrs	r4, r6
 8011084:	d103      	bne.n	801108e <__ieee754_atan2+0x5e>
 8011086:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801108a:	f000 bf85 	b.w	8011f98 <atan>
 801108e:	17bc      	asrs	r4, r7, #30
 8011090:	f004 0402 	and.w	r4, r4, #2
 8011094:	ea53 0909 	orrs.w	r9, r3, r9
 8011098:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 801109c:	d107      	bne.n	80110ae <__ieee754_atan2+0x7e>
 801109e:	2c02      	cmp	r4, #2
 80110a0:	d060      	beq.n	8011164 <__ieee754_atan2+0x134>
 80110a2:	2c03      	cmp	r4, #3
 80110a4:	d1e5      	bne.n	8011072 <__ieee754_atan2+0x42>
 80110a6:	a142      	add	r1, pc, #264	; (adr r1, 80111b0 <__ieee754_atan2+0x180>)
 80110a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110ac:	e7e1      	b.n	8011072 <__ieee754_atan2+0x42>
 80110ae:	ea52 0808 	orrs.w	r8, r2, r8
 80110b2:	d106      	bne.n	80110c2 <__ieee754_atan2+0x92>
 80110b4:	f1bc 0f00 	cmp.w	ip, #0
 80110b8:	da5f      	bge.n	801117a <__ieee754_atan2+0x14a>
 80110ba:	a13f      	add	r1, pc, #252	; (adr r1, 80111b8 <__ieee754_atan2+0x188>)
 80110bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80110c0:	e7d7      	b.n	8011072 <__ieee754_atan2+0x42>
 80110c2:	4572      	cmp	r2, lr
 80110c4:	d10f      	bne.n	80110e6 <__ieee754_atan2+0xb6>
 80110c6:	4293      	cmp	r3, r2
 80110c8:	f104 34ff 	add.w	r4, r4, #4294967295
 80110cc:	d107      	bne.n	80110de <__ieee754_atan2+0xae>
 80110ce:	2c02      	cmp	r4, #2
 80110d0:	d84c      	bhi.n	801116c <__ieee754_atan2+0x13c>
 80110d2:	4b35      	ldr	r3, [pc, #212]	; (80111a8 <__ieee754_atan2+0x178>)
 80110d4:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 80110d8:	e9d4 0100 	ldrd	r0, r1, [r4]
 80110dc:	e7c9      	b.n	8011072 <__ieee754_atan2+0x42>
 80110de:	2c02      	cmp	r4, #2
 80110e0:	d848      	bhi.n	8011174 <__ieee754_atan2+0x144>
 80110e2:	4b32      	ldr	r3, [pc, #200]	; (80111ac <__ieee754_atan2+0x17c>)
 80110e4:	e7f6      	b.n	80110d4 <__ieee754_atan2+0xa4>
 80110e6:	4573      	cmp	r3, lr
 80110e8:	d0e4      	beq.n	80110b4 <__ieee754_atan2+0x84>
 80110ea:	1a9b      	subs	r3, r3, r2
 80110ec:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 80110f0:	ea4f 5223 	mov.w	r2, r3, asr #20
 80110f4:	da1e      	bge.n	8011134 <__ieee754_atan2+0x104>
 80110f6:	2f00      	cmp	r7, #0
 80110f8:	da01      	bge.n	80110fe <__ieee754_atan2+0xce>
 80110fa:	323c      	adds	r2, #60	; 0x3c
 80110fc:	db1e      	blt.n	801113c <__ieee754_atan2+0x10c>
 80110fe:	4632      	mov	r2, r6
 8011100:	463b      	mov	r3, r7
 8011102:	f7ef fbab 	bl	800085c <__aeabi_ddiv>
 8011106:	ec41 0b10 	vmov	d0, r0, r1
 801110a:	f001 f8e5 	bl	80122d8 <fabs>
 801110e:	f000 ff43 	bl	8011f98 <atan>
 8011112:	ec51 0b10 	vmov	r0, r1, d0
 8011116:	2c01      	cmp	r4, #1
 8011118:	d013      	beq.n	8011142 <__ieee754_atan2+0x112>
 801111a:	2c02      	cmp	r4, #2
 801111c:	d015      	beq.n	801114a <__ieee754_atan2+0x11a>
 801111e:	2c00      	cmp	r4, #0
 8011120:	d0a7      	beq.n	8011072 <__ieee754_atan2+0x42>
 8011122:	a319      	add	r3, pc, #100	; (adr r3, 8011188 <__ieee754_atan2+0x158>)
 8011124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011128:	f7ef f8b6 	bl	8000298 <__aeabi_dsub>
 801112c:	a318      	add	r3, pc, #96	; (adr r3, 8011190 <__ieee754_atan2+0x160>)
 801112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011132:	e014      	b.n	801115e <__ieee754_atan2+0x12e>
 8011134:	a118      	add	r1, pc, #96	; (adr r1, 8011198 <__ieee754_atan2+0x168>)
 8011136:	e9d1 0100 	ldrd	r0, r1, [r1]
 801113a:	e7ec      	b.n	8011116 <__ieee754_atan2+0xe6>
 801113c:	2000      	movs	r0, #0
 801113e:	2100      	movs	r1, #0
 8011140:	e7e9      	b.n	8011116 <__ieee754_atan2+0xe6>
 8011142:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011146:	4619      	mov	r1, r3
 8011148:	e793      	b.n	8011072 <__ieee754_atan2+0x42>
 801114a:	a30f      	add	r3, pc, #60	; (adr r3, 8011188 <__ieee754_atan2+0x158>)
 801114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011150:	f7ef f8a2 	bl	8000298 <__aeabi_dsub>
 8011154:	4602      	mov	r2, r0
 8011156:	460b      	mov	r3, r1
 8011158:	a10d      	add	r1, pc, #52	; (adr r1, 8011190 <__ieee754_atan2+0x160>)
 801115a:	e9d1 0100 	ldrd	r0, r1, [r1]
 801115e:	f7ef f89b 	bl	8000298 <__aeabi_dsub>
 8011162:	e786      	b.n	8011072 <__ieee754_atan2+0x42>
 8011164:	a10a      	add	r1, pc, #40	; (adr r1, 8011190 <__ieee754_atan2+0x160>)
 8011166:	e9d1 0100 	ldrd	r0, r1, [r1]
 801116a:	e782      	b.n	8011072 <__ieee754_atan2+0x42>
 801116c:	a10c      	add	r1, pc, #48	; (adr r1, 80111a0 <__ieee754_atan2+0x170>)
 801116e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011172:	e77e      	b.n	8011072 <__ieee754_atan2+0x42>
 8011174:	2000      	movs	r0, #0
 8011176:	2100      	movs	r1, #0
 8011178:	e77b      	b.n	8011072 <__ieee754_atan2+0x42>
 801117a:	a107      	add	r1, pc, #28	; (adr r1, 8011198 <__ieee754_atan2+0x168>)
 801117c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011180:	e777      	b.n	8011072 <__ieee754_atan2+0x42>
 8011182:	bf00      	nop
 8011184:	f3af 8000 	nop.w
 8011188:	33145c07 	.word	0x33145c07
 801118c:	3ca1a626 	.word	0x3ca1a626
 8011190:	54442d18 	.word	0x54442d18
 8011194:	400921fb 	.word	0x400921fb
 8011198:	54442d18 	.word	0x54442d18
 801119c:	3ff921fb 	.word	0x3ff921fb
 80111a0:	54442d18 	.word	0x54442d18
 80111a4:	3fe921fb 	.word	0x3fe921fb
 80111a8:	080129f0 	.word	0x080129f0
 80111ac:	08012a08 	.word	0x08012a08
 80111b0:	54442d18 	.word	0x54442d18
 80111b4:	c00921fb 	.word	0xc00921fb
 80111b8:	54442d18 	.word	0x54442d18
 80111bc:	bff921fb 	.word	0xbff921fb
 80111c0:	7ff00000 	.word	0x7ff00000
 80111c4:	00000000 	.word	0x00000000

080111c8 <__ieee754_rem_pio2>:
 80111c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80111cc:	ed2d 8b02 	vpush	{d8}
 80111d0:	ec55 4b10 	vmov	r4, r5, d0
 80111d4:	4bca      	ldr	r3, [pc, #808]	; (8011500 <__ieee754_rem_pio2+0x338>)
 80111d6:	b08b      	sub	sp, #44	; 0x2c
 80111d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80111dc:	4598      	cmp	r8, r3
 80111de:	4682      	mov	sl, r0
 80111e0:	9502      	str	r5, [sp, #8]
 80111e2:	dc08      	bgt.n	80111f6 <__ieee754_rem_pio2+0x2e>
 80111e4:	2200      	movs	r2, #0
 80111e6:	2300      	movs	r3, #0
 80111e8:	ed80 0b00 	vstr	d0, [r0]
 80111ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80111f0:	f04f 0b00 	mov.w	fp, #0
 80111f4:	e028      	b.n	8011248 <__ieee754_rem_pio2+0x80>
 80111f6:	4bc3      	ldr	r3, [pc, #780]	; (8011504 <__ieee754_rem_pio2+0x33c>)
 80111f8:	4598      	cmp	r8, r3
 80111fa:	dc78      	bgt.n	80112ee <__ieee754_rem_pio2+0x126>
 80111fc:	9b02      	ldr	r3, [sp, #8]
 80111fe:	4ec2      	ldr	r6, [pc, #776]	; (8011508 <__ieee754_rem_pio2+0x340>)
 8011200:	2b00      	cmp	r3, #0
 8011202:	ee10 0a10 	vmov	r0, s0
 8011206:	a3b0      	add	r3, pc, #704	; (adr r3, 80114c8 <__ieee754_rem_pio2+0x300>)
 8011208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801120c:	4629      	mov	r1, r5
 801120e:	dd39      	ble.n	8011284 <__ieee754_rem_pio2+0xbc>
 8011210:	f7ef f842 	bl	8000298 <__aeabi_dsub>
 8011214:	45b0      	cmp	r8, r6
 8011216:	4604      	mov	r4, r0
 8011218:	460d      	mov	r5, r1
 801121a:	d01b      	beq.n	8011254 <__ieee754_rem_pio2+0x8c>
 801121c:	a3ac      	add	r3, pc, #688	; (adr r3, 80114d0 <__ieee754_rem_pio2+0x308>)
 801121e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011222:	f7ef f839 	bl	8000298 <__aeabi_dsub>
 8011226:	4602      	mov	r2, r0
 8011228:	460b      	mov	r3, r1
 801122a:	e9ca 2300 	strd	r2, r3, [sl]
 801122e:	4620      	mov	r0, r4
 8011230:	4629      	mov	r1, r5
 8011232:	f7ef f831 	bl	8000298 <__aeabi_dsub>
 8011236:	a3a6      	add	r3, pc, #664	; (adr r3, 80114d0 <__ieee754_rem_pio2+0x308>)
 8011238:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123c:	f7ef f82c 	bl	8000298 <__aeabi_dsub>
 8011240:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011244:	f04f 0b01 	mov.w	fp, #1
 8011248:	4658      	mov	r0, fp
 801124a:	b00b      	add	sp, #44	; 0x2c
 801124c:	ecbd 8b02 	vpop	{d8}
 8011250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011254:	a3a0      	add	r3, pc, #640	; (adr r3, 80114d8 <__ieee754_rem_pio2+0x310>)
 8011256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801125a:	f7ef f81d 	bl	8000298 <__aeabi_dsub>
 801125e:	a3a0      	add	r3, pc, #640	; (adr r3, 80114e0 <__ieee754_rem_pio2+0x318>)
 8011260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011264:	4604      	mov	r4, r0
 8011266:	460d      	mov	r5, r1
 8011268:	f7ef f816 	bl	8000298 <__aeabi_dsub>
 801126c:	4602      	mov	r2, r0
 801126e:	460b      	mov	r3, r1
 8011270:	e9ca 2300 	strd	r2, r3, [sl]
 8011274:	4620      	mov	r0, r4
 8011276:	4629      	mov	r1, r5
 8011278:	f7ef f80e 	bl	8000298 <__aeabi_dsub>
 801127c:	a398      	add	r3, pc, #608	; (adr r3, 80114e0 <__ieee754_rem_pio2+0x318>)
 801127e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011282:	e7db      	b.n	801123c <__ieee754_rem_pio2+0x74>
 8011284:	f7ef f80a 	bl	800029c <__adddf3>
 8011288:	45b0      	cmp	r8, r6
 801128a:	4604      	mov	r4, r0
 801128c:	460d      	mov	r5, r1
 801128e:	d016      	beq.n	80112be <__ieee754_rem_pio2+0xf6>
 8011290:	a38f      	add	r3, pc, #572	; (adr r3, 80114d0 <__ieee754_rem_pio2+0x308>)
 8011292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011296:	f7ef f801 	bl	800029c <__adddf3>
 801129a:	4602      	mov	r2, r0
 801129c:	460b      	mov	r3, r1
 801129e:	e9ca 2300 	strd	r2, r3, [sl]
 80112a2:	4620      	mov	r0, r4
 80112a4:	4629      	mov	r1, r5
 80112a6:	f7ee fff7 	bl	8000298 <__aeabi_dsub>
 80112aa:	a389      	add	r3, pc, #548	; (adr r3, 80114d0 <__ieee754_rem_pio2+0x308>)
 80112ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b0:	f7ee fff4 	bl	800029c <__adddf3>
 80112b4:	f04f 3bff 	mov.w	fp, #4294967295
 80112b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80112bc:	e7c4      	b.n	8011248 <__ieee754_rem_pio2+0x80>
 80112be:	a386      	add	r3, pc, #536	; (adr r3, 80114d8 <__ieee754_rem_pio2+0x310>)
 80112c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112c4:	f7ee ffea 	bl	800029c <__adddf3>
 80112c8:	a385      	add	r3, pc, #532	; (adr r3, 80114e0 <__ieee754_rem_pio2+0x318>)
 80112ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ce:	4604      	mov	r4, r0
 80112d0:	460d      	mov	r5, r1
 80112d2:	f7ee ffe3 	bl	800029c <__adddf3>
 80112d6:	4602      	mov	r2, r0
 80112d8:	460b      	mov	r3, r1
 80112da:	e9ca 2300 	strd	r2, r3, [sl]
 80112de:	4620      	mov	r0, r4
 80112e0:	4629      	mov	r1, r5
 80112e2:	f7ee ffd9 	bl	8000298 <__aeabi_dsub>
 80112e6:	a37e      	add	r3, pc, #504	; (adr r3, 80114e0 <__ieee754_rem_pio2+0x318>)
 80112e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ec:	e7e0      	b.n	80112b0 <__ieee754_rem_pio2+0xe8>
 80112ee:	4b87      	ldr	r3, [pc, #540]	; (801150c <__ieee754_rem_pio2+0x344>)
 80112f0:	4598      	cmp	r8, r3
 80112f2:	f300 80d9 	bgt.w	80114a8 <__ieee754_rem_pio2+0x2e0>
 80112f6:	f000 ffef 	bl	80122d8 <fabs>
 80112fa:	ec55 4b10 	vmov	r4, r5, d0
 80112fe:	ee10 0a10 	vmov	r0, s0
 8011302:	a379      	add	r3, pc, #484	; (adr r3, 80114e8 <__ieee754_rem_pio2+0x320>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	4629      	mov	r1, r5
 801130a:	f7ef f97d 	bl	8000608 <__aeabi_dmul>
 801130e:	4b80      	ldr	r3, [pc, #512]	; (8011510 <__ieee754_rem_pio2+0x348>)
 8011310:	2200      	movs	r2, #0
 8011312:	f7ee ffc3 	bl	800029c <__adddf3>
 8011316:	f7ef fc27 	bl	8000b68 <__aeabi_d2iz>
 801131a:	4683      	mov	fp, r0
 801131c:	f7ef f90a 	bl	8000534 <__aeabi_i2d>
 8011320:	4602      	mov	r2, r0
 8011322:	460b      	mov	r3, r1
 8011324:	ec43 2b18 	vmov	d8, r2, r3
 8011328:	a367      	add	r3, pc, #412	; (adr r3, 80114c8 <__ieee754_rem_pio2+0x300>)
 801132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801132e:	f7ef f96b 	bl	8000608 <__aeabi_dmul>
 8011332:	4602      	mov	r2, r0
 8011334:	460b      	mov	r3, r1
 8011336:	4620      	mov	r0, r4
 8011338:	4629      	mov	r1, r5
 801133a:	f7ee ffad 	bl	8000298 <__aeabi_dsub>
 801133e:	a364      	add	r3, pc, #400	; (adr r3, 80114d0 <__ieee754_rem_pio2+0x308>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	4606      	mov	r6, r0
 8011346:	460f      	mov	r7, r1
 8011348:	ec51 0b18 	vmov	r0, r1, d8
 801134c:	f7ef f95c 	bl	8000608 <__aeabi_dmul>
 8011350:	f1bb 0f1f 	cmp.w	fp, #31
 8011354:	4604      	mov	r4, r0
 8011356:	460d      	mov	r5, r1
 8011358:	dc0d      	bgt.n	8011376 <__ieee754_rem_pio2+0x1ae>
 801135a:	4b6e      	ldr	r3, [pc, #440]	; (8011514 <__ieee754_rem_pio2+0x34c>)
 801135c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8011360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011364:	4543      	cmp	r3, r8
 8011366:	d006      	beq.n	8011376 <__ieee754_rem_pio2+0x1ae>
 8011368:	4622      	mov	r2, r4
 801136a:	462b      	mov	r3, r5
 801136c:	4630      	mov	r0, r6
 801136e:	4639      	mov	r1, r7
 8011370:	f7ee ff92 	bl	8000298 <__aeabi_dsub>
 8011374:	e00f      	b.n	8011396 <__ieee754_rem_pio2+0x1ce>
 8011376:	462b      	mov	r3, r5
 8011378:	4622      	mov	r2, r4
 801137a:	4630      	mov	r0, r6
 801137c:	4639      	mov	r1, r7
 801137e:	f7ee ff8b 	bl	8000298 <__aeabi_dsub>
 8011382:	ea4f 5328 	mov.w	r3, r8, asr #20
 8011386:	9303      	str	r3, [sp, #12]
 8011388:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801138c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8011390:	f1b8 0f10 	cmp.w	r8, #16
 8011394:	dc02      	bgt.n	801139c <__ieee754_rem_pio2+0x1d4>
 8011396:	e9ca 0100 	strd	r0, r1, [sl]
 801139a:	e039      	b.n	8011410 <__ieee754_rem_pio2+0x248>
 801139c:	a34e      	add	r3, pc, #312	; (adr r3, 80114d8 <__ieee754_rem_pio2+0x310>)
 801139e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113a2:	ec51 0b18 	vmov	r0, r1, d8
 80113a6:	f7ef f92f 	bl	8000608 <__aeabi_dmul>
 80113aa:	4604      	mov	r4, r0
 80113ac:	460d      	mov	r5, r1
 80113ae:	4602      	mov	r2, r0
 80113b0:	460b      	mov	r3, r1
 80113b2:	4630      	mov	r0, r6
 80113b4:	4639      	mov	r1, r7
 80113b6:	f7ee ff6f 	bl	8000298 <__aeabi_dsub>
 80113ba:	4602      	mov	r2, r0
 80113bc:	460b      	mov	r3, r1
 80113be:	4680      	mov	r8, r0
 80113c0:	4689      	mov	r9, r1
 80113c2:	4630      	mov	r0, r6
 80113c4:	4639      	mov	r1, r7
 80113c6:	f7ee ff67 	bl	8000298 <__aeabi_dsub>
 80113ca:	4622      	mov	r2, r4
 80113cc:	462b      	mov	r3, r5
 80113ce:	f7ee ff63 	bl	8000298 <__aeabi_dsub>
 80113d2:	a343      	add	r3, pc, #268	; (adr r3, 80114e0 <__ieee754_rem_pio2+0x318>)
 80113d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d8:	4604      	mov	r4, r0
 80113da:	460d      	mov	r5, r1
 80113dc:	ec51 0b18 	vmov	r0, r1, d8
 80113e0:	f7ef f912 	bl	8000608 <__aeabi_dmul>
 80113e4:	4622      	mov	r2, r4
 80113e6:	462b      	mov	r3, r5
 80113e8:	f7ee ff56 	bl	8000298 <__aeabi_dsub>
 80113ec:	4602      	mov	r2, r0
 80113ee:	460b      	mov	r3, r1
 80113f0:	4604      	mov	r4, r0
 80113f2:	460d      	mov	r5, r1
 80113f4:	4640      	mov	r0, r8
 80113f6:	4649      	mov	r1, r9
 80113f8:	f7ee ff4e 	bl	8000298 <__aeabi_dsub>
 80113fc:	9a03      	ldr	r2, [sp, #12]
 80113fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8011402:	1ad3      	subs	r3, r2, r3
 8011404:	2b31      	cmp	r3, #49	; 0x31
 8011406:	dc24      	bgt.n	8011452 <__ieee754_rem_pio2+0x28a>
 8011408:	e9ca 0100 	strd	r0, r1, [sl]
 801140c:	4646      	mov	r6, r8
 801140e:	464f      	mov	r7, r9
 8011410:	e9da 8900 	ldrd	r8, r9, [sl]
 8011414:	4630      	mov	r0, r6
 8011416:	4642      	mov	r2, r8
 8011418:	464b      	mov	r3, r9
 801141a:	4639      	mov	r1, r7
 801141c:	f7ee ff3c 	bl	8000298 <__aeabi_dsub>
 8011420:	462b      	mov	r3, r5
 8011422:	4622      	mov	r2, r4
 8011424:	f7ee ff38 	bl	8000298 <__aeabi_dsub>
 8011428:	9b02      	ldr	r3, [sp, #8]
 801142a:	2b00      	cmp	r3, #0
 801142c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011430:	f6bf af0a 	bge.w	8011248 <__ieee754_rem_pio2+0x80>
 8011434:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011438:	f8ca 3004 	str.w	r3, [sl, #4]
 801143c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011440:	f8ca 8000 	str.w	r8, [sl]
 8011444:	f8ca 0008 	str.w	r0, [sl, #8]
 8011448:	f8ca 300c 	str.w	r3, [sl, #12]
 801144c:	f1cb 0b00 	rsb	fp, fp, #0
 8011450:	e6fa      	b.n	8011248 <__ieee754_rem_pio2+0x80>
 8011452:	a327      	add	r3, pc, #156	; (adr r3, 80114f0 <__ieee754_rem_pio2+0x328>)
 8011454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011458:	ec51 0b18 	vmov	r0, r1, d8
 801145c:	f7ef f8d4 	bl	8000608 <__aeabi_dmul>
 8011460:	4604      	mov	r4, r0
 8011462:	460d      	mov	r5, r1
 8011464:	4602      	mov	r2, r0
 8011466:	460b      	mov	r3, r1
 8011468:	4640      	mov	r0, r8
 801146a:	4649      	mov	r1, r9
 801146c:	f7ee ff14 	bl	8000298 <__aeabi_dsub>
 8011470:	4602      	mov	r2, r0
 8011472:	460b      	mov	r3, r1
 8011474:	4606      	mov	r6, r0
 8011476:	460f      	mov	r7, r1
 8011478:	4640      	mov	r0, r8
 801147a:	4649      	mov	r1, r9
 801147c:	f7ee ff0c 	bl	8000298 <__aeabi_dsub>
 8011480:	4622      	mov	r2, r4
 8011482:	462b      	mov	r3, r5
 8011484:	f7ee ff08 	bl	8000298 <__aeabi_dsub>
 8011488:	a31b      	add	r3, pc, #108	; (adr r3, 80114f8 <__ieee754_rem_pio2+0x330>)
 801148a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801148e:	4604      	mov	r4, r0
 8011490:	460d      	mov	r5, r1
 8011492:	ec51 0b18 	vmov	r0, r1, d8
 8011496:	f7ef f8b7 	bl	8000608 <__aeabi_dmul>
 801149a:	4622      	mov	r2, r4
 801149c:	462b      	mov	r3, r5
 801149e:	f7ee fefb 	bl	8000298 <__aeabi_dsub>
 80114a2:	4604      	mov	r4, r0
 80114a4:	460d      	mov	r5, r1
 80114a6:	e75f      	b.n	8011368 <__ieee754_rem_pio2+0x1a0>
 80114a8:	4b1b      	ldr	r3, [pc, #108]	; (8011518 <__ieee754_rem_pio2+0x350>)
 80114aa:	4598      	cmp	r8, r3
 80114ac:	dd36      	ble.n	801151c <__ieee754_rem_pio2+0x354>
 80114ae:	ee10 2a10 	vmov	r2, s0
 80114b2:	462b      	mov	r3, r5
 80114b4:	4620      	mov	r0, r4
 80114b6:	4629      	mov	r1, r5
 80114b8:	f7ee feee 	bl	8000298 <__aeabi_dsub>
 80114bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80114c0:	e9ca 0100 	strd	r0, r1, [sl]
 80114c4:	e694      	b.n	80111f0 <__ieee754_rem_pio2+0x28>
 80114c6:	bf00      	nop
 80114c8:	54400000 	.word	0x54400000
 80114cc:	3ff921fb 	.word	0x3ff921fb
 80114d0:	1a626331 	.word	0x1a626331
 80114d4:	3dd0b461 	.word	0x3dd0b461
 80114d8:	1a600000 	.word	0x1a600000
 80114dc:	3dd0b461 	.word	0x3dd0b461
 80114e0:	2e037073 	.word	0x2e037073
 80114e4:	3ba3198a 	.word	0x3ba3198a
 80114e8:	6dc9c883 	.word	0x6dc9c883
 80114ec:	3fe45f30 	.word	0x3fe45f30
 80114f0:	2e000000 	.word	0x2e000000
 80114f4:	3ba3198a 	.word	0x3ba3198a
 80114f8:	252049c1 	.word	0x252049c1
 80114fc:	397b839a 	.word	0x397b839a
 8011500:	3fe921fb 	.word	0x3fe921fb
 8011504:	4002d97b 	.word	0x4002d97b
 8011508:	3ff921fb 	.word	0x3ff921fb
 801150c:	413921fb 	.word	0x413921fb
 8011510:	3fe00000 	.word	0x3fe00000
 8011514:	08012a20 	.word	0x08012a20
 8011518:	7fefffff 	.word	0x7fefffff
 801151c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011520:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8011524:	ee10 0a10 	vmov	r0, s0
 8011528:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801152c:	ee10 6a10 	vmov	r6, s0
 8011530:	460f      	mov	r7, r1
 8011532:	f7ef fb19 	bl	8000b68 <__aeabi_d2iz>
 8011536:	f7ee fffd 	bl	8000534 <__aeabi_i2d>
 801153a:	4602      	mov	r2, r0
 801153c:	460b      	mov	r3, r1
 801153e:	4630      	mov	r0, r6
 8011540:	4639      	mov	r1, r7
 8011542:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8011546:	f7ee fea7 	bl	8000298 <__aeabi_dsub>
 801154a:	4b23      	ldr	r3, [pc, #140]	; (80115d8 <__ieee754_rem_pio2+0x410>)
 801154c:	2200      	movs	r2, #0
 801154e:	f7ef f85b 	bl	8000608 <__aeabi_dmul>
 8011552:	460f      	mov	r7, r1
 8011554:	4606      	mov	r6, r0
 8011556:	f7ef fb07 	bl	8000b68 <__aeabi_d2iz>
 801155a:	f7ee ffeb 	bl	8000534 <__aeabi_i2d>
 801155e:	4602      	mov	r2, r0
 8011560:	460b      	mov	r3, r1
 8011562:	4630      	mov	r0, r6
 8011564:	4639      	mov	r1, r7
 8011566:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801156a:	f7ee fe95 	bl	8000298 <__aeabi_dsub>
 801156e:	4b1a      	ldr	r3, [pc, #104]	; (80115d8 <__ieee754_rem_pio2+0x410>)
 8011570:	2200      	movs	r2, #0
 8011572:	f7ef f849 	bl	8000608 <__aeabi_dmul>
 8011576:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801157a:	ad04      	add	r5, sp, #16
 801157c:	f04f 0803 	mov.w	r8, #3
 8011580:	46a9      	mov	r9, r5
 8011582:	2600      	movs	r6, #0
 8011584:	2700      	movs	r7, #0
 8011586:	4632      	mov	r2, r6
 8011588:	463b      	mov	r3, r7
 801158a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801158e:	46c3      	mov	fp, r8
 8011590:	3d08      	subs	r5, #8
 8011592:	f108 38ff 	add.w	r8, r8, #4294967295
 8011596:	f7ef fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 801159a:	2800      	cmp	r0, #0
 801159c:	d1f3      	bne.n	8011586 <__ieee754_rem_pio2+0x3be>
 801159e:	4b0f      	ldr	r3, [pc, #60]	; (80115dc <__ieee754_rem_pio2+0x414>)
 80115a0:	9301      	str	r3, [sp, #4]
 80115a2:	2302      	movs	r3, #2
 80115a4:	9300      	str	r3, [sp, #0]
 80115a6:	4622      	mov	r2, r4
 80115a8:	465b      	mov	r3, fp
 80115aa:	4651      	mov	r1, sl
 80115ac:	4648      	mov	r0, r9
 80115ae:	f000 f8e3 	bl	8011778 <__kernel_rem_pio2>
 80115b2:	9b02      	ldr	r3, [sp, #8]
 80115b4:	2b00      	cmp	r3, #0
 80115b6:	4683      	mov	fp, r0
 80115b8:	f6bf ae46 	bge.w	8011248 <__ieee754_rem_pio2+0x80>
 80115bc:	e9da 2100 	ldrd	r2, r1, [sl]
 80115c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115c4:	e9ca 2300 	strd	r2, r3, [sl]
 80115c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80115cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80115d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80115d4:	e73a      	b.n	801144c <__ieee754_rem_pio2+0x284>
 80115d6:	bf00      	nop
 80115d8:	41700000 	.word	0x41700000
 80115dc:	08012aa0 	.word	0x08012aa0

080115e0 <__ieee754_sqrtf>:
 80115e0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80115e4:	4770      	bx	lr
	...

080115e8 <__kernel_cos>:
 80115e8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115ec:	ec57 6b10 	vmov	r6, r7, d0
 80115f0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80115f4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80115f8:	ed8d 1b00 	vstr	d1, [sp]
 80115fc:	da07      	bge.n	801160e <__kernel_cos+0x26>
 80115fe:	ee10 0a10 	vmov	r0, s0
 8011602:	4639      	mov	r1, r7
 8011604:	f7ef fab0 	bl	8000b68 <__aeabi_d2iz>
 8011608:	2800      	cmp	r0, #0
 801160a:	f000 8088 	beq.w	801171e <__kernel_cos+0x136>
 801160e:	4632      	mov	r2, r6
 8011610:	463b      	mov	r3, r7
 8011612:	4630      	mov	r0, r6
 8011614:	4639      	mov	r1, r7
 8011616:	f7ee fff7 	bl	8000608 <__aeabi_dmul>
 801161a:	4b51      	ldr	r3, [pc, #324]	; (8011760 <__kernel_cos+0x178>)
 801161c:	2200      	movs	r2, #0
 801161e:	4604      	mov	r4, r0
 8011620:	460d      	mov	r5, r1
 8011622:	f7ee fff1 	bl	8000608 <__aeabi_dmul>
 8011626:	a340      	add	r3, pc, #256	; (adr r3, 8011728 <__kernel_cos+0x140>)
 8011628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801162c:	4682      	mov	sl, r0
 801162e:	468b      	mov	fp, r1
 8011630:	4620      	mov	r0, r4
 8011632:	4629      	mov	r1, r5
 8011634:	f7ee ffe8 	bl	8000608 <__aeabi_dmul>
 8011638:	a33d      	add	r3, pc, #244	; (adr r3, 8011730 <__kernel_cos+0x148>)
 801163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801163e:	f7ee fe2d 	bl	800029c <__adddf3>
 8011642:	4622      	mov	r2, r4
 8011644:	462b      	mov	r3, r5
 8011646:	f7ee ffdf 	bl	8000608 <__aeabi_dmul>
 801164a:	a33b      	add	r3, pc, #236	; (adr r3, 8011738 <__kernel_cos+0x150>)
 801164c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011650:	f7ee fe22 	bl	8000298 <__aeabi_dsub>
 8011654:	4622      	mov	r2, r4
 8011656:	462b      	mov	r3, r5
 8011658:	f7ee ffd6 	bl	8000608 <__aeabi_dmul>
 801165c:	a338      	add	r3, pc, #224	; (adr r3, 8011740 <__kernel_cos+0x158>)
 801165e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011662:	f7ee fe1b 	bl	800029c <__adddf3>
 8011666:	4622      	mov	r2, r4
 8011668:	462b      	mov	r3, r5
 801166a:	f7ee ffcd 	bl	8000608 <__aeabi_dmul>
 801166e:	a336      	add	r3, pc, #216	; (adr r3, 8011748 <__kernel_cos+0x160>)
 8011670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011674:	f7ee fe10 	bl	8000298 <__aeabi_dsub>
 8011678:	4622      	mov	r2, r4
 801167a:	462b      	mov	r3, r5
 801167c:	f7ee ffc4 	bl	8000608 <__aeabi_dmul>
 8011680:	a333      	add	r3, pc, #204	; (adr r3, 8011750 <__kernel_cos+0x168>)
 8011682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011686:	f7ee fe09 	bl	800029c <__adddf3>
 801168a:	4622      	mov	r2, r4
 801168c:	462b      	mov	r3, r5
 801168e:	f7ee ffbb 	bl	8000608 <__aeabi_dmul>
 8011692:	4622      	mov	r2, r4
 8011694:	462b      	mov	r3, r5
 8011696:	f7ee ffb7 	bl	8000608 <__aeabi_dmul>
 801169a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801169e:	4604      	mov	r4, r0
 80116a0:	460d      	mov	r5, r1
 80116a2:	4630      	mov	r0, r6
 80116a4:	4639      	mov	r1, r7
 80116a6:	f7ee ffaf 	bl	8000608 <__aeabi_dmul>
 80116aa:	460b      	mov	r3, r1
 80116ac:	4602      	mov	r2, r0
 80116ae:	4629      	mov	r1, r5
 80116b0:	4620      	mov	r0, r4
 80116b2:	f7ee fdf1 	bl	8000298 <__aeabi_dsub>
 80116b6:	4b2b      	ldr	r3, [pc, #172]	; (8011764 <__kernel_cos+0x17c>)
 80116b8:	4598      	cmp	r8, r3
 80116ba:	4606      	mov	r6, r0
 80116bc:	460f      	mov	r7, r1
 80116be:	dc10      	bgt.n	80116e2 <__kernel_cos+0xfa>
 80116c0:	4602      	mov	r2, r0
 80116c2:	460b      	mov	r3, r1
 80116c4:	4650      	mov	r0, sl
 80116c6:	4659      	mov	r1, fp
 80116c8:	f7ee fde6 	bl	8000298 <__aeabi_dsub>
 80116cc:	460b      	mov	r3, r1
 80116ce:	4926      	ldr	r1, [pc, #152]	; (8011768 <__kernel_cos+0x180>)
 80116d0:	4602      	mov	r2, r0
 80116d2:	2000      	movs	r0, #0
 80116d4:	f7ee fde0 	bl	8000298 <__aeabi_dsub>
 80116d8:	ec41 0b10 	vmov	d0, r0, r1
 80116dc:	b003      	add	sp, #12
 80116de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80116e2:	4b22      	ldr	r3, [pc, #136]	; (801176c <__kernel_cos+0x184>)
 80116e4:	4920      	ldr	r1, [pc, #128]	; (8011768 <__kernel_cos+0x180>)
 80116e6:	4598      	cmp	r8, r3
 80116e8:	bfcc      	ite	gt
 80116ea:	4d21      	ldrgt	r5, [pc, #132]	; (8011770 <__kernel_cos+0x188>)
 80116ec:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80116f0:	2400      	movs	r4, #0
 80116f2:	4622      	mov	r2, r4
 80116f4:	462b      	mov	r3, r5
 80116f6:	2000      	movs	r0, #0
 80116f8:	f7ee fdce 	bl	8000298 <__aeabi_dsub>
 80116fc:	4622      	mov	r2, r4
 80116fe:	4680      	mov	r8, r0
 8011700:	4689      	mov	r9, r1
 8011702:	462b      	mov	r3, r5
 8011704:	4650      	mov	r0, sl
 8011706:	4659      	mov	r1, fp
 8011708:	f7ee fdc6 	bl	8000298 <__aeabi_dsub>
 801170c:	4632      	mov	r2, r6
 801170e:	463b      	mov	r3, r7
 8011710:	f7ee fdc2 	bl	8000298 <__aeabi_dsub>
 8011714:	4602      	mov	r2, r0
 8011716:	460b      	mov	r3, r1
 8011718:	4640      	mov	r0, r8
 801171a:	4649      	mov	r1, r9
 801171c:	e7da      	b.n	80116d4 <__kernel_cos+0xec>
 801171e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011758 <__kernel_cos+0x170>
 8011722:	e7db      	b.n	80116dc <__kernel_cos+0xf4>
 8011724:	f3af 8000 	nop.w
 8011728:	be8838d4 	.word	0xbe8838d4
 801172c:	bda8fae9 	.word	0xbda8fae9
 8011730:	bdb4b1c4 	.word	0xbdb4b1c4
 8011734:	3e21ee9e 	.word	0x3e21ee9e
 8011738:	809c52ad 	.word	0x809c52ad
 801173c:	3e927e4f 	.word	0x3e927e4f
 8011740:	19cb1590 	.word	0x19cb1590
 8011744:	3efa01a0 	.word	0x3efa01a0
 8011748:	16c15177 	.word	0x16c15177
 801174c:	3f56c16c 	.word	0x3f56c16c
 8011750:	5555554c 	.word	0x5555554c
 8011754:	3fa55555 	.word	0x3fa55555
 8011758:	00000000 	.word	0x00000000
 801175c:	3ff00000 	.word	0x3ff00000
 8011760:	3fe00000 	.word	0x3fe00000
 8011764:	3fd33332 	.word	0x3fd33332
 8011768:	3ff00000 	.word	0x3ff00000
 801176c:	3fe90000 	.word	0x3fe90000
 8011770:	3fd20000 	.word	0x3fd20000
 8011774:	00000000 	.word	0x00000000

08011778 <__kernel_rem_pio2>:
 8011778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801177c:	ed2d 8b02 	vpush	{d8}
 8011780:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011784:	f112 0f14 	cmn.w	r2, #20
 8011788:	9308      	str	r3, [sp, #32]
 801178a:	9101      	str	r1, [sp, #4]
 801178c:	4bc4      	ldr	r3, [pc, #784]	; (8011aa0 <__kernel_rem_pio2+0x328>)
 801178e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011790:	900b      	str	r0, [sp, #44]	; 0x2c
 8011792:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011796:	9302      	str	r3, [sp, #8]
 8011798:	9b08      	ldr	r3, [sp, #32]
 801179a:	f103 33ff 	add.w	r3, r3, #4294967295
 801179e:	bfa8      	it	ge
 80117a0:	1ed4      	subge	r4, r2, #3
 80117a2:	9306      	str	r3, [sp, #24]
 80117a4:	bfb2      	itee	lt
 80117a6:	2400      	movlt	r4, #0
 80117a8:	2318      	movge	r3, #24
 80117aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80117ae:	f06f 0317 	mvn.w	r3, #23
 80117b2:	fb04 3303 	mla	r3, r4, r3, r3
 80117b6:	eb03 0a02 	add.w	sl, r3, r2
 80117ba:	9b02      	ldr	r3, [sp, #8]
 80117bc:	9a06      	ldr	r2, [sp, #24]
 80117be:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011a90 <__kernel_rem_pio2+0x318>
 80117c2:	eb03 0802 	add.w	r8, r3, r2
 80117c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80117c8:	1aa7      	subs	r7, r4, r2
 80117ca:	ae22      	add	r6, sp, #136	; 0x88
 80117cc:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80117d0:	2500      	movs	r5, #0
 80117d2:	4545      	cmp	r5, r8
 80117d4:	dd13      	ble.n	80117fe <__kernel_rem_pio2+0x86>
 80117d6:	9b08      	ldr	r3, [sp, #32]
 80117d8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011a90 <__kernel_rem_pio2+0x318>
 80117dc:	aa22      	add	r2, sp, #136	; 0x88
 80117de:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80117e2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80117e6:	f04f 0800 	mov.w	r8, #0
 80117ea:	9b02      	ldr	r3, [sp, #8]
 80117ec:	4598      	cmp	r8, r3
 80117ee:	dc2f      	bgt.n	8011850 <__kernel_rem_pio2+0xd8>
 80117f0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80117f4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80117f8:	462f      	mov	r7, r5
 80117fa:	2600      	movs	r6, #0
 80117fc:	e01b      	b.n	8011836 <__kernel_rem_pio2+0xbe>
 80117fe:	42ef      	cmn	r7, r5
 8011800:	d407      	bmi.n	8011812 <__kernel_rem_pio2+0x9a>
 8011802:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011806:	f7ee fe95 	bl	8000534 <__aeabi_i2d>
 801180a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801180e:	3501      	adds	r5, #1
 8011810:	e7df      	b.n	80117d2 <__kernel_rem_pio2+0x5a>
 8011812:	ec51 0b18 	vmov	r0, r1, d8
 8011816:	e7f8      	b.n	801180a <__kernel_rem_pio2+0x92>
 8011818:	e9d7 2300 	ldrd	r2, r3, [r7]
 801181c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011820:	f7ee fef2 	bl	8000608 <__aeabi_dmul>
 8011824:	4602      	mov	r2, r0
 8011826:	460b      	mov	r3, r1
 8011828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801182c:	f7ee fd36 	bl	800029c <__adddf3>
 8011830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011834:	3601      	adds	r6, #1
 8011836:	9b06      	ldr	r3, [sp, #24]
 8011838:	429e      	cmp	r6, r3
 801183a:	f1a7 0708 	sub.w	r7, r7, #8
 801183e:	ddeb      	ble.n	8011818 <__kernel_rem_pio2+0xa0>
 8011840:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011844:	f108 0801 	add.w	r8, r8, #1
 8011848:	ecab 7b02 	vstmia	fp!, {d7}
 801184c:	3508      	adds	r5, #8
 801184e:	e7cc      	b.n	80117ea <__kernel_rem_pio2+0x72>
 8011850:	9b02      	ldr	r3, [sp, #8]
 8011852:	aa0e      	add	r2, sp, #56	; 0x38
 8011854:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011858:	930d      	str	r3, [sp, #52]	; 0x34
 801185a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 801185c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011860:	9c02      	ldr	r4, [sp, #8]
 8011862:	930c      	str	r3, [sp, #48]	; 0x30
 8011864:	00e3      	lsls	r3, r4, #3
 8011866:	930a      	str	r3, [sp, #40]	; 0x28
 8011868:	ab9a      	add	r3, sp, #616	; 0x268
 801186a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801186e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011872:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011876:	ab72      	add	r3, sp, #456	; 0x1c8
 8011878:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 801187c:	46c3      	mov	fp, r8
 801187e:	46a1      	mov	r9, r4
 8011880:	f1b9 0f00 	cmp.w	r9, #0
 8011884:	f1a5 0508 	sub.w	r5, r5, #8
 8011888:	dc77      	bgt.n	801197a <__kernel_rem_pio2+0x202>
 801188a:	ec47 6b10 	vmov	d0, r6, r7
 801188e:	4650      	mov	r0, sl
 8011890:	f000 fdae 	bl	80123f0 <scalbn>
 8011894:	ec57 6b10 	vmov	r6, r7, d0
 8011898:	2200      	movs	r2, #0
 801189a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 801189e:	ee10 0a10 	vmov	r0, s0
 80118a2:	4639      	mov	r1, r7
 80118a4:	f7ee feb0 	bl	8000608 <__aeabi_dmul>
 80118a8:	ec41 0b10 	vmov	d0, r0, r1
 80118ac:	f000 fd20 	bl	80122f0 <floor>
 80118b0:	4b7c      	ldr	r3, [pc, #496]	; (8011aa4 <__kernel_rem_pio2+0x32c>)
 80118b2:	ec51 0b10 	vmov	r0, r1, d0
 80118b6:	2200      	movs	r2, #0
 80118b8:	f7ee fea6 	bl	8000608 <__aeabi_dmul>
 80118bc:	4602      	mov	r2, r0
 80118be:	460b      	mov	r3, r1
 80118c0:	4630      	mov	r0, r6
 80118c2:	4639      	mov	r1, r7
 80118c4:	f7ee fce8 	bl	8000298 <__aeabi_dsub>
 80118c8:	460f      	mov	r7, r1
 80118ca:	4606      	mov	r6, r0
 80118cc:	f7ef f94c 	bl	8000b68 <__aeabi_d2iz>
 80118d0:	9004      	str	r0, [sp, #16]
 80118d2:	f7ee fe2f 	bl	8000534 <__aeabi_i2d>
 80118d6:	4602      	mov	r2, r0
 80118d8:	460b      	mov	r3, r1
 80118da:	4630      	mov	r0, r6
 80118dc:	4639      	mov	r1, r7
 80118de:	f7ee fcdb 	bl	8000298 <__aeabi_dsub>
 80118e2:	f1ba 0f00 	cmp.w	sl, #0
 80118e6:	4606      	mov	r6, r0
 80118e8:	460f      	mov	r7, r1
 80118ea:	dd6d      	ble.n	80119c8 <__kernel_rem_pio2+0x250>
 80118ec:	1e62      	subs	r2, r4, #1
 80118ee:	ab0e      	add	r3, sp, #56	; 0x38
 80118f0:	9d04      	ldr	r5, [sp, #16]
 80118f2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80118f6:	f1ca 0118 	rsb	r1, sl, #24
 80118fa:	fa40 f301 	asr.w	r3, r0, r1
 80118fe:	441d      	add	r5, r3
 8011900:	408b      	lsls	r3, r1
 8011902:	1ac0      	subs	r0, r0, r3
 8011904:	ab0e      	add	r3, sp, #56	; 0x38
 8011906:	9504      	str	r5, [sp, #16]
 8011908:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 801190c:	f1ca 0317 	rsb	r3, sl, #23
 8011910:	fa40 fb03 	asr.w	fp, r0, r3
 8011914:	f1bb 0f00 	cmp.w	fp, #0
 8011918:	dd65      	ble.n	80119e6 <__kernel_rem_pio2+0x26e>
 801191a:	9b04      	ldr	r3, [sp, #16]
 801191c:	2200      	movs	r2, #0
 801191e:	3301      	adds	r3, #1
 8011920:	9304      	str	r3, [sp, #16]
 8011922:	4615      	mov	r5, r2
 8011924:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011928:	4294      	cmp	r4, r2
 801192a:	f300 809c 	bgt.w	8011a66 <__kernel_rem_pio2+0x2ee>
 801192e:	f1ba 0f00 	cmp.w	sl, #0
 8011932:	dd07      	ble.n	8011944 <__kernel_rem_pio2+0x1cc>
 8011934:	f1ba 0f01 	cmp.w	sl, #1
 8011938:	f000 80c0 	beq.w	8011abc <__kernel_rem_pio2+0x344>
 801193c:	f1ba 0f02 	cmp.w	sl, #2
 8011940:	f000 80c6 	beq.w	8011ad0 <__kernel_rem_pio2+0x358>
 8011944:	f1bb 0f02 	cmp.w	fp, #2
 8011948:	d14d      	bne.n	80119e6 <__kernel_rem_pio2+0x26e>
 801194a:	4632      	mov	r2, r6
 801194c:	463b      	mov	r3, r7
 801194e:	4956      	ldr	r1, [pc, #344]	; (8011aa8 <__kernel_rem_pio2+0x330>)
 8011950:	2000      	movs	r0, #0
 8011952:	f7ee fca1 	bl	8000298 <__aeabi_dsub>
 8011956:	4606      	mov	r6, r0
 8011958:	460f      	mov	r7, r1
 801195a:	2d00      	cmp	r5, #0
 801195c:	d043      	beq.n	80119e6 <__kernel_rem_pio2+0x26e>
 801195e:	4650      	mov	r0, sl
 8011960:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011a98 <__kernel_rem_pio2+0x320>
 8011964:	f000 fd44 	bl	80123f0 <scalbn>
 8011968:	4630      	mov	r0, r6
 801196a:	4639      	mov	r1, r7
 801196c:	ec53 2b10 	vmov	r2, r3, d0
 8011970:	f7ee fc92 	bl	8000298 <__aeabi_dsub>
 8011974:	4606      	mov	r6, r0
 8011976:	460f      	mov	r7, r1
 8011978:	e035      	b.n	80119e6 <__kernel_rem_pio2+0x26e>
 801197a:	4b4c      	ldr	r3, [pc, #304]	; (8011aac <__kernel_rem_pio2+0x334>)
 801197c:	2200      	movs	r2, #0
 801197e:	4630      	mov	r0, r6
 8011980:	4639      	mov	r1, r7
 8011982:	f7ee fe41 	bl	8000608 <__aeabi_dmul>
 8011986:	f7ef f8ef 	bl	8000b68 <__aeabi_d2iz>
 801198a:	f7ee fdd3 	bl	8000534 <__aeabi_i2d>
 801198e:	4602      	mov	r2, r0
 8011990:	460b      	mov	r3, r1
 8011992:	ec43 2b18 	vmov	d8, r2, r3
 8011996:	4b46      	ldr	r3, [pc, #280]	; (8011ab0 <__kernel_rem_pio2+0x338>)
 8011998:	2200      	movs	r2, #0
 801199a:	f7ee fe35 	bl	8000608 <__aeabi_dmul>
 801199e:	4602      	mov	r2, r0
 80119a0:	460b      	mov	r3, r1
 80119a2:	4630      	mov	r0, r6
 80119a4:	4639      	mov	r1, r7
 80119a6:	f7ee fc77 	bl	8000298 <__aeabi_dsub>
 80119aa:	f7ef f8dd 	bl	8000b68 <__aeabi_d2iz>
 80119ae:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119b2:	f84b 0b04 	str.w	r0, [fp], #4
 80119b6:	ec51 0b18 	vmov	r0, r1, d8
 80119ba:	f7ee fc6f 	bl	800029c <__adddf3>
 80119be:	f109 39ff 	add.w	r9, r9, #4294967295
 80119c2:	4606      	mov	r6, r0
 80119c4:	460f      	mov	r7, r1
 80119c6:	e75b      	b.n	8011880 <__kernel_rem_pio2+0x108>
 80119c8:	d106      	bne.n	80119d8 <__kernel_rem_pio2+0x260>
 80119ca:	1e63      	subs	r3, r4, #1
 80119cc:	aa0e      	add	r2, sp, #56	; 0x38
 80119ce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80119d2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80119d6:	e79d      	b.n	8011914 <__kernel_rem_pio2+0x19c>
 80119d8:	4b36      	ldr	r3, [pc, #216]	; (8011ab4 <__kernel_rem_pio2+0x33c>)
 80119da:	2200      	movs	r2, #0
 80119dc:	f7ef f89a 	bl	8000b14 <__aeabi_dcmpge>
 80119e0:	2800      	cmp	r0, #0
 80119e2:	d13d      	bne.n	8011a60 <__kernel_rem_pio2+0x2e8>
 80119e4:	4683      	mov	fp, r0
 80119e6:	2200      	movs	r2, #0
 80119e8:	2300      	movs	r3, #0
 80119ea:	4630      	mov	r0, r6
 80119ec:	4639      	mov	r1, r7
 80119ee:	f7ef f873 	bl	8000ad8 <__aeabi_dcmpeq>
 80119f2:	2800      	cmp	r0, #0
 80119f4:	f000 80c0 	beq.w	8011b78 <__kernel_rem_pio2+0x400>
 80119f8:	1e65      	subs	r5, r4, #1
 80119fa:	462b      	mov	r3, r5
 80119fc:	2200      	movs	r2, #0
 80119fe:	9902      	ldr	r1, [sp, #8]
 8011a00:	428b      	cmp	r3, r1
 8011a02:	da6c      	bge.n	8011ade <__kernel_rem_pio2+0x366>
 8011a04:	2a00      	cmp	r2, #0
 8011a06:	f000 8089 	beq.w	8011b1c <__kernel_rem_pio2+0x3a4>
 8011a0a:	ab0e      	add	r3, sp, #56	; 0x38
 8011a0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a10:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	f000 80ad 	beq.w	8011b74 <__kernel_rem_pio2+0x3fc>
 8011a1a:	4650      	mov	r0, sl
 8011a1c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011a98 <__kernel_rem_pio2+0x320>
 8011a20:	f000 fce6 	bl	80123f0 <scalbn>
 8011a24:	ab9a      	add	r3, sp, #616	; 0x268
 8011a26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a2a:	ec57 6b10 	vmov	r6, r7, d0
 8011a2e:	00ec      	lsls	r4, r5, #3
 8011a30:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011a34:	46aa      	mov	sl, r5
 8011a36:	f1ba 0f00 	cmp.w	sl, #0
 8011a3a:	f280 80d6 	bge.w	8011bea <__kernel_rem_pio2+0x472>
 8011a3e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011a90 <__kernel_rem_pio2+0x318>
 8011a42:	462e      	mov	r6, r5
 8011a44:	2e00      	cmp	r6, #0
 8011a46:	f2c0 8104 	blt.w	8011c52 <__kernel_rem_pio2+0x4da>
 8011a4a:	ab72      	add	r3, sp, #456	; 0x1c8
 8011a4c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011a50:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011ab8 <__kernel_rem_pio2+0x340>
 8011a54:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011a58:	f04f 0800 	mov.w	r8, #0
 8011a5c:	1baf      	subs	r7, r5, r6
 8011a5e:	e0ea      	b.n	8011c36 <__kernel_rem_pio2+0x4be>
 8011a60:	f04f 0b02 	mov.w	fp, #2
 8011a64:	e759      	b.n	801191a <__kernel_rem_pio2+0x1a2>
 8011a66:	f8d8 3000 	ldr.w	r3, [r8]
 8011a6a:	b955      	cbnz	r5, 8011a82 <__kernel_rem_pio2+0x30a>
 8011a6c:	b123      	cbz	r3, 8011a78 <__kernel_rem_pio2+0x300>
 8011a6e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011a72:	f8c8 3000 	str.w	r3, [r8]
 8011a76:	2301      	movs	r3, #1
 8011a78:	3201      	adds	r2, #1
 8011a7a:	f108 0804 	add.w	r8, r8, #4
 8011a7e:	461d      	mov	r5, r3
 8011a80:	e752      	b.n	8011928 <__kernel_rem_pio2+0x1b0>
 8011a82:	1acb      	subs	r3, r1, r3
 8011a84:	f8c8 3000 	str.w	r3, [r8]
 8011a88:	462b      	mov	r3, r5
 8011a8a:	e7f5      	b.n	8011a78 <__kernel_rem_pio2+0x300>
 8011a8c:	f3af 8000 	nop.w
	...
 8011a9c:	3ff00000 	.word	0x3ff00000
 8011aa0:	08012be8 	.word	0x08012be8
 8011aa4:	40200000 	.word	0x40200000
 8011aa8:	3ff00000 	.word	0x3ff00000
 8011aac:	3e700000 	.word	0x3e700000
 8011ab0:	41700000 	.word	0x41700000
 8011ab4:	3fe00000 	.word	0x3fe00000
 8011ab8:	08012ba8 	.word	0x08012ba8
 8011abc:	1e62      	subs	r2, r4, #1
 8011abe:	ab0e      	add	r3, sp, #56	; 0x38
 8011ac0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ac4:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011ac8:	a90e      	add	r1, sp, #56	; 0x38
 8011aca:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011ace:	e739      	b.n	8011944 <__kernel_rem_pio2+0x1cc>
 8011ad0:	1e62      	subs	r2, r4, #1
 8011ad2:	ab0e      	add	r3, sp, #56	; 0x38
 8011ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ad8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011adc:	e7f4      	b.n	8011ac8 <__kernel_rem_pio2+0x350>
 8011ade:	a90e      	add	r1, sp, #56	; 0x38
 8011ae0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011ae4:	3b01      	subs	r3, #1
 8011ae6:	430a      	orrs	r2, r1
 8011ae8:	e789      	b.n	80119fe <__kernel_rem_pio2+0x286>
 8011aea:	3301      	adds	r3, #1
 8011aec:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011af0:	2900      	cmp	r1, #0
 8011af2:	d0fa      	beq.n	8011aea <__kernel_rem_pio2+0x372>
 8011af4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011af6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011afa:	446a      	add	r2, sp
 8011afc:	3a98      	subs	r2, #152	; 0x98
 8011afe:	920a      	str	r2, [sp, #40]	; 0x28
 8011b00:	9a08      	ldr	r2, [sp, #32]
 8011b02:	18e3      	adds	r3, r4, r3
 8011b04:	18a5      	adds	r5, r4, r2
 8011b06:	aa22      	add	r2, sp, #136	; 0x88
 8011b08:	f104 0801 	add.w	r8, r4, #1
 8011b0c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011b10:	9304      	str	r3, [sp, #16]
 8011b12:	9b04      	ldr	r3, [sp, #16]
 8011b14:	4543      	cmp	r3, r8
 8011b16:	da04      	bge.n	8011b22 <__kernel_rem_pio2+0x3aa>
 8011b18:	461c      	mov	r4, r3
 8011b1a:	e6a3      	b.n	8011864 <__kernel_rem_pio2+0xec>
 8011b1c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b1e:	2301      	movs	r3, #1
 8011b20:	e7e4      	b.n	8011aec <__kernel_rem_pio2+0x374>
 8011b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b24:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011b28:	f7ee fd04 	bl	8000534 <__aeabi_i2d>
 8011b2c:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011b30:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b32:	46ab      	mov	fp, r5
 8011b34:	461c      	mov	r4, r3
 8011b36:	f04f 0900 	mov.w	r9, #0
 8011b3a:	2600      	movs	r6, #0
 8011b3c:	2700      	movs	r7, #0
 8011b3e:	9b06      	ldr	r3, [sp, #24]
 8011b40:	4599      	cmp	r9, r3
 8011b42:	dd06      	ble.n	8011b52 <__kernel_rem_pio2+0x3da>
 8011b44:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b46:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011b4a:	f108 0801 	add.w	r8, r8, #1
 8011b4e:	930a      	str	r3, [sp, #40]	; 0x28
 8011b50:	e7df      	b.n	8011b12 <__kernel_rem_pio2+0x39a>
 8011b52:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011b56:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011b5a:	f7ee fd55 	bl	8000608 <__aeabi_dmul>
 8011b5e:	4602      	mov	r2, r0
 8011b60:	460b      	mov	r3, r1
 8011b62:	4630      	mov	r0, r6
 8011b64:	4639      	mov	r1, r7
 8011b66:	f7ee fb99 	bl	800029c <__adddf3>
 8011b6a:	f109 0901 	add.w	r9, r9, #1
 8011b6e:	4606      	mov	r6, r0
 8011b70:	460f      	mov	r7, r1
 8011b72:	e7e4      	b.n	8011b3e <__kernel_rem_pio2+0x3c6>
 8011b74:	3d01      	subs	r5, #1
 8011b76:	e748      	b.n	8011a0a <__kernel_rem_pio2+0x292>
 8011b78:	ec47 6b10 	vmov	d0, r6, r7
 8011b7c:	f1ca 0000 	rsb	r0, sl, #0
 8011b80:	f000 fc36 	bl	80123f0 <scalbn>
 8011b84:	ec57 6b10 	vmov	r6, r7, d0
 8011b88:	4ba0      	ldr	r3, [pc, #640]	; (8011e0c <__kernel_rem_pio2+0x694>)
 8011b8a:	ee10 0a10 	vmov	r0, s0
 8011b8e:	2200      	movs	r2, #0
 8011b90:	4639      	mov	r1, r7
 8011b92:	f7ee ffbf 	bl	8000b14 <__aeabi_dcmpge>
 8011b96:	b1f8      	cbz	r0, 8011bd8 <__kernel_rem_pio2+0x460>
 8011b98:	4b9d      	ldr	r3, [pc, #628]	; (8011e10 <__kernel_rem_pio2+0x698>)
 8011b9a:	2200      	movs	r2, #0
 8011b9c:	4630      	mov	r0, r6
 8011b9e:	4639      	mov	r1, r7
 8011ba0:	f7ee fd32 	bl	8000608 <__aeabi_dmul>
 8011ba4:	f7ee ffe0 	bl	8000b68 <__aeabi_d2iz>
 8011ba8:	4680      	mov	r8, r0
 8011baa:	f7ee fcc3 	bl	8000534 <__aeabi_i2d>
 8011bae:	4b97      	ldr	r3, [pc, #604]	; (8011e0c <__kernel_rem_pio2+0x694>)
 8011bb0:	2200      	movs	r2, #0
 8011bb2:	f7ee fd29 	bl	8000608 <__aeabi_dmul>
 8011bb6:	460b      	mov	r3, r1
 8011bb8:	4602      	mov	r2, r0
 8011bba:	4639      	mov	r1, r7
 8011bbc:	4630      	mov	r0, r6
 8011bbe:	f7ee fb6b 	bl	8000298 <__aeabi_dsub>
 8011bc2:	f7ee ffd1 	bl	8000b68 <__aeabi_d2iz>
 8011bc6:	1c65      	adds	r5, r4, #1
 8011bc8:	ab0e      	add	r3, sp, #56	; 0x38
 8011bca:	f10a 0a18 	add.w	sl, sl, #24
 8011bce:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011bd2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011bd6:	e720      	b.n	8011a1a <__kernel_rem_pio2+0x2a2>
 8011bd8:	4630      	mov	r0, r6
 8011bda:	4639      	mov	r1, r7
 8011bdc:	f7ee ffc4 	bl	8000b68 <__aeabi_d2iz>
 8011be0:	ab0e      	add	r3, sp, #56	; 0x38
 8011be2:	4625      	mov	r5, r4
 8011be4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011be8:	e717      	b.n	8011a1a <__kernel_rem_pio2+0x2a2>
 8011bea:	ab0e      	add	r3, sp, #56	; 0x38
 8011bec:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011bf0:	f7ee fca0 	bl	8000534 <__aeabi_i2d>
 8011bf4:	4632      	mov	r2, r6
 8011bf6:	463b      	mov	r3, r7
 8011bf8:	f7ee fd06 	bl	8000608 <__aeabi_dmul>
 8011bfc:	4b84      	ldr	r3, [pc, #528]	; (8011e10 <__kernel_rem_pio2+0x698>)
 8011bfe:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011c02:	2200      	movs	r2, #0
 8011c04:	4630      	mov	r0, r6
 8011c06:	4639      	mov	r1, r7
 8011c08:	f7ee fcfe 	bl	8000608 <__aeabi_dmul>
 8011c0c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c10:	4606      	mov	r6, r0
 8011c12:	460f      	mov	r7, r1
 8011c14:	e70f      	b.n	8011a36 <__kernel_rem_pio2+0x2be>
 8011c16:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011c1a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011c1e:	f7ee fcf3 	bl	8000608 <__aeabi_dmul>
 8011c22:	4602      	mov	r2, r0
 8011c24:	460b      	mov	r3, r1
 8011c26:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c2a:	f7ee fb37 	bl	800029c <__adddf3>
 8011c2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c32:	f108 0801 	add.w	r8, r8, #1
 8011c36:	9b02      	ldr	r3, [sp, #8]
 8011c38:	4598      	cmp	r8, r3
 8011c3a:	dc01      	bgt.n	8011c40 <__kernel_rem_pio2+0x4c8>
 8011c3c:	45b8      	cmp	r8, r7
 8011c3e:	ddea      	ble.n	8011c16 <__kernel_rem_pio2+0x49e>
 8011c40:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011c44:	ab4a      	add	r3, sp, #296	; 0x128
 8011c46:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011c4a:	ed87 7b00 	vstr	d7, [r7]
 8011c4e:	3e01      	subs	r6, #1
 8011c50:	e6f8      	b.n	8011a44 <__kernel_rem_pio2+0x2cc>
 8011c52:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011c54:	2b02      	cmp	r3, #2
 8011c56:	dc0b      	bgt.n	8011c70 <__kernel_rem_pio2+0x4f8>
 8011c58:	2b00      	cmp	r3, #0
 8011c5a:	dc35      	bgt.n	8011cc8 <__kernel_rem_pio2+0x550>
 8011c5c:	d059      	beq.n	8011d12 <__kernel_rem_pio2+0x59a>
 8011c5e:	9b04      	ldr	r3, [sp, #16]
 8011c60:	f003 0007 	and.w	r0, r3, #7
 8011c64:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011c68:	ecbd 8b02 	vpop	{d8}
 8011c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c70:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011c72:	2b03      	cmp	r3, #3
 8011c74:	d1f3      	bne.n	8011c5e <__kernel_rem_pio2+0x4e6>
 8011c76:	ab4a      	add	r3, sp, #296	; 0x128
 8011c78:	4423      	add	r3, r4
 8011c7a:	9306      	str	r3, [sp, #24]
 8011c7c:	461c      	mov	r4, r3
 8011c7e:	469a      	mov	sl, r3
 8011c80:	9502      	str	r5, [sp, #8]
 8011c82:	9b02      	ldr	r3, [sp, #8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	f1aa 0a08 	sub.w	sl, sl, #8
 8011c8a:	dc6b      	bgt.n	8011d64 <__kernel_rem_pio2+0x5ec>
 8011c8c:	46aa      	mov	sl, r5
 8011c8e:	f1ba 0f01 	cmp.w	sl, #1
 8011c92:	f1a4 0408 	sub.w	r4, r4, #8
 8011c96:	f300 8085 	bgt.w	8011da4 <__kernel_rem_pio2+0x62c>
 8011c9a:	9c06      	ldr	r4, [sp, #24]
 8011c9c:	2000      	movs	r0, #0
 8011c9e:	3408      	adds	r4, #8
 8011ca0:	2100      	movs	r1, #0
 8011ca2:	2d01      	cmp	r5, #1
 8011ca4:	f300 809d 	bgt.w	8011de2 <__kernel_rem_pio2+0x66a>
 8011ca8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011cac:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011cb0:	f1bb 0f00 	cmp.w	fp, #0
 8011cb4:	f040 809b 	bne.w	8011dee <__kernel_rem_pio2+0x676>
 8011cb8:	9b01      	ldr	r3, [sp, #4]
 8011cba:	e9c3 5600 	strd	r5, r6, [r3]
 8011cbe:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011cc2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011cc6:	e7ca      	b.n	8011c5e <__kernel_rem_pio2+0x4e6>
 8011cc8:	3408      	adds	r4, #8
 8011cca:	ab4a      	add	r3, sp, #296	; 0x128
 8011ccc:	441c      	add	r4, r3
 8011cce:	462e      	mov	r6, r5
 8011cd0:	2000      	movs	r0, #0
 8011cd2:	2100      	movs	r1, #0
 8011cd4:	2e00      	cmp	r6, #0
 8011cd6:	da36      	bge.n	8011d46 <__kernel_rem_pio2+0x5ce>
 8011cd8:	f1bb 0f00 	cmp.w	fp, #0
 8011cdc:	d039      	beq.n	8011d52 <__kernel_rem_pio2+0x5da>
 8011cde:	4602      	mov	r2, r0
 8011ce0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011ce4:	9c01      	ldr	r4, [sp, #4]
 8011ce6:	e9c4 2300 	strd	r2, r3, [r4]
 8011cea:	4602      	mov	r2, r0
 8011cec:	460b      	mov	r3, r1
 8011cee:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011cf2:	f7ee fad1 	bl	8000298 <__aeabi_dsub>
 8011cf6:	ae4c      	add	r6, sp, #304	; 0x130
 8011cf8:	2401      	movs	r4, #1
 8011cfa:	42a5      	cmp	r5, r4
 8011cfc:	da2c      	bge.n	8011d58 <__kernel_rem_pio2+0x5e0>
 8011cfe:	f1bb 0f00 	cmp.w	fp, #0
 8011d02:	d002      	beq.n	8011d0a <__kernel_rem_pio2+0x592>
 8011d04:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d08:	4619      	mov	r1, r3
 8011d0a:	9b01      	ldr	r3, [sp, #4]
 8011d0c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d10:	e7a5      	b.n	8011c5e <__kernel_rem_pio2+0x4e6>
 8011d12:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011d16:	eb0d 0403 	add.w	r4, sp, r3
 8011d1a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d1e:	2000      	movs	r0, #0
 8011d20:	2100      	movs	r1, #0
 8011d22:	2d00      	cmp	r5, #0
 8011d24:	da09      	bge.n	8011d3a <__kernel_rem_pio2+0x5c2>
 8011d26:	f1bb 0f00 	cmp.w	fp, #0
 8011d2a:	d002      	beq.n	8011d32 <__kernel_rem_pio2+0x5ba>
 8011d2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d30:	4619      	mov	r1, r3
 8011d32:	9b01      	ldr	r3, [sp, #4]
 8011d34:	e9c3 0100 	strd	r0, r1, [r3]
 8011d38:	e791      	b.n	8011c5e <__kernel_rem_pio2+0x4e6>
 8011d3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d3e:	f7ee faad 	bl	800029c <__adddf3>
 8011d42:	3d01      	subs	r5, #1
 8011d44:	e7ed      	b.n	8011d22 <__kernel_rem_pio2+0x5aa>
 8011d46:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d4a:	f7ee faa7 	bl	800029c <__adddf3>
 8011d4e:	3e01      	subs	r6, #1
 8011d50:	e7c0      	b.n	8011cd4 <__kernel_rem_pio2+0x55c>
 8011d52:	4602      	mov	r2, r0
 8011d54:	460b      	mov	r3, r1
 8011d56:	e7c5      	b.n	8011ce4 <__kernel_rem_pio2+0x56c>
 8011d58:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011d5c:	f7ee fa9e 	bl	800029c <__adddf3>
 8011d60:	3401      	adds	r4, #1
 8011d62:	e7ca      	b.n	8011cfa <__kernel_rem_pio2+0x582>
 8011d64:	e9da 8900 	ldrd	r8, r9, [sl]
 8011d68:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011d6c:	9b02      	ldr	r3, [sp, #8]
 8011d6e:	3b01      	subs	r3, #1
 8011d70:	9302      	str	r3, [sp, #8]
 8011d72:	4632      	mov	r2, r6
 8011d74:	463b      	mov	r3, r7
 8011d76:	4640      	mov	r0, r8
 8011d78:	4649      	mov	r1, r9
 8011d7a:	f7ee fa8f 	bl	800029c <__adddf3>
 8011d7e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011d82:	4602      	mov	r2, r0
 8011d84:	460b      	mov	r3, r1
 8011d86:	4640      	mov	r0, r8
 8011d88:	4649      	mov	r1, r9
 8011d8a:	f7ee fa85 	bl	8000298 <__aeabi_dsub>
 8011d8e:	4632      	mov	r2, r6
 8011d90:	463b      	mov	r3, r7
 8011d92:	f7ee fa83 	bl	800029c <__adddf3>
 8011d96:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011d9a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011d9e:	ed8a 7b00 	vstr	d7, [sl]
 8011da2:	e76e      	b.n	8011c82 <__kernel_rem_pio2+0x50a>
 8011da4:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011da8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011dac:	4640      	mov	r0, r8
 8011dae:	4632      	mov	r2, r6
 8011db0:	463b      	mov	r3, r7
 8011db2:	4649      	mov	r1, r9
 8011db4:	f7ee fa72 	bl	800029c <__adddf3>
 8011db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011dbc:	4602      	mov	r2, r0
 8011dbe:	460b      	mov	r3, r1
 8011dc0:	4640      	mov	r0, r8
 8011dc2:	4649      	mov	r1, r9
 8011dc4:	f7ee fa68 	bl	8000298 <__aeabi_dsub>
 8011dc8:	4632      	mov	r2, r6
 8011dca:	463b      	mov	r3, r7
 8011dcc:	f7ee fa66 	bl	800029c <__adddf3>
 8011dd0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011dd4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011dd8:	ed84 7b00 	vstr	d7, [r4]
 8011ddc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011de0:	e755      	b.n	8011c8e <__kernel_rem_pio2+0x516>
 8011de2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011de6:	f7ee fa59 	bl	800029c <__adddf3>
 8011dea:	3d01      	subs	r5, #1
 8011dec:	e759      	b.n	8011ca2 <__kernel_rem_pio2+0x52a>
 8011dee:	9b01      	ldr	r3, [sp, #4]
 8011df0:	9a01      	ldr	r2, [sp, #4]
 8011df2:	601d      	str	r5, [r3, #0]
 8011df4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011df8:	605c      	str	r4, [r3, #4]
 8011dfa:	609f      	str	r7, [r3, #8]
 8011dfc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011e00:	60d3      	str	r3, [r2, #12]
 8011e02:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e06:	6110      	str	r0, [r2, #16]
 8011e08:	6153      	str	r3, [r2, #20]
 8011e0a:	e728      	b.n	8011c5e <__kernel_rem_pio2+0x4e6>
 8011e0c:	41700000 	.word	0x41700000
 8011e10:	3e700000 	.word	0x3e700000
 8011e14:	00000000 	.word	0x00000000

08011e18 <__kernel_sin>:
 8011e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e1c:	ed2d 8b04 	vpush	{d8-d9}
 8011e20:	eeb0 8a41 	vmov.f32	s16, s2
 8011e24:	eef0 8a61 	vmov.f32	s17, s3
 8011e28:	ec55 4b10 	vmov	r4, r5, d0
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e32:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e36:	9001      	str	r0, [sp, #4]
 8011e38:	da06      	bge.n	8011e48 <__kernel_sin+0x30>
 8011e3a:	ee10 0a10 	vmov	r0, s0
 8011e3e:	4629      	mov	r1, r5
 8011e40:	f7ee fe92 	bl	8000b68 <__aeabi_d2iz>
 8011e44:	2800      	cmp	r0, #0
 8011e46:	d051      	beq.n	8011eec <__kernel_sin+0xd4>
 8011e48:	4622      	mov	r2, r4
 8011e4a:	462b      	mov	r3, r5
 8011e4c:	4620      	mov	r0, r4
 8011e4e:	4629      	mov	r1, r5
 8011e50:	f7ee fbda 	bl	8000608 <__aeabi_dmul>
 8011e54:	4682      	mov	sl, r0
 8011e56:	468b      	mov	fp, r1
 8011e58:	4602      	mov	r2, r0
 8011e5a:	460b      	mov	r3, r1
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	4629      	mov	r1, r5
 8011e60:	f7ee fbd2 	bl	8000608 <__aeabi_dmul>
 8011e64:	a341      	add	r3, pc, #260	; (adr r3, 8011f6c <__kernel_sin+0x154>)
 8011e66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e6a:	4680      	mov	r8, r0
 8011e6c:	4689      	mov	r9, r1
 8011e6e:	4650      	mov	r0, sl
 8011e70:	4659      	mov	r1, fp
 8011e72:	f7ee fbc9 	bl	8000608 <__aeabi_dmul>
 8011e76:	a33f      	add	r3, pc, #252	; (adr r3, 8011f74 <__kernel_sin+0x15c>)
 8011e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e7c:	f7ee fa0c 	bl	8000298 <__aeabi_dsub>
 8011e80:	4652      	mov	r2, sl
 8011e82:	465b      	mov	r3, fp
 8011e84:	f7ee fbc0 	bl	8000608 <__aeabi_dmul>
 8011e88:	a33c      	add	r3, pc, #240	; (adr r3, 8011f7c <__kernel_sin+0x164>)
 8011e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e8e:	f7ee fa05 	bl	800029c <__adddf3>
 8011e92:	4652      	mov	r2, sl
 8011e94:	465b      	mov	r3, fp
 8011e96:	f7ee fbb7 	bl	8000608 <__aeabi_dmul>
 8011e9a:	a33a      	add	r3, pc, #232	; (adr r3, 8011f84 <__kernel_sin+0x16c>)
 8011e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ea0:	f7ee f9fa 	bl	8000298 <__aeabi_dsub>
 8011ea4:	4652      	mov	r2, sl
 8011ea6:	465b      	mov	r3, fp
 8011ea8:	f7ee fbae 	bl	8000608 <__aeabi_dmul>
 8011eac:	a337      	add	r3, pc, #220	; (adr r3, 8011f8c <__kernel_sin+0x174>)
 8011eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011eb2:	f7ee f9f3 	bl	800029c <__adddf3>
 8011eb6:	9b01      	ldr	r3, [sp, #4]
 8011eb8:	4606      	mov	r6, r0
 8011eba:	460f      	mov	r7, r1
 8011ebc:	b9eb      	cbnz	r3, 8011efa <__kernel_sin+0xe2>
 8011ebe:	4602      	mov	r2, r0
 8011ec0:	460b      	mov	r3, r1
 8011ec2:	4650      	mov	r0, sl
 8011ec4:	4659      	mov	r1, fp
 8011ec6:	f7ee fb9f 	bl	8000608 <__aeabi_dmul>
 8011eca:	a325      	add	r3, pc, #148	; (adr r3, 8011f60 <__kernel_sin+0x148>)
 8011ecc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed0:	f7ee f9e2 	bl	8000298 <__aeabi_dsub>
 8011ed4:	4642      	mov	r2, r8
 8011ed6:	464b      	mov	r3, r9
 8011ed8:	f7ee fb96 	bl	8000608 <__aeabi_dmul>
 8011edc:	4602      	mov	r2, r0
 8011ede:	460b      	mov	r3, r1
 8011ee0:	4620      	mov	r0, r4
 8011ee2:	4629      	mov	r1, r5
 8011ee4:	f7ee f9da 	bl	800029c <__adddf3>
 8011ee8:	4604      	mov	r4, r0
 8011eea:	460d      	mov	r5, r1
 8011eec:	ec45 4b10 	vmov	d0, r4, r5
 8011ef0:	b003      	add	sp, #12
 8011ef2:	ecbd 8b04 	vpop	{d8-d9}
 8011ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011efa:	4b1b      	ldr	r3, [pc, #108]	; (8011f68 <__kernel_sin+0x150>)
 8011efc:	ec51 0b18 	vmov	r0, r1, d8
 8011f00:	2200      	movs	r2, #0
 8011f02:	f7ee fb81 	bl	8000608 <__aeabi_dmul>
 8011f06:	4632      	mov	r2, r6
 8011f08:	ec41 0b19 	vmov	d9, r0, r1
 8011f0c:	463b      	mov	r3, r7
 8011f0e:	4640      	mov	r0, r8
 8011f10:	4649      	mov	r1, r9
 8011f12:	f7ee fb79 	bl	8000608 <__aeabi_dmul>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	ec51 0b19 	vmov	r0, r1, d9
 8011f1e:	f7ee f9bb 	bl	8000298 <__aeabi_dsub>
 8011f22:	4652      	mov	r2, sl
 8011f24:	465b      	mov	r3, fp
 8011f26:	f7ee fb6f 	bl	8000608 <__aeabi_dmul>
 8011f2a:	ec53 2b18 	vmov	r2, r3, d8
 8011f2e:	f7ee f9b3 	bl	8000298 <__aeabi_dsub>
 8011f32:	a30b      	add	r3, pc, #44	; (adr r3, 8011f60 <__kernel_sin+0x148>)
 8011f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f38:	4606      	mov	r6, r0
 8011f3a:	460f      	mov	r7, r1
 8011f3c:	4640      	mov	r0, r8
 8011f3e:	4649      	mov	r1, r9
 8011f40:	f7ee fb62 	bl	8000608 <__aeabi_dmul>
 8011f44:	4602      	mov	r2, r0
 8011f46:	460b      	mov	r3, r1
 8011f48:	4630      	mov	r0, r6
 8011f4a:	4639      	mov	r1, r7
 8011f4c:	f7ee f9a6 	bl	800029c <__adddf3>
 8011f50:	4602      	mov	r2, r0
 8011f52:	460b      	mov	r3, r1
 8011f54:	4620      	mov	r0, r4
 8011f56:	4629      	mov	r1, r5
 8011f58:	f7ee f99e 	bl	8000298 <__aeabi_dsub>
 8011f5c:	e7c4      	b.n	8011ee8 <__kernel_sin+0xd0>
 8011f5e:	bf00      	nop
 8011f60:	55555549 	.word	0x55555549
 8011f64:	3fc55555 	.word	0x3fc55555
 8011f68:	3fe00000 	.word	0x3fe00000
 8011f6c:	5acfd57c 	.word	0x5acfd57c
 8011f70:	3de5d93a 	.word	0x3de5d93a
 8011f74:	8a2b9ceb 	.word	0x8a2b9ceb
 8011f78:	3e5ae5e6 	.word	0x3e5ae5e6
 8011f7c:	57b1fe7d 	.word	0x57b1fe7d
 8011f80:	3ec71de3 	.word	0x3ec71de3
 8011f84:	19c161d5 	.word	0x19c161d5
 8011f88:	3f2a01a0 	.word	0x3f2a01a0
 8011f8c:	1110f8a6 	.word	0x1110f8a6
 8011f90:	3f811111 	.word	0x3f811111
 8011f94:	00000000 	.word	0x00000000

08011f98 <atan>:
 8011f98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f9c:	ec55 4b10 	vmov	r4, r5, d0
 8011fa0:	4bc3      	ldr	r3, [pc, #780]	; (80122b0 <atan+0x318>)
 8011fa2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011fa6:	429e      	cmp	r6, r3
 8011fa8:	46ab      	mov	fp, r5
 8011faa:	dd18      	ble.n	8011fde <atan+0x46>
 8011fac:	4bc1      	ldr	r3, [pc, #772]	; (80122b4 <atan+0x31c>)
 8011fae:	429e      	cmp	r6, r3
 8011fb0:	dc01      	bgt.n	8011fb6 <atan+0x1e>
 8011fb2:	d109      	bne.n	8011fc8 <atan+0x30>
 8011fb4:	b144      	cbz	r4, 8011fc8 <atan+0x30>
 8011fb6:	4622      	mov	r2, r4
 8011fb8:	462b      	mov	r3, r5
 8011fba:	4620      	mov	r0, r4
 8011fbc:	4629      	mov	r1, r5
 8011fbe:	f7ee f96d 	bl	800029c <__adddf3>
 8011fc2:	4604      	mov	r4, r0
 8011fc4:	460d      	mov	r5, r1
 8011fc6:	e006      	b.n	8011fd6 <atan+0x3e>
 8011fc8:	f1bb 0f00 	cmp.w	fp, #0
 8011fcc:	f300 8131 	bgt.w	8012232 <atan+0x29a>
 8011fd0:	a59b      	add	r5, pc, #620	; (adr r5, 8012240 <atan+0x2a8>)
 8011fd2:	e9d5 4500 	ldrd	r4, r5, [r5]
 8011fd6:	ec45 4b10 	vmov	d0, r4, r5
 8011fda:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fde:	4bb6      	ldr	r3, [pc, #728]	; (80122b8 <atan+0x320>)
 8011fe0:	429e      	cmp	r6, r3
 8011fe2:	dc14      	bgt.n	801200e <atan+0x76>
 8011fe4:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8011fe8:	429e      	cmp	r6, r3
 8011fea:	dc0d      	bgt.n	8012008 <atan+0x70>
 8011fec:	a396      	add	r3, pc, #600	; (adr r3, 8012248 <atan+0x2b0>)
 8011fee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ff2:	ee10 0a10 	vmov	r0, s0
 8011ff6:	4629      	mov	r1, r5
 8011ff8:	f7ee f950 	bl	800029c <__adddf3>
 8011ffc:	4baf      	ldr	r3, [pc, #700]	; (80122bc <atan+0x324>)
 8011ffe:	2200      	movs	r2, #0
 8012000:	f7ee fd92 	bl	8000b28 <__aeabi_dcmpgt>
 8012004:	2800      	cmp	r0, #0
 8012006:	d1e6      	bne.n	8011fd6 <atan+0x3e>
 8012008:	f04f 3aff 	mov.w	sl, #4294967295
 801200c:	e02b      	b.n	8012066 <atan+0xce>
 801200e:	f000 f963 	bl	80122d8 <fabs>
 8012012:	4bab      	ldr	r3, [pc, #684]	; (80122c0 <atan+0x328>)
 8012014:	429e      	cmp	r6, r3
 8012016:	ec55 4b10 	vmov	r4, r5, d0
 801201a:	f300 80bf 	bgt.w	801219c <atan+0x204>
 801201e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8012022:	429e      	cmp	r6, r3
 8012024:	f300 80a0 	bgt.w	8012168 <atan+0x1d0>
 8012028:	ee10 2a10 	vmov	r2, s0
 801202c:	ee10 0a10 	vmov	r0, s0
 8012030:	462b      	mov	r3, r5
 8012032:	4629      	mov	r1, r5
 8012034:	f7ee f932 	bl	800029c <__adddf3>
 8012038:	4ba0      	ldr	r3, [pc, #640]	; (80122bc <atan+0x324>)
 801203a:	2200      	movs	r2, #0
 801203c:	f7ee f92c 	bl	8000298 <__aeabi_dsub>
 8012040:	2200      	movs	r2, #0
 8012042:	4606      	mov	r6, r0
 8012044:	460f      	mov	r7, r1
 8012046:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801204a:	4620      	mov	r0, r4
 801204c:	4629      	mov	r1, r5
 801204e:	f7ee f925 	bl	800029c <__adddf3>
 8012052:	4602      	mov	r2, r0
 8012054:	460b      	mov	r3, r1
 8012056:	4630      	mov	r0, r6
 8012058:	4639      	mov	r1, r7
 801205a:	f7ee fbff 	bl	800085c <__aeabi_ddiv>
 801205e:	f04f 0a00 	mov.w	sl, #0
 8012062:	4604      	mov	r4, r0
 8012064:	460d      	mov	r5, r1
 8012066:	4622      	mov	r2, r4
 8012068:	462b      	mov	r3, r5
 801206a:	4620      	mov	r0, r4
 801206c:	4629      	mov	r1, r5
 801206e:	f7ee facb 	bl	8000608 <__aeabi_dmul>
 8012072:	4602      	mov	r2, r0
 8012074:	460b      	mov	r3, r1
 8012076:	4680      	mov	r8, r0
 8012078:	4689      	mov	r9, r1
 801207a:	f7ee fac5 	bl	8000608 <__aeabi_dmul>
 801207e:	a374      	add	r3, pc, #464	; (adr r3, 8012250 <atan+0x2b8>)
 8012080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012084:	4606      	mov	r6, r0
 8012086:	460f      	mov	r7, r1
 8012088:	f7ee fabe 	bl	8000608 <__aeabi_dmul>
 801208c:	a372      	add	r3, pc, #456	; (adr r3, 8012258 <atan+0x2c0>)
 801208e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012092:	f7ee f903 	bl	800029c <__adddf3>
 8012096:	4632      	mov	r2, r6
 8012098:	463b      	mov	r3, r7
 801209a:	f7ee fab5 	bl	8000608 <__aeabi_dmul>
 801209e:	a370      	add	r3, pc, #448	; (adr r3, 8012260 <atan+0x2c8>)
 80120a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120a4:	f7ee f8fa 	bl	800029c <__adddf3>
 80120a8:	4632      	mov	r2, r6
 80120aa:	463b      	mov	r3, r7
 80120ac:	f7ee faac 	bl	8000608 <__aeabi_dmul>
 80120b0:	a36d      	add	r3, pc, #436	; (adr r3, 8012268 <atan+0x2d0>)
 80120b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120b6:	f7ee f8f1 	bl	800029c <__adddf3>
 80120ba:	4632      	mov	r2, r6
 80120bc:	463b      	mov	r3, r7
 80120be:	f7ee faa3 	bl	8000608 <__aeabi_dmul>
 80120c2:	a36b      	add	r3, pc, #428	; (adr r3, 8012270 <atan+0x2d8>)
 80120c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120c8:	f7ee f8e8 	bl	800029c <__adddf3>
 80120cc:	4632      	mov	r2, r6
 80120ce:	463b      	mov	r3, r7
 80120d0:	f7ee fa9a 	bl	8000608 <__aeabi_dmul>
 80120d4:	a368      	add	r3, pc, #416	; (adr r3, 8012278 <atan+0x2e0>)
 80120d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120da:	f7ee f8df 	bl	800029c <__adddf3>
 80120de:	4642      	mov	r2, r8
 80120e0:	464b      	mov	r3, r9
 80120e2:	f7ee fa91 	bl	8000608 <__aeabi_dmul>
 80120e6:	a366      	add	r3, pc, #408	; (adr r3, 8012280 <atan+0x2e8>)
 80120e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ec:	4680      	mov	r8, r0
 80120ee:	4689      	mov	r9, r1
 80120f0:	4630      	mov	r0, r6
 80120f2:	4639      	mov	r1, r7
 80120f4:	f7ee fa88 	bl	8000608 <__aeabi_dmul>
 80120f8:	a363      	add	r3, pc, #396	; (adr r3, 8012288 <atan+0x2f0>)
 80120fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fe:	f7ee f8cb 	bl	8000298 <__aeabi_dsub>
 8012102:	4632      	mov	r2, r6
 8012104:	463b      	mov	r3, r7
 8012106:	f7ee fa7f 	bl	8000608 <__aeabi_dmul>
 801210a:	a361      	add	r3, pc, #388	; (adr r3, 8012290 <atan+0x2f8>)
 801210c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012110:	f7ee f8c2 	bl	8000298 <__aeabi_dsub>
 8012114:	4632      	mov	r2, r6
 8012116:	463b      	mov	r3, r7
 8012118:	f7ee fa76 	bl	8000608 <__aeabi_dmul>
 801211c:	a35e      	add	r3, pc, #376	; (adr r3, 8012298 <atan+0x300>)
 801211e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012122:	f7ee f8b9 	bl	8000298 <__aeabi_dsub>
 8012126:	4632      	mov	r2, r6
 8012128:	463b      	mov	r3, r7
 801212a:	f7ee fa6d 	bl	8000608 <__aeabi_dmul>
 801212e:	a35c      	add	r3, pc, #368	; (adr r3, 80122a0 <atan+0x308>)
 8012130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012134:	f7ee f8b0 	bl	8000298 <__aeabi_dsub>
 8012138:	4632      	mov	r2, r6
 801213a:	463b      	mov	r3, r7
 801213c:	f7ee fa64 	bl	8000608 <__aeabi_dmul>
 8012140:	4602      	mov	r2, r0
 8012142:	460b      	mov	r3, r1
 8012144:	4640      	mov	r0, r8
 8012146:	4649      	mov	r1, r9
 8012148:	f7ee f8a8 	bl	800029c <__adddf3>
 801214c:	4622      	mov	r2, r4
 801214e:	462b      	mov	r3, r5
 8012150:	f7ee fa5a 	bl	8000608 <__aeabi_dmul>
 8012154:	f1ba 3fff 	cmp.w	sl, #4294967295
 8012158:	4602      	mov	r2, r0
 801215a:	460b      	mov	r3, r1
 801215c:	d14b      	bne.n	80121f6 <atan+0x25e>
 801215e:	4620      	mov	r0, r4
 8012160:	4629      	mov	r1, r5
 8012162:	f7ee f899 	bl	8000298 <__aeabi_dsub>
 8012166:	e72c      	b.n	8011fc2 <atan+0x2a>
 8012168:	ee10 0a10 	vmov	r0, s0
 801216c:	4b53      	ldr	r3, [pc, #332]	; (80122bc <atan+0x324>)
 801216e:	2200      	movs	r2, #0
 8012170:	4629      	mov	r1, r5
 8012172:	f7ee f891 	bl	8000298 <__aeabi_dsub>
 8012176:	4b51      	ldr	r3, [pc, #324]	; (80122bc <atan+0x324>)
 8012178:	4606      	mov	r6, r0
 801217a:	460f      	mov	r7, r1
 801217c:	2200      	movs	r2, #0
 801217e:	4620      	mov	r0, r4
 8012180:	4629      	mov	r1, r5
 8012182:	f7ee f88b 	bl	800029c <__adddf3>
 8012186:	4602      	mov	r2, r0
 8012188:	460b      	mov	r3, r1
 801218a:	4630      	mov	r0, r6
 801218c:	4639      	mov	r1, r7
 801218e:	f7ee fb65 	bl	800085c <__aeabi_ddiv>
 8012192:	f04f 0a01 	mov.w	sl, #1
 8012196:	4604      	mov	r4, r0
 8012198:	460d      	mov	r5, r1
 801219a:	e764      	b.n	8012066 <atan+0xce>
 801219c:	4b49      	ldr	r3, [pc, #292]	; (80122c4 <atan+0x32c>)
 801219e:	429e      	cmp	r6, r3
 80121a0:	da1d      	bge.n	80121de <atan+0x246>
 80121a2:	ee10 0a10 	vmov	r0, s0
 80121a6:	4b48      	ldr	r3, [pc, #288]	; (80122c8 <atan+0x330>)
 80121a8:	2200      	movs	r2, #0
 80121aa:	4629      	mov	r1, r5
 80121ac:	f7ee f874 	bl	8000298 <__aeabi_dsub>
 80121b0:	4b45      	ldr	r3, [pc, #276]	; (80122c8 <atan+0x330>)
 80121b2:	4606      	mov	r6, r0
 80121b4:	460f      	mov	r7, r1
 80121b6:	2200      	movs	r2, #0
 80121b8:	4620      	mov	r0, r4
 80121ba:	4629      	mov	r1, r5
 80121bc:	f7ee fa24 	bl	8000608 <__aeabi_dmul>
 80121c0:	4b3e      	ldr	r3, [pc, #248]	; (80122bc <atan+0x324>)
 80121c2:	2200      	movs	r2, #0
 80121c4:	f7ee f86a 	bl	800029c <__adddf3>
 80121c8:	4602      	mov	r2, r0
 80121ca:	460b      	mov	r3, r1
 80121cc:	4630      	mov	r0, r6
 80121ce:	4639      	mov	r1, r7
 80121d0:	f7ee fb44 	bl	800085c <__aeabi_ddiv>
 80121d4:	f04f 0a02 	mov.w	sl, #2
 80121d8:	4604      	mov	r4, r0
 80121da:	460d      	mov	r5, r1
 80121dc:	e743      	b.n	8012066 <atan+0xce>
 80121de:	462b      	mov	r3, r5
 80121e0:	ee10 2a10 	vmov	r2, s0
 80121e4:	4939      	ldr	r1, [pc, #228]	; (80122cc <atan+0x334>)
 80121e6:	2000      	movs	r0, #0
 80121e8:	f7ee fb38 	bl	800085c <__aeabi_ddiv>
 80121ec:	f04f 0a03 	mov.w	sl, #3
 80121f0:	4604      	mov	r4, r0
 80121f2:	460d      	mov	r5, r1
 80121f4:	e737      	b.n	8012066 <atan+0xce>
 80121f6:	4b36      	ldr	r3, [pc, #216]	; (80122d0 <atan+0x338>)
 80121f8:	4e36      	ldr	r6, [pc, #216]	; (80122d4 <atan+0x33c>)
 80121fa:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 80121fe:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 8012202:	e9da 2300 	ldrd	r2, r3, [sl]
 8012206:	f7ee f847 	bl	8000298 <__aeabi_dsub>
 801220a:	4622      	mov	r2, r4
 801220c:	462b      	mov	r3, r5
 801220e:	f7ee f843 	bl	8000298 <__aeabi_dsub>
 8012212:	4602      	mov	r2, r0
 8012214:	460b      	mov	r3, r1
 8012216:	e9d6 0100 	ldrd	r0, r1, [r6]
 801221a:	f7ee f83d 	bl	8000298 <__aeabi_dsub>
 801221e:	f1bb 0f00 	cmp.w	fp, #0
 8012222:	4604      	mov	r4, r0
 8012224:	460d      	mov	r5, r1
 8012226:	f6bf aed6 	bge.w	8011fd6 <atan+0x3e>
 801222a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801222e:	461d      	mov	r5, r3
 8012230:	e6d1      	b.n	8011fd6 <atan+0x3e>
 8012232:	a51d      	add	r5, pc, #116	; (adr r5, 80122a8 <atan+0x310>)
 8012234:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012238:	e6cd      	b.n	8011fd6 <atan+0x3e>
 801223a:	bf00      	nop
 801223c:	f3af 8000 	nop.w
 8012240:	54442d18 	.word	0x54442d18
 8012244:	bff921fb 	.word	0xbff921fb
 8012248:	8800759c 	.word	0x8800759c
 801224c:	7e37e43c 	.word	0x7e37e43c
 8012250:	e322da11 	.word	0xe322da11
 8012254:	3f90ad3a 	.word	0x3f90ad3a
 8012258:	24760deb 	.word	0x24760deb
 801225c:	3fa97b4b 	.word	0x3fa97b4b
 8012260:	a0d03d51 	.word	0xa0d03d51
 8012264:	3fb10d66 	.word	0x3fb10d66
 8012268:	c54c206e 	.word	0xc54c206e
 801226c:	3fb745cd 	.word	0x3fb745cd
 8012270:	920083ff 	.word	0x920083ff
 8012274:	3fc24924 	.word	0x3fc24924
 8012278:	5555550d 	.word	0x5555550d
 801227c:	3fd55555 	.word	0x3fd55555
 8012280:	2c6a6c2f 	.word	0x2c6a6c2f
 8012284:	bfa2b444 	.word	0xbfa2b444
 8012288:	52defd9a 	.word	0x52defd9a
 801228c:	3fadde2d 	.word	0x3fadde2d
 8012290:	af749a6d 	.word	0xaf749a6d
 8012294:	3fb3b0f2 	.word	0x3fb3b0f2
 8012298:	fe231671 	.word	0xfe231671
 801229c:	3fbc71c6 	.word	0x3fbc71c6
 80122a0:	9998ebc4 	.word	0x9998ebc4
 80122a4:	3fc99999 	.word	0x3fc99999
 80122a8:	54442d18 	.word	0x54442d18
 80122ac:	3ff921fb 	.word	0x3ff921fb
 80122b0:	440fffff 	.word	0x440fffff
 80122b4:	7ff00000 	.word	0x7ff00000
 80122b8:	3fdbffff 	.word	0x3fdbffff
 80122bc:	3ff00000 	.word	0x3ff00000
 80122c0:	3ff2ffff 	.word	0x3ff2ffff
 80122c4:	40038000 	.word	0x40038000
 80122c8:	3ff80000 	.word	0x3ff80000
 80122cc:	bff00000 	.word	0xbff00000
 80122d0:	08012c18 	.word	0x08012c18
 80122d4:	08012bf8 	.word	0x08012bf8

080122d8 <fabs>:
 80122d8:	ec51 0b10 	vmov	r0, r1, d0
 80122dc:	ee10 2a10 	vmov	r2, s0
 80122e0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80122e4:	ec43 2b10 	vmov	d0, r2, r3
 80122e8:	4770      	bx	lr
 80122ea:	0000      	movs	r0, r0
 80122ec:	0000      	movs	r0, r0
	...

080122f0 <floor>:
 80122f0:	ec51 0b10 	vmov	r0, r1, d0
 80122f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80122f8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80122fc:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012300:	2e13      	cmp	r6, #19
 8012302:	ee10 5a10 	vmov	r5, s0
 8012306:	ee10 8a10 	vmov	r8, s0
 801230a:	460c      	mov	r4, r1
 801230c:	dc32      	bgt.n	8012374 <floor+0x84>
 801230e:	2e00      	cmp	r6, #0
 8012310:	da14      	bge.n	801233c <floor+0x4c>
 8012312:	a333      	add	r3, pc, #204	; (adr r3, 80123e0 <floor+0xf0>)
 8012314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012318:	f7ed ffc0 	bl	800029c <__adddf3>
 801231c:	2200      	movs	r2, #0
 801231e:	2300      	movs	r3, #0
 8012320:	f7ee fc02 	bl	8000b28 <__aeabi_dcmpgt>
 8012324:	b138      	cbz	r0, 8012336 <floor+0x46>
 8012326:	2c00      	cmp	r4, #0
 8012328:	da57      	bge.n	80123da <floor+0xea>
 801232a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801232e:	431d      	orrs	r5, r3
 8012330:	d001      	beq.n	8012336 <floor+0x46>
 8012332:	4c2d      	ldr	r4, [pc, #180]	; (80123e8 <floor+0xf8>)
 8012334:	2500      	movs	r5, #0
 8012336:	4621      	mov	r1, r4
 8012338:	4628      	mov	r0, r5
 801233a:	e025      	b.n	8012388 <floor+0x98>
 801233c:	4f2b      	ldr	r7, [pc, #172]	; (80123ec <floor+0xfc>)
 801233e:	4137      	asrs	r7, r6
 8012340:	ea01 0307 	and.w	r3, r1, r7
 8012344:	4303      	orrs	r3, r0
 8012346:	d01f      	beq.n	8012388 <floor+0x98>
 8012348:	a325      	add	r3, pc, #148	; (adr r3, 80123e0 <floor+0xf0>)
 801234a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801234e:	f7ed ffa5 	bl	800029c <__adddf3>
 8012352:	2200      	movs	r2, #0
 8012354:	2300      	movs	r3, #0
 8012356:	f7ee fbe7 	bl	8000b28 <__aeabi_dcmpgt>
 801235a:	2800      	cmp	r0, #0
 801235c:	d0eb      	beq.n	8012336 <floor+0x46>
 801235e:	2c00      	cmp	r4, #0
 8012360:	bfbe      	ittt	lt
 8012362:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8012366:	fa43 f606 	asrlt.w	r6, r3, r6
 801236a:	19a4      	addlt	r4, r4, r6
 801236c:	ea24 0407 	bic.w	r4, r4, r7
 8012370:	2500      	movs	r5, #0
 8012372:	e7e0      	b.n	8012336 <floor+0x46>
 8012374:	2e33      	cmp	r6, #51	; 0x33
 8012376:	dd0b      	ble.n	8012390 <floor+0xa0>
 8012378:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801237c:	d104      	bne.n	8012388 <floor+0x98>
 801237e:	ee10 2a10 	vmov	r2, s0
 8012382:	460b      	mov	r3, r1
 8012384:	f7ed ff8a 	bl	800029c <__adddf3>
 8012388:	ec41 0b10 	vmov	d0, r0, r1
 801238c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012390:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8012394:	f04f 33ff 	mov.w	r3, #4294967295
 8012398:	fa23 f707 	lsr.w	r7, r3, r7
 801239c:	4207      	tst	r7, r0
 801239e:	d0f3      	beq.n	8012388 <floor+0x98>
 80123a0:	a30f      	add	r3, pc, #60	; (adr r3, 80123e0 <floor+0xf0>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff79 	bl	800029c <__adddf3>
 80123aa:	2200      	movs	r2, #0
 80123ac:	2300      	movs	r3, #0
 80123ae:	f7ee fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d0bf      	beq.n	8012336 <floor+0x46>
 80123b6:	2c00      	cmp	r4, #0
 80123b8:	da02      	bge.n	80123c0 <floor+0xd0>
 80123ba:	2e14      	cmp	r6, #20
 80123bc:	d103      	bne.n	80123c6 <floor+0xd6>
 80123be:	3401      	adds	r4, #1
 80123c0:	ea25 0507 	bic.w	r5, r5, r7
 80123c4:	e7b7      	b.n	8012336 <floor+0x46>
 80123c6:	2301      	movs	r3, #1
 80123c8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80123cc:	fa03 f606 	lsl.w	r6, r3, r6
 80123d0:	4435      	add	r5, r6
 80123d2:	4545      	cmp	r5, r8
 80123d4:	bf38      	it	cc
 80123d6:	18e4      	addcc	r4, r4, r3
 80123d8:	e7f2      	b.n	80123c0 <floor+0xd0>
 80123da:	2500      	movs	r5, #0
 80123dc:	462c      	mov	r4, r5
 80123de:	e7aa      	b.n	8012336 <floor+0x46>
 80123e0:	8800759c 	.word	0x8800759c
 80123e4:	7e37e43c 	.word	0x7e37e43c
 80123e8:	bff00000 	.word	0xbff00000
 80123ec:	000fffff 	.word	0x000fffff

080123f0 <scalbn>:
 80123f0:	b570      	push	{r4, r5, r6, lr}
 80123f2:	ec55 4b10 	vmov	r4, r5, d0
 80123f6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80123fa:	4606      	mov	r6, r0
 80123fc:	462b      	mov	r3, r5
 80123fe:	b99a      	cbnz	r2, 8012428 <scalbn+0x38>
 8012400:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8012404:	4323      	orrs	r3, r4
 8012406:	d036      	beq.n	8012476 <scalbn+0x86>
 8012408:	4b39      	ldr	r3, [pc, #228]	; (80124f0 <scalbn+0x100>)
 801240a:	4629      	mov	r1, r5
 801240c:	ee10 0a10 	vmov	r0, s0
 8012410:	2200      	movs	r2, #0
 8012412:	f7ee f8f9 	bl	8000608 <__aeabi_dmul>
 8012416:	4b37      	ldr	r3, [pc, #220]	; (80124f4 <scalbn+0x104>)
 8012418:	429e      	cmp	r6, r3
 801241a:	4604      	mov	r4, r0
 801241c:	460d      	mov	r5, r1
 801241e:	da10      	bge.n	8012442 <scalbn+0x52>
 8012420:	a32b      	add	r3, pc, #172	; (adr r3, 80124d0 <scalbn+0xe0>)
 8012422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012426:	e03a      	b.n	801249e <scalbn+0xae>
 8012428:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801242c:	428a      	cmp	r2, r1
 801242e:	d10c      	bne.n	801244a <scalbn+0x5a>
 8012430:	ee10 2a10 	vmov	r2, s0
 8012434:	4620      	mov	r0, r4
 8012436:	4629      	mov	r1, r5
 8012438:	f7ed ff30 	bl	800029c <__adddf3>
 801243c:	4604      	mov	r4, r0
 801243e:	460d      	mov	r5, r1
 8012440:	e019      	b.n	8012476 <scalbn+0x86>
 8012442:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8012446:	460b      	mov	r3, r1
 8012448:	3a36      	subs	r2, #54	; 0x36
 801244a:	4432      	add	r2, r6
 801244c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012450:	428a      	cmp	r2, r1
 8012452:	dd08      	ble.n	8012466 <scalbn+0x76>
 8012454:	2d00      	cmp	r5, #0
 8012456:	a120      	add	r1, pc, #128	; (adr r1, 80124d8 <scalbn+0xe8>)
 8012458:	e9d1 0100 	ldrd	r0, r1, [r1]
 801245c:	da1c      	bge.n	8012498 <scalbn+0xa8>
 801245e:	a120      	add	r1, pc, #128	; (adr r1, 80124e0 <scalbn+0xf0>)
 8012460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012464:	e018      	b.n	8012498 <scalbn+0xa8>
 8012466:	2a00      	cmp	r2, #0
 8012468:	dd08      	ble.n	801247c <scalbn+0x8c>
 801246a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801246e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012472:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8012476:	ec45 4b10 	vmov	d0, r4, r5
 801247a:	bd70      	pop	{r4, r5, r6, pc}
 801247c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012480:	da19      	bge.n	80124b6 <scalbn+0xc6>
 8012482:	f24c 3350 	movw	r3, #50000	; 0xc350
 8012486:	429e      	cmp	r6, r3
 8012488:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801248c:	dd0a      	ble.n	80124a4 <scalbn+0xb4>
 801248e:	a112      	add	r1, pc, #72	; (adr r1, 80124d8 <scalbn+0xe8>)
 8012490:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d1e2      	bne.n	801245e <scalbn+0x6e>
 8012498:	a30f      	add	r3, pc, #60	; (adr r3, 80124d8 <scalbn+0xe8>)
 801249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801249e:	f7ee f8b3 	bl	8000608 <__aeabi_dmul>
 80124a2:	e7cb      	b.n	801243c <scalbn+0x4c>
 80124a4:	a10a      	add	r1, pc, #40	; (adr r1, 80124d0 <scalbn+0xe0>)
 80124a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124aa:	2b00      	cmp	r3, #0
 80124ac:	d0b8      	beq.n	8012420 <scalbn+0x30>
 80124ae:	a10e      	add	r1, pc, #56	; (adr r1, 80124e8 <scalbn+0xf8>)
 80124b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124b4:	e7b4      	b.n	8012420 <scalbn+0x30>
 80124b6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124ba:	3236      	adds	r2, #54	; 0x36
 80124bc:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124c0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80124c4:	4620      	mov	r0, r4
 80124c6:	4b0c      	ldr	r3, [pc, #48]	; (80124f8 <scalbn+0x108>)
 80124c8:	2200      	movs	r2, #0
 80124ca:	e7e8      	b.n	801249e <scalbn+0xae>
 80124cc:	f3af 8000 	nop.w
 80124d0:	c2f8f359 	.word	0xc2f8f359
 80124d4:	01a56e1f 	.word	0x01a56e1f
 80124d8:	8800759c 	.word	0x8800759c
 80124dc:	7e37e43c 	.word	0x7e37e43c
 80124e0:	8800759c 	.word	0x8800759c
 80124e4:	fe37e43c 	.word	0xfe37e43c
 80124e8:	c2f8f359 	.word	0xc2f8f359
 80124ec:	81a56e1f 	.word	0x81a56e1f
 80124f0:	43500000 	.word	0x43500000
 80124f4:	ffff3cb0 	.word	0xffff3cb0
 80124f8:	3c900000 	.word	0x3c900000

080124fc <_init>:
 80124fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fe:	bf00      	nop
 8012500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012502:	bc08      	pop	{r3}
 8012504:	469e      	mov	lr, r3
 8012506:	4770      	bx	lr

08012508 <_fini>:
 8012508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801250a:	bf00      	nop
 801250c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801250e:	bc08      	pop	{r3}
 8012510:	469e      	mov	lr, r3
 8012512:	4770      	bx	lr
