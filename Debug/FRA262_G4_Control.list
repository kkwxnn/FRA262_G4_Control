
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c28  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005dc0  08005dc0  00015dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005de0  08005de0  00015de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00015de8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005dec  08005dec  00015dec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005df0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000354  20000078  08005e68  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003cc  08005e68  000203cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f43c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e5c  00000000  00000000  0002f4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00031340  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d08  00000000  00000000  000320f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779e  00000000  00000000  00032df8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f711  00000000  00000000  0004a596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a297  00000000  00000000  00059ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3f3e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003bbc  00000000  00000000  000f3f90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000078 	.word	0x20000078
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005da8 	.word	0x08005da8

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000007c 	.word	0x2000007c
 80001d4:	08005da8 	.word	0x08005da8

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__aeabi_d2f>:
 8000974:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000978:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800097c:	bf24      	itt	cs
 800097e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000982:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000986:	d90d      	bls.n	80009a4 <__aeabi_d2f+0x30>
 8000988:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800098c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000990:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000994:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000998:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800099c:	bf08      	it	eq
 800099e:	f020 0001 	biceq.w	r0, r0, #1
 80009a2:	4770      	bx	lr
 80009a4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80009a8:	d121      	bne.n	80009ee <__aeabi_d2f+0x7a>
 80009aa:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80009ae:	bfbc      	itt	lt
 80009b0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009b4:	4770      	bxlt	lr
 80009b6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ba:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009be:	f1c2 0218 	rsb	r2, r2, #24
 80009c2:	f1c2 0c20 	rsb	ip, r2, #32
 80009c6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ca:	fa20 f002 	lsr.w	r0, r0, r2
 80009ce:	bf18      	it	ne
 80009d0:	f040 0001 	orrne.w	r0, r0, #1
 80009d4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009d8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009dc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009e0:	ea40 000c 	orr.w	r0, r0, ip
 80009e4:	fa23 f302 	lsr.w	r3, r3, r2
 80009e8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009ec:	e7cc      	b.n	8000988 <__aeabi_d2f+0x14>
 80009ee:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009f2:	d107      	bne.n	8000a04 <__aeabi_d2f+0x90>
 80009f4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009f8:	bf1e      	ittt	ne
 80009fa:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009fe:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a02:	4770      	bxne	lr
 8000a04:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop

08000a14 <__aeabi_uldivmod>:
 8000a14:	b953      	cbnz	r3, 8000a2c <__aeabi_uldivmod+0x18>
 8000a16:	b94a      	cbnz	r2, 8000a2c <__aeabi_uldivmod+0x18>
 8000a18:	2900      	cmp	r1, #0
 8000a1a:	bf08      	it	eq
 8000a1c:	2800      	cmpeq	r0, #0
 8000a1e:	bf1c      	itt	ne
 8000a20:	f04f 31ff 	movne.w	r1, #4294967295
 8000a24:	f04f 30ff 	movne.w	r0, #4294967295
 8000a28:	f000 b974 	b.w	8000d14 <__aeabi_idiv0>
 8000a2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a34:	f000 f806 	bl	8000a44 <__udivmoddi4>
 8000a38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a40:	b004      	add	sp, #16
 8000a42:	4770      	bx	lr

08000a44 <__udivmoddi4>:
 8000a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a48:	9d08      	ldr	r5, [sp, #32]
 8000a4a:	4604      	mov	r4, r0
 8000a4c:	468e      	mov	lr, r1
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d14d      	bne.n	8000aee <__udivmoddi4+0xaa>
 8000a52:	428a      	cmp	r2, r1
 8000a54:	4694      	mov	ip, r2
 8000a56:	d969      	bls.n	8000b2c <__udivmoddi4+0xe8>
 8000a58:	fab2 f282 	clz	r2, r2
 8000a5c:	b152      	cbz	r2, 8000a74 <__udivmoddi4+0x30>
 8000a5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a62:	f1c2 0120 	rsb	r1, r2, #32
 8000a66:	fa20 f101 	lsr.w	r1, r0, r1
 8000a6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a72:	4094      	lsls	r4, r2
 8000a74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a78:	0c21      	lsrs	r1, r4, #16
 8000a7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a7e:	fa1f f78c 	uxth.w	r7, ip
 8000a82:	fb08 e316 	mls	r3, r8, r6, lr
 8000a86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a8a:	fb06 f107 	mul.w	r1, r6, r7
 8000a8e:	4299      	cmp	r1, r3
 8000a90:	d90a      	bls.n	8000aa8 <__udivmoddi4+0x64>
 8000a92:	eb1c 0303 	adds.w	r3, ip, r3
 8000a96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a9a:	f080 811f 	bcs.w	8000cdc <__udivmoddi4+0x298>
 8000a9e:	4299      	cmp	r1, r3
 8000aa0:	f240 811c 	bls.w	8000cdc <__udivmoddi4+0x298>
 8000aa4:	3e02      	subs	r6, #2
 8000aa6:	4463      	add	r3, ip
 8000aa8:	1a5b      	subs	r3, r3, r1
 8000aaa:	b2a4      	uxth	r4, r4
 8000aac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ab0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ab4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ab8:	fb00 f707 	mul.w	r7, r0, r7
 8000abc:	42a7      	cmp	r7, r4
 8000abe:	d90a      	bls.n	8000ad6 <__udivmoddi4+0x92>
 8000ac0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ac8:	f080 810a 	bcs.w	8000ce0 <__udivmoddi4+0x29c>
 8000acc:	42a7      	cmp	r7, r4
 8000ace:	f240 8107 	bls.w	8000ce0 <__udivmoddi4+0x29c>
 8000ad2:	4464      	add	r4, ip
 8000ad4:	3802      	subs	r0, #2
 8000ad6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ada:	1be4      	subs	r4, r4, r7
 8000adc:	2600      	movs	r6, #0
 8000ade:	b11d      	cbz	r5, 8000ae8 <__udivmoddi4+0xa4>
 8000ae0:	40d4      	lsrs	r4, r2
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e9c5 4300 	strd	r4, r3, [r5]
 8000ae8:	4631      	mov	r1, r6
 8000aea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aee:	428b      	cmp	r3, r1
 8000af0:	d909      	bls.n	8000b06 <__udivmoddi4+0xc2>
 8000af2:	2d00      	cmp	r5, #0
 8000af4:	f000 80ef 	beq.w	8000cd6 <__udivmoddi4+0x292>
 8000af8:	2600      	movs	r6, #0
 8000afa:	e9c5 0100 	strd	r0, r1, [r5]
 8000afe:	4630      	mov	r0, r6
 8000b00:	4631      	mov	r1, r6
 8000b02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b06:	fab3 f683 	clz	r6, r3
 8000b0a:	2e00      	cmp	r6, #0
 8000b0c:	d14a      	bne.n	8000ba4 <__udivmoddi4+0x160>
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d302      	bcc.n	8000b18 <__udivmoddi4+0xd4>
 8000b12:	4282      	cmp	r2, r0
 8000b14:	f200 80f9 	bhi.w	8000d0a <__udivmoddi4+0x2c6>
 8000b18:	1a84      	subs	r4, r0, r2
 8000b1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b1e:	2001      	movs	r0, #1
 8000b20:	469e      	mov	lr, r3
 8000b22:	2d00      	cmp	r5, #0
 8000b24:	d0e0      	beq.n	8000ae8 <__udivmoddi4+0xa4>
 8000b26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b2a:	e7dd      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000b2c:	b902      	cbnz	r2, 8000b30 <__udivmoddi4+0xec>
 8000b2e:	deff      	udf	#255	; 0xff
 8000b30:	fab2 f282 	clz	r2, r2
 8000b34:	2a00      	cmp	r2, #0
 8000b36:	f040 8092 	bne.w	8000c5e <__udivmoddi4+0x21a>
 8000b3a:	eba1 010c 	sub.w	r1, r1, ip
 8000b3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b42:	fa1f fe8c 	uxth.w	lr, ip
 8000b46:	2601      	movs	r6, #1
 8000b48:	0c20      	lsrs	r0, r4, #16
 8000b4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b56:	fb0e f003 	mul.w	r0, lr, r3
 8000b5a:	4288      	cmp	r0, r1
 8000b5c:	d908      	bls.n	8000b70 <__udivmoddi4+0x12c>
 8000b5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b66:	d202      	bcs.n	8000b6e <__udivmoddi4+0x12a>
 8000b68:	4288      	cmp	r0, r1
 8000b6a:	f200 80cb 	bhi.w	8000d04 <__udivmoddi4+0x2c0>
 8000b6e:	4643      	mov	r3, r8
 8000b70:	1a09      	subs	r1, r1, r0
 8000b72:	b2a4      	uxth	r4, r4
 8000b74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b78:	fb07 1110 	mls	r1, r7, r0, r1
 8000b7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b80:	fb0e fe00 	mul.w	lr, lr, r0
 8000b84:	45a6      	cmp	lr, r4
 8000b86:	d908      	bls.n	8000b9a <__udivmoddi4+0x156>
 8000b88:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b90:	d202      	bcs.n	8000b98 <__udivmoddi4+0x154>
 8000b92:	45a6      	cmp	lr, r4
 8000b94:	f200 80bb 	bhi.w	8000d0e <__udivmoddi4+0x2ca>
 8000b98:	4608      	mov	r0, r1
 8000b9a:	eba4 040e 	sub.w	r4, r4, lr
 8000b9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ba2:	e79c      	b.n	8000ade <__udivmoddi4+0x9a>
 8000ba4:	f1c6 0720 	rsb	r7, r6, #32
 8000ba8:	40b3      	lsls	r3, r6
 8000baa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bba:	431c      	orrs	r4, r3
 8000bbc:	40f9      	lsrs	r1, r7
 8000bbe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000bc2:	fa00 f306 	lsl.w	r3, r0, r6
 8000bc6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bca:	0c20      	lsrs	r0, r4, #16
 8000bcc:	fa1f fe8c 	uxth.w	lr, ip
 8000bd0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bd4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bdc:	4288      	cmp	r0, r1
 8000bde:	fa02 f206 	lsl.w	r2, r2, r6
 8000be2:	d90b      	bls.n	8000bfc <__udivmoddi4+0x1b8>
 8000be4:	eb1c 0101 	adds.w	r1, ip, r1
 8000be8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bec:	f080 8088 	bcs.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf0:	4288      	cmp	r0, r1
 8000bf2:	f240 8085 	bls.w	8000d00 <__udivmoddi4+0x2bc>
 8000bf6:	f1a8 0802 	sub.w	r8, r8, #2
 8000bfa:	4461      	add	r1, ip
 8000bfc:	1a09      	subs	r1, r1, r0
 8000bfe:	b2a4      	uxth	r4, r4
 8000c00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c04:	fb09 1110 	mls	r1, r9, r0, r1
 8000c08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c10:	458e      	cmp	lr, r1
 8000c12:	d908      	bls.n	8000c26 <__udivmoddi4+0x1e2>
 8000c14:	eb1c 0101 	adds.w	r1, ip, r1
 8000c18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c1c:	d26c      	bcs.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c1e:	458e      	cmp	lr, r1
 8000c20:	d96a      	bls.n	8000cf8 <__udivmoddi4+0x2b4>
 8000c22:	3802      	subs	r0, #2
 8000c24:	4461      	add	r1, ip
 8000c26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c2e:	eba1 010e 	sub.w	r1, r1, lr
 8000c32:	42a1      	cmp	r1, r4
 8000c34:	46c8      	mov	r8, r9
 8000c36:	46a6      	mov	lr, r4
 8000c38:	d356      	bcc.n	8000ce8 <__udivmoddi4+0x2a4>
 8000c3a:	d053      	beq.n	8000ce4 <__udivmoddi4+0x2a0>
 8000c3c:	b15d      	cbz	r5, 8000c56 <__udivmoddi4+0x212>
 8000c3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c42:	eb61 010e 	sbc.w	r1, r1, lr
 8000c46:	fa01 f707 	lsl.w	r7, r1, r7
 8000c4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c4e:	40f1      	lsrs	r1, r6
 8000c50:	431f      	orrs	r7, r3
 8000c52:	e9c5 7100 	strd	r7, r1, [r5]
 8000c56:	2600      	movs	r6, #0
 8000c58:	4631      	mov	r1, r6
 8000c5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c5e:	f1c2 0320 	rsb	r3, r2, #32
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c68:	fa21 f303 	lsr.w	r3, r1, r3
 8000c6c:	4091      	lsls	r1, r2
 8000c6e:	4301      	orrs	r1, r0
 8000c70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000c80:	0c0b      	lsrs	r3, r1, #16
 8000c82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c86:	fb00 f60e 	mul.w	r6, r0, lr
 8000c8a:	429e      	cmp	r6, r3
 8000c8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0x260>
 8000c92:	eb1c 0303 	adds.w	r3, ip, r3
 8000c96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c9a:	d22f      	bcs.n	8000cfc <__udivmoddi4+0x2b8>
 8000c9c:	429e      	cmp	r6, r3
 8000c9e:	d92d      	bls.n	8000cfc <__udivmoddi4+0x2b8>
 8000ca0:	3802      	subs	r0, #2
 8000ca2:	4463      	add	r3, ip
 8000ca4:	1b9b      	subs	r3, r3, r6
 8000ca6:	b289      	uxth	r1, r1
 8000ca8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000cac:	fb07 3316 	mls	r3, r7, r6, r3
 8000cb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cb8:	428b      	cmp	r3, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x28a>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000cc4:	d216      	bcs.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cc6:	428b      	cmp	r3, r1
 8000cc8:	d914      	bls.n	8000cf4 <__udivmoddi4+0x2b0>
 8000cca:	3e02      	subs	r6, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	1ac9      	subs	r1, r1, r3
 8000cd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cd4:	e738      	b.n	8000b48 <__udivmoddi4+0x104>
 8000cd6:	462e      	mov	r6, r5
 8000cd8:	4628      	mov	r0, r5
 8000cda:	e705      	b.n	8000ae8 <__udivmoddi4+0xa4>
 8000cdc:	4606      	mov	r6, r0
 8000cde:	e6e3      	b.n	8000aa8 <__udivmoddi4+0x64>
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	e6f8      	b.n	8000ad6 <__udivmoddi4+0x92>
 8000ce4:	454b      	cmp	r3, r9
 8000ce6:	d2a9      	bcs.n	8000c3c <__udivmoddi4+0x1f8>
 8000ce8:	ebb9 0802 	subs.w	r8, r9, r2
 8000cec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000cf0:	3801      	subs	r0, #1
 8000cf2:	e7a3      	b.n	8000c3c <__udivmoddi4+0x1f8>
 8000cf4:	4646      	mov	r6, r8
 8000cf6:	e7ea      	b.n	8000cce <__udivmoddi4+0x28a>
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	e794      	b.n	8000c26 <__udivmoddi4+0x1e2>
 8000cfc:	4640      	mov	r0, r8
 8000cfe:	e7d1      	b.n	8000ca4 <__udivmoddi4+0x260>
 8000d00:	46d0      	mov	r8, sl
 8000d02:	e77b      	b.n	8000bfc <__udivmoddi4+0x1b8>
 8000d04:	3b02      	subs	r3, #2
 8000d06:	4461      	add	r1, ip
 8000d08:	e732      	b.n	8000b70 <__udivmoddi4+0x12c>
 8000d0a:	4630      	mov	r0, r6
 8000d0c:	e709      	b.n	8000b22 <__udivmoddi4+0xde>
 8000d0e:	4464      	add	r4, ip
 8000d10:	3802      	subs	r0, #2
 8000d12:	e742      	b.n	8000b9a <__udivmoddi4+0x156>

08000d14 <__aeabi_idiv0>:
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop

08000d18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d18:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d1e:	f001 fc8f 	bl	8002640 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d22:	f000 f8d1 	bl	8000ec8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d26:	f000 fb3f 	bl	80013a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d2a:	f000 fb1d 	bl	8001368 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000d2e:	f000 faf1 	bl	8001314 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000d32:	f000 fa77 	bl	8001224 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000d36:	f000 fa21 	bl	800117c <MX_TIM3_Init>
  MX_TIM1_Init();
 8000d3a:	f000 f98f 	bl	800105c <MX_TIM1_Init>
  MX_ADC1_Init();
 8000d3e:	f000 f92d 	bl	8000f9c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000d42:	f000 fabd 	bl	80012c0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000d46:	2104      	movs	r1, #4
 8000d48:	4851      	ldr	r0, [pc, #324]	; (8000e90 <main+0x178>)
 8000d4a:	f003 fe25 	bl	8004998 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8000d4e:	4851      	ldr	r0, [pc, #324]	; (8000e94 <main+0x17c>)
 8000d50:	f003 fc22 	bl	8004598 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000d54:	2100      	movs	r1, #0
 8000d56:	484f      	ldr	r0, [pc, #316]	; (8000e94 <main+0x17c>)
 8000d58:	f003 fcc8 	bl	80046ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000d5c:	2104      	movs	r1, #4
 8000d5e:	484d      	ldr	r0, [pc, #308]	; (8000e94 <main+0x17c>)
 8000d60:	f003 fcc4 	bl	80046ec <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8000d64:	4b4c      	ldr	r3, [pc, #304]	; (8000e98 <main+0x180>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	461a      	mov	r2, r3
 8000d6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d70:	484a      	ldr	r0, [pc, #296]	; (8000e9c <main+0x184>)
 8000d72:	f002 fef7 	bl	8003b64 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8000d76:	4b4a      	ldr	r3, [pc, #296]	; (8000ea0 <main+0x188>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	b2db      	uxtb	r3, r3
 8000d7c:	461a      	mov	r2, r3
 8000d7e:	2110      	movs	r1, #16
 8000d80:	4846      	ldr	r0, [pc, #280]	; (8000e9c <main+0x184>)
 8000d82:	f002 feef 	bl	8003b64 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim5); //Start Timer5
 8000d86:	4847      	ldr	r0, [pc, #284]	; (8000ea4 <main+0x18c>)
 8000d88:	f003 fc06 	bl	8004598 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8000d8c:	2202      	movs	r2, #2
 8000d8e:	4946      	ldr	r1, [pc, #280]	; (8000ea8 <main+0x190>)
 8000d90:	4846      	ldr	r0, [pc, #280]	; (8000eac <main+0x194>)
 8000d92:	f001 fd0b 	bl	80027ac <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  JoystickPinUpdate(); //Check Pin Flag
 8000d96:	f000 fc29 	bl	80015ec <JoystickPinUpdate>

	  switch(scheduler)
 8000d9a:	4b45      	ldr	r3, [pc, #276]	; (8000eb0 <main+0x198>)
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	2b03      	cmp	r3, #3
 8000da0:	d8f9      	bhi.n	8000d96 <main+0x7e>
 8000da2:	a201      	add	r2, pc, #4	; (adr r2, 8000da8 <main+0x90>)
 8000da4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000da8:	08000db9 	.word	0x08000db9
 8000dac:	08000dcf 	.word	0x08000dcf
 8000db0:	08000e6b 	.word	0x08000e6b
 8000db4:	08000e71 	.word	0x08000e71
	  {
	  //Joystick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8000db8:	4b35      	ldr	r3, [pc, #212]	; (8000e90 <main+0x178>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dbe:	b21a      	sxth	r2, r3
 8000dc0:	4b3c      	ldr	r3, [pc, #240]	; (8000eb4 <main+0x19c>)
 8000dc2:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form Joystick
 8000dc4:	f000 fc90 	bl	80016e8 <JoystickControl>
		  JoystickLocationState();
 8000dc8:	f000 fd0a 	bl	80017e0 <JoystickLocationState>
		  break;
 8000dcc:	e05e      	b.n	8000e8c <main+0x174>
	  //Trajectory
	  case 1:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8000dce:	4b30      	ldr	r3, [pc, #192]	; (8000e90 <main+0x178>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000dd4:	b21a      	sxth	r2, r3
 8000dd6:	4b37      	ldr	r3, [pc, #220]	; (8000eb4 <main+0x19c>)
 8000dd8:	801a      	strh	r2, [r3, #0]
		  static uint64_t timestamp0 = 0;
		  currentTime = micros();
 8000dda:	f000 fbbf 	bl	800155c <micros>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	4935      	ldr	r1, [pc, #212]	; (8000eb8 <main+0x1a0>)
 8000de4:	e9c1 2300 	strd	r2, r3, [r1]
		  if(currentTime > timestamp0)
 8000de8:	4b33      	ldr	r3, [pc, #204]	; (8000eb8 <main+0x1a0>)
 8000dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dee:	4610      	mov	r0, r2
 8000df0:	4619      	mov	r1, r3
 8000df2:	4b32      	ldr	r3, [pc, #200]	; (8000ebc <main+0x1a4>)
 8000df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000df8:	4282      	cmp	r2, r0
 8000dfa:	418b      	sbcs	r3, r1
 8000dfc:	d20d      	bcs.n	8000e1a <main+0x102>
		  {
			  timestamp0 = currentTime + 1000;
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <main+0x1a0>)
 8000e00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e04:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 8000e08:	f143 0900 	adc.w	r9, r3, #0
 8000e0c:	4642      	mov	r2, r8
 8000e0e:	464b      	mov	r3, r9
 8000e10:	492a      	ldr	r1, [pc, #168]	; (8000ebc <main+0x1a4>)
 8000e12:	e9c1 2300 	strd	r2, r3, [r1]
			  VelocityApprox();
 8000e16:	f000 fbbb 	bl	8001590 <VelocityApprox>
//			  TrajectoryGenerator();
//		  }

		  //PWM & Motor drive & PID
		  static uint64_t timestamp2 = 0;
		  if (micros()>= timestamp2)
 8000e1a:	f000 fb9f 	bl	800155c <micros>
 8000e1e:	4b28      	ldr	r3, [pc, #160]	; (8000ec0 <main+0x1a8>)
 8000e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e24:	4290      	cmp	r0, r2
 8000e26:	eb71 0303 	sbcs.w	r3, r1, r3
 8000e2a:	d313      	bcc.n	8000e54 <main+0x13c>
		  {
			  timestamp2 = micros() + 10;
 8000e2c:	f000 fb96 	bl	800155c <micros>
 8000e30:	4602      	mov	r2, r0
 8000e32:	460b      	mov	r3, r1
 8000e34:	f112 040a 	adds.w	r4, r2, #10
 8000e38:	f143 0500 	adc.w	r5, r3, #0
 8000e3c:	4b20      	ldr	r3, [pc, #128]	; (8000ec0 <main+0x1a8>)
 8000e3e:	e9c3 4500 	strd	r4, r5, [r3]
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000e42:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <main+0x17c>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2200      	movs	r2, #0
 8000e48:	639a      	str	r2, [r3, #56]	; 0x38
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,5000);
 8000e4a:	4b12      	ldr	r3, [pc, #72]	; (8000e94 <main+0x17c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000e52:	635a      	str	r2, [r3, #52]	; 0x34
//				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
//				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
//			  }
		  }

		  if (ResetButton.flag == 1)
 8000e54:	4b1b      	ldr	r3, [pc, #108]	; (8000ec4 <main+0x1ac>)
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	2b01      	cmp	r3, #1
 8000e5a:	d114      	bne.n	8000e86 <main+0x16e>
		  {
			  ResetButton.flag = 0;
 8000e5c:	4b19      	ldr	r3, [pc, #100]	; (8000ec4 <main+0x1ac>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8000e62:	4b13      	ldr	r3, [pc, #76]	; (8000eb0 <main+0x198>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8000e68:	e00d      	b.n	8000e86 <main+0x16e>

	  //Proximity
	  case 2:
		  Homing();
 8000e6a:	f000 fb57 	bl	800151c <Homing>
		  break;
 8000e6e:	e00d      	b.n	8000e8c <main+0x174>

	  //Home
	  case 3:
		  if (ResetButton.flag == 1)
 8000e70:	4b14      	ldr	r3, [pc, #80]	; (8000ec4 <main+0x1ac>)
 8000e72:	689b      	ldr	r3, [r3, #8]
 8000e74:	2b01      	cmp	r3, #1
 8000e76:	d108      	bne.n	8000e8a <main+0x172>
		  {
				ResetButton.flag = 0;
 8000e78:	4b12      	ldr	r3, [pc, #72]	; (8000ec4 <main+0x1ac>)
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	609a      	str	r2, [r3, #8]
				scheduler = 0;
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <main+0x198>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8000e84:	e001      	b.n	8000e8a <main+0x172>
		  break;
 8000e86:	bf00      	nop
 8000e88:	e785      	b.n	8000d96 <main+0x7e>
		  break;
 8000e8a:	bf00      	nop
	  JoystickPinUpdate(); //Check Pin Flag
 8000e8c:	e783      	b.n	8000d96 <main+0x7e>
 8000e8e:	bf00      	nop
 8000e90:	20000184 	.word	0x20000184
 8000e94:	2000013c 	.word	0x2000013c
 8000e98:	20000004 	.word	0x20000004
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	20000000 	.word	0x20000000
 8000ea4:	200001cc 	.word	0x200001cc
 8000ea8:	200003a4 	.word	0x200003a4
 8000eac:	20000094 	.word	0x20000094
 8000eb0:	2000029c 	.word	0x2000029c
 8000eb4:	200002b0 	.word	0x200002b0
 8000eb8:	200002a8 	.word	0x200002a8
 8000ebc:	200003b0 	.word	0x200003b0
 8000ec0:	200003b8 	.word	0x200003b8
 8000ec4:	20000380 	.word	0x20000380

08000ec8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b094      	sub	sp, #80	; 0x50
 8000ecc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ece:	f107 0320 	add.w	r3, r7, #32
 8000ed2:	2230      	movs	r2, #48	; 0x30
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f004 ff3c 	bl	8005d54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000edc:	f107 030c 	add.w	r3, r7, #12
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000eec:	2300      	movs	r3, #0
 8000eee:	60bb      	str	r3, [r7, #8]
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef4:	4a27      	ldr	r2, [pc, #156]	; (8000f94 <SystemClock_Config+0xcc>)
 8000ef6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000efa:	6413      	str	r3, [r2, #64]	; 0x40
 8000efc:	4b25      	ldr	r3, [pc, #148]	; (8000f94 <SystemClock_Config+0xcc>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f08:	2300      	movs	r3, #0
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a21      	ldr	r2, [pc, #132]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b1f      	ldr	r3, [pc, #124]	; (8000f98 <SystemClock_Config+0xd0>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f24:	2302      	movs	r3, #2
 8000f26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f2c:	2310      	movs	r3, #16
 8000f2e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f30:	2302      	movs	r3, #2
 8000f32:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f34:	2300      	movs	r3, #0
 8000f36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000f38:	2310      	movs	r3, #16
 8000f3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000f3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000f40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000f42:	2304      	movs	r3, #4
 8000f44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f46:	2304      	movs	r3, #4
 8000f48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f4a:	f107 0320 	add.w	r3, r7, #32
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f002 fe3a 	bl	8003bc8 <HAL_RCC_OscConfig>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000f5a:	f001 f8d3 	bl	8002104 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f5e:	230f      	movs	r3, #15
 8000f60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f62:	2302      	movs	r3, #2
 8000f64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f66:	2300      	movs	r3, #0
 8000f68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f6a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f70:	2300      	movs	r3, #0
 8000f72:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f74:	f107 030c 	add.w	r3, r7, #12
 8000f78:	2102      	movs	r1, #2
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 f89c 	bl	80040b8 <HAL_RCC_ClockConfig>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f86:	f001 f8bd 	bl	8002104 <Error_Handler>
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	3750      	adds	r7, #80	; 0x50
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	40023800 	.word	0x40023800
 8000f98:	40007000 	.word	0x40007000

08000f9c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000fa2:	463b      	mov	r3, r7
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
 8000faa:	609a      	str	r2, [r3, #8]
 8000fac:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fae:	4b28      	ldr	r3, [pc, #160]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fb0:	4a28      	ldr	r2, [pc, #160]	; (8001054 <MX_ADC1_Init+0xb8>)
 8000fb2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fb4:	4b26      	ldr	r3, [pc, #152]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fb6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fba:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fbc:	4b24      	ldr	r3, [pc, #144]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000fc2:	4b23      	ldr	r3, [pc, #140]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fc4:	2201      	movs	r2, #1
 8000fc6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000fc8:	4b21      	ldr	r3, [pc, #132]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fca:	2201      	movs	r2, #1
 8000fcc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fce:	4b20      	ldr	r3, [pc, #128]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fde:	4a1e      	ldr	r2, [pc, #120]	; (8001058 <MX_ADC1_Init+0xbc>)
 8000fe0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe2:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000fe8:	4b19      	ldr	r3, [pc, #100]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000fea:	2202      	movs	r2, #2
 8000fec:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000fee:	4b18      	ldr	r3, [pc, #96]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ff6:	4b16      	ldr	r3, [pc, #88]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ffc:	4814      	ldr	r0, [pc, #80]	; (8001050 <MX_ADC1_Init+0xb4>)
 8000ffe:	f001 fb91 	bl	8002724 <HAL_ADC_Init>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001008:	f001 f87c 	bl	8002104 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800100c:	2300      	movs	r3, #0
 800100e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001014:	2303      	movs	r3, #3
 8001016:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001018:	463b      	mov	r3, r7
 800101a:	4619      	mov	r1, r3
 800101c:	480c      	ldr	r0, [pc, #48]	; (8001050 <MX_ADC1_Init+0xb4>)
 800101e:	f001 fcd3 	bl	80029c8 <HAL_ADC_ConfigChannel>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001028:	f001 f86c 	bl	8002104 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800102c:	2301      	movs	r3, #1
 800102e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001030:	2302      	movs	r3, #2
 8001032:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001034:	463b      	mov	r3, r7
 8001036:	4619      	mov	r1, r3
 8001038:	4805      	ldr	r0, [pc, #20]	; (8001050 <MX_ADC1_Init+0xb4>)
 800103a:	f001 fcc5 	bl	80029c8 <HAL_ADC_ConfigChannel>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001044:	f001 f85e 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001048:	bf00      	nop
 800104a:	3710      	adds	r7, #16
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000094 	.word	0x20000094
 8001054:	40012000 	.word	0x40012000
 8001058:	0f000001 	.word	0x0f000001

0800105c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b092      	sub	sp, #72	; 0x48
 8001060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001062:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800106c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	609a      	str	r2, [r3, #8]
 8001078:	60da      	str	r2, [r3, #12]
 800107a:	611a      	str	r2, [r3, #16]
 800107c:	615a      	str	r2, [r3, #20]
 800107e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001080:	1d3b      	adds	r3, r7, #4
 8001082:	2220      	movs	r2, #32
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fe64 	bl	8005d54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800108c:	4b39      	ldr	r3, [pc, #228]	; (8001174 <MX_TIM1_Init+0x118>)
 800108e:	4a3a      	ldr	r2, [pc, #232]	; (8001178 <MX_TIM1_Init+0x11c>)
 8001090:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001092:	4b38      	ldr	r3, [pc, #224]	; (8001174 <MX_TIM1_Init+0x118>)
 8001094:	2253      	movs	r2, #83	; 0x53
 8001096:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001098:	4b36      	ldr	r3, [pc, #216]	; (8001174 <MX_TIM1_Init+0x118>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800109e:	4b35      	ldr	r3, [pc, #212]	; (8001174 <MX_TIM1_Init+0x118>)
 80010a0:	f242 720f 	movw	r2, #9999	; 0x270f
 80010a4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010a6:	4b33      	ldr	r3, [pc, #204]	; (8001174 <MX_TIM1_Init+0x118>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80010ac:	4b31      	ldr	r3, [pc, #196]	; (8001174 <MX_TIM1_Init+0x118>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010b2:	4b30      	ldr	r3, [pc, #192]	; (8001174 <MX_TIM1_Init+0x118>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80010b8:	482e      	ldr	r0, [pc, #184]	; (8001174 <MX_TIM1_Init+0x118>)
 80010ba:	f003 fac7 	bl	800464c <HAL_TIM_PWM_Init>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80010c4:	f001 f81e 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c8:	2300      	movs	r3, #0
 80010ca:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010d4:	4619      	mov	r1, r3
 80010d6:	4827      	ldr	r0, [pc, #156]	; (8001174 <MX_TIM1_Init+0x118>)
 80010d8:	f004 fa7c 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 80010dc:	4603      	mov	r3, r0
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d001      	beq.n	80010e6 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80010e2:	f001 f80f 	bl	8002104 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80010e6:	2360      	movs	r3, #96	; 0x60
 80010e8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80010ea:	2300      	movs	r3, #0
 80010ec:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80010ee:	2300      	movs	r3, #0
 80010f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010f2:	2300      	movs	r3, #0
 80010f4:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010f6:	2300      	movs	r3, #0
 80010f8:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010fa:	2300      	movs	r3, #0
 80010fc:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010fe:	2300      	movs	r3, #0
 8001100:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001102:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001106:	2200      	movs	r2, #0
 8001108:	4619      	mov	r1, r3
 800110a:	481a      	ldr	r0, [pc, #104]	; (8001174 <MX_TIM1_Init+0x118>)
 800110c:	f003 fdda 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001116:	f000 fff5 	bl	8002104 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800111a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800111e:	2204      	movs	r2, #4
 8001120:	4619      	mov	r1, r3
 8001122:	4814      	ldr	r0, [pc, #80]	; (8001174 <MX_TIM1_Init+0x118>)
 8001124:	f003 fdce 	bl	8004cc4 <HAL_TIM_PWM_ConfigChannel>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800112e:	f000 ffe9 	bl	8002104 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001132:	2300      	movs	r3, #0
 8001134:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800113e:	2300      	movs	r3, #0
 8001140:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001146:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800114a:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001150:	1d3b      	adds	r3, r7, #4
 8001152:	4619      	mov	r1, r3
 8001154:	4807      	ldr	r0, [pc, #28]	; (8001174 <MX_TIM1_Init+0x118>)
 8001156:	f004 faab 	bl	80056b0 <HAL_TIMEx_ConfigBreakDeadTime>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001160:	f000 ffd0 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001164:	4803      	ldr	r0, [pc, #12]	; (8001174 <MX_TIM1_Init+0x118>)
 8001166:	f001 f905 	bl	8002374 <HAL_TIM_MspPostInit>

}
 800116a:	bf00      	nop
 800116c:	3748      	adds	r7, #72	; 0x48
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	2000013c 	.word	0x2000013c
 8001178:	40010000 	.word	0x40010000

0800117c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b08c      	sub	sp, #48	; 0x30
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001182:	f107 030c 	add.w	r3, r7, #12
 8001186:	2224      	movs	r2, #36	; 0x24
 8001188:	2100      	movs	r1, #0
 800118a:	4618      	mov	r0, r3
 800118c:	f004 fde2 	bl	8005d54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001190:	1d3b      	adds	r3, r7, #4
 8001192:	2200      	movs	r2, #0
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001198:	4b20      	ldr	r3, [pc, #128]	; (800121c <MX_TIM3_Init+0xa0>)
 800119a:	4a21      	ldr	r2, [pc, #132]	; (8001220 <MX_TIM3_Init+0xa4>)
 800119c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800119e:	4b1f      	ldr	r3, [pc, #124]	; (800121c <MX_TIM3_Init+0xa0>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011a4:	4b1d      	ldr	r3, [pc, #116]	; (800121c <MX_TIM3_Init+0xa0>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 80011aa:	4b1c      	ldr	r3, [pc, #112]	; (800121c <MX_TIM3_Init+0xa0>)
 80011ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80011b0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011b2:	4b1a      	ldr	r3, [pc, #104]	; (800121c <MX_TIM3_Init+0xa0>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <MX_TIM3_Init+0xa0>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80011be:	2301      	movs	r3, #1
 80011c0:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80011c6:	2301      	movs	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80011d2:	2300      	movs	r3, #0
 80011d4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80011d6:	2301      	movs	r3, #1
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80011e2:	f107 030c 	add.w	r3, r7, #12
 80011e6:	4619      	mov	r1, r3
 80011e8:	480c      	ldr	r0, [pc, #48]	; (800121c <MX_TIM3_Init+0xa0>)
 80011ea:	f003 fb2f 	bl	800484c <HAL_TIM_Encoder_Init>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 ff86 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001200:	1d3b      	adds	r3, r7, #4
 8001202:	4619      	mov	r1, r3
 8001204:	4805      	ldr	r0, [pc, #20]	; (800121c <MX_TIM3_Init+0xa0>)
 8001206:	f004 f9e5 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001210:	f000 ff78 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3730      	adds	r7, #48	; 0x30
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000184 	.word	0x20000184
 8001220:	40000400 	.word	0x40000400

08001224 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800122a:	f107 0308 	add.w	r3, r7, #8
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001238:	463b      	mov	r3, r7
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001242:	4a1e      	ldr	r2, [pc, #120]	; (80012bc <MX_TIM5_Init+0x98>)
 8001244:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001248:	2253      	movs	r2, #83	; 0x53
 800124a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800124c:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM5_Init+0x94>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001252:	4b19      	ldr	r3, [pc, #100]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001254:	f04f 32ff 	mov.w	r2, #4294967295
 8001258:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <MX_TIM5_Init+0x94>)
 800125c:	2200      	movs	r2, #0
 800125e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001260:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001262:	2200      	movs	r2, #0
 8001264:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001266:	4814      	ldr	r0, [pc, #80]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001268:	f003 f946 	bl	80044f8 <HAL_TIM_Base_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001272:	f000 ff47 	bl	8002104 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001276:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800127a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800127c:	f107 0308 	add.w	r3, r7, #8
 8001280:	4619      	mov	r1, r3
 8001282:	480d      	ldr	r0, [pc, #52]	; (80012b8 <MX_TIM5_Init+0x94>)
 8001284:	f003 fde0 	bl	8004e48 <HAL_TIM_ConfigClockSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800128e:	f000 ff39 	bl	8002104 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001296:	2300      	movs	r3, #0
 8001298:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800129a:	463b      	mov	r3, r7
 800129c:	4619      	mov	r1, r3
 800129e:	4806      	ldr	r0, [pc, #24]	; (80012b8 <MX_TIM5_Init+0x94>)
 80012a0:	f004 f998 	bl	80055d4 <HAL_TIMEx_MasterConfigSynchronization>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80012aa:	f000 ff2b 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80012ae:	bf00      	nop
 80012b0:	3718      	adds	r7, #24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001cc 	.word	0x200001cc
 80012bc:	40000c00 	.word	0x40000c00

080012c0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012c4:	4b11      	ldr	r3, [pc, #68]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012c6:	4a12      	ldr	r2, [pc, #72]	; (8001310 <MX_USART1_UART_Init+0x50>)
 80012c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012ca:	4b10      	ldr	r3, [pc, #64]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012d8:	4b0c      	ldr	r3, [pc, #48]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012da:	2200      	movs	r2, #0
 80012dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012de:	4b0b      	ldr	r3, [pc, #44]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012e4:	4b09      	ldr	r3, [pc, #36]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012e6:	220c      	movs	r2, #12
 80012e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ea:	4b08      	ldr	r3, [pc, #32]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012f0:	4b06      	ldr	r3, [pc, #24]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012f6:	4805      	ldr	r0, [pc, #20]	; (800130c <MX_USART1_UART_Init+0x4c>)
 80012f8:	f004 fa40 	bl	800577c <HAL_UART_Init>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d001      	beq.n	8001306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001302:	f000 feff 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001306:	bf00      	nop
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	20000214 	.word	0x20000214
 8001310:	40011000 	.word	0x40011000

08001314 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001318:	4b11      	ldr	r3, [pc, #68]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800131a:	4a12      	ldr	r2, [pc, #72]	; (8001364 <MX_USART2_UART_Init+0x50>)
 800131c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001320:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001324:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001326:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800132c:	4b0c      	ldr	r3, [pc, #48]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800132e:	2200      	movs	r2, #0
 8001330:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001334:	2200      	movs	r2, #0
 8001336:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800133a:	220c      	movs	r2, #12
 800133c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001340:	2200      	movs	r2, #0
 8001342:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 8001346:	2200      	movs	r2, #0
 8001348:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_USART2_UART_Init+0x4c>)
 800134c:	f004 fa16 	bl	800577c <HAL_UART_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001356:	f000 fed5 	bl	8002104 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000258 	.word	0x20000258
 8001364:	40004400 	.word	0x40004400

08001368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	607b      	str	r3, [r7, #4]
 8001372:	4b0c      	ldr	r3, [pc, #48]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a0b      	ldr	r2, [pc, #44]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001378:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b09      	ldr	r3, [pc, #36]	; (80013a4 <MX_DMA_Init+0x3c>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001386:	607b      	str	r3, [r7, #4]
 8001388:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800138a:	2200      	movs	r2, #0
 800138c:	2100      	movs	r1, #0
 800138e:	2038      	movs	r0, #56	; 0x38
 8001390:	f001 fea5 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001394:	2038      	movs	r0, #56	; 0x38
 8001396:	f001 febe 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 800139a:	bf00      	nop
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	40023800 	.word	0x40023800

080013a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08a      	sub	sp, #40	; 0x28
 80013ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ae:	f107 0314 	add.w	r3, r7, #20
 80013b2:	2200      	movs	r2, #0
 80013b4:	601a      	str	r2, [r3, #0]
 80013b6:	605a      	str	r2, [r3, #4]
 80013b8:	609a      	str	r2, [r3, #8]
 80013ba:	60da      	str	r2, [r3, #12]
 80013bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
 80013c2:	4b47      	ldr	r3, [pc, #284]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a46      	ldr	r2, [pc, #280]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013c8:	f043 0304 	orr.w	r3, r3, #4
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b44      	ldr	r3, [pc, #272]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	613b      	str	r3, [r7, #16]
 80013d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	60fb      	str	r3, [r7, #12]
 80013de:	4b40      	ldr	r3, [pc, #256]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	4a3f      	ldr	r2, [pc, #252]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013e8:	6313      	str	r3, [r2, #48]	; 0x30
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f2:	60fb      	str	r3, [r7, #12]
 80013f4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
 80013fa:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <MX_GPIO_Init+0x138>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <MX_GPIO_Init+0x138>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b36      	ldr	r3, [pc, #216]	; (80014e0 <MX_GPIO_Init+0x138>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	2300      	movs	r3, #0
 8001414:	607b      	str	r3, [r7, #4]
 8001416:	4b32      	ldr	r3, [pc, #200]	; (80014e0 <MX_GPIO_Init+0x138>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	4a31      	ldr	r2, [pc, #196]	; (80014e0 <MX_GPIO_Init+0x138>)
 800141c:	f043 0302 	orr.w	r3, r3, #2
 8001420:	6313      	str	r3, [r2, #48]	; 0x30
 8001422:	4b2f      	ldr	r3, [pc, #188]	; (80014e0 <MX_GPIO_Init+0x138>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	607b      	str	r3, [r7, #4]
 800142c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800142e:	2200      	movs	r2, #0
 8001430:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001434:	482b      	ldr	r0, [pc, #172]	; (80014e4 <MX_GPIO_Init+0x13c>)
 8001436:	f002 fb95 	bl	8003b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : B1_Pin PC1 PC2 PC3 */
  GPIO_InitStruct.Pin = B1_Pin|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800143a:	f242 030e 	movw	r3, #8206	; 0x200e
 800143e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001440:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	4619      	mov	r1, r3
 8001450:	4825      	ldr	r0, [pc, #148]	; (80014e8 <MX_GPIO_Init+0x140>)
 8001452:	f002 f9eb 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 8001456:	f44f 6386 	mov.w	r3, #1072	; 0x430
 800145a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800145c:	2300      	movs	r3, #0
 800145e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	4619      	mov	r1, r3
 800146a:	4820      	ldr	r0, [pc, #128]	; (80014ec <MX_GPIO_Init+0x144>)
 800146c:	f002 f9de 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001470:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001476:	2301      	movs	r3, #1
 8001478:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001482:	f107 0314 	add.w	r3, r7, #20
 8001486:	4619      	mov	r1, r3
 8001488:	4816      	ldr	r0, [pc, #88]	; (80014e4 <MX_GPIO_Init+0x13c>)
 800148a:	f002 f9cf 	bl	800382c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800148e:	2360      	movs	r3, #96	; 0x60
 8001490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	f107 0314 	add.w	r3, r7, #20
 800149e:	4619      	mov	r1, r3
 80014a0:	4810      	ldr	r0, [pc, #64]	; (80014e4 <MX_GPIO_Init+0x13c>)
 80014a2:	f002 f9c3 	bl	800382c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80014a6:	2200      	movs	r2, #0
 80014a8:	2100      	movs	r1, #0
 80014aa:	2007      	movs	r0, #7
 80014ac:	f001 fe17 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80014b0:	2007      	movs	r0, #7
 80014b2:	f001 fe30 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	2008      	movs	r0, #8
 80014bc:	f001 fe0f 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80014c0:	2008      	movs	r0, #8
 80014c2:	f001 fe28 	bl	8003116 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	2009      	movs	r0, #9
 80014cc:	f001 fe07 	bl	80030de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80014d0:	2009      	movs	r0, #9
 80014d2:	f001 fe20 	bl	8003116 <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3728      	adds	r7, #40	; 0x28
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40020400 	.word	0x40020400
 80014e8:	40020800 	.word	0x40020800
 80014ec:	40020000 	.word	0x40020000

080014f0 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2 || GPIO_Pin == GPIO_PIN_3)
 80014fa:	88fb      	ldrh	r3, [r7, #6]
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d002      	beq.n	8001506 <HAL_GPIO_EXTI_Callback+0x16>
 8001500:	88fb      	ldrh	r3, [r7, #6]
 8001502:	2b08      	cmp	r3, #8
 8001504:	d102      	bne.n	800150c <HAL_GPIO_EXTI_Callback+0x1c>
	{
		scheduler = 2;
 8001506:	4b04      	ldr	r3, [pc, #16]	; (8001518 <HAL_GPIO_EXTI_Callback+0x28>)
 8001508:	2202      	movs	r2, #2
 800150a:	601a      	str	r2, [r3, #0]
	}
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	2000029c 	.word	0x2000029c

0800151c <Homing>:

void Homing()
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001520:	4b0b      	ldr	r3, [pc, #44]	; (8001550 <Homing+0x34>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	2200      	movs	r2, #0
 8001526:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001528:	4b09      	ldr	r3, [pc, #36]	; (8001550 <Homing+0x34>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2200      	movs	r2, #0
 800152e:	635a      	str	r2, [r3, #52]	; 0x34

	if (ResetButton.flag == 1)
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <Homing+0x38>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	2b01      	cmp	r3, #1
 8001536:	d105      	bne.n	8001544 <Homing+0x28>
	{
		ResetButton.flag = 0;
 8001538:	4b06      	ldr	r3, [pc, #24]	; (8001554 <Homing+0x38>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
		scheduler = 0;
 800153e:	4b06      	ldr	r3, [pc, #24]	; (8001558 <Homing+0x3c>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
	}

}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	2000013c 	.word	0x2000013c
 8001554:	20000380 	.word	0x20000380
 8001558:	2000029c 	.word	0x2000029c

0800155c <micros>:
	}
}


uint64_t micros()
{
 800155c:	b4b0      	push	{r4, r5, r7}
 800155e:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001560:	4b09      	ldr	r3, [pc, #36]	; (8001588 <micros+0x2c>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001566:	2200      	movs	r2, #0
 8001568:	4618      	mov	r0, r3
 800156a:	4611      	mov	r1, r2
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <micros+0x30>)
 800156e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001572:	1884      	adds	r4, r0, r2
 8001574:	eb41 0503 	adc.w	r5, r1, r3
 8001578:	4622      	mov	r2, r4
 800157a:	462b      	mov	r3, r5
}
 800157c:	4610      	mov	r0, r2
 800157e:	4619      	mov	r1, r3
 8001580:	46bd      	mov	sp, r7
 8001582:	bcb0      	pop	{r4, r5, r7}
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	200001cc 	.word	0x200001cc
 800158c:	200002a0 	.word	0x200002a0

08001590 <VelocityApprox>:
	QEIData.data[1] = QEIData.data[0];
	QEIData.timestamp[1] = QEIData.timestamp[0];
}

void VelocityApprox()
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 8001594:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <VelocityApprox+0x50>)
 8001596:	f9b3 3000 	ldrsh.w	r3, [r3]
 800159a:	461a      	mov	r2, r3
 800159c:	4b11      	ldr	r3, [pc, #68]	; (80015e4 <VelocityApprox+0x54>)
 800159e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7fe ff69 	bl	800047c <__aeabi_i2d>
 80015aa:	a30b      	add	r3, pc, #44	; (adr r3, 80015d8 <VelocityApprox+0x48>)
 80015ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b0:	f7ff f8f8 	bl	80007a4 <__aeabi_ddiv>
 80015b4:	4602      	mov	r2, r0
 80015b6:	460b      	mov	r3, r1
 80015b8:	4610      	mov	r0, r2
 80015ba:	4619      	mov	r1, r3
 80015bc:	f7ff f9da 	bl	8000974 <__aeabi_d2f>
 80015c0:	4603      	mov	r3, r0
 80015c2:	4a09      	ldr	r2, [pc, #36]	; (80015e8 <VelocityApprox+0x58>)
 80015c4:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80015c6:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <VelocityApprox+0x50>)
 80015c8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80015cc:	4b05      	ldr	r3, [pc, #20]	; (80015e4 <VelocityApprox+0x54>)
 80015ce:	801a      	strh	r2, [r3, #0]
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	f3af 8000 	nop.w
 80015d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80015dc:	3f50624d 	.word	0x3f50624d
 80015e0:	200002b0 	.word	0x200002b0
 80015e4:	200003c0 	.word	0x200003c0
 80015e8:	200002b4 	.word	0x200002b4

080015ec <JoystickPinUpdate>:

	return duty;
}

void JoystickPinUpdate()
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 80015f0:	2140      	movs	r1, #64	; 0x40
 80015f2:	4837      	ldr	r0, [pc, #220]	; (80016d0 <JoystickPinUpdate+0xe4>)
 80015f4:	f002 fa9e 	bl	8003b34 <HAL_GPIO_ReadPin>
 80015f8:	4603      	mov	r3, r0
 80015fa:	461a      	mov	r2, r3
 80015fc:	4b35      	ldr	r3, [pc, #212]	; (80016d4 <JoystickPinUpdate+0xe8>)
 80015fe:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8001600:	4b34      	ldr	r3, [pc, #208]	; (80016d4 <JoystickPinUpdate+0xe8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2b01      	cmp	r3, #1
 8001606:	d107      	bne.n	8001618 <JoystickPinUpdate+0x2c>
 8001608:	4b32      	ldr	r3, [pc, #200]	; (80016d4 <JoystickPinUpdate+0xe8>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d103      	bne.n	8001618 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8001610:	4b30      	ldr	r3, [pc, #192]	; (80016d4 <JoystickPinUpdate+0xe8>)
 8001612:	2201      	movs	r2, #1
 8001614:	609a      	str	r2, [r3, #8]
 8001616:	e002      	b.n	800161e <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8001618:	4b2e      	ldr	r3, [pc, #184]	; (80016d4 <JoystickPinUpdate+0xe8>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 800161e:	4b2d      	ldr	r3, [pc, #180]	; (80016d4 <JoystickPinUpdate+0xe8>)
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	4a2c      	ldr	r2, [pc, #176]	; (80016d4 <JoystickPinUpdate+0xe8>)
 8001624:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001626:	2120      	movs	r1, #32
 8001628:	482b      	ldr	r0, [pc, #172]	; (80016d8 <JoystickPinUpdate+0xec>)
 800162a:	f002 fa83 	bl	8003b34 <HAL_GPIO_ReadPin>
 800162e:	4603      	mov	r3, r0
 8001630:	461a      	mov	r2, r3
 8001632:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001634:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8001636:	4b29      	ldr	r3, [pc, #164]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b01      	cmp	r3, #1
 800163c:	d107      	bne.n	800164e <JoystickPinUpdate+0x62>
 800163e:	4b27      	ldr	r3, [pc, #156]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b00      	cmp	r3, #0
 8001644:	d103      	bne.n	800164e <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8001646:	4b25      	ldr	r3, [pc, #148]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001648:	2201      	movs	r2, #1
 800164a:	609a      	str	r2, [r3, #8]
 800164c:	e002      	b.n	8001654 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8001654:	4b21      	ldr	r3, [pc, #132]	; (80016dc <JoystickPinUpdate+0xf0>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4a20      	ldr	r2, [pc, #128]	; (80016dc <JoystickPinUpdate+0xf0>)
 800165a:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800165c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001660:	481d      	ldr	r0, [pc, #116]	; (80016d8 <JoystickPinUpdate+0xec>)
 8001662:	f002 fa67 	bl	8003b34 <HAL_GPIO_ReadPin>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	4b1d      	ldr	r3, [pc, #116]	; (80016e0 <JoystickPinUpdate+0xf4>)
 800166c:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 800166e:	4b1c      	ldr	r3, [pc, #112]	; (80016e0 <JoystickPinUpdate+0xf4>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d107      	bne.n	8001686 <JoystickPinUpdate+0x9a>
 8001676:	4b1a      	ldr	r3, [pc, #104]	; (80016e0 <JoystickPinUpdate+0xf4>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d103      	bne.n	8001686 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 800167e:	4b18      	ldr	r3, [pc, #96]	; (80016e0 <JoystickPinUpdate+0xf4>)
 8001680:	2201      	movs	r2, #1
 8001682:	609a      	str	r2, [r3, #8]
 8001684:	e002      	b.n	800168c <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8001686:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <JoystickPinUpdate+0xf4>)
 8001688:	2200      	movs	r2, #0
 800168a:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 800168c:	4b14      	ldr	r3, [pc, #80]	; (80016e0 <JoystickPinUpdate+0xf4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	4a13      	ldr	r2, [pc, #76]	; (80016e0 <JoystickPinUpdate+0xf4>)
 8001692:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001694:	2120      	movs	r1, #32
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <JoystickPinUpdate+0xe4>)
 8001698:	f002 fa4c 	bl	8003b34 <HAL_GPIO_ReadPin>
 800169c:	4603      	mov	r3, r0
 800169e:	461a      	mov	r2, r3
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016a2:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 80016a4:	4b0f      	ldr	r3, [pc, #60]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d107      	bne.n	80016bc <JoystickPinUpdate+0xd0>
 80016ac:	4b0d      	ldr	r3, [pc, #52]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d103      	bne.n	80016bc <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 80016b4:	4b0b      	ldr	r3, [pc, #44]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	e002      	b.n	80016c2 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 80016bc:	4b09      	ldr	r3, [pc, #36]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016be:	2200      	movs	r2, #0
 80016c0:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 80016c2:	4b08      	ldr	r3, [pc, #32]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a07      	ldr	r2, [pc, #28]	; (80016e4 <JoystickPinUpdate+0xf8>)
 80016c8:	6013      	str	r3, [r2, #0]
}
 80016ca:	bf00      	nop
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40020400 	.word	0x40020400
 80016d4:	20000374 	.word	0x20000374
 80016d8:	40020000 	.word	0x40020000
 80016dc:	20000380 	.word	0x20000380
 80016e0:	2000038c 	.word	0x2000038c
 80016e4:	20000398 	.word	0x20000398

080016e8 <JoystickControl>:

void JoystickControl()
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
	static int JoySpeed = 0;

	if(RoughButton.flag == 1)
 80016ec:	4b37      	ldr	r3, [pc, #220]	; (80017cc <JoystickControl+0xe4>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	2b01      	cmp	r3, #1
 80016f2:	d106      	bne.n	8001702 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 80016f4:	4b36      	ldr	r3, [pc, #216]	; (80017d0 <JoystickControl+0xe8>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 80016fa:	4b34      	ldr	r3, [pc, #208]	; (80017cc <JoystickControl+0xe4>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	609a      	str	r2, [r3, #8]
 8001700:	e009      	b.n	8001716 <JoystickControl+0x2e>
	}
	else if(FineButton.flag == 1)
 8001702:	4b34      	ldr	r3, [pc, #208]	; (80017d4 <JoystickControl+0xec>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d105      	bne.n	8001716 <JoystickControl+0x2e>
	{
		JoySpeed = 1;
 800170a:	4b31      	ldr	r3, [pc, #196]	; (80017d0 <JoystickControl+0xe8>)
 800170c:	2201      	movs	r2, #1
 800170e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8001710:	4b30      	ldr	r3, [pc, #192]	; (80017d4 <JoystickControl+0xec>)
 8001712:	2200      	movs	r2, #0
 8001714:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8001716:	4b2e      	ldr	r3, [pc, #184]	; (80017d0 <JoystickControl+0xe8>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d002      	beq.n	8001724 <JoystickControl+0x3c>
 800171e:	2b01      	cmp	r3, #1
 8001720:	d028      	beq.n	8001774 <JoystickControl+0x8c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
		}
		break;
	}
}
 8001722:	e04d      	b.n	80017c0 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001724:	4b2c      	ldr	r3, [pc, #176]	; (80017d8 <JoystickControl+0xf0>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f640 0266 	movw	r2, #2150	; 0x866
 800172c:	4293      	cmp	r3, r2
 800172e:	dd09      	ble.n	8001744 <JoystickControl+0x5c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001730:	4b2a      	ldr	r3, [pc, #168]	; (80017dc <JoystickControl+0xf4>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2200      	movs	r2, #0
 8001736:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001738:	4b28      	ldr	r3, [pc, #160]	; (80017dc <JoystickControl+0xf4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001740:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001742:	e03d      	b.n	80017c0 <JoystickControl+0xd8>
		else if(XYSwitch[1] < 2000)
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <JoystickControl+0xf0>)
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800174c:	da09      	bge.n	8001762 <JoystickControl+0x7a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 800174e:	4b23      	ldr	r3, [pc, #140]	; (80017dc <JoystickControl+0xf4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001756:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001758:	4b20      	ldr	r3, [pc, #128]	; (80017dc <JoystickControl+0xf4>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	2200      	movs	r2, #0
 800175e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001760:	e02e      	b.n	80017c0 <JoystickControl+0xd8>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001762:	4b1e      	ldr	r3, [pc, #120]	; (80017dc <JoystickControl+0xf4>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2200      	movs	r2, #0
 8001768:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800176a:	4b1c      	ldr	r3, [pc, #112]	; (80017dc <JoystickControl+0xf4>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2200      	movs	r2, #0
 8001770:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001772:	e025      	b.n	80017c0 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001774:	4b18      	ldr	r3, [pc, #96]	; (80017d8 <JoystickControl+0xf0>)
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f640 0266 	movw	r2, #2150	; 0x866
 800177c:	4293      	cmp	r3, r2
 800177e:	dd08      	ble.n	8001792 <JoystickControl+0xaa>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001780:	4b16      	ldr	r3, [pc, #88]	; (80017dc <JoystickControl+0xf4>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	2200      	movs	r2, #0
 8001786:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 8001788:	4b14      	ldr	r3, [pc, #80]	; (80017dc <JoystickControl+0xf4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	22fa      	movs	r2, #250	; 0xfa
 800178e:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001790:	e015      	b.n	80017be <JoystickControl+0xd6>
		else if(XYSwitch[1] < 2000)
 8001792:	4b11      	ldr	r3, [pc, #68]	; (80017d8 <JoystickControl+0xf0>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800179a:	da08      	bge.n	80017ae <JoystickControl+0xc6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,250);
 800179c:	4b0f      	ldr	r3, [pc, #60]	; (80017dc <JoystickControl+0xf4>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	22fa      	movs	r2, #250	; 0xfa
 80017a2:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80017a4:	4b0d      	ldr	r3, [pc, #52]	; (80017dc <JoystickControl+0xf4>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80017ac:	e007      	b.n	80017be <JoystickControl+0xd6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80017ae:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <JoystickControl+0xf4>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80017b6:	4b09      	ldr	r3, [pc, #36]	; (80017dc <JoystickControl+0xf4>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2200      	movs	r2, #0
 80017bc:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80017be:	bf00      	nop
}
 80017c0:	bf00      	nop
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	20000398 	.word	0x20000398
 80017d0:	200003c4 	.word	0x200003c4
 80017d4:	2000038c 	.word	0x2000038c
 80017d8:	200003a4 	.word	0x200003a4
 80017dc:	2000013c 	.word	0x2000013c

080017e0 <JoystickLocationState>:

void JoystickLocationState()
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	ed2d 8b02 	vpush	{d8}
 80017e6:	af00      	add	r7, sp, #0
	switch(state)
 80017e8:	4b1c      	ldr	r3, [pc, #112]	; (800185c <JoystickLocationState+0x7c>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	f200 8471 	bhi.w	80020d4 <JoystickLocationState+0x8f4>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <JoystickLocationState+0x18>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001871 	.word	0x08001871
 8001800:	08001c53 	.word	0x08001c53
 8001804:	08001cc1 	.word	0x08001cc1
 8001808:	080020a1 	.word	0x080020a1
	{
	case 0:
		PickTray.L1[1] = 0;
 800180c:	4b14      	ldr	r3, [pc, #80]	; (8001860 <JoystickLocationState+0x80>)
 800180e:	f04f 0200 	mov.w	r2, #0
 8001812:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <JoystickLocationState+0x80>)
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	60da      	str	r2, [r3, #12]
		PlaceTray.L1[1] = 0;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <JoystickLocationState+0x84>)
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8001824:	4b0f      	ldr	r3, [pc, #60]	; (8001864 <JoystickLocationState+0x84>)
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 800182c:	4b0e      	ldr	r3, [pc, #56]	; (8001868 <JoystickLocationState+0x88>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	f040 8446 	bne.w	80020c2 <JoystickLocationState+0x8e2>
		{
			PickTray.L1[1] = position;
 8001836:	4b0d      	ldr	r3, [pc, #52]	; (800186c <JoystickLocationState+0x8c>)
 8001838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800183c:	ee07 3a90 	vmov	s15, r3
 8001840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <JoystickLocationState+0x80>)
 8001846:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 800184a:	4b07      	ldr	r3, [pc, #28]	; (8001868 <JoystickLocationState+0x88>)
 800184c:	2200      	movs	r2, #0
 800184e:	609a      	str	r2, [r3, #8]
			state = 1;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <JoystickLocationState+0x7c>)
 8001852:	2201      	movs	r2, #1
 8001854:	601a      	str	r2, [r3, #0]
		}
		break;
 8001856:	f000 bc34 	b.w	80020c2 <JoystickLocationState+0x8e2>
 800185a:	bf00      	nop
 800185c:	200002b8 	.word	0x200002b8
 8001860:	200002bc 	.word	0x200002bc
 8001864:	20000314 	.word	0x20000314
 8001868:	20000374 	.word	0x20000374
 800186c:	200002b0 	.word	0x200002b0
	case 1:
		if (GetPositionButton.flag == 1)
 8001870:	4bd6      	ldr	r3, [pc, #856]	; (8001bcc <JoystickLocationState+0x3ec>)
 8001872:	689b      	ldr	r3, [r3, #8]
 8001874:	2b01      	cmp	r3, #1
 8001876:	f040 81e0 	bne.w	8001c3a <JoystickLocationState+0x45a>
		{
			PickTray.L2[1] = position;
 800187a:	4bd5      	ldr	r3, [pc, #852]	; (8001bd0 <JoystickLocationState+0x3f0>)
 800187c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001880:	ee07 3a90 	vmov	s15, r3
 8001884:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001888:	4bd2      	ldr	r3, [pc, #840]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800188a:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 800188e:	4bcf      	ldr	r3, [pc, #828]	; (8001bcc <JoystickLocationState+0x3ec>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
			cos_Theta = PickTray.L2[0]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001894:	4bcf      	ldr	r3, [pc, #828]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001896:	ed93 8a02 	vldr	s16, [r3, #8]
 800189a:	4bce      	ldr	r3, [pc, #824]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800189c:	ed93 7a02 	vldr	s14, [r3, #8]
 80018a0:	4bcc      	ldr	r3, [pc, #816]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018a2:	edd3 7a00 	vldr	s15, [r3]
 80018a6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80018aa:	4bca      	ldr	r3, [pc, #808]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80018b0:	4bc8      	ldr	r3, [pc, #800]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018b2:	edd3 7a00 	vldr	s15, [r3]
 80018b6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018be:	4bc5      	ldr	r3, [pc, #788]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018c0:	edd3 6a03 	vldr	s13, [r3, #12]
 80018c4:	4bc3      	ldr	r3, [pc, #780]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018ca:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018ce:	4bc1      	ldr	r3, [pc, #772]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018d0:	ed93 6a03 	vldr	s12, [r3, #12]
 80018d4:	4bbf      	ldr	r3, [pc, #764]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80018da:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	f004 fa3b 	bl	8005d64 <sqrtf>
 80018ee:	eeb0 7a40 	vmov.f32	s14, s0
 80018f2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80018f6:	4bb8      	ldr	r3, [pc, #736]	; (8001bd8 <JoystickLocationState+0x3f8>)
 80018f8:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PickTray.L2[1]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 80018fc:	4bb5      	ldr	r3, [pc, #724]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80018fe:	ed93 8a03 	vldr	s16, [r3, #12]
 8001902:	4bb4      	ldr	r3, [pc, #720]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001904:	ed93 7a02 	vldr	s14, [r3, #8]
 8001908:	4bb2      	ldr	r3, [pc, #712]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800190a:	edd3 7a00 	vldr	s15, [r3]
 800190e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001912:	4bb0      	ldr	r3, [pc, #704]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001914:	edd3 6a02 	vldr	s13, [r3, #8]
 8001918:	4bae      	ldr	r3, [pc, #696]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800191a:	edd3 7a00 	vldr	s15, [r3]
 800191e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001922:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001926:	4bab      	ldr	r3, [pc, #684]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001928:	edd3 6a03 	vldr	s13, [r3, #12]
 800192c:	4ba9      	ldr	r3, [pc, #676]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800192e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001932:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001936:	4ba7      	ldr	r3, [pc, #668]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001938:	ed93 6a03 	vldr	s12, [r3, #12]
 800193c:	4ba5      	ldr	r3, [pc, #660]	; (8001bd4 <JoystickLocationState+0x3f4>)
 800193e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001942:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001946:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800194a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800194e:	eeb0 0a67 	vmov.f32	s0, s15
 8001952:	f004 fa07 	bl	8005d64 <sqrtf>
 8001956:	eeb0 7a40 	vmov.f32	s14, s0
 800195a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800195e:	4b9f      	ldr	r3, [pc, #636]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001960:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 8001964:	4b9c      	ldr	r3, [pc, #624]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001966:	edd3 7a00 	vldr	s15, [r3]
 800196a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800196e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001972:	4b9a      	ldr	r3, [pc, #616]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800197c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001980:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001984:	4b93      	ldr	r3, [pc, #588]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001986:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 800198a:	4b94      	ldr	r3, [pc, #592]	; (8001bdc <JoystickLocationState+0x3fc>)
 800198c:	edd3 7a00 	vldr	s15, [r3]
 8001990:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001994:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001998:	4b8f      	ldr	r3, [pc, #572]	; (8001bd8 <JoystickLocationState+0x3f8>)
 800199a:	edd3 7a00 	vldr	s15, [r3]
 800199e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80019a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019aa:	4b8a      	ldr	r3, [pc, #552]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80019ac:	edc3 7a05 	vstr	s15, [r3, #20]

			PickTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 80019b0:	4b89      	ldr	r3, [pc, #548]	; (8001bd8 <JoystickLocationState+0x3f8>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80019ba:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019be:	4b87      	ldr	r3, [pc, #540]	; (8001bdc <JoystickLocationState+0x3fc>)
 80019c0:	edd3 7a00 	vldr	s15, [r3]
 80019c4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80019c8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019d0:	4b80      	ldr	r3, [pc, #512]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80019d2:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 80019d6:	4b81      	ldr	r3, [pc, #516]	; (8001bdc <JoystickLocationState+0x3fc>)
 80019d8:	edd3 7a00 	vldr	s15, [r3]
 80019dc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80019e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019e4:	4b7c      	ldr	r3, [pc, #496]	; (8001bd8 <JoystickLocationState+0x3f8>)
 80019e6:	edd3 7a00 	vldr	s15, [r3]
 80019ea:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80019ee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80019f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019f6:	4b77      	ldr	r3, [pc, #476]	; (8001bd4 <JoystickLocationState+0x3f4>)
 80019f8:	edc3 7a07 	vstr	s15, [r3, #28]

			PickTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 80019fc:	4b76      	ldr	r3, [pc, #472]	; (8001bd8 <JoystickLocationState+0x3f8>)
 80019fe:	edd3 7a00 	vldr	s15, [r3]
 8001a02:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8001be8 <JoystickLocationState+0x408>
 8001a06:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a0a:	4b74      	ldr	r3, [pc, #464]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001a14:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a1c:	4b6d      	ldr	r3, [pc, #436]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001a1e:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8001a22:	4b6e      	ldr	r3, [pc, #440]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001a24:	edd3 7a00 	vldr	s15, [r3]
 8001a28:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001be8 <JoystickLocationState+0x408>
 8001a2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a30:	4b69      	ldr	r3, [pc, #420]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001a32:	edd3 7a00 	vldr	s15, [r3]
 8001a36:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001a3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a42:	4b64      	ldr	r3, [pc, #400]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001a44:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PickTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8001a48:	4b63      	ldr	r3, [pc, #396]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001a4a:	edd3 7a00 	vldr	s15, [r3]
 8001a4e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a56:	4b61      	ldr	r3, [pc, #388]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001a60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a68:	4b5a      	ldr	r3, [pc, #360]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001a6a:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8001a6e:	4b5b      	ldr	r3, [pc, #364]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a78:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a7c:	4b56      	ldr	r3, [pc, #344]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001a86:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001a8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a8e:	4b51      	ldr	r3, [pc, #324]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001a90:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PickTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8001a94:	4b50      	ldr	r3, [pc, #320]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001a96:	edd3 7a00 	vldr	s15, [r3]
 8001a9a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001a9e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aa2:	4b4e      	ldr	r3, [pc, #312]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001aa4:	edd3 7a00 	vldr	s15, [r3]
 8001aa8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001aac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ab0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ab4:	4b47      	ldr	r3, [pc, #284]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001ab6:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8001aba:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001abc:	edd3 7a00 	vldr	s15, [r3]
 8001ac0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ac4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ac8:	4b43      	ldr	r3, [pc, #268]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001aca:	edd3 7a00 	vldr	s15, [r3]
 8001ace:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001ad2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ad6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ada:	4b3e      	ldr	r3, [pc, #248]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001adc:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8001ae0:	4b3d      	ldr	r3, [pc, #244]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001ae2:	edd3 7a00 	vldr	s15, [r3]
 8001ae6:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8001be8 <JoystickLocationState+0x408>
 8001aea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001af0:	edd3 7a00 	vldr	s15, [r3]
 8001af4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001af8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001afc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b00:	4b34      	ldr	r3, [pc, #208]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001b02:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PickTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 8001b06:	4b35      	ldr	r3, [pc, #212]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001b08:	edd3 7a00 	vldr	s15, [r3]
 8001b0c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001be8 <JoystickLocationState+0x408>
 8001b10:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b14:	4b30      	ldr	r3, [pc, #192]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001b16:	edd3 7a00 	vldr	s15, [r3]
 8001b1a:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001b1e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b26:	4b2b      	ldr	r3, [pc, #172]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001b28:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8001b2c:	4b2a      	ldr	r3, [pc, #168]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001b2e:	edd3 7a00 	vldr	s15, [r3]
 8001b32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b36:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b3a:	4b28      	ldr	r3, [pc, #160]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001b3c:	edd3 7a00 	vldr	s15, [r3]
 8001b40:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001be0 <JoystickLocationState+0x400>
 8001b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001b4e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PickTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 8001b52:	4b22      	ldr	r3, [pc, #136]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001b54:	edd3 7a00 	vldr	s15, [r3]
 8001b58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b60:	4b1d      	ldr	r3, [pc, #116]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001b62:	edd3 7a00 	vldr	s15, [r3]
 8001b66:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001be4 <JoystickLocationState+0x404>
 8001b6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b72:	4b18      	ldr	r3, [pc, #96]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001b74:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 8001b78:	4b17      	ldr	r3, [pc, #92]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001b7a:	edd3 7a00 	vldr	s15, [r3]
 8001b7e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001b82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001b88:	edd3 7a00 	vldr	s15, [r3]
 8001b8c:	eddf 6a14 	vldr	s13, [pc, #80]	; 8001be0 <JoystickLocationState+0x400>
 8001b90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001b9a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PickTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8001b9e:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <JoystickLocationState+0x3fc>)
 8001ba0:	edd3 7a00 	vldr	s15, [r3]
 8001ba4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ba8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bac:	4b0a      	ldr	r3, [pc, #40]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001bae:	edd3 7a00 	vldr	s15, [r3]
 8001bb2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8001be4 <JoystickLocationState+0x404>
 8001bb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bbe:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <JoystickLocationState+0x3f4>)
 8001bc0:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 8001bc4:	4b04      	ldr	r3, [pc, #16]	; (8001bd8 <JoystickLocationState+0x3f8>)
 8001bc6:	edd3 7a00 	vldr	s15, [r3]
 8001bca:	e00f      	b.n	8001bec <JoystickLocationState+0x40c>
 8001bcc:	20000374 	.word	0x20000374
 8001bd0:	200002b0 	.word	0x200002b0
 8001bd4:	200002bc 	.word	0x200002bc
 8001bd8:	2000036c 	.word	0x2000036c
 8001bdc:	20000370 	.word	0x20000370
 8001be0:	42200000 	.word	0x42200000
 8001be4:	c2200000 	.word	0xc2200000
 8001be8:	42480000 	.word	0x42480000
 8001bec:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8001be8 <JoystickLocationState+0x408>
 8001bf0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001bf4:	4b27      	ldr	r3, [pc, #156]	; (8001c94 <JoystickLocationState+0x4b4>)
 8001bf6:	edd3 7a00 	vldr	s15, [r3]
 8001bfa:	eddf 6a27 	vldr	s13, [pc, #156]	; 8001c98 <JoystickLocationState+0x4b8>
 8001bfe:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <JoystickLocationState+0x4bc>)
 8001c08:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PickTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8001c0c:	4b21      	ldr	r3, [pc, #132]	; (8001c94 <JoystickLocationState+0x4b4>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8001ca0 <JoystickLocationState+0x4c0>
 8001c16:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001c1a:	4b22      	ldr	r3, [pc, #136]	; (8001ca4 <JoystickLocationState+0x4c4>)
 8001c1c:	edd3 7a00 	vldr	s15, [r3]
 8001c20:	eddf 6a21 	vldr	s13, [pc, #132]	; 8001ca8 <JoystickLocationState+0x4c8>
 8001c24:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c2c:	4b1b      	ldr	r3, [pc, #108]	; (8001c9c <JoystickLocationState+0x4bc>)
 8001c2e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 2;
 8001c32:	4b1e      	ldr	r3, [pc, #120]	; (8001cac <JoystickLocationState+0x4cc>)
 8001c34:	2202      	movs	r2, #2
 8001c36:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001c38:	e245      	b.n	80020c6 <JoystickLocationState+0x8e6>
		else if (ResetButton.flag == 1)
 8001c3a:	4b1d      	ldr	r3, [pc, #116]	; (8001cb0 <JoystickLocationState+0x4d0>)
 8001c3c:	689b      	ldr	r3, [r3, #8]
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	f040 8241 	bne.w	80020c6 <JoystickLocationState+0x8e6>
			ResetButton.flag = 0;
 8001c44:	4b1a      	ldr	r3, [pc, #104]	; (8001cb0 <JoystickLocationState+0x4d0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	609a      	str	r2, [r3, #8]
			state = 0;
 8001c4a:	4b18      	ldr	r3, [pc, #96]	; (8001cac <JoystickLocationState+0x4cc>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	601a      	str	r2, [r3, #0]
		break;
 8001c50:	e239      	b.n	80020c6 <JoystickLocationState+0x8e6>
	case 2:
		if (GetPositionButton.flag == 1)
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <JoystickLocationState+0x4d4>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d110      	bne.n	8001c7c <JoystickLocationState+0x49c>
		{
			PlaceTray.L1[1] = position;
 8001c5a:	4b17      	ldr	r3, [pc, #92]	; (8001cb8 <JoystickLocationState+0x4d8>)
 8001c5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c60:	ee07 3a90 	vmov	s15, r3
 8001c64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <JoystickLocationState+0x4dc>)
 8001c6a:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <JoystickLocationState+0x4d4>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
			state = 3;
 8001c74:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <JoystickLocationState+0x4cc>)
 8001c76:	2203      	movs	r2, #3
 8001c78:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001c7a:	e226      	b.n	80020ca <JoystickLocationState+0x8ea>
		else if (ResetButton.flag == 1)
 8001c7c:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <JoystickLocationState+0x4d0>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b01      	cmp	r3, #1
 8001c82:	f040 8222 	bne.w	80020ca <JoystickLocationState+0x8ea>
			ResetButton.flag = 0;
 8001c86:	4b0a      	ldr	r3, [pc, #40]	; (8001cb0 <JoystickLocationState+0x4d0>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	609a      	str	r2, [r3, #8]
			state = 0;
 8001c8c:	4b07      	ldr	r3, [pc, #28]	; (8001cac <JoystickLocationState+0x4cc>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
		break;
 8001c92:	e21a      	b.n	80020ca <JoystickLocationState+0x8ea>
 8001c94:	20000370 	.word	0x20000370
 8001c98:	42200000 	.word	0x42200000
 8001c9c:	200002bc 	.word	0x200002bc
 8001ca0:	42480000 	.word	0x42480000
 8001ca4:	2000036c 	.word	0x2000036c
 8001ca8:	c2200000 	.word	0xc2200000
 8001cac:	200002b8 	.word	0x200002b8
 8001cb0:	20000380 	.word	0x20000380
 8001cb4:	20000374 	.word	0x20000374
 8001cb8:	200002b0 	.word	0x200002b0
 8001cbc:	20000314 	.word	0x20000314
	case 3:
		if (GetPositionButton.flag == 1)
 8001cc0:	4bd6      	ldr	r3, [pc, #856]	; (800201c <JoystickLocationState+0x83c>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	f040 81e0 	bne.w	800208a <JoystickLocationState+0x8aa>
		{
			PlaceTray.L2[1] = position;
 8001cca:	4bd5      	ldr	r3, [pc, #852]	; (8002020 <JoystickLocationState+0x840>)
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	ee07 3a90 	vmov	s15, r3
 8001cd4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cd8:	4bd2      	ldr	r3, [pc, #840]	; (8002024 <JoystickLocationState+0x844>)
 8001cda:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001cde:	4bcf      	ldr	r3, [pc, #828]	; (800201c <JoystickLocationState+0x83c>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	609a      	str	r2, [r3, #8]
			cos_Theta = PlaceTray.L2[0]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8001ce4:	4bcf      	ldr	r3, [pc, #828]	; (8002024 <JoystickLocationState+0x844>)
 8001ce6:	ed93 8a02 	vldr	s16, [r3, #8]
 8001cea:	4bce      	ldr	r3, [pc, #824]	; (8002024 <JoystickLocationState+0x844>)
 8001cec:	ed93 7a02 	vldr	s14, [r3, #8]
 8001cf0:	4bcc      	ldr	r3, [pc, #816]	; (8002024 <JoystickLocationState+0x844>)
 8001cf2:	edd3 7a00 	vldr	s15, [r3]
 8001cf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cfa:	4bca      	ldr	r3, [pc, #808]	; (8002024 <JoystickLocationState+0x844>)
 8001cfc:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d00:	4bc8      	ldr	r3, [pc, #800]	; (8002024 <JoystickLocationState+0x844>)
 8001d02:	edd3 7a00 	vldr	s15, [r3]
 8001d06:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d0e:	4bc5      	ldr	r3, [pc, #788]	; (8002024 <JoystickLocationState+0x844>)
 8001d10:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d14:	4bc3      	ldr	r3, [pc, #780]	; (8002024 <JoystickLocationState+0x844>)
 8001d16:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d1a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d1e:	4bc1      	ldr	r3, [pc, #772]	; (8002024 <JoystickLocationState+0x844>)
 8001d20:	ed93 6a03 	vldr	s12, [r3, #12]
 8001d24:	4bbf      	ldr	r3, [pc, #764]	; (8002024 <JoystickLocationState+0x844>)
 8001d26:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d2a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d2e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d36:	eeb0 0a67 	vmov.f32	s0, s15
 8001d3a:	f004 f813 	bl	8005d64 <sqrtf>
 8001d3e:	eeb0 7a40 	vmov.f32	s14, s0
 8001d42:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001d46:	4bb8      	ldr	r3, [pc, #736]	; (8002028 <JoystickLocationState+0x848>)
 8001d48:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PlaceTray.L2[1]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8001d4c:	4bb5      	ldr	r3, [pc, #724]	; (8002024 <JoystickLocationState+0x844>)
 8001d4e:	ed93 8a03 	vldr	s16, [r3, #12]
 8001d52:	4bb4      	ldr	r3, [pc, #720]	; (8002024 <JoystickLocationState+0x844>)
 8001d54:	ed93 7a02 	vldr	s14, [r3, #8]
 8001d58:	4bb2      	ldr	r3, [pc, #712]	; (8002024 <JoystickLocationState+0x844>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d62:	4bb0      	ldr	r3, [pc, #704]	; (8002024 <JoystickLocationState+0x844>)
 8001d64:	edd3 6a02 	vldr	s13, [r3, #8]
 8001d68:	4bae      	ldr	r3, [pc, #696]	; (8002024 <JoystickLocationState+0x844>)
 8001d6a:	edd3 7a00 	vldr	s15, [r3]
 8001d6e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001d72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d76:	4bab      	ldr	r3, [pc, #684]	; (8002024 <JoystickLocationState+0x844>)
 8001d78:	edd3 6a03 	vldr	s13, [r3, #12]
 8001d7c:	4ba9      	ldr	r3, [pc, #676]	; (8002024 <JoystickLocationState+0x844>)
 8001d7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d82:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001d86:	4ba7      	ldr	r3, [pc, #668]	; (8002024 <JoystickLocationState+0x844>)
 8001d88:	ed93 6a03 	vldr	s12, [r3, #12]
 8001d8c:	4ba5      	ldr	r3, [pc, #660]	; (8002024 <JoystickLocationState+0x844>)
 8001d8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001d92:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9e:	eeb0 0a67 	vmov.f32	s0, s15
 8001da2:	f003 ffdf 	bl	8005d64 <sqrtf>
 8001da6:	eeb0 7a40 	vmov.f32	s14, s0
 8001daa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001dae:	4b9f      	ldr	r3, [pc, #636]	; (800202c <JoystickLocationState+0x84c>)
 8001db0:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 8001db4:	4b9c      	ldr	r3, [pc, #624]	; (8002028 <JoystickLocationState+0x848>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dbe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dc2:	4b9a      	ldr	r3, [pc, #616]	; (800202c <JoystickLocationState+0x84c>)
 8001dc4:	edd3 7a00 	vldr	s15, [r3]
 8001dc8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001dcc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001dd0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dd4:	4b93      	ldr	r3, [pc, #588]	; (8002024 <JoystickLocationState+0x844>)
 8001dd6:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8001dda:	4b94      	ldr	r3, [pc, #592]	; (800202c <JoystickLocationState+0x84c>)
 8001ddc:	edd3 7a00 	vldr	s15, [r3]
 8001de0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001de4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001de8:	4b8f      	ldr	r3, [pc, #572]	; (8002028 <JoystickLocationState+0x848>)
 8001dea:	edd3 7a00 	vldr	s15, [r3]
 8001dee:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001df2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001df6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dfa:	4b8a      	ldr	r3, [pc, #552]	; (8002024 <JoystickLocationState+0x844>)
 8001dfc:	edc3 7a05 	vstr	s15, [r3, #20]

			PlaceTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8001e00:	4b89      	ldr	r3, [pc, #548]	; (8002028 <JoystickLocationState+0x848>)
 8001e02:	edd3 7a00 	vldr	s15, [r3]
 8001e06:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e0a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e0e:	4b87      	ldr	r3, [pc, #540]	; (800202c <JoystickLocationState+0x84c>)
 8001e10:	edd3 7a00 	vldr	s15, [r3]
 8001e14:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e18:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e20:	4b80      	ldr	r3, [pc, #512]	; (8002024 <JoystickLocationState+0x844>)
 8001e22:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 8001e26:	4b81      	ldr	r3, [pc, #516]	; (800202c <JoystickLocationState+0x84c>)
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001e30:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e34:	4b7c      	ldr	r3, [pc, #496]	; (8002028 <JoystickLocationState+0x848>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001e3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e46:	4b77      	ldr	r3, [pc, #476]	; (8002024 <JoystickLocationState+0x844>)
 8001e48:	edc3 7a07 	vstr	s15, [r3, #28]

			PlaceTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8001e4c:	4b76      	ldr	r3, [pc, #472]	; (8002028 <JoystickLocationState+0x848>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002038 <JoystickLocationState+0x858>
 8001e56:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e5a:	4b74      	ldr	r3, [pc, #464]	; (800202c <JoystickLocationState+0x84c>)
 8001e5c:	edd3 7a00 	vldr	s15, [r3]
 8001e60:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001e64:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e6c:	4b6d      	ldr	r3, [pc, #436]	; (8002024 <JoystickLocationState+0x844>)
 8001e6e:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8001e72:	4b6e      	ldr	r3, [pc, #440]	; (800202c <JoystickLocationState+0x84c>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002038 <JoystickLocationState+0x858>
 8001e7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e80:	4b69      	ldr	r3, [pc, #420]	; (8002028 <JoystickLocationState+0x848>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001e8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001e8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e92:	4b64      	ldr	r3, [pc, #400]	; (8002024 <JoystickLocationState+0x844>)
 8001e94:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PlaceTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8001e98:	4b63      	ldr	r3, [pc, #396]	; (8002028 <JoystickLocationState+0x848>)
 8001e9a:	edd3 7a00 	vldr	s15, [r3]
 8001e9e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ea2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ea6:	4b61      	ldr	r3, [pc, #388]	; (800202c <JoystickLocationState+0x84c>)
 8001ea8:	edd3 7a00 	vldr	s15, [r3]
 8001eac:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001eb0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb8:	4b5a      	ldr	r3, [pc, #360]	; (8002024 <JoystickLocationState+0x844>)
 8001eba:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8001ebe:	4b5b      	ldr	r3, [pc, #364]	; (800202c <JoystickLocationState+0x84c>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ec8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ecc:	4b56      	ldr	r3, [pc, #344]	; (8002028 <JoystickLocationState+0x848>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ede:	4b51      	ldr	r3, [pc, #324]	; (8002024 <JoystickLocationState+0x844>)
 8001ee0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PlaceTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8001ee4:	4b50      	ldr	r3, [pc, #320]	; (8002028 <JoystickLocationState+0x848>)
 8001ee6:	edd3 7a00 	vldr	s15, [r3]
 8001eea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001eee:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ef2:	4b4e      	ldr	r3, [pc, #312]	; (800202c <JoystickLocationState+0x84c>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001efc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f04:	4b47      	ldr	r3, [pc, #284]	; (8002024 <JoystickLocationState+0x844>)
 8001f06:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8001f0a:	4b48      	ldr	r3, [pc, #288]	; (800202c <JoystickLocationState+0x84c>)
 8001f0c:	edd3 7a00 	vldr	s15, [r3]
 8001f10:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f18:	4b43      	ldr	r3, [pc, #268]	; (8002028 <JoystickLocationState+0x848>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001f22:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f2a:	4b3e      	ldr	r3, [pc, #248]	; (8002024 <JoystickLocationState+0x844>)
 8001f2c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8001f30:	4b3d      	ldr	r3, [pc, #244]	; (8002028 <JoystickLocationState+0x848>)
 8001f32:	edd3 7a00 	vldr	s15, [r3]
 8001f36:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002038 <JoystickLocationState+0x858>
 8001f3a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f3e:	4b3b      	ldr	r3, [pc, #236]	; (800202c <JoystickLocationState+0x84c>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f48:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f50:	4b34      	ldr	r3, [pc, #208]	; (8002024 <JoystickLocationState+0x844>)
 8001f52:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PlaceTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 8001f56:	4b35      	ldr	r3, [pc, #212]	; (800202c <JoystickLocationState+0x84c>)
 8001f58:	edd3 7a00 	vldr	s15, [r3]
 8001f5c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002038 <JoystickLocationState+0x858>
 8001f60:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <JoystickLocationState+0x848>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001f6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f72:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f76:	4b2b      	ldr	r3, [pc, #172]	; (8002024 <JoystickLocationState+0x844>)
 8001f78:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	; (8002028 <JoystickLocationState+0x848>)
 8001f7e:	edd3 7a00 	vldr	s15, [r3]
 8001f82:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f86:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f8a:	4b28      	ldr	r3, [pc, #160]	; (800202c <JoystickLocationState+0x84c>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002030 <JoystickLocationState+0x850>
 8001f94:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f9c:	4b21      	ldr	r3, [pc, #132]	; (8002024 <JoystickLocationState+0x844>)
 8001f9e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PlaceTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 8001fa2:	4b22      	ldr	r3, [pc, #136]	; (800202c <JoystickLocationState+0x84c>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fb0:	4b1d      	ldr	r3, [pc, #116]	; (8002028 <JoystickLocationState+0x848>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002034 <JoystickLocationState+0x854>
 8001fba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	4b18      	ldr	r3, [pc, #96]	; (8002024 <JoystickLocationState+0x844>)
 8001fc4:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 8001fc8:	4b17      	ldr	r3, [pc, #92]	; (8002028 <JoystickLocationState+0x848>)
 8001fca:	edd3 7a00 	vldr	s15, [r3]
 8001fce:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fd2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fd6:	4b15      	ldr	r3, [pc, #84]	; (800202c <JoystickLocationState+0x84c>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002030 <JoystickLocationState+0x850>
 8001fe0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fe4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <JoystickLocationState+0x844>)
 8001fea:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PlaceTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8001fee:	4b0f      	ldr	r3, [pc, #60]	; (800202c <JoystickLocationState+0x84c>)
 8001ff0:	edd3 7a00 	vldr	s15, [r3]
 8001ff4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ffc:	4b0a      	ldr	r3, [pc, #40]	; (8002028 <JoystickLocationState+0x848>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002034 <JoystickLocationState+0x854>
 8002006:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800200a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <JoystickLocationState+0x844>)
 8002010:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 8002014:	4b04      	ldr	r3, [pc, #16]	; (8002028 <JoystickLocationState+0x848>)
 8002016:	edd3 7a00 	vldr	s15, [r3]
 800201a:	e00f      	b.n	800203c <JoystickLocationState+0x85c>
 800201c:	20000374 	.word	0x20000374
 8002020:	200002b0 	.word	0x200002b0
 8002024:	20000314 	.word	0x20000314
 8002028:	2000036c 	.word	0x2000036c
 800202c:	20000370 	.word	0x20000370
 8002030:	42200000 	.word	0x42200000
 8002034:	c2200000 	.word	0xc2200000
 8002038:	42480000 	.word	0x42480000
 800203c:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002038 <JoystickLocationState+0x858>
 8002040:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002044:	4b26      	ldr	r3, [pc, #152]	; (80020e0 <JoystickLocationState+0x900>)
 8002046:	edd3 7a00 	vldr	s15, [r3]
 800204a:	eddf 6a26 	vldr	s13, [pc, #152]	; 80020e4 <JoystickLocationState+0x904>
 800204e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	4b24      	ldr	r3, [pc, #144]	; (80020e8 <JoystickLocationState+0x908>)
 8002058:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PlaceTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 800205c:	4b20      	ldr	r3, [pc, #128]	; (80020e0 <JoystickLocationState+0x900>)
 800205e:	edd3 7a00 	vldr	s15, [r3]
 8002062:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80020ec <JoystickLocationState+0x90c>
 8002066:	ee27 7a87 	vmul.f32	s14, s15, s14
 800206a:	4b21      	ldr	r3, [pc, #132]	; (80020f0 <JoystickLocationState+0x910>)
 800206c:	edd3 7a00 	vldr	s15, [r3]
 8002070:	eddf 6a20 	vldr	s13, [pc, #128]	; 80020f4 <JoystickLocationState+0x914>
 8002074:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002078:	ee77 7a27 	vadd.f32	s15, s14, s15
 800207c:	4b1a      	ldr	r3, [pc, #104]	; (80020e8 <JoystickLocationState+0x908>)
 800207e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 4;
 8002082:	4b1d      	ldr	r3, [pc, #116]	; (80020f8 <JoystickLocationState+0x918>)
 8002084:	2204      	movs	r2, #4
 8002086:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8002088:	e021      	b.n	80020ce <JoystickLocationState+0x8ee>
		else if (ResetButton.flag == 1)
 800208a:	4b1c      	ldr	r3, [pc, #112]	; (80020fc <JoystickLocationState+0x91c>)
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	2b01      	cmp	r3, #1
 8002090:	d11d      	bne.n	80020ce <JoystickLocationState+0x8ee>
			ResetButton.flag = 0;
 8002092:	4b1a      	ldr	r3, [pc, #104]	; (80020fc <JoystickLocationState+0x91c>)
 8002094:	2200      	movs	r2, #0
 8002096:	609a      	str	r2, [r3, #8]
			state = 0;
 8002098:	4b17      	ldr	r3, [pc, #92]	; (80020f8 <JoystickLocationState+0x918>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]
		break;
 800209e:	e016      	b.n	80020ce <JoystickLocationState+0x8ee>
	case 4:
		state = 0;
 80020a0:	4b15      	ldr	r3, [pc, #84]	; (80020f8 <JoystickLocationState+0x918>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
		scheduler = 1;
 80020a6:	4b16      	ldr	r3, [pc, #88]	; (8002100 <JoystickLocationState+0x920>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 80020ac:	4b13      	ldr	r3, [pc, #76]	; (80020fc <JoystickLocationState+0x91c>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d10e      	bne.n	80020d2 <JoystickLocationState+0x8f2>
		{
			ResetButton.flag = 0;
 80020b4:	4b11      	ldr	r3, [pc, #68]	; (80020fc <JoystickLocationState+0x91c>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	609a      	str	r2, [r3, #8]
			state = 0;
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <JoystickLocationState+0x918>)
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
		}
		break;
 80020c0:	e007      	b.n	80020d2 <JoystickLocationState+0x8f2>
		break;
 80020c2:	bf00      	nop
 80020c4:	e006      	b.n	80020d4 <JoystickLocationState+0x8f4>
		break;
 80020c6:	bf00      	nop
 80020c8:	e004      	b.n	80020d4 <JoystickLocationState+0x8f4>
		break;
 80020ca:	bf00      	nop
 80020cc:	e002      	b.n	80020d4 <JoystickLocationState+0x8f4>
		break;
 80020ce:	bf00      	nop
 80020d0:	e000      	b.n	80020d4 <JoystickLocationState+0x8f4>
		break;
 80020d2:	bf00      	nop
	}
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	ecbd 8b02 	vpop	{d8}
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	20000370 	.word	0x20000370
 80020e4:	42200000 	.word	0x42200000
 80020e8:	20000314 	.word	0x20000314
 80020ec:	42480000 	.word	0x42480000
 80020f0:	2000036c 	.word	0x2000036c
 80020f4:	c2200000 	.word	0xc2200000
 80020f8:	200002b8 	.word	0x200002b8
 80020fc:	20000380 	.word	0x20000380
 8002100:	2000029c 	.word	0x2000029c

08002104 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002108:	b672      	cpsid	i
}
 800210a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800210c:	e7fe      	b.n	800210c <Error_Handler+0x8>
	...

08002110 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b082      	sub	sp, #8
 8002114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002116:	2300      	movs	r3, #0
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	4b10      	ldr	r3, [pc, #64]	; (800215c <HAL_MspInit+0x4c>)
 800211c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800211e:	4a0f      	ldr	r2, [pc, #60]	; (800215c <HAL_MspInit+0x4c>)
 8002120:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002124:	6453      	str	r3, [r2, #68]	; 0x44
 8002126:	4b0d      	ldr	r3, [pc, #52]	; (800215c <HAL_MspInit+0x4c>)
 8002128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800212a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800212e:	607b      	str	r3, [r7, #4]
 8002130:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	603b      	str	r3, [r7, #0]
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_MspInit+0x4c>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_MspInit+0x4c>)
 800213c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002140:	6413      	str	r3, [r2, #64]	; 0x40
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_MspInit+0x4c>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002146:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214a:	603b      	str	r3, [r7, #0]
 800214c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800214e:	2007      	movs	r0, #7
 8002150:	f000 ffba 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002154:	bf00      	nop
 8002156:	3708      	adds	r7, #8
 8002158:	46bd      	mov	sp, r7
 800215a:	bd80      	pop	{r7, pc}
 800215c:	40023800 	.word	0x40023800

08002160 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a2f      	ldr	r2, [pc, #188]	; (800223c <HAL_ADC_MspInit+0xdc>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d157      	bne.n	8002232 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b2e      	ldr	r3, [pc, #184]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a2d      	ldr	r2, [pc, #180]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 800218c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b2b      	ldr	r3, [pc, #172]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	60fb      	str	r3, [r7, #12]
 80021a2:	4b27      	ldr	r3, [pc, #156]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a26      	ldr	r2, [pc, #152]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021a8:	f043 0301 	orr.w	r3, r3, #1
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b24      	ldr	r3, [pc, #144]	; (8002240 <HAL_ADC_MspInit+0xe0>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0301 	and.w	r3, r3, #1
 80021b6:	60fb      	str	r3, [r7, #12]
 80021b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80021ba:	2303      	movs	r3, #3
 80021bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021be:	2303      	movs	r3, #3
 80021c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021c6:	f107 0314 	add.w	r3, r7, #20
 80021ca:	4619      	mov	r1, r3
 80021cc:	481d      	ldr	r0, [pc, #116]	; (8002244 <HAL_ADC_MspInit+0xe4>)
 80021ce:	f001 fb2d 	bl	800382c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80021d2:	4b1d      	ldr	r3, [pc, #116]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021d4:	4a1d      	ldr	r2, [pc, #116]	; (800224c <HAL_ADC_MspInit+0xec>)
 80021d6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80021d8:	4b1b      	ldr	r3, [pc, #108]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021da:	2200      	movs	r2, #0
 80021dc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021de:	4b1a      	ldr	r3, [pc, #104]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80021e4:	4b18      	ldr	r3, [pc, #96]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021e6:	2200      	movs	r2, #0
 80021e8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80021ea:	4b17      	ldr	r3, [pc, #92]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021f0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80021f2:	4b15      	ldr	r3, [pc, #84]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021f4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80021f8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80021fa:	4b13      	ldr	r3, [pc, #76]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 80021fc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002200:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002202:	4b11      	ldr	r3, [pc, #68]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002204:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002208:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800220a:	4b0f      	ldr	r3, [pc, #60]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800220c:	2200      	movs	r2, #0
 800220e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002210:	4b0d      	ldr	r3, [pc, #52]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002212:	2200      	movs	r2, #0
 8002214:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002216:	480c      	ldr	r0, [pc, #48]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 8002218:	f000 ff98 	bl	800314c <HAL_DMA_Init>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8002222:	f7ff ff6f 	bl	8002104 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a07      	ldr	r2, [pc, #28]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800222a:	639a      	str	r2, [r3, #56]	; 0x38
 800222c:	4a06      	ldr	r2, [pc, #24]	; (8002248 <HAL_ADC_MspInit+0xe8>)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002232:	bf00      	nop
 8002234:	3728      	adds	r7, #40	; 0x28
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	40012000 	.word	0x40012000
 8002240:	40023800 	.word	0x40023800
 8002244:	40020000 	.word	0x40020000
 8002248:	200000dc 	.word	0x200000dc
 800224c:	40026410 	.word	0x40026410

08002250 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002250:	b480      	push	{r7}
 8002252:	b085      	sub	sp, #20
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_TIM_PWM_MspInit+0x3c>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d10d      	bne.n	800227e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	4b0a      	ldr	r3, [pc, #40]	; (8002290 <HAL_TIM_PWM_MspInit+0x40>)
 8002268:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226a:	4a09      	ldr	r2, [pc, #36]	; (8002290 <HAL_TIM_PWM_MspInit+0x40>)
 800226c:	f043 0301 	orr.w	r3, r3, #1
 8002270:	6453      	str	r3, [r2, #68]	; 0x44
 8002272:	4b07      	ldr	r3, [pc, #28]	; (8002290 <HAL_TIM_PWM_MspInit+0x40>)
 8002274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002276:	f003 0301 	and.w	r3, r3, #1
 800227a:	60fb      	str	r3, [r7, #12]
 800227c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3714      	adds	r7, #20
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40010000 	.word	0x40010000
 8002290:	40023800 	.word	0x40023800

08002294 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a19      	ldr	r2, [pc, #100]	; (8002318 <HAL_TIM_Encoder_MspInit+0x84>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12b      	bne.n	800230e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a17      	ldr	r2, [pc, #92]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022c0:	f043 0302 	orr.w	r3, r3, #2
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0302 	and.w	r3, r3, #2
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b11      	ldr	r3, [pc, #68]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a10      	ldr	r2, [pc, #64]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b0e      	ldr	r3, [pc, #56]	; (800231c <HAL_TIM_Encoder_MspInit+0x88>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022ee:	23c0      	movs	r3, #192	; 0xc0
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80022fe:	2302      	movs	r3, #2
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	4805      	ldr	r0, [pc, #20]	; (8002320 <HAL_TIM_Encoder_MspInit+0x8c>)
 800230a:	f001 fa8f 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800230e:	bf00      	nop
 8002310:	3728      	adds	r7, #40	; 0x28
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40000400 	.word	0x40000400
 800231c:	40023800 	.word	0x40023800
 8002320:	40020000 	.word	0x40020000

08002324 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b084      	sub	sp, #16
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a0e      	ldr	r2, [pc, #56]	; (800236c <HAL_TIM_Base_MspInit+0x48>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d115      	bne.n	8002362 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002336:	2300      	movs	r3, #0
 8002338:	60fb      	str	r3, [r7, #12]
 800233a:	4b0d      	ldr	r3, [pc, #52]	; (8002370 <HAL_TIM_Base_MspInit+0x4c>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	4a0c      	ldr	r2, [pc, #48]	; (8002370 <HAL_TIM_Base_MspInit+0x4c>)
 8002340:	f043 0308 	orr.w	r3, r3, #8
 8002344:	6413      	str	r3, [r2, #64]	; 0x40
 8002346:	4b0a      	ldr	r3, [pc, #40]	; (8002370 <HAL_TIM_Base_MspInit+0x4c>)
 8002348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002352:	2200      	movs	r2, #0
 8002354:	2100      	movs	r1, #0
 8002356:	2032      	movs	r0, #50	; 0x32
 8002358:	f000 fec1 	bl	80030de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800235c:	2032      	movs	r0, #50	; 0x32
 800235e:	f000 feda 	bl	8003116 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002362:	bf00      	nop
 8002364:	3710      	adds	r7, #16
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	40000c00 	.word	0x40000c00
 8002370:	40023800 	.word	0x40023800

08002374 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b088      	sub	sp, #32
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237c:	f107 030c 	add.w	r3, r7, #12
 8002380:	2200      	movs	r2, #0
 8002382:	601a      	str	r2, [r3, #0]
 8002384:	605a      	str	r2, [r3, #4]
 8002386:	609a      	str	r2, [r3, #8]
 8002388:	60da      	str	r2, [r3, #12]
 800238a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a12      	ldr	r2, [pc, #72]	; (80023dc <HAL_TIM_MspPostInit+0x68>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d11e      	bne.n	80023d4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002396:	2300      	movs	r3, #0
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <HAL_TIM_MspPostInit+0x6c>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	4a10      	ldr	r2, [pc, #64]	; (80023e0 <HAL_TIM_MspPostInit+0x6c>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6313      	str	r3, [r2, #48]	; 0x30
 80023a6:	4b0e      	ldr	r3, [pc, #56]	; (80023e0 <HAL_TIM_MspPostInit+0x6c>)
 80023a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023aa:	f003 0301 	and.w	r3, r3, #1
 80023ae:	60bb      	str	r3, [r7, #8]
 80023b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80023b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80023b6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b8:	2302      	movs	r3, #2
 80023ba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023bc:	2300      	movs	r3, #0
 80023be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80023c4:	2301      	movs	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023c8:	f107 030c 	add.w	r3, r7, #12
 80023cc:	4619      	mov	r1, r3
 80023ce:	4805      	ldr	r0, [pc, #20]	; (80023e4 <HAL_TIM_MspPostInit+0x70>)
 80023d0:	f001 fa2c 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80023d4:	bf00      	nop
 80023d6:	3720      	adds	r7, #32
 80023d8:	46bd      	mov	sp, r7
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40010000 	.word	0x40010000
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40020000 	.word	0x40020000

080023e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08c      	sub	sp, #48	; 0x30
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 031c 	add.w	r3, r7, #28
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a41      	ldr	r2, [pc, #260]	; (800250c <HAL_UART_MspInit+0x124>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d14b      	bne.n	80024a2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800240a:	2300      	movs	r3, #0
 800240c:	61bb      	str	r3, [r7, #24]
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002410:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002412:	4a3f      	ldr	r2, [pc, #252]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002414:	f043 0310 	orr.w	r3, r3, #16
 8002418:	6453      	str	r3, [r2, #68]	; 0x44
 800241a:	4b3d      	ldr	r3, [pc, #244]	; (8002510 <HAL_UART_MspInit+0x128>)
 800241c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	61bb      	str	r3, [r7, #24]
 8002424:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
 800242a:	4b39      	ldr	r3, [pc, #228]	; (8002510 <HAL_UART_MspInit+0x128>)
 800242c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242e:	4a38      	ldr	r2, [pc, #224]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002430:	f043 0301 	orr.w	r3, r3, #1
 8002434:	6313      	str	r3, [r2, #48]	; 0x30
 8002436:	4b36      	ldr	r3, [pc, #216]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
 8002446:	4b32      	ldr	r3, [pc, #200]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244a:	4a31      	ldr	r2, [pc, #196]	; (8002510 <HAL_UART_MspInit+0x128>)
 800244c:	f043 0302 	orr.w	r3, r3, #2
 8002450:	6313      	str	r3, [r2, #48]	; 0x30
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <HAL_UART_MspInit+0x128>)
 8002454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	613b      	str	r3, [r7, #16]
 800245c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800245e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002462:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002464:	2302      	movs	r3, #2
 8002466:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800246c:	2303      	movs	r3, #3
 800246e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002470:	2307      	movs	r3, #7
 8002472:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002474:	f107 031c 	add.w	r3, r7, #28
 8002478:	4619      	mov	r1, r3
 800247a:	4826      	ldr	r0, [pc, #152]	; (8002514 <HAL_UART_MspInit+0x12c>)
 800247c:	f001 f9d6 	bl	800382c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002480:	2380      	movs	r3, #128	; 0x80
 8002482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800248c:	2303      	movs	r3, #3
 800248e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002490:	2307      	movs	r3, #7
 8002492:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002494:	f107 031c 	add.w	r3, r7, #28
 8002498:	4619      	mov	r1, r3
 800249a:	481f      	ldr	r0, [pc, #124]	; (8002518 <HAL_UART_MspInit+0x130>)
 800249c:	f001 f9c6 	bl	800382c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024a0:	e030      	b.n	8002504 <HAL_UART_MspInit+0x11c>
  else if(huart->Instance==USART2)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1d      	ldr	r2, [pc, #116]	; (800251c <HAL_UART_MspInit+0x134>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d12b      	bne.n	8002504 <HAL_UART_MspInit+0x11c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80024ac:	2300      	movs	r3, #0
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	4b17      	ldr	r3, [pc, #92]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b4:	4a16      	ldr	r2, [pc, #88]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024ba:	6413      	str	r3, [r2, #64]	; 0x40
 80024bc:	4b14      	ldr	r3, [pc, #80]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024c4:	60fb      	str	r3, [r7, #12]
 80024c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024c8:	2300      	movs	r3, #0
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	4b10      	ldr	r3, [pc, #64]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a0f      	ldr	r2, [pc, #60]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_UART_MspInit+0x128>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80024e4:	230c      	movs	r3, #12
 80024e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024f0:	2303      	movs	r3, #3
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024f4:	2307      	movs	r3, #7
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4805      	ldr	r0, [pc, #20]	; (8002514 <HAL_UART_MspInit+0x12c>)
 8002500:	f001 f994 	bl	800382c <HAL_GPIO_Init>
}
 8002504:	bf00      	nop
 8002506:	3730      	adds	r7, #48	; 0x30
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40011000 	.word	0x40011000
 8002510:	40023800 	.word	0x40023800
 8002514:	40020000 	.word	0x40020000
 8002518:	40020400 	.word	0x40020400
 800251c:	40004400 	.word	0x40004400

08002520 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002520:	b480      	push	{r7}
 8002522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002524:	e7fe      	b.n	8002524 <NMI_Handler+0x4>

08002526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800252a:	e7fe      	b.n	800252a <HardFault_Handler+0x4>

0800252c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002530:	e7fe      	b.n	8002530 <MemManage_Handler+0x4>

08002532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002532:	b480      	push	{r7}
 8002534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002536:	e7fe      	b.n	8002536 <BusFault_Handler+0x4>

08002538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800253c:	e7fe      	b.n	800253c <UsageFault_Handler+0x4>

0800253e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800253e:	b480      	push	{r7}
 8002540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002542:	bf00      	nop
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800256c:	f000 f8ba 	bl	80026e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}

08002574 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002578:	2002      	movs	r0, #2
 800257a:	f001 fb0d 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}

08002582 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002586:	2004      	movs	r0, #4
 8002588:	f001 fb06 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800258c:	bf00      	nop
 800258e:	bd80      	pop	{r7, pc}

08002590 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002594:	2008      	movs	r0, #8
 8002596:	f001 faff 	bl	8003b98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800259a:	bf00      	nop
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025a4:	4802      	ldr	r0, [pc, #8]	; (80025b0 <TIM5_IRQHandler+0x10>)
 80025a6:	f002 fa85 	bl	8004ab4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025aa:	bf00      	nop
 80025ac:	bd80      	pop	{r7, pc}
 80025ae:	bf00      	nop
 80025b0:	200001cc 	.word	0x200001cc

080025b4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80025b8:	4802      	ldr	r0, [pc, #8]	; (80025c4 <DMA2_Stream0_IRQHandler+0x10>)
 80025ba:	f000 fecd 	bl	8003358 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80025be:	bf00      	nop
 80025c0:	bd80      	pop	{r7, pc}
 80025c2:	bf00      	nop
 80025c4:	200000dc 	.word	0x200000dc

080025c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025cc:	4b06      	ldr	r3, [pc, #24]	; (80025e8 <SystemInit+0x20>)
 80025ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025d2:	4a05      	ldr	r2, [pc, #20]	; (80025e8 <SystemInit+0x20>)
 80025d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80025d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr
 80025e6:	bf00      	nop
 80025e8:	e000ed00 	.word	0xe000ed00

080025ec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80025ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002624 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025f0:	480d      	ldr	r0, [pc, #52]	; (8002628 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025f2:	490e      	ldr	r1, [pc, #56]	; (800262c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025f4:	4a0e      	ldr	r2, [pc, #56]	; (8002630 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0b      	ldr	r2, [pc, #44]	; (8002634 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002608:	4c0b      	ldr	r4, [pc, #44]	; (8002638 <LoopFillZerobss+0x26>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002616:	f7ff ffd7 	bl	80025c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800261a:	f003 fb77 	bl	8005d0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800261e:	f7fe fb7b 	bl	8000d18 <main>
  bx  lr    
 8002622:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002624:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002628:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800262c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002630:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8002634:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002638:	200003cc 	.word	0x200003cc

0800263c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800263c:	e7fe      	b.n	800263c <ADC_IRQHandler>
	...

08002640 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002644:	4b0e      	ldr	r3, [pc, #56]	; (8002680 <HAL_Init+0x40>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a0d      	ldr	r2, [pc, #52]	; (8002680 <HAL_Init+0x40>)
 800264a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800264e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002650:	4b0b      	ldr	r3, [pc, #44]	; (8002680 <HAL_Init+0x40>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0a      	ldr	r2, [pc, #40]	; (8002680 <HAL_Init+0x40>)
 8002656:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800265a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800265c:	4b08      	ldr	r3, [pc, #32]	; (8002680 <HAL_Init+0x40>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a07      	ldr	r2, [pc, #28]	; (8002680 <HAL_Init+0x40>)
 8002662:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002666:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002668:	2003      	movs	r0, #3
 800266a:	f000 fd2d 	bl	80030c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800266e:	2000      	movs	r0, #0
 8002670:	f000 f808 	bl	8002684 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002674:	f7ff fd4c 	bl	8002110 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002678:	2300      	movs	r3, #0
}
 800267a:	4618      	mov	r0, r3
 800267c:	bd80      	pop	{r7, pc}
 800267e:	bf00      	nop
 8002680:	40023c00 	.word	0x40023c00

08002684 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800268c:	4b12      	ldr	r3, [pc, #72]	; (80026d8 <HAL_InitTick+0x54>)
 800268e:	681a      	ldr	r2, [r3, #0]
 8002690:	4b12      	ldr	r3, [pc, #72]	; (80026dc <HAL_InitTick+0x58>)
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800269a:	fbb3 f3f1 	udiv	r3, r3, r1
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	4618      	mov	r0, r3
 80026a4:	f000 fd45 	bl	8003132 <HAL_SYSTICK_Config>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d001      	beq.n	80026b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026ae:	2301      	movs	r3, #1
 80026b0:	e00e      	b.n	80026d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b0f      	cmp	r3, #15
 80026b6:	d80a      	bhi.n	80026ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026b8:	2200      	movs	r2, #0
 80026ba:	6879      	ldr	r1, [r7, #4]
 80026bc:	f04f 30ff 	mov.w	r0, #4294967295
 80026c0:	f000 fd0d 	bl	80030de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026c4:	4a06      	ldr	r2, [pc, #24]	; (80026e0 <HAL_InitTick+0x5c>)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	e000      	b.n	80026d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3708      	adds	r7, #8
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}
 80026d8:	20000008 	.word	0x20000008
 80026dc:	20000010 	.word	0x20000010
 80026e0:	2000000c 	.word	0x2000000c

080026e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e8:	4b06      	ldr	r3, [pc, #24]	; (8002704 <HAL_IncTick+0x20>)
 80026ea:	781b      	ldrb	r3, [r3, #0]
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_IncTick+0x24>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4413      	add	r3, r2
 80026f4:	4a04      	ldr	r2, [pc, #16]	; (8002708 <HAL_IncTick+0x24>)
 80026f6:	6013      	str	r3, [r2, #0]
}
 80026f8:	bf00      	nop
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	20000010 	.word	0x20000010
 8002708:	200003c8 	.word	0x200003c8

0800270c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800270c:	b480      	push	{r7}
 800270e:	af00      	add	r7, sp, #0
  return uwTick;
 8002710:	4b03      	ldr	r3, [pc, #12]	; (8002720 <HAL_GetTick+0x14>)
 8002712:	681b      	ldr	r3, [r3, #0]
}
 8002714:	4618      	mov	r0, r3
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
 800271e:	bf00      	nop
 8002720:	200003c8 	.word	0x200003c8

08002724 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800272c:	2300      	movs	r3, #0
 800272e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d101      	bne.n	800273a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e033      	b.n	80027a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273e:	2b00      	cmp	r3, #0
 8002740:	d109      	bne.n	8002756 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f7ff fd0c 	bl	8002160 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 0310 	and.w	r3, r3, #16
 800275e:	2b00      	cmp	r3, #0
 8002760:	d118      	bne.n	8002794 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800276a:	f023 0302 	bic.w	r3, r3, #2
 800276e:	f043 0202 	orr.w	r2, r3, #2
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 fa58 	bl	8002c2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002786:	f023 0303 	bic.w	r3, r3, #3
 800278a:	f043 0201 	orr.w	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	641a      	str	r2, [r3, #64]	; 0x40
 8002792:	e001      	b.n	8002798 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3710      	adds	r7, #16
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
	...

080027ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	60f8      	str	r0, [r7, #12]
 80027b4:	60b9      	str	r1, [r7, #8]
 80027b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80027b8:	2300      	movs	r3, #0
 80027ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Start_DMA+0x1e>
 80027c6:	2302      	movs	r3, #2
 80027c8:	e0ce      	b.n	8002968 <HAL_ADC_Start_DMA+0x1bc>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2201      	movs	r2, #1
 80027ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	f003 0301 	and.w	r3, r3, #1
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d018      	beq.n	8002812 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f042 0201 	orr.w	r2, r2, #1
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80027f0:	4b5f      	ldr	r3, [pc, #380]	; (8002970 <HAL_ADC_Start_DMA+0x1c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a5f      	ldr	r2, [pc, #380]	; (8002974 <HAL_ADC_Start_DMA+0x1c8>)
 80027f6:	fba2 2303 	umull	r2, r3, r2, r3
 80027fa:	0c9a      	lsrs	r2, r3, #18
 80027fc:	4613      	mov	r3, r2
 80027fe:	005b      	lsls	r3, r3, #1
 8002800:	4413      	add	r3, r2
 8002802:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002804:	e002      	b.n	800280c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	3b01      	subs	r3, #1
 800280a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1f9      	bne.n	8002806 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002820:	d107      	bne.n	8002832 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	689a      	ldr	r2, [r3, #8]
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002830:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	f040 8086 	bne.w	800294e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800284a:	f023 0301 	bic.w	r3, r3, #1
 800284e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002868:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800286c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800287c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002880:	d106      	bne.n	8002890 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	f023 0206 	bic.w	r2, r3, #6
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	645a      	str	r2, [r3, #68]	; 0x44
 800288e:	e002      	b.n	8002896 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2200      	movs	r2, #0
 8002894:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289e:	4b36      	ldr	r3, [pc, #216]	; (8002978 <HAL_ADC_Start_DMA+0x1cc>)
 80028a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <HAL_ADC_Start_DMA+0x1d0>)
 80028a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	4a34      	ldr	r2, [pc, #208]	; (8002980 <HAL_ADC_Start_DMA+0x1d4>)
 80028b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028b6:	4a33      	ldr	r2, [pc, #204]	; (8002984 <HAL_ADC_Start_DMA+0x1d8>)
 80028b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80028c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80028d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	689a      	ldr	r2, [r3, #8]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80028e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	334c      	adds	r3, #76	; 0x4c
 80028ee:	4619      	mov	r1, r3
 80028f0:	68ba      	ldr	r2, [r7, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f000 fcd8 	bl	80032a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	f003 031f 	and.w	r3, r3, #31
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10f      	bne.n	8002924 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d129      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002920:	609a      	str	r2, [r3, #8]
 8002922:	e020      	b.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a17      	ldr	r2, [pc, #92]	; (8002988 <HAL_ADC_Start_DMA+0x1dc>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d11b      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002938:	2b00      	cmp	r3, #0
 800293a:	d114      	bne.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689a      	ldr	r2, [r3, #8]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800294a:	609a      	str	r2, [r3, #8]
 800294c:	e00b      	b.n	8002966 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f043 0210 	orr.w	r2, r3, #16
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002966:	2300      	movs	r3, #0
}
 8002968:	4618      	mov	r0, r3
 800296a:	3718      	adds	r7, #24
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000008 	.word	0x20000008
 8002974:	431bde83 	.word	0x431bde83
 8002978:	40012300 	.word	0x40012300
 800297c:	08002e25 	.word	0x08002e25
 8002980:	08002edf 	.word	0x08002edf
 8002984:	08002efb 	.word	0x08002efb
 8002988:	40012000 	.word	0x40012000

0800298c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002994:	bf00      	nop
 8002996:	370c      	adds	r7, #12
 8002998:	46bd      	mov	sp, r7
 800299a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299e:	4770      	bx	lr

080029a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b083      	sub	sp, #12
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80029a8:	bf00      	nop
 80029aa:	370c      	adds	r7, #12
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80029bc:	bf00      	nop
 80029be:	370c      	adds	r7, #12
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b085      	sub	sp, #20
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
 80029d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029d2:	2300      	movs	r3, #0
 80029d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029dc:	2b01      	cmp	r3, #1
 80029de:	d101      	bne.n	80029e4 <HAL_ADC_ConfigChannel+0x1c>
 80029e0:	2302      	movs	r3, #2
 80029e2:	e113      	b.n	8002c0c <HAL_ADC_ConfigChannel+0x244>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2201      	movs	r2, #1
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b09      	cmp	r3, #9
 80029f2:	d925      	bls.n	8002a40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	68d9      	ldr	r1, [r3, #12]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	b29b      	uxth	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	4613      	mov	r3, r2
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	4413      	add	r3, r2
 8002a08:	3b1e      	subs	r3, #30
 8002a0a:	2207      	movs	r2, #7
 8002a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a10:	43da      	mvns	r2, r3
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	400a      	ands	r2, r1
 8002a18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68d9      	ldr	r1, [r3, #12]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	689a      	ldr	r2, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4403      	add	r3, r0
 8002a32:	3b1e      	subs	r3, #30
 8002a34:	409a      	lsls	r2, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	60da      	str	r2, [r3, #12]
 8002a3e:	e022      	b.n	8002a86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6919      	ldr	r1, [r3, #16]
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4613      	mov	r3, r2
 8002a50:	005b      	lsls	r3, r3, #1
 8002a52:	4413      	add	r3, r2
 8002a54:	2207      	movs	r2, #7
 8002a56:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5a:	43da      	mvns	r2, r3
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	400a      	ands	r2, r1
 8002a62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6919      	ldr	r1, [r3, #16]
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	4618      	mov	r0, r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	005b      	lsls	r3, r3, #1
 8002a7a:	4403      	add	r3, r0
 8002a7c:	409a      	lsls	r2, r3
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d824      	bhi.n	8002ad8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685a      	ldr	r2, [r3, #4]
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	3b05      	subs	r3, #5
 8002aa0:	221f      	movs	r2, #31
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	43da      	mvns	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	400a      	ands	r2, r1
 8002aae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	4618      	mov	r0, r3
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	3b05      	subs	r3, #5
 8002aca:	fa00 f203 	lsl.w	r2, r0, r3
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	430a      	orrs	r2, r1
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34
 8002ad6:	e04c      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	2b0c      	cmp	r3, #12
 8002ade:	d824      	bhi.n	8002b2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	685a      	ldr	r2, [r3, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	3b23      	subs	r3, #35	; 0x23
 8002af2:	221f      	movs	r2, #31
 8002af4:	fa02 f303 	lsl.w	r3, r2, r3
 8002af8:	43da      	mvns	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	400a      	ands	r2, r1
 8002b00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	4618      	mov	r0, r3
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	685a      	ldr	r2, [r3, #4]
 8002b14:	4613      	mov	r3, r2
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	3b23      	subs	r3, #35	; 0x23
 8002b1c:	fa00 f203 	lsl.w	r2, r0, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
 8002b28:	e023      	b.n	8002b72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685a      	ldr	r2, [r3, #4]
 8002b34:	4613      	mov	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	4413      	add	r3, r2
 8002b3a:	3b41      	subs	r3, #65	; 0x41
 8002b3c:	221f      	movs	r2, #31
 8002b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b42:	43da      	mvns	r2, r3
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	400a      	ands	r2, r1
 8002b4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b29b      	uxth	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	685a      	ldr	r2, [r3, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	4413      	add	r3, r2
 8002b64:	3b41      	subs	r3, #65	; 0x41
 8002b66:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	430a      	orrs	r2, r1
 8002b70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b72:	4b29      	ldr	r3, [pc, #164]	; (8002c18 <HAL_ADC_ConfigChannel+0x250>)
 8002b74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a28      	ldr	r2, [pc, #160]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	d10f      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2b12      	cmp	r3, #18
 8002b86:	d10b      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a1d      	ldr	r2, [pc, #116]	; (8002c1c <HAL_ADC_ConfigChannel+0x254>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d12b      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a1c      	ldr	r2, [pc, #112]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d003      	beq.n	8002bbc <HAL_ADC_ConfigChannel+0x1f4>
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b11      	cmp	r3, #17
 8002bba:	d122      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a11      	ldr	r2, [pc, #68]	; (8002c20 <HAL_ADC_ConfigChannel+0x258>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d111      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bde:	4b11      	ldr	r3, [pc, #68]	; (8002c24 <HAL_ADC_ConfigChannel+0x25c>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4a11      	ldr	r2, [pc, #68]	; (8002c28 <HAL_ADC_ConfigChannel+0x260>)
 8002be4:	fba2 2303 	umull	r2, r3, r2, r3
 8002be8:	0c9a      	lsrs	r2, r3, #18
 8002bea:	4613      	mov	r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	4413      	add	r3, r2
 8002bf0:	005b      	lsls	r3, r3, #1
 8002bf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bf4:	e002      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002bf6:	68bb      	ldr	r3, [r7, #8]
 8002bf8:	3b01      	subs	r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f9      	bne.n	8002bf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr
 8002c18:	40012300 	.word	0x40012300
 8002c1c:	40012000 	.word	0x40012000
 8002c20:	10000012 	.word	0x10000012
 8002c24:	20000008 	.word	0x20000008
 8002c28:	431bde83 	.word	0x431bde83

08002c2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b085      	sub	sp, #20
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c34:	4b79      	ldr	r3, [pc, #484]	; (8002e1c <ADC_Init+0x1f0>)
 8002c36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	685a      	ldr	r2, [r3, #4]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	685a      	ldr	r2, [r3, #4]
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	6859      	ldr	r1, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	685a      	ldr	r2, [r3, #4]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	6859      	ldr	r1, [r3, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ca6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6899      	ldr	r1, [r3, #8]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	68da      	ldr	r2, [r3, #12]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	4a58      	ldr	r2, [pc, #352]	; (8002e20 <ADC_Init+0x1f4>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d022      	beq.n	8002d0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	6899      	ldr	r1, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	430a      	orrs	r2, r1
 8002ce4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	689a      	ldr	r2, [r3, #8]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002cf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6899      	ldr	r1, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	430a      	orrs	r2, r1
 8002d06:	609a      	str	r2, [r3, #8]
 8002d08:	e00f      	b.n	8002d2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	689a      	ldr	r2, [r3, #8]
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0202 	bic.w	r2, r2, #2
 8002d38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	6899      	ldr	r1, [r3, #8]
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	7e1b      	ldrb	r3, [r3, #24]
 8002d44:	005a      	lsls	r2, r3, #1
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	430a      	orrs	r2, r1
 8002d4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d01b      	beq.n	8002d90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685a      	ldr	r2, [r3, #4]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	685a      	ldr	r2, [r3, #4]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	6859      	ldr	r1, [r3, #4]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d82:	3b01      	subs	r3, #1
 8002d84:	035a      	lsls	r2, r3, #13
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	430a      	orrs	r2, r1
 8002d8c:	605a      	str	r2, [r3, #4]
 8002d8e:	e007      	b.n	8002da0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685a      	ldr	r2, [r3, #4]
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002dae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	69db      	ldr	r3, [r3, #28]
 8002dba:	3b01      	subs	r3, #1
 8002dbc:	051a      	lsls	r2, r3, #20
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	6899      	ldr	r1, [r3, #8]
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002de2:	025a      	lsls	r2, r3, #9
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002dfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	6899      	ldr	r1, [r3, #8]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	695b      	ldr	r3, [r3, #20]
 8002e06:	029a      	lsls	r2, r3, #10
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	609a      	str	r2, [r3, #8]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr
 8002e1c:	40012300 	.word	0x40012300
 8002e20:	0f000001 	.word	0x0f000001

08002e24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d13c      	bne.n	8002eb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d12b      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d127      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d006      	beq.n	8002e7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d119      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	685a      	ldr	r2, [r3, #4]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f022 0220 	bic.w	r2, r2, #32
 8002e8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d105      	bne.n	8002eb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea8:	f043 0201 	orr.w	r2, r3, #1
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f7ff fd6b 	bl	800298c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002eb6:	e00e      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fd75 	bl	80029b4 <HAL_ADC_ErrorCallback>
}
 8002eca:	e004      	b.n	8002ed6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	4798      	blx	r3
}
 8002ed6:	bf00      	nop
 8002ed8:	3710      	adds	r7, #16
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}

08002ede <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002ede:	b580      	push	{r7, lr}
 8002ee0:	b084      	sub	sp, #16
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002eec:	68f8      	ldr	r0, [r7, #12]
 8002eee:	f7ff fd57 	bl	80029a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002ef2:	bf00      	nop
 8002ef4:	3710      	adds	r7, #16
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b084      	sub	sp, #16
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2240      	movs	r2, #64	; 0x40
 8002f0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0204 	orr.w	r2, r3, #4
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fd4a 	bl	80029b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002f20:	bf00      	nop
 8002f22:	3710      	adds	r7, #16
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bd80      	pop	{r7, pc}

08002f28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	f003 0307 	and.w	r3, r3, #7
 8002f36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f38:	4b0c      	ldr	r3, [pc, #48]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f3e:	68ba      	ldr	r2, [r7, #8]
 8002f40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f44:	4013      	ands	r3, r2
 8002f46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f5a:	4a04      	ldr	r2, [pc, #16]	; (8002f6c <__NVIC_SetPriorityGrouping+0x44>)
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	60d3      	str	r3, [r2, #12]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	e000ed00 	.word	0xe000ed00

08002f70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f74:	4b04      	ldr	r3, [pc, #16]	; (8002f88 <__NVIC_GetPriorityGrouping+0x18>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	0a1b      	lsrs	r3, r3, #8
 8002f7a:	f003 0307 	and.w	r3, r3, #7
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr
 8002f88:	e000ed00 	.word	0xe000ed00

08002f8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	db0b      	blt.n	8002fb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f9e:	79fb      	ldrb	r3, [r7, #7]
 8002fa0:	f003 021f 	and.w	r2, r3, #31
 8002fa4:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <__NVIC_EnableIRQ+0x38>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	095b      	lsrs	r3, r3, #5
 8002fac:	2001      	movs	r0, #1
 8002fae:	fa00 f202 	lsl.w	r2, r0, r2
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	e000e100 	.word	0xe000e100

08002fc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	4603      	mov	r3, r0
 8002fd0:	6039      	str	r1, [r7, #0]
 8002fd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	db0a      	blt.n	8002ff2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	b2da      	uxtb	r2, r3
 8002fe0:	490c      	ldr	r1, [pc, #48]	; (8003014 <__NVIC_SetPriority+0x4c>)
 8002fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe6:	0112      	lsls	r2, r2, #4
 8002fe8:	b2d2      	uxtb	r2, r2
 8002fea:	440b      	add	r3, r1
 8002fec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ff0:	e00a      	b.n	8003008 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	b2da      	uxtb	r2, r3
 8002ff6:	4908      	ldr	r1, [pc, #32]	; (8003018 <__NVIC_SetPriority+0x50>)
 8002ff8:	79fb      	ldrb	r3, [r7, #7]
 8002ffa:	f003 030f 	and.w	r3, r3, #15
 8002ffe:	3b04      	subs	r3, #4
 8003000:	0112      	lsls	r2, r2, #4
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	440b      	add	r3, r1
 8003006:	761a      	strb	r2, [r3, #24]
}
 8003008:	bf00      	nop
 800300a:	370c      	adds	r7, #12
 800300c:	46bd      	mov	sp, r7
 800300e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003012:	4770      	bx	lr
 8003014:	e000e100 	.word	0xe000e100
 8003018:	e000ed00 	.word	0xe000ed00

0800301c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800301c:	b480      	push	{r7}
 800301e:	b089      	sub	sp, #36	; 0x24
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 0307 	and.w	r3, r3, #7
 800302e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003030:	69fb      	ldr	r3, [r7, #28]
 8003032:	f1c3 0307 	rsb	r3, r3, #7
 8003036:	2b04      	cmp	r3, #4
 8003038:	bf28      	it	cs
 800303a:	2304      	movcs	r3, #4
 800303c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	3304      	adds	r3, #4
 8003042:	2b06      	cmp	r3, #6
 8003044:	d902      	bls.n	800304c <NVIC_EncodePriority+0x30>
 8003046:	69fb      	ldr	r3, [r7, #28]
 8003048:	3b03      	subs	r3, #3
 800304a:	e000      	b.n	800304e <NVIC_EncodePriority+0x32>
 800304c:	2300      	movs	r3, #0
 800304e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003050:	f04f 32ff 	mov.w	r2, #4294967295
 8003054:	69bb      	ldr	r3, [r7, #24]
 8003056:	fa02 f303 	lsl.w	r3, r2, r3
 800305a:	43da      	mvns	r2, r3
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	401a      	ands	r2, r3
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003064:	f04f 31ff 	mov.w	r1, #4294967295
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	fa01 f303 	lsl.w	r3, r1, r3
 800306e:	43d9      	mvns	r1, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003074:	4313      	orrs	r3, r2
         );
}
 8003076:	4618      	mov	r0, r3
 8003078:	3724      	adds	r7, #36	; 0x24
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
	...

08003084 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003084:	b580      	push	{r7, lr}
 8003086:	b082      	sub	sp, #8
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3b01      	subs	r3, #1
 8003090:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003094:	d301      	bcc.n	800309a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003096:	2301      	movs	r3, #1
 8003098:	e00f      	b.n	80030ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800309a:	4a0a      	ldr	r2, [pc, #40]	; (80030c4 <SysTick_Config+0x40>)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	3b01      	subs	r3, #1
 80030a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80030a2:	210f      	movs	r1, #15
 80030a4:	f04f 30ff 	mov.w	r0, #4294967295
 80030a8:	f7ff ff8e 	bl	8002fc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80030ac:	4b05      	ldr	r3, [pc, #20]	; (80030c4 <SysTick_Config+0x40>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80030b2:	4b04      	ldr	r3, [pc, #16]	; (80030c4 <SysTick_Config+0x40>)
 80030b4:	2207      	movs	r2, #7
 80030b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80030b8:	2300      	movs	r3, #0
}
 80030ba:	4618      	mov	r0, r3
 80030bc:	3708      	adds	r7, #8
 80030be:	46bd      	mov	sp, r7
 80030c0:	bd80      	pop	{r7, pc}
 80030c2:	bf00      	nop
 80030c4:	e000e010 	.word	0xe000e010

080030c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b082      	sub	sp, #8
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff29 	bl	8002f28 <__NVIC_SetPriorityGrouping>
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}

080030de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030de:	b580      	push	{r7, lr}
 80030e0:	b086      	sub	sp, #24
 80030e2:	af00      	add	r7, sp, #0
 80030e4:	4603      	mov	r3, r0
 80030e6:	60b9      	str	r1, [r7, #8]
 80030e8:	607a      	str	r2, [r7, #4]
 80030ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030f0:	f7ff ff3e 	bl	8002f70 <__NVIC_GetPriorityGrouping>
 80030f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	68b9      	ldr	r1, [r7, #8]
 80030fa:	6978      	ldr	r0, [r7, #20]
 80030fc:	f7ff ff8e 	bl	800301c <NVIC_EncodePriority>
 8003100:	4602      	mov	r2, r0
 8003102:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003106:	4611      	mov	r1, r2
 8003108:	4618      	mov	r0, r3
 800310a:	f7ff ff5d 	bl	8002fc8 <__NVIC_SetPriority>
}
 800310e:	bf00      	nop
 8003110:	3718      	adds	r7, #24
 8003112:	46bd      	mov	sp, r7
 8003114:	bd80      	pop	{r7, pc}

08003116 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003116:	b580      	push	{r7, lr}
 8003118:	b082      	sub	sp, #8
 800311a:	af00      	add	r7, sp, #0
 800311c:	4603      	mov	r3, r0
 800311e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003120:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003124:	4618      	mov	r0, r3
 8003126:	f7ff ff31 	bl	8002f8c <__NVIC_EnableIRQ>
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b082      	sub	sp, #8
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800313a:	6878      	ldr	r0, [r7, #4]
 800313c:	f7ff ffa2 	bl	8003084 <SysTick_Config>
 8003140:	4603      	mov	r3, r0
}
 8003142:	4618      	mov	r0, r3
 8003144:	3708      	adds	r7, #8
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b086      	sub	sp, #24
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003158:	f7ff fad8 	bl	800270c <HAL_GetTick>
 800315c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d101      	bne.n	8003168 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e099      	b.n	800329c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2202      	movs	r2, #2
 800316c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	681a      	ldr	r2, [r3, #0]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f022 0201 	bic.w	r2, r2, #1
 8003186:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003188:	e00f      	b.n	80031aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800318a:	f7ff fabf 	bl	800270c <HAL_GetTick>
 800318e:	4602      	mov	r2, r0
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	1ad3      	subs	r3, r2, r3
 8003194:	2b05      	cmp	r3, #5
 8003196:	d908      	bls.n	80031aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2220      	movs	r2, #32
 800319c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2203      	movs	r2, #3
 80031a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80031a6:	2303      	movs	r3, #3
 80031a8:	e078      	b.n	800329c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 0301 	and.w	r3, r3, #1
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e8      	bne.n	800318a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80031c0:	697a      	ldr	r2, [r7, #20]
 80031c2:	4b38      	ldr	r3, [pc, #224]	; (80032a4 <HAL_DMA_Init+0x158>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	691b      	ldr	r3, [r3, #16]
 80031dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80031e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80031ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003200:	2b04      	cmp	r3, #4
 8003202:	d107      	bne.n	8003214 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320c:	4313      	orrs	r3, r2
 800320e:	697a      	ldr	r2, [r7, #20]
 8003210:	4313      	orrs	r3, r2
 8003212:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	697a      	ldr	r2, [r7, #20]
 800321a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	695b      	ldr	r3, [r3, #20]
 8003222:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0307 	bic.w	r3, r3, #7
 800322a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003230:	697a      	ldr	r2, [r7, #20]
 8003232:	4313      	orrs	r3, r2
 8003234:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b04      	cmp	r3, #4
 800323c:	d117      	bne.n	800326e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	4313      	orrs	r3, r2
 8003246:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	2b00      	cmp	r3, #0
 800324e:	d00e      	beq.n	800326e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 fa6f 	bl	8003734 <DMA_CheckFifoParam>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d008      	beq.n	800326e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2240      	movs	r2, #64	; 0x40
 8003260:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800326a:	2301      	movs	r3, #1
 800326c:	e016      	b.n	800329c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	697a      	ldr	r2, [r7, #20]
 8003274:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 fa26 	bl	80036c8 <DMA_CalcBaseAndBitshift>
 800327c:	4603      	mov	r3, r0
 800327e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003284:	223f      	movs	r2, #63	; 0x3f
 8003286:	409a      	lsls	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2200      	movs	r2, #0
 8003290:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2201      	movs	r2, #1
 8003296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800329a:	2300      	movs	r3, #0
}
 800329c:	4618      	mov	r0, r3
 800329e:	3718      	adds	r7, #24
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	f010803f 	.word	0xf010803f

080032a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b086      	sub	sp, #24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	60f8      	str	r0, [r7, #12]
 80032b0:	60b9      	str	r1, [r7, #8]
 80032b2:	607a      	str	r2, [r7, #4]
 80032b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_DMA_Start_IT+0x26>
 80032ca:	2302      	movs	r3, #2
 80032cc:	e040      	b.n	8003350 <HAL_DMA_Start_IT+0xa8>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2201      	movs	r2, #1
 80032d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80032dc:	b2db      	uxtb	r3, r3
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12f      	bne.n	8003342 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	2202      	movs	r2, #2
 80032e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2200      	movs	r2, #0
 80032ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	687a      	ldr	r2, [r7, #4]
 80032f4:	68b9      	ldr	r1, [r7, #8]
 80032f6:	68f8      	ldr	r0, [r7, #12]
 80032f8:	f000 f9b8 	bl	800366c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003300:	223f      	movs	r2, #63	; 0x3f
 8003302:	409a      	lsls	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f042 0216 	orr.w	r2, r2, #22
 8003316:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331c:	2b00      	cmp	r3, #0
 800331e:	d007      	beq.n	8003330 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f042 0208 	orr.w	r2, r2, #8
 800332e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0201 	orr.w	r2, r2, #1
 800333e:	601a      	str	r2, [r3, #0]
 8003340:	e005      	b.n	800334e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800334a:	2302      	movs	r3, #2
 800334c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800334e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003350:	4618      	mov	r0, r3
 8003352:	3718      	adds	r7, #24
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b086      	sub	sp, #24
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003360:	2300      	movs	r3, #0
 8003362:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003364:	4b8e      	ldr	r3, [pc, #568]	; (80035a0 <HAL_DMA_IRQHandler+0x248>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a8e      	ldr	r2, [pc, #568]	; (80035a4 <HAL_DMA_IRQHandler+0x24c>)
 800336a:	fba2 2303 	umull	r2, r3, r2, r3
 800336e:	0a9b      	lsrs	r3, r3, #10
 8003370:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003376:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003382:	2208      	movs	r2, #8
 8003384:	409a      	lsls	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	4013      	ands	r3, r2
 800338a:	2b00      	cmp	r3, #0
 800338c:	d01a      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	d013      	beq.n	80033c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f022 0204 	bic.w	r2, r2, #4
 80033aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033b0:	2208      	movs	r2, #8
 80033b2:	409a      	lsls	r2, r3
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033bc:	f043 0201 	orr.w	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033c8:	2201      	movs	r2, #1
 80033ca:	409a      	lsls	r2, r3
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4013      	ands	r3, r2
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d012      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	695b      	ldr	r3, [r3, #20]
 80033da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00b      	beq.n	80033fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033e6:	2201      	movs	r2, #1
 80033e8:	409a      	lsls	r2, r3
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	f043 0202 	orr.w	r2, r3, #2
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033fe:	2204      	movs	r2, #4
 8003400:	409a      	lsls	r2, r3
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	4013      	ands	r3, r2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d012      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0302 	and.w	r3, r3, #2
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00b      	beq.n	8003430 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800341c:	2204      	movs	r2, #4
 800341e:	409a      	lsls	r2, r3
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003428:	f043 0204 	orr.w	r2, r3, #4
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003434:	2210      	movs	r2, #16
 8003436:	409a      	lsls	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4013      	ands	r3, r2
 800343c:	2b00      	cmp	r3, #0
 800343e:	d043      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0308 	and.w	r3, r3, #8
 800344a:	2b00      	cmp	r3, #0
 800344c:	d03c      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	2210      	movs	r2, #16
 8003454:	409a      	lsls	r2, r3
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003464:	2b00      	cmp	r3, #0
 8003466:	d018      	beq.n	800349a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d108      	bne.n	8003488 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800347a:	2b00      	cmp	r3, #0
 800347c:	d024      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	4798      	blx	r3
 8003486:	e01f      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800348c:	2b00      	cmp	r3, #0
 800348e:	d01b      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	4798      	blx	r3
 8003498:	e016      	b.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d107      	bne.n	80034b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 0208 	bic.w	r2, r2, #8
 80034b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c4:	6878      	ldr	r0, [r7, #4]
 80034c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034cc:	2220      	movs	r2, #32
 80034ce:	409a      	lsls	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4013      	ands	r3, r2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	f000 808f 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f003 0310 	and.w	r3, r3, #16
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 8087 	beq.w	80035f8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	2220      	movs	r2, #32
 80034f0:	409a      	lsls	r2, r3
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b05      	cmp	r3, #5
 8003500:	d136      	bne.n	8003570 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0216 	bic.w	r2, r2, #22
 8003510:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	695a      	ldr	r2, [r3, #20]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003520:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003526:	2b00      	cmp	r3, #0
 8003528:	d103      	bne.n	8003532 <HAL_DMA_IRQHandler+0x1da>
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800352e:	2b00      	cmp	r3, #0
 8003530:	d007      	beq.n	8003542 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0208 	bic.w	r2, r2, #8
 8003540:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003546:	223f      	movs	r2, #63	; 0x3f
 8003548:	409a      	lsls	r2, r3
 800354a:	693b      	ldr	r3, [r7, #16]
 800354c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2201      	movs	r2, #1
 8003552:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003562:	2b00      	cmp	r3, #0
 8003564:	d07e      	beq.n	8003664 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800356a:	6878      	ldr	r0, [r7, #4]
 800356c:	4798      	blx	r3
        }
        return;
 800356e:	e079      	b.n	8003664 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d01d      	beq.n	80035ba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d10d      	bne.n	80035a8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003590:	2b00      	cmp	r3, #0
 8003592:	d031      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	4798      	blx	r3
 800359c:	e02c      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
 800359e:	bf00      	nop
 80035a0:	20000008 	.word	0x20000008
 80035a4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d023      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	4798      	blx	r3
 80035b8:	e01e      	b.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d10f      	bne.n	80035e8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f022 0210 	bic.w	r2, r2, #16
 80035d6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2200      	movs	r2, #0
 80035e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d003      	beq.n	80035f8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d032      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003604:	f003 0301 	and.w	r3, r3, #1
 8003608:	2b00      	cmp	r3, #0
 800360a:	d022      	beq.n	8003652 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2205      	movs	r2, #5
 8003610:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f022 0201 	bic.w	r2, r2, #1
 8003622:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	3301      	adds	r3, #1
 8003628:	60bb      	str	r3, [r7, #8]
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	429a      	cmp	r2, r3
 800362e:	d307      	bcc.n	8003640 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f003 0301 	and.w	r3, r3, #1
 800363a:	2b00      	cmp	r3, #0
 800363c:	d1f2      	bne.n	8003624 <HAL_DMA_IRQHandler+0x2cc>
 800363e:	e000      	b.n	8003642 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003640:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2201      	movs	r2, #1
 8003646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003656:	2b00      	cmp	r3, #0
 8003658:	d005      	beq.n	8003666 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	4798      	blx	r3
 8003662:	e000      	b.n	8003666 <HAL_DMA_IRQHandler+0x30e>
        return;
 8003664:	bf00      	nop
    }
  }
}
 8003666:	3718      	adds	r7, #24
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}

0800366c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800366c:	b480      	push	{r7}
 800366e:	b085      	sub	sp, #20
 8003670:	af00      	add	r7, sp, #0
 8003672:	60f8      	str	r0, [r7, #12]
 8003674:	60b9      	str	r1, [r7, #8]
 8003676:	607a      	str	r2, [r7, #4]
 8003678:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003688:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	683a      	ldr	r2, [r7, #0]
 8003690:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d108      	bne.n	80036ac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	687a      	ldr	r2, [r7, #4]
 80036a0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68ba      	ldr	r2, [r7, #8]
 80036a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80036aa:	e007      	b.n	80036bc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	68ba      	ldr	r2, [r7, #8]
 80036b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	687a      	ldr	r2, [r7, #4]
 80036ba:	60da      	str	r2, [r3, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	3b10      	subs	r3, #16
 80036d8:	4a14      	ldr	r2, [pc, #80]	; (800372c <DMA_CalcBaseAndBitshift+0x64>)
 80036da:	fba2 2303 	umull	r2, r3, r2, r3
 80036de:	091b      	lsrs	r3, r3, #4
 80036e0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80036e2:	4a13      	ldr	r2, [pc, #76]	; (8003730 <DMA_CalcBaseAndBitshift+0x68>)
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4413      	add	r3, r2
 80036e8:	781b      	ldrb	r3, [r3, #0]
 80036ea:	461a      	mov	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2b03      	cmp	r3, #3
 80036f4:	d909      	bls.n	800370a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80036fe:	f023 0303 	bic.w	r3, r3, #3
 8003702:	1d1a      	adds	r2, r3, #4
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	659a      	str	r2, [r3, #88]	; 0x58
 8003708:	e007      	b.n	800371a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003712:	f023 0303 	bic.w	r3, r3, #3
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr
 800372a:	bf00      	nop
 800372c:	aaaaaaab 	.word	0xaaaaaaab
 8003730:	08005dd8 	.word	0x08005dd8

08003734 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003734:	b480      	push	{r7}
 8003736:	b085      	sub	sp, #20
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800373c:	2300      	movs	r3, #0
 800373e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003744:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d11f      	bne.n	800378e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800374e:	68bb      	ldr	r3, [r7, #8]
 8003750:	2b03      	cmp	r3, #3
 8003752:	d856      	bhi.n	8003802 <DMA_CheckFifoParam+0xce>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <DMA_CheckFifoParam+0x28>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377f 	.word	0x0800377f
 8003764:	0800376d 	.word	0x0800376d
 8003768:	08003803 	.word	0x08003803
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003774:	2b00      	cmp	r3, #0
 8003776:	d046      	beq.n	8003806 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800377c:	e043      	b.n	8003806 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003782:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003786:	d140      	bne.n	800380a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800378c:	e03d      	b.n	800380a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	699b      	ldr	r3, [r3, #24]
 8003792:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003796:	d121      	bne.n	80037dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	2b03      	cmp	r3, #3
 800379c:	d837      	bhi.n	800380e <DMA_CheckFifoParam+0xda>
 800379e:	a201      	add	r2, pc, #4	; (adr r2, 80037a4 <DMA_CheckFifoParam+0x70>)
 80037a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037a4:	080037b5 	.word	0x080037b5
 80037a8:	080037bb 	.word	0x080037bb
 80037ac:	080037b5 	.word	0x080037b5
 80037b0:	080037cd 	.word	0x080037cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	73fb      	strb	r3, [r7, #15]
      break;
 80037b8:	e030      	b.n	800381c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d025      	beq.n	8003812 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80037ca:	e022      	b.n	8003812 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80037d4:	d11f      	bne.n	8003816 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80037d6:	2301      	movs	r3, #1
 80037d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80037da:	e01c      	b.n	8003816 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d903      	bls.n	80037ea <DMA_CheckFifoParam+0xb6>
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2b03      	cmp	r3, #3
 80037e6:	d003      	beq.n	80037f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80037e8:	e018      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	73fb      	strb	r3, [r7, #15]
      break;
 80037ee:	e015      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00e      	beq.n	800381a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003800:	e00b      	b.n	800381a <DMA_CheckFifoParam+0xe6>
      break;
 8003802:	bf00      	nop
 8003804:	e00a      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003806:	bf00      	nop
 8003808:	e008      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380a:	bf00      	nop
 800380c:	e006      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800380e:	bf00      	nop
 8003810:	e004      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 8003812:	bf00      	nop
 8003814:	e002      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;   
 8003816:	bf00      	nop
 8003818:	e000      	b.n	800381c <DMA_CheckFifoParam+0xe8>
      break;
 800381a:	bf00      	nop
    }
  } 
  
  return status; 
 800381c:	7bfb      	ldrb	r3, [r7, #15]
}
 800381e:	4618      	mov	r0, r3
 8003820:	3714      	adds	r7, #20
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop

0800382c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800382c:	b480      	push	{r7}
 800382e:	b089      	sub	sp, #36	; 0x24
 8003830:	af00      	add	r7, sp, #0
 8003832:	6078      	str	r0, [r7, #4]
 8003834:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003836:	2300      	movs	r3, #0
 8003838:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800383a:	2300      	movs	r3, #0
 800383c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
 8003846:	e159      	b.n	8003afc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003848:	2201      	movs	r2, #1
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	fa02 f303 	lsl.w	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	697a      	ldr	r2, [r7, #20]
 8003858:	4013      	ands	r3, r2
 800385a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800385c:	693a      	ldr	r2, [r7, #16]
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	429a      	cmp	r2, r3
 8003862:	f040 8148 	bne.w	8003af6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	f003 0303 	and.w	r3, r3, #3
 800386e:	2b01      	cmp	r3, #1
 8003870:	d005      	beq.n	800387e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	2b02      	cmp	r3, #2
 800387c:	d130      	bne.n	80038e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	2203      	movs	r2, #3
 800388a:	fa02 f303 	lsl.w	r3, r2, r3
 800388e:	43db      	mvns	r3, r3
 8003890:	69ba      	ldr	r2, [r7, #24]
 8003892:	4013      	ands	r3, r2
 8003894:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	69ba      	ldr	r2, [r7, #24]
 80038ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038b4:	2201      	movs	r2, #1
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	fa02 f303 	lsl.w	r3, r2, r3
 80038bc:	43db      	mvns	r3, r3
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4013      	ands	r3, r2
 80038c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	091b      	lsrs	r3, r3, #4
 80038ca:	f003 0201 	and.w	r2, r3, #1
 80038ce:	69fb      	ldr	r3, [r7, #28]
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	69ba      	ldr	r2, [r7, #24]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69ba      	ldr	r2, [r7, #24]
 80038de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	2b03      	cmp	r3, #3
 80038ea:	d017      	beq.n	800391c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	2203      	movs	r2, #3
 80038f8:	fa02 f303 	lsl.w	r3, r2, r3
 80038fc:	43db      	mvns	r3, r3
 80038fe:	69ba      	ldr	r2, [r7, #24]
 8003900:	4013      	ands	r3, r2
 8003902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	689a      	ldr	r2, [r3, #8]
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	69ba      	ldr	r2, [r7, #24]
 8003912:	4313      	orrs	r3, r2
 8003914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	69ba      	ldr	r2, [r7, #24]
 800391a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 0303 	and.w	r3, r3, #3
 8003924:	2b02      	cmp	r3, #2
 8003926:	d123      	bne.n	8003970 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	08da      	lsrs	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	3208      	adds	r2, #8
 8003930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003934:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	009b      	lsls	r3, r3, #2
 800393e:	220f      	movs	r2, #15
 8003940:	fa02 f303 	lsl.w	r3, r2, r3
 8003944:	43db      	mvns	r3, r3
 8003946:	69ba      	ldr	r2, [r7, #24]
 8003948:	4013      	ands	r3, r2
 800394a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	f003 0307 	and.w	r3, r3, #7
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	fa02 f303 	lsl.w	r3, r2, r3
 800395c:	69ba      	ldr	r2, [r7, #24]
 800395e:	4313      	orrs	r3, r2
 8003960:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	08da      	lsrs	r2, r3, #3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	3208      	adds	r2, #8
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	2203      	movs	r2, #3
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	43db      	mvns	r3, r3
 8003982:	69ba      	ldr	r2, [r7, #24]
 8003984:	4013      	ands	r3, r2
 8003986:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	f003 0203 	and.w	r2, r3, #3
 8003990:	69fb      	ldr	r3, [r7, #28]
 8003992:	005b      	lsls	r3, r3, #1
 8003994:	fa02 f303 	lsl.w	r3, r2, r3
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	4313      	orrs	r3, r2
 800399c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	69ba      	ldr	r2, [r7, #24]
 80039a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	685b      	ldr	r3, [r3, #4]
 80039a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	f000 80a2 	beq.w	8003af6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039b2:	2300      	movs	r3, #0
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	4b57      	ldr	r3, [pc, #348]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ba:	4a56      	ldr	r2, [pc, #344]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039c0:	6453      	str	r3, [r2, #68]	; 0x44
 80039c2:	4b54      	ldr	r3, [pc, #336]	; (8003b14 <HAL_GPIO_Init+0x2e8>)
 80039c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ca:	60fb      	str	r3, [r7, #12]
 80039cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039ce:	4a52      	ldr	r2, [pc, #328]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 80039d0:	69fb      	ldr	r3, [r7, #28]
 80039d2:	089b      	lsrs	r3, r3, #2
 80039d4:	3302      	adds	r3, #2
 80039d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0303 	and.w	r3, r3, #3
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	220f      	movs	r2, #15
 80039e6:	fa02 f303 	lsl.w	r3, r2, r3
 80039ea:	43db      	mvns	r3, r3
 80039ec:	69ba      	ldr	r2, [r7, #24]
 80039ee:	4013      	ands	r3, r2
 80039f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	4a49      	ldr	r2, [pc, #292]	; (8003b1c <HAL_GPIO_Init+0x2f0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d019      	beq.n	8003a2e <HAL_GPIO_Init+0x202>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	4a48      	ldr	r2, [pc, #288]	; (8003b20 <HAL_GPIO_Init+0x2f4>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d013      	beq.n	8003a2a <HAL_GPIO_Init+0x1fe>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	4a47      	ldr	r2, [pc, #284]	; (8003b24 <HAL_GPIO_Init+0x2f8>)
 8003a06:	4293      	cmp	r3, r2
 8003a08:	d00d      	beq.n	8003a26 <HAL_GPIO_Init+0x1fa>
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	4a46      	ldr	r2, [pc, #280]	; (8003b28 <HAL_GPIO_Init+0x2fc>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d007      	beq.n	8003a22 <HAL_GPIO_Init+0x1f6>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	4a45      	ldr	r2, [pc, #276]	; (8003b2c <HAL_GPIO_Init+0x300>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <HAL_GPIO_Init+0x1f2>
 8003a1a:	2304      	movs	r3, #4
 8003a1c:	e008      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a1e:	2307      	movs	r3, #7
 8003a20:	e006      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a22:	2303      	movs	r3, #3
 8003a24:	e004      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a26:	2302      	movs	r3, #2
 8003a28:	e002      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	e000      	b.n	8003a30 <HAL_GPIO_Init+0x204>
 8003a2e:	2300      	movs	r3, #0
 8003a30:	69fa      	ldr	r2, [r7, #28]
 8003a32:	f002 0203 	and.w	r2, r2, #3
 8003a36:	0092      	lsls	r2, r2, #2
 8003a38:	4093      	lsls	r3, r2
 8003a3a:	69ba      	ldr	r2, [r7, #24]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a40:	4935      	ldr	r1, [pc, #212]	; (8003b18 <HAL_GPIO_Init+0x2ec>)
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	089b      	lsrs	r3, r3, #2
 8003a46:	3302      	adds	r3, #2
 8003a48:	69ba      	ldr	r2, [r7, #24]
 8003a4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a4e:	4b38      	ldr	r3, [pc, #224]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	43db      	mvns	r3, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4013      	ands	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d003      	beq.n	8003a72 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a6a:	69ba      	ldr	r2, [r7, #24]
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a72:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a74:	69bb      	ldr	r3, [r7, #24]
 8003a76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a78:	4b2d      	ldr	r3, [pc, #180]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d003      	beq.n	8003a9c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a9c:	4a24      	ldr	r2, [pc, #144]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003aa2:	4b23      	ldr	r3, [pc, #140]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa8:	693b      	ldr	r3, [r7, #16]
 8003aaa:	43db      	mvns	r3, r3
 8003aac:	69ba      	ldr	r2, [r7, #24]
 8003aae:	4013      	ands	r3, r2
 8003ab0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d003      	beq.n	8003ac6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003abe:	69ba      	ldr	r2, [r7, #24]
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	4313      	orrs	r3, r2
 8003ac4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ac6:	4a1a      	ldr	r2, [pc, #104]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003acc:	4b18      	ldr	r3, [pc, #96]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	43db      	mvns	r3, r3
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	4013      	ands	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685b      	ldr	r3, [r3, #4]
 8003ae0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d003      	beq.n	8003af0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ae8:	69ba      	ldr	r2, [r7, #24]
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003af0:	4a0f      	ldr	r2, [pc, #60]	; (8003b30 <HAL_GPIO_Init+0x304>)
 8003af2:	69bb      	ldr	r3, [r7, #24]
 8003af4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003af6:	69fb      	ldr	r3, [r7, #28]
 8003af8:	3301      	adds	r3, #1
 8003afa:	61fb      	str	r3, [r7, #28]
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	2b0f      	cmp	r3, #15
 8003b00:	f67f aea2 	bls.w	8003848 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b04:	bf00      	nop
 8003b06:	bf00      	nop
 8003b08:	3724      	adds	r7, #36	; 0x24
 8003b0a:	46bd      	mov	sp, r7
 8003b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b10:	4770      	bx	lr
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40013800 	.word	0x40013800
 8003b1c:	40020000 	.word	0x40020000
 8003b20:	40020400 	.word	0x40020400
 8003b24:	40020800 	.word	0x40020800
 8003b28:	40020c00 	.word	0x40020c00
 8003b2c:	40021000 	.word	0x40021000
 8003b30:	40013c00 	.word	0x40013c00

08003b34 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b085      	sub	sp, #20
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
 8003b3c:	460b      	mov	r3, r1
 8003b3e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691a      	ldr	r2, [r3, #16]
 8003b44:	887b      	ldrh	r3, [r7, #2]
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d002      	beq.n	8003b52 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	73fb      	strb	r3, [r7, #15]
 8003b50:	e001      	b.n	8003b56 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b52:	2300      	movs	r3, #0
 8003b54:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b56:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	3714      	adds	r7, #20
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b62:	4770      	bx	lr

08003b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b083      	sub	sp, #12
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	460b      	mov	r3, r1
 8003b6e:	807b      	strh	r3, [r7, #2]
 8003b70:	4613      	mov	r3, r2
 8003b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b74:	787b      	ldrb	r3, [r7, #1]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b7a:	887a      	ldrh	r2, [r7, #2]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b80:	e003      	b.n	8003b8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b82:	887b      	ldrh	r3, [r7, #2]
 8003b84:	041a      	lsls	r2, r3, #16
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	619a      	str	r2, [r3, #24]
}
 8003b8a:	bf00      	nop
 8003b8c:	370c      	adds	r7, #12
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b94:	4770      	bx	lr
	...

08003b98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003ba2:	4b08      	ldr	r3, [pc, #32]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ba4:	695a      	ldr	r2, [r3, #20]
 8003ba6:	88fb      	ldrh	r3, [r7, #6]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d006      	beq.n	8003bbc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bae:	4a05      	ldr	r2, [pc, #20]	; (8003bc4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bb0:	88fb      	ldrh	r3, [r7, #6]
 8003bb2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	f7fd fc9a 	bl	80014f0 <HAL_GPIO_EXTI_Callback>
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	40013c00 	.word	0x40013c00

08003bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d101      	bne.n	8003bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e267      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d075      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003be6:	4b88      	ldr	r3, [pc, #544]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 030c 	and.w	r3, r3, #12
 8003bee:	2b04      	cmp	r3, #4
 8003bf0:	d00c      	beq.n	8003c0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bf2:	4b85      	ldr	r3, [pc, #532]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bfa:	2b08      	cmp	r3, #8
 8003bfc:	d112      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bfe:	4b82      	ldr	r3, [pc, #520]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c0a:	d10b      	bne.n	8003c24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c0c:	4b7e      	ldr	r3, [pc, #504]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d05b      	beq.n	8003cd0 <HAL_RCC_OscConfig+0x108>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	685b      	ldr	r3, [r3, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d157      	bne.n	8003cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e242      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	685b      	ldr	r3, [r3, #4]
 8003c28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c2c:	d106      	bne.n	8003c3c <HAL_RCC_OscConfig+0x74>
 8003c2e:	4b76      	ldr	r3, [pc, #472]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a75      	ldr	r2, [pc, #468]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c38:	6013      	str	r3, [r2, #0]
 8003c3a:	e01d      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	685b      	ldr	r3, [r3, #4]
 8003c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c44:	d10c      	bne.n	8003c60 <HAL_RCC_OscConfig+0x98>
 8003c46:	4b70      	ldr	r3, [pc, #448]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	4a6f      	ldr	r2, [pc, #444]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c50:	6013      	str	r3, [r2, #0]
 8003c52:	4b6d      	ldr	r3, [pc, #436]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a6c      	ldr	r2, [pc, #432]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c5c:	6013      	str	r3, [r2, #0]
 8003c5e:	e00b      	b.n	8003c78 <HAL_RCC_OscConfig+0xb0>
 8003c60:	4b69      	ldr	r3, [pc, #420]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a68      	ldr	r2, [pc, #416]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c6a:	6013      	str	r3, [r2, #0]
 8003c6c:	4b66      	ldr	r3, [pc, #408]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a65      	ldr	r2, [pc, #404]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d013      	beq.n	8003ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c80:	f7fe fd44 	bl	800270c <HAL_GetTick>
 8003c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c86:	e008      	b.n	8003c9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c88:	f7fe fd40 	bl	800270c <HAL_GetTick>
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	1ad3      	subs	r3, r2, r3
 8003c92:	2b64      	cmp	r3, #100	; 0x64
 8003c94:	d901      	bls.n	8003c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e207      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c9a:	4b5b      	ldr	r3, [pc, #364]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d0f0      	beq.n	8003c88 <HAL_RCC_OscConfig+0xc0>
 8003ca6:	e014      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca8:	f7fe fd30 	bl	800270c <HAL_GetTick>
 8003cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fd2c 	bl	800270c <HAL_GetTick>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e1f3      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b51      	ldr	r3, [pc, #324]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xe8>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0302 	and.w	r3, r3, #2
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d063      	beq.n	8003da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cde:	4b4a      	ldr	r3, [pc, #296]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	f003 030c 	and.w	r3, r3, #12
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d00b      	beq.n	8003d02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cea:	4b47      	ldr	r3, [pc, #284]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cf2:	2b08      	cmp	r3, #8
 8003cf4:	d11c      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cf6:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d116      	bne.n	8003d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d02:	4b41      	ldr	r3, [pc, #260]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d005      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d001      	beq.n	8003d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e1c7      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d1a:	4b3b      	ldr	r3, [pc, #236]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	691b      	ldr	r3, [r3, #16]
 8003d26:	00db      	lsls	r3, r3, #3
 8003d28:	4937      	ldr	r1, [pc, #220]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2e:	e03a      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	68db      	ldr	r3, [r3, #12]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d020      	beq.n	8003d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d38:	4b34      	ldr	r3, [pc, #208]	; (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d3e:	f7fe fce5 	bl	800270c <HAL_GetTick>
 8003d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d44:	e008      	b.n	8003d58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d46:	f7fe fce1 	bl	800270c <HAL_GetTick>
 8003d4a:	4602      	mov	r2, r0
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	1ad3      	subs	r3, r2, r3
 8003d50:	2b02      	cmp	r3, #2
 8003d52:	d901      	bls.n	8003d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d54:	2303      	movs	r3, #3
 8003d56:	e1a8      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d58:	4b2b      	ldr	r3, [pc, #172]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0302 	and.w	r3, r3, #2
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d0f0      	beq.n	8003d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d64:	4b28      	ldr	r3, [pc, #160]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	00db      	lsls	r3, r3, #3
 8003d72:	4925      	ldr	r1, [pc, #148]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d74:	4313      	orrs	r3, r2
 8003d76:	600b      	str	r3, [r1, #0]
 8003d78:	e015      	b.n	8003da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d7a:	4b24      	ldr	r3, [pc, #144]	; (8003e0c <HAL_RCC_OscConfig+0x244>)
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d80:	f7fe fcc4 	bl	800270c <HAL_GetTick>
 8003d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d86:	e008      	b.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d88:	f7fe fcc0 	bl	800270c <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	1ad3      	subs	r3, r2, r3
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d901      	bls.n	8003d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e187      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d9a:	4b1b      	ldr	r3, [pc, #108]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0302 	and.w	r3, r3, #2
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d1f0      	bne.n	8003d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 0308 	and.w	r3, r3, #8
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d036      	beq.n	8003e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d016      	beq.n	8003de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dba:	4b15      	ldr	r3, [pc, #84]	; (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc0:	f7fe fca4 	bl	800270c <HAL_GetTick>
 8003dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dc6:	e008      	b.n	8003dda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dc8:	f7fe fca0 	bl	800270c <HAL_GetTick>
 8003dcc:	4602      	mov	r2, r0
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	1ad3      	subs	r3, r2, r3
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d901      	bls.n	8003dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	e167      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dda:	4b0b      	ldr	r3, [pc, #44]	; (8003e08 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dde:	f003 0302 	and.w	r3, r3, #2
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d0f0      	beq.n	8003dc8 <HAL_RCC_OscConfig+0x200>
 8003de6:	e01b      	b.n	8003e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003de8:	4b09      	ldr	r3, [pc, #36]	; (8003e10 <HAL_RCC_OscConfig+0x248>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dee:	f7fe fc8d 	bl	800270c <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003df4:	e00e      	b.n	8003e14 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003df6:	f7fe fc89 	bl	800270c <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d907      	bls.n	8003e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e150      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8003e08:	40023800 	.word	0x40023800
 8003e0c:	42470000 	.word	0x42470000
 8003e10:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e14:	4b88      	ldr	r3, [pc, #544]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1ea      	bne.n	8003df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f003 0304 	and.w	r3, r3, #4
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 8097 	beq.w	8003f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e32:	4b81      	ldr	r3, [pc, #516]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d10f      	bne.n	8003e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e3e:	2300      	movs	r3, #0
 8003e40:	60bb      	str	r3, [r7, #8]
 8003e42:	4b7d      	ldr	r3, [pc, #500]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e46:	4a7c      	ldr	r2, [pc, #496]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e4c:	6413      	str	r3, [r2, #64]	; 0x40
 8003e4e:	4b7a      	ldr	r3, [pc, #488]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e56:	60bb      	str	r3, [r7, #8]
 8003e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e5e:	4b77      	ldr	r3, [pc, #476]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d118      	bne.n	8003e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e6a:	4b74      	ldr	r3, [pc, #464]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a73      	ldr	r2, [pc, #460]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e76:	f7fe fc49 	bl	800270c <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e7c:	e008      	b.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e7e:	f7fe fc45 	bl	800270c <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d901      	bls.n	8003e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e10c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e90:	4b6a      	ldr	r3, [pc, #424]	; (800403c <HAL_RCC_OscConfig+0x474>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d0f0      	beq.n	8003e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689b      	ldr	r3, [r3, #8]
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	d106      	bne.n	8003eb2 <HAL_RCC_OscConfig+0x2ea>
 8003ea4:	4b64      	ldr	r3, [pc, #400]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea8:	4a63      	ldr	r2, [pc, #396]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	f043 0301 	orr.w	r3, r3, #1
 8003eae:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb0:	e01c      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	2b05      	cmp	r3, #5
 8003eb8:	d10c      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x30c>
 8003eba:	4b5f      	ldr	r3, [pc, #380]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebe:	4a5e      	ldr	r2, [pc, #376]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	f043 0304 	orr.w	r3, r3, #4
 8003ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ec6:	4b5c      	ldr	r3, [pc, #368]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eca:	4a5b      	ldr	r2, [pc, #364]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ecc:	f043 0301 	orr.w	r3, r3, #1
 8003ed0:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed2:	e00b      	b.n	8003eec <HAL_RCC_OscConfig+0x324>
 8003ed4:	4b58      	ldr	r3, [pc, #352]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ed8:	4a57      	ldr	r2, [pc, #348]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003eda:	f023 0301 	bic.w	r3, r3, #1
 8003ede:	6713      	str	r3, [r2, #112]	; 0x70
 8003ee0:	4b55      	ldr	r3, [pc, #340]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee4:	4a54      	ldr	r2, [pc, #336]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ee6:	f023 0304 	bic.w	r3, r3, #4
 8003eea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d015      	beq.n	8003f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ef4:	f7fe fc0a 	bl	800270c <HAL_GetTick>
 8003ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003efa:	e00a      	b.n	8003f12 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003efc:	f7fe fc06 	bl	800270c <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e0cb      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f12:	4b49      	ldr	r3, [pc, #292]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f16:	f003 0302 	and.w	r3, r3, #2
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0ee      	beq.n	8003efc <HAL_RCC_OscConfig+0x334>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f20:	f7fe fbf4 	bl	800270c <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f26:	e00a      	b.n	8003f3e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f28:	f7fe fbf0 	bl	800270c <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d901      	bls.n	8003f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e0b5      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f3e:	4b3e      	ldr	r3, [pc, #248]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f42:	f003 0302 	and.w	r3, r3, #2
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d1ee      	bne.n	8003f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d105      	bne.n	8003f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f50:	4b39      	ldr	r3, [pc, #228]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f54:	4a38      	ldr	r2, [pc, #224]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f56:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f5a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	699b      	ldr	r3, [r3, #24]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	f000 80a1 	beq.w	80040a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f66:	4b34      	ldr	r3, [pc, #208]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b08      	cmp	r3, #8
 8003f70:	d05c      	beq.n	800402c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d141      	bne.n	8003ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f7a:	4b31      	ldr	r3, [pc, #196]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f80:	f7fe fbc4 	bl	800270c <HAL_GetTick>
 8003f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f86:	e008      	b.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f88:	f7fe fbc0 	bl	800270c <HAL_GetTick>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	693b      	ldr	r3, [r7, #16]
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e087      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f9a:	4b27      	ldr	r3, [pc, #156]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1f0      	bne.n	8003f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69da      	ldr	r2, [r3, #28]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6a1b      	ldr	r3, [r3, #32]
 8003fae:	431a      	orrs	r2, r3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	019b      	lsls	r3, r3, #6
 8003fb6:	431a      	orrs	r2, r3
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fbc:	085b      	lsrs	r3, r3, #1
 8003fbe:	3b01      	subs	r3, #1
 8003fc0:	041b      	lsls	r3, r3, #16
 8003fc2:	431a      	orrs	r2, r3
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc8:	061b      	lsls	r3, r3, #24
 8003fca:	491b      	ldr	r1, [pc, #108]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003fd0:	4b1b      	ldr	r3, [pc, #108]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8003fd2:	2201      	movs	r2, #1
 8003fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fd6:	f7fe fb99 	bl	800270c <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fde:	f7fe fb95 	bl	800270c <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e05c      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ff0:	4b11      	ldr	r3, [pc, #68]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x416>
 8003ffc:	e054      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffe:	4b10      	ldr	r3, [pc, #64]	; (8004040 <HAL_RCC_OscConfig+0x478>)
 8004000:	2200      	movs	r2, #0
 8004002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004004:	f7fe fb82 	bl	800270c <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800400c:	f7fe fb7e 	bl	800270c <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e045      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800401e:	4b06      	ldr	r3, [pc, #24]	; (8004038 <HAL_RCC_OscConfig+0x470>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1f0      	bne.n	800400c <HAL_RCC_OscConfig+0x444>
 800402a:	e03d      	b.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	699b      	ldr	r3, [r3, #24]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d107      	bne.n	8004044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004034:	2301      	movs	r3, #1
 8004036:	e038      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
 8004038:	40023800 	.word	0x40023800
 800403c:	40007000 	.word	0x40007000
 8004040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004044:	4b1b      	ldr	r3, [pc, #108]	; (80040b4 <HAL_RCC_OscConfig+0x4ec>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	699b      	ldr	r3, [r3, #24]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d028      	beq.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800405c:	429a      	cmp	r2, r3
 800405e:	d121      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800406a:	429a      	cmp	r2, r3
 800406c:	d11a      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004074:	4013      	ands	r3, r2
 8004076:	687a      	ldr	r2, [r7, #4]
 8004078:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800407a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800407c:	4293      	cmp	r3, r2
 800407e:	d111      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408a:	085b      	lsrs	r3, r3, #1
 800408c:	3b01      	subs	r3, #1
 800408e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004090:	429a      	cmp	r2, r3
 8004092:	d107      	bne.n	80040a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d001      	beq.n	80040a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80040a4:	2301      	movs	r3, #1
 80040a6:	e000      	b.n	80040aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80040a8:	2300      	movs	r3, #0
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3718      	adds	r7, #24
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	40023800 	.word	0x40023800

080040b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b084      	sub	sp, #16
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d101      	bne.n	80040cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e0cc      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80040cc:	4b68      	ldr	r3, [pc, #416]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0307 	and.w	r3, r3, #7
 80040d4:	683a      	ldr	r2, [r7, #0]
 80040d6:	429a      	cmp	r2, r3
 80040d8:	d90c      	bls.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040da:	4b65      	ldr	r3, [pc, #404]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040dc:	683a      	ldr	r2, [r7, #0]
 80040de:	b2d2      	uxtb	r2, r2
 80040e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040e2:	4b63      	ldr	r3, [pc, #396]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0307 	and.w	r3, r3, #7
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d001      	beq.n	80040f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	e0b8      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f003 0302 	and.w	r3, r3, #2
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d020      	beq.n	8004142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f003 0304 	and.w	r3, r3, #4
 8004108:	2b00      	cmp	r3, #0
 800410a:	d005      	beq.n	8004118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800410c:	4b59      	ldr	r3, [pc, #356]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	4a58      	ldr	r2, [pc, #352]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004112:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004116:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0308 	and.w	r3, r3, #8
 8004120:	2b00      	cmp	r3, #0
 8004122:	d005      	beq.n	8004130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004124:	4b53      	ldr	r3, [pc, #332]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004126:	689b      	ldr	r3, [r3, #8]
 8004128:	4a52      	ldr	r2, [pc, #328]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800412a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800412e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004130:	4b50      	ldr	r3, [pc, #320]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	689b      	ldr	r3, [r3, #8]
 800413c:	494d      	ldr	r1, [pc, #308]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800413e:	4313      	orrs	r3, r2
 8004140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f003 0301 	and.w	r3, r3, #1
 800414a:	2b00      	cmp	r3, #0
 800414c:	d044      	beq.n	80041d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d107      	bne.n	8004166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004156:	4b47      	ldr	r3, [pc, #284]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800415e:	2b00      	cmp	r3, #0
 8004160:	d119      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e07f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d003      	beq.n	8004176 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004172:	2b03      	cmp	r3, #3
 8004174:	d107      	bne.n	8004186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004176:	4b3f      	ldr	r3, [pc, #252]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d109      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e06f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004186:	4b3b      	ldr	r3, [pc, #236]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d101      	bne.n	8004196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004192:	2301      	movs	r3, #1
 8004194:	e067      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004196:	4b37      	ldr	r3, [pc, #220]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	f023 0203 	bic.w	r2, r3, #3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	4934      	ldr	r1, [pc, #208]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041a4:	4313      	orrs	r3, r2
 80041a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041a8:	f7fe fab0 	bl	800270c <HAL_GetTick>
 80041ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041ae:	e00a      	b.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041b0:	f7fe faac 	bl	800270c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80041be:	4293      	cmp	r3, r2
 80041c0:	d901      	bls.n	80041c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e04f      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 80041c8:	689b      	ldr	r3, [r3, #8]
 80041ca:	f003 020c 	and.w	r2, r3, #12
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	685b      	ldr	r3, [r3, #4]
 80041d2:	009b      	lsls	r3, r3, #2
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d1eb      	bne.n	80041b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041d8:	4b25      	ldr	r3, [pc, #148]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0307 	and.w	r3, r3, #7
 80041e0:	683a      	ldr	r2, [r7, #0]
 80041e2:	429a      	cmp	r2, r3
 80041e4:	d20c      	bcs.n	8004200 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041e6:	4b22      	ldr	r3, [pc, #136]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	b2d2      	uxtb	r2, r2
 80041ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041ee:	4b20      	ldr	r3, [pc, #128]	; (8004270 <HAL_RCC_ClockConfig+0x1b8>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	683a      	ldr	r2, [r7, #0]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d001      	beq.n	8004200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041fc:	2301      	movs	r3, #1
 80041fe:	e032      	b.n	8004266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d008      	beq.n	800421e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	4916      	ldr	r1, [pc, #88]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800421a:	4313      	orrs	r3, r2
 800421c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f003 0308 	and.w	r3, r3, #8
 8004226:	2b00      	cmp	r3, #0
 8004228:	d009      	beq.n	800423e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800422a:	4b12      	ldr	r3, [pc, #72]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	691b      	ldr	r3, [r3, #16]
 8004236:	00db      	lsls	r3, r3, #3
 8004238:	490e      	ldr	r1, [pc, #56]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800423e:	f000 f821 	bl	8004284 <HAL_RCC_GetSysClockFreq>
 8004242:	4602      	mov	r2, r0
 8004244:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <HAL_RCC_ClockConfig+0x1bc>)
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	091b      	lsrs	r3, r3, #4
 800424a:	f003 030f 	and.w	r3, r3, #15
 800424e:	490a      	ldr	r1, [pc, #40]	; (8004278 <HAL_RCC_ClockConfig+0x1c0>)
 8004250:	5ccb      	ldrb	r3, [r1, r3]
 8004252:	fa22 f303 	lsr.w	r3, r2, r3
 8004256:	4a09      	ldr	r2, [pc, #36]	; (800427c <HAL_RCC_ClockConfig+0x1c4>)
 8004258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800425a:	4b09      	ldr	r3, [pc, #36]	; (8004280 <HAL_RCC_ClockConfig+0x1c8>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	4618      	mov	r0, r3
 8004260:	f7fe fa10 	bl	8002684 <HAL_InitTick>

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3710      	adds	r7, #16
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	40023c00 	.word	0x40023c00
 8004274:	40023800 	.word	0x40023800
 8004278:	08005dc0 	.word	0x08005dc0
 800427c:	20000008 	.word	0x20000008
 8004280:	2000000c 	.word	0x2000000c

08004284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004288:	b094      	sub	sp, #80	; 0x50
 800428a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800428c:	2300      	movs	r3, #0
 800428e:	647b      	str	r3, [r7, #68]	; 0x44
 8004290:	2300      	movs	r3, #0
 8004292:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004294:	2300      	movs	r3, #0
 8004296:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004298:	2300      	movs	r3, #0
 800429a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800429c:	4b79      	ldr	r3, [pc, #484]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	f003 030c 	and.w	r3, r3, #12
 80042a4:	2b08      	cmp	r3, #8
 80042a6:	d00d      	beq.n	80042c4 <HAL_RCC_GetSysClockFreq+0x40>
 80042a8:	2b08      	cmp	r3, #8
 80042aa:	f200 80e1 	bhi.w	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <HAL_RCC_GetSysClockFreq+0x34>
 80042b2:	2b04      	cmp	r3, #4
 80042b4:	d003      	beq.n	80042be <HAL_RCC_GetSysClockFreq+0x3a>
 80042b6:	e0db      	b.n	8004470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80042b8:	4b73      	ldr	r3, [pc, #460]	; (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 80042ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80042bc:	e0db      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80042be:	4b73      	ldr	r3, [pc, #460]	; (800448c <HAL_RCC_GetSysClockFreq+0x208>)
 80042c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80042c2:	e0d8      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80042c4:	4b6f      	ldr	r3, [pc, #444]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80042cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80042ce:	4b6d      	ldr	r3, [pc, #436]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d063      	beq.n	80043a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042da:	4b6a      	ldr	r3, [pc, #424]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	099b      	lsrs	r3, r3, #6
 80042e0:	2200      	movs	r2, #0
 80042e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80042e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
 80042ee:	2300      	movs	r3, #0
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
 80042f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042f6:	4622      	mov	r2, r4
 80042f8:	462b      	mov	r3, r5
 80042fa:	f04f 0000 	mov.w	r0, #0
 80042fe:	f04f 0100 	mov.w	r1, #0
 8004302:	0159      	lsls	r1, r3, #5
 8004304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004308:	0150      	lsls	r0, r2, #5
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4621      	mov	r1, r4
 8004310:	1a51      	subs	r1, r2, r1
 8004312:	6139      	str	r1, [r7, #16]
 8004314:	4629      	mov	r1, r5
 8004316:	eb63 0301 	sbc.w	r3, r3, r1
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	f04f 0200 	mov.w	r2, #0
 8004320:	f04f 0300 	mov.w	r3, #0
 8004324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004328:	4659      	mov	r1, fp
 800432a:	018b      	lsls	r3, r1, #6
 800432c:	4651      	mov	r1, sl
 800432e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004332:	4651      	mov	r1, sl
 8004334:	018a      	lsls	r2, r1, #6
 8004336:	4651      	mov	r1, sl
 8004338:	ebb2 0801 	subs.w	r8, r2, r1
 800433c:	4659      	mov	r1, fp
 800433e:	eb63 0901 	sbc.w	r9, r3, r1
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	f04f 0300 	mov.w	r3, #0
 800434a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800434e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004356:	4690      	mov	r8, r2
 8004358:	4699      	mov	r9, r3
 800435a:	4623      	mov	r3, r4
 800435c:	eb18 0303 	adds.w	r3, r8, r3
 8004360:	60bb      	str	r3, [r7, #8]
 8004362:	462b      	mov	r3, r5
 8004364:	eb49 0303 	adc.w	r3, r9, r3
 8004368:	60fb      	str	r3, [r7, #12]
 800436a:	f04f 0200 	mov.w	r2, #0
 800436e:	f04f 0300 	mov.w	r3, #0
 8004372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004376:	4629      	mov	r1, r5
 8004378:	024b      	lsls	r3, r1, #9
 800437a:	4621      	mov	r1, r4
 800437c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004380:	4621      	mov	r1, r4
 8004382:	024a      	lsls	r2, r1, #9
 8004384:	4610      	mov	r0, r2
 8004386:	4619      	mov	r1, r3
 8004388:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800438a:	2200      	movs	r2, #0
 800438c:	62bb      	str	r3, [r7, #40]	; 0x28
 800438e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004394:	f7fc fb3e 	bl	8000a14 <__aeabi_uldivmod>
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4613      	mov	r3, r2
 800439e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a0:	e058      	b.n	8004454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043a2:	4b38      	ldr	r3, [pc, #224]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	099b      	lsrs	r3, r3, #6
 80043a8:	2200      	movs	r2, #0
 80043aa:	4618      	mov	r0, r3
 80043ac:	4611      	mov	r1, r2
 80043ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80043b2:	623b      	str	r3, [r7, #32]
 80043b4:	2300      	movs	r3, #0
 80043b6:	627b      	str	r3, [r7, #36]	; 0x24
 80043b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80043bc:	4642      	mov	r2, r8
 80043be:	464b      	mov	r3, r9
 80043c0:	f04f 0000 	mov.w	r0, #0
 80043c4:	f04f 0100 	mov.w	r1, #0
 80043c8:	0159      	lsls	r1, r3, #5
 80043ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80043ce:	0150      	lsls	r0, r2, #5
 80043d0:	4602      	mov	r2, r0
 80043d2:	460b      	mov	r3, r1
 80043d4:	4641      	mov	r1, r8
 80043d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80043da:	4649      	mov	r1, r9
 80043dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80043e0:	f04f 0200 	mov.w	r2, #0
 80043e4:	f04f 0300 	mov.w	r3, #0
 80043e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043f4:	ebb2 040a 	subs.w	r4, r2, sl
 80043f8:	eb63 050b 	sbc.w	r5, r3, fp
 80043fc:	f04f 0200 	mov.w	r2, #0
 8004400:	f04f 0300 	mov.w	r3, #0
 8004404:	00eb      	lsls	r3, r5, #3
 8004406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800440a:	00e2      	lsls	r2, r4, #3
 800440c:	4614      	mov	r4, r2
 800440e:	461d      	mov	r5, r3
 8004410:	4643      	mov	r3, r8
 8004412:	18e3      	adds	r3, r4, r3
 8004414:	603b      	str	r3, [r7, #0]
 8004416:	464b      	mov	r3, r9
 8004418:	eb45 0303 	adc.w	r3, r5, r3
 800441c:	607b      	str	r3, [r7, #4]
 800441e:	f04f 0200 	mov.w	r2, #0
 8004422:	f04f 0300 	mov.w	r3, #0
 8004426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800442a:	4629      	mov	r1, r5
 800442c:	028b      	lsls	r3, r1, #10
 800442e:	4621      	mov	r1, r4
 8004430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004434:	4621      	mov	r1, r4
 8004436:	028a      	lsls	r2, r1, #10
 8004438:	4610      	mov	r0, r2
 800443a:	4619      	mov	r1, r3
 800443c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800443e:	2200      	movs	r2, #0
 8004440:	61bb      	str	r3, [r7, #24]
 8004442:	61fa      	str	r2, [r7, #28]
 8004444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004448:	f7fc fae4 	bl	8000a14 <__aeabi_uldivmod>
 800444c:	4602      	mov	r2, r0
 800444e:	460b      	mov	r3, r1
 8004450:	4613      	mov	r3, r2
 8004452:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004454:	4b0b      	ldr	r3, [pc, #44]	; (8004484 <HAL_RCC_GetSysClockFreq+0x200>)
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	0c1b      	lsrs	r3, r3, #16
 800445a:	f003 0303 	and.w	r3, r3, #3
 800445e:	3301      	adds	r3, #1
 8004460:	005b      	lsls	r3, r3, #1
 8004462:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004464:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004468:	fbb2 f3f3 	udiv	r3, r2, r3
 800446c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800446e:	e002      	b.n	8004476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004470:	4b05      	ldr	r3, [pc, #20]	; (8004488 <HAL_RCC_GetSysClockFreq+0x204>)
 8004472:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004476:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004478:	4618      	mov	r0, r3
 800447a:	3750      	adds	r7, #80	; 0x50
 800447c:	46bd      	mov	sp, r7
 800447e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004482:	bf00      	nop
 8004484:	40023800 	.word	0x40023800
 8004488:	00f42400 	.word	0x00f42400
 800448c:	007a1200 	.word	0x007a1200

08004490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004490:	b480      	push	{r7}
 8004492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004494:	4b03      	ldr	r3, [pc, #12]	; (80044a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004496:	681b      	ldr	r3, [r3, #0]
}
 8004498:	4618      	mov	r0, r3
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000008 	.word	0x20000008

080044a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80044ac:	f7ff fff0 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044b0:	4602      	mov	r2, r0
 80044b2:	4b05      	ldr	r3, [pc, #20]	; (80044c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	0a9b      	lsrs	r3, r3, #10
 80044b8:	f003 0307 	and.w	r3, r3, #7
 80044bc:	4903      	ldr	r1, [pc, #12]	; (80044cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80044be:	5ccb      	ldrb	r3, [r1, r3]
 80044c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40023800 	.word	0x40023800
 80044cc:	08005dd0 	.word	0x08005dd0

080044d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80044d4:	f7ff ffdc 	bl	8004490 <HAL_RCC_GetHCLKFreq>
 80044d8:	4602      	mov	r2, r0
 80044da:	4b05      	ldr	r3, [pc, #20]	; (80044f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	0b5b      	lsrs	r3, r3, #13
 80044e0:	f003 0307 	and.w	r3, r3, #7
 80044e4:	4903      	ldr	r1, [pc, #12]	; (80044f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80044e6:	5ccb      	ldrb	r3, [r1, r3]
 80044e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	40023800 	.word	0x40023800
 80044f4:	08005dd0 	.word	0x08005dd0

080044f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e041      	b.n	800458e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004510:	b2db      	uxtb	r3, r3
 8004512:	2b00      	cmp	r3, #0
 8004514:	d106      	bne.n	8004524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	f7fd ff00 	bl	8002324 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2202      	movs	r2, #2
 8004528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	3304      	adds	r3, #4
 8004534:	4619      	mov	r1, r3
 8004536:	4610      	mov	r0, r2
 8004538:	f000 fd80 	bl	800503c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2201      	movs	r2, #1
 8004540:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	2201      	movs	r2, #1
 8004548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2201      	movs	r2, #1
 8004568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2201      	movs	r2, #1
 8004570:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2201      	movs	r2, #1
 8004578:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3708      	adds	r7, #8
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}
	...

08004598 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045a6:	b2db      	uxtb	r3, r3
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d001      	beq.n	80045b0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e03c      	b.n	800462a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2202      	movs	r2, #2
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a1e      	ldr	r2, [pc, #120]	; (8004638 <HAL_TIM_Base_Start+0xa0>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d018      	beq.n	80045f4 <HAL_TIM_Base_Start+0x5c>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045ca:	d013      	beq.n	80045f4 <HAL_TIM_Base_Start+0x5c>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	4a1a      	ldr	r2, [pc, #104]	; (800463c <HAL_TIM_Base_Start+0xa4>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d00e      	beq.n	80045f4 <HAL_TIM_Base_Start+0x5c>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a19      	ldr	r2, [pc, #100]	; (8004640 <HAL_TIM_Base_Start+0xa8>)
 80045dc:	4293      	cmp	r3, r2
 80045de:	d009      	beq.n	80045f4 <HAL_TIM_Base_Start+0x5c>
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a17      	ldr	r2, [pc, #92]	; (8004644 <HAL_TIM_Base_Start+0xac>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d004      	beq.n	80045f4 <HAL_TIM_Base_Start+0x5c>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a16      	ldr	r2, [pc, #88]	; (8004648 <HAL_TIM_Base_Start+0xb0>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2b06      	cmp	r3, #6
 8004604:	d010      	beq.n	8004628 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f042 0201 	orr.w	r2, r2, #1
 8004614:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004616:	e007      	b.n	8004628 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f042 0201 	orr.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	40010000 	.word	0x40010000
 800463c:	40000400 	.word	0x40000400
 8004640:	40000800 	.word	0x40000800
 8004644:	40000c00 	.word	0x40000c00
 8004648:	40014000 	.word	0x40014000

0800464c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e041      	b.n	80046e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fdec 	bl	8002250 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681a      	ldr	r2, [r3, #0]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3304      	adds	r3, #4
 8004688:	4619      	mov	r1, r3
 800468a:	4610      	mov	r0, r2
 800468c:	f000 fcd6 	bl	800503c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2201      	movs	r2, #1
 80046a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2201      	movs	r2, #1
 80046c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2201      	movs	r2, #1
 80046cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2201      	movs	r2, #1
 80046d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046e0:	2300      	movs	r3, #0
}
 80046e2:	4618      	mov	r0, r3
 80046e4:	3708      	adds	r7, #8
 80046e6:	46bd      	mov	sp, r7
 80046e8:	bd80      	pop	{r7, pc}
	...

080046ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d109      	bne.n	8004710 <HAL_TIM_PWM_Start+0x24>
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004702:	b2db      	uxtb	r3, r3
 8004704:	2b01      	cmp	r3, #1
 8004706:	bf14      	ite	ne
 8004708:	2301      	movne	r3, #1
 800470a:	2300      	moveq	r3, #0
 800470c:	b2db      	uxtb	r3, r3
 800470e:	e022      	b.n	8004756 <HAL_TIM_PWM_Start+0x6a>
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	2b04      	cmp	r3, #4
 8004714:	d109      	bne.n	800472a <HAL_TIM_PWM_Start+0x3e>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	bf14      	ite	ne
 8004722:	2301      	movne	r3, #1
 8004724:	2300      	moveq	r3, #0
 8004726:	b2db      	uxtb	r3, r3
 8004728:	e015      	b.n	8004756 <HAL_TIM_PWM_Start+0x6a>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	2b08      	cmp	r3, #8
 800472e:	d109      	bne.n	8004744 <HAL_TIM_PWM_Start+0x58>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004736:	b2db      	uxtb	r3, r3
 8004738:	2b01      	cmp	r3, #1
 800473a:	bf14      	ite	ne
 800473c:	2301      	movne	r3, #1
 800473e:	2300      	moveq	r3, #0
 8004740:	b2db      	uxtb	r3, r3
 8004742:	e008      	b.n	8004756 <HAL_TIM_PWM_Start+0x6a>
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	bf14      	ite	ne
 8004750:	2301      	movne	r3, #1
 8004752:	2300      	moveq	r3, #0
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800475a:	2301      	movs	r3, #1
 800475c:	e068      	b.n	8004830 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d104      	bne.n	800476e <HAL_TIM_PWM_Start+0x82>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2202      	movs	r2, #2
 8004768:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800476c:	e013      	b.n	8004796 <HAL_TIM_PWM_Start+0xaa>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d104      	bne.n	800477e <HAL_TIM_PWM_Start+0x92>
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800477c:	e00b      	b.n	8004796 <HAL_TIM_PWM_Start+0xaa>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b08      	cmp	r3, #8
 8004782:	d104      	bne.n	800478e <HAL_TIM_PWM_Start+0xa2>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2202      	movs	r2, #2
 8004788:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800478c:	e003      	b.n	8004796 <HAL_TIM_PWM_Start+0xaa>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2202      	movs	r2, #2
 8004792:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2201      	movs	r2, #1
 800479c:	6839      	ldr	r1, [r7, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f000 fef2 	bl	8005588 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a23      	ldr	r2, [pc, #140]	; (8004838 <HAL_TIM_PWM_Start+0x14c>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d107      	bne.n	80047be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80047bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a1d      	ldr	r2, [pc, #116]	; (8004838 <HAL_TIM_PWM_Start+0x14c>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d018      	beq.n	80047fa <HAL_TIM_PWM_Start+0x10e>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d0:	d013      	beq.n	80047fa <HAL_TIM_PWM_Start+0x10e>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a19      	ldr	r2, [pc, #100]	; (800483c <HAL_TIM_PWM_Start+0x150>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00e      	beq.n	80047fa <HAL_TIM_PWM_Start+0x10e>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a17      	ldr	r2, [pc, #92]	; (8004840 <HAL_TIM_PWM_Start+0x154>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d009      	beq.n	80047fa <HAL_TIM_PWM_Start+0x10e>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a16      	ldr	r2, [pc, #88]	; (8004844 <HAL_TIM_PWM_Start+0x158>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d004      	beq.n	80047fa <HAL_TIM_PWM_Start+0x10e>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a14      	ldr	r2, [pc, #80]	; (8004848 <HAL_TIM_PWM_Start+0x15c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d111      	bne.n	800481e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2b06      	cmp	r3, #6
 800480a:	d010      	beq.n	800482e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f042 0201 	orr.w	r2, r2, #1
 800481a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800481c:	e007      	b.n	800482e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f042 0201 	orr.w	r2, r2, #1
 800482c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800482e:	2300      	movs	r3, #0
}
 8004830:	4618      	mov	r0, r3
 8004832:	3710      	adds	r7, #16
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	40010000 	.word	0x40010000
 800483c:	40000400 	.word	0x40000400
 8004840:	40000800 	.word	0x40000800
 8004844:	40000c00 	.word	0x40000c00
 8004848:	40014000 	.word	0x40014000

0800484c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800484c:	b580      	push	{r7, lr}
 800484e:	b086      	sub	sp, #24
 8004850:	af00      	add	r7, sp, #0
 8004852:	6078      	str	r0, [r7, #4]
 8004854:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800485c:	2301      	movs	r3, #1
 800485e:	e097      	b.n	8004990 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004866:	b2db      	uxtb	r3, r3
 8004868:	2b00      	cmp	r3, #0
 800486a:	d106      	bne.n	800487a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7fd fd0d 	bl	8002294 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2202      	movs	r2, #2
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	6812      	ldr	r2, [r2, #0]
 800488c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004890:	f023 0307 	bic.w	r3, r3, #7
 8004894:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	3304      	adds	r3, #4
 800489e:	4619      	mov	r1, r3
 80048a0:	4610      	mov	r0, r2
 80048a2:	f000 fbcb 	bl	800503c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	689b      	ldr	r3, [r3, #8]
 80048ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	6a1b      	ldr	r3, [r3, #32]
 80048bc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	697a      	ldr	r2, [r7, #20]
 80048c4:	4313      	orrs	r3, r2
 80048c6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048ce:	f023 0303 	bic.w	r3, r3, #3
 80048d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689a      	ldr	r2, [r3, #8]
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	021b      	lsls	r3, r3, #8
 80048de:	4313      	orrs	r3, r2
 80048e0:	693a      	ldr	r2, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80048ec:	f023 030c 	bic.w	r3, r3, #12
 80048f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048fc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	69db      	ldr	r3, [r3, #28]
 8004906:	021b      	lsls	r3, r3, #8
 8004908:	4313      	orrs	r3, r2
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	011a      	lsls	r2, r3, #4
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	031b      	lsls	r3, r3, #12
 800491c:	4313      	orrs	r3, r2
 800491e:	693a      	ldr	r2, [r7, #16]
 8004920:	4313      	orrs	r3, r2
 8004922:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800492a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004932:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	011b      	lsls	r3, r3, #4
 800493e:	4313      	orrs	r3, r2
 8004940:	68fa      	ldr	r2, [r7, #12]
 8004942:	4313      	orrs	r3, r2
 8004944:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	697a      	ldr	r2, [r7, #20]
 800494c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	68fa      	ldr	r2, [r7, #12]
 800495c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2201      	movs	r2, #1
 8004962:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2201      	movs	r2, #1
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2201      	movs	r2, #1
 8004972:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2201      	movs	r2, #1
 800497a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b084      	sub	sp, #16
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
 80049a0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80049a8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80049b0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80049b8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80049c0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80049c2:	683b      	ldr	r3, [r7, #0]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d110      	bne.n	80049ea <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80049c8:	7bfb      	ldrb	r3, [r7, #15]
 80049ca:	2b01      	cmp	r3, #1
 80049cc:	d102      	bne.n	80049d4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80049ce:	7b7b      	ldrb	r3, [r7, #13]
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d001      	beq.n	80049d8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e069      	b.n	8004aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e8:	e031      	b.n	8004a4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	2b04      	cmp	r3, #4
 80049ee:	d110      	bne.n	8004a12 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80049f0:	7bbb      	ldrb	r3, [r7, #14]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	d102      	bne.n	80049fc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80049f6:	7b3b      	ldrb	r3, [r7, #12]
 80049f8:	2b01      	cmp	r3, #1
 80049fa:	d001      	beq.n	8004a00 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	e055      	b.n	8004aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2202      	movs	r2, #2
 8004a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004a10:	e01d      	b.n	8004a4e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a12:	7bfb      	ldrb	r3, [r7, #15]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d108      	bne.n	8004a2a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a18:	7bbb      	ldrb	r3, [r7, #14]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d105      	bne.n	8004a2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004a1e:	7b7b      	ldrb	r3, [r7, #13]
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d102      	bne.n	8004a2a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004a24:	7b3b      	ldrb	r3, [r7, #12]
 8004a26:	2b01      	cmp	r3, #1
 8004a28:	d001      	beq.n	8004a2e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004a2a:	2301      	movs	r3, #1
 8004a2c:	e03e      	b.n	8004aac <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2202      	movs	r2, #2
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	2202      	movs	r2, #2
 8004a3a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2202      	movs	r2, #2
 8004a42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2202      	movs	r2, #2
 8004a4a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <HAL_TIM_Encoder_Start+0xc4>
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	2b04      	cmp	r3, #4
 8004a58:	d008      	beq.n	8004a6c <HAL_TIM_Encoder_Start+0xd4>
 8004a5a:	e00f      	b.n	8004a7c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2201      	movs	r2, #1
 8004a62:	2100      	movs	r1, #0
 8004a64:	4618      	mov	r0, r3
 8004a66:	f000 fd8f 	bl	8005588 <TIM_CCxChannelCmd>
      break;
 8004a6a:	e016      	b.n	8004a9a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2201      	movs	r2, #1
 8004a72:	2104      	movs	r1, #4
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fd87 	bl	8005588 <TIM_CCxChannelCmd>
      break;
 8004a7a:	e00e      	b.n	8004a9a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	2201      	movs	r2, #1
 8004a82:	2100      	movs	r1, #0
 8004a84:	4618      	mov	r0, r3
 8004a86:	f000 fd7f 	bl	8005588 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	2104      	movs	r1, #4
 8004a92:	4618      	mov	r0, r3
 8004a94:	f000 fd78 	bl	8005588 <TIM_CCxChannelCmd>
      break;
 8004a98:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681a      	ldr	r2, [r3, #0]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f042 0201 	orr.w	r2, r2, #1
 8004aa8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}

08004ab4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b082      	sub	sp, #8
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	691b      	ldr	r3, [r3, #16]
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d122      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	68db      	ldr	r3, [r3, #12]
 8004ad0:	f003 0302 	and.w	r3, r3, #2
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d11b      	bne.n	8004b10 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f06f 0202 	mvn.w	r2, #2
 8004ae0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	699b      	ldr	r3, [r3, #24]
 8004aee:	f003 0303 	and.w	r3, r3, #3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d003      	beq.n	8004afe <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 fa81 	bl	8004ffe <HAL_TIM_IC_CaptureCallback>
 8004afc:	e005      	b.n	8004b0a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004afe:	6878      	ldr	r0, [r7, #4]
 8004b00:	f000 fa73 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f000 fa84 	bl	8005012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b04      	cmp	r3, #4
 8004b1c:	d122      	bne.n	8004b64 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	68db      	ldr	r3, [r3, #12]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b04      	cmp	r3, #4
 8004b2a:	d11b      	bne.n	8004b64 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f06f 0204 	mvn.w	r2, #4
 8004b34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2202      	movs	r2, #2
 8004b3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	699b      	ldr	r3, [r3, #24]
 8004b42:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d003      	beq.n	8004b52 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b4a:	6878      	ldr	r0, [r7, #4]
 8004b4c:	f000 fa57 	bl	8004ffe <HAL_TIM_IC_CaptureCallback>
 8004b50:	e005      	b.n	8004b5e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 fa49 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b58:	6878      	ldr	r0, [r7, #4]
 8004b5a:	f000 fa5a 	bl	8005012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0308 	and.w	r3, r3, #8
 8004b6e:	2b08      	cmp	r3, #8
 8004b70:	d122      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	68db      	ldr	r3, [r3, #12]
 8004b78:	f003 0308 	and.w	r3, r3, #8
 8004b7c:	2b08      	cmp	r3, #8
 8004b7e:	d11b      	bne.n	8004bb8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f06f 0208 	mvn.w	r2, #8
 8004b88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2204      	movs	r2, #4
 8004b8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	69db      	ldr	r3, [r3, #28]
 8004b96:	f003 0303 	and.w	r3, r3, #3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 fa2d 	bl	8004ffe <HAL_TIM_IC_CaptureCallback>
 8004ba4:	e005      	b.n	8004bb2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f000 fa1f 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fa30 	bl	8005012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	691b      	ldr	r3, [r3, #16]
 8004bbe:	f003 0310 	and.w	r3, r3, #16
 8004bc2:	2b10      	cmp	r3, #16
 8004bc4:	d122      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f003 0310 	and.w	r3, r3, #16
 8004bd0:	2b10      	cmp	r3, #16
 8004bd2:	d11b      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	f06f 0210 	mvn.w	r2, #16
 8004bdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2208      	movs	r2, #8
 8004be2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	69db      	ldr	r3, [r3, #28]
 8004bea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f000 fa03 	bl	8004ffe <HAL_TIM_IC_CaptureCallback>
 8004bf8:	e005      	b.n	8004c06 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f9f5 	bl	8004fea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f000 fa06 	bl	8005012 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0301 	and.w	r3, r3, #1
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d10e      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0301 	and.w	r3, r3, #1
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0201 	mvn.w	r2, #1
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f9cf 	bl	8004fd6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	691b      	ldr	r3, [r3, #16]
 8004c3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c42:	2b80      	cmp	r3, #128	; 0x80
 8004c44:	d10e      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	68db      	ldr	r3, [r3, #12]
 8004c4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c50:	2b80      	cmp	r3, #128	; 0x80
 8004c52:	d107      	bne.n	8004c64 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fd82 	bl	8005768 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c6e:	2b40      	cmp	r3, #64	; 0x40
 8004c70:	d10e      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	68db      	ldr	r3, [r3, #12]
 8004c78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7c:	2b40      	cmp	r3, #64	; 0x40
 8004c7e:	d107      	bne.n	8004c90 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f000 f9cb 	bl	8005026 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0320 	and.w	r3, r3, #32
 8004c9a:	2b20      	cmp	r3, #32
 8004c9c:	d10e      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68db      	ldr	r3, [r3, #12]
 8004ca4:	f003 0320 	and.w	r3, r3, #32
 8004ca8:	2b20      	cmp	r3, #32
 8004caa:	d107      	bne.n	8004cbc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f06f 0220 	mvn.w	r2, #32
 8004cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f000 fd4c 	bl	8005754 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004cbc:	bf00      	nop
 8004cbe:	3708      	adds	r7, #8
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b086      	sub	sp, #24
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d101      	bne.n	8004ce2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004cde:	2302      	movs	r3, #2
 8004ce0:	e0ae      	b.n	8004e40 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2b0c      	cmp	r3, #12
 8004cee:	f200 809f 	bhi.w	8004e30 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004cf2:	a201      	add	r2, pc, #4	; (adr r2, 8004cf8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cf8:	08004d2d 	.word	0x08004d2d
 8004cfc:	08004e31 	.word	0x08004e31
 8004d00:	08004e31 	.word	0x08004e31
 8004d04:	08004e31 	.word	0x08004e31
 8004d08:	08004d6d 	.word	0x08004d6d
 8004d0c:	08004e31 	.word	0x08004e31
 8004d10:	08004e31 	.word	0x08004e31
 8004d14:	08004e31 	.word	0x08004e31
 8004d18:	08004daf 	.word	0x08004daf
 8004d1c:	08004e31 	.word	0x08004e31
 8004d20:	08004e31 	.word	0x08004e31
 8004d24:	08004e31 	.word	0x08004e31
 8004d28:	08004def 	.word	0x08004def
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	68b9      	ldr	r1, [r7, #8]
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 fa02 	bl	800513c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	699a      	ldr	r2, [r3, #24]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0208 	orr.w	r2, r2, #8
 8004d46:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	699a      	ldr	r2, [r3, #24]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f022 0204 	bic.w	r2, r2, #4
 8004d56:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6999      	ldr	r1, [r3, #24]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	430a      	orrs	r2, r1
 8004d68:	619a      	str	r2, [r3, #24]
      break;
 8004d6a:	e064      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 fa48 	bl	8005208 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	699a      	ldr	r2, [r3, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699a      	ldr	r2, [r3, #24]
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	6999      	ldr	r1, [r3, #24]
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	691b      	ldr	r3, [r3, #16]
 8004da2:	021a      	lsls	r2, r3, #8
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	430a      	orrs	r2, r1
 8004daa:	619a      	str	r2, [r3, #24]
      break;
 8004dac:	e043      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68b9      	ldr	r1, [r7, #8]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f000 fa93 	bl	80052e0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	69da      	ldr	r2, [r3, #28]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f042 0208 	orr.w	r2, r2, #8
 8004dc8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	69da      	ldr	r2, [r3, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f022 0204 	bic.w	r2, r2, #4
 8004dd8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	69d9      	ldr	r1, [r3, #28]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	691a      	ldr	r2, [r3, #16]
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	430a      	orrs	r2, r1
 8004dea:	61da      	str	r2, [r3, #28]
      break;
 8004dec:	e023      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68b9      	ldr	r1, [r7, #8]
 8004df4:	4618      	mov	r0, r3
 8004df6:	f000 fadd 	bl	80053b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	69da      	ldr	r2, [r3, #28]
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	69da      	ldr	r2, [r3, #28]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69d9      	ldr	r1, [r3, #28]
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	021a      	lsls	r2, r3, #8
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	61da      	str	r2, [r3, #28]
      break;
 8004e2e:	e002      	b.n	8004e36 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	75fb      	strb	r3, [r7, #23]
      break;
 8004e34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004e3e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e40:	4618      	mov	r0, r3
 8004e42:	3718      	adds	r7, #24
 8004e44:	46bd      	mov	sp, r7
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	d101      	bne.n	8004e64 <HAL_TIM_ConfigClockSource+0x1c>
 8004e60:	2302      	movs	r3, #2
 8004e62:	e0b4      	b.n	8004fce <HAL_TIM_ConfigClockSource+0x186>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	689b      	ldr	r3, [r3, #8]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e8a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	68ba      	ldr	r2, [r7, #8]
 8004e92:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e94:	683b      	ldr	r3, [r7, #0]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e9c:	d03e      	beq.n	8004f1c <HAL_TIM_ConfigClockSource+0xd4>
 8004e9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ea2:	f200 8087 	bhi.w	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ea6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eaa:	f000 8086 	beq.w	8004fba <HAL_TIM_ConfigClockSource+0x172>
 8004eae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004eb2:	d87f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004eb4:	2b70      	cmp	r3, #112	; 0x70
 8004eb6:	d01a      	beq.n	8004eee <HAL_TIM_ConfigClockSource+0xa6>
 8004eb8:	2b70      	cmp	r3, #112	; 0x70
 8004eba:	d87b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ebc:	2b60      	cmp	r3, #96	; 0x60
 8004ebe:	d050      	beq.n	8004f62 <HAL_TIM_ConfigClockSource+0x11a>
 8004ec0:	2b60      	cmp	r3, #96	; 0x60
 8004ec2:	d877      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ec4:	2b50      	cmp	r3, #80	; 0x50
 8004ec6:	d03c      	beq.n	8004f42 <HAL_TIM_ConfigClockSource+0xfa>
 8004ec8:	2b50      	cmp	r3, #80	; 0x50
 8004eca:	d873      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ecc:	2b40      	cmp	r3, #64	; 0x40
 8004ece:	d058      	beq.n	8004f82 <HAL_TIM_ConfigClockSource+0x13a>
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d86f      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ed4:	2b30      	cmp	r3, #48	; 0x30
 8004ed6:	d064      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ed8:	2b30      	cmp	r3, #48	; 0x30
 8004eda:	d86b      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004edc:	2b20      	cmp	r3, #32
 8004ede:	d060      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee0:	2b20      	cmp	r3, #32
 8004ee2:	d867      	bhi.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d05c      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004ee8:	2b10      	cmp	r3, #16
 8004eea:	d05a      	beq.n	8004fa2 <HAL_TIM_ConfigClockSource+0x15a>
 8004eec:	e062      	b.n	8004fb4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	6899      	ldr	r1, [r3, #8]
 8004ef6:	683b      	ldr	r3, [r7, #0]
 8004ef8:	685a      	ldr	r2, [r3, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	68db      	ldr	r3, [r3, #12]
 8004efe:	f000 fb23 	bl	8005548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004f10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	68ba      	ldr	r2, [r7, #8]
 8004f18:	609a      	str	r2, [r3, #8]
      break;
 8004f1a:	e04f      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	6899      	ldr	r1, [r3, #8]
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	685a      	ldr	r2, [r3, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f000 fb0c 	bl	8005548 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004f3e:	609a      	str	r2, [r3, #8]
      break;
 8004f40:	e03c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6818      	ldr	r0, [r3, #0]
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	6859      	ldr	r1, [r3, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	68db      	ldr	r3, [r3, #12]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	f000 fa80 	bl	8005454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2150      	movs	r1, #80	; 0x50
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f000 fad9 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004f60:	e02c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6818      	ldr	r0, [r3, #0]
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	6859      	ldr	r1, [r3, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	f000 fa9f 	bl	80054b2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	2160      	movs	r1, #96	; 0x60
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f000 fac9 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004f80:	e01c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6818      	ldr	r0, [r3, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	461a      	mov	r2, r3
 8004f90:	f000 fa60 	bl	8005454 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	2140      	movs	r1, #64	; 0x40
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f000 fab9 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004fa0:	e00c      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	4619      	mov	r1, r3
 8004fac:	4610      	mov	r0, r2
 8004fae:	f000 fab0 	bl	8005512 <TIM_ITRx_SetConfig>
      break;
 8004fb2:	e003      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004fb4:	2301      	movs	r3, #1
 8004fb6:	73fb      	strb	r3, [r7, #15]
      break;
 8004fb8:	e000      	b.n	8004fbc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004fba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3710      	adds	r7, #16
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fd6:	b480      	push	{r7}
 8004fd8:	b083      	sub	sp, #12
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004fde:	bf00      	nop
 8004fe0:	370c      	adds	r7, #12
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr

08004fea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004fea:	b480      	push	{r7}
 8004fec:	b083      	sub	sp, #12
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ff2:	bf00      	nop
 8004ff4:	370c      	adds	r7, #12
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr

08004ffe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004ffe:	b480      	push	{r7}
 8005000:	b083      	sub	sp, #12
 8005002:	af00      	add	r7, sp, #0
 8005004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005012:	b480      	push	{r7}
 8005014:	b083      	sub	sp, #12
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800501a:	bf00      	nop
 800501c:	370c      	adds	r7, #12
 800501e:	46bd      	mov	sp, r7
 8005020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005024:	4770      	bx	lr

08005026 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005026:	b480      	push	{r7}
 8005028:	b083      	sub	sp, #12
 800502a:	af00      	add	r7, sp, #0
 800502c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800502e:	bf00      	nop
 8005030:	370c      	adds	r7, #12
 8005032:	46bd      	mov	sp, r7
 8005034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005038:	4770      	bx	lr
	...

0800503c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	4a34      	ldr	r2, [pc, #208]	; (8005120 <TIM_Base_SetConfig+0xe4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00f      	beq.n	8005074 <TIM_Base_SetConfig+0x38>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800505a:	d00b      	beq.n	8005074 <TIM_Base_SetConfig+0x38>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	4a31      	ldr	r2, [pc, #196]	; (8005124 <TIM_Base_SetConfig+0xe8>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d007      	beq.n	8005074 <TIM_Base_SetConfig+0x38>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a30      	ldr	r2, [pc, #192]	; (8005128 <TIM_Base_SetConfig+0xec>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_Base_SetConfig+0x38>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a2f      	ldr	r2, [pc, #188]	; (800512c <TIM_Base_SetConfig+0xf0>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d108      	bne.n	8005086 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800507a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a25      	ldr	r2, [pc, #148]	; (8005120 <TIM_Base_SetConfig+0xe4>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d01b      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005094:	d017      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <TIM_Base_SetConfig+0xe8>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d013      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	4a21      	ldr	r2, [pc, #132]	; (8005128 <TIM_Base_SetConfig+0xec>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d00f      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	4a20      	ldr	r2, [pc, #128]	; (800512c <TIM_Base_SetConfig+0xf0>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	d00b      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	4a1f      	ldr	r2, [pc, #124]	; (8005130 <TIM_Base_SetConfig+0xf4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d007      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	4a1e      	ldr	r2, [pc, #120]	; (8005134 <TIM_Base_SetConfig+0xf8>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d003      	beq.n	80050c6 <TIM_Base_SetConfig+0x8a>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	4a1d      	ldr	r2, [pc, #116]	; (8005138 <TIM_Base_SetConfig+0xfc>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d108      	bne.n	80050d8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	68fa      	ldr	r2, [r7, #12]
 80050d4:	4313      	orrs	r3, r2
 80050d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	695b      	ldr	r3, [r3, #20]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68fa      	ldr	r2, [r7, #12]
 80050ea:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689a      	ldr	r2, [r3, #8]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681a      	ldr	r2, [r3, #0]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	4a08      	ldr	r2, [pc, #32]	; (8005120 <TIM_Base_SetConfig+0xe4>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d103      	bne.n	800510c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	691a      	ldr	r2, [r3, #16]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	2201      	movs	r2, #1
 8005110:	615a      	str	r2, [r3, #20]
}
 8005112:	bf00      	nop
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40014000 	.word	0x40014000
 8005134:	40014400 	.word	0x40014400
 8005138:	40014800 	.word	0x40014800

0800513c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800513c:	b480      	push	{r7}
 800513e:	b087      	sub	sp, #28
 8005140:	af00      	add	r7, sp, #0
 8005142:	6078      	str	r0, [r7, #4]
 8005144:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6a1b      	ldr	r3, [r3, #32]
 800514a:	f023 0201 	bic.w	r2, r3, #1
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6a1b      	ldr	r3, [r3, #32]
 8005156:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	699b      	ldr	r3, [r3, #24]
 8005162:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800516a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f023 0303 	bic.w	r3, r3, #3
 8005172:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	68fa      	ldr	r2, [r7, #12]
 800517a:	4313      	orrs	r3, r2
 800517c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f023 0302 	bic.w	r3, r3, #2
 8005184:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	697a      	ldr	r2, [r7, #20]
 800518c:	4313      	orrs	r3, r2
 800518e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <TIM_OC1_SetConfig+0xc8>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d10c      	bne.n	80051b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	f023 0308 	bic.w	r3, r3, #8
 800519e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	697a      	ldr	r2, [r7, #20]
 80051a6:	4313      	orrs	r3, r2
 80051a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f023 0304 	bic.w	r3, r3, #4
 80051b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	4a13      	ldr	r2, [pc, #76]	; (8005204 <TIM_OC1_SetConfig+0xc8>)
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d111      	bne.n	80051de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80051ba:	693b      	ldr	r3, [r7, #16]
 80051bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80051c2:	693b      	ldr	r3, [r7, #16]
 80051c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80051c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	693a      	ldr	r2, [r7, #16]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	699b      	ldr	r3, [r3, #24]
 80051d8:	693a      	ldr	r2, [r7, #16]
 80051da:	4313      	orrs	r3, r2
 80051dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	693a      	ldr	r2, [r7, #16]
 80051e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68fa      	ldr	r2, [r7, #12]
 80051e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	697a      	ldr	r2, [r7, #20]
 80051f6:	621a      	str	r2, [r3, #32]
}
 80051f8:	bf00      	nop
 80051fa:	371c      	adds	r7, #28
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	40010000 	.word	0x40010000

08005208 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005208:	b480      	push	{r7}
 800520a:	b087      	sub	sp, #28
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
 8005210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a1b      	ldr	r3, [r3, #32]
 8005216:	f023 0210 	bic.w	r2, r3, #16
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6a1b      	ldr	r3, [r3, #32]
 8005222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800523e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005240:	683b      	ldr	r3, [r7, #0]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	021b      	lsls	r3, r3, #8
 8005246:	68fa      	ldr	r2, [r7, #12]
 8005248:	4313      	orrs	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800524c:	697b      	ldr	r3, [r7, #20]
 800524e:	f023 0320 	bic.w	r3, r3, #32
 8005252:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	011b      	lsls	r3, r3, #4
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	4313      	orrs	r3, r2
 800525e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1e      	ldr	r2, [pc, #120]	; (80052dc <TIM_OC2_SetConfig+0xd4>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d10d      	bne.n	8005284 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800526e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	011b      	lsls	r3, r3, #4
 8005276:	697a      	ldr	r2, [r7, #20]
 8005278:	4313      	orrs	r3, r2
 800527a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	4a15      	ldr	r2, [pc, #84]	; (80052dc <TIM_OC2_SetConfig+0xd4>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d113      	bne.n	80052b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005292:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800529a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	695b      	ldr	r3, [r3, #20]
 80052a0:	009b      	lsls	r3, r3, #2
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	4313      	orrs	r3, r2
 80052a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80052a8:	683b      	ldr	r3, [r7, #0]
 80052aa:	699b      	ldr	r3, [r3, #24]
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	4313      	orrs	r3, r2
 80052b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	68fa      	ldr	r2, [r7, #12]
 80052be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	697a      	ldr	r2, [r7, #20]
 80052cc:	621a      	str	r2, [r3, #32]
}
 80052ce:	bf00      	nop
 80052d0:	371c      	adds	r7, #28
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr
 80052da:	bf00      	nop
 80052dc:	40010000 	.word	0x40010000

080052e0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800530e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f023 0303 	bic.w	r3, r3, #3
 8005316:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68fa      	ldr	r2, [r7, #12]
 800531e:	4313      	orrs	r3, r2
 8005320:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005322:	697b      	ldr	r3, [r7, #20]
 8005324:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005328:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	021b      	lsls	r3, r3, #8
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1d      	ldr	r2, [pc, #116]	; (80053b0 <TIM_OC3_SetConfig+0xd0>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d10d      	bne.n	800535a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005344:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	021b      	lsls	r3, r3, #8
 800534c:	697a      	ldr	r2, [r7, #20]
 800534e:	4313      	orrs	r3, r2
 8005350:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005358:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <TIM_OC3_SetConfig+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d113      	bne.n	800538a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005368:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	695b      	ldr	r3, [r3, #20]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	699b      	ldr	r3, [r3, #24]
 8005382:	011b      	lsls	r3, r3, #4
 8005384:	693a      	ldr	r2, [r7, #16]
 8005386:	4313      	orrs	r3, r2
 8005388:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	685a      	ldr	r2, [r3, #4]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	621a      	str	r2, [r3, #32]
}
 80053a4:	bf00      	nop
 80053a6:	371c      	adds	r7, #28
 80053a8:	46bd      	mov	sp, r7
 80053aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ae:	4770      	bx	lr
 80053b0:	40010000 	.word	0x40010000

080053b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	69db      	ldr	r3, [r3, #28]
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	021b      	lsls	r3, r3, #8
 80053f2:	68fa      	ldr	r2, [r7, #12]
 80053f4:	4313      	orrs	r3, r2
 80053f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80053fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	031b      	lsls	r3, r3, #12
 8005406:	693a      	ldr	r2, [r7, #16]
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a10      	ldr	r2, [pc, #64]	; (8005450 <TIM_OC4_SetConfig+0x9c>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d109      	bne.n	8005428 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800541a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800541c:	683b      	ldr	r3, [r7, #0]
 800541e:	695b      	ldr	r3, [r3, #20]
 8005420:	019b      	lsls	r3, r3, #6
 8005422:	697a      	ldr	r2, [r7, #20]
 8005424:	4313      	orrs	r3, r2
 8005426:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	621a      	str	r2, [r3, #32]
}
 8005442:	bf00      	nop
 8005444:	371c      	adds	r7, #28
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	40010000 	.word	0x40010000

08005454 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005454:	b480      	push	{r7}
 8005456:	b087      	sub	sp, #28
 8005458:	af00      	add	r7, sp, #0
 800545a:	60f8      	str	r0, [r7, #12]
 800545c:	60b9      	str	r1, [r7, #8]
 800545e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	6a1b      	ldr	r3, [r3, #32]
 800546a:	f023 0201 	bic.w	r2, r3, #1
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800547e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	011b      	lsls	r3, r3, #4
 8005484:	693a      	ldr	r2, [r7, #16]
 8005486:	4313      	orrs	r3, r2
 8005488:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800548a:	697b      	ldr	r3, [r7, #20]
 800548c:	f023 030a 	bic.w	r3, r3, #10
 8005490:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005492:	697a      	ldr	r2, [r7, #20]
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	4313      	orrs	r3, r2
 8005498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	693a      	ldr	r2, [r7, #16]
 800549e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	621a      	str	r2, [r3, #32]
}
 80054a6:	bf00      	nop
 80054a8:	371c      	adds	r7, #28
 80054aa:	46bd      	mov	sp, r7
 80054ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b0:	4770      	bx	lr

080054b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054b2:	b480      	push	{r7}
 80054b4:	b087      	sub	sp, #28
 80054b6:	af00      	add	r7, sp, #0
 80054b8:	60f8      	str	r0, [r7, #12]
 80054ba:	60b9      	str	r1, [r7, #8]
 80054bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0210 	bic.w	r2, r3, #16
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6a1b      	ldr	r3, [r3, #32]
 80054d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	031b      	lsls	r3, r3, #12
 80054e2:	697a      	ldr	r2, [r7, #20]
 80054e4:	4313      	orrs	r3, r2
 80054e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	011b      	lsls	r3, r3, #4
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4313      	orrs	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	621a      	str	r2, [r3, #32]
}
 8005506:	bf00      	nop
 8005508:	371c      	adds	r7, #28
 800550a:	46bd      	mov	sp, r7
 800550c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005510:	4770      	bx	lr

08005512 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005512:	b480      	push	{r7}
 8005514:	b085      	sub	sp, #20
 8005516:	af00      	add	r7, sp, #0
 8005518:	6078      	str	r0, [r7, #4]
 800551a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005528:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800552a:	683a      	ldr	r2, [r7, #0]
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	4313      	orrs	r3, r2
 8005530:	f043 0307 	orr.w	r3, r3, #7
 8005534:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68fa      	ldr	r2, [r7, #12]
 800553a:	609a      	str	r2, [r3, #8]
}
 800553c:	bf00      	nop
 800553e:	3714      	adds	r7, #20
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	60f8      	str	r0, [r7, #12]
 8005550:	60b9      	str	r1, [r7, #8]
 8005552:	607a      	str	r2, [r7, #4]
 8005554:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005562:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	021a      	lsls	r2, r3, #8
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	431a      	orrs	r2, r3
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4313      	orrs	r3, r2
 8005570:	697a      	ldr	r2, [r7, #20]
 8005572:	4313      	orrs	r3, r2
 8005574:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	609a      	str	r2, [r3, #8]
}
 800557c:	bf00      	nop
 800557e:	371c      	adds	r7, #28
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005588:	b480      	push	{r7}
 800558a:	b087      	sub	sp, #28
 800558c:	af00      	add	r7, sp, #0
 800558e:	60f8      	str	r0, [r7, #12]
 8005590:	60b9      	str	r1, [r7, #8]
 8005592:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005594:	68bb      	ldr	r3, [r7, #8]
 8005596:	f003 031f 	and.w	r3, r3, #31
 800559a:	2201      	movs	r2, #1
 800559c:	fa02 f303 	lsl.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1a      	ldr	r2, [r3, #32]
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	43db      	mvns	r3, r3
 80055aa:	401a      	ands	r2, r3
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6a1a      	ldr	r2, [r3, #32]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f003 031f 	and.w	r3, r3, #31
 80055ba:	6879      	ldr	r1, [r7, #4]
 80055bc:	fa01 f303 	lsl.w	r3, r1, r3
 80055c0:	431a      	orrs	r2, r3
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	621a      	str	r2, [r3, #32]
}
 80055c6:	bf00      	nop
 80055c8:	371c      	adds	r7, #28
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr
	...

080055d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d4:	b480      	push	{r7}
 80055d6:	b085      	sub	sp, #20
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
 80055dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e4:	2b01      	cmp	r3, #1
 80055e6:	d101      	bne.n	80055ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055e8:	2302      	movs	r3, #2
 80055ea:	e050      	b.n	800568e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2202      	movs	r2, #2
 80055f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005612:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4313      	orrs	r3, r2
 800561c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	68fa      	ldr	r2, [r7, #12]
 8005624:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	4a1c      	ldr	r2, [pc, #112]	; (800569c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800562c:	4293      	cmp	r3, r2
 800562e:	d018      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005638:	d013      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a18      	ldr	r2, [pc, #96]	; (80056a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00e      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	4a16      	ldr	r2, [pc, #88]	; (80056a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d009      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4a15      	ldr	r2, [pc, #84]	; (80056a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d004      	beq.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	4a13      	ldr	r2, [pc, #76]	; (80056ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800565e:	4293      	cmp	r3, r2
 8005660:	d10c      	bne.n	800567c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005668:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	4313      	orrs	r3, r2
 8005672:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr
 800569a:	bf00      	nop
 800569c:	40010000 	.word	0x40010000
 80056a0:	40000400 	.word	0x40000400
 80056a4:	40000800 	.word	0x40000800
 80056a8:	40000c00 	.word	0x40000c00
 80056ac:	40014000 	.word	0x40014000

080056b0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80056b0:	b480      	push	{r7}
 80056b2:	b085      	sub	sp, #20
 80056b4:	af00      	add	r7, sp, #0
 80056b6:	6078      	str	r0, [r7, #4]
 80056b8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d101      	bne.n	80056cc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80056c8:	2302      	movs	r3, #2
 80056ca:	e03d      	b.n	8005748 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80056da:	683b      	ldr	r3, [r7, #0]
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	4313      	orrs	r3, r2
 80056e0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	689b      	ldr	r3, [r3, #8]
 80056ec:	4313      	orrs	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4313      	orrs	r3, r2
 800570a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	4313      	orrs	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	695b      	ldr	r3, [r3, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	69db      	ldr	r3, [r3, #28]
 8005732:	4313      	orrs	r3, r2
 8005734:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	68fa      	ldr	r2, [r7, #12]
 800573c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800575c:	bf00      	nop
 800575e:	370c      	adds	r7, #12
 8005760:	46bd      	mov	sp, r7
 8005762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005766:	4770      	bx	lr

08005768 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005768:	b480      	push	{r7}
 800576a:	b083      	sub	sp, #12
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005770:	bf00      	nop
 8005772:	370c      	adds	r7, #12
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr

0800577c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800577c:	b580      	push	{r7, lr}
 800577e:	b082      	sub	sp, #8
 8005780:	af00      	add	r7, sp, #0
 8005782:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d101      	bne.n	800578e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e03f      	b.n	800580e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005794:	b2db      	uxtb	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d106      	bne.n	80057a8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	2200      	movs	r2, #0
 800579e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f7fc fe20 	bl	80023e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2224      	movs	r2, #36	; 0x24
 80057ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68da      	ldr	r2, [r3, #12]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057be:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f829 	bl	8005818 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	691a      	ldr	r2, [r3, #16]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057d4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	695a      	ldr	r2, [r3, #20]
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80057e4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68da      	ldr	r2, [r3, #12]
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057f4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2220      	movs	r2, #32
 8005800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2220      	movs	r2, #32
 8005808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800580c:	2300      	movs	r3, #0
}
 800580e:	4618      	mov	r0, r3
 8005810:	3708      	adds	r7, #8
 8005812:	46bd      	mov	sp, r7
 8005814:	bd80      	pop	{r7, pc}
	...

08005818 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800581c:	b0c0      	sub	sp, #256	; 0x100
 800581e:	af00      	add	r7, sp, #0
 8005820:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691b      	ldr	r3, [r3, #16]
 800582c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	68d9      	ldr	r1, [r3, #12]
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	681a      	ldr	r2, [r3, #0]
 800583c:	ea40 0301 	orr.w	r3, r0, r1
 8005840:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005842:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	431a      	orrs	r2, r3
 8005850:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	431a      	orrs	r2, r3
 8005858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800585c:	69db      	ldr	r3, [r3, #28]
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005870:	f021 010c 	bic.w	r1, r1, #12
 8005874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800587e:	430b      	orrs	r3, r1
 8005880:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800588e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005892:	6999      	ldr	r1, [r3, #24]
 8005894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	ea40 0301 	orr.w	r3, r0, r1
 800589e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80058a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	4b8f      	ldr	r3, [pc, #572]	; (8005ae4 <UART_SetConfig+0x2cc>)
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d005      	beq.n	80058b8 <UART_SetConfig+0xa0>
 80058ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	4b8d      	ldr	r3, [pc, #564]	; (8005ae8 <UART_SetConfig+0x2d0>)
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d104      	bne.n	80058c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80058b8:	f7fe fe0a 	bl	80044d0 <HAL_RCC_GetPCLK2Freq>
 80058bc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80058c0:	e003      	b.n	80058ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80058c2:	f7fe fdf1 	bl	80044a8 <HAL_RCC_GetPCLK1Freq>
 80058c6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80058ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058ce:	69db      	ldr	r3, [r3, #28]
 80058d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80058d4:	f040 810c 	bne.w	8005af0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80058d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058dc:	2200      	movs	r2, #0
 80058de:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80058e2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80058e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80058ea:	4622      	mov	r2, r4
 80058ec:	462b      	mov	r3, r5
 80058ee:	1891      	adds	r1, r2, r2
 80058f0:	65b9      	str	r1, [r7, #88]	; 0x58
 80058f2:	415b      	adcs	r3, r3
 80058f4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80058fa:	4621      	mov	r1, r4
 80058fc:	eb12 0801 	adds.w	r8, r2, r1
 8005900:	4629      	mov	r1, r5
 8005902:	eb43 0901 	adc.w	r9, r3, r1
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005912:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005916:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800591a:	4690      	mov	r8, r2
 800591c:	4699      	mov	r9, r3
 800591e:	4623      	mov	r3, r4
 8005920:	eb18 0303 	adds.w	r3, r8, r3
 8005924:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005928:	462b      	mov	r3, r5
 800592a:	eb49 0303 	adc.w	r3, r9, r3
 800592e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005936:	685b      	ldr	r3, [r3, #4]
 8005938:	2200      	movs	r2, #0
 800593a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800593e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005942:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005946:	460b      	mov	r3, r1
 8005948:	18db      	adds	r3, r3, r3
 800594a:	653b      	str	r3, [r7, #80]	; 0x50
 800594c:	4613      	mov	r3, r2
 800594e:	eb42 0303 	adc.w	r3, r2, r3
 8005952:	657b      	str	r3, [r7, #84]	; 0x54
 8005954:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005958:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800595c:	f7fb f85a 	bl	8000a14 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b61      	ldr	r3, [pc, #388]	; (8005aec <UART_SetConfig+0x2d4>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011c      	lsls	r4, r3, #4
 800596e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005972:	2200      	movs	r2, #0
 8005974:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005978:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800597c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005980:	4642      	mov	r2, r8
 8005982:	464b      	mov	r3, r9
 8005984:	1891      	adds	r1, r2, r2
 8005986:	64b9      	str	r1, [r7, #72]	; 0x48
 8005988:	415b      	adcs	r3, r3
 800598a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800598c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005990:	4641      	mov	r1, r8
 8005992:	eb12 0a01 	adds.w	sl, r2, r1
 8005996:	4649      	mov	r1, r9
 8005998:	eb43 0b01 	adc.w	fp, r3, r1
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80059a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80059ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80059b0:	4692      	mov	sl, r2
 80059b2:	469b      	mov	fp, r3
 80059b4:	4643      	mov	r3, r8
 80059b6:	eb1a 0303 	adds.w	r3, sl, r3
 80059ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059be:	464b      	mov	r3, r9
 80059c0:	eb4b 0303 	adc.w	r3, fp, r3
 80059c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80059c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059cc:	685b      	ldr	r3, [r3, #4]
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80059d4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80059d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80059dc:	460b      	mov	r3, r1
 80059de:	18db      	adds	r3, r3, r3
 80059e0:	643b      	str	r3, [r7, #64]	; 0x40
 80059e2:	4613      	mov	r3, r2
 80059e4:	eb42 0303 	adc.w	r3, r2, r3
 80059e8:	647b      	str	r3, [r7, #68]	; 0x44
 80059ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80059ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80059f2:	f7fb f80f 	bl	8000a14 <__aeabi_uldivmod>
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4611      	mov	r1, r2
 80059fc:	4b3b      	ldr	r3, [pc, #236]	; (8005aec <UART_SetConfig+0x2d4>)
 80059fe:	fba3 2301 	umull	r2, r3, r3, r1
 8005a02:	095b      	lsrs	r3, r3, #5
 8005a04:	2264      	movs	r2, #100	; 0x64
 8005a06:	fb02 f303 	mul.w	r3, r2, r3
 8005a0a:	1acb      	subs	r3, r1, r3
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005a12:	4b36      	ldr	r3, [pc, #216]	; (8005aec <UART_SetConfig+0x2d4>)
 8005a14:	fba3 2302 	umull	r2, r3, r3, r2
 8005a18:	095b      	lsrs	r3, r3, #5
 8005a1a:	005b      	lsls	r3, r3, #1
 8005a1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005a20:	441c      	add	r4, r3
 8005a22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a26:	2200      	movs	r2, #0
 8005a28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005a2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005a30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005a34:	4642      	mov	r2, r8
 8005a36:	464b      	mov	r3, r9
 8005a38:	1891      	adds	r1, r2, r2
 8005a3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8005a3c:	415b      	adcs	r3, r3
 8005a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005a44:	4641      	mov	r1, r8
 8005a46:	1851      	adds	r1, r2, r1
 8005a48:	6339      	str	r1, [r7, #48]	; 0x30
 8005a4a:	4649      	mov	r1, r9
 8005a4c:	414b      	adcs	r3, r1
 8005a4e:	637b      	str	r3, [r7, #52]	; 0x34
 8005a50:	f04f 0200 	mov.w	r2, #0
 8005a54:	f04f 0300 	mov.w	r3, #0
 8005a58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005a5c:	4659      	mov	r1, fp
 8005a5e:	00cb      	lsls	r3, r1, #3
 8005a60:	4651      	mov	r1, sl
 8005a62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a66:	4651      	mov	r1, sl
 8005a68:	00ca      	lsls	r2, r1, #3
 8005a6a:	4610      	mov	r0, r2
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4603      	mov	r3, r0
 8005a70:	4642      	mov	r2, r8
 8005a72:	189b      	adds	r3, r3, r2
 8005a74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a78:	464b      	mov	r3, r9
 8005a7a:	460a      	mov	r2, r1
 8005a7c:	eb42 0303 	adc.w	r3, r2, r3
 8005a80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005a90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a98:	460b      	mov	r3, r1
 8005a9a:	18db      	adds	r3, r3, r3
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a9e:	4613      	mov	r3, r2
 8005aa0:	eb42 0303 	adc.w	r3, r2, r3
 8005aa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005aa6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005aaa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005aae:	f7fa ffb1 	bl	8000a14 <__aeabi_uldivmod>
 8005ab2:	4602      	mov	r2, r0
 8005ab4:	460b      	mov	r3, r1
 8005ab6:	4b0d      	ldr	r3, [pc, #52]	; (8005aec <UART_SetConfig+0x2d4>)
 8005ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8005abc:	095b      	lsrs	r3, r3, #5
 8005abe:	2164      	movs	r1, #100	; 0x64
 8005ac0:	fb01 f303 	mul.w	r3, r1, r3
 8005ac4:	1ad3      	subs	r3, r2, r3
 8005ac6:	00db      	lsls	r3, r3, #3
 8005ac8:	3332      	adds	r3, #50	; 0x32
 8005aca:	4a08      	ldr	r2, [pc, #32]	; (8005aec <UART_SetConfig+0x2d4>)
 8005acc:	fba2 2303 	umull	r2, r3, r2, r3
 8005ad0:	095b      	lsrs	r3, r3, #5
 8005ad2:	f003 0207 	and.w	r2, r3, #7
 8005ad6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4422      	add	r2, r4
 8005ade:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005ae0:	e105      	b.n	8005cee <UART_SetConfig+0x4d6>
 8005ae2:	bf00      	nop
 8005ae4:	40011000 	.word	0x40011000
 8005ae8:	40011400 	.word	0x40011400
 8005aec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005af0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af4:	2200      	movs	r2, #0
 8005af6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005afa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005afe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005b02:	4642      	mov	r2, r8
 8005b04:	464b      	mov	r3, r9
 8005b06:	1891      	adds	r1, r2, r2
 8005b08:	6239      	str	r1, [r7, #32]
 8005b0a:	415b      	adcs	r3, r3
 8005b0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b12:	4641      	mov	r1, r8
 8005b14:	1854      	adds	r4, r2, r1
 8005b16:	4649      	mov	r1, r9
 8005b18:	eb43 0501 	adc.w	r5, r3, r1
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	00eb      	lsls	r3, r5, #3
 8005b26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005b2a:	00e2      	lsls	r2, r4, #3
 8005b2c:	4614      	mov	r4, r2
 8005b2e:	461d      	mov	r5, r3
 8005b30:	4643      	mov	r3, r8
 8005b32:	18e3      	adds	r3, r4, r3
 8005b34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b38:	464b      	mov	r3, r9
 8005b3a:	eb45 0303 	adc.w	r3, r5, r3
 8005b3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b46:	685b      	ldr	r3, [r3, #4]
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005b4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005b52:	f04f 0200 	mov.w	r2, #0
 8005b56:	f04f 0300 	mov.w	r3, #0
 8005b5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005b5e:	4629      	mov	r1, r5
 8005b60:	008b      	lsls	r3, r1, #2
 8005b62:	4621      	mov	r1, r4
 8005b64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b68:	4621      	mov	r1, r4
 8005b6a:	008a      	lsls	r2, r1, #2
 8005b6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005b70:	f7fa ff50 	bl	8000a14 <__aeabi_uldivmod>
 8005b74:	4602      	mov	r2, r0
 8005b76:	460b      	mov	r3, r1
 8005b78:	4b60      	ldr	r3, [pc, #384]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8005b7e:	095b      	lsrs	r3, r3, #5
 8005b80:	011c      	lsls	r4, r3, #4
 8005b82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005b8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005b90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b94:	4642      	mov	r2, r8
 8005b96:	464b      	mov	r3, r9
 8005b98:	1891      	adds	r1, r2, r2
 8005b9a:	61b9      	str	r1, [r7, #24]
 8005b9c:	415b      	adcs	r3, r3
 8005b9e:	61fb      	str	r3, [r7, #28]
 8005ba0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	1851      	adds	r1, r2, r1
 8005ba8:	6139      	str	r1, [r7, #16]
 8005baa:	4649      	mov	r1, r9
 8005bac:	414b      	adcs	r3, r1
 8005bae:	617b      	str	r3, [r7, #20]
 8005bb0:	f04f 0200 	mov.w	r2, #0
 8005bb4:	f04f 0300 	mov.w	r3, #0
 8005bb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005bbc:	4659      	mov	r1, fp
 8005bbe:	00cb      	lsls	r3, r1, #3
 8005bc0:	4651      	mov	r1, sl
 8005bc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005bc6:	4651      	mov	r1, sl
 8005bc8:	00ca      	lsls	r2, r1, #3
 8005bca:	4610      	mov	r0, r2
 8005bcc:	4619      	mov	r1, r3
 8005bce:	4603      	mov	r3, r0
 8005bd0:	4642      	mov	r2, r8
 8005bd2:	189b      	adds	r3, r3, r2
 8005bd4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005bd8:	464b      	mov	r3, r9
 8005bda:	460a      	mov	r2, r1
 8005bdc:	eb42 0303 	adc.w	r3, r2, r3
 8005be0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	2200      	movs	r2, #0
 8005bec:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005bf0:	f04f 0200 	mov.w	r2, #0
 8005bf4:	f04f 0300 	mov.w	r3, #0
 8005bf8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005bfc:	4649      	mov	r1, r9
 8005bfe:	008b      	lsls	r3, r1, #2
 8005c00:	4641      	mov	r1, r8
 8005c02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c06:	4641      	mov	r1, r8
 8005c08:	008a      	lsls	r2, r1, #2
 8005c0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005c0e:	f7fa ff01 	bl	8000a14 <__aeabi_uldivmod>
 8005c12:	4602      	mov	r2, r0
 8005c14:	460b      	mov	r3, r1
 8005c16:	4b39      	ldr	r3, [pc, #228]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005c18:	fba3 1302 	umull	r1, r3, r3, r2
 8005c1c:	095b      	lsrs	r3, r3, #5
 8005c1e:	2164      	movs	r1, #100	; 0x64
 8005c20:	fb01 f303 	mul.w	r3, r1, r3
 8005c24:	1ad3      	subs	r3, r2, r3
 8005c26:	011b      	lsls	r3, r3, #4
 8005c28:	3332      	adds	r3, #50	; 0x32
 8005c2a:	4a34      	ldr	r2, [pc, #208]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8005c30:	095b      	lsrs	r3, r3, #5
 8005c32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005c36:	441c      	add	r4, r3
 8005c38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	673b      	str	r3, [r7, #112]	; 0x70
 8005c40:	677a      	str	r2, [r7, #116]	; 0x74
 8005c42:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005c46:	4642      	mov	r2, r8
 8005c48:	464b      	mov	r3, r9
 8005c4a:	1891      	adds	r1, r2, r2
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	415b      	adcs	r3, r3
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c56:	4641      	mov	r1, r8
 8005c58:	1851      	adds	r1, r2, r1
 8005c5a:	6039      	str	r1, [r7, #0]
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	414b      	adcs	r3, r1
 8005c60:	607b      	str	r3, [r7, #4]
 8005c62:	f04f 0200 	mov.w	r2, #0
 8005c66:	f04f 0300 	mov.w	r3, #0
 8005c6a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005c6e:	4659      	mov	r1, fp
 8005c70:	00cb      	lsls	r3, r1, #3
 8005c72:	4651      	mov	r1, sl
 8005c74:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c78:	4651      	mov	r1, sl
 8005c7a:	00ca      	lsls	r2, r1, #3
 8005c7c:	4610      	mov	r0, r2
 8005c7e:	4619      	mov	r1, r3
 8005c80:	4603      	mov	r3, r0
 8005c82:	4642      	mov	r2, r8
 8005c84:	189b      	adds	r3, r3, r2
 8005c86:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c88:	464b      	mov	r3, r9
 8005c8a:	460a      	mov	r2, r1
 8005c8c:	eb42 0303 	adc.w	r3, r2, r3
 8005c90:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c96:	685b      	ldr	r3, [r3, #4]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	663b      	str	r3, [r7, #96]	; 0x60
 8005c9c:	667a      	str	r2, [r7, #100]	; 0x64
 8005c9e:	f04f 0200 	mov.w	r2, #0
 8005ca2:	f04f 0300 	mov.w	r3, #0
 8005ca6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005caa:	4649      	mov	r1, r9
 8005cac:	008b      	lsls	r3, r1, #2
 8005cae:	4641      	mov	r1, r8
 8005cb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005cb4:	4641      	mov	r1, r8
 8005cb6:	008a      	lsls	r2, r1, #2
 8005cb8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005cbc:	f7fa feaa 	bl	8000a14 <__aeabi_uldivmod>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	460b      	mov	r3, r1
 8005cc4:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005cc6:	fba3 1302 	umull	r1, r3, r3, r2
 8005cca:	095b      	lsrs	r3, r3, #5
 8005ccc:	2164      	movs	r1, #100	; 0x64
 8005cce:	fb01 f303 	mul.w	r3, r1, r3
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	011b      	lsls	r3, r3, #4
 8005cd6:	3332      	adds	r3, #50	; 0x32
 8005cd8:	4a08      	ldr	r2, [pc, #32]	; (8005cfc <UART_SetConfig+0x4e4>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	095b      	lsrs	r3, r3, #5
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4422      	add	r2, r4
 8005cec:	609a      	str	r2, [r3, #8]
}
 8005cee:	bf00      	nop
 8005cf0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005cfa:	bf00      	nop
 8005cfc:	51eb851f 	.word	0x51eb851f

08005d00 <__errno>:
 8005d00:	4b01      	ldr	r3, [pc, #4]	; (8005d08 <__errno+0x8>)
 8005d02:	6818      	ldr	r0, [r3, #0]
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	20000014 	.word	0x20000014

08005d0c <__libc_init_array>:
 8005d0c:	b570      	push	{r4, r5, r6, lr}
 8005d0e:	4d0d      	ldr	r5, [pc, #52]	; (8005d44 <__libc_init_array+0x38>)
 8005d10:	4c0d      	ldr	r4, [pc, #52]	; (8005d48 <__libc_init_array+0x3c>)
 8005d12:	1b64      	subs	r4, r4, r5
 8005d14:	10a4      	asrs	r4, r4, #2
 8005d16:	2600      	movs	r6, #0
 8005d18:	42a6      	cmp	r6, r4
 8005d1a:	d109      	bne.n	8005d30 <__libc_init_array+0x24>
 8005d1c:	4d0b      	ldr	r5, [pc, #44]	; (8005d4c <__libc_init_array+0x40>)
 8005d1e:	4c0c      	ldr	r4, [pc, #48]	; (8005d50 <__libc_init_array+0x44>)
 8005d20:	f000 f842 	bl	8005da8 <_init>
 8005d24:	1b64      	subs	r4, r4, r5
 8005d26:	10a4      	asrs	r4, r4, #2
 8005d28:	2600      	movs	r6, #0
 8005d2a:	42a6      	cmp	r6, r4
 8005d2c:	d105      	bne.n	8005d3a <__libc_init_array+0x2e>
 8005d2e:	bd70      	pop	{r4, r5, r6, pc}
 8005d30:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d34:	4798      	blx	r3
 8005d36:	3601      	adds	r6, #1
 8005d38:	e7ee      	b.n	8005d18 <__libc_init_array+0xc>
 8005d3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d3e:	4798      	blx	r3
 8005d40:	3601      	adds	r6, #1
 8005d42:	e7f2      	b.n	8005d2a <__libc_init_array+0x1e>
 8005d44:	08005de8 	.word	0x08005de8
 8005d48:	08005de8 	.word	0x08005de8
 8005d4c:	08005de8 	.word	0x08005de8
 8005d50:	08005dec 	.word	0x08005dec

08005d54 <memset>:
 8005d54:	4402      	add	r2, r0
 8005d56:	4603      	mov	r3, r0
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d100      	bne.n	8005d5e <memset+0xa>
 8005d5c:	4770      	bx	lr
 8005d5e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d62:	e7f9      	b.n	8005d58 <memset+0x4>

08005d64 <sqrtf>:
 8005d64:	b508      	push	{r3, lr}
 8005d66:	ed2d 8b02 	vpush	{d8}
 8005d6a:	eeb0 8a40 	vmov.f32	s16, s0
 8005d6e:	f000 f817 	bl	8005da0 <__ieee754_sqrtf>
 8005d72:	eeb4 8a48 	vcmp.f32	s16, s16
 8005d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d7a:	d60c      	bvs.n	8005d96 <sqrtf+0x32>
 8005d7c:	eddf 8a07 	vldr	s17, [pc, #28]	; 8005d9c <sqrtf+0x38>
 8005d80:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	d505      	bpl.n	8005d96 <sqrtf+0x32>
 8005d8a:	f7ff ffb9 	bl	8005d00 <__errno>
 8005d8e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8005d92:	2321      	movs	r3, #33	; 0x21
 8005d94:	6003      	str	r3, [r0, #0]
 8005d96:	ecbd 8b02 	vpop	{d8}
 8005d9a:	bd08      	pop	{r3, pc}
 8005d9c:	00000000 	.word	0x00000000

08005da0 <__ieee754_sqrtf>:
 8005da0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005da4:	4770      	bx	lr
	...

08005da8 <_init>:
 8005da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005daa:	bf00      	nop
 8005dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dae:	bc08      	pop	{r3}
 8005db0:	469e      	mov	lr, r3
 8005db2:	4770      	bx	lr

08005db4 <_fini>:
 8005db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005db6:	bf00      	nop
 8005db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005dba:	bc08      	pop	{r3}
 8005dbc:	469e      	mov	lr, r3
 8005dbe:	4770      	bx	lr
