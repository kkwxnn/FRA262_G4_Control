
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c30  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006dc8  08006dc8  00016dc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006de8  08006de8  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  08006de8  08006de8  00016de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006df0  08006df0  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006df4  08006df4  00016df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08006df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003bc  20000088  08006e80  00020088  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  08006e80  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31b  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e15  00000000  00000000  0002f3d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  000311e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031f60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779e  00000000  00000000  00032c30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f5f0  00000000  00000000  0004a3ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a231  00000000  00000000  000599be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3bef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ca8  00000000  00000000  000f3c40  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000088 	.word	0x20000088
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006db0 	.word	0x08006db0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000008c 	.word	0x2000008c
 80001d4:	08006db0 	.word	0x08006db0

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_frsub>:
 8000b90:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b94:	e002      	b.n	8000b9c <__addsf3>
 8000b96:	bf00      	nop

08000b98 <__aeabi_fsub>:
 8000b98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b9c <__addsf3>:
 8000b9c:	0042      	lsls	r2, r0, #1
 8000b9e:	bf1f      	itttt	ne
 8000ba0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ba4:	ea92 0f03 	teqne	r2, r3
 8000ba8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bac:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb0:	d06a      	beq.n	8000c88 <__addsf3+0xec>
 8000bb2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bb6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bba:	bfc1      	itttt	gt
 8000bbc:	18d2      	addgt	r2, r2, r3
 8000bbe:	4041      	eorgt	r1, r0
 8000bc0:	4048      	eorgt	r0, r1
 8000bc2:	4041      	eorgt	r1, r0
 8000bc4:	bfb8      	it	lt
 8000bc6:	425b      	neglt	r3, r3
 8000bc8:	2b19      	cmp	r3, #25
 8000bca:	bf88      	it	hi
 8000bcc:	4770      	bxhi	lr
 8000bce:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bd2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bda:	bf18      	it	ne
 8000bdc:	4240      	negne	r0, r0
 8000bde:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000be2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000be6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4249      	negne	r1, r1
 8000bee:	ea92 0f03 	teq	r2, r3
 8000bf2:	d03f      	beq.n	8000c74 <__addsf3+0xd8>
 8000bf4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bf8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bfc:	eb10 000c 	adds.w	r0, r0, ip
 8000c00:	f1c3 0320 	rsb	r3, r3, #32
 8000c04:	fa01 f103 	lsl.w	r1, r1, r3
 8000c08:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0c:	d502      	bpl.n	8000c14 <__addsf3+0x78>
 8000c0e:	4249      	negs	r1, r1
 8000c10:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c14:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c18:	d313      	bcc.n	8000c42 <__addsf3+0xa6>
 8000c1a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c1e:	d306      	bcc.n	8000c2e <__addsf3+0x92>
 8000c20:	0840      	lsrs	r0, r0, #1
 8000c22:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c26:	f102 0201 	add.w	r2, r2, #1
 8000c2a:	2afe      	cmp	r2, #254	; 0xfe
 8000c2c:	d251      	bcs.n	8000cd2 <__addsf3+0x136>
 8000c2e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c32:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c36:	bf08      	it	eq
 8000c38:	f020 0001 	biceq.w	r0, r0, #1
 8000c3c:	ea40 0003 	orr.w	r0, r0, r3
 8000c40:	4770      	bx	lr
 8000c42:	0049      	lsls	r1, r1, #1
 8000c44:	eb40 0000 	adc.w	r0, r0, r0
 8000c48:	3a01      	subs	r2, #1
 8000c4a:	bf28      	it	cs
 8000c4c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c50:	d2ed      	bcs.n	8000c2e <__addsf3+0x92>
 8000c52:	fab0 fc80 	clz	ip, r0
 8000c56:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c5a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c5e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c62:	bfaa      	itet	ge
 8000c64:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c68:	4252      	neglt	r2, r2
 8000c6a:	4318      	orrge	r0, r3
 8000c6c:	bfbc      	itt	lt
 8000c6e:	40d0      	lsrlt	r0, r2
 8000c70:	4318      	orrlt	r0, r3
 8000c72:	4770      	bx	lr
 8000c74:	f092 0f00 	teq	r2, #0
 8000c78:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c7c:	bf06      	itte	eq
 8000c7e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c82:	3201      	addeq	r2, #1
 8000c84:	3b01      	subne	r3, #1
 8000c86:	e7b5      	b.n	8000bf4 <__addsf3+0x58>
 8000c88:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c8c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c90:	bf18      	it	ne
 8000c92:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c96:	d021      	beq.n	8000cdc <__addsf3+0x140>
 8000c98:	ea92 0f03 	teq	r2, r3
 8000c9c:	d004      	beq.n	8000ca8 <__addsf3+0x10c>
 8000c9e:	f092 0f00 	teq	r2, #0
 8000ca2:	bf08      	it	eq
 8000ca4:	4608      	moveq	r0, r1
 8000ca6:	4770      	bx	lr
 8000ca8:	ea90 0f01 	teq	r0, r1
 8000cac:	bf1c      	itt	ne
 8000cae:	2000      	movne	r0, #0
 8000cb0:	4770      	bxne	lr
 8000cb2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cb6:	d104      	bne.n	8000cc2 <__addsf3+0x126>
 8000cb8:	0040      	lsls	r0, r0, #1
 8000cba:	bf28      	it	cs
 8000cbc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc0:	4770      	bx	lr
 8000cc2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cc6:	bf3c      	itt	cc
 8000cc8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ccc:	4770      	bxcc	lr
 8000cce:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cd2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cd6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cda:	4770      	bx	lr
 8000cdc:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce0:	bf16      	itet	ne
 8000ce2:	4608      	movne	r0, r1
 8000ce4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ce8:	4601      	movne	r1, r0
 8000cea:	0242      	lsls	r2, r0, #9
 8000cec:	bf06      	itte	eq
 8000cee:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cf2:	ea90 0f01 	teqeq	r0, r1
 8000cf6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cfa:	4770      	bx	lr

08000cfc <__aeabi_ui2f>:
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e004      	b.n	8000d0c <__aeabi_i2f+0x8>
 8000d02:	bf00      	nop

08000d04 <__aeabi_i2f>:
 8000d04:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d08:	bf48      	it	mi
 8000d0a:	4240      	negmi	r0, r0
 8000d0c:	ea5f 0c00 	movs.w	ip, r0
 8000d10:	bf08      	it	eq
 8000d12:	4770      	bxeq	lr
 8000d14:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d18:	4601      	mov	r1, r0
 8000d1a:	f04f 0000 	mov.w	r0, #0
 8000d1e:	e01c      	b.n	8000d5a <__aeabi_l2f+0x2a>

08000d20 <__aeabi_ul2f>:
 8000d20:	ea50 0201 	orrs.w	r2, r0, r1
 8000d24:	bf08      	it	eq
 8000d26:	4770      	bxeq	lr
 8000d28:	f04f 0300 	mov.w	r3, #0
 8000d2c:	e00a      	b.n	8000d44 <__aeabi_l2f+0x14>
 8000d2e:	bf00      	nop

08000d30 <__aeabi_l2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d3c:	d502      	bpl.n	8000d44 <__aeabi_l2f+0x14>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	ea5f 0c01 	movs.w	ip, r1
 8000d48:	bf02      	ittt	eq
 8000d4a:	4684      	moveq	ip, r0
 8000d4c:	4601      	moveq	r1, r0
 8000d4e:	2000      	moveq	r0, #0
 8000d50:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d54:	bf08      	it	eq
 8000d56:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d5a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d5e:	fabc f28c 	clz	r2, ip
 8000d62:	3a08      	subs	r2, #8
 8000d64:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d68:	db10      	blt.n	8000d8c <__aeabi_l2f+0x5c>
 8000d6a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6e:	4463      	add	r3, ip
 8000d70:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d74:	f1c2 0220 	rsb	r2, r2, #32
 8000d78:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d7c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d80:	eb43 0002 	adc.w	r0, r3, r2
 8000d84:	bf08      	it	eq
 8000d86:	f020 0001 	biceq.w	r0, r0, #1
 8000d8a:	4770      	bx	lr
 8000d8c:	f102 0220 	add.w	r2, r2, #32
 8000d90:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d94:	f1c2 0220 	rsb	r2, r2, #32
 8000d98:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d9c:	fa21 f202 	lsr.w	r2, r1, r2
 8000da0:	eb43 0002 	adc.w	r0, r3, r2
 8000da4:	bf08      	it	eq
 8000da6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000daa:	4770      	bx	lr

08000dac <__aeabi_uldivmod>:
 8000dac:	b953      	cbnz	r3, 8000dc4 <__aeabi_uldivmod+0x18>
 8000dae:	b94a      	cbnz	r2, 8000dc4 <__aeabi_uldivmod+0x18>
 8000db0:	2900      	cmp	r1, #0
 8000db2:	bf08      	it	eq
 8000db4:	2800      	cmpeq	r0, #0
 8000db6:	bf1c      	itt	ne
 8000db8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dc0:	f000 b974 	b.w	80010ac <__aeabi_idiv0>
 8000dc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000dcc:	f000 f806 	bl	8000ddc <__udivmoddi4>
 8000dd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dd8:	b004      	add	sp, #16
 8000dda:	4770      	bx	lr

08000ddc <__udivmoddi4>:
 8000ddc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000de0:	9d08      	ldr	r5, [sp, #32]
 8000de2:	4604      	mov	r4, r0
 8000de4:	468e      	mov	lr, r1
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d14d      	bne.n	8000e86 <__udivmoddi4+0xaa>
 8000dea:	428a      	cmp	r2, r1
 8000dec:	4694      	mov	ip, r2
 8000dee:	d969      	bls.n	8000ec4 <__udivmoddi4+0xe8>
 8000df0:	fab2 f282 	clz	r2, r2
 8000df4:	b152      	cbz	r2, 8000e0c <__udivmoddi4+0x30>
 8000df6:	fa01 f302 	lsl.w	r3, r1, r2
 8000dfa:	f1c2 0120 	rsb	r1, r2, #32
 8000dfe:	fa20 f101 	lsr.w	r1, r0, r1
 8000e02:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e06:	ea41 0e03 	orr.w	lr, r1, r3
 8000e0a:	4094      	lsls	r4, r2
 8000e0c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e10:	0c21      	lsrs	r1, r4, #16
 8000e12:	fbbe f6f8 	udiv	r6, lr, r8
 8000e16:	fa1f f78c 	uxth.w	r7, ip
 8000e1a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e1e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e22:	fb06 f107 	mul.w	r1, r6, r7
 8000e26:	4299      	cmp	r1, r3
 8000e28:	d90a      	bls.n	8000e40 <__udivmoddi4+0x64>
 8000e2a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e32:	f080 811f 	bcs.w	8001074 <__udivmoddi4+0x298>
 8000e36:	4299      	cmp	r1, r3
 8000e38:	f240 811c 	bls.w	8001074 <__udivmoddi4+0x298>
 8000e3c:	3e02      	subs	r6, #2
 8000e3e:	4463      	add	r3, ip
 8000e40:	1a5b      	subs	r3, r3, r1
 8000e42:	b2a4      	uxth	r4, r4
 8000e44:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e48:	fb08 3310 	mls	r3, r8, r0, r3
 8000e4c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e50:	fb00 f707 	mul.w	r7, r0, r7
 8000e54:	42a7      	cmp	r7, r4
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x92>
 8000e58:	eb1c 0404 	adds.w	r4, ip, r4
 8000e5c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e60:	f080 810a 	bcs.w	8001078 <__udivmoddi4+0x29c>
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	f240 8107 	bls.w	8001078 <__udivmoddi4+0x29c>
 8000e6a:	4464      	add	r4, ip
 8000e6c:	3802      	subs	r0, #2
 8000e6e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e72:	1be4      	subs	r4, r4, r7
 8000e74:	2600      	movs	r6, #0
 8000e76:	b11d      	cbz	r5, 8000e80 <__udivmoddi4+0xa4>
 8000e78:	40d4      	lsrs	r4, r2
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e80:	4631      	mov	r1, r6
 8000e82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d909      	bls.n	8000e9e <__udivmoddi4+0xc2>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	f000 80ef 	beq.w	800106e <__udivmoddi4+0x292>
 8000e90:	2600      	movs	r6, #0
 8000e92:	e9c5 0100 	strd	r0, r1, [r5]
 8000e96:	4630      	mov	r0, r6
 8000e98:	4631      	mov	r1, r6
 8000e9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e9e:	fab3 f683 	clz	r6, r3
 8000ea2:	2e00      	cmp	r6, #0
 8000ea4:	d14a      	bne.n	8000f3c <__udivmoddi4+0x160>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d302      	bcc.n	8000eb0 <__udivmoddi4+0xd4>
 8000eaa:	4282      	cmp	r2, r0
 8000eac:	f200 80f9 	bhi.w	80010a2 <__udivmoddi4+0x2c6>
 8000eb0:	1a84      	subs	r4, r0, r2
 8000eb2:	eb61 0303 	sbc.w	r3, r1, r3
 8000eb6:	2001      	movs	r0, #1
 8000eb8:	469e      	mov	lr, r3
 8000eba:	2d00      	cmp	r5, #0
 8000ebc:	d0e0      	beq.n	8000e80 <__udivmoddi4+0xa4>
 8000ebe:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ec2:	e7dd      	b.n	8000e80 <__udivmoddi4+0xa4>
 8000ec4:	b902      	cbnz	r2, 8000ec8 <__udivmoddi4+0xec>
 8000ec6:	deff      	udf	#255	; 0xff
 8000ec8:	fab2 f282 	clz	r2, r2
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	f040 8092 	bne.w	8000ff6 <__udivmoddi4+0x21a>
 8000ed2:	eba1 010c 	sub.w	r1, r1, ip
 8000ed6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eda:	fa1f fe8c 	uxth.w	lr, ip
 8000ede:	2601      	movs	r6, #1
 8000ee0:	0c20      	lsrs	r0, r4, #16
 8000ee2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ee6:	fb07 1113 	mls	r1, r7, r3, r1
 8000eea:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eee:	fb0e f003 	mul.w	r0, lr, r3
 8000ef2:	4288      	cmp	r0, r1
 8000ef4:	d908      	bls.n	8000f08 <__udivmoddi4+0x12c>
 8000ef6:	eb1c 0101 	adds.w	r1, ip, r1
 8000efa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000efe:	d202      	bcs.n	8000f06 <__udivmoddi4+0x12a>
 8000f00:	4288      	cmp	r0, r1
 8000f02:	f200 80cb 	bhi.w	800109c <__udivmoddi4+0x2c0>
 8000f06:	4643      	mov	r3, r8
 8000f08:	1a09      	subs	r1, r1, r0
 8000f0a:	b2a4      	uxth	r4, r4
 8000f0c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f10:	fb07 1110 	mls	r1, r7, r0, r1
 8000f14:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f18:	fb0e fe00 	mul.w	lr, lr, r0
 8000f1c:	45a6      	cmp	lr, r4
 8000f1e:	d908      	bls.n	8000f32 <__udivmoddi4+0x156>
 8000f20:	eb1c 0404 	adds.w	r4, ip, r4
 8000f24:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f28:	d202      	bcs.n	8000f30 <__udivmoddi4+0x154>
 8000f2a:	45a6      	cmp	lr, r4
 8000f2c:	f200 80bb 	bhi.w	80010a6 <__udivmoddi4+0x2ca>
 8000f30:	4608      	mov	r0, r1
 8000f32:	eba4 040e 	sub.w	r4, r4, lr
 8000f36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f3a:	e79c      	b.n	8000e76 <__udivmoddi4+0x9a>
 8000f3c:	f1c6 0720 	rsb	r7, r6, #32
 8000f40:	40b3      	lsls	r3, r6
 8000f42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f4a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f4e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f52:	431c      	orrs	r4, r3
 8000f54:	40f9      	lsrs	r1, r7
 8000f56:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f5a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f5e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f62:	0c20      	lsrs	r0, r4, #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fb09 1118 	mls	r1, r9, r8, r1
 8000f6c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f70:	fb08 f00e 	mul.w	r0, r8, lr
 8000f74:	4288      	cmp	r0, r1
 8000f76:	fa02 f206 	lsl.w	r2, r2, r6
 8000f7a:	d90b      	bls.n	8000f94 <__udivmoddi4+0x1b8>
 8000f7c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f84:	f080 8088 	bcs.w	8001098 <__udivmoddi4+0x2bc>
 8000f88:	4288      	cmp	r0, r1
 8000f8a:	f240 8085 	bls.w	8001098 <__udivmoddi4+0x2bc>
 8000f8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f92:	4461      	add	r1, ip
 8000f94:	1a09      	subs	r1, r1, r0
 8000f96:	b2a4      	uxth	r4, r4
 8000f98:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f9c:	fb09 1110 	mls	r1, r9, r0, r1
 8000fa0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fa8:	458e      	cmp	lr, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x1e2>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fb4:	d26c      	bcs.n	8001090 <__udivmoddi4+0x2b4>
 8000fb6:	458e      	cmp	lr, r1
 8000fb8:	d96a      	bls.n	8001090 <__udivmoddi4+0x2b4>
 8000fba:	3802      	subs	r0, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fc2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fc6:	eba1 010e 	sub.w	r1, r1, lr
 8000fca:	42a1      	cmp	r1, r4
 8000fcc:	46c8      	mov	r8, r9
 8000fce:	46a6      	mov	lr, r4
 8000fd0:	d356      	bcc.n	8001080 <__udivmoddi4+0x2a4>
 8000fd2:	d053      	beq.n	800107c <__udivmoddi4+0x2a0>
 8000fd4:	b15d      	cbz	r5, 8000fee <__udivmoddi4+0x212>
 8000fd6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fda:	eb61 010e 	sbc.w	r1, r1, lr
 8000fde:	fa01 f707 	lsl.w	r7, r1, r7
 8000fe2:	fa22 f306 	lsr.w	r3, r2, r6
 8000fe6:	40f1      	lsrs	r1, r6
 8000fe8:	431f      	orrs	r7, r3
 8000fea:	e9c5 7100 	strd	r7, r1, [r5]
 8000fee:	2600      	movs	r6, #0
 8000ff0:	4631      	mov	r1, r6
 8000ff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ff6:	f1c2 0320 	rsb	r3, r2, #32
 8000ffa:	40d8      	lsrs	r0, r3
 8000ffc:	fa0c fc02 	lsl.w	ip, ip, r2
 8001000:	fa21 f303 	lsr.w	r3, r1, r3
 8001004:	4091      	lsls	r1, r2
 8001006:	4301      	orrs	r1, r0
 8001008:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800100c:	fa1f fe8c 	uxth.w	lr, ip
 8001010:	fbb3 f0f7 	udiv	r0, r3, r7
 8001014:	fb07 3610 	mls	r6, r7, r0, r3
 8001018:	0c0b      	lsrs	r3, r1, #16
 800101a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800101e:	fb00 f60e 	mul.w	r6, r0, lr
 8001022:	429e      	cmp	r6, r3
 8001024:	fa04 f402 	lsl.w	r4, r4, r2
 8001028:	d908      	bls.n	800103c <__udivmoddi4+0x260>
 800102a:	eb1c 0303 	adds.w	r3, ip, r3
 800102e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001032:	d22f      	bcs.n	8001094 <__udivmoddi4+0x2b8>
 8001034:	429e      	cmp	r6, r3
 8001036:	d92d      	bls.n	8001094 <__udivmoddi4+0x2b8>
 8001038:	3802      	subs	r0, #2
 800103a:	4463      	add	r3, ip
 800103c:	1b9b      	subs	r3, r3, r6
 800103e:	b289      	uxth	r1, r1
 8001040:	fbb3 f6f7 	udiv	r6, r3, r7
 8001044:	fb07 3316 	mls	r3, r7, r6, r3
 8001048:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800104c:	fb06 f30e 	mul.w	r3, r6, lr
 8001050:	428b      	cmp	r3, r1
 8001052:	d908      	bls.n	8001066 <__udivmoddi4+0x28a>
 8001054:	eb1c 0101 	adds.w	r1, ip, r1
 8001058:	f106 38ff 	add.w	r8, r6, #4294967295
 800105c:	d216      	bcs.n	800108c <__udivmoddi4+0x2b0>
 800105e:	428b      	cmp	r3, r1
 8001060:	d914      	bls.n	800108c <__udivmoddi4+0x2b0>
 8001062:	3e02      	subs	r6, #2
 8001064:	4461      	add	r1, ip
 8001066:	1ac9      	subs	r1, r1, r3
 8001068:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800106c:	e738      	b.n	8000ee0 <__udivmoddi4+0x104>
 800106e:	462e      	mov	r6, r5
 8001070:	4628      	mov	r0, r5
 8001072:	e705      	b.n	8000e80 <__udivmoddi4+0xa4>
 8001074:	4606      	mov	r6, r0
 8001076:	e6e3      	b.n	8000e40 <__udivmoddi4+0x64>
 8001078:	4618      	mov	r0, r3
 800107a:	e6f8      	b.n	8000e6e <__udivmoddi4+0x92>
 800107c:	454b      	cmp	r3, r9
 800107e:	d2a9      	bcs.n	8000fd4 <__udivmoddi4+0x1f8>
 8001080:	ebb9 0802 	subs.w	r8, r9, r2
 8001084:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001088:	3801      	subs	r0, #1
 800108a:	e7a3      	b.n	8000fd4 <__udivmoddi4+0x1f8>
 800108c:	4646      	mov	r6, r8
 800108e:	e7ea      	b.n	8001066 <__udivmoddi4+0x28a>
 8001090:	4620      	mov	r0, r4
 8001092:	e794      	b.n	8000fbe <__udivmoddi4+0x1e2>
 8001094:	4640      	mov	r0, r8
 8001096:	e7d1      	b.n	800103c <__udivmoddi4+0x260>
 8001098:	46d0      	mov	r8, sl
 800109a:	e77b      	b.n	8000f94 <__udivmoddi4+0x1b8>
 800109c:	3b02      	subs	r3, #2
 800109e:	4461      	add	r1, ip
 80010a0:	e732      	b.n	8000f08 <__udivmoddi4+0x12c>
 80010a2:	4630      	mov	r0, r6
 80010a4:	e709      	b.n	8000eba <__udivmoddi4+0xde>
 80010a6:	4464      	add	r4, ip
 80010a8:	3802      	subs	r0, #2
 80010aa:	e742      	b.n	8000f32 <__udivmoddi4+0x156>

080010ac <__aeabi_idiv0>:
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop

080010b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010b0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010b4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b6:	f002 fa01 	bl	80034bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ba:	f000 f903 	bl	80012c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010be:	f000 fb47 	bl	8001750 <MX_GPIO_Init>
  MX_DMA_Init();
 80010c2:	f000 fb25 	bl	8001710 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010c6:	f000 faf9 	bl	80016bc <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80010ca:	f000 faa9 	bl	8001620 <MX_TIM5_Init>
  MX_TIM3_Init();
 80010ce:	f000 fa53 	bl	8001578 <MX_TIM3_Init>
  MX_TIM1_Init();
 80010d2:	f000 f9c1 	bl	8001458 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010d6:	f000 f95f 	bl	8001398 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010da:	2104      	movs	r1, #4
 80010dc:	4867      	ldr	r0, [pc, #412]	; (800127c <main+0x1cc>)
 80010de:	f004 fb81 	bl	80057e4 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 80010e2:	4867      	ldr	r0, [pc, #412]	; (8001280 <main+0x1d0>)
 80010e4:	f004 f97e 	bl	80053e4 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4865      	ldr	r0, [pc, #404]	; (8001280 <main+0x1d0>)
 80010ec:	f004 fa24 	bl	8005538 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4863      	ldr	r0, [pc, #396]	; (8001280 <main+0x1d0>)
 80010f4:	f004 fa20 	bl	8005538 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 80010f8:	4b62      	ldr	r3, [pc, #392]	; (8001284 <main+0x1d4>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	461a      	mov	r2, r3
 8001100:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001104:	4860      	ldr	r0, [pc, #384]	; (8001288 <main+0x1d8>)
 8001106:	f003 fc6b 	bl	80049e0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800110a:	4b60      	ldr	r3, [pc, #384]	; (800128c <main+0x1dc>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	b2db      	uxtb	r3, r3
 8001110:	461a      	mov	r2, r3
 8001112:	2110      	movs	r1, #16
 8001114:	485c      	ldr	r0, [pc, #368]	; (8001288 <main+0x1d8>)
 8001116:	f003 fc63 	bl	80049e0 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim5); //Start Timer5
 800111a:	485d      	ldr	r0, [pc, #372]	; (8001290 <main+0x1e0>)
 800111c:	f004 f962 	bl	80053e4 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001120:	2202      	movs	r2, #2
 8001122:	495c      	ldr	r1, [pc, #368]	; (8001294 <main+0x1e4>)
 8001124:	485c      	ldr	r0, [pc, #368]	; (8001298 <main+0x1e8>)
 8001126:	f002 fa7f 	bl	8003628 <HAL_ADC_Start_DMA>
//	  {
//		  timestamp1 = HAL_GetTick() + 1;
//		  TrajectoryGenerator();
//	  }

	  switch(scheduler)
 800112a:	4b5c      	ldr	r3, [pc, #368]	; (800129c <main+0x1ec>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <main+0x88>
 8001132:	2b01      	cmp	r3, #1
 8001134:	d00d      	beq.n	8001152 <main+0xa2>
 8001136:	e7f8      	b.n	800112a <main+0x7a>
	  {
	  //Joystick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001138:	4b50      	ldr	r3, [pc, #320]	; (800127c <main+0x1cc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113e:	b21a      	sxth	r2, r3
 8001140:	4b57      	ldr	r3, [pc, #348]	; (80012a0 <main+0x1f0>)
 8001142:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form Joystick
 8001144:	f000 fd62 	bl	8001c0c <JoystickControl>
		  JoystickPinUpdate(); //Check Pin Flag
 8001148:	f000 fce2 	bl	8001b10 <JoystickPinUpdate>
		  JoystickLocationState();
 800114c:	f000 fdda 	bl	8001d04 <JoystickLocationState>
		  break;
 8001150:	e092      	b.n	8001278 <main+0x1c8>
	  //Trajectory
	  case 1:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001152:	4b4a      	ldr	r3, [pc, #296]	; (800127c <main+0x1cc>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001158:	b21a      	sxth	r2, r3
 800115a:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <main+0x1f0>)
 800115c:	801a      	strh	r2, [r3, #0]
		  static uint64_t timestamp0 = 0;
		  currentTime = micros();
 800115e:	f000 fb83 	bl	8001868 <micros>
 8001162:	4602      	mov	r2, r0
 8001164:	460b      	mov	r3, r1
 8001166:	494f      	ldr	r1, [pc, #316]	; (80012a4 <main+0x1f4>)
 8001168:	e9c1 2300 	strd	r2, r3, [r1]
		  if(currentTime > timestamp0)
 800116c:	4b4d      	ldr	r3, [pc, #308]	; (80012a4 <main+0x1f4>)
 800116e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	4b4c      	ldr	r3, [pc, #304]	; (80012a8 <main+0x1f8>)
 8001178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800117c:	4282      	cmp	r2, r0
 800117e:	418b      	sbcs	r3, r1
 8001180:	d211      	bcs.n	80011a6 <main+0xf6>
		  {
			  timestamp0 = currentTime + 1000;
 8001182:	4b48      	ldr	r3, [pc, #288]	; (80012a4 <main+0x1f4>)
 8001184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001188:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 800118c:	f143 0900 	adc.w	r9, r3, #0
 8001190:	4642      	mov	r2, r8
 8001192:	464b      	mov	r3, r9
 8001194:	4944      	ldr	r1, [pc, #272]	; (80012a8 <main+0x1f8>)
 8001196:	e9c1 2300 	strd	r2, r3, [r1]
			  QEIEncoderPositionVelocity_Update();
 800119a:	f000 fb7f 	bl	800189c <QEIEncoderPositionVelocity_Update>
			  velocity = QEIData.QEIVelocity;
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <main+0x1fc>)
 80011a0:	69db      	ldr	r3, [r3, #28]
 80011a2:	4a43      	ldr	r2, [pc, #268]	; (80012b0 <main+0x200>)
 80011a4:	6013      	str	r3, [r2, #0]
		  }

		  static uint32_t timestamp1 = 0;
		  if(HAL_GetTick() > timestamp1)
 80011a6:	f002 f9ef 	bl	8003588 <HAL_GetTick>
 80011aa:	4602      	mov	r2, r0
 80011ac:	4b41      	ldr	r3, [pc, #260]	; (80012b4 <main+0x204>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d915      	bls.n	80011e0 <main+0x130>
		  {
			  timestamp1 = HAL_GetTick() + 0.5;
 80011b4:	f002 f9e8 	bl	8003588 <HAL_GetTick>
 80011b8:	4603      	mov	r3, r0
 80011ba:	4618      	mov	r0, r3
 80011bc:	f7ff f94e 	bl	800045c <__aeabi_ui2d>
 80011c0:	f04f 0200 	mov.w	r2, #0
 80011c4:	4b3c      	ldr	r3, [pc, #240]	; (80012b8 <main+0x208>)
 80011c6:	f7ff f80d 	bl	80001e4 <__adddf3>
 80011ca:	4602      	mov	r2, r0
 80011cc:	460b      	mov	r3, r1
 80011ce:	4610      	mov	r0, r2
 80011d0:	4619      	mov	r1, r3
 80011d2:	f7ff fc6d 	bl	8000ab0 <__aeabi_d2uiz>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4a36      	ldr	r2, [pc, #216]	; (80012b4 <main+0x204>)
 80011da:	6013      	str	r3, [r2, #0]
			  TrajectoryGenerator();
 80011dc:	f001 fa20 	bl	8002620 <TrajectoryGenerator>
		  }

		  //PWM & Motor drive & PID
		  static uint64_t timestamp2 = 0;
			  if (micros()>= timestamp2)
 80011e0:	f000 fb42 	bl	8001868 <micros>
 80011e4:	4b35      	ldr	r3, [pc, #212]	; (80012bc <main+0x20c>)
 80011e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011ea:	4290      	cmp	r0, r2
 80011ec:	eb71 0303 	sbcs.w	r3, r1, r3
 80011f0:	d341      	bcc.n	8001276 <main+0x1c6>
			  {
				  timestamp2 = micros() + 10;
 80011f2:	f000 fb39 	bl	8001868 <micros>
 80011f6:	4602      	mov	r2, r0
 80011f8:	460b      	mov	r3, r1
 80011fa:	f112 040a 	adds.w	r4, r2, #10
 80011fe:	f143 0500 	adc.w	r5, r3, #0
 8001202:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <main+0x20c>)
 8001204:	e9c3 4500 	strd	r4, r5, [r3]
				  duty = PIDcal();
 8001208:	f000 fbb4 	bl	8001974 <PIDcal>
 800120c:	eef0 7a40 	vmov.f32	s15, s0
 8001210:	4b2b      	ldr	r3, [pc, #172]	; (80012c0 <main+0x210>)
 8001212:	edc3 7a00 	vstr	s15, [r3]
				  if (duty >= 0)
 8001216:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <main+0x210>)
 8001218:	edd3 7a00 	vldr	s15, [r3]
 800121c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001224:	db0e      	blt.n	8001244 <main+0x194>
				  {
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001226:	4b16      	ldr	r3, [pc, #88]	; (8001280 <main+0x1d0>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2200      	movs	r2, #0
 800122c:	639a      	str	r2, [r3, #56]	; 0x38
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 800122e:	4b24      	ldr	r3, [pc, #144]	; (80012c0 <main+0x210>)
 8001230:	edd3 7a00 	vldr	s15, [r3]
 8001234:	4b12      	ldr	r3, [pc, #72]	; (8001280 <main+0x1d0>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800123c:	ee17 2a90 	vmov	r2, s15
 8001240:	635a      	str	r2, [r3, #52]	; 0x34
				  {
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
				  }
			  }
			  break;
 8001242:	e018      	b.n	8001276 <main+0x1c6>
				  else if (duty < 0)
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <main+0x210>)
 8001246:	edd3 7a00 	vldr	s15, [r3]
 800124a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800124e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001252:	d400      	bmi.n	8001256 <main+0x1a6>
			  break;
 8001254:	e00f      	b.n	8001276 <main+0x1c6>
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001256:	4b0a      	ldr	r3, [pc, #40]	; (8001280 <main+0x1d0>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2200      	movs	r2, #0
 800125c:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 800125e:	4b18      	ldr	r3, [pc, #96]	; (80012c0 <main+0x210>)
 8001260:	edd3 7a00 	vldr	s15, [r3]
 8001264:	eef1 7a67 	vneg.f32	s15, s15
 8001268:	4b05      	ldr	r3, [pc, #20]	; (8001280 <main+0x1d0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001270:	ee17 2a90 	vmov	r2, s15
 8001274:	639a      	str	r2, [r3, #56]	; 0x38
			  break;
 8001276:	bf00      	nop
	  switch(scheduler)
 8001278:	e757      	b.n	800112a <main+0x7a>
 800127a:	bf00      	nop
 800127c:	20000194 	.word	0x20000194
 8001280:	2000014c 	.word	0x2000014c
 8001284:	20000004 	.word	0x20000004
 8001288:	40020400 	.word	0x40020400
 800128c:	20000000 	.word	0x20000000
 8001290:	200001dc 	.word	0x200001dc
 8001294:	20000418 	.word	0x20000418
 8001298:	200000a4 	.word	0x200000a4
 800129c:	20000268 	.word	0x20000268
 80012a0:	200002e4 	.word	0x200002e4
 80012a4:	20000278 	.word	0x20000278
 80012a8:	20000420 	.word	0x20000420
 80012ac:	20000280 	.word	0x20000280
 80012b0:	2000030c 	.word	0x2000030c
 80012b4:	20000428 	.word	0x20000428
 80012b8:	3fe00000 	.word	0x3fe00000
 80012bc:	20000430 	.word	0x20000430
 80012c0:	200002a0 	.word	0x200002a0

080012c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b094      	sub	sp, #80	; 0x50
 80012c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2230      	movs	r2, #48	; 0x30
 80012d0:	2100      	movs	r1, #0
 80012d2:	4618      	mov	r0, r3
 80012d4:	f005 fc64 	bl	8006ba0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d8:	f107 030c 	add.w	r3, r7, #12
 80012dc:	2200      	movs	r2, #0
 80012de:	601a      	str	r2, [r3, #0]
 80012e0:	605a      	str	r2, [r3, #4]
 80012e2:	609a      	str	r2, [r3, #8]
 80012e4:	60da      	str	r2, [r3, #12]
 80012e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e8:	2300      	movs	r3, #0
 80012ea:	60bb      	str	r3, [r7, #8]
 80012ec:	4b28      	ldr	r3, [pc, #160]	; (8001390 <SystemClock_Config+0xcc>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a27      	ldr	r2, [pc, #156]	; (8001390 <SystemClock_Config+0xcc>)
 80012f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
 80012f8:	4b25      	ldr	r3, [pc, #148]	; (8001390 <SystemClock_Config+0xcc>)
 80012fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	60bb      	str	r3, [r7, #8]
 8001302:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001304:	2300      	movs	r3, #0
 8001306:	607b      	str	r3, [r7, #4]
 8001308:	4b22      	ldr	r3, [pc, #136]	; (8001394 <SystemClock_Config+0xd0>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a21      	ldr	r2, [pc, #132]	; (8001394 <SystemClock_Config+0xd0>)
 800130e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001312:	6013      	str	r3, [r2, #0]
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <SystemClock_Config+0xd0>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001320:	2302      	movs	r3, #2
 8001322:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001324:	2301      	movs	r3, #1
 8001326:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001328:	2310      	movs	r3, #16
 800132a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800132c:	2302      	movs	r3, #2
 800132e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001330:	2300      	movs	r3, #0
 8001332:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001334:	2310      	movs	r3, #16
 8001336:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001338:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800133c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800133e:	2304      	movs	r3, #4
 8001340:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001342:	2304      	movs	r3, #4
 8001344:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001346:	f107 0320 	add.w	r3, r7, #32
 800134a:	4618      	mov	r0, r3
 800134c:	f003 fb62 	bl	8004a14 <HAL_RCC_OscConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001356:	f001 fe7d 	bl	8003054 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800135a:	230f      	movs	r3, #15
 800135c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800135e:	2302      	movs	r3, #2
 8001360:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001366:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800136a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800136c:	2300      	movs	r3, #0
 800136e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001370:	f107 030c 	add.w	r3, r7, #12
 8001374:	2102      	movs	r1, #2
 8001376:	4618      	mov	r0, r3
 8001378:	f003 fdc4 	bl	8004f04 <HAL_RCC_ClockConfig>
 800137c:	4603      	mov	r3, r0
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001382:	f001 fe67 	bl	8003054 <Error_Handler>
  }
}
 8001386:	bf00      	nop
 8001388:	3750      	adds	r7, #80	; 0x50
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	40023800 	.word	0x40023800
 8001394:	40007000 	.word	0x40007000

08001398 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800139e:	463b      	mov	r3, r7
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
 80013a6:	609a      	str	r2, [r3, #8]
 80013a8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013aa:	4b28      	ldr	r3, [pc, #160]	; (800144c <MX_ADC1_Init+0xb4>)
 80013ac:	4a28      	ldr	r2, [pc, #160]	; (8001450 <MX_ADC1_Init+0xb8>)
 80013ae:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013b0:	4b26      	ldr	r3, [pc, #152]	; (800144c <MX_ADC1_Init+0xb4>)
 80013b2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013b6:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b8:	4b24      	ldr	r3, [pc, #144]	; (800144c <MX_ADC1_Init+0xb4>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <MX_ADC1_Init+0xb4>)
 80013c0:	2201      	movs	r2, #1
 80013c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_ADC1_Init+0xb4>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013ca:	4b20      	ldr	r3, [pc, #128]	; (800144c <MX_ADC1_Init+0xb4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_ADC1_Init+0xb4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_ADC1_Init+0xb4>)
 80013da:	4a1e      	ldr	r2, [pc, #120]	; (8001454 <MX_ADC1_Init+0xbc>)
 80013dc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013de:	4b1b      	ldr	r3, [pc, #108]	; (800144c <MX_ADC1_Init+0xb4>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013e4:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_ADC1_Init+0xb4>)
 80013e6:	2202      	movs	r2, #2
 80013e8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013ea:	4b18      	ldr	r3, [pc, #96]	; (800144c <MX_ADC1_Init+0xb4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013f2:	4b16      	ldr	r3, [pc, #88]	; (800144c <MX_ADC1_Init+0xb4>)
 80013f4:	2201      	movs	r2, #1
 80013f6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f8:	4814      	ldr	r0, [pc, #80]	; (800144c <MX_ADC1_Init+0xb4>)
 80013fa:	f002 f8d1 	bl	80035a0 <HAL_ADC_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001404:	f001 fe26 	bl	8003054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001408:	2300      	movs	r3, #0
 800140a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800140c:	2301      	movs	r3, #1
 800140e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001410:	2303      	movs	r3, #3
 8001412:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001414:	463b      	mov	r3, r7
 8001416:	4619      	mov	r1, r3
 8001418:	480c      	ldr	r0, [pc, #48]	; (800144c <MX_ADC1_Init+0xb4>)
 800141a:	f002 fa13 	bl	8003844 <HAL_ADC_ConfigChannel>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001424:	f001 fe16 	bl	8003054 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001428:	2301      	movs	r3, #1
 800142a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 800142c:	2302      	movs	r3, #2
 800142e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001430:	463b      	mov	r3, r7
 8001432:	4619      	mov	r1, r3
 8001434:	4805      	ldr	r0, [pc, #20]	; (800144c <MX_ADC1_Init+0xb4>)
 8001436:	f002 fa05 	bl	8003844 <HAL_ADC_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001440:	f001 fe08 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	200000a4 	.word	0x200000a4
 8001450:	40012000 	.word	0x40012000
 8001454:	0f000001 	.word	0x0f000001

08001458 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b092      	sub	sp, #72	; 0x48
 800145c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001462:	2200      	movs	r2, #0
 8001464:	601a      	str	r2, [r3, #0]
 8001466:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001468:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	2220      	movs	r2, #32
 8001480:	2100      	movs	r1, #0
 8001482:	4618      	mov	r0, r3
 8001484:	f005 fb8c 	bl	8006ba0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001488:	4b39      	ldr	r3, [pc, #228]	; (8001570 <MX_TIM1_Init+0x118>)
 800148a:	4a3a      	ldr	r2, [pc, #232]	; (8001574 <MX_TIM1_Init+0x11c>)
 800148c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 800148e:	4b38      	ldr	r3, [pc, #224]	; (8001570 <MX_TIM1_Init+0x118>)
 8001490:	2253      	movs	r2, #83	; 0x53
 8001492:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001494:	4b36      	ldr	r3, [pc, #216]	; (8001570 <MX_TIM1_Init+0x118>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 800149a:	4b35      	ldr	r3, [pc, #212]	; (8001570 <MX_TIM1_Init+0x118>)
 800149c:	f242 720f 	movw	r2, #9999	; 0x270f
 80014a0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014a2:	4b33      	ldr	r3, [pc, #204]	; (8001570 <MX_TIM1_Init+0x118>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a8:	4b31      	ldr	r3, [pc, #196]	; (8001570 <MX_TIM1_Init+0x118>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ae:	4b30      	ldr	r3, [pc, #192]	; (8001570 <MX_TIM1_Init+0x118>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b4:	482e      	ldr	r0, [pc, #184]	; (8001570 <MX_TIM1_Init+0x118>)
 80014b6:	f003 ffef 	bl	8005498 <HAL_TIM_PWM_Init>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014c0:	f001 fdc8 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c4:	2300      	movs	r3, #0
 80014c6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c8:	2300      	movs	r3, #0
 80014ca:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014d0:	4619      	mov	r1, r3
 80014d2:	4827      	ldr	r0, [pc, #156]	; (8001570 <MX_TIM1_Init+0x118>)
 80014d4:	f004 ffa4 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d001      	beq.n	80014e2 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014de:	f001 fdb9 	bl	8003054 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014e2:	2360      	movs	r3, #96	; 0x60
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014e6:	2300      	movs	r3, #0
 80014e8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014ea:	2300      	movs	r3, #0
 80014ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014ee:	2300      	movs	r3, #0
 80014f0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014f6:	2300      	movs	r3, #0
 80014f8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014fa:	2300      	movs	r3, #0
 80014fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001502:	2200      	movs	r2, #0
 8001504:	4619      	mov	r1, r3
 8001506:	481a      	ldr	r0, [pc, #104]	; (8001570 <MX_TIM1_Init+0x118>)
 8001508:	f004 fb02 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001512:	f001 fd9f 	bl	8003054 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001516:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800151a:	2204      	movs	r2, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4814      	ldr	r0, [pc, #80]	; (8001570 <MX_TIM1_Init+0x118>)
 8001520:	f004 faf6 	bl	8005b10 <HAL_TIM_PWM_ConfigChannel>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800152a:	f001 fd93 	bl	8003054 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800152e:	2300      	movs	r3, #0
 8001530:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001536:	2300      	movs	r3, #0
 8001538:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800153a:	2300      	movs	r3, #0
 800153c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800153e:	2300      	movs	r3, #0
 8001540:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001542:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001546:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800154c:	1d3b      	adds	r3, r7, #4
 800154e:	4619      	mov	r1, r3
 8001550:	4807      	ldr	r0, [pc, #28]	; (8001570 <MX_TIM1_Init+0x118>)
 8001552:	f004 ffd3 	bl	80064fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800155c:	f001 fd7a 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001560:	4803      	ldr	r0, [pc, #12]	; (8001570 <MX_TIM1_Init+0x118>)
 8001562:	f001 feaf 	bl	80032c4 <HAL_TIM_MspPostInit>

}
 8001566:	bf00      	nop
 8001568:	3748      	adds	r7, #72	; 0x48
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	2000014c 	.word	0x2000014c
 8001574:	40010000 	.word	0x40010000

08001578 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08c      	sub	sp, #48	; 0x30
 800157c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800157e:	f107 030c 	add.w	r3, r7, #12
 8001582:	2224      	movs	r2, #36	; 0x24
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f005 fb0a 	bl	8006ba0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158c:	1d3b      	adds	r3, r7, #4
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001594:	4b20      	ldr	r3, [pc, #128]	; (8001618 <MX_TIM3_Init+0xa0>)
 8001596:	4a21      	ldr	r2, [pc, #132]	; (800161c <MX_TIM3_Init+0xa4>)
 8001598:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800159a:	4b1f      	ldr	r3, [pc, #124]	; (8001618 <MX_TIM3_Init+0xa0>)
 800159c:	2200      	movs	r2, #0
 800159e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015a0:	4b1d      	ldr	r3, [pc, #116]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015a2:	2200      	movs	r2, #0
 80015a4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 80015a6:	4b1c      	ldr	r3, [pc, #112]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015ac:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015b4:	4b18      	ldr	r3, [pc, #96]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015ba:	2301      	movs	r3, #1
 80015bc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015c2:	2301      	movs	r3, #1
 80015c4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015d2:	2301      	movs	r3, #1
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015d6:	2300      	movs	r3, #0
 80015d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015da:	2300      	movs	r3, #0
 80015dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	4619      	mov	r1, r3
 80015e4:	480c      	ldr	r0, [pc, #48]	; (8001618 <MX_TIM3_Init+0xa0>)
 80015e6:	f004 f857 	bl	8005698 <HAL_TIM_Encoder_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015f0:	f001 fd30 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	4805      	ldr	r0, [pc, #20]	; (8001618 <MX_TIM3_Init+0xa0>)
 8001602:	f004 ff0d 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 800160c:	f001 fd22 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001610:	bf00      	nop
 8001612:	3730      	adds	r7, #48	; 0x30
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	20000194 	.word	0x20000194
 800161c:	40000400 	.word	0x40000400

08001620 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b086      	sub	sp, #24
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001634:	463b      	mov	r3, r7
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800163c:	4b1d      	ldr	r3, [pc, #116]	; (80016b4 <MX_TIM5_Init+0x94>)
 800163e:	4a1e      	ldr	r2, [pc, #120]	; (80016b8 <MX_TIM5_Init+0x98>)
 8001640:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001642:	4b1c      	ldr	r3, [pc, #112]	; (80016b4 <MX_TIM5_Init+0x94>)
 8001644:	2253      	movs	r2, #83	; 0x53
 8001646:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b1a      	ldr	r3, [pc, #104]	; (80016b4 <MX_TIM5_Init+0x94>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <MX_TIM5_Init+0x94>)
 8001650:	f04f 32ff 	mov.w	r2, #4294967295
 8001654:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001656:	4b17      	ldr	r3, [pc, #92]	; (80016b4 <MX_TIM5_Init+0x94>)
 8001658:	2200      	movs	r2, #0
 800165a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165c:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <MX_TIM5_Init+0x94>)
 800165e:	2200      	movs	r2, #0
 8001660:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001662:	4814      	ldr	r0, [pc, #80]	; (80016b4 <MX_TIM5_Init+0x94>)
 8001664:	f003 fe6e 	bl	8005344 <HAL_TIM_Base_Init>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800166e:	f001 fcf1 	bl	8003054 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001672:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001676:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001678:	f107 0308 	add.w	r3, r7, #8
 800167c:	4619      	mov	r1, r3
 800167e:	480d      	ldr	r0, [pc, #52]	; (80016b4 <MX_TIM5_Init+0x94>)
 8001680:	f004 fb08 	bl	8005c94 <HAL_TIM_ConfigClockSource>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	d001      	beq.n	800168e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800168a:	f001 fce3 	bl	8003054 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001696:	463b      	mov	r3, r7
 8001698:	4619      	mov	r1, r3
 800169a:	4806      	ldr	r0, [pc, #24]	; (80016b4 <MX_TIM5_Init+0x94>)
 800169c:	f004 fec0 	bl	8006420 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80016a6:	f001 fcd5 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016aa:	bf00      	nop
 80016ac:	3718      	adds	r7, #24
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200001dc 	.word	0x200001dc
 80016b8:	40000c00 	.word	0x40000c00

080016bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016c0:	4b11      	ldr	r3, [pc, #68]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c2:	4a12      	ldr	r2, [pc, #72]	; (800170c <MX_USART2_UART_Init+0x50>)
 80016c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016c6:	4b10      	ldr	r3, [pc, #64]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016ce:	4b0e      	ldr	r3, [pc, #56]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016da:	4b0b      	ldr	r3, [pc, #44]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016e0:	4b09      	ldr	r3, [pc, #36]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e2:	220c      	movs	r2, #12
 80016e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016e6:	4b08      	ldr	r3, [pc, #32]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016ec:	4b06      	ldr	r3, [pc, #24]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016f2:	4805      	ldr	r0, [pc, #20]	; (8001708 <MX_USART2_UART_Init+0x4c>)
 80016f4:	f004 ff68 	bl	80065c8 <HAL_UART_Init>
 80016f8:	4603      	mov	r3, r0
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d001      	beq.n	8001702 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016fe:	f001 fca9 	bl	8003054 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001702:	bf00      	nop
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000224 	.word	0x20000224
 800170c:	40004400 	.word	0x40004400

08001710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b082      	sub	sp, #8
 8001714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001716:	2300      	movs	r3, #0
 8001718:	607b      	str	r3, [r7, #4]
 800171a:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_DMA_Init+0x3c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	4a0b      	ldr	r2, [pc, #44]	; (800174c <MX_DMA_Init+0x3c>)
 8001720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001724:	6313      	str	r3, [r2, #48]	; 0x30
 8001726:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_DMA_Init+0x3c>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800172e:	607b      	str	r3, [r7, #4]
 8001730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001732:	2200      	movs	r2, #0
 8001734:	2100      	movs	r1, #0
 8001736:	2038      	movs	r0, #56	; 0x38
 8001738:	f002 fc0f 	bl	8003f5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800173c:	2038      	movs	r0, #56	; 0x38
 800173e:	f002 fc28 	bl	8003f92 <HAL_NVIC_EnableIRQ>

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	40023800 	.word	0x40023800

08001750 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b08a      	sub	sp, #40	; 0x28
 8001754:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
 8001764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001766:	2300      	movs	r3, #0
 8001768:	613b      	str	r3, [r7, #16]
 800176a:	4b3b      	ldr	r3, [pc, #236]	; (8001858 <MX_GPIO_Init+0x108>)
 800176c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800176e:	4a3a      	ldr	r2, [pc, #232]	; (8001858 <MX_GPIO_Init+0x108>)
 8001770:	f043 0304 	orr.w	r3, r3, #4
 8001774:	6313      	str	r3, [r2, #48]	; 0x30
 8001776:	4b38      	ldr	r3, [pc, #224]	; (8001858 <MX_GPIO_Init+0x108>)
 8001778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177a:	f003 0304 	and.w	r3, r3, #4
 800177e:	613b      	str	r3, [r7, #16]
 8001780:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	4b34      	ldr	r3, [pc, #208]	; (8001858 <MX_GPIO_Init+0x108>)
 8001788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178a:	4a33      	ldr	r2, [pc, #204]	; (8001858 <MX_GPIO_Init+0x108>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001790:	6313      	str	r3, [r2, #48]	; 0x30
 8001792:	4b31      	ldr	r3, [pc, #196]	; (8001858 <MX_GPIO_Init+0x108>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800179a:	60fb      	str	r3, [r7, #12]
 800179c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	60bb      	str	r3, [r7, #8]
 80017a2:	4b2d      	ldr	r3, [pc, #180]	; (8001858 <MX_GPIO_Init+0x108>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	4a2c      	ldr	r2, [pc, #176]	; (8001858 <MX_GPIO_Init+0x108>)
 80017a8:	f043 0301 	orr.w	r3, r3, #1
 80017ac:	6313      	str	r3, [r2, #48]	; 0x30
 80017ae:	4b2a      	ldr	r3, [pc, #168]	; (8001858 <MX_GPIO_Init+0x108>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	f003 0301 	and.w	r3, r3, #1
 80017b6:	60bb      	str	r3, [r7, #8]
 80017b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	607b      	str	r3, [r7, #4]
 80017be:	4b26      	ldr	r3, [pc, #152]	; (8001858 <MX_GPIO_Init+0x108>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	4a25      	ldr	r2, [pc, #148]	; (8001858 <MX_GPIO_Init+0x108>)
 80017c4:	f043 0302 	orr.w	r3, r3, #2
 80017c8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ca:	4b23      	ldr	r3, [pc, #140]	; (8001858 <MX_GPIO_Init+0x108>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	607b      	str	r3, [r7, #4]
 80017d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80017d6:	2200      	movs	r2, #0
 80017d8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017dc:	481f      	ldr	r0, [pc, #124]	; (800185c <MX_GPIO_Init+0x10c>)
 80017de:	f003 f8ff 	bl	80049e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ee:	2300      	movs	r3, #0
 80017f0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f2:	f107 0314 	add.w	r3, r7, #20
 80017f6:	4619      	mov	r1, r3
 80017f8:	4819      	ldr	r0, [pc, #100]	; (8001860 <MX_GPIO_Init+0x110>)
 80017fa:	f002 ff55 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 80017fe:	f44f 6386 	mov.w	r3, #1072	; 0x430
 8001802:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001804:	2300      	movs	r3, #0
 8001806:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001808:	2300      	movs	r3, #0
 800180a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	f107 0314 	add.w	r3, r7, #20
 8001810:	4619      	mov	r1, r3
 8001812:	4814      	ldr	r0, [pc, #80]	; (8001864 <MX_GPIO_Init+0x114>)
 8001814:	f002 ff48 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 8001818:	2361      	movs	r3, #97	; 0x61
 800181a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800181c:	2300      	movs	r3, #0
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	480c      	ldr	r0, [pc, #48]	; (800185c <MX_GPIO_Init+0x10c>)
 800182c:	f002 ff3c 	bl	80046a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001830:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8001834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001836:	2301      	movs	r3, #1
 8001838:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183a:	2300      	movs	r3, #0
 800183c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183e:	2300      	movs	r3, #0
 8001840:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001842:	f107 0314 	add.w	r3, r7, #20
 8001846:	4619      	mov	r1, r3
 8001848:	4804      	ldr	r0, [pc, #16]	; (800185c <MX_GPIO_Init+0x10c>)
 800184a:	f002 ff2d 	bl	80046a8 <HAL_GPIO_Init>

}
 800184e:	bf00      	nop
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	40023800 	.word	0x40023800
 800185c:	40020400 	.word	0x40020400
 8001860:	40020800 	.word	0x40020800
 8001864:	40020000 	.word	0x40020000

08001868 <micros>:
	}
}


uint64_t micros()
{
 8001868:	b4b0      	push	{r4, r5, r7}
 800186a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <micros+0x2c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001872:	2200      	movs	r2, #0
 8001874:	4618      	mov	r0, r3
 8001876:	4611      	mov	r1, r2
 8001878:	4b07      	ldr	r3, [pc, #28]	; (8001898 <micros+0x30>)
 800187a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187e:	1884      	adds	r4, r0, r2
 8001880:	eb41 0503 	adc.w	r5, r1, r3
 8001884:	4622      	mov	r2, r4
 8001886:	462b      	mov	r3, r5
}
 8001888:	4610      	mov	r0, r2
 800188a:	4619      	mov	r1, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	bcb0      	pop	{r4, r5, r7}
 8001890:	4770      	bx	lr
 8001892:	bf00      	nop
 8001894:	200001dc 	.word	0x200001dc
 8001898:	20000270 	.word	0x20000270

0800189c <QEIEncoderPositionVelocity_Update>:


void QEIEncoderPositionVelocity_Update()
{
 800189c:	b5b0      	push	{r4, r5, r7, lr}
 800189e:	b084      	sub	sp, #16
 80018a0:	af00      	add	r7, sp, #0
	QEIData.timestamp[0] = micros();
 80018a2:	f7ff ffe1 	bl	8001868 <micros>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	492e      	ldr	r1, [pc, #184]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018ac:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint32_t counterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 80018b0:	4b2d      	ldr	r3, [pc, #180]	; (8001968 <QEIEncoderPositionVelocity_Update+0xcc>)
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	60bb      	str	r3, [r7, #8]
	QEIData.data[0] = counterPosition;
 80018b8:	4a2a      	ldr	r2, [pc, #168]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018ba:	68bb      	ldr	r3, [r7, #8]
 80018bc:	6013      	str	r3, [r2, #0]

	QEIData.QEIPosition = counterPosition % 1600;
 80018be:	68ba      	ldr	r2, [r7, #8]
 80018c0:	4b2a      	ldr	r3, [pc, #168]	; (800196c <QEIEncoderPositionVelocity_Update+0xd0>)
 80018c2:	fba3 1302 	umull	r1, r3, r3, r2
 80018c6:	0a5b      	lsrs	r3, r3, #9
 80018c8:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80018cc:	fb01 f303 	mul.w	r3, r1, r3
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	ee07 3a90 	vmov	s15, r3
 80018d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018dc:	edc3 7a06 	vstr	s15, [r3, #24]

	int32_t diffPosition = QEIData.data[0]-QEIData.data[1];
 80018e0:	4b20      	ldr	r3, [pc, #128]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	60fb      	str	r3, [r7, #12]
	float difftime = (QEIData.timestamp[0]-QEIData.timestamp[1]);
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018ee:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018f2:	4b1c      	ldr	r3, [pc, #112]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 80018f4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018f8:	1a84      	subs	r4, r0, r2
 80018fa:	eb61 0503 	sbc.w	r5, r1, r3
 80018fe:	4620      	mov	r0, r4
 8001900:	4629      	mov	r1, r5
 8001902:	f7ff fa0d 	bl	8000d20 <__aeabi_ul2f>
 8001906:	4603      	mov	r3, r0
 8001908:	607b      	str	r3, [r7, #4]

	if(diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001910:	dd03      	ble.n	800191a <QEIEncoderPositionVelocity_Update+0x7e>
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001918:	60fb      	str	r3, [r7, #12]
	if(diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001920:	da03      	bge.n	800192a <QEIEncoderPositionVelocity_Update+0x8e>
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001928:	60fb      	str	r3, [r7, #12]

	QEIData.QEIVelocity = (diffPosition * 1000000)/difftime;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <QEIEncoderPositionVelocity_Update+0xd4>)
 800192e:	fb02 f303 	mul.w	r3, r2, r3
 8001932:	ee07 3a90 	vmov	s15, r3
 8001936:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800193a:	ed97 7a01 	vldr	s14, [r7, #4]
 800193e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001942:	4b08      	ldr	r3, [pc, #32]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001944:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIData.data[1] = QEIData.data[0];
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a05      	ldr	r2, [pc, #20]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 800194e:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001950:	4b04      	ldr	r3, [pc, #16]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001952:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001956:	4903      	ldr	r1, [pc, #12]	; (8001964 <QEIEncoderPositionVelocity_Update+0xc8>)
 8001958:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 800195c:	bf00      	nop
 800195e:	3710      	adds	r7, #16
 8001960:	46bd      	mov	sp, r7
 8001962:	bdb0      	pop	{r4, r5, r7, pc}
 8001964:	20000280 	.word	0x20000280
 8001968:	20000194 	.word	0x20000194
 800196c:	51eb851f 	.word	0x51eb851f
 8001970:	000f4240 	.word	0x000f4240

08001974 <PIDcal>:

float PIDcal()
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8001978:	4b50      	ldr	r3, [pc, #320]	; (8001abc <PIDcal+0x148>)
 800197a:	ed93 7a00 	vldr	s14, [r3]
 800197e:	4b50      	ldr	r3, [pc, #320]	; (8001ac0 <PIDcal+0x14c>)
 8001980:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001984:	ee07 3a90 	vmov	s15, r3
 8001988:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001990:	4b4c      	ldr	r3, [pc, #304]	; (8001ac4 <PIDcal+0x150>)
 8001992:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 8001996:	4b4c      	ldr	r3, [pc, #304]	; (8001ac8 <PIDcal+0x154>)
 8001998:	ed93 7a00 	vldr	s14, [r3]
 800199c:	4b49      	ldr	r3, [pc, #292]	; (8001ac4 <PIDcal+0x150>)
 800199e:	edd3 7a00 	vldr	s15, [r3]
 80019a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a6:	4b48      	ldr	r3, [pc, #288]	; (8001ac8 <PIDcal+0x154>)
 80019a8:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <PIDcal+0x150>)
 80019ae:	ed93 7a00 	vldr	s14, [r3]
 80019b2:	4b46      	ldr	r3, [pc, #280]	; (8001acc <PIDcal+0x158>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019bc:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <PIDcal+0x15c>)
 80019be:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 80019c2:	4b44      	ldr	r3, [pc, #272]	; (8001ad4 <PIDcal+0x160>)
 80019c4:	ed93 7a00 	vldr	s14, [r3]
 80019c8:	4b3e      	ldr	r3, [pc, #248]	; (8001ac4 <PIDcal+0x150>)
 80019ca:	edd3 7a00 	vldr	s15, [r3]
 80019ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d2:	4b41      	ldr	r3, [pc, #260]	; (8001ad8 <PIDcal+0x164>)
 80019d4:	edd3 6a00 	vldr	s13, [r3]
 80019d8:	4b3b      	ldr	r3, [pc, #236]	; (8001ac8 <PIDcal+0x154>)
 80019da:	edd3 7a00 	vldr	s15, [r3]
 80019de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019e6:	4b3d      	ldr	r3, [pc, #244]	; (8001adc <PIDcal+0x168>)
 80019e8:	edd3 6a00 	vldr	s13, [r3]
 80019ec:	4b38      	ldr	r3, [pc, #224]	; (8001ad0 <PIDcal+0x15c>)
 80019ee:	edd3 7a00 	vldr	s15, [r3]
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019fa:	4b39      	ldr	r3, [pc, #228]	; (8001ae0 <PIDcal+0x16c>)
 80019fc:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8001a00:	4b30      	ldr	r3, [pc, #192]	; (8001ac4 <PIDcal+0x150>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a31      	ldr	r2, [pc, #196]	; (8001acc <PIDcal+0x158>)
 8001a06:	6013      	str	r3, [r2, #0]

	//velocity control
	sumsetvelocity = u_position + setvelocity;
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <PIDcal+0x16c>)
 8001a0a:	ed93 7a00 	vldr	s14, [r3]
 8001a0e:	4b35      	ldr	r3, [pc, #212]	; (8001ae4 <PIDcal+0x170>)
 8001a10:	edd3 7a00 	vldr	s15, [r3]
 8001a14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a18:	4b33      	ldr	r3, [pc, #204]	; (8001ae8 <PIDcal+0x174>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
	errorvelocity = sumsetvelocity - QEIData.QEIVelocity;
 8001a1e:	4b32      	ldr	r3, [pc, #200]	; (8001ae8 <PIDcal+0x174>)
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	4b31      	ldr	r3, [pc, #196]	; (8001aec <PIDcal+0x178>)
 8001a26:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a2e:	4b30      	ldr	r3, [pc, #192]	; (8001af0 <PIDcal+0x17c>)
 8001a30:	edc3 7a00 	vstr	s15, [r3]

	integral_v = integral_v + errorvelocity;
 8001a34:	4b2f      	ldr	r3, [pc, #188]	; (8001af4 <PIDcal+0x180>)
 8001a36:	ed93 7a00 	vldr	s14, [r3]
 8001a3a:	4b2d      	ldr	r3, [pc, #180]	; (8001af0 <PIDcal+0x17c>)
 8001a3c:	edd3 7a00 	vldr	s15, [r3]
 8001a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a44:	4b2b      	ldr	r3, [pc, #172]	; (8001af4 <PIDcal+0x180>)
 8001a46:	edc3 7a00 	vstr	s15, [r3]
	derivative_v = errorvelocity - pre_errorvelocity;
 8001a4a:	4b29      	ldr	r3, [pc, #164]	; (8001af0 <PIDcal+0x17c>)
 8001a4c:	ed93 7a00 	vldr	s14, [r3]
 8001a50:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <PIDcal+0x184>)
 8001a52:	edd3 7a00 	vldr	s15, [r3]
 8001a56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a5a:	4b28      	ldr	r3, [pc, #160]	; (8001afc <PIDcal+0x188>)
 8001a5c:	edc3 7a00 	vstr	s15, [r3]
	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
 8001a60:	4b27      	ldr	r3, [pc, #156]	; (8001b00 <PIDcal+0x18c>)
 8001a62:	ed93 7a00 	vldr	s14, [r3]
 8001a66:	4b22      	ldr	r3, [pc, #136]	; (8001af0 <PIDcal+0x17c>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <PIDcal+0x190>)
 8001a72:	edd3 6a00 	vldr	s13, [r3]
 8001a76:	4b1f      	ldr	r3, [pc, #124]	; (8001af4 <PIDcal+0x180>)
 8001a78:	edd3 7a00 	vldr	s15, [r3]
 8001a7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a80:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a84:	4b20      	ldr	r3, [pc, #128]	; (8001b08 <PIDcal+0x194>)
 8001a86:	edd3 6a00 	vldr	s13, [r3]
 8001a8a:	4b1c      	ldr	r3, [pc, #112]	; (8001afc <PIDcal+0x188>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a98:	4b1c      	ldr	r3, [pc, #112]	; (8001b0c <PIDcal+0x198>)
 8001a9a:	edc3 7a00 	vstr	s15, [r3]

	pre_errorvelocity = errorvelocity;
 8001a9e:	4b14      	ldr	r3, [pc, #80]	; (8001af0 <PIDcal+0x17c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a15      	ldr	r2, [pc, #84]	; (8001af8 <PIDcal+0x184>)
 8001aa4:	6013      	str	r3, [r2, #0]

	return duty;
 8001aa6:	4b19      	ldr	r3, [pc, #100]	; (8001b0c <PIDcal+0x198>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	ee07 3a90 	vmov	s15, r3
}
 8001aae:	eeb0 0a67 	vmov.f32	s0, s15
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab8:	4770      	bx	lr
 8001aba:	bf00      	nop
 8001abc:	200002e8 	.word	0x200002e8
 8001ac0:	200002e4 	.word	0x200002e4
 8001ac4:	200002ec 	.word	0x200002ec
 8001ac8:	200002fc 	.word	0x200002fc
 8001acc:	200002f4 	.word	0x200002f4
 8001ad0:	20000300 	.word	0x20000300
 8001ad4:	20000010 	.word	0x20000010
 8001ad8:	20000320 	.word	0x20000320
 8001adc:	20000324 	.word	0x20000324
 8001ae0:	200002f0 	.word	0x200002f0
 8001ae4:	20000310 	.word	0x20000310
 8001ae8:	20000314 	.word	0x20000314
 8001aec:	20000280 	.word	0x20000280
 8001af0:	20000318 	.word	0x20000318
 8001af4:	20000304 	.word	0x20000304
 8001af8:	200002f8 	.word	0x200002f8
 8001afc:	20000308 	.word	0x20000308
 8001b00:	20000014 	.word	0x20000014
 8001b04:	20000328 	.word	0x20000328
 8001b08:	2000032c 	.word	0x2000032c
 8001b0c:	200002a0 	.word	0x200002a0

08001b10 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001b14:	2140      	movs	r1, #64	; 0x40
 8001b16:	4837      	ldr	r0, [pc, #220]	; (8001bf4 <JoystickPinUpdate+0xe4>)
 8001b18:	f002 ff4a 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	461a      	mov	r2, r3
 8001b20:	4b35      	ldr	r3, [pc, #212]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b22:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8001b24:	4b34      	ldr	r3, [pc, #208]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d107      	bne.n	8001b3c <JoystickPinUpdate+0x2c>
 8001b2c:	4b32      	ldr	r3, [pc, #200]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d103      	bne.n	8001b3c <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8001b34:	4b30      	ldr	r3, [pc, #192]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	609a      	str	r2, [r3, #8]
 8001b3a:	e002      	b.n	8001b42 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8001b3c:	4b2e      	ldr	r3, [pc, #184]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8001b42:	4b2d      	ldr	r3, [pc, #180]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <JoystickPinUpdate+0xe8>)
 8001b48:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001b4a:	2120      	movs	r1, #32
 8001b4c:	482b      	ldr	r0, [pc, #172]	; (8001bfc <JoystickPinUpdate+0xec>)
 8001b4e:	f002 ff2f 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	4b2a      	ldr	r3, [pc, #168]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b58:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8001b5a:	4b29      	ldr	r3, [pc, #164]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d107      	bne.n	8001b72 <JoystickPinUpdate+0x62>
 8001b62:	4b27      	ldr	r3, [pc, #156]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d103      	bne.n	8001b72 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8001b6a:	4b25      	ldr	r3, [pc, #148]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	609a      	str	r2, [r3, #8]
 8001b70:	e002      	b.n	8001b78 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8001b72:	4b23      	ldr	r3, [pc, #140]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8001b78:	4b21      	ldr	r3, [pc, #132]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	4a20      	ldr	r2, [pc, #128]	; (8001c00 <JoystickPinUpdate+0xf0>)
 8001b7e:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001b80:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b84:	481d      	ldr	r0, [pc, #116]	; (8001bfc <JoystickPinUpdate+0xec>)
 8001b86:	f002 ff13 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	461a      	mov	r2, r3
 8001b8e:	4b1d      	ldr	r3, [pc, #116]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001b90:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8001b92:	4b1c      	ldr	r3, [pc, #112]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b01      	cmp	r3, #1
 8001b98:	d107      	bne.n	8001baa <JoystickPinUpdate+0x9a>
 8001b9a:	4b1a      	ldr	r3, [pc, #104]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d103      	bne.n	8001baa <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8001ba2:	4b18      	ldr	r3, [pc, #96]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	609a      	str	r2, [r3, #8]
 8001ba8:	e002      	b.n	8001bb0 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8001baa:	4b16      	ldr	r3, [pc, #88]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8001bb0:	4b14      	ldr	r3, [pc, #80]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	4a13      	ldr	r2, [pc, #76]	; (8001c04 <JoystickPinUpdate+0xf4>)
 8001bb6:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001bb8:	2120      	movs	r1, #32
 8001bba:	480e      	ldr	r0, [pc, #56]	; (8001bf4 <JoystickPinUpdate+0xe4>)
 8001bbc:	f002 fef8 	bl	80049b0 <HAL_GPIO_ReadPin>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	461a      	mov	r2, r3
 8001bc4:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001bc6:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8001bc8:	4b0f      	ldr	r3, [pc, #60]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d107      	bne.n	8001be0 <JoystickPinUpdate+0xd0>
 8001bd0:	4b0d      	ldr	r3, [pc, #52]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d103      	bne.n	8001be0 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001bda:	2201      	movs	r2, #1
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	e002      	b.n	8001be6 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8001be0:	4b09      	ldr	r3, [pc, #36]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8001be6:	4b08      	ldr	r3, [pc, #32]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	4a07      	ldr	r2, [pc, #28]	; (8001c08 <JoystickPinUpdate+0xf8>)
 8001bec:	6013      	str	r3, [r2, #0]
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	40020400 	.word	0x40020400
 8001bf8:	200003e8 	.word	0x200003e8
 8001bfc:	40020000 	.word	0x40020000
 8001c00:	200003f4 	.word	0x200003f4
 8001c04:	20000400 	.word	0x20000400
 8001c08:	2000040c 	.word	0x2000040c

08001c0c <JoystickControl>:

void JoystickControl()
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
	static int JoySpeed = 0;

	if(RoughButton.flag == 1)
 8001c10:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <JoystickControl+0xe4>)
 8001c12:	689b      	ldr	r3, [r3, #8]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d106      	bne.n	8001c26 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8001c18:	4b36      	ldr	r3, [pc, #216]	; (8001cf4 <JoystickControl+0xe8>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <JoystickControl+0xe4>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	609a      	str	r2, [r3, #8]
 8001c24:	e009      	b.n	8001c3a <JoystickControl+0x2e>
	}
	else if(FineButton.flag == 1)
 8001c26:	4b34      	ldr	r3, [pc, #208]	; (8001cf8 <JoystickControl+0xec>)
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d105      	bne.n	8001c3a <JoystickControl+0x2e>
	{
		JoySpeed = 1;
 8001c2e:	4b31      	ldr	r3, [pc, #196]	; (8001cf4 <JoystickControl+0xe8>)
 8001c30:	2201      	movs	r2, #1
 8001c32:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8001c34:	4b30      	ldr	r3, [pc, #192]	; (8001cf8 <JoystickControl+0xec>)
 8001c36:	2200      	movs	r2, #0
 8001c38:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8001c3a:	4b2e      	ldr	r3, [pc, #184]	; (8001cf4 <JoystickControl+0xe8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d002      	beq.n	8001c48 <JoystickControl+0x3c>
 8001c42:	2b01      	cmp	r3, #1
 8001c44:	d028      	beq.n	8001c98 <JoystickControl+0x8c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
		}
		break;
	}
}
 8001c46:	e04d      	b.n	8001ce4 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001c48:	4b2c      	ldr	r3, [pc, #176]	; (8001cfc <JoystickControl+0xf0>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f640 0266 	movw	r2, #2150	; 0x866
 8001c50:	4293      	cmp	r3, r2
 8001c52:	dd09      	ble.n	8001c68 <JoystickControl+0x5c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c54:	4b2a      	ldr	r3, [pc, #168]	; (8001d00 <JoystickControl+0xf4>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001c5c:	4b28      	ldr	r3, [pc, #160]	; (8001d00 <JoystickControl+0xf4>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c64:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c66:	e03d      	b.n	8001ce4 <JoystickControl+0xd8>
		else if(XYSwitch[1] < 2000)
 8001c68:	4b24      	ldr	r3, [pc, #144]	; (8001cfc <JoystickControl+0xf0>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001c70:	da09      	bge.n	8001c86 <JoystickControl+0x7a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,1000);
 8001c72:	4b23      	ldr	r3, [pc, #140]	; (8001d00 <JoystickControl+0xf4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c7c:	4b20      	ldr	r3, [pc, #128]	; (8001d00 <JoystickControl+0xf4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	2200      	movs	r2, #0
 8001c82:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c84:	e02e      	b.n	8001ce4 <JoystickControl+0xd8>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c86:	4b1e      	ldr	r3, [pc, #120]	; (8001d00 <JoystickControl+0xf4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c8e:	4b1c      	ldr	r3, [pc, #112]	; (8001d00 <JoystickControl+0xf4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2200      	movs	r2, #0
 8001c94:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001c96:	e025      	b.n	8001ce4 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001c98:	4b18      	ldr	r3, [pc, #96]	; (8001cfc <JoystickControl+0xf0>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f640 0266 	movw	r2, #2150	; 0x866
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	dd08      	ble.n	8001cb6 <JoystickControl+0xaa>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001ca4:	4b16      	ldr	r3, [pc, #88]	; (8001d00 <JoystickControl+0xf4>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 8001cac:	4b14      	ldr	r3, [pc, #80]	; (8001d00 <JoystickControl+0xf4>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	22fa      	movs	r2, #250	; 0xfa
 8001cb2:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001cb4:	e015      	b.n	8001ce2 <JoystickControl+0xd6>
		else if(XYSwitch[1] < 2000)
 8001cb6:	4b11      	ldr	r3, [pc, #68]	; (8001cfc <JoystickControl+0xf0>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cbe:	da08      	bge.n	8001cd2 <JoystickControl+0xc6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,250);
 8001cc0:	4b0f      	ldr	r3, [pc, #60]	; (8001d00 <JoystickControl+0xf4>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	22fa      	movs	r2, #250	; 0xfa
 8001cc6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001cc8:	4b0d      	ldr	r3, [pc, #52]	; (8001d00 <JoystickControl+0xf4>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2200      	movs	r2, #0
 8001cce:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001cd0:	e007      	b.n	8001ce2 <JoystickControl+0xd6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001cd2:	4b0b      	ldr	r3, [pc, #44]	; (8001d00 <JoystickControl+0xf4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001cda:	4b09      	ldr	r3, [pc, #36]	; (8001d00 <JoystickControl+0xf4>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001ce2:	bf00      	nop
}
 8001ce4:	bf00      	nop
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	2000040c 	.word	0x2000040c
 8001cf4:	20000438 	.word	0x20000438
 8001cf8:	20000400 	.word	0x20000400
 8001cfc:	20000418 	.word	0x20000418
 8001d00:	2000014c 	.word	0x2000014c

08001d04 <JoystickLocationState>:

void JoystickLocationState()
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	ed2d 8b02 	vpush	{d8}
 8001d0a:	af00      	add	r7, sp, #0
	static int state = 0;
	switch(state)
 8001d0c:	4b1c      	ldr	r3, [pc, #112]	; (8001d80 <JoystickLocationState+0x7c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2b04      	cmp	r3, #4
 8001d12:	f200 846e 	bhi.w	80025f2 <JoystickLocationState+0x8ee>
 8001d16:	a201      	add	r2, pc, #4	; (adr r2, 8001d1c <JoystickLocationState+0x18>)
 8001d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d1c:	08001d31 	.word	0x08001d31
 8001d20:	08001d95 	.word	0x08001d95
 8001d24:	08002177 	.word	0x08002177
 8001d28:	080021e5 	.word	0x080021e5
 8001d2c:	080025c5 	.word	0x080025c5
	{
	case 0:
		PickTray.L1[1] = 0;
 8001d30:	4b14      	ldr	r3, [pc, #80]	; (8001d84 <JoystickLocationState+0x80>)
 8001d32:	f04f 0200 	mov.w	r2, #0
 8001d36:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8001d38:	4b12      	ldr	r3, [pc, #72]	; (8001d84 <JoystickLocationState+0x80>)
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	60da      	str	r2, [r3, #12]
		PlaceTray.L1[1] = 0;
 8001d40:	4b11      	ldr	r3, [pc, #68]	; (8001d88 <JoystickLocationState+0x84>)
 8001d42:	f04f 0200 	mov.w	r2, #0
 8001d46:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8001d48:	4b0f      	ldr	r3, [pc, #60]	; (8001d88 <JoystickLocationState+0x84>)
 8001d4a:	f04f 0200 	mov.w	r2, #0
 8001d4e:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8001d50:	4b0e      	ldr	r3, [pc, #56]	; (8001d8c <JoystickLocationState+0x88>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	f040 8443 	bne.w	80025e0 <JoystickLocationState+0x8dc>
		{
			PickTray.L1[1] = position;
 8001d5a:	4b0d      	ldr	r3, [pc, #52]	; (8001d90 <JoystickLocationState+0x8c>)
 8001d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d60:	ee07 3a90 	vmov	s15, r3
 8001d64:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d68:	4b06      	ldr	r3, [pc, #24]	; (8001d84 <JoystickLocationState+0x80>)
 8001d6a:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <JoystickLocationState+0x88>)
 8001d70:	2200      	movs	r2, #0
 8001d72:	609a      	str	r2, [r3, #8]
			state = 1;
 8001d74:	4b02      	ldr	r3, [pc, #8]	; (8001d80 <JoystickLocationState+0x7c>)
 8001d76:	2201      	movs	r2, #1
 8001d78:	601a      	str	r2, [r3, #0]
		}
		break;
 8001d7a:	f000 bc31 	b.w	80025e0 <JoystickLocationState+0x8dc>
 8001d7e:	bf00      	nop
 8001d80:	2000043c 	.word	0x2000043c
 8001d84:	20000330 	.word	0x20000330
 8001d88:	20000388 	.word	0x20000388
 8001d8c:	200003e8 	.word	0x200003e8
 8001d90:	200002e4 	.word	0x200002e4
	case 1:
		if (GetPositionButton.flag == 1)
 8001d94:	4bd6      	ldr	r3, [pc, #856]	; (80020f0 <JoystickLocationState+0x3ec>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f040 81e0 	bne.w	800215e <JoystickLocationState+0x45a>
		{
			PickTray.L2[1] = position;
 8001d9e:	4bd5      	ldr	r3, [pc, #852]	; (80020f4 <JoystickLocationState+0x3f0>)
 8001da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	4bd2      	ldr	r3, [pc, #840]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dae:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001db2:	4bcf      	ldr	r3, [pc, #828]	; (80020f0 <JoystickLocationState+0x3ec>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
			cos_Theta = PickTray.L2[0]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001db8:	4bcf      	ldr	r3, [pc, #828]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dba:	ed93 8a02 	vldr	s16, [r3, #8]
 8001dbe:	4bce      	ldr	r3, [pc, #824]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dc0:	ed93 7a02 	vldr	s14, [r3, #8]
 8001dc4:	4bcc      	ldr	r3, [pc, #816]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001dce:	4bca      	ldr	r3, [pc, #808]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dd0:	edd3 6a02 	vldr	s13, [r3, #8]
 8001dd4:	4bc8      	ldr	r3, [pc, #800]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dd6:	edd3 7a00 	vldr	s15, [r3]
 8001dda:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001dde:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001de2:	4bc5      	ldr	r3, [pc, #788]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001de4:	edd3 6a03 	vldr	s13, [r3, #12]
 8001de8:	4bc3      	ldr	r3, [pc, #780]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dea:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dee:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001df2:	4bc1      	ldr	r3, [pc, #772]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001df4:	ed93 6a03 	vldr	s12, [r3, #12]
 8001df8:	4bbf      	ldr	r3, [pc, #764]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001dfa:	edd3 7a01 	vldr	s15, [r3, #4]
 8001dfe:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e02:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0a:	eeb0 0a67 	vmov.f32	s0, s15
 8001e0e:	f004 fefb 	bl	8006c08 <sqrtf>
 8001e12:	eeb0 7a40 	vmov.f32	s14, s0
 8001e16:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e1a:	4bb8      	ldr	r3, [pc, #736]	; (80020fc <JoystickLocationState+0x3f8>)
 8001e1c:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PickTray.L2[1]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001e20:	4bb5      	ldr	r3, [pc, #724]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e22:	ed93 8a03 	vldr	s16, [r3, #12]
 8001e26:	4bb4      	ldr	r3, [pc, #720]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e28:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e2c:	4bb2      	ldr	r3, [pc, #712]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e2e:	edd3 7a00 	vldr	s15, [r3]
 8001e32:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e36:	4bb0      	ldr	r3, [pc, #704]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e38:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e3c:	4bae      	ldr	r3, [pc, #696]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e46:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4a:	4bab      	ldr	r3, [pc, #684]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e4c:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e50:	4ba9      	ldr	r3, [pc, #676]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e52:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e56:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e5a:	4ba7      	ldr	r3, [pc, #668]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e5c:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e60:	4ba5      	ldr	r3, [pc, #660]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001e62:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e66:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e72:	eeb0 0a67 	vmov.f32	s0, s15
 8001e76:	f004 fec7 	bl	8006c08 <sqrtf>
 8001e7a:	eeb0 7a40 	vmov.f32	s14, s0
 8001e7e:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e82:	4b9f      	ldr	r3, [pc, #636]	; (8002100 <JoystickLocationState+0x3fc>)
 8001e84:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 8001e88:	4b9c      	ldr	r3, [pc, #624]	; (80020fc <JoystickLocationState+0x3f8>)
 8001e8a:	edd3 7a00 	vldr	s15, [r3]
 8001e8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e92:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001e96:	4b9a      	ldr	r3, [pc, #616]	; (8002100 <JoystickLocationState+0x3fc>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ea0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	4b93      	ldr	r3, [pc, #588]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001eaa:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8001eae:	4b94      	ldr	r3, [pc, #592]	; (8002100 <JoystickLocationState+0x3fc>)
 8001eb0:	edd3 7a00 	vldr	s15, [r3]
 8001eb4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001eb8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ebc:	4b8f      	ldr	r3, [pc, #572]	; (80020fc <JoystickLocationState+0x3f8>)
 8001ebe:	edd3 7a00 	vldr	s15, [r3]
 8001ec2:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001ec6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001eca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ece:	4b8a      	ldr	r3, [pc, #552]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001ed0:	edc3 7a05 	vstr	s15, [r3, #20]

			PickTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8001ed4:	4b89      	ldr	r3, [pc, #548]	; (80020fc <JoystickLocationState+0x3f8>)
 8001ed6:	edd3 7a00 	vldr	s15, [r3]
 8001eda:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001ede:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001ee2:	4b87      	ldr	r3, [pc, #540]	; (8002100 <JoystickLocationState+0x3fc>)
 8001ee4:	edd3 7a00 	vldr	s15, [r3]
 8001ee8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001eec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef4:	4b80      	ldr	r3, [pc, #512]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001ef6:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 8001efa:	4b81      	ldr	r3, [pc, #516]	; (8002100 <JoystickLocationState+0x3fc>)
 8001efc:	edd3 7a00 	vldr	s15, [r3]
 8001f00:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f08:	4b7c      	ldr	r3, [pc, #496]	; (80020fc <JoystickLocationState+0x3f8>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001f12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f1a:	4b77      	ldr	r3, [pc, #476]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001f1c:	edc3 7a07 	vstr	s15, [r3, #28]

			PickTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8001f20:	4b76      	ldr	r3, [pc, #472]	; (80020fc <JoystickLocationState+0x3f8>)
 8001f22:	edd3 7a00 	vldr	s15, [r3]
 8001f26:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800210c <JoystickLocationState+0x408>
 8001f2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f2e:	4b74      	ldr	r3, [pc, #464]	; (8002100 <JoystickLocationState+0x3fc>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f40:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001f42:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8001f46:	4b6e      	ldr	r3, [pc, #440]	; (8002100 <JoystickLocationState+0x3fc>)
 8001f48:	edd3 7a00 	vldr	s15, [r3]
 8001f4c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800210c <JoystickLocationState+0x408>
 8001f50:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f54:	4b69      	ldr	r3, [pc, #420]	; (80020fc <JoystickLocationState+0x3f8>)
 8001f56:	edd3 7a00 	vldr	s15, [r3]
 8001f5a:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001f5e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f66:	4b64      	ldr	r3, [pc, #400]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001f68:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PickTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8001f6c:	4b63      	ldr	r3, [pc, #396]	; (80020fc <JoystickLocationState+0x3f8>)
 8001f6e:	edd3 7a00 	vldr	s15, [r3]
 8001f72:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f76:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f7a:	4b61      	ldr	r3, [pc, #388]	; (8002100 <JoystickLocationState+0x3fc>)
 8001f7c:	edd3 7a00 	vldr	s15, [r3]
 8001f80:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001f84:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8c:	4b5a      	ldr	r3, [pc, #360]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001f8e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8001f92:	4b5b      	ldr	r3, [pc, #364]	; (8002100 <JoystickLocationState+0x3fc>)
 8001f94:	edd3 7a00 	vldr	s15, [r3]
 8001f98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fa0:	4b56      	ldr	r3, [pc, #344]	; (80020fc <JoystickLocationState+0x3f8>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001faa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fae:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb2:	4b51      	ldr	r3, [pc, #324]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001fb4:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PickTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8001fb8:	4b50      	ldr	r3, [pc, #320]	; (80020fc <JoystickLocationState+0x3f8>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fc2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fc6:	4b4e      	ldr	r3, [pc, #312]	; (8002100 <JoystickLocationState+0x3fc>)
 8001fc8:	edd3 7a00 	vldr	s15, [r3]
 8001fcc:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001fd0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd8:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <JoystickLocationState+0x3f4>)
 8001fda:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8001fde:	4b48      	ldr	r3, [pc, #288]	; (8002100 <JoystickLocationState+0x3fc>)
 8001fe0:	edd3 7a00 	vldr	s15, [r3]
 8001fe4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001fe8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fec:	4b43      	ldr	r3, [pc, #268]	; (80020fc <JoystickLocationState+0x3f8>)
 8001fee:	edd3 7a00 	vldr	s15, [r3]
 8001ff2:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001ff6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ffa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ffe:	4b3e      	ldr	r3, [pc, #248]	; (80020f8 <JoystickLocationState+0x3f4>)
 8002000:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8002004:	4b3d      	ldr	r3, [pc, #244]	; (80020fc <JoystickLocationState+0x3f8>)
 8002006:	edd3 7a00 	vldr	s15, [r3]
 800200a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800210c <JoystickLocationState+0x408>
 800200e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002012:	4b3b      	ldr	r3, [pc, #236]	; (8002100 <JoystickLocationState+0x3fc>)
 8002014:	edd3 7a00 	vldr	s15, [r3]
 8002018:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800201c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002020:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002024:	4b34      	ldr	r3, [pc, #208]	; (80020f8 <JoystickLocationState+0x3f4>)
 8002026:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PickTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 800202a:	4b35      	ldr	r3, [pc, #212]	; (8002100 <JoystickLocationState+0x3fc>)
 800202c:	edd3 7a00 	vldr	s15, [r3]
 8002030:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800210c <JoystickLocationState+0x408>
 8002034:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002038:	4b30      	ldr	r3, [pc, #192]	; (80020fc <JoystickLocationState+0x3f8>)
 800203a:	edd3 7a00 	vldr	s15, [r3]
 800203e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002042:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002046:	ee77 7a27 	vadd.f32	s15, s14, s15
 800204a:	4b2b      	ldr	r3, [pc, #172]	; (80020f8 <JoystickLocationState+0x3f4>)
 800204c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8002050:	4b2a      	ldr	r3, [pc, #168]	; (80020fc <JoystickLocationState+0x3f8>)
 8002052:	edd3 7a00 	vldr	s15, [r3]
 8002056:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800205a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800205e:	4b28      	ldr	r3, [pc, #160]	; (8002100 <JoystickLocationState+0x3fc>)
 8002060:	edd3 7a00 	vldr	s15, [r3]
 8002064:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002104 <JoystickLocationState+0x400>
 8002068:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800206c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002070:	4b21      	ldr	r3, [pc, #132]	; (80020f8 <JoystickLocationState+0x3f4>)
 8002072:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PickTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 8002076:	4b22      	ldr	r3, [pc, #136]	; (8002100 <JoystickLocationState+0x3fc>)
 8002078:	edd3 7a00 	vldr	s15, [r3]
 800207c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002080:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002084:	4b1d      	ldr	r3, [pc, #116]	; (80020fc <JoystickLocationState+0x3f8>)
 8002086:	edd3 7a00 	vldr	s15, [r3]
 800208a:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002108 <JoystickLocationState+0x404>
 800208e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002092:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002096:	4b18      	ldr	r3, [pc, #96]	; (80020f8 <JoystickLocationState+0x3f4>)
 8002098:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 800209c:	4b17      	ldr	r3, [pc, #92]	; (80020fc <JoystickLocationState+0x3f8>)
 800209e:	edd3 7a00 	vldr	s15, [r3]
 80020a2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <JoystickLocationState+0x3fc>)
 80020ac:	edd3 7a00 	vldr	s15, [r3]
 80020b0:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002104 <JoystickLocationState+0x400>
 80020b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020bc:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <JoystickLocationState+0x3f4>)
 80020be:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PickTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <JoystickLocationState+0x3fc>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020d0:	4b0a      	ldr	r3, [pc, #40]	; (80020fc <JoystickLocationState+0x3f8>)
 80020d2:	edd3 7a00 	vldr	s15, [r3]
 80020d6:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002108 <JoystickLocationState+0x404>
 80020da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020e2:	4b05      	ldr	r3, [pc, #20]	; (80020f8 <JoystickLocationState+0x3f4>)
 80020e4:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 80020e8:	4b04      	ldr	r3, [pc, #16]	; (80020fc <JoystickLocationState+0x3f8>)
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	e00f      	b.n	8002110 <JoystickLocationState+0x40c>
 80020f0:	200003e8 	.word	0x200003e8
 80020f4:	200002e4 	.word	0x200002e4
 80020f8:	20000330 	.word	0x20000330
 80020fc:	200003e0 	.word	0x200003e0
 8002100:	200003e4 	.word	0x200003e4
 8002104:	42200000 	.word	0x42200000
 8002108:	c2200000 	.word	0xc2200000
 800210c:	42480000 	.word	0x42480000
 8002110:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800210c <JoystickLocationState+0x408>
 8002114:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002118:	4b27      	ldr	r3, [pc, #156]	; (80021b8 <JoystickLocationState+0x4b4>)
 800211a:	edd3 7a00 	vldr	s15, [r3]
 800211e:	eddf 6a27 	vldr	s13, [pc, #156]	; 80021bc <JoystickLocationState+0x4b8>
 8002122:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002126:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212a:	4b25      	ldr	r3, [pc, #148]	; (80021c0 <JoystickLocationState+0x4bc>)
 800212c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PickTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8002130:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <JoystickLocationState+0x4b4>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80021c4 <JoystickLocationState+0x4c0>
 800213a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800213e:	4b22      	ldr	r3, [pc, #136]	; (80021c8 <JoystickLocationState+0x4c4>)
 8002140:	edd3 7a00 	vldr	s15, [r3]
 8002144:	eddf 6a21 	vldr	s13, [pc, #132]	; 80021cc <JoystickLocationState+0x4c8>
 8002148:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800214c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002150:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <JoystickLocationState+0x4bc>)
 8002152:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 2;
 8002156:	4b1e      	ldr	r3, [pc, #120]	; (80021d0 <JoystickLocationState+0x4cc>)
 8002158:	2202      	movs	r2, #2
 800215a:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 800215c:	e242      	b.n	80025e4 <JoystickLocationState+0x8e0>
		else if (ResetButton.flag == 1)
 800215e:	4b1d      	ldr	r3, [pc, #116]	; (80021d4 <JoystickLocationState+0x4d0>)
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2b01      	cmp	r3, #1
 8002164:	f040 823e 	bne.w	80025e4 <JoystickLocationState+0x8e0>
			ResetButton.flag = 0;
 8002168:	4b1a      	ldr	r3, [pc, #104]	; (80021d4 <JoystickLocationState+0x4d0>)
 800216a:	2200      	movs	r2, #0
 800216c:	609a      	str	r2, [r3, #8]
			state = 0;
 800216e:	4b18      	ldr	r3, [pc, #96]	; (80021d0 <JoystickLocationState+0x4cc>)
 8002170:	2200      	movs	r2, #0
 8002172:	601a      	str	r2, [r3, #0]
		break;
 8002174:	e236      	b.n	80025e4 <JoystickLocationState+0x8e0>
	case 2:
		if (GetPositionButton.flag == 1)
 8002176:	4b18      	ldr	r3, [pc, #96]	; (80021d8 <JoystickLocationState+0x4d4>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	2b01      	cmp	r3, #1
 800217c:	d110      	bne.n	80021a0 <JoystickLocationState+0x49c>
		{
			PlaceTray.L1[1] = position;
 800217e:	4b17      	ldr	r3, [pc, #92]	; (80021dc <JoystickLocationState+0x4d8>)
 8002180:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002184:	ee07 3a90 	vmov	s15, r3
 8002188:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <JoystickLocationState+0x4dc>)
 800218e:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8002192:	4b11      	ldr	r3, [pc, #68]	; (80021d8 <JoystickLocationState+0x4d4>)
 8002194:	2200      	movs	r2, #0
 8002196:	609a      	str	r2, [r3, #8]
			state = 3;
 8002198:	4b0d      	ldr	r3, [pc, #52]	; (80021d0 <JoystickLocationState+0x4cc>)
 800219a:	2203      	movs	r2, #3
 800219c:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 800219e:	e223      	b.n	80025e8 <JoystickLocationState+0x8e4>
		else if (ResetButton.flag == 1)
 80021a0:	4b0c      	ldr	r3, [pc, #48]	; (80021d4 <JoystickLocationState+0x4d0>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	2b01      	cmp	r3, #1
 80021a6:	f040 821f 	bne.w	80025e8 <JoystickLocationState+0x8e4>
			ResetButton.flag = 0;
 80021aa:	4b0a      	ldr	r3, [pc, #40]	; (80021d4 <JoystickLocationState+0x4d0>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	609a      	str	r2, [r3, #8]
			state = 0;
 80021b0:	4b07      	ldr	r3, [pc, #28]	; (80021d0 <JoystickLocationState+0x4cc>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
		break;
 80021b6:	e217      	b.n	80025e8 <JoystickLocationState+0x8e4>
 80021b8:	200003e4 	.word	0x200003e4
 80021bc:	42200000 	.word	0x42200000
 80021c0:	20000330 	.word	0x20000330
 80021c4:	42480000 	.word	0x42480000
 80021c8:	200003e0 	.word	0x200003e0
 80021cc:	c2200000 	.word	0xc2200000
 80021d0:	2000043c 	.word	0x2000043c
 80021d4:	200003f4 	.word	0x200003f4
 80021d8:	200003e8 	.word	0x200003e8
 80021dc:	200002e4 	.word	0x200002e4
 80021e0:	20000388 	.word	0x20000388
	case 3:
		if (GetPositionButton.flag == 1)
 80021e4:	4bd6      	ldr	r3, [pc, #856]	; (8002540 <JoystickLocationState+0x83c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 81e0 	bne.w	80025ae <JoystickLocationState+0x8aa>
		{
			PlaceTray.L2[1] = position;
 80021ee:	4bd5      	ldr	r3, [pc, #852]	; (8002544 <JoystickLocationState+0x840>)
 80021f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fc:	4bd2      	ldr	r3, [pc, #840]	; (8002548 <JoystickLocationState+0x844>)
 80021fe:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8002202:	4bcf      	ldr	r3, [pc, #828]	; (8002540 <JoystickLocationState+0x83c>)
 8002204:	2200      	movs	r2, #0
 8002206:	609a      	str	r2, [r3, #8]
			cos_Theta = PlaceTray.L2[0]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8002208:	4bcf      	ldr	r3, [pc, #828]	; (8002548 <JoystickLocationState+0x844>)
 800220a:	ed93 8a02 	vldr	s16, [r3, #8]
 800220e:	4bce      	ldr	r3, [pc, #824]	; (8002548 <JoystickLocationState+0x844>)
 8002210:	ed93 7a02 	vldr	s14, [r3, #8]
 8002214:	4bcc      	ldr	r3, [pc, #816]	; (8002548 <JoystickLocationState+0x844>)
 8002216:	edd3 7a00 	vldr	s15, [r3]
 800221a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800221e:	4bca      	ldr	r3, [pc, #808]	; (8002548 <JoystickLocationState+0x844>)
 8002220:	edd3 6a02 	vldr	s13, [r3, #8]
 8002224:	4bc8      	ldr	r3, [pc, #800]	; (8002548 <JoystickLocationState+0x844>)
 8002226:	edd3 7a00 	vldr	s15, [r3]
 800222a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800222e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002232:	4bc5      	ldr	r3, [pc, #788]	; (8002548 <JoystickLocationState+0x844>)
 8002234:	edd3 6a03 	vldr	s13, [r3, #12]
 8002238:	4bc3      	ldr	r3, [pc, #780]	; (8002548 <JoystickLocationState+0x844>)
 800223a:	edd3 7a01 	vldr	s15, [r3, #4]
 800223e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002242:	4bc1      	ldr	r3, [pc, #772]	; (8002548 <JoystickLocationState+0x844>)
 8002244:	ed93 6a03 	vldr	s12, [r3, #12]
 8002248:	4bbf      	ldr	r3, [pc, #764]	; (8002548 <JoystickLocationState+0x844>)
 800224a:	edd3 7a01 	vldr	s15, [r3, #4]
 800224e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002252:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800225a:	eeb0 0a67 	vmov.f32	s0, s15
 800225e:	f004 fcd3 	bl	8006c08 <sqrtf>
 8002262:	eeb0 7a40 	vmov.f32	s14, s0
 8002266:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800226a:	4bb8      	ldr	r3, [pc, #736]	; (800254c <JoystickLocationState+0x848>)
 800226c:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PlaceTray.L2[1]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 8002270:	4bb5      	ldr	r3, [pc, #724]	; (8002548 <JoystickLocationState+0x844>)
 8002272:	ed93 8a03 	vldr	s16, [r3, #12]
 8002276:	4bb4      	ldr	r3, [pc, #720]	; (8002548 <JoystickLocationState+0x844>)
 8002278:	ed93 7a02 	vldr	s14, [r3, #8]
 800227c:	4bb2      	ldr	r3, [pc, #712]	; (8002548 <JoystickLocationState+0x844>)
 800227e:	edd3 7a00 	vldr	s15, [r3]
 8002282:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002286:	4bb0      	ldr	r3, [pc, #704]	; (8002548 <JoystickLocationState+0x844>)
 8002288:	edd3 6a02 	vldr	s13, [r3, #8]
 800228c:	4bae      	ldr	r3, [pc, #696]	; (8002548 <JoystickLocationState+0x844>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002296:	ee27 7a27 	vmul.f32	s14, s14, s15
 800229a:	4bab      	ldr	r3, [pc, #684]	; (8002548 <JoystickLocationState+0x844>)
 800229c:	edd3 6a03 	vldr	s13, [r3, #12]
 80022a0:	4ba9      	ldr	r3, [pc, #676]	; (8002548 <JoystickLocationState+0x844>)
 80022a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022a6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022aa:	4ba7      	ldr	r3, [pc, #668]	; (8002548 <JoystickLocationState+0x844>)
 80022ac:	ed93 6a03 	vldr	s12, [r3, #12]
 80022b0:	4ba5      	ldr	r3, [pc, #660]	; (8002548 <JoystickLocationState+0x844>)
 80022b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80022b6:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80022be:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022c2:	eeb0 0a67 	vmov.f32	s0, s15
 80022c6:	f004 fc9f 	bl	8006c08 <sqrtf>
 80022ca:	eeb0 7a40 	vmov.f32	s14, s0
 80022ce:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80022d2:	4b9f      	ldr	r3, [pc, #636]	; (8002550 <JoystickLocationState+0x84c>)
 80022d4:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 80022d8:	4b9c      	ldr	r3, [pc, #624]	; (800254c <JoystickLocationState+0x848>)
 80022da:	edd3 7a00 	vldr	s15, [r3]
 80022de:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80022e2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022e6:	4b9a      	ldr	r3, [pc, #616]	; (8002550 <JoystickLocationState+0x84c>)
 80022e8:	edd3 7a00 	vldr	s15, [r3]
 80022ec:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80022f0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80022f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80022f8:	4b93      	ldr	r3, [pc, #588]	; (8002548 <JoystickLocationState+0x844>)
 80022fa:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 80022fe:	4b94      	ldr	r3, [pc, #592]	; (8002550 <JoystickLocationState+0x84c>)
 8002300:	edd3 7a00 	vldr	s15, [r3]
 8002304:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002308:	ee27 7a87 	vmul.f32	s14, s15, s14
 800230c:	4b8f      	ldr	r3, [pc, #572]	; (800254c <JoystickLocationState+0x848>)
 800230e:	edd3 7a00 	vldr	s15, [r3]
 8002312:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002316:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800231a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800231e:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <JoystickLocationState+0x844>)
 8002320:	edc3 7a05 	vstr	s15, [r3, #20]

			PlaceTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8002324:	4b89      	ldr	r3, [pc, #548]	; (800254c <JoystickLocationState+0x848>)
 8002326:	edd3 7a00 	vldr	s15, [r3]
 800232a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800232e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002332:	4b87      	ldr	r3, [pc, #540]	; (8002550 <JoystickLocationState+0x84c>)
 8002334:	edd3 7a00 	vldr	s15, [r3]
 8002338:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800233c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002344:	4b80      	ldr	r3, [pc, #512]	; (8002548 <JoystickLocationState+0x844>)
 8002346:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 800234a:	4b81      	ldr	r3, [pc, #516]	; (8002550 <JoystickLocationState+0x84c>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002354:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002358:	4b7c      	ldr	r3, [pc, #496]	; (800254c <JoystickLocationState+0x848>)
 800235a:	edd3 7a00 	vldr	s15, [r3]
 800235e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002366:	ee77 7a27 	vadd.f32	s15, s14, s15
 800236a:	4b77      	ldr	r3, [pc, #476]	; (8002548 <JoystickLocationState+0x844>)
 800236c:	edc3 7a07 	vstr	s15, [r3, #28]

			PlaceTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8002370:	4b76      	ldr	r3, [pc, #472]	; (800254c <JoystickLocationState+0x848>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	ed9f 7a79 	vldr	s14, [pc, #484]	; 800255c <JoystickLocationState+0x858>
 800237a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800237e:	4b74      	ldr	r3, [pc, #464]	; (8002550 <JoystickLocationState+0x84c>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002388:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800238c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002390:	4b6d      	ldr	r3, [pc, #436]	; (8002548 <JoystickLocationState+0x844>)
 8002392:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8002396:	4b6e      	ldr	r3, [pc, #440]	; (8002550 <JoystickLocationState+0x84c>)
 8002398:	edd3 7a00 	vldr	s15, [r3]
 800239c:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 800255c <JoystickLocationState+0x858>
 80023a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023a4:	4b69      	ldr	r3, [pc, #420]	; (800254c <JoystickLocationState+0x848>)
 80023a6:	edd3 7a00 	vldr	s15, [r3]
 80023aa:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80023ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b6:	4b64      	ldr	r3, [pc, #400]	; (8002548 <JoystickLocationState+0x844>)
 80023b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PlaceTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 80023bc:	4b63      	ldr	r3, [pc, #396]	; (800254c <JoystickLocationState+0x848>)
 80023be:	edd3 7a00 	vldr	s15, [r3]
 80023c2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023ca:	4b61      	ldr	r3, [pc, #388]	; (8002550 <JoystickLocationState+0x84c>)
 80023cc:	edd3 7a00 	vldr	s15, [r3]
 80023d0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80023d4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <JoystickLocationState+0x844>)
 80023de:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 80023e2:	4b5b      	ldr	r3, [pc, #364]	; (8002550 <JoystickLocationState+0x84c>)
 80023e4:	edd3 7a00 	vldr	s15, [r3]
 80023e8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80023ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023f0:	4b56      	ldr	r3, [pc, #344]	; (800254c <JoystickLocationState+0x848>)
 80023f2:	edd3 7a00 	vldr	s15, [r3]
 80023f6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80023fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002402:	4b51      	ldr	r3, [pc, #324]	; (8002548 <JoystickLocationState+0x844>)
 8002404:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PlaceTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8002408:	4b50      	ldr	r3, [pc, #320]	; (800254c <JoystickLocationState+0x848>)
 800240a:	edd3 7a00 	vldr	s15, [r3]
 800240e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002416:	4b4e      	ldr	r3, [pc, #312]	; (8002550 <JoystickLocationState+0x84c>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002420:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002424:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002428:	4b47      	ldr	r3, [pc, #284]	; (8002548 <JoystickLocationState+0x844>)
 800242a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 800242e:	4b48      	ldr	r3, [pc, #288]	; (8002550 <JoystickLocationState+0x84c>)
 8002430:	edd3 7a00 	vldr	s15, [r3]
 8002434:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002438:	ee27 7a87 	vmul.f32	s14, s15, s14
 800243c:	4b43      	ldr	r3, [pc, #268]	; (800254c <JoystickLocationState+0x848>)
 800243e:	edd3 7a00 	vldr	s15, [r3]
 8002442:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002446:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800244a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800244e:	4b3e      	ldr	r3, [pc, #248]	; (8002548 <JoystickLocationState+0x844>)
 8002450:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8002454:	4b3d      	ldr	r3, [pc, #244]	; (800254c <JoystickLocationState+0x848>)
 8002456:	edd3 7a00 	vldr	s15, [r3]
 800245a:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800255c <JoystickLocationState+0x858>
 800245e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002462:	4b3b      	ldr	r3, [pc, #236]	; (8002550 <JoystickLocationState+0x84c>)
 8002464:	edd3 7a00 	vldr	s15, [r3]
 8002468:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800246c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002470:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002474:	4b34      	ldr	r3, [pc, #208]	; (8002548 <JoystickLocationState+0x844>)
 8002476:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PlaceTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 800247a:	4b35      	ldr	r3, [pc, #212]	; (8002550 <JoystickLocationState+0x84c>)
 800247c:	edd3 7a00 	vldr	s15, [r3]
 8002480:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800255c <JoystickLocationState+0x858>
 8002484:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002488:	4b30      	ldr	r3, [pc, #192]	; (800254c <JoystickLocationState+0x848>)
 800248a:	edd3 7a00 	vldr	s15, [r3]
 800248e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <JoystickLocationState+0x844>)
 800249c:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 80024a0:	4b2a      	ldr	r3, [pc, #168]	; (800254c <JoystickLocationState+0x848>)
 80024a2:	edd3 7a00 	vldr	s15, [r3]
 80024a6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024aa:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024ae:	4b28      	ldr	r3, [pc, #160]	; (8002550 <JoystickLocationState+0x84c>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002554 <JoystickLocationState+0x850>
 80024b8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024c0:	4b21      	ldr	r3, [pc, #132]	; (8002548 <JoystickLocationState+0x844>)
 80024c2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PlaceTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 80024c6:	4b22      	ldr	r3, [pc, #136]	; (8002550 <JoystickLocationState+0x84c>)
 80024c8:	edd3 7a00 	vldr	s15, [r3]
 80024cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024d4:	4b1d      	ldr	r3, [pc, #116]	; (800254c <JoystickLocationState+0x848>)
 80024d6:	edd3 7a00 	vldr	s15, [r3]
 80024da:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8002558 <JoystickLocationState+0x854>
 80024de:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024e6:	4b18      	ldr	r3, [pc, #96]	; (8002548 <JoystickLocationState+0x844>)
 80024e8:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 80024ec:	4b17      	ldr	r3, [pc, #92]	; (800254c <JoystickLocationState+0x848>)
 80024ee:	edd3 7a00 	vldr	s15, [r3]
 80024f2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80024f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024fa:	4b15      	ldr	r3, [pc, #84]	; (8002550 <JoystickLocationState+0x84c>)
 80024fc:	edd3 7a00 	vldr	s15, [r3]
 8002500:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002554 <JoystickLocationState+0x850>
 8002504:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002508:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250c:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <JoystickLocationState+0x844>)
 800250e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PlaceTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8002512:	4b0f      	ldr	r3, [pc, #60]	; (8002550 <JoystickLocationState+0x84c>)
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800251c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002520:	4b0a      	ldr	r3, [pc, #40]	; (800254c <JoystickLocationState+0x848>)
 8002522:	edd3 7a00 	vldr	s15, [r3]
 8002526:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8002558 <JoystickLocationState+0x854>
 800252a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800252e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002532:	4b05      	ldr	r3, [pc, #20]	; (8002548 <JoystickLocationState+0x844>)
 8002534:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 8002538:	4b04      	ldr	r3, [pc, #16]	; (800254c <JoystickLocationState+0x848>)
 800253a:	edd3 7a00 	vldr	s15, [r3]
 800253e:	e00f      	b.n	8002560 <JoystickLocationState+0x85c>
 8002540:	200003e8 	.word	0x200003e8
 8002544:	200002e4 	.word	0x200002e4
 8002548:	20000388 	.word	0x20000388
 800254c:	200003e0 	.word	0x200003e0
 8002550:	200003e4 	.word	0x200003e4
 8002554:	42200000 	.word	0x42200000
 8002558:	c2200000 	.word	0xc2200000
 800255c:	42480000 	.word	0x42480000
 8002560:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 800255c <JoystickLocationState+0x858>
 8002564:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002568:	4b24      	ldr	r3, [pc, #144]	; (80025fc <JoystickLocationState+0x8f8>)
 800256a:	edd3 7a00 	vldr	s15, [r3]
 800256e:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002600 <JoystickLocationState+0x8fc>
 8002572:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002576:	ee77 7a27 	vadd.f32	s15, s14, s15
 800257a:	4b22      	ldr	r3, [pc, #136]	; (8002604 <JoystickLocationState+0x900>)
 800257c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PlaceTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8002580:	4b1e      	ldr	r3, [pc, #120]	; (80025fc <JoystickLocationState+0x8f8>)
 8002582:	edd3 7a00 	vldr	s15, [r3]
 8002586:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002608 <JoystickLocationState+0x904>
 800258a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800258e:	4b1f      	ldr	r3, [pc, #124]	; (800260c <JoystickLocationState+0x908>)
 8002590:	edd3 7a00 	vldr	s15, [r3]
 8002594:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002610 <JoystickLocationState+0x90c>
 8002598:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800259c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <JoystickLocationState+0x900>)
 80025a2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 4;
 80025a6:	4b1b      	ldr	r3, [pc, #108]	; (8002614 <JoystickLocationState+0x910>)
 80025a8:	2204      	movs	r2, #4
 80025aa:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 80025ac:	e01e      	b.n	80025ec <JoystickLocationState+0x8e8>
		else if (ResetButton.flag == 1)
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <JoystickLocationState+0x914>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d11a      	bne.n	80025ec <JoystickLocationState+0x8e8>
			ResetButton.flag = 0;
 80025b6:	4b18      	ldr	r3, [pc, #96]	; (8002618 <JoystickLocationState+0x914>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	609a      	str	r2, [r3, #8]
			state = 0;
 80025bc:	4b15      	ldr	r3, [pc, #84]	; (8002614 <JoystickLocationState+0x910>)
 80025be:	2200      	movs	r2, #0
 80025c0:	601a      	str	r2, [r3, #0]
		break;
 80025c2:	e013      	b.n	80025ec <JoystickLocationState+0x8e8>
	case 4:
		scheduler = 1;
 80025c4:	4b15      	ldr	r3, [pc, #84]	; (800261c <JoystickLocationState+0x918>)
 80025c6:	2201      	movs	r2, #1
 80025c8:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 80025ca:	4b13      	ldr	r3, [pc, #76]	; (8002618 <JoystickLocationState+0x914>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10e      	bne.n	80025f0 <JoystickLocationState+0x8ec>
		{
			ResetButton.flag = 0;
 80025d2:	4b11      	ldr	r3, [pc, #68]	; (8002618 <JoystickLocationState+0x914>)
 80025d4:	2200      	movs	r2, #0
 80025d6:	609a      	str	r2, [r3, #8]
			state = 0;
 80025d8:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <JoystickLocationState+0x910>)
 80025da:	2200      	movs	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
		}
		break;
 80025de:	e007      	b.n	80025f0 <JoystickLocationState+0x8ec>
		break;
 80025e0:	bf00      	nop
 80025e2:	e006      	b.n	80025f2 <JoystickLocationState+0x8ee>
		break;
 80025e4:	bf00      	nop
 80025e6:	e004      	b.n	80025f2 <JoystickLocationState+0x8ee>
		break;
 80025e8:	bf00      	nop
 80025ea:	e002      	b.n	80025f2 <JoystickLocationState+0x8ee>
		break;
 80025ec:	bf00      	nop
 80025ee:	e000      	b.n	80025f2 <JoystickLocationState+0x8ee>
		break;
 80025f0:	bf00      	nop
	}
}
 80025f2:	bf00      	nop
 80025f4:	46bd      	mov	sp, r7
 80025f6:	ecbd 8b02 	vpop	{d8}
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	200003e4 	.word	0x200003e4
 8002600:	42200000 	.word	0x42200000
 8002604:	20000388 	.word	0x20000388
 8002608:	42480000 	.word	0x42480000
 800260c:	200003e0 	.word	0x200003e0
 8002610:	c2200000 	.word	0xc2200000
 8002614:	2000043c 	.word	0x2000043c
 8002618:	200003f4 	.word	0x200003f4
 800261c:	20000268 	.word	0x20000268

08002620 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8002620:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002624:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8002626:	4b9c      	ldr	r3, [pc, #624]	; (8002898 <TrajectoryGenerator+0x278>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2b02      	cmp	r3, #2
 800262c:	f000 82e0 	beq.w	8002bf0 <TrajectoryGenerator+0x5d0>
 8002630:	2b02      	cmp	r3, #2
 8002632:	f300 84f1 	bgt.w	8003018 <TrajectoryGenerator+0x9f8>
 8002636:	2b00      	cmp	r3, #0
 8002638:	d004      	beq.n	8002644 <TrajectoryGenerator+0x24>
 800263a:	2b01      	cmp	r3, #1
 800263c:	f000 8152 	beq.w	80028e4 <TrajectoryGenerator+0x2c4>
//	 else if(time > initime+tacc+tconst+tdec){
//		 Trajectstate = 3;
//	 }
	 break;
	}
}
 8002640:	f000 bcea 	b.w	8003018 <TrajectoryGenerator+0x9f8>
		qi = position;
 8002644:	4b95      	ldr	r3, [pc, #596]	; (800289c <TrajectoryGenerator+0x27c>)
 8002646:	f9b3 3000 	ldrsh.w	r3, [r3]
 800264a:	ee07 3a90 	vmov	s15, r3
 800264e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002652:	4b93      	ldr	r3, [pc, #588]	; (80028a0 <TrajectoryGenerator+0x280>)
 8002654:	edc3 7a00 	vstr	s15, [r3]
		qf = 10000; //nonny
 8002658:	4b92      	ldr	r3, [pc, #584]	; (80028a4 <TrajectoryGenerator+0x284>)
 800265a:	4a93      	ldr	r2, [pc, #588]	; (80028a8 <TrajectoryGenerator+0x288>)
 800265c:	601a      	str	r2, [r3, #0]
		qdi = 0;
 800265e:	4b93      	ldr	r3, [pc, #588]	; (80028ac <TrajectoryGenerator+0x28c>)
 8002660:	f04f 0200 	mov.w	r2, #0
 8002664:	601a      	str	r2, [r3, #0]
		qd_max = 11111.11; //pulse/s
 8002666:	4b92      	ldr	r3, [pc, #584]	; (80028b0 <TrajectoryGenerator+0x290>)
 8002668:	4a92      	ldr	r2, [pc, #584]	; (80028b4 <TrajectoryGenerator+0x294>)
 800266a:	601a      	str	r2, [r3, #0]
		qdd_max = 8888.88; //pulse/s
 800266c:	4b92      	ldr	r3, [pc, #584]	; (80028b8 <TrajectoryGenerator+0x298>)
 800266e:	4a93      	ldr	r2, [pc, #588]	; (80028bc <TrajectoryGenerator+0x29c>)
 8002670:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 8002672:	4b8c      	ldr	r3, [pc, #560]	; (80028a4 <TrajectoryGenerator+0x284>)
 8002674:	ed93 7a00 	vldr	s14, [r3]
 8002678:	4b89      	ldr	r3, [pc, #548]	; (80028a0 <TrajectoryGenerator+0x280>)
 800267a:	edd3 7a00 	vldr	s15, [r3]
 800267e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002682:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002686:	dd20      	ble.n	80026ca <TrajectoryGenerator+0xaa>
		  t_half = sqrt((qf-qi)/qdd_max);
 8002688:	4b86      	ldr	r3, [pc, #536]	; (80028a4 <TrajectoryGenerator+0x284>)
 800268a:	ed93 7a00 	vldr	s14, [r3]
 800268e:	4b84      	ldr	r3, [pc, #528]	; (80028a0 <TrajectoryGenerator+0x280>)
 8002690:	edd3 7a00 	vldr	s15, [r3]
 8002694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002698:	4b87      	ldr	r3, [pc, #540]	; (80028b8 <TrajectoryGenerator+0x298>)
 800269a:	edd3 7a00 	vldr	s15, [r3]
 800269e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026a2:	ee16 0a90 	vmov	r0, s13
 80026a6:	f7fd fefb 	bl	80004a0 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	ec43 2b10 	vmov	d0, r2, r3
 80026b2:	f004 fa7d 	bl	8006bb0 <sqrt>
 80026b6:	ec53 2b10 	vmov	r2, r3, d0
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa17 	bl	8000af0 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a7e      	ldr	r2, [pc, #504]	; (80028c0 <TrajectoryGenerator+0x2a0>)
 80026c6:	6013      	str	r3, [r2, #0]
 80026c8:	e02c      	b.n	8002724 <TrajectoryGenerator+0x104>
	  else if(qf < qi)
 80026ca:	4b76      	ldr	r3, [pc, #472]	; (80028a4 <TrajectoryGenerator+0x284>)
 80026cc:	ed93 7a00 	vldr	s14, [r3]
 80026d0:	4b73      	ldr	r3, [pc, #460]	; (80028a0 <TrajectoryGenerator+0x280>)
 80026d2:	edd3 7a00 	vldr	s15, [r3]
 80026d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026de:	d521      	bpl.n	8002724 <TrajectoryGenerator+0x104>
		  t_half = sqrt(-1*(qf-qi)/qdd_max);
 80026e0:	4b70      	ldr	r3, [pc, #448]	; (80028a4 <TrajectoryGenerator+0x284>)
 80026e2:	ed93 7a00 	vldr	s14, [r3]
 80026e6:	4b6e      	ldr	r3, [pc, #440]	; (80028a0 <TrajectoryGenerator+0x280>)
 80026e8:	edd3 7a00 	vldr	s15, [r3]
 80026ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f0:	eeb1 7a67 	vneg.f32	s14, s15
 80026f4:	4b70      	ldr	r3, [pc, #448]	; (80028b8 <TrajectoryGenerator+0x298>)
 80026f6:	edd3 7a00 	vldr	s15, [r3]
 80026fa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80026fe:	ee16 0a90 	vmov	r0, s13
 8002702:	f7fd fecd 	bl	80004a0 <__aeabi_f2d>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	ec43 2b10 	vmov	d0, r2, r3
 800270e:	f004 fa4f 	bl	8006bb0 <sqrt>
 8002712:	ec53 2b10 	vmov	r2, r3, d0
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f7fe f9e9 	bl	8000af0 <__aeabi_d2f>
 800271e:	4603      	mov	r3, r0
 8002720:	4a67      	ldr	r2, [pc, #412]	; (80028c0 <TrajectoryGenerator+0x2a0>)
 8002722:	6013      	str	r3, [r2, #0]
	  if(qf-qi < 0)
 8002724:	4b5f      	ldr	r3, [pc, #380]	; (80028a4 <TrajectoryGenerator+0x284>)
 8002726:	ed93 7a00 	vldr	s14, [r3]
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <TrajectoryGenerator+0x280>)
 800272c:	edd3 7a00 	vldr	s15, [r3]
 8002730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002734:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002738:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800273c:	d50f      	bpl.n	800275e <TrajectoryGenerator+0x13e>
		  qd_max = -1*qd_max;
 800273e:	4b5c      	ldr	r3, [pc, #368]	; (80028b0 <TrajectoryGenerator+0x290>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	eef1 7a67 	vneg.f32	s15, s15
 8002748:	4b59      	ldr	r3, [pc, #356]	; (80028b0 <TrajectoryGenerator+0x290>)
 800274a:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 800274e:	4b5a      	ldr	r3, [pc, #360]	; (80028b8 <TrajectoryGenerator+0x298>)
 8002750:	edd3 7a00 	vldr	s15, [r3]
 8002754:	eef1 7a67 	vneg.f32	s15, s15
 8002758:	4b57      	ldr	r3, [pc, #348]	; (80028b8 <TrajectoryGenerator+0x298>)
 800275a:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 800275e:	4b54      	ldr	r3, [pc, #336]	; (80028b0 <TrajectoryGenerator+0x290>)
 8002760:	ed93 7a00 	vldr	s14, [r3]
 8002764:	4b51      	ldr	r3, [pc, #324]	; (80028ac <TrajectoryGenerator+0x28c>)
 8002766:	edd3 7a00 	vldr	s15, [r3]
 800276a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800276e:	4b52      	ldr	r3, [pc, #328]	; (80028b8 <TrajectoryGenerator+0x298>)
 8002770:	ed93 7a00 	vldr	s14, [r3]
 8002774:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002778:	4b52      	ldr	r3, [pc, #328]	; (80028c4 <TrajectoryGenerator+0x2a4>)
 800277a:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 800277e:	4b4b      	ldr	r3, [pc, #300]	; (80028ac <TrajectoryGenerator+0x28c>)
 8002780:	ed93 7a00 	vldr	s14, [r3]
 8002784:	4b4f      	ldr	r3, [pc, #316]	; (80028c4 <TrajectoryGenerator+0x2a4>)
 8002786:	edd3 7a00 	vldr	s15, [r3]
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	ee17 0a90 	vmov	r0, s15
 8002792:	f7fd fe85 	bl	80004a0 <__aeabi_f2d>
 8002796:	4604      	mov	r4, r0
 8002798:	460d      	mov	r5, r1
 800279a:	4b47      	ldr	r3, [pc, #284]	; (80028b8 <TrajectoryGenerator+0x298>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe7e 	bl	80004a0 <__aeabi_f2d>
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	4b47      	ldr	r3, [pc, #284]	; (80028c8 <TrajectoryGenerator+0x2a8>)
 80027aa:	f7fd fed1 	bl	8000550 <__aeabi_dmul>
 80027ae:	4602      	mov	r2, r0
 80027b0:	460b      	mov	r3, r1
 80027b2:	4690      	mov	r8, r2
 80027b4:	4699      	mov	r9, r3
 80027b6:	4b43      	ldr	r3, [pc, #268]	; (80028c4 <TrajectoryGenerator+0x2a4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7fd fe70 	bl	80004a0 <__aeabi_f2d>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4640      	mov	r0, r8
 80027c6:	4649      	mov	r1, r9
 80027c8:	f7fd fec2 	bl	8000550 <__aeabi_dmul>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4690      	mov	r8, r2
 80027d2:	4699      	mov	r9, r3
 80027d4:	4b3b      	ldr	r3, [pc, #236]	; (80028c4 <TrajectoryGenerator+0x2a4>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4618      	mov	r0, r3
 80027da:	f7fd fe61 	bl	80004a0 <__aeabi_f2d>
 80027de:	4602      	mov	r2, r0
 80027e0:	460b      	mov	r3, r1
 80027e2:	4640      	mov	r0, r8
 80027e4:	4649      	mov	r1, r9
 80027e6:	f7fd feb3 	bl	8000550 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4620      	mov	r0, r4
 80027f0:	4629      	mov	r1, r5
 80027f2:	f7fd fcf7 	bl	80001e4 <__adddf3>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4610      	mov	r0, r2
 80027fc:	4619      	mov	r1, r3
 80027fe:	f7fe f977 	bl	8000af0 <__aeabi_d2f>
 8002802:	4603      	mov	r3, r0
 8002804:	4a31      	ldr	r2, [pc, #196]	; (80028cc <TrajectoryGenerator+0x2ac>)
 8002806:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 8002808:	4b30      	ldr	r3, [pc, #192]	; (80028cc <TrajectoryGenerator+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a30      	ldr	r2, [pc, #192]	; (80028d0 <TrajectoryGenerator+0x2b0>)
 800280e:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8002810:	4b24      	ldr	r3, [pc, #144]	; (80028a4 <TrajectoryGenerator+0x284>)
 8002812:	ed93 7a00 	vldr	s14, [r3]
 8002816:	4b22      	ldr	r3, [pc, #136]	; (80028a0 <TrajectoryGenerator+0x280>)
 8002818:	edd3 7a00 	vldr	s15, [r3]
 800281c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002820:	4b2a      	ldr	r3, [pc, #168]	; (80028cc <TrajectoryGenerator+0x2ac>)
 8002822:	edd3 7a00 	vldr	s15, [r3]
 8002826:	ee37 7a67 	vsub.f32	s14, s14, s15
 800282a:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <TrajectoryGenerator+0x2b0>)
 800282c:	edd3 7a00 	vldr	s15, [r3]
 8002830:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002834:	4b1e      	ldr	r3, [pc, #120]	; (80028b0 <TrajectoryGenerator+0x290>)
 8002836:	ed93 7a00 	vldr	s14, [r3]
 800283a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800283e:	4b25      	ldr	r3, [pc, #148]	; (80028d4 <TrajectoryGenerator+0x2b4>)
 8002840:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 8002844:	4b1f      	ldr	r3, [pc, #124]	; (80028c4 <TrajectoryGenerator+0x2a4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a23      	ldr	r2, [pc, #140]	; (80028d8 <TrajectoryGenerator+0x2b8>)
 800284a:	6013      	str	r3, [r2, #0]
	  if(qdi+qdd_max*t_half >= qd_max)
 800284c:	4b1a      	ldr	r3, [pc, #104]	; (80028b8 <TrajectoryGenerator+0x298>)
 800284e:	ed93 7a00 	vldr	s14, [r3]
 8002852:	4b1b      	ldr	r3, [pc, #108]	; (80028c0 <TrajectoryGenerator+0x2a0>)
 8002854:	edd3 7a00 	vldr	s15, [r3]
 8002858:	ee27 7a27 	vmul.f32	s14, s14, s15
 800285c:	4b13      	ldr	r3, [pc, #76]	; (80028ac <TrajectoryGenerator+0x28c>)
 800285e:	edd3 7a00 	vldr	s15, [r3]
 8002862:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <TrajectoryGenerator+0x290>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002874:	db07      	blt.n	8002886 <TrajectoryGenerator+0x266>
		  initime = time;
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <TrajectoryGenerator+0x2bc>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a19      	ldr	r2, [pc, #100]	; (80028e0 <TrajectoryGenerator+0x2c0>)
 800287c:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 800287e:	4b06      	ldr	r3, [pc, #24]	; (8002898 <TrajectoryGenerator+0x278>)
 8002880:	2202      	movs	r2, #2
 8002882:	601a      	str	r2, [r3, #0]
	  break;
 8002884:	e3c8      	b.n	8003018 <TrajectoryGenerator+0x9f8>
		  initime = time;
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <TrajectoryGenerator+0x2bc>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a15      	ldr	r2, [pc, #84]	; (80028e0 <TrajectoryGenerator+0x2c0>)
 800288c:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 800288e:	4b02      	ldr	r3, [pc, #8]	; (8002898 <TrajectoryGenerator+0x278>)
 8002890:	2201      	movs	r2, #1
 8002892:	601a      	str	r2, [r3, #0]
	  break;
 8002894:	e3c0      	b.n	8003018 <TrajectoryGenerator+0x9f8>
 8002896:	bf00      	nop
 8002898:	200002a4 	.word	0x200002a4
 800289c:	200002e4 	.word	0x200002e4
 80028a0:	200002b0 	.word	0x200002b0
 80028a4:	200002ac 	.word	0x200002ac
 80028a8:	461c4000 	.word	0x461c4000
 80028ac:	200002b4 	.word	0x200002b4
 80028b0:	20000008 	.word	0x20000008
 80028b4:	462d9c71 	.word	0x462d9c71
 80028b8:	2000000c 	.word	0x2000000c
 80028bc:	460ae385 	.word	0x460ae385
 80028c0:	200002bc 	.word	0x200002bc
 80028c4:	200002d0 	.word	0x200002d0
 80028c8:	3fe00000 	.word	0x3fe00000
 80028cc:	200002d4 	.word	0x200002d4
 80028d0:	200002d8 	.word	0x200002d8
 80028d4:	200002dc 	.word	0x200002dc
 80028d8:	200002e0 	.word	0x200002e0
 80028dc:	200002a8 	.word	0x200002a8
 80028e0:	200002b8 	.word	0x200002b8
	  if(time <= t_half + initime)
 80028e4:	4bb6      	ldr	r3, [pc, #728]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 80028e6:	ed93 7a00 	vldr	s14, [r3]
 80028ea:	4bb6      	ldr	r3, [pc, #728]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 80028ec:	edd3 7a00 	vldr	s15, [r3]
 80028f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028f4:	4bb4      	ldr	r3, [pc, #720]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 80028f6:	edd3 7a00 	vldr	s15, [r3]
 80028fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002902:	f2c0 8092 	blt.w	8002a2a <TrajectoryGenerator+0x40a>
		  setacc = qdd_max;
 8002906:	4bb1      	ldr	r3, [pc, #708]	; (8002bcc <TrajectoryGenerator+0x5ac>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4ab1      	ldr	r2, [pc, #708]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 800290c:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 800290e:	4bae      	ldr	r3, [pc, #696]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002910:	ed93 7a00 	vldr	s14, [r3]
 8002914:	4bab      	ldr	r3, [pc, #684]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800291e:	4bac      	ldr	r3, [pc, #688]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 8002920:	edd3 7a00 	vldr	s15, [r3]
 8002924:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002928:	4baa      	ldr	r3, [pc, #680]	; (8002bd4 <TrajectoryGenerator+0x5b4>)
 800292a:	edd3 7a00 	vldr	s15, [r3]
 800292e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002932:	4ba9      	ldr	r3, [pc, #676]	; (8002bd8 <TrajectoryGenerator+0x5b8>)
 8002934:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8002938:	4ba3      	ldr	r3, [pc, #652]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 800293a:	ed93 7a00 	vldr	s14, [r3]
 800293e:	4ba1      	ldr	r3, [pc, #644]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002940:	edd3 7a00 	vldr	s15, [r3]
 8002944:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002948:	4ba2      	ldr	r3, [pc, #648]	; (8002bd4 <TrajectoryGenerator+0x5b4>)
 800294a:	edd3 7a00 	vldr	s15, [r3]
 800294e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002952:	4ba2      	ldr	r3, [pc, #648]	; (8002bdc <TrajectoryGenerator+0x5bc>)
 8002954:	edd3 7a00 	vldr	s15, [r3]
 8002958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800295c:	ee17 0a90 	vmov	r0, s15
 8002960:	f7fd fd9e 	bl	80004a0 <__aeabi_f2d>
 8002964:	4604      	mov	r4, r0
 8002966:	460d      	mov	r5, r1
 8002968:	4b99      	ldr	r3, [pc, #612]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fd97 	bl	80004a0 <__aeabi_f2d>
 8002972:	f04f 0200 	mov.w	r2, #0
 8002976:	4b9a      	ldr	r3, [pc, #616]	; (8002be0 <TrajectoryGenerator+0x5c0>)
 8002978:	f7fd fdea 	bl	8000550 <__aeabi_dmul>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4690      	mov	r8, r2
 8002982:	4699      	mov	r9, r3
 8002984:	4b90      	ldr	r3, [pc, #576]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002986:	ed93 7a00 	vldr	s14, [r3]
 800298a:	4b8e      	ldr	r3, [pc, #568]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 800298c:	edd3 7a00 	vldr	s15, [r3]
 8002990:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002994:	ee17 0a90 	vmov	r0, s15
 8002998:	f7fd fd82 	bl	80004a0 <__aeabi_f2d>
 800299c:	4602      	mov	r2, r0
 800299e:	460b      	mov	r3, r1
 80029a0:	4640      	mov	r0, r8
 80029a2:	4649      	mov	r1, r9
 80029a4:	f7fd fdd4 	bl	8000550 <__aeabi_dmul>
 80029a8:	4602      	mov	r2, r0
 80029aa:	460b      	mov	r3, r1
 80029ac:	4690      	mov	r8, r2
 80029ae:	4699      	mov	r9, r3
 80029b0:	4b85      	ldr	r3, [pc, #532]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	4b83      	ldr	r3, [pc, #524]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	ee17 0a90 	vmov	r0, s15
 80029c4:	f7fd fd6c 	bl	80004a0 <__aeabi_f2d>
 80029c8:	4602      	mov	r2, r0
 80029ca:	460b      	mov	r3, r1
 80029cc:	4640      	mov	r0, r8
 80029ce:	4649      	mov	r1, r9
 80029d0:	f7fd fdbe 	bl	8000550 <__aeabi_dmul>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4620      	mov	r0, r4
 80029da:	4629      	mov	r1, r5
 80029dc:	f7fd fc02 	bl	80001e4 <__adddf3>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f882 	bl	8000af0 <__aeabi_d2f>
 80029ec:	4603      	mov	r3, r0
 80029ee:	4a7d      	ldr	r2, [pc, #500]	; (8002be4 <TrajectoryGenerator+0x5c4>)
 80029f0:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 80029f2:	4b7c      	ldr	r3, [pc, #496]	; (8002be4 <TrajectoryGenerator+0x5c4>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a7c      	ldr	r2, [pc, #496]	; (8002be8 <TrajectoryGenerator+0x5c8>)
 80029f8:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 80029fa:	4b77      	ldr	r3, [pc, #476]	; (8002bd8 <TrajectoryGenerator+0x5b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a7b      	ldr	r2, [pc, #492]	; (8002bec <TrajectoryGenerator+0x5cc>)
 8002a00:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8002a02:	4b71      	ldr	r3, [pc, #452]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4618      	mov	r0, r3
 8002a08:	f7fd fd4a 	bl	80004a0 <__aeabi_f2d>
 8002a0c:	a36a      	add	r3, pc, #424	; (adr r3, 8002bb8 <TrajectoryGenerator+0x598>)
 8002a0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a12:	f7fd fbe7 	bl	80001e4 <__adddf3>
 8002a16:	4602      	mov	r2, r0
 8002a18:	460b      	mov	r3, r1
 8002a1a:	4610      	mov	r0, r2
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	f7fe f867 	bl	8000af0 <__aeabi_d2f>
 8002a22:	4603      	mov	r3, r0
 8002a24:	4a68      	ldr	r2, [pc, #416]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002a26:	6013      	str	r3, [r2, #0]
	break;
 8002a28:	e2f6      	b.n	8003018 <TrajectoryGenerator+0x9f8>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8002a2a:	4b65      	ldr	r3, [pc, #404]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002a2c:	ed93 7a00 	vldr	s14, [r3]
 8002a30:	4b64      	ldr	r3, [pc, #400]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002a32:	edd3 7a00 	vldr	s15, [r3]
 8002a36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a3a:	4b63      	ldr	r3, [pc, #396]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a48:	d400      	bmi.n	8002a4c <TrajectoryGenerator+0x42c>
	break;
 8002a4a:	e2e5      	b.n	8003018 <TrajectoryGenerator+0x9f8>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8002a4c:	4b5c      	ldr	r3, [pc, #368]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a56:	4b5b      	ldr	r3, [pc, #364]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002a58:	edd3 7a00 	vldr	s15, [r3]
 8002a5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002a60:	4b59      	ldr	r3, [pc, #356]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002a62:	edd3 7a00 	vldr	s15, [r3]
 8002a66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6e:	da00      	bge.n	8002a72 <TrajectoryGenerator+0x452>
	break;
 8002a70:	e2d2      	b.n	8003018 <TrajectoryGenerator+0x9f8>
		  setacc = -qdd_max;
 8002a72:	4b56      	ldr	r3, [pc, #344]	; (8002bcc <TrajectoryGenerator+0x5ac>)
 8002a74:	edd3 7a00 	vldr	s15, [r3]
 8002a78:	eef1 7a67 	vneg.f32	s15, s15
 8002a7c:	4b54      	ldr	r3, [pc, #336]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 8002a7e:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8002a82:	4b51      	ldr	r3, [pc, #324]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	4b4e      	ldr	r3, [pc, #312]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a92:	4b4b      	ldr	r3, [pc, #300]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002a9c:	4b4c      	ldr	r3, [pc, #304]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 8002a9e:	edd3 7a00 	vldr	s15, [r3]
 8002aa2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002aa6:	4b51      	ldr	r3, [pc, #324]	; (8002bec <TrajectoryGenerator+0x5cc>)
 8002aa8:	edd3 7a00 	vldr	s15, [r3]
 8002aac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ab0:	4b49      	ldr	r3, [pc, #292]	; (8002bd8 <TrajectoryGenerator+0x5b8>)
 8002ab2:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8002ab6:	4b44      	ldr	r3, [pc, #272]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002ab8:	ed93 7a00 	vldr	s14, [r3]
 8002abc:	4b41      	ldr	r3, [pc, #260]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002abe:	edd3 7a00 	vldr	s15, [r3]
 8002ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ac6:	4b3e      	ldr	r3, [pc, #248]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002ac8:	edd3 7a00 	vldr	s15, [r3]
 8002acc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ad0:	4b46      	ldr	r3, [pc, #280]	; (8002bec <TrajectoryGenerator+0x5cc>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ada:	4b43      	ldr	r3, [pc, #268]	; (8002be8 <TrajectoryGenerator+0x5c8>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ae4:	ee17 0a90 	vmov	r0, s15
 8002ae8:	f7fd fcda 	bl	80004a0 <__aeabi_f2d>
 8002aec:	4604      	mov	r4, r0
 8002aee:	460d      	mov	r5, r1
 8002af0:	4b37      	ldr	r3, [pc, #220]	; (8002bd0 <TrajectoryGenerator+0x5b0>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fd fcd3 	bl	80004a0 <__aeabi_f2d>
 8002afa:	f04f 0200 	mov.w	r2, #0
 8002afe:	4b38      	ldr	r3, [pc, #224]	; (8002be0 <TrajectoryGenerator+0x5c0>)
 8002b00:	f7fd fd26 	bl	8000550 <__aeabi_dmul>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	4690      	mov	r8, r2
 8002b0a:	4699      	mov	r9, r3
 8002b0c:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002b0e:	ed93 7a00 	vldr	s14, [r3]
 8002b12:	4b2c      	ldr	r3, [pc, #176]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b1c:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002b1e:	edd3 7a00 	vldr	s15, [r3]
 8002b22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b26:	ee17 0a90 	vmov	r0, s15
 8002b2a:	f7fd fcb9 	bl	80004a0 <__aeabi_f2d>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4640      	mov	r0, r8
 8002b34:	4649      	mov	r1, r9
 8002b36:	f7fd fd0b 	bl	8000550 <__aeabi_dmul>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4690      	mov	r8, r2
 8002b40:	4699      	mov	r9, r3
 8002b42:	4b21      	ldr	r3, [pc, #132]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002b44:	ed93 7a00 	vldr	s14, [r3]
 8002b48:	4b1e      	ldr	r3, [pc, #120]	; (8002bc4 <TrajectoryGenerator+0x5a4>)
 8002b4a:	edd3 7a00 	vldr	s15, [r3]
 8002b4e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b52:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <TrajectoryGenerator+0x5a0>)
 8002b54:	edd3 7a00 	vldr	s15, [r3]
 8002b58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b5c:	ee17 0a90 	vmov	r0, s15
 8002b60:	f7fd fc9e 	bl	80004a0 <__aeabi_f2d>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4640      	mov	r0, r8
 8002b6a:	4649      	mov	r1, r9
 8002b6c:	f7fd fcf0 	bl	8000550 <__aeabi_dmul>
 8002b70:	4602      	mov	r2, r0
 8002b72:	460b      	mov	r3, r1
 8002b74:	4620      	mov	r0, r4
 8002b76:	4629      	mov	r1, r5
 8002b78:	f7fd fb34 	bl	80001e4 <__adddf3>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	f7fd ffb4 	bl	8000af0 <__aeabi_d2f>
 8002b88:	4603      	mov	r3, r0
 8002b8a:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <TrajectoryGenerator+0x5c4>)
 8002b8c:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fd fc84 	bl	80004a0 <__aeabi_f2d>
 8002b98:	a307      	add	r3, pc, #28	; (adr r3, 8002bb8 <TrajectoryGenerator+0x598>)
 8002b9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b9e:	f7fd fb21 	bl	80001e4 <__adddf3>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4610      	mov	r0, r2
 8002ba8:	4619      	mov	r1, r3
 8002baa:	f7fd ffa1 	bl	8000af0 <__aeabi_d2f>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	4a05      	ldr	r2, [pc, #20]	; (8002bc8 <TrajectoryGenerator+0x5a8>)
 8002bb2:	6013      	str	r3, [r2, #0]
	break;
 8002bb4:	e230      	b.n	8003018 <TrajectoryGenerator+0x9f8>
 8002bb6:	bf00      	nop
 8002bb8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002bbc:	3f50624d 	.word	0x3f50624d
 8002bc0:	200002bc 	.word	0x200002bc
 8002bc4:	200002b8 	.word	0x200002b8
 8002bc8:	200002a8 	.word	0x200002a8
 8002bcc:	2000000c 	.word	0x2000000c
 8002bd0:	2000031c 	.word	0x2000031c
 8002bd4:	200002b4 	.word	0x200002b4
 8002bd8:	20000310 	.word	0x20000310
 8002bdc:	200002b0 	.word	0x200002b0
 8002be0:	3fe00000 	.word	0x3fe00000
 8002be4:	200002e8 	.word	0x200002e8
 8002be8:	200002c8 	.word	0x200002c8
 8002bec:	200002c0 	.word	0x200002c0
	 if(time <= tacc + initime)
 8002bf0:	4b9d      	ldr	r3, [pc, #628]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	4b9d      	ldr	r3, [pc, #628]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c00:	4b9b      	ldr	r3, [pc, #620]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0e:	f2c0 8092 	blt.w	8002d36 <TrajectoryGenerator+0x716>
		 setacc = qdd_max;
 8002c12:	4b98      	ldr	r3, [pc, #608]	; (8002e74 <TrajectoryGenerator+0x854>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a98      	ldr	r2, [pc, #608]	; (8002e78 <TrajectoryGenerator+0x858>)
 8002c18:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 8002c1a:	4b95      	ldr	r3, [pc, #596]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002c1c:	ed93 7a00 	vldr	s14, [r3]
 8002c20:	4b92      	ldr	r3, [pc, #584]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002c22:	edd3 7a00 	vldr	s15, [r3]
 8002c26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c2a:	4b93      	ldr	r3, [pc, #588]	; (8002e78 <TrajectoryGenerator+0x858>)
 8002c2c:	edd3 7a00 	vldr	s15, [r3]
 8002c30:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c34:	4b91      	ldr	r3, [pc, #580]	; (8002e7c <TrajectoryGenerator+0x85c>)
 8002c36:	edd3 7a00 	vldr	s15, [r3]
 8002c3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c3e:	4b90      	ldr	r3, [pc, #576]	; (8002e80 <TrajectoryGenerator+0x860>)
 8002c40:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8002c44:	4b8a      	ldr	r3, [pc, #552]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002c46:	ed93 7a00 	vldr	s14, [r3]
 8002c4a:	4b88      	ldr	r3, [pc, #544]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002c4c:	edd3 7a00 	vldr	s15, [r3]
 8002c50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002c54:	4b89      	ldr	r3, [pc, #548]	; (8002e7c <TrajectoryGenerator+0x85c>)
 8002c56:	edd3 7a00 	vldr	s15, [r3]
 8002c5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c5e:	4b89      	ldr	r3, [pc, #548]	; (8002e84 <TrajectoryGenerator+0x864>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c68:	ee17 0a90 	vmov	r0, s15
 8002c6c:	f7fd fc18 	bl	80004a0 <__aeabi_f2d>
 8002c70:	4604      	mov	r4, r0
 8002c72:	460d      	mov	r5, r1
 8002c74:	4b80      	ldr	r3, [pc, #512]	; (8002e78 <TrajectoryGenerator+0x858>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f7fd fc11 	bl	80004a0 <__aeabi_f2d>
 8002c7e:	f04f 0200 	mov.w	r2, #0
 8002c82:	4b81      	ldr	r3, [pc, #516]	; (8002e88 <TrajectoryGenerator+0x868>)
 8002c84:	f7fd fc64 	bl	8000550 <__aeabi_dmul>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	460b      	mov	r3, r1
 8002c8c:	4690      	mov	r8, r2
 8002c8e:	4699      	mov	r9, r3
 8002c90:	4b77      	ldr	r3, [pc, #476]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002c92:	ed93 7a00 	vldr	s14, [r3]
 8002c96:	4b75      	ldr	r3, [pc, #468]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002c98:	edd3 7a00 	vldr	s15, [r3]
 8002c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ca0:	ee17 0a90 	vmov	r0, s15
 8002ca4:	f7fd fbfc 	bl	80004a0 <__aeabi_f2d>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	460b      	mov	r3, r1
 8002cac:	4640      	mov	r0, r8
 8002cae:	4649      	mov	r1, r9
 8002cb0:	f7fd fc4e 	bl	8000550 <__aeabi_dmul>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4690      	mov	r8, r2
 8002cba:	4699      	mov	r9, r3
 8002cbc:	4b6c      	ldr	r3, [pc, #432]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002cbe:	ed93 7a00 	vldr	s14, [r3]
 8002cc2:	4b6a      	ldr	r3, [pc, #424]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ccc:	ee17 0a90 	vmov	r0, s15
 8002cd0:	f7fd fbe6 	bl	80004a0 <__aeabi_f2d>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	4640      	mov	r0, r8
 8002cda:	4649      	mov	r1, r9
 8002cdc:	f7fd fc38 	bl	8000550 <__aeabi_dmul>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4620      	mov	r0, r4
 8002ce6:	4629      	mov	r1, r5
 8002ce8:	f7fd fa7c 	bl	80001e4 <__adddf3>
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	f7fd fefc 	bl	8000af0 <__aeabi_d2f>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a64      	ldr	r2, [pc, #400]	; (8002e8c <TrajectoryGenerator+0x86c>)
 8002cfc:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8002cfe:	4b63      	ldr	r3, [pc, #396]	; (8002e8c <TrajectoryGenerator+0x86c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a63      	ldr	r2, [pc, #396]	; (8002e90 <TrajectoryGenerator+0x870>)
 8002d04:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8002d06:	4b5e      	ldr	r3, [pc, #376]	; (8002e80 <TrajectoryGenerator+0x860>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a62      	ldr	r2, [pc, #392]	; (8002e94 <TrajectoryGenerator+0x874>)
 8002d0c:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002d0e:	4b58      	ldr	r3, [pc, #352]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7fd fbc4 	bl	80004a0 <__aeabi_f2d>
 8002d18:	a351      	add	r3, pc, #324	; (adr r3, 8002e60 <TrajectoryGenerator+0x840>)
 8002d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1e:	f7fd fa61 	bl	80001e4 <__adddf3>
 8002d22:	4602      	mov	r2, r0
 8002d24:	460b      	mov	r3, r1
 8002d26:	4610      	mov	r0, r2
 8002d28:	4619      	mov	r1, r3
 8002d2a:	f7fd fee1 	bl	8000af0 <__aeabi_d2f>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4a4f      	ldr	r2, [pc, #316]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002d32:	6013      	str	r3, [r2, #0]
	 break;
 8002d34:	e16f      	b.n	8003016 <TrajectoryGenerator+0x9f6>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8002d36:	4b4c      	ldr	r3, [pc, #304]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002d38:	ed93 7a00 	vldr	s14, [r3]
 8002d3c:	4b4b      	ldr	r3, [pc, #300]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002d3e:	edd3 7a00 	vldr	s15, [r3]
 8002d42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d46:	4b4a      	ldr	r3, [pc, #296]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002d48:	edd3 7a00 	vldr	s15, [r3]
 8002d4c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d54:	d552      	bpl.n	8002dfc <TrajectoryGenerator+0x7dc>
 8002d56:	4b45      	ldr	r3, [pc, #276]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002d58:	ed93 7a00 	vldr	s14, [r3]
 8002d5c:	4b42      	ldr	r3, [pc, #264]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d66:	4b4c      	ldr	r3, [pc, #304]	; (8002e98 <TrajectoryGenerator+0x878>)
 8002d68:	edd3 7a00 	vldr	s15, [r3]
 8002d6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d70:	4b3f      	ldr	r3, [pc, #252]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	db3d      	blt.n	8002dfc <TrajectoryGenerator+0x7dc>
		 setacc = 0;
 8002d80:	4b3d      	ldr	r3, [pc, #244]	; (8002e78 <TrajectoryGenerator+0x858>)
 8002d82:	f04f 0200 	mov.w	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8002d88:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <TrajectoryGenerator+0x87c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a3c      	ldr	r2, [pc, #240]	; (8002e80 <TrajectoryGenerator+0x860>)
 8002d8e:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8002d90:	4b37      	ldr	r3, [pc, #220]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	4b35      	ldr	r3, [pc, #212]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002da0:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002daa:	4b3c      	ldr	r3, [pc, #240]	; (8002e9c <TrajectoryGenerator+0x87c>)
 8002dac:	edd3 7a00 	vldr	s15, [r3]
 8002db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <TrajectoryGenerator+0x870>)
 8002db6:	edd3 7a00 	vldr	s15, [r3]
 8002dba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dbe:	4b33      	ldr	r3, [pc, #204]	; (8002e8c <TrajectoryGenerator+0x86c>)
 8002dc0:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8002dc4:	4b31      	ldr	r3, [pc, #196]	; (8002e8c <TrajectoryGenerator+0x86c>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a35      	ldr	r2, [pc, #212]	; (8002ea0 <TrajectoryGenerator+0x880>)
 8002dca:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8002dcc:	4b2c      	ldr	r3, [pc, #176]	; (8002e80 <TrajectoryGenerator+0x860>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a34      	ldr	r2, [pc, #208]	; (8002ea4 <TrajectoryGenerator+0x884>)
 8002dd2:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002dd4:	4b26      	ldr	r3, [pc, #152]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fb61 	bl	80004a0 <__aeabi_f2d>
 8002dde:	a320      	add	r3, pc, #128	; (adr r3, 8002e60 <TrajectoryGenerator+0x840>)
 8002de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002de4:	f7fd f9fe 	bl	80001e4 <__adddf3>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4610      	mov	r0, r2
 8002dee:	4619      	mov	r1, r3
 8002df0:	f7fd fe7e 	bl	8000af0 <__aeabi_d2f>
 8002df4:	4603      	mov	r3, r0
 8002df6:	4a1e      	ldr	r2, [pc, #120]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002df8:	6013      	str	r3, [r2, #0]
	 break;
 8002dfa:	e10c      	b.n	8003016 <TrajectoryGenerator+0x9f6>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8002dfc:	4b1a      	ldr	r3, [pc, #104]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002dfe:	ed93 7a00 	vldr	s14, [r3]
 8002e02:	4b25      	ldr	r3, [pc, #148]	; (8002e98 <TrajectoryGenerator+0x878>)
 8002e04:	edd3 7a00 	vldr	s15, [r3]
 8002e08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e0c:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002e0e:	edd3 7a00 	vldr	s15, [r3]
 8002e12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e16:	4b16      	ldr	r3, [pc, #88]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002e18:	edd3 7a00 	vldr	s15, [r3]
 8002e1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e24:	d400      	bmi.n	8002e28 <TrajectoryGenerator+0x808>
	 break;
 8002e26:	e0f6      	b.n	8003016 <TrajectoryGenerator+0x9f6>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8002e28:	4b0f      	ldr	r3, [pc, #60]	; (8002e68 <TrajectoryGenerator+0x848>)
 8002e2a:	ed93 7a00 	vldr	s14, [r3]
 8002e2e:	4b1a      	ldr	r3, [pc, #104]	; (8002e98 <TrajectoryGenerator+0x878>)
 8002e30:	edd3 7a00 	vldr	s15, [r3]
 8002e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <TrajectoryGenerator+0x888>)
 8002e3a:	edd3 7a00 	vldr	s15, [r3]
 8002e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e42:	4b0a      	ldr	r3, [pc, #40]	; (8002e6c <TrajectoryGenerator+0x84c>)
 8002e44:	edd3 7a00 	vldr	s15, [r3]
 8002e48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e4c:	4b08      	ldr	r3, [pc, #32]	; (8002e70 <TrajectoryGenerator+0x850>)
 8002e4e:	edd3 7a00 	vldr	s15, [r3]
 8002e52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002e56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e5a:	da27      	bge.n	8002eac <TrajectoryGenerator+0x88c>
	 break;
 8002e5c:	e0db      	b.n	8003016 <TrajectoryGenerator+0x9f6>
 8002e5e:	bf00      	nop
 8002e60:	d2f1a9fc 	.word	0xd2f1a9fc
 8002e64:	3f50624d 	.word	0x3f50624d
 8002e68:	200002d0 	.word	0x200002d0
 8002e6c:	200002b8 	.word	0x200002b8
 8002e70:	200002a8 	.word	0x200002a8
 8002e74:	2000000c 	.word	0x2000000c
 8002e78:	2000031c 	.word	0x2000031c
 8002e7c:	200002b4 	.word	0x200002b4
 8002e80:	20000310 	.word	0x20000310
 8002e84:	200002b0 	.word	0x200002b0
 8002e88:	3fe00000 	.word	0x3fe00000
 8002e8c:	200002e8 	.word	0x200002e8
 8002e90:	200002c8 	.word	0x200002c8
 8002e94:	200002c0 	.word	0x200002c0
 8002e98:	200002dc 	.word	0x200002dc
 8002e9c:	20000008 	.word	0x20000008
 8002ea0:	200002cc 	.word	0x200002cc
 8002ea4:	200002c4 	.word	0x200002c4
 8002ea8:	200002e0 	.word	0x200002e0
		 setacc = -qdd_max;
 8002eac:	4b5e      	ldr	r3, [pc, #376]	; (8003028 <TrajectoryGenerator+0xa08>)
 8002eae:	edd3 7a00 	vldr	s15, [r3]
 8002eb2:	eef1 7a67 	vneg.f32	s15, s15
 8002eb6:	4b5d      	ldr	r3, [pc, #372]	; (800302c <TrajectoryGenerator+0xa0c>)
 8002eb8:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8002ebc:	4b5c      	ldr	r3, [pc, #368]	; (8003030 <TrajectoryGenerator+0xa10>)
 8002ebe:	ed93 7a00 	vldr	s14, [r3]
 8002ec2:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <TrajectoryGenerator+0xa14>)
 8002ec4:	edd3 7a00 	vldr	s15, [r3]
 8002ec8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <TrajectoryGenerator+0xa18>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ed6:	4b59      	ldr	r3, [pc, #356]	; (800303c <TrajectoryGenerator+0xa1c>)
 8002ed8:	edd3 7a00 	vldr	s15, [r3]
 8002edc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ee0:	4b52      	ldr	r3, [pc, #328]	; (800302c <TrajectoryGenerator+0xa0c>)
 8002ee2:	edd3 7a00 	vldr	s15, [r3]
 8002ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eea:	4b55      	ldr	r3, [pc, #340]	; (8003040 <TrajectoryGenerator+0xa20>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ef4:	4b53      	ldr	r3, [pc, #332]	; (8003044 <TrajectoryGenerator+0xa24>)
 8002ef6:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8002efa:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <TrajectoryGenerator+0xa10>)
 8002efc:	ed93 7a00 	vldr	s14, [r3]
 8002f00:	4b4c      	ldr	r3, [pc, #304]	; (8003034 <TrajectoryGenerator+0xa14>)
 8002f02:	edd3 7a00 	vldr	s15, [r3]
 8002f06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f0a:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <TrajectoryGenerator+0xa18>)
 8002f0c:	edd3 7a00 	vldr	s15, [r3]
 8002f10:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f14:	4b49      	ldr	r3, [pc, #292]	; (800303c <TrajectoryGenerator+0xa1c>)
 8002f16:	edd3 7a00 	vldr	s15, [r3]
 8002f1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f1e:	4b48      	ldr	r3, [pc, #288]	; (8003040 <TrajectoryGenerator+0xa20>)
 8002f20:	edd3 7a00 	vldr	s15, [r3]
 8002f24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f28:	4b47      	ldr	r3, [pc, #284]	; (8003048 <TrajectoryGenerator+0xa28>)
 8002f2a:	edd3 7a00 	vldr	s15, [r3]
 8002f2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f32:	ee17 0a90 	vmov	r0, s15
 8002f36:	f7fd fab3 	bl	80004a0 <__aeabi_f2d>
 8002f3a:	4604      	mov	r4, r0
 8002f3c:	460d      	mov	r5, r1
 8002f3e:	4b3b      	ldr	r3, [pc, #236]	; (800302c <TrajectoryGenerator+0xa0c>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	4618      	mov	r0, r3
 8002f44:	f7fd faac 	bl	80004a0 <__aeabi_f2d>
 8002f48:	f04f 0200 	mov.w	r2, #0
 8002f4c:	4b3f      	ldr	r3, [pc, #252]	; (800304c <TrajectoryGenerator+0xa2c>)
 8002f4e:	f7fd faff 	bl	8000550 <__aeabi_dmul>
 8002f52:	4602      	mov	r2, r0
 8002f54:	460b      	mov	r3, r1
 8002f56:	4690      	mov	r8, r2
 8002f58:	4699      	mov	r9, r3
 8002f5a:	4b35      	ldr	r3, [pc, #212]	; (8003030 <TrajectoryGenerator+0xa10>)
 8002f5c:	ed93 7a00 	vldr	s14, [r3]
 8002f60:	4b34      	ldr	r3, [pc, #208]	; (8003034 <TrajectoryGenerator+0xa14>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f6a:	4b33      	ldr	r3, [pc, #204]	; (8003038 <TrajectoryGenerator+0xa18>)
 8002f6c:	edd3 7a00 	vldr	s15, [r3]
 8002f70:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f74:	4b31      	ldr	r3, [pc, #196]	; (800303c <TrajectoryGenerator+0xa1c>)
 8002f76:	edd3 7a00 	vldr	s15, [r3]
 8002f7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002f7e:	ee17 0a90 	vmov	r0, s15
 8002f82:	f7fd fa8d 	bl	80004a0 <__aeabi_f2d>
 8002f86:	4602      	mov	r2, r0
 8002f88:	460b      	mov	r3, r1
 8002f8a:	4640      	mov	r0, r8
 8002f8c:	4649      	mov	r1, r9
 8002f8e:	f7fd fadf 	bl	8000550 <__aeabi_dmul>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4690      	mov	r8, r2
 8002f98:	4699      	mov	r9, r3
 8002f9a:	4b25      	ldr	r3, [pc, #148]	; (8003030 <TrajectoryGenerator+0xa10>)
 8002f9c:	ed93 7a00 	vldr	s14, [r3]
 8002fa0:	4b24      	ldr	r3, [pc, #144]	; (8003034 <TrajectoryGenerator+0xa14>)
 8002fa2:	edd3 7a00 	vldr	s15, [r3]
 8002fa6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002faa:	4b23      	ldr	r3, [pc, #140]	; (8003038 <TrajectoryGenerator+0xa18>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002fb4:	4b21      	ldr	r3, [pc, #132]	; (800303c <TrajectoryGenerator+0xa1c>)
 8002fb6:	edd3 7a00 	vldr	s15, [r3]
 8002fba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fbe:	ee17 0a90 	vmov	r0, s15
 8002fc2:	f7fd fa6d 	bl	80004a0 <__aeabi_f2d>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4640      	mov	r0, r8
 8002fcc:	4649      	mov	r1, r9
 8002fce:	f7fd fabf 	bl	8000550 <__aeabi_dmul>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4620      	mov	r0, r4
 8002fd8:	4629      	mov	r1, r5
 8002fda:	f7fd f903 	bl	80001e4 <__adddf3>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7fd fd83 	bl	8000af0 <__aeabi_d2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	4a18      	ldr	r2, [pc, #96]	; (8003050 <TrajectoryGenerator+0xa30>)
 8002fee:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8002ff0:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <TrajectoryGenerator+0xa10>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fa53 	bl	80004a0 <__aeabi_f2d>
 8002ffa:	a309      	add	r3, pc, #36	; (adr r3, 8003020 <TrajectoryGenerator+0xa00>)
 8002ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003000:	f7fd f8f0 	bl	80001e4 <__adddf3>
 8003004:	4602      	mov	r2, r0
 8003006:	460b      	mov	r3, r1
 8003008:	4610      	mov	r0, r2
 800300a:	4619      	mov	r1, r3
 800300c:	f7fd fd70 	bl	8000af0 <__aeabi_d2f>
 8003010:	4603      	mov	r3, r0
 8003012:	4a07      	ldr	r2, [pc, #28]	; (8003030 <TrajectoryGenerator+0xa10>)
 8003014:	6013      	str	r3, [r2, #0]
	 break;
 8003016:	bf00      	nop
}
 8003018:	bf00      	nop
 800301a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800301e:	bf00      	nop
 8003020:	d2f1a9fc 	.word	0xd2f1a9fc
 8003024:	3f50624d 	.word	0x3f50624d
 8003028:	2000000c 	.word	0x2000000c
 800302c:	2000031c 	.word	0x2000031c
 8003030:	200002a8 	.word	0x200002a8
 8003034:	200002b8 	.word	0x200002b8
 8003038:	200002d0 	.word	0x200002d0
 800303c:	200002dc 	.word	0x200002dc
 8003040:	200002c4 	.word	0x200002c4
 8003044:	20000310 	.word	0x20000310
 8003048:	200002cc 	.word	0x200002cc
 800304c:	3fe00000 	.word	0x3fe00000
 8003050:	200002e8 	.word	0x200002e8

08003054 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003054:	b480      	push	{r7}
 8003056:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003058:	b672      	cpsid	i
}
 800305a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800305c:	e7fe      	b.n	800305c <Error_Handler+0x8>
	...

08003060 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b082      	sub	sp, #8
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003066:	2300      	movs	r3, #0
 8003068:	607b      	str	r3, [r7, #4]
 800306a:	4b10      	ldr	r3, [pc, #64]	; (80030ac <HAL_MspInit+0x4c>)
 800306c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306e:	4a0f      	ldr	r2, [pc, #60]	; (80030ac <HAL_MspInit+0x4c>)
 8003070:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003074:	6453      	str	r3, [r2, #68]	; 0x44
 8003076:	4b0d      	ldr	r3, [pc, #52]	; (80030ac <HAL_MspInit+0x4c>)
 8003078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800307a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800307e:	607b      	str	r3, [r7, #4]
 8003080:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003082:	2300      	movs	r3, #0
 8003084:	603b      	str	r3, [r7, #0]
 8003086:	4b09      	ldr	r3, [pc, #36]	; (80030ac <HAL_MspInit+0x4c>)
 8003088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308a:	4a08      	ldr	r2, [pc, #32]	; (80030ac <HAL_MspInit+0x4c>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003090:	6413      	str	r3, [r2, #64]	; 0x40
 8003092:	4b06      	ldr	r3, [pc, #24]	; (80030ac <HAL_MspInit+0x4c>)
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800309a:	603b      	str	r3, [r7, #0]
 800309c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800309e:	2007      	movs	r0, #7
 80030a0:	f000 ff50 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030a4:	bf00      	nop
 80030a6:	3708      	adds	r7, #8
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd80      	pop	{r7, pc}
 80030ac:	40023800 	.word	0x40023800

080030b0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030b8:	f107 0314 	add.w	r3, r7, #20
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	605a      	str	r2, [r3, #4]
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	60da      	str	r2, [r3, #12]
 80030c6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a2f      	ldr	r2, [pc, #188]	; (800318c <HAL_ADC_MspInit+0xdc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d157      	bne.n	8003182 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	4b2e      	ldr	r3, [pc, #184]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a2d      	ldr	r2, [pc, #180]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 80030dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b2b      	ldr	r3, [pc, #172]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ea:	613b      	str	r3, [r7, #16]
 80030ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ee:	2300      	movs	r3, #0
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	4b27      	ldr	r3, [pc, #156]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 80030f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f6:	4a26      	ldr	r2, [pc, #152]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 80030f8:	f043 0301 	orr.w	r3, r3, #1
 80030fc:	6313      	str	r3, [r2, #48]	; 0x30
 80030fe:	4b24      	ldr	r3, [pc, #144]	; (8003190 <HAL_ADC_MspInit+0xe0>)
 8003100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	60fb      	str	r3, [r7, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800310a:	2303      	movs	r3, #3
 800310c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800310e:	2303      	movs	r3, #3
 8003110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003112:	2300      	movs	r3, #0
 8003114:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003116:	f107 0314 	add.w	r3, r7, #20
 800311a:	4619      	mov	r1, r3
 800311c:	481d      	ldr	r0, [pc, #116]	; (8003194 <HAL_ADC_MspInit+0xe4>)
 800311e:	f001 fac3 	bl	80046a8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8003122:	4b1d      	ldr	r3, [pc, #116]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003124:	4a1d      	ldr	r2, [pc, #116]	; (800319c <HAL_ADC_MspInit+0xec>)
 8003126:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8003128:	4b1b      	ldr	r3, [pc, #108]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800312a:	2200      	movs	r2, #0
 800312c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800312e:	4b1a      	ldr	r3, [pc, #104]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003130:	2200      	movs	r2, #0
 8003132:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003134:	4b18      	ldr	r3, [pc, #96]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003136:	2200      	movs	r2, #0
 8003138:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800313a:	4b17      	ldr	r3, [pc, #92]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800313c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003140:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003142:	4b15      	ldr	r3, [pc, #84]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003144:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003148:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800314a:	4b13      	ldr	r3, [pc, #76]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800314c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003150:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8003152:	4b11      	ldr	r3, [pc, #68]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003154:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003158:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800315a:	4b0f      	ldr	r3, [pc, #60]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800315c:	2200      	movs	r2, #0
 800315e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003160:	4b0d      	ldr	r3, [pc, #52]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003162:	2200      	movs	r2, #0
 8003164:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8003166:	480c      	ldr	r0, [pc, #48]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 8003168:	f000 ff2e 	bl	8003fc8 <HAL_DMA_Init>
 800316c:	4603      	mov	r3, r0
 800316e:	2b00      	cmp	r3, #0
 8003170:	d001      	beq.n	8003176 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8003172:	f7ff ff6f 	bl	8003054 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a07      	ldr	r2, [pc, #28]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
 800317c:	4a06      	ldr	r2, [pc, #24]	; (8003198 <HAL_ADC_MspInit+0xe8>)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003182:	bf00      	nop
 8003184:	3728      	adds	r7, #40	; 0x28
 8003186:	46bd      	mov	sp, r7
 8003188:	bd80      	pop	{r7, pc}
 800318a:	bf00      	nop
 800318c:	40012000 	.word	0x40012000
 8003190:	40023800 	.word	0x40023800
 8003194:	40020000 	.word	0x40020000
 8003198:	200000ec 	.word	0x200000ec
 800319c:	40026410 	.word	0x40026410

080031a0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b085      	sub	sp, #20
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4a0b      	ldr	r2, [pc, #44]	; (80031dc <HAL_TIM_PWM_MspInit+0x3c>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d10d      	bne.n	80031ce <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80031b2:	2300      	movs	r3, #0
 80031b4:	60fb      	str	r3, [r7, #12]
 80031b6:	4b0a      	ldr	r3, [pc, #40]	; (80031e0 <HAL_TIM_PWM_MspInit+0x40>)
 80031b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ba:	4a09      	ldr	r2, [pc, #36]	; (80031e0 <HAL_TIM_PWM_MspInit+0x40>)
 80031bc:	f043 0301 	orr.w	r3, r3, #1
 80031c0:	6453      	str	r3, [r2, #68]	; 0x44
 80031c2:	4b07      	ldr	r3, [pc, #28]	; (80031e0 <HAL_TIM_PWM_MspInit+0x40>)
 80031c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	60fb      	str	r3, [r7, #12]
 80031cc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80031ce:	bf00      	nop
 80031d0:	3714      	adds	r7, #20
 80031d2:	46bd      	mov	sp, r7
 80031d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d8:	4770      	bx	lr
 80031da:	bf00      	nop
 80031dc:	40010000 	.word	0x40010000
 80031e0:	40023800 	.word	0x40023800

080031e4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b08a      	sub	sp, #40	; 0x28
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 0314 	add.w	r3, r7, #20
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a19      	ldr	r2, [pc, #100]	; (8003268 <HAL_TIM_Encoder_MspInit+0x84>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d12b      	bne.n	800325e <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003206:	2300      	movs	r3, #0
 8003208:	613b      	str	r3, [r7, #16]
 800320a:	4b18      	ldr	r3, [pc, #96]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	4a17      	ldr	r2, [pc, #92]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	6413      	str	r3, [r2, #64]	; 0x40
 8003216:	4b15      	ldr	r3, [pc, #84]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 8003218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	613b      	str	r3, [r7, #16]
 8003220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003222:	2300      	movs	r3, #0
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	4b11      	ldr	r3, [pc, #68]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 8003228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800322a:	4a10      	ldr	r2, [pc, #64]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6313      	str	r3, [r2, #48]	; 0x30
 8003232:	4b0e      	ldr	r3, [pc, #56]	; (800326c <HAL_TIM_Encoder_MspInit+0x88>)
 8003234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003236:	f003 0301 	and.w	r3, r3, #1
 800323a:	60fb      	str	r3, [r7, #12]
 800323c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800323e:	23c0      	movs	r3, #192	; 0xc0
 8003240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003242:	2302      	movs	r3, #2
 8003244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800324a:	2300      	movs	r3, #0
 800324c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800324e:	2302      	movs	r3, #2
 8003250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003252:	f107 0314 	add.w	r3, r7, #20
 8003256:	4619      	mov	r1, r3
 8003258:	4805      	ldr	r0, [pc, #20]	; (8003270 <HAL_TIM_Encoder_MspInit+0x8c>)
 800325a:	f001 fa25 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800325e:	bf00      	nop
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40000400 	.word	0x40000400
 800326c:	40023800 	.word	0x40023800
 8003270:	40020000 	.word	0x40020000

08003274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a0e      	ldr	r2, [pc, #56]	; (80032bc <HAL_TIM_Base_MspInit+0x48>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d115      	bne.n	80032b2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003286:	2300      	movs	r3, #0
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	4b0d      	ldr	r3, [pc, #52]	; (80032c0 <HAL_TIM_Base_MspInit+0x4c>)
 800328c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800328e:	4a0c      	ldr	r2, [pc, #48]	; (80032c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003290:	f043 0308 	orr.w	r3, r3, #8
 8003294:	6413      	str	r3, [r2, #64]	; 0x40
 8003296:	4b0a      	ldr	r3, [pc, #40]	; (80032c0 <HAL_TIM_Base_MspInit+0x4c>)
 8003298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329a:	f003 0308 	and.w	r3, r3, #8
 800329e:	60fb      	str	r3, [r7, #12]
 80032a0:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80032a2:	2200      	movs	r2, #0
 80032a4:	2100      	movs	r1, #0
 80032a6:	2032      	movs	r0, #50	; 0x32
 80032a8:	f000 fe57 	bl	8003f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80032ac:	2032      	movs	r0, #50	; 0x32
 80032ae:	f000 fe70 	bl	8003f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80032b2:	bf00      	nop
 80032b4:	3710      	adds	r7, #16
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40000c00 	.word	0x40000c00
 80032c0:	40023800 	.word	0x40023800

080032c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80032c4:	b580      	push	{r7, lr}
 80032c6:	b088      	sub	sp, #32
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032cc:	f107 030c 	add.w	r3, r7, #12
 80032d0:	2200      	movs	r2, #0
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	605a      	str	r2, [r3, #4]
 80032d6:	609a      	str	r2, [r3, #8]
 80032d8:	60da      	str	r2, [r3, #12]
 80032da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_TIM_MspPostInit+0x68>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d11e      	bne.n	8003324 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60bb      	str	r3, [r7, #8]
 80032ea:	4b11      	ldr	r3, [pc, #68]	; (8003330 <HAL_TIM_MspPostInit+0x6c>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a10      	ldr	r2, [pc, #64]	; (8003330 <HAL_TIM_MspPostInit+0x6c>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_TIM_MspPostInit+0x6c>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60bb      	str	r3, [r7, #8]
 8003300:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003302:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003308:	2302      	movs	r3, #2
 800330a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800330c:	2300      	movs	r3, #0
 800330e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003310:	2300      	movs	r3, #0
 8003312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003314:	2301      	movs	r3, #1
 8003316:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003318:	f107 030c 	add.w	r3, r7, #12
 800331c:	4619      	mov	r1, r3
 800331e:	4805      	ldr	r0, [pc, #20]	; (8003334 <HAL_TIM_MspPostInit+0x70>)
 8003320:	f001 f9c2 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003324:	bf00      	nop
 8003326:	3720      	adds	r7, #32
 8003328:	46bd      	mov	sp, r7
 800332a:	bd80      	pop	{r7, pc}
 800332c:	40010000 	.word	0x40010000
 8003330:	40023800 	.word	0x40023800
 8003334:	40020000 	.word	0x40020000

08003338 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b08a      	sub	sp, #40	; 0x28
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003340:	f107 0314 	add.w	r3, r7, #20
 8003344:	2200      	movs	r2, #0
 8003346:	601a      	str	r2, [r3, #0]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	609a      	str	r2, [r3, #8]
 800334c:	60da      	str	r2, [r3, #12]
 800334e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_UART_MspInit+0x84>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d12b      	bne.n	80033b2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	613b      	str	r3, [r7, #16]
 800335e:	4b18      	ldr	r3, [pc, #96]	; (80033c0 <HAL_UART_MspInit+0x88>)
 8003360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003362:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_UART_MspInit+0x88>)
 8003364:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003368:	6413      	str	r3, [r2, #64]	; 0x40
 800336a:	4b15      	ldr	r3, [pc, #84]	; (80033c0 <HAL_UART_MspInit+0x88>)
 800336c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	613b      	str	r3, [r7, #16]
 8003374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003376:	2300      	movs	r3, #0
 8003378:	60fb      	str	r3, [r7, #12]
 800337a:	4b11      	ldr	r3, [pc, #68]	; (80033c0 <HAL_UART_MspInit+0x88>)
 800337c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337e:	4a10      	ldr	r2, [pc, #64]	; (80033c0 <HAL_UART_MspInit+0x88>)
 8003380:	f043 0301 	orr.w	r3, r3, #1
 8003384:	6313      	str	r3, [r2, #48]	; 0x30
 8003386:	4b0e      	ldr	r3, [pc, #56]	; (80033c0 <HAL_UART_MspInit+0x88>)
 8003388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	60fb      	str	r3, [r7, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003392:	230c      	movs	r3, #12
 8003394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003396:	2302      	movs	r3, #2
 8003398:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800339e:	2303      	movs	r3, #3
 80033a0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80033a2:	2307      	movs	r3, #7
 80033a4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033a6:	f107 0314 	add.w	r3, r7, #20
 80033aa:	4619      	mov	r1, r3
 80033ac:	4805      	ldr	r0, [pc, #20]	; (80033c4 <HAL_UART_MspInit+0x8c>)
 80033ae:	f001 f97b 	bl	80046a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80033b2:	bf00      	nop
 80033b4:	3728      	adds	r7, #40	; 0x28
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40004400 	.word	0x40004400
 80033c0:	40023800 	.word	0x40023800
 80033c4:	40020000 	.word	0x40020000

080033c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80033c8:	b480      	push	{r7}
 80033ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80033cc:	e7fe      	b.n	80033cc <NMI_Handler+0x4>

080033ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80033ce:	b480      	push	{r7}
 80033d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80033d2:	e7fe      	b.n	80033d2 <HardFault_Handler+0x4>

080033d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80033d4:	b480      	push	{r7}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033d8:	e7fe      	b.n	80033d8 <MemManage_Handler+0x4>

080033da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033da:	b480      	push	{r7}
 80033dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033de:	e7fe      	b.n	80033de <BusFault_Handler+0x4>

080033e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033e4:	e7fe      	b.n	80033e4 <UsageFault_Handler+0x4>

080033e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033e6:	b480      	push	{r7}
 80033e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033ea:	bf00      	nop
 80033ec:	46bd      	mov	sp, r7
 80033ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f2:	4770      	bx	lr

080033f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033f4:	b480      	push	{r7}
 80033f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033f8:	bf00      	nop
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003402:	b480      	push	{r7}
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003406:	bf00      	nop
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003414:	f000 f8a4 	bl	8003560 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003418:	bf00      	nop
 800341a:	bd80      	pop	{r7, pc}

0800341c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003420:	4802      	ldr	r0, [pc, #8]	; (800342c <TIM5_IRQHandler+0x10>)
 8003422:	f002 fa6d 	bl	8005900 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003426:	bf00      	nop
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	200001dc 	.word	0x200001dc

08003430 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8003434:	4802      	ldr	r0, [pc, #8]	; (8003440 <DMA2_Stream0_IRQHandler+0x10>)
 8003436:	f000 fecd 	bl	80041d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800343a:	bf00      	nop
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	200000ec 	.word	0x200000ec

08003444 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003444:	b480      	push	{r7}
 8003446:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003448:	4b06      	ldr	r3, [pc, #24]	; (8003464 <SystemInit+0x20>)
 800344a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800344e:	4a05      	ldr	r2, [pc, #20]	; (8003464 <SystemInit+0x20>)
 8003450:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003454:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003458:	bf00      	nop
 800345a:	46bd      	mov	sp, r7
 800345c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003460:	4770      	bx	lr
 8003462:	bf00      	nop
 8003464:	e000ed00 	.word	0xe000ed00

08003468 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003468:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800346c:	480d      	ldr	r0, [pc, #52]	; (80034a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800346e:	490e      	ldr	r1, [pc, #56]	; (80034a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003470:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003472:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003474:	e002      	b.n	800347c <LoopCopyDataInit>

08003476 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003476:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003478:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800347a:	3304      	adds	r3, #4

0800347c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800347c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800347e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003480:	d3f9      	bcc.n	8003476 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003482:	4a0b      	ldr	r2, [pc, #44]	; (80034b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003484:	4c0b      	ldr	r4, [pc, #44]	; (80034b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003486:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003488:	e001      	b.n	800348e <LoopFillZerobss>

0800348a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800348a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800348c:	3204      	adds	r2, #4

0800348e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800348e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003490:	d3fb      	bcc.n	800348a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003492:	f7ff ffd7 	bl	8003444 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003496:	f003 fb5f 	bl	8006b58 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800349a:	f7fd fe09 	bl	80010b0 <main>
  bx  lr    
 800349e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80034a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80034a8:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80034ac:	08006df8 	.word	0x08006df8
  ldr r2, =_sbss
 80034b0:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80034b4:	20000444 	.word	0x20000444

080034b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034b8:	e7fe      	b.n	80034b8 <ADC_IRQHandler>
	...

080034bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80034c0:	4b0e      	ldr	r3, [pc, #56]	; (80034fc <HAL_Init+0x40>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a0d      	ldr	r2, [pc, #52]	; (80034fc <HAL_Init+0x40>)
 80034c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80034ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80034cc:	4b0b      	ldr	r3, [pc, #44]	; (80034fc <HAL_Init+0x40>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	4a0a      	ldr	r2, [pc, #40]	; (80034fc <HAL_Init+0x40>)
 80034d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80034d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80034d8:	4b08      	ldr	r3, [pc, #32]	; (80034fc <HAL_Init+0x40>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a07      	ldr	r2, [pc, #28]	; (80034fc <HAL_Init+0x40>)
 80034de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80034e4:	2003      	movs	r0, #3
 80034e6:	f000 fd2d 	bl	8003f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034ea:	2000      	movs	r0, #0
 80034ec:	f000 f808 	bl	8003500 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034f0:	f7ff fdb6 	bl	8003060 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034f4:	2300      	movs	r3, #0
}
 80034f6:	4618      	mov	r0, r3
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	40023c00 	.word	0x40023c00

08003500 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003508:	4b12      	ldr	r3, [pc, #72]	; (8003554 <HAL_InitTick+0x54>)
 800350a:	681a      	ldr	r2, [r3, #0]
 800350c:	4b12      	ldr	r3, [pc, #72]	; (8003558 <HAL_InitTick+0x58>)
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	4619      	mov	r1, r3
 8003512:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003516:	fbb3 f3f1 	udiv	r3, r3, r1
 800351a:	fbb2 f3f3 	udiv	r3, r2, r3
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fd45 	bl	8003fae <HAL_SYSTICK_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e00e      	b.n	800354c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2b0f      	cmp	r3, #15
 8003532:	d80a      	bhi.n	800354a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003534:	2200      	movs	r2, #0
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	f04f 30ff 	mov.w	r0, #4294967295
 800353c:	f000 fd0d 	bl	8003f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003540:	4a06      	ldr	r2, [pc, #24]	; (800355c <HAL_InitTick+0x5c>)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003546:	2300      	movs	r3, #0
 8003548:	e000      	b.n	800354c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800354a:	2301      	movs	r3, #1
}
 800354c:	4618      	mov	r0, r3
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}
 8003554:	20000018 	.word	0x20000018
 8003558:	20000020 	.word	0x20000020
 800355c:	2000001c 	.word	0x2000001c

08003560 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003564:	4b06      	ldr	r3, [pc, #24]	; (8003580 <HAL_IncTick+0x20>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	461a      	mov	r2, r3
 800356a:	4b06      	ldr	r3, [pc, #24]	; (8003584 <HAL_IncTick+0x24>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4413      	add	r3, r2
 8003570:	4a04      	ldr	r2, [pc, #16]	; (8003584 <HAL_IncTick+0x24>)
 8003572:	6013      	str	r3, [r2, #0]
}
 8003574:	bf00      	nop
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
 800357e:	bf00      	nop
 8003580:	20000020 	.word	0x20000020
 8003584:	20000440 	.word	0x20000440

08003588 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  return uwTick;
 800358c:	4b03      	ldr	r3, [pc, #12]	; (800359c <HAL_GetTick+0x14>)
 800358e:	681b      	ldr	r3, [r3, #0]
}
 8003590:	4618      	mov	r0, r3
 8003592:	46bd      	mov	sp, r7
 8003594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003598:	4770      	bx	lr
 800359a:	bf00      	nop
 800359c:	20000440 	.word	0x20000440

080035a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80035a8:	2300      	movs	r3, #0
 80035aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d101      	bne.n	80035b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e033      	b.n	800361e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d109      	bne.n	80035d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f7ff fd76 	bl	80030b0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80035e6:	f023 0302 	bic.w	r3, r3, #2
 80035ea:	f043 0202 	orr.w	r2, r3, #2
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 fa58 	bl	8003aa8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003602:	f023 0303 	bic.w	r3, r3, #3
 8003606:	f043 0201 	orr.w	r2, r3, #1
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	641a      	str	r2, [r3, #64]	; 0x40
 800360e:	e001      	b.n	8003614 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2200      	movs	r2, #0
 8003618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800361c:	7bfb      	ldrb	r3, [r7, #15]
}
 800361e:	4618      	mov	r0, r3
 8003620:	3710      	adds	r7, #16
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
	...

08003628 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8003634:	2300      	movs	r3, #0
 8003636:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800363e:	2b01      	cmp	r3, #1
 8003640:	d101      	bne.n	8003646 <HAL_ADC_Start_DMA+0x1e>
 8003642:	2302      	movs	r3, #2
 8003644:	e0ce      	b.n	80037e4 <HAL_ADC_Start_DMA+0x1bc>
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	2201      	movs	r2, #1
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f003 0301 	and.w	r3, r3, #1
 8003658:	2b01      	cmp	r3, #1
 800365a:	d018      	beq.n	800368e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0201 	orr.w	r2, r2, #1
 800366a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800366c:	4b5f      	ldr	r3, [pc, #380]	; (80037ec <HAL_ADC_Start_DMA+0x1c4>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4a5f      	ldr	r2, [pc, #380]	; (80037f0 <HAL_ADC_Start_DMA+0x1c8>)
 8003672:	fba2 2303 	umull	r2, r3, r2, r3
 8003676:	0c9a      	lsrs	r2, r3, #18
 8003678:	4613      	mov	r3, r2
 800367a:	005b      	lsls	r3, r3, #1
 800367c:	4413      	add	r3, r2
 800367e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003680:	e002      	b.n	8003688 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8003682:	693b      	ldr	r3, [r7, #16]
 8003684:	3b01      	subs	r3, #1
 8003686:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d1f9      	bne.n	8003682 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003698:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800369c:	d107      	bne.n	80036ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689a      	ldr	r2, [r3, #8]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80036ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	f003 0301 	and.w	r3, r3, #1
 80036b8:	2b01      	cmp	r3, #1
 80036ba:	f040 8086 	bne.w	80037ca <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80036c6:	f023 0301 	bic.w	r3, r3, #1
 80036ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d007      	beq.n	80036f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80036e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fc:	d106      	bne.n	800370c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003702:	f023 0206 	bic.w	r2, r3, #6
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	645a      	str	r2, [r3, #68]	; 0x44
 800370a:	e002      	b.n	8003712 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2200      	movs	r2, #0
 8003710:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2200      	movs	r2, #0
 8003716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800371a:	4b36      	ldr	r3, [pc, #216]	; (80037f4 <HAL_ADC_Start_DMA+0x1cc>)
 800371c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003722:	4a35      	ldr	r2, [pc, #212]	; (80037f8 <HAL_ADC_Start_DMA+0x1d0>)
 8003724:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800372a:	4a34      	ldr	r2, [pc, #208]	; (80037fc <HAL_ADC_Start_DMA+0x1d4>)
 800372c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <HAL_ADC_Start_DMA+0x1d8>)
 8003734:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800373e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800374e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	689a      	ldr	r2, [r3, #8]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	334c      	adds	r3, #76	; 0x4c
 800376a:	4619      	mov	r1, r3
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f000 fcd8 	bl	8004124 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003774:	697b      	ldr	r3, [r7, #20]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f003 031f 	and.w	r3, r3, #31
 800377c:	2b00      	cmp	r3, #0
 800377e:	d10f      	bne.n	80037a0 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800378a:	2b00      	cmp	r3, #0
 800378c:	d129      	bne.n	80037e2 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800379c:	609a      	str	r2, [r3, #8]
 800379e:	e020      	b.n	80037e2 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	4a17      	ldr	r2, [pc, #92]	; (8003804 <HAL_ADC_Start_DMA+0x1dc>)
 80037a6:	4293      	cmp	r3, r2
 80037a8:	d11b      	bne.n	80037e2 <HAL_ADC_Start_DMA+0x1ba>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d114      	bne.n	80037e2 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	e00b      	b.n	80037e2 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ce:	f043 0210 	orr.w	r2, r3, #16
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0201 	orr.w	r2, r3, #1
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80037e2:	2300      	movs	r3, #0
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}
 80037ec:	20000018 	.word	0x20000018
 80037f0:	431bde83 	.word	0x431bde83
 80037f4:	40012300 	.word	0x40012300
 80037f8:	08003ca1 	.word	0x08003ca1
 80037fc:	08003d5b 	.word	0x08003d5b
 8003800:	08003d77 	.word	0x08003d77
 8003804:	40012000 	.word	0x40012000

08003808 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8003810:	bf00      	nop
 8003812:	370c      	adds	r7, #12
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8003824:	bf00      	nop
 8003826:	370c      	adds	r7, #12
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800384e:	2300      	movs	r3, #0
 8003850:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003858:	2b01      	cmp	r3, #1
 800385a:	d101      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1c>
 800385c:	2302      	movs	r3, #2
 800385e:	e113      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x244>
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2201      	movs	r2, #1
 8003864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	2b09      	cmp	r3, #9
 800386e:	d925      	bls.n	80038bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	68d9      	ldr	r1, [r3, #12]
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	b29b      	uxth	r3, r3
 800387c:	461a      	mov	r2, r3
 800387e:	4613      	mov	r3, r2
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	4413      	add	r3, r2
 8003884:	3b1e      	subs	r3, #30
 8003886:	2207      	movs	r2, #7
 8003888:	fa02 f303 	lsl.w	r3, r2, r3
 800388c:	43da      	mvns	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	400a      	ands	r2, r1
 8003894:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	68d9      	ldr	r1, [r3, #12]
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	689a      	ldr	r2, [r3, #8]
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	4618      	mov	r0, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4403      	add	r3, r0
 80038ae:	3b1e      	subs	r3, #30
 80038b0:	409a      	lsls	r2, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	430a      	orrs	r2, r1
 80038b8:	60da      	str	r2, [r3, #12]
 80038ba:	e022      	b.n	8003902 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	6919      	ldr	r1, [r3, #16]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	461a      	mov	r2, r3
 80038ca:	4613      	mov	r3, r2
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	4413      	add	r3, r2
 80038d0:	2207      	movs	r2, #7
 80038d2:	fa02 f303 	lsl.w	r3, r2, r3
 80038d6:	43da      	mvns	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	400a      	ands	r2, r1
 80038de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6919      	ldr	r1, [r3, #16]
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	689a      	ldr	r2, [r3, #8]
 80038ea:	683b      	ldr	r3, [r7, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	b29b      	uxth	r3, r3
 80038f0:	4618      	mov	r0, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4403      	add	r3, r0
 80038f8:	409a      	lsls	r2, r3
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	430a      	orrs	r2, r1
 8003900:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	2b06      	cmp	r3, #6
 8003908:	d824      	bhi.n	8003954 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	685a      	ldr	r2, [r3, #4]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	3b05      	subs	r3, #5
 800391c:	221f      	movs	r2, #31
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	43da      	mvns	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	400a      	ands	r2, r1
 800392a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	b29b      	uxth	r3, r3
 8003938:	4618      	mov	r0, r3
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	685a      	ldr	r2, [r3, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	4413      	add	r3, r2
 8003944:	3b05      	subs	r3, #5
 8003946:	fa00 f203 	lsl.w	r2, r0, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	430a      	orrs	r2, r1
 8003950:	635a      	str	r2, [r3, #52]	; 0x34
 8003952:	e04c      	b.n	80039ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	2b0c      	cmp	r3, #12
 800395a:	d824      	bhi.n	80039a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685a      	ldr	r2, [r3, #4]
 8003966:	4613      	mov	r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	4413      	add	r3, r2
 800396c:	3b23      	subs	r3, #35	; 0x23
 800396e:	221f      	movs	r2, #31
 8003970:	fa02 f303 	lsl.w	r3, r2, r3
 8003974:	43da      	mvns	r2, r3
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	400a      	ands	r2, r1
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	b29b      	uxth	r3, r3
 800398a:	4618      	mov	r0, r3
 800398c:	683b      	ldr	r3, [r7, #0]
 800398e:	685a      	ldr	r2, [r3, #4]
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	3b23      	subs	r3, #35	; 0x23
 8003998:	fa00 f203 	lsl.w	r2, r0, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	430a      	orrs	r2, r1
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
 80039a4:	e023      	b.n	80039ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685a      	ldr	r2, [r3, #4]
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	3b41      	subs	r3, #65	; 0x41
 80039b8:	221f      	movs	r2, #31
 80039ba:	fa02 f303 	lsl.w	r3, r2, r3
 80039be:	43da      	mvns	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	400a      	ands	r2, r1
 80039c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	4618      	mov	r0, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	3b41      	subs	r3, #65	; 0x41
 80039e2:	fa00 f203 	lsl.w	r2, r0, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80039ee:	4b29      	ldr	r3, [pc, #164]	; (8003a94 <HAL_ADC_ConfigChannel+0x250>)
 80039f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_ADC_ConfigChannel+0x254>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d10f      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x1d8>
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	2b12      	cmp	r3, #18
 8003a02:	d10b      	bne.n	8003a1c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a1d      	ldr	r2, [pc, #116]	; (8003a98 <HAL_ADC_ConfigChannel+0x254>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d12b      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x23a>
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a1c      	ldr	r2, [pc, #112]	; (8003a9c <HAL_ADC_ConfigChannel+0x258>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <HAL_ADC_ConfigChannel+0x1f4>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2b11      	cmp	r3, #17
 8003a36:	d122      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a11      	ldr	r2, [pc, #68]	; (8003a9c <HAL_ADC_ConfigChannel+0x258>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d111      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003a5a:	4b11      	ldr	r3, [pc, #68]	; (8003aa0 <HAL_ADC_ConfigChannel+0x25c>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	4a11      	ldr	r2, [pc, #68]	; (8003aa4 <HAL_ADC_ConfigChannel+0x260>)
 8003a60:	fba2 2303 	umull	r2, r3, r2, r3
 8003a64:	0c9a      	lsrs	r2, r3, #18
 8003a66:	4613      	mov	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4413      	add	r3, r2
 8003a6c:	005b      	lsls	r3, r3, #1
 8003a6e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a70:	e002      	b.n	8003a78 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	3b01      	subs	r3, #1
 8003a76:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d1f9      	bne.n	8003a72 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003a86:	2300      	movs	r3, #0
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	3714      	adds	r7, #20
 8003a8c:	46bd      	mov	sp, r7
 8003a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a92:	4770      	bx	lr
 8003a94:	40012300 	.word	0x40012300
 8003a98:	40012000 	.word	0x40012000
 8003a9c:	10000012 	.word	0x10000012
 8003aa0:	20000018 	.word	0x20000018
 8003aa4:	431bde83 	.word	0x431bde83

08003aa8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003aa8:	b480      	push	{r7}
 8003aaa:	b085      	sub	sp, #20
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003ab0:	4b79      	ldr	r3, [pc, #484]	; (8003c98 <ADC_Init+0x1f0>)
 8003ab2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685a      	ldr	r2, [r3, #4]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	431a      	orrs	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003adc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	6859      	ldr	r1, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	021a      	lsls	r2, r3, #8
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003b00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	6859      	ldr	r1, [r3, #4]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	430a      	orrs	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689a      	ldr	r2, [r3, #8]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6899      	ldr	r1, [r3, #8]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	68da      	ldr	r2, [r3, #12]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	4a58      	ldr	r2, [pc, #352]	; (8003c9c <ADC_Init+0x1f4>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d022      	beq.n	8003b86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	689a      	ldr	r2, [r3, #8]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	6899      	ldr	r1, [r3, #8]
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	430a      	orrs	r2, r1
 8003b60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689a      	ldr	r2, [r3, #8]
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003b70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6899      	ldr	r1, [r3, #8]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	430a      	orrs	r2, r1
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	e00f      	b.n	8003ba6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	689a      	ldr	r2, [r3, #8]
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003b94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ba4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	689a      	ldr	r2, [r3, #8]
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0202 	bic.w	r2, r2, #2
 8003bb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6899      	ldr	r1, [r3, #8]
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	7e1b      	ldrb	r3, [r3, #24]
 8003bc0:	005a      	lsls	r2, r3, #1
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d01b      	beq.n	8003c0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	685a      	ldr	r2, [r3, #4]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003bf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6859      	ldr	r1, [r3, #4]
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	035a      	lsls	r2, r3, #13
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
 8003c0a:	e007      	b.n	8003c1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685a      	ldr	r2, [r3, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003c2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	3b01      	subs	r3, #1
 8003c38:	051a      	lsls	r2, r3, #20
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	689a      	ldr	r2, [r3, #8]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003c50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	6899      	ldr	r1, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c5e:	025a      	lsls	r2, r3, #9
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	689a      	ldr	r2, [r3, #8]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	6899      	ldr	r1, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	695b      	ldr	r3, [r3, #20]
 8003c82:	029a      	lsls	r2, r3, #10
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	609a      	str	r2, [r3, #8]
}
 8003c8c:	bf00      	nop
 8003c8e:	3714      	adds	r7, #20
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr
 8003c98:	40012300 	.word	0x40012300
 8003c9c:	0f000001 	.word	0x0f000001

08003ca0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b084      	sub	sp, #16
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cac:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cb2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d13c      	bne.n	8003d34 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d12b      	bne.n	8003d2c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d127      	bne.n	8003d2c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d006      	beq.n	8003cf8 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d119      	bne.n	8003d2c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0220 	bic.w	r2, r2, #32
 8003d06:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d105      	bne.n	8003d2c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d24:	f043 0201 	orr.w	r2, r3, #1
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003d2c:	68f8      	ldr	r0, [r7, #12]
 8003d2e:	f7ff fd6b 	bl	8003808 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003d32:	e00e      	b.n	8003d52 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d38:	f003 0310 	and.w	r3, r3, #16
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d003      	beq.n	8003d48 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003d40:	68f8      	ldr	r0, [r7, #12]
 8003d42:	f7ff fd75 	bl	8003830 <HAL_ADC_ErrorCallback>
}
 8003d46:	e004      	b.n	8003d52 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	4798      	blx	r3
}
 8003d52:	bf00      	nop
 8003d54:	3710      	adds	r7, #16
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}

08003d5a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003d5a:	b580      	push	{r7, lr}
 8003d5c:	b084      	sub	sp, #16
 8003d5e:	af00      	add	r7, sp, #0
 8003d60:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d66:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003d68:	68f8      	ldr	r0, [r7, #12]
 8003d6a:	f7ff fd57 	bl	800381c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d6e:	bf00      	nop
 8003d70:	3710      	adds	r7, #16
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003d76:	b580      	push	{r7, lr}
 8003d78:	b084      	sub	sp, #16
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d82:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2240      	movs	r2, #64	; 0x40
 8003d88:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d8e:	f043 0204 	orr.w	r2, r3, #4
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003d96:	68f8      	ldr	r0, [r7, #12]
 8003d98:	f7ff fd4a 	bl	8003830 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	f003 0307 	and.w	r3, r3, #7
 8003db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db4:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003db6:	68db      	ldr	r3, [r3, #12]
 8003db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd6:	4a04      	ldr	r2, [pc, #16]	; (8003de8 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	60d3      	str	r3, [r2, #12]
}
 8003ddc:	bf00      	nop
 8003dde:	3714      	adds	r7, #20
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000ed00 	.word	0xe000ed00

08003dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003df0:	4b04      	ldr	r3, [pc, #16]	; (8003e04 <__NVIC_GetPriorityGrouping+0x18>)
 8003df2:	68db      	ldr	r3, [r3, #12]
 8003df4:	0a1b      	lsrs	r3, r3, #8
 8003df6:	f003 0307 	and.w	r3, r3, #7
}
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e02:	4770      	bx	lr
 8003e04:	e000ed00 	.word	0xe000ed00

08003e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	b083      	sub	sp, #12
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	4603      	mov	r3, r0
 8003e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	db0b      	blt.n	8003e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1a:	79fb      	ldrb	r3, [r7, #7]
 8003e1c:	f003 021f 	and.w	r2, r3, #31
 8003e20:	4907      	ldr	r1, [pc, #28]	; (8003e40 <__NVIC_EnableIRQ+0x38>)
 8003e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e26:	095b      	lsrs	r3, r3, #5
 8003e28:	2001      	movs	r0, #1
 8003e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e32:	bf00      	nop
 8003e34:	370c      	adds	r7, #12
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	e000e100 	.word	0xe000e100

08003e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	4603      	mov	r3, r0
 8003e4c:	6039      	str	r1, [r7, #0]
 8003e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	db0a      	blt.n	8003e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	490c      	ldr	r1, [pc, #48]	; (8003e90 <__NVIC_SetPriority+0x4c>)
 8003e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e62:	0112      	lsls	r2, r2, #4
 8003e64:	b2d2      	uxtb	r2, r2
 8003e66:	440b      	add	r3, r1
 8003e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e6c:	e00a      	b.n	8003e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	b2da      	uxtb	r2, r3
 8003e72:	4908      	ldr	r1, [pc, #32]	; (8003e94 <__NVIC_SetPriority+0x50>)
 8003e74:	79fb      	ldrb	r3, [r7, #7]
 8003e76:	f003 030f 	and.w	r3, r3, #15
 8003e7a:	3b04      	subs	r3, #4
 8003e7c:	0112      	lsls	r2, r2, #4
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	440b      	add	r3, r1
 8003e82:	761a      	strb	r2, [r3, #24]
}
 8003e84:	bf00      	nop
 8003e86:	370c      	adds	r7, #12
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	e000e100 	.word	0xe000e100
 8003e94:	e000ed00 	.word	0xe000ed00

08003e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b089      	sub	sp, #36	; 0x24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f003 0307 	and.w	r3, r3, #7
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	f1c3 0307 	rsb	r3, r3, #7
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	bf28      	it	cs
 8003eb6:	2304      	movcs	r3, #4
 8003eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	2b06      	cmp	r3, #6
 8003ec0:	d902      	bls.n	8003ec8 <NVIC_EncodePriority+0x30>
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	3b03      	subs	r3, #3
 8003ec6:	e000      	b.n	8003eca <NVIC_EncodePriority+0x32>
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ed0:	69bb      	ldr	r3, [r7, #24]
 8003ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed6:	43da      	mvns	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	401a      	ands	r2, r3
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eea:	43d9      	mvns	r1, r3
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ef0:	4313      	orrs	r3, r2
         );
}
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	3724      	adds	r7, #36	; 0x24
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr
	...

08003f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	3b01      	subs	r3, #1
 8003f0c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f10:	d301      	bcc.n	8003f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f12:	2301      	movs	r3, #1
 8003f14:	e00f      	b.n	8003f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f16:	4a0a      	ldr	r2, [pc, #40]	; (8003f40 <SysTick_Config+0x40>)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1e:	210f      	movs	r1, #15
 8003f20:	f04f 30ff 	mov.w	r0, #4294967295
 8003f24:	f7ff ff8e 	bl	8003e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <SysTick_Config+0x40>)
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2e:	4b04      	ldr	r3, [pc, #16]	; (8003f40 <SysTick_Config+0x40>)
 8003f30:	2207      	movs	r2, #7
 8003f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	4618      	mov	r0, r3
 8003f38:	3708      	adds	r7, #8
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	bf00      	nop
 8003f40:	e000e010 	.word	0xe000e010

08003f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b082      	sub	sp, #8
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f7ff ff29 	bl	8003da4 <__NVIC_SetPriorityGrouping>
}
 8003f52:	bf00      	nop
 8003f54:	3708      	adds	r7, #8
 8003f56:	46bd      	mov	sp, r7
 8003f58:	bd80      	pop	{r7, pc}

08003f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f5a:	b580      	push	{r7, lr}
 8003f5c:	b086      	sub	sp, #24
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	4603      	mov	r3, r0
 8003f62:	60b9      	str	r1, [r7, #8]
 8003f64:	607a      	str	r2, [r7, #4]
 8003f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f6c:	f7ff ff3e 	bl	8003dec <__NVIC_GetPriorityGrouping>
 8003f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f72:	687a      	ldr	r2, [r7, #4]
 8003f74:	68b9      	ldr	r1, [r7, #8]
 8003f76:	6978      	ldr	r0, [r7, #20]
 8003f78:	f7ff ff8e 	bl	8003e98 <NVIC_EncodePriority>
 8003f7c:	4602      	mov	r2, r0
 8003f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f82:	4611      	mov	r1, r2
 8003f84:	4618      	mov	r0, r3
 8003f86:	f7ff ff5d 	bl	8003e44 <__NVIC_SetPriority>
}
 8003f8a:	bf00      	nop
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	4603      	mov	r3, r0
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f7ff ff31 	bl	8003e08 <__NVIC_EnableIRQ>
}
 8003fa6:	bf00      	nop
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b082      	sub	sp, #8
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f7ff ffa2 	bl	8003f00 <SysTick_Config>
 8003fbc:	4603      	mov	r3, r0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3708      	adds	r7, #8
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
	...

08003fc8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fd4:	f7ff fad8 	bl	8003588 <HAL_GetTick>
 8003fd8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e099      	b.n	8004118 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0201 	bic.w	r2, r2, #1
 8004002:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004004:	e00f      	b.n	8004026 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004006:	f7ff fabf 	bl	8003588 <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b05      	cmp	r3, #5
 8004012:	d908      	bls.n	8004026 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2220      	movs	r2, #32
 8004018:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2203      	movs	r2, #3
 800401e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004022:	2303      	movs	r3, #3
 8004024:	e078      	b.n	8004118 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e8      	bne.n	8004006 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800403c:	697a      	ldr	r2, [r7, #20]
 800403e:	4b38      	ldr	r3, [pc, #224]	; (8004120 <HAL_DMA_Init+0x158>)
 8004040:	4013      	ands	r3, r2
 8004042:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685a      	ldr	r2, [r3, #4]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004052:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800405e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	699b      	ldr	r3, [r3, #24]
 8004064:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004072:	697a      	ldr	r2, [r7, #20]
 8004074:	4313      	orrs	r3, r2
 8004076:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b04      	cmp	r3, #4
 800407e:	d107      	bne.n	8004090 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004088:	4313      	orrs	r3, r2
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	697a      	ldr	r2, [r7, #20]
 8004096:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	695b      	ldr	r3, [r3, #20]
 800409e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0307 	bic.w	r3, r3, #7
 80040a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	697a      	ldr	r2, [r7, #20]
 80040ae:	4313      	orrs	r3, r2
 80040b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b6:	2b04      	cmp	r3, #4
 80040b8:	d117      	bne.n	80040ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040be:	697a      	ldr	r2, [r7, #20]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d00e      	beq.n	80040ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 fa6f 	bl	80045b0 <DMA_CheckFifoParam>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d008      	beq.n	80040ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2240      	movs	r2, #64	; 0x40
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	2201      	movs	r2, #1
 80040e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040e6:	2301      	movs	r3, #1
 80040e8:	e016      	b.n	8004118 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	697a      	ldr	r2, [r7, #20]
 80040f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f000 fa26 	bl	8004544 <DMA_CalcBaseAndBitshift>
 80040f8:	4603      	mov	r3, r0
 80040fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004100:	223f      	movs	r2, #63	; 0x3f
 8004102:	409a      	lsls	r2, r3
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2200      	movs	r2, #0
 800410c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2201      	movs	r2, #1
 8004112:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}
 8004120:	f010803f 	.word	0xf010803f

08004124 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004132:	2300      	movs	r3, #0
 8004134:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_DMA_Start_IT+0x26>
 8004146:	2302      	movs	r3, #2
 8004148:	e040      	b.n	80041cc <HAL_DMA_Start_IT+0xa8>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004158:	b2db      	uxtb	r3, r3
 800415a:	2b01      	cmp	r3, #1
 800415c:	d12f      	bne.n	80041be <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2202      	movs	r2, #2
 8004162:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	2200      	movs	r2, #0
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	687a      	ldr	r2, [r7, #4]
 8004170:	68b9      	ldr	r1, [r7, #8]
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 f9b8 	bl	80044e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800417c:	223f      	movs	r2, #63	; 0x3f
 800417e:	409a      	lsls	r2, r3
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	681a      	ldr	r2, [r3, #0]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f042 0216 	orr.w	r2, r2, #22
 8004192:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004198:	2b00      	cmp	r3, #0
 800419a:	d007      	beq.n	80041ac <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f042 0208 	orr.w	r2, r2, #8
 80041aa:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]
 80041bc:	e005      	b.n	80041ca <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	2200      	movs	r2, #0
 80041c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
 80041c8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3718      	adds	r7, #24
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b086      	sub	sp, #24
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80041dc:	2300      	movs	r3, #0
 80041de:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80041e0:	4b8e      	ldr	r3, [pc, #568]	; (800441c <HAL_DMA_IRQHandler+0x248>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a8e      	ldr	r2, [pc, #568]	; (8004420 <HAL_DMA_IRQHandler+0x24c>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0a9b      	lsrs	r3, r3, #10
 80041ec:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041f2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041fe:	2208      	movs	r2, #8
 8004200:	409a      	lsls	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	4013      	ands	r3, r2
 8004206:	2b00      	cmp	r3, #0
 8004208:	d01a      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 0304 	and.w	r3, r3, #4
 8004214:	2b00      	cmp	r3, #0
 8004216:	d013      	beq.n	8004240 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0204 	bic.w	r2, r2, #4
 8004226:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422c:	2208      	movs	r2, #8
 800422e:	409a      	lsls	r2, r3
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004238:	f043 0201 	orr.w	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004244:	2201      	movs	r2, #1
 8004246:	409a      	lsls	r2, r3
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4013      	ands	r3, r2
 800424c:	2b00      	cmp	r3, #0
 800424e:	d012      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	695b      	ldr	r3, [r3, #20]
 8004256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004262:	2201      	movs	r2, #1
 8004264:	409a      	lsls	r2, r3
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800426e:	f043 0202 	orr.w	r2, r3, #2
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800427a:	2204      	movs	r2, #4
 800427c:	409a      	lsls	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	4013      	ands	r3, r2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d012      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00b      	beq.n	80042ac <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004298:	2204      	movs	r2, #4
 800429a:	409a      	lsls	r2, r3
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a4:	f043 0204 	orr.w	r2, r3, #4
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b0:	2210      	movs	r2, #16
 80042b2:	409a      	lsls	r2, r3
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	4013      	ands	r3, r2
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d043      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0308 	and.w	r3, r3, #8
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d03c      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ce:	2210      	movs	r2, #16
 80042d0:	409a      	lsls	r2, r3
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d018      	beq.n	8004316 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d108      	bne.n	8004304 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d024      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	4798      	blx	r3
 8004302:	e01f      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004308:	2b00      	cmp	r3, #0
 800430a:	d01b      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4798      	blx	r3
 8004314:	e016      	b.n	8004344 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004320:	2b00      	cmp	r3, #0
 8004322:	d107      	bne.n	8004334 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	681a      	ldr	r2, [r3, #0]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f022 0208 	bic.w	r2, r2, #8
 8004332:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004338:	2b00      	cmp	r3, #0
 800433a:	d003      	beq.n	8004344 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2220      	movs	r2, #32
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	f000 808f 	beq.w	8004474 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	f003 0310 	and.w	r3, r3, #16
 8004360:	2b00      	cmp	r3, #0
 8004362:	f000 8087 	beq.w	8004474 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800436a:	2220      	movs	r2, #32
 800436c:	409a      	lsls	r2, r3
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b05      	cmp	r3, #5
 800437c:	d136      	bne.n	80043ec <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681a      	ldr	r2, [r3, #0]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 0216 	bic.w	r2, r2, #22
 800438c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695a      	ldr	r2, [r3, #20]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800439c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <HAL_DMA_IRQHandler+0x1da>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d007      	beq.n	80043be <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0208 	bic.w	r2, r2, #8
 80043bc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c2:	223f      	movs	r2, #63	; 0x3f
 80043c4:	409a      	lsls	r2, r3
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d07e      	beq.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043e6:	6878      	ldr	r0, [r7, #4]
 80043e8:	4798      	blx	r3
        }
        return;
 80043ea:	e079      	b.n	80044e0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d01d      	beq.n	8004436 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004404:	2b00      	cmp	r3, #0
 8004406:	d10d      	bne.n	8004424 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440c:	2b00      	cmp	r3, #0
 800440e:	d031      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004414:	6878      	ldr	r0, [r7, #4]
 8004416:	4798      	blx	r3
 8004418:	e02c      	b.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
 800441a:	bf00      	nop
 800441c:	20000018 	.word	0x20000018
 8004420:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004428:	2b00      	cmp	r3, #0
 800442a:	d023      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	4798      	blx	r3
 8004434:	e01e      	b.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10f      	bne.n	8004464 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681a      	ldr	r2, [r3, #0]
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f022 0210 	bic.w	r2, r2, #16
 8004452:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004478:	2b00      	cmp	r3, #0
 800447a:	d032      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004480:	f003 0301 	and.w	r3, r3, #1
 8004484:	2b00      	cmp	r3, #0
 8004486:	d022      	beq.n	80044ce <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2205      	movs	r2, #5
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	681a      	ldr	r2, [r3, #0]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f022 0201 	bic.w	r2, r2, #1
 800449e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	3301      	adds	r3, #1
 80044a4:	60bb      	str	r3, [r7, #8]
 80044a6:	697a      	ldr	r2, [r7, #20]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d307      	bcc.n	80044bc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d1f2      	bne.n	80044a0 <HAL_DMA_IRQHandler+0x2cc>
 80044ba:	e000      	b.n	80044be <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044bc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d005      	beq.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	4798      	blx	r3
 80044de:	e000      	b.n	80044e2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80044e0:	bf00      	nop
    }
  }
}
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b085      	sub	sp, #20
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	60f8      	str	r0, [r7, #12]
 80044f0:	60b9      	str	r1, [r7, #8]
 80044f2:	607a      	str	r2, [r7, #4]
 80044f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004504:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	689b      	ldr	r3, [r3, #8]
 8004512:	2b40      	cmp	r3, #64	; 0x40
 8004514:	d108      	bne.n	8004528 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	687a      	ldr	r2, [r7, #4]
 800451c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	68ba      	ldr	r2, [r7, #8]
 8004524:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004526:	e007      	b.n	8004538 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	60da      	str	r2, [r3, #12]
}
 8004538:	bf00      	nop
 800453a:	3714      	adds	r7, #20
 800453c:	46bd      	mov	sp, r7
 800453e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004542:	4770      	bx	lr

08004544 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004544:	b480      	push	{r7}
 8004546:	b085      	sub	sp, #20
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	b2db      	uxtb	r3, r3
 8004552:	3b10      	subs	r3, #16
 8004554:	4a14      	ldr	r2, [pc, #80]	; (80045a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004556:	fba2 2303 	umull	r2, r3, r2, r3
 800455a:	091b      	lsrs	r3, r3, #4
 800455c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800455e:	4a13      	ldr	r2, [pc, #76]	; (80045ac <DMA_CalcBaseAndBitshift+0x68>)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	4413      	add	r3, r2
 8004564:	781b      	ldrb	r3, [r3, #0]
 8004566:	461a      	mov	r2, r3
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b03      	cmp	r3, #3
 8004570:	d909      	bls.n	8004586 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	1d1a      	adds	r2, r3, #4
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	659a      	str	r2, [r3, #88]	; 0x58
 8004584:	e007      	b.n	8004596 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800458e:	f023 0303 	bic.w	r3, r3, #3
 8004592:	687a      	ldr	r2, [r7, #4]
 8004594:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop
 80045a8:	aaaaaaab 	.word	0xaaaaaaab
 80045ac:	08006de0 	.word	0x08006de0

080045b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045b0:	b480      	push	{r7}
 80045b2:	b085      	sub	sp, #20
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045b8:	2300      	movs	r3, #0
 80045ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	699b      	ldr	r3, [r3, #24]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d11f      	bne.n	800460a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	2b03      	cmp	r3, #3
 80045ce:	d856      	bhi.n	800467e <DMA_CheckFifoParam+0xce>
 80045d0:	a201      	add	r2, pc, #4	; (adr r2, 80045d8 <DMA_CheckFifoParam+0x28>)
 80045d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045d6:	bf00      	nop
 80045d8:	080045e9 	.word	0x080045e9
 80045dc:	080045fb 	.word	0x080045fb
 80045e0:	080045e9 	.word	0x080045e9
 80045e4:	0800467f 	.word	0x0800467f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d046      	beq.n	8004682 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80045f4:	2301      	movs	r3, #1
 80045f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80045f8:	e043      	b.n	8004682 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004602:	d140      	bne.n	8004686 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004608:	e03d      	b.n	8004686 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004612:	d121      	bne.n	8004658 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b03      	cmp	r3, #3
 8004618:	d837      	bhi.n	800468a <DMA_CheckFifoParam+0xda>
 800461a:	a201      	add	r2, pc, #4	; (adr r2, 8004620 <DMA_CheckFifoParam+0x70>)
 800461c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004620:	08004631 	.word	0x08004631
 8004624:	08004637 	.word	0x08004637
 8004628:	08004631 	.word	0x08004631
 800462c:	08004649 	.word	0x08004649
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	73fb      	strb	r3, [r7, #15]
      break;
 8004634:	e030      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800463a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800463e:	2b00      	cmp	r3, #0
 8004640:	d025      	beq.n	800468e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004646:	e022      	b.n	800468e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004650:	d11f      	bne.n	8004692 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004656:	e01c      	b.n	8004692 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	2b02      	cmp	r3, #2
 800465c:	d903      	bls.n	8004666 <DMA_CheckFifoParam+0xb6>
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	2b03      	cmp	r3, #3
 8004662:	d003      	beq.n	800466c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004664:	e018      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004666:	2301      	movs	r3, #1
 8004668:	73fb      	strb	r3, [r7, #15]
      break;
 800466a:	e015      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	73fb      	strb	r3, [r7, #15]
      break;
 800467c:	e00b      	b.n	8004696 <DMA_CheckFifoParam+0xe6>
      break;
 800467e:	bf00      	nop
 8004680:	e00a      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004682:	bf00      	nop
 8004684:	e008      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004686:	bf00      	nop
 8004688:	e006      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468a:	bf00      	nop
 800468c:	e004      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 800468e:	bf00      	nop
 8004690:	e002      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;   
 8004692:	bf00      	nop
 8004694:	e000      	b.n	8004698 <DMA_CheckFifoParam+0xe8>
      break;
 8004696:	bf00      	nop
    }
  } 
  
  return status; 
 8004698:	7bfb      	ldrb	r3, [r7, #15]
}
 800469a:	4618      	mov	r0, r3
 800469c:	3714      	adds	r7, #20
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop

080046a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
 80046b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046b2:	2300      	movs	r3, #0
 80046b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046b6:	2300      	movs	r3, #0
 80046b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046be:	2300      	movs	r3, #0
 80046c0:	61fb      	str	r3, [r7, #28]
 80046c2:	e159      	b.n	8004978 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80046c4:	2201      	movs	r2, #1
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fa02 f303 	lsl.w	r3, r2, r3
 80046cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	697a      	ldr	r2, [r7, #20]
 80046d4:	4013      	ands	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80046d8:	693a      	ldr	r2, [r7, #16]
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	429a      	cmp	r2, r3
 80046de:	f040 8148 	bne.w	8004972 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f003 0303 	and.w	r3, r3, #3
 80046ea:	2b01      	cmp	r3, #1
 80046ec:	d005      	beq.n	80046fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80046f6:	2b02      	cmp	r3, #2
 80046f8:	d130      	bne.n	800475c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004700:	69fb      	ldr	r3, [r7, #28]
 8004702:	005b      	lsls	r3, r3, #1
 8004704:	2203      	movs	r2, #3
 8004706:	fa02 f303 	lsl.w	r3, r2, r3
 800470a:	43db      	mvns	r3, r3
 800470c:	69ba      	ldr	r2, [r7, #24]
 800470e:	4013      	ands	r3, r2
 8004710:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68da      	ldr	r2, [r3, #12]
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	fa02 f303 	lsl.w	r3, r2, r3
 800471e:	69ba      	ldr	r2, [r7, #24]
 8004720:	4313      	orrs	r3, r2
 8004722:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	69ba      	ldr	r2, [r7, #24]
 8004728:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004730:	2201      	movs	r2, #1
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	43db      	mvns	r3, r3
 800473a:	69ba      	ldr	r2, [r7, #24]
 800473c:	4013      	ands	r3, r2
 800473e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	091b      	lsrs	r3, r3, #4
 8004746:	f003 0201 	and.w	r2, r3, #1
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	69ba      	ldr	r2, [r7, #24]
 8004752:	4313      	orrs	r3, r2
 8004754:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	69ba      	ldr	r2, [r7, #24]
 800475a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	f003 0303 	and.w	r3, r3, #3
 8004764:	2b03      	cmp	r3, #3
 8004766:	d017      	beq.n	8004798 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800476e:	69fb      	ldr	r3, [r7, #28]
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	2203      	movs	r2, #3
 8004774:	fa02 f303 	lsl.w	r3, r2, r3
 8004778:	43db      	mvns	r3, r3
 800477a:	69ba      	ldr	r2, [r7, #24]
 800477c:	4013      	ands	r3, r2
 800477e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	689a      	ldr	r2, [r3, #8]
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	fa02 f303 	lsl.w	r3, r2, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4313      	orrs	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69ba      	ldr	r2, [r7, #24]
 8004796:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685b      	ldr	r3, [r3, #4]
 800479c:	f003 0303 	and.w	r3, r3, #3
 80047a0:	2b02      	cmp	r3, #2
 80047a2:	d123      	bne.n	80047ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80047a4:	69fb      	ldr	r3, [r7, #28]
 80047a6:	08da      	lsrs	r2, r3, #3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	3208      	adds	r2, #8
 80047ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80047b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80047b2:	69fb      	ldr	r3, [r7, #28]
 80047b4:	f003 0307 	and.w	r3, r3, #7
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	220f      	movs	r2, #15
 80047bc:	fa02 f303 	lsl.w	r3, r2, r3
 80047c0:	43db      	mvns	r3, r3
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	4013      	ands	r3, r2
 80047c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691a      	ldr	r2, [r3, #16]
 80047cc:	69fb      	ldr	r3, [r7, #28]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	69ba      	ldr	r2, [r7, #24]
 80047da:	4313      	orrs	r3, r2
 80047dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80047de:	69fb      	ldr	r3, [r7, #28]
 80047e0:	08da      	lsrs	r2, r3, #3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	3208      	adds	r2, #8
 80047e6:	69b9      	ldr	r1, [r7, #24]
 80047e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80047f2:	69fb      	ldr	r3, [r7, #28]
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	2203      	movs	r2, #3
 80047f8:	fa02 f303 	lsl.w	r3, r2, r3
 80047fc:	43db      	mvns	r3, r3
 80047fe:	69ba      	ldr	r2, [r7, #24]
 8004800:	4013      	ands	r3, r2
 8004802:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f003 0203 	and.w	r2, r3, #3
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	005b      	lsls	r3, r3, #1
 8004810:	fa02 f303 	lsl.w	r3, r2, r3
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	4313      	orrs	r3, r2
 8004818:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004828:	2b00      	cmp	r3, #0
 800482a:	f000 80a2 	beq.w	8004972 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800482e:	2300      	movs	r3, #0
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	4b57      	ldr	r3, [pc, #348]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004836:	4a56      	ldr	r2, [pc, #344]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800483c:	6453      	str	r3, [r2, #68]	; 0x44
 800483e:	4b54      	ldr	r3, [pc, #336]	; (8004990 <HAL_GPIO_Init+0x2e8>)
 8004840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004846:	60fb      	str	r3, [r7, #12]
 8004848:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800484a:	4a52      	ldr	r2, [pc, #328]	; (8004994 <HAL_GPIO_Init+0x2ec>)
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	089b      	lsrs	r3, r3, #2
 8004850:	3302      	adds	r3, #2
 8004852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004856:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	f003 0303 	and.w	r3, r3, #3
 800485e:	009b      	lsls	r3, r3, #2
 8004860:	220f      	movs	r2, #15
 8004862:	fa02 f303 	lsl.w	r3, r2, r3
 8004866:	43db      	mvns	r3, r3
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	4013      	ands	r3, r2
 800486c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a49      	ldr	r2, [pc, #292]	; (8004998 <HAL_GPIO_Init+0x2f0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d019      	beq.n	80048aa <HAL_GPIO_Init+0x202>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a48      	ldr	r2, [pc, #288]	; (800499c <HAL_GPIO_Init+0x2f4>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d013      	beq.n	80048a6 <HAL_GPIO_Init+0x1fe>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	4a47      	ldr	r2, [pc, #284]	; (80049a0 <HAL_GPIO_Init+0x2f8>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d00d      	beq.n	80048a2 <HAL_GPIO_Init+0x1fa>
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	4a46      	ldr	r2, [pc, #280]	; (80049a4 <HAL_GPIO_Init+0x2fc>)
 800488a:	4293      	cmp	r3, r2
 800488c:	d007      	beq.n	800489e <HAL_GPIO_Init+0x1f6>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	4a45      	ldr	r2, [pc, #276]	; (80049a8 <HAL_GPIO_Init+0x300>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d101      	bne.n	800489a <HAL_GPIO_Init+0x1f2>
 8004896:	2304      	movs	r3, #4
 8004898:	e008      	b.n	80048ac <HAL_GPIO_Init+0x204>
 800489a:	2307      	movs	r3, #7
 800489c:	e006      	b.n	80048ac <HAL_GPIO_Init+0x204>
 800489e:	2303      	movs	r3, #3
 80048a0:	e004      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048a2:	2302      	movs	r3, #2
 80048a4:	e002      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048a6:	2301      	movs	r3, #1
 80048a8:	e000      	b.n	80048ac <HAL_GPIO_Init+0x204>
 80048aa:	2300      	movs	r3, #0
 80048ac:	69fa      	ldr	r2, [r7, #28]
 80048ae:	f002 0203 	and.w	r2, r2, #3
 80048b2:	0092      	lsls	r2, r2, #2
 80048b4:	4093      	lsls	r3, r2
 80048b6:	69ba      	ldr	r2, [r7, #24]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80048bc:	4935      	ldr	r1, [pc, #212]	; (8004994 <HAL_GPIO_Init+0x2ec>)
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	089b      	lsrs	r3, r3, #2
 80048c2:	3302      	adds	r3, #2
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80048ca:	4b38      	ldr	r3, [pc, #224]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048cc:	689b      	ldr	r3, [r3, #8]
 80048ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048d0:	693b      	ldr	r3, [r7, #16]
 80048d2:	43db      	mvns	r3, r3
 80048d4:	69ba      	ldr	r2, [r7, #24]
 80048d6:	4013      	ands	r3, r2
 80048d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	685b      	ldr	r3, [r3, #4]
 80048de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80048ee:	4a2f      	ldr	r2, [pc, #188]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80048f4:	4b2d      	ldr	r3, [pc, #180]	; (80049ac <HAL_GPIO_Init+0x304>)
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	4313      	orrs	r3, r2
 8004916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004918:	4a24      	ldr	r2, [pc, #144]	; (80049ac <HAL_GPIO_Init+0x304>)
 800491a:	69bb      	ldr	r3, [r7, #24]
 800491c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800491e:	4b23      	ldr	r3, [pc, #140]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	43db      	mvns	r3, r3
 8004928:	69ba      	ldr	r2, [r7, #24]
 800492a:	4013      	ands	r3, r2
 800492c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800493a:	69ba      	ldr	r2, [r7, #24]
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	4313      	orrs	r3, r2
 8004940:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <HAL_GPIO_Init+0x304>)
 8004944:	69bb      	ldr	r3, [r7, #24]
 8004946:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004948:	4b18      	ldr	r3, [pc, #96]	; (80049ac <HAL_GPIO_Init+0x304>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	43db      	mvns	r3, r3
 8004952:	69ba      	ldr	r2, [r7, #24]
 8004954:	4013      	ands	r3, r2
 8004956:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004964:	69ba      	ldr	r2, [r7, #24]
 8004966:	693b      	ldr	r3, [r7, #16]
 8004968:	4313      	orrs	r3, r2
 800496a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800496c:	4a0f      	ldr	r2, [pc, #60]	; (80049ac <HAL_GPIO_Init+0x304>)
 800496e:	69bb      	ldr	r3, [r7, #24]
 8004970:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	3301      	adds	r3, #1
 8004976:	61fb      	str	r3, [r7, #28]
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b0f      	cmp	r3, #15
 800497c:	f67f aea2 	bls.w	80046c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004980:	bf00      	nop
 8004982:	bf00      	nop
 8004984:	3724      	adds	r7, #36	; 0x24
 8004986:	46bd      	mov	sp, r7
 8004988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498c:	4770      	bx	lr
 800498e:	bf00      	nop
 8004990:	40023800 	.word	0x40023800
 8004994:	40013800 	.word	0x40013800
 8004998:	40020000 	.word	0x40020000
 800499c:	40020400 	.word	0x40020400
 80049a0:	40020800 	.word	0x40020800
 80049a4:	40020c00 	.word	0x40020c00
 80049a8:	40021000 	.word	0x40021000
 80049ac:	40013c00 	.word	0x40013c00

080049b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
 80049b8:	460b      	mov	r3, r1
 80049ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	691a      	ldr	r2, [r3, #16]
 80049c0:	887b      	ldrh	r3, [r7, #2]
 80049c2:	4013      	ands	r3, r2
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80049c8:	2301      	movs	r3, #1
 80049ca:	73fb      	strb	r3, [r7, #15]
 80049cc:	e001      	b.n	80049d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80049ce:	2300      	movs	r3, #0
 80049d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80049d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3714      	adds	r7, #20
 80049d8:	46bd      	mov	sp, r7
 80049da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049de:	4770      	bx	lr

080049e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b083      	sub	sp, #12
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	460b      	mov	r3, r1
 80049ea:	807b      	strh	r3, [r7, #2]
 80049ec:	4613      	mov	r3, r2
 80049ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80049f0:	787b      	ldrb	r3, [r7, #1]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80049f6:	887a      	ldrh	r2, [r7, #2]
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80049fc:	e003      	b.n	8004a06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80049fe:	887b      	ldrh	r3, [r7, #2]
 8004a00:	041a      	lsls	r2, r3, #16
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	619a      	str	r2, [r3, #24]
}
 8004a06:	bf00      	nop
 8004a08:	370c      	adds	r7, #12
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
	...

08004a14 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b086      	sub	sp, #24
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d101      	bne.n	8004a26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a22:	2301      	movs	r3, #1
 8004a24:	e267      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0301 	and.w	r3, r3, #1
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d075      	beq.n	8004b1e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a32:	4b88      	ldr	r3, [pc, #544]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a34:	689b      	ldr	r3, [r3, #8]
 8004a36:	f003 030c 	and.w	r3, r3, #12
 8004a3a:	2b04      	cmp	r3, #4
 8004a3c:	d00c      	beq.n	8004a58 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a3e:	4b85      	ldr	r3, [pc, #532]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004a46:	2b08      	cmp	r3, #8
 8004a48:	d112      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4a:	4b82      	ldr	r3, [pc, #520]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a52:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a56:	d10b      	bne.n	8004a70 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a58:	4b7e      	ldr	r3, [pc, #504]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d05b      	beq.n	8004b1c <HAL_RCC_OscConfig+0x108>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d157      	bne.n	8004b1c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e242      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d106      	bne.n	8004a88 <HAL_RCC_OscConfig+0x74>
 8004a7a:	4b76      	ldr	r3, [pc, #472]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	4a75      	ldr	r2, [pc, #468]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a84:	6013      	str	r3, [r2, #0]
 8004a86:	e01d      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004a90:	d10c      	bne.n	8004aac <HAL_RCC_OscConfig+0x98>
 8004a92:	4b70      	ldr	r3, [pc, #448]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a6f      	ldr	r2, [pc, #444]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004a9c:	6013      	str	r3, [r2, #0]
 8004a9e:	4b6d      	ldr	r3, [pc, #436]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a6c      	ldr	r2, [pc, #432]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa8:	6013      	str	r3, [r2, #0]
 8004aaa:	e00b      	b.n	8004ac4 <HAL_RCC_OscConfig+0xb0>
 8004aac:	4b69      	ldr	r3, [pc, #420]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4a68      	ldr	r2, [pc, #416]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004ab6:	6013      	str	r3, [r2, #0]
 8004ab8:	4b66      	ldr	r3, [pc, #408]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a65      	ldr	r2, [pc, #404]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d013      	beq.n	8004af4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004acc:	f7fe fd5c 	bl	8003588 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ad2:	e008      	b.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ad4:	f7fe fd58 	bl	8003588 <HAL_GetTick>
 8004ad8:	4602      	mov	r2, r0
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	2b64      	cmp	r3, #100	; 0x64
 8004ae0:	d901      	bls.n	8004ae6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	e207      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae6:	4b5b      	ldr	r3, [pc, #364]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d0f0      	beq.n	8004ad4 <HAL_RCC_OscConfig+0xc0>
 8004af2:	e014      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004af4:	f7fe fd48 	bl	8003588 <HAL_GetTick>
 8004af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004afa:	e008      	b.n	8004b0e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004afc:	f7fe fd44 	bl	8003588 <HAL_GetTick>
 8004b00:	4602      	mov	r2, r0
 8004b02:	693b      	ldr	r3, [r7, #16]
 8004b04:	1ad3      	subs	r3, r2, r3
 8004b06:	2b64      	cmp	r3, #100	; 0x64
 8004b08:	d901      	bls.n	8004b0e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e1f3      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0e:	4b51      	ldr	r3, [pc, #324]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1f0      	bne.n	8004afc <HAL_RCC_OscConfig+0xe8>
 8004b1a:	e000      	b.n	8004b1e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0302 	and.w	r3, r3, #2
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d063      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b2a:	4b4a      	ldr	r3, [pc, #296]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f003 030c 	and.w	r3, r3, #12
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d00b      	beq.n	8004b4e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b36:	4b47      	ldr	r3, [pc, #284]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004b3e:	2b08      	cmp	r3, #8
 8004b40:	d11c      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b42:	4b44      	ldr	r3, [pc, #272]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d116      	bne.n	8004b7c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b4e:	4b41      	ldr	r3, [pc, #260]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0302 	and.w	r3, r3, #2
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d005      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	2b01      	cmp	r3, #1
 8004b60:	d001      	beq.n	8004b66 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	e1c7      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b66:	4b3b      	ldr	r3, [pc, #236]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	691b      	ldr	r3, [r3, #16]
 8004b72:	00db      	lsls	r3, r3, #3
 8004b74:	4937      	ldr	r1, [pc, #220]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004b76:	4313      	orrs	r3, r2
 8004b78:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b7a:	e03a      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d020      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b84:	4b34      	ldr	r3, [pc, #208]	; (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b8a:	f7fe fcfd 	bl	8003588 <HAL_GetTick>
 8004b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b90:	e008      	b.n	8004ba4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b92:	f7fe fcf9 	bl	8003588 <HAL_GetTick>
 8004b96:	4602      	mov	r2, r0
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	1ad3      	subs	r3, r2, r3
 8004b9c:	2b02      	cmp	r3, #2
 8004b9e:	d901      	bls.n	8004ba4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004ba0:	2303      	movs	r3, #3
 8004ba2:	e1a8      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba4:	4b2b      	ldr	r3, [pc, #172]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f003 0302 	and.w	r3, r3, #2
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d0f0      	beq.n	8004b92 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bb0:	4b28      	ldr	r3, [pc, #160]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	691b      	ldr	r3, [r3, #16]
 8004bbc:	00db      	lsls	r3, r3, #3
 8004bbe:	4925      	ldr	r1, [pc, #148]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	4313      	orrs	r3, r2
 8004bc2:	600b      	str	r3, [r1, #0]
 8004bc4:	e015      	b.n	8004bf2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bc6:	4b24      	ldr	r3, [pc, #144]	; (8004c58 <HAL_RCC_OscConfig+0x244>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bcc:	f7fe fcdc 	bl	8003588 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004bd4:	f7fe fcd8 	bl	8003588 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e187      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be6:	4b1b      	ldr	r3, [pc, #108]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 0302 	and.w	r3, r3, #2
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	f003 0308 	and.w	r3, r3, #8
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d036      	beq.n	8004c6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	695b      	ldr	r3, [r3, #20]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d016      	beq.n	8004c34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c06:	4b15      	ldr	r3, [pc, #84]	; (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c08:	2201      	movs	r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c0c:	f7fe fcbc 	bl	8003588 <HAL_GetTick>
 8004c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c12:	e008      	b.n	8004c26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c14:	f7fe fcb8 	bl	8003588 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	2b02      	cmp	r3, #2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e167      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c26:	4b0b      	ldr	r3, [pc, #44]	; (8004c54 <HAL_RCC_OscConfig+0x240>)
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d0f0      	beq.n	8004c14 <HAL_RCC_OscConfig+0x200>
 8004c32:	e01b      	b.n	8004c6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c34:	4b09      	ldr	r3, [pc, #36]	; (8004c5c <HAL_RCC_OscConfig+0x248>)
 8004c36:	2200      	movs	r2, #0
 8004c38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c3a:	f7fe fca5 	bl	8003588 <HAL_GetTick>
 8004c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c40:	e00e      	b.n	8004c60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004c42:	f7fe fca1 	bl	8003588 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	2b02      	cmp	r3, #2
 8004c4e:	d907      	bls.n	8004c60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e150      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004c54:	40023800 	.word	0x40023800
 8004c58:	42470000 	.word	0x42470000
 8004c5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c60:	4b88      	ldr	r3, [pc, #544]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1ea      	bne.n	8004c42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f003 0304 	and.w	r3, r3, #4
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	f000 8097 	beq.w	8004da8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c7e:	4b81      	ldr	r3, [pc, #516]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10f      	bne.n	8004caa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	60bb      	str	r3, [r7, #8]
 8004c8e:	4b7d      	ldr	r3, [pc, #500]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c92:	4a7c      	ldr	r2, [pc, #496]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6413      	str	r3, [r2, #64]	; 0x40
 8004c9a:	4b7a      	ldr	r3, [pc, #488]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ca2:	60bb      	str	r3, [r7, #8]
 8004ca4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004caa:	4b77      	ldr	r3, [pc, #476]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d118      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cb6:	4b74      	ldr	r3, [pc, #464]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4a73      	ldr	r2, [pc, #460]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cc0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cc2:	f7fe fc61 	bl	8003588 <HAL_GetTick>
 8004cc6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cc8:	e008      	b.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cca:	f7fe fc5d 	bl	8003588 <HAL_GetTick>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	693b      	ldr	r3, [r7, #16]
 8004cd2:	1ad3      	subs	r3, r2, r3
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d901      	bls.n	8004cdc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004cd8:	2303      	movs	r3, #3
 8004cda:	e10c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cdc:	4b6a      	ldr	r3, [pc, #424]	; (8004e88 <HAL_RCC_OscConfig+0x474>)
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d0f0      	beq.n	8004cca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	2b01      	cmp	r3, #1
 8004cee:	d106      	bne.n	8004cfe <HAL_RCC_OscConfig+0x2ea>
 8004cf0:	4b64      	ldr	r3, [pc, #400]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cf4:	4a63      	ldr	r2, [pc, #396]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004cf6:	f043 0301 	orr.w	r3, r3, #1
 8004cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004cfc:	e01c      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	689b      	ldr	r3, [r3, #8]
 8004d02:	2b05      	cmp	r3, #5
 8004d04:	d10c      	bne.n	8004d20 <HAL_RCC_OscConfig+0x30c>
 8004d06:	4b5f      	ldr	r3, [pc, #380]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d0a:	4a5e      	ldr	r2, [pc, #376]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d0c:	f043 0304 	orr.w	r3, r3, #4
 8004d10:	6713      	str	r3, [r2, #112]	; 0x70
 8004d12:	4b5c      	ldr	r3, [pc, #368]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d16:	4a5b      	ldr	r2, [pc, #364]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d18:	f043 0301 	orr.w	r3, r3, #1
 8004d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8004d1e:	e00b      	b.n	8004d38 <HAL_RCC_OscConfig+0x324>
 8004d20:	4b58      	ldr	r3, [pc, #352]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d24:	4a57      	ldr	r2, [pc, #348]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d26:	f023 0301 	bic.w	r3, r3, #1
 8004d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8004d2c:	4b55      	ldr	r3, [pc, #340]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d30:	4a54      	ldr	r2, [pc, #336]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d32:	f023 0304 	bic.w	r3, r3, #4
 8004d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d015      	beq.n	8004d6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d40:	f7fe fc22 	bl	8003588 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d46:	e00a      	b.n	8004d5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d48:	f7fe fc1e 	bl	8003588 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e0cb      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d5e:	4b49      	ldr	r3, [pc, #292]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d62:	f003 0302 	and.w	r3, r3, #2
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d0ee      	beq.n	8004d48 <HAL_RCC_OscConfig+0x334>
 8004d6a:	e014      	b.n	8004d96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d6c:	f7fe fc0c 	bl	8003588 <HAL_GetTick>
 8004d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d72:	e00a      	b.n	8004d8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004d74:	f7fe fc08 	bl	8003588 <HAL_GetTick>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	1ad3      	subs	r3, r2, r3
 8004d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d901      	bls.n	8004d8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d86:	2303      	movs	r3, #3
 8004d88:	e0b5      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d8e:	f003 0302 	and.w	r3, r3, #2
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d1ee      	bne.n	8004d74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d96:	7dfb      	ldrb	r3, [r7, #23]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d105      	bne.n	8004da8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d9c:	4b39      	ldr	r3, [pc, #228]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da0:	4a38      	ldr	r2, [pc, #224]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f000 80a1 	beq.w	8004ef4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004db2:	4b34      	ldr	r3, [pc, #208]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f003 030c 	and.w	r3, r3, #12
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d05c      	beq.n	8004e78 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	699b      	ldr	r3, [r3, #24]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d141      	bne.n	8004e4a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fe fbdc 	bl	8003588 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fe fbd8 	bl	8003588 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e087      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b27      	ldr	r3, [pc, #156]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	69da      	ldr	r2, [r3, #28]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6a1b      	ldr	r3, [r3, #32]
 8004dfa:	431a      	orrs	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e00:	019b      	lsls	r3, r3, #6
 8004e02:	431a      	orrs	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e08:	085b      	lsrs	r3, r3, #1
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	041b      	lsls	r3, r3, #16
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e14:	061b      	lsls	r3, r3, #24
 8004e16:	491b      	ldr	r1, [pc, #108]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e1c:	4b1b      	ldr	r3, [pc, #108]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e1e:	2201      	movs	r2, #1
 8004e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e22:	f7fe fbb1 	bl	8003588 <HAL_GetTick>
 8004e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e28:	e008      	b.n	8004e3c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e2a:	f7fe fbad 	bl	8003588 <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	693b      	ldr	r3, [r7, #16]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	2b02      	cmp	r3, #2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e05c      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e3c:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0f0      	beq.n	8004e2a <HAL_RCC_OscConfig+0x416>
 8004e48:	e054      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e4a:	4b10      	ldr	r3, [pc, #64]	; (8004e8c <HAL_RCC_OscConfig+0x478>)
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e50:	f7fe fb9a 	bl	8003588 <HAL_GetTick>
 8004e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e56:	e008      	b.n	8004e6a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e58:	f7fe fb96 	bl	8003588 <HAL_GetTick>
 8004e5c:	4602      	mov	r2, r0
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	1ad3      	subs	r3, r2, r3
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d901      	bls.n	8004e6a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e045      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e6a:	4b06      	ldr	r3, [pc, #24]	; (8004e84 <HAL_RCC_OscConfig+0x470>)
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1f0      	bne.n	8004e58 <HAL_RCC_OscConfig+0x444>
 8004e76:	e03d      	b.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d107      	bne.n	8004e90 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e038      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
 8004e84:	40023800 	.word	0x40023800
 8004e88:	40007000 	.word	0x40007000
 8004e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e90:	4b1b      	ldr	r3, [pc, #108]	; (8004f00 <HAL_RCC_OscConfig+0x4ec>)
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	699b      	ldr	r3, [r3, #24]
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	d028      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d121      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d11a      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eba:	68fa      	ldr	r2, [r7, #12]
 8004ebc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d111      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ed6:	085b      	lsrs	r3, r3, #1
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d001      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ef4:	2300      	movs	r3, #0
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3718      	adds	r7, #24
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	40023800 	.word	0x40023800

08004f04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f14:	2301      	movs	r3, #1
 8004f16:	e0cc      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004f18:	4b68      	ldr	r3, [pc, #416]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f003 0307 	and.w	r3, r3, #7
 8004f20:	683a      	ldr	r2, [r7, #0]
 8004f22:	429a      	cmp	r2, r3
 8004f24:	d90c      	bls.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f26:	4b65      	ldr	r3, [pc, #404]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f28:	683a      	ldr	r2, [r7, #0]
 8004f2a:	b2d2      	uxtb	r2, r2
 8004f2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f2e:	4b63      	ldr	r3, [pc, #396]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0307 	and.w	r3, r3, #7
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d001      	beq.n	8004f40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e0b8      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d020      	beq.n	8004f8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d005      	beq.n	8004f64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f58:	4b59      	ldr	r3, [pc, #356]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5a:	689b      	ldr	r3, [r3, #8]
 8004f5c:	4a58      	ldr	r2, [pc, #352]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004f62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f003 0308 	and.w	r3, r3, #8
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d005      	beq.n	8004f7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f70:	4b53      	ldr	r3, [pc, #332]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	4a52      	ldr	r2, [pc, #328]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004f7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f7c:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7e:	689b      	ldr	r3, [r3, #8]
 8004f80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	494d      	ldr	r1, [pc, #308]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d044      	beq.n	8005024 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	2b01      	cmp	r3, #1
 8004fa0:	d107      	bne.n	8004fb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fa2:	4b47      	ldr	r3, [pc, #284]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d119      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e07f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2b02      	cmp	r3, #2
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fbe:	2b03      	cmp	r3, #3
 8004fc0:	d107      	bne.n	8004fd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fc2:	4b3f      	ldr	r3, [pc, #252]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d109      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	e06f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd2:	4b3b      	ldr	r3, [pc, #236]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0302 	and.w	r3, r3, #2
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d101      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e067      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004fe2:	4b37      	ldr	r3, [pc, #220]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	f023 0203 	bic.w	r2, r3, #3
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	4934      	ldr	r1, [pc, #208]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ff4:	f7fe fac8 	bl	8003588 <HAL_GetTick>
 8004ff8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ffa:	e00a      	b.n	8005012 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ffc:	f7fe fac4 	bl	8003588 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	f241 3288 	movw	r2, #5000	; 0x1388
 800500a:	4293      	cmp	r3, r2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e04f      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005012:	4b2b      	ldr	r3, [pc, #172]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005014:	689b      	ldr	r3, [r3, #8]
 8005016:	f003 020c 	and.w	r2, r3, #12
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	429a      	cmp	r2, r3
 8005022:	d1eb      	bne.n	8004ffc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005024:	4b25      	ldr	r3, [pc, #148]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f003 0307 	and.w	r3, r3, #7
 800502c:	683a      	ldr	r2, [r7, #0]
 800502e:	429a      	cmp	r2, r3
 8005030:	d20c      	bcs.n	800504c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005032:	4b22      	ldr	r3, [pc, #136]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	b2d2      	uxtb	r2, r2
 8005038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503a:	4b20      	ldr	r3, [pc, #128]	; (80050bc <HAL_RCC_ClockConfig+0x1b8>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f003 0307 	and.w	r3, r3, #7
 8005042:	683a      	ldr	r2, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d001      	beq.n	800504c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	e032      	b.n	80050b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 0304 	and.w	r3, r3, #4
 8005054:	2b00      	cmp	r3, #0
 8005056:	d008      	beq.n	800506a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005058:	4b19      	ldr	r3, [pc, #100]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	68db      	ldr	r3, [r3, #12]
 8005064:	4916      	ldr	r1, [pc, #88]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005066:	4313      	orrs	r3, r2
 8005068:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0308 	and.w	r3, r3, #8
 8005072:	2b00      	cmp	r3, #0
 8005074:	d009      	beq.n	800508a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005076:	4b12      	ldr	r3, [pc, #72]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	691b      	ldr	r3, [r3, #16]
 8005082:	00db      	lsls	r3, r3, #3
 8005084:	490e      	ldr	r1, [pc, #56]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	4313      	orrs	r3, r2
 8005088:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800508a:	f000 f821 	bl	80050d0 <HAL_RCC_GetSysClockFreq>
 800508e:	4602      	mov	r2, r0
 8005090:	4b0b      	ldr	r3, [pc, #44]	; (80050c0 <HAL_RCC_ClockConfig+0x1bc>)
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	091b      	lsrs	r3, r3, #4
 8005096:	f003 030f 	and.w	r3, r3, #15
 800509a:	490a      	ldr	r1, [pc, #40]	; (80050c4 <HAL_RCC_ClockConfig+0x1c0>)
 800509c:	5ccb      	ldrb	r3, [r1, r3]
 800509e:	fa22 f303 	lsr.w	r3, r2, r3
 80050a2:	4a09      	ldr	r2, [pc, #36]	; (80050c8 <HAL_RCC_ClockConfig+0x1c4>)
 80050a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80050a6:	4b09      	ldr	r3, [pc, #36]	; (80050cc <HAL_RCC_ClockConfig+0x1c8>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4618      	mov	r0, r3
 80050ac:	f7fe fa28 	bl	8003500 <HAL_InitTick>

  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3710      	adds	r7, #16
 80050b6:	46bd      	mov	sp, r7
 80050b8:	bd80      	pop	{r7, pc}
 80050ba:	bf00      	nop
 80050bc:	40023c00 	.word	0x40023c00
 80050c0:	40023800 	.word	0x40023800
 80050c4:	08006dc8 	.word	0x08006dc8
 80050c8:	20000018 	.word	0x20000018
 80050cc:	2000001c 	.word	0x2000001c

080050d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050d4:	b094      	sub	sp, #80	; 0x50
 80050d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80050d8:	2300      	movs	r3, #0
 80050da:	647b      	str	r3, [r7, #68]	; 0x44
 80050dc:	2300      	movs	r3, #0
 80050de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050e0:	2300      	movs	r3, #0
 80050e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80050e4:	2300      	movs	r3, #0
 80050e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050e8:	4b79      	ldr	r3, [pc, #484]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f003 030c 	and.w	r3, r3, #12
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d00d      	beq.n	8005110 <HAL_RCC_GetSysClockFreq+0x40>
 80050f4:	2b08      	cmp	r3, #8
 80050f6:	f200 80e1 	bhi.w	80052bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d002      	beq.n	8005104 <HAL_RCC_GetSysClockFreq+0x34>
 80050fe:	2b04      	cmp	r3, #4
 8005100:	d003      	beq.n	800510a <HAL_RCC_GetSysClockFreq+0x3a>
 8005102:	e0db      	b.n	80052bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005104:	4b73      	ldr	r3, [pc, #460]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005106:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005108:	e0db      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800510a:	4b73      	ldr	r3, [pc, #460]	; (80052d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800510c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800510e:	e0d8      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005110:	4b6f      	ldr	r3, [pc, #444]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005118:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800511a:	4b6d      	ldr	r3, [pc, #436]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005122:	2b00      	cmp	r3, #0
 8005124:	d063      	beq.n	80051ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005126:	4b6a      	ldr	r3, [pc, #424]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	099b      	lsrs	r3, r3, #6
 800512c:	2200      	movs	r2, #0
 800512e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005130:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005134:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005138:	633b      	str	r3, [r7, #48]	; 0x30
 800513a:	2300      	movs	r3, #0
 800513c:	637b      	str	r3, [r7, #52]	; 0x34
 800513e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005142:	4622      	mov	r2, r4
 8005144:	462b      	mov	r3, r5
 8005146:	f04f 0000 	mov.w	r0, #0
 800514a:	f04f 0100 	mov.w	r1, #0
 800514e:	0159      	lsls	r1, r3, #5
 8005150:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005154:	0150      	lsls	r0, r2, #5
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	4621      	mov	r1, r4
 800515c:	1a51      	subs	r1, r2, r1
 800515e:	6139      	str	r1, [r7, #16]
 8005160:	4629      	mov	r1, r5
 8005162:	eb63 0301 	sbc.w	r3, r3, r1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005174:	4659      	mov	r1, fp
 8005176:	018b      	lsls	r3, r1, #6
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800517e:	4651      	mov	r1, sl
 8005180:	018a      	lsls	r2, r1, #6
 8005182:	4651      	mov	r1, sl
 8005184:	ebb2 0801 	subs.w	r8, r2, r1
 8005188:	4659      	mov	r1, fp
 800518a:	eb63 0901 	sbc.w	r9, r3, r1
 800518e:	f04f 0200 	mov.w	r2, #0
 8005192:	f04f 0300 	mov.w	r3, #0
 8005196:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800519a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800519e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051a2:	4690      	mov	r8, r2
 80051a4:	4699      	mov	r9, r3
 80051a6:	4623      	mov	r3, r4
 80051a8:	eb18 0303 	adds.w	r3, r8, r3
 80051ac:	60bb      	str	r3, [r7, #8]
 80051ae:	462b      	mov	r3, r5
 80051b0:	eb49 0303 	adc.w	r3, r9, r3
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	f04f 0200 	mov.w	r2, #0
 80051ba:	f04f 0300 	mov.w	r3, #0
 80051be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051c2:	4629      	mov	r1, r5
 80051c4:	024b      	lsls	r3, r1, #9
 80051c6:	4621      	mov	r1, r4
 80051c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051cc:	4621      	mov	r1, r4
 80051ce:	024a      	lsls	r2, r1, #9
 80051d0:	4610      	mov	r0, r2
 80051d2:	4619      	mov	r1, r3
 80051d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051d6:	2200      	movs	r2, #0
 80051d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80051da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80051dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80051e0:	f7fb fde4 	bl	8000dac <__aeabi_uldivmod>
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4613      	mov	r3, r2
 80051ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051ec:	e058      	b.n	80052a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051ee:	4b38      	ldr	r3, [pc, #224]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f0:	685b      	ldr	r3, [r3, #4]
 80051f2:	099b      	lsrs	r3, r3, #6
 80051f4:	2200      	movs	r2, #0
 80051f6:	4618      	mov	r0, r3
 80051f8:	4611      	mov	r1, r2
 80051fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051fe:	623b      	str	r3, [r7, #32]
 8005200:	2300      	movs	r3, #0
 8005202:	627b      	str	r3, [r7, #36]	; 0x24
 8005204:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005208:	4642      	mov	r2, r8
 800520a:	464b      	mov	r3, r9
 800520c:	f04f 0000 	mov.w	r0, #0
 8005210:	f04f 0100 	mov.w	r1, #0
 8005214:	0159      	lsls	r1, r3, #5
 8005216:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800521a:	0150      	lsls	r0, r2, #5
 800521c:	4602      	mov	r2, r0
 800521e:	460b      	mov	r3, r1
 8005220:	4641      	mov	r1, r8
 8005222:	ebb2 0a01 	subs.w	sl, r2, r1
 8005226:	4649      	mov	r1, r9
 8005228:	eb63 0b01 	sbc.w	fp, r3, r1
 800522c:	f04f 0200 	mov.w	r2, #0
 8005230:	f04f 0300 	mov.w	r3, #0
 8005234:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005238:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800523c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005240:	ebb2 040a 	subs.w	r4, r2, sl
 8005244:	eb63 050b 	sbc.w	r5, r3, fp
 8005248:	f04f 0200 	mov.w	r2, #0
 800524c:	f04f 0300 	mov.w	r3, #0
 8005250:	00eb      	lsls	r3, r5, #3
 8005252:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005256:	00e2      	lsls	r2, r4, #3
 8005258:	4614      	mov	r4, r2
 800525a:	461d      	mov	r5, r3
 800525c:	4643      	mov	r3, r8
 800525e:	18e3      	adds	r3, r4, r3
 8005260:	603b      	str	r3, [r7, #0]
 8005262:	464b      	mov	r3, r9
 8005264:	eb45 0303 	adc.w	r3, r5, r3
 8005268:	607b      	str	r3, [r7, #4]
 800526a:	f04f 0200 	mov.w	r2, #0
 800526e:	f04f 0300 	mov.w	r3, #0
 8005272:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005276:	4629      	mov	r1, r5
 8005278:	028b      	lsls	r3, r1, #10
 800527a:	4621      	mov	r1, r4
 800527c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005280:	4621      	mov	r1, r4
 8005282:	028a      	lsls	r2, r1, #10
 8005284:	4610      	mov	r0, r2
 8005286:	4619      	mov	r1, r3
 8005288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528a:	2200      	movs	r2, #0
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	61fa      	str	r2, [r7, #28]
 8005290:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005294:	f7fb fd8a 	bl	8000dac <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4613      	mov	r3, r2
 800529e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80052a0:	4b0b      	ldr	r3, [pc, #44]	; (80052d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	0c1b      	lsrs	r3, r3, #16
 80052a6:	f003 0303 	and.w	r3, r3, #3
 80052aa:	3301      	adds	r3, #1
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80052b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80052b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052ba:	e002      	b.n	80052c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052bc:	4b05      	ldr	r3, [pc, #20]	; (80052d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3750      	adds	r7, #80	; 0x50
 80052c8:	46bd      	mov	sp, r7
 80052ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052ce:	bf00      	nop
 80052d0:	40023800 	.word	0x40023800
 80052d4:	00f42400 	.word	0x00f42400
 80052d8:	007a1200 	.word	0x007a1200

080052dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052dc:	b480      	push	{r7}
 80052de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052e0:	4b03      	ldr	r3, [pc, #12]	; (80052f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80052e2:	681b      	ldr	r3, [r3, #0]
}
 80052e4:	4618      	mov	r0, r3
 80052e6:	46bd      	mov	sp, r7
 80052e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ec:	4770      	bx	lr
 80052ee:	bf00      	nop
 80052f0:	20000018 	.word	0x20000018

080052f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80052f8:	f7ff fff0 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 80052fc:	4602      	mov	r2, r0
 80052fe:	4b05      	ldr	r3, [pc, #20]	; (8005314 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005300:	689b      	ldr	r3, [r3, #8]
 8005302:	0a9b      	lsrs	r3, r3, #10
 8005304:	f003 0307 	and.w	r3, r3, #7
 8005308:	4903      	ldr	r1, [pc, #12]	; (8005318 <HAL_RCC_GetPCLK1Freq+0x24>)
 800530a:	5ccb      	ldrb	r3, [r1, r3]
 800530c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	bd80      	pop	{r7, pc}
 8005314:	40023800 	.word	0x40023800
 8005318:	08006dd8 	.word	0x08006dd8

0800531c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005320:	f7ff ffdc 	bl	80052dc <HAL_RCC_GetHCLKFreq>
 8005324:	4602      	mov	r2, r0
 8005326:	4b05      	ldr	r3, [pc, #20]	; (800533c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	0b5b      	lsrs	r3, r3, #13
 800532c:	f003 0307 	and.w	r3, r3, #7
 8005330:	4903      	ldr	r1, [pc, #12]	; (8005340 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005332:	5ccb      	ldrb	r3, [r1, r3]
 8005334:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005338:	4618      	mov	r0, r3
 800533a:	bd80      	pop	{r7, pc}
 800533c:	40023800 	.word	0x40023800
 8005340:	08006dd8 	.word	0x08006dd8

08005344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d101      	bne.n	8005356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e041      	b.n	80053da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800535c:	b2db      	uxtb	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d106      	bne.n	8005370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800536a:	6878      	ldr	r0, [r7, #4]
 800536c:	f7fd ff82 	bl	8003274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2202      	movs	r2, #2
 8005374:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	3304      	adds	r3, #4
 8005380:	4619      	mov	r1, r3
 8005382:	4610      	mov	r0, r2
 8005384:	f000 fd80 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2201      	movs	r2, #1
 800538c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2201      	movs	r2, #1
 8005394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2201      	movs	r2, #1
 800539c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2201      	movs	r2, #1
 80053a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2201      	movs	r2, #1
 80053bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2201      	movs	r2, #1
 80053c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2201      	movs	r2, #1
 80053cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2201      	movs	r2, #1
 80053d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053d8:	2300      	movs	r3, #0
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3708      	adds	r7, #8
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
	...

080053e4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b085      	sub	sp, #20
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053f2:	b2db      	uxtb	r3, r3
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d001      	beq.n	80053fc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e03c      	b.n	8005476 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	4a1e      	ldr	r2, [pc, #120]	; (8005484 <HAL_TIM_Base_Start+0xa0>)
 800540a:	4293      	cmp	r3, r2
 800540c:	d018      	beq.n	8005440 <HAL_TIM_Base_Start+0x5c>
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005416:	d013      	beq.n	8005440 <HAL_TIM_Base_Start+0x5c>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a1a      	ldr	r2, [pc, #104]	; (8005488 <HAL_TIM_Base_Start+0xa4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d00e      	beq.n	8005440 <HAL_TIM_Base_Start+0x5c>
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a19      	ldr	r2, [pc, #100]	; (800548c <HAL_TIM_Base_Start+0xa8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d009      	beq.n	8005440 <HAL_TIM_Base_Start+0x5c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a17      	ldr	r2, [pc, #92]	; (8005490 <HAL_TIM_Base_Start+0xac>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d004      	beq.n	8005440 <HAL_TIM_Base_Start+0x5c>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a16      	ldr	r2, [pc, #88]	; (8005494 <HAL_TIM_Base_Start+0xb0>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d111      	bne.n	8005464 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689b      	ldr	r3, [r3, #8]
 8005446:	f003 0307 	and.w	r3, r3, #7
 800544a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2b06      	cmp	r3, #6
 8005450:	d010      	beq.n	8005474 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	681a      	ldr	r2, [r3, #0]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f042 0201 	orr.w	r2, r2, #1
 8005460:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005462:	e007      	b.n	8005474 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f042 0201 	orr.w	r2, r2, #1
 8005472:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005474:	2300      	movs	r3, #0
}
 8005476:	4618      	mov	r0, r3
 8005478:	3714      	adds	r7, #20
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr
 8005482:	bf00      	nop
 8005484:	40010000 	.word	0x40010000
 8005488:	40000400 	.word	0x40000400
 800548c:	40000800 	.word	0x40000800
 8005490:	40000c00 	.word	0x40000c00
 8005494:	40014000 	.word	0x40014000

08005498 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d101      	bne.n	80054aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80054a6:	2301      	movs	r3, #1
 80054a8:	e041      	b.n	800552e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054b0:	b2db      	uxtb	r3, r3
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d106      	bne.n	80054c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2200      	movs	r2, #0
 80054ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f7fd fe6e 	bl	80031a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2202      	movs	r2, #2
 80054c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4619      	mov	r1, r3
 80054d6:	4610      	mov	r0, r2
 80054d8:	f000 fcd6 	bl	8005e88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2201      	movs	r2, #1
 80054e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2201      	movs	r2, #1
 80054f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2201      	movs	r2, #1
 8005500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2201      	movs	r2, #1
 8005508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3708      	adds	r7, #8
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}
	...

08005538 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	2b00      	cmp	r3, #0
 8005546:	d109      	bne.n	800555c <HAL_TIM_PWM_Start+0x24>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800554e:	b2db      	uxtb	r3, r3
 8005550:	2b01      	cmp	r3, #1
 8005552:	bf14      	ite	ne
 8005554:	2301      	movne	r3, #1
 8005556:	2300      	moveq	r3, #0
 8005558:	b2db      	uxtb	r3, r3
 800555a:	e022      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	2b04      	cmp	r3, #4
 8005560:	d109      	bne.n	8005576 <HAL_TIM_PWM_Start+0x3e>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	bf14      	ite	ne
 800556e:	2301      	movne	r3, #1
 8005570:	2300      	moveq	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	e015      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	2b08      	cmp	r3, #8
 800557a:	d109      	bne.n	8005590 <HAL_TIM_PWM_Start+0x58>
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005582:	b2db      	uxtb	r3, r3
 8005584:	2b01      	cmp	r3, #1
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	e008      	b.n	80055a2 <HAL_TIM_PWM_Start+0x6a>
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b01      	cmp	r3, #1
 800559a:	bf14      	ite	ne
 800559c:	2301      	movne	r3, #1
 800559e:	2300      	moveq	r3, #0
 80055a0:	b2db      	uxtb	r3, r3
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d001      	beq.n	80055aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80055a6:	2301      	movs	r3, #1
 80055a8:	e068      	b.n	800567c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80055aa:	683b      	ldr	r3, [r7, #0]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <HAL_TIM_PWM_Start+0x82>
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055b8:	e013      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b04      	cmp	r3, #4
 80055be:	d104      	bne.n	80055ca <HAL_TIM_PWM_Start+0x92>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2202      	movs	r2, #2
 80055c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055c8:	e00b      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	2b08      	cmp	r3, #8
 80055ce:	d104      	bne.n	80055da <HAL_TIM_PWM_Start+0xa2>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2202      	movs	r2, #2
 80055d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055d8:	e003      	b.n	80055e2 <HAL_TIM_PWM_Start+0xaa>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	2202      	movs	r2, #2
 80055de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	2201      	movs	r2, #1
 80055e8:	6839      	ldr	r1, [r7, #0]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f000 fef2 	bl	80063d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4a23      	ldr	r2, [pc, #140]	; (8005684 <HAL_TIM_PWM_Start+0x14c>)
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d107      	bne.n	800560a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005608:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	4a1d      	ldr	r2, [pc, #116]	; (8005684 <HAL_TIM_PWM_Start+0x14c>)
 8005610:	4293      	cmp	r3, r2
 8005612:	d018      	beq.n	8005646 <HAL_TIM_PWM_Start+0x10e>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800561c:	d013      	beq.n	8005646 <HAL_TIM_PWM_Start+0x10e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4a19      	ldr	r2, [pc, #100]	; (8005688 <HAL_TIM_PWM_Start+0x150>)
 8005624:	4293      	cmp	r3, r2
 8005626:	d00e      	beq.n	8005646 <HAL_TIM_PWM_Start+0x10e>
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	4a17      	ldr	r2, [pc, #92]	; (800568c <HAL_TIM_PWM_Start+0x154>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d009      	beq.n	8005646 <HAL_TIM_PWM_Start+0x10e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a16      	ldr	r2, [pc, #88]	; (8005690 <HAL_TIM_PWM_Start+0x158>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d004      	beq.n	8005646 <HAL_TIM_PWM_Start+0x10e>
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	4a14      	ldr	r2, [pc, #80]	; (8005694 <HAL_TIM_PWM_Start+0x15c>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d111      	bne.n	800566a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	f003 0307 	and.w	r3, r3, #7
 8005650:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	2b06      	cmp	r3, #6
 8005656:	d010      	beq.n	800567a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f042 0201 	orr.w	r2, r2, #1
 8005666:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005668:	e007      	b.n	800567a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0201 	orr.w	r2, r2, #1
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3710      	adds	r7, #16
 8005680:	46bd      	mov	sp, r7
 8005682:	bd80      	pop	{r7, pc}
 8005684:	40010000 	.word	0x40010000
 8005688:	40000400 	.word	0x40000400
 800568c:	40000800 	.word	0x40000800
 8005690:	40000c00 	.word	0x40000c00
 8005694:	40014000 	.word	0x40014000

08005698 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b086      	sub	sp, #24
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d101      	bne.n	80056ac <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80056a8:	2301      	movs	r3, #1
 80056aa:	e097      	b.n	80057dc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d106      	bne.n	80056c6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80056c0:	6878      	ldr	r0, [r7, #4]
 80056c2:	f7fd fd8f 	bl	80031e4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	2202      	movs	r2, #2
 80056ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	689b      	ldr	r3, [r3, #8]
 80056d4:	687a      	ldr	r2, [r7, #4]
 80056d6:	6812      	ldr	r2, [r2, #0]
 80056d8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80056dc:	f023 0307 	bic.w	r3, r3, #7
 80056e0:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681a      	ldr	r2, [r3, #0]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	3304      	adds	r3, #4
 80056ea:	4619      	mov	r1, r3
 80056ec:	4610      	mov	r0, r2
 80056ee:	f000 fbcb 	bl	8005e88 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	6a1b      	ldr	r3, [r3, #32]
 8005708:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	697a      	ldr	r2, [r7, #20]
 8005710:	4313      	orrs	r3, r2
 8005712:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800571a:	f023 0303 	bic.w	r3, r3, #3
 800571e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	699b      	ldr	r3, [r3, #24]
 8005728:	021b      	lsls	r3, r3, #8
 800572a:	4313      	orrs	r3, r2
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	4313      	orrs	r3, r2
 8005730:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005738:	f023 030c 	bic.w	r3, r3, #12
 800573c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	68da      	ldr	r2, [r3, #12]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	021b      	lsls	r3, r3, #8
 8005754:	4313      	orrs	r3, r2
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	4313      	orrs	r3, r2
 800575a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	031b      	lsls	r3, r3, #12
 8005768:	4313      	orrs	r3, r2
 800576a:	693a      	ldr	r2, [r7, #16]
 800576c:	4313      	orrs	r3, r2
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005776:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800577e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005780:	683b      	ldr	r3, [r7, #0]
 8005782:	685a      	ldr	r2, [r3, #4]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	695b      	ldr	r3, [r3, #20]
 8005788:	011b      	lsls	r3, r3, #4
 800578a:	4313      	orrs	r3, r2
 800578c:	68fa      	ldr	r2, [r7, #12]
 800578e:	4313      	orrs	r3, r2
 8005790:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2201      	movs	r2, #1
 80057ae:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2201      	movs	r2, #1
 80057b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	2201      	movs	r2, #1
 80057be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2201      	movs	r2, #1
 80057c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2201      	movs	r2, #1
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057da:	2300      	movs	r3, #0
}
 80057dc:	4618      	mov	r0, r3
 80057de:	3718      	adds	r7, #24
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bd80      	pop	{r7, pc}

080057e4 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80057f4:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80057fc:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005804:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800580c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d110      	bne.n	8005836 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005814:	7bfb      	ldrb	r3, [r7, #15]
 8005816:	2b01      	cmp	r3, #1
 8005818:	d102      	bne.n	8005820 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800581a:	7b7b      	ldrb	r3, [r7, #13]
 800581c:	2b01      	cmp	r3, #1
 800581e:	d001      	beq.n	8005824 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005820:	2301      	movs	r3, #1
 8005822:	e069      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2202      	movs	r2, #2
 8005828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005834:	e031      	b.n	800589a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	2b04      	cmp	r3, #4
 800583a:	d110      	bne.n	800585e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800583c:	7bbb      	ldrb	r3, [r7, #14]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d102      	bne.n	8005848 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005842:	7b3b      	ldrb	r3, [r7, #12]
 8005844:	2b01      	cmp	r3, #1
 8005846:	d001      	beq.n	800584c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005848:	2301      	movs	r3, #1
 800584a:	e055      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2202      	movs	r2, #2
 8005850:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2202      	movs	r2, #2
 8005858:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800585c:	e01d      	b.n	800589a <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800585e:	7bfb      	ldrb	r3, [r7, #15]
 8005860:	2b01      	cmp	r3, #1
 8005862:	d108      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005864:	7bbb      	ldrb	r3, [r7, #14]
 8005866:	2b01      	cmp	r3, #1
 8005868:	d105      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800586a:	7b7b      	ldrb	r3, [r7, #13]
 800586c:	2b01      	cmp	r3, #1
 800586e:	d102      	bne.n	8005876 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005870:	7b3b      	ldrb	r3, [r7, #12]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d001      	beq.n	800587a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005876:	2301      	movs	r3, #1
 8005878:	e03e      	b.n	80058f8 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2202      	movs	r2, #2
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2202      	movs	r2, #2
 800588e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d003      	beq.n	80058a8 <HAL_TIM_Encoder_Start+0xc4>
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	2b04      	cmp	r3, #4
 80058a4:	d008      	beq.n	80058b8 <HAL_TIM_Encoder_Start+0xd4>
 80058a6:	e00f      	b.n	80058c8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2201      	movs	r2, #1
 80058ae:	2100      	movs	r1, #0
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fd8f 	bl	80063d4 <TIM_CCxChannelCmd>
      break;
 80058b6:	e016      	b.n	80058e6 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2201      	movs	r2, #1
 80058be:	2104      	movs	r1, #4
 80058c0:	4618      	mov	r0, r3
 80058c2:	f000 fd87 	bl	80063d4 <TIM_CCxChannelCmd>
      break;
 80058c6:	e00e      	b.n	80058e6 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2201      	movs	r2, #1
 80058ce:	2100      	movs	r1, #0
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fd7f 	bl	80063d4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	2201      	movs	r2, #1
 80058dc:	2104      	movs	r1, #4
 80058de:	4618      	mov	r0, r3
 80058e0:	f000 fd78 	bl	80063d4 <TIM_CCxChannelCmd>
      break;
 80058e4:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	681a      	ldr	r2, [r3, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f042 0201 	orr.w	r2, r2, #1
 80058f4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b082      	sub	sp, #8
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f003 0302 	and.w	r3, r3, #2
 8005912:	2b02      	cmp	r3, #2
 8005914:	d122      	bne.n	800595c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	68db      	ldr	r3, [r3, #12]
 800591c:	f003 0302 	and.w	r3, r3, #2
 8005920:	2b02      	cmp	r3, #2
 8005922:	d11b      	bne.n	800595c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f06f 0202 	mvn.w	r2, #2
 800592c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	699b      	ldr	r3, [r3, #24]
 800593a:	f003 0303 	and.w	r3, r3, #3
 800593e:	2b00      	cmp	r3, #0
 8005940:	d003      	beq.n	800594a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005942:	6878      	ldr	r0, [r7, #4]
 8005944:	f000 fa81 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005948:	e005      	b.n	8005956 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 fa73 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005950:	6878      	ldr	r0, [r7, #4]
 8005952:	f000 fa84 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	2b04      	cmp	r3, #4
 8005968:	d122      	bne.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	f003 0304 	and.w	r3, r3, #4
 8005974:	2b04      	cmp	r3, #4
 8005976:	d11b      	bne.n	80059b0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	f06f 0204 	mvn.w	r2, #4
 8005980:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2202      	movs	r2, #2
 8005986:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005992:	2b00      	cmp	r3, #0
 8005994:	d003      	beq.n	800599e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f000 fa57 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 800599c:	e005      	b.n	80059aa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fa49 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059a4:	6878      	ldr	r0, [r7, #4]
 80059a6:	f000 fa5a 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	691b      	ldr	r3, [r3, #16]
 80059b6:	f003 0308 	and.w	r3, r3, #8
 80059ba:	2b08      	cmp	r3, #8
 80059bc:	d122      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	f003 0308 	and.w	r3, r3, #8
 80059c8:	2b08      	cmp	r3, #8
 80059ca:	d11b      	bne.n	8005a04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f06f 0208 	mvn.w	r2, #8
 80059d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2204      	movs	r2, #4
 80059da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	69db      	ldr	r3, [r3, #28]
 80059e2:	f003 0303 	and.w	r3, r3, #3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059ea:	6878      	ldr	r0, [r7, #4]
 80059ec:	f000 fa2d 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 80059f0:	e005      	b.n	80059fe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059f2:	6878      	ldr	r0, [r7, #4]
 80059f4:	f000 fa1f 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059f8:	6878      	ldr	r0, [r7, #4]
 80059fa:	f000 fa30 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2200      	movs	r2, #0
 8005a02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	f003 0310 	and.w	r3, r3, #16
 8005a0e:	2b10      	cmp	r3, #16
 8005a10:	d122      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	f003 0310 	and.w	r3, r3, #16
 8005a1c:	2b10      	cmp	r3, #16
 8005a1e:	d11b      	bne.n	8005a58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f06f 0210 	mvn.w	r2, #16
 8005a28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2208      	movs	r2, #8
 8005a2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 fa03 	bl	8005e4a <HAL_TIM_IC_CaptureCallback>
 8005a44:	e005      	b.n	8005a52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f9f5 	bl	8005e36 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 fa06 	bl	8005e5e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b01      	cmp	r3, #1
 8005a64:	d10e      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	68db      	ldr	r3, [r3, #12]
 8005a6c:	f003 0301 	and.w	r3, r3, #1
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d107      	bne.n	8005a84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f06f 0201 	mvn.w	r2, #1
 8005a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 f9cf 	bl	8005e22 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a8e:	2b80      	cmp	r3, #128	; 0x80
 8005a90:	d10e      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a9c:	2b80      	cmp	r3, #128	; 0x80
 8005a9e:	d107      	bne.n	8005ab0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005aa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aaa:	6878      	ldr	r0, [r7, #4]
 8005aac:	f000 fd82 	bl	80065b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aba:	2b40      	cmp	r3, #64	; 0x40
 8005abc:	d10e      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac8:	2b40      	cmp	r3, #64	; 0x40
 8005aca:	d107      	bne.n	8005adc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f000 f9cb 	bl	8005e72 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	f003 0320 	and.w	r3, r3, #32
 8005ae6:	2b20      	cmp	r3, #32
 8005ae8:	d10e      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d107      	bne.n	8005b08 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f06f 0220 	mvn.w	r2, #32
 8005b00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b02:	6878      	ldr	r0, [r7, #4]
 8005b04:	f000 fd4c 	bl	80065a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b086      	sub	sp, #24
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b1c:	2300      	movs	r3, #0
 8005b1e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b26:	2b01      	cmp	r3, #1
 8005b28:	d101      	bne.n	8005b2e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b2a:	2302      	movs	r3, #2
 8005b2c:	e0ae      	b.n	8005c8c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2201      	movs	r2, #1
 8005b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2b0c      	cmp	r3, #12
 8005b3a:	f200 809f 	bhi.w	8005c7c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005b3e:	a201      	add	r2, pc, #4	; (adr r2, 8005b44 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b44:	08005b79 	.word	0x08005b79
 8005b48:	08005c7d 	.word	0x08005c7d
 8005b4c:	08005c7d 	.word	0x08005c7d
 8005b50:	08005c7d 	.word	0x08005c7d
 8005b54:	08005bb9 	.word	0x08005bb9
 8005b58:	08005c7d 	.word	0x08005c7d
 8005b5c:	08005c7d 	.word	0x08005c7d
 8005b60:	08005c7d 	.word	0x08005c7d
 8005b64:	08005bfb 	.word	0x08005bfb
 8005b68:	08005c7d 	.word	0x08005c7d
 8005b6c:	08005c7d 	.word	0x08005c7d
 8005b70:	08005c7d 	.word	0x08005c7d
 8005b74:	08005c3b 	.word	0x08005c3b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	68b9      	ldr	r1, [r7, #8]
 8005b7e:	4618      	mov	r0, r3
 8005b80:	f000 fa02 	bl	8005f88 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	699a      	ldr	r2, [r3, #24]
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0208 	orr.w	r2, r2, #8
 8005b92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	699a      	ldr	r2, [r3, #24]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f022 0204 	bic.w	r2, r2, #4
 8005ba2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	6999      	ldr	r1, [r3, #24]
 8005baa:	68bb      	ldr	r3, [r7, #8]
 8005bac:	691a      	ldr	r2, [r3, #16]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	430a      	orrs	r2, r1
 8005bb4:	619a      	str	r2, [r3, #24]
      break;
 8005bb6:	e064      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	68b9      	ldr	r1, [r7, #8]
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f000 fa48 	bl	8006054 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	699a      	ldr	r2, [r3, #24]
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	699a      	ldr	r2, [r3, #24]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	6999      	ldr	r1, [r3, #24]
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	691b      	ldr	r3, [r3, #16]
 8005bee:	021a      	lsls	r2, r3, #8
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	430a      	orrs	r2, r1
 8005bf6:	619a      	str	r2, [r3, #24]
      break;
 8005bf8:	e043      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	68b9      	ldr	r1, [r7, #8]
 8005c00:	4618      	mov	r0, r3
 8005c02:	f000 fa93 	bl	800612c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	69da      	ldr	r2, [r3, #28]
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f042 0208 	orr.w	r2, r2, #8
 8005c14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	69da      	ldr	r2, [r3, #28]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f022 0204 	bic.w	r2, r2, #4
 8005c24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	69d9      	ldr	r1, [r3, #28]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	691a      	ldr	r2, [r3, #16]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	430a      	orrs	r2, r1
 8005c36:	61da      	str	r2, [r3, #28]
      break;
 8005c38:	e023      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68b9      	ldr	r1, [r7, #8]
 8005c40:	4618      	mov	r0, r3
 8005c42:	f000 fadd 	bl	8006200 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69da      	ldr	r2, [r3, #28]
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69da      	ldr	r2, [r3, #28]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	69d9      	ldr	r1, [r3, #28]
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	691b      	ldr	r3, [r3, #16]
 8005c70:	021a      	lsls	r2, r3, #8
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	430a      	orrs	r2, r1
 8005c78:	61da      	str	r2, [r3, #28]
      break;
 8005c7a:	e002      	b.n	8005c82 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005c7c:	2301      	movs	r3, #1
 8005c7e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}

08005c94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
 8005c9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d101      	bne.n	8005cb0 <HAL_TIM_ConfigClockSource+0x1c>
 8005cac:	2302      	movs	r3, #2
 8005cae:	e0b4      	b.n	8005e1a <HAL_TIM_ConfigClockSource+0x186>
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2202      	movs	r2, #2
 8005cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005cc8:	68bb      	ldr	r3, [r7, #8]
 8005cca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005cce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005cd0:	68bb      	ldr	r3, [r7, #8]
 8005cd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005cd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	68ba      	ldr	r2, [r7, #8]
 8005cde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d03e      	beq.n	8005d68 <HAL_TIM_ConfigClockSource+0xd4>
 8005cea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cee:	f200 8087 	bhi.w	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cf6:	f000 8086 	beq.w	8005e06 <HAL_TIM_ConfigClockSource+0x172>
 8005cfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005cfe:	d87f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d00:	2b70      	cmp	r3, #112	; 0x70
 8005d02:	d01a      	beq.n	8005d3a <HAL_TIM_ConfigClockSource+0xa6>
 8005d04:	2b70      	cmp	r3, #112	; 0x70
 8005d06:	d87b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d08:	2b60      	cmp	r3, #96	; 0x60
 8005d0a:	d050      	beq.n	8005dae <HAL_TIM_ConfigClockSource+0x11a>
 8005d0c:	2b60      	cmp	r3, #96	; 0x60
 8005d0e:	d877      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d10:	2b50      	cmp	r3, #80	; 0x50
 8005d12:	d03c      	beq.n	8005d8e <HAL_TIM_ConfigClockSource+0xfa>
 8005d14:	2b50      	cmp	r3, #80	; 0x50
 8005d16:	d873      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d18:	2b40      	cmp	r3, #64	; 0x40
 8005d1a:	d058      	beq.n	8005dce <HAL_TIM_ConfigClockSource+0x13a>
 8005d1c:	2b40      	cmp	r3, #64	; 0x40
 8005d1e:	d86f      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d20:	2b30      	cmp	r3, #48	; 0x30
 8005d22:	d064      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d24:	2b30      	cmp	r3, #48	; 0x30
 8005d26:	d86b      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d28:	2b20      	cmp	r3, #32
 8005d2a:	d060      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d2c:	2b20      	cmp	r3, #32
 8005d2e:	d867      	bhi.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d05c      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d34:	2b10      	cmp	r3, #16
 8005d36:	d05a      	beq.n	8005dee <HAL_TIM_ConfigClockSource+0x15a>
 8005d38:	e062      	b.n	8005e00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6818      	ldr	r0, [r3, #0]
 8005d3e:	683b      	ldr	r3, [r7, #0]
 8005d40:	6899      	ldr	r1, [r3, #8]
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	685a      	ldr	r2, [r3, #4]
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	68db      	ldr	r3, [r3, #12]
 8005d4a:	f000 fb23 	bl	8006394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005d56:	68bb      	ldr	r3, [r7, #8]
 8005d58:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005d5c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	609a      	str	r2, [r3, #8]
      break;
 8005d66:	e04f      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6818      	ldr	r0, [r3, #0]
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	6899      	ldr	r1, [r3, #8]
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	685a      	ldr	r2, [r3, #4]
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	f000 fb0c 	bl	8006394 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	689a      	ldr	r2, [r3, #8]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005d8a:	609a      	str	r2, [r3, #8]
      break;
 8005d8c:	e03c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6818      	ldr	r0, [r3, #0]
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6859      	ldr	r1, [r3, #4]
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	68db      	ldr	r3, [r3, #12]
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f000 fa80 	bl	80062a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	2150      	movs	r1, #80	; 0x50
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 fad9 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005dac:	e02c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	6859      	ldr	r1, [r3, #4]
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	68db      	ldr	r3, [r3, #12]
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f000 fa9f 	bl	80062fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	2160      	movs	r1, #96	; 0x60
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	f000 fac9 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005dcc:	e01c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	6818      	ldr	r0, [r3, #0]
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	6859      	ldr	r1, [r3, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68db      	ldr	r3, [r3, #12]
 8005dda:	461a      	mov	r2, r3
 8005ddc:	f000 fa60 	bl	80062a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2140      	movs	r1, #64	; 0x40
 8005de6:	4618      	mov	r0, r3
 8005de8:	f000 fab9 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005dec:	e00c      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681a      	ldr	r2, [r3, #0]
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4619      	mov	r1, r3
 8005df8:	4610      	mov	r0, r2
 8005dfa:	f000 fab0 	bl	800635e <TIM_ITRx_SetConfig>
      break;
 8005dfe:	e003      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e00:	2301      	movs	r3, #1
 8005e02:	73fb      	strb	r3, [r7, #15]
      break;
 8005e04:	e000      	b.n	8005e08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005e06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2200      	movs	r2, #0
 8005e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e18:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e1a:	4618      	mov	r0, r3
 8005e1c:	3710      	adds	r7, #16
 8005e1e:	46bd      	mov	sp, r7
 8005e20:	bd80      	pop	{r7, pc}

08005e22 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e22:	b480      	push	{r7}
 8005e24:	b083      	sub	sp, #12
 8005e26:	af00      	add	r7, sp, #0
 8005e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005e2a:	bf00      	nop
 8005e2c:	370c      	adds	r7, #12
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr

08005e36 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005e36:	b480      	push	{r7}
 8005e38:	b083      	sub	sp, #12
 8005e3a:	af00      	add	r7, sp, #0
 8005e3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005e3e:	bf00      	nop
 8005e40:	370c      	adds	r7, #12
 8005e42:	46bd      	mov	sp, r7
 8005e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e48:	4770      	bx	lr

08005e4a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005e4a:	b480      	push	{r7}
 8005e4c:	b083      	sub	sp, #12
 8005e4e:	af00      	add	r7, sp, #0
 8005e50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005e52:	bf00      	nop
 8005e54:	370c      	adds	r7, #12
 8005e56:	46bd      	mov	sp, r7
 8005e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5c:	4770      	bx	lr

08005e5e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005e66:	bf00      	nop
 8005e68:	370c      	adds	r7, #12
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr

08005e72 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005e72:	b480      	push	{r7}
 8005e74:	b083      	sub	sp, #12
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005e7a:	bf00      	nop
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr
	...

08005e88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	b085      	sub	sp, #20
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	4a34      	ldr	r2, [pc, #208]	; (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d00f      	beq.n	8005ec0 <TIM_Base_SetConfig+0x38>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ea6:	d00b      	beq.n	8005ec0 <TIM_Base_SetConfig+0x38>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	4a31      	ldr	r2, [pc, #196]	; (8005f70 <TIM_Base_SetConfig+0xe8>)
 8005eac:	4293      	cmp	r3, r2
 8005eae:	d007      	beq.n	8005ec0 <TIM_Base_SetConfig+0x38>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	4a30      	ldr	r2, [pc, #192]	; (8005f74 <TIM_Base_SetConfig+0xec>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d003      	beq.n	8005ec0 <TIM_Base_SetConfig+0x38>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	4a2f      	ldr	r2, [pc, #188]	; (8005f78 <TIM_Base_SetConfig+0xf0>)
 8005ebc:	4293      	cmp	r3, r2
 8005ebe:	d108      	bne.n	8005ed2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ec6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	68fa      	ldr	r2, [r7, #12]
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	4a25      	ldr	r2, [pc, #148]	; (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d01b      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee0:	d017      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	4a22      	ldr	r2, [pc, #136]	; (8005f70 <TIM_Base_SetConfig+0xe8>)
 8005ee6:	4293      	cmp	r3, r2
 8005ee8:	d013      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a21      	ldr	r2, [pc, #132]	; (8005f74 <TIM_Base_SetConfig+0xec>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d00f      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a20      	ldr	r2, [pc, #128]	; (8005f78 <TIM_Base_SetConfig+0xf0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d00b      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <TIM_Base_SetConfig+0xf4>)
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d007      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	4a1e      	ldr	r2, [pc, #120]	; (8005f80 <TIM_Base_SetConfig+0xf8>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d003      	beq.n	8005f12 <TIM_Base_SetConfig+0x8a>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <TIM_Base_SetConfig+0xfc>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d108      	bne.n	8005f24 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f18:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	68db      	ldr	r3, [r3, #12]
 8005f1e:	68fa      	ldr	r2, [r7, #12]
 8005f20:	4313      	orrs	r3, r2
 8005f22:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	4313      	orrs	r3, r2
 8005f30:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a08      	ldr	r2, [pc, #32]	; (8005f6c <TIM_Base_SetConfig+0xe4>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d103      	bne.n	8005f58 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005f50:	683b      	ldr	r3, [r7, #0]
 8005f52:	691a      	ldr	r2, [r3, #16]
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	615a      	str	r2, [r3, #20]
}
 8005f5e:	bf00      	nop
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40014000 	.word	0x40014000
 8005f80:	40014400 	.word	0x40014400
 8005f84:	40014800 	.word	0x40014800

08005f88 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b087      	sub	sp, #28
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	6a1b      	ldr	r3, [r3, #32]
 8005f96:	f023 0201 	bic.w	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	6a1b      	ldr	r3, [r3, #32]
 8005fa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0303 	bic.w	r3, r3, #3
 8005fbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	4313      	orrs	r3, r2
 8005fc8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005fca:	697b      	ldr	r3, [r7, #20]
 8005fcc:	f023 0302 	bic.w	r3, r3, #2
 8005fd0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	697a      	ldr	r2, [r7, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	4a1c      	ldr	r2, [pc, #112]	; (8006050 <TIM_OC1_SetConfig+0xc8>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d10c      	bne.n	8005ffe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	f023 0308 	bic.w	r3, r3, #8
 8005fea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	697a      	ldr	r2, [r7, #20]
 8005ff2:	4313      	orrs	r3, r2
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	f023 0304 	bic.w	r3, r3, #4
 8005ffc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a13      	ldr	r2, [pc, #76]	; (8006050 <TIM_OC1_SetConfig+0xc8>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d111      	bne.n	800602a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800600c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006014:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	695b      	ldr	r3, [r3, #20]
 800601a:	693a      	ldr	r2, [r7, #16]
 800601c:	4313      	orrs	r3, r2
 800601e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	699b      	ldr	r3, [r3, #24]
 8006024:	693a      	ldr	r2, [r7, #16]
 8006026:	4313      	orrs	r3, r2
 8006028:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	693a      	ldr	r2, [r7, #16]
 800602e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	68fa      	ldr	r2, [r7, #12]
 8006034:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	685a      	ldr	r2, [r3, #4]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	697a      	ldr	r2, [r7, #20]
 8006042:	621a      	str	r2, [r3, #32]
}
 8006044:	bf00      	nop
 8006046:	371c      	adds	r7, #28
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr
 8006050:	40010000 	.word	0x40010000

08006054 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006054:	b480      	push	{r7}
 8006056:	b087      	sub	sp, #28
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
 800605c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0210 	bic.w	r2, r3, #16
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6a1b      	ldr	r3, [r3, #32]
 800606e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	699b      	ldr	r3, [r3, #24]
 800607a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006082:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800608a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	021b      	lsls	r3, r3, #8
 8006092:	68fa      	ldr	r2, [r7, #12]
 8006094:	4313      	orrs	r3, r2
 8006096:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	f023 0320 	bic.w	r3, r3, #32
 800609e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	011b      	lsls	r3, r3, #4
 80060a6:	697a      	ldr	r2, [r7, #20]
 80060a8:	4313      	orrs	r3, r2
 80060aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <TIM_OC2_SetConfig+0xd4>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d10d      	bne.n	80060d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	011b      	lsls	r3, r3, #4
 80060c2:	697a      	ldr	r2, [r7, #20]
 80060c4:	4313      	orrs	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a15      	ldr	r2, [pc, #84]	; (8006128 <TIM_OC2_SetConfig+0xd4>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d113      	bne.n	8006100 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80060de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80060e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	695b      	ldr	r3, [r3, #20]
 80060ec:	009b      	lsls	r3, r3, #2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	009b      	lsls	r3, r3, #2
 80060fa:	693a      	ldr	r2, [r7, #16]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68fa      	ldr	r2, [r7, #12]
 800610a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685a      	ldr	r2, [r3, #4]
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	697a      	ldr	r2, [r7, #20]
 8006118:	621a      	str	r2, [r3, #32]
}
 800611a:	bf00      	nop
 800611c:	371c      	adds	r7, #28
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000

0800612c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800612c:	b480      	push	{r7}
 800612e:	b087      	sub	sp, #28
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
 800613a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a1b      	ldr	r3, [r3, #32]
 8006146:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	685b      	ldr	r3, [r3, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	69db      	ldr	r3, [r3, #28]
 8006152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	f023 0303 	bic.w	r3, r3, #3
 8006162:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006174:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	021b      	lsls	r3, r3, #8
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	4313      	orrs	r3, r2
 8006180:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	4a1d      	ldr	r2, [pc, #116]	; (80061fc <TIM_OC3_SetConfig+0xd0>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10d      	bne.n	80061a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006190:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	68db      	ldr	r3, [r3, #12]
 8006196:	021b      	lsls	r3, r3, #8
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a14      	ldr	r2, [pc, #80]	; (80061fc <TIM_OC3_SetConfig+0xd0>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d113      	bne.n	80061d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	011b      	lsls	r3, r3, #4
 80061c4:	693a      	ldr	r2, [r7, #16]
 80061c6:	4313      	orrs	r3, r2
 80061c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	699b      	ldr	r3, [r3, #24]
 80061ce:	011b      	lsls	r3, r3, #4
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	4313      	orrs	r3, r2
 80061d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	68fa      	ldr	r2, [r7, #12]
 80061e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	685a      	ldr	r2, [r3, #4]
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	697a      	ldr	r2, [r7, #20]
 80061ee:	621a      	str	r2, [r3, #32]
}
 80061f0:	bf00      	nop
 80061f2:	371c      	adds	r7, #28
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr
 80061fc:	40010000 	.word	0x40010000

08006200 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	021b      	lsls	r3, r3, #8
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	4313      	orrs	r3, r2
 8006242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800624a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	031b      	lsls	r3, r3, #12
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	4a10      	ldr	r2, [pc, #64]	; (800629c <TIM_OC4_SetConfig+0x9c>)
 800625c:	4293      	cmp	r3, r2
 800625e:	d109      	bne.n	8006274 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006266:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	695b      	ldr	r3, [r3, #20]
 800626c:	019b      	lsls	r3, r3, #6
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	4313      	orrs	r3, r2
 8006272:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	697a      	ldr	r2, [r7, #20]
 8006278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	685a      	ldr	r2, [r3, #4]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	621a      	str	r2, [r3, #32]
}
 800628e:	bf00      	nop
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
 800629a:	bf00      	nop
 800629c:	40010000 	.word	0x40010000

080062a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062a0:	b480      	push	{r7}
 80062a2:	b087      	sub	sp, #28
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	6a1b      	ldr	r3, [r3, #32]
 80062b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	6a1b      	ldr	r3, [r3, #32]
 80062b6:	f023 0201 	bic.w	r2, r3, #1
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	699b      	ldr	r3, [r3, #24]
 80062c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80062c4:	693b      	ldr	r3, [r7, #16]
 80062c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	011b      	lsls	r3, r3, #4
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80062d6:	697b      	ldr	r3, [r7, #20]
 80062d8:	f023 030a 	bic.w	r3, r3, #10
 80062dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	4313      	orrs	r3, r2
 80062e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	693a      	ldr	r2, [r7, #16]
 80062ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	697a      	ldr	r2, [r7, #20]
 80062f0:	621a      	str	r2, [r3, #32]
}
 80062f2:	bf00      	nop
 80062f4:	371c      	adds	r7, #28
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr

080062fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062fe:	b480      	push	{r7}
 8006300:	b087      	sub	sp, #28
 8006302:	af00      	add	r7, sp, #0
 8006304:	60f8      	str	r0, [r7, #12]
 8006306:	60b9      	str	r1, [r7, #8]
 8006308:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	6a1b      	ldr	r3, [r3, #32]
 800630e:	f023 0210 	bic.w	r2, r3, #16
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	6a1b      	ldr	r3, [r3, #32]
 8006320:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	031b      	lsls	r3, r3, #12
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	011b      	lsls	r3, r3, #4
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	4313      	orrs	r3, r2
 8006344:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	697a      	ldr	r2, [r7, #20]
 800634a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	693a      	ldr	r2, [r7, #16]
 8006350:	621a      	str	r2, [r3, #32]
}
 8006352:	bf00      	nop
 8006354:	371c      	adds	r7, #28
 8006356:	46bd      	mov	sp, r7
 8006358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635c:	4770      	bx	lr

0800635e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800635e:	b480      	push	{r7}
 8006360:	b085      	sub	sp, #20
 8006362:	af00      	add	r7, sp, #0
 8006364:	6078      	str	r0, [r7, #4]
 8006366:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	689b      	ldr	r3, [r3, #8]
 800636c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006374:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006376:	683a      	ldr	r2, [r7, #0]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4313      	orrs	r3, r2
 800637c:	f043 0307 	orr.w	r3, r3, #7
 8006380:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	68fa      	ldr	r2, [r7, #12]
 8006386:	609a      	str	r2, [r3, #8]
}
 8006388:	bf00      	nop
 800638a:	3714      	adds	r7, #20
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr

08006394 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006394:	b480      	push	{r7}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	60f8      	str	r0, [r7, #12]
 800639c:	60b9      	str	r1, [r7, #8]
 800639e:	607a      	str	r2, [r7, #4]
 80063a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	689b      	ldr	r3, [r3, #8]
 80063a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	021a      	lsls	r2, r3, #8
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	431a      	orrs	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4313      	orrs	r3, r2
 80063bc:	697a      	ldr	r2, [r7, #20]
 80063be:	4313      	orrs	r3, r2
 80063c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	697a      	ldr	r2, [r7, #20]
 80063c6:	609a      	str	r2, [r3, #8]
}
 80063c8:	bf00      	nop
 80063ca:	371c      	adds	r7, #28
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b087      	sub	sp, #28
 80063d8:	af00      	add	r7, sp, #0
 80063da:	60f8      	str	r0, [r7, #12]
 80063dc:	60b9      	str	r1, [r7, #8]
 80063de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80063e0:	68bb      	ldr	r3, [r7, #8]
 80063e2:	f003 031f 	and.w	r3, r3, #31
 80063e6:	2201      	movs	r2, #1
 80063e8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6a1a      	ldr	r2, [r3, #32]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	43db      	mvns	r3, r3
 80063f6:	401a      	ands	r2, r3
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6a1a      	ldr	r2, [r3, #32]
 8006400:	68bb      	ldr	r3, [r7, #8]
 8006402:	f003 031f 	and.w	r3, r3, #31
 8006406:	6879      	ldr	r1, [r7, #4]
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	621a      	str	r2, [r3, #32]
}
 8006412:	bf00      	nop
 8006414:	371c      	adds	r7, #28
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
	...

08006420 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006420:	b480      	push	{r7}
 8006422:	b085      	sub	sp, #20
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
 8006428:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006430:	2b01      	cmp	r3, #1
 8006432:	d101      	bne.n	8006438 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006434:	2302      	movs	r3, #2
 8006436:	e050      	b.n	80064da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	2201      	movs	r2, #1
 800643c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800645e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4313      	orrs	r3, r2
 8006468:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	4a1c      	ldr	r2, [pc, #112]	; (80064e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006478:	4293      	cmp	r3, r2
 800647a:	d018      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006484:	d013      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4a18      	ldr	r2, [pc, #96]	; (80064ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800648c:	4293      	cmp	r3, r2
 800648e:	d00e      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	4a16      	ldr	r2, [pc, #88]	; (80064f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006496:	4293      	cmp	r3, r2
 8006498:	d009      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	4a15      	ldr	r2, [pc, #84]	; (80064f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80064a0:	4293      	cmp	r3, r2
 80064a2:	d004      	beq.n	80064ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a13      	ldr	r2, [pc, #76]	; (80064f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d10c      	bne.n	80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	68ba      	ldr	r2, [r7, #8]
 80064bc:	4313      	orrs	r3, r2
 80064be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	68ba      	ldr	r2, [r7, #8]
 80064c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2200      	movs	r2, #0
 80064d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d8:	2300      	movs	r3, #0
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3714      	adds	r7, #20
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	40010000 	.word	0x40010000
 80064ec:	40000400 	.word	0x40000400
 80064f0:	40000800 	.word	0x40000800
 80064f4:	40000c00 	.word	0x40000c00
 80064f8:	40014000 	.word	0x40014000

080064fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80064fc:	b480      	push	{r7}
 80064fe:	b085      	sub	sp, #20
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006506:	2300      	movs	r3, #0
 8006508:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006510:	2b01      	cmp	r3, #1
 8006512:	d101      	bne.n	8006518 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006514:	2302      	movs	r3, #2
 8006516:	e03d      	b.n	8006594 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006526:	683b      	ldr	r3, [r7, #0]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	4313      	orrs	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	4313      	orrs	r3, r2
 8006548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006550:	683b      	ldr	r3, [r7, #0]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4313      	orrs	r3, r2
 8006556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	695b      	ldr	r3, [r3, #20]
 8006570:	4313      	orrs	r3, r2
 8006572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	4313      	orrs	r3, r2
 8006580:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	68fa      	ldr	r2, [r7, #12]
 8006588:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006592:	2300      	movs	r3, #0
}
 8006594:	4618      	mov	r0, r3
 8006596:	3714      	adds	r7, #20
 8006598:	46bd      	mov	sp, r7
 800659a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659e:	4770      	bx	lr

080065a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e03f      	b.n	800665a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d106      	bne.n	80065f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f7fc fea2 	bl	8003338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2224      	movs	r2, #36	; 0x24
 80065f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	68da      	ldr	r2, [r3, #12]
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800660a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f000 f829 	bl	8006664 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006620:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	695a      	ldr	r2, [r3, #20]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006630:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006640:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2200      	movs	r2, #0
 8006646:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2220      	movs	r2, #32
 8006654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3708      	adds	r7, #8
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
	...

08006664 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006668:	b0c0      	sub	sp, #256	; 0x100
 800666a:	af00      	add	r7, sp, #0
 800666c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	691b      	ldr	r3, [r3, #16]
 8006678:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800667c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006680:	68d9      	ldr	r1, [r3, #12]
 8006682:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	ea40 0301 	orr.w	r3, r0, r1
 800668c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800668e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006692:	689a      	ldr	r2, [r3, #8]
 8006694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006698:	691b      	ldr	r3, [r3, #16]
 800669a:	431a      	orrs	r2, r3
 800669c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	431a      	orrs	r2, r3
 80066a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066a8:	69db      	ldr	r3, [r3, #28]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80066b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066bc:	f021 010c 	bic.w	r1, r1, #12
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80066ca:	430b      	orrs	r3, r1
 80066cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	695b      	ldr	r3, [r3, #20]
 80066d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80066da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066de:	6999      	ldr	r1, [r3, #24]
 80066e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	ea40 0301 	orr.w	r3, r0, r1
 80066ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b8f      	ldr	r3, [pc, #572]	; (8006930 <UART_SetConfig+0x2cc>)
 80066f4:	429a      	cmp	r2, r3
 80066f6:	d005      	beq.n	8006704 <UART_SetConfig+0xa0>
 80066f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066fc:	681a      	ldr	r2, [r3, #0]
 80066fe:	4b8d      	ldr	r3, [pc, #564]	; (8006934 <UART_SetConfig+0x2d0>)
 8006700:	429a      	cmp	r2, r3
 8006702:	d104      	bne.n	800670e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006704:	f7fe fe0a 	bl	800531c <HAL_RCC_GetPCLK2Freq>
 8006708:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800670c:	e003      	b.n	8006716 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800670e:	f7fe fdf1 	bl	80052f4 <HAL_RCC_GetPCLK1Freq>
 8006712:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800671a:	69db      	ldr	r3, [r3, #28]
 800671c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006720:	f040 810c 	bne.w	800693c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006724:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006728:	2200      	movs	r2, #0
 800672a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800672e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006732:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006736:	4622      	mov	r2, r4
 8006738:	462b      	mov	r3, r5
 800673a:	1891      	adds	r1, r2, r2
 800673c:	65b9      	str	r1, [r7, #88]	; 0x58
 800673e:	415b      	adcs	r3, r3
 8006740:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006742:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006746:	4621      	mov	r1, r4
 8006748:	eb12 0801 	adds.w	r8, r2, r1
 800674c:	4629      	mov	r1, r5
 800674e:	eb43 0901 	adc.w	r9, r3, r1
 8006752:	f04f 0200 	mov.w	r2, #0
 8006756:	f04f 0300 	mov.w	r3, #0
 800675a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800675e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006762:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006766:	4690      	mov	r8, r2
 8006768:	4699      	mov	r9, r3
 800676a:	4623      	mov	r3, r4
 800676c:	eb18 0303 	adds.w	r3, r8, r3
 8006770:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006774:	462b      	mov	r3, r5
 8006776:	eb49 0303 	adc.w	r3, r9, r3
 800677a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800677e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006782:	685b      	ldr	r3, [r3, #4]
 8006784:	2200      	movs	r2, #0
 8006786:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800678a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800678e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006792:	460b      	mov	r3, r1
 8006794:	18db      	adds	r3, r3, r3
 8006796:	653b      	str	r3, [r7, #80]	; 0x50
 8006798:	4613      	mov	r3, r2
 800679a:	eb42 0303 	adc.w	r3, r2, r3
 800679e:	657b      	str	r3, [r7, #84]	; 0x54
 80067a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80067a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80067a8:	f7fa fb00 	bl	8000dac <__aeabi_uldivmod>
 80067ac:	4602      	mov	r2, r0
 80067ae:	460b      	mov	r3, r1
 80067b0:	4b61      	ldr	r3, [pc, #388]	; (8006938 <UART_SetConfig+0x2d4>)
 80067b2:	fba3 2302 	umull	r2, r3, r3, r2
 80067b6:	095b      	lsrs	r3, r3, #5
 80067b8:	011c      	lsls	r4, r3, #4
 80067ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80067be:	2200      	movs	r2, #0
 80067c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80067c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80067c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80067cc:	4642      	mov	r2, r8
 80067ce:	464b      	mov	r3, r9
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80067d4:	415b      	adcs	r3, r3
 80067d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80067d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80067dc:	4641      	mov	r1, r8
 80067de:	eb12 0a01 	adds.w	sl, r2, r1
 80067e2:	4649      	mov	r1, r9
 80067e4:	eb43 0b01 	adc.w	fp, r3, r1
 80067e8:	f04f 0200 	mov.w	r2, #0
 80067ec:	f04f 0300 	mov.w	r3, #0
 80067f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80067f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80067f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067fc:	4692      	mov	sl, r2
 80067fe:	469b      	mov	fp, r3
 8006800:	4643      	mov	r3, r8
 8006802:	eb1a 0303 	adds.w	r3, sl, r3
 8006806:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800680a:	464b      	mov	r3, r9
 800680c:	eb4b 0303 	adc.w	r3, fp, r3
 8006810:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2200      	movs	r2, #0
 800681c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006820:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006824:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006828:	460b      	mov	r3, r1
 800682a:	18db      	adds	r3, r3, r3
 800682c:	643b      	str	r3, [r7, #64]	; 0x40
 800682e:	4613      	mov	r3, r2
 8006830:	eb42 0303 	adc.w	r3, r2, r3
 8006834:	647b      	str	r3, [r7, #68]	; 0x44
 8006836:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800683a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800683e:	f7fa fab5 	bl	8000dac <__aeabi_uldivmod>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4611      	mov	r1, r2
 8006848:	4b3b      	ldr	r3, [pc, #236]	; (8006938 <UART_SetConfig+0x2d4>)
 800684a:	fba3 2301 	umull	r2, r3, r3, r1
 800684e:	095b      	lsrs	r3, r3, #5
 8006850:	2264      	movs	r2, #100	; 0x64
 8006852:	fb02 f303 	mul.w	r3, r2, r3
 8006856:	1acb      	subs	r3, r1, r3
 8006858:	00db      	lsls	r3, r3, #3
 800685a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800685e:	4b36      	ldr	r3, [pc, #216]	; (8006938 <UART_SetConfig+0x2d4>)
 8006860:	fba3 2302 	umull	r2, r3, r3, r2
 8006864:	095b      	lsrs	r3, r3, #5
 8006866:	005b      	lsls	r3, r3, #1
 8006868:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800686c:	441c      	add	r4, r3
 800686e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006872:	2200      	movs	r2, #0
 8006874:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800687c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006880:	4642      	mov	r2, r8
 8006882:	464b      	mov	r3, r9
 8006884:	1891      	adds	r1, r2, r2
 8006886:	63b9      	str	r1, [r7, #56]	; 0x38
 8006888:	415b      	adcs	r3, r3
 800688a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800688c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006890:	4641      	mov	r1, r8
 8006892:	1851      	adds	r1, r2, r1
 8006894:	6339      	str	r1, [r7, #48]	; 0x30
 8006896:	4649      	mov	r1, r9
 8006898:	414b      	adcs	r3, r1
 800689a:	637b      	str	r3, [r7, #52]	; 0x34
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	f04f 0300 	mov.w	r3, #0
 80068a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80068a8:	4659      	mov	r1, fp
 80068aa:	00cb      	lsls	r3, r1, #3
 80068ac:	4651      	mov	r1, sl
 80068ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068b2:	4651      	mov	r1, sl
 80068b4:	00ca      	lsls	r2, r1, #3
 80068b6:	4610      	mov	r0, r2
 80068b8:	4619      	mov	r1, r3
 80068ba:	4603      	mov	r3, r0
 80068bc:	4642      	mov	r2, r8
 80068be:	189b      	adds	r3, r3, r2
 80068c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068c4:	464b      	mov	r3, r9
 80068c6:	460a      	mov	r2, r1
 80068c8:	eb42 0303 	adc.w	r3, r2, r3
 80068cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2200      	movs	r2, #0
 80068d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80068dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80068e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80068e4:	460b      	mov	r3, r1
 80068e6:	18db      	adds	r3, r3, r3
 80068e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ea:	4613      	mov	r3, r2
 80068ec:	eb42 0303 	adc.w	r3, r2, r3
 80068f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80068f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80068f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80068fa:	f7fa fa57 	bl	8000dac <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4b0d      	ldr	r3, [pc, #52]	; (8006938 <UART_SetConfig+0x2d4>)
 8006904:	fba3 1302 	umull	r1, r3, r3, r2
 8006908:	095b      	lsrs	r3, r3, #5
 800690a:	2164      	movs	r1, #100	; 0x64
 800690c:	fb01 f303 	mul.w	r3, r1, r3
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	00db      	lsls	r3, r3, #3
 8006914:	3332      	adds	r3, #50	; 0x32
 8006916:	4a08      	ldr	r2, [pc, #32]	; (8006938 <UART_SetConfig+0x2d4>)
 8006918:	fba2 2303 	umull	r2, r3, r2, r3
 800691c:	095b      	lsrs	r3, r3, #5
 800691e:	f003 0207 	and.w	r2, r3, #7
 8006922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4422      	add	r2, r4
 800692a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800692c:	e105      	b.n	8006b3a <UART_SetConfig+0x4d6>
 800692e:	bf00      	nop
 8006930:	40011000 	.word	0x40011000
 8006934:	40011400 	.word	0x40011400
 8006938:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800693c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006940:	2200      	movs	r2, #0
 8006942:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006946:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800694a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800694e:	4642      	mov	r2, r8
 8006950:	464b      	mov	r3, r9
 8006952:	1891      	adds	r1, r2, r2
 8006954:	6239      	str	r1, [r7, #32]
 8006956:	415b      	adcs	r3, r3
 8006958:	627b      	str	r3, [r7, #36]	; 0x24
 800695a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800695e:	4641      	mov	r1, r8
 8006960:	1854      	adds	r4, r2, r1
 8006962:	4649      	mov	r1, r9
 8006964:	eb43 0501 	adc.w	r5, r3, r1
 8006968:	f04f 0200 	mov.w	r2, #0
 800696c:	f04f 0300 	mov.w	r3, #0
 8006970:	00eb      	lsls	r3, r5, #3
 8006972:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006976:	00e2      	lsls	r2, r4, #3
 8006978:	4614      	mov	r4, r2
 800697a:	461d      	mov	r5, r3
 800697c:	4643      	mov	r3, r8
 800697e:	18e3      	adds	r3, r4, r3
 8006980:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006984:	464b      	mov	r3, r9
 8006986:	eb45 0303 	adc.w	r3, r5, r3
 800698a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800698e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800699a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800699e:	f04f 0200 	mov.w	r2, #0
 80069a2:	f04f 0300 	mov.w	r3, #0
 80069a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80069aa:	4629      	mov	r1, r5
 80069ac:	008b      	lsls	r3, r1, #2
 80069ae:	4621      	mov	r1, r4
 80069b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069b4:	4621      	mov	r1, r4
 80069b6:	008a      	lsls	r2, r1, #2
 80069b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80069bc:	f7fa f9f6 	bl	8000dac <__aeabi_uldivmod>
 80069c0:	4602      	mov	r2, r0
 80069c2:	460b      	mov	r3, r1
 80069c4:	4b60      	ldr	r3, [pc, #384]	; (8006b48 <UART_SetConfig+0x4e4>)
 80069c6:	fba3 2302 	umull	r2, r3, r3, r2
 80069ca:	095b      	lsrs	r3, r3, #5
 80069cc:	011c      	lsls	r4, r3, #4
 80069ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069d2:	2200      	movs	r2, #0
 80069d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80069d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80069dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80069e0:	4642      	mov	r2, r8
 80069e2:	464b      	mov	r3, r9
 80069e4:	1891      	adds	r1, r2, r2
 80069e6:	61b9      	str	r1, [r7, #24]
 80069e8:	415b      	adcs	r3, r3
 80069ea:	61fb      	str	r3, [r7, #28]
 80069ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80069f0:	4641      	mov	r1, r8
 80069f2:	1851      	adds	r1, r2, r1
 80069f4:	6139      	str	r1, [r7, #16]
 80069f6:	4649      	mov	r1, r9
 80069f8:	414b      	adcs	r3, r1
 80069fa:	617b      	str	r3, [r7, #20]
 80069fc:	f04f 0200 	mov.w	r2, #0
 8006a00:	f04f 0300 	mov.w	r3, #0
 8006a04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006a08:	4659      	mov	r1, fp
 8006a0a:	00cb      	lsls	r3, r1, #3
 8006a0c:	4651      	mov	r1, sl
 8006a0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a12:	4651      	mov	r1, sl
 8006a14:	00ca      	lsls	r2, r1, #3
 8006a16:	4610      	mov	r0, r2
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4603      	mov	r3, r0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	189b      	adds	r3, r3, r2
 8006a20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006a24:	464b      	mov	r3, r9
 8006a26:	460a      	mov	r2, r1
 8006a28:	eb42 0303 	adc.w	r3, r2, r3
 8006a2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	2200      	movs	r2, #0
 8006a38:	67bb      	str	r3, [r7, #120]	; 0x78
 8006a3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006a3c:	f04f 0200 	mov.w	r2, #0
 8006a40:	f04f 0300 	mov.w	r3, #0
 8006a44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006a48:	4649      	mov	r1, r9
 8006a4a:	008b      	lsls	r3, r1, #2
 8006a4c:	4641      	mov	r1, r8
 8006a4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006a52:	4641      	mov	r1, r8
 8006a54:	008a      	lsls	r2, r1, #2
 8006a56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006a5a:	f7fa f9a7 	bl	8000dac <__aeabi_uldivmod>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	460b      	mov	r3, r1
 8006a62:	4b39      	ldr	r3, [pc, #228]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006a64:	fba3 1302 	umull	r1, r3, r3, r2
 8006a68:	095b      	lsrs	r3, r3, #5
 8006a6a:	2164      	movs	r1, #100	; 0x64
 8006a6c:	fb01 f303 	mul.w	r3, r1, r3
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	011b      	lsls	r3, r3, #4
 8006a74:	3332      	adds	r3, #50	; 0x32
 8006a76:	4a34      	ldr	r2, [pc, #208]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006a78:	fba2 2303 	umull	r2, r3, r2, r3
 8006a7c:	095b      	lsrs	r3, r3, #5
 8006a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006a82:	441c      	add	r4, r3
 8006a84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a88:	2200      	movs	r2, #0
 8006a8a:	673b      	str	r3, [r7, #112]	; 0x70
 8006a8c:	677a      	str	r2, [r7, #116]	; 0x74
 8006a8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006a92:	4642      	mov	r2, r8
 8006a94:	464b      	mov	r3, r9
 8006a96:	1891      	adds	r1, r2, r2
 8006a98:	60b9      	str	r1, [r7, #8]
 8006a9a:	415b      	adcs	r3, r3
 8006a9c:	60fb      	str	r3, [r7, #12]
 8006a9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006aa2:	4641      	mov	r1, r8
 8006aa4:	1851      	adds	r1, r2, r1
 8006aa6:	6039      	str	r1, [r7, #0]
 8006aa8:	4649      	mov	r1, r9
 8006aaa:	414b      	adcs	r3, r1
 8006aac:	607b      	str	r3, [r7, #4]
 8006aae:	f04f 0200 	mov.w	r2, #0
 8006ab2:	f04f 0300 	mov.w	r3, #0
 8006ab6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006aba:	4659      	mov	r1, fp
 8006abc:	00cb      	lsls	r3, r1, #3
 8006abe:	4651      	mov	r1, sl
 8006ac0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ac4:	4651      	mov	r1, sl
 8006ac6:	00ca      	lsls	r2, r1, #3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	4619      	mov	r1, r3
 8006acc:	4603      	mov	r3, r0
 8006ace:	4642      	mov	r2, r8
 8006ad0:	189b      	adds	r3, r3, r2
 8006ad2:	66bb      	str	r3, [r7, #104]	; 0x68
 8006ad4:	464b      	mov	r3, r9
 8006ad6:	460a      	mov	r2, r1
 8006ad8:	eb42 0303 	adc.w	r3, r2, r3
 8006adc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ade:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	663b      	str	r3, [r7, #96]	; 0x60
 8006ae8:	667a      	str	r2, [r7, #100]	; 0x64
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006af6:	4649      	mov	r1, r9
 8006af8:	008b      	lsls	r3, r1, #2
 8006afa:	4641      	mov	r1, r8
 8006afc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b00:	4641      	mov	r1, r8
 8006b02:	008a      	lsls	r2, r1, #2
 8006b04:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006b08:	f7fa f950 	bl	8000dac <__aeabi_uldivmod>
 8006b0c:	4602      	mov	r2, r0
 8006b0e:	460b      	mov	r3, r1
 8006b10:	4b0d      	ldr	r3, [pc, #52]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006b12:	fba3 1302 	umull	r1, r3, r3, r2
 8006b16:	095b      	lsrs	r3, r3, #5
 8006b18:	2164      	movs	r1, #100	; 0x64
 8006b1a:	fb01 f303 	mul.w	r3, r1, r3
 8006b1e:	1ad3      	subs	r3, r2, r3
 8006b20:	011b      	lsls	r3, r3, #4
 8006b22:	3332      	adds	r3, #50	; 0x32
 8006b24:	4a08      	ldr	r2, [pc, #32]	; (8006b48 <UART_SetConfig+0x4e4>)
 8006b26:	fba2 2303 	umull	r2, r3, r2, r3
 8006b2a:	095b      	lsrs	r3, r3, #5
 8006b2c:	f003 020f 	and.w	r2, r3, #15
 8006b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	4422      	add	r2, r4
 8006b38:	609a      	str	r2, [r3, #8]
}
 8006b3a:	bf00      	nop
 8006b3c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006b40:	46bd      	mov	sp, r7
 8006b42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b46:	bf00      	nop
 8006b48:	51eb851f 	.word	0x51eb851f

08006b4c <__errno>:
 8006b4c:	4b01      	ldr	r3, [pc, #4]	; (8006b54 <__errno+0x8>)
 8006b4e:	6818      	ldr	r0, [r3, #0]
 8006b50:	4770      	bx	lr
 8006b52:	bf00      	nop
 8006b54:	20000024 	.word	0x20000024

08006b58 <__libc_init_array>:
 8006b58:	b570      	push	{r4, r5, r6, lr}
 8006b5a:	4d0d      	ldr	r5, [pc, #52]	; (8006b90 <__libc_init_array+0x38>)
 8006b5c:	4c0d      	ldr	r4, [pc, #52]	; (8006b94 <__libc_init_array+0x3c>)
 8006b5e:	1b64      	subs	r4, r4, r5
 8006b60:	10a4      	asrs	r4, r4, #2
 8006b62:	2600      	movs	r6, #0
 8006b64:	42a6      	cmp	r6, r4
 8006b66:	d109      	bne.n	8006b7c <__libc_init_array+0x24>
 8006b68:	4d0b      	ldr	r5, [pc, #44]	; (8006b98 <__libc_init_array+0x40>)
 8006b6a:	4c0c      	ldr	r4, [pc, #48]	; (8006b9c <__libc_init_array+0x44>)
 8006b6c:	f000 f920 	bl	8006db0 <_init>
 8006b70:	1b64      	subs	r4, r4, r5
 8006b72:	10a4      	asrs	r4, r4, #2
 8006b74:	2600      	movs	r6, #0
 8006b76:	42a6      	cmp	r6, r4
 8006b78:	d105      	bne.n	8006b86 <__libc_init_array+0x2e>
 8006b7a:	bd70      	pop	{r4, r5, r6, pc}
 8006b7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b80:	4798      	blx	r3
 8006b82:	3601      	adds	r6, #1
 8006b84:	e7ee      	b.n	8006b64 <__libc_init_array+0xc>
 8006b86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006b8a:	4798      	blx	r3
 8006b8c:	3601      	adds	r6, #1
 8006b8e:	e7f2      	b.n	8006b76 <__libc_init_array+0x1e>
 8006b90:	08006df0 	.word	0x08006df0
 8006b94:	08006df0 	.word	0x08006df0
 8006b98:	08006df0 	.word	0x08006df0
 8006b9c:	08006df4 	.word	0x08006df4

08006ba0 <memset>:
 8006ba0:	4402      	add	r2, r0
 8006ba2:	4603      	mov	r3, r0
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d100      	bne.n	8006baa <memset+0xa>
 8006ba8:	4770      	bx	lr
 8006baa:	f803 1b01 	strb.w	r1, [r3], #1
 8006bae:	e7f9      	b.n	8006ba4 <memset+0x4>

08006bb0 <sqrt>:
 8006bb0:	b538      	push	{r3, r4, r5, lr}
 8006bb2:	ed2d 8b02 	vpush	{d8}
 8006bb6:	ec55 4b10 	vmov	r4, r5, d0
 8006bba:	f000 f843 	bl	8006c44 <__ieee754_sqrt>
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	4620      	mov	r0, r4
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bca:	eef0 8a60 	vmov.f32	s17, s1
 8006bce:	f7f9 ff59 	bl	8000a84 <__aeabi_dcmpun>
 8006bd2:	b990      	cbnz	r0, 8006bfa <sqrt+0x4a>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	4620      	mov	r0, r4
 8006bda:	4629      	mov	r1, r5
 8006bdc:	f7f9 ff2a 	bl	8000a34 <__aeabi_dcmplt>
 8006be0:	b158      	cbz	r0, 8006bfa <sqrt+0x4a>
 8006be2:	f7ff ffb3 	bl	8006b4c <__errno>
 8006be6:	2321      	movs	r3, #33	; 0x21
 8006be8:	6003      	str	r3, [r0, #0]
 8006bea:	2200      	movs	r2, #0
 8006bec:	2300      	movs	r3, #0
 8006bee:	4610      	mov	r0, r2
 8006bf0:	4619      	mov	r1, r3
 8006bf2:	f7f9 fdd7 	bl	80007a4 <__aeabi_ddiv>
 8006bf6:	ec41 0b18 	vmov	d8, r0, r1
 8006bfa:	eeb0 0a48 	vmov.f32	s0, s16
 8006bfe:	eef0 0a68 	vmov.f32	s1, s17
 8006c02:	ecbd 8b02 	vpop	{d8}
 8006c06:	bd38      	pop	{r3, r4, r5, pc}

08006c08 <sqrtf>:
 8006c08:	b508      	push	{r3, lr}
 8006c0a:	ed2d 8b02 	vpush	{d8}
 8006c0e:	eeb0 8a40 	vmov.f32	s16, s0
 8006c12:	f000 f8c9 	bl	8006da8 <__ieee754_sqrtf>
 8006c16:	eeb4 8a48 	vcmp.f32	s16, s16
 8006c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c1e:	d60c      	bvs.n	8006c3a <sqrtf+0x32>
 8006c20:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006c40 <sqrtf+0x38>
 8006c24:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006c28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c2c:	d505      	bpl.n	8006c3a <sqrtf+0x32>
 8006c2e:	f7ff ff8d 	bl	8006b4c <__errno>
 8006c32:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006c36:	2321      	movs	r3, #33	; 0x21
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	ecbd 8b02 	vpop	{d8}
 8006c3e:	bd08      	pop	{r3, pc}
 8006c40:	00000000 	.word	0x00000000

08006c44 <__ieee754_sqrt>:
 8006c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c48:	ec55 4b10 	vmov	r4, r5, d0
 8006c4c:	4e55      	ldr	r6, [pc, #340]	; (8006da4 <__ieee754_sqrt+0x160>)
 8006c4e:	43ae      	bics	r6, r5
 8006c50:	ee10 0a10 	vmov	r0, s0
 8006c54:	ee10 3a10 	vmov	r3, s0
 8006c58:	462a      	mov	r2, r5
 8006c5a:	4629      	mov	r1, r5
 8006c5c:	d110      	bne.n	8006c80 <__ieee754_sqrt+0x3c>
 8006c5e:	ee10 2a10 	vmov	r2, s0
 8006c62:	462b      	mov	r3, r5
 8006c64:	f7f9 fc74 	bl	8000550 <__aeabi_dmul>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	460b      	mov	r3, r1
 8006c6c:	4620      	mov	r0, r4
 8006c6e:	4629      	mov	r1, r5
 8006c70:	f7f9 fab8 	bl	80001e4 <__adddf3>
 8006c74:	4604      	mov	r4, r0
 8006c76:	460d      	mov	r5, r1
 8006c78:	ec45 4b10 	vmov	d0, r4, r5
 8006c7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c80:	2d00      	cmp	r5, #0
 8006c82:	dc10      	bgt.n	8006ca6 <__ieee754_sqrt+0x62>
 8006c84:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006c88:	4330      	orrs	r0, r6
 8006c8a:	d0f5      	beq.n	8006c78 <__ieee754_sqrt+0x34>
 8006c8c:	b15d      	cbz	r5, 8006ca6 <__ieee754_sqrt+0x62>
 8006c8e:	ee10 2a10 	vmov	r2, s0
 8006c92:	462b      	mov	r3, r5
 8006c94:	ee10 0a10 	vmov	r0, s0
 8006c98:	f7f9 faa2 	bl	80001e0 <__aeabi_dsub>
 8006c9c:	4602      	mov	r2, r0
 8006c9e:	460b      	mov	r3, r1
 8006ca0:	f7f9 fd80 	bl	80007a4 <__aeabi_ddiv>
 8006ca4:	e7e6      	b.n	8006c74 <__ieee754_sqrt+0x30>
 8006ca6:	1512      	asrs	r2, r2, #20
 8006ca8:	d074      	beq.n	8006d94 <__ieee754_sqrt+0x150>
 8006caa:	07d4      	lsls	r4, r2, #31
 8006cac:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006cb0:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006cb4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006cb8:	bf5e      	ittt	pl
 8006cba:	0fda      	lsrpl	r2, r3, #31
 8006cbc:	005b      	lslpl	r3, r3, #1
 8006cbe:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006cc2:	2400      	movs	r4, #0
 8006cc4:	0fda      	lsrs	r2, r3, #31
 8006cc6:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006cca:	107f      	asrs	r7, r7, #1
 8006ccc:	005b      	lsls	r3, r3, #1
 8006cce:	2516      	movs	r5, #22
 8006cd0:	4620      	mov	r0, r4
 8006cd2:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006cd6:	1886      	adds	r6, r0, r2
 8006cd8:	428e      	cmp	r6, r1
 8006cda:	bfde      	ittt	le
 8006cdc:	1b89      	suble	r1, r1, r6
 8006cde:	18b0      	addle	r0, r6, r2
 8006ce0:	18a4      	addle	r4, r4, r2
 8006ce2:	0049      	lsls	r1, r1, #1
 8006ce4:	3d01      	subs	r5, #1
 8006ce6:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006cea:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006cee:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006cf2:	d1f0      	bne.n	8006cd6 <__ieee754_sqrt+0x92>
 8006cf4:	462a      	mov	r2, r5
 8006cf6:	f04f 0e20 	mov.w	lr, #32
 8006cfa:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006cfe:	4281      	cmp	r1, r0
 8006d00:	eb06 0c05 	add.w	ip, r6, r5
 8006d04:	dc02      	bgt.n	8006d0c <__ieee754_sqrt+0xc8>
 8006d06:	d113      	bne.n	8006d30 <__ieee754_sqrt+0xec>
 8006d08:	459c      	cmp	ip, r3
 8006d0a:	d811      	bhi.n	8006d30 <__ieee754_sqrt+0xec>
 8006d0c:	f1bc 0f00 	cmp.w	ip, #0
 8006d10:	eb0c 0506 	add.w	r5, ip, r6
 8006d14:	da43      	bge.n	8006d9e <__ieee754_sqrt+0x15a>
 8006d16:	2d00      	cmp	r5, #0
 8006d18:	db41      	blt.n	8006d9e <__ieee754_sqrt+0x15a>
 8006d1a:	f100 0801 	add.w	r8, r0, #1
 8006d1e:	1a09      	subs	r1, r1, r0
 8006d20:	459c      	cmp	ip, r3
 8006d22:	bf88      	it	hi
 8006d24:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006d28:	eba3 030c 	sub.w	r3, r3, ip
 8006d2c:	4432      	add	r2, r6
 8006d2e:	4640      	mov	r0, r8
 8006d30:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006d34:	f1be 0e01 	subs.w	lr, lr, #1
 8006d38:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006d3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006d40:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006d44:	d1db      	bne.n	8006cfe <__ieee754_sqrt+0xba>
 8006d46:	430b      	orrs	r3, r1
 8006d48:	d006      	beq.n	8006d58 <__ieee754_sqrt+0x114>
 8006d4a:	1c50      	adds	r0, r2, #1
 8006d4c:	bf13      	iteet	ne
 8006d4e:	3201      	addne	r2, #1
 8006d50:	3401      	addeq	r4, #1
 8006d52:	4672      	moveq	r2, lr
 8006d54:	f022 0201 	bicne.w	r2, r2, #1
 8006d58:	1063      	asrs	r3, r4, #1
 8006d5a:	0852      	lsrs	r2, r2, #1
 8006d5c:	07e1      	lsls	r1, r4, #31
 8006d5e:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006d62:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006d66:	bf48      	it	mi
 8006d68:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006d6c:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006d70:	4614      	mov	r4, r2
 8006d72:	e781      	b.n	8006c78 <__ieee754_sqrt+0x34>
 8006d74:	0ad9      	lsrs	r1, r3, #11
 8006d76:	3815      	subs	r0, #21
 8006d78:	055b      	lsls	r3, r3, #21
 8006d7a:	2900      	cmp	r1, #0
 8006d7c:	d0fa      	beq.n	8006d74 <__ieee754_sqrt+0x130>
 8006d7e:	02cd      	lsls	r5, r1, #11
 8006d80:	d50a      	bpl.n	8006d98 <__ieee754_sqrt+0x154>
 8006d82:	f1c2 0420 	rsb	r4, r2, #32
 8006d86:	fa23 f404 	lsr.w	r4, r3, r4
 8006d8a:	1e55      	subs	r5, r2, #1
 8006d8c:	4093      	lsls	r3, r2
 8006d8e:	4321      	orrs	r1, r4
 8006d90:	1b42      	subs	r2, r0, r5
 8006d92:	e78a      	b.n	8006caa <__ieee754_sqrt+0x66>
 8006d94:	4610      	mov	r0, r2
 8006d96:	e7f0      	b.n	8006d7a <__ieee754_sqrt+0x136>
 8006d98:	0049      	lsls	r1, r1, #1
 8006d9a:	3201      	adds	r2, #1
 8006d9c:	e7ef      	b.n	8006d7e <__ieee754_sqrt+0x13a>
 8006d9e:	4680      	mov	r8, r0
 8006da0:	e7bd      	b.n	8006d1e <__ieee754_sqrt+0xda>
 8006da2:	bf00      	nop
 8006da4:	7ff00000 	.word	0x7ff00000

08006da8 <__ieee754_sqrtf>:
 8006da8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006dac:	4770      	bx	lr
	...

08006db0 <_init>:
 8006db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006db2:	bf00      	nop
 8006db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006db6:	bc08      	pop	{r3}
 8006db8:	469e      	mov	lr, r3
 8006dba:	4770      	bx	lr

08006dbc <_fini>:
 8006dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dbe:	bf00      	nop
 8006dc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dc2:	bc08      	pop	{r3}
 8006dc4:	469e      	mov	lr, r3
 8006dc6:	4770      	bx	lr
