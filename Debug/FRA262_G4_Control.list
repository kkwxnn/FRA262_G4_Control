
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c074  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800c20c  0800c20c  0001c20c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c230  0800c230  000202b0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c230  0800c230  0001c230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c238  0800c238  000202b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c238  0800c238  0001c238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c23c  0800c23c  0001c23c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002b0  20000000  0800c240  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb4  200002b0  0800c4f0  000202b0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000e64  0800c4f0  00020e64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000202b0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014bc5  00000000  00000000  000202e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024e7  00000000  00000000  00034ea5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001130  00000000  00000000  00037390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001080  00000000  00000000  000384c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180f3  00000000  00000000  00039540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014b0e  00000000  00000000  00051633  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009daaa  00000000  00000000  00066141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00103beb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004dd4  00000000  00000000  00103c3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200002b0 	.word	0x200002b0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800c1f4 	.word	0x0800c1f4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200002b4 	.word	0x200002b4
 80001d4:	0800c1f4 	.word	0x0800c1f4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2uiz>:
 8000ab0:	004a      	lsls	r2, r1, #1
 8000ab2:	d211      	bcs.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d211      	bcs.n	8000ade <__aeabi_d2uiz+0x2e>
 8000aba:	d50d      	bpl.n	8000ad8 <__aeabi_d2uiz+0x28>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d40e      	bmi.n	8000ae4 <__aeabi_d2uiz+0x34>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ad6:	4770      	bx	lr
 8000ad8:	f04f 0000 	mov.w	r0, #0
 8000adc:	4770      	bx	lr
 8000ade:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ae2:	d102      	bne.n	8000aea <__aeabi_d2uiz+0x3a>
 8000ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ae8:	4770      	bx	lr
 8000aea:	f04f 0000 	mov.w	r0, #0
 8000aee:	4770      	bx	lr

08000af0 <__aeabi_d2f>:
 8000af0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000af4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000af8:	bf24      	itt	cs
 8000afa:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000afe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b02:	d90d      	bls.n	8000b20 <__aeabi_d2f+0x30>
 8000b04:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b08:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b0c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b10:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b14:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b24:	d121      	bne.n	8000b6a <__aeabi_d2f+0x7a>
 8000b26:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b2a:	bfbc      	itt	lt
 8000b2c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b30:	4770      	bxlt	lr
 8000b32:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b36:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b3a:	f1c2 0218 	rsb	r2, r2, #24
 8000b3e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b42:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b46:	fa20 f002 	lsr.w	r0, r0, r2
 8000b4a:	bf18      	it	ne
 8000b4c:	f040 0001 	orrne.w	r0, r0, #1
 8000b50:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b54:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b58:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b5c:	ea40 000c 	orr.w	r0, r0, ip
 8000b60:	fa23 f302 	lsr.w	r3, r3, r2
 8000b64:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b68:	e7cc      	b.n	8000b04 <__aeabi_d2f+0x14>
 8000b6a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b6e:	d107      	bne.n	8000b80 <__aeabi_d2f+0x90>
 8000b70:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b74:	bf1e      	ittt	ne
 8000b76:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b7a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b7e:	4770      	bxne	lr
 8000b80:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b84:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b88:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b8c:	4770      	bx	lr
 8000b8e:	bf00      	nop

08000b90 <__aeabi_uldivmod>:
 8000b90:	b953      	cbnz	r3, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b92:	b94a      	cbnz	r2, 8000ba8 <__aeabi_uldivmod+0x18>
 8000b94:	2900      	cmp	r1, #0
 8000b96:	bf08      	it	eq
 8000b98:	2800      	cmpeq	r0, #0
 8000b9a:	bf1c      	itt	ne
 8000b9c:	f04f 31ff 	movne.w	r1, #4294967295
 8000ba0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ba4:	f000 b974 	b.w	8000e90 <__aeabi_idiv0>
 8000ba8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bb0:	f000 f806 	bl	8000bc0 <__udivmoddi4>
 8000bb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bb8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bbc:	b004      	add	sp, #16
 8000bbe:	4770      	bx	lr

08000bc0 <__udivmoddi4>:
 8000bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bc4:	9d08      	ldr	r5, [sp, #32]
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	468e      	mov	lr, r1
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d14d      	bne.n	8000c6a <__udivmoddi4+0xaa>
 8000bce:	428a      	cmp	r2, r1
 8000bd0:	4694      	mov	ip, r2
 8000bd2:	d969      	bls.n	8000ca8 <__udivmoddi4+0xe8>
 8000bd4:	fab2 f282 	clz	r2, r2
 8000bd8:	b152      	cbz	r2, 8000bf0 <__udivmoddi4+0x30>
 8000bda:	fa01 f302 	lsl.w	r3, r1, r2
 8000bde:	f1c2 0120 	rsb	r1, r2, #32
 8000be2:	fa20 f101 	lsr.w	r1, r0, r1
 8000be6:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bea:	ea41 0e03 	orr.w	lr, r1, r3
 8000bee:	4094      	lsls	r4, r2
 8000bf0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bf4:	0c21      	lsrs	r1, r4, #16
 8000bf6:	fbbe f6f8 	udiv	r6, lr, r8
 8000bfa:	fa1f f78c 	uxth.w	r7, ip
 8000bfe:	fb08 e316 	mls	r3, r8, r6, lr
 8000c02:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c06:	fb06 f107 	mul.w	r1, r6, r7
 8000c0a:	4299      	cmp	r1, r3
 8000c0c:	d90a      	bls.n	8000c24 <__udivmoddi4+0x64>
 8000c0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c12:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c16:	f080 811f 	bcs.w	8000e58 <__udivmoddi4+0x298>
 8000c1a:	4299      	cmp	r1, r3
 8000c1c:	f240 811c 	bls.w	8000e58 <__udivmoddi4+0x298>
 8000c20:	3e02      	subs	r6, #2
 8000c22:	4463      	add	r3, ip
 8000c24:	1a5b      	subs	r3, r3, r1
 8000c26:	b2a4      	uxth	r4, r4
 8000c28:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c2c:	fb08 3310 	mls	r3, r8, r0, r3
 8000c30:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c34:	fb00 f707 	mul.w	r7, r0, r7
 8000c38:	42a7      	cmp	r7, r4
 8000c3a:	d90a      	bls.n	8000c52 <__udivmoddi4+0x92>
 8000c3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000c40:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c44:	f080 810a 	bcs.w	8000e5c <__udivmoddi4+0x29c>
 8000c48:	42a7      	cmp	r7, r4
 8000c4a:	f240 8107 	bls.w	8000e5c <__udivmoddi4+0x29c>
 8000c4e:	4464      	add	r4, ip
 8000c50:	3802      	subs	r0, #2
 8000c52:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c56:	1be4      	subs	r4, r4, r7
 8000c58:	2600      	movs	r6, #0
 8000c5a:	b11d      	cbz	r5, 8000c64 <__udivmoddi4+0xa4>
 8000c5c:	40d4      	lsrs	r4, r2
 8000c5e:	2300      	movs	r3, #0
 8000c60:	e9c5 4300 	strd	r4, r3, [r5]
 8000c64:	4631      	mov	r1, r6
 8000c66:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c6a:	428b      	cmp	r3, r1
 8000c6c:	d909      	bls.n	8000c82 <__udivmoddi4+0xc2>
 8000c6e:	2d00      	cmp	r5, #0
 8000c70:	f000 80ef 	beq.w	8000e52 <__udivmoddi4+0x292>
 8000c74:	2600      	movs	r6, #0
 8000c76:	e9c5 0100 	strd	r0, r1, [r5]
 8000c7a:	4630      	mov	r0, r6
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	fab3 f683 	clz	r6, r3
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	d14a      	bne.n	8000d20 <__udivmoddi4+0x160>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d302      	bcc.n	8000c94 <__udivmoddi4+0xd4>
 8000c8e:	4282      	cmp	r2, r0
 8000c90:	f200 80f9 	bhi.w	8000e86 <__udivmoddi4+0x2c6>
 8000c94:	1a84      	subs	r4, r0, r2
 8000c96:	eb61 0303 	sbc.w	r3, r1, r3
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	469e      	mov	lr, r3
 8000c9e:	2d00      	cmp	r5, #0
 8000ca0:	d0e0      	beq.n	8000c64 <__udivmoddi4+0xa4>
 8000ca2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ca6:	e7dd      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000ca8:	b902      	cbnz	r2, 8000cac <__udivmoddi4+0xec>
 8000caa:	deff      	udf	#255	; 0xff
 8000cac:	fab2 f282 	clz	r2, r2
 8000cb0:	2a00      	cmp	r2, #0
 8000cb2:	f040 8092 	bne.w	8000dda <__udivmoddi4+0x21a>
 8000cb6:	eba1 010c 	sub.w	r1, r1, ip
 8000cba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cbe:	fa1f fe8c 	uxth.w	lr, ip
 8000cc2:	2601      	movs	r6, #1
 8000cc4:	0c20      	lsrs	r0, r4, #16
 8000cc6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cca:	fb07 1113 	mls	r1, r7, r3, r1
 8000cce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cd2:	fb0e f003 	mul.w	r0, lr, r3
 8000cd6:	4288      	cmp	r0, r1
 8000cd8:	d908      	bls.n	8000cec <__udivmoddi4+0x12c>
 8000cda:	eb1c 0101 	adds.w	r1, ip, r1
 8000cde:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ce2:	d202      	bcs.n	8000cea <__udivmoddi4+0x12a>
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	f200 80cb 	bhi.w	8000e80 <__udivmoddi4+0x2c0>
 8000cea:	4643      	mov	r3, r8
 8000cec:	1a09      	subs	r1, r1, r0
 8000cee:	b2a4      	uxth	r4, r4
 8000cf0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf4:	fb07 1110 	mls	r1, r7, r0, r1
 8000cf8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cfc:	fb0e fe00 	mul.w	lr, lr, r0
 8000d00:	45a6      	cmp	lr, r4
 8000d02:	d908      	bls.n	8000d16 <__udivmoddi4+0x156>
 8000d04:	eb1c 0404 	adds.w	r4, ip, r4
 8000d08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x154>
 8000d0e:	45a6      	cmp	lr, r4
 8000d10:	f200 80bb 	bhi.w	8000e8a <__udivmoddi4+0x2ca>
 8000d14:	4608      	mov	r0, r1
 8000d16:	eba4 040e 	sub.w	r4, r4, lr
 8000d1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d1e:	e79c      	b.n	8000c5a <__udivmoddi4+0x9a>
 8000d20:	f1c6 0720 	rsb	r7, r6, #32
 8000d24:	40b3      	lsls	r3, r6
 8000d26:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d2a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d2e:	fa20 f407 	lsr.w	r4, r0, r7
 8000d32:	fa01 f306 	lsl.w	r3, r1, r6
 8000d36:	431c      	orrs	r4, r3
 8000d38:	40f9      	lsrs	r1, r7
 8000d3a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d3e:	fa00 f306 	lsl.w	r3, r0, r6
 8000d42:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d46:	0c20      	lsrs	r0, r4, #16
 8000d48:	fa1f fe8c 	uxth.w	lr, ip
 8000d4c:	fb09 1118 	mls	r1, r9, r8, r1
 8000d50:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d54:	fb08 f00e 	mul.w	r0, r8, lr
 8000d58:	4288      	cmp	r0, r1
 8000d5a:	fa02 f206 	lsl.w	r2, r2, r6
 8000d5e:	d90b      	bls.n	8000d78 <__udivmoddi4+0x1b8>
 8000d60:	eb1c 0101 	adds.w	r1, ip, r1
 8000d64:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d68:	f080 8088 	bcs.w	8000e7c <__udivmoddi4+0x2bc>
 8000d6c:	4288      	cmp	r0, r1
 8000d6e:	f240 8085 	bls.w	8000e7c <__udivmoddi4+0x2bc>
 8000d72:	f1a8 0802 	sub.w	r8, r8, #2
 8000d76:	4461      	add	r1, ip
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d80:	fb09 1110 	mls	r1, r9, r0, r1
 8000d84:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d88:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d8c:	458e      	cmp	lr, r1
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x1e2>
 8000d90:	eb1c 0101 	adds.w	r1, ip, r1
 8000d94:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d98:	d26c      	bcs.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9a:	458e      	cmp	lr, r1
 8000d9c:	d96a      	bls.n	8000e74 <__udivmoddi4+0x2b4>
 8000d9e:	3802      	subs	r0, #2
 8000da0:	4461      	add	r1, ip
 8000da2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000da6:	fba0 9402 	umull	r9, r4, r0, r2
 8000daa:	eba1 010e 	sub.w	r1, r1, lr
 8000dae:	42a1      	cmp	r1, r4
 8000db0:	46c8      	mov	r8, r9
 8000db2:	46a6      	mov	lr, r4
 8000db4:	d356      	bcc.n	8000e64 <__udivmoddi4+0x2a4>
 8000db6:	d053      	beq.n	8000e60 <__udivmoddi4+0x2a0>
 8000db8:	b15d      	cbz	r5, 8000dd2 <__udivmoddi4+0x212>
 8000dba:	ebb3 0208 	subs.w	r2, r3, r8
 8000dbe:	eb61 010e 	sbc.w	r1, r1, lr
 8000dc2:	fa01 f707 	lsl.w	r7, r1, r7
 8000dc6:	fa22 f306 	lsr.w	r3, r2, r6
 8000dca:	40f1      	lsrs	r1, r6
 8000dcc:	431f      	orrs	r7, r3
 8000dce:	e9c5 7100 	strd	r7, r1, [r5]
 8000dd2:	2600      	movs	r6, #0
 8000dd4:	4631      	mov	r1, r6
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	f1c2 0320 	rsb	r3, r2, #32
 8000dde:	40d8      	lsrs	r0, r3
 8000de0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de4:	fa21 f303 	lsr.w	r3, r1, r3
 8000de8:	4091      	lsls	r1, r2
 8000dea:	4301      	orrs	r1, r0
 8000dec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000df0:	fa1f fe8c 	uxth.w	lr, ip
 8000df4:	fbb3 f0f7 	udiv	r0, r3, r7
 8000df8:	fb07 3610 	mls	r6, r7, r0, r3
 8000dfc:	0c0b      	lsrs	r3, r1, #16
 8000dfe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e02:	fb00 f60e 	mul.w	r6, r0, lr
 8000e06:	429e      	cmp	r6, r3
 8000e08:	fa04 f402 	lsl.w	r4, r4, r2
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0x260>
 8000e0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e12:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e16:	d22f      	bcs.n	8000e78 <__udivmoddi4+0x2b8>
 8000e18:	429e      	cmp	r6, r3
 8000e1a:	d92d      	bls.n	8000e78 <__udivmoddi4+0x2b8>
 8000e1c:	3802      	subs	r0, #2
 8000e1e:	4463      	add	r3, ip
 8000e20:	1b9b      	subs	r3, r3, r6
 8000e22:	b289      	uxth	r1, r1
 8000e24:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e28:	fb07 3316 	mls	r3, r7, r6, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb06 f30e 	mul.w	r3, r6, lr
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d908      	bls.n	8000e4a <__udivmoddi4+0x28a>
 8000e38:	eb1c 0101 	adds.w	r1, ip, r1
 8000e3c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e40:	d216      	bcs.n	8000e70 <__udivmoddi4+0x2b0>
 8000e42:	428b      	cmp	r3, r1
 8000e44:	d914      	bls.n	8000e70 <__udivmoddi4+0x2b0>
 8000e46:	3e02      	subs	r6, #2
 8000e48:	4461      	add	r1, ip
 8000e4a:	1ac9      	subs	r1, r1, r3
 8000e4c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e50:	e738      	b.n	8000cc4 <__udivmoddi4+0x104>
 8000e52:	462e      	mov	r6, r5
 8000e54:	4628      	mov	r0, r5
 8000e56:	e705      	b.n	8000c64 <__udivmoddi4+0xa4>
 8000e58:	4606      	mov	r6, r0
 8000e5a:	e6e3      	b.n	8000c24 <__udivmoddi4+0x64>
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	e6f8      	b.n	8000c52 <__udivmoddi4+0x92>
 8000e60:	454b      	cmp	r3, r9
 8000e62:	d2a9      	bcs.n	8000db8 <__udivmoddi4+0x1f8>
 8000e64:	ebb9 0802 	subs.w	r8, r9, r2
 8000e68:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e6c:	3801      	subs	r0, #1
 8000e6e:	e7a3      	b.n	8000db8 <__udivmoddi4+0x1f8>
 8000e70:	4646      	mov	r6, r8
 8000e72:	e7ea      	b.n	8000e4a <__udivmoddi4+0x28a>
 8000e74:	4620      	mov	r0, r4
 8000e76:	e794      	b.n	8000da2 <__udivmoddi4+0x1e2>
 8000e78:	4640      	mov	r0, r8
 8000e7a:	e7d1      	b.n	8000e20 <__udivmoddi4+0x260>
 8000e7c:	46d0      	mov	r8, sl
 8000e7e:	e77b      	b.n	8000d78 <__udivmoddi4+0x1b8>
 8000e80:	3b02      	subs	r3, #2
 8000e82:	4461      	add	r1, ip
 8000e84:	e732      	b.n	8000cec <__udivmoddi4+0x12c>
 8000e86:	4630      	mov	r0, r6
 8000e88:	e709      	b.n	8000c9e <__udivmoddi4+0xde>
 8000e8a:	4464      	add	r4, ip
 8000e8c:	3802      	subs	r0, #2
 8000e8e:	e742      	b.n	8000d16 <__udivmoddi4+0x156>

08000e90 <__aeabi_idiv0>:
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop

08000e94 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <modbus_1t5_Timeout+0x1c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	751a      	strb	r2, [r3, #20]
}
 8000ea4:	bf00      	nop
 8000ea6:	370c      	adds	r7, #12
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	200002cc 	.word	0x200002cc

08000eb4 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	b083      	sub	sp, #12
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <modbus_3t5_Timeout+0x1c>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	755a      	strb	r2, [r3, #21]
}
 8000ec4:	bf00      	nop
 8000ec6:	370c      	adds	r7, #12
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	200002cc 	.word	0x200002cc

08000ed4 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
 8000edc:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8000ede:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 8000ee6:	4b13      	ldr	r3, [pc, #76]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000ee8:	681a      	ldr	r2, [r3, #0]
 8000eea:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8000eee:	1c59      	adds	r1, r3, #1
 8000ef0:	b289      	uxth	r1, r1
 8000ef2:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 8000ef6:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000efa:	d210      	bcs.n	8000f1e <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000efc:	4b0d      	ldr	r3, [pc, #52]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	68d8      	ldr	r0, [r3, #12]
 8000f02:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f0e:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f12:	4413      	add	r3, r2
 8000f14:	3302      	adds	r3, #2
 8000f16:	2201      	movs	r2, #1
 8000f18:	4619      	mov	r1, r3
 8000f1a:	f009 fd81 	bl	800aa20 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8000f1e:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <modbus_UART_Recived+0x60>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	691b      	ldr	r3, [r3, #16]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	; 0x24

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200002cc 	.word	0x200002cc

08000f38 <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b082      	sub	sp, #8
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
 8000f40:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 8000f42:	4a24      	ldr	r2, [pc, #144]	; (8000fd4 <Modbus_init+0x9c>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 8000f48:	4b22      	ldr	r3, [pc, #136]	; (8000fd4 <Modbus_init+0x9c>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	683a      	ldr	r2, [r7, #0]
 8000f4e:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 8000f50:	4b20      	ldr	r3, [pc, #128]	; (8000fd4 <Modbus_init+0x9c>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	691b      	ldr	r3, [r3, #16]
 8000f56:	4a20      	ldr	r2, [pc, #128]	; (8000fd8 <Modbus_init+0xa0>)
 8000f58:	2114      	movs	r1, #20
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f008 ffac 	bl	8009eb8 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <Modbus_init+0x9c>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	691b      	ldr	r3, [r3, #16]
 8000f66:	4a1d      	ldr	r2, [pc, #116]	; (8000fdc <Modbus_init+0xa4>)
 8000f68:	210e      	movs	r1, #14
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f008 ffa4 	bl	8009eb8 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 8000f70:	4b18      	ldr	r3, [pc, #96]	; (8000fd4 <Modbus_init+0x9c>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	4a1a      	ldr	r2, [pc, #104]	; (8000fe0 <Modbus_init+0xa8>)
 8000f78:	2103      	movs	r1, #3
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f009 fca8 	bl	800a8d0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8000f80:	4b14      	ldr	r3, [pc, #80]	; (8000fd4 <Modbus_init+0x9c>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	68d8      	ldr	r0, [r3, #12]
 8000f86:	4b13      	ldr	r3, [pc, #76]	; (8000fd4 <Modbus_init+0x9c>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	4b12      	ldr	r3, [pc, #72]	; (8000fd4 <Modbus_init+0x9c>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8000f92:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8000f96:	4413      	add	r3, r2
 8000f98:	3302      	adds	r3, #2
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f009 fd3f 	bl	800aa20 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8000fa2:	4b0c      	ldr	r3, [pc, #48]	; (8000fd4 <Modbus_init+0x9c>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	691b      	ldr	r3, [r3, #16]
 8000fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000fac:	b2db      	uxtb	r3, r3
 8000fae:	2b01      	cmp	r3, #1
 8000fb0:	d10c      	bne.n	8000fcc <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <Modbus_init+0x9c>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	691b      	ldr	r3, [r3, #16]
 8000fb8:	4618      	mov	r0, r3
 8000fba:	f008 f8ef 	bl	800919c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <Modbus_init+0x9c>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	691b      	ldr	r3, [r3, #16]
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f008 fb24 	bl	8009614 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	200002cc 	.word	0x200002cc
 8000fd8:	08000e95 	.word	0x08000e95
 8000fdc:	08000eb5 	.word	0x08000eb5
 8000fe0:	08000ed5 	.word	0x08000ed5

08000fe4 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8000ff0:	23ff      	movs	r3, #255	; 0xff
 8000ff2:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8000ff4:	23ff      	movs	r3, #255	; 0xff
 8000ff6:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 8000ff8:	e013      	b.n	8001022 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	1c5a      	adds	r2, r3, #1
 8000ffe:	607a      	str	r2, [r7, #4]
 8001000:	781a      	ldrb	r2, [r3, #0]
 8001002:	7bbb      	ldrb	r3, [r7, #14]
 8001004:	4053      	eors	r3, r2
 8001006:	b2db      	uxtb	r3, r3
 8001008:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800100a:	4a0f      	ldr	r2, [pc, #60]	; (8001048 <CRC16+0x64>)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4413      	add	r3, r2
 8001010:	781a      	ldrb	r2, [r3, #0]
 8001012:	7bfb      	ldrb	r3, [r7, #15]
 8001014:	4053      	eors	r3, r2
 8001016:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 8001018:	4a0c      	ldr	r2, [pc, #48]	; (800104c <CRC16+0x68>)
 800101a:	68bb      	ldr	r3, [r7, #8]
 800101c:	4413      	add	r3, r2
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001022:	883b      	ldrh	r3, [r7, #0]
 8001024:	1e5a      	subs	r2, r3, #1
 8001026:	803a      	strh	r2, [r7, #0]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d1e6      	bne.n	8000ffa <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 800102c:	7bfb      	ldrb	r3, [r7, #15]
 800102e:	021b      	lsls	r3, r3, #8
 8001030:	b21a      	sxth	r2, r3
 8001032:	7bbb      	ldrb	r3, [r7, #14]
 8001034:	b21b      	sxth	r3, r3
 8001036:	4313      	orrs	r3, r2
 8001038:	b21b      	sxth	r3, r3
 800103a:	b29b      	uxth	r3, r3
}
 800103c:	4618      	mov	r0, r3
 800103e:	3714      	adds	r7, #20
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	20000100 	.word	0x20000100
 800104c:	20000000 	.word	0x20000000

08001050 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 8001056:	4b81      	ldr	r3, [pc, #516]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	7e1b      	ldrb	r3, [r3, #24]
 800105c:	3b01      	subs	r3, #1
 800105e:	2b03      	cmp	r3, #3
 8001060:	d80a      	bhi.n	8001078 <Modbus_Protocal_Worker+0x28>
 8001062:	a201      	add	r2, pc, #4	; (adr r2, 8001068 <Modbus_Protocal_Worker+0x18>)
 8001064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001068:	08001083 	.word	0x08001083
 800106c:	08001223 	.word	0x08001223
 8001070:	0800110f 	.word	0x0800110f
 8001074:	08001135 	.word	0x08001135
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 8001078:	4b78      	ldr	r3, [pc, #480]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2201      	movs	r2, #1
 800107e:	761a      	strb	r2, [r3, #24]
		break;
 8001080:	e0e8      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 8001082:	4b76      	ldr	r3, [pc, #472]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800108a:	2b00      	cmp	r3, #0
 800108c:	d002      	beq.n	8001094 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 800108e:	f000 f9d7 	bl	8001440 <Modbus_Emission>
 8001092:	e01c      	b.n	80010ce <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001094:	4b71      	ldr	r3, [pc, #452]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	7d9b      	ldrb	r3, [r3, #22]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d017      	beq.n	80010ce <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 800109e:	4b6f      	ldr	r3, [pc, #444]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	2200      	movs	r2, #0
 80010a4:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 80010a6:	4b6d      	ldr	r3, [pc, #436]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2200      	movs	r2, #0
 80010ac:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 80010ae:	4b6b      	ldr	r3, [pc, #428]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	691b      	ldr	r3, [r3, #16]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	681a      	ldr	r2, [r3, #0]
 80010b8:	4b68      	ldr	r3, [pc, #416]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f042 0201 	orr.w	r2, r2, #1
 80010c4:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 80010c6:	4b65      	ldr	r3, [pc, #404]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2203      	movs	r2, #3
 80010cc:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 80010ce:	4b63      	ldr	r3, [pc, #396]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80010d8:	b2db      	uxtb	r3, r3
 80010da:	2b20      	cmp	r3, #32
 80010dc:	f040 80b3 	bne.w	8001246 <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 80010e0:	4b5e      	ldr	r3, [pc, #376]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010ea:	4b5c      	ldr	r3, [pc, #368]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	68d8      	ldr	r0, [r3, #12]
 80010f0:	4b5a      	ldr	r3, [pc, #360]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010f2:	681a      	ldr	r2, [r3, #0]
 80010f4:	4b59      	ldr	r3, [pc, #356]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80010fc:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001100:	4413      	add	r3, r2
 8001102:	3302      	adds	r3, #2
 8001104:	2201      	movs	r2, #1
 8001106:	4619      	mov	r1, r3
 8001108:	f009 fc8a 	bl	800aa20 <HAL_UART_Receive_IT>
		}
		break;
 800110c:	e09b      	b.n	8001246 <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 800110e:	4b53      	ldr	r3, [pc, #332]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	7d1b      	ldrb	r3, [r3, #20]
 8001114:	2b00      	cmp	r3, #0
 8001116:	f000 8098 	beq.w	800124a <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800111a:	4b50      	ldr	r3, [pc, #320]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	2200      	movs	r2, #0
 8001120:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001122:	4b4e      	ldr	r3, [pc, #312]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	22fe      	movs	r2, #254	; 0xfe
 8001128:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800112a:	4b4c      	ldr	r3, [pc, #304]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2204      	movs	r2, #4
 8001130:	761a      	strb	r2, [r3, #24]
		}
		break;
 8001132:	e08a      	b.n	800124a <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 8001134:	4b49      	ldr	r3, [pc, #292]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	7d9b      	ldrb	r3, [r3, #22]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d009      	beq.n	8001152 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 800113e:	4b47      	ldr	r3, [pc, #284]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f993 3017 	ldrsb.w	r3, [r3, #23]
 8001146:	2b00      	cmp	r3, #0
 8001148:	d103      	bne.n	8001152 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800114a:	4b44      	ldr	r3, [pc, #272]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	22ff      	movs	r2, #255	; 0xff
 8001150:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 8001152:	4b42      	ldr	r3, [pc, #264]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f993 3017 	ldrsb.w	r3, [r3, #23]
 800115a:	f113 0f02 	cmn.w	r3, #2
 800115e:	d150      	bne.n	8001202 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 8001160:	4b3e      	ldr	r3, [pc, #248]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2200      	movs	r2, #0
 8001166:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 8001168:	4b3c      	ldr	r3, [pc, #240]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f203 2272 	addw	r2, r3, #626	; 0x272
 8001170:	4b3a      	ldr	r3, [pc, #232]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001178:	3b02      	subs	r3, #2
 800117a:	4619      	mov	r1, r3
 800117c:	4610      	mov	r0, r2
 800117e:	f7ff ff31 	bl	8000fe4 <CRC16>
 8001182:	4603      	mov	r3, r0
 8001184:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 8001186:	793a      	ldrb	r2, [r7, #4]
 8001188:	4b34      	ldr	r3, [pc, #208]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800118a:	6819      	ldr	r1, [r3, #0]
 800118c:	4b33      	ldr	r3, [pc, #204]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001194:	3b02      	subs	r3, #2
 8001196:	440b      	add	r3, r1
 8001198:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 800119c:	429a      	cmp	r2, r3
 800119e:	d10c      	bne.n	80011ba <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 80011a0:	797a      	ldrb	r2, [r7, #5]
 80011a2:	4b2e      	ldr	r3, [pc, #184]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011a4:	6819      	ldr	r1, [r3, #0]
 80011a6:	4b2d      	ldr	r3, [pc, #180]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011ae:	3b01      	subs	r3, #1
 80011b0:	440b      	add	r3, r1
 80011b2:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80011b6:	429a      	cmp	r2, r3
 80011b8:	d004      	beq.n	80011c4 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80011ba:	4b28      	ldr	r3, [pc, #160]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	22ff      	movs	r2, #255	; 0xff
 80011c0:	75da      	strb	r2, [r3, #23]
				break;
 80011c2:	e047      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 80011c4:	4b25      	ldr	r3, [pc, #148]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 80011cc:	4b23      	ldr	r3, [pc, #140]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	429a      	cmp	r2, r3
 80011d4:	d113      	bne.n	80011fe <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 80011de:	4b1f      	ldr	r3, [pc, #124]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 80011e6:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 80011e8:	4b1c      	ldr	r3, [pc, #112]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80011f0:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 80011f2:	461a      	mov	r2, r3
 80011f4:	f00a fdd6 	bl	800bda4 <memcpy>

			//execute command
			Modbus_frame_response();
 80011f8:	f000 f90a 	bl	8001410 <Modbus_frame_response>
 80011fc:	e001      	b.n	8001202 <Modbus_Protocal_Worker+0x1b2>
				break;
 80011fe:	bf00      	nop
					}
		break;


	}
}
 8001200:	e028      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001202:	4b16      	ldr	r3, [pc, #88]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	7d5b      	ldrb	r3, [r3, #21]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d020      	beq.n	800124e <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 800120c:	4b13      	ldr	r3, [pc, #76]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	2201      	movs	r2, #1
 8001212:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001214:	4b11      	ldr	r3, [pc, #68]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	4618      	mov	r0, r3
 800121c:	f009 fcae 	bl	800ab7c <HAL_UART_AbortReceive>
		break;
 8001220:	e015      	b.n	800124e <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	68db      	ldr	r3, [r3, #12]
 8001228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800122c:	b2db      	uxtb	r3, r3
 800122e:	2b20      	cmp	r3, #32
 8001230:	d10f      	bne.n	8001252 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 8001232:	4b0a      	ldr	r3, [pc, #40]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 800123c:	4b07      	ldr	r3, [pc, #28]	; (800125c <Modbus_Protocal_Worker+0x20c>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	2201      	movs	r2, #1
 8001242:	761a      	strb	r2, [r3, #24]
		break;
 8001244:	e005      	b.n	8001252 <Modbus_Protocal_Worker+0x202>
		break;
 8001246:	bf00      	nop
 8001248:	e004      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
		break;
 800124a:	bf00      	nop
 800124c:	e002      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
		break;
 800124e:	bf00      	nop
 8001250:	e000      	b.n	8001254 <Modbus_Protocal_Worker+0x204>
		break;
 8001252:	bf00      	nop
}
 8001254:	bf00      	nop
 8001256:	3708      	adds	r7, #8
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	200002cc 	.word	0x200002cc

08001260 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <modbusWrite1Register+0x80>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	7e9b      	ldrb	r3, [r3, #26]
 800126c:	b29b      	uxth	r3, r3
 800126e:	021b      	lsls	r3, r3, #8
 8001270:	b29a      	uxth	r2, r3
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <modbusWrite1Register+0x80>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	7edb      	ldrb	r3, [r3, #27]
 8001278:	b29b      	uxth	r3, r3
 800127a:	4413      	add	r3, r2
 800127c:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 800127e:	88fa      	ldrh	r2, [r7, #6]
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <modbusWrite1Register+0x80>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	429a      	cmp	r2, r3
 8001288:	d903      	bls.n	8001292 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800128a:	2002      	movs	r0, #2
 800128c:	f000 f8a4 	bl	80013d8 <ModbusErrorReply>
			 return;
 8001290:	e023      	b.n	80012da <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <modbusWrite1Register+0x80>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <modbusWrite1Register+0x80>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	6859      	ldr	r1, [r3, #4]
 800129c:	88fb      	ldrh	r3, [r7, #6]
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	440b      	add	r3, r1
 80012a2:	7f12      	ldrb	r2, [r2, #28]
 80012a4:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 80012a6:	4b0e      	ldr	r3, [pc, #56]	; (80012e0 <modbusWrite1Register+0x80>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	4b0d      	ldr	r3, [pc, #52]	; (80012e0 <modbusWrite1Register+0x80>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	6859      	ldr	r1, [r3, #4]
 80012b0:	88fb      	ldrh	r3, [r7, #6]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	440b      	add	r3, r1
 80012b6:	7f52      	ldrb	r2, [r2, #29]
 80012b8:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 80012ba:	4b09      	ldr	r3, [pc, #36]	; (80012e0 <modbusWrite1Register+0x80>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 80012c2:	4b07      	ldr	r3, [pc, #28]	; (80012e0 <modbusWrite1Register+0x80>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 80012c8:	2208      	movs	r2, #8
 80012ca:	4619      	mov	r1, r3
 80012cc:	f00a fd6a 	bl	800bda4 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 80012d0:	4b03      	ldr	r3, [pc, #12]	; (80012e0 <modbusWrite1Register+0x80>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	2205      	movs	r2, #5
 80012d6:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 80012da:	3708      	adds	r7, #8
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	200002cc 	.word	0x200002cc

080012e4 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 80012ea:	4b3a      	ldr	r3, [pc, #232]	; (80013d4 <modbusRead1Register+0xf0>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	7f1b      	ldrb	r3, [r3, #28]
 80012f0:	b29b      	uxth	r3, r3
 80012f2:	021b      	lsls	r3, r3, #8
 80012f4:	b29a      	uxth	r2, r3
 80012f6:	4b37      	ldr	r3, [pc, #220]	; (80013d4 <modbusRead1Register+0xf0>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	7f5b      	ldrb	r3, [r3, #29]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <modbusRead1Register+0xf0>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	7e9b      	ldrb	r3, [r3, #26]
 8001308:	b29b      	uxth	r3, r3
 800130a:	021b      	lsls	r3, r3, #8
 800130c:	b29a      	uxth	r2, r3
 800130e:	4b31      	ldr	r3, [pc, #196]	; (80013d4 <modbusRead1Register+0xf0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	7edb      	ldrb	r3, [r3, #27]
 8001314:	b29b      	uxth	r3, r3
 8001316:	4413      	add	r3, r2
 8001318:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800131a:	88fb      	ldrh	r3, [r7, #6]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d002      	beq.n	8001326 <modbusRead1Register+0x42>
 8001320:	88fb      	ldrh	r3, [r7, #6]
 8001322:	2b7d      	cmp	r3, #125	; 0x7d
 8001324:	d903      	bls.n	800132e <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 8001326:	2003      	movs	r0, #3
 8001328:	f000 f856 	bl	80013d8 <ModbusErrorReply>
		 return;
 800132c:	e04e      	b.n	80013cc <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 800132e:	88ba      	ldrh	r2, [r7, #4]
 8001330:	4b28      	ldr	r3, [pc, #160]	; (80013d4 <modbusRead1Register+0xf0>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	689b      	ldr	r3, [r3, #8]
 8001336:	429a      	cmp	r2, r3
 8001338:	d808      	bhi.n	800134c <modbusRead1Register+0x68>
 800133a:	88ba      	ldrh	r2, [r7, #4]
 800133c:	88fb      	ldrh	r3, [r7, #6]
 800133e:	4413      	add	r3, r2
 8001340:	461a      	mov	r2, r3
 8001342:	4b24      	ldr	r3, [pc, #144]	; (80013d4 <modbusRead1Register+0xf0>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d903      	bls.n	8001354 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 800134c:	2002      	movs	r0, #2
 800134e:	f000 f843 	bl	80013d8 <ModbusErrorReply>
		 return;
 8001352:	e03b      	b.n	80013cc <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 8001354:	4b1f      	ldr	r3, [pc, #124]	; (80013d4 <modbusRead1Register+0xf0>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	b2da      	uxtb	r2, r3
 8001362:	4b1c      	ldr	r3, [pc, #112]	; (80013d4 <modbusRead1Register+0xf0>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	0052      	lsls	r2, r2, #1
 8001368:	b2d2      	uxtb	r2, r2
 800136a:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 800136e:	2400      	movs	r4, #0
 8001370:	e020      	b.n	80013b4 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <modbusRead1Register+0xf0>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	685a      	ldr	r2, [r3, #4]
 8001378:	88bb      	ldrh	r3, [r7, #4]
 800137a:	4423      	add	r3, r4
 800137c:	005b      	lsls	r3, r3, #1
 800137e:	18d1      	adds	r1, r2, r3
 8001380:	4b14      	ldr	r3, [pc, #80]	; (80013d4 <modbusRead1Register+0xf0>)
 8001382:	681a      	ldr	r2, [r3, #0]
 8001384:	1c63      	adds	r3, r4, #1
 8001386:	005b      	lsls	r3, r3, #1
 8001388:	7849      	ldrb	r1, [r1, #1]
 800138a:	4413      	add	r3, r2
 800138c:	460a      	mov	r2, r1
 800138e:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001392:	4b10      	ldr	r3, [pc, #64]	; (80013d4 <modbusRead1Register+0xf0>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	88bb      	ldrh	r3, [r7, #4]
 800139a:	4423      	add	r3, r4
 800139c:	005b      	lsls	r3, r3, #1
 800139e:	18d1      	adds	r1, r2, r3
 80013a0:	4b0c      	ldr	r3, [pc, #48]	; (80013d4 <modbusRead1Register+0xf0>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	0063      	lsls	r3, r4, #1
 80013a6:	3303      	adds	r3, #3
 80013a8:	7809      	ldrb	r1, [r1, #0]
 80013aa:	4413      	add	r3, r2
 80013ac:	460a      	mov	r2, r1
 80013ae:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 80013b2:	3401      	adds	r4, #1
 80013b4:	88fb      	ldrh	r3, [r7, #6]
 80013b6:	429c      	cmp	r4, r3
 80013b8:	dbdb      	blt.n	8001372 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 80013ba:	88fb      	ldrh	r3, [r7, #6]
 80013bc:	3301      	adds	r3, #1
 80013be:	b2da      	uxtb	r2, r3
 80013c0:	4b04      	ldr	r3, [pc, #16]	; (80013d4 <modbusRead1Register+0xf0>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	0052      	lsls	r2, r2, #1
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd90      	pop	{r4, r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200002cc 	.word	0x200002cc

080013d8 <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 80013e2:	4b0a      	ldr	r3, [pc, #40]	; (800140c <ModbusErrorReply+0x34>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2283      	movs	r2, #131	; 0x83
 80013e8:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 80013ec:	4b07      	ldr	r3, [pc, #28]	; (800140c <ModbusErrorReply+0x34>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 80013f6:	4b05      	ldr	r3, [pc, #20]	; (800140c <ModbusErrorReply+0x34>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2202      	movs	r2, #2
 80013fc:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001400:	bf00      	nop
 8001402:	370c      	adds	r7, #12
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	200002cc 	.word	0x200002cc

08001410 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001410:	b580      	push	{r7, lr}
 8001412:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001414:	4b09      	ldr	r3, [pc, #36]	; (800143c <Modbus_frame_response+0x2c>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	7e5b      	ldrb	r3, [r3, #25]
 800141a:	2b03      	cmp	r3, #3
 800141c:	d004      	beq.n	8001428 <Modbus_frame_response+0x18>
 800141e:	2b06      	cmp	r3, #6
 8001420:	d105      	bne.n	800142e <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001422:	f7ff ff1d 	bl	8001260 <modbusWrite1Register>
		break;
 8001426:	e006      	b.n	8001436 <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 8001428:	f7ff ff5c 	bl	80012e4 <modbusRead1Register>
		break;
 800142c:	e003      	b.n	8001436 <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 800142e:	2001      	movs	r0, #1
 8001430:	f7ff ffd2 	bl	80013d8 <ModbusErrorReply>
		break;
 8001434:	bf00      	nop

	}
}
 8001436:	bf00      	nop
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	200002cc 	.word	0x200002cc

08001440 <Modbus_Emission>:

void Modbus_Emission()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001446:	4b3d      	ldr	r3, [pc, #244]	; (800153c <Modbus_Emission+0xfc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001450:	b2db      	uxtb	r3, r3
 8001452:	2b20      	cmp	r3, #32
 8001454:	d15e      	bne.n	8001514 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 8001456:	4b39      	ldr	r3, [pc, #228]	; (800153c <Modbus_Emission+0xfc>)
 8001458:	681a      	ldr	r2, [r3, #0]
 800145a:	4b38      	ldr	r3, [pc, #224]	; (800153c <Modbus_Emission+0xfc>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	7812      	ldrb	r2, [r2, #0]
 8001460:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 8001464:	4b35      	ldr	r3, [pc, #212]	; (800153c <Modbus_Emission+0xfc>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 800146c:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 800146e:	4b33      	ldr	r3, [pc, #204]	; (800153c <Modbus_Emission+0xfc>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 8001476:	4b31      	ldr	r3, [pc, #196]	; (800153c <Modbus_Emission+0xfc>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 800147e:	461a      	mov	r2, r3
 8001480:	f00a fc90 	bl	800bda4 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 8001484:	4b2d      	ldr	r3, [pc, #180]	; (800153c <Modbus_Emission+0xfc>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 800148c:	b29a      	uxth	r2, r3
 800148e:	4b2b      	ldr	r3, [pc, #172]	; (800153c <Modbus_Emission+0xfc>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	3203      	adds	r2, #3
 8001494:	b292      	uxth	r2, r2
 8001496:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800149a:	4b28      	ldr	r3, [pc, #160]	; (800153c <Modbus_Emission+0xfc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 80014a2:	4b26      	ldr	r3, [pc, #152]	; (800153c <Modbus_Emission+0xfc>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 80014aa:	3b02      	subs	r3, #2
 80014ac:	4619      	mov	r1, r3
 80014ae:	4610      	mov	r0, r2
 80014b0:	f7ff fd98 	bl	8000fe4 <CRC16>
 80014b4:	4603      	mov	r3, r0
 80014b6:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <Modbus_Emission+0xfc>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b1f      	ldr	r3, [pc, #124]	; (800153c <Modbus_Emission+0xfc>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014c4:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 80014c6:	7939      	ldrb	r1, [r7, #4]
 80014c8:	4413      	add	r3, r2
 80014ca:	460a      	mov	r2, r1
 80014cc:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 80014d0:	4b1a      	ldr	r3, [pc, #104]	; (800153c <Modbus_Emission+0xfc>)
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	4b19      	ldr	r3, [pc, #100]	; (800153c <Modbus_Emission+0xfc>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 80014dc:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 80014de:	7979      	ldrb	r1, [r7, #5]
 80014e0:	4413      	add	r3, r2
 80014e2:	460a      	mov	r2, r1
 80014e4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80014e8:	4b14      	ldr	r3, [pc, #80]	; (800153c <Modbus_Emission+0xfc>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	68db      	ldr	r3, [r3, #12]
 80014ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	2b20      	cmp	r3, #32
 80014f6:	d10d      	bne.n	8001514 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 80014f8:	4b10      	ldr	r3, [pc, #64]	; (800153c <Modbus_Emission+0xfc>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 80014fe:	4b0f      	ldr	r3, [pc, #60]	; (800153c <Modbus_Emission+0xfc>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 8001506:	4b0d      	ldr	r3, [pc, #52]	; (800153c <Modbus_Emission+0xfc>)
 8001508:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800150a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 800150e:	461a      	mov	r2, r3
 8001510:	f009 fab6 	bl	800aa80 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001514:	4b09      	ldr	r3, [pc, #36]	; (800153c <Modbus_Emission+0xfc>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	2200      	movs	r2, #0
 800151a:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 800151c:	4b07      	ldr	r3, [pc, #28]	; (800153c <Modbus_Emission+0xfc>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2200      	movs	r2, #0
 8001522:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001524:	4b05      	ldr	r3, [pc, #20]	; (800153c <Modbus_Emission+0xfc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2200      	movs	r2, #0
 800152a:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 800152c:	4b03      	ldr	r3, [pc, #12]	; (800153c <Modbus_Emission+0xfc>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2202      	movs	r2, #2
 8001532:	761a      	strb	r2, [r3, #24]
}
 8001534:	bf00      	nop
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	200002cc 	.word	0x200002cc

08001540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001544:	f003 f8d8 	bl	80046f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001548:	f000 fa3c 	bl	80019c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154c:	f000 fcf4 	bl	8001f38 <MX_GPIO_Init>
  MX_DMA_Init();
 8001550:	f000 fcbc 	bl	8001ecc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001554:	f000 fc8e 	bl	8001e74 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8001558:	f000 fbba 	bl	8001cd0 <MX_TIM3_Init>
  MX_TIM1_Init();
 800155c:	f000 fb28 	bl	8001bb0 <MX_TIM1_Init>
  MX_ADC1_Init();
 8001560:	f000 fa98 	bl	8001a94 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8001564:	f000 fc5c 	bl	8001e20 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001568:	f000 faf4 	bl	8001b54 <MX_I2C1_Init>
  MX_TIM11_Init();
 800156c:	f000 fc04 	bl	8001d78 <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  hmodbus.huart = &huart2;
 8001570:	4bb5      	ldr	r3, [pc, #724]	; (8001848 <main+0x308>)
 8001572:	4ab6      	ldr	r2, [pc, #728]	; (800184c <main+0x30c>)
 8001574:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 8001576:	4bb4      	ldr	r3, [pc, #720]	; (8001848 <main+0x308>)
 8001578:	4ab5      	ldr	r2, [pc, #724]	; (8001850 <main+0x310>)
 800157a:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 800157c:	4bb2      	ldr	r3, [pc, #712]	; (8001848 <main+0x308>)
 800157e:	2215      	movs	r2, #21
 8001580:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001582:	4bb1      	ldr	r3, [pc, #708]	; (8001848 <main+0x308>)
 8001584:	2246      	movs	r2, #70	; 0x46
 8001586:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001588:	49b2      	ldr	r1, [pc, #712]	; (8001854 <main+0x314>)
 800158a:	48af      	ldr	r0, [pc, #700]	; (8001848 <main+0x308>)
 800158c:	f7ff fcd4 	bl	8000f38 <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001590:	2104      	movs	r1, #4
 8001592:	48b1      	ldr	r0, [pc, #708]	; (8001858 <main+0x318>)
 8001594:	f008 f958 	bl	8009848 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001598:	48b0      	ldr	r0, [pc, #704]	; (800185c <main+0x31c>)
 800159a:	f007 fda5 	bl	80090e8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800159e:	2100      	movs	r1, #0
 80015a0:	48ae      	ldr	r0, [pc, #696]	; (800185c <main+0x31c>)
 80015a2:	f007 ff1f 	bl	80093e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 80015a6:	2104      	movs	r1, #4
 80015a8:	48ac      	ldr	r0, [pc, #688]	; (800185c <main+0x31c>)
 80015aa:	f007 ff1b 	bl	80093e4 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 80015ae:	4bac      	ldr	r3, [pc, #688]	; (8001860 <main+0x320>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	b2db      	uxtb	r3, r3
 80015b4:	461a      	mov	r2, r3
 80015b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80015ba:	48aa      	ldr	r0, [pc, #680]	; (8001864 <main+0x324>)
 80015bc:	f004 fbfe 	bl	8005dbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 80015c0:	4ba9      	ldr	r3, [pc, #676]	; (8001868 <main+0x328>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	461a      	mov	r2, r3
 80015c8:	2110      	movs	r1, #16
 80015ca:	48a6      	ldr	r0, [pc, #664]	; (8001864 <main+0x324>)
 80015cc:	f004 fbf6 	bl	8005dbc <HAL_GPIO_WritePin>


  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 80015d0:	2202      	movs	r2, #2
 80015d2:	49a6      	ldr	r1, [pc, #664]	; (800186c <main+0x32c>)
 80015d4:	48a6      	ldr	r0, [pc, #664]	; (8001870 <main+0x330>)
 80015d6:	f003 f969 	bl	80048ac <HAL_ADC_Start_DMA>

  EndEffectorState = 0;	//SoftReset
 80015da:	4ba6      	ldr	r3, [pc, #664]	; (8001874 <main+0x334>)
 80015dc:	2200      	movs	r2, #0
 80015de:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 80015e0:	4ba5      	ldr	r3, [pc, #660]	; (8001878 <main+0x338>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 80015e6:	f7ff fd33 	bl	8001050 <Modbus_Protocal_Worker>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  VelocityApprox();
 80015ea:	f000 ff2d 	bl	8002448 <VelocityApprox>
	  AccelerationApprox();
 80015ee:	f000 ff59 	bl	80024a4 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 80015f2:	f000 ff75 	bl	80024e0 <Routine>

  	  EndEffectorWrite(); //I2C
 80015f6:	f000 fd91 	bl	800211c <EndEffectorWrite>
	  JoystickPinUpdate(); //Check Pin Flag
 80015fa:	f001 f839 	bl	8002670 <JoystickPinUpdate>

	  switch(scheduler)
 80015fe:	4b9f      	ldr	r3, [pc, #636]	; (800187c <main+0x33c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2b05      	cmp	r3, #5
 8001604:	d8ef      	bhi.n	80015e6 <main+0xa6>
 8001606:	a201      	add	r2, pc, #4	; (adr r2, 800160c <main+0xcc>)
 8001608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160c:	08001625 	.word	0x08001625
 8001610:	0800163b 	.word	0x0800163b
 8001614:	080016bb 	.word	0x080016bb
 8001618:	0800173b 	.word	0x0800173b
 800161c:	0800192b 	.word	0x0800192b
 8001620:	08001985 	.word	0x08001985
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001624:	4b8c      	ldr	r3, [pc, #560]	; (8001858 <main+0x318>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162a:	b21a      	sxth	r2, r3
 800162c:	4b94      	ldr	r3, [pc, #592]	; (8001880 <main+0x340>)
 800162e:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 8001630:	f001 f8ba 	bl	80027a8 <JoystickControl>
		  JoystickLocationState();
 8001634:	f001 f984 	bl	8002940 <JoystickLocationState>
		  break;
 8001638:	e1aa      	b.n	8001990 <main+0x450>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 800163a:	4b86      	ldr	r3, [pc, #536]	; (8001854 <main+0x314>)
 800163c:	2208      	movs	r2, #8
 800163e:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001640:	4b90      	ldr	r3, [pc, #576]	; (8001884 <main+0x344>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a90      	ldr	r2, [pc, #576]	; (8001888 <main+0x348>)
 8001646:	330c      	adds	r3, #12
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3304      	adds	r3, #4
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4618      	mov	r0, r3
 8001652:	f7fe ff25 	bl	80004a0 <__aeabi_f2d>
 8001656:	a378      	add	r3, pc, #480	; (adr r3, 8001838 <main+0x2f8>)
 8001658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800165c:	f7ff f8a2 	bl	80007a4 <__aeabi_ddiv>
 8001660:	4602      	mov	r2, r0
 8001662:	460b      	mov	r3, r1
 8001664:	4610      	mov	r0, r2
 8001666:	4619      	mov	r1, r3
 8001668:	f7ff fa42 	bl	8000af0 <__aeabi_d2f>
 800166c:	4603      	mov	r3, r0
 800166e:	4a87      	ldr	r2, [pc, #540]	; (800188c <main+0x34c>)
 8001670:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 8001672:	4b84      	ldr	r3, [pc, #528]	; (8001884 <main+0x344>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a84      	ldr	r2, [pc, #528]	; (8001888 <main+0x348>)
 8001678:	3304      	adds	r3, #4
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	edd3 7a00 	vldr	s15, [r3]
 8001682:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800168e:	ee17 3a90 	vmov	r3, s15
 8001692:	b29a      	uxth	r2, r3
 8001694:	4b6f      	ldr	r3, [pc, #444]	; (8001854 <main+0x314>)
 8001696:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800169a:	4b6e      	ldr	r3, [pc, #440]	; (8001854 <main+0x314>)
 800169c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80016a0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 80016a4:	4b6b      	ldr	r3, [pc, #428]	; (8001854 <main+0x314>)
 80016a6:	2203      	movs	r2, #3
 80016a8:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 80016ac:	4b78      	ldr	r3, [pc, #480]	; (8001890 <main+0x350>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 80016b2:	4b72      	ldr	r3, [pc, #456]	; (800187c <main+0x33c>)
 80016b4:	2203      	movs	r2, #3
 80016b6:	601a      	str	r2, [r3, #0]
		  break;
 80016b8:	e16a      	b.n	8001990 <main+0x450>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80016ba:	4b66      	ldr	r3, [pc, #408]	; (8001854 <main+0x314>)
 80016bc:	2210      	movs	r2, #16
 80016be:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80016c0:	4b70      	ldr	r3, [pc, #448]	; (8001884 <main+0x344>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a73      	ldr	r2, [pc, #460]	; (8001894 <main+0x354>)
 80016c6:	330c      	adds	r3, #12
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	3304      	adds	r3, #4
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f7fe fee5 	bl	80004a0 <__aeabi_f2d>
 80016d6:	a358      	add	r3, pc, #352	; (adr r3, 8001838 <main+0x2f8>)
 80016d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016dc:	f7ff f862 	bl	80007a4 <__aeabi_ddiv>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4610      	mov	r0, r2
 80016e6:	4619      	mov	r1, r3
 80016e8:	f7ff fa02 	bl	8000af0 <__aeabi_d2f>
 80016ec:	4603      	mov	r3, r0
 80016ee:	4a67      	ldr	r2, [pc, #412]	; (800188c <main+0x34c>)
 80016f0:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 80016f2:	4b64      	ldr	r3, [pc, #400]	; (8001884 <main+0x344>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a67      	ldr	r2, [pc, #412]	; (8001894 <main+0x354>)
 80016f8:	3304      	adds	r3, #4
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	edd3 7a00 	vldr	s15, [r3]
 8001702:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800170e:	ee17 3a90 	vmov	r3, s15
 8001712:	b29a      	uxth	r2, r3
 8001714:	4b4f      	ldr	r3, [pc, #316]	; (8001854 <main+0x314>)
 8001716:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 800171a:	4b4e      	ldr	r3, [pc, #312]	; (8001854 <main+0x314>)
 800171c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001720:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 8001724:	4b4b      	ldr	r3, [pc, #300]	; (8001854 <main+0x314>)
 8001726:	2203      	movs	r2, #3
 8001728:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  Trajectstate = 0;
 800172c:	4b58      	ldr	r3, [pc, #352]	; (8001890 <main+0x350>)
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001732:	4b52      	ldr	r3, [pc, #328]	; (800187c <main+0x33c>)
 8001734:	2203      	movs	r2, #3
 8001736:	601a      	str	r2, [r3, #0]
		  break;
 8001738:	e12a      	b.n	8001990 <main+0x450>

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 800173a:	4b47      	ldr	r3, [pc, #284]	; (8001858 <main+0x318>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001740:	b21a      	sxth	r2, r3
 8001742:	4b4f      	ldr	r3, [pc, #316]	; (8001880 <main+0x340>)
 8001744:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001746:	f003 f83d 	bl	80047c4 <HAL_GetTick>
 800174a:	4602      	mov	r2, r0
 800174c:	4b52      	ldr	r3, [pc, #328]	; (8001898 <main+0x358>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	429a      	cmp	r2, r3
 8001752:	d917      	bls.n	8001784 <main+0x244>
		  {
			  timestamp0 = HAL_GetTick() + 0.1;
 8001754:	f003 f836 	bl	80047c4 <HAL_GetTick>
 8001758:	4603      	mov	r3, r0
 800175a:	4618      	mov	r0, r3
 800175c:	f7fe fe7e 	bl	800045c <__aeabi_ui2d>
 8001760:	a337      	add	r3, pc, #220	; (adr r3, 8001840 <main+0x300>)
 8001762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001766:	f7fe fd3d 	bl	80001e4 <__adddf3>
 800176a:	4602      	mov	r2, r0
 800176c:	460b      	mov	r3, r1
 800176e:	4610      	mov	r0, r2
 8001770:	4619      	mov	r1, r3
 8001772:	f7ff f99d 	bl	8000ab0 <__aeabi_d2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	4a47      	ldr	r2, [pc, #284]	; (8001898 <main+0x358>)
 800177a:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 800177c:	f000 fe64 	bl	8002448 <VelocityApprox>
			  AccelerationApprox();
 8001780:	f000 fe90 	bl	80024a4 <AccelerationApprox>
		  }

		  static uint32_t timestamp1 = 0;
		  if(HAL_GetTick() > timestamp1)
 8001784:	f003 f81e 	bl	80047c4 <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	4b44      	ldr	r3, [pc, #272]	; (800189c <main+0x35c>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	429a      	cmp	r2, r3
 8001790:	d915      	bls.n	80017be <main+0x27e>
		  {
			  timestamp1 = HAL_GetTick() + 0.5;
 8001792:	f003 f817 	bl	80047c4 <HAL_GetTick>
 8001796:	4603      	mov	r3, r0
 8001798:	4618      	mov	r0, r3
 800179a:	f7fe fe5f 	bl	800045c <__aeabi_ui2d>
 800179e:	f04f 0200 	mov.w	r2, #0
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <main+0x360>)
 80017a4:	f7fe fd1e 	bl	80001e4 <__adddf3>
 80017a8:	4602      	mov	r2, r0
 80017aa:	460b      	mov	r3, r1
 80017ac:	4610      	mov	r0, r2
 80017ae:	4619      	mov	r1, r3
 80017b0:	f7ff f97e 	bl	8000ab0 <__aeabi_d2uiz>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4a39      	ldr	r2, [pc, #228]	; (800189c <main+0x35c>)
 80017b8:	6013      	str	r3, [r2, #0]
			  TrajectoryGenerator();
 80017ba:	f001 ff2d 	bl	8003618 <TrajectoryGenerator>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 80017be:	f003 f801 	bl	80047c4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	4b37      	ldr	r3, [pc, #220]	; (80018a4 <main+0x364>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	f0c0 8087 	bcc.w	80018dc <main+0x39c>
		  {
			  timestamp2 = HAL_GetTick() + 0.5;
 80017ce:	f002 fff9 	bl	80047c4 <HAL_GetTick>
 80017d2:	4603      	mov	r3, r0
 80017d4:	4618      	mov	r0, r3
 80017d6:	f7fe fe41 	bl	800045c <__aeabi_ui2d>
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	4b30      	ldr	r3, [pc, #192]	; (80018a0 <main+0x360>)
 80017e0:	f7fe fd00 	bl	80001e4 <__adddf3>
 80017e4:	4602      	mov	r2, r0
 80017e6:	460b      	mov	r3, r1
 80017e8:	4610      	mov	r0, r2
 80017ea:	4619      	mov	r1, r3
 80017ec:	f7ff f960 	bl	8000ab0 <__aeabi_d2uiz>
 80017f0:	4603      	mov	r3, r0
 80017f2:	4a2c      	ldr	r2, [pc, #176]	; (80018a4 <main+0x364>)
 80017f4:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 80017f6:	f000 fed3 	bl	80025a0 <PIDcal>
 80017fa:	eef0 7a40 	vmov.f32	s15, s0
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <main+0x368>)
 8001800:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001804:	4b28      	ldr	r3, [pc, #160]	; (80018a8 <main+0x368>)
 8001806:	edd3 7a00 	vldr	s15, [r3]
 800180a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800180e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001812:	db4b      	blt.n	80018ac <main+0x36c>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001814:	4b11      	ldr	r3, [pc, #68]	; (800185c <main+0x31c>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 800181c:	4b22      	ldr	r3, [pc, #136]	; (80018a8 <main+0x368>)
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	4b0e      	ldr	r3, [pc, #56]	; (800185c <main+0x31c>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800182a:	ee17 2a90 	vmov	r2, s15
 800182e:	635a      	str	r2, [r3, #52]	; 0x34
 8001830:	e054      	b.n	80018dc <main+0x39c>
 8001832:	bf00      	nop
 8001834:	f3af 8000 	nop.w
 8001838:	70a3d70a 	.word	0x70a3d70a
 800183c:	3fa70a3d 	.word	0x3fa70a3d
 8001840:	9999999a 	.word	0x9999999a
 8001844:	3fb99999 	.word	0x3fb99999
 8001848:	200008e0 	.word	0x200008e0
 800184c:	2000065c 	.word	0x2000065c
 8001850:	20000534 	.word	0x20000534
 8001854:	20000db8 	.word	0x20000db8
 8001858:	20000480 	.word	0x20000480
 800185c:	200003cc 	.word	0x200003cc
 8001860:	20000208 	.word	0x20000208
 8001864:	40020400 	.word	0x40020400
 8001868:	20000204 	.word	0x20000204
 800186c:	200008c4 	.word	0x200008c4
 8001870:	200002d0 	.word	0x200002d0
 8001874:	200008d8 	.word	0x200008d8
 8001878:	200008d0 	.word	0x200008d0
 800187c:	20000730 	.word	0x20000730
 8001880:	2000077c 	.word	0x2000077c
 8001884:	20000734 	.word	0x20000734
 8001888:	200007b8 	.word	0x200007b8
 800188c:	20000744 	.word	0x20000744
 8001890:	2000073c 	.word	0x2000073c
 8001894:	2000081c 	.word	0x2000081c
 8001898:	20000e44 	.word	0x20000e44
 800189c:	20000e48 	.word	0x20000e48
 80018a0:	3fe00000 	.word	0x3fe00000
 80018a4:	20000e4c 	.word	0x20000e4c
 80018a8:	20000738 	.word	0x20000738
			  }
			  else if (duty < 0)
 80018ac:	4b39      	ldr	r3, [pc, #228]	; (8001994 <main+0x454>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018ba:	d50f      	bpl.n	80018dc <main+0x39c>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80018bc:	4b36      	ldr	r3, [pc, #216]	; (8001998 <main+0x458>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	2200      	movs	r2, #0
 80018c2:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 80018c4:	4b33      	ldr	r3, [pc, #204]	; (8001994 <main+0x454>)
 80018c6:	edd3 7a00 	vldr	s15, [r3]
 80018ca:	eef1 7a67 	vneg.f32	s15, s15
 80018ce:	4b32      	ldr	r3, [pc, #200]	; (8001998 <main+0x458>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d6:	ee17 2a90 	vmov	r2, s15
 80018da:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position == qf){
 80018dc:	4b2f      	ldr	r3, [pc, #188]	; (800199c <main+0x45c>)
 80018de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018e2:	ee07 3a90 	vmov	s15, r3
 80018e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80018ea:	4b2d      	ldr	r3, [pc, #180]	; (80019a0 <main+0x460>)
 80018ec:	edd3 7a00 	vldr	s15, [r3]
 80018f0:	eeb4 7a67 	vcmp.f32	s14, s15
 80018f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f8:	d10c      	bne.n	8001914 <main+0x3d4>
			  static int FinalTime = 0;
			  FinalTime += 1;
 80018fa:	4b2a      	ldr	r3, [pc, #168]	; (80019a4 <main+0x464>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	3301      	adds	r3, #1
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <main+0x464>)
 8001902:	6013      	str	r3, [r2, #0]
			  if(FinalTime >= 42000000){
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <main+0x464>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <main+0x468>)
 800190a:	4293      	cmp	r3, r2
 800190c:	dd02      	ble.n	8001914 <main+0x3d4>
				  // End Effector
				  scheduler = 4;
 800190e:	4b27      	ldr	r3, [pc, #156]	; (80019ac <main+0x46c>)
 8001910:	2204      	movs	r2, #4
 8001912:	601a      	str	r2, [r3, #0]
			  }
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001914:	4b26      	ldr	r3, [pc, #152]	; (80019b0 <main+0x470>)
 8001916:	689b      	ldr	r3, [r3, #8]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d136      	bne.n	800198a <main+0x44a>
		  {
			  ResetButton.flag = 0;
 800191c:	4b24      	ldr	r3, [pc, #144]	; (80019b0 <main+0x470>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001922:	4b22      	ldr	r3, [pc, #136]	; (80019ac <main+0x46c>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001928:	e02f      	b.n	800198a <main+0x44a>

	  //Proximity
	  case 4 :
		  if (HoleSequence == 9)
 800192a:	4b22      	ldr	r3, [pc, #136]	; (80019b4 <main+0x474>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b09      	cmp	r3, #9
 8001930:	d103      	bne.n	800193a <main+0x3fa>
		  {
			  scheduler = 0;
 8001932:	4b1e      	ldr	r3, [pc, #120]	; (80019ac <main+0x46c>)
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	e019      	b.n	800196e <main+0x42e>
		  }
		  else if (HoleSequence < 9)
 800193a:	4b1e      	ldr	r3, [pc, #120]	; (80019b4 <main+0x474>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2b08      	cmp	r3, #8
 8001940:	dc15      	bgt.n	800196e <main+0x42e>
		  {
			  if (TaskType == 1)
 8001942:	4b1d      	ldr	r3, [pc, #116]	; (80019b8 <main+0x478>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	2b01      	cmp	r3, #1
 8001948:	d106      	bne.n	8001958 <main+0x418>
			  {
				  EndEffectorState = 4;			//Pick
 800194a:	4b1c      	ldr	r3, [pc, #112]	; (80019bc <main+0x47c>)
 800194c:	2204      	movs	r2, #4
 800194e:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001950:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <main+0x480>)
 8001952:	2201      	movs	r2, #1
 8001954:	701a      	strb	r2, [r3, #0]
 8001956:	e00a      	b.n	800196e <main+0x42e>
			  }
			  else if (TaskType == -1)
 8001958:	4b17      	ldr	r3, [pc, #92]	; (80019b8 <main+0x478>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001960:	d105      	bne.n	800196e <main+0x42e>
			  {
				  EndEffectorState = 5;			//Place
 8001962:	4b16      	ldr	r3, [pc, #88]	; (80019bc <main+0x47c>)
 8001964:	2205      	movs	r2, #5
 8001966:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001968:	4b15      	ldr	r3, [pc, #84]	; (80019c0 <main+0x480>)
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
			  }
		  }
		  if (ResetButton.flag == 1)
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <main+0x470>)
 8001970:	689b      	ldr	r3, [r3, #8]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d10b      	bne.n	800198e <main+0x44e>
			  {
				  ResetButton.flag = 0;
 8001976:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <main+0x470>)
 8001978:	2200      	movs	r2, #0
 800197a:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 800197c:	4b0b      	ldr	r3, [pc, #44]	; (80019ac <main+0x46c>)
 800197e:	2200      	movs	r2, #0
 8001980:	601a      	str	r2, [r3, #0]
			  }
		  break;
 8001982:	e004      	b.n	800198e <main+0x44e>

	  //Emergency
	  case 5:
		  Homing();
 8001984:	f000 fba0 	bl	80020c8 <Homing>
		  break;
 8001988:	e002      	b.n	8001990 <main+0x450>
		  break;
 800198a:	bf00      	nop
 800198c:	e62b      	b.n	80015e6 <main+0xa6>
		  break;
 800198e:	bf00      	nop
	  Modbus_Protocal_Worker();
 8001990:	e629      	b.n	80015e6 <main+0xa6>
 8001992:	bf00      	nop
 8001994:	20000738 	.word	0x20000738
 8001998:	200003cc 	.word	0x200003cc
 800199c:	2000077c 	.word	0x2000077c
 80019a0:	20000744 	.word	0x20000744
 80019a4:	20000e50 	.word	0x20000e50
 80019a8:	0280de7f 	.word	0x0280de7f
 80019ac:	20000730 	.word	0x20000730
 80019b0:	20000894 	.word	0x20000894
 80019b4:	20000734 	.word	0x20000734
 80019b8:	20000200 	.word	0x20000200
 80019bc:	200008d8 	.word	0x200008d8
 80019c0:	200008d0 	.word	0x200008d0

080019c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b094      	sub	sp, #80	; 0x50
 80019c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019ca:	f107 0320 	add.w	r3, r7, #32
 80019ce:	2230      	movs	r2, #48	; 0x30
 80019d0:	2100      	movs	r1, #0
 80019d2:	4618      	mov	r0, r3
 80019d4:	f00a f9f4 	bl	800bdc0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019d8:	f107 030c 	add.w	r3, r7, #12
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]
 80019e0:	605a      	str	r2, [r3, #4]
 80019e2:	609a      	str	r2, [r3, #8]
 80019e4:	60da      	str	r2, [r3, #12]
 80019e6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60bb      	str	r3, [r7, #8]
 80019ec:	4b27      	ldr	r3, [pc, #156]	; (8001a8c <SystemClock_Config+0xc8>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a26      	ldr	r2, [pc, #152]	; (8001a8c <SystemClock_Config+0xc8>)
 80019f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b24      	ldr	r3, [pc, #144]	; (8001a8c <SystemClock_Config+0xc8>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a00:	60bb      	str	r3, [r7, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a04:	2300      	movs	r3, #0
 8001a06:	607b      	str	r3, [r7, #4]
 8001a08:	4b21      	ldr	r3, [pc, #132]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a0e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a12:	6013      	str	r3, [r2, #0]
 8001a14:	4b1e      	ldr	r3, [pc, #120]	; (8001a90 <SystemClock_Config+0xcc>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a1c:	607b      	str	r3, [r7, #4]
 8001a1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a20:	2302      	movs	r3, #2
 8001a22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a24:	2301      	movs	r3, #1
 8001a26:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a28:	2310      	movs	r3, #16
 8001a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a2c:	2302      	movs	r3, #2
 8001a2e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a30:	2300      	movs	r3, #0
 8001a32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001a34:	2308      	movs	r3, #8
 8001a36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001a38:	2364      	movs	r3, #100	; 0x64
 8001a3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001a40:	2304      	movs	r3, #4
 8001a42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a44:	f107 0320 	add.w	r3, r7, #32
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f006 fe59 	bl	8008700 <HAL_RCC_OscConfig>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a54:	f002 faf6 	bl	8004044 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a58:	230f      	movs	r3, #15
 8001a5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a68:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001a6e:	f107 030c 	add.w	r3, r7, #12
 8001a72:	2103      	movs	r1, #3
 8001a74:	4618      	mov	r0, r3
 8001a76:	f007 f8bb 	bl	8008bf0 <HAL_RCC_ClockConfig>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d001      	beq.n	8001a84 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001a80:	f002 fae0 	bl	8004044 <Error_Handler>
  }
}
 8001a84:	bf00      	nop
 8001a86:	3750      	adds	r7, #80	; 0x50
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40023800 	.word	0x40023800
 8001a90:	40007000 	.word	0x40007000

08001a94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001a9a:	463b      	mov	r3, r7
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001aa8:	4a28      	ldr	r2, [pc, #160]	; (8001b4c <MX_ADC1_Init+0xb8>)
 8001aaa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001aac:	4b26      	ldr	r3, [pc, #152]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001aae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ab2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ab4:	4b24      	ldr	r3, [pc, #144]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001aba:	4b23      	ldr	r3, [pc, #140]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001ac0:	4b21      	ldr	r3, [pc, #132]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ac6:	4b20      	ldr	r3, [pc, #128]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ad4:	4b1c      	ldr	r3, [pc, #112]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <MX_ADC1_Init+0xbc>)
 8001ad8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ada:	4b1b      	ldr	r3, [pc, #108]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001ae0:	4b19      	ldr	r3, [pc, #100]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001ae6:	4b18      	ldr	r3, [pc, #96]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001aee:	4b16      	ldr	r3, [pc, #88]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001af0:	2201      	movs	r2, #1
 8001af2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001af4:	4814      	ldr	r0, [pc, #80]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001af6:	f002 fe95 	bl	8004824 <HAL_ADC_Init>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d001      	beq.n	8001b04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001b00:	f002 faa0 	bl	8004044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001b04:	2300      	movs	r3, #0
 8001b06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b10:	463b      	mov	r3, r7
 8001b12:	4619      	mov	r1, r3
 8001b14:	480c      	ldr	r0, [pc, #48]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001b16:	f002 ffd7 	bl	8004ac8 <HAL_ADC_ConfigChannel>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d001      	beq.n	8001b24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001b20:	f002 fa90 	bl	8004044 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001b24:	2301      	movs	r3, #1
 8001b26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001b2c:	463b      	mov	r3, r7
 8001b2e:	4619      	mov	r1, r3
 8001b30:	4805      	ldr	r0, [pc, #20]	; (8001b48 <MX_ADC1_Init+0xb4>)
 8001b32:	f002 ffc9 	bl	8004ac8 <HAL_ADC_ConfigChannel>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d001      	beq.n	8001b40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001b3c:	f002 fa82 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001b40:	bf00      	nop
 8001b42:	3710      	adds	r7, #16
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	200002d0 	.word	0x200002d0
 8001b4c:	40012000 	.word	0x40012000
 8001b50:	0f000001 	.word	0x0f000001

08001b54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001b58:	4b12      	ldr	r3, [pc, #72]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b5a:	4a13      	ldr	r2, [pc, #76]	; (8001ba8 <MX_I2C1_Init+0x54>)
 8001b5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001b5e:	4b11      	ldr	r3, [pc, #68]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b60:	4a12      	ldr	r2, [pc, #72]	; (8001bac <MX_I2C1_Init+0x58>)
 8001b62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001b64:	4b0f      	ldr	r3, [pc, #60]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001b6a:	4b0e      	ldr	r3, [pc, #56]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b72:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001b76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001b78:	4b0a      	ldr	r3, [pc, #40]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001b7e:	4b09      	ldr	r3, [pc, #36]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001b8a:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001b90:	4804      	ldr	r0, [pc, #16]	; (8001ba4 <MX_I2C1_Init+0x50>)
 8001b92:	f004 f945 	bl	8005e20 <HAL_I2C_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d001      	beq.n	8001ba0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001b9c:	f002 fa52 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001ba0:	bf00      	nop
 8001ba2:	bd80      	pop	{r7, pc}
 8001ba4:	20000378 	.word	0x20000378
 8001ba8:	40005400 	.word	0x40005400
 8001bac:	000186a0 	.word	0x000186a0

08001bb0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b092      	sub	sp, #72	; 0x48
 8001bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bb6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001bba:	2200      	movs	r2, #0
 8001bbc:	601a      	str	r2, [r3, #0]
 8001bbe:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	601a      	str	r2, [r3, #0]
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	609a      	str	r2, [r3, #8]
 8001bcc:	60da      	str	r2, [r3, #12]
 8001bce:	611a      	str	r2, [r3, #16]
 8001bd0:	615a      	str	r2, [r3, #20]
 8001bd2:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001bd4:	1d3b      	adds	r3, r7, #4
 8001bd6:	2220      	movs	r2, #32
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00a f8f0 	bl	800bdc0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001be0:	4b39      	ldr	r3, [pc, #228]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001be2:	4a3a      	ldr	r2, [pc, #232]	; (8001ccc <MX_TIM1_Init+0x11c>)
 8001be4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8001be6:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001be8:	2263      	movs	r2, #99	; 0x63
 8001bea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001bf4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001bf8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bfa:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c02:	2200      	movs	r2, #0
 8001c04:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c06:	4b30      	ldr	r3, [pc, #192]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c0c:	482e      	ldr	r0, [pc, #184]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c0e:	f007 fb8d 	bl	800932c <HAL_TIM_PWM_Init>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001c18:	f002 fa14 	bl	8004044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c20:	2300      	movs	r3, #0
 8001c22:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c24:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4827      	ldr	r0, [pc, #156]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c2c:	f008 fd18 	bl	800a660 <HAL_TIMEx_MasterConfigSynchronization>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001c36:	f002 fa05 	bl	8004044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3a:	2360      	movs	r3, #96	; 0x60
 8001c3c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c42:	2300      	movs	r3, #0
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001c46:	2300      	movs	r3, #0
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001c52:	2300      	movs	r3, #0
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c56:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	481a      	ldr	r0, [pc, #104]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c60:	f008 f804 	bl	8009c6c <HAL_TIM_PWM_ConfigChannel>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001c6a:	f002 f9eb 	bl	8004044 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	2204      	movs	r2, #4
 8001c74:	4619      	mov	r1, r3
 8001c76:	4814      	ldr	r0, [pc, #80]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001c78:	f007 fff8 	bl	8009c6c <HAL_TIM_PWM_ConfigChannel>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c82:	f002 f9df 	bl	8004044 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c86:	2300      	movs	r3, #0
 8001c88:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c96:	2300      	movs	r3, #0
 8001c98:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c9e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ca4:	1d3b      	adds	r3, r7, #4
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4807      	ldr	r0, [pc, #28]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001caa:	f008 fd47 	bl	800a73c <HAL_TIMEx_ConfigBreakDeadTime>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d001      	beq.n	8001cb8 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001cb4:	f002 f9c6 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001cb8:	4803      	ldr	r0, [pc, #12]	; (8001cc8 <MX_TIM1_Init+0x118>)
 8001cba:	f002 fb59 	bl	8004370 <HAL_TIM_MspPostInit>

}
 8001cbe:	bf00      	nop
 8001cc0:	3748      	adds	r7, #72	; 0x48
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}
 8001cc6:	bf00      	nop
 8001cc8:	200003cc 	.word	0x200003cc
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08c      	sub	sp, #48	; 0x30
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001cd6:	f107 030c 	add.w	r3, r7, #12
 8001cda:	2224      	movs	r2, #36	; 0x24
 8001cdc:	2100      	movs	r1, #0
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f00a f86e 	bl	800bdc0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	1d3b      	adds	r3, r7, #4
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	601a      	str	r2, [r3, #0]
 8001cea:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001cec:	4b20      	ldr	r3, [pc, #128]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cee:	4a21      	ldr	r2, [pc, #132]	; (8001d74 <MX_TIM3_Init+0xa4>)
 8001cf0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001cf2:	4b1f      	ldr	r3, [pc, #124]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cf8:	4b1d      	ldr	r3, [pc, #116]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 8001cfe:	4b1c      	ldr	r3, [pc, #112]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d04:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d06:	4b1a      	ldr	r3, [pc, #104]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d0c:	4b18      	ldr	r3, [pc, #96]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d12:	2303      	movs	r3, #3
 8001d14:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d16:	2300      	movs	r3, #0
 8001d18:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d22:	2300      	movs	r3, #0
 8001d24:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d26:	2300      	movs	r3, #0
 8001d28:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001d36:	f107 030c 	add.w	r3, r7, #12
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	480c      	ldr	r0, [pc, #48]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d3e:	f007 fccf 	bl	80096e0 <HAL_TIM_Encoder_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001d48:	f002 f97c 	bl	8004044 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d50:	2300      	movs	r3, #0
 8001d52:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d54:	1d3b      	adds	r3, r7, #4
 8001d56:	4619      	mov	r1, r3
 8001d58:	4805      	ldr	r0, [pc, #20]	; (8001d70 <MX_TIM3_Init+0xa0>)
 8001d5a:	f008 fc81 	bl	800a660 <HAL_TIMEx_MasterConfigSynchronization>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001d64:	f002 f96e 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d68:	bf00      	nop
 8001d6a:	3730      	adds	r7, #48	; 0x30
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	bd80      	pop	{r7, pc}
 8001d70:	20000480 	.word	0x20000480
 8001d74:	40000400 	.word	0x40000400

08001d78 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b088      	sub	sp, #32
 8001d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001d7e:	1d3b      	adds	r3, r7, #4
 8001d80:	2200      	movs	r2, #0
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	605a      	str	r2, [r3, #4]
 8001d86:	609a      	str	r2, [r3, #8]
 8001d88:	60da      	str	r2, [r3, #12]
 8001d8a:	611a      	str	r2, [r3, #16]
 8001d8c:	615a      	str	r2, [r3, #20]
 8001d8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001d90:	4b21      	ldr	r3, [pc, #132]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001d92:	4a22      	ldr	r2, [pc, #136]	; (8001e1c <MX_TIM11_Init+0xa4>)
 8001d94:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8001d96:	4b20      	ldr	r3, [pc, #128]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001d98:	2263      	movs	r2, #99	; 0x63
 8001d9a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9c:	4b1e      	ldr	r3, [pc, #120]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8001da2:	4b1d      	ldr	r3, [pc, #116]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001da4:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8001da8:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001daa:	4b1b      	ldr	r3, [pc, #108]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001db0:	4b19      	ldr	r3, [pc, #100]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001db6:	4818      	ldr	r0, [pc, #96]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001db8:	f007 f93a 	bl	8009030 <HAL_TIM_Base_Init>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8001dc2:	f002 f93f 	bl	8004044 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8001dc6:	4814      	ldr	r0, [pc, #80]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001dc8:	f007 fa4a 	bl	8009260 <HAL_TIM_OC_Init>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d001      	beq.n	8001dd6 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8001dd2:	f002 f937 	bl	8004044 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8001dd6:	2108      	movs	r1, #8
 8001dd8:	480f      	ldr	r0, [pc, #60]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001dda:	f007 fbb3 	bl	8009544 <HAL_TIM_OnePulse_Init>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8001de4:	f002 f92e 	bl	8004044 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8001de8:	2310      	movs	r3, #16
 8001dea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8001dec:	f240 5399 	movw	r3, #1433	; 0x599
 8001df0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001df6:	2300      	movs	r3, #0
 8001df8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001dfa:	1d3b      	adds	r3, r7, #4
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	4619      	mov	r1, r3
 8001e00:	4805      	ldr	r0, [pc, #20]	; (8001e18 <MX_TIM11_Init+0xa0>)
 8001e02:	f007 fed7 	bl	8009bb4 <HAL_TIM_OC_ConfigChannel>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8001e0c:	f002 f91a 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	20000534 	.word	0x20000534
 8001e1c:	40014800 	.word	0x40014800

08001e20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001e24:	4b11      	ldr	r3, [pc, #68]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e26:	4a12      	ldr	r2, [pc, #72]	; (8001e70 <MX_USART1_UART_Init+0x50>)
 8001e28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001e32:	4b0e      	ldr	r3, [pc, #56]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e34:	2200      	movs	r2, #0
 8001e36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001e3e:	4b0b      	ldr	r3, [pc, #44]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e40:	2200      	movs	r2, #0
 8001e42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001e44:	4b09      	ldr	r3, [pc, #36]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e46:	220c      	movs	r2, #12
 8001e48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e4a:	4b08      	ldr	r3, [pc, #32]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_USART1_UART_Init+0x4c>)
 8001e58:	f008 fce0 	bl	800a81c <HAL_UART_Init>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001e62:	f002 f8ef 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001e66:	bf00      	nop
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	200005e8 	.word	0x200005e8
 8001e70:	40011000 	.word	0x40011000

08001e74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e78:	4b12      	ldr	r3, [pc, #72]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e7a:	4a13      	ldr	r2, [pc, #76]	; (8001ec8 <MX_USART2_UART_Init+0x54>)
 8001e7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e80:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8001e84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8001e86:	4b0f      	ldr	r3, [pc, #60]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001e8c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e8e:	4b0d      	ldr	r3, [pc, #52]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8001e94:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_USART2_UART_Init+0x50>)
 8001eb0:	f008 fcb4 	bl	800a81c <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001eba:	f002 f8c3 	bl	8004044 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	2000065c 	.word	0x2000065c
 8001ec8:	40004400 	.word	0x40004400

08001ecc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <MX_DMA_Init+0x68>)
 8001ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <MX_DMA_Init+0x68>)
 8001edc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee2:	4b14      	ldr	r3, [pc, #80]	; (8001f34 <MX_DMA_Init+0x68>)
 8001ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eea:	607b      	str	r3, [r7, #4]
 8001eec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	603b      	str	r3, [r7, #0]
 8001ef2:	4b10      	ldr	r3, [pc, #64]	; (8001f34 <MX_DMA_Init+0x68>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a0f      	ldr	r2, [pc, #60]	; (8001f34 <MX_DMA_Init+0x68>)
 8001ef8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0d      	ldr	r3, [pc, #52]	; (8001f34 <MX_DMA_Init+0x68>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f06:	603b      	str	r3, [r7, #0]
 8001f08:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2011      	movs	r0, #17
 8001f10:	f003 f965 	bl	80051de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001f14:	2011      	movs	r0, #17
 8001f16:	f003 f97e 	bl	8005216 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	2038      	movs	r0, #56	; 0x38
 8001f20:	f003 f95d 	bl	80051de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001f24:	2038      	movs	r0, #56	; 0x38
 8001f26:	f003 f976 	bl	8005216 <HAL_NVIC_EnableIRQ>

}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	40023800 	.word	0x40023800

08001f38 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b08a      	sub	sp, #40	; 0x28
 8001f3c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f3e:	f107 0314 	add.w	r3, r7, #20
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
 8001f4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f4e:	2300      	movs	r3, #0
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	4b48      	ldr	r3, [pc, #288]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	4a47      	ldr	r2, [pc, #284]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f58:	f043 0304 	orr.w	r3, r3, #4
 8001f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f5e:	4b45      	ldr	r3, [pc, #276]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f62:	f003 0304 	and.w	r3, r3, #4
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	4b41      	ldr	r3, [pc, #260]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f72:	4a40      	ldr	r2, [pc, #256]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f78:	6313      	str	r3, [r2, #48]	; 0x30
 8001f7a:	4b3e      	ldr	r3, [pc, #248]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b3a      	ldr	r3, [pc, #232]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a39      	ldr	r2, [pc, #228]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b37      	ldr	r3, [pc, #220]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	4b33      	ldr	r3, [pc, #204]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001faa:	4a32      	ldr	r2, [pc, #200]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001fac:	f043 0302 	orr.w	r3, r3, #2
 8001fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fb2:	4b30      	ldr	r3, [pc, #192]	; (8002074 <MX_GPIO_Init+0x13c>)
 8001fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	607b      	str	r3, [r7, #4]
 8001fbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001fc4:	482c      	ldr	r0, [pc, #176]	; (8002078 <MX_GPIO_Init+0x140>)
 8001fc6:	f003 fef9 	bl	8005dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fd6:	f107 0314 	add.w	r3, r7, #20
 8001fda:	4619      	mov	r1, r3
 8001fdc:	4827      	ldr	r0, [pc, #156]	; (800207c <MX_GPIO_Init+0x144>)
 8001fde:	f003 fd51 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001fe2:	230c      	movs	r3, #12
 8001fe4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001fe6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001fea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fec:	2300      	movs	r3, #0
 8001fee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4821      	ldr	r0, [pc, #132]	; (800207c <MX_GPIO_Init+0x144>)
 8001ff8:	f003 fd44 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8001ffc:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002000:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002002:	2300      	movs	r3, #0
 8002004:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002006:	2300      	movs	r3, #0
 8002008:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800200a:	f107 0314 	add.w	r3, r7, #20
 800200e:	4619      	mov	r1, r3
 8002010:	481b      	ldr	r0, [pc, #108]	; (8002080 <MX_GPIO_Init+0x148>)
 8002012:	f003 fd37 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8002016:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800201a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800201c:	2301      	movs	r3, #1
 800201e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002020:	2300      	movs	r3, #0
 8002022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002024:	2300      	movs	r3, #0
 8002026:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4812      	ldr	r0, [pc, #72]	; (8002078 <MX_GPIO_Init+0x140>)
 8002030:	f003 fd28 	bl	8005a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002034:	2360      	movs	r3, #96	; 0x60
 8002036:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002038:	2300      	movs	r3, #0
 800203a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203c:	2300      	movs	r3, #0
 800203e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002040:	f107 0314 	add.w	r3, r7, #20
 8002044:	4619      	mov	r1, r3
 8002046:	480c      	ldr	r0, [pc, #48]	; (8002078 <MX_GPIO_Init+0x140>)
 8002048:	f003 fd1c 	bl	8005a84 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800204c:	2200      	movs	r2, #0
 800204e:	2100      	movs	r1, #0
 8002050:	2008      	movs	r0, #8
 8002052:	f003 f8c4 	bl	80051de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002056:	2008      	movs	r0, #8
 8002058:	f003 f8dd 	bl	8005216 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800205c:	2200      	movs	r2, #0
 800205e:	2100      	movs	r1, #0
 8002060:	2009      	movs	r0, #9
 8002062:	f003 f8bc 	bl	80051de <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002066:	2009      	movs	r0, #9
 8002068:	f003 f8d5 	bl	8005216 <HAL_NVIC_EnableIRQ>

}
 800206c:	bf00      	nop
 800206e:	3728      	adds	r7, #40	; 0x28
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40023800 	.word	0x40023800
 8002078:	40020400 	.word	0x40020400
 800207c:	40020800 	.word	0x40020800
 8002080:	40020000 	.word	0x40020000

08002084 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800208e:	88fb      	ldrh	r3, [r7, #6]
 8002090:	2b04      	cmp	r3, #4
 8002092:	d106      	bne.n	80020a2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 8002094:	4b0a      	ldr	r3, [pc, #40]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002096:	2205      	movs	r2, #5
 8002098:	601a      	str	r2, [r3, #0]
		Proximity = 1;
 800209a:	4b0a      	ldr	r3, [pc, #40]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x40>)
 800209c:	2201      	movs	r2, #1
 800209e:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_3)
	{
		scheduler = 5;
		Proximity = 2;
	}
}
 80020a0:	e008      	b.n	80020b4 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == GPIO_PIN_3)
 80020a2:	88fb      	ldrh	r3, [r7, #6]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d105      	bne.n	80020b4 <HAL_GPIO_EXTI_Callback+0x30>
		scheduler = 5;
 80020a8:	4b05      	ldr	r3, [pc, #20]	; (80020c0 <HAL_GPIO_EXTI_Callback+0x3c>)
 80020aa:	2205      	movs	r2, #5
 80020ac:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 80020ae:	4b05      	ldr	r3, [pc, #20]	; (80020c4 <HAL_GPIO_EXTI_Callback+0x40>)
 80020b0:	2202      	movs	r2, #2
 80020b2:	601a      	str	r2, [r3, #0]
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	20000730 	.word	0x20000730
 80020c4:	200008dc 	.word	0x200008dc

080020c8 <Homing>:

void Homing()
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
	if (Proximity == 1)
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <Homing+0x40>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
//		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 1)
 80020d2:	2102      	movs	r1, #2
 80020d4:	480d      	ldr	r0, [pc, #52]	; (800210c <Homing+0x44>)
 80020d6:	f003 fe59 	bl	8005d8c <HAL_GPIO_ReadPin>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d110      	bne.n	8002102 <Homing+0x3a>
	{
		Proximity = 0;
 80020e0:	4b09      	ldr	r3, [pc, #36]	; (8002108 <Homing+0x40>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <Homing+0x48>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	2200      	movs	r2, #0
 80020ec:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80020ee:	4b08      	ldr	r3, [pc, #32]	; (8002110 <Homing+0x48>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2200      	movs	r2, #0
 80020f4:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 80020f6:	4b07      	ldr	r3, [pc, #28]	; (8002114 <Homing+0x4c>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 80020fc:	4b06      	ldr	r3, [pc, #24]	; (8002118 <Homing+0x50>)
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
	}
}
 8002102:	bf00      	nop
 8002104:	bd80      	pop	{r7, pc}
 8002106:	bf00      	nop
 8002108:	200008dc 	.word	0x200008dc
 800210c:	40020800 	.word	0x40020800
 8002110:	200003cc 	.word	0x200003cc
 8002114:	200008cc 	.word	0x200008cc
 8002118:	20000730 	.word	0x20000730

0800211c <EndEffectorWrite>:

void EndEffectorWrite()
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af02      	add	r7, sp, #8
	static uint32_t Readstamp = 0;
	if(HAL_GetTick() >= Readstamp)
 8002122:	f002 fb4f 	bl	80047c4 <HAL_GetTick>
 8002126:	4602      	mov	r2, r0
 8002128:	4bb3      	ldr	r3, [pc, #716]	; (80023f8 <EndEffectorWrite+0x2dc>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	429a      	cmp	r2, r3
 800212e:	d30e      	bcc.n	800214e <EndEffectorWrite+0x32>
	{
		Readstamp = HAL_GetTick() + 10;
 8002130:	f002 fb48 	bl	80047c4 <HAL_GetTick>
 8002134:	4603      	mov	r3, r0
 8002136:	330a      	adds	r3, #10
 8002138:	4aaf      	ldr	r2, [pc, #700]	; (80023f8 <EndEffectorWrite+0x2dc>)
 800213a:	6013      	str	r3, [r2, #0]
		HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800213c:	f04f 33ff 	mov.w	r3, #4294967295
 8002140:	9300      	str	r3, [sp, #0]
 8002142:	2301      	movs	r3, #1
 8002144:	4aad      	ldr	r2, [pc, #692]	; (80023fc <EndEffectorWrite+0x2e0>)
 8002146:	212a      	movs	r1, #42	; 0x2a
 8002148:	48ad      	ldr	r0, [pc, #692]	; (8002400 <EndEffectorWrite+0x2e4>)
 800214a:	f004 f8ab 	bl	80062a4 <HAL_I2C_Master_Receive>
	}
	switch(EndEffectorState)
 800214e:	4bad      	ldr	r3, [pc, #692]	; (8002404 <EndEffectorWrite+0x2e8>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b08      	cmp	r3, #8
 8002154:	f200 8175 	bhi.w	8002442 <EndEffectorWrite+0x326>
 8002158:	a201      	add	r2, pc, #4	; (adr r2, 8002160 <EndEffectorWrite+0x44>)
 800215a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800215e:	bf00      	nop
 8002160:	08002185 	.word	0x08002185
 8002164:	080021c1 	.word	0x080021c1
 8002168:	080021fd 	.word	0x080021fd
 800216c:	08002239 	.word	0x08002239
 8002170:	08002275 	.word	0x08002275
 8002174:	080022cb 	.word	0x080022cb
 8002178:	0800232f 	.word	0x0800232f
 800217c:	08002369 	.word	0x08002369
 8002180:	080023a3 	.word	0x080023a3
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 8002184:	4ba0      	ldr	r3, [pc, #640]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	2b01      	cmp	r3, #1
 800218a:	f040 8127 	bne.w	80023dc <EndEffectorWrite+0x2c0>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, HAL_MAX_DELAY);
 800218e:	f04f 33ff 	mov.w	r3, #4294967295
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	2304      	movs	r3, #4
 8002196:	4a9d      	ldr	r2, [pc, #628]	; (800240c <EndEffectorWrite+0x2f0>)
 8002198:	212a      	movs	r1, #42	; 0x2a
 800219a:	4899      	ldr	r0, [pc, #612]	; (8002400 <EndEffectorWrite+0x2e4>)
 800219c:	f003 ff84 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 80021a0:	2005      	movs	r0, #5
 80021a2:	f002 fb1b 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	9300      	str	r3, [sp, #0]
 80021ac:	2301      	movs	r3, #1
 80021ae:	4a93      	ldr	r2, [pc, #588]	; (80023fc <EndEffectorWrite+0x2e0>)
 80021b0:	212a      	movs	r1, #42	; 0x2a
 80021b2:	4893      	ldr	r0, [pc, #588]	; (8002400 <EndEffectorWrite+0x2e4>)
 80021b4:	f004 f876 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80021b8:	4b93      	ldr	r3, [pc, #588]	; (8002408 <EndEffectorWrite+0x2ec>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021be:	e10d      	b.n	80023dc <EndEffectorWrite+0x2c0>
	case 1:
		if(EndEffectorWriteFlag == 1)
 80021c0:	4b91      	ldr	r3, [pc, #580]	; (8002408 <EndEffectorWrite+0x2ec>)
 80021c2:	781b      	ldrb	r3, [r3, #0]
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	f040 810b 	bne.w	80023e0 <EndEffectorWrite+0x2c4>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, HAL_MAX_DELAY);
 80021ca:	f04f 33ff 	mov.w	r3, #4294967295
 80021ce:	9300      	str	r3, [sp, #0]
 80021d0:	2302      	movs	r3, #2
 80021d2:	4a8f      	ldr	r2, [pc, #572]	; (8002410 <EndEffectorWrite+0x2f4>)
 80021d4:	212a      	movs	r1, #42	; 0x2a
 80021d6:	488a      	ldr	r0, [pc, #552]	; (8002400 <EndEffectorWrite+0x2e4>)
 80021d8:	f003 ff66 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 80021dc:	2005      	movs	r0, #5
 80021de:	f002 fafd 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80021e2:	f04f 33ff 	mov.w	r3, #4294967295
 80021e6:	9300      	str	r3, [sp, #0]
 80021e8:	2301      	movs	r3, #1
 80021ea:	4a84      	ldr	r2, [pc, #528]	; (80023fc <EndEffectorWrite+0x2e0>)
 80021ec:	212a      	movs	r1, #42	; 0x2a
 80021ee:	4884      	ldr	r0, [pc, #528]	; (8002400 <EndEffectorWrite+0x2e4>)
 80021f0:	f004 f858 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80021f4:	4b84      	ldr	r3, [pc, #528]	; (8002408 <EndEffectorWrite+0x2ec>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	701a      	strb	r2, [r3, #0]
			}
		break;
 80021fa:	e0f1      	b.n	80023e0 <EndEffectorWrite+0x2c4>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80021fc:	4b82      	ldr	r3, [pc, #520]	; (8002408 <EndEffectorWrite+0x2ec>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b01      	cmp	r3, #1
 8002202:	f040 80ef 	bne.w	80023e4 <EndEffectorWrite+0x2c8>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, HAL_MAX_DELAY);
 8002206:	f04f 33ff 	mov.w	r3, #4294967295
 800220a:	9300      	str	r3, [sp, #0]
 800220c:	2302      	movs	r3, #2
 800220e:	4a81      	ldr	r2, [pc, #516]	; (8002414 <EndEffectorWrite+0x2f8>)
 8002210:	212a      	movs	r1, #42	; 0x2a
 8002212:	487b      	ldr	r0, [pc, #492]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002214:	f003 ff48 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002218:	2005      	movs	r0, #5
 800221a:	f002 fadf 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800221e:	f04f 33ff 	mov.w	r3, #4294967295
 8002222:	9300      	str	r3, [sp, #0]
 8002224:	2301      	movs	r3, #1
 8002226:	4a75      	ldr	r2, [pc, #468]	; (80023fc <EndEffectorWrite+0x2e0>)
 8002228:	212a      	movs	r1, #42	; 0x2a
 800222a:	4875      	ldr	r0, [pc, #468]	; (8002400 <EndEffectorWrite+0x2e4>)
 800222c:	f004 f83a 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002230:	4b75      	ldr	r3, [pc, #468]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002236:	e0d5      	b.n	80023e4 <EndEffectorWrite+0x2c8>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002238:	4b73      	ldr	r3, [pc, #460]	; (8002408 <EndEffectorWrite+0x2ec>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 80d3 	bne.w	80023e8 <EndEffectorWrite+0x2cc>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, HAL_MAX_DELAY);
 8002242:	f04f 33ff 	mov.w	r3, #4294967295
 8002246:	9300      	str	r3, [sp, #0]
 8002248:	2302      	movs	r3, #2
 800224a:	4a73      	ldr	r2, [pc, #460]	; (8002418 <EndEffectorWrite+0x2fc>)
 800224c:	212a      	movs	r1, #42	; 0x2a
 800224e:	486c      	ldr	r0, [pc, #432]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002250:	f003 ff2a 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002254:	2005      	movs	r0, #5
 8002256:	f002 fac1 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800225a:	f04f 33ff 	mov.w	r3, #4294967295
 800225e:	9300      	str	r3, [sp, #0]
 8002260:	2301      	movs	r3, #1
 8002262:	4a66      	ldr	r2, [pc, #408]	; (80023fc <EndEffectorWrite+0x2e0>)
 8002264:	212a      	movs	r1, #42	; 0x2a
 8002266:	4866      	ldr	r0, [pc, #408]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002268:	f004 f81c 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 800226c:	4b66      	ldr	r3, [pc, #408]	; (8002408 <EndEffectorWrite+0x2ec>)
 800226e:	2200      	movs	r2, #0
 8002270:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002272:	e0b9      	b.n	80023e8 <EndEffectorWrite+0x2cc>
	case 4:
		if(EndEffectorWriteFlag == 1)
 8002274:	4b64      	ldr	r3, [pc, #400]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002276:	781b      	ldrb	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	f040 80b7 	bne.w	80023ec <EndEffectorWrite+0x2d0>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, HAL_MAX_DELAY);
 800227e:	f04f 33ff 	mov.w	r3, #4294967295
 8002282:	9300      	str	r3, [sp, #0]
 8002284:	2302      	movs	r3, #2
 8002286:	4a65      	ldr	r2, [pc, #404]	; (800241c <EndEffectorWrite+0x300>)
 8002288:	212a      	movs	r1, #42	; 0x2a
 800228a:	485d      	ldr	r0, [pc, #372]	; (8002400 <EndEffectorWrite+0x2e4>)
 800228c:	f003 ff0c 	bl	80060a8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002290:	4b63      	ldr	r3, [pc, #396]	; (8002420 <EndEffectorWrite+0x304>)
 8002292:	2206      	movs	r2, #6
 8002294:	809a      	strh	r2, [r3, #4]
				HAL_Delay(5);
 8002296:	2005      	movs	r0, #5
 8002298:	f002 faa0 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800229c:	f04f 33ff 	mov.w	r3, #4294967295
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2301      	movs	r3, #1
 80022a4:	4a55      	ldr	r2, [pc, #340]	; (80023fc <EndEffectorWrite+0x2e0>)
 80022a6:	212a      	movs	r1, #42	; 0x2a
 80022a8:	4855      	ldr	r0, [pc, #340]	; (8002400 <EndEffectorWrite+0x2e4>)
 80022aa:	f003 fffb 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80022ae:	4b56      	ldr	r3, [pc, #344]	; (8002408 <EndEffectorWrite+0x2ec>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	701a      	strb	r2, [r3, #0]
				if(EndEffectorDataReadBack[0] == 0b111)	//Picked
 80022b4:	4b51      	ldr	r3, [pc, #324]	; (80023fc <EndEffectorWrite+0x2e0>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	2b07      	cmp	r3, #7
 80022ba:	f040 8097 	bne.w	80023ec <EndEffectorWrite+0x2d0>
				{
					TaskType *= -1;
 80022be:	4b59      	ldr	r3, [pc, #356]	; (8002424 <EndEffectorWrite+0x308>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	425b      	negs	r3, r3
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <EndEffectorWrite+0x308>)
 80022c6:	6013      	str	r3, [r2, #0]
				}
			}
		break;
 80022c8:	e090      	b.n	80023ec <EndEffectorWrite+0x2d0>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80022ca:	4b4f      	ldr	r3, [pc, #316]	; (8002408 <EndEffectorWrite+0x2ec>)
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	f040 808e 	bne.w	80023f0 <EndEffectorWrite+0x2d4>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, HAL_MAX_DELAY);
 80022d4:	f04f 33ff 	mov.w	r3, #4294967295
 80022d8:	9300      	str	r3, [sp, #0]
 80022da:	2302      	movs	r3, #2
 80022dc:	4a52      	ldr	r2, [pc, #328]	; (8002428 <EndEffectorWrite+0x30c>)
 80022de:	212a      	movs	r1, #42	; 0x2a
 80022e0:	4847      	ldr	r0, [pc, #284]	; (8002400 <EndEffectorWrite+0x2e4>)
 80022e2:	f003 fee1 	bl	80060a8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80022e6:	4b4e      	ldr	r3, [pc, #312]	; (8002420 <EndEffectorWrite+0x304>)
 80022e8:	220a      	movs	r2, #10
 80022ea:	809a      	strh	r2, [r3, #4]
				HAL_Delay(5);
 80022ec:	2005      	movs	r0, #5
 80022ee:	f002 fa75 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80022f2:	f04f 33ff 	mov.w	r3, #4294967295
 80022f6:	9300      	str	r3, [sp, #0]
 80022f8:	2301      	movs	r3, #1
 80022fa:	4a40      	ldr	r2, [pc, #256]	; (80023fc <EndEffectorWrite+0x2e0>)
 80022fc:	212a      	movs	r1, #42	; 0x2a
 80022fe:	4840      	ldr	r0, [pc, #256]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002300:	f003 ffd0 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002304:	4b40      	ldr	r3, [pc, #256]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002306:	2200      	movs	r2, #0
 8002308:	701a      	strb	r2, [r3, #0]
				if(EndEffectorDataReadBack[0] == 0b100)	//Placed
 800230a:	4b3c      	ldr	r3, [pc, #240]	; (80023fc <EndEffectorWrite+0x2e0>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b04      	cmp	r3, #4
 8002310:	d16e      	bne.n	80023f0 <EndEffectorWrite+0x2d4>
				{
					registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <EndEffectorWrite+0x304>)
 8002314:	2202      	movs	r2, #2
 8002316:	809a      	strh	r2, [r3, #4]
					TaskType *= -1;
 8002318:	4b42      	ldr	r3, [pc, #264]	; (8002424 <EndEffectorWrite+0x308>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	425b      	negs	r3, r3
 800231e:	4a41      	ldr	r2, [pc, #260]	; (8002424 <EndEffectorWrite+0x308>)
 8002320:	6013      	str	r3, [r2, #0]
					HoleSequence += 1;
 8002322:	4b42      	ldr	r3, [pc, #264]	; (800242c <EndEffectorWrite+0x310>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	3301      	adds	r3, #1
 8002328:	4a40      	ldr	r2, [pc, #256]	; (800242c <EndEffectorWrite+0x310>)
 800232a:	6013      	str	r3, [r2, #0]
				}
			}
		break;
 800232c:	e060      	b.n	80023f0 <EndEffectorWrite+0x2d4>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800232e:	4b36      	ldr	r3, [pc, #216]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d15e      	bne.n	80023f4 <EndEffectorWrite+0x2d8>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, HAL_MAX_DELAY);
 8002336:	f04f 33ff 	mov.w	r3, #4294967295
 800233a:	9300      	str	r3, [sp, #0]
 800233c:	2302      	movs	r3, #2
 800233e:	4a3c      	ldr	r2, [pc, #240]	; (8002430 <EndEffectorWrite+0x314>)
 8002340:	212a      	movs	r1, #42	; 0x2a
 8002342:	482f      	ldr	r0, [pc, #188]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002344:	f003 feb0 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002348:	2005      	movs	r0, #5
 800234a:	f002 fa47 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	9300      	str	r3, [sp, #0]
 8002354:	2301      	movs	r3, #1
 8002356:	4a29      	ldr	r2, [pc, #164]	; (80023fc <EndEffectorWrite+0x2e0>)
 8002358:	212a      	movs	r1, #42	; 0x2a
 800235a:	4829      	ldr	r0, [pc, #164]	; (8002400 <EndEffectorWrite+0x2e4>)
 800235c:	f003 ffa2 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 8002360:	4b29      	ldr	r3, [pc, #164]	; (8002408 <EndEffectorWrite+0x2ec>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002366:	e045      	b.n	80023f4 <EndEffectorWrite+0x2d8>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002368:	4b27      	ldr	r3, [pc, #156]	; (8002408 <EndEffectorWrite+0x2ec>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d165      	bne.n	800243c <EndEffectorWrite+0x320>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, HAL_MAX_DELAY);
 8002370:	f04f 33ff 	mov.w	r3, #4294967295
 8002374:	9300      	str	r3, [sp, #0]
 8002376:	2301      	movs	r3, #1
 8002378:	4a2e      	ldr	r2, [pc, #184]	; (8002434 <EndEffectorWrite+0x318>)
 800237a:	212a      	movs	r1, #42	; 0x2a
 800237c:	4820      	ldr	r0, [pc, #128]	; (8002400 <EndEffectorWrite+0x2e4>)
 800237e:	f003 fe93 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 8002382:	2005      	movs	r0, #5
 8002384:	f002 fa2a 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 8002388:	f04f 33ff 	mov.w	r3, #4294967295
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	2301      	movs	r3, #1
 8002390:	4a1a      	ldr	r2, [pc, #104]	; (80023fc <EndEffectorWrite+0x2e0>)
 8002392:	212a      	movs	r1, #42	; 0x2a
 8002394:	481a      	ldr	r0, [pc, #104]	; (8002400 <EndEffectorWrite+0x2e4>)
 8002396:	f003 ff85 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 800239a:	4b1b      	ldr	r3, [pc, #108]	; (8002408 <EndEffectorWrite+0x2ec>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023a0:	e04c      	b.n	800243c <EndEffectorWrite+0x320>
	case 8:
		if(EndEffectorWriteFlag == 1)
 80023a2:	4b19      	ldr	r3, [pc, #100]	; (8002408 <EndEffectorWrite+0x2ec>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d14a      	bne.n	8002440 <EndEffectorWrite+0x324>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, HAL_MAX_DELAY);
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295
 80023ae:	9300      	str	r3, [sp, #0]
 80023b0:	2304      	movs	r3, #4
 80023b2:	4a21      	ldr	r2, [pc, #132]	; (8002438 <EndEffectorWrite+0x31c>)
 80023b4:	212a      	movs	r1, #42	; 0x2a
 80023b6:	4812      	ldr	r0, [pc, #72]	; (8002400 <EndEffectorWrite+0x2e4>)
 80023b8:	f003 fe76 	bl	80060a8 <HAL_I2C_Master_Transmit>
				HAL_Delay(5);
 80023bc:	2005      	movs	r0, #5
 80023be:	f002 fa0d 	bl	80047dc <HAL_Delay>
				HAL_I2C_Master_Receive(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1, HAL_MAX_DELAY);
 80023c2:	f04f 33ff 	mov.w	r3, #4294967295
 80023c6:	9300      	str	r3, [sp, #0]
 80023c8:	2301      	movs	r3, #1
 80023ca:	4a0c      	ldr	r2, [pc, #48]	; (80023fc <EndEffectorWrite+0x2e0>)
 80023cc:	212a      	movs	r1, #42	; 0x2a
 80023ce:	480c      	ldr	r0, [pc, #48]	; (8002400 <EndEffectorWrite+0x2e4>)
 80023d0:	f003 ff68 	bl	80062a4 <HAL_I2C_Master_Receive>
				EndEffectorWriteFlag = 0;
 80023d4:	4b0c      	ldr	r3, [pc, #48]	; (8002408 <EndEffectorWrite+0x2ec>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
			}
		break;
 80023da:	e031      	b.n	8002440 <EndEffectorWrite+0x324>
		break;
 80023dc:	bf00      	nop
 80023de:	e030      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023e0:	bf00      	nop
 80023e2:	e02e      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023e4:	bf00      	nop
 80023e6:	e02c      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023e8:	bf00      	nop
 80023ea:	e02a      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023ec:	bf00      	nop
 80023ee:	e028      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023f0:	bf00      	nop
 80023f2:	e026      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 80023f4:	bf00      	nop
 80023f6:	e024      	b.n	8002442 <EndEffectorWrite+0x326>
 80023f8:	20000e54 	.word	0x20000e54
 80023fc:	200008d4 	.word	0x200008d4
 8002400:	20000378 	.word	0x20000378
 8002404:	200008d8 	.word	0x200008d8
 8002408:	200008d0 	.word	0x200008d0
 800240c:	2000021c 	.word	0x2000021c
 8002410:	20000228 	.word	0x20000228
 8002414:	2000022c 	.word	0x2000022c
 8002418:	20000230 	.word	0x20000230
 800241c:	20000238 	.word	0x20000238
 8002420:	20000db8 	.word	0x20000db8
 8002424:	20000200 	.word	0x20000200
 8002428:	2000023c 	.word	0x2000023c
 800242c:	20000734 	.word	0x20000734
 8002430:	20000234 	.word	0x20000234
 8002434:	20000220 	.word	0x20000220
 8002438:	20000224 	.word	0x20000224
		break;
 800243c:	bf00      	nop
 800243e:	e000      	b.n	8002442 <EndEffectorWrite+0x326>
		break;
 8002440:	bf00      	nop
	}
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	bd80      	pop	{r7, pc}

08002448 <VelocityApprox>:

void VelocityApprox()
{
 8002448:	b580      	push	{r7, lr}
 800244a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800244c:	4b12      	ldr	r3, [pc, #72]	; (8002498 <VelocityApprox+0x50>)
 800244e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002452:	461a      	mov	r2, r3
 8002454:	4b11      	ldr	r3, [pc, #68]	; (800249c <VelocityApprox+0x54>)
 8002456:	f9b3 3000 	ldrsh.w	r3, [r3]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4618      	mov	r0, r3
 800245e:	f7fe f80d 	bl	800047c <__aeabi_i2d>
 8002462:	a30b      	add	r3, pc, #44	; (adr r3, 8002490 <VelocityApprox+0x48>)
 8002464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002468:	f7fe f99c 	bl	80007a4 <__aeabi_ddiv>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4610      	mov	r0, r2
 8002472:	4619      	mov	r1, r3
 8002474:	f7fe fb3c 	bl	8000af0 <__aeabi_d2f>
 8002478:	4603      	mov	r3, r0
 800247a:	4a09      	ldr	r2, [pc, #36]	; (80024a0 <VelocityApprox+0x58>)
 800247c:	6013      	str	r3, [r2, #0]
	lastposition = position;
 800247e:	4b06      	ldr	r3, [pc, #24]	; (8002498 <VelocityApprox+0x50>)
 8002480:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002484:	4b05      	ldr	r3, [pc, #20]	; (800249c <VelocityApprox+0x54>)
 8002486:	801a      	strh	r2, [r3, #0]
}
 8002488:	bf00      	nop
 800248a:	bd80      	pop	{r7, pc}
 800248c:	f3af 8000 	nop.w
 8002490:	d2f1a9fc 	.word	0xd2f1a9fc
 8002494:	3f50624d 	.word	0x3f50624d
 8002498:	2000077c 	.word	0x2000077c
 800249c:	20000e58 	.word	0x20000e58
 80024a0:	200007a0 	.word	0x200007a0

080024a4 <AccelerationApprox>:

void AccelerationApprox()
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 80024a8:	4b09      	ldr	r3, [pc, #36]	; (80024d0 <AccelerationApprox+0x2c>)
 80024aa:	ed93 7a00 	vldr	s14, [r3]
 80024ae:	4b09      	ldr	r3, [pc, #36]	; (80024d4 <AccelerationApprox+0x30>)
 80024b0:	edd3 7a00 	vldr	s15, [r3]
 80024b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b8:	4b07      	ldr	r3, [pc, #28]	; (80024d8 <AccelerationApprox+0x34>)
 80024ba:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 80024be:	4b04      	ldr	r3, [pc, #16]	; (80024d0 <AccelerationApprox+0x2c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a04      	ldr	r2, [pc, #16]	; (80024d4 <AccelerationApprox+0x30>)
 80024c4:	6013      	str	r3, [r2, #0]

}
 80024c6:	bf00      	nop
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr
 80024d0:	200007a0 	.word	0x200007a0
 80024d4:	20000e5c 	.word	0x20000e5c
 80024d8:	200007a4 	.word	0x200007a4
 80024dc:	00000000 	.word	0x00000000

080024e0 <Routine>:

void Routine()
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
	position_f = position;
 80024e4:	4b28      	ldr	r3, [pc, #160]	; (8002588 <Routine+0xa8>)
 80024e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024ea:	ee07 3a90 	vmov	s15, r3
 80024ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024f2:	4b26      	ldr	r3, [pc, #152]	; (800258c <Routine+0xac>)
 80024f4:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;	//mm*10
 80024f8:	4b24      	ldr	r3, [pc, #144]	; (800258c <Routine+0xac>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4618      	mov	r0, r3
 80024fe:	f7fd ffcf 	bl	80004a0 <__aeabi_f2d>
 8002502:	a31f      	add	r3, pc, #124	; (adr r3, 8002580 <Routine+0xa0>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fe f822 	bl	8000550 <__aeabi_dmul>
 800250c:	4602      	mov	r2, r0
 800250e:	460b      	mov	r3, r1
 8002510:	4610      	mov	r0, r2
 8002512:	4619      	mov	r1, r3
 8002514:	f7fe facc 	bl	8000ab0 <__aeabi_d2uiz>
 8002518:	4603      	mov	r3, r0
 800251a:	b29a      	uxth	r2, r3
 800251c:	4b1c      	ldr	r3, [pc, #112]	; (8002590 <Routine+0xb0>)
 800251e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10		//Y Actual Position
 8002520:	4b1b      	ldr	r3, [pc, #108]	; (8002590 <Routine+0xb0>)
 8002522:	881a      	ldrh	r2, [r3, #0]
 8002524:	4b1b      	ldr	r3, [pc, #108]	; (8002594 <Routine+0xb4>)
 8002526:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45; //mm/s*10		//Y Actual Speed
 8002528:	4b1b      	ldr	r3, [pc, #108]	; (8002598 <Routine+0xb8>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4618      	mov	r0, r3
 800252e:	f7fd ffb7 	bl	80004a0 <__aeabi_f2d>
 8002532:	a313      	add	r3, pc, #76	; (adr r3, 8002580 <Routine+0xa0>)
 8002534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002538:	f7fe f80a 	bl	8000550 <__aeabi_dmul>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fab4 	bl	8000ab0 <__aeabi_d2uiz>
 8002548:	4603      	mov	r3, r0
 800254a:	b29a      	uxth	r2, r3
 800254c:	4b11      	ldr	r3, [pc, #68]	; (8002594 <Routine+0xb4>)
 800254e:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 	//mm/s^2*10		//Y Actual Acceleration
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <Routine+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4618      	mov	r0, r3
 8002556:	f7fd ffa3 	bl	80004a0 <__aeabi_f2d>
 800255a:	a309      	add	r3, pc, #36	; (adr r3, 8002580 <Routine+0xa0>)
 800255c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002560:	f7fd fff6 	bl	8000550 <__aeabi_dmul>
 8002564:	4602      	mov	r2, r0
 8002566:	460b      	mov	r3, r1
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe faa0 	bl	8000ab0 <__aeabi_d2uiz>
 8002570:	4603      	mov	r3, r0
 8002572:	b29a      	uxth	r2, r3
 8002574:	4b07      	ldr	r3, [pc, #28]	; (8002594 <Routine+0xb4>)
 8002576:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002578:	bf00      	nop
 800257a:	bd80      	pop	{r7, pc}
 800257c:	f3af 8000 	nop.w
 8002580:	cccccccd 	.word	0xcccccccd
 8002584:	3fdccccc 	.word	0x3fdccccc
 8002588:	2000077c 	.word	0x2000077c
 800258c:	20000780 	.word	0x20000780
 8002590:	20000784 	.word	0x20000784
 8002594:	20000db8 	.word	0x20000db8
 8002598:	200007a0 	.word	0x200007a0
 800259c:	200007a4 	.word	0x200007a4

080025a0 <PIDcal>:

float PIDcal()
{
 80025a0:	b480      	push	{r7}
 80025a2:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 80025a4:	4b28      	ldr	r3, [pc, #160]	; (8002648 <PIDcal+0xa8>)
 80025a6:	ed93 7a00 	vldr	s14, [r3]
 80025aa:	4b28      	ldr	r3, [pc, #160]	; (800264c <PIDcal+0xac>)
 80025ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80025b0:	ee07 3a90 	vmov	s15, r3
 80025b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	4b24      	ldr	r3, [pc, #144]	; (8002650 <PIDcal+0xb0>)
 80025be:	edc3 7a00 	vstr	s15, [r3]

	integral_p = integral_p + errorposition;
 80025c2:	4b24      	ldr	r3, [pc, #144]	; (8002654 <PIDcal+0xb4>)
 80025c4:	ed93 7a00 	vldr	s14, [r3]
 80025c8:	4b21      	ldr	r3, [pc, #132]	; (8002650 <PIDcal+0xb0>)
 80025ca:	edd3 7a00 	vldr	s15, [r3]
 80025ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <PIDcal+0xb4>)
 80025d4:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 80025d8:	4b1d      	ldr	r3, [pc, #116]	; (8002650 <PIDcal+0xb0>)
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	4b1e      	ldr	r3, [pc, #120]	; (8002658 <PIDcal+0xb8>)
 80025e0:	edd3 7a00 	vldr	s15, [r3]
 80025e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e8:	4b1c      	ldr	r3, [pc, #112]	; (800265c <PIDcal+0xbc>)
 80025ea:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 80025ee:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <PIDcal+0xc0>)
 80025f0:	ed93 7a00 	vldr	s14, [r3]
 80025f4:	4b16      	ldr	r3, [pc, #88]	; (8002650 <PIDcal+0xb0>)
 80025f6:	edd3 7a00 	vldr	s15, [r3]
 80025fa:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <PIDcal+0xc4>)
 8002600:	edd3 6a00 	vldr	s13, [r3]
 8002604:	4b13      	ldr	r3, [pc, #76]	; (8002654 <PIDcal+0xb4>)
 8002606:	edd3 7a00 	vldr	s15, [r3]
 800260a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800260e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002612:	4b15      	ldr	r3, [pc, #84]	; (8002668 <PIDcal+0xc8>)
 8002614:	edd3 6a00 	vldr	s13, [r3]
 8002618:	4b10      	ldr	r3, [pc, #64]	; (800265c <PIDcal+0xbc>)
 800261a:	edd3 7a00 	vldr	s15, [r3]
 800261e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <PIDcal+0xcc>)
 8002628:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 800262c:	4b08      	ldr	r3, [pc, #32]	; (8002650 <PIDcal+0xb0>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a09      	ldr	r2, [pc, #36]	; (8002658 <PIDcal+0xb8>)
 8002632:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <PIDcal+0xcc>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	ee07 3a90 	vmov	s15, r3
}
 800263c:	eeb0 0a67 	vmov.f32	s0, s15
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	20000788 	.word	0x20000788
 800264c:	2000077c 	.word	0x2000077c
 8002650:	2000078c 	.word	0x2000078c
 8002654:	20000798 	.word	0x20000798
 8002658:	20000794 	.word	0x20000794
 800265c:	2000079c 	.word	0x2000079c
 8002660:	20000214 	.word	0x20000214
 8002664:	200007b0 	.word	0x200007b0
 8002668:	200007b4 	.word	0x200007b4
 800266c:	20000790 	.word	0x20000790

08002670 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002670:	b580      	push	{r7, lr}
 8002672:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002674:	2140      	movs	r1, #64	; 0x40
 8002676:	4845      	ldr	r0, [pc, #276]	; (800278c <JoystickPinUpdate+0x11c>)
 8002678:	f003 fb88 	bl	8005d8c <HAL_GPIO_ReadPin>
 800267c:	4603      	mov	r3, r0
 800267e:	461a      	mov	r2, r3
 8002680:	4b43      	ldr	r3, [pc, #268]	; (8002790 <JoystickPinUpdate+0x120>)
 8002682:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002684:	4b42      	ldr	r3, [pc, #264]	; (8002790 <JoystickPinUpdate+0x120>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2b01      	cmp	r3, #1
 800268a:	d107      	bne.n	800269c <JoystickPinUpdate+0x2c>
 800268c:	4b40      	ldr	r3, [pc, #256]	; (8002790 <JoystickPinUpdate+0x120>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d103      	bne.n	800269c <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002694:	4b3e      	ldr	r3, [pc, #248]	; (8002790 <JoystickPinUpdate+0x120>)
 8002696:	2201      	movs	r2, #1
 8002698:	609a      	str	r2, [r3, #8]
 800269a:	e002      	b.n	80026a2 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 800269c:	4b3c      	ldr	r3, [pc, #240]	; (8002790 <JoystickPinUpdate+0x120>)
 800269e:	2200      	movs	r2, #0
 80026a0:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 80026a2:	4b3b      	ldr	r3, [pc, #236]	; (8002790 <JoystickPinUpdate+0x120>)
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	4a3a      	ldr	r2, [pc, #232]	; (8002790 <JoystickPinUpdate+0x120>)
 80026a8:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80026aa:	2120      	movs	r1, #32
 80026ac:	4839      	ldr	r0, [pc, #228]	; (8002794 <JoystickPinUpdate+0x124>)
 80026ae:	f003 fb6d 	bl	8005d8c <HAL_GPIO_ReadPin>
 80026b2:	4603      	mov	r3, r0
 80026b4:	461a      	mov	r2, r3
 80026b6:	4b38      	ldr	r3, [pc, #224]	; (8002798 <JoystickPinUpdate+0x128>)
 80026b8:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 80026ba:	4b37      	ldr	r3, [pc, #220]	; (8002798 <JoystickPinUpdate+0x128>)
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d107      	bne.n	80026d2 <JoystickPinUpdate+0x62>
 80026c2:	4b35      	ldr	r3, [pc, #212]	; (8002798 <JoystickPinUpdate+0x128>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d103      	bne.n	80026d2 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <JoystickPinUpdate+0x128>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	609a      	str	r2, [r3, #8]
 80026d0:	e002      	b.n	80026d8 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 80026d2:	4b31      	ldr	r3, [pc, #196]	; (8002798 <JoystickPinUpdate+0x128>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 80026d8:	4b2f      	ldr	r3, [pc, #188]	; (8002798 <JoystickPinUpdate+0x128>)
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4a2e      	ldr	r2, [pc, #184]	; (8002798 <JoystickPinUpdate+0x128>)
 80026de:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 80026e0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80026e4:	482b      	ldr	r0, [pc, #172]	; (8002794 <JoystickPinUpdate+0x124>)
 80026e6:	f003 fb51 	bl	8005d8c <HAL_GPIO_ReadPin>
 80026ea:	4603      	mov	r3, r0
 80026ec:	461a      	mov	r2, r3
 80026ee:	4b2b      	ldr	r3, [pc, #172]	; (800279c <JoystickPinUpdate+0x12c>)
 80026f0:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 80026f2:	4b2a      	ldr	r3, [pc, #168]	; (800279c <JoystickPinUpdate+0x12c>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d107      	bne.n	800270a <JoystickPinUpdate+0x9a>
 80026fa:	4b28      	ldr	r3, [pc, #160]	; (800279c <JoystickPinUpdate+0x12c>)
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002702:	4b26      	ldr	r3, [pc, #152]	; (800279c <JoystickPinUpdate+0x12c>)
 8002704:	2201      	movs	r2, #1
 8002706:	609a      	str	r2, [r3, #8]
 8002708:	e002      	b.n	8002710 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 800270a:	4b24      	ldr	r3, [pc, #144]	; (800279c <JoystickPinUpdate+0x12c>)
 800270c:	2200      	movs	r2, #0
 800270e:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <JoystickPinUpdate+0x12c>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a21      	ldr	r2, [pc, #132]	; (800279c <JoystickPinUpdate+0x12c>)
 8002716:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002718:	2120      	movs	r1, #32
 800271a:	481c      	ldr	r0, [pc, #112]	; (800278c <JoystickPinUpdate+0x11c>)
 800271c:	f003 fb36 	bl	8005d8c <HAL_GPIO_ReadPin>
 8002720:	4603      	mov	r3, r0
 8002722:	461a      	mov	r2, r3
 8002724:	4b1e      	ldr	r3, [pc, #120]	; (80027a0 <JoystickPinUpdate+0x130>)
 8002726:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002728:	4b1d      	ldr	r3, [pc, #116]	; (80027a0 <JoystickPinUpdate+0x130>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b01      	cmp	r3, #1
 800272e:	d107      	bne.n	8002740 <JoystickPinUpdate+0xd0>
 8002730:	4b1b      	ldr	r3, [pc, #108]	; (80027a0 <JoystickPinUpdate+0x130>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d103      	bne.n	8002740 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002738:	4b19      	ldr	r3, [pc, #100]	; (80027a0 <JoystickPinUpdate+0x130>)
 800273a:	2201      	movs	r2, #1
 800273c:	609a      	str	r2, [r3, #8]
 800273e:	e002      	b.n	8002746 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002740:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <JoystickPinUpdate+0x130>)
 8002742:	2200      	movs	r2, #0
 8002744:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002746:	4b16      	ldr	r3, [pc, #88]	; (80027a0 <JoystickPinUpdate+0x130>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	4a15      	ldr	r2, [pc, #84]	; (80027a0 <JoystickPinUpdate+0x130>)
 800274c:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 800274e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002752:	480e      	ldr	r0, [pc, #56]	; (800278c <JoystickPinUpdate+0x11c>)
 8002754:	f003 fb1a 	bl	8005d8c <HAL_GPIO_ReadPin>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	4b11      	ldr	r3, [pc, #68]	; (80027a4 <JoystickPinUpdate+0x134>)
 800275e:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002760:	4b10      	ldr	r3, [pc, #64]	; (80027a4 <JoystickPinUpdate+0x134>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <JoystickPinUpdate+0x108>
 8002768:	4b0e      	ldr	r3, [pc, #56]	; (80027a4 <JoystickPinUpdate+0x134>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d103      	bne.n	8002778 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002770:	4b0c      	ldr	r3, [pc, #48]	; (80027a4 <JoystickPinUpdate+0x134>)
 8002772:	2201      	movs	r2, #1
 8002774:	609a      	str	r2, [r3, #8]
 8002776:	e002      	b.n	800277e <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002778:	4b0a      	ldr	r3, [pc, #40]	; (80027a4 <JoystickPinUpdate+0x134>)
 800277a:	2200      	movs	r2, #0
 800277c:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 800277e:	4b09      	ldr	r3, [pc, #36]	; (80027a4 <JoystickPinUpdate+0x134>)
 8002780:	685b      	ldr	r3, [r3, #4]
 8002782:	4a08      	ldr	r2, [pc, #32]	; (80027a4 <JoystickPinUpdate+0x134>)
 8002784:	6013      	str	r3, [r2, #0]
}
 8002786:	bf00      	nop
 8002788:	bd80      	pop	{r7, pc}
 800278a:	bf00      	nop
 800278c:	40020400 	.word	0x40020400
 8002790:	20000888 	.word	0x20000888
 8002794:	40020000 	.word	0x40020000
 8002798:	20000894 	.word	0x20000894
 800279c:	200008a0 	.word	0x200008a0
 80027a0:	200008ac 	.word	0x200008ac
 80027a4:	200008b8 	.word	0x200008b8

080027a8 <JoystickControl>:

void JoystickControl()
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 80027ac:	4b5c      	ldr	r3, [pc, #368]	; (8002920 <JoystickControl+0x178>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	d106      	bne.n	80027c2 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 80027b4:	4b5b      	ldr	r3, [pc, #364]	; (8002924 <JoystickControl+0x17c>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 80027ba:	4b59      	ldr	r3, [pc, #356]	; (8002920 <JoystickControl+0x178>)
 80027bc:	2200      	movs	r2, #0
 80027be:	609a      	str	r2, [r3, #8]
 80027c0:	e014      	b.n	80027ec <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 80027c2:	4b59      	ldr	r3, [pc, #356]	; (8002928 <JoystickControl+0x180>)
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d106      	bne.n	80027d8 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 80027ca:	4b56      	ldr	r3, [pc, #344]	; (8002924 <JoystickControl+0x17c>)
 80027cc:	2201      	movs	r2, #1
 80027ce:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 80027d0:	4b55      	ldr	r3, [pc, #340]	; (8002928 <JoystickControl+0x180>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	609a      	str	r2, [r3, #8]
 80027d6:	e009      	b.n	80027ec <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 80027d8:	4b54      	ldr	r3, [pc, #336]	; (800292c <JoystickControl+0x184>)
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	2b01      	cmp	r3, #1
 80027de:	d105      	bne.n	80027ec <JoystickControl+0x44>
	{
		JoySpeed = 2;
 80027e0:	4b50      	ldr	r3, [pc, #320]	; (8002924 <JoystickControl+0x17c>)
 80027e2:	2202      	movs	r2, #2
 80027e4:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <JoystickControl+0x184>)
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 80027ec:	4b4d      	ldr	r3, [pc, #308]	; (8002924 <JoystickControl+0x17c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b02      	cmp	r3, #2
 80027f2:	f000 8088 	beq.w	8002906 <JoystickControl+0x15e>
 80027f6:	2b02      	cmp	r3, #2
 80027f8:	f300 8090 	bgt.w	800291c <JoystickControl+0x174>
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d002      	beq.n	8002806 <JoystickControl+0x5e>
 8002800:	2b01      	cmp	r3, #1
 8002802:	d041      	beq.n	8002888 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
		Homing();
		break;
	}
}
 8002804:	e08a      	b.n	800291c <JoystickControl+0x174>
		if(XYSwitch[1] > 2150)
 8002806:	4b4a      	ldr	r3, [pc, #296]	; (8002930 <JoystickControl+0x188>)
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	f640 0266 	movw	r2, #2150	; 0x866
 800280e:	4293      	cmp	r3, r2
 8002810:	dd09      	ble.n	8002826 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002812:	4b48      	ldr	r3, [pc, #288]	; (8002934 <JoystickControl+0x18c>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,400);
 800281a:	4b46      	ldr	r3, [pc, #280]	; (8002934 <JoystickControl+0x18c>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002822:	635a      	str	r2, [r3, #52]	; 0x34
 8002824:	e016      	b.n	8002854 <JoystickControl+0xac>
		else if(XYSwitch[1] < 2000)
 8002826:	4b42      	ldr	r3, [pc, #264]	; (8002930 <JoystickControl+0x188>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800282e:	da09      	bge.n	8002844 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,400);
 8002830:	4b40      	ldr	r3, [pc, #256]	; (8002934 <JoystickControl+0x18c>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8002838:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800283a:	4b3e      	ldr	r3, [pc, #248]	; (8002934 <JoystickControl+0x18c>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2200      	movs	r2, #0
 8002840:	635a      	str	r2, [r3, #52]	; 0x34
 8002842:	e007      	b.n	8002854 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002844:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <JoystickControl+0x18c>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2200      	movs	r2, #0
 800284a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800284c:	4b39      	ldr	r3, [pc, #228]	; (8002934 <JoystickControl+0x18c>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2200      	movs	r2, #0
 8002852:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2150)
 8002854:	4b36      	ldr	r3, [pc, #216]	; (8002930 <JoystickControl+0x188>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f640 0266 	movw	r2, #2150	; 0x866
 800285c:	4293      	cmp	r3, r2
 800285e:	dd04      	ble.n	800286a <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002860:	4b35      	ldr	r3, [pc, #212]	; (8002938 <JoystickControl+0x190>)
 8002862:	2204      	movs	r2, #4
 8002864:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002868:	e058      	b.n	800291c <JoystickControl+0x174>
		else if(XYSwitch[0] < 2000)
 800286a:	4b31      	ldr	r3, [pc, #196]	; (8002930 <JoystickControl+0x188>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002872:	da04      	bge.n	800287e <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002874:	4b30      	ldr	r3, [pc, #192]	; (8002938 <JoystickControl+0x190>)
 8002876:	2208      	movs	r2, #8
 8002878:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800287c:	e04e      	b.n	800291c <JoystickControl+0x174>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 800287e:	4b2e      	ldr	r3, [pc, #184]	; (8002938 <JoystickControl+0x190>)
 8002880:	2200      	movs	r2, #0
 8002882:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002886:	e049      	b.n	800291c <JoystickControl+0x174>
		if(XYSwitch[1] > 2150)
 8002888:	4b29      	ldr	r3, [pc, #164]	; (8002930 <JoystickControl+0x188>)
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f640 0266 	movw	r2, #2150	; 0x866
 8002890:	4293      	cmp	r3, r2
 8002892:	dd08      	ble.n	80028a6 <JoystickControl+0xfe>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002894:	4b27      	ldr	r3, [pc, #156]	; (8002934 <JoystickControl+0x18c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	2200      	movs	r2, #0
 800289a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 800289c:	4b25      	ldr	r3, [pc, #148]	; (8002934 <JoystickControl+0x18c>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	22c8      	movs	r2, #200	; 0xc8
 80028a2:	635a      	str	r2, [r3, #52]	; 0x34
 80028a4:	e015      	b.n	80028d2 <JoystickControl+0x12a>
		else if(XYSwitch[1] < 2000)
 80028a6:	4b22      	ldr	r3, [pc, #136]	; (8002930 <JoystickControl+0x188>)
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028ae:	da08      	bge.n	80028c2 <JoystickControl+0x11a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,200);
 80028b0:	4b20      	ldr	r3, [pc, #128]	; (8002934 <JoystickControl+0x18c>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	22c8      	movs	r2, #200	; 0xc8
 80028b6:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80028b8:	4b1e      	ldr	r3, [pc, #120]	; (8002934 <JoystickControl+0x18c>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2200      	movs	r2, #0
 80028be:	635a      	str	r2, [r3, #52]	; 0x34
 80028c0:	e007      	b.n	80028d2 <JoystickControl+0x12a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80028c2:	4b1c      	ldr	r3, [pc, #112]	; (8002934 <JoystickControl+0x18c>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2200      	movs	r2, #0
 80028c8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80028ca:	4b1a      	ldr	r3, [pc, #104]	; (8002934 <JoystickControl+0x18c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 2150)
 80028d2:	4b17      	ldr	r3, [pc, #92]	; (8002930 <JoystickControl+0x188>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f640 0266 	movw	r2, #2150	; 0x866
 80028da:	4293      	cmp	r3, r2
 80028dc:	dd04      	ble.n	80028e8 <JoystickControl+0x140>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80028de:	4b16      	ldr	r3, [pc, #88]	; (8002938 <JoystickControl+0x190>)
 80028e0:	2204      	movs	r2, #4
 80028e2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80028e6:	e019      	b.n	800291c <JoystickControl+0x174>
		else if(XYSwitch[0] < 2000)
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <JoystickControl+0x188>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80028f0:	da04      	bge.n	80028fc <JoystickControl+0x154>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80028f2:	4b11      	ldr	r3, [pc, #68]	; (8002938 <JoystickControl+0x190>)
 80028f4:	2208      	movs	r2, #8
 80028f6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80028fa:	e00f      	b.n	800291c <JoystickControl+0x174>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80028fc:	4b0e      	ldr	r3, [pc, #56]	; (8002938 <JoystickControl+0x190>)
 80028fe:	2200      	movs	r2, #0
 8002900:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002904:	e00a      	b.n	800291c <JoystickControl+0x174>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002906:	4b0b      	ldr	r3, [pc, #44]	; (8002934 <JoystickControl+0x18c>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	2200      	movs	r2, #0
 800290c:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,200);
 800290e:	4b09      	ldr	r3, [pc, #36]	; (8002934 <JoystickControl+0x18c>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	22c8      	movs	r2, #200	; 0xc8
 8002914:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002916:	f7ff fbd7 	bl	80020c8 <Homing>
		break;
 800291a:	bf00      	nop
}
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	200008ac 	.word	0x200008ac
 8002924:	200008cc 	.word	0x200008cc
 8002928:	200008a0 	.word	0x200008a0
 800292c:	200008b8 	.word	0x200008b8
 8002930:	200008c4 	.word	0x200008c4
 8002934:	200003cc 	.word	0x200003cc
 8002938:	20000db8 	.word	0x20000db8
 800293c:	00000000 	.word	0x00000000

08002940 <JoystickLocationState>:

void JoystickLocationState()
{
 8002940:	b580      	push	{r7, lr}
 8002942:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002944:	4b46      	ldr	r3, [pc, #280]	; (8002a60 <JoystickLocationState+0x120>)
 8002946:	885b      	ldrh	r3, [r3, #2]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d112      	bne.n	8002972 <JoystickLocationState+0x32>
	{
		registerFrame[1].U16 = 0;
 800294c:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <JoystickLocationState+0x120>)
 800294e:	2200      	movs	r2, #0
 8002950:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002952:	4b43      	ldr	r3, [pc, #268]	; (8002a60 <JoystickLocationState+0x120>)
 8002954:	2201      	movs	r2, #1
 8002956:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002958:	4b42      	ldr	r3, [pc, #264]	; (8002a64 <JoystickLocationState+0x124>)
 800295a:	2201      	movs	r2, #1
 800295c:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 800295e:	4b40      	ldr	r3, [pc, #256]	; (8002a60 <JoystickLocationState+0x120>)
 8002960:	2201      	movs	r2, #1
 8002962:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002964:	4b40      	ldr	r3, [pc, #256]	; (8002a68 <JoystickLocationState+0x128>)
 8002966:	2201      	movs	r2, #1
 8002968:	701a      	strb	r2, [r3, #0]
		state = 1;					//Go Pick state
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <JoystickLocationState+0x12c>)
 800296c:	2201      	movs	r2, #1
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	e015      	b.n	800299e <JoystickLocationState+0x5e>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002972:	4b3b      	ldr	r3, [pc, #236]	; (8002a60 <JoystickLocationState+0x120>)
 8002974:	885b      	ldrh	r3, [r3, #2]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d111      	bne.n	800299e <JoystickLocationState+0x5e>
	{
		registerFrame[1].U16 = 0;
 800297a:	4b39      	ldr	r3, [pc, #228]	; (8002a60 <JoystickLocationState+0x120>)
 800297c:	2200      	movs	r2, #0
 800297e:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002980:	4b37      	ldr	r3, [pc, #220]	; (8002a60 <JoystickLocationState+0x120>)
 8002982:	2202      	movs	r2, #2
 8002984:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002986:	4b37      	ldr	r3, [pc, #220]	; (8002a64 <JoystickLocationState+0x124>)
 8002988:	2201      	movs	r2, #1
 800298a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//Laser On
 800298c:	4b34      	ldr	r3, [pc, #208]	; (8002a60 <JoystickLocationState+0x120>)
 800298e:	2201      	movs	r2, #1
 8002990:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002992:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <JoystickLocationState+0x128>)
 8002994:	2201      	movs	r2, #1
 8002996:	701a      	strb	r2, [r3, #0]
		state = 3;					//Go Place state
 8002998:	4b34      	ldr	r3, [pc, #208]	; (8002a6c <JoystickLocationState+0x12c>)
 800299a:	2203      	movs	r2, #3
 800299c:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 800299e:	4b30      	ldr	r3, [pc, #192]	; (8002a60 <JoystickLocationState+0x120>)
 80029a0:	885b      	ldrh	r3, [r3, #2]
 80029a2:	2b08      	cmp	r3, #8
 80029a4:	d102      	bne.n	80029ac <JoystickLocationState+0x6c>
	{
		state = 5;
 80029a6:	4b31      	ldr	r3, [pc, #196]	; (8002a6c <JoystickLocationState+0x12c>)
 80029a8:	2205      	movs	r2, #5
 80029aa:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 80029ac:	4b2f      	ldr	r3, [pc, #188]	; (8002a6c <JoystickLocationState+0x12c>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	3b01      	subs	r3, #1
 80029b2:	2b04      	cmp	r3, #4
 80029b4:	f200 860e 	bhi.w	80035d4 <JoystickLocationState+0xc94>
 80029b8:	a201      	add	r2, pc, #4	; (adr r2, 80029c0 <JoystickLocationState+0x80>)
 80029ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029be:	bf00      	nop
 80029c0:	080029d5 	.word	0x080029d5
 80029c4:	08002a81 	.word	0x08002a81
 80029c8:	08002f93 	.word	0x08002f93
 80029cc:	08003071 	.word	0x08003071
 80029d0:	08003577 	.word	0x08003577
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 80029d4:	4b26      	ldr	r3, [pc, #152]	; (8002a70 <JoystickLocationState+0x130>)
 80029d6:	f04f 0200 	mov.w	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 80029dc:	4b24      	ldr	r3, [pc, #144]	; (8002a70 <JoystickLocationState+0x130>)
 80029de:	f04f 0200 	mov.w	r2, #0
 80029e2:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 80029e4:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <JoystickLocationState+0x130>)
 80029e6:	f04f 0200 	mov.w	r2, #0
 80029ea:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 80029ec:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <JoystickLocationState+0x130>)
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 80029f4:	4b1f      	ldr	r3, [pc, #124]	; (8002a74 <JoystickLocationState+0x134>)
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	2b01      	cmp	r3, #1
 80029fa:	f040 85e2 	bne.w	80035c2 <JoystickLocationState+0xc82>
		{
			PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 80029fe:	4b18      	ldr	r3, [pc, #96]	; (8002a60 <JoystickLocationState+0x120>)
 8002a00:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a04:	4a1c      	ldr	r2, [pc, #112]	; (8002a78 <JoystickLocationState+0x138>)
 8002a06:	fba2 2303 	umull	r2, r3, r2, r3
 8002a0a:	08db      	lsrs	r3, r3, #3
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	ee07 3a90 	vmov	s15, r3
 8002a12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a16:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <JoystickLocationState+0x130>)
 8002a18:	edc3 7a00 	vstr	s15, [r3]
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002a1c:	4b17      	ldr	r3, [pc, #92]	; (8002a7c <JoystickLocationState+0x13c>)
 8002a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7fd fd2a 	bl	800047c <__aeabi_i2d>
 8002a28:	a30b      	add	r3, pc, #44	; (adr r3, 8002a58 <JoystickLocationState+0x118>)
 8002a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a2e:	f7fd fd8f 	bl	8000550 <__aeabi_dmul>
 8002a32:	4602      	mov	r2, r0
 8002a34:	460b      	mov	r3, r1
 8002a36:	4610      	mov	r0, r2
 8002a38:	4619      	mov	r1, r3
 8002a3a:	f7fe f859 	bl	8000af0 <__aeabi_d2f>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	4a0b      	ldr	r2, [pc, #44]	; (8002a70 <JoystickLocationState+0x130>)
 8002a42:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002a44:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <JoystickLocationState+0x134>)
 8002a46:	2200      	movs	r2, #0
 8002a48:	609a      	str	r2, [r3, #8]
			state = 2;
 8002a4a:	4b08      	ldr	r3, [pc, #32]	; (8002a6c <JoystickLocationState+0x12c>)
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	601a      	str	r2, [r3, #0]
		}
		break;
 8002a50:	f000 bdb7 	b.w	80035c2 <JoystickLocationState+0xc82>
 8002a54:	f3af 8000 	nop.w
 8002a58:	70a3d70a 	.word	0x70a3d70a
 8002a5c:	3fa70a3d 	.word	0x3fa70a3d
 8002a60:	20000db8 	.word	0x20000db8
 8002a64:	200008d8 	.word	0x200008d8
 8002a68:	200008d0 	.word	0x200008d0
 8002a6c:	20000218 	.word	0x20000218
 8002a70:	200007b8 	.word	0x200007b8
 8002a74:	20000888 	.word	0x20000888
 8002a78:	cccccccd 	.word	0xcccccccd
 8002a7c:	2000077c 	.word	0x2000077c

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002a80:	4bd5      	ldr	r3, [pc, #852]	; (8002dd8 <JoystickLocationState+0x498>)
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	2b01      	cmp	r3, #1
 8002a86:	f040 8278 	bne.w	8002f7a <JoystickLocationState+0x63a>
		{
			PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 2 //mm
 8002a8a:	4bd4      	ldr	r3, [pc, #848]	; (8002ddc <JoystickLocationState+0x49c>)
 8002a8c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002a90:	4ad3      	ldr	r2, [pc, #844]	; (8002de0 <JoystickLocationState+0x4a0>)
 8002a92:	fba2 2303 	umull	r2, r3, r2, r3
 8002a96:	08db      	lsrs	r3, r3, #3
 8002a98:	b29b      	uxth	r3, r3
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aa2:	4bd0      	ldr	r3, [pc, #832]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002aa4:	edc3 7a02 	vstr	s15, [r3, #8]
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8002aa8:	4bcf      	ldr	r3, [pc, #828]	; (8002de8 <JoystickLocationState+0x4a8>)
 8002aaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7fd fce4 	bl	800047c <__aeabi_i2d>
 8002ab4:	a3c6      	add	r3, pc, #792	; (adr r3, 8002dd0 <JoystickLocationState+0x490>)
 8002ab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aba:	f7fd fd49 	bl	8000550 <__aeabi_dmul>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	4610      	mov	r0, r2
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	f7fe f813 	bl	8000af0 <__aeabi_d2f>
 8002aca:	4603      	mov	r3, r0
 8002acc:	4ac5      	ldr	r2, [pc, #788]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002ace:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8002ad0:	4bc1      	ldr	r3, [pc, #772]	; (8002dd8 <JoystickLocationState+0x498>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/60;
 8002ad6:	4bc3      	ldr	r3, [pc, #780]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002ad8:	ed93 7a02 	vldr	s14, [r3, #8]
 8002adc:	4bc1      	ldr	r3, [pc, #772]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002ae6:	eddf 6ac1 	vldr	s13, [pc, #772]	; 8002dec <JoystickLocationState+0x4ac>
 8002aea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002aee:	4bc0      	ldr	r3, [pc, #768]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002af0:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/60;
 8002af4:	4bbb      	ldr	r3, [pc, #748]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002af6:	ed93 7a03 	vldr	s14, [r3, #12]
 8002afa:	4bba      	ldr	r3, [pc, #744]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002afc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b04:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8002dec <JoystickLocationState+0x4ac>
 8002b08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b0c:	4bb9      	ldr	r3, [pc, #740]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002b0e:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 8002b12:	4bb7      	ldr	r3, [pc, #732]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002b14:	edd3 7a00 	vldr	s15, [r3]
 8002b18:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b1c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b20:	4bb4      	ldr	r3, [pc, #720]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002b22:	edd3 7a00 	vldr	s15, [r3]
 8002b26:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b2a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b32:	4bac      	ldr	r3, [pc, #688]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b34:	edd3 7a00 	vldr	s15, [r3]
 8002b38:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3c:	4ba9      	ldr	r3, [pc, #676]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b3e:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8002b42:	4bac      	ldr	r3, [pc, #688]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002b44:	edd3 7a00 	vldr	s15, [r3]
 8002b48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002b4c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b50:	4ba7      	ldr	r3, [pc, #668]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002b52:	edd3 7a00 	vldr	s15, [r3]
 8002b56:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002b5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b62:	4ba0      	ldr	r3, [pc, #640]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b64:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b6c:	4b9d      	ldr	r3, [pc, #628]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b6e:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 8002b72:	4b9f      	ldr	r3, [pc, #636]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002b7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b80:	4b9c      	ldr	r3, [pc, #624]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002b82:	edd3 7a00 	vldr	s15, [r3]
 8002b86:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002b8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b92:	4b94      	ldr	r3, [pc, #592]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b94:	edd3 7a00 	vldr	s15, [r3]
 8002b98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b9c:	4b91      	ldr	r3, [pc, #580]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002b9e:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8002ba2:	4b94      	ldr	r3, [pc, #592]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002ba4:	edd3 7a00 	vldr	s15, [r3]
 8002ba8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002bac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002bb0:	4b8f      	ldr	r3, [pc, #572]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002bb2:	edd3 7a00 	vldr	s15, [r3]
 8002bb6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002bba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bbe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bc2:	4b88      	ldr	r3, [pc, #544]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002bc4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bcc:	4b85      	ldr	r3, [pc, #532]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002bce:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 8002bd2:	4b87      	ldr	r3, [pc, #540]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002bd4:	edd3 7a00 	vldr	s15, [r3]
 8002bd8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002df8 <JoystickLocationState+0x4b8>
 8002bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002be0:	4b84      	ldr	r3, [pc, #528]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	4b7c      	ldr	r3, [pc, #496]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002bf4:	edd3 7a00 	vldr	s15, [r3]
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	4b79      	ldr	r3, [pc, #484]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002bfe:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 8002c02:	4b7c      	ldr	r3, [pc, #496]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002c04:	edd3 7a00 	vldr	s15, [r3]
 8002c08:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 8002df8 <JoystickLocationState+0x4b8>
 8002c0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c10:	4b77      	ldr	r3, [pc, #476]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8002c1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c22:	4b70      	ldr	r3, [pc, #448]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c24:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c2c:	4b6d      	ldr	r3, [pc, #436]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c2e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8002c32:	4b6f      	ldr	r3, [pc, #444]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c40:	4b6c      	ldr	r3, [pc, #432]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002c42:	edd3 7a00 	vldr	s15, [r3]
 8002c46:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002c4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c52:	4b64      	ldr	r3, [pc, #400]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c5c:	4b61      	ldr	r3, [pc, #388]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c5e:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8002c62:	4b64      	ldr	r3, [pc, #400]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002c64:	edd3 7a00 	vldr	s15, [r3]
 8002c68:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002c6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002c70:	4b5f      	ldr	r3, [pc, #380]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002c72:	edd3 7a00 	vldr	s15, [r3]
 8002c76:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002c7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002c7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c82:	4b58      	ldr	r3, [pc, #352]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c84:	edd3 7a01 	vldr	s15, [r3, #4]
 8002c88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c8c:	4b55      	ldr	r3, [pc, #340]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002c8e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8002c92:	4b57      	ldr	r3, [pc, #348]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002c94:	edd3 7a00 	vldr	s15, [r3]
 8002c98:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002c9c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002ca0:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002ca2:	edd3 7a00 	vldr	s15, [r3]
 8002ca6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002caa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cbc:	4b49      	ldr	r3, [pc, #292]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002cbe:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 8002cc2:	4b4c      	ldr	r3, [pc, #304]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002cc4:	edd3 7a00 	vldr	s15, [r3]
 8002cc8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002ccc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002cd0:	4b47      	ldr	r3, [pc, #284]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002cd2:	edd3 7a00 	vldr	s15, [r3]
 8002cd6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002cda:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002cde:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ce2:	4b40      	ldr	r3, [pc, #256]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002ce4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cec:	4b3d      	ldr	r3, [pc, #244]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002cee:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 8002cf2:	4b3f      	ldr	r3, [pc, #252]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002cf4:	edd3 7a00 	vldr	s15, [r3]
 8002cf8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8002df8 <JoystickLocationState+0x4b8>
 8002cfc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d00:	4b3c      	ldr	r3, [pc, #240]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002d02:	edd3 7a00 	vldr	s15, [r3]
 8002d06:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002d0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d12:	4b34      	ldr	r3, [pc, #208]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d14:	edd3 7a00 	vldr	s15, [r3]
 8002d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d1c:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d1e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8002d22:	4b34      	ldr	r3, [pc, #208]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8002df8 <JoystickLocationState+0x4b8>
 8002d2c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d30:	4b2f      	ldr	r3, [pc, #188]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002d32:	edd3 7a00 	vldr	s15, [r3]
 8002d36:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002d3a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d42:	4b28      	ldr	r3, [pc, #160]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d44:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d48:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d4c:	4b25      	ldr	r3, [pc, #148]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d4e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8002d52:	4b27      	ldr	r3, [pc, #156]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002d54:	edd3 7a00 	vldr	s15, [r3]
 8002d58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d5c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d60:	4b24      	ldr	r3, [pc, #144]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eddf 6a25 	vldr	s13, [pc, #148]	; 8002dfc <JoystickLocationState+0x4bc>
 8002d6a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002d72:	4b1c      	ldr	r3, [pc, #112]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d74:	edd3 7a00 	vldr	s15, [r3]
 8002d78:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d7c:	4b19      	ldr	r3, [pc, #100]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002d7e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8002d82:	4b1c      	ldr	r3, [pc, #112]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002d84:	edd3 7a00 	vldr	s15, [r3]
 8002d88:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002d8c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d90:	4b17      	ldr	r3, [pc, #92]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8002e00 <JoystickLocationState+0x4c0>
 8002d9a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002d9e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002da4:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dac:	4b0d      	ldr	r3, [pc, #52]	; (8002de4 <JoystickLocationState+0x4a4>)
 8002dae:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <JoystickLocationState+0x4b0>)
 8002db4:	edd3 7a00 	vldr	s15, [r3]
 8002db8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002dbc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002dc0:	4b0c      	ldr	r3, [pc, #48]	; (8002df4 <JoystickLocationState+0x4b4>)
 8002dc2:	edd3 7a00 	vldr	s15, [r3]
 8002dc6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 8002dfc <JoystickLocationState+0x4bc>
 8002dca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002dce:	e019      	b.n	8002e04 <JoystickLocationState+0x4c4>
 8002dd0:	70a3d70a 	.word	0x70a3d70a
 8002dd4:	3fa70a3d 	.word	0x3fa70a3d
 8002dd8:	20000888 	.word	0x20000888
 8002ddc:	20000db8 	.word	0x20000db8
 8002de0:	cccccccd 	.word	0xcccccccd
 8002de4:	200007b8 	.word	0x200007b8
 8002de8:	2000077c 	.word	0x2000077c
 8002dec:	42700000 	.word	0x42700000
 8002df0:	20000880 	.word	0x20000880
 8002df4:	20000884 	.word	0x20000884
 8002df8:	42480000 	.word	0x42480000
 8002dfc:	42200000 	.word	0x42200000
 8002e00:	c2200000 	.word	0xc2200000
 8002e04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e08:	4b8b      	ldr	r3, [pc, #556]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e0a:	edd3 7a00 	vldr	s15, [r3]
 8002e0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e12:	4b89      	ldr	r3, [pc, #548]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e14:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 8002e18:	4b88      	ldr	r3, [pc, #544]	; (800303c <JoystickLocationState+0x6fc>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002e22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e26:	4b86      	ldr	r3, [pc, #536]	; (8003040 <JoystickLocationState+0x700>)
 8002e28:	edd3 7a00 	vldr	s15, [r3]
 8002e2c:	eddf 6a85 	vldr	s13, [pc, #532]	; 8003044 <JoystickLocationState+0x704>
 8002e30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e34:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e38:	4b7f      	ldr	r3, [pc, #508]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e3a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e42:	4b7d      	ldr	r3, [pc, #500]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e44:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8002e48:	4b7d      	ldr	r3, [pc, #500]	; (8003040 <JoystickLocationState+0x700>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8003048 <JoystickLocationState+0x708>
 8002e52:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e56:	4b79      	ldr	r3, [pc, #484]	; (800303c <JoystickLocationState+0x6fc>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800304c <JoystickLocationState+0x70c>
 8002e60:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e64:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e68:	4b73      	ldr	r3, [pc, #460]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e6a:	edd3 7a00 	vldr	s15, [r3]
 8002e6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e72:	4b71      	ldr	r3, [pc, #452]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e74:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8002e78:	4b70      	ldr	r3, [pc, #448]	; (800303c <JoystickLocationState+0x6fc>)
 8002e7a:	edd3 7a00 	vldr	s15, [r3]
 8002e7e:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8003048 <JoystickLocationState+0x708>
 8002e82:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e86:	4b6e      	ldr	r3, [pc, #440]	; (8003040 <JoystickLocationState+0x700>)
 8002e88:	edd3 7a00 	vldr	s15, [r3]
 8002e8c:	eddf 6a6d 	vldr	s13, [pc, #436]	; 8003044 <JoystickLocationState+0x704>
 8002e90:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002e94:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002e98:	4b67      	ldr	r3, [pc, #412]	; (8003038 <JoystickLocationState+0x6f8>)
 8002e9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8002e9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ea2:	4b65      	ldr	r3, [pc, #404]	; (8003038 <JoystickLocationState+0x6f8>)
 8002ea4:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8002ea8:	4b63      	ldr	r3, [pc, #396]	; (8003038 <JoystickLocationState+0x6f8>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	4b63      	ldr	r3, [pc, #396]	; (800303c <JoystickLocationState+0x6fc>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003048 <JoystickLocationState+0x708>
 8002eb8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002ebc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec0:	4b5d      	ldr	r3, [pc, #372]	; (8003038 <JoystickLocationState+0x6f8>)
 8002ec2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	; (8003038 <JoystickLocationState+0x6f8>)
 8002ec8:	ed93 7a01 	vldr	s14, [r3, #4]
 8002ecc:	4b5c      	ldr	r3, [pc, #368]	; (8003040 <JoystickLocationState+0x700>)
 8002ece:	edd3 7a00 	vldr	s15, [r3]
 8002ed2:	eddf 6a5d 	vldr	s13, [pc, #372]	; 8003048 <JoystickLocationState+0x708>
 8002ed6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002eda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ede:	4b56      	ldr	r3, [pc, #344]	; (8003038 <JoystickLocationState+0x6f8>)
 8002ee0:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8002ee4:	4b56      	ldr	r3, [pc, #344]	; (8003040 <JoystickLocationState+0x700>)
 8002ee6:	edd3 7a00 	vldr	s15, [r3]
 8002eea:	eeb0 0a67 	vmov.f32	s0, s15
 8002eee:	f008 ff9b 	bl	800be28 <acosf>
 8002ef2:	ee10 3a10 	vmov	r3, s0
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f7fd fad2 	bl	80004a0 <__aeabi_f2d>
 8002efc:	a34a      	add	r3, pc, #296	; (adr r3, 8003028 <JoystickLocationState+0x6e8>)
 8002efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f02:	f7fd fb25 	bl	8000550 <__aeabi_dmul>
 8002f06:	4602      	mov	r2, r0
 8002f08:	460b      	mov	r3, r1
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	f7fd fdef 	bl	8000af0 <__aeabi_d2f>
 8002f12:	4603      	mov	r3, r0
 8002f14:	4a48      	ldr	r2, [pc, #288]	; (8003038 <JoystickLocationState+0x6f8>)
 8002f16:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 8002f18:	4b47      	ldr	r3, [pc, #284]	; (8003038 <JoystickLocationState+0x6f8>)
 8002f1a:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8002f1e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f22:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f2a:	ee17 3a90 	vmov	r3, s15
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	4b47      	ldr	r3, [pc, #284]	; (8003050 <JoystickLocationState+0x710>)
 8002f32:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8002f36:	4b40      	ldr	r3, [pc, #256]	; (8003038 <JoystickLocationState+0x6f8>)
 8002f38:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8002f3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002f40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f48:	ee17 3a90 	vmov	r3, s15
 8002f4c:	b29a      	uxth	r2, r3
 8002f4e:	4b40      	ldr	r3, [pc, #256]	; (8003050 <JoystickLocationState+0x710>)
 8002f50:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 8002f54:	4b38      	ldr	r3, [pc, #224]	; (8003038 <JoystickLocationState+0x6f8>)
 8002f56:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8002f5a:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8003054 <JoystickLocationState+0x714>
 8002f5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f66:	ee17 3a90 	vmov	r3, s15
 8002f6a:	b29a      	uxth	r2, r3
 8002f6c:	4b38      	ldr	r3, [pc, #224]	; (8003050 <JoystickLocationState+0x710>)
 8002f6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 8002f72:	4b37      	ldr	r3, [pc, #220]	; (8003050 <JoystickLocationState+0x710>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8002f78:	e325      	b.n	80035c6 <JoystickLocationState+0xc86>
		else if (ResetButton.flag == 1)
 8002f7a:	4b37      	ldr	r3, [pc, #220]	; (8003058 <JoystickLocationState+0x718>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	f040 8321 	bne.w	80035c6 <JoystickLocationState+0xc86>
			ResetButton.flag = 0;
 8002f84:	4b34      	ldr	r3, [pc, #208]	; (8003058 <JoystickLocationState+0x718>)
 8002f86:	2200      	movs	r2, #0
 8002f88:	609a      	str	r2, [r3, #8]
			state = 1;
 8002f8a:	4b34      	ldr	r3, [pc, #208]	; (800305c <JoystickLocationState+0x71c>)
 8002f8c:	2201      	movs	r2, #1
 8002f8e:	601a      	str	r2, [r3, #0]
		break;
 8002f90:	e319      	b.n	80035c6 <JoystickLocationState+0xc86>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8002f92:	4b33      	ldr	r3, [pc, #204]	; (8003060 <JoystickLocationState+0x720>)
 8002f94:	f04f 0200 	mov.w	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8002f9a:	4b31      	ldr	r3, [pc, #196]	; (8003060 <JoystickLocationState+0x720>)
 8002f9c:	f04f 0200 	mov.w	r2, #0
 8002fa0:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8002fa2:	4b2f      	ldr	r3, [pc, #188]	; (8003060 <JoystickLocationState+0x720>)
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8002faa:	4b2d      	ldr	r3, [pc, #180]	; (8003060 <JoystickLocationState+0x720>)
 8002fac:	f04f 0200 	mov.w	r2, #0
 8002fb0:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002fb2:	4b2c      	ldr	r3, [pc, #176]	; (8003064 <JoystickLocationState+0x724>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d129      	bne.n	800300e <JoystickLocationState+0x6ce>
		{
			PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Place Tray X Position 1 //mm
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <JoystickLocationState+0x710>)
 8002fbc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fc0:	4a29      	ldr	r2, [pc, #164]	; (8003068 <JoystickLocationState+0x728>)
 8002fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc6:	08db      	lsrs	r3, r3, #3
 8002fc8:	b29b      	uxth	r3, r3
 8002fca:	ee07 3a90 	vmov	s15, r3
 8002fce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fd2:	4b23      	ldr	r3, [pc, #140]	; (8003060 <JoystickLocationState+0x720>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8002fd8:	4b24      	ldr	r3, [pc, #144]	; (800306c <JoystickLocationState+0x72c>)
 8002fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f7fd fa4c 	bl	800047c <__aeabi_i2d>
 8002fe4:	a312      	add	r3, pc, #72	; (adr r3, 8003030 <JoystickLocationState+0x6f0>)
 8002fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fea:	f7fd fab1 	bl	8000550 <__aeabi_dmul>
 8002fee:	4602      	mov	r2, r0
 8002ff0:	460b      	mov	r3, r1
 8002ff2:	4610      	mov	r0, r2
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	f7fd fd7b 	bl	8000af0 <__aeabi_d2f>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	4a18      	ldr	r2, [pc, #96]	; (8003060 <JoystickLocationState+0x720>)
 8002ffe:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8003000:	4b18      	ldr	r3, [pc, #96]	; (8003064 <JoystickLocationState+0x724>)
 8003002:	2200      	movs	r2, #0
 8003004:	609a      	str	r2, [r3, #8]
			state = 4;
 8003006:	4b15      	ldr	r3, [pc, #84]	; (800305c <JoystickLocationState+0x71c>)
 8003008:	2204      	movs	r2, #4
 800300a:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 800300c:	e2dd      	b.n	80035ca <JoystickLocationState+0xc8a>
		else if (ResetButton.flag == 1)
 800300e:	4b12      	ldr	r3, [pc, #72]	; (8003058 <JoystickLocationState+0x718>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 82d9 	bne.w	80035ca <JoystickLocationState+0xc8a>
			ResetButton.flag = 0;
 8003018:	4b0f      	ldr	r3, [pc, #60]	; (8003058 <JoystickLocationState+0x718>)
 800301a:	2200      	movs	r2, #0
 800301c:	609a      	str	r2, [r3, #8]
			state = 1;
 800301e:	4b0f      	ldr	r3, [pc, #60]	; (800305c <JoystickLocationState+0x71c>)
 8003020:	2201      	movs	r2, #1
 8003022:	601a      	str	r2, [r3, #0]
		break;
 8003024:	e2d1      	b.n	80035ca <JoystickLocationState+0xc8a>
 8003026:	bf00      	nop
 8003028:	1a63c1f8 	.word	0x1a63c1f8
 800302c:	404ca5dc 	.word	0x404ca5dc
 8003030:	70a3d70a 	.word	0x70a3d70a
 8003034:	3fa70a3d 	.word	0x3fa70a3d
 8003038:	200007b8 	.word	0x200007b8
 800303c:	20000884 	.word	0x20000884
 8003040:	20000880 	.word	0x20000880
 8003044:	c2200000 	.word	0xc2200000
 8003048:	42480000 	.word	0x42480000
 800304c:	42200000 	.word	0x42200000
 8003050:	20000db8 	.word	0x20000db8
 8003054:	42c80000 	.word	0x42c80000
 8003058:	20000894 	.word	0x20000894
 800305c:	20000218 	.word	0x20000218
 8003060:	2000081c 	.word	0x2000081c
 8003064:	20000888 	.word	0x20000888
 8003068:	cccccccd 	.word	0xcccccccd
 800306c:	2000077c 	.word	0x2000077c

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003070:	4bd5      	ldr	r3, [pc, #852]	; (80033c8 <JoystickLocationState+0xa88>)
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	f040 8273 	bne.w	8003560 <JoystickLocationState+0xc20>
		{
			PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Place Tray X Position 2 //mm
 800307a:	4bd4      	ldr	r3, [pc, #848]	; (80033cc <JoystickLocationState+0xa8c>)
 800307c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003080:	4ad3      	ldr	r2, [pc, #844]	; (80033d0 <JoystickLocationState+0xa90>)
 8003082:	fba2 2303 	umull	r2, r3, r2, r3
 8003086:	08db      	lsrs	r3, r3, #3
 8003088:	b29b      	uxth	r3, r3
 800308a:	ee07 3a90 	vmov	s15, r3
 800308e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003092:	4bd0      	ldr	r3, [pc, #832]	; (80033d4 <JoystickLocationState+0xa94>)
 8003094:	edc3 7a02 	vstr	s15, [r3, #8]
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003098:	4bcf      	ldr	r3, [pc, #828]	; (80033d8 <JoystickLocationState+0xa98>)
 800309a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fd f9ec 	bl	800047c <__aeabi_i2d>
 80030a4:	a3c6      	add	r3, pc, #792	; (adr r3, 80033c0 <JoystickLocationState+0xa80>)
 80030a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030aa:	f7fd fa51 	bl	8000550 <__aeabi_dmul>
 80030ae:	4602      	mov	r2, r0
 80030b0:	460b      	mov	r3, r1
 80030b2:	4610      	mov	r0, r2
 80030b4:	4619      	mov	r1, r3
 80030b6:	f7fd fd1b 	bl	8000af0 <__aeabi_d2f>
 80030ba:	4603      	mov	r3, r0
 80030bc:	4ac5      	ldr	r2, [pc, #788]	; (80033d4 <JoystickLocationState+0xa94>)
 80030be:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 80030c0:	4bc1      	ldr	r3, [pc, #772]	; (80033c8 <JoystickLocationState+0xa88>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/60;
 80030c6:	4bc3      	ldr	r3, [pc, #780]	; (80033d4 <JoystickLocationState+0xa94>)
 80030c8:	ed93 7a02 	vldr	s14, [r3, #8]
 80030cc:	4bc1      	ldr	r3, [pc, #772]	; (80033d4 <JoystickLocationState+0xa94>)
 80030ce:	edd3 7a00 	vldr	s15, [r3]
 80030d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030d6:	eddf 6ac1 	vldr	s13, [pc, #772]	; 80033dc <JoystickLocationState+0xa9c>
 80030da:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030de:	4bc0      	ldr	r3, [pc, #768]	; (80033e0 <JoystickLocationState+0xaa0>)
 80030e0:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/60;
 80030e4:	4bbb      	ldr	r3, [pc, #748]	; (80033d4 <JoystickLocationState+0xa94>)
 80030e6:	ed93 7a03 	vldr	s14, [r3, #12]
 80030ea:	4bba      	ldr	r3, [pc, #744]	; (80033d4 <JoystickLocationState+0xa94>)
 80030ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80030f0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f4:	eddf 6ab9 	vldr	s13, [pc, #740]	; 80033dc <JoystickLocationState+0xa9c>
 80030f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80030fc:	4bb9      	ldr	r3, [pc, #740]	; (80033e4 <JoystickLocationState+0xaa4>)
 80030fe:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003102:	4bb7      	ldr	r3, [pc, #732]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800310c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003110:	4bb4      	ldr	r3, [pc, #720]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800311a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800311e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003122:	4bac      	ldr	r3, [pc, #688]	; (80033d4 <JoystickLocationState+0xa94>)
 8003124:	edd3 7a00 	vldr	s15, [r3]
 8003128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800312c:	4ba9      	ldr	r3, [pc, #676]	; (80033d4 <JoystickLocationState+0xa94>)
 800312e:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[1] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003132:	4bac      	ldr	r3, [pc, #688]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800313c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003140:	4ba7      	ldr	r3, [pc, #668]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003142:	edd3 7a00 	vldr	s15, [r3]
 8003146:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800314a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800314e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003152:	4ba0      	ldr	r3, [pc, #640]	; (80033d4 <JoystickLocationState+0xa94>)
 8003154:	edd3 7a01 	vldr	s15, [r3, #4]
 8003158:	ee77 7a27 	vadd.f32	s15, s14, s15
 800315c:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <JoystickLocationState+0xa94>)
 800315e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003162:	4b9f      	ldr	r3, [pc, #636]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800316c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003170:	4b9c      	ldr	r3, [pc, #624]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003172:	edd3 7a00 	vldr	s15, [r3]
 8003176:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800317a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003182:	4b94      	ldr	r3, [pc, #592]	; (80033d4 <JoystickLocationState+0xa94>)
 8003184:	edd3 7a00 	vldr	s15, [r3]
 8003188:	ee77 7a27 	vadd.f32	s15, s14, s15
 800318c:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <JoystickLocationState+0xa94>)
 800318e:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003192:	4b94      	ldr	r3, [pc, #592]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800319c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031a0:	4b8f      	ldr	r3, [pc, #572]	; (80033e0 <JoystickLocationState+0xaa0>)
 80031a2:	edd3 7a00 	vldr	s15, [r3]
 80031a6:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80031aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b2:	4b88      	ldr	r3, [pc, #544]	; (80033d4 <JoystickLocationState+0xa94>)
 80031b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031bc:	4b85      	ldr	r3, [pc, #532]	; (80033d4 <JoystickLocationState+0xa94>)
 80031be:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80031c2:	4b87      	ldr	r3, [pc, #540]	; (80033e0 <JoystickLocationState+0xaa0>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	ed9f 7a87 	vldr	s14, [pc, #540]	; 80033e8 <JoystickLocationState+0xaa8>
 80031cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031d0:	4b84      	ldr	r3, [pc, #528]	; (80033e4 <JoystickLocationState+0xaa4>)
 80031d2:	edd3 7a00 	vldr	s15, [r3]
 80031d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e2:	4b7c      	ldr	r3, [pc, #496]	; (80033d4 <JoystickLocationState+0xa94>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4b79      	ldr	r3, [pc, #484]	; (80033d4 <JoystickLocationState+0xa94>)
 80031ee:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 80031f2:	4b7c      	ldr	r3, [pc, #496]	; (80033e4 <JoystickLocationState+0xaa4>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	ed9f 7a7b 	vldr	s14, [pc, #492]	; 80033e8 <JoystickLocationState+0xaa8>
 80031fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003200:	4b77      	ldr	r3, [pc, #476]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800320a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	4b70      	ldr	r3, [pc, #448]	; (80033d4 <JoystickLocationState+0xa94>)
 8003214:	edd3 7a01 	vldr	s15, [r3, #4]
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	4b6d      	ldr	r3, [pc, #436]	; (80033d4 <JoystickLocationState+0xa94>)
 800321e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003222:	4b6f      	ldr	r3, [pc, #444]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800322c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003230:	4b6c      	ldr	r3, [pc, #432]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800323a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800323e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003242:	4b64      	ldr	r3, [pc, #400]	; (80033d4 <JoystickLocationState+0xa94>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800324c:	4b61      	ldr	r3, [pc, #388]	; (80033d4 <JoystickLocationState+0xa94>)
 800324e:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003252:	4b64      	ldr	r3, [pc, #400]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800325c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003260:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003262:	edd3 7a00 	vldr	s15, [r3]
 8003266:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800326a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800326e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003272:	4b58      	ldr	r3, [pc, #352]	; (80033d4 <JoystickLocationState+0xa94>)
 8003274:	edd3 7a01 	vldr	s15, [r3, #4]
 8003278:	ee77 7a27 	vadd.f32	s15, s14, s15
 800327c:	4b55      	ldr	r3, [pc, #340]	; (80033d4 <JoystickLocationState+0xa94>)
 800327e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003282:	4b57      	ldr	r3, [pc, #348]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800328c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003290:	4b54      	ldr	r3, [pc, #336]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800329a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800329e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032a2:	4b4c      	ldr	r3, [pc, #304]	; (80033d4 <JoystickLocationState+0xa94>)
 80032a4:	edd3 7a00 	vldr	s15, [r3]
 80032a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ac:	4b49      	ldr	r3, [pc, #292]	; (80033d4 <JoystickLocationState+0xa94>)
 80032ae:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 80032b2:	4b4c      	ldr	r3, [pc, #304]	; (80033e4 <JoystickLocationState+0xaa4>)
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c0:	4b47      	ldr	r3, [pc, #284]	; (80033e0 <JoystickLocationState+0xaa0>)
 80032c2:	edd3 7a00 	vldr	s15, [r3]
 80032c6:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80032ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032d2:	4b40      	ldr	r3, [pc, #256]	; (80033d4 <JoystickLocationState+0xa94>)
 80032d4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032dc:	4b3d      	ldr	r3, [pc, #244]	; (80033d4 <JoystickLocationState+0xa94>)
 80032de:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80032e2:	4b3f      	ldr	r3, [pc, #252]	; (80033e0 <JoystickLocationState+0xaa0>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 80033e8 <JoystickLocationState+0xaa8>
 80032ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f0:	4b3c      	ldr	r3, [pc, #240]	; (80033e4 <JoystickLocationState+0xaa4>)
 80032f2:	edd3 7a00 	vldr	s15, [r3]
 80032f6:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003302:	4b34      	ldr	r3, [pc, #208]	; (80033d4 <JoystickLocationState+0xa94>)
 8003304:	edd3 7a00 	vldr	s15, [r3]
 8003308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800330c:	4b31      	ldr	r3, [pc, #196]	; (80033d4 <JoystickLocationState+0xa94>)
 800330e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003312:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003314:	edd3 7a00 	vldr	s15, [r3]
 8003318:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80033e8 <JoystickLocationState+0xaa8>
 800331c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003320:	4b2f      	ldr	r3, [pc, #188]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003322:	edd3 7a00 	vldr	s15, [r3]
 8003326:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800332a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800332e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003332:	4b28      	ldr	r3, [pc, #160]	; (80033d4 <JoystickLocationState+0xa94>)
 8003334:	edd3 7a01 	vldr	s15, [r3, #4]
 8003338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800333c:	4b25      	ldr	r3, [pc, #148]	; (80033d4 <JoystickLocationState+0xa94>)
 800333e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003342:	4b27      	ldr	r3, [pc, #156]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003344:	edd3 7a00 	vldr	s15, [r3]
 8003348:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800334c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003350:	4b24      	ldr	r3, [pc, #144]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003352:	edd3 7a00 	vldr	s15, [r3]
 8003356:	eddf 6a25 	vldr	s13, [pc, #148]	; 80033ec <JoystickLocationState+0xaac>
 800335a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800335e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003362:	4b1c      	ldr	r3, [pc, #112]	; (80033d4 <JoystickLocationState+0xa94>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800336c:	4b19      	ldr	r3, [pc, #100]	; (80033d4 <JoystickLocationState+0xa94>)
 800336e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003372:	4b1c      	ldr	r3, [pc, #112]	; (80033e4 <JoystickLocationState+0xaa4>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800337c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003380:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <JoystickLocationState+0xaa0>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80033f0 <JoystickLocationState+0xab0>
 800338a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800338e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003392:	4b10      	ldr	r3, [pc, #64]	; (80033d4 <JoystickLocationState+0xa94>)
 8003394:	edd3 7a01 	vldr	s15, [r3, #4]
 8003398:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339c:	4b0d      	ldr	r3, [pc, #52]	; (80033d4 <JoystickLocationState+0xa94>)
 800339e:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 80033a2:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <JoystickLocationState+0xaa0>)
 80033a4:	edd3 7a00 	vldr	s15, [r3]
 80033a8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033ac:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033b0:	4b0c      	ldr	r3, [pc, #48]	; (80033e4 <JoystickLocationState+0xaa4>)
 80033b2:	edd3 7a00 	vldr	s15, [r3]
 80033b6:	eddf 6a0d 	vldr	s13, [pc, #52]	; 80033ec <JoystickLocationState+0xaac>
 80033ba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033be:	e019      	b.n	80033f4 <JoystickLocationState+0xab4>
 80033c0:	70a3d70a 	.word	0x70a3d70a
 80033c4:	3fa70a3d 	.word	0x3fa70a3d
 80033c8:	20000888 	.word	0x20000888
 80033cc:	20000db8 	.word	0x20000db8
 80033d0:	cccccccd 	.word	0xcccccccd
 80033d4:	2000081c 	.word	0x2000081c
 80033d8:	2000077c 	.word	0x2000077c
 80033dc:	42700000 	.word	0x42700000
 80033e0:	20000880 	.word	0x20000880
 80033e4:	20000884 	.word	0x20000884
 80033e8:	42480000 	.word	0x42480000
 80033ec:	42200000 	.word	0x42200000
 80033f0:	c2200000 	.word	0xc2200000
 80033f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <JoystickLocationState+0xca0>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003402:	4b77      	ldr	r3, [pc, #476]	; (80035e0 <JoystickLocationState+0xca0>)
 8003404:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003408:	4b76      	ldr	r3, [pc, #472]	; (80035e4 <JoystickLocationState+0xca4>)
 800340a:	edd3 7a00 	vldr	s15, [r3]
 800340e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003412:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003416:	4b74      	ldr	r3, [pc, #464]	; (80035e8 <JoystickLocationState+0xca8>)
 8003418:	edd3 7a00 	vldr	s15, [r3]
 800341c:	eddf 6a73 	vldr	s13, [pc, #460]	; 80035ec <JoystickLocationState+0xcac>
 8003420:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003424:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003428:	4b6d      	ldr	r3, [pc, #436]	; (80035e0 <JoystickLocationState+0xca0>)
 800342a:	edd3 7a01 	vldr	s15, [r3, #4]
 800342e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003432:	4b6b      	ldr	r3, [pc, #428]	; (80035e0 <JoystickLocationState+0xca0>)
 8003434:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003438:	4b6b      	ldr	r3, [pc, #428]	; (80035e8 <JoystickLocationState+0xca8>)
 800343a:	edd3 7a00 	vldr	s15, [r3]
 800343e:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80035f0 <JoystickLocationState+0xcb0>
 8003442:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003446:	4b67      	ldr	r3, [pc, #412]	; (80035e4 <JoystickLocationState+0xca4>)
 8003448:	edd3 7a00 	vldr	s15, [r3]
 800344c:	eddf 6a69 	vldr	s13, [pc, #420]	; 80035f4 <JoystickLocationState+0xcb4>
 8003450:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003454:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003458:	4b61      	ldr	r3, [pc, #388]	; (80035e0 <JoystickLocationState+0xca0>)
 800345a:	edd3 7a00 	vldr	s15, [r3]
 800345e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003462:	4b5f      	ldr	r3, [pc, #380]	; (80035e0 <JoystickLocationState+0xca0>)
 8003464:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003468:	4b5e      	ldr	r3, [pc, #376]	; (80035e4 <JoystickLocationState+0xca4>)
 800346a:	edd3 7a00 	vldr	s15, [r3]
 800346e:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80035f0 <JoystickLocationState+0xcb0>
 8003472:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <JoystickLocationState+0xca8>)
 8003478:	edd3 7a00 	vldr	s15, [r3]
 800347c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 80035ec <JoystickLocationState+0xcac>
 8003480:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003484:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003488:	4b55      	ldr	r3, [pc, #340]	; (80035e0 <JoystickLocationState+0xca0>)
 800348a:	edd3 7a01 	vldr	s15, [r3, #4]
 800348e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003492:	4b53      	ldr	r3, [pc, #332]	; (80035e0 <JoystickLocationState+0xca0>)
 8003494:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 8003498:	4b51      	ldr	r3, [pc, #324]	; (80035e0 <JoystickLocationState+0xca0>)
 800349a:	ed93 7a00 	vldr	s14, [r3]
 800349e:	4b51      	ldr	r3, [pc, #324]	; (80035e4 <JoystickLocationState+0xca4>)
 80034a0:	edd3 7a00 	vldr	s15, [r3]
 80034a4:	eddf 6a52 	vldr	s13, [pc, #328]	; 80035f0 <JoystickLocationState+0xcb0>
 80034a8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b0:	4b4b      	ldr	r3, [pc, #300]	; (80035e0 <JoystickLocationState+0xca0>)
 80034b2:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.origin_y * 10;
 80034b6:	4b4a      	ldr	r3, [pc, #296]	; (80035e0 <JoystickLocationState+0xca0>)
 80034b8:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 80034bc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80034c4:	4b46      	ldr	r3, [pc, #280]	; (80035e0 <JoystickLocationState+0xca0>)
 80034c6:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 80034ca:	4b47      	ldr	r3, [pc, #284]	; (80035e8 <JoystickLocationState+0xca8>)
 80034cc:	edd3 7a00 	vldr	s15, [r3]
 80034d0:	eeb0 0a67 	vmov.f32	s0, s15
 80034d4:	f008 fca8 	bl	800be28 <acosf>
 80034d8:	ee10 3a10 	vmov	r3, s0
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fc ffdf 	bl	80004a0 <__aeabi_f2d>
 80034e2:	a33d      	add	r3, pc, #244	; (adr r3, 80035d8 <JoystickLocationState+0xc98>)
 80034e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e8:	f7fd f832 	bl	8000550 <__aeabi_dmul>
 80034ec:	4602      	mov	r2, r0
 80034ee:	460b      	mov	r3, r1
 80034f0:	4610      	mov	r0, r2
 80034f2:	4619      	mov	r1, r3
 80034f4:	f7fd fafc 	bl	8000af0 <__aeabi_d2f>
 80034f8:	4603      	mov	r3, r0
 80034fa:	4a39      	ldr	r2, [pc, #228]	; (80035e0 <JoystickLocationState+0xca0>)
 80034fc:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 80034fe:	4b38      	ldr	r3, [pc, #224]	; (80035e0 <JoystickLocationState+0xca0>)
 8003500:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003504:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003508:	ee67 7a87 	vmul.f32	s15, s15, s14
 800350c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003510:	ee17 3a90 	vmov	r3, s15
 8003514:	b29a      	uxth	r2, r3
 8003516:	4b38      	ldr	r3, [pc, #224]	; (80035f8 <JoystickLocationState+0xcb8>)
 8003518:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 800351c:	4b30      	ldr	r3, [pc, #192]	; (80035e0 <JoystickLocationState+0xca0>)
 800351e:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003522:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003526:	ee67 7a87 	vmul.f32	s15, s15, s14
 800352a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352e:	ee17 3a90 	vmov	r3, s15
 8003532:	b29a      	uxth	r2, r3
 8003534:	4b30      	ldr	r3, [pc, #192]	; (80035f8 <JoystickLocationState+0xcb8>)
 8003536:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 800353a:	4b29      	ldr	r3, [pc, #164]	; (80035e0 <JoystickLocationState+0xca0>)
 800353c:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003540:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80035fc <JoystickLocationState+0xcbc>
 8003544:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800354c:	ee17 3a90 	vmov	r3, s15
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b29      	ldr	r3, [pc, #164]	; (80035f8 <JoystickLocationState+0xcb8>)
 8003554:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003558:	4b27      	ldr	r3, [pc, #156]	; (80035f8 <JoystickLocationState+0xcb8>)
 800355a:	2200      	movs	r2, #0
 800355c:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 800355e:	e036      	b.n	80035ce <JoystickLocationState+0xc8e>
		else if (ResetButton.flag == 1)
 8003560:	4b27      	ldr	r3, [pc, #156]	; (8003600 <JoystickLocationState+0xcc0>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d132      	bne.n	80035ce <JoystickLocationState+0xc8e>
			ResetButton.flag = 0;
 8003568:	4b25      	ldr	r3, [pc, #148]	; (8003600 <JoystickLocationState+0xcc0>)
 800356a:	2200      	movs	r2, #0
 800356c:	609a      	str	r2, [r3, #8]
			state = 1;
 800356e:	4b25      	ldr	r3, [pc, #148]	; (8003604 <JoystickLocationState+0xcc4>)
 8003570:	2201      	movs	r2, #1
 8003572:	601a      	str	r2, [r3, #0]
		break;
 8003574:	e02b      	b.n	80035ce <JoystickLocationState+0xc8e>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003576:	4b24      	ldr	r3, [pc, #144]	; (8003608 <JoystickLocationState+0xcc8>)
 8003578:	2202      	movs	r2, #2
 800357a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 800357c:	4b1e      	ldr	r3, [pc, #120]	; (80035f8 <JoystickLocationState+0xcb8>)
 800357e:	2200      	movs	r2, #0
 8003580:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003582:	4b22      	ldr	r3, [pc, #136]	; (800360c <JoystickLocationState+0xccc>)
 8003584:	2201      	movs	r2, #1
 8003586:	701a      	strb	r2, [r3, #0]

		HAL_Delay(10);
 8003588:	200a      	movs	r0, #10
 800358a:	f001 f927 	bl	80047dc <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 800358e:	4b1e      	ldr	r3, [pc, #120]	; (8003608 <JoystickLocationState+0xcc8>)
 8003590:	2203      	movs	r2, #3
 8003592:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <JoystickLocationState+0xcb8>)
 8003596:	2202      	movs	r2, #2
 8003598:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <JoystickLocationState+0xccc>)
 800359c:	2201      	movs	r2, #1
 800359e:	701a      	strb	r2, [r3, #0]

		state = 1;
 80035a0:	4b18      	ldr	r3, [pc, #96]	; (8003604 <JoystickLocationState+0xcc4>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 80035a6:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <JoystickLocationState+0xcd0>)
 80035a8:	2201      	movs	r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 80035ac:	4b14      	ldr	r3, [pc, #80]	; (8003600 <JoystickLocationState+0xcc0>)
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10e      	bne.n	80035d2 <JoystickLocationState+0xc92>
		{
			ResetButton.flag = 0;
 80035b4:	4b12      	ldr	r3, [pc, #72]	; (8003600 <JoystickLocationState+0xcc0>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	609a      	str	r2, [r3, #8]
			state = 1;
 80035ba:	4b12      	ldr	r3, [pc, #72]	; (8003604 <JoystickLocationState+0xcc4>)
 80035bc:	2201      	movs	r2, #1
 80035be:	601a      	str	r2, [r3, #0]
		}
		break;
 80035c0:	e007      	b.n	80035d2 <JoystickLocationState+0xc92>
		break;
 80035c2:	bf00      	nop
 80035c4:	e006      	b.n	80035d4 <JoystickLocationState+0xc94>
		break;
 80035c6:	bf00      	nop
 80035c8:	e004      	b.n	80035d4 <JoystickLocationState+0xc94>
		break;
 80035ca:	bf00      	nop
 80035cc:	e002      	b.n	80035d4 <JoystickLocationState+0xc94>
		break;
 80035ce:	bf00      	nop
 80035d0:	e000      	b.n	80035d4 <JoystickLocationState+0xc94>
		break;
 80035d2:	bf00      	nop
	}
}
 80035d4:	bf00      	nop
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	1a63c1f8 	.word	0x1a63c1f8
 80035dc:	404ca5dc 	.word	0x404ca5dc
 80035e0:	2000081c 	.word	0x2000081c
 80035e4:	20000884 	.word	0x20000884
 80035e8:	20000880 	.word	0x20000880
 80035ec:	c2200000 	.word	0xc2200000
 80035f0:	42480000 	.word	0x42480000
 80035f4:	42200000 	.word	0x42200000
 80035f8:	20000db8 	.word	0x20000db8
 80035fc:	42c80000 	.word	0x42c80000
 8003600:	20000894 	.word	0x20000894
 8003604:	20000218 	.word	0x20000218
 8003608:	200008d8 	.word	0x200008d8
 800360c:	200008d0 	.word	0x200008d0
 8003610:	20000730 	.word	0x20000730
 8003614:	00000000 	.word	0x00000000

08003618 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003618:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800361c:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 800361e:	4b9a      	ldr	r3, [pc, #616]	; (8003888 <TrajectoryGenerator+0x270>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	f000 82dc 	beq.w	8003be0 <TrajectoryGenerator+0x5c8>
 8003628:	2b02      	cmp	r3, #2
 800362a:	f300 84ed 	bgt.w	8004008 <TrajectoryGenerator+0x9f0>
 800362e:	2b00      	cmp	r3, #0
 8003630:	d004      	beq.n	800363c <TrajectoryGenerator+0x24>
 8003632:	2b01      	cmp	r3, #1
 8003634:	f000 814c 	beq.w	80038d0 <TrajectoryGenerator+0x2b8>
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
		 time += 0.001;
	 }
	 break;
	}
}
 8003638:	f000 bce6 	b.w	8004008 <TrajectoryGenerator+0x9f0>
		qi = position;
 800363c:	4b93      	ldr	r3, [pc, #588]	; (800388c <TrajectoryGenerator+0x274>)
 800363e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	4b91      	ldr	r3, [pc, #580]	; (8003890 <TrajectoryGenerator+0x278>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
		qdi = 0;
 8003650:	4b90      	ldr	r3, [pc, #576]	; (8003894 <TrajectoryGenerator+0x27c>)
 8003652:	f04f 0200 	mov.w	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
		qd_max = 13333.33; //pDulse/s
 8003658:	4b8f      	ldr	r3, [pc, #572]	; (8003898 <TrajectoryGenerator+0x280>)
 800365a:	4a90      	ldr	r2, [pc, #576]	; (800389c <TrajectoryGenerator+0x284>)
 800365c:	601a      	str	r2, [r3, #0]
		qdd_max = 11111.11; //pulse/s
 800365e:	4b90      	ldr	r3, [pc, #576]	; (80038a0 <TrajectoryGenerator+0x288>)
 8003660:	4a90      	ldr	r2, [pc, #576]	; (80038a4 <TrajectoryGenerator+0x28c>)
 8003662:	601a      	str	r2, [r3, #0]
	  if(qf > qi)
 8003664:	4b90      	ldr	r3, [pc, #576]	; (80038a8 <TrajectoryGenerator+0x290>)
 8003666:	ed93 7a00 	vldr	s14, [r3]
 800366a:	4b89      	ldr	r3, [pc, #548]	; (8003890 <TrajectoryGenerator+0x278>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	dd20      	ble.n	80036bc <TrajectoryGenerator+0xa4>
		  t_half = sqrt((qf-qi)/qdd_max);
 800367a:	4b8b      	ldr	r3, [pc, #556]	; (80038a8 <TrajectoryGenerator+0x290>)
 800367c:	ed93 7a00 	vldr	s14, [r3]
 8003680:	4b83      	ldr	r3, [pc, #524]	; (8003890 <TrajectoryGenerator+0x278>)
 8003682:	edd3 7a00 	vldr	s15, [r3]
 8003686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800368a:	4b85      	ldr	r3, [pc, #532]	; (80038a0 <TrajectoryGenerator+0x288>)
 800368c:	edd3 7a00 	vldr	s15, [r3]
 8003690:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003694:	ee16 0a90 	vmov	r0, s13
 8003698:	f7fc ff02 	bl	80004a0 <__aeabi_f2d>
 800369c:	4602      	mov	r2, r0
 800369e:	460b      	mov	r3, r1
 80036a0:	ec43 2b10 	vmov	d0, r2, r3
 80036a4:	f008 fb94 	bl	800bdd0 <sqrt>
 80036a8:	ec53 2b10 	vmov	r2, r3, d0
 80036ac:	4610      	mov	r0, r2
 80036ae:	4619      	mov	r1, r3
 80036b0:	f7fd fa1e 	bl	8000af0 <__aeabi_d2f>
 80036b4:	4603      	mov	r3, r0
 80036b6:	4a7d      	ldr	r2, [pc, #500]	; (80038ac <TrajectoryGenerator+0x294>)
 80036b8:	6013      	str	r3, [r2, #0]
 80036ba:	e02c      	b.n	8003716 <TrajectoryGenerator+0xfe>
	  else if(qf < qi)
 80036bc:	4b7a      	ldr	r3, [pc, #488]	; (80038a8 <TrajectoryGenerator+0x290>)
 80036be:	ed93 7a00 	vldr	s14, [r3]
 80036c2:	4b73      	ldr	r3, [pc, #460]	; (8003890 <TrajectoryGenerator+0x278>)
 80036c4:	edd3 7a00 	vldr	s15, [r3]
 80036c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036d0:	d521      	bpl.n	8003716 <TrajectoryGenerator+0xfe>
		  t_half = sqrt(-1*(qf-qi)/qdd_max);
 80036d2:	4b75      	ldr	r3, [pc, #468]	; (80038a8 <TrajectoryGenerator+0x290>)
 80036d4:	ed93 7a00 	vldr	s14, [r3]
 80036d8:	4b6d      	ldr	r3, [pc, #436]	; (8003890 <TrajectoryGenerator+0x278>)
 80036da:	edd3 7a00 	vldr	s15, [r3]
 80036de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80036e2:	eeb1 7a67 	vneg.f32	s14, s15
 80036e6:	4b6e      	ldr	r3, [pc, #440]	; (80038a0 <TrajectoryGenerator+0x288>)
 80036e8:	edd3 7a00 	vldr	s15, [r3]
 80036ec:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80036f0:	ee16 0a90 	vmov	r0, s13
 80036f4:	f7fc fed4 	bl	80004a0 <__aeabi_f2d>
 80036f8:	4602      	mov	r2, r0
 80036fa:	460b      	mov	r3, r1
 80036fc:	ec43 2b10 	vmov	d0, r2, r3
 8003700:	f008 fb66 	bl	800bdd0 <sqrt>
 8003704:	ec53 2b10 	vmov	r2, r3, d0
 8003708:	4610      	mov	r0, r2
 800370a:	4619      	mov	r1, r3
 800370c:	f7fd f9f0 	bl	8000af0 <__aeabi_d2f>
 8003710:	4603      	mov	r3, r0
 8003712:	4a66      	ldr	r2, [pc, #408]	; (80038ac <TrajectoryGenerator+0x294>)
 8003714:	6013      	str	r3, [r2, #0]
	  if(qf-qi < 0)
 8003716:	4b64      	ldr	r3, [pc, #400]	; (80038a8 <TrajectoryGenerator+0x290>)
 8003718:	ed93 7a00 	vldr	s14, [r3]
 800371c:	4b5c      	ldr	r3, [pc, #368]	; (8003890 <TrajectoryGenerator+0x278>)
 800371e:	edd3 7a00 	vldr	s15, [r3]
 8003722:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003726:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800372a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800372e:	d50f      	bpl.n	8003750 <TrajectoryGenerator+0x138>
		  qd_max = -1*qd_max;
 8003730:	4b59      	ldr	r3, [pc, #356]	; (8003898 <TrajectoryGenerator+0x280>)
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	eef1 7a67 	vneg.f32	s15, s15
 800373a:	4b57      	ldr	r3, [pc, #348]	; (8003898 <TrajectoryGenerator+0x280>)
 800373c:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 8003740:	4b57      	ldr	r3, [pc, #348]	; (80038a0 <TrajectoryGenerator+0x288>)
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	eef1 7a67 	vneg.f32	s15, s15
 800374a:	4b55      	ldr	r3, [pc, #340]	; (80038a0 <TrajectoryGenerator+0x288>)
 800374c:	edc3 7a00 	vstr	s15, [r3]
	  tacc = (qd_max-qdi)/qdd_max;
 8003750:	4b51      	ldr	r3, [pc, #324]	; (8003898 <TrajectoryGenerator+0x280>)
 8003752:	ed93 7a00 	vldr	s14, [r3]
 8003756:	4b4f      	ldr	r3, [pc, #316]	; (8003894 <TrajectoryGenerator+0x27c>)
 8003758:	edd3 7a00 	vldr	s15, [r3]
 800375c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003760:	4b4f      	ldr	r3, [pc, #316]	; (80038a0 <TrajectoryGenerator+0x288>)
 8003762:	ed93 7a00 	vldr	s14, [r3]
 8003766:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800376a:	4b51      	ldr	r3, [pc, #324]	; (80038b0 <TrajectoryGenerator+0x298>)
 800376c:	edc3 7a00 	vstr	s15, [r3]
	  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003770:	4b48      	ldr	r3, [pc, #288]	; (8003894 <TrajectoryGenerator+0x27c>)
 8003772:	ed93 7a00 	vldr	s14, [r3]
 8003776:	4b4e      	ldr	r3, [pc, #312]	; (80038b0 <TrajectoryGenerator+0x298>)
 8003778:	edd3 7a00 	vldr	s15, [r3]
 800377c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003780:	ee17 0a90 	vmov	r0, s15
 8003784:	f7fc fe8c 	bl	80004a0 <__aeabi_f2d>
 8003788:	4604      	mov	r4, r0
 800378a:	460d      	mov	r5, r1
 800378c:	4b44      	ldr	r3, [pc, #272]	; (80038a0 <TrajectoryGenerator+0x288>)
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	4618      	mov	r0, r3
 8003792:	f7fc fe85 	bl	80004a0 <__aeabi_f2d>
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	4b46      	ldr	r3, [pc, #280]	; (80038b4 <TrajectoryGenerator+0x29c>)
 800379c:	f7fc fed8 	bl	8000550 <__aeabi_dmul>
 80037a0:	4602      	mov	r2, r0
 80037a2:	460b      	mov	r3, r1
 80037a4:	4690      	mov	r8, r2
 80037a6:	4699      	mov	r9, r3
 80037a8:	4b41      	ldr	r3, [pc, #260]	; (80038b0 <TrajectoryGenerator+0x298>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7fc fe77 	bl	80004a0 <__aeabi_f2d>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4640      	mov	r0, r8
 80037b8:	4649      	mov	r1, r9
 80037ba:	f7fc fec9 	bl	8000550 <__aeabi_dmul>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4690      	mov	r8, r2
 80037c4:	4699      	mov	r9, r3
 80037c6:	4b3a      	ldr	r3, [pc, #232]	; (80038b0 <TrajectoryGenerator+0x298>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7fc fe68 	bl	80004a0 <__aeabi_f2d>
 80037d0:	4602      	mov	r2, r0
 80037d2:	460b      	mov	r3, r1
 80037d4:	4640      	mov	r0, r8
 80037d6:	4649      	mov	r1, r9
 80037d8:	f7fc feba 	bl	8000550 <__aeabi_dmul>
 80037dc:	4602      	mov	r2, r0
 80037de:	460b      	mov	r3, r1
 80037e0:	4620      	mov	r0, r4
 80037e2:	4629      	mov	r1, r5
 80037e4:	f7fc fcfe 	bl	80001e4 <__adddf3>
 80037e8:	4602      	mov	r2, r0
 80037ea:	460b      	mov	r3, r1
 80037ec:	4610      	mov	r0, r2
 80037ee:	4619      	mov	r1, r3
 80037f0:	f7fd f97e 	bl	8000af0 <__aeabi_d2f>
 80037f4:	4603      	mov	r3, r0
 80037f6:	4a30      	ldr	r2, [pc, #192]	; (80038b8 <TrajectoryGenerator+0x2a0>)
 80037f8:	6013      	str	r3, [r2, #0]
	  qdec = qacc;
 80037fa:	4b2f      	ldr	r3, [pc, #188]	; (80038b8 <TrajectoryGenerator+0x2a0>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a2f      	ldr	r2, [pc, #188]	; (80038bc <TrajectoryGenerator+0x2a4>)
 8003800:	6013      	str	r3, [r2, #0]
	  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003802:	4b29      	ldr	r3, [pc, #164]	; (80038a8 <TrajectoryGenerator+0x290>)
 8003804:	ed93 7a00 	vldr	s14, [r3]
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <TrajectoryGenerator+0x278>)
 800380a:	edd3 7a00 	vldr	s15, [r3]
 800380e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003812:	4b29      	ldr	r3, [pc, #164]	; (80038b8 <TrajectoryGenerator+0x2a0>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	ee37 7a67 	vsub.f32	s14, s14, s15
 800381c:	4b27      	ldr	r3, [pc, #156]	; (80038bc <TrajectoryGenerator+0x2a4>)
 800381e:	edd3 7a00 	vldr	s15, [r3]
 8003822:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003826:	4b1c      	ldr	r3, [pc, #112]	; (8003898 <TrajectoryGenerator+0x280>)
 8003828:	ed93 7a00 	vldr	s14, [r3]
 800382c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003830:	4b23      	ldr	r3, [pc, #140]	; (80038c0 <TrajectoryGenerator+0x2a8>)
 8003832:	edc3 7a00 	vstr	s15, [r3]
	  tdec = tacc;
 8003836:	4b1e      	ldr	r3, [pc, #120]	; (80038b0 <TrajectoryGenerator+0x298>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a22      	ldr	r2, [pc, #136]	; (80038c4 <TrajectoryGenerator+0x2ac>)
 800383c:	6013      	str	r3, [r2, #0]
	  if(qdi+qdd_max*t_half >= qd_max)
 800383e:	4b18      	ldr	r3, [pc, #96]	; (80038a0 <TrajectoryGenerator+0x288>)
 8003840:	ed93 7a00 	vldr	s14, [r3]
 8003844:	4b19      	ldr	r3, [pc, #100]	; (80038ac <TrajectoryGenerator+0x294>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800384e:	4b11      	ldr	r3, [pc, #68]	; (8003894 <TrajectoryGenerator+0x27c>)
 8003850:	edd3 7a00 	vldr	s15, [r3]
 8003854:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003858:	4b0f      	ldr	r3, [pc, #60]	; (8003898 <TrajectoryGenerator+0x280>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003862:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003866:	db07      	blt.n	8003878 <TrajectoryGenerator+0x260>
		  initime = time;
 8003868:	4b17      	ldr	r3, [pc, #92]	; (80038c8 <TrajectoryGenerator+0x2b0>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a17      	ldr	r2, [pc, #92]	; (80038cc <TrajectoryGenerator+0x2b4>)
 800386e:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 8003870:	4b05      	ldr	r3, [pc, #20]	; (8003888 <TrajectoryGenerator+0x270>)
 8003872:	2202      	movs	r2, #2
 8003874:	601a      	str	r2, [r3, #0]
	  break;
 8003876:	e3c7      	b.n	8004008 <TrajectoryGenerator+0x9f0>
		  initime = time;
 8003878:	4b13      	ldr	r3, [pc, #76]	; (80038c8 <TrajectoryGenerator+0x2b0>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	4a13      	ldr	r2, [pc, #76]	; (80038cc <TrajectoryGenerator+0x2b4>)
 800387e:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 8003880:	4b01      	ldr	r3, [pc, #4]	; (8003888 <TrajectoryGenerator+0x270>)
 8003882:	2201      	movs	r2, #1
 8003884:	601a      	str	r2, [r3, #0]
	  break;
 8003886:	e3bf      	b.n	8004008 <TrajectoryGenerator+0x9f0>
 8003888:	2000073c 	.word	0x2000073c
 800388c:	2000077c 	.word	0x2000077c
 8003890:	20000748 	.word	0x20000748
 8003894:	2000074c 	.word	0x2000074c
 8003898:	2000020c 	.word	0x2000020c
 800389c:	46505552 	.word	0x46505552
 80038a0:	20000210 	.word	0x20000210
 80038a4:	462d9c71 	.word	0x462d9c71
 80038a8:	20000744 	.word	0x20000744
 80038ac:	20000754 	.word	0x20000754
 80038b0:	20000768 	.word	0x20000768
 80038b4:	3fe00000 	.word	0x3fe00000
 80038b8:	2000076c 	.word	0x2000076c
 80038bc:	20000770 	.word	0x20000770
 80038c0:	20000774 	.word	0x20000774
 80038c4:	20000778 	.word	0x20000778
 80038c8:	20000740 	.word	0x20000740
 80038cc:	20000750 	.word	0x20000750
	  if(time <= t_half + initime)
 80038d0:	4bb7      	ldr	r3, [pc, #732]	; (8003bb0 <TrajectoryGenerator+0x598>)
 80038d2:	ed93 7a00 	vldr	s14, [r3]
 80038d6:	4bb7      	ldr	r3, [pc, #732]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 80038d8:	edd3 7a00 	vldr	s15, [r3]
 80038dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e0:	4bb5      	ldr	r3, [pc, #724]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 80038e2:	edd3 7a00 	vldr	s15, [r3]
 80038e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80038ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038ee:	f2c0 8092 	blt.w	8003a16 <TrajectoryGenerator+0x3fe>
		  setacc = qdd_max;
 80038f2:	4bb2      	ldr	r3, [pc, #712]	; (8003bbc <TrajectoryGenerator+0x5a4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4ab2      	ldr	r2, [pc, #712]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 80038f8:	6013      	str	r3, [r2, #0]
		  setvelocity = qdi + setacc*(time-initime);
 80038fa:	4baf      	ldr	r3, [pc, #700]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 80038fc:	ed93 7a00 	vldr	s14, [r3]
 8003900:	4bac      	ldr	r3, [pc, #688]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003902:	edd3 7a00 	vldr	s15, [r3]
 8003906:	ee37 7a67 	vsub.f32	s14, s14, s15
 800390a:	4bad      	ldr	r3, [pc, #692]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003914:	4bab      	ldr	r3, [pc, #684]	; (8003bc4 <TrajectoryGenerator+0x5ac>)
 8003916:	edd3 7a00 	vldr	s15, [r3]
 800391a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391e:	4baa      	ldr	r3, [pc, #680]	; (8003bc8 <TrajectoryGenerator+0x5b0>)
 8003920:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003924:	4ba4      	ldr	r3, [pc, #656]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003926:	ed93 7a00 	vldr	s14, [r3]
 800392a:	4ba2      	ldr	r3, [pc, #648]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 800392c:	edd3 7a00 	vldr	s15, [r3]
 8003930:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003934:	4ba3      	ldr	r3, [pc, #652]	; (8003bc4 <TrajectoryGenerator+0x5ac>)
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800393e:	4ba3      	ldr	r3, [pc, #652]	; (8003bcc <TrajectoryGenerator+0x5b4>)
 8003940:	edd3 7a00 	vldr	s15, [r3]
 8003944:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003948:	ee17 0a90 	vmov	r0, s15
 800394c:	f7fc fda8 	bl	80004a0 <__aeabi_f2d>
 8003950:	4604      	mov	r4, r0
 8003952:	460d      	mov	r5, r1
 8003954:	4b9a      	ldr	r3, [pc, #616]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4618      	mov	r0, r3
 800395a:	f7fc fda1 	bl	80004a0 <__aeabi_f2d>
 800395e:	f04f 0200 	mov.w	r2, #0
 8003962:	4b9b      	ldr	r3, [pc, #620]	; (8003bd0 <TrajectoryGenerator+0x5b8>)
 8003964:	f7fc fdf4 	bl	8000550 <__aeabi_dmul>
 8003968:	4602      	mov	r2, r0
 800396a:	460b      	mov	r3, r1
 800396c:	4690      	mov	r8, r2
 800396e:	4699      	mov	r9, r3
 8003970:	4b91      	ldr	r3, [pc, #580]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003972:	ed93 7a00 	vldr	s14, [r3]
 8003976:	4b8f      	ldr	r3, [pc, #572]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003978:	edd3 7a00 	vldr	s15, [r3]
 800397c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003980:	ee17 0a90 	vmov	r0, s15
 8003984:	f7fc fd8c 	bl	80004a0 <__aeabi_f2d>
 8003988:	4602      	mov	r2, r0
 800398a:	460b      	mov	r3, r1
 800398c:	4640      	mov	r0, r8
 800398e:	4649      	mov	r1, r9
 8003990:	f7fc fdde 	bl	8000550 <__aeabi_dmul>
 8003994:	4602      	mov	r2, r0
 8003996:	460b      	mov	r3, r1
 8003998:	4690      	mov	r8, r2
 800399a:	4699      	mov	r9, r3
 800399c:	4b86      	ldr	r3, [pc, #536]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 800399e:	ed93 7a00 	vldr	s14, [r3]
 80039a2:	4b84      	ldr	r3, [pc, #528]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 80039a4:	edd3 7a00 	vldr	s15, [r3]
 80039a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80039ac:	ee17 0a90 	vmov	r0, s15
 80039b0:	f7fc fd76 	bl	80004a0 <__aeabi_f2d>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4640      	mov	r0, r8
 80039ba:	4649      	mov	r1, r9
 80039bc:	f7fc fdc8 	bl	8000550 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4620      	mov	r0, r4
 80039c6:	4629      	mov	r1, r5
 80039c8:	f7fc fc0c 	bl	80001e4 <__adddf3>
 80039cc:	4602      	mov	r2, r0
 80039ce:	460b      	mov	r3, r1
 80039d0:	4610      	mov	r0, r2
 80039d2:	4619      	mov	r1, r3
 80039d4:	f7fd f88c 	bl	8000af0 <__aeabi_d2f>
 80039d8:	4603      	mov	r3, r0
 80039da:	4a7e      	ldr	r2, [pc, #504]	; (8003bd4 <TrajectoryGenerator+0x5bc>)
 80039dc:	6013      	str	r3, [r2, #0]
		  qi_1 = setposition;
 80039de:	4b7d      	ldr	r3, [pc, #500]	; (8003bd4 <TrajectoryGenerator+0x5bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4a7d      	ldr	r2, [pc, #500]	; (8003bd8 <TrajectoryGenerator+0x5c0>)
 80039e4:	6013      	str	r3, [r2, #0]
		  qdi_1 = setvelocity;
 80039e6:	4b78      	ldr	r3, [pc, #480]	; (8003bc8 <TrajectoryGenerator+0x5b0>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <TrajectoryGenerator+0x5c4>)
 80039ec:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 80039ee:	4b72      	ldr	r3, [pc, #456]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fc fd54 	bl	80004a0 <__aeabi_f2d>
 80039f8:	a36b      	add	r3, pc, #428	; (adr r3, 8003ba8 <TrajectoryGenerator+0x590>)
 80039fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fe:	f7fc fbf1 	bl	80001e4 <__adddf3>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4610      	mov	r0, r2
 8003a08:	4619      	mov	r1, r3
 8003a0a:	f7fd f871 	bl	8000af0 <__aeabi_d2f>
 8003a0e:	4603      	mov	r3, r0
 8003a10:	4a69      	ldr	r2, [pc, #420]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003a12:	6013      	str	r3, [r2, #0]
	break;
 8003a14:	e2f8      	b.n	8004008 <TrajectoryGenerator+0x9f0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003a16:	4b66      	ldr	r3, [pc, #408]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003a18:	ed93 7a00 	vldr	s14, [r3]
 8003a1c:	4b65      	ldr	r3, [pc, #404]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003a1e:	edd3 7a00 	vldr	s15, [r3]
 8003a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a26:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003a28:	edd3 7a00 	vldr	s15, [r3]
 8003a2c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a34:	d400      	bmi.n	8003a38 <TrajectoryGenerator+0x420>
	break;
 8003a36:	e2e7      	b.n	8004008 <TrajectoryGenerator+0x9f0>
	  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8003a38:	4b5d      	ldr	r3, [pc, #372]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003a42:	4b5c      	ldr	r3, [pc, #368]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003a44:	edd3 7a00 	vldr	s15, [r3]
 8003a48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a4c:	4b5a      	ldr	r3, [pc, #360]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003a4e:	edd3 7a00 	vldr	s15, [r3]
 8003a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a5a:	da00      	bge.n	8003a5e <TrajectoryGenerator+0x446>
	break;
 8003a5c:	e2d4      	b.n	8004008 <TrajectoryGenerator+0x9f0>
		  setacc = -qdd_max;
 8003a5e:	4b57      	ldr	r3, [pc, #348]	; (8003bbc <TrajectoryGenerator+0x5a4>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	eef1 7a67 	vneg.f32	s15, s15
 8003a68:	4b55      	ldr	r3, [pc, #340]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 8003a6a:	edc3 7a00 	vstr	s15, [r3]
		  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8003a6e:	4b52      	ldr	r3, [pc, #328]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003a70:	ed93 7a00 	vldr	s14, [r3]
 8003a74:	4b4f      	ldr	r3, [pc, #316]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003a76:	edd3 7a00 	vldr	s15, [r3]
 8003a7a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a7e:	4b4c      	ldr	r3, [pc, #304]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003a80:	edd3 7a00 	vldr	s15, [r3]
 8003a84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003a88:	4b4d      	ldr	r3, [pc, #308]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 8003a8a:	edd3 7a00 	vldr	s15, [r3]
 8003a8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a92:	4b52      	ldr	r3, [pc, #328]	; (8003bdc <TrajectoryGenerator+0x5c4>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a9c:	4b4a      	ldr	r3, [pc, #296]	; (8003bc8 <TrajectoryGenerator+0x5b0>)
 8003a9e:	edc3 7a00 	vstr	s15, [r3]
		  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 8003aa2:	4b45      	ldr	r3, [pc, #276]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003aa4:	ed93 7a00 	vldr	s14, [r3]
 8003aa8:	4b42      	ldr	r3, [pc, #264]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003aaa:	edd3 7a00 	vldr	s15, [r3]
 8003aae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ab2:	4b3f      	ldr	r3, [pc, #252]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003ab4:	edd3 7a00 	vldr	s15, [r3]
 8003ab8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003abc:	4b47      	ldr	r3, [pc, #284]	; (8003bdc <TrajectoryGenerator+0x5c4>)
 8003abe:	edd3 7a00 	vldr	s15, [r3]
 8003ac2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003ac6:	4b44      	ldr	r3, [pc, #272]	; (8003bd8 <TrajectoryGenerator+0x5c0>)
 8003ac8:	edd3 7a00 	vldr	s15, [r3]
 8003acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ad0:	ee17 0a90 	vmov	r0, s15
 8003ad4:	f7fc fce4 	bl	80004a0 <__aeabi_f2d>
 8003ad8:	4604      	mov	r4, r0
 8003ada:	460d      	mov	r5, r1
 8003adc:	4b38      	ldr	r3, [pc, #224]	; (8003bc0 <TrajectoryGenerator+0x5a8>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	f7fc fcdd 	bl	80004a0 <__aeabi_f2d>
 8003ae6:	f04f 0200 	mov.w	r2, #0
 8003aea:	4b39      	ldr	r3, [pc, #228]	; (8003bd0 <TrajectoryGenerator+0x5b8>)
 8003aec:	f7fc fd30 	bl	8000550 <__aeabi_dmul>
 8003af0:	4602      	mov	r2, r0
 8003af2:	460b      	mov	r3, r1
 8003af4:	4690      	mov	r8, r2
 8003af6:	4699      	mov	r9, r3
 8003af8:	4b2f      	ldr	r3, [pc, #188]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003afa:	ed93 7a00 	vldr	s14, [r3]
 8003afe:	4b2d      	ldr	r3, [pc, #180]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003b00:	edd3 7a00 	vldr	s15, [r3]
 8003b04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b08:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003b0a:	edd3 7a00 	vldr	s15, [r3]
 8003b0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b12:	ee17 0a90 	vmov	r0, s15
 8003b16:	f7fc fcc3 	bl	80004a0 <__aeabi_f2d>
 8003b1a:	4602      	mov	r2, r0
 8003b1c:	460b      	mov	r3, r1
 8003b1e:	4640      	mov	r0, r8
 8003b20:	4649      	mov	r1, r9
 8003b22:	f7fc fd15 	bl	8000550 <__aeabi_dmul>
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	4690      	mov	r8, r2
 8003b2c:	4699      	mov	r9, r3
 8003b2e:	4b22      	ldr	r3, [pc, #136]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003b30:	ed93 7a00 	vldr	s14, [r3]
 8003b34:	4b1f      	ldr	r3, [pc, #124]	; (8003bb4 <TrajectoryGenerator+0x59c>)
 8003b36:	edd3 7a00 	vldr	s15, [r3]
 8003b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b3e:	4b1c      	ldr	r3, [pc, #112]	; (8003bb0 <TrajectoryGenerator+0x598>)
 8003b40:	edd3 7a00 	vldr	s15, [r3]
 8003b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b48:	ee17 0a90 	vmov	r0, s15
 8003b4c:	f7fc fca8 	bl	80004a0 <__aeabi_f2d>
 8003b50:	4602      	mov	r2, r0
 8003b52:	460b      	mov	r3, r1
 8003b54:	4640      	mov	r0, r8
 8003b56:	4649      	mov	r1, r9
 8003b58:	f7fc fcfa 	bl	8000550 <__aeabi_dmul>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	460b      	mov	r3, r1
 8003b60:	4620      	mov	r0, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	f7fc fb3e 	bl	80001e4 <__adddf3>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	460b      	mov	r3, r1
 8003b6c:	4610      	mov	r0, r2
 8003b6e:	4619      	mov	r1, r3
 8003b70:	f7fc ffbe 	bl	8000af0 <__aeabi_d2f>
 8003b74:	4603      	mov	r3, r0
 8003b76:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <TrajectoryGenerator+0x5bc>)
 8003b78:	6013      	str	r3, [r2, #0]
		  time += 0.001;
 8003b7a:	4b0f      	ldr	r3, [pc, #60]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f7fc fc8e 	bl	80004a0 <__aeabi_f2d>
 8003b84:	a308      	add	r3, pc, #32	; (adr r3, 8003ba8 <TrajectoryGenerator+0x590>)
 8003b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8a:	f7fc fb2b 	bl	80001e4 <__adddf3>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fc ffab 	bl	8000af0 <__aeabi_d2f>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4a06      	ldr	r2, [pc, #24]	; (8003bb8 <TrajectoryGenerator+0x5a0>)
 8003b9e:	6013      	str	r3, [r2, #0]
	break;
 8003ba0:	e232      	b.n	8004008 <TrajectoryGenerator+0x9f0>
 8003ba2:	bf00      	nop
 8003ba4:	f3af 8000 	nop.w
 8003ba8:	d2f1a9fc 	.word	0xd2f1a9fc
 8003bac:	3f50624d 	.word	0x3f50624d
 8003bb0:	20000754 	.word	0x20000754
 8003bb4:	20000750 	.word	0x20000750
 8003bb8:	20000740 	.word	0x20000740
 8003bbc:	20000210 	.word	0x20000210
 8003bc0:	200007ac 	.word	0x200007ac
 8003bc4:	2000074c 	.word	0x2000074c
 8003bc8:	200007a8 	.word	0x200007a8
 8003bcc:	20000748 	.word	0x20000748
 8003bd0:	3fe00000 	.word	0x3fe00000
 8003bd4:	20000788 	.word	0x20000788
 8003bd8:	20000760 	.word	0x20000760
 8003bdc:	20000758 	.word	0x20000758
	 if(time <= tacc + initime)
 8003be0:	4b9d      	ldr	r3, [pc, #628]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	4b9d      	ldr	r3, [pc, #628]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003be8:	edd3 7a00 	vldr	s15, [r3]
 8003bec:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bf0:	4b9b      	ldr	r3, [pc, #620]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bfe:	f2c0 8092 	blt.w	8003d26 <TrajectoryGenerator+0x70e>
		 setacc = qdd_max;
 8003c02:	4b98      	ldr	r3, [pc, #608]	; (8003e64 <TrajectoryGenerator+0x84c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a98      	ldr	r2, [pc, #608]	; (8003e68 <TrajectoryGenerator+0x850>)
 8003c08:	6013      	str	r3, [r2, #0]
		 setvelocity = qdi + setacc*(time-initime);
 8003c0a:	4b95      	ldr	r3, [pc, #596]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003c0c:	ed93 7a00 	vldr	s14, [r3]
 8003c10:	4b92      	ldr	r3, [pc, #584]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003c12:	edd3 7a00 	vldr	s15, [r3]
 8003c16:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c1a:	4b93      	ldr	r3, [pc, #588]	; (8003e68 <TrajectoryGenerator+0x850>)
 8003c1c:	edd3 7a00 	vldr	s15, [r3]
 8003c20:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c24:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <TrajectoryGenerator+0x854>)
 8003c26:	edd3 7a00 	vldr	s15, [r3]
 8003c2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c2e:	4b90      	ldr	r3, [pc, #576]	; (8003e70 <TrajectoryGenerator+0x858>)
 8003c30:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8003c34:	4b8a      	ldr	r3, [pc, #552]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003c36:	ed93 7a00 	vldr	s14, [r3]
 8003c3a:	4b88      	ldr	r3, [pc, #544]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003c3c:	edd3 7a00 	vldr	s15, [r3]
 8003c40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003c44:	4b89      	ldr	r3, [pc, #548]	; (8003e6c <TrajectoryGenerator+0x854>)
 8003c46:	edd3 7a00 	vldr	s15, [r3]
 8003c4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c4e:	4b89      	ldr	r3, [pc, #548]	; (8003e74 <TrajectoryGenerator+0x85c>)
 8003c50:	edd3 7a00 	vldr	s15, [r3]
 8003c54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c58:	ee17 0a90 	vmov	r0, s15
 8003c5c:	f7fc fc20 	bl	80004a0 <__aeabi_f2d>
 8003c60:	4604      	mov	r4, r0
 8003c62:	460d      	mov	r5, r1
 8003c64:	4b80      	ldr	r3, [pc, #512]	; (8003e68 <TrajectoryGenerator+0x850>)
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4618      	mov	r0, r3
 8003c6a:	f7fc fc19 	bl	80004a0 <__aeabi_f2d>
 8003c6e:	f04f 0200 	mov.w	r2, #0
 8003c72:	4b81      	ldr	r3, [pc, #516]	; (8003e78 <TrajectoryGenerator+0x860>)
 8003c74:	f7fc fc6c 	bl	8000550 <__aeabi_dmul>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	460b      	mov	r3, r1
 8003c7c:	4690      	mov	r8, r2
 8003c7e:	4699      	mov	r9, r3
 8003c80:	4b77      	ldr	r3, [pc, #476]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003c82:	ed93 7a00 	vldr	s14, [r3]
 8003c86:	4b75      	ldr	r3, [pc, #468]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003c88:	edd3 7a00 	vldr	s15, [r3]
 8003c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c90:	ee17 0a90 	vmov	r0, s15
 8003c94:	f7fc fc04 	bl	80004a0 <__aeabi_f2d>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4640      	mov	r0, r8
 8003c9e:	4649      	mov	r1, r9
 8003ca0:	f7fc fc56 	bl	8000550 <__aeabi_dmul>
 8003ca4:	4602      	mov	r2, r0
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	4690      	mov	r8, r2
 8003caa:	4699      	mov	r9, r3
 8003cac:	4b6c      	ldr	r3, [pc, #432]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003cae:	ed93 7a00 	vldr	s14, [r3]
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003cb4:	edd3 7a00 	vldr	s15, [r3]
 8003cb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003cbc:	ee17 0a90 	vmov	r0, s15
 8003cc0:	f7fc fbee 	bl	80004a0 <__aeabi_f2d>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4640      	mov	r0, r8
 8003cca:	4649      	mov	r1, r9
 8003ccc:	f7fc fc40 	bl	8000550 <__aeabi_dmul>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	460b      	mov	r3, r1
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	4629      	mov	r1, r5
 8003cd8:	f7fc fa84 	bl	80001e4 <__adddf3>
 8003cdc:	4602      	mov	r2, r0
 8003cde:	460b      	mov	r3, r1
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	f7fc ff04 	bl	8000af0 <__aeabi_d2f>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	4a64      	ldr	r2, [pc, #400]	; (8003e7c <TrajectoryGenerator+0x864>)
 8003cec:	6013      	str	r3, [r2, #0]
		 qi_1 = setposition;
 8003cee:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <TrajectoryGenerator+0x864>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4a63      	ldr	r2, [pc, #396]	; (8003e80 <TrajectoryGenerator+0x868>)
 8003cf4:	6013      	str	r3, [r2, #0]
		 qdi_1 = setvelocity;
 8003cf6:	4b5e      	ldr	r3, [pc, #376]	; (8003e70 <TrajectoryGenerator+0x858>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4a62      	ldr	r2, [pc, #392]	; (8003e84 <TrajectoryGenerator+0x86c>)
 8003cfc:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003cfe:	4b58      	ldr	r3, [pc, #352]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4618      	mov	r0, r3
 8003d04:	f7fc fbcc 	bl	80004a0 <__aeabi_f2d>
 8003d08:	a351      	add	r3, pc, #324	; (adr r3, 8003e50 <TrajectoryGenerator+0x838>)
 8003d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d0e:	f7fc fa69 	bl	80001e4 <__adddf3>
 8003d12:	4602      	mov	r2, r0
 8003d14:	460b      	mov	r3, r1
 8003d16:	4610      	mov	r0, r2
 8003d18:	4619      	mov	r1, r3
 8003d1a:	f7fc fee9 	bl	8000af0 <__aeabi_d2f>
 8003d1e:	4603      	mov	r3, r0
 8003d20:	4a4f      	ldr	r2, [pc, #316]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003d22:	6013      	str	r3, [r2, #0]
	 break;
 8003d24:	e16f      	b.n	8004006 <TrajectoryGenerator+0x9ee>
	 else if(tacc+initime < time && time <= initime+tacc+tconst)
 8003d26:	4b4c      	ldr	r3, [pc, #304]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003d28:	ed93 7a00 	vldr	s14, [r3]
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003d2e:	edd3 7a00 	vldr	s15, [r3]
 8003d32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d36:	4b4a      	ldr	r3, [pc, #296]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003d38:	edd3 7a00 	vldr	s15, [r3]
 8003d3c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d44:	d552      	bpl.n	8003dec <TrajectoryGenerator+0x7d4>
 8003d46:	4b45      	ldr	r3, [pc, #276]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003d48:	ed93 7a00 	vldr	s14, [r3]
 8003d4c:	4b42      	ldr	r3, [pc, #264]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003d4e:	edd3 7a00 	vldr	s15, [r3]
 8003d52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d56:	4b4c      	ldr	r3, [pc, #304]	; (8003e88 <TrajectoryGenerator+0x870>)
 8003d58:	edd3 7a00 	vldr	s15, [r3]
 8003d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d60:	4b3f      	ldr	r3, [pc, #252]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d6e:	db3d      	blt.n	8003dec <TrajectoryGenerator+0x7d4>
		 setacc = 0;
 8003d70:	4b3d      	ldr	r3, [pc, #244]	; (8003e68 <TrajectoryGenerator+0x850>)
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	601a      	str	r2, [r3, #0]
		 setvelocity = qd_max;
 8003d78:	4b44      	ldr	r3, [pc, #272]	; (8003e8c <TrajectoryGenerator+0x874>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a3c      	ldr	r2, [pc, #240]	; (8003e70 <TrajectoryGenerator+0x858>)
 8003d7e:	6013      	str	r3, [r2, #0]
		 setposition = qi_1 + qd_max*(time-initime-tacc);
 8003d80:	4b37      	ldr	r3, [pc, #220]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003d82:	ed93 7a00 	vldr	s14, [r3]
 8003d86:	4b35      	ldr	r3, [pc, #212]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003d88:	edd3 7a00 	vldr	s15, [r3]
 8003d8c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d90:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003d92:	edd3 7a00 	vldr	s15, [r3]
 8003d96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003d9a:	4b3c      	ldr	r3, [pc, #240]	; (8003e8c <TrajectoryGenerator+0x874>)
 8003d9c:	edd3 7a00 	vldr	s15, [r3]
 8003da0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003da4:	4b36      	ldr	r3, [pc, #216]	; (8003e80 <TrajectoryGenerator+0x868>)
 8003da6:	edd3 7a00 	vldr	s15, [r3]
 8003daa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dae:	4b33      	ldr	r3, [pc, #204]	; (8003e7c <TrajectoryGenerator+0x864>)
 8003db0:	edc3 7a00 	vstr	s15, [r3]
		 qi_2 = setposition;
 8003db4:	4b31      	ldr	r3, [pc, #196]	; (8003e7c <TrajectoryGenerator+0x864>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a35      	ldr	r2, [pc, #212]	; (8003e90 <TrajectoryGenerator+0x878>)
 8003dba:	6013      	str	r3, [r2, #0]
		 qdi_2 = setvelocity;
 8003dbc:	4b2c      	ldr	r3, [pc, #176]	; (8003e70 <TrajectoryGenerator+0x858>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a34      	ldr	r2, [pc, #208]	; (8003e94 <TrajectoryGenerator+0x87c>)
 8003dc2:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003dc4:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f7fc fb69 	bl	80004a0 <__aeabi_f2d>
 8003dce:	a320      	add	r3, pc, #128	; (adr r3, 8003e50 <TrajectoryGenerator+0x838>)
 8003dd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd4:	f7fc fa06 	bl	80001e4 <__adddf3>
 8003dd8:	4602      	mov	r2, r0
 8003dda:	460b      	mov	r3, r1
 8003ddc:	4610      	mov	r0, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f7fc fe86 	bl	8000af0 <__aeabi_d2f>
 8003de4:	4603      	mov	r3, r0
 8003de6:	4a1e      	ldr	r2, [pc, #120]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003de8:	6013      	str	r3, [r2, #0]
	 break;
 8003dea:	e10c      	b.n	8004006 <TrajectoryGenerator+0x9ee>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003dec:	4b1a      	ldr	r3, [pc, #104]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	4b25      	ldr	r3, [pc, #148]	; (8003e88 <TrajectoryGenerator+0x870>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dfc:	4b17      	ldr	r3, [pc, #92]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e06:	4b16      	ldr	r3, [pc, #88]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e14:	d400      	bmi.n	8003e18 <TrajectoryGenerator+0x800>
	 break;
 8003e16:	e0f6      	b.n	8004006 <TrajectoryGenerator+0x9ee>
	 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8003e18:	4b0f      	ldr	r3, [pc, #60]	; (8003e58 <TrajectoryGenerator+0x840>)
 8003e1a:	ed93 7a00 	vldr	s14, [r3]
 8003e1e:	4b1a      	ldr	r3, [pc, #104]	; (8003e88 <TrajectoryGenerator+0x870>)
 8003e20:	edd3 7a00 	vldr	s15, [r3]
 8003e24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e28:	4b1b      	ldr	r3, [pc, #108]	; (8003e98 <TrajectoryGenerator+0x880>)
 8003e2a:	edd3 7a00 	vldr	s15, [r3]
 8003e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e32:	4b0a      	ldr	r3, [pc, #40]	; (8003e5c <TrajectoryGenerator+0x844>)
 8003e34:	edd3 7a00 	vldr	s15, [r3]
 8003e38:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <TrajectoryGenerator+0x848>)
 8003e3e:	edd3 7a00 	vldr	s15, [r3]
 8003e42:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	da27      	bge.n	8003e9c <TrajectoryGenerator+0x884>
	 break;
 8003e4c:	e0db      	b.n	8004006 <TrajectoryGenerator+0x9ee>
 8003e4e:	bf00      	nop
 8003e50:	d2f1a9fc 	.word	0xd2f1a9fc
 8003e54:	3f50624d 	.word	0x3f50624d
 8003e58:	20000768 	.word	0x20000768
 8003e5c:	20000750 	.word	0x20000750
 8003e60:	20000740 	.word	0x20000740
 8003e64:	20000210 	.word	0x20000210
 8003e68:	200007ac 	.word	0x200007ac
 8003e6c:	2000074c 	.word	0x2000074c
 8003e70:	200007a8 	.word	0x200007a8
 8003e74:	20000748 	.word	0x20000748
 8003e78:	3fe00000 	.word	0x3fe00000
 8003e7c:	20000788 	.word	0x20000788
 8003e80:	20000760 	.word	0x20000760
 8003e84:	20000758 	.word	0x20000758
 8003e88:	20000774 	.word	0x20000774
 8003e8c:	2000020c 	.word	0x2000020c
 8003e90:	20000764 	.word	0x20000764
 8003e94:	2000075c 	.word	0x2000075c
 8003e98:	20000778 	.word	0x20000778
		 setacc = -qdd_max;
 8003e9c:	4b5e      	ldr	r3, [pc, #376]	; (8004018 <TrajectoryGenerator+0xa00>)
 8003e9e:	edd3 7a00 	vldr	s15, [r3]
 8003ea2:	eef1 7a67 	vneg.f32	s15, s15
 8003ea6:	4b5d      	ldr	r3, [pc, #372]	; (800401c <TrajectoryGenerator+0xa04>)
 8003ea8:	edc3 7a00 	vstr	s15, [r3]
		 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8003eac:	4b5c      	ldr	r3, [pc, #368]	; (8004020 <TrajectoryGenerator+0xa08>)
 8003eae:	ed93 7a00 	vldr	s14, [r3]
 8003eb2:	4b5c      	ldr	r3, [pc, #368]	; (8004024 <TrajectoryGenerator+0xa0c>)
 8003eb4:	edd3 7a00 	vldr	s15, [r3]
 8003eb8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ebc:	4b5a      	ldr	r3, [pc, #360]	; (8004028 <TrajectoryGenerator+0xa10>)
 8003ebe:	edd3 7a00 	vldr	s15, [r3]
 8003ec2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ec6:	4b59      	ldr	r3, [pc, #356]	; (800402c <TrajectoryGenerator+0xa14>)
 8003ec8:	edd3 7a00 	vldr	s15, [r3]
 8003ecc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ed0:	4b52      	ldr	r3, [pc, #328]	; (800401c <TrajectoryGenerator+0xa04>)
 8003ed2:	edd3 7a00 	vldr	s15, [r3]
 8003ed6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003eda:	4b55      	ldr	r3, [pc, #340]	; (8004030 <TrajectoryGenerator+0xa18>)
 8003edc:	edd3 7a00 	vldr	s15, [r3]
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	4b53      	ldr	r3, [pc, #332]	; (8004034 <TrajectoryGenerator+0xa1c>)
 8003ee6:	edc3 7a00 	vstr	s15, [r3]
		 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8003eea:	4b4d      	ldr	r3, [pc, #308]	; (8004020 <TrajectoryGenerator+0xa08>)
 8003eec:	ed93 7a00 	vldr	s14, [r3]
 8003ef0:	4b4c      	ldr	r3, [pc, #304]	; (8004024 <TrajectoryGenerator+0xa0c>)
 8003ef2:	edd3 7a00 	vldr	s15, [r3]
 8003ef6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003efa:	4b4b      	ldr	r3, [pc, #300]	; (8004028 <TrajectoryGenerator+0xa10>)
 8003efc:	edd3 7a00 	vldr	s15, [r3]
 8003f00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f04:	4b49      	ldr	r3, [pc, #292]	; (800402c <TrajectoryGenerator+0xa14>)
 8003f06:	edd3 7a00 	vldr	s15, [r3]
 8003f0a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f0e:	4b48      	ldr	r3, [pc, #288]	; (8004030 <TrajectoryGenerator+0xa18>)
 8003f10:	edd3 7a00 	vldr	s15, [r3]
 8003f14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f18:	4b47      	ldr	r3, [pc, #284]	; (8004038 <TrajectoryGenerator+0xa20>)
 8003f1a:	edd3 7a00 	vldr	s15, [r3]
 8003f1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f22:	ee17 0a90 	vmov	r0, s15
 8003f26:	f7fc fabb 	bl	80004a0 <__aeabi_f2d>
 8003f2a:	4604      	mov	r4, r0
 8003f2c:	460d      	mov	r5, r1
 8003f2e:	4b3b      	ldr	r3, [pc, #236]	; (800401c <TrajectoryGenerator+0xa04>)
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4618      	mov	r0, r3
 8003f34:	f7fc fab4 	bl	80004a0 <__aeabi_f2d>
 8003f38:	f04f 0200 	mov.w	r2, #0
 8003f3c:	4b3f      	ldr	r3, [pc, #252]	; (800403c <TrajectoryGenerator+0xa24>)
 8003f3e:	f7fc fb07 	bl	8000550 <__aeabi_dmul>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	4690      	mov	r8, r2
 8003f48:	4699      	mov	r9, r3
 8003f4a:	4b35      	ldr	r3, [pc, #212]	; (8004020 <TrajectoryGenerator+0xa08>)
 8003f4c:	ed93 7a00 	vldr	s14, [r3]
 8003f50:	4b34      	ldr	r3, [pc, #208]	; (8004024 <TrajectoryGenerator+0xa0c>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f5a:	4b33      	ldr	r3, [pc, #204]	; (8004028 <TrajectoryGenerator+0xa10>)
 8003f5c:	edd3 7a00 	vldr	s15, [r3]
 8003f60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f64:	4b31      	ldr	r3, [pc, #196]	; (800402c <TrajectoryGenerator+0xa14>)
 8003f66:	edd3 7a00 	vldr	s15, [r3]
 8003f6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f6e:	ee17 0a90 	vmov	r0, s15
 8003f72:	f7fc fa95 	bl	80004a0 <__aeabi_f2d>
 8003f76:	4602      	mov	r2, r0
 8003f78:	460b      	mov	r3, r1
 8003f7a:	4640      	mov	r0, r8
 8003f7c:	4649      	mov	r1, r9
 8003f7e:	f7fc fae7 	bl	8000550 <__aeabi_dmul>
 8003f82:	4602      	mov	r2, r0
 8003f84:	460b      	mov	r3, r1
 8003f86:	4690      	mov	r8, r2
 8003f88:	4699      	mov	r9, r3
 8003f8a:	4b25      	ldr	r3, [pc, #148]	; (8004020 <TrajectoryGenerator+0xa08>)
 8003f8c:	ed93 7a00 	vldr	s14, [r3]
 8003f90:	4b24      	ldr	r3, [pc, #144]	; (8004024 <TrajectoryGenerator+0xa0c>)
 8003f92:	edd3 7a00 	vldr	s15, [r3]
 8003f96:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <TrajectoryGenerator+0xa10>)
 8003f9c:	edd3 7a00 	vldr	s15, [r3]
 8003fa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003fa4:	4b21      	ldr	r3, [pc, #132]	; (800402c <TrajectoryGenerator+0xa14>)
 8003fa6:	edd3 7a00 	vldr	s15, [r3]
 8003faa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003fae:	ee17 0a90 	vmov	r0, s15
 8003fb2:	f7fc fa75 	bl	80004a0 <__aeabi_f2d>
 8003fb6:	4602      	mov	r2, r0
 8003fb8:	460b      	mov	r3, r1
 8003fba:	4640      	mov	r0, r8
 8003fbc:	4649      	mov	r1, r9
 8003fbe:	f7fc fac7 	bl	8000550 <__aeabi_dmul>
 8003fc2:	4602      	mov	r2, r0
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	4620      	mov	r0, r4
 8003fc8:	4629      	mov	r1, r5
 8003fca:	f7fc f90b 	bl	80001e4 <__adddf3>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	460b      	mov	r3, r1
 8003fd2:	4610      	mov	r0, r2
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f7fc fd8b 	bl	8000af0 <__aeabi_d2f>
 8003fda:	4603      	mov	r3, r0
 8003fdc:	4a18      	ldr	r2, [pc, #96]	; (8004040 <TrajectoryGenerator+0xa28>)
 8003fde:	6013      	str	r3, [r2, #0]
		 time += 0.001;
 8003fe0:	4b0f      	ldr	r3, [pc, #60]	; (8004020 <TrajectoryGenerator+0xa08>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	f7fc fa5b 	bl	80004a0 <__aeabi_f2d>
 8003fea:	a309      	add	r3, pc, #36	; (adr r3, 8004010 <TrajectoryGenerator+0x9f8>)
 8003fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ff0:	f7fc f8f8 	bl	80001e4 <__adddf3>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	460b      	mov	r3, r1
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	4619      	mov	r1, r3
 8003ffc:	f7fc fd78 	bl	8000af0 <__aeabi_d2f>
 8004000:	4603      	mov	r3, r0
 8004002:	4a07      	ldr	r2, [pc, #28]	; (8004020 <TrajectoryGenerator+0xa08>)
 8004004:	6013      	str	r3, [r2, #0]
	 break;
 8004006:	bf00      	nop
}
 8004008:	bf00      	nop
 800400a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800400e:	bf00      	nop
 8004010:	d2f1a9fc 	.word	0xd2f1a9fc
 8004014:	3f50624d 	.word	0x3f50624d
 8004018:	20000210 	.word	0x20000210
 800401c:	200007ac 	.word	0x200007ac
 8004020:	20000740 	.word	0x20000740
 8004024:	20000750 	.word	0x20000750
 8004028:	20000768 	.word	0x20000768
 800402c:	20000774 	.word	0x20000774
 8004030:	2000075c 	.word	0x2000075c
 8004034:	200007a8 	.word	0x200007a8
 8004038:	20000764 	.word	0x20000764
 800403c:	3fe00000 	.word	0x3fe00000
 8004040:	20000788 	.word	0x20000788

08004044 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004044:	b480      	push	{r7}
 8004046:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004048:	b672      	cpsid	i
}
 800404a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800404c:	e7fe      	b.n	800404c <Error_Handler+0x8>
	...

08004050 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b082      	sub	sp, #8
 8004054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	607b      	str	r3, [r7, #4]
 800405a:	4b10      	ldr	r3, [pc, #64]	; (800409c <HAL_MspInit+0x4c>)
 800405c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800405e:	4a0f      	ldr	r2, [pc, #60]	; (800409c <HAL_MspInit+0x4c>)
 8004060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004064:	6453      	str	r3, [r2, #68]	; 0x44
 8004066:	4b0d      	ldr	r3, [pc, #52]	; (800409c <HAL_MspInit+0x4c>)
 8004068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800406a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800406e:	607b      	str	r3, [r7, #4]
 8004070:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	603b      	str	r3, [r7, #0]
 8004076:	4b09      	ldr	r3, [pc, #36]	; (800409c <HAL_MspInit+0x4c>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800407a:	4a08      	ldr	r2, [pc, #32]	; (800409c <HAL_MspInit+0x4c>)
 800407c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004080:	6413      	str	r3, [r2, #64]	; 0x40
 8004082:	4b06      	ldr	r3, [pc, #24]	; (800409c <HAL_MspInit+0x4c>)
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408a:	603b      	str	r3, [r7, #0]
 800408c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800408e:	2007      	movs	r0, #7
 8004090:	f001 f89a 	bl	80051c8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004094:	bf00      	nop
 8004096:	3708      	adds	r7, #8
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <HAL_ADC_MspInit+0xdc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d157      	bne.n	8004172 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	613b      	str	r3, [r7, #16]
 80040c6:	4b2e      	ldr	r3, [pc, #184]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	4a2d      	ldr	r2, [pc, #180]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040d0:	6453      	str	r3, [r2, #68]	; 0x44
 80040d2:	4b2b      	ldr	r3, [pc, #172]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040da:	613b      	str	r3, [r7, #16]
 80040dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	60fb      	str	r3, [r7, #12]
 80040e2:	4b27      	ldr	r3, [pc, #156]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	4a26      	ldr	r2, [pc, #152]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040e8:	f043 0301 	orr.w	r3, r3, #1
 80040ec:	6313      	str	r3, [r2, #48]	; 0x30
 80040ee:	4b24      	ldr	r3, [pc, #144]	; (8004180 <HAL_ADC_MspInit+0xe0>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	60fb      	str	r3, [r7, #12]
 80040f8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80040fa:	2303      	movs	r3, #3
 80040fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040fe:	2303      	movs	r3, #3
 8004100:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004102:	2300      	movs	r3, #0
 8004104:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004106:	f107 0314 	add.w	r3, r7, #20
 800410a:	4619      	mov	r1, r3
 800410c:	481d      	ldr	r0, [pc, #116]	; (8004184 <HAL_ADC_MspInit+0xe4>)
 800410e:	f001 fcb9 	bl	8005a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004112:	4b1d      	ldr	r3, [pc, #116]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004114:	4a1d      	ldr	r2, [pc, #116]	; (800418c <HAL_ADC_MspInit+0xec>)
 8004116:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004118:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800411a:	2200      	movs	r2, #0
 800411c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004120:	2200      	movs	r2, #0
 8004122:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004124:	4b18      	ldr	r3, [pc, #96]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004126:	2200      	movs	r2, #0
 8004128:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800412a:	4b17      	ldr	r3, [pc, #92]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800412c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004130:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004134:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004138:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800413a:	4b13      	ldr	r3, [pc, #76]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800413c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004140:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004142:	4b11      	ldr	r3, [pc, #68]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004144:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004148:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800414a:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800414c:	2200      	movs	r2, #0
 800414e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004150:	4b0d      	ldr	r3, [pc, #52]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004152:	2200      	movs	r2, #0
 8004154:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004156:	480c      	ldr	r0, [pc, #48]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 8004158:	f001 f878 	bl	800524c <HAL_DMA_Init>
 800415c:	4603      	mov	r3, r0
 800415e:	2b00      	cmp	r3, #0
 8004160:	d001      	beq.n	8004166 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004162:	f7ff ff6f 	bl	8004044 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
 800416c:	4a06      	ldr	r2, [pc, #24]	; (8004188 <HAL_ADC_MspInit+0xe8>)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004172:	bf00      	nop
 8004174:	3728      	adds	r7, #40	; 0x28
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40012000 	.word	0x40012000
 8004180:	40023800 	.word	0x40023800
 8004184:	40020000 	.word	0x40020000
 8004188:	20000318 	.word	0x20000318
 800418c:	40026410 	.word	0x40026410

08004190 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	; 0x28
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 0314 	add.w	r3, r7, #20
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a21      	ldr	r2, [pc, #132]	; (8004234 <HAL_I2C_MspInit+0xa4>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d13c      	bne.n	800422c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 80041b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ba:	4a1f      	ldr	r2, [pc, #124]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 80041bc:	f043 0302 	orr.w	r3, r3, #2
 80041c0:	6313      	str	r3, [r2, #48]	; 0x30
 80041c2:	4b1d      	ldr	r3, [pc, #116]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 80041c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c6:	f003 0302 	and.w	r3, r3, #2
 80041ca:	613b      	str	r3, [r7, #16]
 80041cc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80041ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041d4:	2312      	movs	r3, #18
 80041d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041d8:	2300      	movs	r3, #0
 80041da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041dc:	2303      	movs	r3, #3
 80041de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041e0:	2304      	movs	r3, #4
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041e4:	f107 0314 	add.w	r3, r7, #20
 80041e8:	4619      	mov	r1, r3
 80041ea:	4814      	ldr	r0, [pc, #80]	; (800423c <HAL_I2C_MspInit+0xac>)
 80041ec:	f001 fc4a 	bl	8005a84 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041f0:	2300      	movs	r3, #0
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	4a0f      	ldr	r2, [pc, #60]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 80041fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004200:	4b0d      	ldr	r3, [pc, #52]	; (8004238 <HAL_I2C_MspInit+0xa8>)
 8004202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004204:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004208:	60fb      	str	r3, [r7, #12]
 800420a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800420c:	2200      	movs	r2, #0
 800420e:	2100      	movs	r1, #0
 8004210:	201f      	movs	r0, #31
 8004212:	f000 ffe4 	bl	80051de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004216:	201f      	movs	r0, #31
 8004218:	f000 fffd 	bl	8005216 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800421c:	2200      	movs	r2, #0
 800421e:	2100      	movs	r1, #0
 8004220:	2020      	movs	r0, #32
 8004222:	f000 ffdc 	bl	80051de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004226:	2020      	movs	r0, #32
 8004228:	f000 fff5 	bl	8005216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800422c:	bf00      	nop
 800422e:	3728      	adds	r7, #40	; 0x28
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	40005400 	.word	0x40005400
 8004238:	40023800 	.word	0x40023800
 800423c:	40020400 	.word	0x40020400

08004240 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b084      	sub	sp, #16
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	4a0e      	ldr	r2, [pc, #56]	; (8004288 <HAL_TIM_PWM_MspInit+0x48>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d115      	bne.n	800427e <HAL_TIM_PWM_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004252:	2300      	movs	r3, #0
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	4b0d      	ldr	r3, [pc, #52]	; (800428c <HAL_TIM_PWM_MspInit+0x4c>)
 8004258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800425a:	4a0c      	ldr	r2, [pc, #48]	; (800428c <HAL_TIM_PWM_MspInit+0x4c>)
 800425c:	f043 0301 	orr.w	r3, r3, #1
 8004260:	6453      	str	r3, [r2, #68]	; 0x44
 8004262:	4b0a      	ldr	r3, [pc, #40]	; (800428c <HAL_TIM_PWM_MspInit+0x4c>)
 8004264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004266:	f003 0301 	and.w	r3, r3, #1
 800426a:	60fb      	str	r3, [r7, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800426e:	2200      	movs	r2, #0
 8004270:	2100      	movs	r1, #0
 8004272:	201a      	movs	r0, #26
 8004274:	f000 ffb3 	bl	80051de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004278:	201a      	movs	r0, #26
 800427a:	f000 ffcc 	bl	8005216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800427e:	bf00      	nop
 8004280:	3710      	adds	r7, #16
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}
 8004286:	bf00      	nop
 8004288:	40010000 	.word	0x40010000
 800428c:	40023800 	.word	0x40023800

08004290 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004298:	f107 0314 	add.w	r3, r7, #20
 800429c:	2200      	movs	r2, #0
 800429e:	601a      	str	r2, [r3, #0]
 80042a0:	605a      	str	r2, [r3, #4]
 80042a2:	609a      	str	r2, [r3, #8]
 80042a4:	60da      	str	r2, [r3, #12]
 80042a6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	4a19      	ldr	r2, [pc, #100]	; (8004314 <HAL_TIM_Encoder_MspInit+0x84>)
 80042ae:	4293      	cmp	r3, r2
 80042b0:	d12b      	bne.n	800430a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042b2:	2300      	movs	r3, #0
 80042b4:	613b      	str	r3, [r7, #16]
 80042b6:	4b18      	ldr	r3, [pc, #96]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ba:	4a17      	ldr	r2, [pc, #92]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042bc:	f043 0302 	orr.w	r3, r3, #2
 80042c0:	6413      	str	r3, [r2, #64]	; 0x40
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	f003 0302 	and.w	r3, r3, #2
 80042ca:	613b      	str	r3, [r7, #16]
 80042cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042ce:	2300      	movs	r3, #0
 80042d0:	60fb      	str	r3, [r7, #12]
 80042d2:	4b11      	ldr	r3, [pc, #68]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042d6:	4a10      	ldr	r2, [pc, #64]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042d8:	f043 0301 	orr.w	r3, r3, #1
 80042dc:	6313      	str	r3, [r2, #48]	; 0x30
 80042de:	4b0e      	ldr	r3, [pc, #56]	; (8004318 <HAL_TIM_Encoder_MspInit+0x88>)
 80042e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80042ea:	23c0      	movs	r3, #192	; 0xc0
 80042ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042ee:	2302      	movs	r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042f2:	2300      	movs	r3, #0
 80042f4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042f6:	2300      	movs	r3, #0
 80042f8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80042fa:	2302      	movs	r3, #2
 80042fc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042fe:	f107 0314 	add.w	r3, r7, #20
 8004302:	4619      	mov	r1, r3
 8004304:	4805      	ldr	r0, [pc, #20]	; (800431c <HAL_TIM_Encoder_MspInit+0x8c>)
 8004306:	f001 fbbd 	bl	8005a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800430a:	bf00      	nop
 800430c:	3728      	adds	r7, #40	; 0x28
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	40000400 	.word	0x40000400
 8004318:	40023800 	.word	0x40023800
 800431c:	40020000 	.word	0x40020000

08004320 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b084      	sub	sp, #16
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a0e      	ldr	r2, [pc, #56]	; (8004368 <HAL_TIM_Base_MspInit+0x48>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d115      	bne.n	800435e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	60fb      	str	r3, [r7, #12]
 8004336:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_TIM_Base_MspInit+0x4c>)
 8004338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800433a:	4a0c      	ldr	r2, [pc, #48]	; (800436c <HAL_TIM_Base_MspInit+0x4c>)
 800433c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004340:	6453      	str	r3, [r2, #68]	; 0x44
 8004342:	4b0a      	ldr	r3, [pc, #40]	; (800436c <HAL_TIM_Base_MspInit+0x4c>)
 8004344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004346:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800434a:	60fb      	str	r3, [r7, #12]
 800434c:	68fb      	ldr	r3, [r7, #12]
    /* TIM11 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	201a      	movs	r0, #26
 8004354:	f000 ff43 	bl	80051de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004358:	201a      	movs	r0, #26
 800435a:	f000 ff5c 	bl	8005216 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800435e:	bf00      	nop
 8004360:	3710      	adds	r7, #16
 8004362:	46bd      	mov	sp, r7
 8004364:	bd80      	pop	{r7, pc}
 8004366:	bf00      	nop
 8004368:	40014800 	.word	0x40014800
 800436c:	40023800 	.word	0x40023800

08004370 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004378:	f107 030c 	add.w	r3, r7, #12
 800437c:	2200      	movs	r2, #0
 800437e:	601a      	str	r2, [r3, #0]
 8004380:	605a      	str	r2, [r3, #4]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a12      	ldr	r2, [pc, #72]	; (80043d8 <HAL_TIM_MspPostInit+0x68>)
 800438e:	4293      	cmp	r3, r2
 8004390:	d11e      	bne.n	80043d0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004392:	2300      	movs	r3, #0
 8004394:	60bb      	str	r3, [r7, #8]
 8004396:	4b11      	ldr	r3, [pc, #68]	; (80043dc <HAL_TIM_MspPostInit+0x6c>)
 8004398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800439a:	4a10      	ldr	r2, [pc, #64]	; (80043dc <HAL_TIM_MspPostInit+0x6c>)
 800439c:	f043 0301 	orr.w	r3, r3, #1
 80043a0:	6313      	str	r3, [r2, #48]	; 0x30
 80043a2:	4b0e      	ldr	r3, [pc, #56]	; (80043dc <HAL_TIM_MspPostInit+0x6c>)
 80043a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	60bb      	str	r3, [r7, #8]
 80043ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80043ae:	f44f 7340 	mov.w	r3, #768	; 0x300
 80043b2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043b4:	2302      	movs	r3, #2
 80043b6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043b8:	2300      	movs	r3, #0
 80043ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043bc:	2300      	movs	r3, #0
 80043be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80043c0:	2301      	movs	r3, #1
 80043c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043c4:	f107 030c 	add.w	r3, r7, #12
 80043c8:	4619      	mov	r1, r3
 80043ca:	4805      	ldr	r0, [pc, #20]	; (80043e0 <HAL_TIM_MspPostInit+0x70>)
 80043cc:	f001 fb5a 	bl	8005a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80043d0:	bf00      	nop
 80043d2:	3720      	adds	r7, #32
 80043d4:	46bd      	mov	sp, r7
 80043d6:	bd80      	pop	{r7, pc}
 80043d8:	40010000 	.word	0x40010000
 80043dc:	40023800 	.word	0x40023800
 80043e0:	40020000 	.word	0x40020000

080043e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b08c      	sub	sp, #48	; 0x30
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043ec:	f107 031c 	add.w	r3, r7, #28
 80043f0:	2200      	movs	r2, #0
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	605a      	str	r2, [r3, #4]
 80043f6:	609a      	str	r2, [r3, #8]
 80043f8:	60da      	str	r2, [r3, #12]
 80043fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	4a5c      	ldr	r2, [pc, #368]	; (8004574 <HAL_UART_MspInit+0x190>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d14b      	bne.n	800449e <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	4b5b      	ldr	r3, [pc, #364]	; (8004578 <HAL_UART_MspInit+0x194>)
 800440c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800440e:	4a5a      	ldr	r2, [pc, #360]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004410:	f043 0310 	orr.w	r3, r3, #16
 8004414:	6453      	str	r3, [r2, #68]	; 0x44
 8004416:	4b58      	ldr	r3, [pc, #352]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441a:	f003 0310 	and.w	r3, r3, #16
 800441e:	61bb      	str	r3, [r7, #24]
 8004420:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004422:	2300      	movs	r3, #0
 8004424:	617b      	str	r3, [r7, #20]
 8004426:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442a:	4a53      	ldr	r2, [pc, #332]	; (8004578 <HAL_UART_MspInit+0x194>)
 800442c:	f043 0301 	orr.w	r3, r3, #1
 8004430:	6313      	str	r3, [r2, #48]	; 0x30
 8004432:	4b51      	ldr	r3, [pc, #324]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004436:	f003 0301 	and.w	r3, r3, #1
 800443a:	617b      	str	r3, [r7, #20]
 800443c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	613b      	str	r3, [r7, #16]
 8004442:	4b4d      	ldr	r3, [pc, #308]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a4c      	ldr	r2, [pc, #304]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004448:	f043 0302 	orr.w	r3, r3, #2
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b4a      	ldr	r3, [pc, #296]	; (8004578 <HAL_UART_MspInit+0x194>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0302 	and.w	r3, r3, #2
 8004456:	613b      	str	r3, [r7, #16]
 8004458:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800445a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800445e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004468:	2303      	movs	r3, #3
 800446a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800446c:	2307      	movs	r3, #7
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004470:	f107 031c 	add.w	r3, r7, #28
 8004474:	4619      	mov	r1, r3
 8004476:	4841      	ldr	r0, [pc, #260]	; (800457c <HAL_UART_MspInit+0x198>)
 8004478:	f001 fb04 	bl	8005a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800447c:	2380      	movs	r3, #128	; 0x80
 800447e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004480:	2302      	movs	r3, #2
 8004482:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004484:	2300      	movs	r3, #0
 8004486:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004488:	2303      	movs	r3, #3
 800448a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800448c:	2307      	movs	r3, #7
 800448e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004490:	f107 031c 	add.w	r3, r7, #28
 8004494:	4619      	mov	r1, r3
 8004496:	483a      	ldr	r0, [pc, #232]	; (8004580 <HAL_UART_MspInit+0x19c>)
 8004498:	f001 faf4 	bl	8005a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800449c:	e066      	b.n	800456c <HAL_UART_MspInit+0x188>
  else if(huart->Instance==USART2)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4a38      	ldr	r2, [pc, #224]	; (8004584 <HAL_UART_MspInit+0x1a0>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d161      	bne.n	800456c <HAL_UART_MspInit+0x188>
    __HAL_RCC_USART2_CLK_ENABLE();
 80044a8:	2300      	movs	r3, #0
 80044aa:	60fb      	str	r3, [r7, #12]
 80044ac:	4b32      	ldr	r3, [pc, #200]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	4a31      	ldr	r2, [pc, #196]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044b6:	6413      	str	r3, [r2, #64]	; 0x40
 80044b8:	4b2f      	ldr	r3, [pc, #188]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c0:	60fb      	str	r3, [r7, #12]
 80044c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044c4:	2300      	movs	r3, #0
 80044c6:	60bb      	str	r3, [r7, #8]
 80044c8:	4b2b      	ldr	r3, [pc, #172]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044cc:	4a2a      	ldr	r2, [pc, #168]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6313      	str	r3, [r2, #48]	; 0x30
 80044d4:	4b28      	ldr	r3, [pc, #160]	; (8004578 <HAL_UART_MspInit+0x194>)
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80044e0:	230c      	movs	r3, #12
 80044e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e4:	2302      	movs	r3, #2
 80044e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044e8:	2300      	movs	r3, #0
 80044ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044ec:	2303      	movs	r3, #3
 80044ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044f0:	2307      	movs	r3, #7
 80044f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f4:	f107 031c 	add.w	r3, r7, #28
 80044f8:	4619      	mov	r1, r3
 80044fa:	4820      	ldr	r0, [pc, #128]	; (800457c <HAL_UART_MspInit+0x198>)
 80044fc:	f001 fac2 	bl	8005a84 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004500:	4b21      	ldr	r3, [pc, #132]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004502:	4a22      	ldr	r2, [pc, #136]	; (800458c <HAL_UART_MspInit+0x1a8>)
 8004504:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004506:	4b20      	ldr	r3, [pc, #128]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004508:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800450c:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800450e:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004510:	2240      	movs	r2, #64	; 0x40
 8004512:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004514:	4b1c      	ldr	r3, [pc, #112]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004516:	2200      	movs	r2, #0
 8004518:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800451a:	4b1b      	ldr	r3, [pc, #108]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 800451c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004520:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004522:	4b19      	ldr	r3, [pc, #100]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004524:	2200      	movs	r2, #0
 8004526:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 800452a:	2200      	movs	r2, #0
 800452c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800452e:	4b16      	ldr	r3, [pc, #88]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004530:	2200      	movs	r2, #0
 8004532:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004534:	4b14      	ldr	r3, [pc, #80]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004536:	2200      	movs	r2, #0
 8004538:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800453a:	4b13      	ldr	r3, [pc, #76]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 800453c:	2200      	movs	r2, #0
 800453e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004540:	4811      	ldr	r0, [pc, #68]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004542:	f000 fe83 	bl	800524c <HAL_DMA_Init>
 8004546:	4603      	mov	r3, r0
 8004548:	2b00      	cmp	r3, #0
 800454a:	d001      	beq.n	8004550 <HAL_UART_MspInit+0x16c>
      Error_Handler();
 800454c:	f7ff fd7a 	bl	8004044 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0d      	ldr	r2, [pc, #52]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004554:	635a      	str	r2, [r3, #52]	; 0x34
 8004556:	4a0c      	ldr	r2, [pc, #48]	; (8004588 <HAL_UART_MspInit+0x1a4>)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800455c:	2200      	movs	r2, #0
 800455e:	2100      	movs	r1, #0
 8004560:	2026      	movs	r0, #38	; 0x26
 8004562:	f000 fe3c 	bl	80051de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004566:	2026      	movs	r0, #38	; 0x26
 8004568:	f000 fe55 	bl	8005216 <HAL_NVIC_EnableIRQ>
}
 800456c:	bf00      	nop
 800456e:	3730      	adds	r7, #48	; 0x30
 8004570:	46bd      	mov	sp, r7
 8004572:	bd80      	pop	{r7, pc}
 8004574:	40011000 	.word	0x40011000
 8004578:	40023800 	.word	0x40023800
 800457c:	40020000 	.word	0x40020000
 8004580:	40020400 	.word	0x40020400
 8004584:	40004400 	.word	0x40004400
 8004588:	200006d0 	.word	0x200006d0
 800458c:	400260a0 	.word	0x400260a0

08004590 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004590:	b480      	push	{r7}
 8004592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004594:	e7fe      	b.n	8004594 <NMI_Handler+0x4>

08004596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004596:	b480      	push	{r7}
 8004598:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800459a:	e7fe      	b.n	800459a <HardFault_Handler+0x4>

0800459c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80045a0:	e7fe      	b.n	80045a0 <MemManage_Handler+0x4>

080045a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80045a2:	b480      	push	{r7}
 80045a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80045a6:	e7fe      	b.n	80045a6 <BusFault_Handler+0x4>

080045a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80045ac:	e7fe      	b.n	80045ac <UsageFault_Handler+0x4>

080045ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80045ae:	b480      	push	{r7}
 80045b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80045b2:	bf00      	nop
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80045bc:	b480      	push	{r7}
 80045be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80045c0:	bf00      	nop
 80045c2:	46bd      	mov	sp, r7
 80045c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c8:	4770      	bx	lr

080045ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045ca:	b480      	push	{r7}
 80045cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045ce:	bf00      	nop
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045dc:	f000 f8de 	bl	800479c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045e0:	bf00      	nop
 80045e2:	bd80      	pop	{r7, pc}

080045e4 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 80045e8:	2004      	movs	r0, #4
 80045ea:	f001 fc01 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 80045ee:	bf00      	nop
 80045f0:	bd80      	pop	{r7, pc}

080045f2 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80045f2:	b580      	push	{r7, lr}
 80045f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80045f6:	2008      	movs	r0, #8
 80045f8:	f001 fbfa 	bl	8005df0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 80045fc:	bf00      	nop
 80045fe:	bd80      	pop	{r7, pc}

08004600 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004604:	4802      	ldr	r0, [pc, #8]	; (8004610 <DMA1_Stream6_IRQHandler+0x10>)
 8004606:	f000 ffb9 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800460a:	bf00      	nop
 800460c:	bd80      	pop	{r7, pc}
 800460e:	bf00      	nop
 8004610:	200006d0 	.word	0x200006d0

08004614 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004618:	4803      	ldr	r0, [pc, #12]	; (8004628 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800461a:	f005 f9a3 	bl	8009964 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800461e:	4803      	ldr	r0, [pc, #12]	; (800462c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004620:	f005 f9a0 	bl	8009964 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004624:	bf00      	nop
 8004626:	bd80      	pop	{r7, pc}
 8004628:	200003cc 	.word	0x200003cc
 800462c:	20000534 	.word	0x20000534

08004630 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004634:	4802      	ldr	r0, [pc, #8]	; (8004640 <I2C1_EV_IRQHandler+0x10>)
 8004636:	f002 f85b 	bl	80066f0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	20000378 	.word	0x20000378

08004644 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004648:	4802      	ldr	r0, [pc, #8]	; (8004654 <I2C1_ER_IRQHandler+0x10>)
 800464a:	f002 f9c2 	bl	80069d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800464e:	bf00      	nop
 8004650:	bd80      	pop	{r7, pc}
 8004652:	bf00      	nop
 8004654:	20000378 	.word	0x20000378

08004658 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800465c:	4802      	ldr	r0, [pc, #8]	; (8004668 <USART2_IRQHandler+0x10>)
 800465e:	f006 fb31 	bl	800acc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004662:	bf00      	nop
 8004664:	bd80      	pop	{r7, pc}
 8004666:	bf00      	nop
 8004668:	2000065c 	.word	0x2000065c

0800466c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <DMA2_Stream0_IRQHandler+0x10>)
 8004672:	f000 ff83 	bl	800557c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000318 	.word	0x20000318

08004680 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004680:	b480      	push	{r7}
 8004682:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <SystemInit+0x20>)
 8004686:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800468a:	4a05      	ldr	r2, [pc, #20]	; (80046a0 <SystemInit+0x20>)
 800468c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004690:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004694:	bf00      	nop
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
 800469e:	bf00      	nop
 80046a0:	e000ed00 	.word	0xe000ed00

080046a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80046a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80046a8:	480d      	ldr	r0, [pc, #52]	; (80046e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80046aa:	490e      	ldr	r1, [pc, #56]	; (80046e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80046ac:	4a0e      	ldr	r2, [pc, #56]	; (80046e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80046ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80046b0:	e002      	b.n	80046b8 <LoopCopyDataInit>

080046b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80046b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80046b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80046b6:	3304      	adds	r3, #4

080046b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80046b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80046ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80046bc:	d3f9      	bcc.n	80046b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80046be:	4a0b      	ldr	r2, [pc, #44]	; (80046ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80046c0:	4c0b      	ldr	r4, [pc, #44]	; (80046f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80046c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80046c4:	e001      	b.n	80046ca <LoopFillZerobss>

080046c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80046c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80046c8:	3204      	adds	r2, #4

080046ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80046ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80046cc:	d3fb      	bcc.n	80046c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80046ce:	f7ff ffd7 	bl	8004680 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046d2:	f007 fb43 	bl	800bd5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80046d6:	f7fc ff33 	bl	8001540 <main>
  bx  lr    
 80046da:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80046dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80046e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80046e4:	200002b0 	.word	0x200002b0
  ldr r2, =_sidata
 80046e8:	0800c240 	.word	0x0800c240
  ldr r2, =_sbss
 80046ec:	200002b0 	.word	0x200002b0
  ldr r4, =_ebss
 80046f0:	20000e64 	.word	0x20000e64

080046f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80046f4:	e7fe      	b.n	80046f4 <ADC_IRQHandler>
	...

080046f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80046fc:	4b0e      	ldr	r3, [pc, #56]	; (8004738 <HAL_Init+0x40>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4a0d      	ldr	r2, [pc, #52]	; (8004738 <HAL_Init+0x40>)
 8004702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004706:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004708:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <HAL_Init+0x40>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a0a      	ldr	r2, [pc, #40]	; (8004738 <HAL_Init+0x40>)
 800470e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004712:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004714:	4b08      	ldr	r3, [pc, #32]	; (8004738 <HAL_Init+0x40>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4a07      	ldr	r2, [pc, #28]	; (8004738 <HAL_Init+0x40>)
 800471a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800471e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004720:	2003      	movs	r0, #3
 8004722:	f000 fd51 	bl	80051c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004726:	2000      	movs	r0, #0
 8004728:	f000 f808 	bl	800473c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800472c:	f7ff fc90 	bl	8004050 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004730:	2300      	movs	r3, #0
}
 8004732:	4618      	mov	r0, r3
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	40023c00 	.word	0x40023c00

0800473c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b082      	sub	sp, #8
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004744:	4b12      	ldr	r3, [pc, #72]	; (8004790 <HAL_InitTick+0x54>)
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	4b12      	ldr	r3, [pc, #72]	; (8004794 <HAL_InitTick+0x58>)
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	4619      	mov	r1, r3
 800474e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004752:	fbb3 f3f1 	udiv	r3, r3, r1
 8004756:	fbb2 f3f3 	udiv	r3, r2, r3
 800475a:	4618      	mov	r0, r3
 800475c:	f000 fd69 	bl	8005232 <HAL_SYSTICK_Config>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e00e      	b.n	8004788 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2b0f      	cmp	r3, #15
 800476e:	d80a      	bhi.n	8004786 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004770:	2200      	movs	r2, #0
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	f04f 30ff 	mov.w	r0, #4294967295
 8004778:	f000 fd31 	bl	80051de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800477c:	4a06      	ldr	r2, [pc, #24]	; (8004798 <HAL_InitTick+0x5c>)
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004782:	2300      	movs	r3, #0
 8004784:	e000      	b.n	8004788 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
}
 8004788:	4618      	mov	r0, r3
 800478a:	3708      	adds	r7, #8
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	20000240 	.word	0x20000240
 8004794:	20000248 	.word	0x20000248
 8004798:	20000244 	.word	0x20000244

0800479c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800479c:	b480      	push	{r7}
 800479e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80047a0:	4b06      	ldr	r3, [pc, #24]	; (80047bc <HAL_IncTick+0x20>)
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	4b06      	ldr	r3, [pc, #24]	; (80047c0 <HAL_IncTick+0x24>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4413      	add	r3, r2
 80047ac:	4a04      	ldr	r2, [pc, #16]	; (80047c0 <HAL_IncTick+0x24>)
 80047ae:	6013      	str	r3, [r2, #0]
}
 80047b0:	bf00      	nop
 80047b2:	46bd      	mov	sp, r7
 80047b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b8:	4770      	bx	lr
 80047ba:	bf00      	nop
 80047bc:	20000248 	.word	0x20000248
 80047c0:	20000e60 	.word	0x20000e60

080047c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  return uwTick;
 80047c8:	4b03      	ldr	r3, [pc, #12]	; (80047d8 <HAL_GetTick+0x14>)
 80047ca:	681b      	ldr	r3, [r3, #0]
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000e60 	.word	0x20000e60

080047dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80047e4:	f7ff ffee 	bl	80047c4 <HAL_GetTick>
 80047e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d005      	beq.n	8004802 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80047f6:	4b0a      	ldr	r3, [pc, #40]	; (8004820 <HAL_Delay+0x44>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	461a      	mov	r2, r3
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	4413      	add	r3, r2
 8004800:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004802:	bf00      	nop
 8004804:	f7ff ffde 	bl	80047c4 <HAL_GetTick>
 8004808:	4602      	mov	r2, r0
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	1ad3      	subs	r3, r2, r3
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d8f7      	bhi.n	8004804 <HAL_Delay+0x28>
  {
  }
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop
 8004818:	3710      	adds	r7, #16
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}
 800481e:	bf00      	nop
 8004820:	20000248 	.word	0x20000248

08004824 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800482c:	2300      	movs	r3, #0
 800482e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d101      	bne.n	800483a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004836:	2301      	movs	r3, #1
 8004838:	e033      	b.n	80048a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800483e:	2b00      	cmp	r3, #0
 8004840:	d109      	bne.n	8004856 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fc2c 	bl	80040a0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2200      	movs	r2, #0
 800484c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800485a:	f003 0310 	and.w	r3, r3, #16
 800485e:	2b00      	cmp	r3, #0
 8004860:	d118      	bne.n	8004894 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004866:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800486a:	f023 0302 	bic.w	r3, r3, #2
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fa58 	bl	8004d2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2200      	movs	r2, #0
 8004880:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004886:	f023 0303 	bic.w	r3, r3, #3
 800488a:	f043 0201 	orr.w	r2, r3, #1
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	641a      	str	r2, [r3, #64]	; 0x40
 8004892:	e001      	b.n	8004898 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80048b8:	2300      	movs	r3, #0
 80048ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d101      	bne.n	80048ca <HAL_ADC_Start_DMA+0x1e>
 80048c6:	2302      	movs	r3, #2
 80048c8:	e0ce      	b.n	8004a68 <HAL_ADC_Start_DMA+0x1bc>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	2201      	movs	r2, #1
 80048ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f003 0301 	and.w	r3, r3, #1
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d018      	beq.n	8004912 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	689a      	ldr	r2, [r3, #8]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f042 0201 	orr.w	r2, r2, #1
 80048ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80048f0:	4b5f      	ldr	r3, [pc, #380]	; (8004a70 <HAL_ADC_Start_DMA+0x1c4>)
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a5f      	ldr	r2, [pc, #380]	; (8004a74 <HAL_ADC_Start_DMA+0x1c8>)
 80048f6:	fba2 2303 	umull	r2, r3, r2, r3
 80048fa:	0c9a      	lsrs	r2, r3, #18
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8004904:	e002      	b.n	800490c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8004906:	693b      	ldr	r3, [r7, #16]
 8004908:	3b01      	subs	r3, #1
 800490a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d1f9      	bne.n	8004906 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800491c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004920:	d107      	bne.n	8004932 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	689a      	ldr	r2, [r3, #8]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004930:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 0301 	and.w	r3, r3, #1
 800493c:	2b01      	cmp	r3, #1
 800493e:	f040 8086 	bne.w	8004a4e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800494a:	f023 0301 	bic.w	r3, r3, #1
 800494e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004960:	2b00      	cmp	r3, #0
 8004962:	d007      	beq.n	8004974 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004968:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800496c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004978:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d106      	bne.n	8004990 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004986:	f023 0206 	bic.w	r2, r3, #6
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	645a      	str	r2, [r3, #68]	; 0x44
 800498e:	e002      	b.n	8004996 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2200      	movs	r2, #0
 8004994:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800499e:	4b36      	ldr	r3, [pc, #216]	; (8004a78 <HAL_ADC_Start_DMA+0x1cc>)
 80049a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049a6:	4a35      	ldr	r2, [pc, #212]	; (8004a7c <HAL_ADC_Start_DMA+0x1d0>)
 80049a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049ae:	4a34      	ldr	r2, [pc, #208]	; (8004a80 <HAL_ADC_Start_DMA+0x1d4>)
 80049b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	4a33      	ldr	r2, [pc, #204]	; (8004a84 <HAL_ADC_Start_DMA+0x1d8>)
 80049b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80049d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689a      	ldr	r2, [r3, #8]
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	334c      	adds	r3, #76	; 0x4c
 80049ee:	4619      	mov	r1, r3
 80049f0:	68ba      	ldr	r2, [r7, #8]
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f000 fcd8 	bl	80053a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	f003 031f 	and.w	r3, r3, #31
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d10f      	bne.n	8004a24 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d129      	bne.n	8004a66 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	689a      	ldr	r2, [r3, #8]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a20:	609a      	str	r2, [r3, #8]
 8004a22:	e020      	b.n	8004a66 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a17      	ldr	r2, [pc, #92]	; (8004a88 <HAL_ADC_Start_DMA+0x1dc>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d11b      	bne.n	8004a66 <HAL_ADC_Start_DMA+0x1ba>
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d114      	bne.n	8004a66 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689a      	ldr	r2, [r3, #8]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	e00b      	b.n	8004a66 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a52:	f043 0210 	orr.w	r2, r3, #16
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5e:	f043 0201 	orr.w	r2, r3, #1
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3718      	adds	r7, #24
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}
 8004a70:	20000240 	.word	0x20000240
 8004a74:	431bde83 	.word	0x431bde83
 8004a78:	40012300 	.word	0x40012300
 8004a7c:	08004f25 	.word	0x08004f25
 8004a80:	08004fdf 	.word	0x08004fdf
 8004a84:	08004ffb 	.word	0x08004ffb
 8004a88:	40012000 	.word	0x40012000

08004a8c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b085      	sub	sp, #20
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d101      	bne.n	8004ae4 <HAL_ADC_ConfigChannel+0x1c>
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	e113      	b.n	8004d0c <HAL_ADC_ConfigChannel+0x244>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2b09      	cmp	r3, #9
 8004af2:	d925      	bls.n	8004b40 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	68d9      	ldr	r1, [r3, #12]
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	b29b      	uxth	r3, r3
 8004b00:	461a      	mov	r2, r3
 8004b02:	4613      	mov	r3, r2
 8004b04:	005b      	lsls	r3, r3, #1
 8004b06:	4413      	add	r3, r2
 8004b08:	3b1e      	subs	r3, #30
 8004b0a:	2207      	movs	r2, #7
 8004b0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b10:	43da      	mvns	r2, r3
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	400a      	ands	r2, r1
 8004b18:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68d9      	ldr	r1, [r3, #12]
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	689a      	ldr	r2, [r3, #8]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	4403      	add	r3, r0
 8004b32:	3b1e      	subs	r3, #30
 8004b34:	409a      	lsls	r2, r3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	60da      	str	r2, [r3, #12]
 8004b3e:	e022      	b.n	8004b86 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6919      	ldr	r1, [r3, #16]
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	b29b      	uxth	r3, r3
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4613      	mov	r3, r2
 8004b50:	005b      	lsls	r3, r3, #1
 8004b52:	4413      	add	r3, r2
 8004b54:	2207      	movs	r2, #7
 8004b56:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5a:	43da      	mvns	r2, r3
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	400a      	ands	r2, r1
 8004b62:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6919      	ldr	r1, [r3, #16]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	4618      	mov	r0, r3
 8004b76:	4603      	mov	r3, r0
 8004b78:	005b      	lsls	r3, r3, #1
 8004b7a:	4403      	add	r3, r0
 8004b7c:	409a      	lsls	r2, r3
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	430a      	orrs	r2, r1
 8004b84:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	2b06      	cmp	r3, #6
 8004b8c:	d824      	bhi.n	8004bd8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	4613      	mov	r3, r2
 8004b9a:	009b      	lsls	r3, r3, #2
 8004b9c:	4413      	add	r3, r2
 8004b9e:	3b05      	subs	r3, #5
 8004ba0:	221f      	movs	r2, #31
 8004ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba6:	43da      	mvns	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	400a      	ands	r2, r1
 8004bae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685a      	ldr	r2, [r3, #4]
 8004bc2:	4613      	mov	r3, r2
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	3b05      	subs	r3, #5
 8004bca:	fa00 f203 	lsl.w	r2, r0, r3
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8004bd6:	e04c      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b0c      	cmp	r3, #12
 8004bde:	d824      	bhi.n	8004c2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685a      	ldr	r2, [r3, #4]
 8004bea:	4613      	mov	r3, r2
 8004bec:	009b      	lsls	r3, r3, #2
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b23      	subs	r3, #35	; 0x23
 8004bf2:	221f      	movs	r2, #31
 8004bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf8:	43da      	mvns	r2, r3
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	400a      	ands	r2, r1
 8004c00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	b29b      	uxth	r3, r3
 8004c0e:	4618      	mov	r0, r3
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	4613      	mov	r3, r2
 8004c16:	009b      	lsls	r3, r3, #2
 8004c18:	4413      	add	r3, r2
 8004c1a:	3b23      	subs	r3, #35	; 0x23
 8004c1c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	430a      	orrs	r2, r1
 8004c26:	631a      	str	r2, [r3, #48]	; 0x30
 8004c28:	e023      	b.n	8004c72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685a      	ldr	r2, [r3, #4]
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	3b41      	subs	r3, #65	; 0x41
 8004c3c:	221f      	movs	r2, #31
 8004c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c42:	43da      	mvns	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	400a      	ands	r2, r1
 8004c4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	b29b      	uxth	r3, r3
 8004c58:	4618      	mov	r0, r3
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	4613      	mov	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	4413      	add	r3, r2
 8004c64:	3b41      	subs	r3, #65	; 0x41
 8004c66:	fa00 f203 	lsl.w	r2, r0, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004c72:	4b29      	ldr	r3, [pc, #164]	; (8004d18 <HAL_ADC_ConfigChannel+0x250>)
 8004c74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	4a28      	ldr	r2, [pc, #160]	; (8004d1c <HAL_ADC_ConfigChannel+0x254>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10f      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x1d8>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2b12      	cmp	r3, #18
 8004c86:	d10b      	bne.n	8004ca0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a1d      	ldr	r2, [pc, #116]	; (8004d1c <HAL_ADC_ConfigChannel+0x254>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d12b      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x23a>
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4a1c      	ldr	r2, [pc, #112]	; (8004d20 <HAL_ADC_ConfigChannel+0x258>)
 8004cb0:	4293      	cmp	r3, r2
 8004cb2:	d003      	beq.n	8004cbc <HAL_ADC_ConfigChannel+0x1f4>
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	2b11      	cmp	r3, #17
 8004cba:	d122      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	685b      	ldr	r3, [r3, #4]
 8004cc0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cd4:	683b      	ldr	r3, [r7, #0]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	4a11      	ldr	r2, [pc, #68]	; (8004d20 <HAL_ADC_ConfigChannel+0x258>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d111      	bne.n	8004d02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004cde:	4b11      	ldr	r3, [pc, #68]	; (8004d24 <HAL_ADC_ConfigChannel+0x25c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	4a11      	ldr	r2, [pc, #68]	; (8004d28 <HAL_ADC_ConfigChannel+0x260>)
 8004ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce8:	0c9a      	lsrs	r2, r3, #18
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	005b      	lsls	r3, r3, #1
 8004cf2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cf4:	e002      	b.n	8004cfc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	3b01      	subs	r3, #1
 8004cfa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004cfc:	68bb      	ldr	r3, [r7, #8]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f9      	bne.n	8004cf6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004d0a:	2300      	movs	r3, #0
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3714      	adds	r7, #20
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr
 8004d18:	40012300 	.word	0x40012300
 8004d1c:	40012000 	.word	0x40012000
 8004d20:	10000012 	.word	0x10000012
 8004d24:	20000240 	.word	0x20000240
 8004d28:	431bde83 	.word	0x431bde83

08004d2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004d34:	4b79      	ldr	r3, [pc, #484]	; (8004f1c <ADC_Init+0x1f0>)
 8004d36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	685b      	ldr	r3, [r3, #4]
 8004d4c:	431a      	orrs	r2, r3
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004d60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	6859      	ldr	r1, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	691b      	ldr	r3, [r3, #16]
 8004d6c:	021a      	lsls	r2, r3, #8
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	430a      	orrs	r2, r1
 8004d74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004d84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	6859      	ldr	r1, [r3, #4]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689a      	ldr	r2, [r3, #8]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	430a      	orrs	r2, r1
 8004d96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689a      	ldr	r2, [r3, #8]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004da6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	6899      	ldr	r1, [r3, #8]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	68da      	ldr	r2, [r3, #12]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dbe:	4a58      	ldr	r2, [pc, #352]	; (8004f20 <ADC_Init+0x1f4>)
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d022      	beq.n	8004e0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689a      	ldr	r2, [r3, #8]
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004dd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6899      	ldr	r1, [r3, #8]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	430a      	orrs	r2, r1
 8004de4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004df4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6899      	ldr	r1, [r3, #8]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	430a      	orrs	r2, r1
 8004e06:	609a      	str	r2, [r3, #8]
 8004e08:	e00f      	b.n	8004e2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004e18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689a      	ldr	r2, [r3, #8]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004e28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	689a      	ldr	r2, [r3, #8]
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f022 0202 	bic.w	r2, r2, #2
 8004e38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	7e1b      	ldrb	r3, [r3, #24]
 8004e44:	005a      	lsls	r2, r3, #1
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	430a      	orrs	r2, r1
 8004e4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d01b      	beq.n	8004e90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	685a      	ldr	r2, [r3, #4]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004e76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	6859      	ldr	r1, [r3, #4]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	3b01      	subs	r3, #1
 8004e84:	035a      	lsls	r2, r3, #13
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	430a      	orrs	r2, r1
 8004e8c:	605a      	str	r2, [r3, #4]
 8004e8e:	e007      	b.n	8004ea0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004eae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	3b01      	subs	r3, #1
 8004ebc:	051a      	lsls	r2, r3, #20
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	430a      	orrs	r2, r1
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	689a      	ldr	r2, [r3, #8]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004ed4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	6899      	ldr	r1, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004ee2:	025a      	lsls	r2, r3, #9
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	430a      	orrs	r2, r1
 8004eea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	689a      	ldr	r2, [r3, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004efa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6899      	ldr	r1, [r3, #8]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	695b      	ldr	r3, [r3, #20]
 8004f06:	029a      	lsls	r2, r3, #10
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	609a      	str	r2, [r3, #8]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr
 8004f1c:	40012300 	.word	0x40012300
 8004f20:	0f000001 	.word	0x0f000001

08004f24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d13c      	bne.n	8004fb8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d12b      	bne.n	8004fb0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d127      	bne.n	8004fb0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d006      	beq.n	8004f7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d119      	bne.n	8004fb0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	685a      	ldr	r2, [r3, #4]
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f022 0220 	bic.w	r2, r2, #32
 8004f8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d105      	bne.n	8004fb0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa8:	f043 0201 	orr.w	r2, r3, #1
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004fb0:	68f8      	ldr	r0, [r7, #12]
 8004fb2:	f7ff fd6b 	bl	8004a8c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004fb6:	e00e      	b.n	8004fd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fbc:	f003 0310 	and.w	r3, r3, #16
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d003      	beq.n	8004fcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8004fc4:	68f8      	ldr	r0, [r7, #12]
 8004fc6:	f7ff fd75 	bl	8004ab4 <HAL_ADC_ErrorCallback>
}
 8004fca:	e004      	b.n	8004fd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	4798      	blx	r3
}
 8004fd6:	bf00      	nop
 8004fd8:	3710      	adds	r7, #16
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	bd80      	pop	{r7, pc}

08004fde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8004fde:	b580      	push	{r7, lr}
 8004fe0:	b084      	sub	sp, #16
 8004fe2:	af00      	add	r7, sp, #0
 8004fe4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f7ff fd57 	bl	8004aa0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004ff2:	bf00      	nop
 8004ff4:	3710      	adds	r7, #16
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}

08004ffa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8004ffa:	b580      	push	{r7, lr}
 8004ffc:	b084      	sub	sp, #16
 8004ffe:	af00      	add	r7, sp, #0
 8005000:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005006:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2240      	movs	r2, #64	; 0x40
 800500c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005012:	f043 0204 	orr.w	r2, r3, #4
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800501a:	68f8      	ldr	r0, [r7, #12]
 800501c:	f7ff fd4a 	bl	8004ab4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005020:	bf00      	nop
 8005022:	3710      	adds	r7, #16
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	f003 0307 	and.w	r3, r3, #7
 8005036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005038:	4b0c      	ldr	r3, [pc, #48]	; (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800503a:	68db      	ldr	r3, [r3, #12]
 800503c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800503e:	68ba      	ldr	r2, [r7, #8]
 8005040:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005044:	4013      	ands	r3, r2
 8005046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800504c:	68bb      	ldr	r3, [r7, #8]
 800504e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005050:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005054:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800505a:	4a04      	ldr	r2, [pc, #16]	; (800506c <__NVIC_SetPriorityGrouping+0x44>)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	60d3      	str	r3, [r2, #12]
}
 8005060:	bf00      	nop
 8005062:	3714      	adds	r7, #20
 8005064:	46bd      	mov	sp, r7
 8005066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800506a:	4770      	bx	lr
 800506c:	e000ed00 	.word	0xe000ed00

08005070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005070:	b480      	push	{r7}
 8005072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005074:	4b04      	ldr	r3, [pc, #16]	; (8005088 <__NVIC_GetPriorityGrouping+0x18>)
 8005076:	68db      	ldr	r3, [r3, #12]
 8005078:	0a1b      	lsrs	r3, r3, #8
 800507a:	f003 0307 	and.w	r3, r3, #7
}
 800507e:	4618      	mov	r0, r3
 8005080:	46bd      	mov	sp, r7
 8005082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005086:	4770      	bx	lr
 8005088:	e000ed00 	.word	0xe000ed00

0800508c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800508c:	b480      	push	{r7}
 800508e:	b083      	sub	sp, #12
 8005090:	af00      	add	r7, sp, #0
 8005092:	4603      	mov	r3, r0
 8005094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800509a:	2b00      	cmp	r3, #0
 800509c:	db0b      	blt.n	80050b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800509e:	79fb      	ldrb	r3, [r7, #7]
 80050a0:	f003 021f 	and.w	r2, r3, #31
 80050a4:	4907      	ldr	r1, [pc, #28]	; (80050c4 <__NVIC_EnableIRQ+0x38>)
 80050a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050aa:	095b      	lsrs	r3, r3, #5
 80050ac:	2001      	movs	r0, #1
 80050ae:	fa00 f202 	lsl.w	r2, r0, r2
 80050b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80050b6:	bf00      	nop
 80050b8:	370c      	adds	r7, #12
 80050ba:	46bd      	mov	sp, r7
 80050bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c0:	4770      	bx	lr
 80050c2:	bf00      	nop
 80050c4:	e000e100 	.word	0xe000e100

080050c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	4603      	mov	r3, r0
 80050d0:	6039      	str	r1, [r7, #0]
 80050d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	db0a      	blt.n	80050f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	b2da      	uxtb	r2, r3
 80050e0:	490c      	ldr	r1, [pc, #48]	; (8005114 <__NVIC_SetPriority+0x4c>)
 80050e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050e6:	0112      	lsls	r2, r2, #4
 80050e8:	b2d2      	uxtb	r2, r2
 80050ea:	440b      	add	r3, r1
 80050ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80050f0:	e00a      	b.n	8005108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	b2da      	uxtb	r2, r3
 80050f6:	4908      	ldr	r1, [pc, #32]	; (8005118 <__NVIC_SetPriority+0x50>)
 80050f8:	79fb      	ldrb	r3, [r7, #7]
 80050fa:	f003 030f 	and.w	r3, r3, #15
 80050fe:	3b04      	subs	r3, #4
 8005100:	0112      	lsls	r2, r2, #4
 8005102:	b2d2      	uxtb	r2, r2
 8005104:	440b      	add	r3, r1
 8005106:	761a      	strb	r2, [r3, #24]
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr
 8005114:	e000e100 	.word	0xe000e100
 8005118:	e000ed00 	.word	0xe000ed00

0800511c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800511c:	b480      	push	{r7}
 800511e:	b089      	sub	sp, #36	; 0x24
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f003 0307 	and.w	r3, r3, #7
 800512e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	f1c3 0307 	rsb	r3, r3, #7
 8005136:	2b04      	cmp	r3, #4
 8005138:	bf28      	it	cs
 800513a:	2304      	movcs	r3, #4
 800513c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	3304      	adds	r3, #4
 8005142:	2b06      	cmp	r3, #6
 8005144:	d902      	bls.n	800514c <NVIC_EncodePriority+0x30>
 8005146:	69fb      	ldr	r3, [r7, #28]
 8005148:	3b03      	subs	r3, #3
 800514a:	e000      	b.n	800514e <NVIC_EncodePriority+0x32>
 800514c:	2300      	movs	r3, #0
 800514e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005150:	f04f 32ff 	mov.w	r2, #4294967295
 8005154:	69bb      	ldr	r3, [r7, #24]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43da      	mvns	r2, r3
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	401a      	ands	r2, r3
 8005160:	697b      	ldr	r3, [r7, #20]
 8005162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005164:	f04f 31ff 	mov.w	r1, #4294967295
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	fa01 f303 	lsl.w	r3, r1, r3
 800516e:	43d9      	mvns	r1, r3
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005174:	4313      	orrs	r3, r2
         );
}
 8005176:	4618      	mov	r0, r3
 8005178:	3724      	adds	r7, #36	; 0x24
 800517a:	46bd      	mov	sp, r7
 800517c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005180:	4770      	bx	lr
	...

08005184 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	3b01      	subs	r3, #1
 8005190:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005194:	d301      	bcc.n	800519a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005196:	2301      	movs	r3, #1
 8005198:	e00f      	b.n	80051ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800519a:	4a0a      	ldr	r2, [pc, #40]	; (80051c4 <SysTick_Config+0x40>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	3b01      	subs	r3, #1
 80051a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80051a2:	210f      	movs	r1, #15
 80051a4:	f04f 30ff 	mov.w	r0, #4294967295
 80051a8:	f7ff ff8e 	bl	80050c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80051ac:	4b05      	ldr	r3, [pc, #20]	; (80051c4 <SysTick_Config+0x40>)
 80051ae:	2200      	movs	r2, #0
 80051b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80051b2:	4b04      	ldr	r3, [pc, #16]	; (80051c4 <SysTick_Config+0x40>)
 80051b4:	2207      	movs	r2, #7
 80051b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80051b8:	2300      	movs	r3, #0
}
 80051ba:	4618      	mov	r0, r3
 80051bc:	3708      	adds	r7, #8
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	e000e010 	.word	0xe000e010

080051c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80051d0:	6878      	ldr	r0, [r7, #4]
 80051d2:	f7ff ff29 	bl	8005028 <__NVIC_SetPriorityGrouping>
}
 80051d6:	bf00      	nop
 80051d8:	3708      	adds	r7, #8
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}

080051de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80051de:	b580      	push	{r7, lr}
 80051e0:	b086      	sub	sp, #24
 80051e2:	af00      	add	r7, sp, #0
 80051e4:	4603      	mov	r3, r0
 80051e6:	60b9      	str	r1, [r7, #8]
 80051e8:	607a      	str	r2, [r7, #4]
 80051ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80051ec:	2300      	movs	r3, #0
 80051ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80051f0:	f7ff ff3e 	bl	8005070 <__NVIC_GetPriorityGrouping>
 80051f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80051f6:	687a      	ldr	r2, [r7, #4]
 80051f8:	68b9      	ldr	r1, [r7, #8]
 80051fa:	6978      	ldr	r0, [r7, #20]
 80051fc:	f7ff ff8e 	bl	800511c <NVIC_EncodePriority>
 8005200:	4602      	mov	r2, r0
 8005202:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005206:	4611      	mov	r1, r2
 8005208:	4618      	mov	r0, r3
 800520a:	f7ff ff5d 	bl	80050c8 <__NVIC_SetPriority>
}
 800520e:	bf00      	nop
 8005210:	3718      	adds	r7, #24
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}

08005216 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005216:	b580      	push	{r7, lr}
 8005218:	b082      	sub	sp, #8
 800521a:	af00      	add	r7, sp, #0
 800521c:	4603      	mov	r3, r0
 800521e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005220:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005224:	4618      	mov	r0, r3
 8005226:	f7ff ff31 	bl	800508c <__NVIC_EnableIRQ>
}
 800522a:	bf00      	nop
 800522c:	3708      	adds	r7, #8
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005232:	b580      	push	{r7, lr}
 8005234:	b082      	sub	sp, #8
 8005236:	af00      	add	r7, sp, #0
 8005238:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff ffa2 	bl	8005184 <SysTick_Config>
 8005240:	4603      	mov	r3, r0
}
 8005242:	4618      	mov	r0, r3
 8005244:	3708      	adds	r7, #8
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
	...

0800524c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b086      	sub	sp, #24
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005258:	f7ff fab4 	bl	80047c4 <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d101      	bne.n	8005268 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005264:	2301      	movs	r3, #1
 8005266:	e099      	b.n	800539c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2200      	movs	r2, #0
 8005274:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f022 0201 	bic.w	r2, r2, #1
 8005286:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005288:	e00f      	b.n	80052aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800528a:	f7ff fa9b 	bl	80047c4 <HAL_GetTick>
 800528e:	4602      	mov	r2, r0
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	1ad3      	subs	r3, r2, r3
 8005294:	2b05      	cmp	r3, #5
 8005296:	d908      	bls.n	80052aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2220      	movs	r2, #32
 800529c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2203      	movs	r2, #3
 80052a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80052a6:	2303      	movs	r3, #3
 80052a8:	e078      	b.n	800539c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f003 0301 	and.w	r3, r3, #1
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d1e8      	bne.n	800528a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80052c0:	697a      	ldr	r2, [r7, #20]
 80052c2:	4b38      	ldr	r3, [pc, #224]	; (80053a4 <HAL_DMA_Init+0x158>)
 80052c4:	4013      	ands	r3, r2
 80052c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685a      	ldr	r2, [r3, #4]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	691b      	ldr	r3, [r3, #16]
 80052dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80052e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	699b      	ldr	r3, [r3, #24]
 80052e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80052ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4313      	orrs	r3, r2
 80052fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005300:	2b04      	cmp	r3, #4
 8005302:	d107      	bne.n	8005314 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800530c:	4313      	orrs	r3, r2
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4313      	orrs	r3, r2
 8005312:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	697a      	ldr	r2, [r7, #20]
 800531a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	695b      	ldr	r3, [r3, #20]
 8005322:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f023 0307 	bic.w	r3, r3, #7
 800532a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	2b04      	cmp	r3, #4
 800533c:	d117      	bne.n	800536e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	4313      	orrs	r3, r2
 8005346:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00e      	beq.n	800536e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f000 fb1b 	bl	800598c <DMA_CheckFifoParam>
 8005356:	4603      	mov	r3, r0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d008      	beq.n	800536e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2240      	movs	r2, #64	; 0x40
 8005360:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2201      	movs	r2, #1
 8005366:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800536a:	2301      	movs	r3, #1
 800536c:	e016      	b.n	800539c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005376:	6878      	ldr	r0, [r7, #4]
 8005378:	f000 fad2 	bl	8005920 <DMA_CalcBaseAndBitshift>
 800537c:	4603      	mov	r3, r0
 800537e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005384:	223f      	movs	r2, #63	; 0x3f
 8005386:	409a      	lsls	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2200      	movs	r2, #0
 8005390:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	f010803f 	.word	0xf010803f

080053a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	60f8      	str	r0, [r7, #12]
 80053b0:	60b9      	str	r1, [r7, #8]
 80053b2:	607a      	str	r2, [r7, #4]
 80053b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80053b6:	2300      	movs	r3, #0
 80053b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d101      	bne.n	80053ce <HAL_DMA_Start_IT+0x26>
 80053ca:	2302      	movs	r3, #2
 80053cc:	e040      	b.n	8005450 <HAL_DMA_Start_IT+0xa8>
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80053dc:	b2db      	uxtb	r3, r3
 80053de:	2b01      	cmp	r3, #1
 80053e0:	d12f      	bne.n	8005442 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2202      	movs	r2, #2
 80053e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	2200      	movs	r2, #0
 80053ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	687a      	ldr	r2, [r7, #4]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	68f8      	ldr	r0, [r7, #12]
 80053f8:	f000 fa64 	bl	80058c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005400:	223f      	movs	r2, #63	; 0x3f
 8005402:	409a      	lsls	r2, r3
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0216 	orr.w	r2, r2, #22
 8005416:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541c:	2b00      	cmp	r3, #0
 800541e:	d007      	beq.n	8005430 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f042 0208 	orr.w	r2, r2, #8
 800542e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f042 0201 	orr.w	r2, r2, #1
 800543e:	601a      	str	r2, [r3, #0]
 8005440:	e005      	b.n	800544e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2200      	movs	r2, #0
 8005446:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800544a:	2302      	movs	r3, #2
 800544c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800544e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005450:	4618      	mov	r0, r3
 8005452:	3718      	adds	r7, #24
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005464:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005466:	f7ff f9ad 	bl	80047c4 <HAL_GetTick>
 800546a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b02      	cmp	r3, #2
 8005476:	d008      	beq.n	800548a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2280      	movs	r2, #128	; 0x80
 800547c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005486:	2301      	movs	r3, #1
 8005488:	e052      	b.n	8005530 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681a      	ldr	r2, [r3, #0]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f022 0216 	bic.w	r2, r2, #22
 8005498:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	695a      	ldr	r2, [r3, #20]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80054a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d103      	bne.n	80054ba <HAL_DMA_Abort+0x62>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d007      	beq.n	80054ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0208 	bic.w	r2, r2, #8
 80054c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f022 0201 	bic.w	r2, r2, #1
 80054d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054da:	e013      	b.n	8005504 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054dc:	f7ff f972 	bl	80047c4 <HAL_GetTick>
 80054e0:	4602      	mov	r2, r0
 80054e2:	68bb      	ldr	r3, [r7, #8]
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	2b05      	cmp	r3, #5
 80054e8:	d90c      	bls.n	8005504 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	2203      	movs	r2, #3
 80054f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e015      	b.n	8005530 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1e4      	bne.n	80054dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005516:	223f      	movs	r2, #63	; 0x3f
 8005518:	409a      	lsls	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2201      	movs	r2, #1
 8005522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800552e:	2300      	movs	r3, #0
}
 8005530:	4618      	mov	r0, r3
 8005532:	3710      	adds	r7, #16
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005538:	b480      	push	{r7}
 800553a:	b083      	sub	sp, #12
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005546:	b2db      	uxtb	r3, r3
 8005548:	2b02      	cmp	r3, #2
 800554a:	d004      	beq.n	8005556 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2280      	movs	r2, #128	; 0x80
 8005550:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e00c      	b.n	8005570 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2205      	movs	r2, #5
 800555a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f022 0201 	bic.w	r2, r2, #1
 800556c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	370c      	adds	r7, #12
 8005574:	46bd      	mov	sp, r7
 8005576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557a:	4770      	bx	lr

0800557c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b086      	sub	sp, #24
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005584:	2300      	movs	r3, #0
 8005586:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005588:	4b8e      	ldr	r3, [pc, #568]	; (80057c4 <HAL_DMA_IRQHandler+0x248>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a8e      	ldr	r2, [pc, #568]	; (80057c8 <HAL_DMA_IRQHandler+0x24c>)
 800558e:	fba2 2303 	umull	r2, r3, r2, r3
 8005592:	0a9b      	lsrs	r3, r3, #10
 8005594:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800559a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055a6:	2208      	movs	r2, #8
 80055a8:	409a      	lsls	r2, r3
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	4013      	ands	r3, r2
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d01a      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d013      	beq.n	80055e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f022 0204 	bic.w	r2, r2, #4
 80055ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055d4:	2208      	movs	r2, #8
 80055d6:	409a      	lsls	r2, r3
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055e0:	f043 0201 	orr.w	r2, r3, #1
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055ec:	2201      	movs	r2, #1
 80055ee:	409a      	lsls	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4013      	ands	r3, r2
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d012      	beq.n	800561e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00b      	beq.n	800561e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800560a:	2201      	movs	r2, #1
 800560c:	409a      	lsls	r2, r3
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005616:	f043 0202 	orr.w	r2, r3, #2
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005622:	2204      	movs	r2, #4
 8005624:	409a      	lsls	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4013      	ands	r3, r2
 800562a:	2b00      	cmp	r3, #0
 800562c:	d012      	beq.n	8005654 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	f003 0302 	and.w	r3, r3, #2
 8005638:	2b00      	cmp	r3, #0
 800563a:	d00b      	beq.n	8005654 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005640:	2204      	movs	r2, #4
 8005642:	409a      	lsls	r2, r3
 8005644:	693b      	ldr	r3, [r7, #16]
 8005646:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800564c:	f043 0204 	orr.w	r2, r3, #4
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005658:	2210      	movs	r2, #16
 800565a:	409a      	lsls	r2, r3
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	4013      	ands	r3, r2
 8005660:	2b00      	cmp	r3, #0
 8005662:	d043      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0308 	and.w	r3, r3, #8
 800566e:	2b00      	cmp	r3, #0
 8005670:	d03c      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005676:	2210      	movs	r2, #16
 8005678:	409a      	lsls	r2, r3
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005688:	2b00      	cmp	r3, #0
 800568a:	d018      	beq.n	80056be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005696:	2b00      	cmp	r3, #0
 8005698:	d108      	bne.n	80056ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d024      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056a6:	6878      	ldr	r0, [r7, #4]
 80056a8:	4798      	blx	r3
 80056aa:	e01f      	b.n	80056ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01b      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	4798      	blx	r3
 80056bc:	e016      	b.n	80056ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d107      	bne.n	80056dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f022 0208 	bic.w	r2, r2, #8
 80056da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d003      	beq.n	80056ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80056f0:	2220      	movs	r2, #32
 80056f2:	409a      	lsls	r2, r3
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	4013      	ands	r3, r2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	f000 808f 	beq.w	800581c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f003 0310 	and.w	r3, r3, #16
 8005708:	2b00      	cmp	r3, #0
 800570a:	f000 8087 	beq.w	800581c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005712:	2220      	movs	r2, #32
 8005714:	409a      	lsls	r2, r3
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005720:	b2db      	uxtb	r3, r3
 8005722:	2b05      	cmp	r3, #5
 8005724:	d136      	bne.n	8005794 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 0216 	bic.w	r2, r2, #22
 8005734:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	695a      	ldr	r2, [r3, #20]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005744:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574a:	2b00      	cmp	r3, #0
 800574c:	d103      	bne.n	8005756 <HAL_DMA_IRQHandler+0x1da>
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005752:	2b00      	cmp	r3, #0
 8005754:	d007      	beq.n	8005766 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f022 0208 	bic.w	r2, r2, #8
 8005764:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800576a:	223f      	movs	r2, #63	; 0x3f
 800576c:	409a      	lsls	r2, r3
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	2201      	movs	r2, #1
 8005776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2200      	movs	r2, #0
 800577e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005786:	2b00      	cmp	r3, #0
 8005788:	d07e      	beq.n	8005888 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800578e:	6878      	ldr	r0, [r7, #4]
 8005790:	4798      	blx	r3
        }
        return;
 8005792:	e079      	b.n	8005888 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d01d      	beq.n	80057de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d10d      	bne.n	80057cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d031      	beq.n	800581c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	4798      	blx	r3
 80057c0:	e02c      	b.n	800581c <HAL_DMA_IRQHandler+0x2a0>
 80057c2:	bf00      	nop
 80057c4:	20000240 	.word	0x20000240
 80057c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d023      	beq.n	800581c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057d8:	6878      	ldr	r0, [r7, #4]
 80057da:	4798      	blx	r3
 80057dc:	e01e      	b.n	800581c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10f      	bne.n	800580c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	f022 0210 	bic.w	r2, r2, #16
 80057fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2200      	movs	r2, #0
 8005808:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005810:	2b00      	cmp	r3, #0
 8005812:	d003      	beq.n	800581c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005820:	2b00      	cmp	r3, #0
 8005822:	d032      	beq.n	800588a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005828:	f003 0301 	and.w	r3, r3, #1
 800582c:	2b00      	cmp	r3, #0
 800582e:	d022      	beq.n	8005876 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2205      	movs	r2, #5
 8005834:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681a      	ldr	r2, [r3, #0]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f022 0201 	bic.w	r2, r2, #1
 8005846:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	3301      	adds	r3, #1
 800584c:	60bb      	str	r3, [r7, #8]
 800584e:	697a      	ldr	r2, [r7, #20]
 8005850:	429a      	cmp	r2, r3
 8005852:	d307      	bcc.n	8005864 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0301 	and.w	r3, r3, #1
 800585e:	2b00      	cmp	r3, #0
 8005860:	d1f2      	bne.n	8005848 <HAL_DMA_IRQHandler+0x2cc>
 8005862:	e000      	b.n	8005866 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8005864:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d005      	beq.n	800588a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	4798      	blx	r3
 8005886:	e000      	b.n	800588a <HAL_DMA_IRQHandler+0x30e>
        return;
 8005888:	bf00      	nop
    }
  }
}
 800588a:	3718      	adds	r7, #24
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800589e:	b2db      	uxtb	r3, r3
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80058e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	683a      	ldr	r2, [r7, #0]
 80058e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b40      	cmp	r3, #64	; 0x40
 80058f0:	d108      	bne.n	8005904 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005902:	e007      	b.n	8005914 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	60da      	str	r2, [r3, #12]
}
 8005914:	bf00      	nop
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591e:	4770      	bx	lr

08005920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005920:	b480      	push	{r7}
 8005922:	b085      	sub	sp, #20
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	b2db      	uxtb	r3, r3
 800592e:	3b10      	subs	r3, #16
 8005930:	4a14      	ldr	r2, [pc, #80]	; (8005984 <DMA_CalcBaseAndBitshift+0x64>)
 8005932:	fba2 2303 	umull	r2, r3, r2, r3
 8005936:	091b      	lsrs	r3, r3, #4
 8005938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <DMA_CalcBaseAndBitshift+0x68>)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4413      	add	r3, r2
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	461a      	mov	r2, r3
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b03      	cmp	r3, #3
 800594c:	d909      	bls.n	8005962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005956:	f023 0303 	bic.w	r3, r3, #3
 800595a:	1d1a      	adds	r2, r3, #4
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	659a      	str	r2, [r3, #88]	; 0x58
 8005960:	e007      	b.n	8005972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800596a:	f023 0303 	bic.w	r3, r3, #3
 800596e:	687a      	ldr	r2, [r7, #4]
 8005970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005976:	4618      	mov	r0, r3
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	aaaaaaab 	.word	0xaaaaaaab
 8005988:	0800c224 	.word	0x0800c224

0800598c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800598c:	b480      	push	{r7}
 800598e:	b085      	sub	sp, #20
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800599c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d11f      	bne.n	80059e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	2b03      	cmp	r3, #3
 80059aa:	d856      	bhi.n	8005a5a <DMA_CheckFifoParam+0xce>
 80059ac:	a201      	add	r2, pc, #4	; (adr r2, 80059b4 <DMA_CheckFifoParam+0x28>)
 80059ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059b2:	bf00      	nop
 80059b4:	080059c5 	.word	0x080059c5
 80059b8:	080059d7 	.word	0x080059d7
 80059bc:	080059c5 	.word	0x080059c5
 80059c0:	08005a5b 	.word	0x08005a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d046      	beq.n	8005a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059d4:	e043      	b.n	8005a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059de:	d140      	bne.n	8005a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e4:	e03d      	b.n	8005a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	699b      	ldr	r3, [r3, #24]
 80059ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059ee:	d121      	bne.n	8005a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059f0:	68bb      	ldr	r3, [r7, #8]
 80059f2:	2b03      	cmp	r3, #3
 80059f4:	d837      	bhi.n	8005a66 <DMA_CheckFifoParam+0xda>
 80059f6:	a201      	add	r2, pc, #4	; (adr r2, 80059fc <DMA_CheckFifoParam+0x70>)
 80059f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059fc:	08005a0d 	.word	0x08005a0d
 8005a00:	08005a13 	.word	0x08005a13
 8005a04:	08005a0d 	.word	0x08005a0d
 8005a08:	08005a25 	.word	0x08005a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005a0c:	2301      	movs	r3, #1
 8005a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a10:	e030      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d025      	beq.n	8005a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005a22:	e022      	b.n	8005a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005a2c:	d11f      	bne.n	8005a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005a32:	e01c      	b.n	8005a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d903      	bls.n	8005a42 <DMA_CheckFifoParam+0xb6>
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b03      	cmp	r3, #3
 8005a3e:	d003      	beq.n	8005a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a40:	e018      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	73fb      	strb	r3, [r7, #15]
      break;
 8005a46:	e015      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d00e      	beq.n	8005a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	73fb      	strb	r3, [r7, #15]
      break;
 8005a58:	e00b      	b.n	8005a72 <DMA_CheckFifoParam+0xe6>
      break;
 8005a5a:	bf00      	nop
 8005a5c:	e00a      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;
 8005a5e:	bf00      	nop
 8005a60:	e008      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;
 8005a62:	bf00      	nop
 8005a64:	e006      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;
 8005a66:	bf00      	nop
 8005a68:	e004      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;
 8005a6a:	bf00      	nop
 8005a6c:	e002      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8005a6e:	bf00      	nop
 8005a70:	e000      	b.n	8005a74 <DMA_CheckFifoParam+0xe8>
      break;
 8005a72:	bf00      	nop
    }
  } 
  
  return status; 
 8005a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop

08005a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b089      	sub	sp, #36	; 0x24
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a92:	2300      	movs	r3, #0
 8005a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a96:	2300      	movs	r3, #0
 8005a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	61fb      	str	r3, [r7, #28]
 8005a9e:	e159      	b.n	8005d54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	69fb      	ldr	r3, [r7, #28]
 8005aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005ab4:	693a      	ldr	r2, [r7, #16]
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	f040 8148 	bne.w	8005d4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	685b      	ldr	r3, [r3, #4]
 8005ac2:	f003 0303 	and.w	r3, r3, #3
 8005ac6:	2b01      	cmp	r3, #1
 8005ac8:	d005      	beq.n	8005ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005aca:	683b      	ldr	r3, [r7, #0]
 8005acc:	685b      	ldr	r3, [r3, #4]
 8005ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d130      	bne.n	8005b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	005b      	lsls	r3, r3, #1
 8005ae0:	2203      	movs	r2, #3
 8005ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae6:	43db      	mvns	r3, r3
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	4013      	ands	r3, r2
 8005aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	68da      	ldr	r2, [r3, #12]
 8005af2:	69fb      	ldr	r3, [r7, #28]
 8005af4:	005b      	lsls	r3, r3, #1
 8005af6:	fa02 f303 	lsl.w	r3, r2, r3
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	4313      	orrs	r3, r2
 8005afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005b0c:	2201      	movs	r2, #1
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	fa02 f303 	lsl.w	r3, r2, r3
 8005b14:	43db      	mvns	r3, r3
 8005b16:	69ba      	ldr	r2, [r7, #24]
 8005b18:	4013      	ands	r3, r2
 8005b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	091b      	lsrs	r3, r3, #4
 8005b22:	f003 0201 	and.w	r2, r3, #1
 8005b26:	69fb      	ldr	r3, [r7, #28]
 8005b28:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2c:	69ba      	ldr	r2, [r7, #24]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	69ba      	ldr	r2, [r7, #24]
 8005b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f003 0303 	and.w	r3, r3, #3
 8005b40:	2b03      	cmp	r3, #3
 8005b42:	d017      	beq.n	8005b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68db      	ldr	r3, [r3, #12]
 8005b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005b4a:	69fb      	ldr	r3, [r7, #28]
 8005b4c:	005b      	lsls	r3, r3, #1
 8005b4e:	2203      	movs	r2, #3
 8005b50:	fa02 f303 	lsl.w	r3, r2, r3
 8005b54:	43db      	mvns	r3, r3
 8005b56:	69ba      	ldr	r2, [r7, #24]
 8005b58:	4013      	ands	r3, r2
 8005b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	689a      	ldr	r2, [r3, #8]
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	005b      	lsls	r3, r3, #1
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	69ba      	ldr	r2, [r7, #24]
 8005b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	685b      	ldr	r3, [r3, #4]
 8005b78:	f003 0303 	and.w	r3, r3, #3
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d123      	bne.n	8005bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b80:	69fb      	ldr	r3, [r7, #28]
 8005b82:	08da      	lsrs	r2, r3, #3
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3208      	adds	r2, #8
 8005b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b8e:	69fb      	ldr	r3, [r7, #28]
 8005b90:	f003 0307 	and.w	r3, r3, #7
 8005b94:	009b      	lsls	r3, r3, #2
 8005b96:	220f      	movs	r2, #15
 8005b98:	fa02 f303 	lsl.w	r3, r2, r3
 8005b9c:	43db      	mvns	r3, r3
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	4013      	ands	r3, r2
 8005ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	691a      	ldr	r2, [r3, #16]
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f003 0307 	and.w	r3, r3, #7
 8005bae:	009b      	lsls	r3, r3, #2
 8005bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb4:	69ba      	ldr	r2, [r7, #24]
 8005bb6:	4313      	orrs	r3, r2
 8005bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	08da      	lsrs	r2, r3, #3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	3208      	adds	r2, #8
 8005bc2:	69b9      	ldr	r1, [r7, #24]
 8005bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	005b      	lsls	r3, r3, #1
 8005bd2:	2203      	movs	r2, #3
 8005bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd8:	43db      	mvns	r3, r3
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	4013      	ands	r3, r2
 8005bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	f003 0203 	and.w	r2, r3, #3
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	005b      	lsls	r3, r3, #1
 8005bec:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf0:	69ba      	ldr	r2, [r7, #24]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	f000 80a2 	beq.w	8005d4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	4b57      	ldr	r3, [pc, #348]	; (8005d6c <HAL_GPIO_Init+0x2e8>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	4a56      	ldr	r2, [pc, #344]	; (8005d6c <HAL_GPIO_Init+0x2e8>)
 8005c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c18:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1a:	4b54      	ldr	r3, [pc, #336]	; (8005d6c <HAL_GPIO_Init+0x2e8>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c22:	60fb      	str	r3, [r7, #12]
 8005c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005c26:	4a52      	ldr	r2, [pc, #328]	; (8005d70 <HAL_GPIO_Init+0x2ec>)
 8005c28:	69fb      	ldr	r3, [r7, #28]
 8005c2a:	089b      	lsrs	r3, r3, #2
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005c34:	69fb      	ldr	r3, [r7, #28]
 8005c36:	f003 0303 	and.w	r3, r3, #3
 8005c3a:	009b      	lsls	r3, r3, #2
 8005c3c:	220f      	movs	r2, #15
 8005c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c42:	43db      	mvns	r3, r3
 8005c44:	69ba      	ldr	r2, [r7, #24]
 8005c46:	4013      	ands	r3, r2
 8005c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	4a49      	ldr	r2, [pc, #292]	; (8005d74 <HAL_GPIO_Init+0x2f0>)
 8005c4e:	4293      	cmp	r3, r2
 8005c50:	d019      	beq.n	8005c86 <HAL_GPIO_Init+0x202>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	4a48      	ldr	r2, [pc, #288]	; (8005d78 <HAL_GPIO_Init+0x2f4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d013      	beq.n	8005c82 <HAL_GPIO_Init+0x1fe>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a47      	ldr	r2, [pc, #284]	; (8005d7c <HAL_GPIO_Init+0x2f8>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d00d      	beq.n	8005c7e <HAL_GPIO_Init+0x1fa>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a46      	ldr	r2, [pc, #280]	; (8005d80 <HAL_GPIO_Init+0x2fc>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d007      	beq.n	8005c7a <HAL_GPIO_Init+0x1f6>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	4a45      	ldr	r2, [pc, #276]	; (8005d84 <HAL_GPIO_Init+0x300>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d101      	bne.n	8005c76 <HAL_GPIO_Init+0x1f2>
 8005c72:	2304      	movs	r3, #4
 8005c74:	e008      	b.n	8005c88 <HAL_GPIO_Init+0x204>
 8005c76:	2307      	movs	r3, #7
 8005c78:	e006      	b.n	8005c88 <HAL_GPIO_Init+0x204>
 8005c7a:	2303      	movs	r3, #3
 8005c7c:	e004      	b.n	8005c88 <HAL_GPIO_Init+0x204>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e002      	b.n	8005c88 <HAL_GPIO_Init+0x204>
 8005c82:	2301      	movs	r3, #1
 8005c84:	e000      	b.n	8005c88 <HAL_GPIO_Init+0x204>
 8005c86:	2300      	movs	r3, #0
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	f002 0203 	and.w	r2, r2, #3
 8005c8e:	0092      	lsls	r2, r2, #2
 8005c90:	4093      	lsls	r3, r2
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c98:	4935      	ldr	r1, [pc, #212]	; (8005d70 <HAL_GPIO_Init+0x2ec>)
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	089b      	lsrs	r3, r3, #2
 8005c9e:	3302      	adds	r3, #2
 8005ca0:	69ba      	ldr	r2, [r7, #24]
 8005ca2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005ca6:	4b38      	ldr	r3, [pc, #224]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005ca8:	689b      	ldr	r3, [r3, #8]
 8005caa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	43db      	mvns	r3, r3
 8005cb0:	69ba      	ldr	r2, [r7, #24]
 8005cb2:	4013      	ands	r3, r2
 8005cb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d003      	beq.n	8005cca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8005cc2:	69ba      	ldr	r2, [r7, #24]
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005cca:	4a2f      	ldr	r2, [pc, #188]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005cd0:	4b2d      	ldr	r3, [pc, #180]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	43db      	mvns	r3, r3
 8005cda:	69ba      	ldr	r2, [r7, #24]
 8005cdc:	4013      	ands	r3, r2
 8005cde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	685b      	ldr	r3, [r3, #4]
 8005ce4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d003      	beq.n	8005cf4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	693b      	ldr	r3, [r7, #16]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005cf4:	4a24      	ldr	r2, [pc, #144]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005cf6:	69bb      	ldr	r3, [r7, #24]
 8005cf8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cfa:	4b23      	ldr	r3, [pc, #140]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d00:	693b      	ldr	r3, [r7, #16]
 8005d02:	43db      	mvns	r3, r3
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	4013      	ands	r3, r2
 8005d08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005d0a:	683b      	ldr	r3, [r7, #0]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d003      	beq.n	8005d1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8005d16:	69ba      	ldr	r2, [r7, #24]
 8005d18:	693b      	ldr	r3, [r7, #16]
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005d1e:	4a1a      	ldr	r2, [pc, #104]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005d24:	4b18      	ldr	r3, [pc, #96]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	43db      	mvns	r3, r3
 8005d2e:	69ba      	ldr	r2, [r7, #24]
 8005d30:	4013      	ands	r3, r2
 8005d32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d34:	683b      	ldr	r3, [r7, #0]
 8005d36:	685b      	ldr	r3, [r3, #4]
 8005d38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d003      	beq.n	8005d48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	4313      	orrs	r3, r2
 8005d46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d48:	4a0f      	ldr	r2, [pc, #60]	; (8005d88 <HAL_GPIO_Init+0x304>)
 8005d4a:	69bb      	ldr	r3, [r7, #24]
 8005d4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d4e:	69fb      	ldr	r3, [r7, #28]
 8005d50:	3301      	adds	r3, #1
 8005d52:	61fb      	str	r3, [r7, #28]
 8005d54:	69fb      	ldr	r3, [r7, #28]
 8005d56:	2b0f      	cmp	r3, #15
 8005d58:	f67f aea2 	bls.w	8005aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d5c:	bf00      	nop
 8005d5e:	bf00      	nop
 8005d60:	3724      	adds	r7, #36	; 0x24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	40013800 	.word	0x40013800
 8005d74:	40020000 	.word	0x40020000
 8005d78:	40020400 	.word	0x40020400
 8005d7c:	40020800 	.word	0x40020800
 8005d80:	40020c00 	.word	0x40020c00
 8005d84:	40021000 	.word	0x40021000
 8005d88:	40013c00 	.word	0x40013c00

08005d8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
 8005d94:	460b      	mov	r3, r1
 8005d96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	691a      	ldr	r2, [r3, #16]
 8005d9c:	887b      	ldrh	r3, [r7, #2]
 8005d9e:	4013      	ands	r3, r2
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d002      	beq.n	8005daa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005da4:	2301      	movs	r3, #1
 8005da6:	73fb      	strb	r3, [r7, #15]
 8005da8:	e001      	b.n	8005dae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005daa:	2300      	movs	r3, #0
 8005dac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b083      	sub	sp, #12
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
 8005dc4:	460b      	mov	r3, r1
 8005dc6:	807b      	strh	r3, [r7, #2]
 8005dc8:	4613      	mov	r3, r2
 8005dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005dcc:	787b      	ldrb	r3, [r7, #1]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d003      	beq.n	8005dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005dd2:	887a      	ldrh	r2, [r7, #2]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005dd8:	e003      	b.n	8005de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005dda:	887b      	ldrh	r3, [r7, #2]
 8005ddc:	041a      	lsls	r2, r3, #16
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	619a      	str	r2, [r3, #24]
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	4603      	mov	r3, r0
 8005df8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8005dfa:	4b08      	ldr	r3, [pc, #32]	; (8005e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005dfc:	695a      	ldr	r2, [r3, #20]
 8005dfe:	88fb      	ldrh	r3, [r7, #6]
 8005e00:	4013      	ands	r3, r2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d006      	beq.n	8005e14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005e06:	4a05      	ldr	r2, [pc, #20]	; (8005e1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005e08:	88fb      	ldrh	r3, [r7, #6]
 8005e0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005e0c:	88fb      	ldrh	r3, [r7, #6]
 8005e0e:	4618      	mov	r0, r3
 8005e10:	f7fc f938 	bl	8002084 <HAL_GPIO_EXTI_Callback>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3708      	adds	r7, #8
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40013c00 	.word	0x40013c00

08005e20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b084      	sub	sp, #16
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	e12b      	b.n	800608a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d106      	bne.n	8005e4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005e46:	6878      	ldr	r0, [r7, #4]
 8005e48:	f7fe f9a2 	bl	8004190 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2224      	movs	r2, #36	; 0x24
 8005e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	681a      	ldr	r2, [r3, #0]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f022 0201 	bic.w	r2, r2, #1
 8005e62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	681a      	ldr	r2, [r3, #0]
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005e72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	681a      	ldr	r2, [r3, #0]
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005e82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005e84:	f003 f8ac 	bl	8008fe0 <HAL_RCC_GetPCLK1Freq>
 8005e88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	685b      	ldr	r3, [r3, #4]
 8005e8e:	4a81      	ldr	r2, [pc, #516]	; (8006094 <HAL_I2C_Init+0x274>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d807      	bhi.n	8005ea4 <HAL_I2C_Init+0x84>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	4a80      	ldr	r2, [pc, #512]	; (8006098 <HAL_I2C_Init+0x278>)
 8005e98:	4293      	cmp	r3, r2
 8005e9a:	bf94      	ite	ls
 8005e9c:	2301      	movls	r3, #1
 8005e9e:	2300      	movhi	r3, #0
 8005ea0:	b2db      	uxtb	r3, r3
 8005ea2:	e006      	b.n	8005eb2 <HAL_I2C_Init+0x92>
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4a7d      	ldr	r2, [pc, #500]	; (800609c <HAL_I2C_Init+0x27c>)
 8005ea8:	4293      	cmp	r3, r2
 8005eaa:	bf94      	ite	ls
 8005eac:	2301      	movls	r3, #1
 8005eae:	2300      	movhi	r3, #0
 8005eb0:	b2db      	uxtb	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e0e7      	b.n	800608a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	4a78      	ldr	r2, [pc, #480]	; (80060a0 <HAL_I2C_Init+0x280>)
 8005ebe:	fba2 2303 	umull	r2, r3, r2, r3
 8005ec2:	0c9b      	lsrs	r3, r3, #18
 8005ec4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68ba      	ldr	r2, [r7, #8]
 8005ed6:	430a      	orrs	r2, r1
 8005ed8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	4a6a      	ldr	r2, [pc, #424]	; (8006094 <HAL_I2C_Init+0x274>)
 8005eea:	4293      	cmp	r3, r2
 8005eec:	d802      	bhi.n	8005ef4 <HAL_I2C_Init+0xd4>
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	3301      	adds	r3, #1
 8005ef2:	e009      	b.n	8005f08 <HAL_I2C_Init+0xe8>
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005efa:	fb02 f303 	mul.w	r3, r2, r3
 8005efe:	4a69      	ldr	r2, [pc, #420]	; (80060a4 <HAL_I2C_Init+0x284>)
 8005f00:	fba2 2303 	umull	r2, r3, r2, r3
 8005f04:	099b      	lsrs	r3, r3, #6
 8005f06:	3301      	adds	r3, #1
 8005f08:	687a      	ldr	r2, [r7, #4]
 8005f0a:	6812      	ldr	r2, [r2, #0]
 8005f0c:	430b      	orrs	r3, r1
 8005f0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	69db      	ldr	r3, [r3, #28]
 8005f16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8005f1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	685b      	ldr	r3, [r3, #4]
 8005f22:	495c      	ldr	r1, [pc, #368]	; (8006094 <HAL_I2C_Init+0x274>)
 8005f24:	428b      	cmp	r3, r1
 8005f26:	d819      	bhi.n	8005f5c <HAL_I2C_Init+0x13c>
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	1e59      	subs	r1, r3, #1
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	685b      	ldr	r3, [r3, #4]
 8005f30:	005b      	lsls	r3, r3, #1
 8005f32:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f36:	1c59      	adds	r1, r3, #1
 8005f38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005f3c:	400b      	ands	r3, r1
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d00a      	beq.n	8005f58 <HAL_I2C_Init+0x138>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	1e59      	subs	r1, r3, #1
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	005b      	lsls	r3, r3, #1
 8005f4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8005f50:	3301      	adds	r3, #1
 8005f52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f56:	e051      	b.n	8005ffc <HAL_I2C_Init+0x1dc>
 8005f58:	2304      	movs	r3, #4
 8005f5a:	e04f      	b.n	8005ffc <HAL_I2C_Init+0x1dc>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	689b      	ldr	r3, [r3, #8]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d111      	bne.n	8005f88 <HAL_I2C_Init+0x168>
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	1e58      	subs	r0, r3, #1
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	6859      	ldr	r1, [r3, #4]
 8005f6c:	460b      	mov	r3, r1
 8005f6e:	005b      	lsls	r3, r3, #1
 8005f70:	440b      	add	r3, r1
 8005f72:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f76:	3301      	adds	r3, #1
 8005f78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	bf0c      	ite	eq
 8005f80:	2301      	moveq	r3, #1
 8005f82:	2300      	movne	r3, #0
 8005f84:	b2db      	uxtb	r3, r3
 8005f86:	e012      	b.n	8005fae <HAL_I2C_Init+0x18e>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	1e58      	subs	r0, r3, #1
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6859      	ldr	r1, [r3, #4]
 8005f90:	460b      	mov	r3, r1
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	440b      	add	r3, r1
 8005f96:	0099      	lsls	r1, r3, #2
 8005f98:	440b      	add	r3, r1
 8005f9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	bf0c      	ite	eq
 8005fa8:	2301      	moveq	r3, #1
 8005faa:	2300      	movne	r3, #0
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d001      	beq.n	8005fb6 <HAL_I2C_Init+0x196>
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	e022      	b.n	8005ffc <HAL_I2C_Init+0x1dc>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10e      	bne.n	8005fdc <HAL_I2C_Init+0x1bc>
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	1e58      	subs	r0, r3, #1
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6859      	ldr	r1, [r3, #4]
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	005b      	lsls	r3, r3, #1
 8005fca:	440b      	add	r3, r1
 8005fcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005fd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005fda:	e00f      	b.n	8005ffc <HAL_I2C_Init+0x1dc>
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	1e58      	subs	r0, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6859      	ldr	r1, [r3, #4]
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	009b      	lsls	r3, r3, #2
 8005fe8:	440b      	add	r3, r1
 8005fea:	0099      	lsls	r1, r3, #2
 8005fec:	440b      	add	r3, r1
 8005fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ff8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005ffc:	6879      	ldr	r1, [r7, #4]
 8005ffe:	6809      	ldr	r1, [r1, #0]
 8006000:	4313      	orrs	r3, r2
 8006002:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	69da      	ldr	r2, [r3, #28]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6a1b      	ldr	r3, [r3, #32]
 8006016:	431a      	orrs	r2, r3
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	430a      	orrs	r2, r1
 800601e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800602a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6911      	ldr	r1, [r2, #16]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	68d2      	ldr	r2, [r2, #12]
 8006036:	4311      	orrs	r1, r2
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6812      	ldr	r2, [r2, #0]
 800603c:	430b      	orrs	r3, r1
 800603e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	695a      	ldr	r2, [r3, #20]
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	699b      	ldr	r3, [r3, #24]
 8006052:	431a      	orrs	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	430a      	orrs	r2, r1
 800605a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f042 0201 	orr.w	r2, r2, #1
 800606a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2220      	movs	r2, #32
 8006076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	2200      	movs	r2, #0
 800607e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006088:	2300      	movs	r3, #0
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	000186a0 	.word	0x000186a0
 8006098:	001e847f 	.word	0x001e847f
 800609c:	003d08ff 	.word	0x003d08ff
 80060a0:	431bde83 	.word	0x431bde83
 80060a4:	10624dd3 	.word	0x10624dd3

080060a8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	607a      	str	r2, [r7, #4]
 80060b2:	461a      	mov	r2, r3
 80060b4:	460b      	mov	r3, r1
 80060b6:	817b      	strh	r3, [r7, #10]
 80060b8:	4613      	mov	r3, r2
 80060ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80060bc:	f7fe fb82 	bl	80047c4 <HAL_GetTick>
 80060c0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060c8:	b2db      	uxtb	r3, r3
 80060ca:	2b20      	cmp	r3, #32
 80060cc:	f040 80e0 	bne.w	8006290 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	2319      	movs	r3, #25
 80060d6:	2201      	movs	r2, #1
 80060d8:	4970      	ldr	r1, [pc, #448]	; (800629c <HAL_I2C_Master_Transmit+0x1f4>)
 80060da:	68f8      	ldr	r0, [r7, #12]
 80060dc:	f002 f8e6 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 80060e0:	4603      	mov	r3, r0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d001      	beq.n	80060ea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80060e6:	2302      	movs	r3, #2
 80060e8:	e0d3      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d101      	bne.n	80060f8 <HAL_I2C_Master_Transmit+0x50>
 80060f4:	2302      	movs	r3, #2
 80060f6:	e0cc      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	2201      	movs	r2, #1
 80060fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f003 0301 	and.w	r3, r3, #1
 800610a:	2b01      	cmp	r3, #1
 800610c:	d007      	beq.n	800611e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f042 0201 	orr.w	r2, r2, #1
 800611c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800612c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2221      	movs	r2, #33	; 0x21
 8006132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2210      	movs	r2, #16
 800613a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	893a      	ldrh	r2, [r7, #8]
 800614e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006154:	b29a      	uxth	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <HAL_I2C_Master_Transmit+0x1f8>)
 800615e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006160:	8979      	ldrh	r1, [r7, #10]
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	6a3a      	ldr	r2, [r7, #32]
 8006166:	68f8      	ldr	r0, [r7, #12]
 8006168:	f001 fea8 	bl	8007ebc <I2C_MasterRequestWrite>
 800616c:	4603      	mov	r3, r0
 800616e:	2b00      	cmp	r3, #0
 8006170:	d001      	beq.n	8006176 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e08d      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006176:	2300      	movs	r3, #0
 8006178:	613b      	str	r3, [r7, #16]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	695b      	ldr	r3, [r3, #20]
 8006180:	613b      	str	r3, [r7, #16]
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	699b      	ldr	r3, [r3, #24]
 8006188:	613b      	str	r3, [r7, #16]
 800618a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800618c:	e066      	b.n	800625c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800618e:	697a      	ldr	r2, [r7, #20]
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f002 f960 	bl	8008458 <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80061b4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e06b      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061be:	781a      	ldrb	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	3b01      	subs	r3, #1
 80061d8:	b29a      	uxth	r2, r3
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061e2:	3b01      	subs	r3, #1
 80061e4:	b29a      	uxth	r2, r3
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	695b      	ldr	r3, [r3, #20]
 80061f0:	f003 0304 	and.w	r3, r3, #4
 80061f4:	2b04      	cmp	r3, #4
 80061f6:	d11b      	bne.n	8006230 <HAL_I2C_Master_Transmit+0x188>
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d017      	beq.n	8006230 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	781a      	ldrb	r2, [r3, #0]
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006210:	1c5a      	adds	r2, r3, #1
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800621a:	b29b      	uxth	r3, r3
 800621c:	3b01      	subs	r3, #1
 800621e:	b29a      	uxth	r2, r3
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006228:	3b01      	subs	r3, #1
 800622a:	b29a      	uxth	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006230:	697a      	ldr	r2, [r7, #20]
 8006232:	6a39      	ldr	r1, [r7, #32]
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f002 f950 	bl	80084da <I2C_WaitOnBTFFlagUntilTimeout>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d00d      	beq.n	800625c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006244:	2b04      	cmp	r3, #4
 8006246:	d107      	bne.n	8006258 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	681a      	ldr	r2, [r3, #0]
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006256:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006258:	2301      	movs	r3, #1
 800625a:	e01a      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006260:	2b00      	cmp	r3, #0
 8006262:	d194      	bne.n	800618e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006272:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	2220      	movs	r2, #32
 8006278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	2200      	movs	r2, #0
 8006280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800628c:	2300      	movs	r3, #0
 800628e:	e000      	b.n	8006292 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006290:	2302      	movs	r3, #2
  }
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
 800629a:	bf00      	nop
 800629c:	00100002 	.word	0x00100002
 80062a0:	ffff0000 	.word	0xffff0000

080062a4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b08c      	sub	sp, #48	; 0x30
 80062a8:	af02      	add	r7, sp, #8
 80062aa:	60f8      	str	r0, [r7, #12]
 80062ac:	607a      	str	r2, [r7, #4]
 80062ae:	461a      	mov	r2, r3
 80062b0:	460b      	mov	r3, r1
 80062b2:	817b      	strh	r3, [r7, #10]
 80062b4:	4613      	mov	r3, r2
 80062b6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80062b8:	f7fe fa84 	bl	80047c4 <HAL_GetTick>
 80062bc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062c4:	b2db      	uxtb	r3, r3
 80062c6:	2b20      	cmp	r3, #32
 80062c8:	f040 820b 	bne.w	80066e2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80062cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ce:	9300      	str	r3, [sp, #0]
 80062d0:	2319      	movs	r3, #25
 80062d2:	2201      	movs	r2, #1
 80062d4:	497c      	ldr	r1, [pc, #496]	; (80064c8 <HAL_I2C_Master_Receive+0x224>)
 80062d6:	68f8      	ldr	r0, [r7, #12]
 80062d8:	f001 ffe8 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80062e2:	2302      	movs	r3, #2
 80062e4:	e1fe      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_I2C_Master_Receive+0x50>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e1f7      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	2b01      	cmp	r3, #1
 8006308:	d007      	beq.n	800631a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f042 0201 	orr.w	r2, r2, #1
 8006318:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006328:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2222      	movs	r2, #34	; 0x22
 800632e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2210      	movs	r2, #16
 8006336:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	893a      	ldrh	r2, [r7, #8]
 800634a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006350:	b29a      	uxth	r2, r3
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	4a5c      	ldr	r2, [pc, #368]	; (80064cc <HAL_I2C_Master_Receive+0x228>)
 800635a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800635c:	8979      	ldrh	r1, [r7, #10]
 800635e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006360:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f001 fe2c 	bl	8007fc0 <I2C_MasterRequestRead>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d001      	beq.n	8006372 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800636e:	2301      	movs	r3, #1
 8006370:	e1b8      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006376:	2b00      	cmp	r3, #0
 8006378:	d113      	bne.n	80063a2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800637a:	2300      	movs	r3, #0
 800637c:	623b      	str	r3, [r7, #32]
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	695b      	ldr	r3, [r3, #20]
 8006384:	623b      	str	r3, [r7, #32]
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	623b      	str	r3, [r7, #32]
 800638e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	681a      	ldr	r2, [r3, #0]
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800639e:	601a      	str	r2, [r3, #0]
 80063a0:	e18c      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063a6:	2b01      	cmp	r3, #1
 80063a8:	d11b      	bne.n	80063e2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681a      	ldr	r2, [r3, #0]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063b8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	695b      	ldr	r3, [r3, #20]
 80063c4:	61fb      	str	r3, [r7, #28]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	699b      	ldr	r3, [r3, #24]
 80063cc:	61fb      	str	r3, [r7, #28]
 80063ce:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063de:	601a      	str	r2, [r3, #0]
 80063e0:	e16c      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80063e6:	2b02      	cmp	r3, #2
 80063e8:	d11b      	bne.n	8006422 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063f8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006408:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800640a:	2300      	movs	r3, #0
 800640c:	61bb      	str	r3, [r7, #24]
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	61bb      	str	r3, [r7, #24]
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	61bb      	str	r3, [r7, #24]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	e14c      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006430:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006432:	2300      	movs	r3, #0
 8006434:	617b      	str	r3, [r7, #20]
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	695b      	ldr	r3, [r3, #20]
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8006448:	e138      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800644e:	2b03      	cmp	r3, #3
 8006450:	f200 80f1 	bhi.w	8006636 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006458:	2b01      	cmp	r3, #1
 800645a:	d123      	bne.n	80064a4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800645c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800645e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006460:	68f8      	ldr	r0, [r7, #12]
 8006462:	f002 f8ad 	bl	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800646c:	2301      	movs	r3, #1
 800646e:	e139      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	691a      	ldr	r2, [r3, #16]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	b2d2      	uxtb	r2, r2
 800647c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800648c:	3b01      	subs	r3, #1
 800648e:	b29a      	uxth	r2, r3
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006498:	b29b      	uxth	r3, r3
 800649a:	3b01      	subs	r3, #1
 800649c:	b29a      	uxth	r2, r3
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80064a2:	e10b      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80064a8:	2b02      	cmp	r3, #2
 80064aa:	d14e      	bne.n	800654a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80064ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ae:	9300      	str	r3, [sp, #0]
 80064b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064b2:	2200      	movs	r2, #0
 80064b4:	4906      	ldr	r1, [pc, #24]	; (80064d0 <HAL_I2C_Master_Receive+0x22c>)
 80064b6:	68f8      	ldr	r0, [r7, #12]
 80064b8:	f001 fef8 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 80064bc:	4603      	mov	r3, r0
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d008      	beq.n	80064d4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80064c2:	2301      	movs	r3, #1
 80064c4:	e10e      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
 80064c6:	bf00      	nop
 80064c8:	00100002 	.word	0x00100002
 80064cc:	ffff0000 	.word	0xffff0000
 80064d0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80064e2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	691a      	ldr	r2, [r3, #16]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	b2d2      	uxtb	r2, r2
 80064f0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f6:	1c5a      	adds	r2, r3, #1
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006500:	3b01      	subs	r3, #1
 8006502:	b29a      	uxth	r2, r3
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800650c:	b29b      	uxth	r3, r3
 800650e:	3b01      	subs	r3, #1
 8006510:	b29a      	uxth	r2, r3
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	691a      	ldr	r2, [r3, #16]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006520:	b2d2      	uxtb	r2, r2
 8006522:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006528:	1c5a      	adds	r2, r3, #1
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006532:	3b01      	subs	r3, #1
 8006534:	b29a      	uxth	r2, r3
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800653e:	b29b      	uxth	r3, r3
 8006540:	3b01      	subs	r3, #1
 8006542:	b29a      	uxth	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006548:	e0b8      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	9300      	str	r3, [sp, #0]
 800654e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006550:	2200      	movs	r2, #0
 8006552:	4966      	ldr	r1, [pc, #408]	; (80066ec <HAL_I2C_Master_Receive+0x448>)
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 fea9 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d001      	beq.n	8006564 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8006560:	2301      	movs	r3, #1
 8006562:	e0bf      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	681a      	ldr	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006572:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	691a      	ldr	r2, [r3, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657e:	b2d2      	uxtb	r2, r2
 8006580:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006586:	1c5a      	adds	r2, r3, #1
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006590:	3b01      	subs	r3, #1
 8006592:	b29a      	uxth	r2, r3
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800659c:	b29b      	uxth	r3, r3
 800659e:	3b01      	subs	r3, #1
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80065a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065a8:	9300      	str	r3, [sp, #0]
 80065aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ac:	2200      	movs	r2, #0
 80065ae:	494f      	ldr	r1, [pc, #316]	; (80066ec <HAL_I2C_Master_Receive+0x448>)
 80065b0:	68f8      	ldr	r0, [r7, #12]
 80065b2:	f001 fe7b 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e091      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80065ce:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	691a      	ldr	r2, [r3, #16]
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065da:	b2d2      	uxtb	r2, r2
 80065dc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e2:	1c5a      	adds	r2, r3, #1
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065ec:	3b01      	subs	r3, #1
 80065ee:	b29a      	uxth	r2, r3
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3b01      	subs	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	691a      	ldr	r2, [r3, #16]
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	b2d2      	uxtb	r2, r2
 800660e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	1c5a      	adds	r2, r3, #1
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	3b01      	subs	r3, #1
 8006620:	b29a      	uxth	r2, r3
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800662a:	b29b      	uxth	r3, r3
 800662c:	3b01      	subs	r3, #1
 800662e:	b29a      	uxth	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006634:	e042      	b.n	80066bc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006636:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006638:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800663a:	68f8      	ldr	r0, [r7, #12]
 800663c:	f001 ffc0 	bl	80085c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	d001      	beq.n	800664a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8006646:	2301      	movs	r3, #1
 8006648:	e04c      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	691a      	ldr	r2, [r3, #16]
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006654:	b2d2      	uxtb	r2, r2
 8006656:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800665c:	1c5a      	adds	r2, r3, #1
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006666:	3b01      	subs	r3, #1
 8006668:	b29a      	uxth	r2, r3
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	695b      	ldr	r3, [r3, #20]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d118      	bne.n	80066bc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006694:	b2d2      	uxtb	r2, r2
 8006696:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800669c:	1c5a      	adds	r2, r3, #1
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a6:	3b01      	subs	r3, #1
 80066a8:	b29a      	uxth	r2, r3
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066b2:	b29b      	uxth	r3, r3
 80066b4:	3b01      	subs	r3, #1
 80066b6:	b29a      	uxth	r2, r3
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f47f aec2 	bne.w	800644a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	2220      	movs	r2, #32
 80066ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	2200      	movs	r2, #0
 80066d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	2200      	movs	r2, #0
 80066da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80066de:	2300      	movs	r3, #0
 80066e0:	e000      	b.n	80066e4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80066e2:	2302      	movs	r3, #2
  }
}
 80066e4:	4618      	mov	r0, r3
 80066e6:	3728      	adds	r7, #40	; 0x28
 80066e8:	46bd      	mov	sp, r7
 80066ea:	bd80      	pop	{r7, pc}
 80066ec:	00010004 	.word	0x00010004

080066f0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b088      	sub	sp, #32
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006708:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006710:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006718:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800671a:	7bfb      	ldrb	r3, [r7, #15]
 800671c:	2b10      	cmp	r3, #16
 800671e:	d003      	beq.n	8006728 <HAL_I2C_EV_IRQHandler+0x38>
 8006720:	7bfb      	ldrb	r3, [r7, #15]
 8006722:	2b40      	cmp	r3, #64	; 0x40
 8006724:	f040 80c1 	bne.w	80068aa <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	699b      	ldr	r3, [r3, #24]
 800672e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	695b      	ldr	r3, [r3, #20]
 8006736:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006738:	69fb      	ldr	r3, [r7, #28]
 800673a:	f003 0301 	and.w	r3, r3, #1
 800673e:	2b00      	cmp	r3, #0
 8006740:	d10d      	bne.n	800675e <HAL_I2C_EV_IRQHandler+0x6e>
 8006742:	693b      	ldr	r3, [r7, #16]
 8006744:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006748:	d003      	beq.n	8006752 <HAL_I2C_EV_IRQHandler+0x62>
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006750:	d101      	bne.n	8006756 <HAL_I2C_EV_IRQHandler+0x66>
 8006752:	2301      	movs	r3, #1
 8006754:	e000      	b.n	8006758 <HAL_I2C_EV_IRQHandler+0x68>
 8006756:	2300      	movs	r3, #0
 8006758:	2b01      	cmp	r3, #1
 800675a:	f000 8132 	beq.w	80069c2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800675e:	69fb      	ldr	r3, [r7, #28]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00c      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0x92>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	0a5b      	lsrs	r3, r3, #9
 800676c:	f003 0301 	and.w	r3, r3, #1
 8006770:	2b00      	cmp	r3, #0
 8006772:	d006      	beq.n	8006782 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006774:	6878      	ldr	r0, [r7, #4]
 8006776:	f001 ffa8 	bl	80086ca <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800677a:	6878      	ldr	r0, [r7, #4]
 800677c:	f000 fd83 	bl	8007286 <I2C_Master_SB>
 8006780:	e092      	b.n	80068a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006782:	69fb      	ldr	r3, [r7, #28]
 8006784:	08db      	lsrs	r3, r3, #3
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0xb2>
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	0a5b      	lsrs	r3, r3, #9
 8006792:	f003 0301 	and.w	r3, r3, #1
 8006796:	2b00      	cmp	r3, #0
 8006798:	d003      	beq.n	80067a2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 fdf9 	bl	8007392 <I2C_Master_ADD10>
 80067a0:	e082      	b.n	80068a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80067a2:	69fb      	ldr	r3, [r7, #28]
 80067a4:	085b      	lsrs	r3, r3, #1
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d009      	beq.n	80067c2 <HAL_I2C_EV_IRQHandler+0xd2>
 80067ae:	697b      	ldr	r3, [r7, #20]
 80067b0:	0a5b      	lsrs	r3, r3, #9
 80067b2:	f003 0301 	and.w	r3, r3, #1
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d003      	beq.n	80067c2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f000 fe13 	bl	80073e6 <I2C_Master_ADDR>
 80067c0:	e072      	b.n	80068a8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	089b      	lsrs	r3, r3, #2
 80067c6:	f003 0301 	and.w	r3, r3, #1
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d03b      	beq.n	8006846 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	685b      	ldr	r3, [r3, #4]
 80067d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80067d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80067dc:	f000 80f3 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80067e0:	69fb      	ldr	r3, [r7, #28]
 80067e2:	09db      	lsrs	r3, r3, #7
 80067e4:	f003 0301 	and.w	r3, r3, #1
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <HAL_I2C_EV_IRQHandler+0x11c>
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	0a9b      	lsrs	r3, r3, #10
 80067f0:	f003 0301 	and.w	r3, r3, #1
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d009      	beq.n	800680c <HAL_I2C_EV_IRQHandler+0x11c>
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	089b      	lsrs	r3, r3, #2
 80067fc:	f003 0301 	and.w	r3, r3, #1
 8006800:	2b00      	cmp	r3, #0
 8006802:	d103      	bne.n	800680c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f000 f9f3 	bl	8006bf0 <I2C_MasterTransmit_TXE>
 800680a:	e04d      	b.n	80068a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800680c:	69fb      	ldr	r3, [r7, #28]
 800680e:	089b      	lsrs	r3, r3, #2
 8006810:	f003 0301 	and.w	r3, r3, #1
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 80d6 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	0a5b      	lsrs	r3, r3, #9
 800681e:	f003 0301 	and.w	r3, r3, #1
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80cf 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006828:	7bbb      	ldrb	r3, [r7, #14]
 800682a:	2b21      	cmp	r3, #33	; 0x21
 800682c:	d103      	bne.n	8006836 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fa7a 	bl	8006d28 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006834:	e0c7      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006836:	7bfb      	ldrb	r3, [r7, #15]
 8006838:	2b40      	cmp	r3, #64	; 0x40
 800683a:	f040 80c4 	bne.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f000 fae8 	bl	8006e14 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006844:	e0bf      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006850:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006854:	f000 80b7 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006858:	69fb      	ldr	r3, [r7, #28]
 800685a:	099b      	lsrs	r3, r3, #6
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	2b00      	cmp	r3, #0
 8006862:	d00f      	beq.n	8006884 <HAL_I2C_EV_IRQHandler+0x194>
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	0a9b      	lsrs	r3, r3, #10
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d009      	beq.n	8006884 <HAL_I2C_EV_IRQHandler+0x194>
 8006870:	69fb      	ldr	r3, [r7, #28]
 8006872:	089b      	lsrs	r3, r3, #2
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b00      	cmp	r3, #0
 800687a:	d103      	bne.n	8006884 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fb5d 	bl	8006f3c <I2C_MasterReceive_RXNE>
 8006882:	e011      	b.n	80068a8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006884:	69fb      	ldr	r3, [r7, #28]
 8006886:	089b      	lsrs	r3, r3, #2
 8006888:	f003 0301 	and.w	r3, r3, #1
 800688c:	2b00      	cmp	r3, #0
 800688e:	f000 809a 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	0a5b      	lsrs	r3, r3, #9
 8006896:	f003 0301 	and.w	r3, r3, #1
 800689a:	2b00      	cmp	r3, #0
 800689c:	f000 8093 	beq.w	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f000 fc06 	bl	80070b2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068a6:	e08e      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80068a8:	e08d      	b.n	80069c6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d004      	beq.n	80068bc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	695b      	ldr	r3, [r3, #20]
 80068b8:	61fb      	str	r3, [r7, #28]
 80068ba:	e007      	b.n	80068cc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	085b      	lsrs	r3, r3, #1
 80068d0:	f003 0301 	and.w	r3, r3, #1
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d012      	beq.n	80068fe <HAL_I2C_EV_IRQHandler+0x20e>
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	0a5b      	lsrs	r3, r3, #9
 80068dc:	f003 0301 	and.w	r3, r3, #1
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00c      	beq.n	80068fe <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d003      	beq.n	80068f4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	699b      	ldr	r3, [r3, #24]
 80068f2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80068f4:	69b9      	ldr	r1, [r7, #24]
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f000 ffc4 	bl	8007884 <I2C_Slave_ADDR>
 80068fc:	e066      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80068fe:	69fb      	ldr	r3, [r7, #28]
 8006900:	091b      	lsrs	r3, r3, #4
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	2b00      	cmp	r3, #0
 8006908:	d009      	beq.n	800691e <HAL_I2C_EV_IRQHandler+0x22e>
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	0a5b      	lsrs	r3, r3, #9
 800690e:	f003 0301 	and.w	r3, r3, #1
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006916:	6878      	ldr	r0, [r7, #4]
 8006918:	f000 fffe 	bl	8007918 <I2C_Slave_STOPF>
 800691c:	e056      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800691e:	7bbb      	ldrb	r3, [r7, #14]
 8006920:	2b21      	cmp	r3, #33	; 0x21
 8006922:	d002      	beq.n	800692a <HAL_I2C_EV_IRQHandler+0x23a>
 8006924:	7bbb      	ldrb	r3, [r7, #14]
 8006926:	2b29      	cmp	r3, #41	; 0x29
 8006928:	d125      	bne.n	8006976 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800692a:	69fb      	ldr	r3, [r7, #28]
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	f003 0301 	and.w	r3, r3, #1
 8006932:	2b00      	cmp	r3, #0
 8006934:	d00f      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x266>
 8006936:	697b      	ldr	r3, [r7, #20]
 8006938:	0a9b      	lsrs	r3, r3, #10
 800693a:	f003 0301 	and.w	r3, r3, #1
 800693e:	2b00      	cmp	r3, #0
 8006940:	d009      	beq.n	8006956 <HAL_I2C_EV_IRQHandler+0x266>
 8006942:	69fb      	ldr	r3, [r7, #28]
 8006944:	089b      	lsrs	r3, r3, #2
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b00      	cmp	r3, #0
 800694c:	d103      	bne.n	8006956 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800694e:	6878      	ldr	r0, [r7, #4]
 8006950:	f000 feda 	bl	8007708 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006954:	e039      	b.n	80069ca <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006956:	69fb      	ldr	r3, [r7, #28]
 8006958:	089b      	lsrs	r3, r3, #2
 800695a:	f003 0301 	and.w	r3, r3, #1
 800695e:	2b00      	cmp	r3, #0
 8006960:	d033      	beq.n	80069ca <HAL_I2C_EV_IRQHandler+0x2da>
 8006962:	697b      	ldr	r3, [r7, #20]
 8006964:	0a5b      	lsrs	r3, r3, #9
 8006966:	f003 0301 	and.w	r3, r3, #1
 800696a:	2b00      	cmp	r3, #0
 800696c:	d02d      	beq.n	80069ca <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 ff07 	bl	8007782 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006974:	e029      	b.n	80069ca <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006976:	69fb      	ldr	r3, [r7, #28]
 8006978:	099b      	lsrs	r3, r3, #6
 800697a:	f003 0301 	and.w	r3, r3, #1
 800697e:	2b00      	cmp	r3, #0
 8006980:	d00f      	beq.n	80069a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	0a9b      	lsrs	r3, r3, #10
 8006986:	f003 0301 	and.w	r3, r3, #1
 800698a:	2b00      	cmp	r3, #0
 800698c:	d009      	beq.n	80069a2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	089b      	lsrs	r3, r3, #2
 8006992:	f003 0301 	and.w	r3, r3, #1
 8006996:	2b00      	cmp	r3, #0
 8006998:	d103      	bne.n	80069a2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800699a:	6878      	ldr	r0, [r7, #4]
 800699c:	f000 ff12 	bl	80077c4 <I2C_SlaveReceive_RXNE>
 80069a0:	e014      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069a2:	69fb      	ldr	r3, [r7, #28]
 80069a4:	089b      	lsrs	r3, r3, #2
 80069a6:	f003 0301 	and.w	r3, r3, #1
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00e      	beq.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
 80069ae:	697b      	ldr	r3, [r7, #20]
 80069b0:	0a5b      	lsrs	r3, r3, #9
 80069b2:	f003 0301 	and.w	r3, r3, #1
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d008      	beq.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 ff40 	bl	8007840 <I2C_SlaveReceive_BTF>
 80069c0:	e004      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80069c2:	bf00      	nop
 80069c4:	e002      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80069c6:	bf00      	nop
 80069c8:	e000      	b.n	80069cc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80069ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80069cc:	3720      	adds	r7, #32
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80069d2:	b580      	push	{r7, lr}
 80069d4:	b08a      	sub	sp, #40	; 0x28
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	695b      	ldr	r3, [r3, #20]
 80069e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80069ea:	2300      	movs	r3, #0
 80069ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80069f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	0a1b      	lsrs	r3, r3, #8
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <HAL_I2C_ER_IRQHandler+0x4e>
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	0a1b      	lsrs	r3, r3, #8
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d008      	beq.n	8006a20 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8006a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a10:	f043 0301 	orr.w	r3, r3, #1
 8006a14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006a1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a20:	6a3b      	ldr	r3, [r7, #32]
 8006a22:	0a5b      	lsrs	r3, r3, #9
 8006a24:	f003 0301 	and.w	r3, r3, #1
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d00e      	beq.n	8006a4a <HAL_I2C_ER_IRQHandler+0x78>
 8006a2c:	69fb      	ldr	r3, [r7, #28]
 8006a2e:	0a1b      	lsrs	r3, r3, #8
 8006a30:	f003 0301 	and.w	r3, r3, #1
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d008      	beq.n	8006a4a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8006a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3a:	f043 0302 	orr.w	r3, r3, #2
 8006a3e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8006a48:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006a4a:	6a3b      	ldr	r3, [r7, #32]
 8006a4c:	0a9b      	lsrs	r3, r3, #10
 8006a4e:	f003 0301 	and.w	r3, r3, #1
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d03f      	beq.n	8006ad6 <HAL_I2C_ER_IRQHandler+0x104>
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	0a1b      	lsrs	r3, r3, #8
 8006a5a:	f003 0301 	and.w	r3, r3, #1
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d039      	beq.n	8006ad6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8006a62:	7efb      	ldrb	r3, [r7, #27]
 8006a64:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6a:	b29b      	uxth	r3, r3
 8006a6c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a74:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8006a7c:	7ebb      	ldrb	r3, [r7, #26]
 8006a7e:	2b20      	cmp	r3, #32
 8006a80:	d112      	bne.n	8006aa8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d10f      	bne.n	8006aa8 <HAL_I2C_ER_IRQHandler+0xd6>
 8006a88:	7cfb      	ldrb	r3, [r7, #19]
 8006a8a:	2b21      	cmp	r3, #33	; 0x21
 8006a8c:	d008      	beq.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8006a8e:	7cfb      	ldrb	r3, [r7, #19]
 8006a90:	2b29      	cmp	r3, #41	; 0x29
 8006a92:	d005      	beq.n	8006aa0 <HAL_I2C_ER_IRQHandler+0xce>
 8006a94:	7cfb      	ldrb	r3, [r7, #19]
 8006a96:	2b28      	cmp	r3, #40	; 0x28
 8006a98:	d106      	bne.n	8006aa8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	2b21      	cmp	r3, #33	; 0x21
 8006a9e:	d103      	bne.n	8006aa8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	f001 f869 	bl	8007b78 <I2C_Slave_AF>
 8006aa6:	e016      	b.n	8006ad6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006ab0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8006ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab4:	f043 0304 	orr.w	r3, r3, #4
 8006ab8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006aba:	7efb      	ldrb	r3, [r7, #27]
 8006abc:	2b10      	cmp	r3, #16
 8006abe:	d002      	beq.n	8006ac6 <HAL_I2C_ER_IRQHandler+0xf4>
 8006ac0:	7efb      	ldrb	r3, [r7, #27]
 8006ac2:	2b40      	cmp	r3, #64	; 0x40
 8006ac4:	d107      	bne.n	8006ad6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006ad4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8006ad6:	6a3b      	ldr	r3, [r7, #32]
 8006ad8:	0adb      	lsrs	r3, r3, #11
 8006ada:	f003 0301 	and.w	r3, r3, #1
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00e      	beq.n	8006b00 <HAL_I2C_ER_IRQHandler+0x12e>
 8006ae2:	69fb      	ldr	r3, [r7, #28]
 8006ae4:	0a1b      	lsrs	r3, r3, #8
 8006ae6:	f003 0301 	and.w	r3, r3, #1
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d008      	beq.n	8006b00 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8006aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af0:	f043 0308 	orr.w	r3, r3, #8
 8006af4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8006afe:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8006b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d008      	beq.n	8006b18 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	431a      	orrs	r2, r3
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f001 f8a0 	bl	8007c58 <I2C_ITError>
  }
}
 8006b18:	bf00      	nop
 8006b1a:	3728      	adds	r7, #40	; 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}

08006b20 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b083      	sub	sp, #12
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8006b3c:	bf00      	nop
 8006b3e:	370c      	adds	r7, #12
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006b50:	bf00      	nop
 8006b52:	370c      	adds	r7, #12
 8006b54:	46bd      	mov	sp, r7
 8006b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5a:	4770      	bx	lr

08006b5c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006b64:	bf00      	nop
 8006b66:	370c      	adds	r7, #12
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6e:	4770      	bx	lr

08006b70 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	460b      	mov	r3, r1
 8006b7a:	70fb      	strb	r3, [r7, #3]
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b80:	bf00      	nop
 8006b82:	370c      	adds	r7, #12
 8006b84:	46bd      	mov	sp, r7
 8006b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8a:	4770      	bx	lr

08006b8c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b083      	sub	sp, #12
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8006b94:	bf00      	nop
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr

08006ba0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ba0:	b480      	push	{r7}
 8006ba2:	b083      	sub	sp, #12
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr

08006bb4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b083      	sub	sp, #12
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006bbc:	bf00      	nop
 8006bbe:	370c      	adds	r7, #12
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc6:	4770      	bx	lr

08006bc8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8006bd0:	bf00      	nop
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr

08006bdc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006bdc:	b480      	push	{r7}
 8006bde:	b083      	sub	sp, #12
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8006be4:	bf00      	nop
 8006be6:	370c      	adds	r7, #12
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b084      	sub	sp, #16
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006bfe:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c06:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c0c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d150      	bne.n	8006cb8 <I2C_MasterTransmit_TXE+0xc8>
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b21      	cmp	r3, #33	; 0x21
 8006c1a:	d14d      	bne.n	8006cb8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	2b08      	cmp	r3, #8
 8006c20:	d01d      	beq.n	8006c5e <I2C_MasterTransmit_TXE+0x6e>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	2b20      	cmp	r3, #32
 8006c26:	d01a      	beq.n	8006c5e <I2C_MasterTransmit_TXE+0x6e>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c2e:	d016      	beq.n	8006c5e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c3e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2211      	movs	r2, #17
 8006c44:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2220      	movs	r2, #32
 8006c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7ff ff62 	bl	8006b20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006c5c:	e060      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685a      	ldr	r2, [r3, #4]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006c6c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681a      	ldr	r2, [r3, #0]
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c7c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	2200      	movs	r2, #0
 8006c82:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2220      	movs	r2, #32
 8006c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c92:	b2db      	uxtb	r3, r3
 8006c94:	2b40      	cmp	r3, #64	; 0x40
 8006c96:	d107      	bne.n	8006ca8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8006ca0:	6878      	ldr	r0, [r7, #4]
 8006ca2:	f7ff ff7d 	bl	8006ba0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006ca6:	e03b      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2200      	movs	r2, #0
 8006cac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006cb0:	6878      	ldr	r0, [r7, #4]
 8006cb2:	f7ff ff35 	bl	8006b20 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006cb6:	e033      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	2b21      	cmp	r3, #33	; 0x21
 8006cbc:	d005      	beq.n	8006cca <I2C_MasterTransmit_TXE+0xda>
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	2b40      	cmp	r3, #64	; 0x40
 8006cc2:	d12d      	bne.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8006cc4:	7bfb      	ldrb	r3, [r7, #15]
 8006cc6:	2b22      	cmp	r3, #34	; 0x22
 8006cc8:	d12a      	bne.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cce:	b29b      	uxth	r3, r3
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d108      	bne.n	8006ce6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ce2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8006ce4:	e01c      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b40      	cmp	r3, #64	; 0x40
 8006cf0:	d103      	bne.n	8006cfa <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 f88e 	bl	8006e14 <I2C_MemoryTransmit_TXE_BTF>
}
 8006cf8:	e012      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	781a      	ldrb	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d0a:	1c5a      	adds	r2, r3, #1
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	3b01      	subs	r3, #1
 8006d18:	b29a      	uxth	r2, r3
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006d1e:	e7ff      	b.n	8006d20 <I2C_MasterTransmit_TXE+0x130>
 8006d20:	bf00      	nop
 8006d22:	3710      	adds	r7, #16
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}

08006d28 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b084      	sub	sp, #16
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d34:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b21      	cmp	r3, #33	; 0x21
 8006d40:	d164      	bne.n	8006e0c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d012      	beq.n	8006d72 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d50:	781a      	ldrb	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d5c:	1c5a      	adds	r2, r3, #1
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d66:	b29b      	uxth	r3, r3
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29a      	uxth	r2, r3
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8006d70:	e04c      	b.n	8006e0c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	2b08      	cmp	r3, #8
 8006d76:	d01d      	beq.n	8006db4 <I2C_MasterTransmit_BTF+0x8c>
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2b20      	cmp	r3, #32
 8006d7c:	d01a      	beq.n	8006db4 <I2C_MasterTransmit_BTF+0x8c>
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d84:	d016      	beq.n	8006db4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006d94:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2211      	movs	r2, #17
 8006d9a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8006dac:	6878      	ldr	r0, [r7, #4]
 8006dae:	f7ff feb7 	bl	8006b20 <HAL_I2C_MasterTxCpltCallback>
}
 8006db2:	e02b      	b.n	8006e0c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	685a      	ldr	r2, [r3, #4]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006dc2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006dd2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2220      	movs	r2, #32
 8006dde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de8:	b2db      	uxtb	r3, r3
 8006dea:	2b40      	cmp	r3, #64	; 0x40
 8006dec:	d107      	bne.n	8006dfe <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f7ff fed2 	bl	8006ba0 <HAL_I2C_MemTxCpltCallback>
}
 8006dfc:	e006      	b.n	8006e0c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	2200      	movs	r2, #0
 8006e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8006e06:	6878      	ldr	r0, [r7, #4]
 8006e08:	f7ff fe8a 	bl	8006b20 <HAL_I2C_MasterTxCpltCallback>
}
 8006e0c:	bf00      	nop
 8006e0e:	3710      	adds	r7, #16
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e22:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d11d      	bne.n	8006e68 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d10b      	bne.n	8006e4c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e38:	b2da      	uxtb	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e44:	1c9a      	adds	r2, r3, #2
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8006e4a:	e073      	b.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e50:	b29b      	uxth	r3, r3
 8006e52:	121b      	asrs	r3, r3, #8
 8006e54:	b2da      	uxtb	r2, r3
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e60:	1c5a      	adds	r2, r3, #1
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e66:	e065      	b.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e6c:	2b01      	cmp	r3, #1
 8006e6e:	d10b      	bne.n	8006e88 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006e74:	b2da      	uxtb	r2, r3
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e80:	1c5a      	adds	r2, r3, #1
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006e86:	e055      	b.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d151      	bne.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
 8006e92:	2b22      	cmp	r3, #34	; 0x22
 8006e94:	d10d      	bne.n	8006eb2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681a      	ldr	r2, [r3, #0]
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ea4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8006eb0:	e040      	b.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d015      	beq.n	8006ee8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8006ebc:	7bfb      	ldrb	r3, [r7, #15]
 8006ebe:	2b21      	cmp	r3, #33	; 0x21
 8006ec0:	d112      	bne.n	8006ee8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ec6:	781a      	ldrb	r2, [r3, #0]
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ed2:	1c5a      	adds	r2, r3, #1
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006edc:	b29b      	uxth	r3, r3
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29a      	uxth	r2, r3
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8006ee6:	e025      	b.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006eec:	b29b      	uxth	r3, r3
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d120      	bne.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8006ef2:	7bfb      	ldrb	r3, [r7, #15]
 8006ef4:	2b21      	cmp	r3, #33	; 0x21
 8006ef6:	d11d      	bne.n	8006f34 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	685a      	ldr	r2, [r3, #4]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006f06:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	681a      	ldr	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f16:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2220      	movs	r2, #32
 8006f22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f7ff fe36 	bl	8006ba0 <HAL_I2C_MemTxCpltCallback>
}
 8006f34:	bf00      	nop
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006f3c:	b580      	push	{r7, lr}
 8006f3e:	b084      	sub	sp, #16
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f4a:	b2db      	uxtb	r3, r3
 8006f4c:	2b22      	cmp	r3, #34	; 0x22
 8006f4e:	f040 80ac 	bne.w	80070aa <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	2b03      	cmp	r3, #3
 8006f5e:	d921      	bls.n	8006fa4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	691a      	ldr	r2, [r3, #16]
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f72:	1c5a      	adds	r2, r3, #1
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f7c:	b29b      	uxth	r3, r3
 8006f7e:	3b01      	subs	r3, #1
 8006f80:	b29a      	uxth	r2, r3
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f8a:	b29b      	uxth	r3, r3
 8006f8c:	2b03      	cmp	r3, #3
 8006f8e:	f040 808c 	bne.w	80070aa <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	685a      	ldr	r2, [r3, #4]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fa0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8006fa2:	e082      	b.n	80070aa <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa8:	2b02      	cmp	r3, #2
 8006faa:	d075      	beq.n	8007098 <I2C_MasterReceive_RXNE+0x15c>
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	2b01      	cmp	r3, #1
 8006fb0:	d002      	beq.n	8006fb8 <I2C_MasterReceive_RXNE+0x7c>
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d16f      	bne.n	8007098 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006fb8:	6878      	ldr	r0, [r7, #4]
 8006fba:	f001 facf 	bl	800855c <I2C_WaitOnSTOPRequestThroughIT>
 8006fbe:	4603      	mov	r3, r0
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d142      	bne.n	800704a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	681a      	ldr	r2, [r3, #0]
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006fd2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	685a      	ldr	r2, [r3, #4]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006fe2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	691a      	ldr	r2, [r3, #16]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fee:	b2d2      	uxtb	r2, r2
 8006ff0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ff6:	1c5a      	adds	r2, r3, #1
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007000:	b29b      	uxth	r3, r3
 8007002:	3b01      	subs	r3, #1
 8007004:	b29a      	uxth	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2220      	movs	r2, #32
 800700e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b40      	cmp	r3, #64	; 0x40
 800701c:	d10a      	bne.n	8007034 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2200      	movs	r2, #0
 800702a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f7ff fdc1 	bl	8006bb4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007032:	e03a      	b.n	80070aa <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2212      	movs	r2, #18
 8007040:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f7ff fd76 	bl	8006b34 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007048:	e02f      	b.n	80070aa <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	685a      	ldr	r2, [r3, #4]
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007058:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	691a      	ldr	r2, [r3, #16]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007064:	b2d2      	uxtb	r2, r2
 8007066:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706c:	1c5a      	adds	r2, r3, #1
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007076:	b29b      	uxth	r3, r3
 8007078:	3b01      	subs	r3, #1
 800707a:	b29a      	uxth	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2220      	movs	r2, #32
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f7ff fd99 	bl	8006bc8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007096:	e008      	b.n	80070aa <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	685a      	ldr	r2, [r3, #4]
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070a6:	605a      	str	r2, [r3, #4]
}
 80070a8:	e7ff      	b.n	80070aa <I2C_MasterReceive_RXNE+0x16e>
 80070aa:	bf00      	nop
 80070ac:	3710      	adds	r7, #16
 80070ae:	46bd      	mov	sp, r7
 80070b0:	bd80      	pop	{r7, pc}

080070b2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80070b2:	b580      	push	{r7, lr}
 80070b4:	b084      	sub	sp, #16
 80070b6:	af00      	add	r7, sp, #0
 80070b8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070be:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070c4:	b29b      	uxth	r3, r3
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d11b      	bne.n	8007102 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685a      	ldr	r2, [r3, #4]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80070d8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	691a      	ldr	r2, [r3, #16]
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e4:	b2d2      	uxtb	r2, r2
 80070e6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	1c5a      	adds	r2, r3, #1
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070f6:	b29b      	uxth	r3, r3
 80070f8:	3b01      	subs	r3, #1
 80070fa:	b29a      	uxth	r2, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007100:	e0bd      	b.n	800727e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007106:	b29b      	uxth	r3, r3
 8007108:	2b03      	cmp	r3, #3
 800710a:	d129      	bne.n	8007160 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	685a      	ldr	r2, [r3, #4]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800711a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2b04      	cmp	r3, #4
 8007120:	d00a      	beq.n	8007138 <I2C_MasterReceive_BTF+0x86>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	2b02      	cmp	r3, #2
 8007126:	d007      	beq.n	8007138 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	681a      	ldr	r2, [r3, #0]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007136:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	691a      	ldr	r2, [r3, #16]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007142:	b2d2      	uxtb	r2, r2
 8007144:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800714a:	1c5a      	adds	r2, r3, #1
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007154:	b29b      	uxth	r3, r3
 8007156:	3b01      	subs	r3, #1
 8007158:	b29a      	uxth	r2, r3
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800715e:	e08e      	b.n	800727e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007164:	b29b      	uxth	r3, r3
 8007166:	2b02      	cmp	r3, #2
 8007168:	d176      	bne.n	8007258 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b01      	cmp	r3, #1
 800716e:	d002      	beq.n	8007176 <I2C_MasterReceive_BTF+0xc4>
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b10      	cmp	r3, #16
 8007174:	d108      	bne.n	8007188 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007184:	601a      	str	r2, [r3, #0]
 8007186:	e019      	b.n	80071bc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2b04      	cmp	r3, #4
 800718c:	d002      	beq.n	8007194 <I2C_MasterReceive_BTF+0xe2>
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	2b02      	cmp	r3, #2
 8007192:	d108      	bne.n	80071a6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071a2:	601a      	str	r2, [r3, #0]
 80071a4:	e00a      	b.n	80071bc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2b10      	cmp	r3, #16
 80071aa:	d007      	beq.n	80071bc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681a      	ldr	r2, [r3, #0]
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071ba:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	691a      	ldr	r2, [r3, #16]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071c6:	b2d2      	uxtb	r2, r2
 80071c8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ce:	1c5a      	adds	r2, r3, #1
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071d8:	b29b      	uxth	r3, r3
 80071da:	3b01      	subs	r3, #1
 80071dc:	b29a      	uxth	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	b2d2      	uxtb	r2, r2
 80071ee:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071f4:	1c5a      	adds	r2, r3, #1
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80071fe:	b29b      	uxth	r3, r3
 8007200:	3b01      	subs	r3, #1
 8007202:	b29a      	uxth	r2, r3
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	685a      	ldr	r2, [r3, #4]
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007216:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2220      	movs	r2, #32
 800721c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b40      	cmp	r3, #64	; 0x40
 800722a:	d10a      	bne.n	8007242 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2200      	movs	r2, #0
 8007230:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2200      	movs	r2, #0
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800723a:	6878      	ldr	r0, [r7, #4]
 800723c:	f7ff fcba 	bl	8006bb4 <HAL_I2C_MemRxCpltCallback>
}
 8007240:	e01d      	b.n	800727e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	2200      	movs	r2, #0
 8007246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	2212      	movs	r2, #18
 800724e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f7ff fc6f 	bl	8006b34 <HAL_I2C_MasterRxCpltCallback>
}
 8007256:	e012      	b.n	800727e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	691a      	ldr	r2, [r3, #16]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007262:	b2d2      	uxtb	r2, r2
 8007264:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800726a:	1c5a      	adds	r2, r3, #1
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800727e:	bf00      	nop
 8007280:	3710      	adds	r7, #16
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}

08007286 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007286:	b480      	push	{r7}
 8007288:	b083      	sub	sp, #12
 800728a:	af00      	add	r7, sp, #0
 800728c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b40      	cmp	r3, #64	; 0x40
 8007298:	d117      	bne.n	80072ca <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d109      	bne.n	80072b6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	461a      	mov	r2, r3
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072b2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80072b4:	e067      	b.n	8007386 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	f043 0301 	orr.w	r3, r3, #1
 80072c0:	b2da      	uxtb	r2, r3
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	611a      	str	r2, [r3, #16]
}
 80072c8:	e05d      	b.n	8007386 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	691b      	ldr	r3, [r3, #16]
 80072ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80072d2:	d133      	bne.n	800733c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072da:	b2db      	uxtb	r3, r3
 80072dc:	2b21      	cmp	r3, #33	; 0x21
 80072de:	d109      	bne.n	80072f4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	461a      	mov	r2, r3
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80072f0:	611a      	str	r2, [r3, #16]
 80072f2:	e008      	b.n	8007306 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072f8:	b2db      	uxtb	r3, r3
 80072fa:	f043 0301 	orr.w	r3, r3, #1
 80072fe:	b2da      	uxtb	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800730a:	2b00      	cmp	r3, #0
 800730c:	d004      	beq.n	8007318 <I2C_Master_SB+0x92>
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007314:	2b00      	cmp	r3, #0
 8007316:	d108      	bne.n	800732a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800731c:	2b00      	cmp	r3, #0
 800731e:	d032      	beq.n	8007386 <I2C_Master_SB+0x100>
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d02d      	beq.n	8007386 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007338:	605a      	str	r2, [r3, #4]
}
 800733a:	e024      	b.n	8007386 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007340:	2b00      	cmp	r3, #0
 8007342:	d10e      	bne.n	8007362 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007348:	b29b      	uxth	r3, r3
 800734a:	11db      	asrs	r3, r3, #7
 800734c:	b2db      	uxtb	r3, r3
 800734e:	f003 0306 	and.w	r3, r3, #6
 8007352:	b2db      	uxtb	r3, r3
 8007354:	f063 030f 	orn	r3, r3, #15
 8007358:	b2da      	uxtb	r2, r3
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	611a      	str	r2, [r3, #16]
}
 8007360:	e011      	b.n	8007386 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007366:	2b01      	cmp	r3, #1
 8007368:	d10d      	bne.n	8007386 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800736e:	b29b      	uxth	r3, r3
 8007370:	11db      	asrs	r3, r3, #7
 8007372:	b2db      	uxtb	r3, r3
 8007374:	f003 0306 	and.w	r3, r3, #6
 8007378:	b2db      	uxtb	r3, r3
 800737a:	f063 030e 	orn	r3, r3, #14
 800737e:	b2da      	uxtb	r2, r3
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	611a      	str	r2, [r3, #16]
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800739e:	b2da      	uxtb	r2, r3
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d004      	beq.n	80073b8 <I2C_Master_ADD10+0x26>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d108      	bne.n	80073ca <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d00c      	beq.n	80073da <I2C_Master_ADD10+0x48>
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d007      	beq.n	80073da <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	685a      	ldr	r2, [r3, #4]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80073d8:	605a      	str	r2, [r3, #4]
  }
}
 80073da:	bf00      	nop
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80073e6:	b480      	push	{r7}
 80073e8:	b091      	sub	sp, #68	; 0x44
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073fc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007402:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740a:	b2db      	uxtb	r3, r3
 800740c:	2b22      	cmp	r3, #34	; 0x22
 800740e:	f040 8169 	bne.w	80076e4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007416:	2b00      	cmp	r3, #0
 8007418:	d10f      	bne.n	800743a <I2C_Master_ADDR+0x54>
 800741a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d10b      	bne.n	800743a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007422:	2300      	movs	r3, #0
 8007424:	633b      	str	r3, [r7, #48]	; 0x30
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	695b      	ldr	r3, [r3, #20]
 800742c:	633b      	str	r3, [r7, #48]	; 0x30
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	633b      	str	r3, [r7, #48]	; 0x30
 8007436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007438:	e160      	b.n	80076fc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800743e:	2b00      	cmp	r3, #0
 8007440:	d11d      	bne.n	800747e <I2C_Master_ADDR+0x98>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	691b      	ldr	r3, [r3, #16]
 8007446:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800744a:	d118      	bne.n	800747e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800744c:	2300      	movs	r3, #0
 800744e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	695b      	ldr	r3, [r3, #20]
 8007456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	699b      	ldr	r3, [r3, #24]
 800745e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007460:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681a      	ldr	r2, [r3, #0]
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007470:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007476:	1c5a      	adds	r2, r3, #1
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	651a      	str	r2, [r3, #80]	; 0x50
 800747c:	e13e      	b.n	80076fc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007482:	b29b      	uxth	r3, r3
 8007484:	2b00      	cmp	r3, #0
 8007486:	d113      	bne.n	80074b0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007488:	2300      	movs	r3, #0
 800748a:	62bb      	str	r3, [r7, #40]	; 0x28
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	695b      	ldr	r3, [r3, #20]
 8007492:	62bb      	str	r3, [r7, #40]	; 0x28
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	62bb      	str	r3, [r7, #40]	; 0x28
 800749c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074ac:	601a      	str	r2, [r3, #0]
 80074ae:	e115      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	f040 808a 	bne.w	80075d0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80074bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074be:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80074c2:	d137      	bne.n	8007534 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074d2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	685b      	ldr	r3, [r3, #4]
 80074da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074e2:	d113      	bne.n	800750c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	681a      	ldr	r2, [r3, #0]
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80074f2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80074f4:	2300      	movs	r3, #0
 80074f6:	627b      	str	r3, [r7, #36]	; 0x24
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	695b      	ldr	r3, [r3, #20]
 80074fe:	627b      	str	r3, [r7, #36]	; 0x24
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	699b      	ldr	r3, [r3, #24]
 8007506:	627b      	str	r3, [r7, #36]	; 0x24
 8007508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750a:	e0e7      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800750c:	2300      	movs	r3, #0
 800750e:	623b      	str	r3, [r7, #32]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	695b      	ldr	r3, [r3, #20]
 8007516:	623b      	str	r3, [r7, #32]
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	699b      	ldr	r3, [r3, #24]
 800751e:	623b      	str	r3, [r7, #32]
 8007520:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007530:	601a      	str	r2, [r3, #0]
 8007532:	e0d3      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007536:	2b08      	cmp	r3, #8
 8007538:	d02e      	beq.n	8007598 <I2C_Master_ADDR+0x1b2>
 800753a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800753c:	2b20      	cmp	r3, #32
 800753e:	d02b      	beq.n	8007598 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007540:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007542:	2b12      	cmp	r3, #18
 8007544:	d102      	bne.n	800754c <I2C_Master_ADDR+0x166>
 8007546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007548:	2b01      	cmp	r3, #1
 800754a:	d125      	bne.n	8007598 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800754c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800754e:	2b04      	cmp	r3, #4
 8007550:	d00e      	beq.n	8007570 <I2C_Master_ADDR+0x18a>
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	2b02      	cmp	r3, #2
 8007556:	d00b      	beq.n	8007570 <I2C_Master_ADDR+0x18a>
 8007558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800755a:	2b10      	cmp	r3, #16
 800755c:	d008      	beq.n	8007570 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	681a      	ldr	r2, [r3, #0]
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800756c:	601a      	str	r2, [r3, #0]
 800756e:	e007      	b.n	8007580 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800757e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007580:	2300      	movs	r3, #0
 8007582:	61fb      	str	r3, [r7, #28]
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	695b      	ldr	r3, [r3, #20]
 800758a:	61fb      	str	r3, [r7, #28]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	699b      	ldr	r3, [r3, #24]
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	69fb      	ldr	r3, [r7, #28]
 8007596:	e0a1      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075a6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80075a8:	2300      	movs	r3, #0
 80075aa:	61bb      	str	r3, [r7, #24]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	695b      	ldr	r3, [r3, #20]
 80075b2:	61bb      	str	r3, [r7, #24]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	699b      	ldr	r3, [r3, #24]
 80075ba:	61bb      	str	r3, [r7, #24]
 80075bc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	681a      	ldr	r2, [r3, #0]
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075cc:	601a      	str	r2, [r3, #0]
 80075ce:	e085      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075d4:	b29b      	uxth	r3, r3
 80075d6:	2b02      	cmp	r3, #2
 80075d8:	d14d      	bne.n	8007676 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80075da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075dc:	2b04      	cmp	r3, #4
 80075de:	d016      	beq.n	800760e <I2C_Master_ADDR+0x228>
 80075e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d013      	beq.n	800760e <I2C_Master_ADDR+0x228>
 80075e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075e8:	2b10      	cmp	r3, #16
 80075ea:	d010      	beq.n	800760e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681a      	ldr	r2, [r3, #0]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80075fa:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800760a:	601a      	str	r2, [r3, #0]
 800760c:	e007      	b.n	800761e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800761c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007628:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800762c:	d117      	bne.n	800765e <I2C_Master_ADDR+0x278>
 800762e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007630:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007634:	d00b      	beq.n	800764e <I2C_Master_ADDR+0x268>
 8007636:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007638:	2b01      	cmp	r3, #1
 800763a:	d008      	beq.n	800764e <I2C_Master_ADDR+0x268>
 800763c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763e:	2b08      	cmp	r3, #8
 8007640:	d005      	beq.n	800764e <I2C_Master_ADDR+0x268>
 8007642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007644:	2b10      	cmp	r3, #16
 8007646:	d002      	beq.n	800764e <I2C_Master_ADDR+0x268>
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	2b20      	cmp	r3, #32
 800764c:	d107      	bne.n	800765e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	685a      	ldr	r2, [r3, #4]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800765c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800765e:	2300      	movs	r3, #0
 8007660:	617b      	str	r3, [r7, #20]
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695b      	ldr	r3, [r3, #20]
 8007668:	617b      	str	r3, [r7, #20]
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	699b      	ldr	r3, [r3, #24]
 8007670:	617b      	str	r3, [r7, #20]
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	e032      	b.n	80076dc <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007684:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007690:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007694:	d117      	bne.n	80076c6 <I2C_Master_ADDR+0x2e0>
 8007696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007698:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800769c:	d00b      	beq.n	80076b6 <I2C_Master_ADDR+0x2d0>
 800769e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a0:	2b01      	cmp	r3, #1
 80076a2:	d008      	beq.n	80076b6 <I2C_Master_ADDR+0x2d0>
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	2b08      	cmp	r3, #8
 80076a8:	d005      	beq.n	80076b6 <I2C_Master_ADDR+0x2d0>
 80076aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076ac:	2b10      	cmp	r3, #16
 80076ae:	d002      	beq.n	80076b6 <I2C_Master_ADDR+0x2d0>
 80076b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076b2:	2b20      	cmp	r3, #32
 80076b4:	d107      	bne.n	80076c6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	685a      	ldr	r2, [r3, #4]
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80076c4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076c6:	2300      	movs	r3, #0
 80076c8:	613b      	str	r3, [r7, #16]
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	695b      	ldr	r3, [r3, #20]
 80076d0:	613b      	str	r3, [r7, #16]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	613b      	str	r3, [r7, #16]
 80076da:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80076e2:	e00b      	b.n	80076fc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80076e4:	2300      	movs	r3, #0
 80076e6:	60fb      	str	r3, [r7, #12]
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	695b      	ldr	r3, [r3, #20]
 80076ee:	60fb      	str	r3, [r7, #12]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	699b      	ldr	r3, [r3, #24]
 80076f6:	60fb      	str	r3, [r7, #12]
 80076f8:	68fb      	ldr	r3, [r7, #12]
}
 80076fa:	e7ff      	b.n	80076fc <I2C_Master_ADDR+0x316>
 80076fc:	bf00      	nop
 80076fe:	3744      	adds	r7, #68	; 0x44
 8007700:	46bd      	mov	sp, r7
 8007702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007706:	4770      	bx	lr

08007708 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007716:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29b      	uxth	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d02b      	beq.n	800777a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007726:	781a      	ldrb	r2, [r3, #0]
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007732:	1c5a      	adds	r2, r3, #1
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	3b01      	subs	r3, #1
 8007740:	b29a      	uxth	r2, r3
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800774a:	b29b      	uxth	r3, r3
 800774c:	2b00      	cmp	r3, #0
 800774e:	d114      	bne.n	800777a <I2C_SlaveTransmit_TXE+0x72>
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b29      	cmp	r3, #41	; 0x29
 8007754:	d111      	bne.n	800777a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007764:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2221      	movs	r2, #33	; 0x21
 800776a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2228      	movs	r2, #40	; 0x28
 8007770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff f9e7 	bl	8006b48 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007782:	b480      	push	{r7}
 8007784:	b083      	sub	sp, #12
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800778e:	b29b      	uxth	r3, r3
 8007790:	2b00      	cmp	r3, #0
 8007792:	d011      	beq.n	80077b8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007798:	781a      	ldrb	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077a4:	1c5a      	adds	r2, r3, #1
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077ae:	b29b      	uxth	r3, r3
 80077b0:	3b01      	subs	r3, #1
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80077b8:	bf00      	nop
 80077ba:	370c      	adds	r7, #12
 80077bc:	46bd      	mov	sp, r7
 80077be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c2:	4770      	bx	lr

080077c4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b084      	sub	sp, #16
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d8:	b29b      	uxth	r3, r3
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d02c      	beq.n	8007838 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	691a      	ldr	r2, [r3, #16]
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077e8:	b2d2      	uxtb	r2, r2
 80077ea:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f0:	1c5a      	adds	r2, r3, #1
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fa:	b29b      	uxth	r3, r3
 80077fc:	3b01      	subs	r3, #1
 80077fe:	b29a      	uxth	r2, r3
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007808:	b29b      	uxth	r3, r3
 800780a:	2b00      	cmp	r3, #0
 800780c:	d114      	bne.n	8007838 <I2C_SlaveReceive_RXNE+0x74>
 800780e:	7bfb      	ldrb	r3, [r7, #15]
 8007810:	2b2a      	cmp	r3, #42	; 0x2a
 8007812:	d111      	bne.n	8007838 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007822:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2222      	movs	r2, #34	; 0x22
 8007828:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2228      	movs	r2, #40	; 0x28
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff f992 	bl	8006b5c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007838:	bf00      	nop
 800783a:	3710      	adds	r7, #16
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007840:	b480      	push	{r7}
 8007842:	b083      	sub	sp, #12
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800784c:	b29b      	uxth	r3, r3
 800784e:	2b00      	cmp	r3, #0
 8007850:	d012      	beq.n	8007878 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	691a      	ldr	r2, [r3, #16]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785c:	b2d2      	uxtb	r2, r2
 800785e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786e:	b29b      	uxth	r3, r3
 8007870:	3b01      	subs	r3, #1
 8007872:	b29a      	uxth	r2, r3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007878:	bf00      	nop
 800787a:	370c      	adds	r7, #12
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr

08007884 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
 800788c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800788e:	2300      	movs	r3, #0
 8007890:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007898:	b2db      	uxtb	r3, r3
 800789a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800789e:	2b28      	cmp	r3, #40	; 0x28
 80078a0:	d127      	bne.n	80078f2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	685a      	ldr	r2, [r3, #4]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078b0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80078b2:	683b      	ldr	r3, [r7, #0]
 80078b4:	089b      	lsrs	r3, r3, #2
 80078b6:	f003 0301 	and.w	r3, r3, #1
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80078be:	2301      	movs	r3, #1
 80078c0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	09db      	lsrs	r3, r3, #7
 80078c6:	f003 0301 	and.w	r3, r3, #1
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d103      	bne.n	80078d6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	68db      	ldr	r3, [r3, #12]
 80078d2:	81bb      	strh	r3, [r7, #12]
 80078d4:	e002      	b.n	80078dc <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	699b      	ldr	r3, [r3, #24]
 80078da:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2200      	movs	r2, #0
 80078e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80078e4:	89ba      	ldrh	r2, [r7, #12]
 80078e6:	7bfb      	ldrb	r3, [r7, #15]
 80078e8:	4619      	mov	r1, r3
 80078ea:	6878      	ldr	r0, [r7, #4]
 80078ec:	f7ff f940 	bl	8006b70 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80078f0:	e00e      	b.n	8007910 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80078f2:	2300      	movs	r3, #0
 80078f4:	60bb      	str	r3, [r7, #8]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695b      	ldr	r3, [r3, #20]
 80078fc:	60bb      	str	r3, [r7, #8]
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	699b      	ldr	r3, [r3, #24]
 8007904:	60bb      	str	r3, [r7, #8]
 8007906:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007910:	bf00      	nop
 8007912:	3710      	adds	r7, #16
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007926:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007936:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8007938:	2300      	movs	r3, #0
 800793a:	60bb      	str	r3, [r7, #8]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	695b      	ldr	r3, [r3, #20]
 8007942:	60bb      	str	r3, [r7, #8]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f042 0201 	orr.w	r2, r2, #1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	681a      	ldr	r2, [r3, #0]
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007964:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007970:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007974:	d172      	bne.n	8007a5c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007976:	7bfb      	ldrb	r3, [r7, #15]
 8007978:	2b22      	cmp	r3, #34	; 0x22
 800797a:	d002      	beq.n	8007982 <I2C_Slave_STOPF+0x6a>
 800797c:	7bfb      	ldrb	r3, [r7, #15]
 800797e:	2b2a      	cmp	r3, #42	; 0x2a
 8007980:	d135      	bne.n	80079ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	685b      	ldr	r3, [r3, #4]
 800798a:	b29a      	uxth	r2, r3
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007994:	b29b      	uxth	r3, r3
 8007996:	2b00      	cmp	r3, #0
 8007998:	d005      	beq.n	80079a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	f043 0204 	orr.w	r2, r3, #4
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80079b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ba:	4618      	mov	r0, r3
 80079bc:	f7fd ff68 	bl	8005890 <HAL_DMA_GetState>
 80079c0:	4603      	mov	r3, r0
 80079c2:	2b01      	cmp	r3, #1
 80079c4:	d049      	beq.n	8007a5a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ca:	4a69      	ldr	r2, [pc, #420]	; (8007b70 <I2C_Slave_STOPF+0x258>)
 80079cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fd fdb0 	bl	8005538 <HAL_DMA_Abort_IT>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d03d      	beq.n	8007a5a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079e4:	687a      	ldr	r2, [r7, #4]
 80079e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80079e8:	4610      	mov	r0, r2
 80079ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80079ec:	e035      	b.n	8007a5a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	b29a      	uxth	r2, r3
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d005      	beq.n	8007a12 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a0a:	f043 0204 	orr.w	r2, r3, #4
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	685a      	ldr	r2, [r3, #4]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007a20:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a26:	4618      	mov	r0, r3
 8007a28:	f7fd ff32 	bl	8005890 <HAL_DMA_GetState>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d014      	beq.n	8007a5c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a36:	4a4e      	ldr	r2, [pc, #312]	; (8007b70 <I2C_Slave_STOPF+0x258>)
 8007a38:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f7fd fd7a 	bl	8005538 <HAL_DMA_Abort_IT>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d008      	beq.n	8007a5c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a50:	687a      	ldr	r2, [r7, #4]
 8007a52:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007a54:	4610      	mov	r0, r2
 8007a56:	4798      	blx	r3
 8007a58:	e000      	b.n	8007a5c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007a5a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a60:	b29b      	uxth	r3, r3
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d03e      	beq.n	8007ae4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695b      	ldr	r3, [r3, #20]
 8007a6c:	f003 0304 	and.w	r3, r3, #4
 8007a70:	2b04      	cmp	r3, #4
 8007a72:	d112      	bne.n	8007a9a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	691a      	ldr	r2, [r3, #16]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7e:	b2d2      	uxtb	r2, r2
 8007a80:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a86:	1c5a      	adds	r2, r3, #1
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a90:	b29b      	uxth	r3, r3
 8007a92:	3b01      	subs	r3, #1
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	695b      	ldr	r3, [r3, #20]
 8007aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007aa4:	2b40      	cmp	r3, #64	; 0x40
 8007aa6:	d112      	bne.n	8007ace <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	691a      	ldr	r2, [r3, #16]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ab2:	b2d2      	uxtb	r2, r2
 8007ab4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aba:	1c5a      	adds	r2, r3, #1
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d005      	beq.n	8007ae4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007adc:	f043 0204 	orr.w	r2, r3, #4
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d003      	beq.n	8007af4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8007aec:	6878      	ldr	r0, [r7, #4]
 8007aee:	f000 f8b3 	bl	8007c58 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8007af2:	e039      	b.n	8007b68 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
 8007af6:	2b2a      	cmp	r3, #42	; 0x2a
 8007af8:	d109      	bne.n	8007b0e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2228      	movs	r2, #40	; 0x28
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b08:	6878      	ldr	r0, [r7, #4]
 8007b0a:	f7ff f827 	bl	8006b5c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b14:	b2db      	uxtb	r3, r3
 8007b16:	2b28      	cmp	r3, #40	; 0x28
 8007b18:	d111      	bne.n	8007b3e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	4a15      	ldr	r2, [pc, #84]	; (8007b74 <I2C_Slave_STOPF+0x25c>)
 8007b1e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2220      	movs	r2, #32
 8007b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f7ff f828 	bl	8006b8c <HAL_I2C_ListenCpltCallback>
}
 8007b3c:	e014      	b.n	8007b68 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b42:	2b22      	cmp	r3, #34	; 0x22
 8007b44:	d002      	beq.n	8007b4c <I2C_Slave_STOPF+0x234>
 8007b46:	7bfb      	ldrb	r3, [r7, #15]
 8007b48:	2b22      	cmp	r3, #34	; 0x22
 8007b4a:	d10d      	bne.n	8007b68 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2200      	movs	r2, #0
 8007b50:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7fe fffa 	bl	8006b5c <HAL_I2C_SlaveRxCpltCallback>
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}
 8007b70:	0800815d 	.word	0x0800815d
 8007b74:	ffff0000 	.word	0xffff0000

08007b78 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b86:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	2b08      	cmp	r3, #8
 8007b92:	d002      	beq.n	8007b9a <I2C_Slave_AF+0x22>
 8007b94:	68bb      	ldr	r3, [r7, #8]
 8007b96:	2b20      	cmp	r3, #32
 8007b98:	d129      	bne.n	8007bee <I2C_Slave_AF+0x76>
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	2b28      	cmp	r3, #40	; 0x28
 8007b9e:	d126      	bne.n	8007bee <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	4a2c      	ldr	r2, [pc, #176]	; (8007c54 <I2C_Slave_AF+0xdc>)
 8007ba4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	685a      	ldr	r2, [r3, #4]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007bb4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007bbe:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bce:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2220      	movs	r2, #32
 8007bda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f7fe ffd0 	bl	8006b8c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8007bec:	e02e      	b.n	8007c4c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007bee:	7bfb      	ldrb	r3, [r7, #15]
 8007bf0:	2b21      	cmp	r3, #33	; 0x21
 8007bf2:	d126      	bne.n	8007c42 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	4a17      	ldr	r2, [pc, #92]	; (8007c54 <I2C_Slave_AF+0xdc>)
 8007bf8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2221      	movs	r2, #33	; 0x21
 8007bfe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685a      	ldr	r2, [r3, #4]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007c1e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c28:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c38:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c3a:	6878      	ldr	r0, [r7, #4]
 8007c3c:	f7fe ff84 	bl	8006b48 <HAL_I2C_SlaveTxCpltCallback>
}
 8007c40:	e004      	b.n	8007c4c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007c4a:	615a      	str	r2, [r3, #20]
}
 8007c4c:	bf00      	nop
 8007c4e:	3710      	adds	r7, #16
 8007c50:	46bd      	mov	sp, r7
 8007c52:	bd80      	pop	{r7, pc}
 8007c54:	ffff0000 	.word	0xffff0000

08007c58 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b084      	sub	sp, #16
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c66:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c6e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8007c70:	7bbb      	ldrb	r3, [r7, #14]
 8007c72:	2b10      	cmp	r3, #16
 8007c74:	d002      	beq.n	8007c7c <I2C_ITError+0x24>
 8007c76:	7bbb      	ldrb	r3, [r7, #14]
 8007c78:	2b40      	cmp	r3, #64	; 0x40
 8007c7a:	d10a      	bne.n	8007c92 <I2C_ITError+0x3a>
 8007c7c:	7bfb      	ldrb	r3, [r7, #15]
 8007c7e:	2b22      	cmp	r3, #34	; 0x22
 8007c80:	d107      	bne.n	8007c92 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c90:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007c92:	7bfb      	ldrb	r3, [r7, #15]
 8007c94:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007c98:	2b28      	cmp	r3, #40	; 0x28
 8007c9a:	d107      	bne.n	8007cac <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2200      	movs	r2, #0
 8007ca0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2228      	movs	r2, #40	; 0x28
 8007ca6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8007caa:	e015      	b.n	8007cd8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cba:	d00a      	beq.n	8007cd2 <I2C_ITError+0x7a>
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b60      	cmp	r3, #96	; 0x60
 8007cc0:	d007      	beq.n	8007cd2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2220      	movs	r2, #32
 8007cc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2200      	movs	r2, #0
 8007cce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	685b      	ldr	r3, [r3, #4]
 8007cde:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ce2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ce6:	d162      	bne.n	8007dae <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685a      	ldr	r2, [r3, #4]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007cf6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007d00:	b2db      	uxtb	r3, r3
 8007d02:	2b01      	cmp	r3, #1
 8007d04:	d020      	beq.n	8007d48 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d0a:	4a6a      	ldr	r2, [pc, #424]	; (8007eb4 <I2C_ITError+0x25c>)
 8007d0c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d12:	4618      	mov	r0, r3
 8007d14:	f7fd fc10 	bl	8005538 <HAL_DMA_Abort_IT>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	f000 8089 	beq.w	8007e32 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	681a      	ldr	r2, [r3, #0]
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0201 	bic.w	r2, r2, #1
 8007d2e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2220      	movs	r2, #32
 8007d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007d42:	4610      	mov	r0, r2
 8007d44:	4798      	blx	r3
 8007d46:	e074      	b.n	8007e32 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d4c:	4a59      	ldr	r2, [pc, #356]	; (8007eb4 <I2C_ITError+0x25c>)
 8007d4e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d54:	4618      	mov	r0, r3
 8007d56:	f7fd fbef 	bl	8005538 <HAL_DMA_Abort_IT>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d068      	beq.n	8007e32 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	695b      	ldr	r3, [r3, #20]
 8007d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6a:	2b40      	cmp	r3, #64	; 0x40
 8007d6c:	d10b      	bne.n	8007d86 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	691a      	ldr	r2, [r3, #16]
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d78:	b2d2      	uxtb	r2, r2
 8007d7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f022 0201 	bic.w	r2, r2, #1
 8007d94:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	2220      	movs	r2, #32
 8007d9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007da2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007da4:	687a      	ldr	r2, [r7, #4]
 8007da6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007da8:	4610      	mov	r0, r2
 8007daa:	4798      	blx	r3
 8007dac:	e041      	b.n	8007e32 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007db4:	b2db      	uxtb	r3, r3
 8007db6:	2b60      	cmp	r3, #96	; 0x60
 8007db8:	d125      	bne.n	8007e06 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	2220      	movs	r2, #32
 8007dbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2200      	movs	r2, #0
 8007dc6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b40      	cmp	r3, #64	; 0x40
 8007dd4:	d10b      	bne.n	8007dee <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	691a      	ldr	r2, [r3, #16]
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007de8:	1c5a      	adds	r2, r3, #1
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	681a      	ldr	r2, [r3, #0]
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	f022 0201 	bic.w	r2, r2, #1
 8007dfc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f7fe feec 	bl	8006bdc <HAL_I2C_AbortCpltCallback>
 8007e04:	e015      	b.n	8007e32 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	695b      	ldr	r3, [r3, #20]
 8007e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e10:	2b40      	cmp	r3, #64	; 0x40
 8007e12:	d10b      	bne.n	8007e2c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	691a      	ldr	r2, [r3, #16]
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e1e:	b2d2      	uxtb	r2, r2
 8007e20:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e26:	1c5a      	adds	r2, r3, #1
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f7fe fecb 	bl	8006bc8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e36:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	f003 0301 	and.w	r3, r3, #1
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10e      	bne.n	8007e60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e42:	68bb      	ldr	r3, [r7, #8]
 8007e44:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d109      	bne.n	8007e60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e4c:	68bb      	ldr	r3, [r7, #8]
 8007e4e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d104      	bne.n	8007e60 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d007      	beq.n	8007e70 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	685a      	ldr	r2, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007e6e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e76:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e7c:	f003 0304 	and.w	r3, r3, #4
 8007e80:	2b04      	cmp	r3, #4
 8007e82:	d113      	bne.n	8007eac <I2C_ITError+0x254>
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	2b28      	cmp	r3, #40	; 0x28
 8007e88:	d110      	bne.n	8007eac <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a0a      	ldr	r2, [pc, #40]	; (8007eb8 <I2C_ITError+0x260>)
 8007e8e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	2200      	movs	r2, #0
 8007e94:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f7fe fe70 	bl	8006b8c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007eac:	bf00      	nop
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}
 8007eb4:	0800815d 	.word	0x0800815d
 8007eb8:	ffff0000 	.word	0xffff0000

08007ebc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007ebc:	b580      	push	{r7, lr}
 8007ebe:	b088      	sub	sp, #32
 8007ec0:	af02      	add	r7, sp, #8
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	607a      	str	r2, [r7, #4]
 8007ec6:	603b      	str	r3, [r7, #0]
 8007ec8:	460b      	mov	r3, r1
 8007eca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ed0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	2b08      	cmp	r3, #8
 8007ed6:	d006      	beq.n	8007ee6 <I2C_MasterRequestWrite+0x2a>
 8007ed8:	697b      	ldr	r3, [r7, #20]
 8007eda:	2b01      	cmp	r3, #1
 8007edc:	d003      	beq.n	8007ee6 <I2C_MasterRequestWrite+0x2a>
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ee4:	d108      	bne.n	8007ef8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	681a      	ldr	r2, [r3, #0]
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	681b      	ldr	r3, [r3, #0]
 8007ef0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007ef4:	601a      	str	r2, [r3, #0]
 8007ef6:	e00b      	b.n	8007f10 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007efc:	2b12      	cmp	r3, #18
 8007efe:	d107      	bne.n	8007f10 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	681a      	ldr	r2, [r3, #0]
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f0e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8007f1c:	68f8      	ldr	r0, [r7, #12]
 8007f1e:	f000 f9c5 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 8007f22:	4603      	mov	r3, r0
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d00d      	beq.n	8007f44 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007f36:	d103      	bne.n	8007f40 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007f3e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8007f40:	2303      	movs	r3, #3
 8007f42:	e035      	b.n	8007fb0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007f4c:	d108      	bne.n	8007f60 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8007f4e:	897b      	ldrh	r3, [r7, #10]
 8007f50:	b2db      	uxtb	r3, r3
 8007f52:	461a      	mov	r2, r3
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007f5c:	611a      	str	r2, [r3, #16]
 8007f5e:	e01b      	b.n	8007f98 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8007f60:	897b      	ldrh	r3, [r7, #10]
 8007f62:	11db      	asrs	r3, r3, #7
 8007f64:	b2db      	uxtb	r3, r3
 8007f66:	f003 0306 	and.w	r3, r3, #6
 8007f6a:	b2db      	uxtb	r3, r3
 8007f6c:	f063 030f 	orn	r3, r3, #15
 8007f70:	b2da      	uxtb	r2, r3
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	687a      	ldr	r2, [r7, #4]
 8007f7c:	490e      	ldr	r1, [pc, #56]	; (8007fb8 <I2C_MasterRequestWrite+0xfc>)
 8007f7e:	68f8      	ldr	r0, [r7, #12]
 8007f80:	f000 f9eb 	bl	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007f84:	4603      	mov	r3, r0
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e010      	b.n	8007fb0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8007f8e:	897b      	ldrh	r3, [r7, #10]
 8007f90:	b2da      	uxtb	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	687a      	ldr	r2, [r7, #4]
 8007f9c:	4907      	ldr	r1, [pc, #28]	; (8007fbc <I2C_MasterRequestWrite+0x100>)
 8007f9e:	68f8      	ldr	r0, [r7, #12]
 8007fa0:	f000 f9db 	bl	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007fa4:	4603      	mov	r3, r0
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d001      	beq.n	8007fae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8007faa:	2301      	movs	r3, #1
 8007fac:	e000      	b.n	8007fb0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8007fae:	2300      	movs	r3, #0
}
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}
 8007fb8:	00010008 	.word	0x00010008
 8007fbc:	00010002 	.word	0x00010002

08007fc0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8007fc0:	b580      	push	{r7, lr}
 8007fc2:	b088      	sub	sp, #32
 8007fc4:	af02      	add	r7, sp, #8
 8007fc6:	60f8      	str	r0, [r7, #12]
 8007fc8:	607a      	str	r2, [r7, #4]
 8007fca:	603b      	str	r3, [r7, #0]
 8007fcc:	460b      	mov	r3, r1
 8007fce:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fd4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007fe4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8007fe6:	697b      	ldr	r3, [r7, #20]
 8007fe8:	2b08      	cmp	r3, #8
 8007fea:	d006      	beq.n	8007ffa <I2C_MasterRequestRead+0x3a>
 8007fec:	697b      	ldr	r3, [r7, #20]
 8007fee:	2b01      	cmp	r3, #1
 8007ff0:	d003      	beq.n	8007ffa <I2C_MasterRequestRead+0x3a>
 8007ff2:	697b      	ldr	r3, [r7, #20]
 8007ff4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007ff8:	d108      	bne.n	800800c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	681a      	ldr	r2, [r3, #0]
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008008:	601a      	str	r2, [r3, #0]
 800800a:	e00b      	b.n	8008024 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008010:	2b11      	cmp	r3, #17
 8008012:	d107      	bne.n	8008024 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008022:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	9300      	str	r3, [sp, #0]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008030:	68f8      	ldr	r0, [r7, #12]
 8008032:	f000 f93b 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 8008036:	4603      	mov	r3, r0
 8008038:	2b00      	cmp	r3, #0
 800803a:	d00d      	beq.n	8008058 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008046:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800804a:	d103      	bne.n	8008054 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008052:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008054:	2303      	movs	r3, #3
 8008056:	e079      	b.n	800814c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	691b      	ldr	r3, [r3, #16]
 800805c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008060:	d108      	bne.n	8008074 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8008062:	897b      	ldrh	r3, [r7, #10]
 8008064:	b2db      	uxtb	r3, r3
 8008066:	f043 0301 	orr.w	r3, r3, #1
 800806a:	b2da      	uxtb	r2, r3
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	611a      	str	r2, [r3, #16]
 8008072:	e05f      	b.n	8008134 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008074:	897b      	ldrh	r3, [r7, #10]
 8008076:	11db      	asrs	r3, r3, #7
 8008078:	b2db      	uxtb	r3, r3
 800807a:	f003 0306 	and.w	r3, r3, #6
 800807e:	b2db      	uxtb	r3, r3
 8008080:	f063 030f 	orn	r3, r3, #15
 8008084:	b2da      	uxtb	r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800808c:	683b      	ldr	r3, [r7, #0]
 800808e:	687a      	ldr	r2, [r7, #4]
 8008090:	4930      	ldr	r1, [pc, #192]	; (8008154 <I2C_MasterRequestRead+0x194>)
 8008092:	68f8      	ldr	r0, [r7, #12]
 8008094:	f000 f961 	bl	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008098:	4603      	mov	r3, r0
 800809a:	2b00      	cmp	r3, #0
 800809c:	d001      	beq.n	80080a2 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800809e:	2301      	movs	r3, #1
 80080a0:	e054      	b.n	800814c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80080a2:	897b      	ldrh	r3, [r7, #10]
 80080a4:	b2da      	uxtb	r2, r3
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80080ac:	683b      	ldr	r3, [r7, #0]
 80080ae:	687a      	ldr	r2, [r7, #4]
 80080b0:	4929      	ldr	r1, [pc, #164]	; (8008158 <I2C_MasterRequestRead+0x198>)
 80080b2:	68f8      	ldr	r0, [r7, #12]
 80080b4:	f000 f951 	bl	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80080b8:	4603      	mov	r3, r0
 80080ba:	2b00      	cmp	r3, #0
 80080bc:	d001      	beq.n	80080c2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e044      	b.n	800814c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080c2:	2300      	movs	r3, #0
 80080c4:	613b      	str	r3, [r7, #16]
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	695b      	ldr	r3, [r3, #20]
 80080cc:	613b      	str	r3, [r7, #16]
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	699b      	ldr	r3, [r3, #24]
 80080d4:	613b      	str	r3, [r7, #16]
 80080d6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681a      	ldr	r2, [r3, #0]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80080e6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80080e8:	683b      	ldr	r3, [r7, #0]
 80080ea:	9300      	str	r3, [sp, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2200      	movs	r2, #0
 80080f0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80080f4:	68f8      	ldr	r0, [r7, #12]
 80080f6:	f000 f8d9 	bl	80082ac <I2C_WaitOnFlagUntilTimeout>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d00d      	beq.n	800811c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800810a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800810e:	d103      	bne.n	8008118 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008116:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8008118:	2303      	movs	r3, #3
 800811a:	e017      	b.n	800814c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800811c:	897b      	ldrh	r3, [r7, #10]
 800811e:	11db      	asrs	r3, r3, #7
 8008120:	b2db      	uxtb	r3, r3
 8008122:	f003 0306 	and.w	r3, r3, #6
 8008126:	b2db      	uxtb	r3, r3
 8008128:	f063 030e 	orn	r3, r3, #14
 800812c:	b2da      	uxtb	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	687a      	ldr	r2, [r7, #4]
 8008138:	4907      	ldr	r1, [pc, #28]	; (8008158 <I2C_MasterRequestRead+0x198>)
 800813a:	68f8      	ldr	r0, [r7, #12]
 800813c:	f000 f90d 	bl	800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008140:	4603      	mov	r3, r0
 8008142:	2b00      	cmp	r3, #0
 8008144:	d001      	beq.n	800814a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	e000      	b.n	800814c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800814a:	2300      	movs	r3, #0
}
 800814c:	4618      	mov	r0, r3
 800814e:	3718      	adds	r7, #24
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	00010008 	.word	0x00010008
 8008158:	00010002 	.word	0x00010002

0800815c <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800815c:	b580      	push	{r7, lr}
 800815e:	b086      	sub	sp, #24
 8008160:	af00      	add	r7, sp, #0
 8008162:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800816e:	697b      	ldr	r3, [r7, #20]
 8008170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008174:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008176:	4b4b      	ldr	r3, [pc, #300]	; (80082a4 <I2C_DMAAbort+0x148>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	08db      	lsrs	r3, r3, #3
 800817c:	4a4a      	ldr	r2, [pc, #296]	; (80082a8 <I2C_DMAAbort+0x14c>)
 800817e:	fba2 2303 	umull	r2, r3, r2, r3
 8008182:	0a1a      	lsrs	r2, r3, #8
 8008184:	4613      	mov	r3, r2
 8008186:	009b      	lsls	r3, r3, #2
 8008188:	4413      	add	r3, r2
 800818a:	00da      	lsls	r2, r3, #3
 800818c:	1ad3      	subs	r3, r2, r3
 800818e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d106      	bne.n	80081a4 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800819a:	f043 0220 	orr.w	r2, r3, #32
 800819e:	697b      	ldr	r3, [r7, #20]
 80081a0:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80081a2:	e00a      	b.n	80081ba <I2C_DMAAbort+0x5e>
    }
    count--;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	3b01      	subs	r3, #1
 80081a8:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80081b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80081b8:	d0ea      	beq.n	8008190 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d003      	beq.n	80081ca <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c6:	2200      	movs	r2, #0
 80081c8:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80081ca:	697b      	ldr	r3, [r7, #20]
 80081cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d003      	beq.n	80081da <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081d6:	2200      	movs	r2, #0
 80081d8:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80081da:	697b      	ldr	r3, [r7, #20]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	681a      	ldr	r2, [r3, #0]
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80081e8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	2200      	movs	r2, #0
 80081ee:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 80081f0:	697b      	ldr	r3, [r7, #20]
 80081f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d003      	beq.n	8008200 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80081f8:	697b      	ldr	r3, [r7, #20]
 80081fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081fc:	2200      	movs	r2, #0
 80081fe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008204:	2b00      	cmp	r3, #0
 8008206:	d003      	beq.n	8008210 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008208:	697b      	ldr	r3, [r7, #20]
 800820a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800820c:	2200      	movs	r2, #0
 800820e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	697b      	ldr	r3, [r7, #20]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	f022 0201 	bic.w	r2, r2, #1
 800821e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008220:	697b      	ldr	r3, [r7, #20]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	b2db      	uxtb	r3, r3
 8008228:	2b60      	cmp	r3, #96	; 0x60
 800822a:	d10e      	bne.n	800824a <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800822c:	697b      	ldr	r3, [r7, #20]
 800822e:	2220      	movs	r2, #32
 8008230:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008234:	697b      	ldr	r3, [r7, #20]
 8008236:	2200      	movs	r2, #0
 8008238:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800823c:	697b      	ldr	r3, [r7, #20]
 800823e:	2200      	movs	r2, #0
 8008240:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008242:	6978      	ldr	r0, [r7, #20]
 8008244:	f7fe fcca 	bl	8006bdc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008248:	e027      	b.n	800829a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800824a:	7cfb      	ldrb	r3, [r7, #19]
 800824c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008250:	2b28      	cmp	r3, #40	; 0x28
 8008252:	d117      	bne.n	8008284 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008254:	697b      	ldr	r3, [r7, #20]
 8008256:	681b      	ldr	r3, [r3, #0]
 8008258:	681a      	ldr	r2, [r3, #0]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	f042 0201 	orr.w	r2, r2, #1
 8008262:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008264:	697b      	ldr	r3, [r7, #20]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	697b      	ldr	r3, [r7, #20]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008272:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008274:	697b      	ldr	r3, [r7, #20]
 8008276:	2200      	movs	r2, #0
 8008278:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800827a:	697b      	ldr	r3, [r7, #20]
 800827c:	2228      	movs	r2, #40	; 0x28
 800827e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008282:	e007      	b.n	8008294 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008284:	697b      	ldr	r3, [r7, #20]
 8008286:	2220      	movs	r2, #32
 8008288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	2200      	movs	r2, #0
 8008290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008294:	6978      	ldr	r0, [r7, #20]
 8008296:	f7fe fc97 	bl	8006bc8 <HAL_I2C_ErrorCallback>
}
 800829a:	bf00      	nop
 800829c:	3718      	adds	r7, #24
 800829e:	46bd      	mov	sp, r7
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	bf00      	nop
 80082a4:	20000240 	.word	0x20000240
 80082a8:	14f8b589 	.word	0x14f8b589

080082ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	603b      	str	r3, [r7, #0]
 80082b8:	4613      	mov	r3, r2
 80082ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80082bc:	e025      	b.n	800830a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082c4:	d021      	beq.n	800830a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082c6:	f7fc fa7d 	bl	80047c4 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	69bb      	ldr	r3, [r7, #24]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	683a      	ldr	r2, [r7, #0]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d302      	bcc.n	80082dc <I2C_WaitOnFlagUntilTimeout+0x30>
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	2b00      	cmp	r3, #0
 80082da:	d116      	bne.n	800830a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	2220      	movs	r2, #32
 80082e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	2200      	movs	r2, #0
 80082ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082f6:	f043 0220 	orr.w	r2, r3, #32
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008306:	2301      	movs	r3, #1
 8008308:	e023      	b.n	8008352 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	0c1b      	lsrs	r3, r3, #16
 800830e:	b2db      	uxtb	r3, r3
 8008310:	2b01      	cmp	r3, #1
 8008312:	d10d      	bne.n	8008330 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	695b      	ldr	r3, [r3, #20]
 800831a:	43da      	mvns	r2, r3
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	4013      	ands	r3, r2
 8008320:	b29b      	uxth	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	bf0c      	ite	eq
 8008326:	2301      	moveq	r3, #1
 8008328:	2300      	movne	r3, #0
 800832a:	b2db      	uxtb	r3, r3
 800832c:	461a      	mov	r2, r3
 800832e:	e00c      	b.n	800834a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	699b      	ldr	r3, [r3, #24]
 8008336:	43da      	mvns	r2, r3
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	4013      	ands	r3, r2
 800833c:	b29b      	uxth	r3, r3
 800833e:	2b00      	cmp	r3, #0
 8008340:	bf0c      	ite	eq
 8008342:	2301      	moveq	r3, #1
 8008344:	2300      	movne	r3, #0
 8008346:	b2db      	uxtb	r3, r3
 8008348:	461a      	mov	r2, r3
 800834a:	79fb      	ldrb	r3, [r7, #7]
 800834c:	429a      	cmp	r2, r3
 800834e:	d0b6      	beq.n	80082be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008350:	2300      	movs	r3, #0
}
 8008352:	4618      	mov	r0, r3
 8008354:	3710      	adds	r7, #16
 8008356:	46bd      	mov	sp, r7
 8008358:	bd80      	pop	{r7, pc}

0800835a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800835a:	b580      	push	{r7, lr}
 800835c:	b084      	sub	sp, #16
 800835e:	af00      	add	r7, sp, #0
 8008360:	60f8      	str	r0, [r7, #12]
 8008362:	60b9      	str	r1, [r7, #8]
 8008364:	607a      	str	r2, [r7, #4]
 8008366:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008368:	e051      	b.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008374:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008378:	d123      	bne.n	80083c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	681a      	ldr	r2, [r3, #0]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008388:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008392:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008394:	68fb      	ldr	r3, [r7, #12]
 8008396:	2200      	movs	r2, #0
 8008398:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2220      	movs	r2, #32
 800839e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083ae:	f043 0204 	orr.w	r2, r3, #4
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80083be:	2301      	movs	r3, #1
 80083c0:	e046      	b.n	8008450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083c8:	d021      	beq.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80083ca:	f7fc f9fb 	bl	80047c4 <HAL_GetTick>
 80083ce:	4602      	mov	r2, r0
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	1ad3      	subs	r3, r2, r3
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d302      	bcc.n	80083e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d116      	bne.n	800840e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2200      	movs	r2, #0
 80083e4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2220      	movs	r2, #32
 80083ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083fa:	f043 0220 	orr.w	r2, r3, #32
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800840a:	2301      	movs	r3, #1
 800840c:	e020      	b.n	8008450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	0c1b      	lsrs	r3, r3, #16
 8008412:	b2db      	uxtb	r3, r3
 8008414:	2b01      	cmp	r3, #1
 8008416:	d10c      	bne.n	8008432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	43da      	mvns	r2, r3
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	4013      	ands	r3, r2
 8008424:	b29b      	uxth	r3, r3
 8008426:	2b00      	cmp	r3, #0
 8008428:	bf14      	ite	ne
 800842a:	2301      	movne	r3, #1
 800842c:	2300      	moveq	r3, #0
 800842e:	b2db      	uxtb	r3, r3
 8008430:	e00b      	b.n	800844a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	699b      	ldr	r3, [r3, #24]
 8008438:	43da      	mvns	r2, r3
 800843a:	68bb      	ldr	r3, [r7, #8]
 800843c:	4013      	ands	r3, r2
 800843e:	b29b      	uxth	r3, r3
 8008440:	2b00      	cmp	r3, #0
 8008442:	bf14      	ite	ne
 8008444:	2301      	movne	r3, #1
 8008446:	2300      	moveq	r3, #0
 8008448:	b2db      	uxtb	r3, r3
 800844a:	2b00      	cmp	r3, #0
 800844c:	d18d      	bne.n	800836a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	3710      	adds	r7, #16
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b084      	sub	sp, #16
 800845c:	af00      	add	r7, sp, #0
 800845e:	60f8      	str	r0, [r7, #12]
 8008460:	60b9      	str	r1, [r7, #8]
 8008462:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008464:	e02d      	b.n	80084c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008466:	68f8      	ldr	r0, [r7, #12]
 8008468:	f000 f900 	bl	800866c <I2C_IsAcknowledgeFailed>
 800846c:	4603      	mov	r3, r0
 800846e:	2b00      	cmp	r3, #0
 8008470:	d001      	beq.n	8008476 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008472:	2301      	movs	r3, #1
 8008474:	e02d      	b.n	80084d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800847c:	d021      	beq.n	80084c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800847e:	f7fc f9a1 	bl	80047c4 <HAL_GetTick>
 8008482:	4602      	mov	r2, r0
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	1ad3      	subs	r3, r2, r3
 8008488:	68ba      	ldr	r2, [r7, #8]
 800848a:	429a      	cmp	r2, r3
 800848c:	d302      	bcc.n	8008494 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d116      	bne.n	80084c2 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2200      	movs	r2, #0
 8008498:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	2220      	movs	r2, #32
 800849e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	f043 0220 	orr.w	r2, r3, #32
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80084be:	2301      	movs	r3, #1
 80084c0:	e007      	b.n	80084d2 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	695b      	ldr	r3, [r3, #20]
 80084c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084cc:	2b80      	cmp	r3, #128	; 0x80
 80084ce:	d1ca      	bne.n	8008466 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80084d0:	2300      	movs	r3, #0
}
 80084d2:	4618      	mov	r0, r3
 80084d4:	3710      	adds	r7, #16
 80084d6:	46bd      	mov	sp, r7
 80084d8:	bd80      	pop	{r7, pc}

080084da <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80084da:	b580      	push	{r7, lr}
 80084dc:	b084      	sub	sp, #16
 80084de:	af00      	add	r7, sp, #0
 80084e0:	60f8      	str	r0, [r7, #12]
 80084e2:	60b9      	str	r1, [r7, #8]
 80084e4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80084e6:	e02d      	b.n	8008544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80084e8:	68f8      	ldr	r0, [r7, #12]
 80084ea:	f000 f8bf 	bl	800866c <I2C_IsAcknowledgeFailed>
 80084ee:	4603      	mov	r3, r0
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d001      	beq.n	80084f8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	e02d      	b.n	8008554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80084f8:	68bb      	ldr	r3, [r7, #8]
 80084fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084fe:	d021      	beq.n	8008544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008500:	f7fc f960 	bl	80047c4 <HAL_GetTick>
 8008504:	4602      	mov	r2, r0
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	1ad3      	subs	r3, r2, r3
 800850a:	68ba      	ldr	r2, [r7, #8]
 800850c:	429a      	cmp	r2, r3
 800850e:	d302      	bcc.n	8008516 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	2b00      	cmp	r3, #0
 8008514:	d116      	bne.n	8008544 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	2200      	movs	r2, #0
 800851a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	2220      	movs	r2, #32
 8008520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	2200      	movs	r2, #0
 8008528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008530:	f043 0220 	orr.w	r2, r3, #32
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008540:	2301      	movs	r3, #1
 8008542:	e007      	b.n	8008554 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008544:	68fb      	ldr	r3, [r7, #12]
 8008546:	681b      	ldr	r3, [r3, #0]
 8008548:	695b      	ldr	r3, [r3, #20]
 800854a:	f003 0304 	and.w	r3, r3, #4
 800854e:	2b04      	cmp	r3, #4
 8008550:	d1ca      	bne.n	80084e8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3710      	adds	r7, #16
 8008558:	46bd      	mov	sp, r7
 800855a:	bd80      	pop	{r7, pc}

0800855c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008568:	4b13      	ldr	r3, [pc, #76]	; (80085b8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	08db      	lsrs	r3, r3, #3
 800856e:	4a13      	ldr	r2, [pc, #76]	; (80085bc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008570:	fba2 2303 	umull	r2, r3, r2, r3
 8008574:	0a1a      	lsrs	r2, r3, #8
 8008576:	4613      	mov	r3, r2
 8008578:	009b      	lsls	r3, r3, #2
 800857a:	4413      	add	r3, r2
 800857c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	3b01      	subs	r3, #1
 8008582:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d107      	bne.n	800859a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800858e:	f043 0220 	orr.w	r2, r3, #32
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008596:	2301      	movs	r3, #1
 8008598:	e008      	b.n	80085ac <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085a8:	d0e9      	beq.n	800857e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80085aa:	2300      	movs	r3, #0
}
 80085ac:	4618      	mov	r0, r3
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	20000240 	.word	0x20000240
 80085bc:	14f8b589 	.word	0x14f8b589

080085c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b084      	sub	sp, #16
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	60f8      	str	r0, [r7, #12]
 80085c8:	60b9      	str	r1, [r7, #8]
 80085ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80085cc:	e042      	b.n	8008654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	695b      	ldr	r3, [r3, #20]
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b10      	cmp	r3, #16
 80085da:	d119      	bne.n	8008610 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	f06f 0210 	mvn.w	r2, #16
 80085e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	2200      	movs	r2, #0
 80085ea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	2200      	movs	r2, #0
 80085f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2200      	movs	r2, #0
 8008608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800860c:	2301      	movs	r3, #1
 800860e:	e029      	b.n	8008664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008610:	f7fc f8d8 	bl	80047c4 <HAL_GetTick>
 8008614:	4602      	mov	r2, r0
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	1ad3      	subs	r3, r2, r3
 800861a:	68ba      	ldr	r2, [r7, #8]
 800861c:	429a      	cmp	r2, r3
 800861e:	d302      	bcc.n	8008626 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8008620:	68bb      	ldr	r3, [r7, #8]
 8008622:	2b00      	cmp	r3, #0
 8008624:	d116      	bne.n	8008654 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	2200      	movs	r2, #0
 800862a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	2220      	movs	r2, #32
 8008630:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2200      	movs	r2, #0
 8008638:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008640:	f043 0220 	orr.w	r2, r3, #32
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008650:	2301      	movs	r3, #1
 8008652:	e007      	b.n	8008664 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	695b      	ldr	r3, [r3, #20]
 800865a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800865e:	2b40      	cmp	r3, #64	; 0x40
 8008660:	d1b5      	bne.n	80085ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8008662:	2300      	movs	r3, #0
}
 8008664:	4618      	mov	r0, r3
 8008666:	3710      	adds	r7, #16
 8008668:	46bd      	mov	sp, r7
 800866a:	bd80      	pop	{r7, pc}

0800866c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800866c:	b480      	push	{r7}
 800866e:	b083      	sub	sp, #12
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	695b      	ldr	r3, [r3, #20]
 800867a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800867e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008682:	d11b      	bne.n	80086bc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800868c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2220      	movs	r2, #32
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086a8:	f043 0204 	orr.w	r2, r3, #4
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	2200      	movs	r2, #0
 80086b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80086b8:	2301      	movs	r3, #1
 80086ba:	e000      	b.n	80086be <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80086bc:	2300      	movs	r3, #0
}
 80086be:	4618      	mov	r0, r3
 80086c0:	370c      	adds	r7, #12
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr

080086ca <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80086ca:	b480      	push	{r7}
 80086cc:	b083      	sub	sp, #12
 80086ce:	af00      	add	r7, sp, #0
 80086d0:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086d6:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80086da:	d103      	bne.n	80086e4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	2201      	movs	r2, #1
 80086e0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80086e2:	e007      	b.n	80086f4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80086e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80086ec:	d102      	bne.n	80086f4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2208      	movs	r2, #8
 80086f2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80086f4:	bf00      	nop
 80086f6:	370c      	adds	r7, #12
 80086f8:	46bd      	mov	sp, r7
 80086fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086fe:	4770      	bx	lr

08008700 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d101      	bne.n	8008712 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800870e:	2301      	movs	r3, #1
 8008710:	e267      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0301 	and.w	r3, r3, #1
 800871a:	2b00      	cmp	r3, #0
 800871c:	d075      	beq.n	800880a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800871e:	4b88      	ldr	r3, [pc, #544]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008720:	689b      	ldr	r3, [r3, #8]
 8008722:	f003 030c 	and.w	r3, r3, #12
 8008726:	2b04      	cmp	r3, #4
 8008728:	d00c      	beq.n	8008744 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800872a:	4b85      	ldr	r3, [pc, #532]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800872c:	689b      	ldr	r3, [r3, #8]
 800872e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008732:	2b08      	cmp	r3, #8
 8008734:	d112      	bne.n	800875c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008736:	4b82      	ldr	r3, [pc, #520]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008738:	685b      	ldr	r3, [r3, #4]
 800873a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800873e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008742:	d10b      	bne.n	800875c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008744:	4b7e      	ldr	r3, [pc, #504]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800874c:	2b00      	cmp	r3, #0
 800874e:	d05b      	beq.n	8008808 <HAL_RCC_OscConfig+0x108>
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	685b      	ldr	r3, [r3, #4]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d157      	bne.n	8008808 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008758:	2301      	movs	r3, #1
 800875a:	e242      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008764:	d106      	bne.n	8008774 <HAL_RCC_OscConfig+0x74>
 8008766:	4b76      	ldr	r3, [pc, #472]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	4a75      	ldr	r2, [pc, #468]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800876c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008770:	6013      	str	r3, [r2, #0]
 8008772:	e01d      	b.n	80087b0 <HAL_RCC_OscConfig+0xb0>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685b      	ldr	r3, [r3, #4]
 8008778:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800877c:	d10c      	bne.n	8008798 <HAL_RCC_OscConfig+0x98>
 800877e:	4b70      	ldr	r3, [pc, #448]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4a6f      	ldr	r2, [pc, #444]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008784:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008788:	6013      	str	r3, [r2, #0]
 800878a:	4b6d      	ldr	r3, [pc, #436]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	4a6c      	ldr	r2, [pc, #432]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008794:	6013      	str	r3, [r2, #0]
 8008796:	e00b      	b.n	80087b0 <HAL_RCC_OscConfig+0xb0>
 8008798:	4b69      	ldr	r3, [pc, #420]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	4a68      	ldr	r2, [pc, #416]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800879e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087a2:	6013      	str	r3, [r2, #0]
 80087a4:	4b66      	ldr	r3, [pc, #408]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a65      	ldr	r2, [pc, #404]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80087aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	685b      	ldr	r3, [r3, #4]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d013      	beq.n	80087e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087b8:	f7fc f804 	bl	80047c4 <HAL_GetTick>
 80087bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087be:	e008      	b.n	80087d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087c0:	f7fc f800 	bl	80047c4 <HAL_GetTick>
 80087c4:	4602      	mov	r2, r0
 80087c6:	693b      	ldr	r3, [r7, #16]
 80087c8:	1ad3      	subs	r3, r2, r3
 80087ca:	2b64      	cmp	r3, #100	; 0x64
 80087cc:	d901      	bls.n	80087d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e207      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087d2:	4b5b      	ldr	r3, [pc, #364]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d0f0      	beq.n	80087c0 <HAL_RCC_OscConfig+0xc0>
 80087de:	e014      	b.n	800880a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80087e0:	f7fb fff0 	bl	80047c4 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80087e8:	f7fb ffec 	bl	80047c4 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b64      	cmp	r3, #100	; 0x64
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e1f3      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80087fa:	4b51      	ldr	r3, [pc, #324]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d1f0      	bne.n	80087e8 <HAL_RCC_OscConfig+0xe8>
 8008806:	e000      	b.n	800880a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008808:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	f003 0302 	and.w	r3, r3, #2
 8008812:	2b00      	cmp	r3, #0
 8008814:	d063      	beq.n	80088de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008816:	4b4a      	ldr	r3, [pc, #296]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008818:	689b      	ldr	r3, [r3, #8]
 800881a:	f003 030c 	and.w	r3, r3, #12
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00b      	beq.n	800883a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008822:	4b47      	ldr	r3, [pc, #284]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008824:	689b      	ldr	r3, [r3, #8]
 8008826:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800882a:	2b08      	cmp	r3, #8
 800882c:	d11c      	bne.n	8008868 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800882e:	4b44      	ldr	r3, [pc, #272]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008830:	685b      	ldr	r3, [r3, #4]
 8008832:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008836:	2b00      	cmp	r3, #0
 8008838:	d116      	bne.n	8008868 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800883a:	4b41      	ldr	r3, [pc, #260]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	f003 0302 	and.w	r3, r3, #2
 8008842:	2b00      	cmp	r3, #0
 8008844:	d005      	beq.n	8008852 <HAL_RCC_OscConfig+0x152>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	68db      	ldr	r3, [r3, #12]
 800884a:	2b01      	cmp	r3, #1
 800884c:	d001      	beq.n	8008852 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800884e:	2301      	movs	r3, #1
 8008850:	e1c7      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008852:	4b3b      	ldr	r3, [pc, #236]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	691b      	ldr	r3, [r3, #16]
 800885e:	00db      	lsls	r3, r3, #3
 8008860:	4937      	ldr	r1, [pc, #220]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008862:	4313      	orrs	r3, r2
 8008864:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008866:	e03a      	b.n	80088de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	68db      	ldr	r3, [r3, #12]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d020      	beq.n	80088b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008870:	4b34      	ldr	r3, [pc, #208]	; (8008944 <HAL_RCC_OscConfig+0x244>)
 8008872:	2201      	movs	r2, #1
 8008874:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008876:	f7fb ffa5 	bl	80047c4 <HAL_GetTick>
 800887a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800887c:	e008      	b.n	8008890 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800887e:	f7fb ffa1 	bl	80047c4 <HAL_GetTick>
 8008882:	4602      	mov	r2, r0
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	1ad3      	subs	r3, r2, r3
 8008888:	2b02      	cmp	r3, #2
 800888a:	d901      	bls.n	8008890 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800888c:	2303      	movs	r3, #3
 800888e:	e1a8      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008890:	4b2b      	ldr	r3, [pc, #172]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f003 0302 	and.w	r3, r3, #2
 8008898:	2b00      	cmp	r3, #0
 800889a:	d0f0      	beq.n	800887e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800889c:	4b28      	ldr	r3, [pc, #160]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	691b      	ldr	r3, [r3, #16]
 80088a8:	00db      	lsls	r3, r3, #3
 80088aa:	4925      	ldr	r1, [pc, #148]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80088ac:	4313      	orrs	r3, r2
 80088ae:	600b      	str	r3, [r1, #0]
 80088b0:	e015      	b.n	80088de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088b2:	4b24      	ldr	r3, [pc, #144]	; (8008944 <HAL_RCC_OscConfig+0x244>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088b8:	f7fb ff84 	bl	80047c4 <HAL_GetTick>
 80088bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088be:	e008      	b.n	80088d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80088c0:	f7fb ff80 	bl	80047c4 <HAL_GetTick>
 80088c4:	4602      	mov	r2, r0
 80088c6:	693b      	ldr	r3, [r7, #16]
 80088c8:	1ad3      	subs	r3, r2, r3
 80088ca:	2b02      	cmp	r3, #2
 80088cc:	d901      	bls.n	80088d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80088ce:	2303      	movs	r3, #3
 80088d0:	e187      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088d2:	4b1b      	ldr	r3, [pc, #108]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	f003 0302 	and.w	r3, r3, #2
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1f0      	bne.n	80088c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	f003 0308 	and.w	r3, r3, #8
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d036      	beq.n	8008958 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d016      	beq.n	8008920 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088f2:	4b15      	ldr	r3, [pc, #84]	; (8008948 <HAL_RCC_OscConfig+0x248>)
 80088f4:	2201      	movs	r2, #1
 80088f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f8:	f7fb ff64 	bl	80047c4 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008900:	f7fb ff60 	bl	80047c4 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e167      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008912:	4b0b      	ldr	r3, [pc, #44]	; (8008940 <HAL_RCC_OscConfig+0x240>)
 8008914:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008916:	f003 0302 	and.w	r3, r3, #2
 800891a:	2b00      	cmp	r3, #0
 800891c:	d0f0      	beq.n	8008900 <HAL_RCC_OscConfig+0x200>
 800891e:	e01b      	b.n	8008958 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008920:	4b09      	ldr	r3, [pc, #36]	; (8008948 <HAL_RCC_OscConfig+0x248>)
 8008922:	2200      	movs	r2, #0
 8008924:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008926:	f7fb ff4d 	bl	80047c4 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800892c:	e00e      	b.n	800894c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800892e:	f7fb ff49 	bl	80047c4 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d907      	bls.n	800894c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e150      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
 8008940:	40023800 	.word	0x40023800
 8008944:	42470000 	.word	0x42470000
 8008948:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800894c:	4b88      	ldr	r3, [pc, #544]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 800894e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d1ea      	bne.n	800892e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f003 0304 	and.w	r3, r3, #4
 8008960:	2b00      	cmp	r3, #0
 8008962:	f000 8097 	beq.w	8008a94 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008966:	2300      	movs	r3, #0
 8008968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800896a:	4b81      	ldr	r3, [pc, #516]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 800896c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800896e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008972:	2b00      	cmp	r3, #0
 8008974:	d10f      	bne.n	8008996 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008976:	2300      	movs	r3, #0
 8008978:	60bb      	str	r3, [r7, #8]
 800897a:	4b7d      	ldr	r3, [pc, #500]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 800897c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800897e:	4a7c      	ldr	r2, [pc, #496]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008980:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008984:	6413      	str	r3, [r2, #64]	; 0x40
 8008986:	4b7a      	ldr	r3, [pc, #488]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898e:	60bb      	str	r3, [r7, #8]
 8008990:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008992:	2301      	movs	r3, #1
 8008994:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008996:	4b77      	ldr	r3, [pc, #476]	; (8008b74 <HAL_RCC_OscConfig+0x474>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d118      	bne.n	80089d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80089a2:	4b74      	ldr	r3, [pc, #464]	; (8008b74 <HAL_RCC_OscConfig+0x474>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	4a73      	ldr	r2, [pc, #460]	; (8008b74 <HAL_RCC_OscConfig+0x474>)
 80089a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ae:	f7fb ff09 	bl	80047c4 <HAL_GetTick>
 80089b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089b4:	e008      	b.n	80089c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b6:	f7fb ff05 	bl	80047c4 <HAL_GetTick>
 80089ba:	4602      	mov	r2, r0
 80089bc:	693b      	ldr	r3, [r7, #16]
 80089be:	1ad3      	subs	r3, r2, r3
 80089c0:	2b02      	cmp	r3, #2
 80089c2:	d901      	bls.n	80089c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80089c4:	2303      	movs	r3, #3
 80089c6:	e10c      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80089c8:	4b6a      	ldr	r3, [pc, #424]	; (8008b74 <HAL_RCC_OscConfig+0x474>)
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089d0:	2b00      	cmp	r3, #0
 80089d2:	d0f0      	beq.n	80089b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	689b      	ldr	r3, [r3, #8]
 80089d8:	2b01      	cmp	r3, #1
 80089da:	d106      	bne.n	80089ea <HAL_RCC_OscConfig+0x2ea>
 80089dc:	4b64      	ldr	r3, [pc, #400]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 80089de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089e0:	4a63      	ldr	r2, [pc, #396]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	6713      	str	r3, [r2, #112]	; 0x70
 80089e8:	e01c      	b.n	8008a24 <HAL_RCC_OscConfig+0x324>
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b05      	cmp	r3, #5
 80089f0:	d10c      	bne.n	8008a0c <HAL_RCC_OscConfig+0x30c>
 80089f2:	4b5f      	ldr	r3, [pc, #380]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 80089f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089f6:	4a5e      	ldr	r2, [pc, #376]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 80089f8:	f043 0304 	orr.w	r3, r3, #4
 80089fc:	6713      	str	r3, [r2, #112]	; 0x70
 80089fe:	4b5c      	ldr	r3, [pc, #368]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a02:	4a5b      	ldr	r2, [pc, #364]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a04:	f043 0301 	orr.w	r3, r3, #1
 8008a08:	6713      	str	r3, [r2, #112]	; 0x70
 8008a0a:	e00b      	b.n	8008a24 <HAL_RCC_OscConfig+0x324>
 8008a0c:	4b58      	ldr	r3, [pc, #352]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a57      	ldr	r2, [pc, #348]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a12:	f023 0301 	bic.w	r3, r3, #1
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
 8008a18:	4b55      	ldr	r3, [pc, #340]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a1c:	4a54      	ldr	r2, [pc, #336]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a1e:	f023 0304 	bic.w	r3, r3, #4
 8008a22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	689b      	ldr	r3, [r3, #8]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d015      	beq.n	8008a58 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a2c:	f7fb feca 	bl	80047c4 <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a32:	e00a      	b.n	8008a4a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a34:	f7fb fec6 	bl	80047c4 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a42:	4293      	cmp	r3, r2
 8008a44:	d901      	bls.n	8008a4a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008a46:	2303      	movs	r3, #3
 8008a48:	e0cb      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a4a:	4b49      	ldr	r3, [pc, #292]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a4e:	f003 0302 	and.w	r3, r3, #2
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d0ee      	beq.n	8008a34 <HAL_RCC_OscConfig+0x334>
 8008a56:	e014      	b.n	8008a82 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008a58:	f7fb feb4 	bl	80047c4 <HAL_GetTick>
 8008a5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a5e:	e00a      	b.n	8008a76 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008a60:	f7fb feb0 	bl	80047c4 <HAL_GetTick>
 8008a64:	4602      	mov	r2, r0
 8008a66:	693b      	ldr	r3, [r7, #16]
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d901      	bls.n	8008a76 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008a72:	2303      	movs	r3, #3
 8008a74:	e0b5      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008a76:	4b3e      	ldr	r3, [pc, #248]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a7a:	f003 0302 	and.w	r3, r3, #2
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d1ee      	bne.n	8008a60 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008a82:	7dfb      	ldrb	r3, [r7, #23]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d105      	bne.n	8008a94 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008a88:	4b39      	ldr	r3, [pc, #228]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a8c:	4a38      	ldr	r2, [pc, #224]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008a8e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008a92:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	699b      	ldr	r3, [r3, #24]
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 80a1 	beq.w	8008be0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008a9e:	4b34      	ldr	r3, [pc, #208]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	f003 030c 	and.w	r3, r3, #12
 8008aa6:	2b08      	cmp	r3, #8
 8008aa8:	d05c      	beq.n	8008b64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	2b02      	cmp	r3, #2
 8008ab0:	d141      	bne.n	8008b36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ab2:	4b31      	ldr	r3, [pc, #196]	; (8008b78 <HAL_RCC_OscConfig+0x478>)
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ab8:	f7fb fe84 	bl	80047c4 <HAL_GetTick>
 8008abc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008abe:	e008      	b.n	8008ad2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008ac0:	f7fb fe80 	bl	80047c4 <HAL_GetTick>
 8008ac4:	4602      	mov	r2, r0
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	1ad3      	subs	r3, r2, r3
 8008aca:	2b02      	cmp	r3, #2
 8008acc:	d901      	bls.n	8008ad2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008ace:	2303      	movs	r3, #3
 8008ad0:	e087      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008ad2:	4b27      	ldr	r3, [pc, #156]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d1f0      	bne.n	8008ac0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	69da      	ldr	r2, [r3, #28]
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6a1b      	ldr	r3, [r3, #32]
 8008ae6:	431a      	orrs	r2, r3
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	019b      	lsls	r3, r3, #6
 8008aee:	431a      	orrs	r2, r3
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af4:	085b      	lsrs	r3, r3, #1
 8008af6:	3b01      	subs	r3, #1
 8008af8:	041b      	lsls	r3, r3, #16
 8008afa:	431a      	orrs	r2, r3
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b00:	061b      	lsls	r3, r3, #24
 8008b02:	491b      	ldr	r1, [pc, #108]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008b04:	4313      	orrs	r3, r2
 8008b06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b08:	4b1b      	ldr	r3, [pc, #108]	; (8008b78 <HAL_RCC_OscConfig+0x478>)
 8008b0a:	2201      	movs	r2, #1
 8008b0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b0e:	f7fb fe59 	bl	80047c4 <HAL_GetTick>
 8008b12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b14:	e008      	b.n	8008b28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b16:	f7fb fe55 	bl	80047c4 <HAL_GetTick>
 8008b1a:	4602      	mov	r2, r0
 8008b1c:	693b      	ldr	r3, [r7, #16]
 8008b1e:	1ad3      	subs	r3, r2, r3
 8008b20:	2b02      	cmp	r3, #2
 8008b22:	d901      	bls.n	8008b28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008b24:	2303      	movs	r3, #3
 8008b26:	e05c      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b28:	4b11      	ldr	r3, [pc, #68]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0f0      	beq.n	8008b16 <HAL_RCC_OscConfig+0x416>
 8008b34:	e054      	b.n	8008be0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b36:	4b10      	ldr	r3, [pc, #64]	; (8008b78 <HAL_RCC_OscConfig+0x478>)
 8008b38:	2200      	movs	r2, #0
 8008b3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008b3c:	f7fb fe42 	bl	80047c4 <HAL_GetTick>
 8008b40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b42:	e008      	b.n	8008b56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008b44:	f7fb fe3e 	bl	80047c4 <HAL_GetTick>
 8008b48:	4602      	mov	r2, r0
 8008b4a:	693b      	ldr	r3, [r7, #16]
 8008b4c:	1ad3      	subs	r3, r2, r3
 8008b4e:	2b02      	cmp	r3, #2
 8008b50:	d901      	bls.n	8008b56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008b52:	2303      	movs	r3, #3
 8008b54:	e045      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b56:	4b06      	ldr	r3, [pc, #24]	; (8008b70 <HAL_RCC_OscConfig+0x470>)
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d1f0      	bne.n	8008b44 <HAL_RCC_OscConfig+0x444>
 8008b62:	e03d      	b.n	8008be0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	699b      	ldr	r3, [r3, #24]
 8008b68:	2b01      	cmp	r3, #1
 8008b6a:	d107      	bne.n	8008b7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	e038      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
 8008b70:	40023800 	.word	0x40023800
 8008b74:	40007000 	.word	0x40007000
 8008b78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008b7c:	4b1b      	ldr	r3, [pc, #108]	; (8008bec <HAL_RCC_OscConfig+0x4ec>)
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	699b      	ldr	r3, [r3, #24]
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d028      	beq.n	8008bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008b94:	429a      	cmp	r2, r3
 8008b96:	d121      	bne.n	8008bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ba2:	429a      	cmp	r2, r3
 8008ba4:	d11a      	bne.n	8008bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008ba6:	68fa      	ldr	r2, [r7, #12]
 8008ba8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008bac:	4013      	ands	r3, r2
 8008bae:	687a      	ldr	r2, [r7, #4]
 8008bb0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008bb2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008bb4:	4293      	cmp	r3, r2
 8008bb6:	d111      	bne.n	8008bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc2:	085b      	lsrs	r3, r3, #1
 8008bc4:	3b01      	subs	r3, #1
 8008bc6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d107      	bne.n	8008bdc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bd6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008bd8:	429a      	cmp	r2, r3
 8008bda:	d001      	beq.n	8008be0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008bdc:	2301      	movs	r3, #1
 8008bde:	e000      	b.n	8008be2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3718      	adds	r7, #24
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	40023800 	.word	0x40023800

08008bf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	b084      	sub	sp, #16
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
 8008bf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2b00      	cmp	r3, #0
 8008bfe:	d101      	bne.n	8008c04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008c00:	2301      	movs	r3, #1
 8008c02:	e0cc      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008c04:	4b68      	ldr	r3, [pc, #416]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f003 0307 	and.w	r3, r3, #7
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	429a      	cmp	r2, r3
 8008c10:	d90c      	bls.n	8008c2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c12:	4b65      	ldr	r3, [pc, #404]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c14:	683a      	ldr	r2, [r7, #0]
 8008c16:	b2d2      	uxtb	r2, r2
 8008c18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c1a:	4b63      	ldr	r3, [pc, #396]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f003 0307 	and.w	r3, r3, #7
 8008c22:	683a      	ldr	r2, [r7, #0]
 8008c24:	429a      	cmp	r2, r3
 8008c26:	d001      	beq.n	8008c2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008c28:	2301      	movs	r3, #1
 8008c2a:	e0b8      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	f003 0302 	and.w	r3, r3, #2
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d020      	beq.n	8008c7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	f003 0304 	and.w	r3, r3, #4
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d005      	beq.n	8008c50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008c44:	4b59      	ldr	r3, [pc, #356]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	4a58      	ldr	r2, [pc, #352]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008c4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f003 0308 	and.w	r3, r3, #8
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d005      	beq.n	8008c68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008c5c:	4b53      	ldr	r3, [pc, #332]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c5e:	689b      	ldr	r3, [r3, #8]
 8008c60:	4a52      	ldr	r2, [pc, #328]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008c66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008c68:	4b50      	ldr	r3, [pc, #320]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	494d      	ldr	r1, [pc, #308]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c76:	4313      	orrs	r3, r2
 8008c78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 0301 	and.w	r3, r3, #1
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d044      	beq.n	8008d10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	685b      	ldr	r3, [r3, #4]
 8008c8a:	2b01      	cmp	r3, #1
 8008c8c:	d107      	bne.n	8008c9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c8e:	4b47      	ldr	r3, [pc, #284]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d119      	bne.n	8008cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008c9a:	2301      	movs	r3, #1
 8008c9c:	e07f      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	685b      	ldr	r3, [r3, #4]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d003      	beq.n	8008cae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	d107      	bne.n	8008cbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cae:	4b3f      	ldr	r3, [pc, #252]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d109      	bne.n	8008cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cba:	2301      	movs	r3, #1
 8008cbc:	e06f      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008cbe:	4b3b      	ldr	r3, [pc, #236]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d101      	bne.n	8008cce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e067      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008cce:	4b37      	ldr	r3, [pc, #220]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	f023 0203 	bic.w	r2, r3, #3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	685b      	ldr	r3, [r3, #4]
 8008cda:	4934      	ldr	r1, [pc, #208]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008cdc:	4313      	orrs	r3, r2
 8008cde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008ce0:	f7fb fd70 	bl	80047c4 <HAL_GetTick>
 8008ce4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ce6:	e00a      	b.n	8008cfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ce8:	f7fb fd6c 	bl	80047c4 <HAL_GetTick>
 8008cec:	4602      	mov	r2, r0
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	1ad3      	subs	r3, r2, r3
 8008cf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	d901      	bls.n	8008cfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008cfa:	2303      	movs	r3, #3
 8008cfc:	e04f      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008cfe:	4b2b      	ldr	r3, [pc, #172]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d00:	689b      	ldr	r3, [r3, #8]
 8008d02:	f003 020c 	and.w	r2, r3, #12
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	685b      	ldr	r3, [r3, #4]
 8008d0a:	009b      	lsls	r3, r3, #2
 8008d0c:	429a      	cmp	r2, r3
 8008d0e:	d1eb      	bne.n	8008ce8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008d10:	4b25      	ldr	r3, [pc, #148]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	f003 0307 	and.w	r3, r3, #7
 8008d18:	683a      	ldr	r2, [r7, #0]
 8008d1a:	429a      	cmp	r2, r3
 8008d1c:	d20c      	bcs.n	8008d38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d1e:	4b22      	ldr	r3, [pc, #136]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	b2d2      	uxtb	r2, r2
 8008d24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d26:	4b20      	ldr	r3, [pc, #128]	; (8008da8 <HAL_RCC_ClockConfig+0x1b8>)
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f003 0307 	and.w	r3, r3, #7
 8008d2e:	683a      	ldr	r2, [r7, #0]
 8008d30:	429a      	cmp	r2, r3
 8008d32:	d001      	beq.n	8008d38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008d34:	2301      	movs	r3, #1
 8008d36:	e032      	b.n	8008d9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0304 	and.w	r3, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d008      	beq.n	8008d56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008d44:	4b19      	ldr	r3, [pc, #100]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	68db      	ldr	r3, [r3, #12]
 8008d50:	4916      	ldr	r1, [pc, #88]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d52:	4313      	orrs	r3, r2
 8008d54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f003 0308 	and.w	r3, r3, #8
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d009      	beq.n	8008d76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008d62:	4b12      	ldr	r3, [pc, #72]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d64:	689b      	ldr	r3, [r3, #8]
 8008d66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	00db      	lsls	r3, r3, #3
 8008d70:	490e      	ldr	r1, [pc, #56]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d72:	4313      	orrs	r3, r2
 8008d74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008d76:	f000 f821 	bl	8008dbc <HAL_RCC_GetSysClockFreq>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	4b0b      	ldr	r3, [pc, #44]	; (8008dac <HAL_RCC_ClockConfig+0x1bc>)
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	091b      	lsrs	r3, r3, #4
 8008d82:	f003 030f 	and.w	r3, r3, #15
 8008d86:	490a      	ldr	r1, [pc, #40]	; (8008db0 <HAL_RCC_ClockConfig+0x1c0>)
 8008d88:	5ccb      	ldrb	r3, [r1, r3]
 8008d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8008d8e:	4a09      	ldr	r2, [pc, #36]	; (8008db4 <HAL_RCC_ClockConfig+0x1c4>)
 8008d90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008d92:	4b09      	ldr	r3, [pc, #36]	; (8008db8 <HAL_RCC_ClockConfig+0x1c8>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4618      	mov	r0, r3
 8008d98:	f7fb fcd0 	bl	800473c <HAL_InitTick>

  return HAL_OK;
 8008d9c:	2300      	movs	r3, #0
}
 8008d9e:	4618      	mov	r0, r3
 8008da0:	3710      	adds	r7, #16
 8008da2:	46bd      	mov	sp, r7
 8008da4:	bd80      	pop	{r7, pc}
 8008da6:	bf00      	nop
 8008da8:	40023c00 	.word	0x40023c00
 8008dac:	40023800 	.word	0x40023800
 8008db0:	0800c20c 	.word	0x0800c20c
 8008db4:	20000240 	.word	0x20000240
 8008db8:	20000244 	.word	0x20000244

08008dbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008dbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008dc0:	b094      	sub	sp, #80	; 0x50
 8008dc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	647b      	str	r3, [r7, #68]	; 0x44
 8008dc8:	2300      	movs	r3, #0
 8008dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008dcc:	2300      	movs	r3, #0
 8008dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008dd4:	4b79      	ldr	r3, [pc, #484]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008dd6:	689b      	ldr	r3, [r3, #8]
 8008dd8:	f003 030c 	and.w	r3, r3, #12
 8008ddc:	2b08      	cmp	r3, #8
 8008dde:	d00d      	beq.n	8008dfc <HAL_RCC_GetSysClockFreq+0x40>
 8008de0:	2b08      	cmp	r3, #8
 8008de2:	f200 80e1 	bhi.w	8008fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d002      	beq.n	8008df0 <HAL_RCC_GetSysClockFreq+0x34>
 8008dea:	2b04      	cmp	r3, #4
 8008dec:	d003      	beq.n	8008df6 <HAL_RCC_GetSysClockFreq+0x3a>
 8008dee:	e0db      	b.n	8008fa8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008df0:	4b73      	ldr	r3, [pc, #460]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008df2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8008df4:	e0db      	b.n	8008fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008df6:	4b73      	ldr	r3, [pc, #460]	; (8008fc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008df8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008dfa:	e0d8      	b.n	8008fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008dfc:	4b6f      	ldr	r3, [pc, #444]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008e06:	4b6d      	ldr	r3, [pc, #436]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d063      	beq.n	8008eda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e12:	4b6a      	ldr	r3, [pc, #424]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008e14:	685b      	ldr	r3, [r3, #4]
 8008e16:	099b      	lsrs	r3, r3, #6
 8008e18:	2200      	movs	r2, #0
 8008e1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008e1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e24:	633b      	str	r3, [r7, #48]	; 0x30
 8008e26:	2300      	movs	r3, #0
 8008e28:	637b      	str	r3, [r7, #52]	; 0x34
 8008e2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008e2e:	4622      	mov	r2, r4
 8008e30:	462b      	mov	r3, r5
 8008e32:	f04f 0000 	mov.w	r0, #0
 8008e36:	f04f 0100 	mov.w	r1, #0
 8008e3a:	0159      	lsls	r1, r3, #5
 8008e3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008e40:	0150      	lsls	r0, r2, #5
 8008e42:	4602      	mov	r2, r0
 8008e44:	460b      	mov	r3, r1
 8008e46:	4621      	mov	r1, r4
 8008e48:	1a51      	subs	r1, r2, r1
 8008e4a:	6139      	str	r1, [r7, #16]
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8008e52:	617b      	str	r3, [r7, #20]
 8008e54:	f04f 0200 	mov.w	r2, #0
 8008e58:	f04f 0300 	mov.w	r3, #0
 8008e5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008e60:	4659      	mov	r1, fp
 8008e62:	018b      	lsls	r3, r1, #6
 8008e64:	4651      	mov	r1, sl
 8008e66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008e6a:	4651      	mov	r1, sl
 8008e6c:	018a      	lsls	r2, r1, #6
 8008e6e:	4651      	mov	r1, sl
 8008e70:	ebb2 0801 	subs.w	r8, r2, r1
 8008e74:	4659      	mov	r1, fp
 8008e76:	eb63 0901 	sbc.w	r9, r3, r1
 8008e7a:	f04f 0200 	mov.w	r2, #0
 8008e7e:	f04f 0300 	mov.w	r3, #0
 8008e82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008e86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008e8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008e8e:	4690      	mov	r8, r2
 8008e90:	4699      	mov	r9, r3
 8008e92:	4623      	mov	r3, r4
 8008e94:	eb18 0303 	adds.w	r3, r8, r3
 8008e98:	60bb      	str	r3, [r7, #8]
 8008e9a:	462b      	mov	r3, r5
 8008e9c:	eb49 0303 	adc.w	r3, r9, r3
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	f04f 0200 	mov.w	r2, #0
 8008ea6:	f04f 0300 	mov.w	r3, #0
 8008eaa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008eae:	4629      	mov	r1, r5
 8008eb0:	024b      	lsls	r3, r1, #9
 8008eb2:	4621      	mov	r1, r4
 8008eb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008eb8:	4621      	mov	r1, r4
 8008eba:	024a      	lsls	r2, r1, #9
 8008ebc:	4610      	mov	r0, r2
 8008ebe:	4619      	mov	r1, r3
 8008ec0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008ec2:	2200      	movs	r2, #0
 8008ec4:	62bb      	str	r3, [r7, #40]	; 0x28
 8008ec6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008ec8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008ecc:	f7f7 fe60 	bl	8000b90 <__aeabi_uldivmod>
 8008ed0:	4602      	mov	r2, r0
 8008ed2:	460b      	mov	r3, r1
 8008ed4:	4613      	mov	r3, r2
 8008ed6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008ed8:	e058      	b.n	8008f8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008eda:	4b38      	ldr	r3, [pc, #224]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008edc:	685b      	ldr	r3, [r3, #4]
 8008ede:	099b      	lsrs	r3, r3, #6
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	4611      	mov	r1, r2
 8008ee6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008eea:	623b      	str	r3, [r7, #32]
 8008eec:	2300      	movs	r3, #0
 8008eee:	627b      	str	r3, [r7, #36]	; 0x24
 8008ef0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	f04f 0000 	mov.w	r0, #0
 8008efc:	f04f 0100 	mov.w	r1, #0
 8008f00:	0159      	lsls	r1, r3, #5
 8008f02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008f06:	0150      	lsls	r0, r2, #5
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4641      	mov	r1, r8
 8008f0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008f12:	4649      	mov	r1, r9
 8008f14:	eb63 0b01 	sbc.w	fp, r3, r1
 8008f18:	f04f 0200 	mov.w	r2, #0
 8008f1c:	f04f 0300 	mov.w	r3, #0
 8008f20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008f24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008f28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008f2c:	ebb2 040a 	subs.w	r4, r2, sl
 8008f30:	eb63 050b 	sbc.w	r5, r3, fp
 8008f34:	f04f 0200 	mov.w	r2, #0
 8008f38:	f04f 0300 	mov.w	r3, #0
 8008f3c:	00eb      	lsls	r3, r5, #3
 8008f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008f42:	00e2      	lsls	r2, r4, #3
 8008f44:	4614      	mov	r4, r2
 8008f46:	461d      	mov	r5, r3
 8008f48:	4643      	mov	r3, r8
 8008f4a:	18e3      	adds	r3, r4, r3
 8008f4c:	603b      	str	r3, [r7, #0]
 8008f4e:	464b      	mov	r3, r9
 8008f50:	eb45 0303 	adc.w	r3, r5, r3
 8008f54:	607b      	str	r3, [r7, #4]
 8008f56:	f04f 0200 	mov.w	r2, #0
 8008f5a:	f04f 0300 	mov.w	r3, #0
 8008f5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008f62:	4629      	mov	r1, r5
 8008f64:	028b      	lsls	r3, r1, #10
 8008f66:	4621      	mov	r1, r4
 8008f68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	028a      	lsls	r2, r1, #10
 8008f70:	4610      	mov	r0, r2
 8008f72:	4619      	mov	r1, r3
 8008f74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f76:	2200      	movs	r2, #0
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	61fa      	str	r2, [r7, #28]
 8008f7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008f80:	f7f7 fe06 	bl	8000b90 <__aeabi_uldivmod>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4613      	mov	r3, r2
 8008f8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008f8c:	4b0b      	ldr	r3, [pc, #44]	; (8008fbc <HAL_RCC_GetSysClockFreq+0x200>)
 8008f8e:	685b      	ldr	r3, [r3, #4]
 8008f90:	0c1b      	lsrs	r3, r3, #16
 8008f92:	f003 0303 	and.w	r3, r3, #3
 8008f96:	3301      	adds	r3, #1
 8008f98:	005b      	lsls	r3, r3, #1
 8008f9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8008f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008fa0:	fbb2 f3f3 	udiv	r3, r2, r3
 8008fa4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fa6:	e002      	b.n	8008fae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008fa8:	4b05      	ldr	r3, [pc, #20]	; (8008fc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008faa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008fac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008fae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3750      	adds	r7, #80	; 0x50
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008fba:	bf00      	nop
 8008fbc:	40023800 	.word	0x40023800
 8008fc0:	00f42400 	.word	0x00f42400
 8008fc4:	007a1200 	.word	0x007a1200

08008fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fc8:	b480      	push	{r7}
 8008fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fcc:	4b03      	ldr	r3, [pc, #12]	; (8008fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8008fce:	681b      	ldr	r3, [r3, #0]
}
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd8:	4770      	bx	lr
 8008fda:	bf00      	nop
 8008fdc:	20000240 	.word	0x20000240

08008fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fe0:	b580      	push	{r7, lr}
 8008fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008fe4:	f7ff fff0 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8008fe8:	4602      	mov	r2, r0
 8008fea:	4b05      	ldr	r3, [pc, #20]	; (8009000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fec:	689b      	ldr	r3, [r3, #8]
 8008fee:	0a9b      	lsrs	r3, r3, #10
 8008ff0:	f003 0307 	and.w	r3, r3, #7
 8008ff4:	4903      	ldr	r1, [pc, #12]	; (8009004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008ff6:	5ccb      	ldrb	r3, [r1, r3]
 8008ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008ffc:	4618      	mov	r0, r3
 8008ffe:	bd80      	pop	{r7, pc}
 8009000:	40023800 	.word	0x40023800
 8009004:	0800c21c 	.word	0x0800c21c

08009008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800900c:	f7ff ffdc 	bl	8008fc8 <HAL_RCC_GetHCLKFreq>
 8009010:	4602      	mov	r2, r0
 8009012:	4b05      	ldr	r3, [pc, #20]	; (8009028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	0b5b      	lsrs	r3, r3, #13
 8009018:	f003 0307 	and.w	r3, r3, #7
 800901c:	4903      	ldr	r1, [pc, #12]	; (800902c <HAL_RCC_GetPCLK2Freq+0x24>)
 800901e:	5ccb      	ldrb	r3, [r1, r3]
 8009020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009024:	4618      	mov	r0, r3
 8009026:	bd80      	pop	{r7, pc}
 8009028:	40023800 	.word	0x40023800
 800902c:	0800c21c 	.word	0x0800c21c

08009030 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009030:	b580      	push	{r7, lr}
 8009032:	b082      	sub	sp, #8
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	2b00      	cmp	r3, #0
 800903c:	d101      	bne.n	8009042 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800903e:	2301      	movs	r3, #1
 8009040:	e04c      	b.n	80090dc <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009048:	b2db      	uxtb	r3, r3
 800904a:	2b00      	cmp	r3, #0
 800904c:	d111      	bne.n	8009072 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009056:	6878      	ldr	r0, [r7, #4]
 8009058:	f001 faaa 	bl	800a5b0 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009060:	2b00      	cmp	r3, #0
 8009062:	d102      	bne.n	800906a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a1f      	ldr	r2, [pc, #124]	; (80090e4 <HAL_TIM_Base_Init+0xb4>)
 8009068:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800906e:	6878      	ldr	r0, [r7, #4]
 8009070:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2202      	movs	r2, #2
 8009076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	3304      	adds	r3, #4
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f001 f861 	bl	800a14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	2201      	movs	r2, #1
 800908e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2201      	movs	r2, #1
 800909e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	2201      	movs	r2, #1
 80090a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2201      	movs	r2, #1
 80090ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	2201      	movs	r2, #1
 80090b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2201      	movs	r2, #1
 80090ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	2201      	movs	r2, #1
 80090d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80090da:	2300      	movs	r3, #0
}
 80090dc:	4618      	mov	r0, r3
 80090de:	3708      	adds	r7, #8
 80090e0:	46bd      	mov	sp, r7
 80090e2:	bd80      	pop	{r7, pc}
 80090e4:	08004321 	.word	0x08004321

080090e8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090f6:	b2db      	uxtb	r3, r3
 80090f8:	2b01      	cmp	r3, #1
 80090fa:	d001      	beq.n	8009100 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80090fc:	2301      	movs	r3, #1
 80090fe:	e03c      	b.n	800917a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	2202      	movs	r2, #2
 8009104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	4a1e      	ldr	r2, [pc, #120]	; (8009188 <HAL_TIM_Base_Start+0xa0>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d018      	beq.n	8009144 <HAL_TIM_Base_Start+0x5c>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	681b      	ldr	r3, [r3, #0]
 8009116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800911a:	d013      	beq.n	8009144 <HAL_TIM_Base_Start+0x5c>
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	4a1a      	ldr	r2, [pc, #104]	; (800918c <HAL_TIM_Base_Start+0xa4>)
 8009122:	4293      	cmp	r3, r2
 8009124:	d00e      	beq.n	8009144 <HAL_TIM_Base_Start+0x5c>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	4a19      	ldr	r2, [pc, #100]	; (8009190 <HAL_TIM_Base_Start+0xa8>)
 800912c:	4293      	cmp	r3, r2
 800912e:	d009      	beq.n	8009144 <HAL_TIM_Base_Start+0x5c>
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	4a17      	ldr	r2, [pc, #92]	; (8009194 <HAL_TIM_Base_Start+0xac>)
 8009136:	4293      	cmp	r3, r2
 8009138:	d004      	beq.n	8009144 <HAL_TIM_Base_Start+0x5c>
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	4a16      	ldr	r2, [pc, #88]	; (8009198 <HAL_TIM_Base_Start+0xb0>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d111      	bne.n	8009168 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	689b      	ldr	r3, [r3, #8]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	2b06      	cmp	r3, #6
 8009154:	d010      	beq.n	8009178 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f042 0201 	orr.w	r2, r2, #1
 8009164:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009166:	e007      	b.n	8009178 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	681a      	ldr	r2, [r3, #0]
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0201 	orr.w	r2, r2, #1
 8009176:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3714      	adds	r7, #20
 800917e:	46bd      	mov	sp, r7
 8009180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009184:	4770      	bx	lr
 8009186:	bf00      	nop
 8009188:	40010000 	.word	0x40010000
 800918c:	40000400 	.word	0x40000400
 8009190:	40000800 	.word	0x40000800
 8009194:	40000c00 	.word	0x40000c00
 8009198:	40014000 	.word	0x40014000

0800919c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800919c:	b480      	push	{r7}
 800919e:	b085      	sub	sp, #20
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	2b01      	cmp	r3, #1
 80091ae:	d001      	beq.n	80091b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80091b0:	2301      	movs	r3, #1
 80091b2:	e044      	b.n	800923e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2202      	movs	r2, #2
 80091b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	681b      	ldr	r3, [r3, #0]
 80091c0:	68da      	ldr	r2, [r3, #12]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	f042 0201 	orr.w	r2, r2, #1
 80091ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	4a1e      	ldr	r2, [pc, #120]	; (800924c <HAL_TIM_Base_Start_IT+0xb0>)
 80091d2:	4293      	cmp	r3, r2
 80091d4:	d018      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x6c>
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091de:	d013      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x6c>
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	4a1a      	ldr	r2, [pc, #104]	; (8009250 <HAL_TIM_Base_Start_IT+0xb4>)
 80091e6:	4293      	cmp	r3, r2
 80091e8:	d00e      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x6c>
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a19      	ldr	r2, [pc, #100]	; (8009254 <HAL_TIM_Base_Start_IT+0xb8>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d009      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x6c>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a17      	ldr	r2, [pc, #92]	; (8009258 <HAL_TIM_Base_Start_IT+0xbc>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d004      	beq.n	8009208 <HAL_TIM_Base_Start_IT+0x6c>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a16      	ldr	r2, [pc, #88]	; (800925c <HAL_TIM_Base_Start_IT+0xc0>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d111      	bne.n	800922c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	689b      	ldr	r3, [r3, #8]
 800920e:	f003 0307 	and.w	r3, r3, #7
 8009212:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	2b06      	cmp	r3, #6
 8009218:	d010      	beq.n	800923c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	681a      	ldr	r2, [r3, #0]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f042 0201 	orr.w	r2, r2, #1
 8009228:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800922a:	e007      	b.n	800923c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	681a      	ldr	r2, [r3, #0]
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f042 0201 	orr.w	r2, r2, #1
 800923a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800923c:	2300      	movs	r3, #0
}
 800923e:	4618      	mov	r0, r3
 8009240:	3714      	adds	r7, #20
 8009242:	46bd      	mov	sp, r7
 8009244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009248:	4770      	bx	lr
 800924a:	bf00      	nop
 800924c:	40010000 	.word	0x40010000
 8009250:	40000400 	.word	0x40000400
 8009254:	40000800 	.word	0x40000800
 8009258:	40000c00 	.word	0x40000c00
 800925c:	40014000 	.word	0x40014000

08009260 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b082      	sub	sp, #8
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d101      	bne.n	8009272 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800926e:	2301      	movs	r3, #1
 8009270:	e04c      	b.n	800930c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009278:	b2db      	uxtb	r3, r3
 800927a:	2b00      	cmp	r3, #0
 800927c:	d111      	bne.n	80092a2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009286:	6878      	ldr	r0, [r7, #4]
 8009288:	f001 f992 	bl	800a5b0 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009290:	2b00      	cmp	r3, #0
 8009292:	d102      	bne.n	800929a <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a1f      	ldr	r2, [pc, #124]	; (8009314 <HAL_TIM_OC_Init+0xb4>)
 8009298:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800929e:	6878      	ldr	r0, [r7, #4]
 80092a0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	2202      	movs	r2, #2
 80092a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	3304      	adds	r3, #4
 80092b2:	4619      	mov	r1, r3
 80092b4:	4610      	mov	r0, r2
 80092b6:	f000 ff49 	bl	800a14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2201      	movs	r2, #1
 80092be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2201      	movs	r2, #1
 80092c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2201      	movs	r2, #1
 80092ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	2201      	movs	r2, #1
 80092d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	2201      	movs	r2, #1
 80092de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2201      	movs	r2, #1
 80092e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	2201      	movs	r2, #1
 80092ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	2201      	movs	r2, #1
 80092f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	2201      	movs	r2, #1
 80092fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	2201      	movs	r2, #1
 8009306:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800930a:	2300      	movs	r3, #0
}
 800930c:	4618      	mov	r0, r3
 800930e:	3708      	adds	r7, #8
 8009310:	46bd      	mov	sp, r7
 8009312:	bd80      	pop	{r7, pc}
 8009314:	08009319 	.word	0x08009319

08009318 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009318:	b480      	push	{r7}
 800931a:	b083      	sub	sp, #12
 800931c:	af00      	add	r7, sp, #0
 800931e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009320:	bf00      	nop
 8009322:	370c      	adds	r7, #12
 8009324:	46bd      	mov	sp, r7
 8009326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800932a:	4770      	bx	lr

0800932c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b00      	cmp	r3, #0
 8009338:	d101      	bne.n	800933e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800933a:	2301      	movs	r3, #1
 800933c:	e04c      	b.n	80093d8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009344:	b2db      	uxtb	r3, r3
 8009346:	2b00      	cmp	r3, #0
 8009348:	d111      	bne.n	800936e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f001 f92c 	bl	800a5b0 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800935c:	2b00      	cmp	r3, #0
 800935e:	d102      	bne.n	8009366 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	4a1f      	ldr	r2, [pc, #124]	; (80093e0 <HAL_TIM_PWM_Init+0xb4>)
 8009364:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800936a:	6878      	ldr	r0, [r7, #4]
 800936c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	2202      	movs	r2, #2
 8009372:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	3304      	adds	r3, #4
 800937e:	4619      	mov	r1, r3
 8009380:	4610      	mov	r0, r2
 8009382:	f000 fee3 	bl	800a14c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2201      	movs	r2, #1
 800938a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	2201      	movs	r2, #1
 8009392:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	2201      	movs	r2, #1
 800939a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	2201      	movs	r2, #1
 80093a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2201      	movs	r2, #1
 80093aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	2201      	movs	r2, #1
 80093b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	2201      	movs	r2, #1
 80093ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	2201      	movs	r2, #1
 80093c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	2201      	movs	r2, #1
 80093ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2201      	movs	r2, #1
 80093d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80093d6:	2300      	movs	r3, #0
}
 80093d8:	4618      	mov	r0, r3
 80093da:	3708      	adds	r7, #8
 80093dc:	46bd      	mov	sp, r7
 80093de:	bd80      	pop	{r7, pc}
 80093e0:	08004241 	.word	0x08004241

080093e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b084      	sub	sp, #16
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
 80093ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d109      	bne.n	8009408 <HAL_TIM_PWM_Start+0x24>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80093fa:	b2db      	uxtb	r3, r3
 80093fc:	2b01      	cmp	r3, #1
 80093fe:	bf14      	ite	ne
 8009400:	2301      	movne	r3, #1
 8009402:	2300      	moveq	r3, #0
 8009404:	b2db      	uxtb	r3, r3
 8009406:	e022      	b.n	800944e <HAL_TIM_PWM_Start+0x6a>
 8009408:	683b      	ldr	r3, [r7, #0]
 800940a:	2b04      	cmp	r3, #4
 800940c:	d109      	bne.n	8009422 <HAL_TIM_PWM_Start+0x3e>
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009414:	b2db      	uxtb	r3, r3
 8009416:	2b01      	cmp	r3, #1
 8009418:	bf14      	ite	ne
 800941a:	2301      	movne	r3, #1
 800941c:	2300      	moveq	r3, #0
 800941e:	b2db      	uxtb	r3, r3
 8009420:	e015      	b.n	800944e <HAL_TIM_PWM_Start+0x6a>
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	2b08      	cmp	r3, #8
 8009426:	d109      	bne.n	800943c <HAL_TIM_PWM_Start+0x58>
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800942e:	b2db      	uxtb	r3, r3
 8009430:	2b01      	cmp	r3, #1
 8009432:	bf14      	ite	ne
 8009434:	2301      	movne	r3, #1
 8009436:	2300      	moveq	r3, #0
 8009438:	b2db      	uxtb	r3, r3
 800943a:	e008      	b.n	800944e <HAL_TIM_PWM_Start+0x6a>
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009442:	b2db      	uxtb	r3, r3
 8009444:	2b01      	cmp	r3, #1
 8009446:	bf14      	ite	ne
 8009448:	2301      	movne	r3, #1
 800944a:	2300      	moveq	r3, #0
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d001      	beq.n	8009456 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009452:	2301      	movs	r3, #1
 8009454:	e068      	b.n	8009528 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009456:	683b      	ldr	r3, [r7, #0]
 8009458:	2b00      	cmp	r3, #0
 800945a:	d104      	bne.n	8009466 <HAL_TIM_PWM_Start+0x82>
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2202      	movs	r2, #2
 8009460:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009464:	e013      	b.n	800948e <HAL_TIM_PWM_Start+0xaa>
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	2b04      	cmp	r3, #4
 800946a:	d104      	bne.n	8009476 <HAL_TIM_PWM_Start+0x92>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	2202      	movs	r2, #2
 8009470:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009474:	e00b      	b.n	800948e <HAL_TIM_PWM_Start+0xaa>
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	2b08      	cmp	r3, #8
 800947a:	d104      	bne.n	8009486 <HAL_TIM_PWM_Start+0xa2>
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	2202      	movs	r2, #2
 8009480:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009484:	e003      	b.n	800948e <HAL_TIM_PWM_Start+0xaa>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2202      	movs	r2, #2
 800948a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	2201      	movs	r2, #1
 8009494:	6839      	ldr	r1, [r7, #0]
 8009496:	4618      	mov	r0, r3
 8009498:	f001 f864 	bl	800a564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a23      	ldr	r2, [pc, #140]	; (8009530 <HAL_TIM_PWM_Start+0x14c>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d107      	bne.n	80094b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80094b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	4a1d      	ldr	r2, [pc, #116]	; (8009530 <HAL_TIM_PWM_Start+0x14c>)
 80094bc:	4293      	cmp	r3, r2
 80094be:	d018      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x10e>
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80094c8:	d013      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x10e>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	4a19      	ldr	r2, [pc, #100]	; (8009534 <HAL_TIM_PWM_Start+0x150>)
 80094d0:	4293      	cmp	r3, r2
 80094d2:	d00e      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x10e>
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	4a17      	ldr	r2, [pc, #92]	; (8009538 <HAL_TIM_PWM_Start+0x154>)
 80094da:	4293      	cmp	r3, r2
 80094dc:	d009      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x10e>
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4a16      	ldr	r2, [pc, #88]	; (800953c <HAL_TIM_PWM_Start+0x158>)
 80094e4:	4293      	cmp	r3, r2
 80094e6:	d004      	beq.n	80094f2 <HAL_TIM_PWM_Start+0x10e>
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	4a14      	ldr	r2, [pc, #80]	; (8009540 <HAL_TIM_PWM_Start+0x15c>)
 80094ee:	4293      	cmp	r3, r2
 80094f0:	d111      	bne.n	8009516 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	689b      	ldr	r3, [r3, #8]
 80094f8:	f003 0307 	and.w	r3, r3, #7
 80094fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	2b06      	cmp	r3, #6
 8009502:	d010      	beq.n	8009526 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	681a      	ldr	r2, [r3, #0]
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	f042 0201 	orr.w	r2, r2, #1
 8009512:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009514:	e007      	b.n	8009526 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	681a      	ldr	r2, [r3, #0]
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	f042 0201 	orr.w	r2, r2, #1
 8009524:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009526:	2300      	movs	r3, #0
}
 8009528:	4618      	mov	r0, r3
 800952a:	3710      	adds	r7, #16
 800952c:	46bd      	mov	sp, r7
 800952e:	bd80      	pop	{r7, pc}
 8009530:	40010000 	.word	0x40010000
 8009534:	40000400 	.word	0x40000400
 8009538:	40000800 	.word	0x40000800
 800953c:	40000c00 	.word	0x40000c00
 8009540:	40014000 	.word	0x40014000

08009544 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
 800954c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2b00      	cmp	r3, #0
 8009552:	d101      	bne.n	8009558 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	e04c      	b.n	80095f2 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800955e:	b2db      	uxtb	r3, r3
 8009560:	2b00      	cmp	r3, #0
 8009562:	d111      	bne.n	8009588 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2200      	movs	r2, #0
 8009568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800956c:	6878      	ldr	r0, [r7, #4]
 800956e:	f001 f81f 	bl	800a5b0 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009576:	2b00      	cmp	r3, #0
 8009578:	d102      	bne.n	8009580 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	4a1f      	ldr	r2, [pc, #124]	; (80095fc <HAL_TIM_OnePulse_Init+0xb8>)
 800957e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009584:	6878      	ldr	r0, [r7, #4]
 8009586:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681a      	ldr	r2, [r3, #0]
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	3304      	adds	r3, #4
 8009598:	4619      	mov	r1, r3
 800959a:	4610      	mov	r0, r2
 800959c:	f000 fdd6 	bl	800a14c <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	681a      	ldr	r2, [r3, #0]
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	f022 0208 	bic.w	r2, r2, #8
 80095ae:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	6819      	ldr	r1, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	683a      	ldr	r2, [r7, #0]
 80095bc:	430a      	orrs	r2, r1
 80095be:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2201      	movs	r2, #1
 80095c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2201      	movs	r2, #1
 80095cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	2201      	movs	r2, #1
 80095d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2201      	movs	r2, #1
 80095dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	2201      	movs	r2, #1
 80095e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	2201      	movs	r2, #1
 80095ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80095f0:	2300      	movs	r3, #0
}
 80095f2:	4618      	mov	r0, r3
 80095f4:	3708      	adds	r7, #8
 80095f6:	46bd      	mov	sp, r7
 80095f8:	bd80      	pop	{r7, pc}
 80095fa:	bf00      	nop
 80095fc:	08009601 	.word	0x08009601

08009600 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009614:	b580      	push	{r7, lr}
 8009616:	b084      	sub	sp, #16
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
 800961c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009624:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800962c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009634:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800963c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800963e:	7bfb      	ldrb	r3, [r7, #15]
 8009640:	2b01      	cmp	r3, #1
 8009642:	d108      	bne.n	8009656 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009644:	7bbb      	ldrb	r3, [r7, #14]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d105      	bne.n	8009656 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800964a:	7b7b      	ldrb	r3, [r7, #13]
 800964c:	2b01      	cmp	r3, #1
 800964e:	d102      	bne.n	8009656 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009650:	7b3b      	ldrb	r3, [r7, #12]
 8009652:	2b01      	cmp	r3, #1
 8009654:	d001      	beq.n	800965a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009656:	2301      	movs	r3, #1
 8009658:	e03b      	b.n	80096d2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	2202      	movs	r2, #2
 800965e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	2202      	movs	r2, #2
 8009666:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	2202      	movs	r2, #2
 800966e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	2202      	movs	r2, #2
 8009676:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	68da      	ldr	r2, [r3, #12]
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	f042 0202 	orr.w	r2, r2, #2
 8009688:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	68da      	ldr	r2, [r3, #12]
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	f042 0204 	orr.w	r2, r2, #4
 8009698:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	2201      	movs	r2, #1
 80096a0:	2100      	movs	r1, #0
 80096a2:	4618      	mov	r0, r3
 80096a4:	f000 ff5e 	bl	800a564 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	2201      	movs	r2, #1
 80096ae:	2104      	movs	r1, #4
 80096b0:	4618      	mov	r0, r3
 80096b2:	f000 ff57 	bl	800a564 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	4a08      	ldr	r2, [pc, #32]	; (80096dc <HAL_TIM_OnePulse_Start_IT+0xc8>)
 80096bc:	4293      	cmp	r3, r2
 80096be:	d107      	bne.n	80096d0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80096ce:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3710      	adds	r7, #16
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}
 80096da:	bf00      	nop
 80096dc:	40010000 	.word	0x40010000

080096e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b086      	sub	sp, #24
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
 80096e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d101      	bne.n	80096f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80096f0:	2301      	movs	r3, #1
 80096f2:	e0a2      	b.n	800983a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096fa:	b2db      	uxtb	r3, r3
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d111      	bne.n	8009724 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2200      	movs	r2, #0
 8009704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 ff51 	bl	800a5b0 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009712:	2b00      	cmp	r3, #0
 8009714:	d102      	bne.n	800971c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	4a4a      	ldr	r2, [pc, #296]	; (8009844 <HAL_TIM_Encoder_Init+0x164>)
 800971a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009720:	6878      	ldr	r0, [r7, #4]
 8009722:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	689b      	ldr	r3, [r3, #8]
 8009732:	687a      	ldr	r2, [r7, #4]
 8009734:	6812      	ldr	r2, [r2, #0]
 8009736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800973a:	f023 0307 	bic.w	r3, r3, #7
 800973e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	3304      	adds	r3, #4
 8009748:	4619      	mov	r1, r3
 800974a:	4610      	mov	r0, r2
 800974c:	f000 fcfe 	bl	800a14c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	689b      	ldr	r3, [r3, #8]
 8009756:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	699b      	ldr	r3, [r3, #24]
 800975e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009768:	683b      	ldr	r3, [r7, #0]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	697a      	ldr	r2, [r7, #20]
 800976e:	4313      	orrs	r3, r2
 8009770:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009772:	693b      	ldr	r3, [r7, #16]
 8009774:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009778:	f023 0303 	bic.w	r3, r3, #3
 800977c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800977e:	683b      	ldr	r3, [r7, #0]
 8009780:	689a      	ldr	r2, [r3, #8]
 8009782:	683b      	ldr	r3, [r7, #0]
 8009784:	699b      	ldr	r3, [r3, #24]
 8009786:	021b      	lsls	r3, r3, #8
 8009788:	4313      	orrs	r3, r2
 800978a:	693a      	ldr	r2, [r7, #16]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009796:	f023 030c 	bic.w	r3, r3, #12
 800979a:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80097a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	68da      	ldr	r2, [r3, #12]
 80097ac:	683b      	ldr	r3, [r7, #0]
 80097ae:	69db      	ldr	r3, [r3, #28]
 80097b0:	021b      	lsls	r3, r3, #8
 80097b2:	4313      	orrs	r3, r2
 80097b4:	693a      	ldr	r2, [r7, #16]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	691b      	ldr	r3, [r3, #16]
 80097be:	011a      	lsls	r2, r3, #4
 80097c0:	683b      	ldr	r3, [r7, #0]
 80097c2:	6a1b      	ldr	r3, [r3, #32]
 80097c4:	031b      	lsls	r3, r3, #12
 80097c6:	4313      	orrs	r3, r2
 80097c8:	693a      	ldr	r2, [r7, #16]
 80097ca:	4313      	orrs	r3, r2
 80097cc:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80097ce:	68fb      	ldr	r3, [r7, #12]
 80097d0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80097d4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80097dc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	685a      	ldr	r2, [r3, #4]
 80097e2:	683b      	ldr	r3, [r7, #0]
 80097e4:	695b      	ldr	r3, [r3, #20]
 80097e6:	011b      	lsls	r3, r3, #4
 80097e8:	4313      	orrs	r3, r2
 80097ea:	68fa      	ldr	r2, [r7, #12]
 80097ec:	4313      	orrs	r3, r2
 80097ee:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	697a      	ldr	r2, [r7, #20]
 80097f6:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	693a      	ldr	r2, [r7, #16]
 80097fe:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	68fa      	ldr	r2, [r7, #12]
 8009806:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	2201      	movs	r2, #1
 800980c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2201      	movs	r2, #1
 8009814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2201      	movs	r2, #1
 8009824:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2201      	movs	r2, #1
 8009834:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009838:	2300      	movs	r3, #0
}
 800983a:	4618      	mov	r0, r3
 800983c:	3718      	adds	r7, #24
 800983e:	46bd      	mov	sp, r7
 8009840:	bd80      	pop	{r7, pc}
 8009842:	bf00      	nop
 8009844:	08004291 	.word	0x08004291

08009848 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009848:	b580      	push	{r7, lr}
 800984a:	b084      	sub	sp, #16
 800984c:	af00      	add	r7, sp, #0
 800984e:	6078      	str	r0, [r7, #4]
 8009850:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009858:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009860:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009868:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009870:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009872:	683b      	ldr	r3, [r7, #0]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d110      	bne.n	800989a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009878:	7bfb      	ldrb	r3, [r7, #15]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d102      	bne.n	8009884 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800987e:	7b7b      	ldrb	r3, [r7, #13]
 8009880:	2b01      	cmp	r3, #1
 8009882:	d001      	beq.n	8009888 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e069      	b.n	800995c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	2202      	movs	r2, #2
 800988c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2202      	movs	r2, #2
 8009894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009898:	e031      	b.n	80098fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800989a:	683b      	ldr	r3, [r7, #0]
 800989c:	2b04      	cmp	r3, #4
 800989e:	d110      	bne.n	80098c2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80098a0:	7bbb      	ldrb	r3, [r7, #14]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d102      	bne.n	80098ac <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80098a6:	7b3b      	ldrb	r3, [r7, #12]
 80098a8:	2b01      	cmp	r3, #1
 80098aa:	d001      	beq.n	80098b0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80098ac:	2301      	movs	r3, #1
 80098ae:	e055      	b.n	800995c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2202      	movs	r2, #2
 80098b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2202      	movs	r2, #2
 80098bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098c0:	e01d      	b.n	80098fe <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098c2:	7bfb      	ldrb	r3, [r7, #15]
 80098c4:	2b01      	cmp	r3, #1
 80098c6:	d108      	bne.n	80098da <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80098c8:	7bbb      	ldrb	r3, [r7, #14]
 80098ca:	2b01      	cmp	r3, #1
 80098cc:	d105      	bne.n	80098da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80098ce:	7b7b      	ldrb	r3, [r7, #13]
 80098d0:	2b01      	cmp	r3, #1
 80098d2:	d102      	bne.n	80098da <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80098d4:	7b3b      	ldrb	r3, [r7, #12]
 80098d6:	2b01      	cmp	r3, #1
 80098d8:	d001      	beq.n	80098de <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	e03e      	b.n	800995c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2202      	movs	r2, #2
 80098e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2202      	movs	r2, #2
 80098ea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2202      	movs	r2, #2
 80098f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2202      	movs	r2, #2
 80098fa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80098fe:	683b      	ldr	r3, [r7, #0]
 8009900:	2b00      	cmp	r3, #0
 8009902:	d003      	beq.n	800990c <HAL_TIM_Encoder_Start+0xc4>
 8009904:	683b      	ldr	r3, [r7, #0]
 8009906:	2b04      	cmp	r3, #4
 8009908:	d008      	beq.n	800991c <HAL_TIM_Encoder_Start+0xd4>
 800990a:	e00f      	b.n	800992c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	681b      	ldr	r3, [r3, #0]
 8009910:	2201      	movs	r2, #1
 8009912:	2100      	movs	r1, #0
 8009914:	4618      	mov	r0, r3
 8009916:	f000 fe25 	bl	800a564 <TIM_CCxChannelCmd>
      break;
 800991a:	e016      	b.n	800994a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	2201      	movs	r2, #1
 8009922:	2104      	movs	r1, #4
 8009924:	4618      	mov	r0, r3
 8009926:	f000 fe1d 	bl	800a564 <TIM_CCxChannelCmd>
      break;
 800992a:	e00e      	b.n	800994a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	2201      	movs	r2, #1
 8009932:	2100      	movs	r1, #0
 8009934:	4618      	mov	r0, r3
 8009936:	f000 fe15 	bl	800a564 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	2201      	movs	r2, #1
 8009940:	2104      	movs	r1, #4
 8009942:	4618      	mov	r0, r3
 8009944:	f000 fe0e 	bl	800a564 <TIM_CCxChannelCmd>
      break;
 8009948:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	681a      	ldr	r2, [r3, #0]
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f042 0201 	orr.w	r2, r2, #1
 8009958:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800995a:	2300      	movs	r3, #0
}
 800995c:	4618      	mov	r0, r3
 800995e:	3710      	adds	r7, #16
 8009960:	46bd      	mov	sp, r7
 8009962:	bd80      	pop	{r7, pc}

08009964 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009964:	b580      	push	{r7, lr}
 8009966:	b082      	sub	sp, #8
 8009968:	af00      	add	r7, sp, #0
 800996a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	691b      	ldr	r3, [r3, #16]
 8009972:	f003 0302 	and.w	r3, r3, #2
 8009976:	2b02      	cmp	r3, #2
 8009978:	d128      	bne.n	80099cc <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	68db      	ldr	r3, [r3, #12]
 8009980:	f003 0302 	and.w	r3, r3, #2
 8009984:	2b02      	cmp	r3, #2
 8009986:	d121      	bne.n	80099cc <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f06f 0202 	mvn.w	r2, #2
 8009990:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	681b      	ldr	r3, [r3, #0]
 800999c:	699b      	ldr	r3, [r3, #24]
 800999e:	f003 0303 	and.w	r3, r3, #3
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d005      	beq.n	80099b2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
 80099b0:	e009      	b.n	80099c6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099c2:	6878      	ldr	r0, [r7, #4]
 80099c4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	2200      	movs	r2, #0
 80099ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	691b      	ldr	r3, [r3, #16]
 80099d2:	f003 0304 	and.w	r3, r3, #4
 80099d6:	2b04      	cmp	r3, #4
 80099d8:	d128      	bne.n	8009a2c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	68db      	ldr	r3, [r3, #12]
 80099e0:	f003 0304 	and.w	r3, r3, #4
 80099e4:	2b04      	cmp	r3, #4
 80099e6:	d121      	bne.n	8009a2c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	f06f 0204 	mvn.w	r2, #4
 80099f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	2202      	movs	r2, #2
 80099f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	699b      	ldr	r3, [r3, #24]
 80099fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d005      	beq.n	8009a12 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	4798      	blx	r3
 8009a10:	e009      	b.n	8009a26 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a18:	6878      	ldr	r0, [r7, #4]
 8009a1a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	2200      	movs	r2, #0
 8009a2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	691b      	ldr	r3, [r3, #16]
 8009a32:	f003 0308 	and.w	r3, r3, #8
 8009a36:	2b08      	cmp	r3, #8
 8009a38:	d128      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68db      	ldr	r3, [r3, #12]
 8009a40:	f003 0308 	and.w	r3, r3, #8
 8009a44:	2b08      	cmp	r3, #8
 8009a46:	d121      	bne.n	8009a8c <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f06f 0208 	mvn.w	r2, #8
 8009a50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	2204      	movs	r2, #4
 8009a56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	69db      	ldr	r3, [r3, #28]
 8009a5e:	f003 0303 	and.w	r3, r3, #3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d005      	beq.n	8009a72 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
 8009a70:	e009      	b.n	8009a86 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a82:	6878      	ldr	r0, [r7, #4]
 8009a84:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	691b      	ldr	r3, [r3, #16]
 8009a92:	f003 0310 	and.w	r3, r3, #16
 8009a96:	2b10      	cmp	r3, #16
 8009a98:	d128      	bne.n	8009aec <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	68db      	ldr	r3, [r3, #12]
 8009aa0:	f003 0310 	and.w	r3, r3, #16
 8009aa4:	2b10      	cmp	r3, #16
 8009aa6:	d121      	bne.n	8009aec <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f06f 0210 	mvn.w	r2, #16
 8009ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	2208      	movs	r2, #8
 8009ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d005      	beq.n	8009ad2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009acc:	6878      	ldr	r0, [r7, #4]
 8009ace:	4798      	blx	r3
 8009ad0:	e009      	b.n	8009ae6 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009ad2:	687b      	ldr	r3, [r7, #4]
 8009ad4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ad8:	6878      	ldr	r0, [r7, #4]
 8009ada:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ae2:	6878      	ldr	r0, [r7, #4]
 8009ae4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	2200      	movs	r2, #0
 8009aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	691b      	ldr	r3, [r3, #16]
 8009af2:	f003 0301 	and.w	r3, r3, #1
 8009af6:	2b01      	cmp	r3, #1
 8009af8:	d110      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68db      	ldr	r3, [r3, #12]
 8009b00:	f003 0301 	and.w	r3, r3, #1
 8009b04:	2b01      	cmp	r3, #1
 8009b06:	d109      	bne.n	8009b1c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	f06f 0201 	mvn.w	r2, #1
 8009b10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b18:	6878      	ldr	r0, [r7, #4]
 8009b1a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	691b      	ldr	r3, [r3, #16]
 8009b22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b26:	2b80      	cmp	r3, #128	; 0x80
 8009b28:	d110      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009b34:	2b80      	cmp	r3, #128	; 0x80
 8009b36:	d109      	bne.n	8009b4c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009b40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009b48:	6878      	ldr	r0, [r7, #4]
 8009b4a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	691b      	ldr	r3, [r3, #16]
 8009b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b56:	2b40      	cmp	r3, #64	; 0x40
 8009b58:	d110      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68db      	ldr	r3, [r3, #12]
 8009b60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b64:	2b40      	cmp	r3, #64	; 0x40
 8009b66:	d109      	bne.n	8009b7c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b78:	6878      	ldr	r0, [r7, #4]
 8009b7a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	691b      	ldr	r3, [r3, #16]
 8009b82:	f003 0320 	and.w	r3, r3, #32
 8009b86:	2b20      	cmp	r3, #32
 8009b88:	d110      	bne.n	8009bac <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	681b      	ldr	r3, [r3, #0]
 8009b8e:	68db      	ldr	r3, [r3, #12]
 8009b90:	f003 0320 	and.w	r3, r3, #32
 8009b94:	2b20      	cmp	r3, #32
 8009b96:	d109      	bne.n	8009bac <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f06f 0220 	mvn.w	r2, #32
 8009ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009ba8:	6878      	ldr	r0, [r7, #4]
 8009baa:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009bac:	bf00      	nop
 8009bae:	3708      	adds	r7, #8
 8009bb0:	46bd      	mov	sp, r7
 8009bb2:	bd80      	pop	{r7, pc}

08009bb4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8009bb4:	b580      	push	{r7, lr}
 8009bb6:	b086      	sub	sp, #24
 8009bb8:	af00      	add	r7, sp, #0
 8009bba:	60f8      	str	r0, [r7, #12]
 8009bbc:	60b9      	str	r1, [r7, #8]
 8009bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009bca:	2b01      	cmp	r3, #1
 8009bcc:	d101      	bne.n	8009bd2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8009bce:	2302      	movs	r3, #2
 8009bd0:	e048      	b.n	8009c64 <HAL_TIM_OC_ConfigChannel+0xb0>
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	2201      	movs	r2, #1
 8009bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	2b0c      	cmp	r3, #12
 8009bde:	d839      	bhi.n	8009c54 <HAL_TIM_OC_ConfigChannel+0xa0>
 8009be0:	a201      	add	r2, pc, #4	; (adr r2, 8009be8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8009be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009be6:	bf00      	nop
 8009be8:	08009c1d 	.word	0x08009c1d
 8009bec:	08009c55 	.word	0x08009c55
 8009bf0:	08009c55 	.word	0x08009c55
 8009bf4:	08009c55 	.word	0x08009c55
 8009bf8:	08009c2b 	.word	0x08009c2b
 8009bfc:	08009c55 	.word	0x08009c55
 8009c00:	08009c55 	.word	0x08009c55
 8009c04:	08009c55 	.word	0x08009c55
 8009c08:	08009c39 	.word	0x08009c39
 8009c0c:	08009c55 	.word	0x08009c55
 8009c10:	08009c55 	.word	0x08009c55
 8009c14:	08009c55 	.word	0x08009c55
 8009c18:	08009c47 	.word	0x08009c47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	68b9      	ldr	r1, [r7, #8]
 8009c22:	4618      	mov	r0, r3
 8009c24:	f000 fb12 	bl	800a24c <TIM_OC1_SetConfig>
      break;
 8009c28:	e017      	b.n	8009c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	68b9      	ldr	r1, [r7, #8]
 8009c30:	4618      	mov	r0, r3
 8009c32:	f000 fb71 	bl	800a318 <TIM_OC2_SetConfig>
      break;
 8009c36:	e010      	b.n	8009c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68b9      	ldr	r1, [r7, #8]
 8009c3e:	4618      	mov	r0, r3
 8009c40:	f000 fbd6 	bl	800a3f0 <TIM_OC3_SetConfig>
      break;
 8009c44:	e009      	b.n	8009c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	68b9      	ldr	r1, [r7, #8]
 8009c4c:	4618      	mov	r0, r3
 8009c4e:	f000 fc39 	bl	800a4c4 <TIM_OC4_SetConfig>
      break;
 8009c52:	e002      	b.n	8009c5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 8009c54:	2301      	movs	r3, #1
 8009c56:	75fb      	strb	r3, [r7, #23]
      break;
 8009c58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009c62:	7dfb      	ldrb	r3, [r7, #23]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd80      	pop	{r7, pc}

08009c6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009c6c:	b580      	push	{r7, lr}
 8009c6e:	b086      	sub	sp, #24
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	60f8      	str	r0, [r7, #12]
 8009c74:	60b9      	str	r1, [r7, #8]
 8009c76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c78:	2300      	movs	r3, #0
 8009c7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c82:	2b01      	cmp	r3, #1
 8009c84:	d101      	bne.n	8009c8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8009c86:	2302      	movs	r3, #2
 8009c88:	e0ae      	b.n	8009de8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2201      	movs	r2, #1
 8009c8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	2b0c      	cmp	r3, #12
 8009c96:	f200 809f 	bhi.w	8009dd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8009c9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ca0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8009c9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca0:	08009cd5 	.word	0x08009cd5
 8009ca4:	08009dd9 	.word	0x08009dd9
 8009ca8:	08009dd9 	.word	0x08009dd9
 8009cac:	08009dd9 	.word	0x08009dd9
 8009cb0:	08009d15 	.word	0x08009d15
 8009cb4:	08009dd9 	.word	0x08009dd9
 8009cb8:	08009dd9 	.word	0x08009dd9
 8009cbc:	08009dd9 	.word	0x08009dd9
 8009cc0:	08009d57 	.word	0x08009d57
 8009cc4:	08009dd9 	.word	0x08009dd9
 8009cc8:	08009dd9 	.word	0x08009dd9
 8009ccc:	08009dd9 	.word	0x08009dd9
 8009cd0:	08009d97 	.word	0x08009d97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68b9      	ldr	r1, [r7, #8]
 8009cda:	4618      	mov	r0, r3
 8009cdc:	f000 fab6 	bl	800a24c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	699a      	ldr	r2, [r3, #24]
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	f042 0208 	orr.w	r2, r2, #8
 8009cee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009cf0:	68fb      	ldr	r3, [r7, #12]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	699a      	ldr	r2, [r3, #24]
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	f022 0204 	bic.w	r2, r2, #4
 8009cfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	681b      	ldr	r3, [r3, #0]
 8009d04:	6999      	ldr	r1, [r3, #24]
 8009d06:	68bb      	ldr	r3, [r7, #8]
 8009d08:	691a      	ldr	r2, [r3, #16]
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	430a      	orrs	r2, r1
 8009d10:	619a      	str	r2, [r3, #24]
      break;
 8009d12:	e064      	b.n	8009dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	68b9      	ldr	r1, [r7, #8]
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	f000 fafc 	bl	800a318 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009d20:	68fb      	ldr	r3, [r7, #12]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	699a      	ldr	r2, [r3, #24]
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009d2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	699a      	ldr	r2, [r3, #24]
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009d3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	6999      	ldr	r1, [r3, #24]
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	691b      	ldr	r3, [r3, #16]
 8009d4a:	021a      	lsls	r2, r3, #8
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	681b      	ldr	r3, [r3, #0]
 8009d50:	430a      	orrs	r2, r1
 8009d52:	619a      	str	r2, [r3, #24]
      break;
 8009d54:	e043      	b.n	8009dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	68b9      	ldr	r1, [r7, #8]
 8009d5c:	4618      	mov	r0, r3
 8009d5e:	f000 fb47 	bl	800a3f0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	69da      	ldr	r2, [r3, #28]
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	f042 0208 	orr.w	r2, r2, #8
 8009d70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	69da      	ldr	r2, [r3, #28]
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	f022 0204 	bic.w	r2, r2, #4
 8009d80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	69d9      	ldr	r1, [r3, #28]
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	691a      	ldr	r2, [r3, #16]
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	430a      	orrs	r2, r1
 8009d92:	61da      	str	r2, [r3, #28]
      break;
 8009d94:	e023      	b.n	8009dde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	68b9      	ldr	r1, [r7, #8]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	f000 fb91 	bl	800a4c4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	69da      	ldr	r2, [r3, #28]
 8009da8:	68fb      	ldr	r3, [r7, #12]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009db0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	69da      	ldr	r2, [r3, #28]
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009dc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	69d9      	ldr	r1, [r3, #28]
 8009dc8:	68bb      	ldr	r3, [r7, #8]
 8009dca:	691b      	ldr	r3, [r3, #16]
 8009dcc:	021a      	lsls	r2, r3, #8
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	430a      	orrs	r2, r1
 8009dd4:	61da      	str	r2, [r3, #28]
      break;
 8009dd6:	e002      	b.n	8009dde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8009dd8:	2301      	movs	r3, #1
 8009dda:	75fb      	strb	r3, [r7, #23]
      break;
 8009ddc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	2200      	movs	r2, #0
 8009de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009de6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009de8:	4618      	mov	r0, r3
 8009dea:	3718      	adds	r7, #24
 8009dec:	46bd      	mov	sp, r7
 8009dee:	bd80      	pop	{r7, pc}

08009df0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009df0:	b480      	push	{r7}
 8009df2:	b083      	sub	sp, #12
 8009df4:	af00      	add	r7, sp, #0
 8009df6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8009df8:	bf00      	nop
 8009dfa:	370c      	adds	r7, #12
 8009dfc:	46bd      	mov	sp, r7
 8009dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e02:	4770      	bx	lr

08009e04 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e20:	bf00      	nop
 8009e22:	370c      	adds	r7, #12
 8009e24:	46bd      	mov	sp, r7
 8009e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e2a:	4770      	bx	lr

08009e2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e2c:	b480      	push	{r7}
 8009e2e:	b083      	sub	sp, #12
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e34:	bf00      	nop
 8009e36:	370c      	adds	r7, #12
 8009e38:	46bd      	mov	sp, r7
 8009e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3e:	4770      	bx	lr

08009e40 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e40:	b480      	push	{r7}
 8009e42:	b083      	sub	sp, #12
 8009e44:	af00      	add	r7, sp, #0
 8009e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 8009e48:	bf00      	nop
 8009e4a:	370c      	adds	r7, #12
 8009e4c:	46bd      	mov	sp, r7
 8009e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e52:	4770      	bx	lr

08009e54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b083      	sub	sp, #12
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e5c:	bf00      	nop
 8009e5e:	370c      	adds	r7, #12
 8009e60:	46bd      	mov	sp, r7
 8009e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e66:	4770      	bx	lr

08009e68 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e68:	b480      	push	{r7}
 8009e6a:	b083      	sub	sp, #12
 8009e6c:	af00      	add	r7, sp, #0
 8009e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8009e70:	bf00      	nop
 8009e72:	370c      	adds	r7, #12
 8009e74:	46bd      	mov	sp, r7
 8009e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e7a:	4770      	bx	lr

08009e7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e7c:	b480      	push	{r7}
 8009e7e:	b083      	sub	sp, #12
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e84:	bf00      	nop
 8009e86:	370c      	adds	r7, #12
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8e:	4770      	bx	lr

08009e90 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 8009e98:	bf00      	nop
 8009e9a:	370c      	adds	r7, #12
 8009e9c:	46bd      	mov	sp, r7
 8009e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea2:	4770      	bx	lr

08009ea4 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8009ea4:	b480      	push	{r7}
 8009ea6:	b083      	sub	sp, #12
 8009ea8:	af00      	add	r7, sp, #0
 8009eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8009eac:	bf00      	nop
 8009eae:	370c      	adds	r7, #12
 8009eb0:	46bd      	mov	sp, r7
 8009eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eb6:	4770      	bx	lr

08009eb8 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 8009eb8:	b480      	push	{r7}
 8009eba:	b087      	sub	sp, #28
 8009ebc:	af00      	add	r7, sp, #0
 8009ebe:	60f8      	str	r0, [r7, #12]
 8009ec0:	460b      	mov	r3, r1
 8009ec2:	607a      	str	r2, [r7, #4]
 8009ec4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8009ec6:	2300      	movs	r3, #0
 8009ec8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d101      	bne.n	8009ed4 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8009ed0:	2301      	movs	r3, #1
 8009ed2:	e135      	b.n	800a140 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009eda:	2b01      	cmp	r3, #1
 8009edc:	d101      	bne.n	8009ee2 <HAL_TIM_RegisterCallback+0x2a>
 8009ede:	2302      	movs	r3, #2
 8009ee0:	e12e      	b.n	800a140 <HAL_TIM_RegisterCallback+0x288>
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	2201      	movs	r2, #1
 8009ee6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ef0:	b2db      	uxtb	r3, r3
 8009ef2:	2b01      	cmp	r3, #1
 8009ef4:	f040 80ba 	bne.w	800a06c <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 8009ef8:	7afb      	ldrb	r3, [r7, #11]
 8009efa:	2b1a      	cmp	r3, #26
 8009efc:	f200 80b3 	bhi.w	800a066 <HAL_TIM_RegisterCallback+0x1ae>
 8009f00:	a201      	add	r2, pc, #4	; (adr r2, 8009f08 <HAL_TIM_RegisterCallback+0x50>)
 8009f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f06:	bf00      	nop
 8009f08:	08009f75 	.word	0x08009f75
 8009f0c:	08009f7d 	.word	0x08009f7d
 8009f10:	08009f85 	.word	0x08009f85
 8009f14:	08009f8d 	.word	0x08009f8d
 8009f18:	08009f95 	.word	0x08009f95
 8009f1c:	08009f9d 	.word	0x08009f9d
 8009f20:	08009fa5 	.word	0x08009fa5
 8009f24:	08009fad 	.word	0x08009fad
 8009f28:	08009fb5 	.word	0x08009fb5
 8009f2c:	08009fbd 	.word	0x08009fbd
 8009f30:	08009fc5 	.word	0x08009fc5
 8009f34:	08009fcd 	.word	0x08009fcd
 8009f38:	08009fd5 	.word	0x08009fd5
 8009f3c:	08009fdd 	.word	0x08009fdd
 8009f40:	08009fe5 	.word	0x08009fe5
 8009f44:	08009fef 	.word	0x08009fef
 8009f48:	08009ff9 	.word	0x08009ff9
 8009f4c:	0800a003 	.word	0x0800a003
 8009f50:	0800a00d 	.word	0x0800a00d
 8009f54:	0800a017 	.word	0x0800a017
 8009f58:	0800a021 	.word	0x0800a021
 8009f5c:	0800a02b 	.word	0x0800a02b
 8009f60:	0800a035 	.word	0x0800a035
 8009f64:	0800a03f 	.word	0x0800a03f
 8009f68:	0800a049 	.word	0x0800a049
 8009f6c:	0800a053 	.word	0x0800a053
 8009f70:	0800a05d 	.word	0x0800a05d
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	687a      	ldr	r2, [r7, #4]
 8009f78:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 8009f7a:	e0dc      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 8009f7c:	68fb      	ldr	r3, [r7, #12]
 8009f7e:	687a      	ldr	r2, [r7, #4]
 8009f80:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 8009f82:	e0d8      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	687a      	ldr	r2, [r7, #4]
 8009f88:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 8009f8a:	e0d4      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	687a      	ldr	r2, [r7, #4]
 8009f90:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 8009f92:	e0d0      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	687a      	ldr	r2, [r7, #4]
 8009f98:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 8009f9a:	e0cc      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	687a      	ldr	r2, [r7, #4]
 8009fa0:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 8009fa2:	e0c8      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 8009fa4:	68fb      	ldr	r3, [r7, #12]
 8009fa6:	687a      	ldr	r2, [r7, #4]
 8009fa8:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 8009faa:	e0c4      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	687a      	ldr	r2, [r7, #4]
 8009fb0:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 8009fb2:	e0c0      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 8009fba:	e0bc      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	687a      	ldr	r2, [r7, #4]
 8009fc0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 8009fc2:	e0b8      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	687a      	ldr	r2, [r7, #4]
 8009fc8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 8009fca:	e0b4      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	687a      	ldr	r2, [r7, #4]
 8009fd0:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 8009fd2:	e0b0      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 8009fda:	e0ac      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	687a      	ldr	r2, [r7, #4]
 8009fe0:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 8009fe2:	e0a8      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	687a      	ldr	r2, [r7, #4]
 8009fe8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 8009fec:	e0a3      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 8009ff6:	e09e      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	687a      	ldr	r2, [r7, #4]
 8009ffc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a000:	e099      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	687a      	ldr	r2, [r7, #4]
 800a006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a00a:	e094      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a00c:	68fb      	ldr	r3, [r7, #12]
 800a00e:	687a      	ldr	r2, [r7, #4]
 800a010:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a014:	e08f      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a016:	68fb      	ldr	r3, [r7, #12]
 800a018:	687a      	ldr	r2, [r7, #4]
 800a01a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a01e:	e08a      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	687a      	ldr	r2, [r7, #4]
 800a024:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a028:	e085      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a02a:	68fb      	ldr	r3, [r7, #12]
 800a02c:	687a      	ldr	r2, [r7, #4]
 800a02e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a032:	e080      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	687a      	ldr	r2, [r7, #4]
 800a038:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a03c:	e07b      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	687a      	ldr	r2, [r7, #4]
 800a042:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a046:	e076      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	687a      	ldr	r2, [r7, #4]
 800a04c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a050:	e071      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a05a:	e06c      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a064:	e067      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a066:	2301      	movs	r3, #1
 800a068:	75fb      	strb	r3, [r7, #23]
        break;
 800a06a:	e064      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a072:	b2db      	uxtb	r3, r3
 800a074:	2b00      	cmp	r3, #0
 800a076:	d15c      	bne.n	800a132 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a078:	7afb      	ldrb	r3, [r7, #11]
 800a07a:	2b0d      	cmp	r3, #13
 800a07c:	d856      	bhi.n	800a12c <HAL_TIM_RegisterCallback+0x274>
 800a07e:	a201      	add	r2, pc, #4	; (adr r2, 800a084 <HAL_TIM_RegisterCallback+0x1cc>)
 800a080:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a084:	0800a0bd 	.word	0x0800a0bd
 800a088:	0800a0c5 	.word	0x0800a0c5
 800a08c:	0800a0cd 	.word	0x0800a0cd
 800a090:	0800a0d5 	.word	0x0800a0d5
 800a094:	0800a0dd 	.word	0x0800a0dd
 800a098:	0800a0e5 	.word	0x0800a0e5
 800a09c:	0800a0ed 	.word	0x0800a0ed
 800a0a0:	0800a0f5 	.word	0x0800a0f5
 800a0a4:	0800a0fd 	.word	0x0800a0fd
 800a0a8:	0800a105 	.word	0x0800a105
 800a0ac:	0800a10d 	.word	0x0800a10d
 800a0b0:	0800a115 	.word	0x0800a115
 800a0b4:	0800a11d 	.word	0x0800a11d
 800a0b8:	0800a125 	.word	0x0800a125
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	687a      	ldr	r2, [r7, #4]
 800a0c0:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a0c2:	e038      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	687a      	ldr	r2, [r7, #4]
 800a0c8:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a0ca:	e034      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	687a      	ldr	r2, [r7, #4]
 800a0d0:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a0d2:	e030      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	687a      	ldr	r2, [r7, #4]
 800a0d8:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a0da:	e02c      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a0e2:	e028      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	687a      	ldr	r2, [r7, #4]
 800a0e8:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a0ea:	e024      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a0f2:	e020      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	687a      	ldr	r2, [r7, #4]
 800a0f8:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a0fa:	e01c      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	687a      	ldr	r2, [r7, #4]
 800a100:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a102:	e018      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a10a:	e014      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	687a      	ldr	r2, [r7, #4]
 800a110:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a112:	e010      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	687a      	ldr	r2, [r7, #4]
 800a118:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a11a:	e00c      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a122:	e008      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a12a:	e004      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a12c:	2301      	movs	r3, #1
 800a12e:	75fb      	strb	r3, [r7, #23]
        break;
 800a130:	e001      	b.n	800a136 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a132:	2301      	movs	r3, #1
 800a134:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a13e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a140:	4618      	mov	r0, r3
 800a142:	371c      	adds	r7, #28
 800a144:	46bd      	mov	sp, r7
 800a146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14a:	4770      	bx	lr

0800a14c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b085      	sub	sp, #20
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	4a34      	ldr	r2, [pc, #208]	; (800a230 <TIM_Base_SetConfig+0xe4>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d00f      	beq.n	800a184 <TIM_Base_SetConfig+0x38>
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a16a:	d00b      	beq.n	800a184 <TIM_Base_SetConfig+0x38>
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	4a31      	ldr	r2, [pc, #196]	; (800a234 <TIM_Base_SetConfig+0xe8>)
 800a170:	4293      	cmp	r3, r2
 800a172:	d007      	beq.n	800a184 <TIM_Base_SetConfig+0x38>
 800a174:	687b      	ldr	r3, [r7, #4]
 800a176:	4a30      	ldr	r2, [pc, #192]	; (800a238 <TIM_Base_SetConfig+0xec>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d003      	beq.n	800a184 <TIM_Base_SetConfig+0x38>
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	4a2f      	ldr	r2, [pc, #188]	; (800a23c <TIM_Base_SetConfig+0xf0>)
 800a180:	4293      	cmp	r3, r2
 800a182:	d108      	bne.n	800a196 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a184:	68fb      	ldr	r3, [r7, #12]
 800a186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a18a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a18c:	683b      	ldr	r3, [r7, #0]
 800a18e:	685b      	ldr	r3, [r3, #4]
 800a190:	68fa      	ldr	r2, [r7, #12]
 800a192:	4313      	orrs	r3, r2
 800a194:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a25      	ldr	r2, [pc, #148]	; (800a230 <TIM_Base_SetConfig+0xe4>)
 800a19a:	4293      	cmp	r3, r2
 800a19c:	d01b      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1a4:	d017      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	4a22      	ldr	r2, [pc, #136]	; (800a234 <TIM_Base_SetConfig+0xe8>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d013      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	4a21      	ldr	r2, [pc, #132]	; (800a238 <TIM_Base_SetConfig+0xec>)
 800a1b2:	4293      	cmp	r3, r2
 800a1b4:	d00f      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	4a20      	ldr	r2, [pc, #128]	; (800a23c <TIM_Base_SetConfig+0xf0>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d00b      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	4a1f      	ldr	r2, [pc, #124]	; (800a240 <TIM_Base_SetConfig+0xf4>)
 800a1c2:	4293      	cmp	r3, r2
 800a1c4:	d007      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	4a1e      	ldr	r2, [pc, #120]	; (800a244 <TIM_Base_SetConfig+0xf8>)
 800a1ca:	4293      	cmp	r3, r2
 800a1cc:	d003      	beq.n	800a1d6 <TIM_Base_SetConfig+0x8a>
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a1d      	ldr	r2, [pc, #116]	; (800a248 <TIM_Base_SetConfig+0xfc>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d108      	bne.n	800a1e8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a1de:	683b      	ldr	r3, [r7, #0]
 800a1e0:	68db      	ldr	r3, [r3, #12]
 800a1e2:	68fa      	ldr	r2, [r7, #12]
 800a1e4:	4313      	orrs	r3, r2
 800a1e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	695b      	ldr	r3, [r3, #20]
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	68fa      	ldr	r2, [r7, #12]
 800a1fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	689a      	ldr	r2, [r3, #8]
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	681a      	ldr	r2, [r3, #0]
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a08      	ldr	r2, [pc, #32]	; (800a230 <TIM_Base_SetConfig+0xe4>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d103      	bne.n	800a21c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a214:	683b      	ldr	r3, [r7, #0]
 800a216:	691a      	ldr	r2, [r3, #16]
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2201      	movs	r2, #1
 800a220:	615a      	str	r2, [r3, #20]
}
 800a222:	bf00      	nop
 800a224:	3714      	adds	r7, #20
 800a226:	46bd      	mov	sp, r7
 800a228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a22c:	4770      	bx	lr
 800a22e:	bf00      	nop
 800a230:	40010000 	.word	0x40010000
 800a234:	40000400 	.word	0x40000400
 800a238:	40000800 	.word	0x40000800
 800a23c:	40000c00 	.word	0x40000c00
 800a240:	40014000 	.word	0x40014000
 800a244:	40014400 	.word	0x40014400
 800a248:	40014800 	.word	0x40014800

0800a24c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b087      	sub	sp, #28
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
 800a254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	6a1b      	ldr	r3, [r3, #32]
 800a25a:	f023 0201 	bic.w	r2, r3, #1
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	6a1b      	ldr	r3, [r3, #32]
 800a266:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	685b      	ldr	r3, [r3, #4]
 800a26c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	699b      	ldr	r3, [r3, #24]
 800a272:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a27c:	68fb      	ldr	r3, [r7, #12]
 800a27e:	f023 0303 	bic.w	r3, r3, #3
 800a282:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a284:	683b      	ldr	r3, [r7, #0]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4313      	orrs	r3, r2
 800a28c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a28e:	697b      	ldr	r3, [r7, #20]
 800a290:	f023 0302 	bic.w	r3, r3, #2
 800a294:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	689b      	ldr	r3, [r3, #8]
 800a29a:	697a      	ldr	r2, [r7, #20]
 800a29c:	4313      	orrs	r3, r2
 800a29e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	4a1c      	ldr	r2, [pc, #112]	; (800a314 <TIM_OC1_SetConfig+0xc8>)
 800a2a4:	4293      	cmp	r3, r2
 800a2a6:	d10c      	bne.n	800a2c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	f023 0308 	bic.w	r3, r3, #8
 800a2ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	68db      	ldr	r3, [r3, #12]
 800a2b4:	697a      	ldr	r2, [r7, #20]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a2ba:	697b      	ldr	r3, [r7, #20]
 800a2bc:	f023 0304 	bic.w	r3, r3, #4
 800a2c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	4a13      	ldr	r2, [pc, #76]	; (800a314 <TIM_OC1_SetConfig+0xc8>)
 800a2c6:	4293      	cmp	r3, r2
 800a2c8:	d111      	bne.n	800a2ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a2d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a2d2:	693b      	ldr	r3, [r7, #16]
 800a2d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a2d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	695b      	ldr	r3, [r3, #20]
 800a2de:	693a      	ldr	r2, [r7, #16]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	699b      	ldr	r3, [r3, #24]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	4313      	orrs	r3, r2
 800a2ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	693a      	ldr	r2, [r7, #16]
 800a2f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	68fa      	ldr	r2, [r7, #12]
 800a2f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a2fa:	683b      	ldr	r3, [r7, #0]
 800a2fc:	685a      	ldr	r2, [r3, #4]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	697a      	ldr	r2, [r7, #20]
 800a306:	621a      	str	r2, [r3, #32]
}
 800a308:	bf00      	nop
 800a30a:	371c      	adds	r7, #28
 800a30c:	46bd      	mov	sp, r7
 800a30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a312:	4770      	bx	lr
 800a314:	40010000 	.word	0x40010000

0800a318 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a318:	b480      	push	{r7}
 800a31a:	b087      	sub	sp, #28
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
 800a320:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a1b      	ldr	r3, [r3, #32]
 800a326:	f023 0210 	bic.w	r2, r3, #16
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	6a1b      	ldr	r3, [r3, #32]
 800a332:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	699b      	ldr	r3, [r3, #24]
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a340:	68fb      	ldr	r3, [r7, #12]
 800a342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a34e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a350:	683b      	ldr	r3, [r7, #0]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	021b      	lsls	r3, r3, #8
 800a356:	68fa      	ldr	r2, [r7, #12]
 800a358:	4313      	orrs	r3, r2
 800a35a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	f023 0320 	bic.w	r3, r3, #32
 800a362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a364:	683b      	ldr	r3, [r7, #0]
 800a366:	689b      	ldr	r3, [r3, #8]
 800a368:	011b      	lsls	r3, r3, #4
 800a36a:	697a      	ldr	r2, [r7, #20]
 800a36c:	4313      	orrs	r3, r2
 800a36e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	4a1e      	ldr	r2, [pc, #120]	; (800a3ec <TIM_OC2_SetConfig+0xd4>)
 800a374:	4293      	cmp	r3, r2
 800a376:	d10d      	bne.n	800a394 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a37e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	68db      	ldr	r3, [r3, #12]
 800a384:	011b      	lsls	r3, r3, #4
 800a386:	697a      	ldr	r2, [r7, #20]
 800a388:	4313      	orrs	r3, r2
 800a38a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a38c:	697b      	ldr	r3, [r7, #20]
 800a38e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	4a15      	ldr	r2, [pc, #84]	; (800a3ec <TIM_OC2_SetConfig+0xd4>)
 800a398:	4293      	cmp	r3, r2
 800a39a:	d113      	bne.n	800a3c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a3a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a3a4:	693b      	ldr	r3, [r7, #16]
 800a3a6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a3aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a3ac:	683b      	ldr	r3, [r7, #0]
 800a3ae:	695b      	ldr	r3, [r3, #20]
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	693a      	ldr	r2, [r7, #16]
 800a3b4:	4313      	orrs	r3, r2
 800a3b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	699b      	ldr	r3, [r3, #24]
 800a3bc:	009b      	lsls	r3, r3, #2
 800a3be:	693a      	ldr	r2, [r7, #16]
 800a3c0:	4313      	orrs	r3, r2
 800a3c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	693a      	ldr	r2, [r7, #16]
 800a3c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	68fa      	ldr	r2, [r7, #12]
 800a3ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	685a      	ldr	r2, [r3, #4]
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	697a      	ldr	r2, [r7, #20]
 800a3dc:	621a      	str	r2, [r3, #32]
}
 800a3de:	bf00      	nop
 800a3e0:	371c      	adds	r7, #28
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e8:	4770      	bx	lr
 800a3ea:	bf00      	nop
 800a3ec:	40010000 	.word	0x40010000

0800a3f0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a3f0:	b480      	push	{r7}
 800a3f2:	b087      	sub	sp, #28
 800a3f4:	af00      	add	r7, sp, #0
 800a3f6:	6078      	str	r0, [r7, #4]
 800a3f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	6a1b      	ldr	r3, [r3, #32]
 800a40a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	685b      	ldr	r3, [r3, #4]
 800a410:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	69db      	ldr	r3, [r3, #28]
 800a416:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a418:	68fb      	ldr	r3, [r7, #12]
 800a41a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a41e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	f023 0303 	bic.w	r3, r3, #3
 800a426:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	681b      	ldr	r3, [r3, #0]
 800a42c:	68fa      	ldr	r2, [r7, #12]
 800a42e:	4313      	orrs	r3, r2
 800a430:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a438:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a43a:	683b      	ldr	r3, [r7, #0]
 800a43c:	689b      	ldr	r3, [r3, #8]
 800a43e:	021b      	lsls	r3, r3, #8
 800a440:	697a      	ldr	r2, [r7, #20]
 800a442:	4313      	orrs	r3, r2
 800a444:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	4a1d      	ldr	r2, [pc, #116]	; (800a4c0 <TIM_OC3_SetConfig+0xd0>)
 800a44a:	4293      	cmp	r3, r2
 800a44c:	d10d      	bne.n	800a46a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a454:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a456:	683b      	ldr	r3, [r7, #0]
 800a458:	68db      	ldr	r3, [r3, #12]
 800a45a:	021b      	lsls	r3, r3, #8
 800a45c:	697a      	ldr	r2, [r7, #20]
 800a45e:	4313      	orrs	r3, r2
 800a460:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a462:	697b      	ldr	r3, [r7, #20]
 800a464:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a468:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	4a14      	ldr	r2, [pc, #80]	; (800a4c0 <TIM_OC3_SetConfig+0xd0>)
 800a46e:	4293      	cmp	r3, r2
 800a470:	d113      	bne.n	800a49a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a472:	693b      	ldr	r3, [r7, #16]
 800a474:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a478:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a47a:	693b      	ldr	r3, [r7, #16]
 800a47c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a480:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	695b      	ldr	r3, [r3, #20]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	693a      	ldr	r2, [r7, #16]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a48e:	683b      	ldr	r3, [r7, #0]
 800a490:	699b      	ldr	r3, [r3, #24]
 800a492:	011b      	lsls	r3, r3, #4
 800a494:	693a      	ldr	r2, [r7, #16]
 800a496:	4313      	orrs	r3, r2
 800a498:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	693a      	ldr	r2, [r7, #16]
 800a49e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	68fa      	ldr	r2, [r7, #12]
 800a4a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a4a6:	683b      	ldr	r3, [r7, #0]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	697a      	ldr	r2, [r7, #20]
 800a4b2:	621a      	str	r2, [r3, #32]
}
 800a4b4:	bf00      	nop
 800a4b6:	371c      	adds	r7, #28
 800a4b8:	46bd      	mov	sp, r7
 800a4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4be:	4770      	bx	lr
 800a4c0:	40010000 	.word	0x40010000

0800a4c4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a4c4:	b480      	push	{r7}
 800a4c6:	b087      	sub	sp, #28
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a4d6:	687b      	ldr	r3, [r7, #4]
 800a4d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	6a1b      	ldr	r3, [r3, #32]
 800a4de:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	685b      	ldr	r3, [r3, #4]
 800a4e4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	69db      	ldr	r3, [r3, #28]
 800a4ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a4f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a4fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	021b      	lsls	r3, r3, #8
 800a502:	68fa      	ldr	r2, [r7, #12]
 800a504:	4313      	orrs	r3, r2
 800a506:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a50e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a510:	683b      	ldr	r3, [r7, #0]
 800a512:	689b      	ldr	r3, [r3, #8]
 800a514:	031b      	lsls	r3, r3, #12
 800a516:	693a      	ldr	r2, [r7, #16]
 800a518:	4313      	orrs	r3, r2
 800a51a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	4a10      	ldr	r2, [pc, #64]	; (800a560 <TIM_OC4_SetConfig+0x9c>)
 800a520:	4293      	cmp	r3, r2
 800a522:	d109      	bne.n	800a538 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a524:	697b      	ldr	r3, [r7, #20]
 800a526:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a52a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a52c:	683b      	ldr	r3, [r7, #0]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	019b      	lsls	r3, r3, #6
 800a532:	697a      	ldr	r2, [r7, #20]
 800a534:	4313      	orrs	r3, r2
 800a536:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	697a      	ldr	r2, [r7, #20]
 800a53c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	68fa      	ldr	r2, [r7, #12]
 800a542:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a544:	683b      	ldr	r3, [r7, #0]
 800a546:	685a      	ldr	r2, [r3, #4]
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	693a      	ldr	r2, [r7, #16]
 800a550:	621a      	str	r2, [r3, #32]
}
 800a552:	bf00      	nop
 800a554:	371c      	adds	r7, #28
 800a556:	46bd      	mov	sp, r7
 800a558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	40010000 	.word	0x40010000

0800a564 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800a564:	b480      	push	{r7}
 800a566:	b087      	sub	sp, #28
 800a568:	af00      	add	r7, sp, #0
 800a56a:	60f8      	str	r0, [r7, #12]
 800a56c:	60b9      	str	r1, [r7, #8]
 800a56e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800a570:	68bb      	ldr	r3, [r7, #8]
 800a572:	f003 031f 	and.w	r3, r3, #31
 800a576:	2201      	movs	r2, #1
 800a578:	fa02 f303 	lsl.w	r3, r2, r3
 800a57c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	6a1a      	ldr	r2, [r3, #32]
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	43db      	mvns	r3, r3
 800a586:	401a      	ands	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800a58c:	68fb      	ldr	r3, [r7, #12]
 800a58e:	6a1a      	ldr	r2, [r3, #32]
 800a590:	68bb      	ldr	r3, [r7, #8]
 800a592:	f003 031f 	and.w	r3, r3, #31
 800a596:	6879      	ldr	r1, [r7, #4]
 800a598:	fa01 f303 	lsl.w	r3, r1, r3
 800a59c:	431a      	orrs	r2, r3
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	621a      	str	r2, [r3, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	371c      	adds	r7, #28
 800a5a6:	46bd      	mov	sp, r7
 800a5a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ac:	4770      	bx	lr
	...

0800a5b0 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b083      	sub	sp, #12
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	4a1c      	ldr	r2, [pc, #112]	; (800a62c <TIM_ResetCallback+0x7c>)
 800a5bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	4a1b      	ldr	r2, [pc, #108]	; (800a630 <TIM_ResetCallback+0x80>)
 800a5c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	4a1a      	ldr	r2, [pc, #104]	; (800a634 <TIM_ResetCallback+0x84>)
 800a5cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	4a19      	ldr	r2, [pc, #100]	; (800a638 <TIM_ResetCallback+0x88>)
 800a5d4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	4a18      	ldr	r2, [pc, #96]	; (800a63c <TIM_ResetCallback+0x8c>)
 800a5dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	4a17      	ldr	r2, [pc, #92]	; (800a640 <TIM_ResetCallback+0x90>)
 800a5e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	4a16      	ldr	r2, [pc, #88]	; (800a644 <TIM_ResetCallback+0x94>)
 800a5ec:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	4a15      	ldr	r2, [pc, #84]	; (800a648 <TIM_ResetCallback+0x98>)
 800a5f4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	4a14      	ldr	r2, [pc, #80]	; (800a64c <TIM_ResetCallback+0x9c>)
 800a5fc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	4a13      	ldr	r2, [pc, #76]	; (800a650 <TIM_ResetCallback+0xa0>)
 800a604:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	4a12      	ldr	r2, [pc, #72]	; (800a654 <TIM_ResetCallback+0xa4>)
 800a60c:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a11      	ldr	r2, [pc, #68]	; (800a658 <TIM_ResetCallback+0xa8>)
 800a614:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a10      	ldr	r2, [pc, #64]	; (800a65c <TIM_ResetCallback+0xac>)
 800a61c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800a620:	bf00      	nop
 800a622:	370c      	adds	r7, #12
 800a624:	46bd      	mov	sp, r7
 800a626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62a:	4770      	bx	lr
 800a62c:	08009df1 	.word	0x08009df1
 800a630:	08009e05 	.word	0x08009e05
 800a634:	08009e7d 	.word	0x08009e7d
 800a638:	08009e91 	.word	0x08009e91
 800a63c:	08009e2d 	.word	0x08009e2d
 800a640:	08009e41 	.word	0x08009e41
 800a644:	08009e19 	.word	0x08009e19
 800a648:	08009e55 	.word	0x08009e55
 800a64c:	08009e69 	.word	0x08009e69
 800a650:	08009ea5 	.word	0x08009ea5
 800a654:	0800a7e1 	.word	0x0800a7e1
 800a658:	0800a7f5 	.word	0x0800a7f5
 800a65c:	0800a809 	.word	0x0800a809

0800a660 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a660:	b480      	push	{r7}
 800a662:	b085      	sub	sp, #20
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a670:	2b01      	cmp	r3, #1
 800a672:	d101      	bne.n	800a678 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a674:	2302      	movs	r3, #2
 800a676:	e050      	b.n	800a71a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	2201      	movs	r2, #1
 800a67c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	2202      	movs	r2, #2
 800a684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	681b      	ldr	r3, [r3, #0]
 800a68c:	685b      	ldr	r3, [r3, #4]
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	689b      	ldr	r3, [r3, #8]
 800a696:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	4a1c      	ldr	r2, [pc, #112]	; (800a728 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d018      	beq.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a6c4:	d013      	beq.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a18      	ldr	r2, [pc, #96]	; (800a72c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800a6cc:	4293      	cmp	r3, r2
 800a6ce:	d00e      	beq.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	4a16      	ldr	r2, [pc, #88]	; (800a730 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800a6d6:	4293      	cmp	r3, r2
 800a6d8:	d009      	beq.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	4a15      	ldr	r2, [pc, #84]	; (800a734 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800a6e0:	4293      	cmp	r3, r2
 800a6e2:	d004      	beq.n	800a6ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	4a13      	ldr	r2, [pc, #76]	; (800a738 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d10c      	bne.n	800a708 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6ee:	68bb      	ldr	r3, [r7, #8]
 800a6f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6f6:	683b      	ldr	r3, [r7, #0]
 800a6f8:	685b      	ldr	r3, [r3, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4313      	orrs	r3, r2
 800a6fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	68ba      	ldr	r2, [r7, #8]
 800a706:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2201      	movs	r2, #1
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	2200      	movs	r2, #0
 800a714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a718:	2300      	movs	r3, #0
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3714      	adds	r7, #20
 800a71e:	46bd      	mov	sp, r7
 800a720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a724:	4770      	bx	lr
 800a726:	bf00      	nop
 800a728:	40010000 	.word	0x40010000
 800a72c:	40000400 	.word	0x40000400
 800a730:	40000800 	.word	0x40000800
 800a734:	40000c00 	.word	0x40000c00
 800a738:	40014000 	.word	0x40014000

0800a73c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a73c:	b480      	push	{r7}
 800a73e:	b085      	sub	sp, #20
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a750:	2b01      	cmp	r3, #1
 800a752:	d101      	bne.n	800a758 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a754:	2302      	movs	r3, #2
 800a756:	e03d      	b.n	800a7d4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2201      	movs	r2, #1
 800a75c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a766:	683b      	ldr	r3, [r7, #0]
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	4313      	orrs	r3, r2
 800a76c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	4313      	orrs	r3, r2
 800a77a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a782:	683b      	ldr	r3, [r7, #0]
 800a784:	685b      	ldr	r3, [r3, #4]
 800a786:	4313      	orrs	r3, r2
 800a788:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a78a:	68fb      	ldr	r3, [r7, #12]
 800a78c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a790:	683b      	ldr	r3, [r7, #0]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	4313      	orrs	r3, r2
 800a796:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a79e:	683b      	ldr	r3, [r7, #0]
 800a7a0:	691b      	ldr	r3, [r3, #16]
 800a7a2:	4313      	orrs	r3, r2
 800a7a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	695b      	ldr	r3, [r3, #20]
 800a7b0:	4313      	orrs	r3, r2
 800a7b2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a7ba:	683b      	ldr	r3, [r7, #0]
 800a7bc:	69db      	ldr	r3, [r3, #28]
 800a7be:	4313      	orrs	r3, r2
 800a7c0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	68fa      	ldr	r2, [r7, #12]
 800a7c8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2200      	movs	r2, #0
 800a7ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7d2:	2300      	movs	r3, #0
}
 800a7d4:	4618      	mov	r0, r3
 800a7d6:	3714      	adds	r7, #20
 800a7d8:	46bd      	mov	sp, r7
 800a7da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7de:	4770      	bx	lr

0800a7e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a7e0:	b480      	push	{r7}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a7e8:	bf00      	nop
 800a7ea:	370c      	adds	r7, #12
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f2:	4770      	bx	lr

0800a7f4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b083      	sub	sp, #12
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800a7fc:	bf00      	nop
 800a7fe:	370c      	adds	r7, #12
 800a800:	46bd      	mov	sp, r7
 800a802:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a806:	4770      	bx	lr

0800a808 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b082      	sub	sp, #8
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d101      	bne.n	800a82e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a82a:	2301      	movs	r3, #1
 800a82c:	e04a      	b.n	800a8c4 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a834:	b2db      	uxtb	r3, r3
 800a836:	2b00      	cmp	r3, #0
 800a838:	d111      	bne.n	800a85e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f000 fd2c 	bl	800b2a0 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d102      	bne.n	800a856 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	4a1e      	ldr	r2, [pc, #120]	; (800a8cc <HAL_UART_Init+0xb0>)
 800a854:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2224      	movs	r2, #36	; 0x24
 800a862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	68da      	ldr	r2, [r3, #12]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a874:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800a876:	6878      	ldr	r0, [r7, #4]
 800a878:	f000 fff6 	bl	800b868 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	691a      	ldr	r2, [r3, #16]
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a88a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	681b      	ldr	r3, [r3, #0]
 800a890:	695a      	ldr	r2, [r3, #20]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a89a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	68da      	ldr	r2, [r3, #12]
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a8aa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	2220      	movs	r2, #32
 800a8b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	2220      	movs	r2, #32
 800a8be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800a8c2:	2300      	movs	r3, #0
}
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	3708      	adds	r7, #8
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	bd80      	pop	{r7, pc}
 800a8cc:	080043e5 	.word	0x080043e5

0800a8d0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b087      	sub	sp, #28
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	460b      	mov	r3, r1
 800a8da:	607a      	str	r2, [r7, #4]
 800a8dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d107      	bne.n	800a8f8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a8e8:	68fb      	ldr	r3, [r7, #12]
 800a8ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a8ec:	f043 0220 	orr.w	r2, r3, #32
 800a8f0:	68fb      	ldr	r3, [r7, #12]
 800a8f2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	e08c      	b.n	800aa12 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800a8f8:	68fb      	ldr	r3, [r7, #12]
 800a8fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a8fe:	2b01      	cmp	r3, #1
 800a900:	d101      	bne.n	800a906 <HAL_UART_RegisterCallback+0x36>
 800a902:	2302      	movs	r3, #2
 800a904:	e085      	b.n	800aa12 <HAL_UART_RegisterCallback+0x142>
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	2201      	movs	r2, #1
 800a90a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a914:	b2db      	uxtb	r3, r3
 800a916:	2b20      	cmp	r3, #32
 800a918:	d151      	bne.n	800a9be <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800a91a:	7afb      	ldrb	r3, [r7, #11]
 800a91c:	2b0c      	cmp	r3, #12
 800a91e:	d845      	bhi.n	800a9ac <HAL_UART_RegisterCallback+0xdc>
 800a920:	a201      	add	r2, pc, #4	; (adr r2, 800a928 <HAL_UART_RegisterCallback+0x58>)
 800a922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a926:	bf00      	nop
 800a928:	0800a95d 	.word	0x0800a95d
 800a92c:	0800a965 	.word	0x0800a965
 800a930:	0800a96d 	.word	0x0800a96d
 800a934:	0800a975 	.word	0x0800a975
 800a938:	0800a97d 	.word	0x0800a97d
 800a93c:	0800a985 	.word	0x0800a985
 800a940:	0800a98d 	.word	0x0800a98d
 800a944:	0800a995 	.word	0x0800a995
 800a948:	0800a9ad 	.word	0x0800a9ad
 800a94c:	0800a9ad 	.word	0x0800a9ad
 800a950:	0800a9ad 	.word	0x0800a9ad
 800a954:	0800a99d 	.word	0x0800a99d
 800a958:	0800a9a5 	.word	0x0800a9a5
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800a95c:	68fb      	ldr	r3, [r7, #12]
 800a95e:	687a      	ldr	r2, [r7, #4]
 800a960:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800a962:	e051      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	687a      	ldr	r2, [r7, #4]
 800a968:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a96a:	e04d      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a972:	e049      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a97a:	e045      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	687a      	ldr	r2, [r7, #4]
 800a980:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a982:	e041      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	687a      	ldr	r2, [r7, #4]
 800a988:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a98a:	e03d      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a992:	e039      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	687a      	ldr	r2, [r7, #4]
 800a998:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a99a:	e035      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	687a      	ldr	r2, [r7, #4]
 800a9a0:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9a2:	e031      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	687a      	ldr	r2, [r7, #4]
 800a9a8:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a9aa:	e02d      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9b0:	f043 0220 	orr.w	r2, r3, #32
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a9b8:	2301      	movs	r3, #1
 800a9ba:	75fb      	strb	r3, [r7, #23]
        break;
 800a9bc:	e024      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9c4:	b2db      	uxtb	r3, r3
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d116      	bne.n	800a9f8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800a9ca:	7afb      	ldrb	r3, [r7, #11]
 800a9cc:	2b0b      	cmp	r3, #11
 800a9ce:	d002      	beq.n	800a9d6 <HAL_UART_RegisterCallback+0x106>
 800a9d0:	2b0c      	cmp	r3, #12
 800a9d2:	d004      	beq.n	800a9de <HAL_UART_RegisterCallback+0x10e>
 800a9d4:	e007      	b.n	800a9e6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a9dc:	e014      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	687a      	ldr	r2, [r7, #4]
 800a9e2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a9e4:	e010      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ea:	f043 0220 	orr.w	r2, r3, #32
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800a9f2:	2301      	movs	r3, #1
 800a9f4:	75fb      	strb	r3, [r7, #23]
        break;
 800a9f6:	e007      	b.n	800aa08 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9fc:	f043 0220 	orr.w	r2, r3, #32
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800aa04:	2301      	movs	r3, #1
 800aa06:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aa10:	7dfb      	ldrb	r3, [r7, #23]
}
 800aa12:	4618      	mov	r0, r3
 800aa14:	371c      	adds	r7, #28
 800aa16:	46bd      	mov	sp, r7
 800aa18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa1c:	4770      	bx	lr
 800aa1e:	bf00      	nop

0800aa20 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa2e:	68fb      	ldr	r3, [r7, #12]
 800aa30:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800aa34:	b2db      	uxtb	r3, r3
 800aa36:	2b20      	cmp	r3, #32
 800aa38:	d11d      	bne.n	800aa76 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa3a:	68bb      	ldr	r3, [r7, #8]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d002      	beq.n	800aa46 <HAL_UART_Receive_IT+0x26>
 800aa40:	88fb      	ldrh	r3, [r7, #6]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d101      	bne.n	800aa4a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800aa46:	2301      	movs	r3, #1
 800aa48:	e016      	b.n	800aa78 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa50:	2b01      	cmp	r3, #1
 800aa52:	d101      	bne.n	800aa58 <HAL_UART_Receive_IT+0x38>
 800aa54:	2302      	movs	r3, #2
 800aa56:	e00f      	b.n	800aa78 <HAL_UART_Receive_IT+0x58>
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800aa66:	88fb      	ldrh	r3, [r7, #6]
 800aa68:	461a      	mov	r2, r3
 800aa6a:	68b9      	ldr	r1, [r7, #8]
 800aa6c:	68f8      	ldr	r0, [r7, #12]
 800aa6e:	f000 fcf7 	bl	800b460 <UART_Start_Receive_IT>
 800aa72:	4603      	mov	r3, r0
 800aa74:	e000      	b.n	800aa78 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800aa76:	2302      	movs	r3, #2
  }
}
 800aa78:	4618      	mov	r0, r3
 800aa7a:	3710      	adds	r7, #16
 800aa7c:	46bd      	mov	sp, r7
 800aa7e:	bd80      	pop	{r7, pc}

0800aa80 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b08c      	sub	sp, #48	; 0x30
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	60f8      	str	r0, [r7, #12]
 800aa88:	60b9      	str	r1, [r7, #8]
 800aa8a:	4613      	mov	r3, r2
 800aa8c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa94:	b2db      	uxtb	r3, r3
 800aa96:	2b20      	cmp	r3, #32
 800aa98:	d165      	bne.n	800ab66 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa9a:	68bb      	ldr	r3, [r7, #8]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d002      	beq.n	800aaa6 <HAL_UART_Transmit_DMA+0x26>
 800aaa0:	88fb      	ldrh	r3, [r7, #6]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d101      	bne.n	800aaaa <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aaa6:	2301      	movs	r3, #1
 800aaa8:	e05e      	b.n	800ab68 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800aaaa:	68fb      	ldr	r3, [r7, #12]
 800aaac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aab0:	2b01      	cmp	r3, #1
 800aab2:	d101      	bne.n	800aab8 <HAL_UART_Transmit_DMA+0x38>
 800aab4:	2302      	movs	r3, #2
 800aab6:	e057      	b.n	800ab68 <HAL_UART_Transmit_DMA+0xe8>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	2201      	movs	r2, #1
 800aabc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800aac0:	68ba      	ldr	r2, [r7, #8]
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	88fa      	ldrh	r2, [r7, #6]
 800aaca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	88fa      	ldrh	r2, [r7, #6]
 800aad0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aad2:	68fb      	ldr	r3, [r7, #12]
 800aad4:	2200      	movs	r2, #0
 800aad6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	2221      	movs	r2, #33	; 0x21
 800aadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aae4:	4a22      	ldr	r2, [pc, #136]	; (800ab70 <HAL_UART_Transmit_DMA+0xf0>)
 800aae6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaec:	4a21      	ldr	r2, [pc, #132]	; (800ab74 <HAL_UART_Transmit_DMA+0xf4>)
 800aaee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aaf4:	4a20      	ldr	r2, [pc, #128]	; (800ab78 <HAL_UART_Transmit_DMA+0xf8>)
 800aaf6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aafc:	2200      	movs	r2, #0
 800aafe:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800ab00:	f107 0308 	add.w	r3, r7, #8
 800ab04:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	6819      	ldr	r1, [r3, #0]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	3304      	adds	r3, #4
 800ab14:	461a      	mov	r2, r3
 800ab16:	88fb      	ldrh	r3, [r7, #6]
 800ab18:	f7fa fc46 	bl	80053a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ab24:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ab2e:	68fb      	ldr	r3, [r7, #12]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	3314      	adds	r3, #20
 800ab34:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab36:	69bb      	ldr	r3, [r7, #24]
 800ab38:	e853 3f00 	ldrex	r3, [r3]
 800ab3c:	617b      	str	r3, [r7, #20]
   return(result);
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab44:	62bb      	str	r3, [r7, #40]	; 0x28
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	681b      	ldr	r3, [r3, #0]
 800ab4a:	3314      	adds	r3, #20
 800ab4c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ab4e:	627a      	str	r2, [r7, #36]	; 0x24
 800ab50:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ab52:	6a39      	ldr	r1, [r7, #32]
 800ab54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab56:	e841 2300 	strex	r3, r2, [r1]
 800ab5a:	61fb      	str	r3, [r7, #28]
   return(result);
 800ab5c:	69fb      	ldr	r3, [r7, #28]
 800ab5e:	2b00      	cmp	r3, #0
 800ab60:	d1e5      	bne.n	800ab2e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800ab62:	2300      	movs	r3, #0
 800ab64:	e000      	b.n	800ab68 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800ab66:	2302      	movs	r3, #2
  }
}
 800ab68:	4618      	mov	r0, r3
 800ab6a:	3730      	adds	r7, #48	; 0x30
 800ab6c:	46bd      	mov	sp, r7
 800ab6e:	bd80      	pop	{r7, pc}
 800ab70:	0800b311 	.word	0x0800b311
 800ab74:	0800b3ad 	.word	0x0800b3ad
 800ab78:	0800b3cb 	.word	0x0800b3cb

0800ab7c <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800ab7c:	b580      	push	{r7, lr}
 800ab7e:	b09a      	sub	sp, #104	; 0x68
 800ab80:	af00      	add	r7, sp, #0
 800ab82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	330c      	adds	r3, #12
 800ab8a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ab8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ab8e:	e853 3f00 	ldrex	r3, [r3]
 800ab92:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800ab94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ab96:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ab9a:	667b      	str	r3, [r7, #100]	; 0x64
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	330c      	adds	r3, #12
 800aba2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800aba4:	657a      	str	r2, [r7, #84]	; 0x54
 800aba6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800abaa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800abac:	e841 2300 	strex	r3, r2, [r1]
 800abb0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800abb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	d1e5      	bne.n	800ab84 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	3314      	adds	r3, #20
 800abbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abc2:	e853 3f00 	ldrex	r3, [r3]
 800abc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800abc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abca:	f023 0301 	bic.w	r3, r3, #1
 800abce:	663b      	str	r3, [r7, #96]	; 0x60
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	3314      	adds	r3, #20
 800abd6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800abd8:	643a      	str	r2, [r7, #64]	; 0x40
 800abda:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800abdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800abde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800abe0:	e841 2300 	strex	r3, r2, [r1]
 800abe4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800abe6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe8:	2b00      	cmp	r3, #0
 800abea:	d1e5      	bne.n	800abb8 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abf0:	2b01      	cmp	r3, #1
 800abf2:	d119      	bne.n	800ac28 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	330c      	adds	r3, #12
 800abfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800abfc:	6a3b      	ldr	r3, [r7, #32]
 800abfe:	e853 3f00 	ldrex	r3, [r3]
 800ac02:	61fb      	str	r3, [r7, #28]
   return(result);
 800ac04:	69fb      	ldr	r3, [r7, #28]
 800ac06:	f023 0310 	bic.w	r3, r3, #16
 800ac0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	330c      	adds	r3, #12
 800ac12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac14:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ac16:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ac1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ac1c:	e841 2300 	strex	r3, r2, [r1]
 800ac20:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ac22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	d1e5      	bne.n	800abf4 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	695b      	ldr	r3, [r3, #20]
 800ac2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac32:	2b40      	cmp	r3, #64	; 0x40
 800ac34:	d136      	bne.n	800aca4 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	3314      	adds	r3, #20
 800ac3c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	e853 3f00 	ldrex	r3, [r3]
 800ac44:	60bb      	str	r3, [r7, #8]
   return(result);
 800ac46:	68bb      	ldr	r3, [r7, #8]
 800ac48:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ac4c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	3314      	adds	r3, #20
 800ac54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ac56:	61ba      	str	r2, [r7, #24]
 800ac58:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5a:	6979      	ldr	r1, [r7, #20]
 800ac5c:	69ba      	ldr	r2, [r7, #24]
 800ac5e:	e841 2300 	strex	r3, r2, [r1]
 800ac62:	613b      	str	r3, [r7, #16]
   return(result);
 800ac64:	693b      	ldr	r3, [r7, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d1e5      	bne.n	800ac36 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d018      	beq.n	800aca4 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac76:	2200      	movs	r2, #0
 800ac78:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac7e:	4618      	mov	r0, r3
 800ac80:	f7fa fbea 	bl	8005458 <HAL_DMA_Abort>
 800ac84:	4603      	mov	r3, r0
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d00c      	beq.n	800aca4 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f7fa fe0c 	bl	80058ac <HAL_DMA_GetError>
 800ac94:	4603      	mov	r3, r0
 800ac96:	2b20      	cmp	r3, #32
 800ac98:	d104      	bne.n	800aca4 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	2210      	movs	r2, #16
 800ac9e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800aca0:	2303      	movs	r3, #3
 800aca2:	e00a      	b.n	800acba <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	2200      	movs	r2, #0
 800aca8:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	2220      	movs	r2, #32
 800acae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	2200      	movs	r2, #0
 800acb6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800acb8:	2300      	movs	r3, #0
}
 800acba:	4618      	mov	r0, r3
 800acbc:	3768      	adds	r7, #104	; 0x68
 800acbe:	46bd      	mov	sp, r7
 800acc0:	bd80      	pop	{r7, pc}
	...

0800acc4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	b0ba      	sub	sp, #232	; 0xe8
 800acc8:	af00      	add	r7, sp, #0
 800acca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	68db      	ldr	r3, [r3, #12]
 800acdc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	695b      	ldr	r3, [r3, #20]
 800ace6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800acea:	2300      	movs	r3, #0
 800acec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800acf0:	2300      	movs	r3, #0
 800acf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800acf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800acfa:	f003 030f 	and.w	r3, r3, #15
 800acfe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800ad02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d10f      	bne.n	800ad2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ad0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad0e:	f003 0320 	and.w	r3, r3, #32
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d009      	beq.n	800ad2a <HAL_UART_IRQHandler+0x66>
 800ad16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad1a:	f003 0320 	and.w	r3, r3, #32
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	d003      	beq.n	800ad2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800ad22:	6878      	ldr	r0, [r7, #4]
 800ad24:	f000 fce3 	bl	800b6ee <UART_Receive_IT>
      return;
 800ad28:	e25b      	b.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800ad2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	f000 80e1 	beq.w	800aef6 <HAL_UART_IRQHandler+0x232>
 800ad34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad38:	f003 0301 	and.w	r3, r3, #1
 800ad3c:	2b00      	cmp	r3, #0
 800ad3e:	d106      	bne.n	800ad4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800ad40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad44:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ad48:	2b00      	cmp	r3, #0
 800ad4a:	f000 80d4 	beq.w	800aef6 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800ad4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad52:	f003 0301 	and.w	r3, r3, #1
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d00b      	beq.n	800ad72 <HAL_UART_IRQHandler+0xae>
 800ad5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ad5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d005      	beq.n	800ad72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad6a:	f043 0201 	orr.w	r2, r3, #1
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad76:	f003 0304 	and.w	r3, r3, #4
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	d00b      	beq.n	800ad96 <HAL_UART_IRQHandler+0xd2>
 800ad7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ad82:	f003 0301 	and.w	r3, r3, #1
 800ad86:	2b00      	cmp	r3, #0
 800ad88:	d005      	beq.n	800ad96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad8e:	f043 0202 	orr.w	r2, r3, #2
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800ad96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ad9a:	f003 0302 	and.w	r3, r3, #2
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d00b      	beq.n	800adba <HAL_UART_IRQHandler+0xf6>
 800ada2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ada6:	f003 0301 	and.w	r3, r3, #1
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d005      	beq.n	800adba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adb2:	f043 0204 	orr.w	r2, r3, #4
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800adba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adbe:	f003 0308 	and.w	r3, r3, #8
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d011      	beq.n	800adea <HAL_UART_IRQHandler+0x126>
 800adc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800adca:	f003 0320 	and.w	r3, r3, #32
 800adce:	2b00      	cmp	r3, #0
 800add0:	d105      	bne.n	800adde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800add2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800add6:	f003 0301 	and.w	r3, r3, #1
 800adda:	2b00      	cmp	r3, #0
 800addc:	d005      	beq.n	800adea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ade2:	f043 0208 	orr.w	r2, r3, #8
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adee:	2b00      	cmp	r3, #0
 800adf0:	f000 81f2 	beq.w	800b1d8 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800adf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800adf8:	f003 0320 	and.w	r3, r3, #32
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d008      	beq.n	800ae12 <HAL_UART_IRQHandler+0x14e>
 800ae00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ae04:	f003 0320 	and.w	r3, r3, #32
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	d002      	beq.n	800ae12 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ae0c:	6878      	ldr	r0, [r7, #4]
 800ae0e:	f000 fc6e 	bl	800b6ee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	695b      	ldr	r3, [r3, #20]
 800ae18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae1c:	2b40      	cmp	r3, #64	; 0x40
 800ae1e:	bf0c      	ite	eq
 800ae20:	2301      	moveq	r3, #1
 800ae22:	2300      	movne	r3, #0
 800ae24:	b2db      	uxtb	r3, r3
 800ae26:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae2e:	f003 0308 	and.w	r3, r3, #8
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d103      	bne.n	800ae3e <HAL_UART_IRQHandler+0x17a>
 800ae36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ae3a:	2b00      	cmp	r3, #0
 800ae3c:	d051      	beq.n	800aee2 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ae3e:	6878      	ldr	r0, [r7, #4]
 800ae40:	f000 fb74 	bl	800b52c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	695b      	ldr	r3, [r3, #20]
 800ae4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae4e:	2b40      	cmp	r3, #64	; 0x40
 800ae50:	d142      	bne.n	800aed8 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3314      	adds	r3, #20
 800ae58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ae5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ae60:	e853 3f00 	ldrex	r3, [r3]
 800ae64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ae68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	3314      	adds	r3, #20
 800ae7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800ae7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ae82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ae86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800ae8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800ae8e:	e841 2300 	strex	r3, r2, [r1]
 800ae92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800ae96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d1d9      	bne.n	800ae52 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aea2:	2b00      	cmp	r3, #0
 800aea4:	d013      	beq.n	800aece <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeaa:	4a7f      	ldr	r2, [pc, #508]	; (800b0a8 <HAL_UART_IRQHandler+0x3e4>)
 800aeac:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	f7fa fb40 	bl	8005538 <HAL_DMA_Abort_IT>
 800aeb8:	4603      	mov	r3, r0
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d019      	beq.n	800aef2 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aec4:	687a      	ldr	r2, [r7, #4]
 800aec6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800aec8:	4610      	mov	r0, r2
 800aeca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aecc:	e011      	b.n	800aef2 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aed2:	6878      	ldr	r0, [r7, #4]
 800aed4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aed6:	e00c      	b.n	800aef2 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aedc:	6878      	ldr	r0, [r7, #4]
 800aede:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aee0:	e007      	b.n	800aef2 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aee6:	6878      	ldr	r0, [r7, #4]
 800aee8:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2200      	movs	r2, #0
 800aeee:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800aef0:	e172      	b.n	800b1d8 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aef2:	bf00      	nop
    return;
 800aef4:	e170      	b.n	800b1d8 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aefa:	2b01      	cmp	r3, #1
 800aefc:	f040 814c 	bne.w	800b198 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800af00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800af04:	f003 0310 	and.w	r3, r3, #16
 800af08:	2b00      	cmp	r3, #0
 800af0a:	f000 8145 	beq.w	800b198 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800af0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800af12:	f003 0310 	and.w	r3, r3, #16
 800af16:	2b00      	cmp	r3, #0
 800af18:	f000 813e 	beq.w	800b198 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800af1c:	2300      	movs	r3, #0
 800af1e:	60bb      	str	r3, [r7, #8]
 800af20:	687b      	ldr	r3, [r7, #4]
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	60bb      	str	r3, [r7, #8]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	685b      	ldr	r3, [r3, #4]
 800af2e:	60bb      	str	r3, [r7, #8]
 800af30:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	695b      	ldr	r3, [r3, #20]
 800af38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af3c:	2b40      	cmp	r3, #64	; 0x40
 800af3e:	f040 80b5 	bne.w	800b0ac <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af46:	681b      	ldr	r3, [r3, #0]
 800af48:	685b      	ldr	r3, [r3, #4]
 800af4a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800af4e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 8142 	beq.w	800b1dc <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800af5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af60:	429a      	cmp	r2, r3
 800af62:	f080 813b 	bcs.w	800b1dc <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800af6c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af72:	69db      	ldr	r3, [r3, #28]
 800af74:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af78:	f000 8088 	beq.w	800b08c <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	681b      	ldr	r3, [r3, #0]
 800af80:	330c      	adds	r3, #12
 800af82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af86:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800af92:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800af96:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800af9a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	330c      	adds	r3, #12
 800afa4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800afa8:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800afac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afb0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800afb4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800afb8:	e841 2300 	strex	r3, r2, [r1]
 800afbc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800afc0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d1d9      	bne.n	800af7c <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	3314      	adds	r3, #20
 800afce:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800afd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800afd2:	e853 3f00 	ldrex	r3, [r3]
 800afd6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800afd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afda:	f023 0301 	bic.w	r3, r3, #1
 800afde:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	3314      	adds	r3, #20
 800afe8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800afec:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800aff0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800aff2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800aff4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800aff8:	e841 2300 	strex	r3, r2, [r1]
 800affc:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800affe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b000:	2b00      	cmp	r3, #0
 800b002:	d1e1      	bne.n	800afc8 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	3314      	adds	r3, #20
 800b00a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b00c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b00e:	e853 3f00 	ldrex	r3, [r3]
 800b012:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b014:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b016:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b01a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	3314      	adds	r3, #20
 800b024:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b028:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b02a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b02c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b02e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b030:	e841 2300 	strex	r3, r2, [r1]
 800b034:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b036:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d1e3      	bne.n	800b004 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	2220      	movs	r2, #32
 800b040:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	681b      	ldr	r3, [r3, #0]
 800b04e:	330c      	adds	r3, #12
 800b050:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b052:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b054:	e853 3f00 	ldrex	r3, [r3]
 800b058:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b05a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b05c:	f023 0310 	bic.w	r3, r3, #16
 800b060:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	330c      	adds	r3, #12
 800b06a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b06e:	65ba      	str	r2, [r7, #88]	; 0x58
 800b070:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b072:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b074:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b076:	e841 2300 	strex	r3, r2, [r1]
 800b07a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b07c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b07e:	2b00      	cmp	r3, #0
 800b080:	d1e3      	bne.n	800b04a <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b086:	4618      	mov	r0, r3
 800b088:	f7fa f9e6 	bl	8005458 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b090:	687a      	ldr	r2, [r7, #4]
 800b092:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b094:	687a      	ldr	r2, [r7, #4]
 800b096:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b098:	b292      	uxth	r2, r2
 800b09a:	1a8a      	subs	r2, r1, r2
 800b09c:	b292      	uxth	r2, r2
 800b09e:	4611      	mov	r1, r2
 800b0a0:	6878      	ldr	r0, [r7, #4]
 800b0a2:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b0a4:	e09a      	b.n	800b1dc <HAL_UART_IRQHandler+0x518>
 800b0a6:	bf00      	nop
 800b0a8:	0800b5f3 	.word	0x0800b5f3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0b4:	b29b      	uxth	r3, r3
 800b0b6:	1ad3      	subs	r3, r2, r3
 800b0b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b0c0:	b29b      	uxth	r3, r3
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	f000 808c 	beq.w	800b1e0 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b0c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 8087 	beq.w	800b1e0 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	330c      	adds	r3, #12
 800b0d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b0da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0dc:	e853 3f00 	ldrex	r3, [r3]
 800b0e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b0e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b0e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	330c      	adds	r3, #12
 800b0f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b0f6:	647a      	str	r2, [r7, #68]	; 0x44
 800b0f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b0fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b0fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b0fe:	e841 2300 	strex	r3, r2, [r1]
 800b102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e3      	bne.n	800b0d2 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	3314      	adds	r3, #20
 800b110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b114:	e853 3f00 	ldrex	r3, [r3]
 800b118:	623b      	str	r3, [r7, #32]
   return(result);
 800b11a:	6a3b      	ldr	r3, [r7, #32]
 800b11c:	f023 0301 	bic.w	r3, r3, #1
 800b120:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	3314      	adds	r3, #20
 800b12a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b12e:	633a      	str	r2, [r7, #48]	; 0x30
 800b130:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b132:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b136:	e841 2300 	strex	r3, r2, [r1]
 800b13a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d1e3      	bne.n	800b10a <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	2220      	movs	r2, #32
 800b146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	2200      	movs	r2, #0
 800b14e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	681b      	ldr	r3, [r3, #0]
 800b154:	330c      	adds	r3, #12
 800b156:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	e853 3f00 	ldrex	r3, [r3]
 800b15e:	60fb      	str	r3, [r7, #12]
   return(result);
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	f023 0310 	bic.w	r3, r3, #16
 800b166:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	330c      	adds	r3, #12
 800b170:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b174:	61fa      	str	r2, [r7, #28]
 800b176:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b178:	69b9      	ldr	r1, [r7, #24]
 800b17a:	69fa      	ldr	r2, [r7, #28]
 800b17c:	e841 2300 	strex	r3, r2, [r1]
 800b180:	617b      	str	r3, [r7, #20]
   return(result);
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d1e3      	bne.n	800b150 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b18c:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b190:	4611      	mov	r1, r2
 800b192:	6878      	ldr	r0, [r7, #4]
 800b194:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b196:	e023      	b.n	800b1e0 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b19c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1a0:	2b00      	cmp	r3, #0
 800b1a2:	d009      	beq.n	800b1b8 <HAL_UART_IRQHandler+0x4f4>
 800b1a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1ac:	2b00      	cmp	r3, #0
 800b1ae:	d003      	beq.n	800b1b8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b1b0:	6878      	ldr	r0, [r7, #4]
 800b1b2:	f000 fa33 	bl	800b61c <UART_Transmit_IT>
    return;
 800b1b6:	e014      	b.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b1b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b1bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d00e      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
 800b1c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b1c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d008      	beq.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b1d0:	6878      	ldr	r0, [r7, #4]
 800b1d2:	f000 fa73 	bl	800b6bc <UART_EndTransmit_IT>
    return;
 800b1d6:	e004      	b.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
    return;
 800b1d8:	bf00      	nop
 800b1da:	e002      	b.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1dc:	bf00      	nop
 800b1de:	e000      	b.n	800b1e2 <HAL_UART_IRQHandler+0x51e>
      return;
 800b1e0:	bf00      	nop
  }
}
 800b1e2:	37e8      	adds	r7, #232	; 0xe8
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b1e8:	b480      	push	{r7}
 800b1ea:	b083      	sub	sp, #12
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800b1f0:	bf00      	nop
 800b1f2:	370c      	adds	r7, #12
 800b1f4:	46bd      	mov	sp, r7
 800b1f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1fa:	4770      	bx	lr

0800b1fc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b1fc:	b480      	push	{r7}
 800b1fe:	b083      	sub	sp, #12
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800b204:	bf00      	nop
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800b210:	b480      	push	{r7}
 800b212:	b083      	sub	sp, #12
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800b218:	bf00      	nop
 800b21a:	370c      	adds	r7, #12
 800b21c:	46bd      	mov	sp, r7
 800b21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b222:	4770      	bx	lr

0800b224 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b224:	b480      	push	{r7}
 800b226:	b083      	sub	sp, #12
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b22c:	bf00      	nop
 800b22e:	370c      	adds	r7, #12
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr

0800b238 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b238:	b480      	push	{r7}
 800b23a:	b083      	sub	sp, #12
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800b240:	bf00      	nop
 800b242:	370c      	adds	r7, #12
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b083      	sub	sp, #12
 800b250:	af00      	add	r7, sp, #0
 800b252:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b254:	bf00      	nop
 800b256:	370c      	adds	r7, #12
 800b258:	46bd      	mov	sp, r7
 800b25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b25e:	4770      	bx	lr

0800b260 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b268:	bf00      	nop
 800b26a:	370c      	adds	r7, #12
 800b26c:	46bd      	mov	sp, r7
 800b26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b272:	4770      	bx	lr

0800b274 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b274:	b480      	push	{r7}
 800b276:	b083      	sub	sp, #12
 800b278:	af00      	add	r7, sp, #0
 800b27a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b27c:	bf00      	nop
 800b27e:	370c      	adds	r7, #12
 800b280:	46bd      	mov	sp, r7
 800b282:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b286:	4770      	bx	lr

0800b288 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b288:	b480      	push	{r7}
 800b28a:	b083      	sub	sp, #12
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
 800b290:	460b      	mov	r3, r1
 800b292:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b294:	bf00      	nop
 800b296:	370c      	adds	r7, #12
 800b298:	46bd      	mov	sp, r7
 800b29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b29e:	4770      	bx	lr

0800b2a0 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b083      	sub	sp, #12
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	4a10      	ldr	r2, [pc, #64]	; (800b2ec <UART_InitCallbacksToDefault+0x4c>)
 800b2ac:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4a0f      	ldr	r2, [pc, #60]	; (800b2f0 <UART_InitCallbacksToDefault+0x50>)
 800b2b2:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	4a0f      	ldr	r2, [pc, #60]	; (800b2f4 <UART_InitCallbacksToDefault+0x54>)
 800b2b8:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	4a0e      	ldr	r2, [pc, #56]	; (800b2f8 <UART_InitCallbacksToDefault+0x58>)
 800b2be:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	4a0e      	ldr	r2, [pc, #56]	; (800b2fc <UART_InitCallbacksToDefault+0x5c>)
 800b2c4:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a0d      	ldr	r2, [pc, #52]	; (800b300 <UART_InitCallbacksToDefault+0x60>)
 800b2ca:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4a0d      	ldr	r2, [pc, #52]	; (800b304 <UART_InitCallbacksToDefault+0x64>)
 800b2d0:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	4a0c      	ldr	r2, [pc, #48]	; (800b308 <UART_InitCallbacksToDefault+0x68>)
 800b2d6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	4a0c      	ldr	r2, [pc, #48]	; (800b30c <UART_InitCallbacksToDefault+0x6c>)
 800b2dc:	669a      	str	r2, [r3, #104]	; 0x68

}
 800b2de:	bf00      	nop
 800b2e0:	370c      	adds	r7, #12
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e8:	4770      	bx	lr
 800b2ea:	bf00      	nop
 800b2ec:	0800b1fd 	.word	0x0800b1fd
 800b2f0:	0800b1e9 	.word	0x0800b1e9
 800b2f4:	0800b225 	.word	0x0800b225
 800b2f8:	0800b211 	.word	0x0800b211
 800b2fc:	0800b239 	.word	0x0800b239
 800b300:	0800b24d 	.word	0x0800b24d
 800b304:	0800b261 	.word	0x0800b261
 800b308:	0800b275 	.word	0x0800b275
 800b30c:	0800b289 	.word	0x0800b289

0800b310 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b090      	sub	sp, #64	; 0x40
 800b314:	af00      	add	r7, sp, #0
 800b316:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b31c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	681b      	ldr	r3, [r3, #0]
 800b324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d137      	bne.n	800b39c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800b32c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b32e:	2200      	movs	r2, #0
 800b330:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3314      	adds	r3, #20
 800b338:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b33c:	e853 3f00 	ldrex	r3, [r3]
 800b340:	623b      	str	r3, [r7, #32]
   return(result);
 800b342:	6a3b      	ldr	r3, [r7, #32]
 800b344:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b348:	63bb      	str	r3, [r7, #56]	; 0x38
 800b34a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	3314      	adds	r3, #20
 800b350:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b352:	633a      	str	r2, [r7, #48]	; 0x30
 800b354:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b356:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b358:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b35a:	e841 2300 	strex	r3, r2, [r1]
 800b35e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b360:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b362:	2b00      	cmp	r3, #0
 800b364:	d1e5      	bne.n	800b332 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	330c      	adds	r3, #12
 800b36c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	e853 3f00 	ldrex	r3, [r3]
 800b374:	60fb      	str	r3, [r7, #12]
   return(result);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b37c:	637b      	str	r3, [r7, #52]	; 0x34
 800b37e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	330c      	adds	r3, #12
 800b384:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b386:	61fa      	str	r2, [r7, #28]
 800b388:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b38a:	69b9      	ldr	r1, [r7, #24]
 800b38c:	69fa      	ldr	r2, [r7, #28]
 800b38e:	e841 2300 	strex	r3, r2, [r1]
 800b392:	617b      	str	r3, [r7, #20]
   return(result);
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1e5      	bne.n	800b366 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800b39a:	e003      	b.n	800b3a4 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800b39c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b39e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b3a0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800b3a2:	4798      	blx	r3
}
 800b3a4:	bf00      	nop
 800b3a6:	3740      	adds	r7, #64	; 0x40
 800b3a8:	46bd      	mov	sp, r7
 800b3aa:	bd80      	pop	{r7, pc}

0800b3ac <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b3ac:	b580      	push	{r7, lr}
 800b3ae:	b084      	sub	sp, #16
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3b8:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800b3ba:	68fb      	ldr	r3, [r7, #12]
 800b3bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3be:	68f8      	ldr	r0, [r7, #12]
 800b3c0:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3c2:	bf00      	nop
 800b3c4:	3710      	adds	r7, #16
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	bd80      	pop	{r7, pc}

0800b3ca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800b3ca:	b580      	push	{r7, lr}
 800b3cc:	b084      	sub	sp, #16
 800b3ce:	af00      	add	r7, sp, #0
 800b3d0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3da:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800b3dc:	68bb      	ldr	r3, [r7, #8]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	695b      	ldr	r3, [r3, #20]
 800b3e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3e6:	2b80      	cmp	r3, #128	; 0x80
 800b3e8:	bf0c      	ite	eq
 800b3ea:	2301      	moveq	r3, #1
 800b3ec:	2300      	movne	r3, #0
 800b3ee:	b2db      	uxtb	r3, r3
 800b3f0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b3f2:	68bb      	ldr	r3, [r7, #8]
 800b3f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b3f8:	b2db      	uxtb	r3, r3
 800b3fa:	2b21      	cmp	r3, #33	; 0x21
 800b3fc:	d108      	bne.n	800b410 <UART_DMAError+0x46>
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	2b00      	cmp	r3, #0
 800b402:	d005      	beq.n	800b410 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b404:	68bb      	ldr	r3, [r7, #8]
 800b406:	2200      	movs	r2, #0
 800b408:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b40a:	68b8      	ldr	r0, [r7, #8]
 800b40c:	f000 f866 	bl	800b4dc <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b410:	68bb      	ldr	r3, [r7, #8]
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	695b      	ldr	r3, [r3, #20]
 800b416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b41a:	2b40      	cmp	r3, #64	; 0x40
 800b41c:	bf0c      	ite	eq
 800b41e:	2301      	moveq	r3, #1
 800b420:	2300      	movne	r3, #0
 800b422:	b2db      	uxtb	r3, r3
 800b424:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b22      	cmp	r3, #34	; 0x22
 800b430:	d108      	bne.n	800b444 <UART_DMAError+0x7a>
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d005      	beq.n	800b444 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b43e:	68b8      	ldr	r0, [r7, #8]
 800b440:	f000 f874 	bl	800b52c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b444:	68bb      	ldr	r3, [r7, #8]
 800b446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b448:	f043 0210 	orr.w	r2, r3, #16
 800b44c:	68bb      	ldr	r3, [r7, #8]
 800b44e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b454:	68b8      	ldr	r0, [r7, #8]
 800b456:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b458:	bf00      	nop
 800b45a:	3710      	adds	r7, #16
 800b45c:	46bd      	mov	sp, r7
 800b45e:	bd80      	pop	{r7, pc}

0800b460 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b460:	b480      	push	{r7}
 800b462:	b085      	sub	sp, #20
 800b464:	af00      	add	r7, sp, #0
 800b466:	60f8      	str	r0, [r7, #12]
 800b468:	60b9      	str	r1, [r7, #8]
 800b46a:	4613      	mov	r3, r2
 800b46c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800b46e:	68fb      	ldr	r3, [r7, #12]
 800b470:	68ba      	ldr	r2, [r7, #8]
 800b472:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	88fa      	ldrh	r2, [r7, #6]
 800b478:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	88fa      	ldrh	r2, [r7, #6]
 800b47e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	2200      	movs	r2, #0
 800b484:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	2222      	movs	r2, #34	; 0x22
 800b48a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	691b      	ldr	r3, [r3, #16]
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d007      	beq.n	800b4ae <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	68da      	ldr	r2, [r3, #12]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b4ac:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681b      	ldr	r3, [r3, #0]
 800b4b2:	695a      	ldr	r2, [r3, #20]
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	f042 0201 	orr.w	r2, r2, #1
 800b4bc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	68da      	ldr	r2, [r3, #12]
 800b4c4:	68fb      	ldr	r3, [r7, #12]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	f042 0220 	orr.w	r2, r2, #32
 800b4cc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800b4ce:	2300      	movs	r3, #0
}
 800b4d0:	4618      	mov	r0, r3
 800b4d2:	3714      	adds	r7, #20
 800b4d4:	46bd      	mov	sp, r7
 800b4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4da:	4770      	bx	lr

0800b4dc <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b4dc:	b480      	push	{r7}
 800b4de:	b089      	sub	sp, #36	; 0x24
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	330c      	adds	r3, #12
 800b4ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	e853 3f00 	ldrex	r3, [r3]
 800b4f2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800b4fa:	61fb      	str	r3, [r7, #28]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	330c      	adds	r3, #12
 800b502:	69fa      	ldr	r2, [r7, #28]
 800b504:	61ba      	str	r2, [r7, #24]
 800b506:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b508:	6979      	ldr	r1, [r7, #20]
 800b50a:	69ba      	ldr	r2, [r7, #24]
 800b50c:	e841 2300 	strex	r3, r2, [r1]
 800b510:	613b      	str	r3, [r7, #16]
   return(result);
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	2b00      	cmp	r3, #0
 800b516:	d1e5      	bne.n	800b4e4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b518:	687b      	ldr	r3, [r7, #4]
 800b51a:	2220      	movs	r2, #32
 800b51c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800b520:	bf00      	nop
 800b522:	3724      	adds	r7, #36	; 0x24
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b52c:	b480      	push	{r7}
 800b52e:	b095      	sub	sp, #84	; 0x54
 800b530:	af00      	add	r7, sp, #0
 800b532:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	330c      	adds	r3, #12
 800b53a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b53c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b53e:	e853 3f00 	ldrex	r3, [r3]
 800b542:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b544:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b546:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b54a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	330c      	adds	r3, #12
 800b552:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b554:	643a      	str	r2, [r7, #64]	; 0x40
 800b556:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b558:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b55a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b55c:	e841 2300 	strex	r3, r2, [r1]
 800b560:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b564:	2b00      	cmp	r3, #0
 800b566:	d1e5      	bne.n	800b534 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	681b      	ldr	r3, [r3, #0]
 800b56c:	3314      	adds	r3, #20
 800b56e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b570:	6a3b      	ldr	r3, [r7, #32]
 800b572:	e853 3f00 	ldrex	r3, [r3]
 800b576:	61fb      	str	r3, [r7, #28]
   return(result);
 800b578:	69fb      	ldr	r3, [r7, #28]
 800b57a:	f023 0301 	bic.w	r3, r3, #1
 800b57e:	64bb      	str	r3, [r7, #72]	; 0x48
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	3314      	adds	r3, #20
 800b586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b588:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b58a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b58c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b58e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b590:	e841 2300 	strex	r3, r2, [r1]
 800b594:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b596:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d1e5      	bne.n	800b568 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5a0:	2b01      	cmp	r3, #1
 800b5a2:	d119      	bne.n	800b5d8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	681b      	ldr	r3, [r3, #0]
 800b5a8:	330c      	adds	r3, #12
 800b5aa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	e853 3f00 	ldrex	r3, [r3]
 800b5b2:	60bb      	str	r3, [r7, #8]
   return(result);
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	f023 0310 	bic.w	r3, r3, #16
 800b5ba:	647b      	str	r3, [r7, #68]	; 0x44
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	330c      	adds	r3, #12
 800b5c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b5c4:	61ba      	str	r2, [r7, #24]
 800b5c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b5c8:	6979      	ldr	r1, [r7, #20]
 800b5ca:	69ba      	ldr	r2, [r7, #24]
 800b5cc:	e841 2300 	strex	r3, r2, [r1]
 800b5d0:	613b      	str	r3, [r7, #16]
   return(result);
 800b5d2:	693b      	ldr	r3, [r7, #16]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d1e5      	bne.n	800b5a4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	2220      	movs	r2, #32
 800b5dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800b5e6:	bf00      	nop
 800b5e8:	3754      	adds	r7, #84	; 0x54
 800b5ea:	46bd      	mov	sp, r7
 800b5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f0:	4770      	bx	lr

0800b5f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b084      	sub	sp, #16
 800b5f6:	af00      	add	r7, sp, #0
 800b5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	2200      	movs	r2, #0
 800b60a:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800b60c:	68fb      	ldr	r3, [r7, #12]
 800b60e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b610:	68f8      	ldr	r0, [r7, #12]
 800b612:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b614:	bf00      	nop
 800b616:	3710      	adds	r7, #16
 800b618:	46bd      	mov	sp, r7
 800b61a:	bd80      	pop	{r7, pc}

0800b61c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800b61c:	b480      	push	{r7}
 800b61e:	b085      	sub	sp, #20
 800b620:	af00      	add	r7, sp, #0
 800b622:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b62a:	b2db      	uxtb	r3, r3
 800b62c:	2b21      	cmp	r3, #33	; 0x21
 800b62e:	d13e      	bne.n	800b6ae <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	689b      	ldr	r3, [r3, #8]
 800b634:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b638:	d114      	bne.n	800b664 <UART_Transmit_IT+0x48>
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	691b      	ldr	r3, [r3, #16]
 800b63e:	2b00      	cmp	r3, #0
 800b640:	d110      	bne.n	800b664 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6a1b      	ldr	r3, [r3, #32]
 800b646:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800b648:	68fb      	ldr	r3, [r7, #12]
 800b64a:	881b      	ldrh	r3, [r3, #0]
 800b64c:	461a      	mov	r2, r3
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b656:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	6a1b      	ldr	r3, [r3, #32]
 800b65c:	1c9a      	adds	r2, r3, #2
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	621a      	str	r2, [r3, #32]
 800b662:	e008      	b.n	800b676 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	6a1b      	ldr	r3, [r3, #32]
 800b668:	1c59      	adds	r1, r3, #1
 800b66a:	687a      	ldr	r2, [r7, #4]
 800b66c:	6211      	str	r1, [r2, #32]
 800b66e:	781a      	ldrb	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800b67a:	b29b      	uxth	r3, r3
 800b67c:	3b01      	subs	r3, #1
 800b67e:	b29b      	uxth	r3, r3
 800b680:	687a      	ldr	r2, [r7, #4]
 800b682:	4619      	mov	r1, r3
 800b684:	84d1      	strh	r1, [r2, #38]	; 0x26
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10f      	bne.n	800b6aa <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	68da      	ldr	r2, [r3, #12]
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b698:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	68da      	ldr	r2, [r3, #12]
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6a8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800b6aa:	2300      	movs	r3, #0
 800b6ac:	e000      	b.n	800b6b0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800b6ae:	2302      	movs	r3, #2
  }
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3714      	adds	r7, #20
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ba:	4770      	bx	lr

0800b6bc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	68da      	ldr	r2, [r3, #12]
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6d2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2220      	movs	r2, #32
 800b6d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6e0:	6878      	ldr	r0, [r7, #4]
 800b6e2:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800b6e4:	2300      	movs	r3, #0
}
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	3708      	adds	r7, #8
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	bd80      	pop	{r7, pc}

0800b6ee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800b6ee:	b580      	push	{r7, lr}
 800b6f0:	b08c      	sub	sp, #48	; 0x30
 800b6f2:	af00      	add	r7, sp, #0
 800b6f4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b6fc:	b2db      	uxtb	r3, r3
 800b6fe:	2b22      	cmp	r3, #34	; 0x22
 800b700:	f040 80ad 	bne.w	800b85e <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	689b      	ldr	r3, [r3, #8]
 800b708:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b70c:	d117      	bne.n	800b73e <UART_Receive_IT+0x50>
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	691b      	ldr	r3, [r3, #16]
 800b712:	2b00      	cmp	r3, #0
 800b714:	d113      	bne.n	800b73e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800b716:	2300      	movs	r3, #0
 800b718:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b71e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	685b      	ldr	r3, [r3, #4]
 800b726:	b29b      	uxth	r3, r3
 800b728:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b72c:	b29a      	uxth	r2, r3
 800b72e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b730:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b736:	1c9a      	adds	r2, r3, #2
 800b738:	687b      	ldr	r3, [r7, #4]
 800b73a:	629a      	str	r2, [r3, #40]	; 0x28
 800b73c:	e026      	b.n	800b78c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b742:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800b744:	2300      	movs	r3, #0
 800b746:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	689b      	ldr	r3, [r3, #8]
 800b74c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b750:	d007      	beq.n	800b762 <UART_Receive_IT+0x74>
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	2b00      	cmp	r3, #0
 800b758:	d10a      	bne.n	800b770 <UART_Receive_IT+0x82>
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	691b      	ldr	r3, [r3, #16]
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d106      	bne.n	800b770 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	681b      	ldr	r3, [r3, #0]
 800b766:	685b      	ldr	r3, [r3, #4]
 800b768:	b2da      	uxtb	r2, r3
 800b76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b76c:	701a      	strb	r2, [r3, #0]
 800b76e:	e008      	b.n	800b782 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	685b      	ldr	r3, [r3, #4]
 800b776:	b2db      	uxtb	r3, r3
 800b778:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b77c:	b2da      	uxtb	r2, r3
 800b77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b780:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b786:	1c5a      	adds	r2, r3, #1
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b790:	b29b      	uxth	r3, r3
 800b792:	3b01      	subs	r3, #1
 800b794:	b29b      	uxth	r3, r3
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	4619      	mov	r1, r3
 800b79a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800b79c:	2b00      	cmp	r3, #0
 800b79e:	d15c      	bne.n	800b85a <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68da      	ldr	r2, [r3, #12]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0220 	bic.w	r2, r2, #32
 800b7ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68da      	ldr	r2, [r3, #12]
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800b7be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	695a      	ldr	r2, [r3, #20]
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	f022 0201 	bic.w	r2, r2, #1
 800b7ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2220      	movs	r2, #32
 800b7d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b7dc:	2b01      	cmp	r3, #1
 800b7de:	d136      	bne.n	800b84e <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	330c      	adds	r3, #12
 800b7ec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	e853 3f00 	ldrex	r3, [r3]
 800b7f4:	613b      	str	r3, [r7, #16]
   return(result);
 800b7f6:	693b      	ldr	r3, [r7, #16]
 800b7f8:	f023 0310 	bic.w	r3, r3, #16
 800b7fc:	627b      	str	r3, [r7, #36]	; 0x24
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	330c      	adds	r3, #12
 800b804:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b806:	623a      	str	r2, [r7, #32]
 800b808:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80a:	69f9      	ldr	r1, [r7, #28]
 800b80c:	6a3a      	ldr	r2, [r7, #32]
 800b80e:	e841 2300 	strex	r3, r2, [r1]
 800b812:	61bb      	str	r3, [r7, #24]
   return(result);
 800b814:	69bb      	ldr	r3, [r7, #24]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d1e5      	bne.n	800b7e6 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	f003 0310 	and.w	r3, r3, #16
 800b824:	2b10      	cmp	r3, #16
 800b826:	d10a      	bne.n	800b83e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b828:	2300      	movs	r3, #0
 800b82a:	60fb      	str	r3, [r7, #12]
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	681b      	ldr	r3, [r3, #0]
 800b832:	60fb      	str	r3, [r7, #12]
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	685b      	ldr	r3, [r3, #4]
 800b83a:	60fb      	str	r3, [r7, #12]
 800b83c:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b842:	687a      	ldr	r2, [r7, #4]
 800b844:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800b846:	4611      	mov	r1, r2
 800b848:	6878      	ldr	r0, [r7, #4]
 800b84a:	4798      	blx	r3
 800b84c:	e003      	b.n	800b856 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b852:	6878      	ldr	r0, [r7, #4]
 800b854:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800b856:	2300      	movs	r3, #0
 800b858:	e002      	b.n	800b860 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800b85a:	2300      	movs	r3, #0
 800b85c:	e000      	b.n	800b860 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800b85e:	2302      	movs	r3, #2
  }
}
 800b860:	4618      	mov	r0, r3
 800b862:	3730      	adds	r7, #48	; 0x30
 800b864:	46bd      	mov	sp, r7
 800b866:	bd80      	pop	{r7, pc}

0800b868 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b868:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b86c:	b0c0      	sub	sp, #256	; 0x100
 800b86e:	af00      	add	r7, sp, #0
 800b870:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b874:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	691b      	ldr	r3, [r3, #16]
 800b87c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800b880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b884:	68d9      	ldr	r1, [r3, #12]
 800b886:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b88a:	681a      	ldr	r2, [r3, #0]
 800b88c:	ea40 0301 	orr.w	r3, r0, r1
 800b890:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b892:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b896:	689a      	ldr	r2, [r3, #8]
 800b898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b89c:	691b      	ldr	r3, [r3, #16]
 800b89e:	431a      	orrs	r2, r3
 800b8a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8a4:	695b      	ldr	r3, [r3, #20]
 800b8a6:	431a      	orrs	r2, r3
 800b8a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8ac:	69db      	ldr	r3, [r3, #28]
 800b8ae:	4313      	orrs	r3, r2
 800b8b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800b8b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	68db      	ldr	r3, [r3, #12]
 800b8bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800b8c0:	f021 010c 	bic.w	r1, r1, #12
 800b8c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800b8ce:	430b      	orrs	r3, r1
 800b8d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b8d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800b8de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e2:	6999      	ldr	r1, [r3, #24]
 800b8e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	ea40 0301 	orr.w	r3, r0, r1
 800b8ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b8f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	4b8f      	ldr	r3, [pc, #572]	; (800bb34 <UART_SetConfig+0x2cc>)
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d005      	beq.n	800b908 <UART_SetConfig+0xa0>
 800b8fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b900:	681a      	ldr	r2, [r3, #0]
 800b902:	4b8d      	ldr	r3, [pc, #564]	; (800bb38 <UART_SetConfig+0x2d0>)
 800b904:	429a      	cmp	r2, r3
 800b906:	d104      	bne.n	800b912 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b908:	f7fd fb7e 	bl	8009008 <HAL_RCC_GetPCLK2Freq>
 800b90c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800b910:	e003      	b.n	800b91a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b912:	f7fd fb65 	bl	8008fe0 <HAL_RCC_GetPCLK1Freq>
 800b916:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b91a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b91e:	69db      	ldr	r3, [r3, #28]
 800b920:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b924:	f040 810c 	bne.w	800bb40 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b92c:	2200      	movs	r2, #0
 800b92e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b932:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800b936:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800b93a:	4622      	mov	r2, r4
 800b93c:	462b      	mov	r3, r5
 800b93e:	1891      	adds	r1, r2, r2
 800b940:	65b9      	str	r1, [r7, #88]	; 0x58
 800b942:	415b      	adcs	r3, r3
 800b944:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b946:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800b94a:	4621      	mov	r1, r4
 800b94c:	eb12 0801 	adds.w	r8, r2, r1
 800b950:	4629      	mov	r1, r5
 800b952:	eb43 0901 	adc.w	r9, r3, r1
 800b956:	f04f 0200 	mov.w	r2, #0
 800b95a:	f04f 0300 	mov.w	r3, #0
 800b95e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b962:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b966:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b96a:	4690      	mov	r8, r2
 800b96c:	4699      	mov	r9, r3
 800b96e:	4623      	mov	r3, r4
 800b970:	eb18 0303 	adds.w	r3, r8, r3
 800b974:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b978:	462b      	mov	r3, r5
 800b97a:	eb49 0303 	adc.w	r3, r9, r3
 800b97e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b982:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	2200      	movs	r2, #0
 800b98a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b98e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800b992:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b996:	460b      	mov	r3, r1
 800b998:	18db      	adds	r3, r3, r3
 800b99a:	653b      	str	r3, [r7, #80]	; 0x50
 800b99c:	4613      	mov	r3, r2
 800b99e:	eb42 0303 	adc.w	r3, r2, r3
 800b9a2:	657b      	str	r3, [r7, #84]	; 0x54
 800b9a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800b9a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800b9ac:	f7f5 f8f0 	bl	8000b90 <__aeabi_uldivmod>
 800b9b0:	4602      	mov	r2, r0
 800b9b2:	460b      	mov	r3, r1
 800b9b4:	4b61      	ldr	r3, [pc, #388]	; (800bb3c <UART_SetConfig+0x2d4>)
 800b9b6:	fba3 2302 	umull	r2, r3, r3, r2
 800b9ba:	095b      	lsrs	r3, r3, #5
 800b9bc:	011c      	lsls	r4, r3, #4
 800b9be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b9c2:	2200      	movs	r2, #0
 800b9c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b9c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800b9cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800b9d0:	4642      	mov	r2, r8
 800b9d2:	464b      	mov	r3, r9
 800b9d4:	1891      	adds	r1, r2, r2
 800b9d6:	64b9      	str	r1, [r7, #72]	; 0x48
 800b9d8:	415b      	adcs	r3, r3
 800b9da:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b9dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	eb12 0a01 	adds.w	sl, r2, r1
 800b9e6:	4649      	mov	r1, r9
 800b9e8:	eb43 0b01 	adc.w	fp, r3, r1
 800b9ec:	f04f 0200 	mov.w	r2, #0
 800b9f0:	f04f 0300 	mov.w	r3, #0
 800b9f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800b9f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800b9fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ba00:	4692      	mov	sl, r2
 800ba02:	469b      	mov	fp, r3
 800ba04:	4643      	mov	r3, r8
 800ba06:	eb1a 0303 	adds.w	r3, sl, r3
 800ba0a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ba0e:	464b      	mov	r3, r9
 800ba10:	eb4b 0303 	adc.w	r3, fp, r3
 800ba14:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800ba18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ba1c:	685b      	ldr	r3, [r3, #4]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800ba24:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800ba28:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800ba2c:	460b      	mov	r3, r1
 800ba2e:	18db      	adds	r3, r3, r3
 800ba30:	643b      	str	r3, [r7, #64]	; 0x40
 800ba32:	4613      	mov	r3, r2
 800ba34:	eb42 0303 	adc.w	r3, r2, r3
 800ba38:	647b      	str	r3, [r7, #68]	; 0x44
 800ba3a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800ba3e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800ba42:	f7f5 f8a5 	bl	8000b90 <__aeabi_uldivmod>
 800ba46:	4602      	mov	r2, r0
 800ba48:	460b      	mov	r3, r1
 800ba4a:	4611      	mov	r1, r2
 800ba4c:	4b3b      	ldr	r3, [pc, #236]	; (800bb3c <UART_SetConfig+0x2d4>)
 800ba4e:	fba3 2301 	umull	r2, r3, r3, r1
 800ba52:	095b      	lsrs	r3, r3, #5
 800ba54:	2264      	movs	r2, #100	; 0x64
 800ba56:	fb02 f303 	mul.w	r3, r2, r3
 800ba5a:	1acb      	subs	r3, r1, r3
 800ba5c:	00db      	lsls	r3, r3, #3
 800ba5e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800ba62:	4b36      	ldr	r3, [pc, #216]	; (800bb3c <UART_SetConfig+0x2d4>)
 800ba64:	fba3 2302 	umull	r2, r3, r3, r2
 800ba68:	095b      	lsrs	r3, r3, #5
 800ba6a:	005b      	lsls	r3, r3, #1
 800ba6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ba70:	441c      	add	r4, r3
 800ba72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ba76:	2200      	movs	r2, #0
 800ba78:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800ba7c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800ba80:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800ba84:	4642      	mov	r2, r8
 800ba86:	464b      	mov	r3, r9
 800ba88:	1891      	adds	r1, r2, r2
 800ba8a:	63b9      	str	r1, [r7, #56]	; 0x38
 800ba8c:	415b      	adcs	r3, r3
 800ba8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ba90:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ba94:	4641      	mov	r1, r8
 800ba96:	1851      	adds	r1, r2, r1
 800ba98:	6339      	str	r1, [r7, #48]	; 0x30
 800ba9a:	4649      	mov	r1, r9
 800ba9c:	414b      	adcs	r3, r1
 800ba9e:	637b      	str	r3, [r7, #52]	; 0x34
 800baa0:	f04f 0200 	mov.w	r2, #0
 800baa4:	f04f 0300 	mov.w	r3, #0
 800baa8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800baac:	4659      	mov	r1, fp
 800baae:	00cb      	lsls	r3, r1, #3
 800bab0:	4651      	mov	r1, sl
 800bab2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bab6:	4651      	mov	r1, sl
 800bab8:	00ca      	lsls	r2, r1, #3
 800baba:	4610      	mov	r0, r2
 800babc:	4619      	mov	r1, r3
 800babe:	4603      	mov	r3, r0
 800bac0:	4642      	mov	r2, r8
 800bac2:	189b      	adds	r3, r3, r2
 800bac4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bac8:	464b      	mov	r3, r9
 800baca:	460a      	mov	r2, r1
 800bacc:	eb42 0303 	adc.w	r3, r2, r3
 800bad0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bad8:	685b      	ldr	r3, [r3, #4]
 800bada:	2200      	movs	r2, #0
 800badc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bae0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800bae4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bae8:	460b      	mov	r3, r1
 800baea:	18db      	adds	r3, r3, r3
 800baec:	62bb      	str	r3, [r7, #40]	; 0x28
 800baee:	4613      	mov	r3, r2
 800baf0:	eb42 0303 	adc.w	r3, r2, r3
 800baf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800baf6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800bafa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800bafe:	f7f5 f847 	bl	8000b90 <__aeabi_uldivmod>
 800bb02:	4602      	mov	r2, r0
 800bb04:	460b      	mov	r3, r1
 800bb06:	4b0d      	ldr	r3, [pc, #52]	; (800bb3c <UART_SetConfig+0x2d4>)
 800bb08:	fba3 1302 	umull	r1, r3, r3, r2
 800bb0c:	095b      	lsrs	r3, r3, #5
 800bb0e:	2164      	movs	r1, #100	; 0x64
 800bb10:	fb01 f303 	mul.w	r3, r1, r3
 800bb14:	1ad3      	subs	r3, r2, r3
 800bb16:	00db      	lsls	r3, r3, #3
 800bb18:	3332      	adds	r3, #50	; 0x32
 800bb1a:	4a08      	ldr	r2, [pc, #32]	; (800bb3c <UART_SetConfig+0x2d4>)
 800bb1c:	fba2 2303 	umull	r2, r3, r2, r3
 800bb20:	095b      	lsrs	r3, r3, #5
 800bb22:	f003 0207 	and.w	r2, r3, #7
 800bb26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	4422      	add	r2, r4
 800bb2e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800bb30:	e105      	b.n	800bd3e <UART_SetConfig+0x4d6>
 800bb32:	bf00      	nop
 800bb34:	40011000 	.word	0x40011000
 800bb38:	40011400 	.word	0x40011400
 800bb3c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800bb40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb44:	2200      	movs	r2, #0
 800bb46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bb4a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800bb4e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800bb52:	4642      	mov	r2, r8
 800bb54:	464b      	mov	r3, r9
 800bb56:	1891      	adds	r1, r2, r2
 800bb58:	6239      	str	r1, [r7, #32]
 800bb5a:	415b      	adcs	r3, r3
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
 800bb5e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800bb62:	4641      	mov	r1, r8
 800bb64:	1854      	adds	r4, r2, r1
 800bb66:	4649      	mov	r1, r9
 800bb68:	eb43 0501 	adc.w	r5, r3, r1
 800bb6c:	f04f 0200 	mov.w	r2, #0
 800bb70:	f04f 0300 	mov.w	r3, #0
 800bb74:	00eb      	lsls	r3, r5, #3
 800bb76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800bb7a:	00e2      	lsls	r2, r4, #3
 800bb7c:	4614      	mov	r4, r2
 800bb7e:	461d      	mov	r5, r3
 800bb80:	4643      	mov	r3, r8
 800bb82:	18e3      	adds	r3, r4, r3
 800bb84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bb88:	464b      	mov	r3, r9
 800bb8a:	eb45 0303 	adc.w	r3, r5, r3
 800bb8e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bb92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb96:	685b      	ldr	r3, [r3, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb9e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bba2:	f04f 0200 	mov.w	r2, #0
 800bba6:	f04f 0300 	mov.w	r3, #0
 800bbaa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800bbae:	4629      	mov	r1, r5
 800bbb0:	008b      	lsls	r3, r1, #2
 800bbb2:	4621      	mov	r1, r4
 800bbb4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bbb8:	4621      	mov	r1, r4
 800bbba:	008a      	lsls	r2, r1, #2
 800bbbc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800bbc0:	f7f4 ffe6 	bl	8000b90 <__aeabi_uldivmod>
 800bbc4:	4602      	mov	r2, r0
 800bbc6:	460b      	mov	r3, r1
 800bbc8:	4b60      	ldr	r3, [pc, #384]	; (800bd4c <UART_SetConfig+0x4e4>)
 800bbca:	fba3 2302 	umull	r2, r3, r3, r2
 800bbce:	095b      	lsrs	r3, r3, #5
 800bbd0:	011c      	lsls	r4, r3, #4
 800bbd2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bbdc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800bbe0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800bbe4:	4642      	mov	r2, r8
 800bbe6:	464b      	mov	r3, r9
 800bbe8:	1891      	adds	r1, r2, r2
 800bbea:	61b9      	str	r1, [r7, #24]
 800bbec:	415b      	adcs	r3, r3
 800bbee:	61fb      	str	r3, [r7, #28]
 800bbf0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800bbf4:	4641      	mov	r1, r8
 800bbf6:	1851      	adds	r1, r2, r1
 800bbf8:	6139      	str	r1, [r7, #16]
 800bbfa:	4649      	mov	r1, r9
 800bbfc:	414b      	adcs	r3, r1
 800bbfe:	617b      	str	r3, [r7, #20]
 800bc00:	f04f 0200 	mov.w	r2, #0
 800bc04:	f04f 0300 	mov.w	r3, #0
 800bc08:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800bc0c:	4659      	mov	r1, fp
 800bc0e:	00cb      	lsls	r3, r1, #3
 800bc10:	4651      	mov	r1, sl
 800bc12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bc16:	4651      	mov	r1, sl
 800bc18:	00ca      	lsls	r2, r1, #3
 800bc1a:	4610      	mov	r0, r2
 800bc1c:	4619      	mov	r1, r3
 800bc1e:	4603      	mov	r3, r0
 800bc20:	4642      	mov	r2, r8
 800bc22:	189b      	adds	r3, r3, r2
 800bc24:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bc28:	464b      	mov	r3, r9
 800bc2a:	460a      	mov	r2, r1
 800bc2c:	eb42 0303 	adc.w	r3, r2, r3
 800bc30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bc34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bc38:	685b      	ldr	r3, [r3, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc3e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800bc40:	f04f 0200 	mov.w	r2, #0
 800bc44:	f04f 0300 	mov.w	r3, #0
 800bc48:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800bc4c:	4649      	mov	r1, r9
 800bc4e:	008b      	lsls	r3, r1, #2
 800bc50:	4641      	mov	r1, r8
 800bc52:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bc56:	4641      	mov	r1, r8
 800bc58:	008a      	lsls	r2, r1, #2
 800bc5a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800bc5e:	f7f4 ff97 	bl	8000b90 <__aeabi_uldivmod>
 800bc62:	4602      	mov	r2, r0
 800bc64:	460b      	mov	r3, r1
 800bc66:	4b39      	ldr	r3, [pc, #228]	; (800bd4c <UART_SetConfig+0x4e4>)
 800bc68:	fba3 1302 	umull	r1, r3, r3, r2
 800bc6c:	095b      	lsrs	r3, r3, #5
 800bc6e:	2164      	movs	r1, #100	; 0x64
 800bc70:	fb01 f303 	mul.w	r3, r1, r3
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	011b      	lsls	r3, r3, #4
 800bc78:	3332      	adds	r3, #50	; 0x32
 800bc7a:	4a34      	ldr	r2, [pc, #208]	; (800bd4c <UART_SetConfig+0x4e4>)
 800bc7c:	fba2 2303 	umull	r2, r3, r2, r3
 800bc80:	095b      	lsrs	r3, r3, #5
 800bc82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800bc86:	441c      	add	r4, r3
 800bc88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bc8c:	2200      	movs	r2, #0
 800bc8e:	673b      	str	r3, [r7, #112]	; 0x70
 800bc90:	677a      	str	r2, [r7, #116]	; 0x74
 800bc92:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800bc96:	4642      	mov	r2, r8
 800bc98:	464b      	mov	r3, r9
 800bc9a:	1891      	adds	r1, r2, r2
 800bc9c:	60b9      	str	r1, [r7, #8]
 800bc9e:	415b      	adcs	r3, r3
 800bca0:	60fb      	str	r3, [r7, #12]
 800bca2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bca6:	4641      	mov	r1, r8
 800bca8:	1851      	adds	r1, r2, r1
 800bcaa:	6039      	str	r1, [r7, #0]
 800bcac:	4649      	mov	r1, r9
 800bcae:	414b      	adcs	r3, r1
 800bcb0:	607b      	str	r3, [r7, #4]
 800bcb2:	f04f 0200 	mov.w	r2, #0
 800bcb6:	f04f 0300 	mov.w	r3, #0
 800bcba:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800bcbe:	4659      	mov	r1, fp
 800bcc0:	00cb      	lsls	r3, r1, #3
 800bcc2:	4651      	mov	r1, sl
 800bcc4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800bcc8:	4651      	mov	r1, sl
 800bcca:	00ca      	lsls	r2, r1, #3
 800bccc:	4610      	mov	r0, r2
 800bcce:	4619      	mov	r1, r3
 800bcd0:	4603      	mov	r3, r0
 800bcd2:	4642      	mov	r2, r8
 800bcd4:	189b      	adds	r3, r3, r2
 800bcd6:	66bb      	str	r3, [r7, #104]	; 0x68
 800bcd8:	464b      	mov	r3, r9
 800bcda:	460a      	mov	r2, r1
 800bcdc:	eb42 0303 	adc.w	r3, r2, r3
 800bce0:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bce6:	685b      	ldr	r3, [r3, #4]
 800bce8:	2200      	movs	r2, #0
 800bcea:	663b      	str	r3, [r7, #96]	; 0x60
 800bcec:	667a      	str	r2, [r7, #100]	; 0x64
 800bcee:	f04f 0200 	mov.w	r2, #0
 800bcf2:	f04f 0300 	mov.w	r3, #0
 800bcf6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800bcfa:	4649      	mov	r1, r9
 800bcfc:	008b      	lsls	r3, r1, #2
 800bcfe:	4641      	mov	r1, r8
 800bd00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800bd04:	4641      	mov	r1, r8
 800bd06:	008a      	lsls	r2, r1, #2
 800bd08:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800bd0c:	f7f4 ff40 	bl	8000b90 <__aeabi_uldivmod>
 800bd10:	4602      	mov	r2, r0
 800bd12:	460b      	mov	r3, r1
 800bd14:	4b0d      	ldr	r3, [pc, #52]	; (800bd4c <UART_SetConfig+0x4e4>)
 800bd16:	fba3 1302 	umull	r1, r3, r3, r2
 800bd1a:	095b      	lsrs	r3, r3, #5
 800bd1c:	2164      	movs	r1, #100	; 0x64
 800bd1e:	fb01 f303 	mul.w	r3, r1, r3
 800bd22:	1ad3      	subs	r3, r2, r3
 800bd24:	011b      	lsls	r3, r3, #4
 800bd26:	3332      	adds	r3, #50	; 0x32
 800bd28:	4a08      	ldr	r2, [pc, #32]	; (800bd4c <UART_SetConfig+0x4e4>)
 800bd2a:	fba2 2303 	umull	r2, r3, r2, r3
 800bd2e:	095b      	lsrs	r3, r3, #5
 800bd30:	f003 020f 	and.w	r2, r3, #15
 800bd34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	4422      	add	r2, r4
 800bd3c:	609a      	str	r2, [r3, #8]
}
 800bd3e:	bf00      	nop
 800bd40:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800bd44:	46bd      	mov	sp, r7
 800bd46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bd4a:	bf00      	nop
 800bd4c:	51eb851f 	.word	0x51eb851f

0800bd50 <__errno>:
 800bd50:	4b01      	ldr	r3, [pc, #4]	; (800bd58 <__errno+0x8>)
 800bd52:	6818      	ldr	r0, [r3, #0]
 800bd54:	4770      	bx	lr
 800bd56:	bf00      	nop
 800bd58:	2000024c 	.word	0x2000024c

0800bd5c <__libc_init_array>:
 800bd5c:	b570      	push	{r4, r5, r6, lr}
 800bd5e:	4d0d      	ldr	r5, [pc, #52]	; (800bd94 <__libc_init_array+0x38>)
 800bd60:	4c0d      	ldr	r4, [pc, #52]	; (800bd98 <__libc_init_array+0x3c>)
 800bd62:	1b64      	subs	r4, r4, r5
 800bd64:	10a4      	asrs	r4, r4, #2
 800bd66:	2600      	movs	r6, #0
 800bd68:	42a6      	cmp	r6, r4
 800bd6a:	d109      	bne.n	800bd80 <__libc_init_array+0x24>
 800bd6c:	4d0b      	ldr	r5, [pc, #44]	; (800bd9c <__libc_init_array+0x40>)
 800bd6e:	4c0c      	ldr	r4, [pc, #48]	; (800bda0 <__libc_init_array+0x44>)
 800bd70:	f000 fa40 	bl	800c1f4 <_init>
 800bd74:	1b64      	subs	r4, r4, r5
 800bd76:	10a4      	asrs	r4, r4, #2
 800bd78:	2600      	movs	r6, #0
 800bd7a:	42a6      	cmp	r6, r4
 800bd7c:	d105      	bne.n	800bd8a <__libc_init_array+0x2e>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd84:	4798      	blx	r3
 800bd86:	3601      	adds	r6, #1
 800bd88:	e7ee      	b.n	800bd68 <__libc_init_array+0xc>
 800bd8a:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd8e:	4798      	blx	r3
 800bd90:	3601      	adds	r6, #1
 800bd92:	e7f2      	b.n	800bd7a <__libc_init_array+0x1e>
 800bd94:	0800c238 	.word	0x0800c238
 800bd98:	0800c238 	.word	0x0800c238
 800bd9c:	0800c238 	.word	0x0800c238
 800bda0:	0800c23c 	.word	0x0800c23c

0800bda4 <memcpy>:
 800bda4:	440a      	add	r2, r1
 800bda6:	4291      	cmp	r1, r2
 800bda8:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdac:	d100      	bne.n	800bdb0 <memcpy+0xc>
 800bdae:	4770      	bx	lr
 800bdb0:	b510      	push	{r4, lr}
 800bdb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bdb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bdba:	4291      	cmp	r1, r2
 800bdbc:	d1f9      	bne.n	800bdb2 <memcpy+0xe>
 800bdbe:	bd10      	pop	{r4, pc}

0800bdc0 <memset>:
 800bdc0:	4402      	add	r2, r0
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	4293      	cmp	r3, r2
 800bdc6:	d100      	bne.n	800bdca <memset+0xa>
 800bdc8:	4770      	bx	lr
 800bdca:	f803 1b01 	strb.w	r1, [r3], #1
 800bdce:	e7f9      	b.n	800bdc4 <memset+0x4>

0800bdd0 <sqrt>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	ed2d 8b02 	vpush	{d8}
 800bdd6:	ec55 4b10 	vmov	r4, r5, d0
 800bdda:	f000 f851 	bl	800be80 <__ieee754_sqrt>
 800bdde:	4622      	mov	r2, r4
 800bde0:	462b      	mov	r3, r5
 800bde2:	4620      	mov	r0, r4
 800bde4:	4629      	mov	r1, r5
 800bde6:	eeb0 8a40 	vmov.f32	s16, s0
 800bdea:	eef0 8a60 	vmov.f32	s17, s1
 800bdee:	f7f4 fe49 	bl	8000a84 <__aeabi_dcmpun>
 800bdf2:	b990      	cbnz	r0, 800be1a <sqrt+0x4a>
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	4620      	mov	r0, r4
 800bdfa:	4629      	mov	r1, r5
 800bdfc:	f7f4 fe1a 	bl	8000a34 <__aeabi_dcmplt>
 800be00:	b158      	cbz	r0, 800be1a <sqrt+0x4a>
 800be02:	f7ff ffa5 	bl	800bd50 <__errno>
 800be06:	2321      	movs	r3, #33	; 0x21
 800be08:	6003      	str	r3, [r0, #0]
 800be0a:	2200      	movs	r2, #0
 800be0c:	2300      	movs	r3, #0
 800be0e:	4610      	mov	r0, r2
 800be10:	4619      	mov	r1, r3
 800be12:	f7f4 fcc7 	bl	80007a4 <__aeabi_ddiv>
 800be16:	ec41 0b18 	vmov	d8, r0, r1
 800be1a:	eeb0 0a48 	vmov.f32	s0, s16
 800be1e:	eef0 0a68 	vmov.f32	s1, s17
 800be22:	ecbd 8b02 	vpop	{d8}
 800be26:	bd38      	pop	{r3, r4, r5, pc}

0800be28 <acosf>:
 800be28:	b508      	push	{r3, lr}
 800be2a:	ed2d 8b02 	vpush	{d8}
 800be2e:	eeb0 8a40 	vmov.f32	s16, s0
 800be32:	f000 f8d7 	bl	800bfe4 <__ieee754_acosf>
 800be36:	eeb4 8a48 	vcmp.f32	s16, s16
 800be3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be3e:	eef0 8a40 	vmov.f32	s17, s0
 800be42:	d615      	bvs.n	800be70 <acosf+0x48>
 800be44:	eeb0 0a48 	vmov.f32	s0, s16
 800be48:	f000 f9c7 	bl	800c1da <fabsf>
 800be4c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800be50:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800be54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be58:	dd0a      	ble.n	800be70 <acosf+0x48>
 800be5a:	f7ff ff79 	bl	800bd50 <__errno>
 800be5e:	ecbd 8b02 	vpop	{d8}
 800be62:	2321      	movs	r3, #33	; 0x21
 800be64:	6003      	str	r3, [r0, #0]
 800be66:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800be6a:	4804      	ldr	r0, [pc, #16]	; (800be7c <acosf+0x54>)
 800be6c:	f000 b9bc 	b.w	800c1e8 <nanf>
 800be70:	eeb0 0a68 	vmov.f32	s0, s17
 800be74:	ecbd 8b02 	vpop	{d8}
 800be78:	bd08      	pop	{r3, pc}
 800be7a:	bf00      	nop
 800be7c:	0800c22c 	.word	0x0800c22c

0800be80 <__ieee754_sqrt>:
 800be80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800be84:	ec55 4b10 	vmov	r4, r5, d0
 800be88:	4e55      	ldr	r6, [pc, #340]	; (800bfe0 <__ieee754_sqrt+0x160>)
 800be8a:	43ae      	bics	r6, r5
 800be8c:	ee10 0a10 	vmov	r0, s0
 800be90:	ee10 3a10 	vmov	r3, s0
 800be94:	462a      	mov	r2, r5
 800be96:	4629      	mov	r1, r5
 800be98:	d110      	bne.n	800bebc <__ieee754_sqrt+0x3c>
 800be9a:	ee10 2a10 	vmov	r2, s0
 800be9e:	462b      	mov	r3, r5
 800bea0:	f7f4 fb56 	bl	8000550 <__aeabi_dmul>
 800bea4:	4602      	mov	r2, r0
 800bea6:	460b      	mov	r3, r1
 800bea8:	4620      	mov	r0, r4
 800beaa:	4629      	mov	r1, r5
 800beac:	f7f4 f99a 	bl	80001e4 <__adddf3>
 800beb0:	4604      	mov	r4, r0
 800beb2:	460d      	mov	r5, r1
 800beb4:	ec45 4b10 	vmov	d0, r4, r5
 800beb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bebc:	2d00      	cmp	r5, #0
 800bebe:	dc10      	bgt.n	800bee2 <__ieee754_sqrt+0x62>
 800bec0:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800bec4:	4330      	orrs	r0, r6
 800bec6:	d0f5      	beq.n	800beb4 <__ieee754_sqrt+0x34>
 800bec8:	b15d      	cbz	r5, 800bee2 <__ieee754_sqrt+0x62>
 800beca:	ee10 2a10 	vmov	r2, s0
 800bece:	462b      	mov	r3, r5
 800bed0:	ee10 0a10 	vmov	r0, s0
 800bed4:	f7f4 f984 	bl	80001e0 <__aeabi_dsub>
 800bed8:	4602      	mov	r2, r0
 800beda:	460b      	mov	r3, r1
 800bedc:	f7f4 fc62 	bl	80007a4 <__aeabi_ddiv>
 800bee0:	e7e6      	b.n	800beb0 <__ieee754_sqrt+0x30>
 800bee2:	1512      	asrs	r2, r2, #20
 800bee4:	d074      	beq.n	800bfd0 <__ieee754_sqrt+0x150>
 800bee6:	07d4      	lsls	r4, r2, #31
 800bee8:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800beec:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800bef0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800bef4:	bf5e      	ittt	pl
 800bef6:	0fda      	lsrpl	r2, r3, #31
 800bef8:	005b      	lslpl	r3, r3, #1
 800befa:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800befe:	2400      	movs	r4, #0
 800bf00:	0fda      	lsrs	r2, r3, #31
 800bf02:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800bf06:	107f      	asrs	r7, r7, #1
 800bf08:	005b      	lsls	r3, r3, #1
 800bf0a:	2516      	movs	r5, #22
 800bf0c:	4620      	mov	r0, r4
 800bf0e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800bf12:	1886      	adds	r6, r0, r2
 800bf14:	428e      	cmp	r6, r1
 800bf16:	bfde      	ittt	le
 800bf18:	1b89      	suble	r1, r1, r6
 800bf1a:	18b0      	addle	r0, r6, r2
 800bf1c:	18a4      	addle	r4, r4, r2
 800bf1e:	0049      	lsls	r1, r1, #1
 800bf20:	3d01      	subs	r5, #1
 800bf22:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800bf26:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800bf2a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf2e:	d1f0      	bne.n	800bf12 <__ieee754_sqrt+0x92>
 800bf30:	462a      	mov	r2, r5
 800bf32:	f04f 0e20 	mov.w	lr, #32
 800bf36:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800bf3a:	4281      	cmp	r1, r0
 800bf3c:	eb06 0c05 	add.w	ip, r6, r5
 800bf40:	dc02      	bgt.n	800bf48 <__ieee754_sqrt+0xc8>
 800bf42:	d113      	bne.n	800bf6c <__ieee754_sqrt+0xec>
 800bf44:	459c      	cmp	ip, r3
 800bf46:	d811      	bhi.n	800bf6c <__ieee754_sqrt+0xec>
 800bf48:	f1bc 0f00 	cmp.w	ip, #0
 800bf4c:	eb0c 0506 	add.w	r5, ip, r6
 800bf50:	da43      	bge.n	800bfda <__ieee754_sqrt+0x15a>
 800bf52:	2d00      	cmp	r5, #0
 800bf54:	db41      	blt.n	800bfda <__ieee754_sqrt+0x15a>
 800bf56:	f100 0801 	add.w	r8, r0, #1
 800bf5a:	1a09      	subs	r1, r1, r0
 800bf5c:	459c      	cmp	ip, r3
 800bf5e:	bf88      	it	hi
 800bf60:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800bf64:	eba3 030c 	sub.w	r3, r3, ip
 800bf68:	4432      	add	r2, r6
 800bf6a:	4640      	mov	r0, r8
 800bf6c:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800bf70:	f1be 0e01 	subs.w	lr, lr, #1
 800bf74:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800bf78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800bf7c:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800bf80:	d1db      	bne.n	800bf3a <__ieee754_sqrt+0xba>
 800bf82:	430b      	orrs	r3, r1
 800bf84:	d006      	beq.n	800bf94 <__ieee754_sqrt+0x114>
 800bf86:	1c50      	adds	r0, r2, #1
 800bf88:	bf13      	iteet	ne
 800bf8a:	3201      	addne	r2, #1
 800bf8c:	3401      	addeq	r4, #1
 800bf8e:	4672      	moveq	r2, lr
 800bf90:	f022 0201 	bicne.w	r2, r2, #1
 800bf94:	1063      	asrs	r3, r4, #1
 800bf96:	0852      	lsrs	r2, r2, #1
 800bf98:	07e1      	lsls	r1, r4, #31
 800bf9a:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800bf9e:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800bfa2:	bf48      	it	mi
 800bfa4:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800bfa8:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800bfac:	4614      	mov	r4, r2
 800bfae:	e781      	b.n	800beb4 <__ieee754_sqrt+0x34>
 800bfb0:	0ad9      	lsrs	r1, r3, #11
 800bfb2:	3815      	subs	r0, #21
 800bfb4:	055b      	lsls	r3, r3, #21
 800bfb6:	2900      	cmp	r1, #0
 800bfb8:	d0fa      	beq.n	800bfb0 <__ieee754_sqrt+0x130>
 800bfba:	02cd      	lsls	r5, r1, #11
 800bfbc:	d50a      	bpl.n	800bfd4 <__ieee754_sqrt+0x154>
 800bfbe:	f1c2 0420 	rsb	r4, r2, #32
 800bfc2:	fa23 f404 	lsr.w	r4, r3, r4
 800bfc6:	1e55      	subs	r5, r2, #1
 800bfc8:	4093      	lsls	r3, r2
 800bfca:	4321      	orrs	r1, r4
 800bfcc:	1b42      	subs	r2, r0, r5
 800bfce:	e78a      	b.n	800bee6 <__ieee754_sqrt+0x66>
 800bfd0:	4610      	mov	r0, r2
 800bfd2:	e7f0      	b.n	800bfb6 <__ieee754_sqrt+0x136>
 800bfd4:	0049      	lsls	r1, r1, #1
 800bfd6:	3201      	adds	r2, #1
 800bfd8:	e7ef      	b.n	800bfba <__ieee754_sqrt+0x13a>
 800bfda:	4680      	mov	r8, r0
 800bfdc:	e7bd      	b.n	800bf5a <__ieee754_sqrt+0xda>
 800bfde:	bf00      	nop
 800bfe0:	7ff00000 	.word	0x7ff00000

0800bfe4 <__ieee754_acosf>:
 800bfe4:	b508      	push	{r3, lr}
 800bfe6:	ee10 3a10 	vmov	r3, s0
 800bfea:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800bfee:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800bff2:	ed2d 8b0c 	vpush	{d8-d13}
 800bff6:	d10a      	bne.n	800c00e <__ieee754_acosf+0x2a>
 800bff8:	ed9f 0a65 	vldr	s0, [pc, #404]	; 800c190 <__ieee754_acosf+0x1ac>
 800bffc:	ed9f 8a65 	vldr	s16, [pc, #404]	; 800c194 <__ieee754_acosf+0x1b0>
 800c000:	2b00      	cmp	r3, #0
 800c002:	bfd8      	it	le
 800c004:	eeb0 0a48 	vmovle.f32	s0, s16
 800c008:	ecbd 8b0c 	vpop	{d8-d13}
 800c00c:	bd08      	pop	{r3, pc}
 800c00e:	dd04      	ble.n	800c01a <__ieee754_acosf+0x36>
 800c010:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c014:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c018:	e7f6      	b.n	800c008 <__ieee754_acosf+0x24>
 800c01a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800c01e:	da3c      	bge.n	800c09a <__ieee754_acosf+0xb6>
 800c020:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800c024:	f340 80b1 	ble.w	800c18a <__ieee754_acosf+0x1a6>
 800c028:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c02c:	eddf 6a5a 	vldr	s13, [pc, #360]	; 800c198 <__ieee754_acosf+0x1b4>
 800c030:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c19c <__ieee754_acosf+0x1b8>
 800c034:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 800c1a0 <__ieee754_acosf+0x1bc>
 800c038:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 800c1a4 <__ieee754_acosf+0x1c0>
 800c03c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c040:	eddf 6a59 	vldr	s13, [pc, #356]	; 800c1a8 <__ieee754_acosf+0x1c4>
 800c044:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c048:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c1ac <__ieee754_acosf+0x1c8>
 800c04c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c050:	eddf 6a57 	vldr	s13, [pc, #348]	; 800c1b0 <__ieee754_acosf+0x1cc>
 800c054:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c058:	ed9f 7a56 	vldr	s14, [pc, #344]	; 800c1b4 <__ieee754_acosf+0x1d0>
 800c05c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c060:	eddf 6a55 	vldr	s13, [pc, #340]	; 800c1b8 <__ieee754_acosf+0x1d4>
 800c064:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800c068:	eddf 6a54 	vldr	s13, [pc, #336]	; 800c1bc <__ieee754_acosf+0x1d8>
 800c06c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c070:	ed9f 6a53 	vldr	s12, [pc, #332]	; 800c1c0 <__ieee754_acosf+0x1dc>
 800c074:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c078:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c07c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c080:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800c088:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c08c:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800c1c4 <__ieee754_acosf+0x1e0>
 800c090:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c094:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800c098:	e7b6      	b.n	800c008 <__ieee754_acosf+0x24>
 800c09a:	2b00      	cmp	r3, #0
 800c09c:	eddf da3e 	vldr	s27, [pc, #248]	; 800c198 <__ieee754_acosf+0x1b4>
 800c0a0:	eddf ca3e 	vldr	s25, [pc, #248]	; 800c19c <__ieee754_acosf+0x1b8>
 800c0a4:	ed9f ca40 	vldr	s24, [pc, #256]	; 800c1a8 <__ieee754_acosf+0x1c4>
 800c0a8:	eddf ba40 	vldr	s23, [pc, #256]	; 800c1ac <__ieee754_acosf+0x1c8>
 800c0ac:	ed9f ba40 	vldr	s22, [pc, #256]	; 800c1b0 <__ieee754_acosf+0x1cc>
 800c0b0:	eddf 8a40 	vldr	s17, [pc, #256]	; 800c1b4 <__ieee754_acosf+0x1d0>
 800c0b4:	ed9f da40 	vldr	s26, [pc, #256]	; 800c1b8 <__ieee754_acosf+0x1d4>
 800c0b8:	eddf aa39 	vldr	s21, [pc, #228]	; 800c1a0 <__ieee754_acosf+0x1bc>
 800c0bc:	ed9f aa3f 	vldr	s20, [pc, #252]	; 800c1bc <__ieee754_acosf+0x1d8>
 800c0c0:	eddf 9a3f 	vldr	s19, [pc, #252]	; 800c1c0 <__ieee754_acosf+0x1dc>
 800c0c4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c0c8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c0cc:	da28      	bge.n	800c120 <__ieee754_acosf+0x13c>
 800c0ce:	ee30 0a09 	vadd.f32	s0, s0, s18
 800c0d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c0d6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800c0da:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800c0de:	eeac ca80 	vfma.f32	s24, s25, s0
 800c0e2:	eeaa aa80 	vfma.f32	s20, s21, s0
 800c0e6:	eeec ba00 	vfma.f32	s23, s24, s0
 800c0ea:	eeea 9a00 	vfma.f32	s19, s20, s0
 800c0ee:	eeab ba80 	vfma.f32	s22, s23, s0
 800c0f2:	eea9 9a80 	vfma.f32	s18, s19, s0
 800c0f6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800c0fa:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c0fe:	f000 f869 	bl	800c1d4 <__ieee754_sqrtf>
 800c102:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800c106:	eddf 7a30 	vldr	s15, [pc, #192]	; 800c1c8 <__ieee754_acosf+0x1e4>
 800c10a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c10e:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c112:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c116:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800c1cc <__ieee754_acosf+0x1e8>
 800c11a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c11e:	e773      	b.n	800c008 <__ieee754_acosf+0x24>
 800c120:	ee39 8a40 	vsub.f32	s16, s18, s0
 800c124:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c128:	eeb0 0a48 	vmov.f32	s0, s16
 800c12c:	f000 f852 	bl	800c1d4 <__ieee754_sqrtf>
 800c130:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800c134:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800c138:	eeac ca88 	vfma.f32	s24, s25, s16
 800c13c:	eeaa aa88 	vfma.f32	s20, s21, s16
 800c140:	eeec ba08 	vfma.f32	s23, s24, s16
 800c144:	ee10 3a10 	vmov	r3, s0
 800c148:	eeab ba88 	vfma.f32	s22, s23, s16
 800c14c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c150:	f023 030f 	bic.w	r3, r3, #15
 800c154:	eeea 9a08 	vfma.f32	s19, s20, s16
 800c158:	ee07 3a90 	vmov	s15, r3
 800c15c:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800c160:	eeb0 6a48 	vmov.f32	s12, s16
 800c164:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800c168:	eea9 9a88 	vfma.f32	s18, s19, s16
 800c16c:	ee70 6a27 	vadd.f32	s13, s0, s15
 800c170:	ee68 8a88 	vmul.f32	s17, s17, s16
 800c174:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800c178:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c17c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800c180:	ee37 0a87 	vadd.f32	s0, s15, s14
 800c184:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c188:	e73e      	b.n	800c008 <__ieee754_acosf+0x24>
 800c18a:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c1d0 <__ieee754_acosf+0x1ec>
 800c18e:	e73b      	b.n	800c008 <__ieee754_acosf+0x24>
 800c190:	00000000 	.word	0x00000000
 800c194:	40490fdb 	.word	0x40490fdb
 800c198:	3811ef08 	.word	0x3811ef08
 800c19c:	3a4f7f04 	.word	0x3a4f7f04
 800c1a0:	bf303361 	.word	0xbf303361
 800c1a4:	33a22168 	.word	0x33a22168
 800c1a8:	bd241146 	.word	0xbd241146
 800c1ac:	3e4e0aa8 	.word	0x3e4e0aa8
 800c1b0:	bea6b090 	.word	0xbea6b090
 800c1b4:	3e2aaaab 	.word	0x3e2aaaab
 800c1b8:	3d9dc62e 	.word	0x3d9dc62e
 800c1bc:	4001572d 	.word	0x4001572d
 800c1c0:	c019d139 	.word	0xc019d139
 800c1c4:	3fc90fda 	.word	0x3fc90fda
 800c1c8:	b3a22168 	.word	0xb3a22168
 800c1cc:	40490fda 	.word	0x40490fda
 800c1d0:	3fc90fdb 	.word	0x3fc90fdb

0800c1d4 <__ieee754_sqrtf>:
 800c1d4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800c1d8:	4770      	bx	lr

0800c1da <fabsf>:
 800c1da:	ee10 3a10 	vmov	r3, s0
 800c1de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c1e2:	ee00 3a10 	vmov	s0, r3
 800c1e6:	4770      	bx	lr

0800c1e8 <nanf>:
 800c1e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800c1f0 <nanf+0x8>
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	7fc00000 	.word	0x7fc00000

0800c1f4 <_init>:
 800c1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f6:	bf00      	nop
 800c1f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c1fa:	bc08      	pop	{r3}
 800c1fc:	469e      	mov	lr, r3
 800c1fe:	4770      	bx	lr

0800c200 <_fini>:
 800c200:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c202:	bf00      	nop
 800c204:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c206:	bc08      	pop	{r3}
 800c208:	469e      	mov	lr, r3
 800c20a:	4770      	bx	lr
