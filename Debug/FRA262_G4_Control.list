
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000123cc  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000720  08012570  08012570  00022570  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c90  08012c90  00030430  2**0
                  CONTENTS
  4 .ARM          00000008  08012c90  08012c90  00022c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c98  08012c98  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c98  08012c98  00022c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c9c  08012c9c  00022c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  08012ca0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ce4  20000430  080130d0  00030430  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001114  080130d0  00031114  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015693  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000276c  00000000  00000000  00045af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  00048260  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  00049480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b88  00000000  00000000  000638bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0291  00000000  00000000  00079443  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001196d4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006654  00000000  00000000  00119724  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000430 	.word	0x20000430
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08012554 	.word	0x08012554

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000434 	.word	0x20000434
 80001dc:	08012554 	.word	0x08012554

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000044c 	.word	0x2000044c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000044c 	.word	0x2000044c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a f8f4 	bl	800b27a <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000044c 	.word	0x2000044c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fa40 	bl	800a554 <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fa38 	bl	800a554 <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 ffd6 	bl	800b0a0 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f8b2 	bl	800b27a <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fa95 	bl	800965c <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fcfa 	bl	8009b34 <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000044c 	.word	0x2000044c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f009 fffd 	bl	800b27a <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f94a 	bl	800c600 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f822 	bl	800b3d8 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000044c 	.word	0x2000044c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b f8de 	bl	800c600 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000044c 	.word	0x2000044c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000044c 	.word	0x2000044c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000044c 	.word	0x2000044c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00b f804 	bl	800c600 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 fe2a 	bl	800b2dc <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f003 fd17 	bl	80050f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fb8d 	bl	8001de0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fe7f 	bl	80023c8 <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fe47 	bl	800235c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fe19 	bl	8002304 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fd0b 	bl	80020ec <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fc79 	bl	8001fcc <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 fbe9 	bl	8001eb0 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fde7 	bl	80022b0 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fd91 	bl	8002208 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fd55 	bl	8002194 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ea:	f000 fc41 	bl	8001f70 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ee:	4bae      	ldr	r3, [pc, #696]	; (80019a8 <main+0x2f0>)
 80016f0:	4aae      	ldr	r2, [pc, #696]	; (80019ac <main+0x2f4>)
 80016f2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f4:	4bac      	ldr	r3, [pc, #688]	; (80019a8 <main+0x2f0>)
 80016f6:	4aae      	ldr	r2, [pc, #696]	; (80019b0 <main+0x2f8>)
 80016f8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fa:	4bab      	ldr	r3, [pc, #684]	; (80019a8 <main+0x2f0>)
 80016fc:	2215      	movs	r2, #21
 80016fe:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001700:	4ba9      	ldr	r3, [pc, #676]	; (80019a8 <main+0x2f0>)
 8001702:	2246      	movs	r2, #70	; 0x46
 8001704:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001706:	49ab      	ldr	r1, [pc, #684]	; (80019b4 <main+0x2fc>)
 8001708:	48a7      	ldr	r0, [pc, #668]	; (80019a8 <main+0x2f0>)
 800170a:	f7ff fccf 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	48a9      	ldr	r0, [pc, #676]	; (80019b8 <main+0x300>)
 8001712:	f008 fb29 	bl	8009d68 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001716:	48a9      	ldr	r0, [pc, #676]	; (80019bc <main+0x304>)
 8001718:	f007 ff46 	bl	80095a8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	48a7      	ldr	r0, [pc, #668]	; (80019bc <main+0x304>)
 8001720:	f008 f8f0 	bl	8009904 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	48a5      	ldr	r0, [pc, #660]	; (80019bc <main+0x304>)
 8001728:	f008 f8ec 	bl	8009904 <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172c:	4ba4      	ldr	r3, [pc, #656]	; (80019c0 <main+0x308>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001738:	48a2      	ldr	r0, [pc, #648]	; (80019c4 <main+0x30c>)
 800173a:	f005 f83b 	bl	80067b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800173e:	4ba2      	ldr	r3, [pc, #648]	; (80019c8 <main+0x310>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2110      	movs	r1, #16
 8001748:	489e      	ldr	r0, [pc, #632]	; (80019c4 <main+0x30c>)
 800174a:	f005 f833 	bl	80067b4 <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 800174e:	2202      	movs	r2, #2
 8001750:	499e      	ldr	r1, [pc, #632]	; (80019cc <main+0x314>)
 8001752:	489f      	ldr	r0, [pc, #636]	; (80019d0 <main+0x318>)
 8001754:	f003 fda6 	bl	80052a4 <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 8001758:	4b96      	ldr	r3, [pc, #600]	; (80019b4 <main+0x2fc>)
 800175a:	2200      	movs	r2, #0
 800175c:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 800175e:	4b9d      	ldr	r3, [pc, #628]	; (80019d4 <main+0x31c>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001764:	4b9c      	ldr	r3, [pc, #624]	; (80019d8 <main+0x320>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176a:	f000 ff85 	bl	8002678 <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800176e:	f7ff fd29 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001772:	f003 fd23 	bl	80051bc <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	4b98      	ldr	r3, [pc, #608]	; (80019dc <main+0x324>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d909      	bls.n	8001794 <main+0xdc>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001780:	f003 fd1c 	bl	80051bc <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	33c8      	adds	r3, #200	; 0xc8
 8001788:	4a94      	ldr	r2, [pc, #592]	; (80019dc <main+0x324>)
 800178a:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178c:	4b89      	ldr	r3, [pc, #548]	; (80019b4 <main+0x2fc>)
 800178e:	f645 1261 	movw	r2, #22881	; 0x5961
 8001792:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001794:	4b92      	ldr	r3, [pc, #584]	; (80019e0 <main+0x328>)
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d130      	bne.n	8001802 <main+0x14a>
 80017a0:	f003 fd0c 	bl	80051bc <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b8f      	ldr	r3, [pc, #572]	; (80019e4 <main+0x32c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d329      	bcc.n	8001802 <main+0x14a>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f\r\n",position, setposition, setvelocity);
 80017ae:	4b8e      	ldr	r3, [pc, #568]	; (80019e8 <main+0x330>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	461e      	mov	r6, r3
 80017b6:	4b8d      	ldr	r3, [pc, #564]	; (80019ec <main+0x334>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fecc 	bl	8000558 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	4b8a      	ldr	r3, [pc, #552]	; (80019f0 <main+0x338>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d6:	e9cd 4500 	strd	r4, r5, [sp]
 80017da:	4632      	mov	r2, r6
 80017dc:	4985      	ldr	r1, [pc, #532]	; (80019f4 <main+0x33c>)
 80017de:	4886      	ldr	r0, [pc, #536]	; (80019f8 <main+0x340>)
 80017e0:	f00b fda4 	bl	800d32c <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017e4:	4884      	ldr	r0, [pc, #528]	; (80019f8 <main+0x340>)
 80017e6:	f7fe fcfb 	bl	80001e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	4981      	ldr	r1, [pc, #516]	; (80019f8 <main+0x340>)
 80017f2:	487b      	ldr	r0, [pc, #492]	; (80019e0 <main+0x328>)
 80017f4:	f009 fcfc 	bl	800b1f0 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017f8:	4b7a      	ldr	r3, [pc, #488]	; (80019e4 <main+0x32c>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3314      	adds	r3, #20
 80017fe:	4a79      	ldr	r2, [pc, #484]	; (80019e4 <main+0x32c>)
 8001800:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VelocityApprox();
 8001802:	f001 f8a9 	bl	8002958 <VelocityApprox>
	  AccelerationApprox();
 8001806:	f001 f8d5 	bl	80029b4 <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800180a:	f001 f8f1 	bl	80029f0 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 800180e:	f001 f9e1 	bl	8002bd4 <JoystickPinUpdate>

	  switch(scheduler)
 8001812:	4b7a      	ldr	r3, [pc, #488]	; (80019fc <main+0x344>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b07      	cmp	r3, #7
 8001818:	d8a9      	bhi.n	800176e <main+0xb6>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <main+0x168>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001841 	.word	0x08001841
 8001824:	08001885 	.word	0x08001885
 8001828:	08001913 	.word	0x08001913
 800182c:	08001a1d 	.word	0x08001a1d
 8001830:	08001bd1 	.word	0x08001bd1
 8001834:	08001c19 	.word	0x08001c19
 8001838:	08001c71 	.word	0x08001c71
 800183c:	08001cb3 	.word	0x08001cb3
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001840:	4b5d      	ldr	r3, [pc, #372]	; (80019b8 <main+0x300>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b67      	ldr	r3, [pc, #412]	; (80019e8 <main+0x330>)
 800184a:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 800184c:	f001 fa5e 	bl	8002d0c <JoystickControl>
		  JoystickLocationState();
 8001850:	f001 fb2a 	bl	8002ea8 <JoystickLocationState>

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001854:	4b57      	ldr	r3, [pc, #348]	; (80019b4 <main+0x2fc>)
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d103      	bne.n	8001864 <main+0x1ac>
		  {
			  scheduler = 7;
 800185c:	4b67      	ldr	r3, [pc, #412]	; (80019fc <main+0x344>)
 800185e:	2207      	movs	r2, #7
 8001860:	601a      	str	r2, [r3, #0]
		  {
			  registerFrame[64].U16 = 1;
			  Proximity = 3;
			  scheduler = 5;
		  }
		  break;
 8001862:	e294      	b.n	8001d8e <main+0x6d6>
		  else if(registerFrame[1].U16 == 4) //Home
 8001864:	4b53      	ldr	r3, [pc, #332]	; (80019b4 <main+0x2fc>)
 8001866:	885b      	ldrh	r3, [r3, #2]
 8001868:	2b04      	cmp	r3, #4
 800186a:	f040 8290 	bne.w	8001d8e <main+0x6d6>
			  registerFrame[64].U16 = 1;
 800186e:	4b51      	ldr	r3, [pc, #324]	; (80019b4 <main+0x2fc>)
 8001870:	2201      	movs	r2, #1
 8001872:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  Proximity = 3;
 8001876:	4b62      	ldr	r3, [pc, #392]	; (8001a00 <main+0x348>)
 8001878:	2203      	movs	r2, #3
 800187a:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 800187c:	4b5f      	ldr	r3, [pc, #380]	; (80019fc <main+0x344>)
 800187e:	2205      	movs	r2, #5
 8001880:	601a      	str	r2, [r3, #0]
		  break;
 8001882:	e284      	b.n	8001d8e <main+0x6d6>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001884:	4b4b      	ldr	r3, [pc, #300]	; (80019b4 <main+0x2fc>)
 8001886:	2208      	movs	r2, #8
 8001888:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 800188a:	4b5e      	ldr	r3, [pc, #376]	; (8001a04 <main+0x34c>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a5e      	ldr	r2, [pc, #376]	; (8001a08 <main+0x350>)
 8001890:	330c      	adds	r3, #12
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	4413      	add	r3, r2
 8001896:	3304      	adds	r3, #4
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	4618      	mov	r0, r3
 800189c:	f7fe fe5c 	bl	8000558 <__aeabi_f2d>
 80018a0:	a33f      	add	r3, pc, #252	; (adr r3, 80019a0 <main+0x2e8>)
 80018a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018a6:	f7fe ffd9 	bl	800085c <__aeabi_ddiv>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4610      	mov	r0, r2
 80018b0:	4619      	mov	r1, r3
 80018b2:	f7ff f9a1 	bl	8000bf8 <__aeabi_d2f>
 80018b6:	4603      	mov	r3, r0
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <main+0x354>)
 80018ba:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 80018bc:	4b51      	ldr	r3, [pc, #324]	; (8001a04 <main+0x34c>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a51      	ldr	r2, [pc, #324]	; (8001a08 <main+0x350>)
 80018c2:	3304      	adds	r3, #4
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	edd3 7a00 	vldr	s15, [r3]
 80018cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018d8:	ee17 3a90 	vmov	r3, s15
 80018dc:	b29a      	uxth	r2, r3
 80018de:	4b35      	ldr	r3, [pc, #212]	; (80019b4 <main+0x2fc>)
 80018e0:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018e4:	4b33      	ldr	r3, [pc, #204]	; (80019b4 <main+0x2fc>)
 80018e6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018ea:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 80018ee:	4b31      	ldr	r3, [pc, #196]	; (80019b4 <main+0x2fc>)
 80018f0:	2201      	movs	r2, #1
 80018f2:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 80018f6:	4b2f      	ldr	r3, [pc, #188]	; (80019b4 <main+0x2fc>)
 80018f8:	2202      	movs	r2, #2
 80018fa:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 80018fe:	4b44      	ldr	r3, [pc, #272]	; (8001a10 <main+0x358>)
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001904:	4843      	ldr	r0, [pc, #268]	; (8001a14 <main+0x35c>)
 8001906:	f007 fea9 	bl	800965c <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 800190a:	4b3c      	ldr	r3, [pc, #240]	; (80019fc <main+0x344>)
 800190c:	2203      	movs	r2, #3
 800190e:	601a      	str	r2, [r3, #0]
		  break;
 8001910:	e242      	b.n	8001d98 <main+0x6e0>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 8001912:	4b28      	ldr	r3, [pc, #160]	; (80019b4 <main+0x2fc>)
 8001914:	2210      	movs	r2, #16
 8001916:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 8001918:	4b3a      	ldr	r3, [pc, #232]	; (8001a04 <main+0x34c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a3e      	ldr	r2, [pc, #248]	; (8001a18 <main+0x360>)
 800191e:	330c      	adds	r3, #12
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	3304      	adds	r3, #4
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe15 	bl	8000558 <__aeabi_f2d>
 800192e:	a31c      	add	r3, pc, #112	; (adr r3, 80019a0 <main+0x2e8>)
 8001930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001934:	f7fe ff92 	bl	800085c <__aeabi_ddiv>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4610      	mov	r0, r2
 800193e:	4619      	mov	r1, r3
 8001940:	f7ff f95a 	bl	8000bf8 <__aeabi_d2f>
 8001944:	4603      	mov	r3, r0
 8001946:	4a31      	ldr	r2, [pc, #196]	; (8001a0c <main+0x354>)
 8001948:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 800194a:	4b2e      	ldr	r3, [pc, #184]	; (8001a04 <main+0x34c>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a32      	ldr	r2, [pc, #200]	; (8001a18 <main+0x360>)
 8001950:	3304      	adds	r3, #4
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	edd3 7a00 	vldr	s15, [r3]
 800195a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800195e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001962:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001966:	ee17 3a90 	vmov	r3, s15
 800196a:	b29a      	uxth	r2, r3
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <main+0x2fc>)
 800196e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001972:	4b10      	ldr	r3, [pc, #64]	; (80019b4 <main+0x2fc>)
 8001974:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001978:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 800197c:	4b0d      	ldr	r3, [pc, #52]	; (80019b4 <main+0x2fc>)
 800197e:	2201      	movs	r2, #1
 8001980:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001984:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <main+0x2fc>)
 8001986:	2202      	movs	r2, #2
 8001988:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 800198c:	4b20      	ldr	r3, [pc, #128]	; (8001a10 <main+0x358>)
 800198e:	2200      	movs	r2, #0
 8001990:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001992:	4820      	ldr	r0, [pc, #128]	; (8001a14 <main+0x35c>)
 8001994:	f007 fe62 	bl	800965c <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001998:	4b18      	ldr	r3, [pc, #96]	; (80019fc <main+0x344>)
 800199a:	2203      	movs	r2, #3
 800199c:	601a      	str	r2, [r3, #0]
		  break;
 800199e:	e1fb      	b.n	8001d98 <main+0x6e0>
 80019a0:	70a3d70a 	.word	0x70a3d70a
 80019a4:	3fa70a3d 	.word	0x3fa70a3d
 80019a8:	20000b28 	.word	0x20000b28
 80019ac:	20000890 	.word	0x20000890
 80019b0:	20000768 	.word	0x20000768
 80019b4:	20001000 	.word	0x20001000
 80019b8:	20000600 	.word	0x20000600
 80019bc:	2000054c 	.word	0x2000054c
 80019c0:	2000020c 	.word	0x2000020c
 80019c4:	40020400 	.word	0x40020400
 80019c8:	20000208 	.word	0x20000208
 80019cc:	20000b0c 	.word	0x20000b0c
 80019d0:	20000450 	.word	0x20000450
 80019d4:	20000b20 	.word	0x20000b20
 80019d8:	20000b18 	.word	0x20000b18
 80019dc:	200010e4 	.word	0x200010e4
 80019e0:	2000081c 	.word	0x2000081c
 80019e4:	200010e8 	.word	0x200010e8
 80019e8:	200009ac 	.word	0x200009ac
 80019ec:	200009bc 	.word	0x200009bc
 80019f0:	200009dc 	.word	0x200009dc
 80019f4:	08012570 	.word	0x08012570
 80019f8:	2000108c 	.word	0x2000108c
 80019fc:	20000200 	.word	0x20000200
 8001a00:	2000024c 	.word	0x2000024c
 8001a04:	20000964 	.word	0x20000964
 8001a08:	200009e4 	.word	0x200009e4
 8001a0c:	20000974 	.word	0x20000974
 8001a10:	2000096c 	.word	0x2000096c
 8001a14:	200006b4 	.word	0x200006b4
 8001a18:	20000a48 	.word	0x20000a48

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001a1c:	4b80      	ldr	r3, [pc, #512]	; (8001c20 <main+0x568>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a22:	b21a      	sxth	r2, r3
 8001a24:	4b7f      	ldr	r3, [pc, #508]	; (8001c24 <main+0x56c>)
 8001a26:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001a28:	f003 fbc8 	bl	80051bc <HAL_GetTick>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	4b7e      	ldr	r3, [pc, #504]	; (8001c28 <main+0x570>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d909      	bls.n	8001a4a <main+0x392>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001a36:	f003 fbc1 	bl	80051bc <HAL_GetTick>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	3301      	adds	r3, #1
 8001a3e:	4a7a      	ldr	r2, [pc, #488]	; (8001c28 <main+0x570>)
 8001a40:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a42:	f000 ff89 	bl	8002958 <VelocityApprox>
			  AccelerationApprox();
 8001a46:	f000 ffb5 	bl	80029b4 <AccelerationApprox>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a4a:	f003 fbb7 	bl	80051bc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	4b76      	ldr	r3, [pc, #472]	; (8001c2c <main+0x574>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	429a      	cmp	r2, r3
 8001a56:	d33b      	bcc.n	8001ad0 <main+0x418>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a58:	f003 fbb0 	bl	80051bc <HAL_GetTick>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	3301      	adds	r3, #1
 8001a60:	4a72      	ldr	r2, [pc, #456]	; (8001c2c <main+0x574>)
 8001a62:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a64:	f001 f824 	bl	8002ab0 <PIDcal>
 8001a68:	eef0 7a40 	vmov.f32	s15, s0
 8001a6c:	4b70      	ldr	r3, [pc, #448]	; (8001c30 <main+0x578>)
 8001a6e:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a72:	4b6f      	ldr	r3, [pc, #444]	; (8001c30 <main+0x578>)
 8001a74:	edd3 7a00 	vldr	s15, [r3]
 8001a78:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a80:	db0e      	blt.n	8001aa0 <main+0x3e8>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a82:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <main+0x57c>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2200      	movs	r2, #0
 8001a88:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a8a:	4b69      	ldr	r3, [pc, #420]	; (8001c30 <main+0x578>)
 8001a8c:	edd3 7a00 	vldr	s15, [r3]
 8001a90:	4b68      	ldr	r3, [pc, #416]	; (8001c34 <main+0x57c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a98:	ee17 2a90 	vmov	r2, s15
 8001a9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001a9e:	e017      	b.n	8001ad0 <main+0x418>
			  }
			  else if (duty < 0)
 8001aa0:	4b63      	ldr	r3, [pc, #396]	; (8001c30 <main+0x578>)
 8001aa2:	edd3 7a00 	vldr	s15, [r3]
 8001aa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aae:	d50f      	bpl.n	8001ad0 <main+0x418>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ab0:	4b60      	ldr	r3, [pc, #384]	; (8001c34 <main+0x57c>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001ab8:	4b5d      	ldr	r3, [pc, #372]	; (8001c30 <main+0x578>)
 8001aba:	edd3 7a00 	vldr	s15, [r3]
 8001abe:	eef1 7a67 	vneg.f32	s15, s15
 8001ac2:	4b5c      	ldr	r3, [pc, #368]	; (8001c34 <main+0x57c>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aca:	ee17 2a90 	vmov	r2, s15
 8001ace:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  if(position > Overshootposition){
 8001ad0:	4b54      	ldr	r3, [pc, #336]	; (8001c24 <main+0x56c>)
 8001ad2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ad6:	4b58      	ldr	r3, [pc, #352]	; (8001c38 <main+0x580>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	429a      	cmp	r2, r3
 8001ade:	dd21      	ble.n	8001b24 <main+0x46c>
			  Overshootposition = position;
 8001ae0:	4b50      	ldr	r3, [pc, #320]	; (8001c24 <main+0x56c>)
 8001ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ae6:	4b54      	ldr	r3, [pc, #336]	; (8001c38 <main+0x580>)
 8001ae8:	801a      	strh	r2, [r3, #0]
			  PercentOS = ((Overshootposition-qf)/(qf-qi))*100;
 8001aea:	4b53      	ldr	r3, [pc, #332]	; (8001c38 <main+0x580>)
 8001aec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001af0:	ee07 3a90 	vmov	s15, r3
 8001af4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001af8:	4b50      	ldr	r3, [pc, #320]	; (8001c3c <main+0x584>)
 8001afa:	edd3 7a00 	vldr	s15, [r3]
 8001afe:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <main+0x584>)
 8001b04:	ed93 7a00 	vldr	s14, [r3]
 8001b08:	4b4d      	ldr	r3, [pc, #308]	; (8001c40 <main+0x588>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001b12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b16:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8001c44 <main+0x58c>
 8001b1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b1e:	4b4a      	ldr	r3, [pc, #296]	; (8001c48 <main+0x590>)
 8001b20:	edc3 7a00 	vstr	s15, [r3]
		  }
		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001b24:	4b3f      	ldr	r3, [pc, #252]	; (8001c24 <main+0x56c>)
 8001b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b2a:	ee07 3a90 	vmov	s15, r3
 8001b2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b32:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <main+0x584>)
 8001b34:	edd3 7a00 	vldr	s15, [r3]
 8001b38:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001b40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b48:	db36      	blt.n	8001bb8 <main+0x500>
 8001b4a:	4b36      	ldr	r3, [pc, #216]	; (8001c24 <main+0x56c>)
 8001b4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b50:	ee07 3a90 	vmov	s15, r3
 8001b54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b58:	4b38      	ldr	r3, [pc, #224]	; (8001c3c <main+0x584>)
 8001b5a:	edd3 7a00 	vldr	s15, [r3]
 8001b5e:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001b66:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6e:	d823      	bhi.n	8001bb8 <main+0x500>
 8001b70:	4b36      	ldr	r3, [pc, #216]	; (8001c4c <main+0x594>)
 8001b72:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11e      	bne.n	8001bb8 <main+0x500>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b7a:	4b2e      	ldr	r3, [pc, #184]	; (8001c34 <main+0x57c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b82:	4b2c      	ldr	r3, [pc, #176]	; (8001c34 <main+0x57c>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2200      	movs	r2, #0
 8001b88:	639a      	str	r2, [r3, #56]	; 0x38
			  Overshootposition = 0;
 8001b8a:	4b2b      	ldr	r3, [pc, #172]	; (8001c38 <main+0x580>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	801a      	strh	r2, [r3, #0]

			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001b90:	482f      	ldr	r0, [pc, #188]	; (8001c50 <main+0x598>)
 8001b92:	f007 fdc5 	bl	8009720 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <main+0x59c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	2b01      	cmp	r3, #1
 8001b9c:	d106      	bne.n	8001bac <main+0x4f4>
			  {
				  registerFrame[16].U16 = 0;
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <main+0x594>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <main+0x5a0>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	601a      	str	r2, [r3, #0]
 8001baa:	e005      	b.n	8001bb8 <main+0x500>
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001bac:	4b2b      	ldr	r3, [pc, #172]	; (8001c5c <main+0x5a4>)
 8001bae:	2201      	movs	r2, #1
 8001bb0:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001bb2:	4b29      	ldr	r3, [pc, #164]	; (8001c58 <main+0x5a0>)
 8001bb4:	2204      	movs	r2, #4
 8001bb6:	601a      	str	r2, [r3, #0]
			  }

		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001bb8:	4b29      	ldr	r3, [pc, #164]	; (8001c60 <main+0x5a8>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	f040 80e8 	bne.w	8001d92 <main+0x6da>
		  {
			  ResetButton.flag = 0;
 8001bc2:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <main+0x5a8>)
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001bc8:	4b23      	ldr	r3, [pc, #140]	; (8001c58 <main+0x5a0>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001bce:	e0e0      	b.n	8001d92 <main+0x6da>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001bd0:	4b24      	ldr	r3, [pc, #144]	; (8001c64 <main+0x5ac>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b08      	cmp	r3, #8
 8001bd6:	dc13      	bgt.n	8001c00 <main+0x548>
		  {
			  if (TaskType == 1)
 8001bd8:	4b23      	ldr	r3, [pc, #140]	; (8001c68 <main+0x5b0>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <main+0x534>
			  {
				  EndEffectorState = 4;			//Pick
 8001be0:	4b22      	ldr	r3, [pc, #136]	; (8001c6c <main+0x5b4>)
 8001be2:	2204      	movs	r2, #4
 8001be4:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001be6:	f000 fd47 	bl	8002678 <EndEffectorWrite>
 8001bea:	e009      	b.n	8001c00 <main+0x548>
//				  TaskType = -1; 			// TestYesterday
//				  HAL_Delay(2000);		    // TestYesterday
//				  scheduler = 2; 			// TestYesterday
			  }
			  else if (TaskType == -1)
 8001bec:	4b1e      	ldr	r3, [pc, #120]	; (8001c68 <main+0x5b0>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d104      	bne.n	8001c00 <main+0x548>
			  {
				  EndEffectorState = 5;			//Place
 8001bf6:	4b1d      	ldr	r3, [pc, #116]	; (8001c6c <main+0x5b4>)
 8001bf8:	2205      	movs	r2, #5
 8001bfa:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001bfc:	f000 fd3c 	bl	8002678 <EndEffectorWrite>
//				  {
//					  scheduler = 1; 		// TestYesterday
//				  }
			  }
		  }
		  if (ResetButton.flag == 1)
 8001c00:	4b17      	ldr	r3, [pc, #92]	; (8001c60 <main+0x5a8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	f040 80c6 	bne.w	8001d96 <main+0x6de>
			  {
				  ResetButton.flag = 0;
 8001c0a:	4b15      	ldr	r3, [pc, #84]	; (8001c60 <main+0x5a8>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001c10:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <main+0x5a0>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001c16:	e0be      	b.n	8001d96 <main+0x6de>

	  //Homing
	  case 5:
		  Homing();
 8001c18:	f000 fcce 	bl	80025b8 <Homing>
		  break;
 8001c1c:	e0bc      	b.n	8001d98 <main+0x6e0>
 8001c1e:	bf00      	nop
 8001c20:	20000600 	.word	0x20000600
 8001c24:	200009ac 	.word	0x200009ac
 8001c28:	200010ec 	.word	0x200010ec
 8001c2c:	200010f0 	.word	0x200010f0
 8001c30:	20000968 	.word	0x20000968
 8001c34:	2000054c 	.word	0x2000054c
 8001c38:	200009ae 	.word	0x200009ae
 8001c3c:	20000974 	.word	0x20000974
 8001c40:	20000978 	.word	0x20000978
 8001c44:	42c80000 	.word	0x42c80000
 8001c48:	200009b0 	.word	0x200009b0
 8001c4c:	20001000 	.word	0x20001000
 8001c50:	200006b4 	.word	0x200006b4
 8001c54:	200010e0 	.word	0x200010e0
 8001c58:	20000200 	.word	0x20000200
 8001c5c:	20000b18 	.word	0x20000b18
 8001c60:	20000adc 	.word	0x20000adc
 8001c64:	20000964 	.word	0x20000964
 8001c68:	20000204 	.word	0x20000204
 8001c6c:	20000b20 	.word	0x20000b20

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c70:	4b4d      	ldr	r3, [pc, #308]	; (8001da8 <main+0x6f0>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	2200      	movs	r2, #0
 8001c76:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c78:	4b4b      	ldr	r3, [pc, #300]	; (8001da8 <main+0x6f0>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	639a      	str	r2, [r3, #56]	; 0x38
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 8001c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001c84:	4849      	ldr	r0, [pc, #292]	; (8001dac <main+0x6f4>)
 8001c86:	f004 fd7d 	bl	8006784 <HAL_GPIO_ReadPin>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d110      	bne.n	8001cb2 <main+0x5fa>
		  {
			  Emercount = 0;
 8001c90:	4b47      	ldr	r3, [pc, #284]	; (8001db0 <main+0x6f8>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
			  EndEffectorState = 8;		//Quit Emergency
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <main+0x6fc>)
 8001c98:	2208      	movs	r2, #8
 8001c9a:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001c9c:	4b46      	ldr	r3, [pc, #280]	; (8001db8 <main+0x700>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001ca2:	f000 fce9 	bl	8002678 <EndEffectorWrite>
			  Proximity = 3;
 8001ca6:	4b45      	ldr	r3, [pc, #276]	; (8001dbc <main+0x704>)
 8001ca8:	2203      	movs	r2, #3
 8001caa:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001cac:	4b44      	ldr	r3, [pc, #272]	; (8001dc0 <main+0x708>)
 8001cae:	2205      	movs	r2, #5
 8001cb0:	601a      	str	r2, [r3, #0]
		  }

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001cb2:	4b44      	ldr	r3, [pc, #272]	; (8001dc4 <main+0x70c>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001cb8:	4b42      	ldr	r3, [pc, #264]	; (8001dc4 <main+0x70c>)
 8001cba:	2220      	movs	r2, #32
 8001cbc:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001cbe:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <main+0x70c>)
 8001cc0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001cc4:	b21a      	sxth	r2, r3
 8001cc6:	4b40      	ldr	r3, [pc, #256]	; (8001dc8 <main+0x710>)
 8001cc8:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001cca:	4b3f      	ldr	r3, [pc, #252]	; (8001dc8 <main+0x710>)
 8001ccc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd0:	b29a      	uxth	r2, r3
 8001cd2:	4b3c      	ldr	r3, [pc, #240]	; (8001dc4 <main+0x70c>)
 8001cd4:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001cd8:	4b3a      	ldr	r3, [pc, #232]	; (8001dc4 <main+0x70c>)
 8001cda:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001cde:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;        // 500 ms
 8001ce2:	4b38      	ldr	r3, [pc, #224]	; (8001dc4 <main+0x70c>)
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001cea:	4b36      	ldr	r3, [pc, #216]	; (8001dc4 <main+0x70c>)
 8001cec:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b36      	ldr	r3, [pc, #216]	; (8001dcc <main+0x714>)
 8001cf4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d003      	beq.n	8001d04 <main+0x64c>
			  registerFrame[64].U16 = 2;  	// RUN
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <main+0x70c>)
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001d04:	4b2f      	ldr	r3, [pc, #188]	; (8001dc4 <main+0x70c>)
 8001d06:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001d0a:	b21a      	sxth	r2, r3
 8001d0c:	4b2f      	ldr	r3, [pc, #188]	; (8001dcc <main+0x714>)
 8001d0e:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001d10:	4b2f      	ldr	r3, [pc, #188]	; (8001dd0 <main+0x718>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <main+0x70c>)
 8001d18:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d1c:	f247 522f 	movw	r2, #29999	; 0x752f
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d916      	bls.n	8001d52 <main+0x69a>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001d24:	4b27      	ldr	r3, [pc, #156]	; (8001dc4 <main+0x70c>)
 8001d26:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d2a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7fe fc00 	bl	8000534 <__aeabi_i2d>
 8001d34:	a31a      	add	r3, pc, #104	; (adr r3, 8001da0 <main+0x6e8>)
 8001d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d3a:	f7fe fd8f 	bl	800085c <__aeabi_ddiv>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4610      	mov	r0, r2
 8001d44:	4619      	mov	r1, r3
 8001d46:	f7fe ff57 	bl	8000bf8 <__aeabi_d2f>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	4a21      	ldr	r2, [pc, #132]	; (8001dd4 <main+0x71c>)
 8001d4e:	6013      	str	r3, [r2, #0]
 8001d50:	e013      	b.n	8001d7a <main+0x6c2>
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001d52:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <main+0x70c>)
 8001d54:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7fe fbeb 	bl	8000534 <__aeabi_i2d>
 8001d5e:	a310      	add	r3, pc, #64	; (adr r3, 8001da0 <main+0x6e8>)
 8001d60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d64:	f7fe fd7a 	bl	800085c <__aeabi_ddiv>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	460b      	mov	r3, r1
 8001d6c:	4610      	mov	r0, r2
 8001d6e:	4619      	mov	r1, r3
 8001d70:	f7fe ff42 	bl	8000bf8 <__aeabi_d2f>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4a17      	ldr	r2, [pc, #92]	; (8001dd4 <main+0x71c>)
 8001d78:	6013      	str	r3, [r2, #0]
		  }
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001d7a:	4817      	ldr	r0, [pc, #92]	; (8001dd8 <main+0x720>)
 8001d7c:	f007 fc6e 	bl	800965c <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001d80:	4b16      	ldr	r3, [pc, #88]	; (8001ddc <main+0x724>)
 8001d82:	2201      	movs	r2, #1
 8001d84:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001d86:	4b0e      	ldr	r3, [pc, #56]	; (8001dc0 <main+0x708>)
 8001d88:	2203      	movs	r2, #3
 8001d8a:	601a      	str	r2, [r3, #0]
		  break;
 8001d8c:	e004      	b.n	8001d98 <main+0x6e0>
		  break;
 8001d8e:	bf00      	nop
 8001d90:	e4ed      	b.n	800176e <main+0xb6>
		  break;
 8001d92:	bf00      	nop
 8001d94:	e4eb      	b.n	800176e <main+0xb6>
		  break;
 8001d96:	bf00      	nop
  {
 8001d98:	e4e9      	b.n	800176e <main+0xb6>
 8001d9a:	bf00      	nop
 8001d9c:	f3af 8000 	nop.w
 8001da0:	cccccccd 	.word	0xcccccccd
 8001da4:	3fdccccc 	.word	0x3fdccccc
 8001da8:	2000054c 	.word	0x2000054c
 8001dac:	40020400 	.word	0x40020400
 8001db0:	20000b24 	.word	0x20000b24
 8001db4:	20000b20 	.word	0x20000b20
 8001db8:	20000b18 	.word	0x20000b18
 8001dbc:	2000024c 	.word	0x2000024c
 8001dc0:	20000200 	.word	0x20000200
 8001dc4:	20001000 	.word	0x20001000
 8001dc8:	200010dc 	.word	0x200010dc
 8001dcc:	200010de 	.word	0x200010de
 8001dd0:	2000096c 	.word	0x2000096c
 8001dd4:	20000974 	.word	0x20000974
 8001dd8:	200006b4 	.word	0x200006b4
 8001ddc:	200010e0 	.word	0x200010e0

08001de0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b094      	sub	sp, #80	; 0x50
 8001de4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001de6:	f107 0320 	add.w	r3, r7, #32
 8001dea:	2230      	movs	r2, #48	; 0x30
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f00a fc14 	bl	800c61c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001df4:	f107 030c 	add.w	r3, r7, #12
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e04:	2300      	movs	r3, #0
 8001e06:	60bb      	str	r3, [r7, #8]
 8001e08:	4b27      	ldr	r3, [pc, #156]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0c:	4a26      	ldr	r2, [pc, #152]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e12:	6413      	str	r3, [r2, #64]	; 0x40
 8001e14:	4b24      	ldr	r3, [pc, #144]	; (8001ea8 <SystemClock_Config+0xc8>)
 8001e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e1c:	60bb      	str	r3, [r7, #8]
 8001e1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	2300      	movs	r3, #0
 8001e22:	607b      	str	r3, [r7, #4]
 8001e24:	4b21      	ldr	r3, [pc, #132]	; (8001eac <SystemClock_Config+0xcc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a20      	ldr	r2, [pc, #128]	; (8001eac <SystemClock_Config+0xcc>)
 8001e2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	4b1e      	ldr	r3, [pc, #120]	; (8001eac <SystemClock_Config+0xcc>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e3c:	2302      	movs	r3, #2
 8001e3e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e44:	2310      	movs	r3, #16
 8001e46:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e48:	2302      	movs	r3, #2
 8001e4a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001e50:	2308      	movs	r3, #8
 8001e52:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001e54:	2364      	movs	r3, #100	; 0x64
 8001e56:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e60:	f107 0320 	add.w	r3, r7, #32
 8001e64:	4618      	mov	r0, r3
 8001e66:	f006 feab 	bl	8008bc0 <HAL_RCC_OscConfig>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e70:	f002 fcd0 	bl	8004814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e74:	230f      	movs	r3, #15
 8001e76:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e78:	2302      	movs	r3, #2
 8001e7a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e84:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001e8a:	f107 030c 	add.w	r3, r7, #12
 8001e8e:	2103      	movs	r1, #3
 8001e90:	4618      	mov	r0, r3
 8001e92:	f007 f90d 	bl	80090b0 <HAL_RCC_ClockConfig>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d001      	beq.n	8001ea0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e9c:	f002 fcba 	bl	8004814 <Error_Handler>
  }
}
 8001ea0:	bf00      	nop
 8001ea2:	3750      	adds	r7, #80	; 0x50
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40007000 	.word	0x40007000

08001eb0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b084      	sub	sp, #16
 8001eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001eb6:	463b      	mov	r3, r7
 8001eb8:	2200      	movs	r2, #0
 8001eba:	601a      	str	r2, [r3, #0]
 8001ebc:	605a      	str	r2, [r3, #4]
 8001ebe:	609a      	str	r2, [r3, #8]
 8001ec0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ec2:	4b28      	ldr	r3, [pc, #160]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ec4:	4a28      	ldr	r2, [pc, #160]	; (8001f68 <MX_ADC1_Init+0xb8>)
 8001ec6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ec8:	4b26      	ldr	r3, [pc, #152]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001eca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001ece:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001ed6:	4b23      	ldr	r3, [pc, #140]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ede:	2201      	movs	r2, #1
 8001ee0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001ee2:	4b20      	ldr	r3, [pc, #128]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001eea:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ef0:	4b1c      	ldr	r3, [pc, #112]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <MX_ADC1_Init+0xbc>)
 8001ef4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ef6:	4b1b      	ldr	r3, [pc, #108]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001efe:	2202      	movs	r2, #2
 8001f00:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001f02:	4b18      	ldr	r3, [pc, #96]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001f10:	4814      	ldr	r0, [pc, #80]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f12:	f003 f983 	bl	800521c <HAL_ADC_Init>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d001      	beq.n	8001f20 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001f1c:	f002 fc7a 	bl	8004814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001f20:	2300      	movs	r3, #0
 8001f22:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001f24:	2301      	movs	r3, #1
 8001f26:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001f28:	2303      	movs	r3, #3
 8001f2a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	4619      	mov	r1, r3
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f32:	f003 fac5 	bl	80054c0 <HAL_ADC_ConfigChannel>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001f3c:	f002 fc6a 	bl	8004814 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001f40:	2301      	movs	r3, #1
 8001f42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001f44:	2302      	movs	r3, #2
 8001f46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001f48:	463b      	mov	r3, r7
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4805      	ldr	r0, [pc, #20]	; (8001f64 <MX_ADC1_Init+0xb4>)
 8001f4e:	f003 fab7 	bl	80054c0 <HAL_ADC_ConfigChannel>
 8001f52:	4603      	mov	r3, r0
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d001      	beq.n	8001f5c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001f58:	f002 fc5c 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001f5c:	bf00      	nop
 8001f5e:	3710      	adds	r7, #16
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000450 	.word	0x20000450
 8001f68:	40012000 	.word	0x40012000
 8001f6c:	0f000001 	.word	0x0f000001

08001f70 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f74:	4b12      	ldr	r3, [pc, #72]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f76:	4a13      	ldr	r2, [pc, #76]	; (8001fc4 <MX_I2C1_Init+0x54>)
 8001f78:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f7a:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f7c:	4a12      	ldr	r2, [pc, #72]	; (8001fc8 <MX_I2C1_Init+0x58>)
 8001f7e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f80:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f8e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f92:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f94:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001fa0:	4b07      	ldr	r3, [pc, #28]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001fa6:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001fac:	4804      	ldr	r0, [pc, #16]	; (8001fc0 <MX_I2C1_Init+0x50>)
 8001fae:	f004 fc33 	bl	8006818 <HAL_I2C_Init>
 8001fb2:	4603      	mov	r3, r0
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d001      	beq.n	8001fbc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001fb8:	f002 fc2c 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001fbc:	bf00      	nop
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	200004f8 	.word	0x200004f8
 8001fc4:	40005400 	.word	0x40005400
 8001fc8:	000186a0 	.word	0x000186a0

08001fcc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b092      	sub	sp, #72	; 0x48
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001fdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	601a      	str	r2, [r3, #0]
 8001fe4:	605a      	str	r2, [r3, #4]
 8001fe6:	609a      	str	r2, [r3, #8]
 8001fe8:	60da      	str	r2, [r3, #12]
 8001fea:	611a      	str	r2, [r3, #16]
 8001fec:	615a      	str	r2, [r3, #20]
 8001fee:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ff0:	1d3b      	adds	r3, r7, #4
 8001ff2:	2220      	movs	r2, #32
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f00a fb10 	bl	800c61c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ffc:	4b39      	ldr	r3, [pc, #228]	; (80020e4 <MX_TIM1_Init+0x118>)
 8001ffe:	4a3a      	ldr	r2, [pc, #232]	; (80020e8 <MX_TIM1_Init+0x11c>)
 8002000:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8002002:	4b38      	ldr	r3, [pc, #224]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002004:	2200      	movs	r2, #0
 8002006:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002008:	4b36      	ldr	r3, [pc, #216]	; (80020e4 <MX_TIM1_Init+0x118>)
 800200a:	2200      	movs	r2, #0
 800200c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 800200e:	4b35      	ldr	r3, [pc, #212]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002010:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8002014:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002016:	4b33      	ldr	r3, [pc, #204]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002018:	2200      	movs	r2, #0
 800201a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800201c:	4b31      	ldr	r3, [pc, #196]	; (80020e4 <MX_TIM1_Init+0x118>)
 800201e:	2200      	movs	r2, #0
 8002020:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002022:	4b30      	ldr	r3, [pc, #192]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002024:	2200      	movs	r2, #0
 8002026:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002028:	482e      	ldr	r0, [pc, #184]	; (80020e4 <MX_TIM1_Init+0x118>)
 800202a:	f007 fc0f 	bl	800984c <HAL_TIM_PWM_Init>
 800202e:	4603      	mov	r3, r0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d001      	beq.n	8002038 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8002034:	f002 fbee 	bl	8004814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002038:	2300      	movs	r3, #0
 800203a:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800203c:	2300      	movs	r3, #0
 800203e:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002040:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002044:	4619      	mov	r1, r3
 8002046:	4827      	ldr	r0, [pc, #156]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002048:	f008 fef2 	bl	800ae30 <HAL_TIMEx_MasterConfigSynchronization>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8002052:	f002 fbdf 	bl	8004814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002056:	2360      	movs	r3, #96	; 0x60
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800205a:	2300      	movs	r3, #0
 800205c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800205e:	2300      	movs	r3, #0
 8002060:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002062:	2300      	movs	r3, #0
 8002064:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002066:	2300      	movs	r3, #0
 8002068:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800206a:	2300      	movs	r3, #0
 800206c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800206e:	2300      	movs	r3, #0
 8002070:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002076:	2200      	movs	r2, #0
 8002078:	4619      	mov	r1, r3
 800207a:	481a      	ldr	r0, [pc, #104]	; (80020e4 <MX_TIM1_Init+0x118>)
 800207c:	f008 f886 	bl	800a18c <HAL_TIM_PWM_ConfigChannel>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8002086:	f002 fbc5 	bl	8004814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800208a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800208e:	2204      	movs	r2, #4
 8002090:	4619      	mov	r1, r3
 8002092:	4814      	ldr	r0, [pc, #80]	; (80020e4 <MX_TIM1_Init+0x118>)
 8002094:	f008 f87a 	bl	800a18c <HAL_TIM_PWM_ConfigChannel>
 8002098:	4603      	mov	r3, r0
 800209a:	2b00      	cmp	r3, #0
 800209c:	d001      	beq.n	80020a2 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 800209e:	f002 fbb9 	bl	8004814 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020a2:	2300      	movs	r3, #0
 80020a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020a6:	2300      	movs	r3, #0
 80020a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020aa:	2300      	movs	r3, #0
 80020ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020b2:	2300      	movs	r3, #0
 80020b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020b6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020bc:	2300      	movs	r3, #0
 80020be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	4619      	mov	r1, r3
 80020c4:	4807      	ldr	r0, [pc, #28]	; (80020e4 <MX_TIM1_Init+0x118>)
 80020c6:	f008 ff21 	bl	800af0c <HAL_TIMEx_ConfigBreakDeadTime>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d001      	beq.n	80020d4 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 80020d0:	f002 fba0 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80020d4:	4803      	ldr	r0, [pc, #12]	; (80020e4 <MX_TIM1_Init+0x118>)
 80020d6:	f002 fd59 	bl	8004b8c <HAL_TIM_MspPostInit>

}
 80020da:	bf00      	nop
 80020dc:	3748      	adds	r7, #72	; 0x48
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	2000054c 	.word	0x2000054c
 80020e8:	40010000 	.word	0x40010000

080020ec <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b08c      	sub	sp, #48	; 0x30
 80020f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80020f2:	f107 030c 	add.w	r3, r7, #12
 80020f6:	2224      	movs	r2, #36	; 0x24
 80020f8:	2100      	movs	r1, #0
 80020fa:	4618      	mov	r0, r3
 80020fc:	f00a fa8e 	bl	800c61c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002108:	4b20      	ldr	r3, [pc, #128]	; (800218c <MX_TIM3_Init+0xa0>)
 800210a:	4a21      	ldr	r2, [pc, #132]	; (8002190 <MX_TIM3_Init+0xa4>)
 800210c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800210e:	4b1f      	ldr	r3, [pc, #124]	; (800218c <MX_TIM3_Init+0xa0>)
 8002110:	2200      	movs	r2, #0
 8002112:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002114:	4b1d      	ldr	r3, [pc, #116]	; (800218c <MX_TIM3_Init+0xa0>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 800211a:	4b1c      	ldr	r3, [pc, #112]	; (800218c <MX_TIM3_Init+0xa0>)
 800211c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002120:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002122:	4b1a      	ldr	r3, [pc, #104]	; (800218c <MX_TIM3_Init+0xa0>)
 8002124:	2200      	movs	r2, #0
 8002126:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002128:	4b18      	ldr	r3, [pc, #96]	; (800218c <MX_TIM3_Init+0xa0>)
 800212a:	2200      	movs	r2, #0
 800212c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800212e:	2303      	movs	r3, #3
 8002130:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8002136:	2301      	movs	r3, #1
 8002138:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800213a:	2300      	movs	r3, #0
 800213c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800213e:	230f      	movs	r3, #15
 8002140:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8002142:	2300      	movs	r3, #0
 8002144:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8002146:	2301      	movs	r3, #1
 8002148:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 800214e:	230f      	movs	r3, #15
 8002150:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4619      	mov	r1, r3
 8002158:	480c      	ldr	r0, [pc, #48]	; (800218c <MX_TIM3_Init+0xa0>)
 800215a:	f007 fd51 	bl	8009c00 <HAL_TIM_Encoder_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8002164:	f002 fb56 	bl	8004814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002168:	2300      	movs	r3, #0
 800216a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800216c:	2300      	movs	r3, #0
 800216e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_TIM3_Init+0xa0>)
 8002176:	f008 fe5b 	bl	800ae30 <HAL_TIMEx_MasterConfigSynchronization>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002180:	f002 fb48 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002184:	bf00      	nop
 8002186:	3730      	adds	r7, #48	; 0x30
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000600 	.word	0x20000600
 8002190:	40000400 	.word	0x40000400

08002194 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800219a:	463b      	mov	r3, r7
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]
 80021a4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80021a6:	4b16      	ldr	r3, [pc, #88]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021a8:	4a16      	ldr	r2, [pc, #88]	; (8002204 <MX_TIM9_Init+0x70>)
 80021aa:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 80021ac:	4b14      	ldr	r3, [pc, #80]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ae:	2263      	movs	r2, #99	; 0x63
 80021b0:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b2:	4b13      	ldr	r3, [pc, #76]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 80021b8:	4b11      	ldr	r3, [pc, #68]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ba:	f240 32e7 	movw	r2, #999	; 0x3e7
 80021be:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021c0:	4b0f      	ldr	r3, [pc, #60]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c6:	4b0e      	ldr	r3, [pc, #56]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80021cc:	480c      	ldr	r0, [pc, #48]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021ce:	f007 f98f 	bl	80094f0 <HAL_TIM_Base_Init>
 80021d2:	4603      	mov	r3, r0
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d001      	beq.n	80021dc <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 80021d8:	f002 fb1c 	bl	8004814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021e0:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 80021e2:	463b      	mov	r3, r7
 80021e4:	4619      	mov	r1, r3
 80021e6:	4806      	ldr	r0, [pc, #24]	; (8002200 <MX_TIM9_Init+0x6c>)
 80021e8:	f008 f892 	bl	800a310 <HAL_TIM_ConfigClockSource>
 80021ec:	4603      	mov	r3, r0
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d001      	beq.n	80021f6 <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 80021f2:	f002 fb0f 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 80021f6:	bf00      	nop
 80021f8:	3710      	adds	r7, #16
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	200006b4 	.word	0x200006b4
 8002204:	40014000 	.word	0x40014000

08002208 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b088      	sub	sp, #32
 800220c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800220e:	1d3b      	adds	r3, r7, #4
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
 800221c:	615a      	str	r2, [r3, #20]
 800221e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002220:	4b21      	ldr	r3, [pc, #132]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002222:	4a22      	ldr	r2, [pc, #136]	; (80022ac <MX_TIM11_Init+0xa4>)
 8002224:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 8002226:	4b20      	ldr	r3, [pc, #128]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002228:	2263      	movs	r2, #99	; 0x63
 800222a:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 800222c:	4b1e      	ldr	r3, [pc, #120]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800222e:	2200      	movs	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 8002232:	4b1d      	ldr	r3, [pc, #116]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002234:	f240 72d5 	movw	r2, #2005	; 0x7d5
 8002238:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800223a:	4b1b      	ldr	r3, [pc, #108]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800223c:	2200      	movs	r2, #0
 800223e:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002242:	2200      	movs	r2, #0
 8002244:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8002246:	4818      	ldr	r0, [pc, #96]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002248:	f007 f952 	bl	80094f0 <HAL_TIM_Base_Init>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 8002252:	f002 fadf 	bl	8004814 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 8002256:	4814      	ldr	r0, [pc, #80]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002258:	f007 fa92 	bl	8009780 <HAL_TIM_OC_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 8002262:	f002 fad7 	bl	8004814 <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 8002266:	2108      	movs	r1, #8
 8002268:	480f      	ldr	r0, [pc, #60]	; (80022a8 <MX_TIM11_Init+0xa0>)
 800226a:	f007 fbfb 	bl	8009a64 <HAL_TIM_OnePulse_Init>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 8002274:	f002 face 	bl	8004814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002278:	2310      	movs	r3, #16
 800227a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 800227c:	f240 5399 	movw	r3, #1433	; 0x599
 8002280:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002282:	2300      	movs	r3, #0
 8002284:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800228a:	1d3b      	adds	r3, r7, #4
 800228c:	2200      	movs	r2, #0
 800228e:	4619      	mov	r1, r3
 8002290:	4805      	ldr	r0, [pc, #20]	; (80022a8 <MX_TIM11_Init+0xa0>)
 8002292:	f007 ff1f 	bl	800a0d4 <HAL_TIM_OC_ConfigChannel>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d001      	beq.n	80022a0 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 800229c:	f002 faba 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 80022a0:	bf00      	nop
 80022a2:	3720      	adds	r7, #32
 80022a4:	46bd      	mov	sp, r7
 80022a6:	bd80      	pop	{r7, pc}
 80022a8:	20000768 	.word	0x20000768
 80022ac:	40014800 	.word	0x40014800

080022b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022b4:	4b11      	ldr	r3, [pc, #68]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	; (8002300 <MX_USART1_UART_Init+0x50>)
 80022b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ba:	4b10      	ldr	r3, [pc, #64]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022c2:	4b0e      	ldr	r3, [pc, #56]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022c4:	2200      	movs	r2, #0
 80022c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022c8:	4b0c      	ldr	r3, [pc, #48]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d0:	2200      	movs	r2, #0
 80022d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022d4:	4b09      	ldr	r3, [pc, #36]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022d6:	220c      	movs	r2, #12
 80022d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022dc:	2200      	movs	r2, #0
 80022de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_USART1_UART_Init+0x4c>)
 80022e8:	f008 fe80 	bl	800afec <HAL_UART_Init>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d001      	beq.n	80022f6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80022f2:	f002 fa8f 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	2000081c 	.word	0x2000081c
 8002300:	40011000 	.word	0x40011000

08002304 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002308:	4b12      	ldr	r3, [pc, #72]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800230a:	4a13      	ldr	r2, [pc, #76]	; (8002358 <MX_USART2_UART_Init+0x54>)
 800230c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 800230e:	4b11      	ldr	r3, [pc, #68]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002310:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002314:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 8002316:	4b0f      	ldr	r3, [pc, #60]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002318:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800231c:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800231e:	4b0d      	ldr	r3, [pc, #52]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002320:	2200      	movs	r2, #0
 8002322:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002324:	4b0b      	ldr	r3, [pc, #44]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002326:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800232a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800232c:	4b09      	ldr	r3, [pc, #36]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800232e:	220c      	movs	r2, #12
 8002330:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002332:	4b08      	ldr	r3, [pc, #32]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002334:	2200      	movs	r2, #0
 8002336:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <MX_USART2_UART_Init+0x50>)
 800233a:	2200      	movs	r2, #0
 800233c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800233e:	4805      	ldr	r0, [pc, #20]	; (8002354 <MX_USART2_UART_Init+0x50>)
 8002340:	f008 fe54 	bl	800afec <HAL_UART_Init>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 800234a:	f002 fa63 	bl	8004814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800234e:	bf00      	nop
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000890 	.word	0x20000890
 8002358:	40004400 	.word	0x40004400

0800235c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]
 8002366:	4b17      	ldr	r3, [pc, #92]	; (80023c4 <MX_DMA_Init+0x68>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a16      	ldr	r2, [pc, #88]	; (80023c4 <MX_DMA_Init+0x68>)
 800236c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b14      	ldr	r3, [pc, #80]	; (80023c4 <MX_DMA_Init+0x68>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800237a:	607b      	str	r3, [r7, #4]
 800237c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	603b      	str	r3, [r7, #0]
 8002382:	4b10      	ldr	r3, [pc, #64]	; (80023c4 <MX_DMA_Init+0x68>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a0f      	ldr	r2, [pc, #60]	; (80023c4 <MX_DMA_Init+0x68>)
 8002388:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <MX_DMA_Init+0x68>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800239a:	2200      	movs	r2, #0
 800239c:	2100      	movs	r1, #0
 800239e:	2011      	movs	r0, #17
 80023a0:	f003 fc19 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80023a4:	2011      	movs	r0, #17
 80023a6:	f003 fc32 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80023aa:	2200      	movs	r2, #0
 80023ac:	2100      	movs	r1, #0
 80023ae:	2038      	movs	r0, #56	; 0x38
 80023b0:	f003 fc11 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80023b4:	2038      	movs	r0, #56	; 0x38
 80023b6:	f003 fc2a 	bl	8005c0e <HAL_NVIC_EnableIRQ>

}
 80023ba:	bf00      	nop
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	bf00      	nop
 80023c4:	40023800 	.word	0x40023800

080023c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023ce:	f107 0314 	add.w	r3, r7, #20
 80023d2:	2200      	movs	r2, #0
 80023d4:	601a      	str	r2, [r3, #0]
 80023d6:	605a      	str	r2, [r3, #4]
 80023d8:	609a      	str	r2, [r3, #8]
 80023da:	60da      	str	r2, [r3, #12]
 80023dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023de:	2300      	movs	r3, #0
 80023e0:	613b      	str	r3, [r7, #16]
 80023e2:	4b53      	ldr	r3, [pc, #332]	; (8002530 <MX_GPIO_Init+0x168>)
 80023e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e6:	4a52      	ldr	r2, [pc, #328]	; (8002530 <MX_GPIO_Init+0x168>)
 80023e8:	f043 0304 	orr.w	r3, r3, #4
 80023ec:	6313      	str	r3, [r2, #48]	; 0x30
 80023ee:	4b50      	ldr	r3, [pc, #320]	; (8002530 <MX_GPIO_Init+0x168>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	f003 0304 	and.w	r3, r3, #4
 80023f6:	613b      	str	r3, [r7, #16]
 80023f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023fa:	2300      	movs	r3, #0
 80023fc:	60fb      	str	r3, [r7, #12]
 80023fe:	4b4c      	ldr	r3, [pc, #304]	; (8002530 <MX_GPIO_Init+0x168>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002402:	4a4b      	ldr	r2, [pc, #300]	; (8002530 <MX_GPIO_Init+0x168>)
 8002404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002408:	6313      	str	r3, [r2, #48]	; 0x30
 800240a:	4b49      	ldr	r3, [pc, #292]	; (8002530 <MX_GPIO_Init+0x168>)
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	60fb      	str	r3, [r7, #12]
 8002414:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	60bb      	str	r3, [r7, #8]
 800241a:	4b45      	ldr	r3, [pc, #276]	; (8002530 <MX_GPIO_Init+0x168>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241e:	4a44      	ldr	r2, [pc, #272]	; (8002530 <MX_GPIO_Init+0x168>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	; 0x30
 8002426:	4b42      	ldr	r3, [pc, #264]	; (8002530 <MX_GPIO_Init+0x168>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002432:	2300      	movs	r3, #0
 8002434:	607b      	str	r3, [r7, #4]
 8002436:	4b3e      	ldr	r3, [pc, #248]	; (8002530 <MX_GPIO_Init+0x168>)
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <MX_GPIO_Init+0x168>)
 800243c:	f043 0302 	orr.w	r3, r3, #2
 8002440:	6313      	str	r3, [r2, #48]	; 0x30
 8002442:	4b3b      	ldr	r3, [pc, #236]	; (8002530 <MX_GPIO_Init+0x168>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002446:	f003 0302 	and.w	r3, r3, #2
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800244e:	2200      	movs	r2, #0
 8002450:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8002454:	4837      	ldr	r0, [pc, #220]	; (8002534 <MX_GPIO_Init+0x16c>)
 8002456:	f004 f9ad 	bl	80067b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800245a:	2302      	movs	r3, #2
 800245c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800245e:	2300      	movs	r3, #0
 8002460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002466:	f107 0314 	add.w	r3, r7, #20
 800246a:	4619      	mov	r1, r3
 800246c:	4832      	ldr	r0, [pc, #200]	; (8002538 <MX_GPIO_Init+0x170>)
 800246e:	f004 f805 	bl	800647c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002472:	230c      	movs	r3, #12
 8002474:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002476:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800247a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800247c:	2300      	movs	r3, #0
 800247e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	482c      	ldr	r0, [pc, #176]	; (8002538 <MX_GPIO_Init+0x170>)
 8002488:	f003 fff8 	bl	800647c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 800248c:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002490:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002492:	2300      	movs	r3, #0
 8002494:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800249a:	f107 0314 	add.w	r3, r7, #20
 800249e:	4619      	mov	r1, r3
 80024a0:	4826      	ldr	r0, [pc, #152]	; (800253c <MX_GPIO_Init+0x174>)
 80024a2:	f003 ffeb 	bl	800647c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80024a6:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80024aa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024ac:	2301      	movs	r3, #1
 80024ae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b0:	2300      	movs	r3, #0
 80024b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b4:	2300      	movs	r3, #0
 80024b6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024b8:	f107 0314 	add.w	r3, r7, #20
 80024bc:	4619      	mov	r1, r3
 80024be:	481d      	ldr	r0, [pc, #116]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024c0:	f003 ffdc 	bl	800647c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80024c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80024c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80024ca:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80024ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80024d0:	2302      	movs	r3, #2
 80024d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d4:	f107 0314 	add.w	r3, r7, #20
 80024d8:	4619      	mov	r1, r3
 80024da:	4816      	ldr	r0, [pc, #88]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024dc:	f003 ffce 	bl	800647c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80024e0:	2360      	movs	r3, #96	; 0x60
 80024e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e8:	2300      	movs	r3, #0
 80024ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ec:	f107 0314 	add.w	r3, r7, #20
 80024f0:	4619      	mov	r1, r3
 80024f2:	4810      	ldr	r0, [pc, #64]	; (8002534 <MX_GPIO_Init+0x16c>)
 80024f4:	f003 ffc2 	bl	800647c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80024f8:	2200      	movs	r2, #0
 80024fa:	2100      	movs	r1, #0
 80024fc:	2008      	movs	r0, #8
 80024fe:	f003 fb6a 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002502:	2008      	movs	r0, #8
 8002504:	f003 fb83 	bl	8005c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8002508:	2200      	movs	r2, #0
 800250a:	2100      	movs	r1, #0
 800250c:	2009      	movs	r0, #9
 800250e:	f003 fb62 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002512:	2009      	movs	r0, #9
 8002514:	f003 fb7b 	bl	8005c0e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002518:	2200      	movs	r2, #0
 800251a:	2100      	movs	r1, #0
 800251c:	2028      	movs	r0, #40	; 0x28
 800251e:	f003 fb5a 	bl	8005bd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002522:	2028      	movs	r0, #40	; 0x28
 8002524:	f003 fb73 	bl	8005c0e <HAL_NVIC_EnableIRQ>

}
 8002528:	bf00      	nop
 800252a:	3728      	adds	r7, #40	; 0x28
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}
 8002530:	40023800 	.word	0x40023800
 8002534:	40020400 	.word	0x40020400
 8002538:	40020800 	.word	0x40020800
 800253c:	40020000 	.word	0x40020000

08002540 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	4603      	mov	r3, r0
 8002548:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 800254a:	88fb      	ldrh	r3, [r7, #6]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d106      	bne.n	800255e <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 8002550:	4b14      	ldr	r3, [pc, #80]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002552:	2205      	movs	r2, #5
 8002554:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 8002556:	4b14      	ldr	r3, [pc, #80]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x68>)
 8002558:	2203      	movs	r2, #3
 800255a:	601a      	str	r2, [r3, #0]
 800255c:	e008      	b.n	8002570 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin == GPIO_PIN_3)
 800255e:	88fb      	ldrh	r3, [r7, #6]
 8002560:	2b08      	cmp	r3, #8
 8002562:	d105      	bne.n	8002570 <HAL_GPIO_EXTI_Callback+0x30>
	{
		scheduler = 5;
 8002564:	4b0f      	ldr	r3, [pc, #60]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002566:	2205      	movs	r2, #5
 8002568:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 800256a:	4b0f      	ldr	r3, [pc, #60]	; (80025a8 <HAL_GPIO_EXTI_Callback+0x68>)
 800256c:	2202      	movs	r2, #2
 800256e:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_15) //Push Emergency
 8002570:	88fb      	ldrh	r3, [r7, #6]
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002576:	d111      	bne.n	800259c <HAL_GPIO_EXTI_Callback+0x5c>
	{
		if(Emercount == 0)
 8002578:	4b0c      	ldr	r3, [pc, #48]	; (80025ac <HAL_GPIO_EXTI_Callback+0x6c>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2b00      	cmp	r3, #0
 800257e:	d10d      	bne.n	800259c <HAL_GPIO_EXTI_Callback+0x5c>
		{
			EndEffectorState = 7;			//Emergency
 8002580:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <HAL_GPIO_EXTI_Callback+0x70>)
 8002582:	2207      	movs	r2, #7
 8002584:	601a      	str	r2, [r3, #0]
			EndEffectorWriteFlag = 1;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <HAL_GPIO_EXTI_Callback+0x74>)
 8002588:	2201      	movs	r2, #1
 800258a:	701a      	strb	r2, [r3, #0]
			EndEffectorWrite();
 800258c:	f000 f874 	bl	8002678 <EndEffectorWrite>
			Emercount = 1;
 8002590:	4b06      	ldr	r3, [pc, #24]	; (80025ac <HAL_GPIO_EXTI_Callback+0x6c>)
 8002592:	2201      	movs	r2, #1
 8002594:	601a      	str	r2, [r3, #0]
			scheduler = 6;
 8002596:	4b03      	ldr	r3, [pc, #12]	; (80025a4 <HAL_GPIO_EXTI_Callback+0x64>)
 8002598:	2206      	movs	r2, #6
 800259a:	601a      	str	r2, [r3, #0]
		}
	}
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	20000200 	.word	0x20000200
 80025a8:	2000024c 	.word	0x2000024c
 80025ac:	20000b24 	.word	0x20000b24
 80025b0:	20000b20 	.word	0x20000b20
 80025b4:	20000b18 	.word	0x20000b18

080025b8 <Homing>:

void Homing()
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 80025bc:	4b27      	ldr	r3, [pc, #156]	; (800265c <Homing+0xa4>)
 80025be:	2204      	movs	r2, #4
 80025c0:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 80025c2:	4b26      	ldr	r3, [pc, #152]	; (800265c <Homing+0xa4>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 80025ca:	4b24      	ldr	r3, [pc, #144]	; (800265c <Homing+0xa4>)
 80025cc:	2204      	movs	r2, #4
 80025ce:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 80025d0:	4b23      	ldr	r3, [pc, #140]	; (8002660 <Homing+0xa8>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d109      	bne.n	80025ec <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80025d8:	4b22      	ldr	r3, [pc, #136]	; (8002664 <Homing+0xac>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2200      	movs	r2, #0
 80025de:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 80025e0:	4b20      	ldr	r3, [pc, #128]	; (8002664 <Homing+0xac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025e8:	635a      	str	r2, [r3, #52]	; 0x34
 80025ea:	e00c      	b.n	8002606 <Homing+0x4e>
	}

	else if (Proximity == 2)
 80025ec:	4b1c      	ldr	r3, [pc, #112]	; (8002660 <Homing+0xa8>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d108      	bne.n	8002606 <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 80025f4:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <Homing+0xac>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f643 2298 	movw	r2, #15000	; 0x3a98
 80025fc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80025fe:	4b19      	ldr	r3, [pc, #100]	; (8002664 <Homing+0xac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	2200      	movs	r2, #0
 8002604:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 8002606:	2102      	movs	r1, #2
 8002608:	4817      	ldr	r0, [pc, #92]	; (8002668 <Homing+0xb0>)
 800260a:	f004 f8bb 	bl	8006784 <HAL_GPIO_ReadPin>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d120      	bne.n	8002656 <Homing+0x9e>
	{
		Proximity = 0;
 8002614:	4b12      	ldr	r3, [pc, #72]	; (8002660 <Homing+0xa8>)
 8002616:	2200      	movs	r2, #0
 8002618:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 800261a:	4b14      	ldr	r3, [pc, #80]	; (800266c <Homing+0xb4>)
 800261c:	2200      	movs	r2, #0
 800261e:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 8002620:	4b0e      	ldr	r3, [pc, #56]	; (800265c <Homing+0xa4>)
 8002622:	2200      	movs	r2, #0
 8002624:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 8002626:	4b0d      	ldr	r3, [pc, #52]	; (800265c <Homing+0xa4>)
 8002628:	2200      	movs	r2, #0
 800262a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 800262e:	4b0b      	ldr	r3, [pc, #44]	; (800265c <Homing+0xa4>)
 8002630:	2200      	movs	r2, #0
 8002632:	841a      	strh	r2, [r3, #32]

		HAL_Delay(10);
 8002634:	200a      	movs	r0, #10
 8002636:	f002 fdcd 	bl	80051d4 <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800263a:	4b0a      	ldr	r3, [pc, #40]	; (8002664 <Homing+0xac>)
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	2200      	movs	r2, #0
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002642:	4b08      	ldr	r3, [pc, #32]	; (8002664 <Homing+0xac>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	2200      	movs	r2, #0
 8002648:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 800264a:	4b09      	ldr	r3, [pc, #36]	; (8002670 <Homing+0xb8>)
 800264c:	2200      	movs	r2, #0
 800264e:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 8002650:	4b08      	ldr	r3, [pc, #32]	; (8002674 <Homing+0xbc>)
 8002652:	2200      	movs	r2, #0
 8002654:	601a      	str	r2, [r3, #0]
	}
}
 8002656:	bf00      	nop
 8002658:	bd80      	pop	{r7, pc}
 800265a:	bf00      	nop
 800265c:	20001000 	.word	0x20001000
 8002660:	2000024c 	.word	0x2000024c
 8002664:	2000054c 	.word	0x2000054c
 8002668:	40020800 	.word	0x40020800
 800266c:	20000b24 	.word	0x20000b24
 8002670:	20000b14 	.word	0x20000b14
 8002674:	20000200 	.word	0x20000200

08002678 <EndEffectorWrite>:

void EndEffectorWrite()
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 800267e:	4ba2      	ldr	r3, [pc, #648]	; (8002908 <EndEffectorWrite+0x290>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	2b08      	cmp	r3, #8
 8002684:	f200 813c 	bhi.w	8002900 <EndEffectorWrite+0x288>
 8002688:	a201      	add	r2, pc, #4	; (adr r2, 8002690 <EndEffectorWrite+0x18>)
 800268a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800268e:	bf00      	nop
 8002690:	080026b5 	.word	0x080026b5
 8002694:	080026d7 	.word	0x080026d7
 8002698:	080026ff 	.word	0x080026ff
 800269c:	08002727 	.word	0x08002727
 80026a0:	0800274f 	.word	0x0800274f
 80026a4:	080027c3 	.word	0x080027c3
 80026a8:	0800286d 	.word	0x0800286d
 80026ac:	08002893 	.word	0x08002893
 80026b0:	080028b9 	.word	0x080028b9
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 80026b4:	4b95      	ldr	r3, [pc, #596]	; (800290c <EndEffectorWrite+0x294>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	f040 8110 	bne.w	80028de <EndEffectorWrite+0x266>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 80026be:	2364      	movs	r3, #100	; 0x64
 80026c0:	9300      	str	r3, [sp, #0]
 80026c2:	2304      	movs	r3, #4
 80026c4:	4a92      	ldr	r2, [pc, #584]	; (8002910 <EndEffectorWrite+0x298>)
 80026c6:	212a      	movs	r1, #42	; 0x2a
 80026c8:	4892      	ldr	r0, [pc, #584]	; (8002914 <EndEffectorWrite+0x29c>)
 80026ca:	f004 f9e9 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 80026ce:	4b8f      	ldr	r3, [pc, #572]	; (800290c <EndEffectorWrite+0x294>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026d4:	e103      	b.n	80028de <EndEffectorWrite+0x266>
	case 1:
		if(EndEffectorWriteFlag == 1)
 80026d6:	4b8d      	ldr	r3, [pc, #564]	; (800290c <EndEffectorWrite+0x294>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	2b01      	cmp	r3, #1
 80026dc:	f040 8101 	bne.w	80028e2 <EndEffectorWrite+0x26a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 80026e0:	2364      	movs	r3, #100	; 0x64
 80026e2:	9300      	str	r3, [sp, #0]
 80026e4:	2302      	movs	r3, #2
 80026e6:	4a8c      	ldr	r2, [pc, #560]	; (8002918 <EndEffectorWrite+0x2a0>)
 80026e8:	212a      	movs	r1, #42	; 0x2a
 80026ea:	488a      	ldr	r0, [pc, #552]	; (8002914 <EndEffectorWrite+0x29c>)
 80026ec:	f004 f9d8 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 80026f0:	4b8a      	ldr	r3, [pc, #552]	; (800291c <EndEffectorWrite+0x2a4>)
 80026f2:	2201      	movs	r2, #1
 80026f4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80026f6:	4b85      	ldr	r3, [pc, #532]	; (800290c <EndEffectorWrite+0x294>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026fc:	e0f1      	b.n	80028e2 <EndEffectorWrite+0x26a>
	case 2:
		if(EndEffectorWriteFlag == 1)
 80026fe:	4b83      	ldr	r3, [pc, #524]	; (800290c <EndEffectorWrite+0x294>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	f040 80ef 	bne.w	80028e6 <EndEffectorWrite+0x26e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 8002708:	2364      	movs	r3, #100	; 0x64
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2302      	movs	r3, #2
 800270e:	4a84      	ldr	r2, [pc, #528]	; (8002920 <EndEffectorWrite+0x2a8>)
 8002710:	212a      	movs	r1, #42	; 0x2a
 8002712:	4880      	ldr	r0, [pc, #512]	; (8002914 <EndEffectorWrite+0x29c>)
 8002714:	f004 f9c4 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 8002718:	4b80      	ldr	r3, [pc, #512]	; (800291c <EndEffectorWrite+0x2a4>)
 800271a:	2200      	movs	r2, #0
 800271c:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800271e:	4b7b      	ldr	r3, [pc, #492]	; (800290c <EndEffectorWrite+0x294>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002724:	e0df      	b.n	80028e6 <EndEffectorWrite+0x26e>
	case 3:
		if(EndEffectorWriteFlag == 1)
 8002726:	4b79      	ldr	r3, [pc, #484]	; (800290c <EndEffectorWrite+0x294>)
 8002728:	781b      	ldrb	r3, [r3, #0]
 800272a:	2b01      	cmp	r3, #1
 800272c:	f040 80dd 	bne.w	80028ea <EndEffectorWrite+0x272>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 8002730:	2364      	movs	r3, #100	; 0x64
 8002732:	9300      	str	r3, [sp, #0]
 8002734:	2302      	movs	r3, #2
 8002736:	4a7b      	ldr	r2, [pc, #492]	; (8002924 <EndEffectorWrite+0x2ac>)
 8002738:	212a      	movs	r1, #42	; 0x2a
 800273a:	4876      	ldr	r0, [pc, #472]	; (8002914 <EndEffectorWrite+0x29c>)
 800273c:	f004 f9b0 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002740:	4b76      	ldr	r3, [pc, #472]	; (800291c <EndEffectorWrite+0x2a4>)
 8002742:	2202      	movs	r2, #2
 8002744:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002746:	4b71      	ldr	r3, [pc, #452]	; (800290c <EndEffectorWrite+0x294>)
 8002748:	2200      	movs	r2, #0
 800274a:	701a      	strb	r2, [r3, #0]
			}
		break;
 800274c:	e0cd      	b.n	80028ea <EndEffectorWrite+0x272>
	case 4:
		if(EndEffectorWriteFlag == 1)
 800274e:	4b6f      	ldr	r3, [pc, #444]	; (800290c <EndEffectorWrite+0x294>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	d114      	bne.n	8002780 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 8002756:	2364      	movs	r3, #100	; 0x64
 8002758:	9300      	str	r3, [sp, #0]
 800275a:	2302      	movs	r3, #2
 800275c:	4a72      	ldr	r2, [pc, #456]	; (8002928 <EndEffectorWrite+0x2b0>)
 800275e:	212a      	movs	r1, #42	; 0x2a
 8002760:	486c      	ldr	r0, [pc, #432]	; (8002914 <EndEffectorWrite+0x29c>)
 8002762:	f004 f99d 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 8002766:	4b6d      	ldr	r3, [pc, #436]	; (800291c <EndEffectorWrite+0x2a4>)
 8002768:	2206      	movs	r2, #6
 800276a:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 800276c:	2064      	movs	r0, #100	; 0x64
 800276e:	f002 fd31 	bl	80051d4 <HAL_Delay>
				EndEffectorReadFlag = 1;
 8002772:	4b6e      	ldr	r3, [pc, #440]	; (800292c <EndEffectorWrite+0x2b4>)
 8002774:	2201      	movs	r2, #1
 8002776:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002778:	4b64      	ldr	r3, [pc, #400]	; (800290c <EndEffectorWrite+0x294>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
 800277e:	e00f      	b.n	80027a0 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <EndEffectorWrite+0x2b4>)
 8002782:	781b      	ldrb	r3, [r3, #0]
 8002784:	2b01      	cmp	r3, #1
 8002786:	d10b      	bne.n	80027a0 <EndEffectorWrite+0x128>
 8002788:	4b62      	ldr	r3, [pc, #392]	; (8002914 <EndEffectorWrite+0x29c>)
 800278a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800278e:	b2db      	uxtb	r3, r3
 8002790:	2b20      	cmp	r3, #32
 8002792:	d105      	bne.n	80027a0 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002794:	2301      	movs	r3, #1
 8002796:	4a66      	ldr	r2, [pc, #408]	; (8002930 <EndEffectorWrite+0x2b8>)
 8002798:	212a      	movs	r1, #42	; 0x2a
 800279a:	485e      	ldr	r0, [pc, #376]	; (8002914 <EndEffectorWrite+0x29c>)
 800279c:	f004 fa7e 	bl	8006c9c <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 80027a0:	4b63      	ldr	r3, [pc, #396]	; (8002930 <EndEffectorWrite+0x2b8>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b07      	cmp	r3, #7
 80027a6:	f040 80a2 	bne.w	80028ee <EndEffectorWrite+0x276>
			{
				TaskType *= -1;
 80027aa:	4b62      	ldr	r3, [pc, #392]	; (8002934 <EndEffectorWrite+0x2bc>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	425b      	negs	r3, r3
 80027b0:	4a60      	ldr	r2, [pc, #384]	; (8002934 <EndEffectorWrite+0x2bc>)
 80027b2:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80027b4:	4b5d      	ldr	r3, [pc, #372]	; (800292c <EndEffectorWrite+0x2b4>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 80027ba:	4b5f      	ldr	r3, [pc, #380]	; (8002938 <EndEffectorWrite+0x2c0>)
 80027bc:	2202      	movs	r2, #2
 80027be:	601a      	str	r2, [r3, #0]
			}
		break;
 80027c0:	e095      	b.n	80028ee <EndEffectorWrite+0x276>
	case 5:
		if(EndEffectorWriteFlag == 1)
 80027c2:	4b52      	ldr	r3, [pc, #328]	; (800290c <EndEffectorWrite+0x294>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d114      	bne.n	80027f4 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 80027ca:	2364      	movs	r3, #100	; 0x64
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	2302      	movs	r3, #2
 80027d0:	4a5a      	ldr	r2, [pc, #360]	; (800293c <EndEffectorWrite+0x2c4>)
 80027d2:	212a      	movs	r1, #42	; 0x2a
 80027d4:	484f      	ldr	r0, [pc, #316]	; (8002914 <EndEffectorWrite+0x29c>)
 80027d6:	f004 f963 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 80027da:	4b50      	ldr	r3, [pc, #320]	; (800291c <EndEffectorWrite+0x2a4>)
 80027dc:	220a      	movs	r2, #10
 80027de:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80027e0:	2064      	movs	r0, #100	; 0x64
 80027e2:	f002 fcf7 	bl	80051d4 <HAL_Delay>
				EndEffectorReadFlag = 1;
 80027e6:	4b51      	ldr	r3, [pc, #324]	; (800292c <EndEffectorWrite+0x2b4>)
 80027e8:	2201      	movs	r2, #1
 80027ea:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80027ec:	4b47      	ldr	r3, [pc, #284]	; (800290c <EndEffectorWrite+0x294>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80027f4:	4b4d      	ldr	r3, [pc, #308]	; (800292c <EndEffectorWrite+0x2b4>)
 80027f6:	781b      	ldrb	r3, [r3, #0]
 80027f8:	2b01      	cmp	r3, #1
 80027fa:	d10b      	bne.n	8002814 <EndEffectorWrite+0x19c>
 80027fc:	4b45      	ldr	r3, [pc, #276]	; (8002914 <EndEffectorWrite+0x29c>)
 80027fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d105      	bne.n	8002814 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002808:	2301      	movs	r3, #1
 800280a:	4a49      	ldr	r2, [pc, #292]	; (8002930 <EndEffectorWrite+0x2b8>)
 800280c:	212a      	movs	r1, #42	; 0x2a
 800280e:	4841      	ldr	r0, [pc, #260]	; (8002914 <EndEffectorWrite+0x29c>)
 8002810:	f004 fa44 	bl	8006c9c <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 8002814:	4b46      	ldr	r3, [pc, #280]	; (8002930 <EndEffectorWrite+0x2b8>)
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d16a      	bne.n	80028f2 <EndEffectorWrite+0x27a>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 800281c:	4b3f      	ldr	r3, [pc, #252]	; (800291c <EndEffectorWrite+0x2a4>)
 800281e:	2202      	movs	r2, #2
 8002820:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 8002822:	4b44      	ldr	r3, [pc, #272]	; (8002934 <EndEffectorWrite+0x2bc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	425b      	negs	r3, r3
 8002828:	4a42      	ldr	r2, [pc, #264]	; (8002934 <EndEffectorWrite+0x2bc>)
 800282a:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 800282c:	4b3f      	ldr	r3, [pc, #252]	; (800292c <EndEffectorWrite+0x2b4>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <EndEffectorWrite+0x2c8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	3301      	adds	r3, #1
 8002838:	4a41      	ldr	r2, [pc, #260]	; (8002940 <EndEffectorWrite+0x2c8>)
 800283a:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 800283c:	4b40      	ldr	r3, [pc, #256]	; (8002940 <EndEffectorWrite+0x2c8>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	2b09      	cmp	r3, #9
 8002842:	d10f      	bne.n	8002864 <EndEffectorWrite+0x1ec>
				{
					HoleSequence = 0;
 8002844:	4b3e      	ldr	r3, [pc, #248]	; (8002940 <EndEffectorWrite+0x2c8>)
 8002846:	2200      	movs	r2, #0
 8002848:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 800284a:	4b3a      	ldr	r3, [pc, #232]	; (8002934 <EndEffectorWrite+0x2bc>)
 800284c:	2201      	movs	r2, #1
 800284e:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 8002850:	4b32      	ldr	r3, [pc, #200]	; (800291c <EndEffectorWrite+0x2a4>)
 8002852:	2200      	movs	r2, #0
 8002854:	805a      	strh	r2, [r3, #2]
					Proximity = 3;
 8002856:	4b3b      	ldr	r3, [pc, #236]	; (8002944 <EndEffectorWrite+0x2cc>)
 8002858:	2203      	movs	r2, #3
 800285a:	601a      	str	r2, [r3, #0]
					scheduler = 5;
 800285c:	4b36      	ldr	r3, [pc, #216]	; (8002938 <EndEffectorWrite+0x2c0>)
 800285e:	2205      	movs	r2, #5
 8002860:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 8002862:	e046      	b.n	80028f2 <EndEffectorWrite+0x27a>
					scheduler = 1;
 8002864:	4b34      	ldr	r3, [pc, #208]	; (8002938 <EndEffectorWrite+0x2c0>)
 8002866:	2201      	movs	r2, #1
 8002868:	601a      	str	r2, [r3, #0]
		break;
 800286a:	e042      	b.n	80028f2 <EndEffectorWrite+0x27a>
	case 6:
		if(EndEffectorWriteFlag == 1)
 800286c:	4b27      	ldr	r3, [pc, #156]	; (800290c <EndEffectorWrite+0x294>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d140      	bne.n	80028f6 <EndEffectorWrite+0x27e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 8002874:	2364      	movs	r3, #100	; 0x64
 8002876:	9300      	str	r3, [sp, #0]
 8002878:	2302      	movs	r3, #2
 800287a:	4a33      	ldr	r2, [pc, #204]	; (8002948 <EndEffectorWrite+0x2d0>)
 800287c:	212a      	movs	r1, #42	; 0x2a
 800287e:	4825      	ldr	r0, [pc, #148]	; (8002914 <EndEffectorWrite+0x29c>)
 8002880:	f004 f90e 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <EndEffectorWrite+0x2a4>)
 8002886:	2200      	movs	r2, #0
 8002888:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800288a:	4b20      	ldr	r3, [pc, #128]	; (800290c <EndEffectorWrite+0x294>)
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002890:	e031      	b.n	80028f6 <EndEffectorWrite+0x27e>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002892:	4b1e      	ldr	r3, [pc, #120]	; (800290c <EndEffectorWrite+0x294>)
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	2b01      	cmp	r3, #1
 8002898:	d12f      	bne.n	80028fa <EndEffectorWrite+0x282>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 800289a:	2364      	movs	r3, #100	; 0x64
 800289c:	9300      	str	r3, [sp, #0]
 800289e:	2301      	movs	r3, #1
 80028a0:	4a2a      	ldr	r2, [pc, #168]	; (800294c <EndEffectorWrite+0x2d4>)
 80028a2:	212a      	movs	r1, #42	; 0x2a
 80028a4:	481b      	ldr	r0, [pc, #108]	; (8002914 <EndEffectorWrite+0x29c>)
 80028a6:	f004 f8fb 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80028aa:	4b1c      	ldr	r3, [pc, #112]	; (800291c <EndEffectorWrite+0x2a4>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80028b0:	4b16      	ldr	r3, [pc, #88]	; (800290c <EndEffectorWrite+0x294>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	701a      	strb	r2, [r3, #0]
			}
		break;
 80028b6:	e020      	b.n	80028fa <EndEffectorWrite+0x282>
	case 8:
		if(EndEffectorWriteFlag == 1)
 80028b8:	4b14      	ldr	r3, [pc, #80]	; (800290c <EndEffectorWrite+0x294>)
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d11e      	bne.n	80028fe <EndEffectorWrite+0x286>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 80028c0:	2364      	movs	r3, #100	; 0x64
 80028c2:	9300      	str	r3, [sp, #0]
 80028c4:	2304      	movs	r3, #4
 80028c6:	4a22      	ldr	r2, [pc, #136]	; (8002950 <EndEffectorWrite+0x2d8>)
 80028c8:	212a      	movs	r1, #42	; 0x2a
 80028ca:	4812      	ldr	r0, [pc, #72]	; (8002914 <EndEffectorWrite+0x29c>)
 80028cc:	f004 f8e8 	bl	8006aa0 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80028d0:	4b12      	ldr	r3, [pc, #72]	; (800291c <EndEffectorWrite+0x2a4>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80028d6:	4b0d      	ldr	r3, [pc, #52]	; (800290c <EndEffectorWrite+0x294>)
 80028d8:	2200      	movs	r2, #0
 80028da:	701a      	strb	r2, [r3, #0]
			}
		break;
 80028dc:	e00f      	b.n	80028fe <EndEffectorWrite+0x286>
		break;
 80028de:	bf00      	nop
 80028e0:	e00e      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028e2:	bf00      	nop
 80028e4:	e00c      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028e6:	bf00      	nop
 80028e8:	e00a      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028ea:	bf00      	nop
 80028ec:	e008      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028ee:	bf00      	nop
 80028f0:	e006      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028f2:	bf00      	nop
 80028f4:	e004      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028f6:	bf00      	nop
 80028f8:	e002      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028fa:	bf00      	nop
 80028fc:	e000      	b.n	8002900 <EndEffectorWrite+0x288>
		break;
 80028fe:	bf00      	nop
	}
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	bd80      	pop	{r7, pc}
 8002906:	bf00      	nop
 8002908:	20000b20 	.word	0x20000b20
 800290c:	20000b18 	.word	0x20000b18
 8002910:	20000228 	.word	0x20000228
 8002914:	200004f8 	.word	0x200004f8
 8002918:	20000234 	.word	0x20000234
 800291c:	20001000 	.word	0x20001000
 8002920:	20000238 	.word	0x20000238
 8002924:	2000023c 	.word	0x2000023c
 8002928:	20000244 	.word	0x20000244
 800292c:	20000b19 	.word	0x20000b19
 8002930:	20000b1c 	.word	0x20000b1c
 8002934:	20000204 	.word	0x20000204
 8002938:	20000200 	.word	0x20000200
 800293c:	20000248 	.word	0x20000248
 8002940:	20000964 	.word	0x20000964
 8002944:	2000024c 	.word	0x2000024c
 8002948:	20000240 	.word	0x20000240
 800294c:	2000022c 	.word	0x2000022c
 8002950:	20000230 	.word	0x20000230
 8002954:	00000000 	.word	0x00000000

08002958 <VelocityApprox>:

void VelocityApprox()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 800295c:	4b12      	ldr	r3, [pc, #72]	; (80029a8 <VelocityApprox+0x50>)
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	461a      	mov	r2, r3
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <VelocityApprox+0x54>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	4618      	mov	r0, r3
 800296e:	f7fd fde1 	bl	8000534 <__aeabi_i2d>
 8002972:	a30b      	add	r3, pc, #44	; (adr r3, 80029a0 <VelocityApprox+0x48>)
 8002974:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002978:	f7fd ff70 	bl	800085c <__aeabi_ddiv>
 800297c:	4602      	mov	r2, r0
 800297e:	460b      	mov	r3, r1
 8002980:	4610      	mov	r0, r2
 8002982:	4619      	mov	r1, r3
 8002984:	f7fe f938 	bl	8000bf8 <__aeabi_d2f>
 8002988:	4603      	mov	r3, r0
 800298a:	4a09      	ldr	r2, [pc, #36]	; (80029b0 <VelocityApprox+0x58>)
 800298c:	6013      	str	r3, [r2, #0]
	lastposition = position;
 800298e:	4b06      	ldr	r3, [pc, #24]	; (80029a8 <VelocityApprox+0x50>)
 8002990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002994:	4b05      	ldr	r3, [pc, #20]	; (80029ac <VelocityApprox+0x54>)
 8002996:	801a      	strh	r2, [r3, #0]
}
 8002998:	bf00      	nop
 800299a:	bd80      	pop	{r7, pc}
 800299c:	f3af 8000 	nop.w
 80029a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80029a4:	3f50624d 	.word	0x3f50624d
 80029a8:	200009ac 	.word	0x200009ac
 80029ac:	200010f4 	.word	0x200010f4
 80029b0:	200009d4 	.word	0x200009d4

080029b4 <AccelerationApprox>:

void AccelerationApprox()
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 80029b8:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <AccelerationApprox+0x2c>)
 80029ba:	ed93 7a00 	vldr	s14, [r3]
 80029be:	4b09      	ldr	r3, [pc, #36]	; (80029e4 <AccelerationApprox+0x30>)
 80029c0:	edd3 7a00 	vldr	s15, [r3]
 80029c4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c8:	4b07      	ldr	r3, [pc, #28]	; (80029e8 <AccelerationApprox+0x34>)
 80029ca:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 80029ce:	4b04      	ldr	r3, [pc, #16]	; (80029e0 <AccelerationApprox+0x2c>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <AccelerationApprox+0x30>)
 80029d4:	6013      	str	r3, [r2, #0]

}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	200009d4 	.word	0x200009d4
 80029e4:	200010f8 	.word	0x200010f8
 80029e8:	200009d8 	.word	0x200009d8
 80029ec:	00000000 	.word	0x00000000

080029f0 <Routine>:

void Routine()
{
 80029f0:	b580      	push	{r7, lr}
 80029f2:	af00      	add	r7, sp, #0
	position_f = position;
 80029f4:	4b28      	ldr	r3, [pc, #160]	; (8002a98 <Routine+0xa8>)
 80029f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a02:	4b26      	ldr	r3, [pc, #152]	; (8002a9c <Routine+0xac>)
 8002a04:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002a08:	4b24      	ldr	r3, [pc, #144]	; (8002a9c <Routine+0xac>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f7fd fda3 	bl	8000558 <__aeabi_f2d>
 8002a12:	a31f      	add	r3, pc, #124	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a18:	f7fd fdf6 	bl	8000608 <__aeabi_dmul>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f8a0 	bl	8000b68 <__aeabi_d2iz>
 8002a28:	4603      	mov	r3, r0
 8002a2a:	b21a      	sxth	r2, r3
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	; (8002aa0 <Routine+0xb0>)
 8002a2e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002a30:	4b1b      	ldr	r3, [pc, #108]	; (8002aa0 <Routine+0xb0>)
 8002a32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a36:	b29a      	uxth	r2, r3
 8002a38:	4b1a      	ldr	r3, [pc, #104]	; (8002aa4 <Routine+0xb4>)
 8002a3a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 8002a3c:	4b1a      	ldr	r3, [pc, #104]	; (8002aa8 <Routine+0xb8>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7fd fd89 	bl	8000558 <__aeabi_f2d>
 8002a46:	a312      	add	r3, pc, #72	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a4c:	f7fd fddc 	bl	8000608 <__aeabi_dmul>
 8002a50:	4602      	mov	r2, r0
 8002a52:	460b      	mov	r3, r1
 8002a54:	4610      	mov	r0, r2
 8002a56:	4619      	mov	r1, r3
 8002a58:	f7fe f8ae 	bl	8000bb8 <__aeabi_d2uiz>
 8002a5c:	4603      	mov	r3, r0
 8002a5e:	b29a      	uxth	r2, r3
 8002a60:	4b10      	ldr	r3, [pc, #64]	; (8002aa4 <Routine+0xb4>)
 8002a62:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002a64:	4b11      	ldr	r3, [pc, #68]	; (8002aac <Routine+0xbc>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f7fd fd75 	bl	8000558 <__aeabi_f2d>
 8002a6e:	a308      	add	r3, pc, #32	; (adr r3, 8002a90 <Routine+0xa0>)
 8002a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a74:	f7fd fdc8 	bl	8000608 <__aeabi_dmul>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4610      	mov	r0, r2
 8002a7e:	4619      	mov	r1, r3
 8002a80:	f7fe f89a 	bl	8000bb8 <__aeabi_d2uiz>
 8002a84:	4603      	mov	r3, r0
 8002a86:	b29a      	uxth	r2, r3
 8002a88:	4b06      	ldr	r3, [pc, #24]	; (8002aa4 <Routine+0xb4>)
 8002a8a:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002a8c:	bf00      	nop
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	cccccccd 	.word	0xcccccccd
 8002a94:	3fdccccc 	.word	0x3fdccccc
 8002a98:	200009ac 	.word	0x200009ac
 8002a9c:	200009b4 	.word	0x200009b4
 8002aa0:	200009b8 	.word	0x200009b8
 8002aa4:	20001000 	.word	0x20001000
 8002aa8:	200009d4 	.word	0x200009d4
 8002aac:	200009d8 	.word	0x200009d8

08002ab0 <PIDcal>:

float PIDcal()
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002ab4:	4b3d      	ldr	r3, [pc, #244]	; (8002bac <PIDcal+0xfc>)
 8002ab6:	ed93 7a00 	vldr	s14, [r3]
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <PIDcal+0x100>)
 8002abc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac0:	ee07 3a90 	vmov	s15, r3
 8002ac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002acc:	4b39      	ldr	r3, [pc, #228]	; (8002bb4 <PIDcal+0x104>)
 8002ace:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002ad2:	4b38      	ldr	r3, [pc, #224]	; (8002bb4 <PIDcal+0x104>)
 8002ad4:	edd3 7a00 	vldr	s15, [r3]
 8002ad8:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002adc:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ae0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae4:	db0a      	blt.n	8002afc <PIDcal+0x4c>
	{
		errorposition += 22;
 8002ae6:	4b33      	ldr	r3, [pc, #204]	; (8002bb4 <PIDcal+0x104>)
 8002ae8:	edd3 7a00 	vldr	s15, [r3]
 8002aec:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002af0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002af4:	4b2f      	ldr	r3, [pc, #188]	; (8002bb4 <PIDcal+0x104>)
 8002af6:	edc3 7a00 	vstr	s15, [r3]
 8002afa:	e013      	b.n	8002b24 <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002afc:	4b2d      	ldr	r3, [pc, #180]	; (8002bb4 <PIDcal+0x104>)
 8002afe:	edd3 7a00 	vldr	s15, [r3]
 8002b02:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002b06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0e:	d809      	bhi.n	8002b24 <PIDcal+0x74>
	{
		errorposition -= 22;
 8002b10:	4b28      	ldr	r3, [pc, #160]	; (8002bb4 <PIDcal+0x104>)
 8002b12:	edd3 7a00 	vldr	s15, [r3]
 8002b16:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002b1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002b1e:	4b25      	ldr	r3, [pc, #148]	; (8002bb4 <PIDcal+0x104>)
 8002b20:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002b24:	4b24      	ldr	r3, [pc, #144]	; (8002bb8 <PIDcal+0x108>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b22      	ldr	r3, [pc, #136]	; (8002bb4 <PIDcal+0x104>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b34:	4b20      	ldr	r3, [pc, #128]	; (8002bb8 <PIDcal+0x108>)
 8002b36:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002b3a:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <PIDcal+0x104>)
 8002b3c:	ed93 7a00 	vldr	s14, [r3]
 8002b40:	4b1e      	ldr	r3, [pc, #120]	; (8002bbc <PIDcal+0x10c>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b4a:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <PIDcal+0x110>)
 8002b4c:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002b50:	4b1c      	ldr	r3, [pc, #112]	; (8002bc4 <PIDcal+0x114>)
 8002b52:	ed93 7a00 	vldr	s14, [r3]
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <PIDcal+0x104>)
 8002b58:	edd3 7a00 	vldr	s15, [r3]
 8002b5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b60:	4b19      	ldr	r3, [pc, #100]	; (8002bc8 <PIDcal+0x118>)
 8002b62:	edd3 6a00 	vldr	s13, [r3]
 8002b66:	4b14      	ldr	r3, [pc, #80]	; (8002bb8 <PIDcal+0x108>)
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b70:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002b74:	4b15      	ldr	r3, [pc, #84]	; (8002bcc <PIDcal+0x11c>)
 8002b76:	edd3 6a00 	vldr	s13, [r3]
 8002b7a:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <PIDcal+0x110>)
 8002b7c:	edd3 7a00 	vldr	s15, [r3]
 8002b80:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	4b11      	ldr	r3, [pc, #68]	; (8002bd0 <PIDcal+0x120>)
 8002b8a:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002b8e:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <PIDcal+0x104>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <PIDcal+0x10c>)
 8002b94:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002b96:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <PIDcal+0x120>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	ee07 3a90 	vmov	s15, r3
}
 8002b9e:	eeb0 0a67 	vmov.f32	s0, s15
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	200009bc 	.word	0x200009bc
 8002bb0:	200009ac 	.word	0x200009ac
 8002bb4:	200009c0 	.word	0x200009c0
 8002bb8:	200009cc 	.word	0x200009cc
 8002bbc:	200009c8 	.word	0x200009c8
 8002bc0:	200009d0 	.word	0x200009d0
 8002bc4:	20000218 	.word	0x20000218
 8002bc8:	2000021c 	.word	0x2000021c
 8002bcc:	20000220 	.word	0x20000220
 8002bd0:	200009c4 	.word	0x200009c4

08002bd4 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002bd8:	2140      	movs	r1, #64	; 0x40
 8002bda:	4845      	ldr	r0, [pc, #276]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002bdc:	f003 fdd2 	bl	8006784 <HAL_GPIO_ReadPin>
 8002be0:	4603      	mov	r3, r0
 8002be2:	461a      	mov	r2, r3
 8002be4:	4b43      	ldr	r3, [pc, #268]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002be6:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002be8:	4b42      	ldr	r3, [pc, #264]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d107      	bne.n	8002c00 <JoystickPinUpdate+0x2c>
 8002bf0:	4b40      	ldr	r3, [pc, #256]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d103      	bne.n	8002c00 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002bf8:	4b3e      	ldr	r3, [pc, #248]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	e002      	b.n	8002c06 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002c00:	4b3c      	ldr	r3, [pc, #240]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c02:	2200      	movs	r2, #0
 8002c04:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002c06:	4b3b      	ldr	r3, [pc, #236]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	4a3a      	ldr	r2, [pc, #232]	; (8002cf4 <JoystickPinUpdate+0x120>)
 8002c0c:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002c0e:	2120      	movs	r1, #32
 8002c10:	4839      	ldr	r0, [pc, #228]	; (8002cf8 <JoystickPinUpdate+0x124>)
 8002c12:	f003 fdb7 	bl	8006784 <HAL_GPIO_ReadPin>
 8002c16:	4603      	mov	r3, r0
 8002c18:	461a      	mov	r2, r3
 8002c1a:	4b38      	ldr	r3, [pc, #224]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c1c:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002c1e:	4b37      	ldr	r3, [pc, #220]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d107      	bne.n	8002c36 <JoystickPinUpdate+0x62>
 8002c26:	4b35      	ldr	r3, [pc, #212]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d103      	bne.n	8002c36 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002c2e:	4b33      	ldr	r3, [pc, #204]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	e002      	b.n	8002c3c <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002c36:	4b31      	ldr	r3, [pc, #196]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c38:	2200      	movs	r2, #0
 8002c3a:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002c3c:	4b2f      	ldr	r3, [pc, #188]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	4a2e      	ldr	r2, [pc, #184]	; (8002cfc <JoystickPinUpdate+0x128>)
 8002c42:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002c48:	482b      	ldr	r0, [pc, #172]	; (8002cf8 <JoystickPinUpdate+0x124>)
 8002c4a:	f003 fd9b 	bl	8006784 <HAL_GPIO_ReadPin>
 8002c4e:	4603      	mov	r3, r0
 8002c50:	461a      	mov	r2, r3
 8002c52:	4b2b      	ldr	r3, [pc, #172]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c54:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002c56:	4b2a      	ldr	r3, [pc, #168]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2b01      	cmp	r3, #1
 8002c5c:	d107      	bne.n	8002c6e <JoystickPinUpdate+0x9a>
 8002c5e:	4b28      	ldr	r3, [pc, #160]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d103      	bne.n	8002c6e <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002c66:	4b26      	ldr	r3, [pc, #152]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c68:	2201      	movs	r2, #1
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	e002      	b.n	8002c74 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002c74:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a21      	ldr	r2, [pc, #132]	; (8002d00 <JoystickPinUpdate+0x12c>)
 8002c7a:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	481c      	ldr	r0, [pc, #112]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002c80:	f003 fd80 	bl	8006784 <HAL_GPIO_ReadPin>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	4b1e      	ldr	r3, [pc, #120]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c8a:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002c8c:	4b1d      	ldr	r3, [pc, #116]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <JoystickPinUpdate+0xd0>
 8002c94:	4b1b      	ldr	r3, [pc, #108]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d103      	bne.n	8002ca4 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e002      	b.n	8002caa <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002ca4:	4b17      	ldr	r3, [pc, #92]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002caa:	4b16      	ldr	r3, [pc, #88]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <JoystickPinUpdate+0x130>)
 8002cb0:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002cb2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002cb6:	480e      	ldr	r0, [pc, #56]	; (8002cf0 <JoystickPinUpdate+0x11c>)
 8002cb8:	f003 fd64 	bl	8006784 <HAL_GPIO_ReadPin>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	4b11      	ldr	r3, [pc, #68]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cc2:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002cc4:	4b10      	ldr	r3, [pc, #64]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <JoystickPinUpdate+0x108>
 8002ccc:	4b0e      	ldr	r3, [pc, #56]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d103      	bne.n	8002cdc <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002cd4:	4b0c      	ldr	r3, [pc, #48]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cd6:	2201      	movs	r2, #1
 8002cd8:	609a      	str	r2, [r3, #8]
 8002cda:	e002      	b.n	8002ce2 <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002cdc:	4b0a      	ldr	r3, [pc, #40]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002ce2:	4b09      	ldr	r3, [pc, #36]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4a08      	ldr	r2, [pc, #32]	; (8002d08 <JoystickPinUpdate+0x134>)
 8002ce8:	6013      	str	r3, [r2, #0]
}
 8002cea:	bf00      	nop
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40020400 	.word	0x40020400
 8002cf4:	20000ad0 	.word	0x20000ad0
 8002cf8:	40020000 	.word	0x40020000
 8002cfc:	20000adc 	.word	0x20000adc
 8002d00:	20000ae8 	.word	0x20000ae8
 8002d04:	20000af4 	.word	0x20000af4
 8002d08:	20000b00 	.word	0x20000b00

08002d0c <JoystickControl>:

void JoystickControl()
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002d10:	4b5e      	ldr	r3, [pc, #376]	; (8002e8c <JoystickControl+0x180>)
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d106      	bne.n	8002d26 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002d18:	4b5d      	ldr	r3, [pc, #372]	; (8002e90 <JoystickControl+0x184>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002d1e:	4b5b      	ldr	r3, [pc, #364]	; (8002e8c <JoystickControl+0x180>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	609a      	str	r2, [r3, #8]
 8002d24:	e014      	b.n	8002d50 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002d26:	4b5b      	ldr	r3, [pc, #364]	; (8002e94 <JoystickControl+0x188>)
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d106      	bne.n	8002d3c <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002d2e:	4b58      	ldr	r3, [pc, #352]	; (8002e90 <JoystickControl+0x184>)
 8002d30:	2201      	movs	r2, #1
 8002d32:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002d34:	4b57      	ldr	r3, [pc, #348]	; (8002e94 <JoystickControl+0x188>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	609a      	str	r2, [r3, #8]
 8002d3a:	e009      	b.n	8002d50 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002d3c:	4b56      	ldr	r3, [pc, #344]	; (8002e98 <JoystickControl+0x18c>)
 8002d3e:	689b      	ldr	r3, [r3, #8]
 8002d40:	2b01      	cmp	r3, #1
 8002d42:	d105      	bne.n	8002d50 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002d44:	4b52      	ldr	r3, [pc, #328]	; (8002e90 <JoystickControl+0x184>)
 8002d46:	2202      	movs	r2, #2
 8002d48:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002d4a:	4b53      	ldr	r3, [pc, #332]	; (8002e98 <JoystickControl+0x18c>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002d50:	4b4f      	ldr	r3, [pc, #316]	; (8002e90 <JoystickControl+0x184>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	f000 808a 	beq.w	8002e6e <JoystickControl+0x162>
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	f300 8093 	bgt.w	8002e86 <JoystickControl+0x17a>
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <JoystickControl+0x5e>
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d041      	beq.n	8002dec <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002d68:	e08d      	b.n	8002e86 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002d6a:	4b4c      	ldr	r3, [pc, #304]	; (8002e9c <JoystickControl+0x190>)
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d72:	4293      	cmp	r3, r2
 8002d74:	dd09      	ble.n	8002d8a <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d76:	4b4a      	ldr	r3, [pc, #296]	; (8002ea0 <JoystickControl+0x194>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002d7e:	4b48      	ldr	r3, [pc, #288]	; (8002ea0 <JoystickControl+0x194>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d86:	635a      	str	r2, [r3, #52]	; 0x34
 8002d88:	e016      	b.n	8002db8 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002d8a:	4b44      	ldr	r3, [pc, #272]	; (8002e9c <JoystickControl+0x190>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d92:	da09      	bge.n	8002da8 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002d94:	4b42      	ldr	r3, [pc, #264]	; (8002ea0 <JoystickControl+0x194>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d9c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d9e:	4b40      	ldr	r3, [pc, #256]	; (8002ea0 <JoystickControl+0x194>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	2200      	movs	r2, #0
 8002da4:	635a      	str	r2, [r3, #52]	; 0x34
 8002da6:	e007      	b.n	8002db8 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002da8:	4b3d      	ldr	r3, [pc, #244]	; (8002ea0 <JoystickControl+0x194>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2200      	movs	r2, #0
 8002dae:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002db0:	4b3b      	ldr	r3, [pc, #236]	; (8002ea0 <JoystickControl+0x194>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002db8:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <JoystickControl+0x190>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	dd04      	ble.n	8002dce <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002dc4:	4b37      	ldr	r3, [pc, #220]	; (8002ea4 <JoystickControl+0x198>)
 8002dc6:	2204      	movs	r2, #4
 8002dc8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dcc:	e05b      	b.n	8002e86 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <JoystickControl+0x190>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd6:	da04      	bge.n	8002de2 <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002dd8:	4b32      	ldr	r3, [pc, #200]	; (8002ea4 <JoystickControl+0x198>)
 8002dda:	2208      	movs	r2, #8
 8002ddc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002de0:	e051      	b.n	8002e86 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002de2:	4b30      	ldr	r3, [pc, #192]	; (8002ea4 <JoystickControl+0x198>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dea:	e04c      	b.n	8002e86 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002dec:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <JoystickControl+0x190>)
 8002dee:	685b      	ldr	r3, [r3, #4]
 8002df0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002df4:	4293      	cmp	r3, r2
 8002df6:	dd09      	ble.n	8002e0c <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002df8:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <JoystickControl+0x194>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,9000);
 8002e00:	4b27      	ldr	r3, [pc, #156]	; (8002ea0 <JoystickControl+0x194>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f242 3228 	movw	r2, #9000	; 0x2328
 8002e08:	635a      	str	r2, [r3, #52]	; 0x34
 8002e0a:	e016      	b.n	8002e3a <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8002e0c:	4b23      	ldr	r3, [pc, #140]	; (8002e9c <JoystickControl+0x190>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e14:	da09      	bge.n	8002e2a <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,9000);
 8002e16:	4b22      	ldr	r3, [pc, #136]	; (8002ea0 <JoystickControl+0x194>)
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f242 3228 	movw	r2, #9000	; 0x2328
 8002e1e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e20:	4b1f      	ldr	r3, [pc, #124]	; (8002ea0 <JoystickControl+0x194>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2200      	movs	r2, #0
 8002e26:	635a      	str	r2, [r3, #52]	; 0x34
 8002e28:	e007      	b.n	8002e3a <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e2a:	4b1d      	ldr	r3, [pc, #116]	; (8002ea0 <JoystickControl+0x194>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2200      	movs	r2, #0
 8002e30:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002e32:	4b1b      	ldr	r3, [pc, #108]	; (8002ea0 <JoystickControl+0x194>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2200      	movs	r2, #0
 8002e38:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002e3a:	4b18      	ldr	r3, [pc, #96]	; (8002e9c <JoystickControl+0x190>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002e42:	4293      	cmp	r3, r2
 8002e44:	dd04      	ble.n	8002e50 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002e46:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <JoystickControl+0x198>)
 8002e48:	2204      	movs	r2, #4
 8002e4a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e4e:	e01a      	b.n	8002e86 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002e50:	4b12      	ldr	r3, [pc, #72]	; (8002e9c <JoystickControl+0x190>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e58:	da04      	bge.n	8002e64 <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002e5a:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <JoystickControl+0x198>)
 8002e5c:	2208      	movs	r2, #8
 8002e5e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e62:	e010      	b.n	8002e86 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002e64:	4b0f      	ldr	r3, [pc, #60]	; (8002ea4 <JoystickControl+0x198>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002e6c:	e00b      	b.n	8002e86 <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <JoystickControl+0x194>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2200      	movs	r2, #0
 8002e74:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002e76:	4b0a      	ldr	r3, [pc, #40]	; (8002ea0 <JoystickControl+0x194>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f242 7210 	movw	r2, #10000	; 0x2710
 8002e7e:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002e80:	f7ff fb9a 	bl	80025b8 <Homing>
		break;
 8002e84:	bf00      	nop
}
 8002e86:	bf00      	nop
 8002e88:	bd80      	pop	{r7, pc}
 8002e8a:	bf00      	nop
 8002e8c:	20000af4 	.word	0x20000af4
 8002e90:	20000b14 	.word	0x20000b14
 8002e94:	20000ae8 	.word	0x20000ae8
 8002e98:	20000b00 	.word	0x20000b00
 8002e9c:	20000b0c 	.word	0x20000b0c
 8002ea0:	2000054c 	.word	0x2000054c
 8002ea4:	20001000 	.word	0x20001000

08002ea8 <JoystickLocationState>:

void JoystickLocationState()
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002eac:	4b60      	ldr	r3, [pc, #384]	; (8003030 <JoystickLocationState+0x188>)
 8002eae:	885b      	ldrh	r3, [r3, #2]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d114      	bne.n	8002ede <JoystickLocationState+0x36>
	{
		registerFrame[1].U16 = 0;
 8002eb4:	4b5e      	ldr	r3, [pc, #376]	; (8003030 <JoystickLocationState+0x188>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002eba:	4b5d      	ldr	r3, [pc, #372]	; (8003030 <JoystickLocationState+0x188>)
 8002ebc:	2201      	movs	r2, #1
 8002ebe:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002ec0:	4b5c      	ldr	r3, [pc, #368]	; (8003034 <JoystickLocationState+0x18c>)
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002ec6:	4b5a      	ldr	r3, [pc, #360]	; (8003030 <JoystickLocationState+0x188>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002ecc:	4b5a      	ldr	r3, [pc, #360]	; (8003038 <JoystickLocationState+0x190>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002ed2:	f7ff fbd1 	bl	8002678 <EndEffectorWrite>
		state = 1;					//Go Pick state
 8002ed6:	4b59      	ldr	r3, [pc, #356]	; (800303c <JoystickLocationState+0x194>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
 8002edc:	e00f      	b.n	8002efe <JoystickLocationState+0x56>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002ede:	4b54      	ldr	r3, [pc, #336]	; (8003030 <JoystickLocationState+0x188>)
 8002ee0:	885b      	ldrh	r3, [r3, #2]
 8002ee2:	2b02      	cmp	r3, #2
 8002ee4:	d10b      	bne.n	8002efe <JoystickLocationState+0x56>
	{
		registerFrame[1].U16 = 0;
 8002ee6:	4b52      	ldr	r3, [pc, #328]	; (8003030 <JoystickLocationState+0x188>)
 8002ee8:	2200      	movs	r2, #0
 8002eea:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002eec:	4b50      	ldr	r3, [pc, #320]	; (8003030 <JoystickLocationState+0x188>)
 8002eee:	2202      	movs	r2, #2
 8002ef0:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 8002ef2:	4b4f      	ldr	r3, [pc, #316]	; (8003030 <JoystickLocationState+0x188>)
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 8002ef8:	4b50      	ldr	r3, [pc, #320]	; (800303c <JoystickLocationState+0x194>)
 8002efa:	2203      	movs	r2, #3
 8002efc:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002efe:	4b4c      	ldr	r3, [pc, #304]	; (8003030 <JoystickLocationState+0x188>)
 8002f00:	885b      	ldrh	r3, [r3, #2]
 8002f02:	2b08      	cmp	r3, #8
 8002f04:	d102      	bne.n	8002f0c <JoystickLocationState+0x64>
	{
		state = 5;
 8002f06:	4b4d      	ldr	r3, [pc, #308]	; (800303c <JoystickLocationState+0x194>)
 8002f08:	2205      	movs	r2, #5
 8002f0a:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002f0c:	4b4b      	ldr	r3, [pc, #300]	; (800303c <JoystickLocationState+0x194>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	3b01      	subs	r3, #1
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	f200 8700 	bhi.w	8003d18 <JoystickLocationState+0xe70>
 8002f18:	a201      	add	r2, pc, #4	; (adr r2, 8002f20 <JoystickLocationState+0x78>)
 8002f1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1e:	bf00      	nop
 8002f20:	08002f35 	.word	0x08002f35
 8002f24:	08002fe9 	.word	0x08002fe9
 8002f28:	080035d7 	.word	0x080035d7
 8002f2c:	0800369f 	.word	0x0800369f
 8002f30:	08003cad 	.word	0x08003cad
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002f34:	4b42      	ldr	r3, [pc, #264]	; (8003040 <JoystickLocationState+0x198>)
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002f3c:	4b40      	ldr	r3, [pc, #256]	; (8003040 <JoystickLocationState+0x198>)
 8002f3e:	f04f 0200 	mov.w	r2, #0
 8002f42:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002f44:	4b3e      	ldr	r3, [pc, #248]	; (8003040 <JoystickLocationState+0x198>)
 8002f46:	f04f 0200 	mov.w	r2, #0
 8002f4a:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002f4c:	4b3c      	ldr	r3, [pc, #240]	; (8003040 <JoystickLocationState+0x198>)
 8002f4e:	f04f 0200 	mov.w	r2, #0
 8002f52:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002f54:	4b3b      	ldr	r3, [pc, #236]	; (8003044 <JoystickLocationState+0x19c>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 86d4 	bne.w	8003d06 <JoystickLocationState+0xe5e>
		{
			if(registerFrame[68].U16 >= 30000)
 8002f5e:	4b34      	ldr	r3, [pc, #208]	; (8003030 <JoystickLocationState+0x188>)
 8002f60:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f64:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d912      	bls.n	8002f92 <JoystickLocationState+0xea>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <JoystickLocationState+0x188>)
 8002f6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f72:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f76:	4a34      	ldr	r2, [pc, #208]	; (8003048 <JoystickLocationState+0x1a0>)
 8002f78:	fb82 1203 	smull	r1, r2, r2, r3
 8002f7c:	1092      	asrs	r2, r2, #2
 8002f7e:	17db      	asrs	r3, r3, #31
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4b2d      	ldr	r3, [pc, #180]	; (8003040 <JoystickLocationState+0x198>)
 8002f8c:	edc3 7a00 	vstr	s15, [r3]
 8002f90:	e00e      	b.n	8002fb0 <JoystickLocationState+0x108>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002f92:	4b27      	ldr	r3, [pc, #156]	; (8003030 <JoystickLocationState+0x188>)
 8002f94:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f98:	4a2c      	ldr	r2, [pc, #176]	; (800304c <JoystickLocationState+0x1a4>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	08db      	lsrs	r3, r3, #3
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	ee07 3a90 	vmov	s15, r3
 8002fa6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002faa:	4b25      	ldr	r3, [pc, #148]	; (8003040 <JoystickLocationState+0x198>)
 8002fac:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002fb0:	4b27      	ldr	r3, [pc, #156]	; (8003050 <JoystickLocationState+0x1a8>)
 8002fb2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fabc 	bl	8000534 <__aeabi_i2d>
 8002fbc:	a31a      	add	r3, pc, #104	; (adr r3, 8003028 <JoystickLocationState+0x180>)
 8002fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fc2:	f7fd fb21 	bl	8000608 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fe13 	bl	8000bf8 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a1a      	ldr	r2, [pc, #104]	; (8003040 <JoystickLocationState+0x198>)
 8002fd6:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002fd8:	4b1a      	ldr	r3, [pc, #104]	; (8003044 <JoystickLocationState+0x19c>)
 8002fda:	2200      	movs	r2, #0
 8002fdc:	609a      	str	r2, [r3, #8]
			state = 2;
 8002fde:	4b17      	ldr	r3, [pc, #92]	; (800303c <JoystickLocationState+0x194>)
 8002fe0:	2202      	movs	r2, #2
 8002fe2:	601a      	str	r2, [r3, #0]
		}
		break;
 8002fe4:	f000 be8f 	b.w	8003d06 <JoystickLocationState+0xe5e>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002fe8:	4b16      	ldr	r3, [pc, #88]	; (8003044 <JoystickLocationState+0x19c>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	f040 82e6 	bne.w	80035be <JoystickLocationState+0x716>
		{
			if(registerFrame[68].U16 >= 30000)
 8002ff2:	4b0f      	ldr	r3, [pc, #60]	; (8003030 <JoystickLocationState+0x188>)
 8002ff4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ff8:	f247 522f 	movw	r2, #29999	; 0x752f
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d929      	bls.n	8003054 <JoystickLocationState+0x1ac>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003000:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <JoystickLocationState+0x188>)
 8003002:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003006:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800300a:	4a0f      	ldr	r2, [pc, #60]	; (8003048 <JoystickLocationState+0x1a0>)
 800300c:	fb82 1203 	smull	r1, r2, r2, r3
 8003010:	1092      	asrs	r2, r2, #2
 8003012:	17db      	asrs	r3, r3, #31
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800301e:	4b08      	ldr	r3, [pc, #32]	; (8003040 <JoystickLocationState+0x198>)
 8003020:	edc3 7a02 	vstr	s15, [r3, #8]
 8003024:	e025      	b.n	8003072 <JoystickLocationState+0x1ca>
 8003026:	bf00      	nop
 8003028:	70a3d70a 	.word	0x70a3d70a
 800302c:	3fa70a3d 	.word	0x3fa70a3d
 8003030:	20001000 	.word	0x20001000
 8003034:	20000b20 	.word	0x20000b20
 8003038:	20000b18 	.word	0x20000b18
 800303c:	20000224 	.word	0x20000224
 8003040:	200009e4 	.word	0x200009e4
 8003044:	20000ad0 	.word	0x20000ad0
 8003048:	66666667 	.word	0x66666667
 800304c:	cccccccd 	.word	0xcccccccd
 8003050:	200009ac 	.word	0x200009ac
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003054:	4bd6      	ldr	r3, [pc, #856]	; (80033b0 <JoystickLocationState+0x508>)
 8003056:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800305a:	4ad6      	ldr	r2, [pc, #856]	; (80033b4 <JoystickLocationState+0x50c>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	08db      	lsrs	r3, r3, #3
 8003062:	b29b      	uxth	r3, r3
 8003064:	ee07 3a90 	vmov	s15, r3
 8003068:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800306c:	4bd2      	ldr	r3, [pc, #840]	; (80033b8 <JoystickLocationState+0x510>)
 800306e:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8003072:	4bd2      	ldr	r3, [pc, #840]	; (80033bc <JoystickLocationState+0x514>)
 8003074:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa5b 	bl	8000534 <__aeabi_i2d>
 800307e:	a3ca      	add	r3, pc, #808	; (adr r3, 80033a8 <JoystickLocationState+0x500>)
 8003080:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003084:	f7fd fac0 	bl	8000608 <__aeabi_dmul>
 8003088:	4602      	mov	r2, r0
 800308a:	460b      	mov	r3, r1
 800308c:	4610      	mov	r0, r2
 800308e:	4619      	mov	r1, r3
 8003090:	f7fd fdb2 	bl	8000bf8 <__aeabi_d2f>
 8003094:	4603      	mov	r3, r0
 8003096:	4ac8      	ldr	r2, [pc, #800]	; (80033b8 <JoystickLocationState+0x510>)
 8003098:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800309a:	4bc9      	ldr	r3, [pc, #804]	; (80033c0 <JoystickLocationState+0x518>)
 800309c:	2200      	movs	r2, #0
 800309e:	609a      	str	r2, [r3, #8]

			DeltaX = PickTray.L2[0]-PickTray.L1[0];
 80030a0:	4bc5      	ldr	r3, [pc, #788]	; (80033b8 <JoystickLocationState+0x510>)
 80030a2:	ed93 7a02 	vldr	s14, [r3, #8]
 80030a6:	4bc4      	ldr	r3, [pc, #784]	; (80033b8 <JoystickLocationState+0x510>)
 80030a8:	edd3 7a00 	vldr	s15, [r3]
 80030ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd fa50 	bl	8000558 <__aeabi_f2d>
 80030b8:	4602      	mov	r2, r0
 80030ba:	460b      	mov	r3, r1
 80030bc:	49c1      	ldr	r1, [pc, #772]	; (80033c4 <JoystickLocationState+0x51c>)
 80030be:	e9c1 2300 	strd	r2, r3, [r1]
			DeltaY = PickTray.L2[1]-PickTray.L1[1];
 80030c2:	4bbd      	ldr	r3, [pc, #756]	; (80033b8 <JoystickLocationState+0x510>)
 80030c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80030c8:	4bbb      	ldr	r3, [pc, #748]	; (80033b8 <JoystickLocationState+0x510>)
 80030ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80030ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80030d2:	ee17 0a90 	vmov	r0, s15
 80030d6:	f7fd fa3f 	bl	8000558 <__aeabi_f2d>
 80030da:	4602      	mov	r2, r0
 80030dc:	460b      	mov	r3, r1
 80030de:	49ba      	ldr	r1, [pc, #744]	; (80033c8 <JoystickLocationState+0x520>)
 80030e0:	e9c1 2300 	strd	r2, r3, [r1]
			angle = atan2(DeltaY, DeltaX);
 80030e4:	4bb8      	ldr	r3, [pc, #736]	; (80033c8 <JoystickLocationState+0x520>)
 80030e6:	ed93 7b00 	vldr	d7, [r3]
 80030ea:	4bb6      	ldr	r3, [pc, #728]	; (80033c4 <JoystickLocationState+0x51c>)
 80030ec:	ed93 6b00 	vldr	d6, [r3]
 80030f0:	eeb0 1a46 	vmov.f32	s2, s12
 80030f4:	eef0 1a66 	vmov.f32	s3, s13
 80030f8:	eeb0 0a47 	vmov.f32	s0, s14
 80030fc:	eef0 0a67 	vmov.f32	s1, s15
 8003100:	f00d ffa2 	bl	8011048 <atan2>
 8003104:	eeb0 7a40 	vmov.f32	s14, s0
 8003108:	eef0 7a60 	vmov.f32	s15, s1
 800310c:	4baf      	ldr	r3, [pc, #700]	; (80033cc <JoystickLocationState+0x524>)
 800310e:	ed83 7b00 	vstr	d7, [r3]

			cos_Theta = cos(angle);
 8003112:	4bae      	ldr	r3, [pc, #696]	; (80033cc <JoystickLocationState+0x524>)
 8003114:	ed93 7b00 	vldr	d7, [r3]
 8003118:	eeb0 0a47 	vmov.f32	s0, s14
 800311c:	eef0 0a67 	vmov.f32	s1, s15
 8003120:	f00d fee6 	bl	8010ef0 <cos>
 8003124:	ec53 2b10 	vmov	r2, r3, d0
 8003128:	4610      	mov	r0, r2
 800312a:	4619      	mov	r1, r3
 800312c:	f7fd fd64 	bl	8000bf8 <__aeabi_d2f>
 8003130:	4603      	mov	r3, r0
 8003132:	4aa7      	ldr	r2, [pc, #668]	; (80033d0 <JoystickLocationState+0x528>)
 8003134:	6013      	str	r3, [r2, #0]
			sin_Theta = sin(angle);
 8003136:	4ba5      	ldr	r3, [pc, #660]	; (80033cc <JoystickLocationState+0x524>)
 8003138:	ed93 7b00 	vldr	d7, [r3]
 800313c:	eeb0 0a47 	vmov.f32	s0, s14
 8003140:	eef0 0a67 	vmov.f32	s1, s15
 8003144:	f00d ff28 	bl	8010f98 <sin>
 8003148:	ec53 2b10 	vmov	r2, r3, d0
 800314c:	4610      	mov	r0, r2
 800314e:	4619      	mov	r1, r3
 8003150:	f7fd fd52 	bl	8000bf8 <__aeabi_d2f>
 8003154:	4603      	mov	r3, r0
 8003156:	4a9f      	ldr	r2, [pc, #636]	; (80033d4 <JoystickLocationState+0x52c>)
 8003158:	6013      	str	r3, [r2, #0]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*10)+PickTray.L1[0];
 800315a:	4b9d      	ldr	r3, [pc, #628]	; (80033d0 <JoystickLocationState+0x528>)
 800315c:	edd3 7a00 	vldr	s15, [r3]
 8003160:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003164:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003168:	4b9a      	ldr	r3, [pc, #616]	; (80033d4 <JoystickLocationState+0x52c>)
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	eef1 7a67 	vneg.f32	s15, s15
 8003172:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003176:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800317a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800317e:	4b8e      	ldr	r3, [pc, #568]	; (80033b8 <JoystickLocationState+0x510>)
 8003180:	edd3 7a00 	vldr	s15, [r3]
 8003184:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003188:	4b8b      	ldr	r3, [pc, #556]	; (80033b8 <JoystickLocationState+0x510>)
 800318a:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*10)+PickTray.L1[1];
 800318e:	4b91      	ldr	r3, [pc, #580]	; (80033d4 <JoystickLocationState+0x52c>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003198:	ee27 7a87 	vmul.f32	s14, s15, s14
 800319c:	4b8c      	ldr	r3, [pc, #560]	; (80033d0 <JoystickLocationState+0x528>)
 800319e:	edd3 7a00 	vldr	s15, [r3]
 80031a2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031ae:	4b82      	ldr	r3, [pc, #520]	; (80033b8 <JoystickLocationState+0x510>)
 80031b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80031b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031b8:	4b7f      	ldr	r3, [pc, #508]	; (80033b8 <JoystickLocationState+0x510>)
 80031ba:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*10)+PickTray.L1[0];
 80031be:	4b84      	ldr	r3, [pc, #528]	; (80033d0 <JoystickLocationState+0x528>)
 80031c0:	edd3 7a00 	vldr	s15, [r3]
 80031c4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031cc:	4b81      	ldr	r3, [pc, #516]	; (80033d4 <JoystickLocationState+0x52c>)
 80031ce:	edd3 7a00 	vldr	s15, [r3]
 80031d2:	eef1 7a67 	vneg.f32	s15, s15
 80031d6:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031e2:	4b75      	ldr	r3, [pc, #468]	; (80033b8 <JoystickLocationState+0x510>)
 80031e4:	edd3 7a00 	vldr	s15, [r3]
 80031e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ec:	4b72      	ldr	r3, [pc, #456]	; (80033b8 <JoystickLocationState+0x510>)
 80031ee:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*10)+PickTray.L1[1];
 80031f2:	4b78      	ldr	r3, [pc, #480]	; (80033d4 <JoystickLocationState+0x52c>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80031fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003200:	4b73      	ldr	r3, [pc, #460]	; (80033d0 <JoystickLocationState+0x528>)
 8003202:	edd3 7a00 	vldr	s15, [r3]
 8003206:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800320a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800320e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003212:	4b69      	ldr	r3, [pc, #420]	; (80033b8 <JoystickLocationState+0x510>)
 8003214:	edd3 7a01 	vldr	s15, [r3, #4]
 8003218:	ee77 7a27 	vadd.f32	s15, s14, s15
 800321c:	4b66      	ldr	r3, [pc, #408]	; (80033b8 <JoystickLocationState+0x510>)
 800321e:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*10)+PickTray.L1[0];
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <JoystickLocationState+0x528>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80033d8 <JoystickLocationState+0x530>
 800322c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003230:	4b68      	ldr	r3, [pc, #416]	; (80033d4 <JoystickLocationState+0x52c>)
 8003232:	edd3 7a00 	vldr	s15, [r3]
 8003236:	eef1 7a67 	vneg.f32	s15, s15
 800323a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800323e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003242:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003246:	4b5c      	ldr	r3, [pc, #368]	; (80033b8 <JoystickLocationState+0x510>)
 8003248:	edd3 7a00 	vldr	s15, [r3]
 800324c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003250:	4b59      	ldr	r3, [pc, #356]	; (80033b8 <JoystickLocationState+0x510>)
 8003252:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*10)+PickTray.L1[1];
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <JoystickLocationState+0x52c>)
 8003258:	edd3 7a00 	vldr	s15, [r3]
 800325c:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 80033d8 <JoystickLocationState+0x530>
 8003260:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <JoystickLocationState+0x528>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800326e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003272:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003276:	4b50      	ldr	r3, [pc, #320]	; (80033b8 <JoystickLocationState+0x510>)
 8003278:	edd3 7a01 	vldr	s15, [r3, #4]
 800327c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003280:	4b4d      	ldr	r3, [pc, #308]	; (80033b8 <JoystickLocationState+0x510>)
 8003282:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*25)+PickTray.L1[0];
 8003286:	4b52      	ldr	r3, [pc, #328]	; (80033d0 <JoystickLocationState+0x528>)
 8003288:	edd3 7a00 	vldr	s15, [r3]
 800328c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003290:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003294:	4b4f      	ldr	r3, [pc, #316]	; (80033d4 <JoystickLocationState+0x52c>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	eef1 7a67 	vneg.f32	s15, s15
 800329e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032a2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032aa:	4b43      	ldr	r3, [pc, #268]	; (80033b8 <JoystickLocationState+0x510>)
 80032ac:	edd3 7a00 	vldr	s15, [r3]
 80032b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032b4:	4b40      	ldr	r3, [pc, #256]	; (80033b8 <JoystickLocationState+0x510>)
 80032b6:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*25)+PickTray.L1[1];
 80032ba:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <JoystickLocationState+0x52c>)
 80032bc:	edd3 7a00 	vldr	s15, [r3]
 80032c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80032c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032c8:	4b41      	ldr	r3, [pc, #260]	; (80033d0 <JoystickLocationState+0x528>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032da:	4b37      	ldr	r3, [pc, #220]	; (80033b8 <JoystickLocationState+0x510>)
 80032dc:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032e4:	4b34      	ldr	r3, [pc, #208]	; (80033b8 <JoystickLocationState+0x510>)
 80032e6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*25)+PickTray.L1[0];
 80032ea:	4b39      	ldr	r3, [pc, #228]	; (80033d0 <JoystickLocationState+0x528>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032f8:	4b36      	ldr	r3, [pc, #216]	; (80033d4 <JoystickLocationState+0x52c>)
 80032fa:	edd3 7a00 	vldr	s15, [r3]
 80032fe:	eef1 7a67 	vneg.f32	s15, s15
 8003302:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003306:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800330a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800330e:	4b2a      	ldr	r3, [pc, #168]	; (80033b8 <JoystickLocationState+0x510>)
 8003310:	edd3 7a00 	vldr	s15, [r3]
 8003314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003318:	4b27      	ldr	r3, [pc, #156]	; (80033b8 <JoystickLocationState+0x510>)
 800331a:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*25)+PickTray.L1[1];
 800331e:	4b2d      	ldr	r3, [pc, #180]	; (80033d4 <JoystickLocationState+0x52c>)
 8003320:	edd3 7a00 	vldr	s15, [r3]
 8003324:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003328:	ee27 7a87 	vmul.f32	s14, s15, s14
 800332c:	4b28      	ldr	r3, [pc, #160]	; (80033d0 <JoystickLocationState+0x528>)
 800332e:	edd3 7a00 	vldr	s15, [r3]
 8003332:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003336:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800333a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800333e:	4b1e      	ldr	r3, [pc, #120]	; (80033b8 <JoystickLocationState+0x510>)
 8003340:	edd3 7a01 	vldr	s15, [r3, #4]
 8003344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003348:	4b1b      	ldr	r3, [pc, #108]	; (80033b8 <JoystickLocationState+0x510>)
 800334a:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*25)+PickTray.L1[0];
 800334e:	4b20      	ldr	r3, [pc, #128]	; (80033d0 <JoystickLocationState+0x528>)
 8003350:	edd3 7a00 	vldr	s15, [r3]
 8003354:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80033d8 <JoystickLocationState+0x530>
 8003358:	ee27 7a87 	vmul.f32	s14, s15, s14
 800335c:	4b1d      	ldr	r3, [pc, #116]	; (80033d4 <JoystickLocationState+0x52c>)
 800335e:	edd3 7a00 	vldr	s15, [r3]
 8003362:	eef1 7a67 	vneg.f32	s15, s15
 8003366:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800336a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800336e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003372:	4b11      	ldr	r3, [pc, #68]	; (80033b8 <JoystickLocationState+0x510>)
 8003374:	edd3 7a00 	vldr	s15, [r3]
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	4b0e      	ldr	r3, [pc, #56]	; (80033b8 <JoystickLocationState+0x510>)
 800337e:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*25)+PickTray.L1[1];
 8003382:	4b14      	ldr	r3, [pc, #80]	; (80033d4 <JoystickLocationState+0x52c>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ed9f 7a13 	vldr	s14, [pc, #76]	; 80033d8 <JoystickLocationState+0x530>
 800338c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003390:	4b0f      	ldr	r3, [pc, #60]	; (80033d0 <JoystickLocationState+0x528>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800339a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800339e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033a2:	e01b      	b.n	80033dc <JoystickLocationState+0x534>
 80033a4:	f3af 8000 	nop.w
 80033a8:	70a3d70a 	.word	0x70a3d70a
 80033ac:	3fa70a3d 	.word	0x3fa70a3d
 80033b0:	20001000 	.word	0x20001000
 80033b4:	cccccccd 	.word	0xcccccccd
 80033b8:	200009e4 	.word	0x200009e4
 80033bc:	200009ac 	.word	0x200009ac
 80033c0:	20000ad0 	.word	0x20000ad0
 80033c4:	20000ab0 	.word	0x20000ab0
 80033c8:	20000ab8 	.word	0x20000ab8
 80033cc:	20000ac0 	.word	0x20000ac0
 80033d0:	20000ac8 	.word	0x20000ac8
 80033d4:	20000acc 	.word	0x20000acc
 80033d8:	42480000 	.word	0x42480000
 80033dc:	4bc4      	ldr	r3, [pc, #784]	; (80036f0 <JoystickLocationState+0x848>)
 80033de:	edd3 7a01 	vldr	s15, [r3, #4]
 80033e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033e6:	4bc2      	ldr	r3, [pc, #776]	; (80036f0 <JoystickLocationState+0x848>)
 80033e8:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*40)+PickTray.L1[0];
 80033ec:	4bc1      	ldr	r3, [pc, #772]	; (80036f4 <JoystickLocationState+0x84c>)
 80033ee:	edd3 7a00 	vldr	s15, [r3]
 80033f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80033f6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033fa:	4bbf      	ldr	r3, [pc, #764]	; (80036f8 <JoystickLocationState+0x850>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	eef1 7a67 	vneg.f32	s15, s15
 8003404:	eddf 6abd 	vldr	s13, [pc, #756]	; 80036fc <JoystickLocationState+0x854>
 8003408:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800340c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003410:	4bb7      	ldr	r3, [pc, #732]	; (80036f0 <JoystickLocationState+0x848>)
 8003412:	edd3 7a00 	vldr	s15, [r3]
 8003416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341a:	4bb5      	ldr	r3, [pc, #724]	; (80036f0 <JoystickLocationState+0x848>)
 800341c:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*40)+PickTray.L1[1];
 8003420:	4bb5      	ldr	r3, [pc, #724]	; (80036f8 <JoystickLocationState+0x850>)
 8003422:	edd3 7a00 	vldr	s15, [r3]
 8003426:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800342a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800342e:	4bb1      	ldr	r3, [pc, #708]	; (80036f4 <JoystickLocationState+0x84c>)
 8003430:	edd3 7a00 	vldr	s15, [r3]
 8003434:	eddf 6ab1 	vldr	s13, [pc, #708]	; 80036fc <JoystickLocationState+0x854>
 8003438:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800343c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003440:	4bab      	ldr	r3, [pc, #684]	; (80036f0 <JoystickLocationState+0x848>)
 8003442:	edd3 7a01 	vldr	s15, [r3, #4]
 8003446:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344a:	4ba9      	ldr	r3, [pc, #676]	; (80036f0 <JoystickLocationState+0x848>)
 800344c:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*40)+PickTray.L1[0];
 8003450:	4ba8      	ldr	r3, [pc, #672]	; (80036f4 <JoystickLocationState+0x84c>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800345a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800345e:	4ba6      	ldr	r3, [pc, #664]	; (80036f8 <JoystickLocationState+0x850>)
 8003460:	edd3 7a00 	vldr	s15, [r3]
 8003464:	eef1 7a67 	vneg.f32	s15, s15
 8003468:	eddf 6aa4 	vldr	s13, [pc, #656]	; 80036fc <JoystickLocationState+0x854>
 800346c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003470:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003474:	4b9e      	ldr	r3, [pc, #632]	; (80036f0 <JoystickLocationState+0x848>)
 8003476:	edd3 7a00 	vldr	s15, [r3]
 800347a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347e:	4b9c      	ldr	r3, [pc, #624]	; (80036f0 <JoystickLocationState+0x848>)
 8003480:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*40)+PickTray.L1[1];
 8003484:	4b9c      	ldr	r3, [pc, #624]	; (80036f8 <JoystickLocationState+0x850>)
 8003486:	edd3 7a00 	vldr	s15, [r3]
 800348a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800348e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003492:	4b98      	ldr	r3, [pc, #608]	; (80036f4 <JoystickLocationState+0x84c>)
 8003494:	edd3 7a00 	vldr	s15, [r3]
 8003498:	eddf 6a98 	vldr	s13, [pc, #608]	; 80036fc <JoystickLocationState+0x854>
 800349c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034a4:	4b92      	ldr	r3, [pc, #584]	; (80036f0 <JoystickLocationState+0x848>)
 80034a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	4b90      	ldr	r3, [pc, #576]	; (80036f0 <JoystickLocationState+0x848>)
 80034b0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*40)+PickTray.L1[0];
 80034b4:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <JoystickLocationState+0x84c>)
 80034b6:	edd3 7a00 	vldr	s15, [r3]
 80034ba:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8003700 <JoystickLocationState+0x858>
 80034be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <JoystickLocationState+0x850>)
 80034c4:	edd3 7a00 	vldr	s15, [r3]
 80034c8:	eef1 7a67 	vneg.f32	s15, s15
 80034cc:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80036fc <JoystickLocationState+0x854>
 80034d0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034d8:	4b85      	ldr	r3, [pc, #532]	; (80036f0 <JoystickLocationState+0x848>)
 80034da:	edd3 7a00 	vldr	s15, [r3]
 80034de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034e2:	4b83      	ldr	r3, [pc, #524]	; (80036f0 <JoystickLocationState+0x848>)
 80034e4:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*40)+PickTray.L1[1];
 80034e8:	4b83      	ldr	r3, [pc, #524]	; (80036f8 <JoystickLocationState+0x850>)
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003700 <JoystickLocationState+0x858>
 80034f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034f6:	4b7f      	ldr	r3, [pc, #508]	; (80036f4 <JoystickLocationState+0x84c>)
 80034f8:	edd3 7a00 	vldr	s15, [r3]
 80034fc:	eddf 6a7f 	vldr	s13, [pc, #508]	; 80036fc <JoystickLocationState+0x854>
 8003500:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003504:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003508:	4b79      	ldr	r3, [pc, #484]	; (80036f0 <JoystickLocationState+0x848>)
 800350a:	edd3 7a01 	vldr	s15, [r3, #4]
 800350e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003512:	4b77      	ldr	r3, [pc, #476]	; (80036f0 <JoystickLocationState+0x848>)
 8003514:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
//			else if(PickTray.L1[1] >= 0)
//			{
//				PickTray.origin_y = PickTray.L1[1];
//			}

			PickTray.origin_x = PickTray.L1[0];
 8003518:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <JoystickLocationState+0x848>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4a74      	ldr	r2, [pc, #464]	; (80036f0 <JoystickLocationState+0x848>)
 800351e:	6593      	str	r3, [r2, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1];
 8003520:	4b73      	ldr	r3, [pc, #460]	; (80036f0 <JoystickLocationState+0x848>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a72      	ldr	r2, [pc, #456]	; (80036f0 <JoystickLocationState+0x848>)
 8003526:	65d3      	str	r3, [r2, #92]	; 0x5c

			PickTray.orientation = angle*(180/3.14159265358979323846264338328)*100;
 8003528:	4b76      	ldr	r3, [pc, #472]	; (8003704 <JoystickLocationState+0x85c>)
 800352a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800352e:	a36c      	add	r3, pc, #432	; (adr r3, 80036e0 <JoystickLocationState+0x838>)
 8003530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003534:	f7fd f868 	bl	8000608 <__aeabi_dmul>
 8003538:	4602      	mov	r2, r0
 800353a:	460b      	mov	r3, r1
 800353c:	4610      	mov	r0, r2
 800353e:	4619      	mov	r1, r3
 8003540:	f04f 0200 	mov.w	r2, #0
 8003544:	4b70      	ldr	r3, [pc, #448]	; (8003708 <JoystickLocationState+0x860>)
 8003546:	f7fd f85f 	bl	8000608 <__aeabi_dmul>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	f7fd fb51 	bl	8000bf8 <__aeabi_d2f>
 8003556:	4603      	mov	r3, r0
 8003558:	4a65      	ldr	r2, [pc, #404]	; (80036f0 <JoystickLocationState+0x848>)
 800355a:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PickTray.origin_x * 10;
 800355c:	4b64      	ldr	r3, [pc, #400]	; (80036f0 <JoystickLocationState+0x848>)
 800355e:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003562:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003566:	ee67 7a87 	vmul.f32	s15, s15, s14
 800356a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356e:	ee17 3a90 	vmov	r3, s15
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b65      	ldr	r3, [pc, #404]	; (800370c <JoystickLocationState+0x864>)
 8003576:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PickTray.origin_y * 10;
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <JoystickLocationState+0x848>)
 800357c:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003580:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003584:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003588:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800358c:	ee17 3a90 	vmov	r3, s15
 8003590:	b29a      	uxth	r2, r3
 8003592:	4b5e      	ldr	r3, [pc, #376]	; (800370c <JoystickLocationState+0x864>)
 8003594:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PickTray.orientation * 100;
 8003598:	4b55      	ldr	r3, [pc, #340]	; (80036f0 <JoystickLocationState+0x848>)
 800359a:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 800359e:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003710 <JoystickLocationState+0x868>
 80035a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80035a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80035aa:	ee17 3a90 	vmov	r3, s15
 80035ae:	b29a      	uxth	r2, r3
 80035b0:	4b56      	ldr	r3, [pc, #344]	; (800370c <JoystickLocationState+0x864>)
 80035b2:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 80035b6:	4b55      	ldr	r3, [pc, #340]	; (800370c <JoystickLocationState+0x864>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80035bc:	e3a5      	b.n	8003d0a <JoystickLocationState+0xe62>
		else if (ResetButton.flag == 1)
 80035be:	4b55      	ldr	r3, [pc, #340]	; (8003714 <JoystickLocationState+0x86c>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	f040 83a1 	bne.w	8003d0a <JoystickLocationState+0xe62>
			ResetButton.flag = 0;
 80035c8:	4b52      	ldr	r3, [pc, #328]	; (8003714 <JoystickLocationState+0x86c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	609a      	str	r2, [r3, #8]
			state = 1;
 80035ce:	4b52      	ldr	r3, [pc, #328]	; (8003718 <JoystickLocationState+0x870>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	601a      	str	r2, [r3, #0]
		break;
 80035d4:	e399      	b.n	8003d0a <JoystickLocationState+0xe62>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <JoystickLocationState+0x874>)
 80035d8:	f04f 0200 	mov.w	r2, #0
 80035dc:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 80035de:	4b4f      	ldr	r3, [pc, #316]	; (800371c <JoystickLocationState+0x874>)
 80035e0:	f04f 0200 	mov.w	r2, #0
 80035e4:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 80035e6:	4b4d      	ldr	r3, [pc, #308]	; (800371c <JoystickLocationState+0x874>)
 80035e8:	f04f 0200 	mov.w	r2, #0
 80035ec:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 80035ee:	4b4b      	ldr	r3, [pc, #300]	; (800371c <JoystickLocationState+0x874>)
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 80035f6:	4b4a      	ldr	r3, [pc, #296]	; (8003720 <JoystickLocationState+0x878>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b01      	cmp	r3, #1
 80035fc:	d143      	bne.n	8003686 <JoystickLocationState+0x7de>
		{
			if(registerFrame[68].U16 >= 30000)
 80035fe:	4b43      	ldr	r3, [pc, #268]	; (800370c <JoystickLocationState+0x864>)
 8003600:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003604:	f247 522f 	movw	r2, #29999	; 0x752f
 8003608:	4293      	cmp	r3, r2
 800360a:	d912      	bls.n	8003632 <JoystickLocationState+0x78a>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 800360c:	4b3f      	ldr	r3, [pc, #252]	; (800370c <JoystickLocationState+0x864>)
 800360e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003612:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003616:	4a43      	ldr	r2, [pc, #268]	; (8003724 <JoystickLocationState+0x87c>)
 8003618:	fb82 1203 	smull	r1, r2, r2, r3
 800361c:	1092      	asrs	r2, r2, #2
 800361e:	17db      	asrs	r3, r3, #31
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	ee07 3a90 	vmov	s15, r3
 8003626:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800362a:	4b3c      	ldr	r3, [pc, #240]	; (800371c <JoystickLocationState+0x874>)
 800362c:	edc3 7a00 	vstr	s15, [r3]
 8003630:	e00e      	b.n	8003650 <JoystickLocationState+0x7a8>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003632:	4b36      	ldr	r3, [pc, #216]	; (800370c <JoystickLocationState+0x864>)
 8003634:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003638:	4a3b      	ldr	r2, [pc, #236]	; (8003728 <JoystickLocationState+0x880>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	08db      	lsrs	r3, r3, #3
 8003640:	b29b      	uxth	r3, r3
 8003642:	ee07 3a90 	vmov	s15, r3
 8003646:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800364a:	4b34      	ldr	r3, [pc, #208]	; (800371c <JoystickLocationState+0x874>)
 800364c:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 8003650:	4b36      	ldr	r3, [pc, #216]	; (800372c <JoystickLocationState+0x884>)
 8003652:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003656:	4618      	mov	r0, r3
 8003658:	f7fc ff6c 	bl	8000534 <__aeabi_i2d>
 800365c:	a322      	add	r3, pc, #136	; (adr r3, 80036e8 <JoystickLocationState+0x840>)
 800365e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003662:	f7fc ffd1 	bl	8000608 <__aeabi_dmul>
 8003666:	4602      	mov	r2, r0
 8003668:	460b      	mov	r3, r1
 800366a:	4610      	mov	r0, r2
 800366c:	4619      	mov	r1, r3
 800366e:	f7fd fac3 	bl	8000bf8 <__aeabi_d2f>
 8003672:	4603      	mov	r3, r0
 8003674:	4a29      	ldr	r2, [pc, #164]	; (800371c <JoystickLocationState+0x874>)
 8003676:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <JoystickLocationState+0x878>)
 800367a:	2200      	movs	r2, #0
 800367c:	609a      	str	r2, [r3, #8]
			state = 4;
 800367e:	4b26      	ldr	r3, [pc, #152]	; (8003718 <JoystickLocationState+0x870>)
 8003680:	2204      	movs	r2, #4
 8003682:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003684:	e343      	b.n	8003d0e <JoystickLocationState+0xe66>
		else if (ResetButton.flag == 1)
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <JoystickLocationState+0x86c>)
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b01      	cmp	r3, #1
 800368c:	f040 833f 	bne.w	8003d0e <JoystickLocationState+0xe66>
			ResetButton.flag = 0;
 8003690:	4b20      	ldr	r3, [pc, #128]	; (8003714 <JoystickLocationState+0x86c>)
 8003692:	2200      	movs	r2, #0
 8003694:	609a      	str	r2, [r3, #8]
			state = 1;
 8003696:	4b20      	ldr	r3, [pc, #128]	; (8003718 <JoystickLocationState+0x870>)
 8003698:	2201      	movs	r2, #1
 800369a:	601a      	str	r2, [r3, #0]
		break;
 800369c:	e337      	b.n	8003d0e <JoystickLocationState+0xe66>

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 800369e:	4b20      	ldr	r3, [pc, #128]	; (8003720 <JoystickLocationState+0x878>)
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	f040 82f7 	bne.w	8003c96 <JoystickLocationState+0xdee>
		{
			if(registerFrame[68].U16 >= 30000)
 80036a8:	4b18      	ldr	r3, [pc, #96]	; (800370c <JoystickLocationState+0x864>)
 80036aa:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80036ae:	f247 522f 	movw	r2, #29999	; 0x752f
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d93c      	bls.n	8003730 <JoystickLocationState+0x888>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 80036b6:	4b15      	ldr	r3, [pc, #84]	; (800370c <JoystickLocationState+0x864>)
 80036b8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80036bc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80036c0:	4a18      	ldr	r2, [pc, #96]	; (8003724 <JoystickLocationState+0x87c>)
 80036c2:	fb82 1203 	smull	r1, r2, r2, r3
 80036c6:	1092      	asrs	r2, r2, #2
 80036c8:	17db      	asrs	r3, r3, #31
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036d4:	4b11      	ldr	r3, [pc, #68]	; (800371c <JoystickLocationState+0x874>)
 80036d6:	edc3 7a02 	vstr	s15, [r3, #8]
 80036da:	e038      	b.n	800374e <JoystickLocationState+0x8a6>
 80036dc:	f3af 8000 	nop.w
 80036e0:	1a63c1f8 	.word	0x1a63c1f8
 80036e4:	404ca5dc 	.word	0x404ca5dc
 80036e8:	70a3d70a 	.word	0x70a3d70a
 80036ec:	3fa70a3d 	.word	0x3fa70a3d
 80036f0:	200009e4 	.word	0x200009e4
 80036f4:	20000ac8 	.word	0x20000ac8
 80036f8:	20000acc 	.word	0x20000acc
 80036fc:	42200000 	.word	0x42200000
 8003700:	42480000 	.word	0x42480000
 8003704:	20000ac0 	.word	0x20000ac0
 8003708:	40590000 	.word	0x40590000
 800370c:	20001000 	.word	0x20001000
 8003710:	42c80000 	.word	0x42c80000
 8003714:	20000adc 	.word	0x20000adc
 8003718:	20000224 	.word	0x20000224
 800371c:	20000a48 	.word	0x20000a48
 8003720:	20000ad0 	.word	0x20000ad0
 8003724:	66666667 	.word	0x66666667
 8003728:	cccccccd 	.word	0xcccccccd
 800372c:	200009ac 	.word	0x200009ac
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003730:	4bd5      	ldr	r3, [pc, #852]	; (8003a88 <JoystickLocationState+0xbe0>)
 8003732:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003736:	4ad5      	ldr	r2, [pc, #852]	; (8003a8c <JoystickLocationState+0xbe4>)
 8003738:	fba2 2303 	umull	r2, r3, r2, r3
 800373c:	08db      	lsrs	r3, r3, #3
 800373e:	b29b      	uxth	r3, r3
 8003740:	ee07 3a90 	vmov	s15, r3
 8003744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003748:	4bd1      	ldr	r3, [pc, #836]	; (8003a90 <JoystickLocationState+0xbe8>)
 800374a:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 800374e:	4bd1      	ldr	r3, [pc, #836]	; (8003a94 <JoystickLocationState+0xbec>)
 8003750:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003754:	4618      	mov	r0, r3
 8003756:	f7fc feed 	bl	8000534 <__aeabi_i2d>
 800375a:	a3c9      	add	r3, pc, #804	; (adr r3, 8003a80 <JoystickLocationState+0xbd8>)
 800375c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003760:	f7fc ff52 	bl	8000608 <__aeabi_dmul>
 8003764:	4602      	mov	r2, r0
 8003766:	460b      	mov	r3, r1
 8003768:	4610      	mov	r0, r2
 800376a:	4619      	mov	r1, r3
 800376c:	f7fd fa44 	bl	8000bf8 <__aeabi_d2f>
 8003770:	4603      	mov	r3, r0
 8003772:	4ac7      	ldr	r2, [pc, #796]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003774:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8003776:	4bc8      	ldr	r3, [pc, #800]	; (8003a98 <JoystickLocationState+0xbf0>)
 8003778:	2200      	movs	r2, #0
 800377a:	609a      	str	r2, [r3, #8]

			DeltaX = PlaceTray.L2[0]-PlaceTray.L1[0];
 800377c:	4bc4      	ldr	r3, [pc, #784]	; (8003a90 <JoystickLocationState+0xbe8>)
 800377e:	ed93 7a02 	vldr	s14, [r3, #8]
 8003782:	4bc3      	ldr	r3, [pc, #780]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003784:	edd3 7a00 	vldr	s15, [r3]
 8003788:	ee77 7a67 	vsub.f32	s15, s14, s15
 800378c:	ee17 0a90 	vmov	r0, s15
 8003790:	f7fc fee2 	bl	8000558 <__aeabi_f2d>
 8003794:	4602      	mov	r2, r0
 8003796:	460b      	mov	r3, r1
 8003798:	49c0      	ldr	r1, [pc, #768]	; (8003a9c <JoystickLocationState+0xbf4>)
 800379a:	e9c1 2300 	strd	r2, r3, [r1]
			DeltaY = PlaceTray.L2[1]-PlaceTray.L1[1];
 800379e:	4bbc      	ldr	r3, [pc, #752]	; (8003a90 <JoystickLocationState+0xbe8>)
 80037a0:	ed93 7a03 	vldr	s14, [r3, #12]
 80037a4:	4bba      	ldr	r3, [pc, #744]	; (8003a90 <JoystickLocationState+0xbe8>)
 80037a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80037aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80037ae:	ee17 0a90 	vmov	r0, s15
 80037b2:	f7fc fed1 	bl	8000558 <__aeabi_f2d>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	49b9      	ldr	r1, [pc, #740]	; (8003aa0 <JoystickLocationState+0xbf8>)
 80037bc:	e9c1 2300 	strd	r2, r3, [r1]
			angle = atan2(DeltaY, DeltaX);
 80037c0:	4bb7      	ldr	r3, [pc, #732]	; (8003aa0 <JoystickLocationState+0xbf8>)
 80037c2:	ed93 7b00 	vldr	d7, [r3]
 80037c6:	4bb5      	ldr	r3, [pc, #724]	; (8003a9c <JoystickLocationState+0xbf4>)
 80037c8:	ed93 6b00 	vldr	d6, [r3]
 80037cc:	eeb0 1a46 	vmov.f32	s2, s12
 80037d0:	eef0 1a66 	vmov.f32	s3, s13
 80037d4:	eeb0 0a47 	vmov.f32	s0, s14
 80037d8:	eef0 0a67 	vmov.f32	s1, s15
 80037dc:	f00d fc34 	bl	8011048 <atan2>
 80037e0:	eeb0 7a40 	vmov.f32	s14, s0
 80037e4:	eef0 7a60 	vmov.f32	s15, s1
 80037e8:	4bae      	ldr	r3, [pc, #696]	; (8003aa4 <JoystickLocationState+0xbfc>)
 80037ea:	ed83 7b00 	vstr	d7, [r3]

			cos_Theta = cos(angle);
 80037ee:	4bad      	ldr	r3, [pc, #692]	; (8003aa4 <JoystickLocationState+0xbfc>)
 80037f0:	ed93 7b00 	vldr	d7, [r3]
 80037f4:	eeb0 0a47 	vmov.f32	s0, s14
 80037f8:	eef0 0a67 	vmov.f32	s1, s15
 80037fc:	f00d fb78 	bl	8010ef0 <cos>
 8003800:	ec53 2b10 	vmov	r2, r3, d0
 8003804:	4610      	mov	r0, r2
 8003806:	4619      	mov	r1, r3
 8003808:	f7fd f9f6 	bl	8000bf8 <__aeabi_d2f>
 800380c:	4603      	mov	r3, r0
 800380e:	4aa6      	ldr	r2, [pc, #664]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003810:	6013      	str	r3, [r2, #0]
			sin_Theta = sin(angle);
 8003812:	4ba4      	ldr	r3, [pc, #656]	; (8003aa4 <JoystickLocationState+0xbfc>)
 8003814:	ed93 7b00 	vldr	d7, [r3]
 8003818:	eeb0 0a47 	vmov.f32	s0, s14
 800381c:	eef0 0a67 	vmov.f32	s1, s15
 8003820:	f00d fbba 	bl	8010f98 <sin>
 8003824:	ec53 2b10 	vmov	r2, r3, d0
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f9e4 	bl	8000bf8 <__aeabi_d2f>
 8003830:	4603      	mov	r3, r0
 8003832:	4a9e      	ldr	r2, [pc, #632]	; (8003aac <JoystickLocationState+0xc04>)
 8003834:	6013      	str	r3, [r2, #0]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*10)+PlaceTray.L1[0];
 8003836:	4b9c      	ldr	r3, [pc, #624]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003838:	edd3 7a00 	vldr	s15, [r3]
 800383c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003840:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003844:	4b99      	ldr	r3, [pc, #612]	; (8003aac <JoystickLocationState+0xc04>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	eef1 7a67 	vneg.f32	s15, s15
 800384e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003852:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003856:	ee37 7a27 	vadd.f32	s14, s14, s15
 800385a:	4b8d      	ldr	r3, [pc, #564]	; (8003a90 <JoystickLocationState+0xbe8>)
 800385c:	edd3 7a00 	vldr	s15, [r3]
 8003860:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003864:	4b8a      	ldr	r3, [pc, #552]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003866:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*10)+PlaceTray.L1[1];
 800386a:	4b90      	ldr	r3, [pc, #576]	; (8003aac <JoystickLocationState+0xc04>)
 800386c:	edd3 7a00 	vldr	s15, [r3]
 8003870:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003874:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003878:	4b8b      	ldr	r3, [pc, #556]	; (8003aa8 <JoystickLocationState+0xc00>)
 800387a:	edd3 7a00 	vldr	s15, [r3]
 800387e:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003882:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003886:	ee37 7a27 	vadd.f32	s14, s14, s15
 800388a:	4b81      	ldr	r3, [pc, #516]	; (8003a90 <JoystickLocationState+0xbe8>)
 800388c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003890:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003894:	4b7e      	ldr	r3, [pc, #504]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003896:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*10)+PlaceTray.L1[0];
 800389a:	4b83      	ldr	r3, [pc, #524]	; (8003aa8 <JoystickLocationState+0xc00>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80038a4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038a8:	4b80      	ldr	r3, [pc, #512]	; (8003aac <JoystickLocationState+0xc04>)
 80038aa:	edd3 7a00 	vldr	s15, [r3]
 80038ae:	eef1 7a67 	vneg.f32	s15, s15
 80038b2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038ba:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038be:	4b74      	ldr	r3, [pc, #464]	; (8003a90 <JoystickLocationState+0xbe8>)
 80038c0:	edd3 7a00 	vldr	s15, [r3]
 80038c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038c8:	4b71      	ldr	r3, [pc, #452]	; (8003a90 <JoystickLocationState+0xbe8>)
 80038ca:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*10)+PlaceTray.L1[1];
 80038ce:	4b77      	ldr	r3, [pc, #476]	; (8003aac <JoystickLocationState+0xc04>)
 80038d0:	edd3 7a00 	vldr	s15, [r3]
 80038d4:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80038d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038dc:	4b72      	ldr	r3, [pc, #456]	; (8003aa8 <JoystickLocationState+0xc00>)
 80038de:	edd3 7a00 	vldr	s15, [r3]
 80038e2:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038ee:	4b68      	ldr	r3, [pc, #416]	; (8003a90 <JoystickLocationState+0xbe8>)
 80038f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80038f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038f8:	4b65      	ldr	r3, [pc, #404]	; (8003a90 <JoystickLocationState+0xbe8>)
 80038fa:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*10)+PlaceTray.L1[0];
 80038fe:	4b6a      	ldr	r3, [pc, #424]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003900:	edd3 7a00 	vldr	s15, [r3]
 8003904:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8003ab0 <JoystickLocationState+0xc08>
 8003908:	ee27 7a87 	vmul.f32	s14, s15, s14
 800390c:	4b67      	ldr	r3, [pc, #412]	; (8003aac <JoystickLocationState+0xc04>)
 800390e:	edd3 7a00 	vldr	s15, [r3]
 8003912:	eef1 7a67 	vneg.f32	s15, s15
 8003916:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800391a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800391e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003922:	4b5b      	ldr	r3, [pc, #364]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003924:	edd3 7a00 	vldr	s15, [r3]
 8003928:	ee77 7a27 	vadd.f32	s15, s14, s15
 800392c:	4b58      	ldr	r3, [pc, #352]	; (8003a90 <JoystickLocationState+0xbe8>)
 800392e:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*10)+PlaceTray.L1[1];
 8003932:	4b5e      	ldr	r3, [pc, #376]	; (8003aac <JoystickLocationState+0xc04>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 8003ab0 <JoystickLocationState+0xc08>
 800393c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003940:	4b59      	ldr	r3, [pc, #356]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003942:	edd3 7a00 	vldr	s15, [r3]
 8003946:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800394a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800394e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003952:	4b4f      	ldr	r3, [pc, #316]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003954:	edd3 7a01 	vldr	s15, [r3, #4]
 8003958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800395c:	4b4c      	ldr	r3, [pc, #304]	; (8003a90 <JoystickLocationState+0xbe8>)
 800395e:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*25)+PlaceTray.L1[0];
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800396c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003970:	4b4e      	ldr	r3, [pc, #312]	; (8003aac <JoystickLocationState+0xc04>)
 8003972:	edd3 7a00 	vldr	s15, [r3]
 8003976:	eef1 7a67 	vneg.f32	s15, s15
 800397a:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800397e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003982:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003986:	4b42      	ldr	r3, [pc, #264]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003988:	edd3 7a00 	vldr	s15, [r3]
 800398c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003990:	4b3f      	ldr	r3, [pc, #252]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003992:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*25)+PlaceTray.L1[1];
 8003996:	4b45      	ldr	r3, [pc, #276]	; (8003aac <JoystickLocationState+0xc04>)
 8003998:	edd3 7a00 	vldr	s15, [r3]
 800399c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80039a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039a4:	4b40      	ldr	r3, [pc, #256]	; (8003aa8 <JoystickLocationState+0xc00>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <JoystickLocationState+0xbe8>)
 80039b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80039bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039c0:	4b33      	ldr	r3, [pc, #204]	; (8003a90 <JoystickLocationState+0xbe8>)
 80039c2:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*25)+PlaceTray.L1[0];
 80039c6:	4b38      	ldr	r3, [pc, #224]	; (8003aa8 <JoystickLocationState+0xc00>)
 80039c8:	edd3 7a00 	vldr	s15, [r3]
 80039cc:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80039d0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039d4:	4b35      	ldr	r3, [pc, #212]	; (8003aac <JoystickLocationState+0xc04>)
 80039d6:	edd3 7a00 	vldr	s15, [r3]
 80039da:	eef1 7a67 	vneg.f32	s15, s15
 80039de:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039ea:	4b29      	ldr	r3, [pc, #164]	; (8003a90 <JoystickLocationState+0xbe8>)
 80039ec:	edd3 7a00 	vldr	s15, [r3]
 80039f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039f4:	4b26      	ldr	r3, [pc, #152]	; (8003a90 <JoystickLocationState+0xbe8>)
 80039f6:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*25)+PlaceTray.L1[1];
 80039fa:	4b2c      	ldr	r3, [pc, #176]	; (8003aac <JoystickLocationState+0xc04>)
 80039fc:	edd3 7a00 	vldr	s15, [r3]
 8003a00:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003a04:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a08:	4b27      	ldr	r3, [pc, #156]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003a0a:	edd3 7a00 	vldr	s15, [r3]
 8003a0e:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003a1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a24:	4b1a      	ldr	r3, [pc, #104]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003a26:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*25)+PlaceTray.L1[0];
 8003a2a:	4b1f      	ldr	r3, [pc, #124]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003a2c:	edd3 7a00 	vldr	s15, [r3]
 8003a30:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003ab0 <JoystickLocationState+0xc08>
 8003a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a38:	4b1c      	ldr	r3, [pc, #112]	; (8003aac <JoystickLocationState+0xc04>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	eef1 7a67 	vneg.f32	s15, s15
 8003a42:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a46:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a4a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003a50:	edd3 7a00 	vldr	s15, [r3]
 8003a54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a58:	4b0d      	ldr	r3, [pc, #52]	; (8003a90 <JoystickLocationState+0xbe8>)
 8003a5a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*25)+PlaceTray.L1[1];
 8003a5e:	4b13      	ldr	r3, [pc, #76]	; (8003aac <JoystickLocationState+0xc04>)
 8003a60:	edd3 7a00 	vldr	s15, [r3]
 8003a64:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8003ab0 <JoystickLocationState+0xc08>
 8003a68:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a6c:	4b0e      	ldr	r3, [pc, #56]	; (8003aa8 <JoystickLocationState+0xc00>)
 8003a6e:	edd3 7a00 	vldr	s15, [r3]
 8003a72:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003a76:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a7e:	e019      	b.n	8003ab4 <JoystickLocationState+0xc0c>
 8003a80:	70a3d70a 	.word	0x70a3d70a
 8003a84:	3fa70a3d 	.word	0x3fa70a3d
 8003a88:	20001000 	.word	0x20001000
 8003a8c:	cccccccd 	.word	0xcccccccd
 8003a90:	20000a48 	.word	0x20000a48
 8003a94:	200009ac 	.word	0x200009ac
 8003a98:	20000ad0 	.word	0x20000ad0
 8003a9c:	20000ab0 	.word	0x20000ab0
 8003aa0:	20000ab8 	.word	0x20000ab8
 8003aa4:	20000ac0 	.word	0x20000ac0
 8003aa8:	20000ac8 	.word	0x20000ac8
 8003aac:	20000acc 	.word	0x20000acc
 8003ab0:	42480000 	.word	0x42480000
 8003ab4:	4b9c      	ldr	r3, [pc, #624]	; (8003d28 <JoystickLocationState+0xe80>)
 8003ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8003aba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003abe:	4b9a      	ldr	r3, [pc, #616]	; (8003d28 <JoystickLocationState+0xe80>)
 8003ac0:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003ac4:	4b99      	ldr	r3, [pc, #612]	; (8003d2c <JoystickLocationState+0xe84>)
 8003ac6:	edd3 7a00 	vldr	s15, [r3]
 8003aca:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003ace:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ad2:	4b97      	ldr	r3, [pc, #604]	; (8003d30 <JoystickLocationState+0xe88>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	eef1 7a67 	vneg.f32	s15, s15
 8003adc:	eddf 6a95 	vldr	s13, [pc, #596]	; 8003d34 <JoystickLocationState+0xe8c>
 8003ae0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ae4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ae8:	4b8f      	ldr	r3, [pc, #572]	; (8003d28 <JoystickLocationState+0xe80>)
 8003aea:	edd3 7a00 	vldr	s15, [r3]
 8003aee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003af2:	4b8d      	ldr	r3, [pc, #564]	; (8003d28 <JoystickLocationState+0xe80>)
 8003af4:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*40)+PlaceTray.L1[1];
 8003af8:	4b8d      	ldr	r3, [pc, #564]	; (8003d30 <JoystickLocationState+0xe88>)
 8003afa:	edd3 7a00 	vldr	s15, [r3]
 8003afe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003b02:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b06:	4b89      	ldr	r3, [pc, #548]	; (8003d2c <JoystickLocationState+0xe84>)
 8003b08:	edd3 7a00 	vldr	s15, [r3]
 8003b0c:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003d34 <JoystickLocationState+0xe8c>
 8003b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b14:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b18:	4b83      	ldr	r3, [pc, #524]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b1a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b22:	4b81      	ldr	r3, [pc, #516]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b24:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003b28:	4b80      	ldr	r3, [pc, #512]	; (8003d2c <JoystickLocationState+0xe84>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b32:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b36:	4b7e      	ldr	r3, [pc, #504]	; (8003d30 <JoystickLocationState+0xe88>)
 8003b38:	edd3 7a00 	vldr	s15, [r3]
 8003b3c:	eef1 7a67 	vneg.f32	s15, s15
 8003b40:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003d34 <JoystickLocationState+0xe8c>
 8003b44:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b48:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b4c:	4b76      	ldr	r3, [pc, #472]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b4e:	edd3 7a00 	vldr	s15, [r3]
 8003b52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b56:	4b74      	ldr	r3, [pc, #464]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b58:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*40)+PlaceTray.L1[1];
 8003b5c:	4b74      	ldr	r3, [pc, #464]	; (8003d30 <JoystickLocationState+0xe88>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b66:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b6a:	4b70      	ldr	r3, [pc, #448]	; (8003d2c <JoystickLocationState+0xe84>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	eddf 6a70 	vldr	s13, [pc, #448]	; 8003d34 <JoystickLocationState+0xe8c>
 8003b74:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b7c:	4b6a      	ldr	r3, [pc, #424]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b7e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b86:	4b68      	ldr	r3, [pc, #416]	; (8003d28 <JoystickLocationState+0xe80>)
 8003b88:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*40)+PlaceTray.L1[0];
 8003b8c:	4b67      	ldr	r3, [pc, #412]	; (8003d2c <JoystickLocationState+0xe84>)
 8003b8e:	edd3 7a00 	vldr	s15, [r3]
 8003b92:	ed9f 7a69 	vldr	s14, [pc, #420]	; 8003d38 <JoystickLocationState+0xe90>
 8003b96:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b9a:	4b65      	ldr	r3, [pc, #404]	; (8003d30 <JoystickLocationState+0xe88>)
 8003b9c:	edd3 7a00 	vldr	s15, [r3]
 8003ba0:	eef1 7a67 	vneg.f32	s15, s15
 8003ba4:	eddf 6a63 	vldr	s13, [pc, #396]	; 8003d34 <JoystickLocationState+0xe8c>
 8003ba8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bac:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003bb0:	4b5d      	ldr	r3, [pc, #372]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bb2:	edd3 7a00 	vldr	s15, [r3]
 8003bb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bba:	4b5b      	ldr	r3, [pc, #364]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bbc:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*40)+PlaceTray.L1[1];
 8003bc0:	4b5b      	ldr	r3, [pc, #364]	; (8003d30 <JoystickLocationState+0xe88>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 8003d38 <JoystickLocationState+0xe90>
 8003bca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bce:	4b57      	ldr	r3, [pc, #348]	; (8003d2c <JoystickLocationState+0xe84>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eddf 6a57 	vldr	s13, [pc, #348]	; 8003d34 <JoystickLocationState+0xe8c>
 8003bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be0:	4b51      	ldr	r3, [pc, #324]	; (8003d28 <JoystickLocationState+0xe80>)
 8003be2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bea:	4b4f      	ldr	r3, [pc, #316]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bec:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
//			}
//			else if(PlaceTray.L1[1] >= 0)
//			{
//				PlaceTray.origin_y = PlaceTray.L1[1];
//			}
			PlaceTray.origin_x = PlaceTray.L1[0];
 8003bf0:	4b4d      	ldr	r3, [pc, #308]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a4c      	ldr	r2, [pc, #304]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bf6:	6593      	str	r3, [r2, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1];
 8003bf8:	4b4b      	ldr	r3, [pc, #300]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	4a4a      	ldr	r2, [pc, #296]	; (8003d28 <JoystickLocationState+0xe80>)
 8003bfe:	65d3      	str	r3, [r2, #92]	; 0x5c

			PlaceTray.orientation = angle*(180/3.14159265358979323846264338328)*100;
 8003c00:	4b4e      	ldr	r3, [pc, #312]	; (8003d3c <JoystickLocationState+0xe94>)
 8003c02:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003c06:	a346      	add	r3, pc, #280	; (adr r3, 8003d20 <JoystickLocationState+0xe78>)
 8003c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0c:	f7fc fcfc 	bl	8000608 <__aeabi_dmul>
 8003c10:	4602      	mov	r2, r0
 8003c12:	460b      	mov	r3, r1
 8003c14:	4610      	mov	r0, r2
 8003c16:	4619      	mov	r1, r3
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	4b48      	ldr	r3, [pc, #288]	; (8003d40 <JoystickLocationState+0xe98>)
 8003c1e:	f7fc fcf3 	bl	8000608 <__aeabi_dmul>
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4610      	mov	r0, r2
 8003c28:	4619      	mov	r1, r3
 8003c2a:	f7fc ffe5 	bl	8000bf8 <__aeabi_d2f>
 8003c2e:	4603      	mov	r3, r0
 8003c30:	4a3d      	ldr	r2, [pc, #244]	; (8003d28 <JoystickLocationState+0xe80>)
 8003c32:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003c34:	4b3c      	ldr	r3, [pc, #240]	; (8003d28 <JoystickLocationState+0xe80>)
 8003c36:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003c3a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c46:	ee17 3a90 	vmov	r3, s15
 8003c4a:	b29a      	uxth	r2, r3
 8003c4c:	4b3d      	ldr	r3, [pc, #244]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003c4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003c52:	4b35      	ldr	r3, [pc, #212]	; (8003d28 <JoystickLocationState+0xe80>)
 8003c54:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003c58:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c5c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c60:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c64:	ee17 3a90 	vmov	r3, s15
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	4b36      	ldr	r3, [pc, #216]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003c6c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003c70:	4b2d      	ldr	r3, [pc, #180]	; (8003d28 <JoystickLocationState+0xe80>)
 8003c72:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003c76:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8003d48 <JoystickLocationState+0xea0>
 8003c7a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c82:	ee17 3a90 	vmov	r3, s15
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	4b2e      	ldr	r3, [pc, #184]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003c8a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003c8e:	4b2d      	ldr	r3, [pc, #180]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003c90:	2200      	movs	r2, #0
 8003c92:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003c94:	e03d      	b.n	8003d12 <JoystickLocationState+0xe6a>
		else if (ResetButton.flag == 1)
 8003c96:	4b2d      	ldr	r3, [pc, #180]	; (8003d4c <JoystickLocationState+0xea4>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d139      	bne.n	8003d12 <JoystickLocationState+0xe6a>
			ResetButton.flag = 0;
 8003c9e:	4b2b      	ldr	r3, [pc, #172]	; (8003d4c <JoystickLocationState+0xea4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	609a      	str	r2, [r3, #8]
			state = 1;
 8003ca4:	4b2a      	ldr	r3, [pc, #168]	; (8003d50 <JoystickLocationState+0xea8>)
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	601a      	str	r2, [r3, #0]
		break;
 8003caa:	e032      	b.n	8003d12 <JoystickLocationState+0xe6a>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003cac:	4b29      	ldr	r3, [pc, #164]	; (8003d54 <JoystickLocationState+0xeac>)
 8003cae:	2202      	movs	r2, #2
 8003cb0:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003cb2:	4b24      	ldr	r3, [pc, #144]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003cb8:	4b27      	ldr	r3, [pc, #156]	; (8003d58 <JoystickLocationState+0xeb0>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003cbe:	f7fe fcdb 	bl	8002678 <EndEffectorWrite>

		HAL_Delay(100);
 8003cc2:	2064      	movs	r0, #100	; 0x64
 8003cc4:	f001 fa86 	bl	80051d4 <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003cc8:	4b22      	ldr	r3, [pc, #136]	; (8003d54 <JoystickLocationState+0xeac>)
 8003cca:	2203      	movs	r2, #3
 8003ccc:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <JoystickLocationState+0xe9c>)
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003cd4:	4b20      	ldr	r3, [pc, #128]	; (8003d58 <JoystickLocationState+0xeb0>)
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003cda:	f7fe fccd 	bl	8002678 <EndEffectorWrite>

		HAL_Delay(100);
 8003cde:	2064      	movs	r0, #100	; 0x64
 8003ce0:	f001 fa78 	bl	80051d4 <HAL_Delay>

		state = 1;
 8003ce4:	4b1a      	ldr	r3, [pc, #104]	; (8003d50 <JoystickLocationState+0xea8>)
 8003ce6:	2201      	movs	r2, #1
 8003ce8:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <JoystickLocationState+0xeb4>)
 8003cec:	2201      	movs	r2, #1
 8003cee:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003cf0:	4b16      	ldr	r3, [pc, #88]	; (8003d4c <JoystickLocationState+0xea4>)
 8003cf2:	689b      	ldr	r3, [r3, #8]
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d10e      	bne.n	8003d16 <JoystickLocationState+0xe6e>
		{
			ResetButton.flag = 0;
 8003cf8:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <JoystickLocationState+0xea4>)
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	609a      	str	r2, [r3, #8]
			state = 1;
 8003cfe:	4b14      	ldr	r3, [pc, #80]	; (8003d50 <JoystickLocationState+0xea8>)
 8003d00:	2201      	movs	r2, #1
 8003d02:	601a      	str	r2, [r3, #0]
		}
		break;
 8003d04:	e007      	b.n	8003d16 <JoystickLocationState+0xe6e>
		break;
 8003d06:	bf00      	nop
 8003d08:	e006      	b.n	8003d18 <JoystickLocationState+0xe70>
		break;
 8003d0a:	bf00      	nop
 8003d0c:	e004      	b.n	8003d18 <JoystickLocationState+0xe70>
		break;
 8003d0e:	bf00      	nop
 8003d10:	e002      	b.n	8003d18 <JoystickLocationState+0xe70>
		break;
 8003d12:	bf00      	nop
 8003d14:	e000      	b.n	8003d18 <JoystickLocationState+0xe70>
		break;
 8003d16:	bf00      	nop
	}
}
 8003d18:	bf00      	nop
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	f3af 8000 	nop.w
 8003d20:	1a63c1f8 	.word	0x1a63c1f8
 8003d24:	404ca5dc 	.word	0x404ca5dc
 8003d28:	20000a48 	.word	0x20000a48
 8003d2c:	20000ac8 	.word	0x20000ac8
 8003d30:	20000acc 	.word	0x20000acc
 8003d34:	42200000 	.word	0x42200000
 8003d38:	42480000 	.word	0x42480000
 8003d3c:	20000ac0 	.word	0x20000ac0
 8003d40:	40590000 	.word	0x40590000
 8003d44:	20001000 	.word	0x20001000
 8003d48:	42c80000 	.word	0x42c80000
 8003d4c:	20000adc 	.word	0x20000adc
 8003d50:	20000224 	.word	0x20000224
 8003d54:	20000b20 	.word	0x20000b20
 8003d58:	20000b18 	.word	0x20000b18
 8003d5c:	20000200 	.word	0x20000200

08003d60 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	4a06      	ldr	r2, [pc, #24]	; (8003d84 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d105      	bne.n	8003d7c <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003d70:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b03      	cmp	r3, #3
 8003d76:	d101      	bne.n	8003d7c <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 8003d78:	f000 f80a 	bl	8003d90 <TrajectoryGenerator>
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 8003d7c:	bf00      	nop
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}
 8003d84:	200006b4 	.word	0x200006b4
 8003d88:	20000200 	.word	0x20000200
 8003d8c:	00000000 	.word	0x00000000

08003d90 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003d90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d94:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8003d96:	4b93      	ldr	r3, [pc, #588]	; (8003fe4 <TrajectoryGenerator+0x254>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	f200 8519 	bhi.w	80047d2 <TrajectoryGenerator+0xa42>
 8003da0:	a201      	add	r2, pc, #4	; (adr r2, 8003da8 <TrajectoryGenerator+0x18>)
 8003da2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da6:	bf00      	nop
 8003da8:	08003db9 	.word	0x08003db9
 8003dac:	0800402d 	.word	0x0800402d
 8003db0:	0800436d 	.word	0x0800436d
 8003db4:	080047d1 	.word	0x080047d1
	{
	case 0: //initial Condition & Case Check
			qi = position;
 8003db8:	4b8b      	ldr	r3, [pc, #556]	; (8003fe8 <TrajectoryGenerator+0x258>)
 8003dba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003dbe:	ee07 3a90 	vmov	s15, r3
 8003dc2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003dc6:	4b89      	ldr	r3, [pc, #548]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003dc8:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 8003dcc:	4b88      	ldr	r3, [pc, #544]	; (8003ff0 <TrajectoryGenerator+0x260>)
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	601a      	str	r2, [r3, #0]
			qd_max = 22222;  //1000 pulse/s
 8003dd4:	4b87      	ldr	r3, [pc, #540]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003dd6:	4a88      	ldr	r2, [pc, #544]	; (8003ff8 <TrajectoryGenerator+0x268>)
 8003dd8:	601a      	str	r2, [r3, #0]
			qdd_max = 55555; //3000 pulse/s^2 /0.045
 8003dda:	4b88      	ldr	r3, [pc, #544]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003ddc:	4a88      	ldr	r2, [pc, #544]	; (8004000 <TrajectoryGenerator+0x270>)
 8003dde:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 8003de0:	4b88      	ldr	r3, [pc, #544]	; (8004004 <TrajectoryGenerator+0x274>)
 8003de2:	ed93 7a00 	vldr	s14, [r3]
 8003de6:	4b81      	ldr	r3, [pc, #516]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003de8:	edd3 7a00 	vldr	s15, [r3]
 8003dec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003df4:	dd16      	ble.n	8003e24 <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003df6:	4b83      	ldr	r3, [pc, #524]	; (8004004 <TrajectoryGenerator+0x274>)
 8003df8:	ed93 7a00 	vldr	s14, [r3]
 8003dfc:	4b7b      	ldr	r3, [pc, #492]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003dfe:	edd3 7a00 	vldr	s15, [r3]
 8003e02:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003e06:	4b7d      	ldr	r3, [pc, #500]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003e08:	edd3 7a00 	vldr	s15, [r3]
 8003e0c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e10:	eeb0 0a66 	vmov.f32	s0, s13
 8003e14:	f00d f91a 	bl	801104c <sqrtf>
 8003e18:	eef0 7a40 	vmov.f32	s15, s0
 8003e1c:	4b7a      	ldr	r3, [pc, #488]	; (8004008 <TrajectoryGenerator+0x278>)
 8003e1e:	edc3 7a00 	vstr	s15, [r3]
 8003e22:	e022      	b.n	8003e6a <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003e24:	4b77      	ldr	r3, [pc, #476]	; (8004004 <TrajectoryGenerator+0x274>)
 8003e26:	ed93 7a00 	vldr	s14, [r3]
 8003e2a:	4b70      	ldr	r3, [pc, #448]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e38:	d517      	bpl.n	8003e6a <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003e3a:	4b72      	ldr	r3, [pc, #456]	; (8004004 <TrajectoryGenerator+0x274>)
 8003e3c:	ed93 7a00 	vldr	s14, [r3]
 8003e40:	4b6a      	ldr	r3, [pc, #424]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003e42:	edd3 7a00 	vldr	s15, [r3]
 8003e46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e4a:	eeb1 7a67 	vneg.f32	s14, s15
 8003e4e:	4b6b      	ldr	r3, [pc, #428]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003e50:	edd3 7a00 	vldr	s15, [r3]
 8003e54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e58:	eeb0 0a66 	vmov.f32	s0, s13
 8003e5c:	f00d f8f6 	bl	801104c <sqrtf>
 8003e60:	eef0 7a40 	vmov.f32	s15, s0
 8003e64:	4b68      	ldr	r3, [pc, #416]	; (8004008 <TrajectoryGenerator+0x278>)
 8003e66:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8003e6a:	4b66      	ldr	r3, [pc, #408]	; (8004004 <TrajectoryGenerator+0x274>)
 8003e6c:	ed93 7a00 	vldr	s14, [r3]
 8003e70:	4b5e      	ldr	r3, [pc, #376]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003e72:	edd3 7a00 	vldr	s15, [r3]
 8003e76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e7a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e82:	d50f      	bpl.n	8003ea4 <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003e84:	4b5b      	ldr	r3, [pc, #364]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003e86:	edd3 7a00 	vldr	s15, [r3]
 8003e8a:	eef1 7a67 	vneg.f32	s15, s15
 8003e8e:	4b59      	ldr	r3, [pc, #356]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003e90:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8003e94:	4b59      	ldr	r3, [pc, #356]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	eef1 7a67 	vneg.f32	s15, s15
 8003e9e:	4b57      	ldr	r3, [pc, #348]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003ea0:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 8003ea4:	4b53      	ldr	r3, [pc, #332]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003ea6:	ed93 7a00 	vldr	s14, [r3]
 8003eaa:	4b51      	ldr	r3, [pc, #324]	; (8003ff0 <TrajectoryGenerator+0x260>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003eb4:	4b51      	ldr	r3, [pc, #324]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003eb6:	ed93 7a00 	vldr	s14, [r3]
 8003eba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ebe:	4b53      	ldr	r3, [pc, #332]	; (800400c <TrajectoryGenerator+0x27c>)
 8003ec0:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003ec4:	4b4a      	ldr	r3, [pc, #296]	; (8003ff0 <TrajectoryGenerator+0x260>)
 8003ec6:	ed93 7a00 	vldr	s14, [r3]
 8003eca:	4b50      	ldr	r3, [pc, #320]	; (800400c <TrajectoryGenerator+0x27c>)
 8003ecc:	edd3 7a00 	vldr	s15, [r3]
 8003ed0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ed4:	ee17 0a90 	vmov	r0, s15
 8003ed8:	f7fc fb3e 	bl	8000558 <__aeabi_f2d>
 8003edc:	4604      	mov	r4, r0
 8003ede:	460d      	mov	r5, r1
 8003ee0:	4b46      	ldr	r3, [pc, #280]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f7fc fb37 	bl	8000558 <__aeabi_f2d>
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	4b48      	ldr	r3, [pc, #288]	; (8004010 <TrajectoryGenerator+0x280>)
 8003ef0:	f7fc fb8a 	bl	8000608 <__aeabi_dmul>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	460b      	mov	r3, r1
 8003ef8:	4690      	mov	r8, r2
 8003efa:	4699      	mov	r9, r3
 8003efc:	4b43      	ldr	r3, [pc, #268]	; (800400c <TrajectoryGenerator+0x27c>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4618      	mov	r0, r3
 8003f02:	f7fc fb29 	bl	8000558 <__aeabi_f2d>
 8003f06:	4602      	mov	r2, r0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	4640      	mov	r0, r8
 8003f0c:	4649      	mov	r1, r9
 8003f0e:	f7fc fb7b 	bl	8000608 <__aeabi_dmul>
 8003f12:	4602      	mov	r2, r0
 8003f14:	460b      	mov	r3, r1
 8003f16:	4690      	mov	r8, r2
 8003f18:	4699      	mov	r9, r3
 8003f1a:	4b3c      	ldr	r3, [pc, #240]	; (800400c <TrajectoryGenerator+0x27c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4618      	mov	r0, r3
 8003f20:	f7fc fb1a 	bl	8000558 <__aeabi_f2d>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4640      	mov	r0, r8
 8003f2a:	4649      	mov	r1, r9
 8003f2c:	f7fc fb6c 	bl	8000608 <__aeabi_dmul>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4620      	mov	r0, r4
 8003f36:	4629      	mov	r1, r5
 8003f38:	f7fc f9b0 	bl	800029c <__adddf3>
 8003f3c:	4602      	mov	r2, r0
 8003f3e:	460b      	mov	r3, r1
 8003f40:	4610      	mov	r0, r2
 8003f42:	4619      	mov	r1, r3
 8003f44:	f7fc fe58 	bl	8000bf8 <__aeabi_d2f>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	4a32      	ldr	r2, [pc, #200]	; (8004014 <TrajectoryGenerator+0x284>)
 8003f4c:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 8003f4e:	4b31      	ldr	r3, [pc, #196]	; (8004014 <TrajectoryGenerator+0x284>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a31      	ldr	r2, [pc, #196]	; (8004018 <TrajectoryGenerator+0x288>)
 8003f54:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003f56:	4b2b      	ldr	r3, [pc, #172]	; (8004004 <TrajectoryGenerator+0x274>)
 8003f58:	ed93 7a00 	vldr	s14, [r3]
 8003f5c:	4b23      	ldr	r3, [pc, #140]	; (8003fec <TrajectoryGenerator+0x25c>)
 8003f5e:	edd3 7a00 	vldr	s15, [r3]
 8003f62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f66:	4b2b      	ldr	r3, [pc, #172]	; (8004014 <TrajectoryGenerator+0x284>)
 8003f68:	edd3 7a00 	vldr	s15, [r3]
 8003f6c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <TrajectoryGenerator+0x288>)
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f7a:	4b1e      	ldr	r3, [pc, #120]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003f7c:	ed93 7a00 	vldr	s14, [r3]
 8003f80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f84:	4b25      	ldr	r3, [pc, #148]	; (800401c <TrajectoryGenerator+0x28c>)
 8003f86:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8003f8a:	4b20      	ldr	r3, [pc, #128]	; (800400c <TrajectoryGenerator+0x27c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a24      	ldr	r2, [pc, #144]	; (8004020 <TrajectoryGenerator+0x290>)
 8003f90:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 8003f92:	4b1a      	ldr	r3, [pc, #104]	; (8003ffc <TrajectoryGenerator+0x26c>)
 8003f94:	ed93 7a00 	vldr	s14, [r3]
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <TrajectoryGenerator+0x278>)
 8003f9a:	edd3 7a00 	vldr	s15, [r3]
 8003f9e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003fa2:	4b13      	ldr	r3, [pc, #76]	; (8003ff0 <TrajectoryGenerator+0x260>)
 8003fa4:	edd3 7a00 	vldr	s15, [r3]
 8003fa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fac:	eeb0 7ae7 	vabs.f32	s14, s15
 8003fb0:	4b10      	ldr	r3, [pc, #64]	; (8003ff4 <TrajectoryGenerator+0x264>)
 8003fb2:	edd3 7a00 	vldr	s15, [r3]
 8003fb6:	eef0 7ae7 	vabs.f32	s15, s15
 8003fba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	db07      	blt.n	8003fd4 <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 8003fc4:	4b17      	ldr	r3, [pc, #92]	; (8004024 <TrajectoryGenerator+0x294>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	4a17      	ldr	r2, [pc, #92]	; (8004028 <TrajectoryGenerator+0x298>)
 8003fca:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8003fcc:	4b05      	ldr	r3, [pc, #20]	; (8003fe4 <TrajectoryGenerator+0x254>)
 8003fce:	2202      	movs	r2, #2
 8003fd0:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 8003fd2:	e3fe      	b.n	80047d2 <TrajectoryGenerator+0xa42>
			  initime = time;
 8003fd4:	4b13      	ldr	r3, [pc, #76]	; (8004024 <TrajectoryGenerator+0x294>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a13      	ldr	r2, [pc, #76]	; (8004028 <TrajectoryGenerator+0x298>)
 8003fda:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8003fdc:	4b01      	ldr	r3, [pc, #4]	; (8003fe4 <TrajectoryGenerator+0x254>)
 8003fde:	2201      	movs	r2, #1
 8003fe0:	601a      	str	r2, [r3, #0]
		  break;
 8003fe2:	e3f6      	b.n	80047d2 <TrajectoryGenerator+0xa42>
 8003fe4:	2000096c 	.word	0x2000096c
 8003fe8:	200009ac 	.word	0x200009ac
 8003fec:	20000978 	.word	0x20000978
 8003ff0:	2000097c 	.word	0x2000097c
 8003ff4:	20000210 	.word	0x20000210
 8003ff8:	46ad9c00 	.word	0x46ad9c00
 8003ffc:	20000214 	.word	0x20000214
 8004000:	47590300 	.word	0x47590300
 8004004:	20000974 	.word	0x20000974
 8004008:	20000984 	.word	0x20000984
 800400c:	20000998 	.word	0x20000998
 8004010:	3fe00000 	.word	0x3fe00000
 8004014:	2000099c 	.word	0x2000099c
 8004018:	200009a0 	.word	0x200009a0
 800401c:	200009a4 	.word	0x200009a4
 8004020:	200009a8 	.word	0x200009a8
 8004024:	20000970 	.word	0x20000970
 8004028:	20000980 	.word	0x20000980

	case 1:
		  if(time <= t_half + initime)
 800402c:	4bc2      	ldr	r3, [pc, #776]	; (8004338 <TrajectoryGenerator+0x5a8>)
 800402e:	ed93 7a00 	vldr	s14, [r3]
 8004032:	4bc2      	ldr	r3, [pc, #776]	; (800433c <TrajectoryGenerator+0x5ac>)
 8004034:	edd3 7a00 	vldr	s15, [r3]
 8004038:	ee37 7a27 	vadd.f32	s14, s14, s15
 800403c:	4bc0      	ldr	r3, [pc, #768]	; (8004340 <TrajectoryGenerator+0x5b0>)
 800403e:	edd3 7a00 	vldr	s15, [r3]
 8004042:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800404a:	f2c0 8092 	blt.w	8004172 <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 800404e:	4bbd      	ldr	r3, [pc, #756]	; (8004344 <TrajectoryGenerator+0x5b4>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4abd      	ldr	r2, [pc, #756]	; (8004348 <TrajectoryGenerator+0x5b8>)
 8004054:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 8004056:	4bba      	ldr	r3, [pc, #744]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004058:	ed93 7a00 	vldr	s14, [r3]
 800405c:	4bb7      	ldr	r3, [pc, #732]	; (800433c <TrajectoryGenerator+0x5ac>)
 800405e:	edd3 7a00 	vldr	s15, [r3]
 8004062:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004066:	4bb8      	ldr	r3, [pc, #736]	; (8004348 <TrajectoryGenerator+0x5b8>)
 8004068:	edd3 7a00 	vldr	s15, [r3]
 800406c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004070:	4bb6      	ldr	r3, [pc, #728]	; (800434c <TrajectoryGenerator+0x5bc>)
 8004072:	edd3 7a00 	vldr	s15, [r3]
 8004076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800407a:	4bb5      	ldr	r3, [pc, #724]	; (8004350 <TrajectoryGenerator+0x5c0>)
 800407c:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004080:	4baf      	ldr	r3, [pc, #700]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004082:	ed93 7a00 	vldr	s14, [r3]
 8004086:	4bad      	ldr	r3, [pc, #692]	; (800433c <TrajectoryGenerator+0x5ac>)
 8004088:	edd3 7a00 	vldr	s15, [r3]
 800408c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004090:	4bae      	ldr	r3, [pc, #696]	; (800434c <TrajectoryGenerator+0x5bc>)
 8004092:	edd3 7a00 	vldr	s15, [r3]
 8004096:	ee27 7a27 	vmul.f32	s14, s14, s15
 800409a:	4bae      	ldr	r3, [pc, #696]	; (8004354 <TrajectoryGenerator+0x5c4>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80040a4:	ee17 0a90 	vmov	r0, s15
 80040a8:	f7fc fa56 	bl	8000558 <__aeabi_f2d>
 80040ac:	4604      	mov	r4, r0
 80040ae:	460d      	mov	r5, r1
 80040b0:	4ba5      	ldr	r3, [pc, #660]	; (8004348 <TrajectoryGenerator+0x5b8>)
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4618      	mov	r0, r3
 80040b6:	f7fc fa4f 	bl	8000558 <__aeabi_f2d>
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	4ba6      	ldr	r3, [pc, #664]	; (8004358 <TrajectoryGenerator+0x5c8>)
 80040c0:	f7fc faa2 	bl	8000608 <__aeabi_dmul>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4690      	mov	r8, r2
 80040ca:	4699      	mov	r9, r3
 80040cc:	4b9c      	ldr	r3, [pc, #624]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80040ce:	ed93 7a00 	vldr	s14, [r3]
 80040d2:	4b9a      	ldr	r3, [pc, #616]	; (800433c <TrajectoryGenerator+0x5ac>)
 80040d4:	edd3 7a00 	vldr	s15, [r3]
 80040d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040dc:	ee17 0a90 	vmov	r0, s15
 80040e0:	f7fc fa3a 	bl	8000558 <__aeabi_f2d>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4640      	mov	r0, r8
 80040ea:	4649      	mov	r1, r9
 80040ec:	f7fc fa8c 	bl	8000608 <__aeabi_dmul>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4690      	mov	r8, r2
 80040f6:	4699      	mov	r9, r3
 80040f8:	4b91      	ldr	r3, [pc, #580]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80040fa:	ed93 7a00 	vldr	s14, [r3]
 80040fe:	4b8f      	ldr	r3, [pc, #572]	; (800433c <TrajectoryGenerator+0x5ac>)
 8004100:	edd3 7a00 	vldr	s15, [r3]
 8004104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004108:	ee17 0a90 	vmov	r0, s15
 800410c:	f7fc fa24 	bl	8000558 <__aeabi_f2d>
 8004110:	4602      	mov	r2, r0
 8004112:	460b      	mov	r3, r1
 8004114:	4640      	mov	r0, r8
 8004116:	4649      	mov	r1, r9
 8004118:	f7fc fa76 	bl	8000608 <__aeabi_dmul>
 800411c:	4602      	mov	r2, r0
 800411e:	460b      	mov	r3, r1
 8004120:	4620      	mov	r0, r4
 8004122:	4629      	mov	r1, r5
 8004124:	f7fc f8ba 	bl	800029c <__adddf3>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	4610      	mov	r0, r2
 800412e:	4619      	mov	r1, r3
 8004130:	f7fc fd62 	bl	8000bf8 <__aeabi_d2f>
 8004134:	4603      	mov	r3, r0
 8004136:	4a89      	ldr	r2, [pc, #548]	; (800435c <TrajectoryGenerator+0x5cc>)
 8004138:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 800413a:	4b88      	ldr	r3, [pc, #544]	; (800435c <TrajectoryGenerator+0x5cc>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a88      	ldr	r2, [pc, #544]	; (8004360 <TrajectoryGenerator+0x5d0>)
 8004140:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 8004142:	4b83      	ldr	r3, [pc, #524]	; (8004350 <TrajectoryGenerator+0x5c0>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a87      	ldr	r2, [pc, #540]	; (8004364 <TrajectoryGenerator+0x5d4>)
 8004148:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800414a:	4b7d      	ldr	r3, [pc, #500]	; (8004340 <TrajectoryGenerator+0x5b0>)
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f7fc fa02 	bl	8000558 <__aeabi_f2d>
 8004154:	a376      	add	r3, pc, #472	; (adr r3, 8004330 <TrajectoryGenerator+0x5a0>)
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f7fc f89f 	bl	800029c <__adddf3>
 800415e:	4602      	mov	r2, r0
 8004160:	460b      	mov	r3, r1
 8004162:	4610      	mov	r0, r2
 8004164:	4619      	mov	r1, r3
 8004166:	f7fc fd47 	bl	8000bf8 <__aeabi_d2f>
 800416a:	4603      	mov	r3, r0
 800416c:	4a74      	ldr	r2, [pc, #464]	; (8004340 <TrajectoryGenerator+0x5b0>)
 800416e:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 8004170:	e32f      	b.n	80047d2 <TrajectoryGenerator+0xa42>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8004172:	4b71      	ldr	r3, [pc, #452]	; (8004338 <TrajectoryGenerator+0x5a8>)
 8004174:	ed93 7a00 	vldr	s14, [r3]
 8004178:	4b70      	ldr	r3, [pc, #448]	; (800433c <TrajectoryGenerator+0x5ac>)
 800417a:	edd3 7a00 	vldr	s15, [r3]
 800417e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004182:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800418c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004190:	f140 80b5 	bpl.w	80042fe <TrajectoryGenerator+0x56e>
 8004194:	4b68      	ldr	r3, [pc, #416]	; (8004338 <TrajectoryGenerator+0x5a8>)
 8004196:	edd3 7a00 	vldr	s15, [r3]
 800419a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800419e:	4b67      	ldr	r3, [pc, #412]	; (800433c <TrajectoryGenerator+0x5ac>)
 80041a0:	edd3 7a00 	vldr	s15, [r3]
 80041a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80041a8:	4b65      	ldr	r3, [pc, #404]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80041aa:	edd3 7a00 	vldr	s15, [r3]
 80041ae:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b6:	f2c0 80a2 	blt.w	80042fe <TrajectoryGenerator+0x56e>
			  setacc = -qdd_max;
 80041ba:	4b62      	ldr	r3, [pc, #392]	; (8004344 <TrajectoryGenerator+0x5b4>)
 80041bc:	edd3 7a00 	vldr	s15, [r3]
 80041c0:	eef1 7a67 	vneg.f32	s15, s15
 80041c4:	4b60      	ldr	r3, [pc, #384]	; (8004348 <TrajectoryGenerator+0x5b8>)
 80041c6:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 80041ca:	4b5d      	ldr	r3, [pc, #372]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80041cc:	ed93 7a00 	vldr	s14, [r3]
 80041d0:	4b5a      	ldr	r3, [pc, #360]	; (800433c <TrajectoryGenerator+0x5ac>)
 80041d2:	edd3 7a00 	vldr	s15, [r3]
 80041d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041da:	4b57      	ldr	r3, [pc, #348]	; (8004338 <TrajectoryGenerator+0x5a8>)
 80041dc:	edd3 7a00 	vldr	s15, [r3]
 80041e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041e4:	4b58      	ldr	r3, [pc, #352]	; (8004348 <TrajectoryGenerator+0x5b8>)
 80041e6:	edd3 7a00 	vldr	s15, [r3]
 80041ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ee:	4b5d      	ldr	r3, [pc, #372]	; (8004364 <TrajectoryGenerator+0x5d4>)
 80041f0:	edd3 7a00 	vldr	s15, [r3]
 80041f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <TrajectoryGenerator+0x5c0>)
 80041fa:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 80041fe:	4b50      	ldr	r3, [pc, #320]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004200:	ed93 7a00 	vldr	s14, [r3]
 8004204:	4b4d      	ldr	r3, [pc, #308]	; (800433c <TrajectoryGenerator+0x5ac>)
 8004206:	edd3 7a00 	vldr	s15, [r3]
 800420a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800420e:	4b4a      	ldr	r3, [pc, #296]	; (8004338 <TrajectoryGenerator+0x5a8>)
 8004210:	edd3 7a00 	vldr	s15, [r3]
 8004214:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004218:	4b52      	ldr	r3, [pc, #328]	; (8004364 <TrajectoryGenerator+0x5d4>)
 800421a:	edd3 7a00 	vldr	s15, [r3]
 800421e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <TrajectoryGenerator+0x5d0>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800422c:	ee17 0a90 	vmov	r0, s15
 8004230:	f7fc f992 	bl	8000558 <__aeabi_f2d>
 8004234:	4604      	mov	r4, r0
 8004236:	460d      	mov	r5, r1
 8004238:	4b43      	ldr	r3, [pc, #268]	; (8004348 <TrajectoryGenerator+0x5b8>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4618      	mov	r0, r3
 800423e:	f7fc f98b 	bl	8000558 <__aeabi_f2d>
 8004242:	f04f 0200 	mov.w	r2, #0
 8004246:	4b44      	ldr	r3, [pc, #272]	; (8004358 <TrajectoryGenerator+0x5c8>)
 8004248:	f7fc f9de 	bl	8000608 <__aeabi_dmul>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4690      	mov	r8, r2
 8004252:	4699      	mov	r9, r3
 8004254:	4b3a      	ldr	r3, [pc, #232]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004256:	ed93 7a00 	vldr	s14, [r3]
 800425a:	4b38      	ldr	r3, [pc, #224]	; (800433c <TrajectoryGenerator+0x5ac>)
 800425c:	edd3 7a00 	vldr	s15, [r3]
 8004260:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004264:	4b34      	ldr	r3, [pc, #208]	; (8004338 <TrajectoryGenerator+0x5a8>)
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426e:	ee17 0a90 	vmov	r0, s15
 8004272:	f7fc f971 	bl	8000558 <__aeabi_f2d>
 8004276:	4602      	mov	r2, r0
 8004278:	460b      	mov	r3, r1
 800427a:	4640      	mov	r0, r8
 800427c:	4649      	mov	r1, r9
 800427e:	f7fc f9c3 	bl	8000608 <__aeabi_dmul>
 8004282:	4602      	mov	r2, r0
 8004284:	460b      	mov	r3, r1
 8004286:	4690      	mov	r8, r2
 8004288:	4699      	mov	r9, r3
 800428a:	4b2d      	ldr	r3, [pc, #180]	; (8004340 <TrajectoryGenerator+0x5b0>)
 800428c:	ed93 7a00 	vldr	s14, [r3]
 8004290:	4b2a      	ldr	r3, [pc, #168]	; (800433c <TrajectoryGenerator+0x5ac>)
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	ee37 7a67 	vsub.f32	s14, s14, s15
 800429a:	4b27      	ldr	r3, [pc, #156]	; (8004338 <TrajectoryGenerator+0x5a8>)
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a4:	ee17 0a90 	vmov	r0, s15
 80042a8:	f7fc f956 	bl	8000558 <__aeabi_f2d>
 80042ac:	4602      	mov	r2, r0
 80042ae:	460b      	mov	r3, r1
 80042b0:	4640      	mov	r0, r8
 80042b2:	4649      	mov	r1, r9
 80042b4:	f7fc f9a8 	bl	8000608 <__aeabi_dmul>
 80042b8:	4602      	mov	r2, r0
 80042ba:	460b      	mov	r3, r1
 80042bc:	4620      	mov	r0, r4
 80042be:	4629      	mov	r1, r5
 80042c0:	f7fb ffec 	bl	800029c <__adddf3>
 80042c4:	4602      	mov	r2, r0
 80042c6:	460b      	mov	r3, r1
 80042c8:	4610      	mov	r0, r2
 80042ca:	4619      	mov	r1, r3
 80042cc:	f7fc fc94 	bl	8000bf8 <__aeabi_d2f>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4a22      	ldr	r2, [pc, #136]	; (800435c <TrajectoryGenerator+0x5cc>)
 80042d4:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 80042d6:	4b1a      	ldr	r3, [pc, #104]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f7fc f93c 	bl	8000558 <__aeabi_f2d>
 80042e0:	a313      	add	r3, pc, #76	; (adr r3, 8004330 <TrajectoryGenerator+0x5a0>)
 80042e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e6:	f7fb ffd9 	bl	800029c <__adddf3>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4610      	mov	r0, r2
 80042f0:	4619      	mov	r1, r3
 80042f2:	f7fc fc81 	bl	8000bf8 <__aeabi_d2f>
 80042f6:	4603      	mov	r3, r0
 80042f8:	4a11      	ldr	r2, [pc, #68]	; (8004340 <TrajectoryGenerator+0x5b0>)
 80042fa:	6013      	str	r3, [r2, #0]
		break;
 80042fc:	e269      	b.n	80047d2 <TrajectoryGenerator+0xa42>
		  else if(time > (2*t_half) + initime){
 80042fe:	4b0e      	ldr	r3, [pc, #56]	; (8004338 <TrajectoryGenerator+0x5a8>)
 8004300:	edd3 7a00 	vldr	s15, [r3]
 8004304:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004308:	4b0c      	ldr	r3, [pc, #48]	; (800433c <TrajectoryGenerator+0x5ac>)
 800430a:	edd3 7a00 	vldr	s15, [r3]
 800430e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <TrajectoryGenerator+0x5b0>)
 8004314:	edd3 7a00 	vldr	s15, [r3]
 8004318:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800431c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004320:	d400      	bmi.n	8004324 <TrajectoryGenerator+0x594>
		break;
 8004322:	e256      	b.n	80047d2 <TrajectoryGenerator+0xa42>
			  setposition = qf;
 8004324:	4b10      	ldr	r3, [pc, #64]	; (8004368 <TrajectoryGenerator+0x5d8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a0c      	ldr	r2, [pc, #48]	; (800435c <TrajectoryGenerator+0x5cc>)
 800432a:	6013      	str	r3, [r2, #0]
		break;
 800432c:	e251      	b.n	80047d2 <TrajectoryGenerator+0xa42>
 800432e:	bf00      	nop
 8004330:	d2f1a9fc 	.word	0xd2f1a9fc
 8004334:	3f50624d 	.word	0x3f50624d
 8004338:	20000984 	.word	0x20000984
 800433c:	20000980 	.word	0x20000980
 8004340:	20000970 	.word	0x20000970
 8004344:	20000214 	.word	0x20000214
 8004348:	200009e0 	.word	0x200009e0
 800434c:	2000097c 	.word	0x2000097c
 8004350:	200009dc 	.word	0x200009dc
 8004354:	20000978 	.word	0x20000978
 8004358:	3fe00000 	.word	0x3fe00000
 800435c:	200009bc 	.word	0x200009bc
 8004360:	20000990 	.word	0x20000990
 8004364:	20000988 	.word	0x20000988
 8004368:	20000974 	.word	0x20000974

	case 2:
		 if(time <= tacc + initime)
 800436c:	4b84      	ldr	r3, [pc, #528]	; (8004580 <TrajectoryGenerator+0x7f0>)
 800436e:	ed93 7a00 	vldr	s14, [r3]
 8004372:	4b84      	ldr	r3, [pc, #528]	; (8004584 <TrajectoryGenerator+0x7f4>)
 8004374:	edd3 7a00 	vldr	s15, [r3]
 8004378:	ee37 7a27 	vadd.f32	s14, s14, s15
 800437c:	4b82      	ldr	r3, [pc, #520]	; (8004588 <TrajectoryGenerator+0x7f8>)
 800437e:	edd3 7a00 	vldr	s15, [r3]
 8004382:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438a:	f2c0 8092 	blt.w	80044b2 <TrajectoryGenerator+0x722>
		 {
			 setacc = qdd_max;
 800438e:	4b7f      	ldr	r3, [pc, #508]	; (800458c <TrajectoryGenerator+0x7fc>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a7f      	ldr	r2, [pc, #508]	; (8004590 <TrajectoryGenerator+0x800>)
 8004394:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 8004396:	4b7c      	ldr	r3, [pc, #496]	; (8004588 <TrajectoryGenerator+0x7f8>)
 8004398:	ed93 7a00 	vldr	s14, [r3]
 800439c:	4b79      	ldr	r3, [pc, #484]	; (8004584 <TrajectoryGenerator+0x7f4>)
 800439e:	edd3 7a00 	vldr	s15, [r3]
 80043a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043a6:	4b7a      	ldr	r3, [pc, #488]	; (8004590 <TrajectoryGenerator+0x800>)
 80043a8:	edd3 7a00 	vldr	s15, [r3]
 80043ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043b0:	4b78      	ldr	r3, [pc, #480]	; (8004594 <TrajectoryGenerator+0x804>)
 80043b2:	edd3 7a00 	vldr	s15, [r3]
 80043b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ba:	4b77      	ldr	r3, [pc, #476]	; (8004598 <TrajectoryGenerator+0x808>)
 80043bc:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80043c0:	4b71      	ldr	r3, [pc, #452]	; (8004588 <TrajectoryGenerator+0x7f8>)
 80043c2:	ed93 7a00 	vldr	s14, [r3]
 80043c6:	4b6f      	ldr	r3, [pc, #444]	; (8004584 <TrajectoryGenerator+0x7f4>)
 80043c8:	edd3 7a00 	vldr	s15, [r3]
 80043cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80043d0:	4b70      	ldr	r3, [pc, #448]	; (8004594 <TrajectoryGenerator+0x804>)
 80043d2:	edd3 7a00 	vldr	s15, [r3]
 80043d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043da:	4b70      	ldr	r3, [pc, #448]	; (800459c <TrajectoryGenerator+0x80c>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043e4:	ee17 0a90 	vmov	r0, s15
 80043e8:	f7fc f8b6 	bl	8000558 <__aeabi_f2d>
 80043ec:	4604      	mov	r4, r0
 80043ee:	460d      	mov	r5, r1
 80043f0:	4b67      	ldr	r3, [pc, #412]	; (8004590 <TrajectoryGenerator+0x800>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4618      	mov	r0, r3
 80043f6:	f7fc f8af 	bl	8000558 <__aeabi_f2d>
 80043fa:	f04f 0200 	mov.w	r2, #0
 80043fe:	4b68      	ldr	r3, [pc, #416]	; (80045a0 <TrajectoryGenerator+0x810>)
 8004400:	f7fc f902 	bl	8000608 <__aeabi_dmul>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4690      	mov	r8, r2
 800440a:	4699      	mov	r9, r3
 800440c:	4b5e      	ldr	r3, [pc, #376]	; (8004588 <TrajectoryGenerator+0x7f8>)
 800440e:	ed93 7a00 	vldr	s14, [r3]
 8004412:	4b5c      	ldr	r3, [pc, #368]	; (8004584 <TrajectoryGenerator+0x7f4>)
 8004414:	edd3 7a00 	vldr	s15, [r3]
 8004418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800441c:	ee17 0a90 	vmov	r0, s15
 8004420:	f7fc f89a 	bl	8000558 <__aeabi_f2d>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4640      	mov	r0, r8
 800442a:	4649      	mov	r1, r9
 800442c:	f7fc f8ec 	bl	8000608 <__aeabi_dmul>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4690      	mov	r8, r2
 8004436:	4699      	mov	r9, r3
 8004438:	4b53      	ldr	r3, [pc, #332]	; (8004588 <TrajectoryGenerator+0x7f8>)
 800443a:	ed93 7a00 	vldr	s14, [r3]
 800443e:	4b51      	ldr	r3, [pc, #324]	; (8004584 <TrajectoryGenerator+0x7f4>)
 8004440:	edd3 7a00 	vldr	s15, [r3]
 8004444:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004448:	ee17 0a90 	vmov	r0, s15
 800444c:	f7fc f884 	bl	8000558 <__aeabi_f2d>
 8004450:	4602      	mov	r2, r0
 8004452:	460b      	mov	r3, r1
 8004454:	4640      	mov	r0, r8
 8004456:	4649      	mov	r1, r9
 8004458:	f7fc f8d6 	bl	8000608 <__aeabi_dmul>
 800445c:	4602      	mov	r2, r0
 800445e:	460b      	mov	r3, r1
 8004460:	4620      	mov	r0, r4
 8004462:	4629      	mov	r1, r5
 8004464:	f7fb ff1a 	bl	800029c <__adddf3>
 8004468:	4602      	mov	r2, r0
 800446a:	460b      	mov	r3, r1
 800446c:	4610      	mov	r0, r2
 800446e:	4619      	mov	r1, r3
 8004470:	f7fc fbc2 	bl	8000bf8 <__aeabi_d2f>
 8004474:	4603      	mov	r3, r0
 8004476:	4a4b      	ldr	r2, [pc, #300]	; (80045a4 <TrajectoryGenerator+0x814>)
 8004478:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 800447a:	4b4a      	ldr	r3, [pc, #296]	; (80045a4 <TrajectoryGenerator+0x814>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a4a      	ldr	r2, [pc, #296]	; (80045a8 <TrajectoryGenerator+0x818>)
 8004480:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 8004482:	4b45      	ldr	r3, [pc, #276]	; (8004598 <TrajectoryGenerator+0x808>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4a49      	ldr	r2, [pc, #292]	; (80045ac <TrajectoryGenerator+0x81c>)
 8004488:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 800448a:	4b3f      	ldr	r3, [pc, #252]	; (8004588 <TrajectoryGenerator+0x7f8>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc f862 	bl	8000558 <__aeabi_f2d>
 8004494:	a338      	add	r3, pc, #224	; (adr r3, 8004578 <TrajectoryGenerator+0x7e8>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	f7fb feff 	bl	800029c <__adddf3>
 800449e:	4602      	mov	r2, r0
 80044a0:	460b      	mov	r3, r1
 80044a2:	4610      	mov	r0, r2
 80044a4:	4619      	mov	r1, r3
 80044a6:	f7fc fba7 	bl	8000bf8 <__aeabi_d2f>
 80044aa:	4603      	mov	r3, r0
 80044ac:	4a36      	ldr	r2, [pc, #216]	; (8004588 <TrajectoryGenerator+0x7f8>)
 80044ae:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 80044b0:	e18f      	b.n	80047d2 <TrajectoryGenerator+0xa42>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 80044b2:	4b33      	ldr	r3, [pc, #204]	; (8004580 <TrajectoryGenerator+0x7f0>)
 80044b4:	ed93 7a00 	vldr	s14, [r3]
 80044b8:	4b32      	ldr	r3, [pc, #200]	; (8004584 <TrajectoryGenerator+0x7f4>)
 80044ba:	edd3 7a00 	vldr	s15, [r3]
 80044be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044c2:	4b31      	ldr	r3, [pc, #196]	; (8004588 <TrajectoryGenerator+0x7f8>)
 80044c4:	edd3 7a00 	vldr	s15, [r3]
 80044c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044d0:	d576      	bpl.n	80045c0 <TrajectoryGenerator+0x830>
 80044d2:	4b2c      	ldr	r3, [pc, #176]	; (8004584 <TrajectoryGenerator+0x7f4>)
 80044d4:	ed93 7a00 	vldr	s14, [r3]
 80044d8:	4b29      	ldr	r3, [pc, #164]	; (8004580 <TrajectoryGenerator+0x7f0>)
 80044da:	edd3 7a00 	vldr	s15, [r3]
 80044de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044e2:	4b33      	ldr	r3, [pc, #204]	; (80045b0 <TrajectoryGenerator+0x820>)
 80044e4:	edd3 7a00 	vldr	s15, [r3]
 80044e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044ec:	4b26      	ldr	r3, [pc, #152]	; (8004588 <TrajectoryGenerator+0x7f8>)
 80044ee:	edd3 7a00 	vldr	s15, [r3]
 80044f2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044fa:	db61      	blt.n	80045c0 <TrajectoryGenerator+0x830>
			 setacc = 0;
 80044fc:	4b24      	ldr	r3, [pc, #144]	; (8004590 <TrajectoryGenerator+0x800>)
 80044fe:	f04f 0200 	mov.w	r2, #0
 8004502:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 8004504:	4b2b      	ldr	r3, [pc, #172]	; (80045b4 <TrajectoryGenerator+0x824>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a23      	ldr	r2, [pc, #140]	; (8004598 <TrajectoryGenerator+0x808>)
 800450a:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 800450c:	4b1e      	ldr	r3, [pc, #120]	; (8004588 <TrajectoryGenerator+0x7f8>)
 800450e:	ed93 7a00 	vldr	s14, [r3]
 8004512:	4b1c      	ldr	r3, [pc, #112]	; (8004584 <TrajectoryGenerator+0x7f4>)
 8004514:	edd3 7a00 	vldr	s15, [r3]
 8004518:	ee37 7a67 	vsub.f32	s14, s14, s15
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <TrajectoryGenerator+0x7f0>)
 800451e:	edd3 7a00 	vldr	s15, [r3]
 8004522:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004526:	4b23      	ldr	r3, [pc, #140]	; (80045b4 <TrajectoryGenerator+0x824>)
 8004528:	edd3 7a00 	vldr	s15, [r3]
 800452c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004530:	4b1d      	ldr	r3, [pc, #116]	; (80045a8 <TrajectoryGenerator+0x818>)
 8004532:	edd3 7a00 	vldr	s15, [r3]
 8004536:	ee77 7a27 	vadd.f32	s15, s14, s15
 800453a:	4b1a      	ldr	r3, [pc, #104]	; (80045a4 <TrajectoryGenerator+0x814>)
 800453c:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 8004540:	4b18      	ldr	r3, [pc, #96]	; (80045a4 <TrajectoryGenerator+0x814>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a1c      	ldr	r2, [pc, #112]	; (80045b8 <TrajectoryGenerator+0x828>)
 8004546:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 8004548:	4b13      	ldr	r3, [pc, #76]	; (8004598 <TrajectoryGenerator+0x808>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a1b      	ldr	r2, [pc, #108]	; (80045bc <TrajectoryGenerator+0x82c>)
 800454e:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004550:	4b0d      	ldr	r3, [pc, #52]	; (8004588 <TrajectoryGenerator+0x7f8>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4618      	mov	r0, r3
 8004556:	f7fb ffff 	bl	8000558 <__aeabi_f2d>
 800455a:	a307      	add	r3, pc, #28	; (adr r3, 8004578 <TrajectoryGenerator+0x7e8>)
 800455c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004560:	f7fb fe9c 	bl	800029c <__adddf3>
 8004564:	4602      	mov	r2, r0
 8004566:	460b      	mov	r3, r1
 8004568:	4610      	mov	r0, r2
 800456a:	4619      	mov	r1, r3
 800456c:	f7fc fb44 	bl	8000bf8 <__aeabi_d2f>
 8004570:	4603      	mov	r3, r0
 8004572:	4a05      	ldr	r2, [pc, #20]	; (8004588 <TrajectoryGenerator+0x7f8>)
 8004574:	6013      	str	r3, [r2, #0]
 8004576:	e12a      	b.n	80047ce <TrajectoryGenerator+0xa3e>
 8004578:	d2f1a9fc 	.word	0xd2f1a9fc
 800457c:	3f50624d 	.word	0x3f50624d
 8004580:	20000998 	.word	0x20000998
 8004584:	20000980 	.word	0x20000980
 8004588:	20000970 	.word	0x20000970
 800458c:	20000214 	.word	0x20000214
 8004590:	200009e0 	.word	0x200009e0
 8004594:	2000097c 	.word	0x2000097c
 8004598:	200009dc 	.word	0x200009dc
 800459c:	20000978 	.word	0x20000978
 80045a0:	3fe00000 	.word	0x3fe00000
 80045a4:	200009bc 	.word	0x200009bc
 80045a8:	20000990 	.word	0x20000990
 80045ac:	20000988 	.word	0x20000988
 80045b0:	200009a4 	.word	0x200009a4
 80045b4:	20000210 	.word	0x20000210
 80045b8:	20000994 	.word	0x20000994
 80045bc:	2000098c 	.word	0x2000098c
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 80045c0:	4b87      	ldr	r3, [pc, #540]	; (80047e0 <TrajectoryGenerator+0xa50>)
 80045c2:	ed93 7a00 	vldr	s14, [r3]
 80045c6:	4b87      	ldr	r3, [pc, #540]	; (80047e4 <TrajectoryGenerator+0xa54>)
 80045c8:	edd3 7a00 	vldr	s15, [r3]
 80045cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d0:	4b85      	ldr	r3, [pc, #532]	; (80047e8 <TrajectoryGenerator+0xa58>)
 80045d2:	edd3 7a00 	vldr	s15, [r3]
 80045d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045da:	4b84      	ldr	r3, [pc, #528]	; (80047ec <TrajectoryGenerator+0xa5c>)
 80045dc:	edd3 7a00 	vldr	s15, [r3]
 80045e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e8:	f140 80d1 	bpl.w	800478e <TrajectoryGenerator+0x9fe>
 80045ec:	4b7c      	ldr	r3, [pc, #496]	; (80047e0 <TrajectoryGenerator+0xa50>)
 80045ee:	ed93 7a00 	vldr	s14, [r3]
 80045f2:	4b7c      	ldr	r3, [pc, #496]	; (80047e4 <TrajectoryGenerator+0xa54>)
 80045f4:	edd3 7a00 	vldr	s15, [r3]
 80045f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045fc:	4b7c      	ldr	r3, [pc, #496]	; (80047f0 <TrajectoryGenerator+0xa60>)
 80045fe:	edd3 7a00 	vldr	s15, [r3]
 8004602:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004606:	4b78      	ldr	r3, [pc, #480]	; (80047e8 <TrajectoryGenerator+0xa58>)
 8004608:	edd3 7a00 	vldr	s15, [r3]
 800460c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <TrajectoryGenerator+0xa5c>)
 8004612:	edd3 7a00 	vldr	s15, [r3]
 8004616:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800461a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800461e:	f2c0 80b6 	blt.w	800478e <TrajectoryGenerator+0x9fe>
			 setacc = -qdd_max;
 8004622:	4b74      	ldr	r3, [pc, #464]	; (80047f4 <TrajectoryGenerator+0xa64>)
 8004624:	edd3 7a00 	vldr	s15, [r3]
 8004628:	eef1 7a67 	vneg.f32	s15, s15
 800462c:	4b72      	ldr	r3, [pc, #456]	; (80047f8 <TrajectoryGenerator+0xa68>)
 800462e:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8004632:	4b6e      	ldr	r3, [pc, #440]	; (80047ec <TrajectoryGenerator+0xa5c>)
 8004634:	ed93 7a00 	vldr	s14, [r3]
 8004638:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <TrajectoryGenerator+0xa58>)
 800463a:	edd3 7a00 	vldr	s15, [r3]
 800463e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004642:	4b67      	ldr	r3, [pc, #412]	; (80047e0 <TrajectoryGenerator+0xa50>)
 8004644:	edd3 7a00 	vldr	s15, [r3]
 8004648:	ee37 7a67 	vsub.f32	s14, s14, s15
 800464c:	4b65      	ldr	r3, [pc, #404]	; (80047e4 <TrajectoryGenerator+0xa54>)
 800464e:	edd3 7a00 	vldr	s15, [r3]
 8004652:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004656:	4b68      	ldr	r3, [pc, #416]	; (80047f8 <TrajectoryGenerator+0xa68>)
 8004658:	edd3 7a00 	vldr	s15, [r3]
 800465c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004660:	4b66      	ldr	r3, [pc, #408]	; (80047fc <TrajectoryGenerator+0xa6c>)
 8004662:	edd3 7a00 	vldr	s15, [r3]
 8004666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800466a:	4b65      	ldr	r3, [pc, #404]	; (8004800 <TrajectoryGenerator+0xa70>)
 800466c:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8004670:	4b5e      	ldr	r3, [pc, #376]	; (80047ec <TrajectoryGenerator+0xa5c>)
 8004672:	ed93 7a00 	vldr	s14, [r3]
 8004676:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <TrajectoryGenerator+0xa58>)
 8004678:	edd3 7a00 	vldr	s15, [r3]
 800467c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004680:	4b57      	ldr	r3, [pc, #348]	; (80047e0 <TrajectoryGenerator+0xa50>)
 8004682:	edd3 7a00 	vldr	s15, [r3]
 8004686:	ee37 7a67 	vsub.f32	s14, s14, s15
 800468a:	4b56      	ldr	r3, [pc, #344]	; (80047e4 <TrajectoryGenerator+0xa54>)
 800468c:	edd3 7a00 	vldr	s15, [r3]
 8004690:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004694:	4b59      	ldr	r3, [pc, #356]	; (80047fc <TrajectoryGenerator+0xa6c>)
 8004696:	edd3 7a00 	vldr	s15, [r3]
 800469a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800469e:	4b59      	ldr	r3, [pc, #356]	; (8004804 <TrajectoryGenerator+0xa74>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80046a8:	ee17 0a90 	vmov	r0, s15
 80046ac:	f7fb ff54 	bl	8000558 <__aeabi_f2d>
 80046b0:	4604      	mov	r4, r0
 80046b2:	460d      	mov	r5, r1
 80046b4:	4b50      	ldr	r3, [pc, #320]	; (80047f8 <TrajectoryGenerator+0xa68>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f7fb ff4d 	bl	8000558 <__aeabi_f2d>
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	4b51      	ldr	r3, [pc, #324]	; (8004808 <TrajectoryGenerator+0xa78>)
 80046c4:	f7fb ffa0 	bl	8000608 <__aeabi_dmul>
 80046c8:	4602      	mov	r2, r0
 80046ca:	460b      	mov	r3, r1
 80046cc:	4690      	mov	r8, r2
 80046ce:	4699      	mov	r9, r3
 80046d0:	4b46      	ldr	r3, [pc, #280]	; (80047ec <TrajectoryGenerator+0xa5c>)
 80046d2:	ed93 7a00 	vldr	s14, [r3]
 80046d6:	4b44      	ldr	r3, [pc, #272]	; (80047e8 <TrajectoryGenerator+0xa58>)
 80046d8:	edd3 7a00 	vldr	s15, [r3]
 80046dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046e0:	4b3f      	ldr	r3, [pc, #252]	; (80047e0 <TrajectoryGenerator+0xa50>)
 80046e2:	edd3 7a00 	vldr	s15, [r3]
 80046e6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046ea:	4b3e      	ldr	r3, [pc, #248]	; (80047e4 <TrajectoryGenerator+0xa54>)
 80046ec:	edd3 7a00 	vldr	s15, [r3]
 80046f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f4:	ee17 0a90 	vmov	r0, s15
 80046f8:	f7fb ff2e 	bl	8000558 <__aeabi_f2d>
 80046fc:	4602      	mov	r2, r0
 80046fe:	460b      	mov	r3, r1
 8004700:	4640      	mov	r0, r8
 8004702:	4649      	mov	r1, r9
 8004704:	f7fb ff80 	bl	8000608 <__aeabi_dmul>
 8004708:	4602      	mov	r2, r0
 800470a:	460b      	mov	r3, r1
 800470c:	4690      	mov	r8, r2
 800470e:	4699      	mov	r9, r3
 8004710:	4b36      	ldr	r3, [pc, #216]	; (80047ec <TrajectoryGenerator+0xa5c>)
 8004712:	ed93 7a00 	vldr	s14, [r3]
 8004716:	4b34      	ldr	r3, [pc, #208]	; (80047e8 <TrajectoryGenerator+0xa58>)
 8004718:	edd3 7a00 	vldr	s15, [r3]
 800471c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004720:	4b2f      	ldr	r3, [pc, #188]	; (80047e0 <TrajectoryGenerator+0xa50>)
 8004722:	edd3 7a00 	vldr	s15, [r3]
 8004726:	ee37 7a67 	vsub.f32	s14, s14, s15
 800472a:	4b2e      	ldr	r3, [pc, #184]	; (80047e4 <TrajectoryGenerator+0xa54>)
 800472c:	edd3 7a00 	vldr	s15, [r3]
 8004730:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004734:	ee17 0a90 	vmov	r0, s15
 8004738:	f7fb ff0e 	bl	8000558 <__aeabi_f2d>
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4640      	mov	r0, r8
 8004742:	4649      	mov	r1, r9
 8004744:	f7fb ff60 	bl	8000608 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	4620      	mov	r0, r4
 800474e:	4629      	mov	r1, r5
 8004750:	f7fb fda4 	bl	800029c <__adddf3>
 8004754:	4602      	mov	r2, r0
 8004756:	460b      	mov	r3, r1
 8004758:	4610      	mov	r0, r2
 800475a:	4619      	mov	r1, r3
 800475c:	f7fc fa4c 	bl	8000bf8 <__aeabi_d2f>
 8004760:	4603      	mov	r3, r0
 8004762:	4a2a      	ldr	r2, [pc, #168]	; (800480c <TrajectoryGenerator+0xa7c>)
 8004764:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004766:	4b21      	ldr	r3, [pc, #132]	; (80047ec <TrajectoryGenerator+0xa5c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4618      	mov	r0, r3
 800476c:	f7fb fef4 	bl	8000558 <__aeabi_f2d>
 8004770:	a319      	add	r3, pc, #100	; (adr r3, 80047d8 <TrajectoryGenerator+0xa48>)
 8004772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004776:	f7fb fd91 	bl	800029c <__adddf3>
 800477a:	4602      	mov	r2, r0
 800477c:	460b      	mov	r3, r1
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	f7fc fa39 	bl	8000bf8 <__aeabi_d2f>
 8004786:	4603      	mov	r3, r0
 8004788:	4a18      	ldr	r2, [pc, #96]	; (80047ec <TrajectoryGenerator+0xa5c>)
 800478a:	6013      	str	r3, [r2, #0]
 800478c:	e01f      	b.n	80047ce <TrajectoryGenerator+0xa3e>
		 else if(time > tacc+tconst+tdec+initime){
 800478e:	4b14      	ldr	r3, [pc, #80]	; (80047e0 <TrajectoryGenerator+0xa50>)
 8004790:	ed93 7a00 	vldr	s14, [r3]
 8004794:	4b13      	ldr	r3, [pc, #76]	; (80047e4 <TrajectoryGenerator+0xa54>)
 8004796:	edd3 7a00 	vldr	s15, [r3]
 800479a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800479e:	4b14      	ldr	r3, [pc, #80]	; (80047f0 <TrajectoryGenerator+0xa60>)
 80047a0:	edd3 7a00 	vldr	s15, [r3]
 80047a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <TrajectoryGenerator+0xa58>)
 80047aa:	edd3 7a00 	vldr	s15, [r3]
 80047ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <TrajectoryGenerator+0xa5c>)
 80047b4:	edd3 7a00 	vldr	s15, [r3]
 80047b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80047bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047c0:	d400      	bmi.n	80047c4 <TrajectoryGenerator+0xa34>
		 break;
 80047c2:	e006      	b.n	80047d2 <TrajectoryGenerator+0xa42>
			 setposition = qf;
 80047c4:	4b12      	ldr	r3, [pc, #72]	; (8004810 <TrajectoryGenerator+0xa80>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	4a10      	ldr	r2, [pc, #64]	; (800480c <TrajectoryGenerator+0xa7c>)
 80047ca:	6013      	str	r3, [r2, #0]
		 break;
 80047cc:	e001      	b.n	80047d2 <TrajectoryGenerator+0xa42>
 80047ce:	e000      	b.n	80047d2 <TrajectoryGenerator+0xa42>
	case 3: // wait state
//		setposition = position;
		break;
 80047d0:	bf00      	nop
	}

}
 80047d2:	bf00      	nop
 80047d4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047d8:	d2f1a9fc 	.word	0xd2f1a9fc
 80047dc:	3f50624d 	.word	0x3f50624d
 80047e0:	20000998 	.word	0x20000998
 80047e4:	200009a4 	.word	0x200009a4
 80047e8:	20000980 	.word	0x20000980
 80047ec:	20000970 	.word	0x20000970
 80047f0:	200009a8 	.word	0x200009a8
 80047f4:	20000214 	.word	0x20000214
 80047f8:	200009e0 	.word	0x200009e0
 80047fc:	2000098c 	.word	0x2000098c
 8004800:	200009dc 	.word	0x200009dc
 8004804:	20000994 	.word	0x20000994
 8004808:	3fe00000 	.word	0x3fe00000
 800480c:	200009bc 	.word	0x200009bc
 8004810:	20000974 	.word	0x20000974

08004814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004814:	b480      	push	{r7}
 8004816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004818:	b672      	cpsid	i
}
 800481a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800481c:	e7fe      	b.n	800481c <Error_Handler+0x8>
	...

08004820 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004826:	2300      	movs	r3, #0
 8004828:	607b      	str	r3, [r7, #4]
 800482a:	4b10      	ldr	r3, [pc, #64]	; (800486c <HAL_MspInit+0x4c>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4a0f      	ldr	r2, [pc, #60]	; (800486c <HAL_MspInit+0x4c>)
 8004830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004834:	6453      	str	r3, [r2, #68]	; 0x44
 8004836:	4b0d      	ldr	r3, [pc, #52]	; (800486c <HAL_MspInit+0x4c>)
 8004838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004842:	2300      	movs	r3, #0
 8004844:	603b      	str	r3, [r7, #0]
 8004846:	4b09      	ldr	r3, [pc, #36]	; (800486c <HAL_MspInit+0x4c>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800484a:	4a08      	ldr	r2, [pc, #32]	; (800486c <HAL_MspInit+0x4c>)
 800484c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004850:	6413      	str	r3, [r2, #64]	; 0x40
 8004852:	4b06      	ldr	r3, [pc, #24]	; (800486c <HAL_MspInit+0x4c>)
 8004854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800485e:	2007      	movs	r0, #7
 8004860:	f001 f9ae 	bl	8005bc0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004864:	bf00      	nop
 8004866:	3708      	adds	r7, #8
 8004868:	46bd      	mov	sp, r7
 800486a:	bd80      	pop	{r7, pc}
 800486c:	40023800 	.word	0x40023800

08004870 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	; 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004878:	f107 0314 	add.w	r3, r7, #20
 800487c:	2200      	movs	r2, #0
 800487e:	601a      	str	r2, [r3, #0]
 8004880:	605a      	str	r2, [r3, #4]
 8004882:	609a      	str	r2, [r3, #8]
 8004884:	60da      	str	r2, [r3, #12]
 8004886:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4a2f      	ldr	r2, [pc, #188]	; (800494c <HAL_ADC_MspInit+0xdc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d157      	bne.n	8004942 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004892:	2300      	movs	r3, #0
 8004894:	613b      	str	r3, [r7, #16]
 8004896:	4b2e      	ldr	r3, [pc, #184]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 8004898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800489a:	4a2d      	ldr	r2, [pc, #180]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 800489c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048a0:	6453      	str	r3, [r2, #68]	; 0x44
 80048a2:	4b2b      	ldr	r3, [pc, #172]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 80048a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048aa:	613b      	str	r3, [r7, #16]
 80048ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048ae:	2300      	movs	r3, #0
 80048b0:	60fb      	str	r3, [r7, #12]
 80048b2:	4b27      	ldr	r3, [pc, #156]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b6:	4a26      	ldr	r2, [pc, #152]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 80048b8:	f043 0301 	orr.w	r3, r3, #1
 80048bc:	6313      	str	r3, [r2, #48]	; 0x30
 80048be:	4b24      	ldr	r3, [pc, #144]	; (8004950 <HAL_ADC_MspInit+0xe0>)
 80048c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	60fb      	str	r3, [r7, #12]
 80048c8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80048ca:	2303      	movs	r3, #3
 80048cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80048ce:	2303      	movs	r3, #3
 80048d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048d2:	2300      	movs	r3, #0
 80048d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80048d6:	f107 0314 	add.w	r3, r7, #20
 80048da:	4619      	mov	r1, r3
 80048dc:	481d      	ldr	r0, [pc, #116]	; (8004954 <HAL_ADC_MspInit+0xe4>)
 80048de:	f001 fdcd 	bl	800647c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80048e2:	4b1d      	ldr	r3, [pc, #116]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 80048e4:	4a1d      	ldr	r2, [pc, #116]	; (800495c <HAL_ADC_MspInit+0xec>)
 80048e6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80048e8:	4b1b      	ldr	r3, [pc, #108]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048ee:	4b1a      	ldr	r3, [pc, #104]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048f4:	4b18      	ldr	r3, [pc, #96]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 80048f6:	2200      	movs	r2, #0
 80048f8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048fa:	4b17      	ldr	r3, [pc, #92]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 80048fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004900:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004902:	4b15      	ldr	r3, [pc, #84]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 8004904:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004908:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800490a:	4b13      	ldr	r3, [pc, #76]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 800490c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004910:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004912:	4b11      	ldr	r3, [pc, #68]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 8004914:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004918:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800491a:	4b0f      	ldr	r3, [pc, #60]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 800491c:	2200      	movs	r2, #0
 800491e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004920:	4b0d      	ldr	r3, [pc, #52]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 8004922:	2200      	movs	r2, #0
 8004924:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004926:	480c      	ldr	r0, [pc, #48]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 8004928:	f001 f98c 	bl	8005c44 <HAL_DMA_Init>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d001      	beq.n	8004936 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004932:	f7ff ff6f 	bl	8004814 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a07      	ldr	r2, [pc, #28]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 800493a:	639a      	str	r2, [r3, #56]	; 0x38
 800493c:	4a06      	ldr	r2, [pc, #24]	; (8004958 <HAL_ADC_MspInit+0xe8>)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004942:	bf00      	nop
 8004944:	3728      	adds	r7, #40	; 0x28
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40012000 	.word	0x40012000
 8004950:	40023800 	.word	0x40023800
 8004954:	40020000 	.word	0x40020000
 8004958:	20000498 	.word	0x20000498
 800495c:	40026410 	.word	0x40026410

08004960 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004960:	b580      	push	{r7, lr}
 8004962:	b08a      	sub	sp, #40	; 0x28
 8004964:	af00      	add	r7, sp, #0
 8004966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004968:	f107 0314 	add.w	r3, r7, #20
 800496c:	2200      	movs	r2, #0
 800496e:	601a      	str	r2, [r3, #0]
 8004970:	605a      	str	r2, [r3, #4]
 8004972:	609a      	str	r2, [r3, #8]
 8004974:	60da      	str	r2, [r3, #12]
 8004976:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a21      	ldr	r2, [pc, #132]	; (8004a04 <HAL_I2C_MspInit+0xa4>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d13c      	bne.n	80049fc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004982:	2300      	movs	r3, #0
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	4b20      	ldr	r3, [pc, #128]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 8004988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800498a:	4a1f      	ldr	r2, [pc, #124]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 800498c:	f043 0302 	orr.w	r3, r3, #2
 8004990:	6313      	str	r3, [r2, #48]	; 0x30
 8004992:	4b1d      	ldr	r3, [pc, #116]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 8004994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	613b      	str	r3, [r7, #16]
 800499c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800499e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80049a4:	2312      	movs	r3, #18
 80049a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ac:	2303      	movs	r3, #3
 80049ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80049b0:	2304      	movs	r3, #4
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80049b4:	f107 0314 	add.w	r3, r7, #20
 80049b8:	4619      	mov	r1, r3
 80049ba:	4814      	ldr	r0, [pc, #80]	; (8004a0c <HAL_I2C_MspInit+0xac>)
 80049bc:	f001 fd5e 	bl	800647c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80049c0:	2300      	movs	r3, #0
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	4b10      	ldr	r3, [pc, #64]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	4a0f      	ldr	r2, [pc, #60]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 80049ca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80049ce:	6413      	str	r3, [r2, #64]	; 0x40
 80049d0:	4b0d      	ldr	r3, [pc, #52]	; (8004a08 <HAL_I2C_MspInit+0xa8>)
 80049d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80049dc:	2200      	movs	r2, #0
 80049de:	2100      	movs	r1, #0
 80049e0:	201f      	movs	r0, #31
 80049e2:	f001 f8f8 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80049e6:	201f      	movs	r0, #31
 80049e8:	f001 f911 	bl	8005c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80049ec:	2200      	movs	r2, #0
 80049ee:	2100      	movs	r1, #0
 80049f0:	2020      	movs	r0, #32
 80049f2:	f001 f8f0 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80049f6:	2020      	movs	r0, #32
 80049f8:	f001 f909 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049fc:	bf00      	nop
 80049fe:	3728      	adds	r7, #40	; 0x28
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	40005400 	.word	0x40005400
 8004a08:	40023800 	.word	0x40023800
 8004a0c:	40020400 	.word	0x40020400

08004a10 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b084      	sub	sp, #16
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	4a12      	ldr	r2, [pc, #72]	; (8004a68 <HAL_TIM_PWM_MspInit+0x58>)
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d11d      	bne.n	8004a5e <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004a22:	2300      	movs	r3, #0
 8004a24:	60fb      	str	r3, [r7, #12]
 8004a26:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <HAL_TIM_PWM_MspInit+0x5c>)
 8004a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a2a:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <HAL_TIM_PWM_MspInit+0x5c>)
 8004a2c:	f043 0301 	orr.w	r3, r3, #1
 8004a30:	6453      	str	r3, [r2, #68]	; 0x44
 8004a32:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <HAL_TIM_PWM_MspInit+0x5c>)
 8004a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a36:	f003 0301 	and.w	r3, r3, #1
 8004a3a:	60fb      	str	r3, [r7, #12]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004a3e:	2205      	movs	r2, #5
 8004a40:	2100      	movs	r1, #0
 8004a42:	2018      	movs	r0, #24
 8004a44:	f001 f8c7 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a48:	2018      	movs	r0, #24
 8004a4a:	f001 f8e0 	bl	8005c0e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004a4e:	2200      	movs	r2, #0
 8004a50:	2100      	movs	r1, #0
 8004a52:	201a      	movs	r0, #26
 8004a54:	f001 f8bf 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a58:	201a      	movs	r0, #26
 8004a5a:	f001 f8d8 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a5e:	bf00      	nop
 8004a60:	3710      	adds	r7, #16
 8004a62:	46bd      	mov	sp, r7
 8004a64:	bd80      	pop	{r7, pc}
 8004a66:	bf00      	nop
 8004a68:	40010000 	.word	0x40010000
 8004a6c:	40023800 	.word	0x40023800

08004a70 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b08a      	sub	sp, #40	; 0x28
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a78:	f107 0314 	add.w	r3, r7, #20
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	601a      	str	r2, [r3, #0]
 8004a80:	605a      	str	r2, [r3, #4]
 8004a82:	609a      	str	r2, [r3, #8]
 8004a84:	60da      	str	r2, [r3, #12]
 8004a86:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a19      	ldr	r2, [pc, #100]	; (8004af4 <HAL_TIM_Encoder_MspInit+0x84>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d12b      	bne.n	8004aea <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a92:	2300      	movs	r3, #0
 8004a94:	613b      	str	r3, [r7, #16]
 8004a96:	4b18      	ldr	r3, [pc, #96]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9a:	4a17      	ldr	r2, [pc, #92]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a9c:	f043 0302 	orr.w	r3, r3, #2
 8004aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa6:	f003 0302 	and.w	r3, r3, #2
 8004aaa:	613b      	str	r3, [r7, #16]
 8004aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	4b11      	ldr	r3, [pc, #68]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	4a10      	ldr	r2, [pc, #64]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ab8:	f043 0301 	orr.w	r3, r3, #1
 8004abc:	6313      	str	r3, [r2, #48]	; 0x30
 8004abe:	4b0e      	ldr	r3, [pc, #56]	; (8004af8 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	60fb      	str	r3, [r7, #12]
 8004ac8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004aca:	23c0      	movs	r3, #192	; 0xc0
 8004acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ace:	2302      	movs	r3, #2
 8004ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ada:	2302      	movs	r3, #2
 8004adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ade:	f107 0314 	add.w	r3, r7, #20
 8004ae2:	4619      	mov	r1, r3
 8004ae4:	4805      	ldr	r0, [pc, #20]	; (8004afc <HAL_TIM_Encoder_MspInit+0x8c>)
 8004ae6:	f001 fcc9 	bl	800647c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004aea:	bf00      	nop
 8004aec:	3728      	adds	r7, #40	; 0x28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	bf00      	nop
 8004af4:	40000400 	.word	0x40000400
 8004af8:	40023800 	.word	0x40023800
 8004afc:	40020000 	.word	0x40020000

08004b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b084      	sub	sp, #16
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a1c      	ldr	r2, [pc, #112]	; (8004b80 <HAL_TIM_Base_MspInit+0x80>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d116      	bne.n	8004b40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	4b1b      	ldr	r3, [pc, #108]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	4a1a      	ldr	r2, [pc, #104]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b20:	6453      	str	r3, [r2, #68]	; 0x44
 8004b22:	4b18      	ldr	r3, [pc, #96]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2a:	60fb      	str	r3, [r7, #12]
 8004b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004b2e:	2205      	movs	r2, #5
 8004b30:	2100      	movs	r1, #0
 8004b32:	2018      	movs	r0, #24
 8004b34:	f001 f84f 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004b38:	2018      	movs	r0, #24
 8004b3a:	f001 f868 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b3e:	e01a      	b.n	8004b76 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a10      	ldr	r2, [pc, #64]	; (8004b88 <HAL_TIM_Base_MspInit+0x88>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d115      	bne.n	8004b76 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	4b0d      	ldr	r3, [pc, #52]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b54:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b58:	6453      	str	r3, [r2, #68]	; 0x44
 8004b5a:	4b0a      	ldr	r3, [pc, #40]	; (8004b84 <HAL_TIM_Base_MspInit+0x84>)
 8004b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	60bb      	str	r3, [r7, #8]
 8004b64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004b66:	2200      	movs	r2, #0
 8004b68:	2100      	movs	r1, #0
 8004b6a:	201a      	movs	r0, #26
 8004b6c:	f001 f833 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004b70:	201a      	movs	r0, #26
 8004b72:	f001 f84c 	bl	8005c0e <HAL_NVIC_EnableIRQ>
}
 8004b76:	bf00      	nop
 8004b78:	3710      	adds	r7, #16
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	40014000 	.word	0x40014000
 8004b84:	40023800 	.word	0x40023800
 8004b88:	40014800 	.word	0x40014800

08004b8c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	b088      	sub	sp, #32
 8004b90:	af00      	add	r7, sp, #0
 8004b92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b94:	f107 030c 	add.w	r3, r7, #12
 8004b98:	2200      	movs	r2, #0
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	605a      	str	r2, [r3, #4]
 8004b9e:	609a      	str	r2, [r3, #8]
 8004ba0:	60da      	str	r2, [r3, #12]
 8004ba2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	4a12      	ldr	r2, [pc, #72]	; (8004bf4 <HAL_TIM_MspPostInit+0x68>)
 8004baa:	4293      	cmp	r3, r2
 8004bac:	d11e      	bne.n	8004bec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bae:	2300      	movs	r3, #0
 8004bb0:	60bb      	str	r3, [r7, #8]
 8004bb2:	4b11      	ldr	r3, [pc, #68]	; (8004bf8 <HAL_TIM_MspPostInit+0x6c>)
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4a10      	ldr	r2, [pc, #64]	; (8004bf8 <HAL_TIM_MspPostInit+0x6c>)
 8004bb8:	f043 0301 	orr.w	r3, r3, #1
 8004bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8004bbe:	4b0e      	ldr	r3, [pc, #56]	; (8004bf8 <HAL_TIM_MspPostInit+0x6c>)
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bc2:	f003 0301 	and.w	r3, r3, #1
 8004bc6:	60bb      	str	r3, [r7, #8]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004bca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004bce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004bd4:	2300      	movs	r3, #0
 8004bd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004bd8:	2300      	movs	r3, #0
 8004bda:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004bdc:	2301      	movs	r3, #1
 8004bde:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004be0:	f107 030c 	add.w	r3, r7, #12
 8004be4:	4619      	mov	r1, r3
 8004be6:	4805      	ldr	r0, [pc, #20]	; (8004bfc <HAL_TIM_MspPostInit+0x70>)
 8004be8:	f001 fc48 	bl	800647c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bec:	bf00      	nop
 8004bee:	3720      	adds	r7, #32
 8004bf0:	46bd      	mov	sp, r7
 8004bf2:	bd80      	pop	{r7, pc}
 8004bf4:	40010000 	.word	0x40010000
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	40020000 	.word	0x40020000

08004c00 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08c      	sub	sp, #48	; 0x30
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c08:	f107 031c 	add.w	r3, r7, #28
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
 8004c10:	605a      	str	r2, [r3, #4]
 8004c12:	609a      	str	r2, [r3, #8]
 8004c14:	60da      	str	r2, [r3, #12]
 8004c16:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4a60      	ldr	r2, [pc, #384]	; (8004da0 <HAL_UART_MspInit+0x1a0>)
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d153      	bne.n	8004cca <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	61bb      	str	r3, [r7, #24]
 8004c26:	4b5f      	ldr	r3, [pc, #380]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c2a:	4a5e      	ldr	r2, [pc, #376]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c2c:	f043 0310 	orr.w	r3, r3, #16
 8004c30:	6453      	str	r3, [r2, #68]	; 0x44
 8004c32:	4b5c      	ldr	r3, [pc, #368]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c36:	f003 0310 	and.w	r3, r3, #16
 8004c3a:	61bb      	str	r3, [r7, #24]
 8004c3c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	617b      	str	r3, [r7, #20]
 8004c42:	4b58      	ldr	r3, [pc, #352]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c46:	4a57      	ldr	r2, [pc, #348]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c48:	f043 0301 	orr.w	r3, r3, #1
 8004c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8004c4e:	4b55      	ldr	r3, [pc, #340]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	f003 0301 	and.w	r3, r3, #1
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	613b      	str	r3, [r7, #16]
 8004c5e:	4b51      	ldr	r3, [pc, #324]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a50      	ldr	r2, [pc, #320]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c64:	f043 0302 	orr.w	r3, r3, #2
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b4e      	ldr	r3, [pc, #312]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f003 0302 	and.w	r3, r3, #2
 8004c72:	613b      	str	r3, [r7, #16]
 8004c74:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c7c:	2302      	movs	r3, #2
 8004c7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c80:	2300      	movs	r3, #0
 8004c82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c84:	2303      	movs	r3, #3
 8004c86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c88:	2307      	movs	r3, #7
 8004c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c8c:	f107 031c 	add.w	r3, r7, #28
 8004c90:	4619      	mov	r1, r3
 8004c92:	4845      	ldr	r0, [pc, #276]	; (8004da8 <HAL_UART_MspInit+0x1a8>)
 8004c94:	f001 fbf2 	bl	800647c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c98:	2380      	movs	r3, #128	; 0x80
 8004c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c9c:	2302      	movs	r3, #2
 8004c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004ca8:	2307      	movs	r3, #7
 8004caa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004cac:	f107 031c 	add.w	r3, r7, #28
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	483e      	ldr	r0, [pc, #248]	; (8004dac <HAL_UART_MspInit+0x1ac>)
 8004cb4:	f001 fbe2 	bl	800647c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004cb8:	2200      	movs	r2, #0
 8004cba:	2100      	movs	r1, #0
 8004cbc:	2025      	movs	r0, #37	; 0x25
 8004cbe:	f000 ff8a 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004cc2:	2025      	movs	r0, #37	; 0x25
 8004cc4:	f000 ffa3 	bl	8005c0e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004cc8:	e066      	b.n	8004d98 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	4a38      	ldr	r2, [pc, #224]	; (8004db0 <HAL_UART_MspInit+0x1b0>)
 8004cd0:	4293      	cmp	r3, r2
 8004cd2:	d161      	bne.n	8004d98 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	4b32      	ldr	r3, [pc, #200]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	4a31      	ldr	r2, [pc, #196]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004cde:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8004ce4:	4b2f      	ldr	r3, [pc, #188]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	60bb      	str	r3, [r7, #8]
 8004cf4:	4b2b      	ldr	r3, [pc, #172]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf8:	4a2a      	ldr	r2, [pc, #168]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004cfa:	f043 0301 	orr.w	r3, r3, #1
 8004cfe:	6313      	str	r3, [r2, #48]	; 0x30
 8004d00:	4b28      	ldr	r3, [pc, #160]	; (8004da4 <HAL_UART_MspInit+0x1a4>)
 8004d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d04:	f003 0301 	and.w	r3, r3, #1
 8004d08:	60bb      	str	r3, [r7, #8]
 8004d0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004d0c:	230c      	movs	r3, #12
 8004d0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004d10:	2302      	movs	r3, #2
 8004d12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d14:	2300      	movs	r3, #0
 8004d16:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d18:	2303      	movs	r3, #3
 8004d1a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004d1c:	2307      	movs	r3, #7
 8004d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d20:	f107 031c 	add.w	r3, r7, #28
 8004d24:	4619      	mov	r1, r3
 8004d26:	4820      	ldr	r0, [pc, #128]	; (8004da8 <HAL_UART_MspInit+0x1a8>)
 8004d28:	f001 fba8 	bl	800647c <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004d2c:	4b21      	ldr	r3, [pc, #132]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d2e:	4a22      	ldr	r2, [pc, #136]	; (8004db8 <HAL_UART_MspInit+0x1b8>)
 8004d30:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004d32:	4b20      	ldr	r3, [pc, #128]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d34:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d38:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d3a:	4b1e      	ldr	r3, [pc, #120]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d3c:	2240      	movs	r2, #64	; 0x40
 8004d3e:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d40:	4b1c      	ldr	r3, [pc, #112]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d46:	4b1b      	ldr	r3, [pc, #108]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d4e:	4b19      	ldr	r3, [pc, #100]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d50:	2200      	movs	r2, #0
 8004d52:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d54:	4b17      	ldr	r3, [pc, #92]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d5a:	4b16      	ldr	r3, [pc, #88]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d60:	4b14      	ldr	r3, [pc, #80]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d62:	2200      	movs	r2, #0
 8004d64:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d66:	4b13      	ldr	r3, [pc, #76]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d68:	2200      	movs	r2, #0
 8004d6a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d6c:	4811      	ldr	r0, [pc, #68]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d6e:	f000 ff69 	bl	8005c44 <HAL_DMA_Init>
 8004d72:	4603      	mov	r3, r0
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d001      	beq.n	8004d7c <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004d78:	f7ff fd4c 	bl	8004814 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	4a0d      	ldr	r2, [pc, #52]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d80:	635a      	str	r2, [r3, #52]	; 0x34
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <HAL_UART_MspInit+0x1b4>)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d88:	2200      	movs	r2, #0
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	2026      	movs	r0, #38	; 0x26
 8004d8e:	f000 ff22 	bl	8005bd6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d92:	2026      	movs	r0, #38	; 0x26
 8004d94:	f000 ff3b 	bl	8005c0e <HAL_NVIC_EnableIRQ>
}
 8004d98:	bf00      	nop
 8004d9a:	3730      	adds	r7, #48	; 0x30
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	40011000 	.word	0x40011000
 8004da4:	40023800 	.word	0x40023800
 8004da8:	40020000 	.word	0x40020000
 8004dac:	40020400 	.word	0x40020400
 8004db0:	40004400 	.word	0x40004400
 8004db4:	20000904 	.word	0x20000904
 8004db8:	400260a0 	.word	0x400260a0

08004dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004dc0:	e7fe      	b.n	8004dc0 <NMI_Handler+0x4>

08004dc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004dc6:	e7fe      	b.n	8004dc6 <HardFault_Handler+0x4>

08004dc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004dc8:	b480      	push	{r7}
 8004dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004dcc:	e7fe      	b.n	8004dcc <MemManage_Handler+0x4>

08004dce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004dce:	b480      	push	{r7}
 8004dd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004dd2:	e7fe      	b.n	8004dd2 <BusFault_Handler+0x4>

08004dd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004dd8:	e7fe      	b.n	8004dd8 <UsageFault_Handler+0x4>

08004dda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004dda:	b480      	push	{r7}
 8004ddc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004dde:	bf00      	nop
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004de8:	b480      	push	{r7}
 8004dea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004dec:	bf00      	nop
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004df6:	b480      	push	{r7}
 8004df8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dfa:	bf00      	nop
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004e08:	f000 f9c4 	bl	8005194 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004e0c:	bf00      	nop
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004e14:	2004      	movs	r0, #4
 8004e16:	f001 fce7 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004e1a:	bf00      	nop
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004e1e:	b580      	push	{r7, lr}
 8004e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004e22:	2008      	movs	r0, #8
 8004e24:	f001 fce0 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004e28:	bf00      	nop
 8004e2a:	bd80      	pop	{r7, pc}

08004e2c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004e30:	4802      	ldr	r0, [pc, #8]	; (8004e3c <DMA1_Stream6_IRQHandler+0x10>)
 8004e32:	f001 f89f 	bl	8005f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004e36:	bf00      	nop
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000904 	.word	0x20000904

08004e40 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e44:	4803      	ldr	r0, [pc, #12]	; (8004e54 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004e46:	f005 f81d 	bl	8009e84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004e4a:	4803      	ldr	r0, [pc, #12]	; (8004e58 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004e4c:	f005 f81a 	bl	8009e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e50:	bf00      	nop
 8004e52:	bd80      	pop	{r7, pc}
 8004e54:	2000054c 	.word	0x2000054c
 8004e58:	200006b4 	.word	0x200006b4

08004e5c <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e60:	4803      	ldr	r0, [pc, #12]	; (8004e70 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004e62:	f005 f80f 	bl	8009e84 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004e66:	4803      	ldr	r0, [pc, #12]	; (8004e74 <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e68:	f005 f80c 	bl	8009e84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e6c:	bf00      	nop
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	2000054c 	.word	0x2000054c
 8004e74:	20000768 	.word	0x20000768

08004e78 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e7c:	4802      	ldr	r0, [pc, #8]	; (8004e88 <I2C1_EV_IRQHandler+0x10>)
 8004e7e:	f001 ffbb 	bl	8006df8 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e82:	bf00      	nop
 8004e84:	bd80      	pop	{r7, pc}
 8004e86:	bf00      	nop
 8004e88:	200004f8 	.word	0x200004f8

08004e8c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e90:	4802      	ldr	r0, [pc, #8]	; (8004e9c <I2C1_ER_IRQHandler+0x10>)
 8004e92:	f002 f922 	bl	80070da <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e96:	bf00      	nop
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	200004f8 	.word	0x200004f8

08004ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ea4:	4802      	ldr	r0, [pc, #8]	; (8004eb0 <USART1_IRQHandler+0x10>)
 8004ea6:	f006 fb3b 	bl	800b520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	2000081c 	.word	0x2000081c

08004eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004eb4:	b580      	push	{r7, lr}
 8004eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004eb8:	4802      	ldr	r0, [pc, #8]	; (8004ec4 <USART2_IRQHandler+0x10>)
 8004eba:	f006 fb31 	bl	800b520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004ebe:	bf00      	nop
 8004ec0:	bd80      	pop	{r7, pc}
 8004ec2:	bf00      	nop
 8004ec4:	20000890 	.word	0x20000890

08004ec8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004ecc:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004ed0:	f001 fc8a 	bl	80067e8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004ed4:	bf00      	nop
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004edc:	4802      	ldr	r0, [pc, #8]	; (8004ee8 <DMA2_Stream0_IRQHandler+0x10>)
 8004ede:	f001 f849 	bl	8005f74 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004ee2:	bf00      	nop
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	bf00      	nop
 8004ee8:	20000498 	.word	0x20000498

08004eec <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eec:	b480      	push	{r7}
 8004eee:	af00      	add	r7, sp, #0
  return 1;
 8004ef0:	2301      	movs	r3, #1
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <_kill>:

int _kill(int pid, int sig)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004f06:	f007 fb51 	bl	800c5ac <__errno>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2216      	movs	r2, #22
 8004f0e:	601a      	str	r2, [r3, #0]
  return -1;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_exit>:

void _exit (int status)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004f24:	f04f 31ff 	mov.w	r1, #4294967295
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7ff ffe7 	bl	8004efc <_kill>
  while (1) {}    /* Make sure we hang here */
 8004f2e:	e7fe      	b.n	8004f2e <_exit+0x12>

08004f30 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b086      	sub	sp, #24
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3c:	2300      	movs	r3, #0
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e00a      	b.n	8004f58 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f42:	f3af 8000 	nop.w
 8004f46:	4601      	mov	r1, r0
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	1c5a      	adds	r2, r3, #1
 8004f4c:	60ba      	str	r2, [r7, #8]
 8004f4e:	b2ca      	uxtb	r2, r1
 8004f50:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3301      	adds	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	dbf0      	blt.n	8004f42 <_read+0x12>
  }

  return len;
 8004f60:	687b      	ldr	r3, [r7, #4]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f6a:	b580      	push	{r7, lr}
 8004f6c:	b086      	sub	sp, #24
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	60f8      	str	r0, [r7, #12]
 8004f72:	60b9      	str	r1, [r7, #8]
 8004f74:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f76:	2300      	movs	r3, #0
 8004f78:	617b      	str	r3, [r7, #20]
 8004f7a:	e009      	b.n	8004f90 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	1c5a      	adds	r2, r3, #1
 8004f80:	60ba      	str	r2, [r7, #8]
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	3301      	adds	r3, #1
 8004f8e:	617b      	str	r3, [r7, #20]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	dbf1      	blt.n	8004f7c <_write+0x12>
  }
  return len;
 8004f98:	687b      	ldr	r3, [r7, #4]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3718      	adds	r7, #24
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}

08004fa2 <_close>:

int _close(int file)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004faa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	370c      	adds	r7, #12
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004fba:	b480      	push	{r7}
 8004fbc:	b083      	sub	sp, #12
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
 8004fc2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004fc4:	683b      	ldr	r3, [r7, #0]
 8004fc6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fca:	605a      	str	r2, [r3, #4]
  return 0;
 8004fcc:	2300      	movs	r3, #0
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	370c      	adds	r7, #12
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr

08004fda <_isatty>:

int _isatty(int file)
{
 8004fda:	b480      	push	{r7}
 8004fdc:	b083      	sub	sp, #12
 8004fde:	af00      	add	r7, sp, #0
 8004fe0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004fe2:	2301      	movs	r3, #1
}
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	370c      	adds	r7, #12
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fee:	4770      	bx	lr

08004ff0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004ff0:	b480      	push	{r7}
 8004ff2:	b085      	sub	sp, #20
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	60f8      	str	r0, [r7, #12]
 8004ff8:	60b9      	str	r1, [r7, #8]
 8004ffa:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3714      	adds	r7, #20
 8005002:	46bd      	mov	sp, r7
 8005004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005008:	4770      	bx	lr
	...

0800500c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005014:	4a14      	ldr	r2, [pc, #80]	; (8005068 <_sbrk+0x5c>)
 8005016:	4b15      	ldr	r3, [pc, #84]	; (800506c <_sbrk+0x60>)
 8005018:	1ad3      	subs	r3, r2, r3
 800501a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800501c:	697b      	ldr	r3, [r7, #20]
 800501e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005020:	4b13      	ldr	r3, [pc, #76]	; (8005070 <_sbrk+0x64>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d102      	bne.n	800502e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005028:	4b11      	ldr	r3, [pc, #68]	; (8005070 <_sbrk+0x64>)
 800502a:	4a12      	ldr	r2, [pc, #72]	; (8005074 <_sbrk+0x68>)
 800502c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800502e:	4b10      	ldr	r3, [pc, #64]	; (8005070 <_sbrk+0x64>)
 8005030:	681a      	ldr	r2, [r3, #0]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	693a      	ldr	r2, [r7, #16]
 8005038:	429a      	cmp	r2, r3
 800503a:	d207      	bcs.n	800504c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800503c:	f007 fab6 	bl	800c5ac <__errno>
 8005040:	4603      	mov	r3, r0
 8005042:	220c      	movs	r2, #12
 8005044:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005046:	f04f 33ff 	mov.w	r3, #4294967295
 800504a:	e009      	b.n	8005060 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800504c:	4b08      	ldr	r3, [pc, #32]	; (8005070 <_sbrk+0x64>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005052:	4b07      	ldr	r3, [pc, #28]	; (8005070 <_sbrk+0x64>)
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	4413      	add	r3, r2
 800505a:	4a05      	ldr	r2, [pc, #20]	; (8005070 <_sbrk+0x64>)
 800505c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800505e:	68fb      	ldr	r3, [r7, #12]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20020000 	.word	0x20020000
 800506c:	00000400 	.word	0x00000400
 8005070:	200010fc 	.word	0x200010fc
 8005074:	20001118 	.word	0x20001118

08005078 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005078:	b480      	push	{r7}
 800507a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800507c:	4b06      	ldr	r3, [pc, #24]	; (8005098 <SystemInit+0x20>)
 800507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005082:	4a05      	ldr	r2, [pc, #20]	; (8005098 <SystemInit+0x20>)
 8005084:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005088:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800508c:	bf00      	nop
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	e000ed00 	.word	0xe000ed00

0800509c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 800509c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80050d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80050a0:	480d      	ldr	r0, [pc, #52]	; (80050d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80050a2:	490e      	ldr	r1, [pc, #56]	; (80050dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80050a4:	4a0e      	ldr	r2, [pc, #56]	; (80050e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80050a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80050a8:	e002      	b.n	80050b0 <LoopCopyDataInit>

080050aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80050aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80050ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80050ae:	3304      	adds	r3, #4

080050b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80050b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80050b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80050b4:	d3f9      	bcc.n	80050aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80050b6:	4a0b      	ldr	r2, [pc, #44]	; (80050e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80050b8:	4c0b      	ldr	r4, [pc, #44]	; (80050e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80050ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80050bc:	e001      	b.n	80050c2 <LoopFillZerobss>

080050be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80050be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80050c0:	3204      	adds	r2, #4

080050c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80050c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80050c4:	d3fb      	bcc.n	80050be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80050c6:	f7ff ffd7 	bl	8005078 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80050ca:	f007 fa75 	bl	800c5b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80050ce:	f7fc faf3 	bl	80016b8 <main>
  bx  lr    
 80050d2:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80050d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050dc:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 80050e0:	08012ca0 	.word	0x08012ca0
  ldr r2, =_sbss
 80050e4:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 80050e8:	20001114 	.word	0x20001114

080050ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050ec:	e7fe      	b.n	80050ec <ADC_IRQHandler>
	...

080050f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050f4:	4b0e      	ldr	r3, [pc, #56]	; (8005130 <HAL_Init+0x40>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a0d      	ldr	r2, [pc, #52]	; (8005130 <HAL_Init+0x40>)
 80050fa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005100:	4b0b      	ldr	r3, [pc, #44]	; (8005130 <HAL_Init+0x40>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a0a      	ldr	r2, [pc, #40]	; (8005130 <HAL_Init+0x40>)
 8005106:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800510a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800510c:	4b08      	ldr	r3, [pc, #32]	; (8005130 <HAL_Init+0x40>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	4a07      	ldr	r2, [pc, #28]	; (8005130 <HAL_Init+0x40>)
 8005112:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005116:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005118:	2003      	movs	r0, #3
 800511a:	f000 fd51 	bl	8005bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800511e:	2000      	movs	r0, #0
 8005120:	f000 f808 	bl	8005134 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8005124:	f7ff fb7c 	bl	8004820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005128:	2300      	movs	r3, #0
}
 800512a:	4618      	mov	r0, r3
 800512c:	bd80      	pop	{r7, pc}
 800512e:	bf00      	nop
 8005130:	40023c00 	.word	0x40023c00

08005134 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800513c:	4b12      	ldr	r3, [pc, #72]	; (8005188 <HAL_InitTick+0x54>)
 800513e:	681a      	ldr	r2, [r3, #0]
 8005140:	4b12      	ldr	r3, [pc, #72]	; (800518c <HAL_InitTick+0x58>)
 8005142:	781b      	ldrb	r3, [r3, #0]
 8005144:	4619      	mov	r1, r3
 8005146:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800514a:	fbb3 f3f1 	udiv	r3, r3, r1
 800514e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005152:	4618      	mov	r0, r3
 8005154:	f000 fd69 	bl	8005c2a <HAL_SYSTICK_Config>
 8005158:	4603      	mov	r3, r0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d001      	beq.n	8005162 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800515e:	2301      	movs	r3, #1
 8005160:	e00e      	b.n	8005180 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	2b0f      	cmp	r3, #15
 8005166:	d80a      	bhi.n	800517e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005168:	2200      	movs	r2, #0
 800516a:	6879      	ldr	r1, [r7, #4]
 800516c:	f04f 30ff 	mov.w	r0, #4294967295
 8005170:	f000 fd31 	bl	8005bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005174:	4a06      	ldr	r2, [pc, #24]	; (8005190 <HAL_InitTick+0x5c>)
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
 800517c:	e000      	b.n	8005180 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
}
 8005180:	4618      	mov	r0, r3
 8005182:	3708      	adds	r7, #8
 8005184:	46bd      	mov	sp, r7
 8005186:	bd80      	pop	{r7, pc}
 8005188:	20000250 	.word	0x20000250
 800518c:	20000258 	.word	0x20000258
 8005190:	20000254 	.word	0x20000254

08005194 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005198:	4b06      	ldr	r3, [pc, #24]	; (80051b4 <HAL_IncTick+0x20>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	461a      	mov	r2, r3
 800519e:	4b06      	ldr	r3, [pc, #24]	; (80051b8 <HAL_IncTick+0x24>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	4413      	add	r3, r2
 80051a4:	4a04      	ldr	r2, [pc, #16]	; (80051b8 <HAL_IncTick+0x24>)
 80051a6:	6013      	str	r3, [r2, #0]
}
 80051a8:	bf00      	nop
 80051aa:	46bd      	mov	sp, r7
 80051ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b0:	4770      	bx	lr
 80051b2:	bf00      	nop
 80051b4:	20000258 	.word	0x20000258
 80051b8:	20001100 	.word	0x20001100

080051bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80051bc:	b480      	push	{r7}
 80051be:	af00      	add	r7, sp, #0
  return uwTick;
 80051c0:	4b03      	ldr	r3, [pc, #12]	; (80051d0 <HAL_GetTick+0x14>)
 80051c2:	681b      	ldr	r3, [r3, #0]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	46bd      	mov	sp, r7
 80051c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051cc:	4770      	bx	lr
 80051ce:	bf00      	nop
 80051d0:	20001100 	.word	0x20001100

080051d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051dc:	f7ff ffee 	bl	80051bc <HAL_GetTick>
 80051e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051ec:	d005      	beq.n	80051fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051ee:	4b0a      	ldr	r3, [pc, #40]	; (8005218 <HAL_Delay+0x44>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	461a      	mov	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051fa:	bf00      	nop
 80051fc:	f7ff ffde 	bl	80051bc <HAL_GetTick>
 8005200:	4602      	mov	r2, r0
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	1ad3      	subs	r3, r2, r3
 8005206:	68fa      	ldr	r2, [r7, #12]
 8005208:	429a      	cmp	r2, r3
 800520a:	d8f7      	bhi.n	80051fc <HAL_Delay+0x28>
  {
  }
}
 800520c:	bf00      	nop
 800520e:	bf00      	nop
 8005210:	3710      	adds	r7, #16
 8005212:	46bd      	mov	sp, r7
 8005214:	bd80      	pop	{r7, pc}
 8005216:	bf00      	nop
 8005218:	20000258 	.word	0x20000258

0800521c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005224:	2300      	movs	r3, #0
 8005226:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d101      	bne.n	8005232 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800522e:	2301      	movs	r3, #1
 8005230:	e033      	b.n	800529a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f7ff fb18 	bl	8004870 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005252:	f003 0310 	and.w	r3, r3, #16
 8005256:	2b00      	cmp	r3, #0
 8005258:	d118      	bne.n	800528c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800525e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8005262:	f023 0302 	bic.w	r3, r3, #2
 8005266:	f043 0202 	orr.w	r2, r3, #2
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa58 	bl	8005724 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2200      	movs	r2, #0
 8005278:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527e:	f023 0303 	bic.w	r3, r3, #3
 8005282:	f043 0201 	orr.w	r2, r3, #1
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	641a      	str	r2, [r3, #64]	; 0x40
 800528a:	e001      	b.n	8005290 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005298:	7bfb      	ldrb	r3, [r7, #15]
}
 800529a:	4618      	mov	r0, r3
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}
	...

080052a4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	b086      	sub	sp, #24
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	60f8      	str	r0, [r7, #12]
 80052ac:	60b9      	str	r1, [r7, #8]
 80052ae:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80052b0:	2300      	movs	r3, #0
 80052b2:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_ADC_Start_DMA+0x1e>
 80052be:	2302      	movs	r3, #2
 80052c0:	e0ce      	b.n	8005460 <HAL_ADC_Start_DMA+0x1bc>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d018      	beq.n	800530a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	689a      	ldr	r2, [r3, #8]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052e8:	4b5f      	ldr	r3, [pc, #380]	; (8005468 <HAL_ADC_Start_DMA+0x1c4>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a5f      	ldr	r2, [pc, #380]	; (800546c <HAL_ADC_Start_DMA+0x1c8>)
 80052ee:	fba2 2303 	umull	r2, r3, r2, r3
 80052f2:	0c9a      	lsrs	r2, r3, #18
 80052f4:	4613      	mov	r3, r2
 80052f6:	005b      	lsls	r3, r3, #1
 80052f8:	4413      	add	r3, r2
 80052fa:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052fc:	e002      	b.n	8005304 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	3b01      	subs	r3, #1
 8005302:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f9      	bne.n	80052fe <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005314:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005318:	d107      	bne.n	800532a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689a      	ldr	r2, [r3, #8]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005328:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	689b      	ldr	r3, [r3, #8]
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b01      	cmp	r3, #1
 8005336:	f040 8086 	bne.w	8005446 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8005342:	f023 0301 	bic.w	r3, r3, #1
 8005346:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005358:	2b00      	cmp	r3, #0
 800535a:	d007      	beq.n	800536c <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005364:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005374:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005378:	d106      	bne.n	8005388 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800537e:	f023 0206 	bic.w	r2, r3, #6
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	645a      	str	r2, [r3, #68]	; 0x44
 8005386:	e002      	b.n	800538e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	2200      	movs	r2, #0
 800538c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	2200      	movs	r2, #0
 8005392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005396:	4b36      	ldr	r3, [pc, #216]	; (8005470 <HAL_ADC_Start_DMA+0x1cc>)
 8005398:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539e:	4a35      	ldr	r2, [pc, #212]	; (8005474 <HAL_ADC_Start_DMA+0x1d0>)
 80053a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053a6:	4a34      	ldr	r2, [pc, #208]	; (8005478 <HAL_ADC_Start_DMA+0x1d4>)
 80053a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053ae:	4a33      	ldr	r2, [pc, #204]	; (800547c <HAL_ADC_Start_DMA+0x1d8>)
 80053b0:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80053ba:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	685a      	ldr	r2, [r3, #4]
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80053ca:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	689a      	ldr	r2, [r3, #8]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053da:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	334c      	adds	r3, #76	; 0x4c
 80053e6:	4619      	mov	r1, r3
 80053e8:	68ba      	ldr	r2, [r7, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f000 fcd8 	bl	8005da0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 031f 	and.w	r3, r3, #31
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d10f      	bne.n	800541c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689b      	ldr	r3, [r3, #8]
 8005402:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005406:	2b00      	cmp	r3, #0
 8005408:	d129      	bne.n	800545e <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	689a      	ldr	r2, [r3, #8]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005418:	609a      	str	r2, [r3, #8]
 800541a:	e020      	b.n	800545e <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	4a17      	ldr	r2, [pc, #92]	; (8005480 <HAL_ADC_Start_DMA+0x1dc>)
 8005422:	4293      	cmp	r3, r2
 8005424:	d11b      	bne.n	800545e <HAL_ADC_Start_DMA+0x1ba>
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d114      	bne.n	800545e <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005442:	609a      	str	r2, [r3, #8]
 8005444:	e00b      	b.n	800545e <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544a:	f043 0210 	orr.w	r2, r3, #16
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005456:	f043 0201 	orr.w	r2, r3, #1
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800545e:	2300      	movs	r3, #0
}
 8005460:	4618      	mov	r0, r3
 8005462:	3718      	adds	r7, #24
 8005464:	46bd      	mov	sp, r7
 8005466:	bd80      	pop	{r7, pc}
 8005468:	20000250 	.word	0x20000250
 800546c:	431bde83 	.word	0x431bde83
 8005470:	40012300 	.word	0x40012300
 8005474:	0800591d 	.word	0x0800591d
 8005478:	080059d7 	.word	0x080059d7
 800547c:	080059f3 	.word	0x080059f3
 8005480:	40012000 	.word	0x40012000

08005484 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005484:	b480      	push	{r7}
 8005486:	b083      	sub	sp, #12
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800548c:	bf00      	nop
 800548e:	370c      	adds	r7, #12
 8005490:	46bd      	mov	sp, r7
 8005492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005496:	4770      	bx	lr

08005498 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80054a0:	bf00      	nop
 80054a2:	370c      	adds	r7, #12
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr

080054ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b083      	sub	sp, #12
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80054b4:	bf00      	nop
 80054b6:	370c      	adds	r7, #12
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d101      	bne.n	80054dc <HAL_ADC_ConfigChannel+0x1c>
 80054d8:	2302      	movs	r3, #2
 80054da:	e113      	b.n	8005704 <HAL_ADC_ConfigChannel+0x244>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2201      	movs	r2, #1
 80054e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b09      	cmp	r3, #9
 80054ea:	d925      	bls.n	8005538 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	68d9      	ldr	r1, [r3, #12]
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	b29b      	uxth	r3, r3
 80054f8:	461a      	mov	r2, r3
 80054fa:	4613      	mov	r3, r2
 80054fc:	005b      	lsls	r3, r3, #1
 80054fe:	4413      	add	r3, r2
 8005500:	3b1e      	subs	r3, #30
 8005502:	2207      	movs	r2, #7
 8005504:	fa02 f303 	lsl.w	r3, r2, r3
 8005508:	43da      	mvns	r2, r3
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	400a      	ands	r2, r1
 8005510:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	68d9      	ldr	r1, [r3, #12]
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	683b      	ldr	r3, [r7, #0]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	b29b      	uxth	r3, r3
 8005522:	4618      	mov	r0, r3
 8005524:	4603      	mov	r3, r0
 8005526:	005b      	lsls	r3, r3, #1
 8005528:	4403      	add	r3, r0
 800552a:	3b1e      	subs	r3, #30
 800552c:	409a      	lsls	r2, r3
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	430a      	orrs	r2, r1
 8005534:	60da      	str	r2, [r3, #12]
 8005536:	e022      	b.n	800557e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6919      	ldr	r1, [r3, #16]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	b29b      	uxth	r3, r3
 8005544:	461a      	mov	r2, r3
 8005546:	4613      	mov	r3, r2
 8005548:	005b      	lsls	r3, r3, #1
 800554a:	4413      	add	r3, r2
 800554c:	2207      	movs	r2, #7
 800554e:	fa02 f303 	lsl.w	r3, r2, r3
 8005552:	43da      	mvns	r2, r3
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	400a      	ands	r2, r1
 800555a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	6919      	ldr	r1, [r3, #16]
 8005562:	683b      	ldr	r3, [r7, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	b29b      	uxth	r3, r3
 800556c:	4618      	mov	r0, r3
 800556e:	4603      	mov	r3, r0
 8005570:	005b      	lsls	r3, r3, #1
 8005572:	4403      	add	r3, r0
 8005574:	409a      	lsls	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	430a      	orrs	r2, r1
 800557c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	2b06      	cmp	r3, #6
 8005584:	d824      	bhi.n	80055d0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	685a      	ldr	r2, [r3, #4]
 8005590:	4613      	mov	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	4413      	add	r3, r2
 8005596:	3b05      	subs	r3, #5
 8005598:	221f      	movs	r2, #31
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	400a      	ands	r2, r1
 80055a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	4618      	mov	r0, r3
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	685a      	ldr	r2, [r3, #4]
 80055ba:	4613      	mov	r3, r2
 80055bc:	009b      	lsls	r3, r3, #2
 80055be:	4413      	add	r3, r2
 80055c0:	3b05      	subs	r3, #5
 80055c2:	fa00 f203 	lsl.w	r2, r0, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	635a      	str	r2, [r3, #52]	; 0x34
 80055ce:	e04c      	b.n	800566a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	2b0c      	cmp	r3, #12
 80055d6:	d824      	bhi.n	8005622 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	4613      	mov	r3, r2
 80055e4:	009b      	lsls	r3, r3, #2
 80055e6:	4413      	add	r3, r2
 80055e8:	3b23      	subs	r3, #35	; 0x23
 80055ea:	221f      	movs	r2, #31
 80055ec:	fa02 f303 	lsl.w	r3, r2, r3
 80055f0:	43da      	mvns	r2, r3
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	400a      	ands	r2, r1
 80055f8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005600:	683b      	ldr	r3, [r7, #0]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	b29b      	uxth	r3, r3
 8005606:	4618      	mov	r0, r3
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	3b23      	subs	r3, #35	; 0x23
 8005614:	fa00 f203 	lsl.w	r2, r0, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	430a      	orrs	r2, r1
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
 8005620:	e023      	b.n	800566a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	685a      	ldr	r2, [r3, #4]
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	3b41      	subs	r3, #65	; 0x41
 8005634:	221f      	movs	r2, #31
 8005636:	fa02 f303 	lsl.w	r3, r2, r3
 800563a:	43da      	mvns	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	400a      	ands	r2, r1
 8005642:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	b29b      	uxth	r3, r3
 8005650:	4618      	mov	r0, r3
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	685a      	ldr	r2, [r3, #4]
 8005656:	4613      	mov	r3, r2
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	4413      	add	r3, r2
 800565c:	3b41      	subs	r3, #65	; 0x41
 800565e:	fa00 f203 	lsl.w	r2, r0, r3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	430a      	orrs	r2, r1
 8005668:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800566a:	4b29      	ldr	r3, [pc, #164]	; (8005710 <HAL_ADC_ConfigChannel+0x250>)
 800566c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	4a28      	ldr	r2, [pc, #160]	; (8005714 <HAL_ADC_ConfigChannel+0x254>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d10f      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x1d8>
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b12      	cmp	r3, #18
 800567e:	d10b      	bne.n	8005698 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	4a1d      	ldr	r2, [pc, #116]	; (8005714 <HAL_ADC_ConfigChannel+0x254>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d12b      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x23a>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4a1c      	ldr	r2, [pc, #112]	; (8005718 <HAL_ADC_ConfigChannel+0x258>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <HAL_ADC_ConfigChannel+0x1f4>
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2b11      	cmp	r3, #17
 80056b2:	d122      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	4a11      	ldr	r2, [pc, #68]	; (8005718 <HAL_ADC_ConfigChannel+0x258>)
 80056d2:	4293      	cmp	r3, r2
 80056d4:	d111      	bne.n	80056fa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80056d6:	4b11      	ldr	r3, [pc, #68]	; (800571c <HAL_ADC_ConfigChannel+0x25c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a11      	ldr	r2, [pc, #68]	; (8005720 <HAL_ADC_ConfigChannel+0x260>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	0c9a      	lsrs	r2, r3, #18
 80056e2:	4613      	mov	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	4413      	add	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056ec:	e002      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056ee:	68bb      	ldr	r3, [r7, #8]
 80056f0:	3b01      	subs	r3, #1
 80056f2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d1f9      	bne.n	80056ee <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2200      	movs	r2, #0
 80056fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	3714      	adds	r7, #20
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr
 8005710:	40012300 	.word	0x40012300
 8005714:	40012000 	.word	0x40012000
 8005718:	10000012 	.word	0x10000012
 800571c:	20000250 	.word	0x20000250
 8005720:	431bde83 	.word	0x431bde83

08005724 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005724:	b480      	push	{r7}
 8005726:	b085      	sub	sp, #20
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800572c:	4b79      	ldr	r3, [pc, #484]	; (8005914 <ADC_Init+0x1f0>)
 800572e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	685a      	ldr	r2, [r3, #4]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	685b      	ldr	r3, [r3, #4]
 8005744:	431a      	orrs	r2, r3
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	685a      	ldr	r2, [r3, #4]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005758:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	6859      	ldr	r1, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	691b      	ldr	r3, [r3, #16]
 8005764:	021a      	lsls	r2, r3, #8
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	430a      	orrs	r2, r1
 800576c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800577c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	6859      	ldr	r1, [r3, #4]
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689a      	ldr	r2, [r3, #8]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	430a      	orrs	r2, r1
 800578e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689a      	ldr	r2, [r3, #8]
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800579e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	6899      	ldr	r1, [r3, #8]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68da      	ldr	r2, [r3, #12]
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	430a      	orrs	r2, r1
 80057b0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b6:	4a58      	ldr	r2, [pc, #352]	; (8005918 <ADC_Init+0x1f4>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d022      	beq.n	8005802 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	689a      	ldr	r2, [r3, #8]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057ca:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	6899      	ldr	r1, [r3, #8]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	430a      	orrs	r2, r1
 80057dc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	689a      	ldr	r2, [r3, #8]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057ec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	6899      	ldr	r1, [r3, #8]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	430a      	orrs	r2, r1
 80057fe:	609a      	str	r2, [r3, #8]
 8005800:	e00f      	b.n	8005822 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	689a      	ldr	r2, [r3, #8]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005810:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005820:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f022 0202 	bic.w	r2, r2, #2
 8005830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	6899      	ldr	r1, [r3, #8]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	7e1b      	ldrb	r3, [r3, #24]
 800583c:	005a      	lsls	r2, r3, #1
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	430a      	orrs	r2, r1
 8005844:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f893 3020 	ldrb.w	r3, [r3, #32]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01b      	beq.n	8005888 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800585e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685a      	ldr	r2, [r3, #4]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800586e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6859      	ldr	r1, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587a:	3b01      	subs	r3, #1
 800587c:	035a      	lsls	r2, r3, #13
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	605a      	str	r2, [r3, #4]
 8005886:	e007      	b.n	8005898 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	685a      	ldr	r2, [r3, #4]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005896:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80058a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	69db      	ldr	r3, [r3, #28]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	051a      	lsls	r2, r3, #20
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	430a      	orrs	r2, r1
 80058bc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	689a      	ldr	r2, [r3, #8]
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80058cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	6899      	ldr	r1, [r3, #8]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058da:	025a      	lsls	r2, r3, #9
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	689a      	ldr	r2, [r3, #8]
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058f2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6899      	ldr	r1, [r3, #8]
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	695b      	ldr	r3, [r3, #20]
 80058fe:	029a      	lsls	r2, r3, #10
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	430a      	orrs	r2, r1
 8005906:	609a      	str	r2, [r3, #8]
}
 8005908:	bf00      	nop
 800590a:	3714      	adds	r7, #20
 800590c:	46bd      	mov	sp, r7
 800590e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005912:	4770      	bx	lr
 8005914:	40012300 	.word	0x40012300
 8005918:	0f000001 	.word	0x0f000001

0800591c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b084      	sub	sp, #16
 8005920:	af00      	add	r7, sp, #0
 8005922:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005928:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005932:	2b00      	cmp	r3, #0
 8005934:	d13c      	bne.n	80059b0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800593a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	689b      	ldr	r3, [r3, #8]
 8005948:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d12b      	bne.n	80059a8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005954:	2b00      	cmp	r3, #0
 8005956:	d127      	bne.n	80059a8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800595e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005962:	2b00      	cmp	r3, #0
 8005964:	d006      	beq.n	8005974 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005970:	2b00      	cmp	r3, #0
 8005972:	d119      	bne.n	80059a8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	f022 0220 	bic.w	r2, r2, #32
 8005982:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005988:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005994:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005998:	2b00      	cmp	r3, #0
 800599a:	d105      	bne.n	80059a8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a0:	f043 0201 	orr.w	r2, r3, #1
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80059a8:	68f8      	ldr	r0, [r7, #12]
 80059aa:	f7ff fd6b 	bl	8005484 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80059ae:	e00e      	b.n	80059ce <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b4:	f003 0310 	and.w	r3, r3, #16
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d003      	beq.n	80059c4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f7ff fd75 	bl	80054ac <HAL_ADC_ErrorCallback>
}
 80059c2:	e004      	b.n	80059ce <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	4798      	blx	r3
}
 80059ce:	bf00      	nop
 80059d0:	3710      	adds	r7, #16
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}

080059d6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059d6:	b580      	push	{r7, lr}
 80059d8:	b084      	sub	sp, #16
 80059da:	af00      	add	r7, sp, #0
 80059dc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7ff fd57 	bl	8005498 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059ea:	bf00      	nop
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059fe:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2240      	movs	r2, #64	; 0x40
 8005a04:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a0a:	f043 0204 	orr.w	r2, r3, #4
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005a12:	68f8      	ldr	r0, [r7, #12]
 8005a14:	f7ff fd4a 	bl	80054ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a52:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	60d3      	str	r3, [r2, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <__NVIC_GetPriorityGrouping+0x18>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 0307 	and.w	r3, r3, #7
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db0b      	blt.n	8005aae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <__NVIC_EnableIRQ+0x38>)
 8005a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	e000e100 	.word	0xe000e100

08005ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db0a      	blt.n	8005aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	490c      	ldr	r1, [pc, #48]	; (8005b0c <__NVIC_SetPriority+0x4c>)
 8005ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ade:	0112      	lsls	r2, r2, #4
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ae8:	e00a      	b.n	8005b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4908      	ldr	r1, [pc, #32]	; (8005b10 <__NVIC_SetPriority+0x50>)
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3b04      	subs	r3, #4
 8005af8:	0112      	lsls	r2, r2, #4
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	440b      	add	r3, r1
 8005afe:	761a      	strb	r2, [r3, #24]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000e100 	.word	0xe000e100
 8005b10:	e000ed00 	.word	0xe000ed00

08005b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f1c3 0307 	rsb	r3, r3, #7
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	bf28      	it	cs
 8005b32:	2304      	movcs	r3, #4
 8005b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d902      	bls.n	8005b44 <NVIC_EncodePriority+0x30>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3b03      	subs	r3, #3
 8005b42:	e000      	b.n	8005b46 <NVIC_EncodePriority+0x32>
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	401a      	ands	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	43d9      	mvns	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	4313      	orrs	r3, r2
         );
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr
	...

08005b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	3b01      	subs	r3, #1
 8005b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b8c:	d301      	bcc.n	8005b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b8e:	2301      	movs	r3, #1
 8005b90:	e00f      	b.n	8005bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b92:	4a0a      	ldr	r2, [pc, #40]	; (8005bbc <SysTick_Config+0x40>)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	3b01      	subs	r3, #1
 8005b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b9a:	210f      	movs	r1, #15
 8005b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8005ba0:	f7ff ff8e 	bl	8005ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ba4:	4b05      	ldr	r3, [pc, #20]	; (8005bbc <SysTick_Config+0x40>)
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005baa:	4b04      	ldr	r3, [pc, #16]	; (8005bbc <SysTick_Config+0x40>)
 8005bac:	2207      	movs	r2, #7
 8005bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3708      	adds	r7, #8
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
 8005bba:	bf00      	nop
 8005bbc:	e000e010 	.word	0xe000e010

08005bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f7ff ff29 	bl	8005a20 <__NVIC_SetPriorityGrouping>
}
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	60b9      	str	r1, [r7, #8]
 8005be0:	607a      	str	r2, [r7, #4]
 8005be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005be8:	f7ff ff3e 	bl	8005a68 <__NVIC_GetPriorityGrouping>
 8005bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f7ff ff8e 	bl	8005b14 <NVIC_EncodePriority>
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bfe:	4611      	mov	r1, r2
 8005c00:	4618      	mov	r0, r3
 8005c02:	f7ff ff5d 	bl	8005ac0 <__NVIC_SetPriority>
}
 8005c06:	bf00      	nop
 8005c08:	3718      	adds	r7, #24
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}

08005c0e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005c0e:	b580      	push	{r7, lr}
 8005c10:	b082      	sub	sp, #8
 8005c12:	af00      	add	r7, sp, #0
 8005c14:	4603      	mov	r3, r0
 8005c16:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005c18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7ff ff31 	bl	8005a84 <__NVIC_EnableIRQ>
}
 8005c22:	bf00      	nop
 8005c24:	3708      	adds	r7, #8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b082      	sub	sp, #8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005c32:	6878      	ldr	r0, [r7, #4]
 8005c34:	f7ff ffa2 	bl	8005b7c <SysTick_Config>
 8005c38:	4603      	mov	r3, r0
}
 8005c3a:	4618      	mov	r0, r3
 8005c3c:	3708      	adds	r7, #8
 8005c3e:	46bd      	mov	sp, r7
 8005c40:	bd80      	pop	{r7, pc}
	...

08005c44 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c44:	b580      	push	{r7, lr}
 8005c46:	b086      	sub	sp, #24
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c50:	f7ff fab4 	bl	80051bc <HAL_GetTick>
 8005c54:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d101      	bne.n	8005c60 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	e099      	b.n	8005d94 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2202      	movs	r2, #2
 8005c64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681a      	ldr	r2, [r3, #0]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c80:	e00f      	b.n	8005ca2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c82:	f7ff fa9b 	bl	80051bc <HAL_GetTick>
 8005c86:	4602      	mov	r2, r0
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1ad3      	subs	r3, r2, r3
 8005c8c:	2b05      	cmp	r3, #5
 8005c8e:	d908      	bls.n	8005ca2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2220      	movs	r2, #32
 8005c94:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2203      	movs	r2, #3
 8005c9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c9e:	2303      	movs	r3, #3
 8005ca0:	e078      	b.n	8005d94 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f003 0301 	and.w	r3, r3, #1
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e8      	bne.n	8005c82 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4b38      	ldr	r3, [pc, #224]	; (8005d9c <HAL_DMA_Init+0x158>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	685a      	ldr	r2, [r3, #4]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	689b      	ldr	r3, [r3, #8]
 8005cc8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005cda:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699b      	ldr	r3, [r3, #24]
 8005ce0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ce6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6a1b      	ldr	r3, [r3, #32]
 8005cec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cee:	697a      	ldr	r2, [r7, #20]
 8005cf0:	4313      	orrs	r3, r2
 8005cf2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d107      	bne.n	8005d0c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d04:	4313      	orrs	r3, r2
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	4313      	orrs	r3, r2
 8005d0a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	697a      	ldr	r2, [r7, #20]
 8005d12:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	695b      	ldr	r3, [r3, #20]
 8005d1a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005d1c:	697b      	ldr	r3, [r7, #20]
 8005d1e:	f023 0307 	bic.w	r3, r3, #7
 8005d22:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d28:	697a      	ldr	r2, [r7, #20]
 8005d2a:	4313      	orrs	r3, r2
 8005d2c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d32:	2b04      	cmp	r3, #4
 8005d34:	d117      	bne.n	8005d66 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d3a:	697a      	ldr	r2, [r7, #20]
 8005d3c:	4313      	orrs	r3, r2
 8005d3e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d00e      	beq.n	8005d66 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f000 fb1b 	bl	8006384 <DMA_CheckFifoParam>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d008      	beq.n	8005d66 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2240      	movs	r2, #64	; 0x40
 8005d58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	2201      	movs	r2, #1
 8005d5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d62:	2301      	movs	r3, #1
 8005d64:	e016      	b.n	8005d94 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fad2 	bl	8006318 <DMA_CalcBaseAndBitshift>
 8005d74:	4603      	mov	r3, r0
 8005d76:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d7c:	223f      	movs	r2, #63	; 0x3f
 8005d7e:	409a      	lsls	r2, r3
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3718      	adds	r7, #24
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	f010803f 	.word	0xf010803f

08005da0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b086      	sub	sp, #24
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	60f8      	str	r0, [r7, #12]
 8005da8:	60b9      	str	r1, [r7, #8]
 8005daa:	607a      	str	r2, [r7, #4]
 8005dac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005dae:	2300      	movs	r3, #0
 8005db0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005db6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d101      	bne.n	8005dc6 <HAL_DMA_Start_IT+0x26>
 8005dc2:	2302      	movs	r3, #2
 8005dc4:	e040      	b.n	8005e48 <HAL_DMA_Start_IT+0xa8>
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d12f      	bne.n	8005e3a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005de8:	683b      	ldr	r3, [r7, #0]
 8005dea:	687a      	ldr	r2, [r7, #4]
 8005dec:	68b9      	ldr	r1, [r7, #8]
 8005dee:	68f8      	ldr	r0, [r7, #12]
 8005df0:	f000 fa64 	bl	80062bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df8:	223f      	movs	r2, #63	; 0x3f
 8005dfa:	409a      	lsls	r2, r3
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	681a      	ldr	r2, [r3, #0]
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f042 0216 	orr.w	r2, r2, #22
 8005e0e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d007      	beq.n	8005e28 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f042 0208 	orr.w	r2, r2, #8
 8005e26:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	601a      	str	r2, [r3, #0]
 8005e38:	e005      	b.n	8005e46 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e42:	2302      	movs	r3, #2
 8005e44:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e48:	4618      	mov	r0, r3
 8005e4a:	3718      	adds	r7, #24
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	bd80      	pop	{r7, pc}

08005e50 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e5c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e5e:	f7ff f9ad 	bl	80051bc <HAL_GetTick>
 8005e62:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e6a:	b2db      	uxtb	r3, r3
 8005e6c:	2b02      	cmp	r3, #2
 8005e6e:	d008      	beq.n	8005e82 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2280      	movs	r2, #128	; 0x80
 8005e74:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e052      	b.n	8005f28 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681a      	ldr	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f022 0216 	bic.w	r2, r2, #22
 8005e90:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	695a      	ldr	r2, [r3, #20]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ea0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d103      	bne.n	8005eb2 <HAL_DMA_Abort+0x62>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f022 0208 	bic.w	r2, r2, #8
 8005ec0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	681a      	ldr	r2, [r3, #0]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 0201 	bic.w	r2, r2, #1
 8005ed0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ed2:	e013      	b.n	8005efc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005ed4:	f7ff f972 	bl	80051bc <HAL_GetTick>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	1ad3      	subs	r3, r2, r3
 8005ede:	2b05      	cmp	r3, #5
 8005ee0:	d90c      	bls.n	8005efc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2220      	movs	r2, #32
 8005ee6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2203      	movs	r2, #3
 8005eec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ef8:	2303      	movs	r3, #3
 8005efa:	e015      	b.n	8005f28 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0301 	and.w	r3, r3, #1
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d1e4      	bne.n	8005ed4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f0e:	223f      	movs	r2, #63	; 0x3f
 8005f10:	409a      	lsls	r2, r3
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2201      	movs	r2, #1
 8005f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d004      	beq.n	8005f4e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2280      	movs	r2, #128	; 0x80
 8005f48:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	e00c      	b.n	8005f68 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2205      	movs	r2, #5
 8005f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f022 0201 	bic.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	370c      	adds	r7, #12
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f72:	4770      	bx	lr

08005f74 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f80:	4b8e      	ldr	r3, [pc, #568]	; (80061bc <HAL_DMA_IRQHandler+0x248>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	4a8e      	ldr	r2, [pc, #568]	; (80061c0 <HAL_DMA_IRQHandler+0x24c>)
 8005f86:	fba2 2303 	umull	r2, r3, r2, r3
 8005f8a:	0a9b      	lsrs	r3, r3, #10
 8005f8c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f92:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f9e:	2208      	movs	r2, #8
 8005fa0:	409a      	lsls	r2, r3
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	4013      	ands	r3, r2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d01a      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 0304 	and.w	r3, r3, #4
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d013      	beq.n	8005fe0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f022 0204 	bic.w	r2, r2, #4
 8005fc6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fcc:	2208      	movs	r2, #8
 8005fce:	409a      	lsls	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd8:	f043 0201 	orr.w	r2, r3, #1
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe4:	2201      	movs	r2, #1
 8005fe6:	409a      	lsls	r2, r3
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	4013      	ands	r3, r2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d012      	beq.n	8006016 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	695b      	ldr	r3, [r3, #20]
 8005ff6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d00b      	beq.n	8006016 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006002:	2201      	movs	r2, #1
 8006004:	409a      	lsls	r2, r3
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f043 0202 	orr.w	r2, r3, #2
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800601a:	2204      	movs	r2, #4
 800601c:	409a      	lsls	r2, r3
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	4013      	ands	r3, r2
 8006022:	2b00      	cmp	r3, #0
 8006024:	d012      	beq.n	800604c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d00b      	beq.n	800604c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006038:	2204      	movs	r2, #4
 800603a:	409a      	lsls	r2, r3
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006044:	f043 0204 	orr.w	r2, r3, #4
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006050:	2210      	movs	r2, #16
 8006052:	409a      	lsls	r2, r3
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	4013      	ands	r3, r2
 8006058:	2b00      	cmp	r3, #0
 800605a:	d043      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0308 	and.w	r3, r3, #8
 8006066:	2b00      	cmp	r3, #0
 8006068:	d03c      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800606e:	2210      	movs	r2, #16
 8006070:	409a      	lsls	r2, r3
 8006072:	693b      	ldr	r3, [r7, #16]
 8006074:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006080:	2b00      	cmp	r3, #0
 8006082:	d018      	beq.n	80060b6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800608e:	2b00      	cmp	r3, #0
 8006090:	d108      	bne.n	80060a4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006096:	2b00      	cmp	r3, #0
 8006098:	d024      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	4798      	blx	r3
 80060a2:	e01f      	b.n	80060e4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d01b      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	4798      	blx	r3
 80060b4:	e016      	b.n	80060e4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d107      	bne.n	80060d4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	681a      	ldr	r2, [r3, #0]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f022 0208 	bic.w	r2, r2, #8
 80060d2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d003      	beq.n	80060e4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060e8:	2220      	movs	r2, #32
 80060ea:	409a      	lsls	r2, r3
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	4013      	ands	r3, r2
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	f000 808f 	beq.w	8006214 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f003 0310 	and.w	r3, r3, #16
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 8087 	beq.w	8006214 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800610a:	2220      	movs	r2, #32
 800610c:	409a      	lsls	r2, r3
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006118:	b2db      	uxtb	r3, r3
 800611a:	2b05      	cmp	r3, #5
 800611c:	d136      	bne.n	800618c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f022 0216 	bic.w	r2, r2, #22
 800612c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	695a      	ldr	r2, [r3, #20]
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800613c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006142:	2b00      	cmp	r3, #0
 8006144:	d103      	bne.n	800614e <HAL_DMA_IRQHandler+0x1da>
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800614a:	2b00      	cmp	r3, #0
 800614c:	d007      	beq.n	800615e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	f022 0208 	bic.w	r2, r2, #8
 800615c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006162:	223f      	movs	r2, #63	; 0x3f
 8006164:	409a      	lsls	r2, r3
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2201      	movs	r2, #1
 800616e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	2200      	movs	r2, #0
 8006176:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800617e:	2b00      	cmp	r3, #0
 8006180:	d07e      	beq.n	8006280 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006186:	6878      	ldr	r0, [r7, #4]
 8006188:	4798      	blx	r3
        }
        return;
 800618a:	e079      	b.n	8006280 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006196:	2b00      	cmp	r3, #0
 8006198:	d01d      	beq.n	80061d6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10d      	bne.n	80061c4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d031      	beq.n	8006214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	4798      	blx	r3
 80061b8:	e02c      	b.n	8006214 <HAL_DMA_IRQHandler+0x2a0>
 80061ba:	bf00      	nop
 80061bc:	20000250 	.word	0x20000250
 80061c0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d023      	beq.n	8006214 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	4798      	blx	r3
 80061d4:	e01e      	b.n	8006214 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d10f      	bne.n	8006204 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	681a      	ldr	r2, [r3, #0]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f022 0210 	bic.w	r2, r2, #16
 80061f2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006208:	2b00      	cmp	r3, #0
 800620a:	d003      	beq.n	8006214 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006210:	6878      	ldr	r0, [r7, #4]
 8006212:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006218:	2b00      	cmp	r3, #0
 800621a:	d032      	beq.n	8006282 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006220:	f003 0301 	and.w	r3, r3, #1
 8006224:	2b00      	cmp	r3, #0
 8006226:	d022      	beq.n	800626e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2205      	movs	r2, #5
 800622c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f022 0201 	bic.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	3301      	adds	r3, #1
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	697a      	ldr	r2, [r7, #20]
 8006248:	429a      	cmp	r2, r3
 800624a:	d307      	bcc.n	800625c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f003 0301 	and.w	r3, r3, #1
 8006256:	2b00      	cmp	r3, #0
 8006258:	d1f2      	bne.n	8006240 <HAL_DMA_IRQHandler+0x2cc>
 800625a:	e000      	b.n	800625e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800625c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006272:	2b00      	cmp	r3, #0
 8006274:	d005      	beq.n	8006282 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	4798      	blx	r3
 800627e:	e000      	b.n	8006282 <HAL_DMA_IRQHandler+0x30e>
        return;
 8006280:	bf00      	nop
    }
  }
}
 8006282:	3718      	adds	r7, #24
 8006284:	46bd      	mov	sp, r7
 8006286:	bd80      	pop	{r7, pc}

08006288 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006296:	b2db      	uxtb	r3, r3
}
 8006298:	4618      	mov	r0, r3
 800629a:	370c      	adds	r7, #12
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr

080062a4 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80062a4:	b480      	push	{r7}
 80062a6:	b083      	sub	sp, #12
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	60f8      	str	r0, [r7, #12]
 80062c4:	60b9      	str	r1, [r7, #8]
 80062c6:	607a      	str	r2, [r7, #4]
 80062c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	689b      	ldr	r3, [r3, #8]
 80062e6:	2b40      	cmp	r3, #64	; 0x40
 80062e8:	d108      	bne.n	80062fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062fa:	e007      	b.n	800630c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	68ba      	ldr	r2, [r7, #8]
 8006302:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	60da      	str	r2, [r3, #12]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006318:	b480      	push	{r7}
 800631a:	b085      	sub	sp, #20
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	b2db      	uxtb	r3, r3
 8006326:	3b10      	subs	r3, #16
 8006328:	4a14      	ldr	r2, [pc, #80]	; (800637c <DMA_CalcBaseAndBitshift+0x64>)
 800632a:	fba2 2303 	umull	r2, r3, r2, r3
 800632e:	091b      	lsrs	r3, r3, #4
 8006330:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8006332:	4a13      	ldr	r2, [pc, #76]	; (8006380 <DMA_CalcBaseAndBitshift+0x68>)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	4413      	add	r3, r2
 8006338:	781b      	ldrb	r3, [r3, #0]
 800633a:	461a      	mov	r2, r3
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2b03      	cmp	r3, #3
 8006344:	d909      	bls.n	800635a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800634e:	f023 0303 	bic.w	r3, r3, #3
 8006352:	1d1a      	adds	r2, r3, #4
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	659a      	str	r2, [r3, #88]	; 0x58
 8006358:	e007      	b.n	800636a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006362:	f023 0303 	bic.w	r3, r3, #3
 8006366:	687a      	ldr	r2, [r7, #4]
 8006368:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800636e:	4618      	mov	r0, r3
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	aaaaaaab 	.word	0xaaaaaaab
 8006380:	08012598 	.word	0x08012598

08006384 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8006384:	b480      	push	{r7}
 8006386:	b085      	sub	sp, #20
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800638c:	2300      	movs	r3, #0
 800638e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006394:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d11f      	bne.n	80063de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	2b03      	cmp	r3, #3
 80063a2:	d856      	bhi.n	8006452 <DMA_CheckFifoParam+0xce>
 80063a4:	a201      	add	r2, pc, #4	; (adr r2, 80063ac <DMA_CheckFifoParam+0x28>)
 80063a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063aa:	bf00      	nop
 80063ac:	080063bd 	.word	0x080063bd
 80063b0:	080063cf 	.word	0x080063cf
 80063b4:	080063bd 	.word	0x080063bd
 80063b8:	08006453 	.word	0x08006453
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d046      	beq.n	8006456 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063cc:	e043      	b.n	8006456 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063d6:	d140      	bne.n	800645a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063d8:	2301      	movs	r3, #1
 80063da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063dc:	e03d      	b.n	800645a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	699b      	ldr	r3, [r3, #24]
 80063e2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e6:	d121      	bne.n	800642c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2b03      	cmp	r3, #3
 80063ec:	d837      	bhi.n	800645e <DMA_CheckFifoParam+0xda>
 80063ee:	a201      	add	r2, pc, #4	; (adr r2, 80063f4 <DMA_CheckFifoParam+0x70>)
 80063f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f4:	08006405 	.word	0x08006405
 80063f8:	0800640b 	.word	0x0800640b
 80063fc:	08006405 	.word	0x08006405
 8006400:	0800641d 	.word	0x0800641d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	73fb      	strb	r3, [r7, #15]
      break;
 8006408:	e030      	b.n	800646c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006412:	2b00      	cmp	r3, #0
 8006414:	d025      	beq.n	8006462 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800641a:	e022      	b.n	8006462 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006420:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006424:	d11f      	bne.n	8006466 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006426:	2301      	movs	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800642a:	e01c      	b.n	8006466 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	2b02      	cmp	r3, #2
 8006430:	d903      	bls.n	800643a <DMA_CheckFifoParam+0xb6>
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	2b03      	cmp	r3, #3
 8006436:	d003      	beq.n	8006440 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006438:	e018      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800643a:	2301      	movs	r3, #1
 800643c:	73fb      	strb	r3, [r7, #15]
      break;
 800643e:	e015      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00e      	beq.n	800646a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800644c:	2301      	movs	r3, #1
 800644e:	73fb      	strb	r3, [r7, #15]
      break;
 8006450:	e00b      	b.n	800646a <DMA_CheckFifoParam+0xe6>
      break;
 8006452:	bf00      	nop
 8006454:	e00a      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;
 8006456:	bf00      	nop
 8006458:	e008      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;
 800645a:	bf00      	nop
 800645c:	e006      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;
 800645e:	bf00      	nop
 8006460:	e004      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;
 8006462:	bf00      	nop
 8006464:	e002      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;   
 8006466:	bf00      	nop
 8006468:	e000      	b.n	800646c <DMA_CheckFifoParam+0xe8>
      break;
 800646a:	bf00      	nop
    }
  } 
  
  return status; 
 800646c:	7bfb      	ldrb	r3, [r7, #15]
}
 800646e:	4618      	mov	r0, r3
 8006470:	3714      	adds	r7, #20
 8006472:	46bd      	mov	sp, r7
 8006474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006478:	4770      	bx	lr
 800647a:	bf00      	nop

0800647c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800647c:	b480      	push	{r7}
 800647e:	b089      	sub	sp, #36	; 0x24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006486:	2300      	movs	r3, #0
 8006488:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800648a:	2300      	movs	r3, #0
 800648c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800648e:	2300      	movs	r3, #0
 8006490:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006492:	2300      	movs	r3, #0
 8006494:	61fb      	str	r3, [r7, #28]
 8006496:	e159      	b.n	800674c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006498:	2201      	movs	r2, #1
 800649a:	69fb      	ldr	r3, [r7, #28]
 800649c:	fa02 f303 	lsl.w	r3, r2, r3
 80064a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	697a      	ldr	r2, [r7, #20]
 80064a8:	4013      	ands	r3, r2
 80064aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	f040 8148 	bne.w	8006746 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064b6:	683b      	ldr	r3, [r7, #0]
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	f003 0303 	and.w	r3, r3, #3
 80064be:	2b01      	cmp	r3, #1
 80064c0:	d005      	beq.n	80064ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80064c2:	683b      	ldr	r3, [r7, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d130      	bne.n	8006530 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80064d4:	69fb      	ldr	r3, [r7, #28]
 80064d6:	005b      	lsls	r3, r3, #1
 80064d8:	2203      	movs	r2, #3
 80064da:	fa02 f303 	lsl.w	r3, r2, r3
 80064de:	43db      	mvns	r3, r3
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4013      	ands	r3, r2
 80064e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	68da      	ldr	r2, [r3, #12]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	69ba      	ldr	r2, [r7, #24]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69ba      	ldr	r2, [r7, #24]
 80064fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006504:	2201      	movs	r2, #1
 8006506:	69fb      	ldr	r3, [r7, #28]
 8006508:	fa02 f303 	lsl.w	r3, r2, r3
 800650c:	43db      	mvns	r3, r3
 800650e:	69ba      	ldr	r2, [r7, #24]
 8006510:	4013      	ands	r3, r2
 8006512:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	685b      	ldr	r3, [r3, #4]
 8006518:	091b      	lsrs	r3, r3, #4
 800651a:	f003 0201 	and.w	r2, r3, #1
 800651e:	69fb      	ldr	r3, [r7, #28]
 8006520:	fa02 f303 	lsl.w	r3, r2, r3
 8006524:	69ba      	ldr	r2, [r7, #24]
 8006526:	4313      	orrs	r3, r2
 8006528:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	69ba      	ldr	r2, [r7, #24]
 800652e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	f003 0303 	and.w	r3, r3, #3
 8006538:	2b03      	cmp	r3, #3
 800653a:	d017      	beq.n	800656c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	68db      	ldr	r3, [r3, #12]
 8006540:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	2203      	movs	r2, #3
 8006548:	fa02 f303 	lsl.w	r3, r2, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	69ba      	ldr	r2, [r7, #24]
 8006550:	4013      	ands	r3, r2
 8006552:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	689a      	ldr	r2, [r3, #8]
 8006558:	69fb      	ldr	r3, [r7, #28]
 800655a:	005b      	lsls	r3, r3, #1
 800655c:	fa02 f303 	lsl.w	r3, r2, r3
 8006560:	69ba      	ldr	r2, [r7, #24]
 8006562:	4313      	orrs	r3, r2
 8006564:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	69ba      	ldr	r2, [r7, #24]
 800656a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	f003 0303 	and.w	r3, r3, #3
 8006574:	2b02      	cmp	r3, #2
 8006576:	d123      	bne.n	80065c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006578:	69fb      	ldr	r3, [r7, #28]
 800657a:	08da      	lsrs	r2, r3, #3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	3208      	adds	r2, #8
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006586:	69fb      	ldr	r3, [r7, #28]
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	220f      	movs	r2, #15
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	43db      	mvns	r3, r3
 8006596:	69ba      	ldr	r2, [r7, #24]
 8006598:	4013      	ands	r3, r2
 800659a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	691a      	ldr	r2, [r3, #16]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	f003 0307 	and.w	r3, r3, #7
 80065a6:	009b      	lsls	r3, r3, #2
 80065a8:	fa02 f303 	lsl.w	r3, r2, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4313      	orrs	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80065b2:	69fb      	ldr	r3, [r7, #28]
 80065b4:	08da      	lsrs	r2, r3, #3
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	3208      	adds	r2, #8
 80065ba:	69b9      	ldr	r1, [r7, #24]
 80065bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80065c6:	69fb      	ldr	r3, [r7, #28]
 80065c8:	005b      	lsls	r3, r3, #1
 80065ca:	2203      	movs	r2, #3
 80065cc:	fa02 f303 	lsl.w	r3, r2, r3
 80065d0:	43db      	mvns	r3, r3
 80065d2:	69ba      	ldr	r2, [r7, #24]
 80065d4:	4013      	ands	r3, r2
 80065d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	685b      	ldr	r3, [r3, #4]
 80065dc:	f003 0203 	and.w	r2, r3, #3
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	fa02 f303 	lsl.w	r3, r2, r3
 80065e8:	69ba      	ldr	r2, [r7, #24]
 80065ea:	4313      	orrs	r3, r2
 80065ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	69ba      	ldr	r2, [r7, #24]
 80065f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065f4:	683b      	ldr	r3, [r7, #0]
 80065f6:	685b      	ldr	r3, [r3, #4]
 80065f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	f000 80a2 	beq.w	8006746 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006602:	2300      	movs	r3, #0
 8006604:	60fb      	str	r3, [r7, #12]
 8006606:	4b57      	ldr	r3, [pc, #348]	; (8006764 <HAL_GPIO_Init+0x2e8>)
 8006608:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800660a:	4a56      	ldr	r2, [pc, #344]	; (8006764 <HAL_GPIO_Init+0x2e8>)
 800660c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006610:	6453      	str	r3, [r2, #68]	; 0x44
 8006612:	4b54      	ldr	r3, [pc, #336]	; (8006764 <HAL_GPIO_Init+0x2e8>)
 8006614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800661a:	60fb      	str	r3, [r7, #12]
 800661c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800661e:	4a52      	ldr	r2, [pc, #328]	; (8006768 <HAL_GPIO_Init+0x2ec>)
 8006620:	69fb      	ldr	r3, [r7, #28]
 8006622:	089b      	lsrs	r3, r3, #2
 8006624:	3302      	adds	r3, #2
 8006626:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800662a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800662c:	69fb      	ldr	r3, [r7, #28]
 800662e:	f003 0303 	and.w	r3, r3, #3
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	220f      	movs	r2, #15
 8006636:	fa02 f303 	lsl.w	r3, r2, r3
 800663a:	43db      	mvns	r3, r3
 800663c:	69ba      	ldr	r2, [r7, #24]
 800663e:	4013      	ands	r3, r2
 8006640:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	4a49      	ldr	r2, [pc, #292]	; (800676c <HAL_GPIO_Init+0x2f0>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d019      	beq.n	800667e <HAL_GPIO_Init+0x202>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	4a48      	ldr	r2, [pc, #288]	; (8006770 <HAL_GPIO_Init+0x2f4>)
 800664e:	4293      	cmp	r3, r2
 8006650:	d013      	beq.n	800667a <HAL_GPIO_Init+0x1fe>
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	4a47      	ldr	r2, [pc, #284]	; (8006774 <HAL_GPIO_Init+0x2f8>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d00d      	beq.n	8006676 <HAL_GPIO_Init+0x1fa>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	4a46      	ldr	r2, [pc, #280]	; (8006778 <HAL_GPIO_Init+0x2fc>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d007      	beq.n	8006672 <HAL_GPIO_Init+0x1f6>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4a45      	ldr	r2, [pc, #276]	; (800677c <HAL_GPIO_Init+0x300>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d101      	bne.n	800666e <HAL_GPIO_Init+0x1f2>
 800666a:	2304      	movs	r3, #4
 800666c:	e008      	b.n	8006680 <HAL_GPIO_Init+0x204>
 800666e:	2307      	movs	r3, #7
 8006670:	e006      	b.n	8006680 <HAL_GPIO_Init+0x204>
 8006672:	2303      	movs	r3, #3
 8006674:	e004      	b.n	8006680 <HAL_GPIO_Init+0x204>
 8006676:	2302      	movs	r3, #2
 8006678:	e002      	b.n	8006680 <HAL_GPIO_Init+0x204>
 800667a:	2301      	movs	r3, #1
 800667c:	e000      	b.n	8006680 <HAL_GPIO_Init+0x204>
 800667e:	2300      	movs	r3, #0
 8006680:	69fa      	ldr	r2, [r7, #28]
 8006682:	f002 0203 	and.w	r2, r2, #3
 8006686:	0092      	lsls	r2, r2, #2
 8006688:	4093      	lsls	r3, r2
 800668a:	69ba      	ldr	r2, [r7, #24]
 800668c:	4313      	orrs	r3, r2
 800668e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006690:	4935      	ldr	r1, [pc, #212]	; (8006768 <HAL_GPIO_Init+0x2ec>)
 8006692:	69fb      	ldr	r3, [r7, #28]
 8006694:	089b      	lsrs	r3, r3, #2
 8006696:	3302      	adds	r3, #2
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800669e:	4b38      	ldr	r3, [pc, #224]	; (8006780 <HAL_GPIO_Init+0x304>)
 80066a0:	689b      	ldr	r3, [r3, #8]
 80066a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	43db      	mvns	r3, r3
 80066a8:	69ba      	ldr	r2, [r7, #24]
 80066aa:	4013      	ands	r3, r2
 80066ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80066ae:	683b      	ldr	r3, [r7, #0]
 80066b0:	685b      	ldr	r3, [r3, #4]
 80066b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d003      	beq.n	80066c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80066ba:	69ba      	ldr	r2, [r7, #24]
 80066bc:	693b      	ldr	r3, [r7, #16]
 80066be:	4313      	orrs	r3, r2
 80066c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80066c2:	4a2f      	ldr	r2, [pc, #188]	; (8006780 <HAL_GPIO_Init+0x304>)
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80066c8:	4b2d      	ldr	r3, [pc, #180]	; (8006780 <HAL_GPIO_Init+0x304>)
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ce:	693b      	ldr	r3, [r7, #16]
 80066d0:	43db      	mvns	r3, r3
 80066d2:	69ba      	ldr	r2, [r7, #24]
 80066d4:	4013      	ands	r3, r2
 80066d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d003      	beq.n	80066ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066e4:	69ba      	ldr	r2, [r7, #24]
 80066e6:	693b      	ldr	r3, [r7, #16]
 80066e8:	4313      	orrs	r3, r2
 80066ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066ec:	4a24      	ldr	r2, [pc, #144]	; (8006780 <HAL_GPIO_Init+0x304>)
 80066ee:	69bb      	ldr	r3, [r7, #24]
 80066f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066f2:	4b23      	ldr	r3, [pc, #140]	; (8006780 <HAL_GPIO_Init+0x304>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	43db      	mvns	r3, r3
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	4013      	ands	r3, r2
 8006700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800670a:	2b00      	cmp	r3, #0
 800670c:	d003      	beq.n	8006716 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800670e:	69ba      	ldr	r2, [r7, #24]
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	4313      	orrs	r3, r2
 8006714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006716:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <HAL_GPIO_Init+0x304>)
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800671c:	4b18      	ldr	r3, [pc, #96]	; (8006780 <HAL_GPIO_Init+0x304>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	43db      	mvns	r3, r3
 8006726:	69ba      	ldr	r2, [r7, #24]
 8006728:	4013      	ands	r3, r2
 800672a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	685b      	ldr	r3, [r3, #4]
 8006730:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006738:	69ba      	ldr	r2, [r7, #24]
 800673a:	693b      	ldr	r3, [r7, #16]
 800673c:	4313      	orrs	r3, r2
 800673e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006740:	4a0f      	ldr	r2, [pc, #60]	; (8006780 <HAL_GPIO_Init+0x304>)
 8006742:	69bb      	ldr	r3, [r7, #24]
 8006744:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006746:	69fb      	ldr	r3, [r7, #28]
 8006748:	3301      	adds	r3, #1
 800674a:	61fb      	str	r3, [r7, #28]
 800674c:	69fb      	ldr	r3, [r7, #28]
 800674e:	2b0f      	cmp	r3, #15
 8006750:	f67f aea2 	bls.w	8006498 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006754:	bf00      	nop
 8006756:	bf00      	nop
 8006758:	3724      	adds	r7, #36	; 0x24
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	40023800 	.word	0x40023800
 8006768:	40013800 	.word	0x40013800
 800676c:	40020000 	.word	0x40020000
 8006770:	40020400 	.word	0x40020400
 8006774:	40020800 	.word	0x40020800
 8006778:	40020c00 	.word	0x40020c00
 800677c:	40021000 	.word	0x40021000
 8006780:	40013c00 	.word	0x40013c00

08006784 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006784:	b480      	push	{r7}
 8006786:	b085      	sub	sp, #20
 8006788:	af00      	add	r7, sp, #0
 800678a:	6078      	str	r0, [r7, #4]
 800678c:	460b      	mov	r3, r1
 800678e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	691a      	ldr	r2, [r3, #16]
 8006794:	887b      	ldrh	r3, [r7, #2]
 8006796:	4013      	ands	r3, r2
 8006798:	2b00      	cmp	r3, #0
 800679a:	d002      	beq.n	80067a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800679c:	2301      	movs	r3, #1
 800679e:	73fb      	strb	r3, [r7, #15]
 80067a0:	e001      	b.n	80067a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80067a2:	2300      	movs	r3, #0
 80067a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80067a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr

080067b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80067b4:	b480      	push	{r7}
 80067b6:	b083      	sub	sp, #12
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	6078      	str	r0, [r7, #4]
 80067bc:	460b      	mov	r3, r1
 80067be:	807b      	strh	r3, [r7, #2]
 80067c0:	4613      	mov	r3, r2
 80067c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80067c4:	787b      	ldrb	r3, [r7, #1]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80067ca:	887a      	ldrh	r2, [r7, #2]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80067d0:	e003      	b.n	80067da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80067d2:	887b      	ldrh	r3, [r7, #2]
 80067d4:	041a      	lsls	r2, r3, #16
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	619a      	str	r2, [r3, #24]
}
 80067da:	bf00      	nop
 80067dc:	370c      	adds	r7, #12
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
	...

080067e8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b082      	sub	sp, #8
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	4603      	mov	r3, r0
 80067f0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067f2:	4b08      	ldr	r3, [pc, #32]	; (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067f4:	695a      	ldr	r2, [r3, #20]
 80067f6:	88fb      	ldrh	r3, [r7, #6]
 80067f8:	4013      	ands	r3, r2
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d006      	beq.n	800680c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067fe:	4a05      	ldr	r2, [pc, #20]	; (8006814 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006800:	88fb      	ldrh	r3, [r7, #6]
 8006802:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006804:	88fb      	ldrh	r3, [r7, #6]
 8006806:	4618      	mov	r0, r3
 8006808:	f7fb fe9a 	bl	8002540 <HAL_GPIO_EXTI_Callback>
  }
}
 800680c:	bf00      	nop
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}
 8006814:	40013c00 	.word	0x40013c00

08006818 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d101      	bne.n	800682a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006826:	2301      	movs	r3, #1
 8006828:	e12b      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	d106      	bne.n	8006844 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2200      	movs	r2, #0
 800683a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800683e:	6878      	ldr	r0, [r7, #4]
 8006840:	f7fe f88e 	bl	8004960 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2224      	movs	r2, #36	; 0x24
 8006848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	f022 0201 	bic.w	r2, r2, #1
 800685a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	681a      	ldr	r2, [r3, #0]
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800686a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	681a      	ldr	r2, [r3, #0]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800687a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800687c:	f002 fe10 	bl	80094a0 <HAL_RCC_GetPCLK1Freq>
 8006880:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	4a81      	ldr	r2, [pc, #516]	; (8006a8c <HAL_I2C_Init+0x274>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d807      	bhi.n	800689c <HAL_I2C_Init+0x84>
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	4a80      	ldr	r2, [pc, #512]	; (8006a90 <HAL_I2C_Init+0x278>)
 8006890:	4293      	cmp	r3, r2
 8006892:	bf94      	ite	ls
 8006894:	2301      	movls	r3, #1
 8006896:	2300      	movhi	r3, #0
 8006898:	b2db      	uxtb	r3, r3
 800689a:	e006      	b.n	80068aa <HAL_I2C_Init+0x92>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	4a7d      	ldr	r2, [pc, #500]	; (8006a94 <HAL_I2C_Init+0x27c>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	bf94      	ite	ls
 80068a4:	2301      	movls	r3, #1
 80068a6:	2300      	movhi	r3, #0
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d001      	beq.n	80068b2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	e0e7      	b.n	8006a82 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a78      	ldr	r2, [pc, #480]	; (8006a98 <HAL_I2C_Init+0x280>)
 80068b6:	fba2 2303 	umull	r2, r3, r2, r3
 80068ba:	0c9b      	lsrs	r3, r3, #18
 80068bc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	68ba      	ldr	r2, [r7, #8]
 80068ce:	430a      	orrs	r2, r1
 80068d0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a1b      	ldr	r3, [r3, #32]
 80068d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	4a6a      	ldr	r2, [pc, #424]	; (8006a8c <HAL_I2C_Init+0x274>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d802      	bhi.n	80068ec <HAL_I2C_Init+0xd4>
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	3301      	adds	r3, #1
 80068ea:	e009      	b.n	8006900 <HAL_I2C_Init+0xe8>
 80068ec:	68bb      	ldr	r3, [r7, #8]
 80068ee:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068f2:	fb02 f303 	mul.w	r3, r2, r3
 80068f6:	4a69      	ldr	r2, [pc, #420]	; (8006a9c <HAL_I2C_Init+0x284>)
 80068f8:	fba2 2303 	umull	r2, r3, r2, r3
 80068fc:	099b      	lsrs	r3, r3, #6
 80068fe:	3301      	adds	r3, #1
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	6812      	ldr	r2, [r2, #0]
 8006904:	430b      	orrs	r3, r1
 8006906:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	69db      	ldr	r3, [r3, #28]
 800690e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006912:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	685b      	ldr	r3, [r3, #4]
 800691a:	495c      	ldr	r1, [pc, #368]	; (8006a8c <HAL_I2C_Init+0x274>)
 800691c:	428b      	cmp	r3, r1
 800691e:	d819      	bhi.n	8006954 <HAL_I2C_Init+0x13c>
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	1e59      	subs	r1, r3, #1
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	005b      	lsls	r3, r3, #1
 800692a:	fbb1 f3f3 	udiv	r3, r1, r3
 800692e:	1c59      	adds	r1, r3, #1
 8006930:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006934:	400b      	ands	r3, r1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <HAL_I2C_Init+0x138>
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	1e59      	subs	r1, r3, #1
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	005b      	lsls	r3, r3, #1
 8006944:	fbb1 f3f3 	udiv	r3, r1, r3
 8006948:	3301      	adds	r3, #1
 800694a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800694e:	e051      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006950:	2304      	movs	r3, #4
 8006952:	e04f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d111      	bne.n	8006980 <HAL_I2C_Init+0x168>
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	1e58      	subs	r0, r3, #1
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6859      	ldr	r1, [r3, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	005b      	lsls	r3, r3, #1
 8006968:	440b      	add	r3, r1
 800696a:	fbb0 f3f3 	udiv	r3, r0, r3
 800696e:	3301      	adds	r3, #1
 8006970:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006974:	2b00      	cmp	r3, #0
 8006976:	bf0c      	ite	eq
 8006978:	2301      	moveq	r3, #1
 800697a:	2300      	movne	r3, #0
 800697c:	b2db      	uxtb	r3, r3
 800697e:	e012      	b.n	80069a6 <HAL_I2C_Init+0x18e>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	1e58      	subs	r0, r3, #1
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	6859      	ldr	r1, [r3, #4]
 8006988:	460b      	mov	r3, r1
 800698a:	009b      	lsls	r3, r3, #2
 800698c:	440b      	add	r3, r1
 800698e:	0099      	lsls	r1, r3, #2
 8006990:	440b      	add	r3, r1
 8006992:	fbb0 f3f3 	udiv	r3, r0, r3
 8006996:	3301      	adds	r3, #1
 8006998:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800699c:	2b00      	cmp	r3, #0
 800699e:	bf0c      	ite	eq
 80069a0:	2301      	moveq	r3, #1
 80069a2:	2300      	movne	r3, #0
 80069a4:	b2db      	uxtb	r3, r3
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d001      	beq.n	80069ae <HAL_I2C_Init+0x196>
 80069aa:	2301      	movs	r3, #1
 80069ac:	e022      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	689b      	ldr	r3, [r3, #8]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d10e      	bne.n	80069d4 <HAL_I2C_Init+0x1bc>
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	1e58      	subs	r0, r3, #1
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	6859      	ldr	r1, [r3, #4]
 80069be:	460b      	mov	r3, r1
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	440b      	add	r3, r1
 80069c4:	fbb0 f3f3 	udiv	r3, r0, r3
 80069c8:	3301      	adds	r3, #1
 80069ca:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069d2:	e00f      	b.n	80069f4 <HAL_I2C_Init+0x1dc>
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	1e58      	subs	r0, r3, #1
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6859      	ldr	r1, [r3, #4]
 80069dc:	460b      	mov	r3, r1
 80069de:	009b      	lsls	r3, r3, #2
 80069e0:	440b      	add	r3, r1
 80069e2:	0099      	lsls	r1, r3, #2
 80069e4:	440b      	add	r3, r1
 80069e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80069ea:	3301      	adds	r3, #1
 80069ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069f4:	6879      	ldr	r1, [r7, #4]
 80069f6:	6809      	ldr	r1, [r1, #0]
 80069f8:	4313      	orrs	r3, r2
 80069fa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	69da      	ldr	r2, [r3, #28]
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6a1b      	ldr	r3, [r3, #32]
 8006a0e:	431a      	orrs	r2, r3
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	430a      	orrs	r2, r1
 8006a16:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	689b      	ldr	r3, [r3, #8]
 8006a1e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006a22:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006a26:	687a      	ldr	r2, [r7, #4]
 8006a28:	6911      	ldr	r1, [r2, #16]
 8006a2a:	687a      	ldr	r2, [r7, #4]
 8006a2c:	68d2      	ldr	r2, [r2, #12]
 8006a2e:	4311      	orrs	r1, r2
 8006a30:	687a      	ldr	r2, [r7, #4]
 8006a32:	6812      	ldr	r2, [r2, #0]
 8006a34:	430b      	orrs	r3, r1
 8006a36:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	68db      	ldr	r3, [r3, #12]
 8006a3e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	695a      	ldr	r2, [r3, #20]
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	699b      	ldr	r3, [r3, #24]
 8006a4a:	431a      	orrs	r2, r3
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	430a      	orrs	r2, r1
 8006a52:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f042 0201 	orr.w	r2, r2, #1
 8006a62:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2200      	movs	r2, #0
 8006a68:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2220      	movs	r2, #32
 8006a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2200      	movs	r2, #0
 8006a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a80:	2300      	movs	r3, #0
}
 8006a82:	4618      	mov	r0, r3
 8006a84:	3710      	adds	r7, #16
 8006a86:	46bd      	mov	sp, r7
 8006a88:	bd80      	pop	{r7, pc}
 8006a8a:	bf00      	nop
 8006a8c:	000186a0 	.word	0x000186a0
 8006a90:	001e847f 	.word	0x001e847f
 8006a94:	003d08ff 	.word	0x003d08ff
 8006a98:	431bde83 	.word	0x431bde83
 8006a9c:	10624dd3 	.word	0x10624dd3

08006aa0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af02      	add	r7, sp, #8
 8006aa6:	60f8      	str	r0, [r7, #12]
 8006aa8:	607a      	str	r2, [r7, #4]
 8006aaa:	461a      	mov	r2, r3
 8006aac:	460b      	mov	r3, r1
 8006aae:	817b      	strh	r3, [r7, #10]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ab4:	f7fe fb82 	bl	80051bc <HAL_GetTick>
 8006ab8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac0:	b2db      	uxtb	r3, r3
 8006ac2:	2b20      	cmp	r3, #32
 8006ac4:	f040 80e0 	bne.w	8006c88 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ac8:	697b      	ldr	r3, [r7, #20]
 8006aca:	9300      	str	r3, [sp, #0]
 8006acc:	2319      	movs	r3, #25
 8006ace:	2201      	movs	r2, #1
 8006ad0:	4970      	ldr	r1, [pc, #448]	; (8006c94 <HAL_I2C_Master_Transmit+0x1f4>)
 8006ad2:	68f8      	ldr	r0, [r7, #12]
 8006ad4:	f001 fea0 	bl	8008818 <I2C_WaitOnFlagUntilTimeout>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d001      	beq.n	8006ae2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e0d3      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d101      	bne.n	8006af0 <HAL_I2C_Master_Transmit+0x50>
 8006aec:	2302      	movs	r3, #2
 8006aee:	e0cc      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2201      	movs	r2, #1
 8006af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d007      	beq.n	8006b16 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	681a      	ldr	r2, [r3, #0]
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f042 0201 	orr.w	r2, r2, #1
 8006b14:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681a      	ldr	r2, [r3, #0]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b24:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	2221      	movs	r2, #33	; 0x21
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	2210      	movs	r2, #16
 8006b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	893a      	ldrh	r2, [r7, #8]
 8006b46:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b4c:	b29a      	uxth	r2, r3
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a50      	ldr	r2, [pc, #320]	; (8006c98 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b58:	8979      	ldrh	r1, [r7, #10]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	6a3a      	ldr	r2, [r7, #32]
 8006b5e:	68f8      	ldr	r0, [r7, #12]
 8006b60:	f001 fd30 	bl	80085c4 <I2C_MasterRequestWrite>
 8006b64:	4603      	mov	r3, r0
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d001      	beq.n	8006b6e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e08d      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b6e:	2300      	movs	r3, #0
 8006b70:	613b      	str	r3, [r7, #16]
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	695b      	ldr	r3, [r3, #20]
 8006b78:	613b      	str	r3, [r7, #16]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	699b      	ldr	r3, [r3, #24]
 8006b80:	613b      	str	r3, [r7, #16]
 8006b82:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b84:	e066      	b.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	6a39      	ldr	r1, [r7, #32]
 8006b8a:	68f8      	ldr	r0, [r7, #12]
 8006b8c:	f001 ff1a 	bl	80089c4 <I2C_WaitOnTXEFlagUntilTimeout>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d00d      	beq.n	8006bb2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b04      	cmp	r3, #4
 8006b9c:	d107      	bne.n	8006bae <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006bac:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e06b      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb6:	781a      	ldrb	r2, [r3, #0]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc2:	1c5a      	adds	r2, r3, #1
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	b29a      	uxth	r2, r3
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bda:	3b01      	subs	r3, #1
 8006bdc:	b29a      	uxth	r2, r3
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	695b      	ldr	r3, [r3, #20]
 8006be8:	f003 0304 	and.w	r3, r3, #4
 8006bec:	2b04      	cmp	r3, #4
 8006bee:	d11b      	bne.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d017      	beq.n	8006c28 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	781a      	ldrb	r2, [r3, #0]
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c12:	b29b      	uxth	r3, r3
 8006c14:	3b01      	subs	r3, #1
 8006c16:	b29a      	uxth	r2, r3
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	6a39      	ldr	r1, [r7, #32]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f001 ff0a 	bl	8008a46 <I2C_WaitOnBTFFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d00d      	beq.n	8006c54 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c3c:	2b04      	cmp	r3, #4
 8006c3e:	d107      	bne.n	8006c50 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c4e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e01a      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d194      	bne.n	8006b86 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c6a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2220      	movs	r2, #32
 8006c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	2200      	movs	r2, #0
 8006c78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c84:	2300      	movs	r3, #0
 8006c86:	e000      	b.n	8006c8a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c88:	2302      	movs	r3, #2
  }
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	3718      	adds	r7, #24
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	bd80      	pop	{r7, pc}
 8006c92:	bf00      	nop
 8006c94:	00100002 	.word	0x00100002
 8006c98:	ffff0000 	.word	0xffff0000

08006c9c <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006c9c:	b480      	push	{r7}
 8006c9e:	b087      	sub	sp, #28
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	60f8      	str	r0, [r7, #12]
 8006ca4:	607a      	str	r2, [r7, #4]
 8006ca6:	461a      	mov	r2, r3
 8006ca8:	460b      	mov	r3, r1
 8006caa:	817b      	strh	r3, [r7, #10]
 8006cac:	4613      	mov	r3, r2
 8006cae:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006cba:	b2db      	uxtb	r3, r3
 8006cbc:	2b20      	cmp	r3, #32
 8006cbe:	f040 808d 	bne.w	8006ddc <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006cc2:	4b4a      	ldr	r3, [pc, #296]	; (8006dec <HAL_I2C_Master_Receive_IT+0x150>)
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	08db      	lsrs	r3, r3, #3
 8006cc8:	4a49      	ldr	r2, [pc, #292]	; (8006df0 <HAL_I2C_Master_Receive_IT+0x154>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	0a1a      	lsrs	r2, r3, #8
 8006cd0:	4613      	mov	r3, r2
 8006cd2:	009b      	lsls	r3, r3, #2
 8006cd4:	4413      	add	r3, r2
 8006cd6:	009a      	lsls	r2, r3, #2
 8006cd8:	4413      	add	r3, r2
 8006cda:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	3b01      	subs	r3, #1
 8006ce0:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d116      	bne.n	8006d16 <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2200      	movs	r2, #0
 8006cec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	f043 0220 	orr.w	r2, r3, #32
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006d12:	2301      	movs	r3, #1
 8006d14:	e063      	b.n	8006dde <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	f003 0302 	and.w	r3, r3, #2
 8006d20:	2b02      	cmp	r3, #2
 8006d22:	d0db      	beq.n	8006cdc <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d2a:	2b01      	cmp	r3, #1
 8006d2c:	d101      	bne.n	8006d32 <HAL_I2C_Master_Receive_IT+0x96>
 8006d2e:	2302      	movs	r3, #2
 8006d30:	e055      	b.n	8006dde <HAL_I2C_Master_Receive_IT+0x142>
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2201      	movs	r2, #1
 8006d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	d007      	beq.n	8006d58 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	681a      	ldr	r2, [r3, #0]
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f042 0201 	orr.w	r2, r2, #1
 8006d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2222      	movs	r2, #34	; 0x22
 8006d6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2210      	movs	r2, #16
 8006d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	893a      	ldrh	r2, [r7, #8]
 8006d88:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d8e:	b29a      	uxth	r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	4a17      	ldr	r2, [pc, #92]	; (8006df4 <HAL_I2C_Master_Receive_IT+0x158>)
 8006d98:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d9a:	897a      	ldrh	r2, [r7, #10]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	685a      	ldr	r2, [r3, #4]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006db6:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006dc6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006dd6:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006dd8:	2300      	movs	r3, #0
 8006dda:	e000      	b.n	8006dde <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006ddc:	2302      	movs	r3, #2
  }
}
 8006dde:	4618      	mov	r0, r3
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	20000250 	.word	0x20000250
 8006df0:	14f8b589 	.word	0x14f8b589
 8006df4:	ffff0000 	.word	0xffff0000

08006df8 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006e00:	2300      	movs	r3, #0
 8006e02:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	685b      	ldr	r3, [r3, #4]
 8006e0a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e10:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006e18:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e20:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006e22:	7bfb      	ldrb	r3, [r7, #15]
 8006e24:	2b10      	cmp	r3, #16
 8006e26:	d003      	beq.n	8006e30 <HAL_I2C_EV_IRQHandler+0x38>
 8006e28:	7bfb      	ldrb	r3, [r7, #15]
 8006e2a:	2b40      	cmp	r3, #64	; 0x40
 8006e2c:	f040 80c1 	bne.w	8006fb2 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	699b      	ldr	r3, [r3, #24]
 8006e36:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	f003 0301 	and.w	r3, r3, #1
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d10d      	bne.n	8006e66 <HAL_I2C_EV_IRQHandler+0x6e>
 8006e4a:	693b      	ldr	r3, [r7, #16]
 8006e4c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e50:	d003      	beq.n	8006e5a <HAL_I2C_EV_IRQHandler+0x62>
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e58:	d101      	bne.n	8006e5e <HAL_I2C_EV_IRQHandler+0x66>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e000      	b.n	8006e60 <HAL_I2C_EV_IRQHandler+0x68>
 8006e5e:	2300      	movs	r3, #0
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	f000 8132 	beq.w	80070ca <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e66:	69fb      	ldr	r3, [r7, #28]
 8006e68:	f003 0301 	and.w	r3, r3, #1
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d00c      	beq.n	8006e8a <HAL_I2C_EV_IRQHandler+0x92>
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	0a5b      	lsrs	r3, r3, #9
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d006      	beq.n	8006e8a <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f001 fe84 	bl	8008b8a <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fd83 	bl	800798e <I2C_Master_SB>
 8006e88:	e092      	b.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e8a:	69fb      	ldr	r3, [r7, #28]
 8006e8c:	08db      	lsrs	r3, r3, #3
 8006e8e:	f003 0301 	and.w	r3, r3, #1
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d009      	beq.n	8006eaa <HAL_I2C_EV_IRQHandler+0xb2>
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	0a5b      	lsrs	r3, r3, #9
 8006e9a:	f003 0301 	and.w	r3, r3, #1
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d003      	beq.n	8006eaa <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f000 fdf9 	bl	8007a9a <I2C_Master_ADD10>
 8006ea8:	e082      	b.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006eaa:	69fb      	ldr	r3, [r7, #28]
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d009      	beq.n	8006eca <HAL_I2C_EV_IRQHandler+0xd2>
 8006eb6:	697b      	ldr	r3, [r7, #20]
 8006eb8:	0a5b      	lsrs	r3, r3, #9
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d003      	beq.n	8006eca <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fe13 	bl	8007aee <I2C_Master_ADDR>
 8006ec8:	e072      	b.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	089b      	lsrs	r3, r3, #2
 8006ece:	f003 0301 	and.w	r3, r3, #1
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d03b      	beq.n	8006f4e <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ee0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ee4:	f000 80f3 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ee8:	69fb      	ldr	r3, [r7, #28]
 8006eea:	09db      	lsrs	r3, r3, #7
 8006eec:	f003 0301 	and.w	r3, r3, #1
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d00f      	beq.n	8006f14 <HAL_I2C_EV_IRQHandler+0x11c>
 8006ef4:	697b      	ldr	r3, [r7, #20]
 8006ef6:	0a9b      	lsrs	r3, r3, #10
 8006ef8:	f003 0301 	and.w	r3, r3, #1
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d009      	beq.n	8006f14 <HAL_I2C_EV_IRQHandler+0x11c>
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	089b      	lsrs	r3, r3, #2
 8006f04:	f003 0301 	and.w	r3, r3, #1
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d103      	bne.n	8006f14 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 f9f3 	bl	80072f8 <I2C_MasterTransmit_TXE>
 8006f12:	e04d      	b.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f14:	69fb      	ldr	r3, [r7, #28]
 8006f16:	089b      	lsrs	r3, r3, #2
 8006f18:	f003 0301 	and.w	r3, r3, #1
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	f000 80d6 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	0a5b      	lsrs	r3, r3, #9
 8006f26:	f003 0301 	and.w	r3, r3, #1
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	f000 80cf 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	2b21      	cmp	r3, #33	; 0x21
 8006f34:	d103      	bne.n	8006f3e <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fa7a 	bl	8007430 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f3c:	e0c7      	b.n	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f3e:	7bfb      	ldrb	r3, [r7, #15]
 8006f40:	2b40      	cmp	r3, #64	; 0x40
 8006f42:	f040 80c4 	bne.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fae8 	bl	800751c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f4c:	e0bf      	b.n	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f5c:	f000 80b7 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f60:	69fb      	ldr	r3, [r7, #28]
 8006f62:	099b      	lsrs	r3, r3, #6
 8006f64:	f003 0301 	and.w	r3, r3, #1
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d00f      	beq.n	8006f8c <HAL_I2C_EV_IRQHandler+0x194>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	0a9b      	lsrs	r3, r3, #10
 8006f70:	f003 0301 	and.w	r3, r3, #1
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d009      	beq.n	8006f8c <HAL_I2C_EV_IRQHandler+0x194>
 8006f78:	69fb      	ldr	r3, [r7, #28]
 8006f7a:	089b      	lsrs	r3, r3, #2
 8006f7c:	f003 0301 	and.w	r3, r3, #1
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d103      	bne.n	8006f8c <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006f84:	6878      	ldr	r0, [r7, #4]
 8006f86:	f000 fb5d 	bl	8007644 <I2C_MasterReceive_RXNE>
 8006f8a:	e011      	b.n	8006fb0 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	089b      	lsrs	r3, r3, #2
 8006f90:	f003 0301 	and.w	r3, r3, #1
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f000 809a 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f9a:	697b      	ldr	r3, [r7, #20]
 8006f9c:	0a5b      	lsrs	r3, r3, #9
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	f000 8093 	beq.w	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 fc06 	bl	80077ba <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fae:	e08e      	b.n	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
 8006fb0:	e08d      	b.n	80070ce <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d004      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	695b      	ldr	r3, [r3, #20]
 8006fc0:	61fb      	str	r3, [r7, #28]
 8006fc2:	e007      	b.n	8006fd4 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	695b      	ldr	r3, [r3, #20]
 8006fd2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fd4:	69fb      	ldr	r3, [r7, #28]
 8006fd6:	085b      	lsrs	r3, r3, #1
 8006fd8:	f003 0301 	and.w	r3, r3, #1
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d012      	beq.n	8007006 <HAL_I2C_EV_IRQHandler+0x20e>
 8006fe0:	697b      	ldr	r3, [r7, #20]
 8006fe2:	0a5b      	lsrs	r3, r3, #9
 8006fe4:	f003 0301 	and.w	r3, r3, #1
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d00c      	beq.n	8007006 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006ffc:	69b9      	ldr	r1, [r7, #24]
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 ffc4 	bl	8007f8c <I2C_Slave_ADDR>
 8007004:	e066      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	091b      	lsrs	r3, r3, #4
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <HAL_I2C_EV_IRQHandler+0x22e>
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	0a5b      	lsrs	r3, r3, #9
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d003      	beq.n	8007026 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fffe 	bl	8008020 <I2C_Slave_STOPF>
 8007024:	e056      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007026:	7bbb      	ldrb	r3, [r7, #14]
 8007028:	2b21      	cmp	r3, #33	; 0x21
 800702a:	d002      	beq.n	8007032 <HAL_I2C_EV_IRQHandler+0x23a>
 800702c:	7bbb      	ldrb	r3, [r7, #14]
 800702e:	2b29      	cmp	r3, #41	; 0x29
 8007030:	d125      	bne.n	800707e <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	09db      	lsrs	r3, r3, #7
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00f      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x266>
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	0a9b      	lsrs	r3, r3, #10
 8007042:	f003 0301 	and.w	r3, r3, #1
 8007046:	2b00      	cmp	r3, #0
 8007048:	d009      	beq.n	800705e <HAL_I2C_EV_IRQHandler+0x266>
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	089b      	lsrs	r3, r3, #2
 800704e:	f003 0301 	and.w	r3, r3, #1
 8007052:	2b00      	cmp	r3, #0
 8007054:	d103      	bne.n	800705e <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 feda 	bl	8007e10 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800705c:	e039      	b.n	80070d2 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d033      	beq.n	80070d2 <HAL_I2C_EV_IRQHandler+0x2da>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	0a5b      	lsrs	r3, r3, #9
 800706e:	f003 0301 	and.w	r3, r3, #1
 8007072:	2b00      	cmp	r3, #0
 8007074:	d02d      	beq.n	80070d2 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f000 ff07 	bl	8007e8a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800707c:	e029      	b.n	80070d2 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800707e:	69fb      	ldr	r3, [r7, #28]
 8007080:	099b      	lsrs	r3, r3, #6
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00f      	beq.n	80070aa <HAL_I2C_EV_IRQHandler+0x2b2>
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	0a9b      	lsrs	r3, r3, #10
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d009      	beq.n	80070aa <HAL_I2C_EV_IRQHandler+0x2b2>
 8007096:	69fb      	ldr	r3, [r7, #28]
 8007098:	089b      	lsrs	r3, r3, #2
 800709a:	f003 0301 	and.w	r3, r3, #1
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d103      	bne.n	80070aa <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80070a2:	6878      	ldr	r0, [r7, #4]
 80070a4:	f000 ff12 	bl	8007ecc <I2C_SlaveReceive_RXNE>
 80070a8:	e014      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	089b      	lsrs	r3, r3, #2
 80070ae:	f003 0301 	and.w	r3, r3, #1
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00e      	beq.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	0a5b      	lsrs	r3, r3, #9
 80070ba:	f003 0301 	and.w	r3, r3, #1
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d008      	beq.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 ff40 	bl	8007f48 <I2C_SlaveReceive_BTF>
 80070c8:	e004      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80070ca:	bf00      	nop
 80070cc:	e002      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80070ce:	bf00      	nop
 80070d0:	e000      	b.n	80070d4 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80070d2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80070d4:	3720      	adds	r7, #32
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08a      	sub	sp, #40	; 0x28
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	695b      	ldr	r3, [r3, #20]
 80070e8:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	685b      	ldr	r3, [r3, #4]
 80070f0:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80070f2:	2300      	movs	r3, #0
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070fc:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	0a1b      	lsrs	r3, r3, #8
 8007102:	f003 0301 	and.w	r3, r3, #1
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00e      	beq.n	8007128 <HAL_I2C_ER_IRQHandler+0x4e>
 800710a:	69fb      	ldr	r3, [r7, #28]
 800710c:	0a1b      	lsrs	r3, r3, #8
 800710e:	f003 0301 	and.w	r3, r3, #1
 8007112:	2b00      	cmp	r3, #0
 8007114:	d008      	beq.n	8007128 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8007116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007118:	f043 0301 	orr.w	r3, r3, #1
 800711c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007126:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007128:	6a3b      	ldr	r3, [r7, #32]
 800712a:	0a5b      	lsrs	r3, r3, #9
 800712c:	f003 0301 	and.w	r3, r3, #1
 8007130:	2b00      	cmp	r3, #0
 8007132:	d00e      	beq.n	8007152 <HAL_I2C_ER_IRQHandler+0x78>
 8007134:	69fb      	ldr	r3, [r7, #28]
 8007136:	0a1b      	lsrs	r3, r3, #8
 8007138:	f003 0301 	and.w	r3, r3, #1
 800713c:	2b00      	cmp	r3, #0
 800713e:	d008      	beq.n	8007152 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007142:	f043 0302 	orr.w	r3, r3, #2
 8007146:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007150:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007152:	6a3b      	ldr	r3, [r7, #32]
 8007154:	0a9b      	lsrs	r3, r3, #10
 8007156:	f003 0301 	and.w	r3, r3, #1
 800715a:	2b00      	cmp	r3, #0
 800715c:	d03f      	beq.n	80071de <HAL_I2C_ER_IRQHandler+0x104>
 800715e:	69fb      	ldr	r3, [r7, #28]
 8007160:	0a1b      	lsrs	r3, r3, #8
 8007162:	f003 0301 	and.w	r3, r3, #1
 8007166:	2b00      	cmp	r3, #0
 8007168:	d039      	beq.n	80071de <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800716a:	7efb      	ldrb	r3, [r7, #27]
 800716c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007172:	b29b      	uxth	r3, r3
 8007174:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800717c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007182:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8007184:	7ebb      	ldrb	r3, [r7, #26]
 8007186:	2b20      	cmp	r3, #32
 8007188:	d112      	bne.n	80071b0 <HAL_I2C_ER_IRQHandler+0xd6>
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10f      	bne.n	80071b0 <HAL_I2C_ER_IRQHandler+0xd6>
 8007190:	7cfb      	ldrb	r3, [r7, #19]
 8007192:	2b21      	cmp	r3, #33	; 0x21
 8007194:	d008      	beq.n	80071a8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8007196:	7cfb      	ldrb	r3, [r7, #19]
 8007198:	2b29      	cmp	r3, #41	; 0x29
 800719a:	d005      	beq.n	80071a8 <HAL_I2C_ER_IRQHandler+0xce>
 800719c:	7cfb      	ldrb	r3, [r7, #19]
 800719e:	2b28      	cmp	r3, #40	; 0x28
 80071a0:	d106      	bne.n	80071b0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	2b21      	cmp	r3, #33	; 0x21
 80071a6:	d103      	bne.n	80071b0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f001 f869 	bl	8008280 <I2C_Slave_AF>
 80071ae:	e016      	b.n	80071de <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80071b8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80071ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071bc:	f043 0304 	orr.w	r3, r3, #4
 80071c0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80071c2:	7efb      	ldrb	r3, [r7, #27]
 80071c4:	2b10      	cmp	r3, #16
 80071c6:	d002      	beq.n	80071ce <HAL_I2C_ER_IRQHandler+0xf4>
 80071c8:	7efb      	ldrb	r3, [r7, #27]
 80071ca:	2b40      	cmp	r3, #64	; 0x40
 80071cc:	d107      	bne.n	80071de <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071dc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80071de:	6a3b      	ldr	r3, [r7, #32]
 80071e0:	0adb      	lsrs	r3, r3, #11
 80071e2:	f003 0301 	and.w	r3, r3, #1
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00e      	beq.n	8007208 <HAL_I2C_ER_IRQHandler+0x12e>
 80071ea:	69fb      	ldr	r3, [r7, #28]
 80071ec:	0a1b      	lsrs	r3, r3, #8
 80071ee:	f003 0301 	and.w	r3, r3, #1
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d008      	beq.n	8007208 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	f043 0308 	orr.w	r3, r3, #8
 80071fc:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8007206:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720a:	2b00      	cmp	r3, #0
 800720c:	d008      	beq.n	8007220 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007214:	431a      	orrs	r2, r3
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f001 f8a0 	bl	8008360 <I2C_ITError>
  }
}
 8007220:	bf00      	nop
 8007222:	3728      	adds	r7, #40	; 0x28
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007228:	b480      	push	{r7}
 800722a:	b083      	sub	sp, #12
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007230:	bf00      	nop
 8007232:	370c      	adds	r7, #12
 8007234:	46bd      	mov	sp, r7
 8007236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723a:	4770      	bx	lr

0800723c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800726c:	bf00      	nop
 800726e:	370c      	adds	r7, #12
 8007270:	46bd      	mov	sp, r7
 8007272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007276:	4770      	bx	lr

08007278 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007278:	b480      	push	{r7}
 800727a:	b083      	sub	sp, #12
 800727c:	af00      	add	r7, sp, #0
 800727e:	6078      	str	r0, [r7, #4]
 8007280:	460b      	mov	r3, r1
 8007282:	70fb      	strb	r3, [r7, #3]
 8007284:	4613      	mov	r3, r2
 8007286:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007288:	bf00      	nop
 800728a:	370c      	adds	r7, #12
 800728c:	46bd      	mov	sp, r7
 800728e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007292:	4770      	bx	lr

08007294 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800729c:	bf00      	nop
 800729e:	370c      	adds	r7, #12
 80072a0:	46bd      	mov	sp, r7
 80072a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a6:	4770      	bx	lr

080072a8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072a8:	b480      	push	{r7}
 80072aa:	b083      	sub	sp, #12
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr

080072bc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr

080072d0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b083      	sub	sp, #12
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80072d8:	bf00      	nop
 80072da:	370c      	adds	r7, #12
 80072dc:	46bd      	mov	sp, r7
 80072de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e2:	4770      	bx	lr

080072e4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b083      	sub	sp, #12
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007306:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007314:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800731a:	2b00      	cmp	r3, #0
 800731c:	d150      	bne.n	80073c0 <I2C_MasterTransmit_TXE+0xc8>
 800731e:	7bfb      	ldrb	r3, [r7, #15]
 8007320:	2b21      	cmp	r3, #33	; 0x21
 8007322:	d14d      	bne.n	80073c0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007324:	68bb      	ldr	r3, [r7, #8]
 8007326:	2b08      	cmp	r3, #8
 8007328:	d01d      	beq.n	8007366 <I2C_MasterTransmit_TXE+0x6e>
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	2b20      	cmp	r3, #32
 800732e:	d01a      	beq.n	8007366 <I2C_MasterTransmit_TXE+0x6e>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007336:	d016      	beq.n	8007366 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007346:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2211      	movs	r2, #17
 800734c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2220      	movs	r2, #32
 800735a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800735e:	6878      	ldr	r0, [r7, #4]
 8007360:	f7ff ff62 	bl	8007228 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007364:	e060      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685a      	ldr	r2, [r3, #4]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007374:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007384:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2220      	movs	r2, #32
 8007390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800739a:	b2db      	uxtb	r3, r3
 800739c:	2b40      	cmp	r3, #64	; 0x40
 800739e:	d107      	bne.n	80073b0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f7ff ff7d 	bl	80072a8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073ae:	e03b      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2200      	movs	r2, #0
 80073b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80073b8:	6878      	ldr	r0, [r7, #4]
 80073ba:	f7ff ff35 	bl	8007228 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80073be:	e033      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80073c0:	7bfb      	ldrb	r3, [r7, #15]
 80073c2:	2b21      	cmp	r3, #33	; 0x21
 80073c4:	d005      	beq.n	80073d2 <I2C_MasterTransmit_TXE+0xda>
 80073c6:	7bbb      	ldrb	r3, [r7, #14]
 80073c8:	2b40      	cmp	r3, #64	; 0x40
 80073ca:	d12d      	bne.n	8007428 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	2b22      	cmp	r3, #34	; 0x22
 80073d0:	d12a      	bne.n	8007428 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d108      	bne.n	80073ee <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	685a      	ldr	r2, [r3, #4]
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073ea:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80073ec:	e01c      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073f4:	b2db      	uxtb	r3, r3
 80073f6:	2b40      	cmp	r3, #64	; 0x40
 80073f8:	d103      	bne.n	8007402 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f88e 	bl	800751c <I2C_MemoryTransmit_TXE_BTF>
}
 8007400:	e012      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007406:	781a      	ldrb	r2, [r3, #0]
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800741c:	b29b      	uxth	r3, r3
 800741e:	3b01      	subs	r3, #1
 8007420:	b29a      	uxth	r2, r3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007426:	e7ff      	b.n	8007428 <I2C_MasterTransmit_TXE+0x130>
 8007428:	bf00      	nop
 800742a:	3710      	adds	r7, #16
 800742c:	46bd      	mov	sp, r7
 800742e:	bd80      	pop	{r7, pc}

08007430 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b084      	sub	sp, #16
 8007434:	af00      	add	r7, sp, #0
 8007436:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800743c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b21      	cmp	r3, #33	; 0x21
 8007448:	d164      	bne.n	8007514 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800744e:	b29b      	uxth	r3, r3
 8007450:	2b00      	cmp	r3, #0
 8007452:	d012      	beq.n	800747a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007464:	1c5a      	adds	r2, r3, #1
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800746e:	b29b      	uxth	r3, r3
 8007470:	3b01      	subs	r3, #1
 8007472:	b29a      	uxth	r2, r3
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007478:	e04c      	b.n	8007514 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b08      	cmp	r3, #8
 800747e:	d01d      	beq.n	80074bc <I2C_MasterTransmit_BTF+0x8c>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2b20      	cmp	r3, #32
 8007484:	d01a      	beq.n	80074bc <I2C_MasterTransmit_BTF+0x8c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800748c:	d016      	beq.n	80074bc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	685a      	ldr	r2, [r3, #4]
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800749c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2211      	movs	r2, #17
 80074a2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80074b4:	6878      	ldr	r0, [r7, #4]
 80074b6:	f7ff feb7 	bl	8007228 <HAL_I2C_MasterTxCpltCallback>
}
 80074ba:	e02b      	b.n	8007514 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	685a      	ldr	r2, [r3, #4]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80074ca:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	681a      	ldr	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074da:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2200      	movs	r2, #0
 80074e0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2220      	movs	r2, #32
 80074e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	2b40      	cmp	r3, #64	; 0x40
 80074f4:	d107      	bne.n	8007506 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	2200      	movs	r2, #0
 80074fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f7ff fed2 	bl	80072a8 <HAL_I2C_MemTxCpltCallback>
}
 8007504:	e006      	b.n	8007514 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f7ff fe8a 	bl	8007228 <HAL_I2C_MasterTxCpltCallback>
}
 8007514:	bf00      	nop
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800752a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	2b00      	cmp	r3, #0
 8007532:	d11d      	bne.n	8007570 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007538:	2b01      	cmp	r3, #1
 800753a:	d10b      	bne.n	8007554 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007540:	b2da      	uxtb	r2, r3
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800754c:	1c9a      	adds	r2, r3, #2
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8007552:	e073      	b.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007558:	b29b      	uxth	r3, r3
 800755a:	121b      	asrs	r3, r3, #8
 800755c:	b2da      	uxtb	r2, r3
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007568:	1c5a      	adds	r2, r3, #1
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800756e:	e065      	b.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007574:	2b01      	cmp	r3, #1
 8007576:	d10b      	bne.n	8007590 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800757c:	b2da      	uxtb	r2, r3
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007588:	1c5a      	adds	r2, r3, #1
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800758e:	e055      	b.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007594:	2b02      	cmp	r3, #2
 8007596:	d151      	bne.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b22      	cmp	r3, #34	; 0x22
 800759c:	d10d      	bne.n	80075ba <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	681a      	ldr	r2, [r3, #0]
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80075ac:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075b2:	1c5a      	adds	r2, r3, #1
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	651a      	str	r2, [r3, #80]	; 0x50
}
 80075b8:	e040      	b.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075be:	b29b      	uxth	r3, r3
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d015      	beq.n	80075f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
 80075c6:	2b21      	cmp	r3, #33	; 0x21
 80075c8:	d112      	bne.n	80075f0 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ce:	781a      	ldrb	r2, [r3, #0]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075da:	1c5a      	adds	r2, r3, #1
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075e4:	b29b      	uxth	r3, r3
 80075e6:	3b01      	subs	r3, #1
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075ee:	e025      	b.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d120      	bne.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b21      	cmp	r3, #33	; 0x21
 80075fe:	d11d      	bne.n	800763c <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	685a      	ldr	r2, [r3, #4]
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800760e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800761e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2220      	movs	r2, #32
 800762a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2200      	movs	r2, #0
 8007632:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007636:	6878      	ldr	r0, [r7, #4]
 8007638:	f7ff fe36 	bl	80072a8 <HAL_I2C_MemTxCpltCallback>
}
 800763c:	bf00      	nop
 800763e:	3710      	adds	r7, #16
 8007640:	46bd      	mov	sp, r7
 8007642:	bd80      	pop	{r7, pc}

08007644 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b084      	sub	sp, #16
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b22      	cmp	r3, #34	; 0x22
 8007656:	f040 80ac 	bne.w	80077b2 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765e:	b29b      	uxth	r3, r3
 8007660:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	2b03      	cmp	r3, #3
 8007666:	d921      	bls.n	80076ac <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	691a      	ldr	r2, [r3, #16]
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007672:	b2d2      	uxtb	r2, r2
 8007674:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767a:	1c5a      	adds	r2, r3, #1
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007692:	b29b      	uxth	r3, r3
 8007694:	2b03      	cmp	r3, #3
 8007696:	f040 808c 	bne.w	80077b2 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685a      	ldr	r2, [r3, #4]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a8:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 80076aa:	e082      	b.n	80077b2 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b0:	2b02      	cmp	r3, #2
 80076b2:	d075      	beq.n	80077a0 <I2C_MasterReceive_RXNE+0x15c>
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	2b01      	cmp	r3, #1
 80076b8:	d002      	beq.n	80076c0 <I2C_MasterReceive_RXNE+0x7c>
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d16f      	bne.n	80077a0 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80076c0:	6878      	ldr	r0, [r7, #4]
 80076c2:	f001 fa01 	bl	8008ac8 <I2C_WaitOnSTOPRequestThroughIT>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d142      	bne.n	8007752 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076da:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	685a      	ldr	r2, [r3, #4]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076ea:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	691a      	ldr	r2, [r3, #16]
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f6:	b2d2      	uxtb	r2, r2
 80076f8:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076fe:	1c5a      	adds	r2, r3, #1
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007708:	b29b      	uxth	r3, r3
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	2220      	movs	r2, #32
 8007716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007720:	b2db      	uxtb	r3, r3
 8007722:	2b40      	cmp	r3, #64	; 0x40
 8007724:	d10a      	bne.n	800773c <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f7ff fdc1 	bl	80072bc <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800773a:	e03a      	b.n	80077b2 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2212      	movs	r2, #18
 8007748:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f7ff fd76 	bl	800723c <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007750:	e02f      	b.n	80077b2 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	685a      	ldr	r2, [r3, #4]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007760:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	691a      	ldr	r2, [r3, #16]
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800776c:	b2d2      	uxtb	r2, r2
 800776e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007774:	1c5a      	adds	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800777e:	b29b      	uxth	r3, r3
 8007780:	3b01      	subs	r3, #1
 8007782:	b29a      	uxth	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2220      	movs	r2, #32
 800778c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2200      	movs	r2, #0
 8007794:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f7ff fd99 	bl	80072d0 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800779e:	e008      	b.n	80077b2 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ae:	605a      	str	r2, [r3, #4]
}
 80077b0:	e7ff      	b.n	80077b2 <I2C_MasterReceive_RXNE+0x16e>
 80077b2:	bf00      	nop
 80077b4:	3710      	adds	r7, #16
 80077b6:	46bd      	mov	sp, r7
 80077b8:	bd80      	pop	{r7, pc}

080077ba <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80077ba:	b580      	push	{r7, lr}
 80077bc:	b084      	sub	sp, #16
 80077be:	af00      	add	r7, sp, #0
 80077c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077c6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	2b04      	cmp	r3, #4
 80077d0:	d11b      	bne.n	800780a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	685a      	ldr	r2, [r3, #4]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	691a      	ldr	r2, [r3, #16]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	b2d2      	uxtb	r2, r2
 80077ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077f4:	1c5a      	adds	r2, r3, #1
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077fe:	b29b      	uxth	r3, r3
 8007800:	3b01      	subs	r3, #1
 8007802:	b29a      	uxth	r2, r3
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007808:	e0bd      	b.n	8007986 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	2b03      	cmp	r3, #3
 8007812:	d129      	bne.n	8007868 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	685a      	ldr	r2, [r3, #4]
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007822:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2b04      	cmp	r3, #4
 8007828:	d00a      	beq.n	8007840 <I2C_MasterReceive_BTF+0x86>
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	2b02      	cmp	r3, #2
 800782e:	d007      	beq.n	8007840 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800783e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	681b      	ldr	r3, [r3, #0]
 8007844:	691a      	ldr	r2, [r3, #16]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800784a:	b2d2      	uxtb	r2, r2
 800784c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800785c:	b29b      	uxth	r3, r3
 800785e:	3b01      	subs	r3, #1
 8007860:	b29a      	uxth	r2, r3
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007866:	e08e      	b.n	8007986 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800786c:	b29b      	uxth	r3, r3
 800786e:	2b02      	cmp	r3, #2
 8007870:	d176      	bne.n	8007960 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d002      	beq.n	800787e <I2C_MasterReceive_BTF+0xc4>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2b10      	cmp	r3, #16
 800787c:	d108      	bne.n	8007890 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	681a      	ldr	r2, [r3, #0]
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800788c:	601a      	str	r2, [r3, #0]
 800788e:	e019      	b.n	80078c4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	2b04      	cmp	r3, #4
 8007894:	d002      	beq.n	800789c <I2C_MasterReceive_BTF+0xe2>
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d108      	bne.n	80078ae <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80078aa:	601a      	str	r2, [r3, #0]
 80078ac:	e00a      	b.n	80078c4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	2b10      	cmp	r3, #16
 80078b2:	d007      	beq.n	80078c4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	681a      	ldr	r2, [r3, #0]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078c2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	691a      	ldr	r2, [r3, #16]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ce:	b2d2      	uxtb	r2, r2
 80078d0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d6:	1c5a      	adds	r2, r3, #1
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078e0:	b29b      	uxth	r3, r3
 80078e2:	3b01      	subs	r3, #1
 80078e4:	b29a      	uxth	r2, r3
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	691a      	ldr	r2, [r3, #16]
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f4:	b2d2      	uxtb	r2, r2
 80078f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078fc:	1c5a      	adds	r2, r3, #1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007906:	b29b      	uxth	r3, r3
 8007908:	3b01      	subs	r3, #1
 800790a:	b29a      	uxth	r2, r3
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	685a      	ldr	r2, [r3, #4]
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800791e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	2220      	movs	r2, #32
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800792e:	b2db      	uxtb	r3, r3
 8007930:	2b40      	cmp	r3, #64	; 0x40
 8007932:	d10a      	bne.n	800794a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2200      	movs	r2, #0
 8007940:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7ff fcba 	bl	80072bc <HAL_I2C_MemRxCpltCallback>
}
 8007948:	e01d      	b.n	8007986 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	2200      	movs	r2, #0
 800794e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2212      	movs	r2, #18
 8007956:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f7ff fc6f 	bl	800723c <HAL_I2C_MasterRxCpltCallback>
}
 800795e:	e012      	b.n	8007986 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	691a      	ldr	r2, [r3, #16]
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800796a:	b2d2      	uxtb	r2, r2
 800796c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007972:	1c5a      	adds	r2, r3, #1
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800797c:	b29b      	uxth	r3, r3
 800797e:	3b01      	subs	r3, #1
 8007980:	b29a      	uxth	r2, r3
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007986:	bf00      	nop
 8007988:	3710      	adds	r7, #16
 800798a:	46bd      	mov	sp, r7
 800798c:	bd80      	pop	{r7, pc}

0800798e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800798e:	b480      	push	{r7}
 8007990:	b083      	sub	sp, #12
 8007992:	af00      	add	r7, sp, #0
 8007994:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800799c:	b2db      	uxtb	r3, r3
 800799e:	2b40      	cmp	r3, #64	; 0x40
 80079a0:	d117      	bne.n	80079d2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	461a      	mov	r2, r3
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079ba:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80079bc:	e067      	b.n	8007a8e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	f043 0301 	orr.w	r3, r3, #1
 80079c8:	b2da      	uxtb	r2, r3
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	611a      	str	r2, [r3, #16]
}
 80079d0:	e05d      	b.n	8007a8e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079da:	d133      	bne.n	8007a44 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079e2:	b2db      	uxtb	r3, r3
 80079e4:	2b21      	cmp	r3, #33	; 0x21
 80079e6:	d109      	bne.n	80079fc <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	461a      	mov	r2, r3
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079f8:	611a      	str	r2, [r3, #16]
 80079fa:	e008      	b.n	8007a0e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a00:	b2db      	uxtb	r3, r3
 8007a02:	f043 0301 	orr.w	r3, r3, #1
 8007a06:	b2da      	uxtb	r2, r3
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d004      	beq.n	8007a20 <I2C_Master_SB+0x92>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d108      	bne.n	8007a32 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d032      	beq.n	8007a8e <I2C_Master_SB+0x100>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d02d      	beq.n	8007a8e <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	685a      	ldr	r2, [r3, #4]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a40:	605a      	str	r2, [r3, #4]
}
 8007a42:	e024      	b.n	8007a8e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d10e      	bne.n	8007a6a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	11db      	asrs	r3, r3, #7
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	f003 0306 	and.w	r3, r3, #6
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	f063 030f 	orn	r3, r3, #15
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	611a      	str	r2, [r3, #16]
}
 8007a68:	e011      	b.n	8007a8e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a6e:	2b01      	cmp	r3, #1
 8007a70:	d10d      	bne.n	8007a8e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	11db      	asrs	r3, r3, #7
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	f003 0306 	and.w	r3, r3, #6
 8007a80:	b2db      	uxtb	r3, r3
 8007a82:	f063 030e 	orn	r3, r3, #14
 8007a86:	b2da      	uxtb	r2, r3
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	681b      	ldr	r3, [r3, #0]
 8007a8c:	611a      	str	r2, [r3, #16]
}
 8007a8e:	bf00      	nop
 8007a90:	370c      	adds	r7, #12
 8007a92:	46bd      	mov	sp, r7
 8007a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a98:	4770      	bx	lr

08007a9a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a9a:	b480      	push	{r7}
 8007a9c:	b083      	sub	sp, #12
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aa6:	b2da      	uxtb	r2, r3
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d004      	beq.n	8007ac0 <I2C_Master_ADD10+0x26>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d108      	bne.n	8007ad2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d00c      	beq.n	8007ae2 <I2C_Master_ADD10+0x48>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	685a      	ldr	r2, [r3, #4]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ae0:	605a      	str	r2, [r3, #4]
  }
}
 8007ae2:	bf00      	nop
 8007ae4:	370c      	adds	r7, #12
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aec:	4770      	bx	lr

08007aee <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007aee:	b480      	push	{r7}
 8007af0:	b091      	sub	sp, #68	; 0x44
 8007af2:	af00      	add	r7, sp, #0
 8007af4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007afc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b04:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b12:	b2db      	uxtb	r3, r3
 8007b14:	2b22      	cmp	r3, #34	; 0x22
 8007b16:	f040 8169 	bne.w	8007dec <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d10f      	bne.n	8007b42 <I2C_Master_ADDR+0x54>
 8007b22:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007b26:	2b40      	cmp	r3, #64	; 0x40
 8007b28:	d10b      	bne.n	8007b42 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	695b      	ldr	r3, [r3, #20]
 8007b34:	633b      	str	r3, [r7, #48]	; 0x30
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	699b      	ldr	r3, [r3, #24]
 8007b3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b40:	e160      	b.n	8007e04 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d11d      	bne.n	8007b86 <I2C_Master_ADDR+0x98>
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b52:	d118      	bne.n	8007b86 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b54:	2300      	movs	r3, #0
 8007b56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	695b      	ldr	r3, [r3, #20]
 8007b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	699b      	ldr	r3, [r3, #24]
 8007b66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b78:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b7e:	1c5a      	adds	r2, r3, #1
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	651a      	str	r2, [r3, #80]	; 0x50
 8007b84:	e13e      	b.n	8007e04 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d113      	bne.n	8007bb8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b90:	2300      	movs	r3, #0
 8007b92:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	695b      	ldr	r3, [r3, #20]
 8007b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	699b      	ldr	r3, [r3, #24]
 8007ba2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	681a      	ldr	r2, [r3, #0]
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007bb4:	601a      	str	r2, [r3, #0]
 8007bb6:	e115      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bbc:	b29b      	uxth	r3, r3
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	f040 808a 	bne.w	8007cd8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007bc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bca:	d137      	bne.n	8007c3c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681a      	ldr	r2, [r3, #0]
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bda:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	685b      	ldr	r3, [r3, #4]
 8007be2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007be6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bea:	d113      	bne.n	8007c14 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681a      	ldr	r2, [r3, #0]
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bfa:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	627b      	str	r3, [r7, #36]	; 0x24
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	627b      	str	r3, [r7, #36]	; 0x24
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	699b      	ldr	r3, [r3, #24]
 8007c0e:	627b      	str	r3, [r7, #36]	; 0x24
 8007c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c12:	e0e7      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c14:	2300      	movs	r3, #0
 8007c16:	623b      	str	r3, [r7, #32]
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	695b      	ldr	r3, [r3, #20]
 8007c1e:	623b      	str	r3, [r7, #32]
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699b      	ldr	r3, [r3, #24]
 8007c26:	623b      	str	r3, [r7, #32]
 8007c28:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c38:	601a      	str	r2, [r3, #0]
 8007c3a:	e0d3      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c3e:	2b08      	cmp	r3, #8
 8007c40:	d02e      	beq.n	8007ca0 <I2C_Master_ADDR+0x1b2>
 8007c42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c44:	2b20      	cmp	r3, #32
 8007c46:	d02b      	beq.n	8007ca0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c4a:	2b12      	cmp	r3, #18
 8007c4c:	d102      	bne.n	8007c54 <I2C_Master_ADDR+0x166>
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	2b01      	cmp	r3, #1
 8007c52:	d125      	bne.n	8007ca0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c56:	2b04      	cmp	r3, #4
 8007c58:	d00e      	beq.n	8007c78 <I2C_Master_ADDR+0x18a>
 8007c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d00b      	beq.n	8007c78 <I2C_Master_ADDR+0x18a>
 8007c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c62:	2b10      	cmp	r3, #16
 8007c64:	d008      	beq.n	8007c78 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	681a      	ldr	r2, [r3, #0]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c74:	601a      	str	r2, [r3, #0]
 8007c76:	e007      	b.n	8007c88 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	681a      	ldr	r2, [r3, #0]
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c86:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c88:	2300      	movs	r3, #0
 8007c8a:	61fb      	str	r3, [r7, #28]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	695b      	ldr	r3, [r3, #20]
 8007c92:	61fb      	str	r3, [r7, #28]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	699b      	ldr	r3, [r3, #24]
 8007c9a:	61fb      	str	r3, [r7, #28]
 8007c9c:	69fb      	ldr	r3, [r7, #28]
 8007c9e:	e0a1      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cae:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695b      	ldr	r3, [r3, #20]
 8007cba:	61bb      	str	r3, [r7, #24]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	61bb      	str	r3, [r7, #24]
 8007cc4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	681a      	ldr	r2, [r3, #0]
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cd4:	601a      	str	r2, [r3, #0]
 8007cd6:	e085      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cdc:	b29b      	uxth	r3, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d14d      	bne.n	8007d7e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ce4:	2b04      	cmp	r3, #4
 8007ce6:	d016      	beq.n	8007d16 <I2C_Master_ADDR+0x228>
 8007ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d013      	beq.n	8007d16 <I2C_Master_ADDR+0x228>
 8007cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cf0:	2b10      	cmp	r3, #16
 8007cf2:	d010      	beq.n	8007d16 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d02:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	681a      	ldr	r2, [r3, #0]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d12:	601a      	str	r2, [r3, #0]
 8007d14:	e007      	b.n	8007d26 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	681a      	ldr	r2, [r3, #0]
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d24:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	685b      	ldr	r3, [r3, #4]
 8007d2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d34:	d117      	bne.n	8007d66 <I2C_Master_ADDR+0x278>
 8007d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d3c:	d00b      	beq.n	8007d56 <I2C_Master_ADDR+0x268>
 8007d3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d40:	2b01      	cmp	r3, #1
 8007d42:	d008      	beq.n	8007d56 <I2C_Master_ADDR+0x268>
 8007d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d46:	2b08      	cmp	r3, #8
 8007d48:	d005      	beq.n	8007d56 <I2C_Master_ADDR+0x268>
 8007d4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d4c:	2b10      	cmp	r3, #16
 8007d4e:	d002      	beq.n	8007d56 <I2C_Master_ADDR+0x268>
 8007d50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d52:	2b20      	cmp	r3, #32
 8007d54:	d107      	bne.n	8007d66 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685a      	ldr	r2, [r3, #4]
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d64:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d66:	2300      	movs	r3, #0
 8007d68:	617b      	str	r3, [r7, #20]
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	695b      	ldr	r3, [r3, #20]
 8007d70:	617b      	str	r3, [r7, #20]
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	699b      	ldr	r3, [r3, #24]
 8007d78:	617b      	str	r3, [r7, #20]
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	e032      	b.n	8007de4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d8c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	685b      	ldr	r3, [r3, #4]
 8007d94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d9c:	d117      	bne.n	8007dce <I2C_Master_ADDR+0x2e0>
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007da4:	d00b      	beq.n	8007dbe <I2C_Master_ADDR+0x2d0>
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	2b01      	cmp	r3, #1
 8007daa:	d008      	beq.n	8007dbe <I2C_Master_ADDR+0x2d0>
 8007dac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dae:	2b08      	cmp	r3, #8
 8007db0:	d005      	beq.n	8007dbe <I2C_Master_ADDR+0x2d0>
 8007db2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d002      	beq.n	8007dbe <I2C_Master_ADDR+0x2d0>
 8007db8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dba:	2b20      	cmp	r3, #32
 8007dbc:	d107      	bne.n	8007dce <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	685a      	ldr	r2, [r3, #4]
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007dcc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dce:	2300      	movs	r3, #0
 8007dd0:	613b      	str	r3, [r7, #16]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	695b      	ldr	r3, [r3, #20]
 8007dd8:	613b      	str	r3, [r7, #16]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	613b      	str	r3, [r7, #16]
 8007de2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2200      	movs	r2, #0
 8007de8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007dea:	e00b      	b.n	8007e04 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007dec:	2300      	movs	r3, #0
 8007dee:	60fb      	str	r3, [r7, #12]
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	695b      	ldr	r3, [r3, #20]
 8007df6:	60fb      	str	r3, [r7, #12]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	699b      	ldr	r3, [r3, #24]
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	68fb      	ldr	r3, [r7, #12]
}
 8007e02:	e7ff      	b.n	8007e04 <I2C_Master_ADDR+0x316>
 8007e04:	bf00      	nop
 8007e06:	3744      	adds	r7, #68	; 0x44
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0e:	4770      	bx	lr

08007e10 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b084      	sub	sp, #16
 8007e14:	af00      	add	r7, sp, #0
 8007e16:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e1e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d02b      	beq.n	8007e82 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e2e:	781a      	ldrb	r2, [r3, #0]
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e3a:	1c5a      	adds	r2, r3, #1
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	3b01      	subs	r3, #1
 8007e48:	b29a      	uxth	r2, r3
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e52:	b29b      	uxth	r3, r3
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d114      	bne.n	8007e82 <I2C_SlaveTransmit_TXE+0x72>
 8007e58:	7bfb      	ldrb	r3, [r7, #15]
 8007e5a:	2b29      	cmp	r3, #41	; 0x29
 8007e5c:	d111      	bne.n	8007e82 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e6c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2221      	movs	r2, #33	; 0x21
 8007e72:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	2228      	movs	r2, #40	; 0x28
 8007e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e7c:	6878      	ldr	r0, [r7, #4]
 8007e7e:	f7ff f9e7 	bl	8007250 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e82:	bf00      	nop
 8007e84:	3710      	adds	r7, #16
 8007e86:	46bd      	mov	sp, r7
 8007e88:	bd80      	pop	{r7, pc}

08007e8a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e8a:	b480      	push	{r7}
 8007e8c:	b083      	sub	sp, #12
 8007e8e:	af00      	add	r7, sp, #0
 8007e90:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e96:	b29b      	uxth	r3, r3
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d011      	beq.n	8007ec0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ea0:	781a      	ldrb	r2, [r3, #0]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eac:	1c5a      	adds	r2, r3, #1
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	3b01      	subs	r3, #1
 8007eba:	b29a      	uxth	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr

08007ecc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eda:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ee0:	b29b      	uxth	r3, r3
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d02c      	beq.n	8007f40 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	691a      	ldr	r2, [r3, #16]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef0:	b2d2      	uxtb	r2, r2
 8007ef2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ef8:	1c5a      	adds	r2, r3, #1
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f02:	b29b      	uxth	r3, r3
 8007f04:	3b01      	subs	r3, #1
 8007f06:	b29a      	uxth	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f10:	b29b      	uxth	r3, r3
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d114      	bne.n	8007f40 <I2C_SlaveReceive_RXNE+0x74>
 8007f16:	7bfb      	ldrb	r3, [r7, #15]
 8007f18:	2b2a      	cmp	r3, #42	; 0x2a
 8007f1a:	d111      	bne.n	8007f40 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f2a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2222      	movs	r2, #34	; 0x22
 8007f30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2228      	movs	r2, #40	; 0x28
 8007f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f3a:	6878      	ldr	r0, [r7, #4]
 8007f3c:	f7ff f992 	bl	8007264 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}

08007f48 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b083      	sub	sp, #12
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f54:	b29b      	uxth	r3, r3
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d012      	beq.n	8007f80 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	691a      	ldr	r2, [r3, #16]
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f64:	b2d2      	uxtb	r2, r2
 8007f66:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f6c:	1c5a      	adds	r2, r3, #1
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f76:	b29b      	uxth	r3, r3
 8007f78:	3b01      	subs	r3, #1
 8007f7a:	b29a      	uxth	r2, r3
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f80:	bf00      	nop
 8007f82:	370c      	adds	r7, #12
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b084      	sub	sp, #16
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f96:	2300      	movs	r3, #0
 8007f98:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007fa0:	b2db      	uxtb	r3, r3
 8007fa2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007fa6:	2b28      	cmp	r3, #40	; 0x28
 8007fa8:	d127      	bne.n	8007ffa <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fb8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007fba:	683b      	ldr	r3, [r7, #0]
 8007fbc:	089b      	lsrs	r3, r3, #2
 8007fbe:	f003 0301 	and.w	r3, r3, #1
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d101      	bne.n	8007fca <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	09db      	lsrs	r3, r3, #7
 8007fce:	f003 0301 	and.w	r3, r3, #1
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68db      	ldr	r3, [r3, #12]
 8007fda:	81bb      	strh	r3, [r7, #12]
 8007fdc:	e002      	b.n	8007fe4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007fec:	89ba      	ldrh	r2, [r7, #12]
 8007fee:	7bfb      	ldrb	r3, [r7, #15]
 8007ff0:	4619      	mov	r1, r3
 8007ff2:	6878      	ldr	r0, [r7, #4]
 8007ff4:	f7ff f940 	bl	8007278 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ff8:	e00e      	b.n	8008018 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60bb      	str	r3, [r7, #8]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	60bb      	str	r3, [r7, #8]
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	699b      	ldr	r3, [r3, #24]
 800800c:	60bb      	str	r3, [r7, #8]
 800800e:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	2200      	movs	r2, #0
 8008014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}

08008020 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008020:	b580      	push	{r7, lr}
 8008022:	b084      	sub	sp, #16
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	685a      	ldr	r2, [r3, #4]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800803e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008040:	2300      	movs	r3, #0
 8008042:	60bb      	str	r3, [r7, #8]
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	60bb      	str	r3, [r7, #8]
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	681a      	ldr	r2, [r3, #0]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	f042 0201 	orr.w	r2, r2, #1
 800805a:	601a      	str	r2, [r3, #0]
 800805c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	681a      	ldr	r2, [r3, #0]
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800806c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008078:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800807c:	d172      	bne.n	8008164 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800807e:	7bfb      	ldrb	r3, [r7, #15]
 8008080:	2b22      	cmp	r3, #34	; 0x22
 8008082:	d002      	beq.n	800808a <I2C_Slave_STOPF+0x6a>
 8008084:	7bfb      	ldrb	r3, [r7, #15]
 8008086:	2b2a      	cmp	r3, #42	; 0x2a
 8008088:	d135      	bne.n	80080f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	685b      	ldr	r3, [r3, #4]
 8008092:	b29a      	uxth	r2, r3
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800809c:	b29b      	uxth	r3, r3
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d005      	beq.n	80080ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a6:	f043 0204 	orr.w	r2, r3, #4
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	685a      	ldr	r2, [r3, #4]
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c2:	4618      	mov	r0, r3
 80080c4:	f7fe f8e0 	bl	8006288 <HAL_DMA_GetState>
 80080c8:	4603      	mov	r3, r0
 80080ca:	2b01      	cmp	r3, #1
 80080cc:	d049      	beq.n	8008162 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	4a69      	ldr	r2, [pc, #420]	; (8008278 <I2C_Slave_STOPF+0x258>)
 80080d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080da:	4618      	mov	r0, r3
 80080dc:	f7fd ff28 	bl	8005f30 <HAL_DMA_Abort_IT>
 80080e0:	4603      	mov	r3, r0
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d03d      	beq.n	8008162 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080f0:	4610      	mov	r0, r2
 80080f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080f4:	e035      	b.n	8008162 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	685b      	ldr	r3, [r3, #4]
 80080fe:	b29a      	uxth	r2, r3
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008108:	b29b      	uxth	r3, r3
 800810a:	2b00      	cmp	r3, #0
 800810c:	d005      	beq.n	800811a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f043 0204 	orr.w	r2, r3, #4
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	685a      	ldr	r2, [r3, #4]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008128:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800812e:	4618      	mov	r0, r3
 8008130:	f7fe f8aa 	bl	8006288 <HAL_DMA_GetState>
 8008134:	4603      	mov	r3, r0
 8008136:	2b01      	cmp	r3, #1
 8008138:	d014      	beq.n	8008164 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800813e:	4a4e      	ldr	r2, [pc, #312]	; (8008278 <I2C_Slave_STOPF+0x258>)
 8008140:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	4618      	mov	r0, r3
 8008148:	f7fd fef2 	bl	8005f30 <HAL_DMA_Abort_IT>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	d008      	beq.n	8008164 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008156:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008158:	687a      	ldr	r2, [r7, #4]
 800815a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800815c:	4610      	mov	r0, r2
 800815e:	4798      	blx	r3
 8008160:	e000      	b.n	8008164 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008162:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008168:	b29b      	uxth	r3, r3
 800816a:	2b00      	cmp	r3, #0
 800816c:	d03e      	beq.n	80081ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	695b      	ldr	r3, [r3, #20]
 8008174:	f003 0304 	and.w	r3, r3, #4
 8008178:	2b04      	cmp	r3, #4
 800817a:	d112      	bne.n	80081a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008186:	b2d2      	uxtb	r2, r2
 8008188:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818e:	1c5a      	adds	r2, r3, #1
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008198:	b29b      	uxth	r3, r3
 800819a:	3b01      	subs	r3, #1
 800819c:	b29a      	uxth	r2, r3
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	695b      	ldr	r3, [r3, #20]
 80081a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081ac:	2b40      	cmp	r3, #64	; 0x40
 80081ae:	d112      	bne.n	80081d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	691a      	ldr	r2, [r3, #16]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081ba:	b2d2      	uxtb	r2, r2
 80081bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081c2:	1c5a      	adds	r2, r3, #1
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081da:	b29b      	uxth	r3, r3
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d005      	beq.n	80081ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081e4:	f043 0204 	orr.w	r2, r3, #4
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d003      	beq.n	80081fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f000 f8b3 	bl	8008360 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80081fa:	e039      	b.n	8008270 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081fc:	7bfb      	ldrb	r3, [r7, #15]
 80081fe:	2b2a      	cmp	r3, #42	; 0x2a
 8008200:	d109      	bne.n	8008216 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2200      	movs	r2, #0
 8008206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2228      	movs	r2, #40	; 0x28
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008210:	6878      	ldr	r0, [r7, #4]
 8008212:	f7ff f827 	bl	8007264 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800821c:	b2db      	uxtb	r3, r3
 800821e:	2b28      	cmp	r3, #40	; 0x28
 8008220:	d111      	bne.n	8008246 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	4a15      	ldr	r2, [pc, #84]	; (800827c <I2C_Slave_STOPF+0x25c>)
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2200      	movs	r2, #0
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2220      	movs	r2, #32
 8008232:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2200      	movs	r2, #0
 800823a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f7ff f828 	bl	8007294 <HAL_I2C_ListenCpltCallback>
}
 8008244:	e014      	b.n	8008270 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800824a:	2b22      	cmp	r3, #34	; 0x22
 800824c:	d002      	beq.n	8008254 <I2C_Slave_STOPF+0x234>
 800824e:	7bfb      	ldrb	r3, [r7, #15]
 8008250:	2b22      	cmp	r3, #34	; 0x22
 8008252:	d10d      	bne.n	8008270 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	2200      	movs	r2, #0
 8008258:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2220      	movs	r2, #32
 800825e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2200      	movs	r2, #0
 8008266:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800826a:	6878      	ldr	r0, [r7, #4]
 800826c:	f7fe fffa 	bl	8007264 <HAL_I2C_SlaveRxCpltCallback>
}
 8008270:	bf00      	nop
 8008272:	3710      	adds	r7, #16
 8008274:	46bd      	mov	sp, r7
 8008276:	bd80      	pop	{r7, pc}
 8008278:	080086c9 	.word	0x080086c9
 800827c:	ffff0000 	.word	0xffff0000

08008280 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800828e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008294:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	2b08      	cmp	r3, #8
 800829a:	d002      	beq.n	80082a2 <I2C_Slave_AF+0x22>
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b20      	cmp	r3, #32
 80082a0:	d129      	bne.n	80082f6 <I2C_Slave_AF+0x76>
 80082a2:	7bfb      	ldrb	r3, [r7, #15]
 80082a4:	2b28      	cmp	r3, #40	; 0x28
 80082a6:	d126      	bne.n	80082f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	4a2c      	ldr	r2, [pc, #176]	; (800835c <I2C_Slave_AF+0xdc>)
 80082ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	685a      	ldr	r2, [r3, #4]
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	681a      	ldr	r2, [r3, #0]
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80082d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2220      	movs	r2, #32
 80082e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082ee:	6878      	ldr	r0, [r7, #4]
 80082f0:	f7fe ffd0 	bl	8007294 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80082f4:	e02e      	b.n	8008354 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082f6:	7bfb      	ldrb	r3, [r7, #15]
 80082f8:	2b21      	cmp	r3, #33	; 0x21
 80082fa:	d126      	bne.n	800834a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a17      	ldr	r2, [pc, #92]	; (800835c <I2C_Slave_AF+0xdc>)
 8008300:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2221      	movs	r2, #33	; 0x21
 8008306:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2200      	movs	r2, #0
 8008314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	685a      	ldr	r2, [r3, #4]
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008326:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008330:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	681a      	ldr	r2, [r3, #0]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008340:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7fe ff84 	bl	8007250 <HAL_I2C_SlaveTxCpltCallback>
}
 8008348:	e004      	b.n	8008354 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008352:	615a      	str	r2, [r3, #20]
}
 8008354:	bf00      	nop
 8008356:	3710      	adds	r7, #16
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}
 800835c:	ffff0000 	.word	0xffff0000

08008360 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008360:	b580      	push	{r7, lr}
 8008362:	b084      	sub	sp, #16
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800836e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008376:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008378:	7bbb      	ldrb	r3, [r7, #14]
 800837a:	2b10      	cmp	r3, #16
 800837c:	d002      	beq.n	8008384 <I2C_ITError+0x24>
 800837e:	7bbb      	ldrb	r3, [r7, #14]
 8008380:	2b40      	cmp	r3, #64	; 0x40
 8008382:	d10a      	bne.n	800839a <I2C_ITError+0x3a>
 8008384:	7bfb      	ldrb	r3, [r7, #15]
 8008386:	2b22      	cmp	r3, #34	; 0x22
 8008388:	d107      	bne.n	800839a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008398:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800839a:	7bfb      	ldrb	r3, [r7, #15]
 800839c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083a0:	2b28      	cmp	r3, #40	; 0x28
 80083a2:	d107      	bne.n	80083b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2200      	movs	r2, #0
 80083a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	2228      	movs	r2, #40	; 0x28
 80083ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80083b2:	e015      	b.n	80083e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083c2:	d00a      	beq.n	80083da <I2C_ITError+0x7a>
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b60      	cmp	r3, #96	; 0x60
 80083c8:	d007      	beq.n	80083da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	2220      	movs	r2, #32
 80083ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	2200      	movs	r2, #0
 80083d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083ee:	d162      	bne.n	80084b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	685a      	ldr	r2, [r3, #4]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008408:	b2db      	uxtb	r3, r3
 800840a:	2b01      	cmp	r3, #1
 800840c:	d020      	beq.n	8008450 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008412:	4a6a      	ldr	r2, [pc, #424]	; (80085bc <I2C_ITError+0x25c>)
 8008414:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800841a:	4618      	mov	r0, r3
 800841c:	f7fd fd88 	bl	8005f30 <HAL_DMA_Abort_IT>
 8008420:	4603      	mov	r3, r0
 8008422:	2b00      	cmp	r3, #0
 8008424:	f000 8089 	beq.w	800853a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	681a      	ldr	r2, [r3, #0]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	f022 0201 	bic.w	r2, r2, #1
 8008436:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	2220      	movs	r2, #32
 800843c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800844a:	4610      	mov	r0, r2
 800844c:	4798      	blx	r3
 800844e:	e074      	b.n	800853a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	4a59      	ldr	r2, [pc, #356]	; (80085bc <I2C_ITError+0x25c>)
 8008456:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	4618      	mov	r0, r3
 800845e:	f7fd fd67 	bl	8005f30 <HAL_DMA_Abort_IT>
 8008462:	4603      	mov	r3, r0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d068      	beq.n	800853a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	695b      	ldr	r3, [r3, #20]
 800846e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008472:	2b40      	cmp	r3, #64	; 0x40
 8008474:	d10b      	bne.n	800848e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	691a      	ldr	r2, [r3, #16]
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008480:	b2d2      	uxtb	r2, r2
 8008482:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008488:	1c5a      	adds	r2, r3, #1
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	681a      	ldr	r2, [r3, #0]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f022 0201 	bic.w	r2, r2, #1
 800849c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	2220      	movs	r2, #32
 80084a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ac:	687a      	ldr	r2, [r7, #4]
 80084ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	e041      	b.n	800853a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084bc:	b2db      	uxtb	r3, r3
 80084be:	2b60      	cmp	r3, #96	; 0x60
 80084c0:	d125      	bne.n	800850e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	2220      	movs	r2, #32
 80084c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2200      	movs	r2, #0
 80084ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	695b      	ldr	r3, [r3, #20]
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b40      	cmp	r3, #64	; 0x40
 80084dc:	d10b      	bne.n	80084f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	691a      	ldr	r2, [r3, #16]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084e8:	b2d2      	uxtb	r2, r2
 80084ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f0:	1c5a      	adds	r2, r3, #1
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f022 0201 	bic.w	r2, r2, #1
 8008504:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f7fe feec 	bl	80072e4 <HAL_I2C_AbortCpltCallback>
 800850c:	e015      	b.n	800853a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	695b      	ldr	r3, [r3, #20]
 8008514:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008518:	2b40      	cmp	r3, #64	; 0x40
 800851a:	d10b      	bne.n	8008534 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	691a      	ldr	r2, [r3, #16]
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	1c5a      	adds	r2, r3, #1
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f7fe fecb 	bl	80072d0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800853e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	f003 0301 	and.w	r3, r3, #1
 8008546:	2b00      	cmp	r3, #0
 8008548:	d10e      	bne.n	8008568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008550:	2b00      	cmp	r3, #0
 8008552:	d109      	bne.n	8008568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800855a:	2b00      	cmp	r3, #0
 800855c:	d104      	bne.n	8008568 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800855e:	68bb      	ldr	r3, [r7, #8]
 8008560:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8008564:	2b00      	cmp	r3, #0
 8008566:	d007      	beq.n	8008578 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	685a      	ldr	r2, [r3, #4]
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008576:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800857e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	f003 0304 	and.w	r3, r3, #4
 8008588:	2b04      	cmp	r3, #4
 800858a:	d113      	bne.n	80085b4 <I2C_ITError+0x254>
 800858c:	7bfb      	ldrb	r3, [r7, #15]
 800858e:	2b28      	cmp	r3, #40	; 0x28
 8008590:	d110      	bne.n	80085b4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	4a0a      	ldr	r2, [pc, #40]	; (80085c0 <I2C_ITError+0x260>)
 8008596:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	2200      	movs	r2, #0
 800859c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2220      	movs	r2, #32
 80085a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f7fe fe70 	bl	8007294 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80085b4:	bf00      	nop
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}
 80085bc:	080086c9 	.word	0x080086c9
 80085c0:	ffff0000 	.word	0xffff0000

080085c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80085c4:	b580      	push	{r7, lr}
 80085c6:	b088      	sub	sp, #32
 80085c8:	af02      	add	r7, sp, #8
 80085ca:	60f8      	str	r0, [r7, #12]
 80085cc:	607a      	str	r2, [r7, #4]
 80085ce:	603b      	str	r3, [r7, #0]
 80085d0:	460b      	mov	r3, r1
 80085d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80085d4:	68fb      	ldr	r3, [r7, #12]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d006      	beq.n	80085ee <I2C_MasterRequestWrite+0x2a>
 80085e0:	697b      	ldr	r3, [r7, #20]
 80085e2:	2b01      	cmp	r3, #1
 80085e4:	d003      	beq.n	80085ee <I2C_MasterRequestWrite+0x2a>
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085ec:	d108      	bne.n	8008600 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e00b      	b.n	8008618 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008604:	2b12      	cmp	r3, #18
 8008606:	d107      	bne.n	8008618 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	681a      	ldr	r2, [r3, #0]
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008616:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2200      	movs	r2, #0
 8008620:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008624:	68f8      	ldr	r0, [r7, #12]
 8008626:	f000 f8f7 	bl	8008818 <I2C_WaitOnFlagUntilTimeout>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d00d      	beq.n	800864c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800863a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863e:	d103      	bne.n	8008648 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008646:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008648:	2303      	movs	r3, #3
 800864a:	e035      	b.n	80086b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800864c:	68fb      	ldr	r3, [r7, #12]
 800864e:	691b      	ldr	r3, [r3, #16]
 8008650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008654:	d108      	bne.n	8008668 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008656:	897b      	ldrh	r3, [r7, #10]
 8008658:	b2db      	uxtb	r3, r3
 800865a:	461a      	mov	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008664:	611a      	str	r2, [r3, #16]
 8008666:	e01b      	b.n	80086a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008668:	897b      	ldrh	r3, [r7, #10]
 800866a:	11db      	asrs	r3, r3, #7
 800866c:	b2db      	uxtb	r3, r3
 800866e:	f003 0306 	and.w	r3, r3, #6
 8008672:	b2db      	uxtb	r3, r3
 8008674:	f063 030f 	orn	r3, r3, #15
 8008678:	b2da      	uxtb	r2, r3
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	490e      	ldr	r1, [pc, #56]	; (80086c0 <I2C_MasterRequestWrite+0xfc>)
 8008686:	68f8      	ldr	r0, [r7, #12]
 8008688:	f000 f91d 	bl	80088c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800868c:	4603      	mov	r3, r0
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008692:	2301      	movs	r3, #1
 8008694:	e010      	b.n	80086b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008696:	897b      	ldrh	r3, [r7, #10]
 8008698:	b2da      	uxtb	r2, r3
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80086a0:	683b      	ldr	r3, [r7, #0]
 80086a2:	687a      	ldr	r2, [r7, #4]
 80086a4:	4907      	ldr	r1, [pc, #28]	; (80086c4 <I2C_MasterRequestWrite+0x100>)
 80086a6:	68f8      	ldr	r0, [r7, #12]
 80086a8:	f000 f90d 	bl	80088c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80086ac:	4603      	mov	r3, r0
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d001      	beq.n	80086b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e000      	b.n	80086b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80086b6:	2300      	movs	r3, #0
}
 80086b8:	4618      	mov	r0, r3
 80086ba:	3718      	adds	r7, #24
 80086bc:	46bd      	mov	sp, r7
 80086be:	bd80      	pop	{r7, pc}
 80086c0:	00010008 	.word	0x00010008
 80086c4:	00010002 	.word	0x00010002

080086c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	b086      	sub	sp, #24
 80086cc:	af00      	add	r7, sp, #0
 80086ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80086d0:	2300      	movs	r3, #0
 80086d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086e2:	4b4b      	ldr	r3, [pc, #300]	; (8008810 <I2C_DMAAbort+0x148>)
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	08db      	lsrs	r3, r3, #3
 80086e8:	4a4a      	ldr	r2, [pc, #296]	; (8008814 <I2C_DMAAbort+0x14c>)
 80086ea:	fba2 2303 	umull	r2, r3, r2, r3
 80086ee:	0a1a      	lsrs	r2, r3, #8
 80086f0:	4613      	mov	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4413      	add	r3, r2
 80086f6:	00da      	lsls	r2, r3, #3
 80086f8:	1ad3      	subs	r3, r2, r3
 80086fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d106      	bne.n	8008710 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008702:	697b      	ldr	r3, [r7, #20]
 8008704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008706:	f043 0220 	orr.w	r2, r3, #32
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800870e:	e00a      	b.n	8008726 <I2C_DMAAbort+0x5e>
    }
    count--;
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	3b01      	subs	r3, #1
 8008714:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008716:	697b      	ldr	r3, [r7, #20]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008724:	d0ea      	beq.n	80086fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008726:	697b      	ldr	r3, [r7, #20]
 8008728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800872a:	2b00      	cmp	r3, #0
 800872c:	d003      	beq.n	8008736 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008732:	2200      	movs	r2, #0
 8008734:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800873a:	2b00      	cmp	r3, #0
 800873c:	d003      	beq.n	8008746 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008742:	2200      	movs	r2, #0
 8008744:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008746:	697b      	ldr	r3, [r7, #20]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681a      	ldr	r2, [r3, #0]
 800874c:	697b      	ldr	r3, [r7, #20]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008754:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008756:	697b      	ldr	r3, [r7, #20]
 8008758:	2200      	movs	r2, #0
 800875a:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800875c:	697b      	ldr	r3, [r7, #20]
 800875e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008760:	2b00      	cmp	r3, #0
 8008762:	d003      	beq.n	800876c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008768:	2200      	movs	r2, #0
 800876a:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800876c:	697b      	ldr	r3, [r7, #20]
 800876e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008770:	2b00      	cmp	r3, #0
 8008772:	d003      	beq.n	800877c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008774:	697b      	ldr	r3, [r7, #20]
 8008776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008778:	2200      	movs	r2, #0
 800877a:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800877c:	697b      	ldr	r3, [r7, #20]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681a      	ldr	r2, [r3, #0]
 8008782:	697b      	ldr	r3, [r7, #20]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	f022 0201 	bic.w	r2, r2, #1
 800878a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800878c:	697b      	ldr	r3, [r7, #20]
 800878e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b60      	cmp	r3, #96	; 0x60
 8008796:	d10e      	bne.n	80087b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	2220      	movs	r2, #32
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80087a0:	697b      	ldr	r3, [r7, #20]
 80087a2:	2200      	movs	r2, #0
 80087a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80087ae:	6978      	ldr	r0, [r7, #20]
 80087b0:	f7fe fd98 	bl	80072e4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80087b4:	e027      	b.n	8008806 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087b6:	7cfb      	ldrb	r3, [r7, #19]
 80087b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087bc:	2b28      	cmp	r3, #40	; 0x28
 80087be:	d117      	bne.n	80087f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	681a      	ldr	r2, [r3, #0]
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	f042 0201 	orr.w	r2, r2, #1
 80087ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80087d0:	697b      	ldr	r3, [r7, #20]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	681a      	ldr	r2, [r3, #0]
 80087d6:	697b      	ldr	r3, [r7, #20]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087e0:	697b      	ldr	r3, [r7, #20]
 80087e2:	2200      	movs	r2, #0
 80087e4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2228      	movs	r2, #40	; 0x28
 80087ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087ee:	e007      	b.n	8008800 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2220      	movs	r2, #32
 80087f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2200      	movs	r2, #0
 80087fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008800:	6978      	ldr	r0, [r7, #20]
 8008802:	f7fe fd65 	bl	80072d0 <HAL_I2C_ErrorCallback>
}
 8008806:	bf00      	nop
 8008808:	3718      	adds	r7, #24
 800880a:	46bd      	mov	sp, r7
 800880c:	bd80      	pop	{r7, pc}
 800880e:	bf00      	nop
 8008810:	20000250 	.word	0x20000250
 8008814:	14f8b589 	.word	0x14f8b589

08008818 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	60f8      	str	r0, [r7, #12]
 8008820:	60b9      	str	r1, [r7, #8]
 8008822:	603b      	str	r3, [r7, #0]
 8008824:	4613      	mov	r3, r2
 8008826:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008828:	e025      	b.n	8008876 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008830:	d021      	beq.n	8008876 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008832:	f7fc fcc3 	bl	80051bc <HAL_GetTick>
 8008836:	4602      	mov	r2, r0
 8008838:	69bb      	ldr	r3, [r7, #24]
 800883a:	1ad3      	subs	r3, r2, r3
 800883c:	683a      	ldr	r2, [r7, #0]
 800883e:	429a      	cmp	r2, r3
 8008840:	d302      	bcc.n	8008848 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008842:	683b      	ldr	r3, [r7, #0]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d116      	bne.n	8008876 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	2200      	movs	r2, #0
 800884c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	2220      	movs	r2, #32
 8008852:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	2200      	movs	r2, #0
 800885a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	f043 0220 	orr.w	r2, r3, #32
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008872:	2301      	movs	r3, #1
 8008874:	e023      	b.n	80088be <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	0c1b      	lsrs	r3, r3, #16
 800887a:	b2db      	uxtb	r3, r3
 800887c:	2b01      	cmp	r3, #1
 800887e:	d10d      	bne.n	800889c <I2C_WaitOnFlagUntilTimeout+0x84>
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695b      	ldr	r3, [r3, #20]
 8008886:	43da      	mvns	r2, r3
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	4013      	ands	r3, r2
 800888c:	b29b      	uxth	r3, r3
 800888e:	2b00      	cmp	r3, #0
 8008890:	bf0c      	ite	eq
 8008892:	2301      	moveq	r3, #1
 8008894:	2300      	movne	r3, #0
 8008896:	b2db      	uxtb	r3, r3
 8008898:	461a      	mov	r2, r3
 800889a:	e00c      	b.n	80088b6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	699b      	ldr	r3, [r3, #24]
 80088a2:	43da      	mvns	r2, r3
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	4013      	ands	r3, r2
 80088a8:	b29b      	uxth	r3, r3
 80088aa:	2b00      	cmp	r3, #0
 80088ac:	bf0c      	ite	eq
 80088ae:	2301      	moveq	r3, #1
 80088b0:	2300      	movne	r3, #0
 80088b2:	b2db      	uxtb	r3, r3
 80088b4:	461a      	mov	r2, r3
 80088b6:	79fb      	ldrb	r3, [r7, #7]
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d0b6      	beq.n	800882a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80088bc:	2300      	movs	r3, #0
}
 80088be:	4618      	mov	r0, r3
 80088c0:	3710      	adds	r7, #16
 80088c2:	46bd      	mov	sp, r7
 80088c4:	bd80      	pop	{r7, pc}

080088c6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b084      	sub	sp, #16
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	60f8      	str	r0, [r7, #12]
 80088ce:	60b9      	str	r1, [r7, #8]
 80088d0:	607a      	str	r2, [r7, #4]
 80088d2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80088d4:	e051      	b.n	800897a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088e4:	d123      	bne.n	800892e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	681a      	ldr	r2, [r3, #0]
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088f4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088fe:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	2200      	movs	r2, #0
 8008904:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	2220      	movs	r2, #32
 800890a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	2200      	movs	r2, #0
 8008912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800891a:	f043 0204 	orr.w	r2, r3, #4
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e046      	b.n	80089bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008934:	d021      	beq.n	800897a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008936:	f7fc fc41 	bl	80051bc <HAL_GetTick>
 800893a:	4602      	mov	r2, r0
 800893c:	683b      	ldr	r3, [r7, #0]
 800893e:	1ad3      	subs	r3, r2, r3
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	429a      	cmp	r2, r3
 8008944:	d302      	bcc.n	800894c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	2b00      	cmp	r3, #0
 800894a:	d116      	bne.n	800897a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	2200      	movs	r2, #0
 8008950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	2220      	movs	r2, #32
 8008956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	2200      	movs	r2, #0
 800895e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008966:	f043 0220 	orr.w	r2, r3, #32
 800896a:	68fb      	ldr	r3, [r7, #12]
 800896c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	2200      	movs	r2, #0
 8008972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008976:	2301      	movs	r3, #1
 8008978:	e020      	b.n	80089bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800897a:	68bb      	ldr	r3, [r7, #8]
 800897c:	0c1b      	lsrs	r3, r3, #16
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b01      	cmp	r3, #1
 8008982:	d10c      	bne.n	800899e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008984:	68fb      	ldr	r3, [r7, #12]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	695b      	ldr	r3, [r3, #20]
 800898a:	43da      	mvns	r2, r3
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	4013      	ands	r3, r2
 8008990:	b29b      	uxth	r3, r3
 8008992:	2b00      	cmp	r3, #0
 8008994:	bf14      	ite	ne
 8008996:	2301      	movne	r3, #1
 8008998:	2300      	moveq	r3, #0
 800899a:	b2db      	uxtb	r3, r3
 800899c:	e00b      	b.n	80089b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	699b      	ldr	r3, [r3, #24]
 80089a4:	43da      	mvns	r2, r3
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	4013      	ands	r3, r2
 80089aa:	b29b      	uxth	r3, r3
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	bf14      	ite	ne
 80089b0:	2301      	movne	r3, #1
 80089b2:	2300      	moveq	r3, #0
 80089b4:	b2db      	uxtb	r3, r3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d18d      	bne.n	80088d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80089ba:	2300      	movs	r3, #0
}
 80089bc:	4618      	mov	r0, r3
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}

080089c4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80089c4:	b580      	push	{r7, lr}
 80089c6:	b084      	sub	sp, #16
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089d0:	e02d      	b.n	8008a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80089d2:	68f8      	ldr	r0, [r7, #12]
 80089d4:	f000 f8aa 	bl	8008b2c <I2C_IsAcknowledgeFailed>
 80089d8:	4603      	mov	r3, r0
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d001      	beq.n	80089e2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e02d      	b.n	8008a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089e8:	d021      	beq.n	8008a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089ea:	f7fc fbe7 	bl	80051bc <HAL_GetTick>
 80089ee:	4602      	mov	r2, r0
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	1ad3      	subs	r3, r2, r3
 80089f4:	68ba      	ldr	r2, [r7, #8]
 80089f6:	429a      	cmp	r2, r3
 80089f8:	d302      	bcc.n	8008a00 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d116      	bne.n	8008a2e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	2220      	movs	r2, #32
 8008a0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2200      	movs	r2, #0
 8008a12:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a1a:	f043 0220 	orr.w	r2, r3, #32
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	2200      	movs	r2, #0
 8008a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	e007      	b.n	8008a3e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	695b      	ldr	r3, [r3, #20]
 8008a34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a38:	2b80      	cmp	r3, #128	; 0x80
 8008a3a:	d1ca      	bne.n	80089d2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a3c:	2300      	movs	r3, #0
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a52:	e02d      	b.n	8008ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a54:	68f8      	ldr	r0, [r7, #12]
 8008a56:	f000 f869 	bl	8008b2c <I2C_IsAcknowledgeFailed>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d001      	beq.n	8008a64 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a60:	2301      	movs	r3, #1
 8008a62:	e02d      	b.n	8008ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a6a:	d021      	beq.n	8008ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a6c:	f7fc fba6 	bl	80051bc <HAL_GetTick>
 8008a70:	4602      	mov	r2, r0
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	1ad3      	subs	r3, r2, r3
 8008a76:	68ba      	ldr	r2, [r7, #8]
 8008a78:	429a      	cmp	r2, r3
 8008a7a:	d302      	bcc.n	8008a82 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a7c:	68bb      	ldr	r3, [r7, #8]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d116      	bne.n	8008ab0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2200      	movs	r2, #0
 8008a86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	2220      	movs	r2, #32
 8008a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	2200      	movs	r2, #0
 8008a94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a9c:	f043 0220 	orr.w	r2, r3, #32
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008aac:	2301      	movs	r3, #1
 8008aae:	e007      	b.n	8008ac0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	695b      	ldr	r3, [r3, #20]
 8008ab6:	f003 0304 	and.w	r3, r3, #4
 8008aba:	2b04      	cmp	r3, #4
 8008abc:	d1ca      	bne.n	8008a54 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3710      	adds	r7, #16
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}

08008ac8 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008ac8:	b480      	push	{r7}
 8008aca:	b085      	sub	sp, #20
 8008acc:	af00      	add	r7, sp, #0
 8008ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ad0:	2300      	movs	r3, #0
 8008ad2:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008ad4:	4b13      	ldr	r3, [pc, #76]	; (8008b24 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	08db      	lsrs	r3, r3, #3
 8008ada:	4a13      	ldr	r2, [pc, #76]	; (8008b28 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008adc:	fba2 2303 	umull	r2, r3, r2, r3
 8008ae0:	0a1a      	lsrs	r2, r3, #8
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4413      	add	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	3b01      	subs	r3, #1
 8008aee:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d107      	bne.n	8008b06 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008afa:	f043 0220 	orr.w	r2, r3, #32
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008b02:	2301      	movs	r3, #1
 8008b04:	e008      	b.n	8008b18 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b14:	d0e9      	beq.n	8008aea <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3714      	adds	r7, #20
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b22:	4770      	bx	lr
 8008b24:	20000250 	.word	0x20000250
 8008b28:	14f8b589 	.word	0x14f8b589

08008b2c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	695b      	ldr	r3, [r3, #20]
 8008b3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b42:	d11b      	bne.n	8008b7c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b4c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2220      	movs	r2, #32
 8008b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b68:	f043 0204 	orr.w	r2, r3, #4
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	2200      	movs	r2, #0
 8008b74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b78:	2301      	movs	r3, #1
 8008b7a:	e000      	b.n	8008b7e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b7c:	2300      	movs	r3, #0
}
 8008b7e:	4618      	mov	r0, r3
 8008b80:	370c      	adds	r7, #12
 8008b82:	46bd      	mov	sp, r7
 8008b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b88:	4770      	bx	lr

08008b8a <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b8a:	b480      	push	{r7}
 8008b8c:	b083      	sub	sp, #12
 8008b8e:	af00      	add	r7, sp, #0
 8008b90:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b96:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b9a:	d103      	bne.n	8008ba4 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008ba2:	e007      	b.n	8008bb4 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ba8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008bac:	d102      	bne.n	8008bb4 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008bb4:	bf00      	nop
 8008bb6:	370c      	adds	r7, #12
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bbe:	4770      	bx	lr

08008bc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008bc0:	b580      	push	{r7, lr}
 8008bc2:	b086      	sub	sp, #24
 8008bc4:	af00      	add	r7, sp, #0
 8008bc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d101      	bne.n	8008bd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008bce:	2301      	movs	r3, #1
 8008bd0:	e267      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	f003 0301 	and.w	r3, r3, #1
 8008bda:	2b00      	cmp	r3, #0
 8008bdc:	d075      	beq.n	8008cca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bde:	4b88      	ldr	r3, [pc, #544]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008be0:	689b      	ldr	r3, [r3, #8]
 8008be2:	f003 030c 	and.w	r3, r3, #12
 8008be6:	2b04      	cmp	r3, #4
 8008be8:	d00c      	beq.n	8008c04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bea:	4b85      	ldr	r3, [pc, #532]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008bec:	689b      	ldr	r3, [r3, #8]
 8008bee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bf2:	2b08      	cmp	r3, #8
 8008bf4:	d112      	bne.n	8008c1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bf6:	4b82      	ldr	r3, [pc, #520]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008c02:	d10b      	bne.n	8008c1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c04:	4b7e      	ldr	r3, [pc, #504]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d05b      	beq.n	8008cc8 <HAL_RCC_OscConfig+0x108>
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	685b      	ldr	r3, [r3, #4]
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d157      	bne.n	8008cc8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e242      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c24:	d106      	bne.n	8008c34 <HAL_RCC_OscConfig+0x74>
 8008c26:	4b76      	ldr	r3, [pc, #472]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	4a75      	ldr	r2, [pc, #468]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c30:	6013      	str	r3, [r2, #0]
 8008c32:	e01d      	b.n	8008c70 <HAL_RCC_OscConfig+0xb0>
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	685b      	ldr	r3, [r3, #4]
 8008c38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c3c:	d10c      	bne.n	8008c58 <HAL_RCC_OscConfig+0x98>
 8008c3e:	4b70      	ldr	r3, [pc, #448]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a6f      	ldr	r2, [pc, #444]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c48:	6013      	str	r3, [r2, #0]
 8008c4a:	4b6d      	ldr	r3, [pc, #436]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	4a6c      	ldr	r2, [pc, #432]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c54:	6013      	str	r3, [r2, #0]
 8008c56:	e00b      	b.n	8008c70 <HAL_RCC_OscConfig+0xb0>
 8008c58:	4b69      	ldr	r3, [pc, #420]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a68      	ldr	r2, [pc, #416]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c62:	6013      	str	r3, [r2, #0]
 8008c64:	4b66      	ldr	r3, [pc, #408]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	4a65      	ldr	r2, [pc, #404]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	685b      	ldr	r3, [r3, #4]
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d013      	beq.n	8008ca0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c78:	f7fc faa0 	bl	80051bc <HAL_GetTick>
 8008c7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c7e:	e008      	b.n	8008c92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c80:	f7fc fa9c 	bl	80051bc <HAL_GetTick>
 8008c84:	4602      	mov	r2, r0
 8008c86:	693b      	ldr	r3, [r7, #16]
 8008c88:	1ad3      	subs	r3, r2, r3
 8008c8a:	2b64      	cmp	r3, #100	; 0x64
 8008c8c:	d901      	bls.n	8008c92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e207      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c92:	4b5b      	ldr	r3, [pc, #364]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d0f0      	beq.n	8008c80 <HAL_RCC_OscConfig+0xc0>
 8008c9e:	e014      	b.n	8008cca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ca0:	f7fc fa8c 	bl	80051bc <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ca6:	e008      	b.n	8008cba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008ca8:	f7fc fa88 	bl	80051bc <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	2b64      	cmp	r3, #100	; 0x64
 8008cb4:	d901      	bls.n	8008cba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008cb6:	2303      	movs	r3, #3
 8008cb8:	e1f3      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008cba:	4b51      	ldr	r3, [pc, #324]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1f0      	bne.n	8008ca8 <HAL_RCC_OscConfig+0xe8>
 8008cc6:	e000      	b.n	8008cca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008cc8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d063      	beq.n	8008d9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cd6:	4b4a      	ldr	r3, [pc, #296]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	f003 030c 	and.w	r3, r3, #12
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d00b      	beq.n	8008cfa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008ce2:	4b47      	ldr	r3, [pc, #284]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008ce4:	689b      	ldr	r3, [r3, #8]
 8008ce6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cea:	2b08      	cmp	r3, #8
 8008cec:	d11c      	bne.n	8008d28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cee:	4b44      	ldr	r3, [pc, #272]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008cf0:	685b      	ldr	r3, [r3, #4]
 8008cf2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	d116      	bne.n	8008d28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cfa:	4b41      	ldr	r3, [pc, #260]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f003 0302 	and.w	r3, r3, #2
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d005      	beq.n	8008d12 <HAL_RCC_OscConfig+0x152>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	68db      	ldr	r3, [r3, #12]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d001      	beq.n	8008d12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008d0e:	2301      	movs	r3, #1
 8008d10:	e1c7      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d12:	4b3b      	ldr	r3, [pc, #236]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	00db      	lsls	r3, r3, #3
 8008d20:	4937      	ldr	r1, [pc, #220]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d22:	4313      	orrs	r3, r2
 8008d24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008d26:	e03a      	b.n	8008d9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	68db      	ldr	r3, [r3, #12]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d020      	beq.n	8008d72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008d30:	4b34      	ldr	r3, [pc, #208]	; (8008e04 <HAL_RCC_OscConfig+0x244>)
 8008d32:	2201      	movs	r2, #1
 8008d34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d36:	f7fc fa41 	bl	80051bc <HAL_GetTick>
 8008d3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d3c:	e008      	b.n	8008d50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d3e:	f7fc fa3d 	bl	80051bc <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	693b      	ldr	r3, [r7, #16]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	2b02      	cmp	r3, #2
 8008d4a:	d901      	bls.n	8008d50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d4c:	2303      	movs	r3, #3
 8008d4e:	e1a8      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d50:	4b2b      	ldr	r3, [pc, #172]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f003 0302 	and.w	r3, r3, #2
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0f0      	beq.n	8008d3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d5c:	4b28      	ldr	r3, [pc, #160]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	691b      	ldr	r3, [r3, #16]
 8008d68:	00db      	lsls	r3, r3, #3
 8008d6a:	4925      	ldr	r1, [pc, #148]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	600b      	str	r3, [r1, #0]
 8008d70:	e015      	b.n	8008d9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d72:	4b24      	ldr	r3, [pc, #144]	; (8008e04 <HAL_RCC_OscConfig+0x244>)
 8008d74:	2200      	movs	r2, #0
 8008d76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d78:	f7fc fa20 	bl	80051bc <HAL_GetTick>
 8008d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d7e:	e008      	b.n	8008d92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d80:	f7fc fa1c 	bl	80051bc <HAL_GetTick>
 8008d84:	4602      	mov	r2, r0
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	1ad3      	subs	r3, r2, r3
 8008d8a:	2b02      	cmp	r3, #2
 8008d8c:	d901      	bls.n	8008d92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d8e:	2303      	movs	r3, #3
 8008d90:	e187      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d92:	4b1b      	ldr	r3, [pc, #108]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	f003 0302 	and.w	r3, r3, #2
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d1f0      	bne.n	8008d80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f003 0308 	and.w	r3, r3, #8
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d036      	beq.n	8008e18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	695b      	ldr	r3, [r3, #20]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d016      	beq.n	8008de0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008db2:	4b15      	ldr	r3, [pc, #84]	; (8008e08 <HAL_RCC_OscConfig+0x248>)
 8008db4:	2201      	movs	r2, #1
 8008db6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008db8:	f7fc fa00 	bl	80051bc <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dc0:	f7fc f9fc 	bl	80051bc <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e167      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008dd2:	4b0b      	ldr	r3, [pc, #44]	; (8008e00 <HAL_RCC_OscConfig+0x240>)
 8008dd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd6:	f003 0302 	and.w	r3, r3, #2
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d0f0      	beq.n	8008dc0 <HAL_RCC_OscConfig+0x200>
 8008dde:	e01b      	b.n	8008e18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008de0:	4b09      	ldr	r3, [pc, #36]	; (8008e08 <HAL_RCC_OscConfig+0x248>)
 8008de2:	2200      	movs	r2, #0
 8008de4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008de6:	f7fc f9e9 	bl	80051bc <HAL_GetTick>
 8008dea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dec:	e00e      	b.n	8008e0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008dee:	f7fc f9e5 	bl	80051bc <HAL_GetTick>
 8008df2:	4602      	mov	r2, r0
 8008df4:	693b      	ldr	r3, [r7, #16]
 8008df6:	1ad3      	subs	r3, r2, r3
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d907      	bls.n	8008e0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dfc:	2303      	movs	r3, #3
 8008dfe:	e150      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
 8008e00:	40023800 	.word	0x40023800
 8008e04:	42470000 	.word	0x42470000
 8008e08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008e0c:	4b88      	ldr	r3, [pc, #544]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008e10:	f003 0302 	and.w	r3, r3, #2
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1ea      	bne.n	8008dee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	f000 8097 	beq.w	8008f54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008e26:	2300      	movs	r3, #0
 8008e28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008e2a:	4b81      	ldr	r3, [pc, #516]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d10f      	bne.n	8008e56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008e36:	2300      	movs	r3, #0
 8008e38:	60bb      	str	r3, [r7, #8]
 8008e3a:	4b7d      	ldr	r3, [pc, #500]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e3e:	4a7c      	ldr	r2, [pc, #496]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e44:	6413      	str	r3, [r2, #64]	; 0x40
 8008e46:	4b7a      	ldr	r3, [pc, #488]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e4e:	60bb      	str	r3, [r7, #8]
 8008e50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e52:	2301      	movs	r3, #1
 8008e54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e56:	4b77      	ldr	r3, [pc, #476]	; (8009034 <HAL_RCC_OscConfig+0x474>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d118      	bne.n	8008e94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e62:	4b74      	ldr	r3, [pc, #464]	; (8009034 <HAL_RCC_OscConfig+0x474>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	4a73      	ldr	r2, [pc, #460]	; (8009034 <HAL_RCC_OscConfig+0x474>)
 8008e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e6e:	f7fc f9a5 	bl	80051bc <HAL_GetTick>
 8008e72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e74:	e008      	b.n	8008e88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e76:	f7fc f9a1 	bl	80051bc <HAL_GetTick>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	693b      	ldr	r3, [r7, #16]
 8008e7e:	1ad3      	subs	r3, r2, r3
 8008e80:	2b02      	cmp	r3, #2
 8008e82:	d901      	bls.n	8008e88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e84:	2303      	movs	r3, #3
 8008e86:	e10c      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e88:	4b6a      	ldr	r3, [pc, #424]	; (8009034 <HAL_RCC_OscConfig+0x474>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d0f0      	beq.n	8008e76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	689b      	ldr	r3, [r3, #8]
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d106      	bne.n	8008eaa <HAL_RCC_OscConfig+0x2ea>
 8008e9c:	4b64      	ldr	r3, [pc, #400]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea0:	4a63      	ldr	r2, [pc, #396]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	f043 0301 	orr.w	r3, r3, #1
 8008ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea8:	e01c      	b.n	8008ee4 <HAL_RCC_OscConfig+0x324>
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	2b05      	cmp	r3, #5
 8008eb0:	d10c      	bne.n	8008ecc <HAL_RCC_OscConfig+0x30c>
 8008eb2:	4b5f      	ldr	r3, [pc, #380]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008eb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008eb6:	4a5e      	ldr	r2, [pc, #376]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008eb8:	f043 0304 	orr.w	r3, r3, #4
 8008ebc:	6713      	str	r3, [r2, #112]	; 0x70
 8008ebe:	4b5c      	ldr	r3, [pc, #368]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ec2:	4a5b      	ldr	r2, [pc, #364]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ec4:	f043 0301 	orr.w	r3, r3, #1
 8008ec8:	6713      	str	r3, [r2, #112]	; 0x70
 8008eca:	e00b      	b.n	8008ee4 <HAL_RCC_OscConfig+0x324>
 8008ecc:	4b58      	ldr	r3, [pc, #352]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ece:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed0:	4a57      	ldr	r2, [pc, #348]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	6713      	str	r3, [r2, #112]	; 0x70
 8008ed8:	4b55      	ldr	r3, [pc, #340]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008eda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008edc:	4a54      	ldr	r2, [pc, #336]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008ede:	f023 0304 	bic.w	r3, r3, #4
 8008ee2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	689b      	ldr	r3, [r3, #8]
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d015      	beq.n	8008f18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eec:	f7fc f966 	bl	80051bc <HAL_GetTick>
 8008ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ef2:	e00a      	b.n	8008f0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ef4:	f7fc f962 	bl	80051bc <HAL_GetTick>
 8008ef8:	4602      	mov	r2, r0
 8008efa:	693b      	ldr	r3, [r7, #16]
 8008efc:	1ad3      	subs	r3, r2, r3
 8008efe:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d901      	bls.n	8008f0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008f06:	2303      	movs	r3, #3
 8008f08:	e0cb      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008f0a:	4b49      	ldr	r3, [pc, #292]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f0e:	f003 0302 	and.w	r3, r3, #2
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d0ee      	beq.n	8008ef4 <HAL_RCC_OscConfig+0x334>
 8008f16:	e014      	b.n	8008f42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008f18:	f7fc f950 	bl	80051bc <HAL_GetTick>
 8008f1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f1e:	e00a      	b.n	8008f36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008f20:	f7fc f94c 	bl	80051bc <HAL_GetTick>
 8008f24:	4602      	mov	r2, r0
 8008f26:	693b      	ldr	r3, [r7, #16]
 8008f28:	1ad3      	subs	r3, r2, r3
 8008f2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d901      	bls.n	8008f36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008f32:	2303      	movs	r3, #3
 8008f34:	e0b5      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008f36:	4b3e      	ldr	r3, [pc, #248]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f3a:	f003 0302 	and.w	r3, r3, #2
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d1ee      	bne.n	8008f20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	2b01      	cmp	r3, #1
 8008f46:	d105      	bne.n	8008f54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f48:	4b39      	ldr	r3, [pc, #228]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f4c:	4a38      	ldr	r2, [pc, #224]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f54:	687b      	ldr	r3, [r7, #4]
 8008f56:	699b      	ldr	r3, [r3, #24]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	f000 80a1 	beq.w	80090a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f5e:	4b34      	ldr	r3, [pc, #208]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f60:	689b      	ldr	r3, [r3, #8]
 8008f62:	f003 030c 	and.w	r3, r3, #12
 8008f66:	2b08      	cmp	r3, #8
 8008f68:	d05c      	beq.n	8009024 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	699b      	ldr	r3, [r3, #24]
 8008f6e:	2b02      	cmp	r3, #2
 8008f70:	d141      	bne.n	8008ff6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f72:	4b31      	ldr	r3, [pc, #196]	; (8009038 <HAL_RCC_OscConfig+0x478>)
 8008f74:	2200      	movs	r2, #0
 8008f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f78:	f7fc f920 	bl	80051bc <HAL_GetTick>
 8008f7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f7e:	e008      	b.n	8008f92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f80:	f7fc f91c 	bl	80051bc <HAL_GetTick>
 8008f84:	4602      	mov	r2, r0
 8008f86:	693b      	ldr	r3, [r7, #16]
 8008f88:	1ad3      	subs	r3, r2, r3
 8008f8a:	2b02      	cmp	r3, #2
 8008f8c:	d901      	bls.n	8008f92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f8e:	2303      	movs	r3, #3
 8008f90:	e087      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f92:	4b27      	ldr	r3, [pc, #156]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d1f0      	bne.n	8008f80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	69da      	ldr	r2, [r3, #28]
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6a1b      	ldr	r3, [r3, #32]
 8008fa6:	431a      	orrs	r2, r3
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fac:	019b      	lsls	r3, r3, #6
 8008fae:	431a      	orrs	r2, r3
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fb4:	085b      	lsrs	r3, r3, #1
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	041b      	lsls	r3, r3, #16
 8008fba:	431a      	orrs	r2, r3
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fc0:	061b      	lsls	r3, r3, #24
 8008fc2:	491b      	ldr	r1, [pc, #108]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008fc4:	4313      	orrs	r3, r2
 8008fc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008fc8:	4b1b      	ldr	r3, [pc, #108]	; (8009038 <HAL_RCC_OscConfig+0x478>)
 8008fca:	2201      	movs	r2, #1
 8008fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fce:	f7fc f8f5 	bl	80051bc <HAL_GetTick>
 8008fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fd4:	e008      	b.n	8008fe8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fd6:	f7fc f8f1 	bl	80051bc <HAL_GetTick>
 8008fda:	4602      	mov	r2, r0
 8008fdc:	693b      	ldr	r3, [r7, #16]
 8008fde:	1ad3      	subs	r3, r2, r3
 8008fe0:	2b02      	cmp	r3, #2
 8008fe2:	d901      	bls.n	8008fe8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e05c      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fe8:	4b11      	ldr	r3, [pc, #68]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d0f0      	beq.n	8008fd6 <HAL_RCC_OscConfig+0x416>
 8008ff4:	e054      	b.n	80090a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008ff6:	4b10      	ldr	r3, [pc, #64]	; (8009038 <HAL_RCC_OscConfig+0x478>)
 8008ff8:	2200      	movs	r2, #0
 8008ffa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008ffc:	f7fc f8de 	bl	80051bc <HAL_GetTick>
 8009000:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009002:	e008      	b.n	8009016 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009004:	f7fc f8da 	bl	80051bc <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	693b      	ldr	r3, [r7, #16]
 800900c:	1ad3      	subs	r3, r2, r3
 800900e:	2b02      	cmp	r3, #2
 8009010:	d901      	bls.n	8009016 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8009012:	2303      	movs	r3, #3
 8009014:	e045      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <HAL_RCC_OscConfig+0x470>)
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800901e:	2b00      	cmp	r3, #0
 8009020:	d1f0      	bne.n	8009004 <HAL_RCC_OscConfig+0x444>
 8009022:	e03d      	b.n	80090a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	699b      	ldr	r3, [r3, #24]
 8009028:	2b01      	cmp	r3, #1
 800902a:	d107      	bne.n	800903c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800902c:	2301      	movs	r3, #1
 800902e:	e038      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
 8009030:	40023800 	.word	0x40023800
 8009034:	40007000 	.word	0x40007000
 8009038:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800903c:	4b1b      	ldr	r3, [pc, #108]	; (80090ac <HAL_RCC_OscConfig+0x4ec>)
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	699b      	ldr	r3, [r3, #24]
 8009046:	2b01      	cmp	r3, #1
 8009048:	d028      	beq.n	800909c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009054:	429a      	cmp	r2, r3
 8009056:	d121      	bne.n	800909c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009062:	429a      	cmp	r2, r3
 8009064:	d11a      	bne.n	800909c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009066:	68fa      	ldr	r2, [r7, #12]
 8009068:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800906c:	4013      	ands	r3, r2
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009072:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009074:	4293      	cmp	r3, r2
 8009076:	d111      	bne.n	800909c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009082:	085b      	lsrs	r3, r3, #1
 8009084:	3b01      	subs	r3, #1
 8009086:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009088:	429a      	cmp	r2, r3
 800908a:	d107      	bne.n	800909c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009096:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009098:	429a      	cmp	r2, r3
 800909a:	d001      	beq.n	80090a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e000      	b.n	80090a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80090a0:	2300      	movs	r3, #0
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3718      	adds	r7, #24
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	bf00      	nop
 80090ac:	40023800 	.word	0x40023800

080090b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b0:	b580      	push	{r7, lr}
 80090b2:	b084      	sub	sp, #16
 80090b4:	af00      	add	r7, sp, #0
 80090b6:	6078      	str	r0, [r7, #4]
 80090b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d101      	bne.n	80090c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c0:	2301      	movs	r3, #1
 80090c2:	e0cc      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80090c4:	4b68      	ldr	r3, [pc, #416]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	683a      	ldr	r2, [r7, #0]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d90c      	bls.n	80090ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d2:	4b65      	ldr	r3, [pc, #404]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80090d4:	683a      	ldr	r2, [r7, #0]
 80090d6:	b2d2      	uxtb	r2, r2
 80090d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090da:	4b63      	ldr	r3, [pc, #396]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	f003 0307 	and.w	r3, r3, #7
 80090e2:	683a      	ldr	r2, [r7, #0]
 80090e4:	429a      	cmp	r2, r3
 80090e6:	d001      	beq.n	80090ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090e8:	2301      	movs	r3, #1
 80090ea:	e0b8      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d020      	beq.n	800913a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d005      	beq.n	8009110 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009104:	4b59      	ldr	r3, [pc, #356]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009106:	689b      	ldr	r3, [r3, #8]
 8009108:	4a58      	ldr	r2, [pc, #352]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 800910a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800910e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b00      	cmp	r3, #0
 800911a:	d005      	beq.n	8009128 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800911c:	4b53      	ldr	r3, [pc, #332]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	4a52      	ldr	r2, [pc, #328]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009122:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8009126:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009128:	4b50      	ldr	r3, [pc, #320]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 800912a:	689b      	ldr	r3, [r3, #8]
 800912c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	689b      	ldr	r3, [r3, #8]
 8009134:	494d      	ldr	r1, [pc, #308]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009136:	4313      	orrs	r3, r2
 8009138:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	f003 0301 	and.w	r3, r3, #1
 8009142:	2b00      	cmp	r3, #0
 8009144:	d044      	beq.n	80091d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	2b01      	cmp	r3, #1
 800914c:	d107      	bne.n	800915e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800914e:	4b47      	ldr	r3, [pc, #284]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d119      	bne.n	800918e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	e07f      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	2b02      	cmp	r3, #2
 8009164:	d003      	beq.n	800916e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800916a:	2b03      	cmp	r3, #3
 800916c:	d107      	bne.n	800917e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800916e:	4b3f      	ldr	r3, [pc, #252]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009176:	2b00      	cmp	r3, #0
 8009178:	d109      	bne.n	800918e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800917a:	2301      	movs	r3, #1
 800917c:	e06f      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800917e:	4b3b      	ldr	r3, [pc, #236]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f003 0302 	and.w	r3, r3, #2
 8009186:	2b00      	cmp	r3, #0
 8009188:	d101      	bne.n	800918e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800918a:	2301      	movs	r3, #1
 800918c:	e067      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800918e:	4b37      	ldr	r3, [pc, #220]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009190:	689b      	ldr	r3, [r3, #8]
 8009192:	f023 0203 	bic.w	r2, r3, #3
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	685b      	ldr	r3, [r3, #4]
 800919a:	4934      	ldr	r1, [pc, #208]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 800919c:	4313      	orrs	r3, r2
 800919e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80091a0:	f7fc f80c 	bl	80051bc <HAL_GetTick>
 80091a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091a6:	e00a      	b.n	80091be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80091a8:	f7fc f808 	bl	80051bc <HAL_GetTick>
 80091ac:	4602      	mov	r2, r0
 80091ae:	68fb      	ldr	r3, [r7, #12]
 80091b0:	1ad3      	subs	r3, r2, r3
 80091b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d901      	bls.n	80091be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80091ba:	2303      	movs	r3, #3
 80091bc:	e04f      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80091be:	4b2b      	ldr	r3, [pc, #172]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 80091c0:	689b      	ldr	r3, [r3, #8]
 80091c2:	f003 020c 	and.w	r2, r3, #12
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	685b      	ldr	r3, [r3, #4]
 80091ca:	009b      	lsls	r3, r3, #2
 80091cc:	429a      	cmp	r2, r3
 80091ce:	d1eb      	bne.n	80091a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80091d0:	4b25      	ldr	r3, [pc, #148]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f003 0307 	and.w	r3, r3, #7
 80091d8:	683a      	ldr	r2, [r7, #0]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20c      	bcs.n	80091f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091de:	4b22      	ldr	r3, [pc, #136]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80091e0:	683a      	ldr	r2, [r7, #0]
 80091e2:	b2d2      	uxtb	r2, r2
 80091e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091e6:	4b20      	ldr	r3, [pc, #128]	; (8009268 <HAL_RCC_ClockConfig+0x1b8>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 0307 	and.w	r3, r3, #7
 80091ee:	683a      	ldr	r2, [r7, #0]
 80091f0:	429a      	cmp	r2, r3
 80091f2:	d001      	beq.n	80091f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091f4:	2301      	movs	r3, #1
 80091f6:	e032      	b.n	800925e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f003 0304 	and.w	r3, r3, #4
 8009200:	2b00      	cmp	r3, #0
 8009202:	d008      	beq.n	8009216 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009204:	4b19      	ldr	r3, [pc, #100]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	68db      	ldr	r3, [r3, #12]
 8009210:	4916      	ldr	r1, [pc, #88]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009212:	4313      	orrs	r3, r2
 8009214:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f003 0308 	and.w	r3, r3, #8
 800921e:	2b00      	cmp	r3, #0
 8009220:	d009      	beq.n	8009236 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8009222:	4b12      	ldr	r3, [pc, #72]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009224:	689b      	ldr	r3, [r3, #8]
 8009226:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	691b      	ldr	r3, [r3, #16]
 800922e:	00db      	lsls	r3, r3, #3
 8009230:	490e      	ldr	r1, [pc, #56]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 8009232:	4313      	orrs	r3, r2
 8009234:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8009236:	f000 f821 	bl	800927c <HAL_RCC_GetSysClockFreq>
 800923a:	4602      	mov	r2, r0
 800923c:	4b0b      	ldr	r3, [pc, #44]	; (800926c <HAL_RCC_ClockConfig+0x1bc>)
 800923e:	689b      	ldr	r3, [r3, #8]
 8009240:	091b      	lsrs	r3, r3, #4
 8009242:	f003 030f 	and.w	r3, r3, #15
 8009246:	490a      	ldr	r1, [pc, #40]	; (8009270 <HAL_RCC_ClockConfig+0x1c0>)
 8009248:	5ccb      	ldrb	r3, [r1, r3]
 800924a:	fa22 f303 	lsr.w	r3, r2, r3
 800924e:	4a09      	ldr	r2, [pc, #36]	; (8009274 <HAL_RCC_ClockConfig+0x1c4>)
 8009250:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8009252:	4b09      	ldr	r3, [pc, #36]	; (8009278 <HAL_RCC_ClockConfig+0x1c8>)
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	4618      	mov	r0, r3
 8009258:	f7fb ff6c 	bl	8005134 <HAL_InitTick>

  return HAL_OK;
 800925c:	2300      	movs	r3, #0
}
 800925e:	4618      	mov	r0, r3
 8009260:	3710      	adds	r7, #16
 8009262:	46bd      	mov	sp, r7
 8009264:	bd80      	pop	{r7, pc}
 8009266:	bf00      	nop
 8009268:	40023c00 	.word	0x40023c00
 800926c:	40023800 	.word	0x40023800
 8009270:	08012580 	.word	0x08012580
 8009274:	20000250 	.word	0x20000250
 8009278:	20000254 	.word	0x20000254

0800927c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800927c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009280:	b094      	sub	sp, #80	; 0x50
 8009282:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	647b      	str	r3, [r7, #68]	; 0x44
 8009288:	2300      	movs	r3, #0
 800928a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800928c:	2300      	movs	r3, #0
 800928e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009290:	2300      	movs	r3, #0
 8009292:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009294:	4b79      	ldr	r3, [pc, #484]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	f003 030c 	and.w	r3, r3, #12
 800929c:	2b08      	cmp	r3, #8
 800929e:	d00d      	beq.n	80092bc <HAL_RCC_GetSysClockFreq+0x40>
 80092a0:	2b08      	cmp	r3, #8
 80092a2:	f200 80e1 	bhi.w	8009468 <HAL_RCC_GetSysClockFreq+0x1ec>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d002      	beq.n	80092b0 <HAL_RCC_GetSysClockFreq+0x34>
 80092aa:	2b04      	cmp	r3, #4
 80092ac:	d003      	beq.n	80092b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80092ae:	e0db      	b.n	8009468 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80092b0:	4b73      	ldr	r3, [pc, #460]	; (8009480 <HAL_RCC_GetSysClockFreq+0x204>)
 80092b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80092b4:	e0db      	b.n	800946e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80092b6:	4b73      	ldr	r3, [pc, #460]	; (8009484 <HAL_RCC_GetSysClockFreq+0x208>)
 80092b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80092ba:	e0d8      	b.n	800946e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80092bc:	4b6f      	ldr	r3, [pc, #444]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80092c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80092c6:	4b6d      	ldr	r3, [pc, #436]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 80092c8:	685b      	ldr	r3, [r3, #4]
 80092ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d063      	beq.n	800939a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80092d2:	4b6a      	ldr	r3, [pc, #424]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	099b      	lsrs	r3, r3, #6
 80092d8:	2200      	movs	r2, #0
 80092da:	63bb      	str	r3, [r7, #56]	; 0x38
 80092dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092e4:	633b      	str	r3, [r7, #48]	; 0x30
 80092e6:	2300      	movs	r3, #0
 80092e8:	637b      	str	r3, [r7, #52]	; 0x34
 80092ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80092ee:	4622      	mov	r2, r4
 80092f0:	462b      	mov	r3, r5
 80092f2:	f04f 0000 	mov.w	r0, #0
 80092f6:	f04f 0100 	mov.w	r1, #0
 80092fa:	0159      	lsls	r1, r3, #5
 80092fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009300:	0150      	lsls	r0, r2, #5
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	4621      	mov	r1, r4
 8009308:	1a51      	subs	r1, r2, r1
 800930a:	6139      	str	r1, [r7, #16]
 800930c:	4629      	mov	r1, r5
 800930e:	eb63 0301 	sbc.w	r3, r3, r1
 8009312:	617b      	str	r3, [r7, #20]
 8009314:	f04f 0200 	mov.w	r2, #0
 8009318:	f04f 0300 	mov.w	r3, #0
 800931c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009320:	4659      	mov	r1, fp
 8009322:	018b      	lsls	r3, r1, #6
 8009324:	4651      	mov	r1, sl
 8009326:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800932a:	4651      	mov	r1, sl
 800932c:	018a      	lsls	r2, r1, #6
 800932e:	4651      	mov	r1, sl
 8009330:	ebb2 0801 	subs.w	r8, r2, r1
 8009334:	4659      	mov	r1, fp
 8009336:	eb63 0901 	sbc.w	r9, r3, r1
 800933a:	f04f 0200 	mov.w	r2, #0
 800933e:	f04f 0300 	mov.w	r3, #0
 8009342:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009346:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800934a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800934e:	4690      	mov	r8, r2
 8009350:	4699      	mov	r9, r3
 8009352:	4623      	mov	r3, r4
 8009354:	eb18 0303 	adds.w	r3, r8, r3
 8009358:	60bb      	str	r3, [r7, #8]
 800935a:	462b      	mov	r3, r5
 800935c:	eb49 0303 	adc.w	r3, r9, r3
 8009360:	60fb      	str	r3, [r7, #12]
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800936e:	4629      	mov	r1, r5
 8009370:	024b      	lsls	r3, r1, #9
 8009372:	4621      	mov	r1, r4
 8009374:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009378:	4621      	mov	r1, r4
 800937a:	024a      	lsls	r2, r1, #9
 800937c:	4610      	mov	r0, r2
 800937e:	4619      	mov	r1, r3
 8009380:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009382:	2200      	movs	r2, #0
 8009384:	62bb      	str	r3, [r7, #40]	; 0x28
 8009386:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009388:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800938c:	f7f7 fc84 	bl	8000c98 <__aeabi_uldivmod>
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4613      	mov	r3, r2
 8009396:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009398:	e058      	b.n	800944c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800939a:	4b38      	ldr	r3, [pc, #224]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 800939c:	685b      	ldr	r3, [r3, #4]
 800939e:	099b      	lsrs	r3, r3, #6
 80093a0:	2200      	movs	r2, #0
 80093a2:	4618      	mov	r0, r3
 80093a4:	4611      	mov	r1, r2
 80093a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80093aa:	623b      	str	r3, [r7, #32]
 80093ac:	2300      	movs	r3, #0
 80093ae:	627b      	str	r3, [r7, #36]	; 0x24
 80093b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80093b4:	4642      	mov	r2, r8
 80093b6:	464b      	mov	r3, r9
 80093b8:	f04f 0000 	mov.w	r0, #0
 80093bc:	f04f 0100 	mov.w	r1, #0
 80093c0:	0159      	lsls	r1, r3, #5
 80093c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80093c6:	0150      	lsls	r0, r2, #5
 80093c8:	4602      	mov	r2, r0
 80093ca:	460b      	mov	r3, r1
 80093cc:	4641      	mov	r1, r8
 80093ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80093d2:	4649      	mov	r1, r9
 80093d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80093d8:	f04f 0200 	mov.w	r2, #0
 80093dc:	f04f 0300 	mov.w	r3, #0
 80093e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80093e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80093e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093ec:	ebb2 040a 	subs.w	r4, r2, sl
 80093f0:	eb63 050b 	sbc.w	r5, r3, fp
 80093f4:	f04f 0200 	mov.w	r2, #0
 80093f8:	f04f 0300 	mov.w	r3, #0
 80093fc:	00eb      	lsls	r3, r5, #3
 80093fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009402:	00e2      	lsls	r2, r4, #3
 8009404:	4614      	mov	r4, r2
 8009406:	461d      	mov	r5, r3
 8009408:	4643      	mov	r3, r8
 800940a:	18e3      	adds	r3, r4, r3
 800940c:	603b      	str	r3, [r7, #0]
 800940e:	464b      	mov	r3, r9
 8009410:	eb45 0303 	adc.w	r3, r5, r3
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	f04f 0200 	mov.w	r2, #0
 800941a:	f04f 0300 	mov.w	r3, #0
 800941e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8009422:	4629      	mov	r1, r5
 8009424:	028b      	lsls	r3, r1, #10
 8009426:	4621      	mov	r1, r4
 8009428:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800942c:	4621      	mov	r1, r4
 800942e:	028a      	lsls	r2, r1, #10
 8009430:	4610      	mov	r0, r2
 8009432:	4619      	mov	r1, r3
 8009434:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009436:	2200      	movs	r2, #0
 8009438:	61bb      	str	r3, [r7, #24]
 800943a:	61fa      	str	r2, [r7, #28]
 800943c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009440:	f7f7 fc2a 	bl	8000c98 <__aeabi_uldivmod>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4613      	mov	r3, r2
 800944a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800944c:	4b0b      	ldr	r3, [pc, #44]	; (800947c <HAL_RCC_GetSysClockFreq+0x200>)
 800944e:	685b      	ldr	r3, [r3, #4]
 8009450:	0c1b      	lsrs	r3, r3, #16
 8009452:	f003 0303 	and.w	r3, r3, #3
 8009456:	3301      	adds	r3, #1
 8009458:	005b      	lsls	r3, r3, #1
 800945a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800945c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800945e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009466:	e002      	b.n	800946e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009468:	4b05      	ldr	r3, [pc, #20]	; (8009480 <HAL_RCC_GetSysClockFreq+0x204>)
 800946a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800946c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800946e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009470:	4618      	mov	r0, r3
 8009472:	3750      	adds	r7, #80	; 0x50
 8009474:	46bd      	mov	sp, r7
 8009476:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800947a:	bf00      	nop
 800947c:	40023800 	.word	0x40023800
 8009480:	00f42400 	.word	0x00f42400
 8009484:	007a1200 	.word	0x007a1200

08009488 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009488:	b480      	push	{r7}
 800948a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800948c:	4b03      	ldr	r3, [pc, #12]	; (800949c <HAL_RCC_GetHCLKFreq+0x14>)
 800948e:	681b      	ldr	r3, [r3, #0]
}
 8009490:	4618      	mov	r0, r3
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr
 800949a:	bf00      	nop
 800949c:	20000250 	.word	0x20000250

080094a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80094a4:	f7ff fff0 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 80094a8:	4602      	mov	r2, r0
 80094aa:	4b05      	ldr	r3, [pc, #20]	; (80094c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80094ac:	689b      	ldr	r3, [r3, #8]
 80094ae:	0a9b      	lsrs	r3, r3, #10
 80094b0:	f003 0307 	and.w	r3, r3, #7
 80094b4:	4903      	ldr	r1, [pc, #12]	; (80094c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80094b6:	5ccb      	ldrb	r3, [r1, r3]
 80094b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094bc:	4618      	mov	r0, r3
 80094be:	bd80      	pop	{r7, pc}
 80094c0:	40023800 	.word	0x40023800
 80094c4:	08012590 	.word	0x08012590

080094c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80094cc:	f7ff ffdc 	bl	8009488 <HAL_RCC_GetHCLKFreq>
 80094d0:	4602      	mov	r2, r0
 80094d2:	4b05      	ldr	r3, [pc, #20]	; (80094e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80094d4:	689b      	ldr	r3, [r3, #8]
 80094d6:	0b5b      	lsrs	r3, r3, #13
 80094d8:	f003 0307 	and.w	r3, r3, #7
 80094dc:	4903      	ldr	r1, [pc, #12]	; (80094ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80094de:	5ccb      	ldrb	r3, [r1, r3]
 80094e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094e4:	4618      	mov	r0, r3
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	40023800 	.word	0x40023800
 80094ec:	08012590 	.word	0x08012590

080094f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094f0:	b580      	push	{r7, lr}
 80094f2:	b082      	sub	sp, #8
 80094f4:	af00      	add	r7, sp, #0
 80094f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d101      	bne.n	8009502 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094fe:	2301      	movs	r3, #1
 8009500:	e04c      	b.n	800959c <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009508:	b2db      	uxtb	r3, r3
 800950a:	2b00      	cmp	r3, #0
 800950c:	d111      	bne.n	8009532 <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	2200      	movs	r2, #0
 8009512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f001 fc32 	bl	800ad80 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009520:	2b00      	cmp	r3, #0
 8009522:	d102      	bne.n	800952a <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	4a1f      	ldr	r2, [pc, #124]	; (80095a4 <HAL_TIM_Base_Init+0xb4>)
 8009528:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2202      	movs	r2, #2
 8009536:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	3304      	adds	r3, #4
 8009542:	4619      	mov	r1, r3
 8009544:	4610      	mov	r0, r2
 8009546:	f001 f94f 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2201      	movs	r2, #1
 8009566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2201      	movs	r2, #1
 800956e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	2201      	movs	r2, #1
 8009576:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	2201      	movs	r2, #1
 800957e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	2201      	movs	r2, #1
 8009586:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	2201      	movs	r2, #1
 800958e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	2201      	movs	r2, #1
 8009596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800959a:	2300      	movs	r3, #0
}
 800959c:	4618      	mov	r0, r3
 800959e:	3708      	adds	r7, #8
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	08004b01 	.word	0x08004b01

080095a8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095b6:	b2db      	uxtb	r3, r3
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d001      	beq.n	80095c0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80095bc:	2301      	movs	r3, #1
 80095be:	e03c      	b.n	800963a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	2202      	movs	r2, #2
 80095c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <HAL_TIM_Base_Start+0xa0>)
 80095ce:	4293      	cmp	r3, r2
 80095d0:	d018      	beq.n	8009604 <HAL_TIM_Base_Start+0x5c>
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095da:	d013      	beq.n	8009604 <HAL_TIM_Base_Start+0x5c>
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	681b      	ldr	r3, [r3, #0]
 80095e0:	4a1a      	ldr	r2, [pc, #104]	; (800964c <HAL_TIM_Base_Start+0xa4>)
 80095e2:	4293      	cmp	r3, r2
 80095e4:	d00e      	beq.n	8009604 <HAL_TIM_Base_Start+0x5c>
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	4a19      	ldr	r2, [pc, #100]	; (8009650 <HAL_TIM_Base_Start+0xa8>)
 80095ec:	4293      	cmp	r3, r2
 80095ee:	d009      	beq.n	8009604 <HAL_TIM_Base_Start+0x5c>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a17      	ldr	r2, [pc, #92]	; (8009654 <HAL_TIM_Base_Start+0xac>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d004      	beq.n	8009604 <HAL_TIM_Base_Start+0x5c>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	4a16      	ldr	r2, [pc, #88]	; (8009658 <HAL_TIM_Base_Start+0xb0>)
 8009600:	4293      	cmp	r3, r2
 8009602:	d111      	bne.n	8009628 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	689b      	ldr	r3, [r3, #8]
 800960a:	f003 0307 	and.w	r3, r3, #7
 800960e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2b06      	cmp	r3, #6
 8009614:	d010      	beq.n	8009638 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	681a      	ldr	r2, [r3, #0]
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f042 0201 	orr.w	r2, r2, #1
 8009624:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009626:	e007      	b.n	8009638 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	681a      	ldr	r2, [r3, #0]
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f042 0201 	orr.w	r2, r2, #1
 8009636:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40010000 	.word	0x40010000
 800964c:	40000400 	.word	0x40000400
 8009650:	40000800 	.word	0x40000800
 8009654:	40000c00 	.word	0x40000c00
 8009658:	40014000 	.word	0x40014000

0800965c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800965c:	b480      	push	{r7}
 800965e:	b085      	sub	sp, #20
 8009660:	af00      	add	r7, sp, #0
 8009662:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800966a:	b2db      	uxtb	r3, r3
 800966c:	2b01      	cmp	r3, #1
 800966e:	d001      	beq.n	8009674 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009670:	2301      	movs	r3, #1
 8009672:	e044      	b.n	80096fe <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	2202      	movs	r2, #2
 8009678:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	68da      	ldr	r2, [r3, #12]
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f042 0201 	orr.w	r2, r2, #1
 800968a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	4a1e      	ldr	r2, [pc, #120]	; (800970c <HAL_TIM_Base_Start_IT+0xb0>)
 8009692:	4293      	cmp	r3, r2
 8009694:	d018      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x6c>
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800969e:	d013      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x6c>
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a1a      	ldr	r2, [pc, #104]	; (8009710 <HAL_TIM_Base_Start_IT+0xb4>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d00e      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x6c>
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	4a19      	ldr	r2, [pc, #100]	; (8009714 <HAL_TIM_Base_Start_IT+0xb8>)
 80096b0:	4293      	cmp	r3, r2
 80096b2:	d009      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x6c>
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	4a17      	ldr	r2, [pc, #92]	; (8009718 <HAL_TIM_Base_Start_IT+0xbc>)
 80096ba:	4293      	cmp	r3, r2
 80096bc:	d004      	beq.n	80096c8 <HAL_TIM_Base_Start_IT+0x6c>
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	4a16      	ldr	r2, [pc, #88]	; (800971c <HAL_TIM_Base_Start_IT+0xc0>)
 80096c4:	4293      	cmp	r3, r2
 80096c6:	d111      	bne.n	80096ec <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	f003 0307 	and.w	r3, r3, #7
 80096d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	2b06      	cmp	r3, #6
 80096d8:	d010      	beq.n	80096fc <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	681a      	ldr	r2, [r3, #0]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f042 0201 	orr.w	r2, r2, #1
 80096e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096ea:	e007      	b.n	80096fc <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	681a      	ldr	r2, [r3, #0]
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	681b      	ldr	r3, [r3, #0]
 80096f6:	f042 0201 	orr.w	r2, r2, #1
 80096fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096fc:	2300      	movs	r3, #0
}
 80096fe:	4618      	mov	r0, r3
 8009700:	3714      	adds	r7, #20
 8009702:	46bd      	mov	sp, r7
 8009704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009708:	4770      	bx	lr
 800970a:	bf00      	nop
 800970c:	40010000 	.word	0x40010000
 8009710:	40000400 	.word	0x40000400
 8009714:	40000800 	.word	0x40000800
 8009718:	40000c00 	.word	0x40000c00
 800971c:	40014000 	.word	0x40014000

08009720 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009720:	b480      	push	{r7}
 8009722:	b083      	sub	sp, #12
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	68da      	ldr	r2, [r3, #12]
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	f022 0201 	bic.w	r2, r2, #1
 8009736:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	6a1a      	ldr	r2, [r3, #32]
 800973e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009742:	4013      	ands	r3, r2
 8009744:	2b00      	cmp	r3, #0
 8009746:	d10f      	bne.n	8009768 <HAL_TIM_Base_Stop_IT+0x48>
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	6a1a      	ldr	r2, [r3, #32]
 800974e:	f240 4344 	movw	r3, #1092	; 0x444
 8009752:	4013      	ands	r3, r2
 8009754:	2b00      	cmp	r3, #0
 8009756:	d107      	bne.n	8009768 <HAL_TIM_Base_Stop_IT+0x48>
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	681a      	ldr	r2, [r3, #0]
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f022 0201 	bic.w	r2, r2, #1
 8009766:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2201      	movs	r2, #1
 800976c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	4618      	mov	r0, r3
 8009774:	370c      	adds	r7, #12
 8009776:	46bd      	mov	sp, r7
 8009778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800977c:	4770      	bx	lr
	...

08009780 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2b00      	cmp	r3, #0
 800978c:	d101      	bne.n	8009792 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 800978e:	2301      	movs	r3, #1
 8009790:	e04c      	b.n	800982c <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009798:	b2db      	uxtb	r3, r3
 800979a:	2b00      	cmp	r3, #0
 800979c:	d111      	bne.n	80097c2 <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	2200      	movs	r2, #0
 80097a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80097a6:	6878      	ldr	r0, [r7, #4]
 80097a8:	f001 faea 	bl	800ad80 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097b0:	2b00      	cmp	r3, #0
 80097b2:	d102      	bne.n	80097ba <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	4a1f      	ldr	r2, [pc, #124]	; (8009834 <HAL_TIM_OC_Init+0xb4>)
 80097b8:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80097be:	6878      	ldr	r0, [r7, #4]
 80097c0:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2202      	movs	r2, #2
 80097c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	681a      	ldr	r2, [r3, #0]
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	3304      	adds	r3, #4
 80097d2:	4619      	mov	r1, r3
 80097d4:	4610      	mov	r0, r2
 80097d6:	f001 f807 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	2201      	movs	r2, #1
 80097f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2201      	movs	r2, #1
 80097fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2201      	movs	r2, #1
 8009806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2201      	movs	r2, #1
 800980e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	2201      	movs	r2, #1
 8009816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	2201      	movs	r2, #1
 800981e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2201      	movs	r2, #1
 8009826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800982a:	2300      	movs	r3, #0
}
 800982c:	4618      	mov	r0, r3
 800982e:	3708      	adds	r7, #8
 8009830:	46bd      	mov	sp, r7
 8009832:	bd80      	pop	{r7, pc}
 8009834:	08009839 	.word	0x08009839

08009838 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009838:	b480      	push	{r7}
 800983a:	b083      	sub	sp, #12
 800983c:	af00      	add	r7, sp, #0
 800983e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009840:	bf00      	nop
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e04c      	b.n	80098f8 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d111      	bne.n	800988e <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f001 fa84 	bl	800ad80 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800987c:	2b00      	cmp	r3, #0
 800987e:	d102      	bne.n	8009886 <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	4a1f      	ldr	r2, [pc, #124]	; (8009900 <HAL_TIM_PWM_Init+0xb4>)
 8009884:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800988a:	6878      	ldr	r0, [r7, #4]
 800988c:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2202      	movs	r2, #2
 8009892:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	3304      	adds	r3, #4
 800989e:	4619      	mov	r1, r3
 80098a0:	4610      	mov	r0, r2
 80098a2:	f000 ffa1 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	2201      	movs	r2, #1
 80098c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2201      	movs	r2, #1
 80098ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	2201      	movs	r2, #1
 80098d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	2201      	movs	r2, #1
 80098da:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2201      	movs	r2, #1
 80098e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	2201      	movs	r2, #1
 80098ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	2201      	movs	r2, #1
 80098f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098f6:	2300      	movs	r3, #0
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3708      	adds	r7, #8
 80098fc:	46bd      	mov	sp, r7
 80098fe:	bd80      	pop	{r7, pc}
 8009900:	08004a11 	.word	0x08004a11

08009904 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800990e:	683b      	ldr	r3, [r7, #0]
 8009910:	2b00      	cmp	r3, #0
 8009912:	d109      	bne.n	8009928 <HAL_TIM_PWM_Start+0x24>
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800991a:	b2db      	uxtb	r3, r3
 800991c:	2b01      	cmp	r3, #1
 800991e:	bf14      	ite	ne
 8009920:	2301      	movne	r3, #1
 8009922:	2300      	moveq	r3, #0
 8009924:	b2db      	uxtb	r3, r3
 8009926:	e022      	b.n	800996e <HAL_TIM_PWM_Start+0x6a>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	2b04      	cmp	r3, #4
 800992c:	d109      	bne.n	8009942 <HAL_TIM_PWM_Start+0x3e>
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b01      	cmp	r3, #1
 8009938:	bf14      	ite	ne
 800993a:	2301      	movne	r3, #1
 800993c:	2300      	moveq	r3, #0
 800993e:	b2db      	uxtb	r3, r3
 8009940:	e015      	b.n	800996e <HAL_TIM_PWM_Start+0x6a>
 8009942:	683b      	ldr	r3, [r7, #0]
 8009944:	2b08      	cmp	r3, #8
 8009946:	d109      	bne.n	800995c <HAL_TIM_PWM_Start+0x58>
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800994e:	b2db      	uxtb	r3, r3
 8009950:	2b01      	cmp	r3, #1
 8009952:	bf14      	ite	ne
 8009954:	2301      	movne	r3, #1
 8009956:	2300      	moveq	r3, #0
 8009958:	b2db      	uxtb	r3, r3
 800995a:	e008      	b.n	800996e <HAL_TIM_PWM_Start+0x6a>
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009962:	b2db      	uxtb	r3, r3
 8009964:	2b01      	cmp	r3, #1
 8009966:	bf14      	ite	ne
 8009968:	2301      	movne	r3, #1
 800996a:	2300      	moveq	r3, #0
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b00      	cmp	r3, #0
 8009970:	d001      	beq.n	8009976 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009972:	2301      	movs	r3, #1
 8009974:	e068      	b.n	8009a48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009976:	683b      	ldr	r3, [r7, #0]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d104      	bne.n	8009986 <HAL_TIM_PWM_Start+0x82>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2202      	movs	r2, #2
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009984:	e013      	b.n	80099ae <HAL_TIM_PWM_Start+0xaa>
 8009986:	683b      	ldr	r3, [r7, #0]
 8009988:	2b04      	cmp	r3, #4
 800998a:	d104      	bne.n	8009996 <HAL_TIM_PWM_Start+0x92>
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2202      	movs	r2, #2
 8009990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009994:	e00b      	b.n	80099ae <HAL_TIM_PWM_Start+0xaa>
 8009996:	683b      	ldr	r3, [r7, #0]
 8009998:	2b08      	cmp	r3, #8
 800999a:	d104      	bne.n	80099a6 <HAL_TIM_PWM_Start+0xa2>
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2202      	movs	r2, #2
 80099a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80099a4:	e003      	b.n	80099ae <HAL_TIM_PWM_Start+0xaa>
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	2202      	movs	r2, #2
 80099aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	2201      	movs	r2, #1
 80099b4:	6839      	ldr	r1, [r7, #0]
 80099b6:	4618      	mov	r0, r3
 80099b8:	f001 f9bc 	bl	800ad34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a23      	ldr	r2, [pc, #140]	; (8009a50 <HAL_TIM_PWM_Start+0x14c>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d107      	bne.n	80099d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80099d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a1d      	ldr	r2, [pc, #116]	; (8009a50 <HAL_TIM_PWM_Start+0x14c>)
 80099dc:	4293      	cmp	r3, r2
 80099de:	d018      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x10e>
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e8:	d013      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x10e>
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	4a19      	ldr	r2, [pc, #100]	; (8009a54 <HAL_TIM_PWM_Start+0x150>)
 80099f0:	4293      	cmp	r3, r2
 80099f2:	d00e      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x10e>
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	4a17      	ldr	r2, [pc, #92]	; (8009a58 <HAL_TIM_PWM_Start+0x154>)
 80099fa:	4293      	cmp	r3, r2
 80099fc:	d009      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x10e>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	4a16      	ldr	r2, [pc, #88]	; (8009a5c <HAL_TIM_PWM_Start+0x158>)
 8009a04:	4293      	cmp	r3, r2
 8009a06:	d004      	beq.n	8009a12 <HAL_TIM_PWM_Start+0x10e>
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a14      	ldr	r2, [pc, #80]	; (8009a60 <HAL_TIM_PWM_Start+0x15c>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d111      	bne.n	8009a36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0307 	and.w	r3, r3, #7
 8009a1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	2b06      	cmp	r3, #6
 8009a22:	d010      	beq.n	8009a46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	681a      	ldr	r2, [r3, #0]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f042 0201 	orr.w	r2, r2, #1
 8009a32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a34:	e007      	b.n	8009a46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	f042 0201 	orr.w	r2, r2, #1
 8009a44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3710      	adds	r7, #16
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	bd80      	pop	{r7, pc}
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40014000 	.word	0x40014000

08009a64 <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009a64:	b580      	push	{r7, lr}
 8009a66:	b082      	sub	sp, #8
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]
 8009a6c:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d101      	bne.n	8009a78 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009a74:	2301      	movs	r3, #1
 8009a76:	e04c      	b.n	8009b12 <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a7e:	b2db      	uxtb	r3, r3
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d111      	bne.n	8009aa8 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	2200      	movs	r2, #0
 8009a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f977 	bl	800ad80 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d102      	bne.n	8009aa0 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	4a1f      	ldr	r2, [pc, #124]	; (8009b1c <HAL_TIM_OnePulse_Init+0xb8>)
 8009a9e:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009aa4:	6878      	ldr	r0, [r7, #4]
 8009aa6:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2202      	movs	r2, #2
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681a      	ldr	r2, [r3, #0]
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	3304      	adds	r3, #4
 8009ab8:	4619      	mov	r1, r3
 8009aba:	4610      	mov	r0, r2
 8009abc:	f000 fe94 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	681a      	ldr	r2, [r3, #0]
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	f022 0208 	bic.w	r2, r2, #8
 8009ace:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	6819      	ldr	r1, [r3, #0]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	683a      	ldr	r2, [r7, #0]
 8009adc:	430a      	orrs	r2, r1
 8009ade:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	2201      	movs	r2, #1
 8009ae4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	2201      	movs	r2, #1
 8009aec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2201      	movs	r2, #1
 8009af4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2201      	movs	r2, #1
 8009afc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2201      	movs	r2, #1
 8009b0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b10:	2300      	movs	r3, #0
}
 8009b12:	4618      	mov	r0, r3
 8009b14:	3708      	adds	r7, #8
 8009b16:	46bd      	mov	sp, r7
 8009b18:	bd80      	pop	{r7, pc}
 8009b1a:	bf00      	nop
 8009b1c:	08009b21 	.word	0x08009b21

08009b20 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009b20:	b480      	push	{r7}
 8009b22:	b083      	sub	sp, #12
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009b28:	bf00      	nop
 8009b2a:	370c      	adds	r7, #12
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b32:	4770      	bx	lr

08009b34 <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b084      	sub	sp, #16
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	6078      	str	r0, [r7, #4]
 8009b3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b5c:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b5e:	7bfb      	ldrb	r3, [r7, #15]
 8009b60:	2b01      	cmp	r3, #1
 8009b62:	d108      	bne.n	8009b76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b64:	7bbb      	ldrb	r3, [r7, #14]
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d105      	bne.n	8009b76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b6a:	7b7b      	ldrb	r3, [r7, #13]
 8009b6c:	2b01      	cmp	r3, #1
 8009b6e:	d102      	bne.n	8009b76 <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b70:	7b3b      	ldrb	r3, [r7, #12]
 8009b72:	2b01      	cmp	r3, #1
 8009b74:	d001      	beq.n	8009b7a <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e03b      	b.n	8009bf2 <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	2202      	movs	r2, #2
 8009b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2202      	movs	r2, #2
 8009b86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2202      	movs	r2, #2
 8009b8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	2202      	movs	r2, #2
 8009b96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	68da      	ldr	r2, [r3, #12]
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f042 0202 	orr.w	r2, r2, #2
 8009ba8:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	68da      	ldr	r2, [r3, #12]
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	f042 0204 	orr.w	r2, r2, #4
 8009bb8:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	2201      	movs	r2, #1
 8009bc0:	2100      	movs	r1, #0
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f001 f8b6 	bl	800ad34 <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	2201      	movs	r2, #1
 8009bce:	2104      	movs	r1, #4
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	f001 f8af 	bl	800ad34 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a08      	ldr	r2, [pc, #32]	; (8009bfc <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d107      	bne.n	8009bf0 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bee:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3710      	adds	r7, #16
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	40010000 	.word	0x40010000

08009c00 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009c00:	b580      	push	{r7, lr}
 8009c02:	b086      	sub	sp, #24
 8009c04:	af00      	add	r7, sp, #0
 8009c06:	6078      	str	r0, [r7, #4]
 8009c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d101      	bne.n	8009c14 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009c10:	2301      	movs	r3, #1
 8009c12:	e0a2      	b.n	8009d5a <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1a:	b2db      	uxtb	r3, r3
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d111      	bne.n	8009c44 <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	2200      	movs	r2, #0
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f001 f8a9 	bl	800ad80 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c32:	2b00      	cmp	r3, #0
 8009c34:	d102      	bne.n	8009c3c <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	4a4a      	ldr	r2, [pc, #296]	; (8009d64 <HAL_TIM_Encoder_Init+0x164>)
 8009c3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c40:	6878      	ldr	r0, [r7, #4]
 8009c42:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2202      	movs	r2, #2
 8009c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	689b      	ldr	r3, [r3, #8]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6812      	ldr	r2, [r2, #0]
 8009c56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c5a:	f023 0307 	bic.w	r3, r3, #7
 8009c5e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681a      	ldr	r2, [r3, #0]
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3304      	adds	r3, #4
 8009c68:	4619      	mov	r1, r3
 8009c6a:	4610      	mov	r0, r2
 8009c6c:	f000 fdbc 	bl	800a7e8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	699b      	ldr	r3, [r3, #24]
 8009c7e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	6a1b      	ldr	r3, [r3, #32]
 8009c86:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	697a      	ldr	r2, [r7, #20]
 8009c8e:	4313      	orrs	r3, r2
 8009c90:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c92:	693b      	ldr	r3, [r7, #16]
 8009c94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c98:	f023 0303 	bic.w	r3, r3, #3
 8009c9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	689a      	ldr	r2, [r3, #8]
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	699b      	ldr	r3, [r3, #24]
 8009ca6:	021b      	lsls	r3, r3, #8
 8009ca8:	4313      	orrs	r3, r2
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	4313      	orrs	r3, r2
 8009cae:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009cb6:	f023 030c 	bic.w	r3, r3, #12
 8009cba:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009cbc:	693b      	ldr	r3, [r7, #16]
 8009cbe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009cc2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009cc6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	68da      	ldr	r2, [r3, #12]
 8009ccc:	683b      	ldr	r3, [r7, #0]
 8009cce:	69db      	ldr	r3, [r3, #28]
 8009cd0:	021b      	lsls	r3, r3, #8
 8009cd2:	4313      	orrs	r3, r2
 8009cd4:	693a      	ldr	r2, [r7, #16]
 8009cd6:	4313      	orrs	r3, r2
 8009cd8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	691b      	ldr	r3, [r3, #16]
 8009cde:	011a      	lsls	r2, r3, #4
 8009ce0:	683b      	ldr	r3, [r7, #0]
 8009ce2:	6a1b      	ldr	r3, [r3, #32]
 8009ce4:	031b      	lsls	r3, r3, #12
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	693a      	ldr	r2, [r7, #16]
 8009cea:	4313      	orrs	r3, r2
 8009cec:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cf4:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cfc:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	685a      	ldr	r2, [r3, #4]
 8009d02:	683b      	ldr	r3, [r7, #0]
 8009d04:	695b      	ldr	r3, [r3, #20]
 8009d06:	011b      	lsls	r3, r3, #4
 8009d08:	4313      	orrs	r3, r2
 8009d0a:	68fa      	ldr	r2, [r7, #12]
 8009d0c:	4313      	orrs	r3, r2
 8009d0e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	697a      	ldr	r2, [r7, #20]
 8009d16:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	693a      	ldr	r2, [r7, #16]
 8009d1e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	2201      	movs	r2, #1
 8009d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2201      	movs	r2, #1
 8009d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2201      	movs	r2, #1
 8009d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	2201      	movs	r2, #1
 8009d44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2201      	movs	r2, #1
 8009d4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	2201      	movs	r2, #1
 8009d54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d58:	2300      	movs	r3, #0
}
 8009d5a:	4618      	mov	r0, r3
 8009d5c:	3718      	adds	r7, #24
 8009d5e:	46bd      	mov	sp, r7
 8009d60:	bd80      	pop	{r7, pc}
 8009d62:	bf00      	nop
 8009d64:	08004a71 	.word	0x08004a71

08009d68 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b084      	sub	sp, #16
 8009d6c:	af00      	add	r7, sp, #0
 8009d6e:	6078      	str	r0, [r7, #4]
 8009d70:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d72:	687b      	ldr	r3, [r7, #4]
 8009d74:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d78:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d80:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d88:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d90:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d110      	bne.n	8009dba <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d98:	7bfb      	ldrb	r3, [r7, #15]
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d102      	bne.n	8009da4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d9e:	7b7b      	ldrb	r3, [r7, #13]
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d001      	beq.n	8009da8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
 8009da6:	e069      	b.n	8009e7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2202      	movs	r2, #2
 8009dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009db8:	e031      	b.n	8009e1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	2b04      	cmp	r3, #4
 8009dbe:	d110      	bne.n	8009de2 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dc0:	7bbb      	ldrb	r3, [r7, #14]
 8009dc2:	2b01      	cmp	r3, #1
 8009dc4:	d102      	bne.n	8009dcc <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dc6:	7b3b      	ldrb	r3, [r7, #12]
 8009dc8:	2b01      	cmp	r3, #1
 8009dca:	d001      	beq.n	8009dd0 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009dcc:	2301      	movs	r3, #1
 8009dce:	e055      	b.n	8009e7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2202      	movs	r2, #2
 8009dd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2202      	movs	r2, #2
 8009ddc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009de0:	e01d      	b.n	8009e1e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	2b01      	cmp	r3, #1
 8009de6:	d108      	bne.n	8009dfa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009de8:	7bbb      	ldrb	r3, [r7, #14]
 8009dea:	2b01      	cmp	r3, #1
 8009dec:	d105      	bne.n	8009dfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009dee:	7b7b      	ldrb	r3, [r7, #13]
 8009df0:	2b01      	cmp	r3, #1
 8009df2:	d102      	bne.n	8009dfa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009df4:	7b3b      	ldrb	r3, [r7, #12]
 8009df6:	2b01      	cmp	r3, #1
 8009df8:	d001      	beq.n	8009dfe <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009dfa:	2301      	movs	r3, #1
 8009dfc:	e03e      	b.n	8009e7c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	2202      	movs	r2, #2
 8009e02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2202      	movs	r2, #2
 8009e0a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2202      	movs	r2, #2
 8009e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	2202      	movs	r2, #2
 8009e1a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d003      	beq.n	8009e2c <HAL_TIM_Encoder_Start+0xc4>
 8009e24:	683b      	ldr	r3, [r7, #0]
 8009e26:	2b04      	cmp	r3, #4
 8009e28:	d008      	beq.n	8009e3c <HAL_TIM_Encoder_Start+0xd4>
 8009e2a:	e00f      	b.n	8009e4c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2201      	movs	r2, #1
 8009e32:	2100      	movs	r1, #0
 8009e34:	4618      	mov	r0, r3
 8009e36:	f000 ff7d 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009e3a:	e016      	b.n	8009e6a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	2201      	movs	r2, #1
 8009e42:	2104      	movs	r1, #4
 8009e44:	4618      	mov	r0, r3
 8009e46:	f000 ff75 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009e4a:	e00e      	b.n	8009e6a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2201      	movs	r2, #1
 8009e52:	2100      	movs	r1, #0
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 ff6d 	bl	800ad34 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2201      	movs	r2, #1
 8009e60:	2104      	movs	r1, #4
 8009e62:	4618      	mov	r0, r3
 8009e64:	f000 ff66 	bl	800ad34 <TIM_CCxChannelCmd>
      break;
 8009e68:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	681a      	ldr	r2, [r3, #0]
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f042 0201 	orr.w	r2, r2, #1
 8009e78:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e7a:	2300      	movs	r3, #0
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}

08009e84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b082      	sub	sp, #8
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	691b      	ldr	r3, [r3, #16]
 8009e92:	f003 0302 	and.w	r3, r3, #2
 8009e96:	2b02      	cmp	r3, #2
 8009e98:	d128      	bne.n	8009eec <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68db      	ldr	r3, [r3, #12]
 8009ea0:	f003 0302 	and.w	r3, r3, #2
 8009ea4:	2b02      	cmp	r3, #2
 8009ea6:	d121      	bne.n	8009eec <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	f06f 0202 	mvn.w	r2, #2
 8009eb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	699b      	ldr	r3, [r3, #24]
 8009ebe:	f003 0303 	and.w	r3, r3, #3
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d005      	beq.n	8009ed2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ecc:	6878      	ldr	r0, [r7, #4]
 8009ece:	4798      	blx	r3
 8009ed0:	e009      	b.n	8009ee6 <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ed8:	6878      	ldr	r0, [r7, #4]
 8009eda:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ee2:	6878      	ldr	r0, [r7, #4]
 8009ee4:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	2200      	movs	r2, #0
 8009eea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eec:	687b      	ldr	r3, [r7, #4]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	f003 0304 	and.w	r3, r3, #4
 8009ef6:	2b04      	cmp	r3, #4
 8009ef8:	d128      	bne.n	8009f4c <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	68db      	ldr	r3, [r3, #12]
 8009f00:	f003 0304 	and.w	r3, r3, #4
 8009f04:	2b04      	cmp	r3, #4
 8009f06:	d121      	bne.n	8009f4c <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	f06f 0204 	mvn.w	r2, #4
 8009f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	681b      	ldr	r3, [r3, #0]
 8009f1c:	699b      	ldr	r3, [r3, #24]
 8009f1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d005      	beq.n	8009f32 <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f2c:	6878      	ldr	r0, [r7, #4]
 8009f2e:	4798      	blx	r3
 8009f30:	e009      	b.n	8009f46 <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f38:	6878      	ldr	r0, [r7, #4]
 8009f3a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	691b      	ldr	r3, [r3, #16]
 8009f52:	f003 0308 	and.w	r3, r3, #8
 8009f56:	2b08      	cmp	r3, #8
 8009f58:	d128      	bne.n	8009fac <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	f003 0308 	and.w	r3, r3, #8
 8009f64:	2b08      	cmp	r3, #8
 8009f66:	d121      	bne.n	8009fac <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f06f 0208 	mvn.w	r2, #8
 8009f70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2204      	movs	r2, #4
 8009f76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	681b      	ldr	r3, [r3, #0]
 8009f7c:	69db      	ldr	r3, [r3, #28]
 8009f7e:	f003 0303 	and.w	r3, r3, #3
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d005      	beq.n	8009f92 <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	4798      	blx	r3
 8009f90:	e009      	b.n	8009fa6 <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	2200      	movs	r2, #0
 8009faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	691b      	ldr	r3, [r3, #16]
 8009fb2:	f003 0310 	and.w	r3, r3, #16
 8009fb6:	2b10      	cmp	r3, #16
 8009fb8:	d128      	bne.n	800a00c <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	681b      	ldr	r3, [r3, #0]
 8009fbe:	68db      	ldr	r3, [r3, #12]
 8009fc0:	f003 0310 	and.w	r3, r3, #16
 8009fc4:	2b10      	cmp	r3, #16
 8009fc6:	d121      	bne.n	800a00c <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	681b      	ldr	r3, [r3, #0]
 8009fcc:	f06f 0210 	mvn.w	r2, #16
 8009fd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	2208      	movs	r2, #8
 8009fd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	69db      	ldr	r3, [r3, #28]
 8009fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d005      	beq.n	8009ff2 <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	4798      	blx	r3
 8009ff0:	e009      	b.n	800a006 <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a002:	6878      	ldr	r0, [r7, #4]
 800a004:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	2200      	movs	r2, #0
 800a00a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	691b      	ldr	r3, [r3, #16]
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b01      	cmp	r3, #1
 800a018:	d110      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	68db      	ldr	r3, [r3, #12]
 800a020:	f003 0301 	and.w	r3, r3, #1
 800a024:	2b01      	cmp	r3, #1
 800a026:	d109      	bne.n	800a03c <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	f06f 0201 	mvn.w	r2, #1
 800a030:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	691b      	ldr	r3, [r3, #16]
 800a042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a046:	2b80      	cmp	r3, #128	; 0x80
 800a048:	d110      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	68db      	ldr	r3, [r3, #12]
 800a050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a054:	2b80      	cmp	r3, #128	; 0x80
 800a056:	d109      	bne.n	800a06c <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	681b      	ldr	r3, [r3, #0]
 800a05c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a068:	6878      	ldr	r0, [r7, #4]
 800a06a:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	691b      	ldr	r3, [r3, #16]
 800a072:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a076:	2b40      	cmp	r3, #64	; 0x40
 800a078:	d110      	bne.n	800a09c <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	68db      	ldr	r3, [r3, #12]
 800a080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a084:	2b40      	cmp	r3, #64	; 0x40
 800a086:	d109      	bne.n	800a09c <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a098:	6878      	ldr	r0, [r7, #4]
 800a09a:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	681b      	ldr	r3, [r3, #0]
 800a0a0:	691b      	ldr	r3, [r3, #16]
 800a0a2:	f003 0320 	and.w	r3, r3, #32
 800a0a6:	2b20      	cmp	r3, #32
 800a0a8:	d110      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	68db      	ldr	r3, [r3, #12]
 800a0b0:	f003 0320 	and.w	r3, r3, #32
 800a0b4:	2b20      	cmp	r3, #32
 800a0b6:	d109      	bne.n	800a0cc <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	f06f 0220 	mvn.w	r2, #32
 800a0c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a0c8:	6878      	ldr	r0, [r7, #4]
 800a0ca:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a0cc:	bf00      	nop
 800a0ce:	3708      	adds	r7, #8
 800a0d0:	46bd      	mov	sp, r7
 800a0d2:	bd80      	pop	{r7, pc}

0800a0d4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b086      	sub	sp, #24
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	60f8      	str	r0, [r7, #12]
 800a0dc:	60b9      	str	r1, [r7, #8]
 800a0de:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0e0:	2300      	movs	r3, #0
 800a0e2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0ea:	2b01      	cmp	r3, #1
 800a0ec:	d101      	bne.n	800a0f2 <HAL_TIM_OC_ConfigChannel+0x1e>
 800a0ee:	2302      	movs	r3, #2
 800a0f0:	e048      	b.n	800a184 <HAL_TIM_OC_ConfigChannel+0xb0>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	2201      	movs	r2, #1
 800a0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2b0c      	cmp	r3, #12
 800a0fe:	d839      	bhi.n	800a174 <HAL_TIM_OC_ConfigChannel+0xa0>
 800a100:	a201      	add	r2, pc, #4	; (adr r2, 800a108 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a106:	bf00      	nop
 800a108:	0800a13d 	.word	0x0800a13d
 800a10c:	0800a175 	.word	0x0800a175
 800a110:	0800a175 	.word	0x0800a175
 800a114:	0800a175 	.word	0x0800a175
 800a118:	0800a14b 	.word	0x0800a14b
 800a11c:	0800a175 	.word	0x0800a175
 800a120:	0800a175 	.word	0x0800a175
 800a124:	0800a175 	.word	0x0800a175
 800a128:	0800a159 	.word	0x0800a159
 800a12c:	0800a175 	.word	0x0800a175
 800a130:	0800a175 	.word	0x0800a175
 800a134:	0800a175 	.word	0x0800a175
 800a138:	0800a167 	.word	0x0800a167
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68b9      	ldr	r1, [r7, #8]
 800a142:	4618      	mov	r0, r3
 800a144:	f000 fbd0 	bl	800a8e8 <TIM_OC1_SetConfig>
      break;
 800a148:	e017      	b.n	800a17a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	68b9      	ldr	r1, [r7, #8]
 800a150:	4618      	mov	r0, r3
 800a152:	f000 fc2f 	bl	800a9b4 <TIM_OC2_SetConfig>
      break;
 800a156:	e010      	b.n	800a17a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	68b9      	ldr	r1, [r7, #8]
 800a15e:	4618      	mov	r0, r3
 800a160:	f000 fc94 	bl	800aa8c <TIM_OC3_SetConfig>
      break;
 800a164:	e009      	b.n	800a17a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a166:	68fb      	ldr	r3, [r7, #12]
 800a168:	681b      	ldr	r3, [r3, #0]
 800a16a:	68b9      	ldr	r1, [r7, #8]
 800a16c:	4618      	mov	r0, r3
 800a16e:	f000 fcf7 	bl	800ab60 <TIM_OC4_SetConfig>
      break;
 800a172:	e002      	b.n	800a17a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a174:	2301      	movs	r3, #1
 800a176:	75fb      	strb	r3, [r7, #23]
      break;
 800a178:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	2200      	movs	r2, #0
 800a17e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a182:	7dfb      	ldrb	r3, [r7, #23]
}
 800a184:	4618      	mov	r0, r3
 800a186:	3718      	adds	r7, #24
 800a188:	46bd      	mov	sp, r7
 800a18a:	bd80      	pop	{r7, pc}

0800a18c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a18c:	b580      	push	{r7, lr}
 800a18e:	b086      	sub	sp, #24
 800a190:	af00      	add	r7, sp, #0
 800a192:	60f8      	str	r0, [r7, #12]
 800a194:	60b9      	str	r1, [r7, #8]
 800a196:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a198:	2300      	movs	r3, #0
 800a19a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d101      	bne.n	800a1aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a1a6:	2302      	movs	r3, #2
 800a1a8:	e0ae      	b.n	800a308 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a1b2:	687b      	ldr	r3, [r7, #4]
 800a1b4:	2b0c      	cmp	r3, #12
 800a1b6:	f200 809f 	bhi.w	800a2f8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a1ba:	a201      	add	r2, pc, #4	; (adr r2, 800a1c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a1bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a1c0:	0800a1f5 	.word	0x0800a1f5
 800a1c4:	0800a2f9 	.word	0x0800a2f9
 800a1c8:	0800a2f9 	.word	0x0800a2f9
 800a1cc:	0800a2f9 	.word	0x0800a2f9
 800a1d0:	0800a235 	.word	0x0800a235
 800a1d4:	0800a2f9 	.word	0x0800a2f9
 800a1d8:	0800a2f9 	.word	0x0800a2f9
 800a1dc:	0800a2f9 	.word	0x0800a2f9
 800a1e0:	0800a277 	.word	0x0800a277
 800a1e4:	0800a2f9 	.word	0x0800a2f9
 800a1e8:	0800a2f9 	.word	0x0800a2f9
 800a1ec:	0800a2f9 	.word	0x0800a2f9
 800a1f0:	0800a2b7 	.word	0x0800a2b7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 fb74 	bl	800a8e8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	699a      	ldr	r2, [r3, #24]
 800a206:	68fb      	ldr	r3, [r7, #12]
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f042 0208 	orr.w	r2, r2, #8
 800a20e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	699a      	ldr	r2, [r3, #24]
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	f022 0204 	bic.w	r2, r2, #4
 800a21e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	6999      	ldr	r1, [r3, #24]
 800a226:	68bb      	ldr	r3, [r7, #8]
 800a228:	691a      	ldr	r2, [r3, #16]
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	430a      	orrs	r2, r1
 800a230:	619a      	str	r2, [r3, #24]
      break;
 800a232:	e064      	b.n	800a2fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	68b9      	ldr	r1, [r7, #8]
 800a23a:	4618      	mov	r0, r3
 800a23c:	f000 fbba 	bl	800a9b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	699a      	ldr	r2, [r3, #24]
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a24e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	699a      	ldr	r2, [r3, #24]
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a25e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	6999      	ldr	r1, [r3, #24]
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	021a      	lsls	r2, r3, #8
 800a26c:	68fb      	ldr	r3, [r7, #12]
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	430a      	orrs	r2, r1
 800a272:	619a      	str	r2, [r3, #24]
      break;
 800a274:	e043      	b.n	800a2fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	68b9      	ldr	r1, [r7, #8]
 800a27c:	4618      	mov	r0, r3
 800a27e:	f000 fc05 	bl	800aa8c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	69da      	ldr	r2, [r3, #28]
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	f042 0208 	orr.w	r2, r2, #8
 800a290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	69da      	ldr	r2, [r3, #28]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f022 0204 	bic.w	r2, r2, #4
 800a2a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	69d9      	ldr	r1, [r3, #28]
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	691a      	ldr	r2, [r3, #16]
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	430a      	orrs	r2, r1
 800a2b2:	61da      	str	r2, [r3, #28]
      break;
 800a2b4:	e023      	b.n	800a2fe <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	68b9      	ldr	r1, [r7, #8]
 800a2bc:	4618      	mov	r0, r3
 800a2be:	f000 fc4f 	bl	800ab60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	681b      	ldr	r3, [r3, #0]
 800a2c6:	69da      	ldr	r2, [r3, #28]
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2d0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	69da      	ldr	r2, [r3, #28]
 800a2d8:	68fb      	ldr	r3, [r7, #12]
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2e0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	69d9      	ldr	r1, [r3, #28]
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	691b      	ldr	r3, [r3, #16]
 800a2ec:	021a      	lsls	r2, r3, #8
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	430a      	orrs	r2, r1
 800a2f4:	61da      	str	r2, [r3, #28]
      break;
 800a2f6:	e002      	b.n	800a2fe <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	75fb      	strb	r3, [r7, #23]
      break;
 800a2fc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	2200      	movs	r2, #0
 800a302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a306:	7dfb      	ldrb	r3, [r7, #23]
}
 800a308:	4618      	mov	r0, r3
 800a30a:	3718      	adds	r7, #24
 800a30c:	46bd      	mov	sp, r7
 800a30e:	bd80      	pop	{r7, pc}

0800a310 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a310:	b580      	push	{r7, lr}
 800a312:	b084      	sub	sp, #16
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a31a:	2300      	movs	r3, #0
 800a31c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a324:	2b01      	cmp	r3, #1
 800a326:	d101      	bne.n	800a32c <HAL_TIM_ConfigClockSource+0x1c>
 800a328:	2302      	movs	r3, #2
 800a32a:	e0b4      	b.n	800a496 <HAL_TIM_ConfigClockSource+0x186>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	2201      	movs	r2, #1
 800a330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	2202      	movs	r2, #2
 800a338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	689b      	ldr	r3, [r3, #8]
 800a342:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a344:	68bb      	ldr	r3, [r7, #8]
 800a346:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a34a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a34c:	68bb      	ldr	r3, [r7, #8]
 800a34e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a352:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a364:	d03e      	beq.n	800a3e4 <HAL_TIM_ConfigClockSource+0xd4>
 800a366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a36a:	f200 8087 	bhi.w	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a372:	f000 8086 	beq.w	800a482 <HAL_TIM_ConfigClockSource+0x172>
 800a376:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a37a:	d87f      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a37c:	2b70      	cmp	r3, #112	; 0x70
 800a37e:	d01a      	beq.n	800a3b6 <HAL_TIM_ConfigClockSource+0xa6>
 800a380:	2b70      	cmp	r3, #112	; 0x70
 800a382:	d87b      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a384:	2b60      	cmp	r3, #96	; 0x60
 800a386:	d050      	beq.n	800a42a <HAL_TIM_ConfigClockSource+0x11a>
 800a388:	2b60      	cmp	r3, #96	; 0x60
 800a38a:	d877      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a38c:	2b50      	cmp	r3, #80	; 0x50
 800a38e:	d03c      	beq.n	800a40a <HAL_TIM_ConfigClockSource+0xfa>
 800a390:	2b50      	cmp	r3, #80	; 0x50
 800a392:	d873      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a394:	2b40      	cmp	r3, #64	; 0x40
 800a396:	d058      	beq.n	800a44a <HAL_TIM_ConfigClockSource+0x13a>
 800a398:	2b40      	cmp	r3, #64	; 0x40
 800a39a:	d86f      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a39c:	2b30      	cmp	r3, #48	; 0x30
 800a39e:	d064      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x15a>
 800a3a0:	2b30      	cmp	r3, #48	; 0x30
 800a3a2:	d86b      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a3a4:	2b20      	cmp	r3, #32
 800a3a6:	d060      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x15a>
 800a3a8:	2b20      	cmp	r3, #32
 800a3aa:	d867      	bhi.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d05c      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x15a>
 800a3b0:	2b10      	cmp	r3, #16
 800a3b2:	d05a      	beq.n	800a46a <HAL_TIM_ConfigClockSource+0x15a>
 800a3b4:	e062      	b.n	800a47c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6818      	ldr	r0, [r3, #0]
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	6899      	ldr	r1, [r3, #8]
 800a3be:	683b      	ldr	r3, [r7, #0]
 800a3c0:	685a      	ldr	r2, [r3, #4]
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	68db      	ldr	r3, [r3, #12]
 800a3c6:	f000 fc95 	bl	800acf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	689b      	ldr	r3, [r3, #8]
 800a3d0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a3d2:	68bb      	ldr	r3, [r7, #8]
 800a3d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3d8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	68ba      	ldr	r2, [r7, #8]
 800a3e0:	609a      	str	r2, [r3, #8]
      break;
 800a3e2:	e04f      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	6818      	ldr	r0, [r3, #0]
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	6899      	ldr	r1, [r3, #8]
 800a3ec:	683b      	ldr	r3, [r7, #0]
 800a3ee:	685a      	ldr	r2, [r3, #4]
 800a3f0:	683b      	ldr	r3, [r7, #0]
 800a3f2:	68db      	ldr	r3, [r3, #12]
 800a3f4:	f000 fc7e 	bl	800acf4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	689a      	ldr	r2, [r3, #8]
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a406:	609a      	str	r2, [r3, #8]
      break;
 800a408:	e03c      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	6818      	ldr	r0, [r3, #0]
 800a40e:	683b      	ldr	r3, [r7, #0]
 800a410:	6859      	ldr	r1, [r3, #4]
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	68db      	ldr	r3, [r3, #12]
 800a416:	461a      	mov	r2, r3
 800a418:	f000 fbf2 	bl	800ac00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	681b      	ldr	r3, [r3, #0]
 800a420:	2150      	movs	r1, #80	; 0x50
 800a422:	4618      	mov	r0, r3
 800a424:	f000 fc4b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a428:	e02c      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	6818      	ldr	r0, [r3, #0]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	6859      	ldr	r1, [r3, #4]
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	68db      	ldr	r3, [r3, #12]
 800a436:	461a      	mov	r2, r3
 800a438:	f000 fc11 	bl	800ac5e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	2160      	movs	r1, #96	; 0x60
 800a442:	4618      	mov	r0, r3
 800a444:	f000 fc3b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a448:	e01c      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	6818      	ldr	r0, [r3, #0]
 800a44e:	683b      	ldr	r3, [r7, #0]
 800a450:	6859      	ldr	r1, [r3, #4]
 800a452:	683b      	ldr	r3, [r7, #0]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	461a      	mov	r2, r3
 800a458:	f000 fbd2 	bl	800ac00 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	2140      	movs	r1, #64	; 0x40
 800a462:	4618      	mov	r0, r3
 800a464:	f000 fc2b 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a468:	e00c      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681a      	ldr	r2, [r3, #0]
 800a46e:	683b      	ldr	r3, [r7, #0]
 800a470:	681b      	ldr	r3, [r3, #0]
 800a472:	4619      	mov	r1, r3
 800a474:	4610      	mov	r0, r2
 800a476:	f000 fc22 	bl	800acbe <TIM_ITRx_SetConfig>
      break;
 800a47a:	e003      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a47c:	2301      	movs	r3, #1
 800a47e:	73fb      	strb	r3, [r7, #15]
      break;
 800a480:	e000      	b.n	800a484 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a482:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	2201      	movs	r2, #1
 800a488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a494:	7bfb      	ldrb	r3, [r7, #15]
}
 800a496:	4618      	mov	r0, r3
 800a498:	3710      	adds	r7, #16
 800a49a:	46bd      	mov	sp, r7
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a49e:	b480      	push	{r7}
 800a4a0:	b083      	sub	sp, #12
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a4a6:	bf00      	nop
 800a4a8:	370c      	adds	r7, #12
 800a4aa:	46bd      	mov	sp, r7
 800a4ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b0:	4770      	bx	lr

0800a4b2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b083      	sub	sp, #12
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4ba:	bf00      	nop
 800a4bc:	370c      	adds	r7, #12
 800a4be:	46bd      	mov	sp, r7
 800a4c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c4:	4770      	bx	lr

0800a4c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4c6:	b480      	push	{r7}
 800a4c8:	b083      	sub	sp, #12
 800a4ca:	af00      	add	r7, sp, #0
 800a4cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4ce:	bf00      	nop
 800a4d0:	370c      	adds	r7, #12
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b083      	sub	sp, #12
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a4e2:	bf00      	nop
 800a4e4:	370c      	adds	r7, #12
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr

0800a4ee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4ee:	b480      	push	{r7}
 800a4f0:	b083      	sub	sp, #12
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4f6:	bf00      	nop
 800a4f8:	370c      	adds	r7, #12
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a502:	b480      	push	{r7}
 800a504:	b083      	sub	sp, #12
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a50a:	bf00      	nop
 800a50c:	370c      	adds	r7, #12
 800a50e:	46bd      	mov	sp, r7
 800a510:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a514:	4770      	bx	lr

0800a516 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a516:	b480      	push	{r7}
 800a518:	b083      	sub	sp, #12
 800a51a:	af00      	add	r7, sp, #0
 800a51c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a51e:	bf00      	nop
 800a520:	370c      	adds	r7, #12
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b083      	sub	sp, #12
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a532:	bf00      	nop
 800a534:	370c      	adds	r7, #12
 800a536:	46bd      	mov	sp, r7
 800a538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a53c:	4770      	bx	lr

0800a53e <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a53e:	b480      	push	{r7}
 800a540:	b083      	sub	sp, #12
 800a542:	af00      	add	r7, sp, #0
 800a544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a546:	bf00      	nop
 800a548:	370c      	adds	r7, #12
 800a54a:	46bd      	mov	sp, r7
 800a54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a550:	4770      	bx	lr
	...

0800a554 <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a554:	b480      	push	{r7}
 800a556:	b087      	sub	sp, #28
 800a558:	af00      	add	r7, sp, #0
 800a55a:	60f8      	str	r0, [r7, #12]
 800a55c:	460b      	mov	r3, r1
 800a55e:	607a      	str	r2, [r7, #4]
 800a560:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a562:	2300      	movs	r3, #0
 800a564:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d101      	bne.n	800a570 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a56c:	2301      	movs	r3, #1
 800a56e:	e135      	b.n	800a7dc <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a576:	2b01      	cmp	r3, #1
 800a578:	d101      	bne.n	800a57e <HAL_TIM_RegisterCallback+0x2a>
 800a57a:	2302      	movs	r3, #2
 800a57c:	e12e      	b.n	800a7dc <HAL_TIM_RegisterCallback+0x288>
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	2201      	movs	r2, #1
 800a582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a586:	68fb      	ldr	r3, [r7, #12]
 800a588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a58c:	b2db      	uxtb	r3, r3
 800a58e:	2b01      	cmp	r3, #1
 800a590:	f040 80ba 	bne.w	800a708 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a594:	7afb      	ldrb	r3, [r7, #11]
 800a596:	2b1a      	cmp	r3, #26
 800a598:	f200 80b3 	bhi.w	800a702 <HAL_TIM_RegisterCallback+0x1ae>
 800a59c:	a201      	add	r2, pc, #4	; (adr r2, 800a5a4 <HAL_TIM_RegisterCallback+0x50>)
 800a59e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5a2:	bf00      	nop
 800a5a4:	0800a611 	.word	0x0800a611
 800a5a8:	0800a619 	.word	0x0800a619
 800a5ac:	0800a621 	.word	0x0800a621
 800a5b0:	0800a629 	.word	0x0800a629
 800a5b4:	0800a631 	.word	0x0800a631
 800a5b8:	0800a639 	.word	0x0800a639
 800a5bc:	0800a641 	.word	0x0800a641
 800a5c0:	0800a649 	.word	0x0800a649
 800a5c4:	0800a651 	.word	0x0800a651
 800a5c8:	0800a659 	.word	0x0800a659
 800a5cc:	0800a661 	.word	0x0800a661
 800a5d0:	0800a669 	.word	0x0800a669
 800a5d4:	0800a671 	.word	0x0800a671
 800a5d8:	0800a679 	.word	0x0800a679
 800a5dc:	0800a681 	.word	0x0800a681
 800a5e0:	0800a68b 	.word	0x0800a68b
 800a5e4:	0800a695 	.word	0x0800a695
 800a5e8:	0800a69f 	.word	0x0800a69f
 800a5ec:	0800a6a9 	.word	0x0800a6a9
 800a5f0:	0800a6b3 	.word	0x0800a6b3
 800a5f4:	0800a6bd 	.word	0x0800a6bd
 800a5f8:	0800a6c7 	.word	0x0800a6c7
 800a5fc:	0800a6d1 	.word	0x0800a6d1
 800a600:	0800a6db 	.word	0x0800a6db
 800a604:	0800a6e5 	.word	0x0800a6e5
 800a608:	0800a6ef 	.word	0x0800a6ef
 800a60c:	0800a6f9 	.word	0x0800a6f9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a616:	e0dc      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a61e:	e0d8      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a626:	e0d4      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a62e:	e0d0      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a636:	e0cc      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a63e:	e0c8      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a646:	e0c4      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a64e:	e0c0      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	687a      	ldr	r2, [r7, #4]
 800a654:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a656:	e0bc      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	687a      	ldr	r2, [r7, #4]
 800a65c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a65e:	e0b8      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a660:	68fb      	ldr	r3, [r7, #12]
 800a662:	687a      	ldr	r2, [r7, #4]
 800a664:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a666:	e0b4      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	687a      	ldr	r2, [r7, #4]
 800a66c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a66e:	e0b0      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a676:	e0ac      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a678:	68fb      	ldr	r3, [r7, #12]
 800a67a:	687a      	ldr	r2, [r7, #4]
 800a67c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a67e:	e0a8      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	687a      	ldr	r2, [r7, #4]
 800a684:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a688:	e0a3      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	687a      	ldr	r2, [r7, #4]
 800a68e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a692:	e09e      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	687a      	ldr	r2, [r7, #4]
 800a698:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a69c:	e099      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a6a6:	e094      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	687a      	ldr	r2, [r7, #4]
 800a6ac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a6b0:	e08f      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	687a      	ldr	r2, [r7, #4]
 800a6b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a6ba:	e08a      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a6bc:	68fb      	ldr	r3, [r7, #12]
 800a6be:	687a      	ldr	r2, [r7, #4]
 800a6c0:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a6c4:	e085      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	687a      	ldr	r2, [r7, #4]
 800a6ca:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a6ce:	e080      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	687a      	ldr	r2, [r7, #4]
 800a6d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a6d8:	e07b      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	687a      	ldr	r2, [r7, #4]
 800a6de:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a6e2:	e076      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a6ec:	e071      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	687a      	ldr	r2, [r7, #4]
 800a6f2:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a6f6:	e06c      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a6f8:	68fb      	ldr	r3, [r7, #12]
 800a6fa:	687a      	ldr	r2, [r7, #4]
 800a6fc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a700:	e067      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a702:	2301      	movs	r3, #1
 800a704:	75fb      	strb	r3, [r7, #23]
        break;
 800a706:	e064      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a70e:	b2db      	uxtb	r3, r3
 800a710:	2b00      	cmp	r3, #0
 800a712:	d15c      	bne.n	800a7ce <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a714:	7afb      	ldrb	r3, [r7, #11]
 800a716:	2b0d      	cmp	r3, #13
 800a718:	d856      	bhi.n	800a7c8 <HAL_TIM_RegisterCallback+0x274>
 800a71a:	a201      	add	r2, pc, #4	; (adr r2, 800a720 <HAL_TIM_RegisterCallback+0x1cc>)
 800a71c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a720:	0800a759 	.word	0x0800a759
 800a724:	0800a761 	.word	0x0800a761
 800a728:	0800a769 	.word	0x0800a769
 800a72c:	0800a771 	.word	0x0800a771
 800a730:	0800a779 	.word	0x0800a779
 800a734:	0800a781 	.word	0x0800a781
 800a738:	0800a789 	.word	0x0800a789
 800a73c:	0800a791 	.word	0x0800a791
 800a740:	0800a799 	.word	0x0800a799
 800a744:	0800a7a1 	.word	0x0800a7a1
 800a748:	0800a7a9 	.word	0x0800a7a9
 800a74c:	0800a7b1 	.word	0x0800a7b1
 800a750:	0800a7b9 	.word	0x0800a7b9
 800a754:	0800a7c1 	.word	0x0800a7c1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a75e:	e038      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a766:	e034      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a76e:	e030      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a776:	e02c      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a77e:	e028      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a786:	e024      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a78e:	e020      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a796:	e01c      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a798:	68fb      	ldr	r3, [r7, #12]
 800a79a:	687a      	ldr	r2, [r7, #4]
 800a79c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a79e:	e018      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a7a0:	68fb      	ldr	r3, [r7, #12]
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a7a6:	e014      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	687a      	ldr	r2, [r7, #4]
 800a7ac:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a7ae:	e010      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	687a      	ldr	r2, [r7, #4]
 800a7b4:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a7b6:	e00c      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	687a      	ldr	r2, [r7, #4]
 800a7bc:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a7be:	e008      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a7c0:	68fb      	ldr	r3, [r7, #12]
 800a7c2:	687a      	ldr	r2, [r7, #4]
 800a7c4:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a7c6:	e004      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	75fb      	strb	r3, [r7, #23]
        break;
 800a7cc:	e001      	b.n	800a7d2 <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a7ce:	2301      	movs	r3, #1
 800a7d0:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7e8:	b480      	push	{r7}
 800a7ea:	b085      	sub	sp, #20
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
 800a7f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	4a34      	ldr	r2, [pc, #208]	; (800a8cc <TIM_Base_SetConfig+0xe4>)
 800a7fc:	4293      	cmp	r3, r2
 800a7fe:	d00f      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a806:	d00b      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	4a31      	ldr	r2, [pc, #196]	; (800a8d0 <TIM_Base_SetConfig+0xe8>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d007      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	4a30      	ldr	r2, [pc, #192]	; (800a8d4 <TIM_Base_SetConfig+0xec>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d003      	beq.n	800a820 <TIM_Base_SetConfig+0x38>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	4a2f      	ldr	r2, [pc, #188]	; (800a8d8 <TIM_Base_SetConfig+0xf0>)
 800a81c:	4293      	cmp	r3, r2
 800a81e:	d108      	bne.n	800a832 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a826:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a828:	683b      	ldr	r3, [r7, #0]
 800a82a:	685b      	ldr	r3, [r3, #4]
 800a82c:	68fa      	ldr	r2, [r7, #12]
 800a82e:	4313      	orrs	r3, r2
 800a830:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a25      	ldr	r2, [pc, #148]	; (800a8cc <TIM_Base_SetConfig+0xe4>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d01b      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a840:	d017      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	4a22      	ldr	r2, [pc, #136]	; (800a8d0 <TIM_Base_SetConfig+0xe8>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d013      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	4a21      	ldr	r2, [pc, #132]	; (800a8d4 <TIM_Base_SetConfig+0xec>)
 800a84e:	4293      	cmp	r3, r2
 800a850:	d00f      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	4a20      	ldr	r2, [pc, #128]	; (800a8d8 <TIM_Base_SetConfig+0xf0>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d00b      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	4a1f      	ldr	r2, [pc, #124]	; (800a8dc <TIM_Base_SetConfig+0xf4>)
 800a85e:	4293      	cmp	r3, r2
 800a860:	d007      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	4a1e      	ldr	r2, [pc, #120]	; (800a8e0 <TIM_Base_SetConfig+0xf8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d003      	beq.n	800a872 <TIM_Base_SetConfig+0x8a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	4a1d      	ldr	r2, [pc, #116]	; (800a8e4 <TIM_Base_SetConfig+0xfc>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d108      	bne.n	800a884 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a878:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a87a:	683b      	ldr	r3, [r7, #0]
 800a87c:	68db      	ldr	r3, [r3, #12]
 800a87e:	68fa      	ldr	r2, [r7, #12]
 800a880:	4313      	orrs	r3, r2
 800a882:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	695b      	ldr	r3, [r3, #20]
 800a88e:	4313      	orrs	r3, r2
 800a890:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	68fa      	ldr	r2, [r7, #12]
 800a896:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a898:	683b      	ldr	r3, [r7, #0]
 800a89a:	689a      	ldr	r2, [r3, #8]
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	681a      	ldr	r2, [r3, #0]
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	4a08      	ldr	r2, [pc, #32]	; (800a8cc <TIM_Base_SetConfig+0xe4>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d103      	bne.n	800a8b8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a8b0:	683b      	ldr	r3, [r7, #0]
 800a8b2:	691a      	ldr	r2, [r3, #16]
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	2201      	movs	r2, #1
 800a8bc:	615a      	str	r2, [r3, #20]
}
 800a8be:	bf00      	nop
 800a8c0:	3714      	adds	r7, #20
 800a8c2:	46bd      	mov	sp, r7
 800a8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c8:	4770      	bx	lr
 800a8ca:	bf00      	nop
 800a8cc:	40010000 	.word	0x40010000
 800a8d0:	40000400 	.word	0x40000400
 800a8d4:	40000800 	.word	0x40000800
 800a8d8:	40000c00 	.word	0x40000c00
 800a8dc:	40014000 	.word	0x40014000
 800a8e0:	40014400 	.word	0x40014400
 800a8e4:	40014800 	.word	0x40014800

0800a8e8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8e8:	b480      	push	{r7}
 800a8ea:	b087      	sub	sp, #28
 800a8ec:	af00      	add	r7, sp, #0
 800a8ee:	6078      	str	r0, [r7, #4]
 800a8f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	6a1b      	ldr	r3, [r3, #32]
 800a8f6:	f023 0201 	bic.w	r2, r3, #1
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	6a1b      	ldr	r3, [r3, #32]
 800a902:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	685b      	ldr	r3, [r3, #4]
 800a908:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	699b      	ldr	r3, [r3, #24]
 800a90e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a916:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	f023 0303 	bic.w	r3, r3, #3
 800a91e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a920:	683b      	ldr	r3, [r7, #0]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4313      	orrs	r3, r2
 800a928:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a92a:	697b      	ldr	r3, [r7, #20]
 800a92c:	f023 0302 	bic.w	r3, r3, #2
 800a930:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a932:	683b      	ldr	r3, [r7, #0]
 800a934:	689b      	ldr	r3, [r3, #8]
 800a936:	697a      	ldr	r2, [r7, #20]
 800a938:	4313      	orrs	r3, r2
 800a93a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a93c:	687b      	ldr	r3, [r7, #4]
 800a93e:	4a1c      	ldr	r2, [pc, #112]	; (800a9b0 <TIM_OC1_SetConfig+0xc8>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d10c      	bne.n	800a95e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a944:	697b      	ldr	r3, [r7, #20]
 800a946:	f023 0308 	bic.w	r3, r3, #8
 800a94a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	68db      	ldr	r3, [r3, #12]
 800a950:	697a      	ldr	r2, [r7, #20]
 800a952:	4313      	orrs	r3, r2
 800a954:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a956:	697b      	ldr	r3, [r7, #20]
 800a958:	f023 0304 	bic.w	r3, r3, #4
 800a95c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	4a13      	ldr	r2, [pc, #76]	; (800a9b0 <TIM_OC1_SetConfig+0xc8>)
 800a962:	4293      	cmp	r3, r2
 800a964:	d111      	bne.n	800a98a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a96c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a96e:	693b      	ldr	r3, [r7, #16]
 800a970:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a974:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a976:	683b      	ldr	r3, [r7, #0]
 800a978:	695b      	ldr	r3, [r3, #20]
 800a97a:	693a      	ldr	r2, [r7, #16]
 800a97c:	4313      	orrs	r3, r2
 800a97e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a980:	683b      	ldr	r3, [r7, #0]
 800a982:	699b      	ldr	r3, [r3, #24]
 800a984:	693a      	ldr	r2, [r7, #16]
 800a986:	4313      	orrs	r3, r2
 800a988:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	693a      	ldr	r2, [r7, #16]
 800a98e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	68fa      	ldr	r2, [r7, #12]
 800a994:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a996:	683b      	ldr	r3, [r7, #0]
 800a998:	685a      	ldr	r2, [r3, #4]
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	697a      	ldr	r2, [r7, #20]
 800a9a2:	621a      	str	r2, [r3, #32]
}
 800a9a4:	bf00      	nop
 800a9a6:	371c      	adds	r7, #28
 800a9a8:	46bd      	mov	sp, r7
 800a9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ae:	4770      	bx	lr
 800a9b0:	40010000 	.word	0x40010000

0800a9b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	b087      	sub	sp, #28
 800a9b8:	af00      	add	r7, sp, #0
 800a9ba:	6078      	str	r0, [r7, #4]
 800a9bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6a1b      	ldr	r3, [r3, #32]
 800a9c2:	f023 0210 	bic.w	r2, r3, #16
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6a1b      	ldr	r3, [r3, #32]
 800a9ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	685b      	ldr	r3, [r3, #4]
 800a9d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	699b      	ldr	r3, [r3, #24]
 800a9da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9ec:	683b      	ldr	r3, [r7, #0]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	021b      	lsls	r3, r3, #8
 800a9f2:	68fa      	ldr	r2, [r7, #12]
 800a9f4:	4313      	orrs	r3, r2
 800a9f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9f8:	697b      	ldr	r3, [r7, #20]
 800a9fa:	f023 0320 	bic.w	r3, r3, #32
 800a9fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800aa00:	683b      	ldr	r3, [r7, #0]
 800aa02:	689b      	ldr	r3, [r3, #8]
 800aa04:	011b      	lsls	r3, r3, #4
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	4313      	orrs	r3, r2
 800aa0a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	4a1e      	ldr	r2, [pc, #120]	; (800aa88 <TIM_OC2_SetConfig+0xd4>)
 800aa10:	4293      	cmp	r3, r2
 800aa12:	d10d      	bne.n	800aa30 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800aa14:	697b      	ldr	r3, [r7, #20]
 800aa16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aa1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	68db      	ldr	r3, [r3, #12]
 800aa20:	011b      	lsls	r3, r3, #4
 800aa22:	697a      	ldr	r2, [r7, #20]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800aa28:	697b      	ldr	r3, [r7, #20]
 800aa2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800aa2e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	4a15      	ldr	r2, [pc, #84]	; (800aa88 <TIM_OC2_SetConfig+0xd4>)
 800aa34:	4293      	cmp	r3, r2
 800aa36:	d113      	bne.n	800aa60 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa38:	693b      	ldr	r3, [r7, #16]
 800aa3a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa3e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa40:	693b      	ldr	r3, [r7, #16]
 800aa42:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa46:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa48:	683b      	ldr	r3, [r7, #0]
 800aa4a:	695b      	ldr	r3, [r3, #20]
 800aa4c:	009b      	lsls	r3, r3, #2
 800aa4e:	693a      	ldr	r2, [r7, #16]
 800aa50:	4313      	orrs	r3, r2
 800aa52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa54:	683b      	ldr	r3, [r7, #0]
 800aa56:	699b      	ldr	r3, [r3, #24]
 800aa58:	009b      	lsls	r3, r3, #2
 800aa5a:	693a      	ldr	r2, [r7, #16]
 800aa5c:	4313      	orrs	r3, r2
 800aa5e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	693a      	ldr	r2, [r7, #16]
 800aa64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	68fa      	ldr	r2, [r7, #12]
 800aa6a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa6c:	683b      	ldr	r3, [r7, #0]
 800aa6e:	685a      	ldr	r2, [r3, #4]
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	697a      	ldr	r2, [r7, #20]
 800aa78:	621a      	str	r2, [r3, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr
 800aa86:	bf00      	nop
 800aa88:	40010000 	.word	0x40010000

0800aa8c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa8c:	b480      	push	{r7}
 800aa8e:	b087      	sub	sp, #28
 800aa90:	af00      	add	r7, sp, #0
 800aa92:	6078      	str	r0, [r7, #4]
 800aa94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6a1b      	ldr	r3, [r3, #32]
 800aa9a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	6a1b      	ldr	r3, [r3, #32]
 800aaa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	685b      	ldr	r3, [r3, #4]
 800aaac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	69db      	ldr	r3, [r3, #28]
 800aab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aaba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f023 0303 	bic.w	r3, r3, #3
 800aac2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aac4:	683b      	ldr	r3, [r7, #0]
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	68fa      	ldr	r2, [r7, #12]
 800aaca:	4313      	orrs	r3, r2
 800aacc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aad4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aad6:	683b      	ldr	r3, [r7, #0]
 800aad8:	689b      	ldr	r3, [r3, #8]
 800aada:	021b      	lsls	r3, r3, #8
 800aadc:	697a      	ldr	r2, [r7, #20]
 800aade:	4313      	orrs	r3, r2
 800aae0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aae2:	687b      	ldr	r3, [r7, #4]
 800aae4:	4a1d      	ldr	r2, [pc, #116]	; (800ab5c <TIM_OC3_SetConfig+0xd0>)
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d10d      	bne.n	800ab06 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aaea:	697b      	ldr	r3, [r7, #20]
 800aaec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aaf0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	68db      	ldr	r3, [r3, #12]
 800aaf6:	021b      	lsls	r3, r3, #8
 800aaf8:	697a      	ldr	r2, [r7, #20]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ab04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	4a14      	ldr	r2, [pc, #80]	; (800ab5c <TIM_OC3_SetConfig+0xd0>)
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d113      	bne.n	800ab36 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800ab0e:	693b      	ldr	r3, [r7, #16]
 800ab10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ab14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800ab16:	693b      	ldr	r3, [r7, #16]
 800ab18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	695b      	ldr	r3, [r3, #20]
 800ab22:	011b      	lsls	r3, r3, #4
 800ab24:	693a      	ldr	r2, [r7, #16]
 800ab26:	4313      	orrs	r3, r2
 800ab28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800ab2a:	683b      	ldr	r3, [r7, #0]
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	011b      	lsls	r3, r3, #4
 800ab30:	693a      	ldr	r2, [r7, #16]
 800ab32:	4313      	orrs	r3, r2
 800ab34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	693a      	ldr	r2, [r7, #16]
 800ab3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab42:	683b      	ldr	r3, [r7, #0]
 800ab44:	685a      	ldr	r2, [r3, #4]
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	697a      	ldr	r2, [r7, #20]
 800ab4e:	621a      	str	r2, [r3, #32]
}
 800ab50:	bf00      	nop
 800ab52:	371c      	adds	r7, #28
 800ab54:	46bd      	mov	sp, r7
 800ab56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5a:	4770      	bx	lr
 800ab5c:	40010000 	.word	0x40010000

0800ab60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab60:	b480      	push	{r7}
 800ab62:	b087      	sub	sp, #28
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a1b      	ldr	r3, [r3, #32]
 800ab6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	685b      	ldr	r3, [r3, #4]
 800ab80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	69db      	ldr	r3, [r3, #28]
 800ab86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab98:	683b      	ldr	r3, [r7, #0]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	021b      	lsls	r3, r3, #8
 800ab9e:	68fa      	ldr	r2, [r7, #12]
 800aba0:	4313      	orrs	r3, r2
 800aba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800abaa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800abac:	683b      	ldr	r3, [r7, #0]
 800abae:	689b      	ldr	r3, [r3, #8]
 800abb0:	031b      	lsls	r3, r3, #12
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	4313      	orrs	r3, r2
 800abb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	4a10      	ldr	r2, [pc, #64]	; (800abfc <TIM_OC4_SetConfig+0x9c>)
 800abbc:	4293      	cmp	r3, r2
 800abbe:	d109      	bne.n	800abd4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800abc0:	697b      	ldr	r3, [r7, #20]
 800abc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800abc6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	695b      	ldr	r3, [r3, #20]
 800abcc:	019b      	lsls	r3, r3, #6
 800abce:	697a      	ldr	r2, [r7, #20]
 800abd0:	4313      	orrs	r3, r2
 800abd2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	697a      	ldr	r2, [r7, #20]
 800abd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	68fa      	ldr	r2, [r7, #12]
 800abde:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800abe0:	683b      	ldr	r3, [r7, #0]
 800abe2:	685a      	ldr	r2, [r3, #4]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	693a      	ldr	r2, [r7, #16]
 800abec:	621a      	str	r2, [r3, #32]
}
 800abee:	bf00      	nop
 800abf0:	371c      	adds	r7, #28
 800abf2:	46bd      	mov	sp, r7
 800abf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf8:	4770      	bx	lr
 800abfa:	bf00      	nop
 800abfc:	40010000 	.word	0x40010000

0800ac00 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b087      	sub	sp, #28
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	6a1b      	ldr	r3, [r3, #32]
 800ac10:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	6a1b      	ldr	r3, [r3, #32]
 800ac16:	f023 0201 	bic.w	r2, r3, #1
 800ac1a:	68fb      	ldr	r3, [r7, #12]
 800ac1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	699b      	ldr	r3, [r3, #24]
 800ac22:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800ac24:	693b      	ldr	r3, [r7, #16]
 800ac26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800ac2a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	011b      	lsls	r3, r3, #4
 800ac30:	693a      	ldr	r2, [r7, #16]
 800ac32:	4313      	orrs	r3, r2
 800ac34:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800ac36:	697b      	ldr	r3, [r7, #20]
 800ac38:	f023 030a 	bic.w	r3, r3, #10
 800ac3c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac3e:	697a      	ldr	r2, [r7, #20]
 800ac40:	68bb      	ldr	r3, [r7, #8]
 800ac42:	4313      	orrs	r3, r2
 800ac44:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	693a      	ldr	r2, [r7, #16]
 800ac4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac4c:	68fb      	ldr	r3, [r7, #12]
 800ac4e:	697a      	ldr	r2, [r7, #20]
 800ac50:	621a      	str	r2, [r3, #32]
}
 800ac52:	bf00      	nop
 800ac54:	371c      	adds	r7, #28
 800ac56:	46bd      	mov	sp, r7
 800ac58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac5c:	4770      	bx	lr

0800ac5e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac5e:	b480      	push	{r7}
 800ac60:	b087      	sub	sp, #28
 800ac62:	af00      	add	r7, sp, #0
 800ac64:	60f8      	str	r0, [r7, #12]
 800ac66:	60b9      	str	r1, [r7, #8]
 800ac68:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	6a1b      	ldr	r3, [r3, #32]
 800ac6e:	f023 0210 	bic.w	r2, r3, #16
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac76:	68fb      	ldr	r3, [r7, #12]
 800ac78:	699b      	ldr	r3, [r3, #24]
 800ac7a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	6a1b      	ldr	r3, [r3, #32]
 800ac80:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	031b      	lsls	r3, r3, #12
 800ac8e:	697a      	ldr	r2, [r7, #20]
 800ac90:	4313      	orrs	r3, r2
 800ac92:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac9a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	011b      	lsls	r3, r3, #4
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	697a      	ldr	r2, [r7, #20]
 800acaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	693a      	ldr	r2, [r7, #16]
 800acb0:	621a      	str	r2, [r3, #32]
}
 800acb2:	bf00      	nop
 800acb4:	371c      	adds	r7, #28
 800acb6:	46bd      	mov	sp, r7
 800acb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbc:	4770      	bx	lr

0800acbe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800acbe:	b480      	push	{r7}
 800acc0:	b085      	sub	sp, #20
 800acc2:	af00      	add	r7, sp, #0
 800acc4:	6078      	str	r0, [r7, #4]
 800acc6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	689b      	ldr	r3, [r3, #8]
 800accc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800acd4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800acd6:	683a      	ldr	r2, [r7, #0]
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	4313      	orrs	r3, r2
 800acdc:	f043 0307 	orr.w	r3, r3, #7
 800ace0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	68fa      	ldr	r2, [r7, #12]
 800ace6:	609a      	str	r2, [r3, #8]
}
 800ace8:	bf00      	nop
 800acea:	3714      	adds	r7, #20
 800acec:	46bd      	mov	sp, r7
 800acee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acf2:	4770      	bx	lr

0800acf4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acf4:	b480      	push	{r7}
 800acf6:	b087      	sub	sp, #28
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	60f8      	str	r0, [r7, #12]
 800acfc:	60b9      	str	r1, [r7, #8]
 800acfe:	607a      	str	r2, [r7, #4]
 800ad00:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	689b      	ldr	r3, [r3, #8]
 800ad06:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad08:	697b      	ldr	r3, [r7, #20]
 800ad0a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad0e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800ad10:	683b      	ldr	r3, [r7, #0]
 800ad12:	021a      	lsls	r2, r3, #8
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	431a      	orrs	r2, r3
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	4313      	orrs	r3, r2
 800ad1c:	697a      	ldr	r2, [r7, #20]
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	697a      	ldr	r2, [r7, #20]
 800ad26:	609a      	str	r2, [r3, #8]
}
 800ad28:	bf00      	nop
 800ad2a:	371c      	adds	r7, #28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad32:	4770      	bx	lr

0800ad34 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800ad34:	b480      	push	{r7}
 800ad36:	b087      	sub	sp, #28
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	60f8      	str	r0, [r7, #12]
 800ad3c:	60b9      	str	r1, [r7, #8]
 800ad3e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad40:	68bb      	ldr	r3, [r7, #8]
 800ad42:	f003 031f 	and.w	r3, r3, #31
 800ad46:	2201      	movs	r2, #1
 800ad48:	fa02 f303 	lsl.w	r3, r2, r3
 800ad4c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	6a1a      	ldr	r2, [r3, #32]
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	43db      	mvns	r3, r3
 800ad56:	401a      	ands	r2, r3
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	6a1a      	ldr	r2, [r3, #32]
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	f003 031f 	and.w	r3, r3, #31
 800ad66:	6879      	ldr	r1, [r7, #4]
 800ad68:	fa01 f303 	lsl.w	r3, r1, r3
 800ad6c:	431a      	orrs	r2, r3
 800ad6e:	68fb      	ldr	r3, [r7, #12]
 800ad70:	621a      	str	r2, [r3, #32]
}
 800ad72:	bf00      	nop
 800ad74:	371c      	adds	r7, #28
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a1c      	ldr	r2, [pc, #112]	; (800adfc <TIM_ResetCallback+0x7c>)
 800ad8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a1b      	ldr	r2, [pc, #108]	; (800ae00 <TIM_ResetCallback+0x80>)
 800ad94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a1a      	ldr	r2, [pc, #104]	; (800ae04 <TIM_ResetCallback+0x84>)
 800ad9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a19      	ldr	r2, [pc, #100]	; (800ae08 <TIM_ResetCallback+0x88>)
 800ada4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a18      	ldr	r2, [pc, #96]	; (800ae0c <TIM_ResetCallback+0x8c>)
 800adac:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a17      	ldr	r2, [pc, #92]	; (800ae10 <TIM_ResetCallback+0x90>)
 800adb4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	4a16      	ldr	r2, [pc, #88]	; (800ae14 <TIM_ResetCallback+0x94>)
 800adbc:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	4a15      	ldr	r2, [pc, #84]	; (800ae18 <TIM_ResetCallback+0x98>)
 800adc4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	4a14      	ldr	r2, [pc, #80]	; (800ae1c <TIM_ResetCallback+0x9c>)
 800adcc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a13      	ldr	r2, [pc, #76]	; (800ae20 <TIM_ResetCallback+0xa0>)
 800add4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a12      	ldr	r2, [pc, #72]	; (800ae24 <TIM_ResetCallback+0xa4>)
 800addc:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	4a11      	ldr	r2, [pc, #68]	; (800ae28 <TIM_ResetCallback+0xa8>)
 800ade4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	4a10      	ldr	r2, [pc, #64]	; (800ae2c <TIM_ResetCallback+0xac>)
 800adec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800adf0:	bf00      	nop
 800adf2:	370c      	adds	r7, #12
 800adf4:	46bd      	mov	sp, r7
 800adf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adfa:	4770      	bx	lr
 800adfc:	08003d61 	.word	0x08003d61
 800ae00:	0800a49f 	.word	0x0800a49f
 800ae04:	0800a517 	.word	0x0800a517
 800ae08:	0800a52b 	.word	0x0800a52b
 800ae0c:	0800a4c7 	.word	0x0800a4c7
 800ae10:	0800a4db 	.word	0x0800a4db
 800ae14:	0800a4b3 	.word	0x0800a4b3
 800ae18:	0800a4ef 	.word	0x0800a4ef
 800ae1c:	0800a503 	.word	0x0800a503
 800ae20:	0800a53f 	.word	0x0800a53f
 800ae24:	0800afb1 	.word	0x0800afb1
 800ae28:	0800afc5 	.word	0x0800afc5
 800ae2c:	0800afd9 	.word	0x0800afd9

0800ae30 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ae30:	b480      	push	{r7}
 800ae32:	b085      	sub	sp, #20
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
 800ae38:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae40:	2b01      	cmp	r3, #1
 800ae42:	d101      	bne.n	800ae48 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae44:	2302      	movs	r3, #2
 800ae46:	e050      	b.n	800aeea <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2201      	movs	r2, #1
 800ae4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	2202      	movs	r2, #2
 800ae54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	689b      	ldr	r3, [r3, #8]
 800ae66:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae6e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	68fa      	ldr	r2, [r7, #12]
 800ae76:	4313      	orrs	r3, r2
 800ae78:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	68fa      	ldr	r2, [r7, #12]
 800ae80:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	4a1c      	ldr	r2, [pc, #112]	; (800aef8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae88:	4293      	cmp	r3, r2
 800ae8a:	d018      	beq.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae94:	d013      	beq.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	4a18      	ldr	r2, [pc, #96]	; (800aefc <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d00e      	beq.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a16      	ldr	r2, [pc, #88]	; (800af00 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d009      	beq.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	4a15      	ldr	r2, [pc, #84]	; (800af04 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	d004      	beq.n	800aebe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	4a13      	ldr	r2, [pc, #76]	; (800af08 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800aeba:	4293      	cmp	r3, r2
 800aebc:	d10c      	bne.n	800aed8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800aec4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800aec6:	683b      	ldr	r3, [r7, #0]
 800aec8:	685b      	ldr	r3, [r3, #4]
 800aeca:	68ba      	ldr	r2, [r7, #8]
 800aecc:	4313      	orrs	r3, r2
 800aece:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	68ba      	ldr	r2, [r7, #8]
 800aed6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2201      	movs	r2, #1
 800aedc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aee8:	2300      	movs	r3, #0
}
 800aeea:	4618      	mov	r0, r3
 800aeec:	3714      	adds	r7, #20
 800aeee:	46bd      	mov	sp, r7
 800aef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef4:	4770      	bx	lr
 800aef6:	bf00      	nop
 800aef8:	40010000 	.word	0x40010000
 800aefc:	40000400 	.word	0x40000400
 800af00:	40000800 	.word	0x40000800
 800af04:	40000c00 	.word	0x40000c00
 800af08:	40014000 	.word	0x40014000

0800af0c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800af0c:	b480      	push	{r7}
 800af0e:	b085      	sub	sp, #20
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800af16:	2300      	movs	r3, #0
 800af18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800af20:	2b01      	cmp	r3, #1
 800af22:	d101      	bne.n	800af28 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800af24:	2302      	movs	r3, #2
 800af26:	e03d      	b.n	800afa4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2201      	movs	r2, #1
 800af2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	685b      	ldr	r3, [r3, #4]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	4313      	orrs	r3, r2
 800af66:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af6e:	683b      	ldr	r3, [r7, #0]
 800af70:	691b      	ldr	r3, [r3, #16]
 800af72:	4313      	orrs	r3, r2
 800af74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	695b      	ldr	r3, [r3, #20]
 800af80:	4313      	orrs	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	4313      	orrs	r3, r2
 800af90:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	2200      	movs	r2, #0
 800af9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3714      	adds	r7, #20
 800afa8:	46bd      	mov	sp, r7
 800afaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afae:	4770      	bx	lr

0800afb0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800afb0:	b480      	push	{r7}
 800afb2:	b083      	sub	sp, #12
 800afb4:	af00      	add	r7, sp, #0
 800afb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800afb8:	bf00      	nop
 800afba:	370c      	adds	r7, #12
 800afbc:	46bd      	mov	sp, r7
 800afbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc2:	4770      	bx	lr

0800afc4 <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800afc4:	b480      	push	{r7}
 800afc6:	b083      	sub	sp, #12
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800afcc:	bf00      	nop
 800afce:	370c      	adds	r7, #12
 800afd0:	46bd      	mov	sp, r7
 800afd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd6:	4770      	bx	lr

0800afd8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afd8:	b480      	push	{r7}
 800afda:	b083      	sub	sp, #12
 800afdc:	af00      	add	r7, sp, #0
 800afde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afe0:	bf00      	nop
 800afe2:	370c      	adds	r7, #12
 800afe4:	46bd      	mov	sp, r7
 800afe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afea:	4770      	bx	lr

0800afec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afec:	b580      	push	{r7, lr}
 800afee:	b082      	sub	sp, #8
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d101      	bne.n	800affe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800affa:	2301      	movs	r3, #1
 800affc:	e04a      	b.n	800b094 <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b004:	b2db      	uxtb	r3, r3
 800b006:	2b00      	cmp	r3, #0
 800b008:	d111      	bne.n	800b02e <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	2200      	movs	r2, #0
 800b00e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b012:	6878      	ldr	r0, [r7, #4]
 800b014:	f000 fd72 	bl	800bafc <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	d102      	bne.n	800b026 <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	4a1e      	ldr	r2, [pc, #120]	; (800b09c <HAL_UART_Init+0xb0>)
 800b024:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b02a:	6878      	ldr	r0, [r7, #4]
 800b02c:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	2224      	movs	r2, #36	; 0x24
 800b032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b036:	687b      	ldr	r3, [r7, #4]
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	68da      	ldr	r2, [r3, #12]
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b044:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f001 f83c 	bl	800c0c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	691a      	ldr	r2, [r3, #16]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b05a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	695a      	ldr	r2, [r3, #20]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b06a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b07a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	2200      	movs	r2, #0
 800b080:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b082:	687b      	ldr	r3, [r7, #4]
 800b084:	2220      	movs	r2, #32
 800b086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2220      	movs	r2, #32
 800b08e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b092:	2300      	movs	r3, #0
}
 800b094:	4618      	mov	r0, r3
 800b096:	3708      	adds	r7, #8
 800b098:	46bd      	mov	sp, r7
 800b09a:	bd80      	pop	{r7, pc}
 800b09c:	08004c01 	.word	0x08004c01

0800b0a0 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b0a0:	b480      	push	{r7}
 800b0a2:	b087      	sub	sp, #28
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	60f8      	str	r0, [r7, #12]
 800b0a8:	460b      	mov	r3, r1
 800b0aa:	607a      	str	r2, [r7, #4]
 800b0ac:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b0ae:	2300      	movs	r3, #0
 800b0b0:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d107      	bne.n	800b0c8 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0bc:	f043 0220 	orr.w	r2, r3, #32
 800b0c0:	68fb      	ldr	r3, [r7, #12]
 800b0c2:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b0c4:	2301      	movs	r3, #1
 800b0c6:	e08c      	b.n	800b1e2 <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d101      	bne.n	800b0d6 <HAL_UART_RegisterCallback+0x36>
 800b0d2:	2302      	movs	r3, #2
 800b0d4:	e085      	b.n	800b1e2 <HAL_UART_RegisterCallback+0x142>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	2201      	movs	r2, #1
 800b0da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0e4:	b2db      	uxtb	r3, r3
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d151      	bne.n	800b18e <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b0ea:	7afb      	ldrb	r3, [r7, #11]
 800b0ec:	2b0c      	cmp	r3, #12
 800b0ee:	d845      	bhi.n	800b17c <HAL_UART_RegisterCallback+0xdc>
 800b0f0:	a201      	add	r2, pc, #4	; (adr r2, 800b0f8 <HAL_UART_RegisterCallback+0x58>)
 800b0f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0f6:	bf00      	nop
 800b0f8:	0800b12d 	.word	0x0800b12d
 800b0fc:	0800b135 	.word	0x0800b135
 800b100:	0800b13d 	.word	0x0800b13d
 800b104:	0800b145 	.word	0x0800b145
 800b108:	0800b14d 	.word	0x0800b14d
 800b10c:	0800b155 	.word	0x0800b155
 800b110:	0800b15d 	.word	0x0800b15d
 800b114:	0800b165 	.word	0x0800b165
 800b118:	0800b17d 	.word	0x0800b17d
 800b11c:	0800b17d 	.word	0x0800b17d
 800b120:	0800b17d 	.word	0x0800b17d
 800b124:	0800b16d 	.word	0x0800b16d
 800b128:	0800b175 	.word	0x0800b175
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b132:	e051      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b13a:	e04d      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b142:	e049      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	687a      	ldr	r2, [r7, #4]
 800b148:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b14a:	e045      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	687a      	ldr	r2, [r7, #4]
 800b150:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b152:	e041      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b154:	68fb      	ldr	r3, [r7, #12]
 800b156:	687a      	ldr	r2, [r7, #4]
 800b158:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b15a:	e03d      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	687a      	ldr	r2, [r7, #4]
 800b160:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b162:	e039      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	687a      	ldr	r2, [r7, #4]
 800b168:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b16a:	e035      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	687a      	ldr	r2, [r7, #4]
 800b170:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b172:	e031      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b17a:	e02d      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b17c:	68fb      	ldr	r3, [r7, #12]
 800b17e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b180:	f043 0220 	orr.w	r2, r3, #32
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b188:	2301      	movs	r3, #1
 800b18a:	75fb      	strb	r3, [r7, #23]
        break;
 800b18c:	e024      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b18e:	68fb      	ldr	r3, [r7, #12]
 800b190:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b194:	b2db      	uxtb	r3, r3
 800b196:	2b00      	cmp	r3, #0
 800b198:	d116      	bne.n	800b1c8 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b19a:	7afb      	ldrb	r3, [r7, #11]
 800b19c:	2b0b      	cmp	r3, #11
 800b19e:	d002      	beq.n	800b1a6 <HAL_UART_RegisterCallback+0x106>
 800b1a0:	2b0c      	cmp	r3, #12
 800b1a2:	d004      	beq.n	800b1ae <HAL_UART_RegisterCallback+0x10e>
 800b1a4:	e007      	b.n	800b1b6 <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b1a6:	68fb      	ldr	r3, [r7, #12]
 800b1a8:	687a      	ldr	r2, [r7, #4]
 800b1aa:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b1ac:	e014      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	687a      	ldr	r2, [r7, #4]
 800b1b2:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b1b4:	e010      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	f043 0220 	orr.w	r2, r3, #32
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b1c2:	2301      	movs	r3, #1
 800b1c4:	75fb      	strb	r3, [r7, #23]
        break;
 800b1c6:	e007      	b.n	800b1d8 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1cc:	f043 0220 	orr.w	r2, r3, #32
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	2200      	movs	r2, #0
 800b1dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1e0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	371c      	adds	r7, #28
 800b1e6:	46bd      	mov	sp, r7
 800b1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1ec:	4770      	bx	lr
 800b1ee:	bf00      	nop

0800b1f0 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b085      	sub	sp, #20
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	60f8      	str	r0, [r7, #12]
 800b1f8:	60b9      	str	r1, [r7, #8]
 800b1fa:	4613      	mov	r3, r2
 800b1fc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b204:	b2db      	uxtb	r3, r3
 800b206:	2b20      	cmp	r3, #32
 800b208:	d130      	bne.n	800b26c <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d002      	beq.n	800b216 <HAL_UART_Transmit_IT+0x26>
 800b210:	88fb      	ldrh	r3, [r7, #6]
 800b212:	2b00      	cmp	r3, #0
 800b214:	d101      	bne.n	800b21a <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b216:	2301      	movs	r3, #1
 800b218:	e029      	b.n	800b26e <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b220:	2b01      	cmp	r3, #1
 800b222:	d101      	bne.n	800b228 <HAL_UART_Transmit_IT+0x38>
 800b224:	2302      	movs	r3, #2
 800b226:	e022      	b.n	800b26e <HAL_UART_Transmit_IT+0x7e>
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	2201      	movs	r2, #1
 800b22c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b230:	68fb      	ldr	r3, [r7, #12]
 800b232:	68ba      	ldr	r2, [r7, #8]
 800b234:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	88fa      	ldrh	r2, [r7, #6]
 800b23a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	88fa      	ldrh	r2, [r7, #6]
 800b240:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	2200      	movs	r2, #0
 800b246:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2221      	movs	r2, #33	; 0x21
 800b24c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	68da      	ldr	r2, [r3, #12]
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	681b      	ldr	r3, [r3, #0]
 800b262:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b266:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b268:	2300      	movs	r3, #0
 800b26a:	e000      	b.n	800b26e <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b26c:	2302      	movs	r3, #2
  }
}
 800b26e:	4618      	mov	r0, r3
 800b270:	3714      	adds	r7, #20
 800b272:	46bd      	mov	sp, r7
 800b274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b278:	4770      	bx	lr

0800b27a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b27a:	b580      	push	{r7, lr}
 800b27c:	b084      	sub	sp, #16
 800b27e:	af00      	add	r7, sp, #0
 800b280:	60f8      	str	r0, [r7, #12]
 800b282:	60b9      	str	r1, [r7, #8]
 800b284:	4613      	mov	r3, r2
 800b286:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b288:	68fb      	ldr	r3, [r7, #12]
 800b28a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b28e:	b2db      	uxtb	r3, r3
 800b290:	2b20      	cmp	r3, #32
 800b292:	d11d      	bne.n	800b2d0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <HAL_UART_Receive_IT+0x26>
 800b29a:	88fb      	ldrh	r3, [r7, #6]
 800b29c:	2b00      	cmp	r3, #0
 800b29e:	d101      	bne.n	800b2a4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b2a0:	2301      	movs	r3, #1
 800b2a2:	e016      	b.n	800b2d2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2aa:	2b01      	cmp	r3, #1
 800b2ac:	d101      	bne.n	800b2b2 <HAL_UART_Receive_IT+0x38>
 800b2ae:	2302      	movs	r3, #2
 800b2b0:	e00f      	b.n	800b2d2 <HAL_UART_Receive_IT+0x58>
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2201      	movs	r2, #1
 800b2b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b2c0:	88fb      	ldrh	r3, [r7, #6]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 fcf8 	bl	800bcbc <UART_Start_Receive_IT>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	e000      	b.n	800b2d2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b2d0:	2302      	movs	r3, #2
  }
}
 800b2d2:	4618      	mov	r0, r3
 800b2d4:	3710      	adds	r7, #16
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
	...

0800b2dc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b08c      	sub	sp, #48	; 0x30
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	60f8      	str	r0, [r7, #12]
 800b2e4:	60b9      	str	r1, [r7, #8]
 800b2e6:	4613      	mov	r3, r2
 800b2e8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2f0:	b2db      	uxtb	r3, r3
 800b2f2:	2b20      	cmp	r3, #32
 800b2f4:	d165      	bne.n	800b3c2 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2f6:	68bb      	ldr	r3, [r7, #8]
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d002      	beq.n	800b302 <HAL_UART_Transmit_DMA+0x26>
 800b2fc:	88fb      	ldrh	r3, [r7, #6]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	d101      	bne.n	800b306 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b302:	2301      	movs	r3, #1
 800b304:	e05e      	b.n	800b3c4 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b30c:	2b01      	cmp	r3, #1
 800b30e:	d101      	bne.n	800b314 <HAL_UART_Transmit_DMA+0x38>
 800b310:	2302      	movs	r3, #2
 800b312:	e057      	b.n	800b3c4 <HAL_UART_Transmit_DMA+0xe8>
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	2201      	movs	r2, #1
 800b318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b31c:	68ba      	ldr	r2, [r7, #8]
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	88fa      	ldrh	r2, [r7, #6]
 800b326:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	88fa      	ldrh	r2, [r7, #6]
 800b32c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	2200      	movs	r2, #0
 800b332:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b334:	68fb      	ldr	r3, [r7, #12]
 800b336:	2221      	movs	r2, #33	; 0x21
 800b338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b340:	4a22      	ldr	r2, [pc, #136]	; (800b3cc <HAL_UART_Transmit_DMA+0xf0>)
 800b342:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b348:	4a21      	ldr	r2, [pc, #132]	; (800b3d0 <HAL_UART_Transmit_DMA+0xf4>)
 800b34a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b350:	4a20      	ldr	r2, [pc, #128]	; (800b3d4 <HAL_UART_Transmit_DMA+0xf8>)
 800b352:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b358:	2200      	movs	r2, #0
 800b35a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b35c:	f107 0308 	add.w	r3, r7, #8
 800b360:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b366:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b368:	6819      	ldr	r1, [r3, #0]
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3304      	adds	r3, #4
 800b370:	461a      	mov	r2, r3
 800b372:	88fb      	ldrh	r3, [r7, #6]
 800b374:	f7fa fd14 	bl	8005da0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b380:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b382:	68fb      	ldr	r3, [r7, #12]
 800b384:	2200      	movs	r2, #0
 800b386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	3314      	adds	r3, #20
 800b390:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b392:	69bb      	ldr	r3, [r7, #24]
 800b394:	e853 3f00 	ldrex	r3, [r3]
 800b398:	617b      	str	r3, [r7, #20]
   return(result);
 800b39a:	697b      	ldr	r3, [r7, #20]
 800b39c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b3a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	3314      	adds	r3, #20
 800b3a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b3aa:	627a      	str	r2, [r7, #36]	; 0x24
 800b3ac:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3ae:	6a39      	ldr	r1, [r7, #32]
 800b3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b3b2:	e841 2300 	strex	r3, r2, [r1]
 800b3b6:	61fb      	str	r3, [r7, #28]
   return(result);
 800b3b8:	69fb      	ldr	r3, [r7, #28]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d1e5      	bne.n	800b38a <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b3be:	2300      	movs	r3, #0
 800b3c0:	e000      	b.n	800b3c4 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b3c2:	2302      	movs	r3, #2
  }
}
 800b3c4:	4618      	mov	r0, r3
 800b3c6:	3730      	adds	r7, #48	; 0x30
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}
 800b3cc:	0800bb6d 	.word	0x0800bb6d
 800b3d0:	0800bc09 	.word	0x0800bc09
 800b3d4:	0800bc27 	.word	0x0800bc27

0800b3d8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b3d8:	b580      	push	{r7, lr}
 800b3da:	b09a      	sub	sp, #104	; 0x68
 800b3dc:	af00      	add	r7, sp, #0
 800b3de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	330c      	adds	r3, #12
 800b3e6:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3ea:	e853 3f00 	ldrex	r3, [r3]
 800b3ee:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b3f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3f6:	667b      	str	r3, [r7, #100]	; 0x64
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	330c      	adds	r3, #12
 800b3fe:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b400:	657a      	str	r2, [r7, #84]	; 0x54
 800b402:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b404:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b406:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b408:	e841 2300 	strex	r3, r2, [r1]
 800b40c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b40e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b410:	2b00      	cmp	r3, #0
 800b412:	d1e5      	bne.n	800b3e0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	3314      	adds	r3, #20
 800b41a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b41c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b41e:	e853 3f00 	ldrex	r3, [r3]
 800b422:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b426:	f023 0301 	bic.w	r3, r3, #1
 800b42a:	663b      	str	r3, [r7, #96]	; 0x60
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	3314      	adds	r3, #20
 800b432:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b434:	643a      	str	r2, [r7, #64]	; 0x40
 800b436:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b438:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b43a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b43c:	e841 2300 	strex	r3, r2, [r1]
 800b440:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b444:	2b00      	cmp	r3, #0
 800b446:	d1e5      	bne.n	800b414 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d119      	bne.n	800b484 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	330c      	adds	r3, #12
 800b456:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	e853 3f00 	ldrex	r3, [r3]
 800b45e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b460:	69fb      	ldr	r3, [r7, #28]
 800b462:	f023 0310 	bic.w	r3, r3, #16
 800b466:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	330c      	adds	r3, #12
 800b46e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b470:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b474:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b478:	e841 2300 	strex	r3, r2, [r1]
 800b47c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b47e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b480:	2b00      	cmp	r3, #0
 800b482:	d1e5      	bne.n	800b450 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	695b      	ldr	r3, [r3, #20]
 800b48a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b48e:	2b40      	cmp	r3, #64	; 0x40
 800b490:	d136      	bne.n	800b500 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	3314      	adds	r3, #20
 800b498:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b49a:	68fb      	ldr	r3, [r7, #12]
 800b49c:	e853 3f00 	ldrex	r3, [r3]
 800b4a0:	60bb      	str	r3, [r7, #8]
   return(result);
 800b4a2:	68bb      	ldr	r3, [r7, #8]
 800b4a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b4a8:	65bb      	str	r3, [r7, #88]	; 0x58
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	3314      	adds	r3, #20
 800b4b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b4b2:	61ba      	str	r2, [r7, #24]
 800b4b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b4b6:	6979      	ldr	r1, [r7, #20]
 800b4b8:	69ba      	ldr	r2, [r7, #24]
 800b4ba:	e841 2300 	strex	r3, r2, [r1]
 800b4be:	613b      	str	r3, [r7, #16]
   return(result);
 800b4c0:	693b      	ldr	r3, [r7, #16]
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d1e5      	bne.n	800b492 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ca:	2b00      	cmp	r3, #0
 800b4cc:	d018      	beq.n	800b500 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4d2:	2200      	movs	r2, #0
 800b4d4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7fa fcb8 	bl	8005e50 <HAL_DMA_Abort>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d00c      	beq.n	800b500 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7fa feda 	bl	80062a4 <HAL_DMA_GetError>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	d104      	bne.n	800b500 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	2210      	movs	r2, #16
 800b4fa:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b4fc:	2303      	movs	r3, #3
 800b4fe:	e00a      	b.n	800b516 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2220      	movs	r2, #32
 800b50a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b50e:	687b      	ldr	r3, [r7, #4]
 800b510:	2200      	movs	r2, #0
 800b512:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b514:	2300      	movs	r3, #0
}
 800b516:	4618      	mov	r0, r3
 800b518:	3768      	adds	r7, #104	; 0x68
 800b51a:	46bd      	mov	sp, r7
 800b51c:	bd80      	pop	{r7, pc}
	...

0800b520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b520:	b580      	push	{r7, lr}
 800b522:	b0ba      	sub	sp, #232	; 0xe8
 800b524:	af00      	add	r7, sp, #0
 800b526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	68db      	ldr	r3, [r3, #12]
 800b538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	695b      	ldr	r3, [r3, #20]
 800b542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b546:	2300      	movs	r3, #0
 800b548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b54c:	2300      	movs	r3, #0
 800b54e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b556:	f003 030f 	and.w	r3, r3, #15
 800b55a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b55e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b562:	2b00      	cmp	r3, #0
 800b564:	d10f      	bne.n	800b586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b56a:	f003 0320 	and.w	r3, r3, #32
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d009      	beq.n	800b586 <HAL_UART_IRQHandler+0x66>
 800b572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b576:	f003 0320 	and.w	r3, r3, #32
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d003      	beq.n	800b586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b57e:	6878      	ldr	r0, [r7, #4]
 800b580:	f000 fce3 	bl	800bf4a <UART_Receive_IT>
      return;
 800b584:	e25b      	b.n	800ba3e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	f000 80e1 	beq.w	800b752 <HAL_UART_IRQHandler+0x232>
 800b590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	2b00      	cmp	r3, #0
 800b59a:	d106      	bne.n	800b5aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b59c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	f000 80d4 	beq.w	800b752 <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b5aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5ae:	f003 0301 	and.w	r3, r3, #1
 800b5b2:	2b00      	cmp	r3, #0
 800b5b4:	d00b      	beq.n	800b5ce <HAL_UART_IRQHandler+0xae>
 800b5b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d005      	beq.n	800b5ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c6:	f043 0201 	orr.w	r2, r3, #1
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5d2:	f003 0304 	and.w	r3, r3, #4
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d00b      	beq.n	800b5f2 <HAL_UART_IRQHandler+0xd2>
 800b5da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5de:	f003 0301 	and.w	r3, r3, #1
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d005      	beq.n	800b5f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5ea:	f043 0202 	orr.w	r2, r3, #2
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5f6:	f003 0302 	and.w	r3, r3, #2
 800b5fa:	2b00      	cmp	r3, #0
 800b5fc:	d00b      	beq.n	800b616 <HAL_UART_IRQHandler+0xf6>
 800b5fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b602:	f003 0301 	and.w	r3, r3, #1
 800b606:	2b00      	cmp	r3, #0
 800b608:	d005      	beq.n	800b616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b60e:	f043 0204 	orr.w	r2, r3, #4
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b61a:	f003 0308 	and.w	r3, r3, #8
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d011      	beq.n	800b646 <HAL_UART_IRQHandler+0x126>
 800b622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b626:	f003 0320 	and.w	r3, r3, #32
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d105      	bne.n	800b63a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b62e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b632:	f003 0301 	and.w	r3, r3, #1
 800b636:	2b00      	cmp	r3, #0
 800b638:	d005      	beq.n	800b646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b63e:	f043 0208 	orr.w	r2, r3, #8
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f000 81f2 	beq.w	800ba34 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b654:	f003 0320 	and.w	r3, r3, #32
 800b658:	2b00      	cmp	r3, #0
 800b65a:	d008      	beq.n	800b66e <HAL_UART_IRQHandler+0x14e>
 800b65c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b660:	f003 0320 	and.w	r3, r3, #32
 800b664:	2b00      	cmp	r3, #0
 800b666:	d002      	beq.n	800b66e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b668:	6878      	ldr	r0, [r7, #4]
 800b66a:	f000 fc6e 	bl	800bf4a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	695b      	ldr	r3, [r3, #20]
 800b674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b678:	2b40      	cmp	r3, #64	; 0x40
 800b67a:	bf0c      	ite	eq
 800b67c:	2301      	moveq	r3, #1
 800b67e:	2300      	movne	r3, #0
 800b680:	b2db      	uxtb	r3, r3
 800b682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b68a:	f003 0308 	and.w	r3, r3, #8
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d103      	bne.n	800b69a <HAL_UART_IRQHandler+0x17a>
 800b692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b696:	2b00      	cmp	r3, #0
 800b698:	d051      	beq.n	800b73e <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b69a:	6878      	ldr	r0, [r7, #4]
 800b69c:	f000 fb74 	bl	800bd88 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	695b      	ldr	r3, [r3, #20]
 800b6a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6aa:	2b40      	cmp	r3, #64	; 0x40
 800b6ac:	d142      	bne.n	800b734 <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	681b      	ldr	r3, [r3, #0]
 800b6b2:	3314      	adds	r3, #20
 800b6b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b6b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b6bc:	e853 3f00 	ldrex	r3, [r3]
 800b6c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b6c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b6c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b6cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	3314      	adds	r3, #20
 800b6d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b6da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b6e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b6ea:	e841 2300 	strex	r3, r2, [r1]
 800b6ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b6f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6f6:	2b00      	cmp	r3, #0
 800b6f8:	d1d9      	bne.n	800b6ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d013      	beq.n	800b72a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b706:	4a7f      	ldr	r2, [pc, #508]	; (800b904 <HAL_UART_IRQHandler+0x3e4>)
 800b708:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b70e:	4618      	mov	r0, r3
 800b710:	f7fa fc0e 	bl	8005f30 <HAL_DMA_Abort_IT>
 800b714:	4603      	mov	r3, r0
 800b716:	2b00      	cmp	r3, #0
 800b718:	d019      	beq.n	800b74e <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b71e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b720:	687a      	ldr	r2, [r7, #4]
 800b722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b724:	4610      	mov	r0, r2
 800b726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b728:	e011      	b.n	800b74e <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b732:	e00c      	b.n	800b74e <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b738:	6878      	ldr	r0, [r7, #4]
 800b73a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b73c:	e007      	b.n	800b74e <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b742:	6878      	ldr	r0, [r7, #4]
 800b744:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b74c:	e172      	b.n	800ba34 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b74e:	bf00      	nop
    return;
 800b750:	e170      	b.n	800ba34 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b752:	687b      	ldr	r3, [r7, #4]
 800b754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b756:	2b01      	cmp	r3, #1
 800b758:	f040 814c 	bne.w	800b9f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b75c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b760:	f003 0310 	and.w	r3, r3, #16
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 8145 	beq.w	800b9f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b76a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b76e:	f003 0310 	and.w	r3, r3, #16
 800b772:	2b00      	cmp	r3, #0
 800b774:	f000 813e 	beq.w	800b9f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b778:	2300      	movs	r3, #0
 800b77a:	60bb      	str	r3, [r7, #8]
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	60bb      	str	r3, [r7, #8]
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	681b      	ldr	r3, [r3, #0]
 800b788:	685b      	ldr	r3, [r3, #4]
 800b78a:	60bb      	str	r3, [r7, #8]
 800b78c:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	681b      	ldr	r3, [r3, #0]
 800b792:	695b      	ldr	r3, [r3, #20]
 800b794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b798:	2b40      	cmp	r3, #64	; 0x40
 800b79a:	f040 80b5 	bne.w	800b908 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	685b      	ldr	r3, [r3, #4]
 800b7a6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7aa:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	f000 8142 	beq.w	800ba38 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b7b8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7bc:	429a      	cmp	r2, r3
 800b7be:	f080 813b 	bcs.w	800ba38 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b7c8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b7ce:	69db      	ldr	r3, [r3, #28]
 800b7d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b7d4:	f000 8088 	beq.w	800b8e8 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	330c      	adds	r3, #12
 800b7de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7e2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7e6:	e853 3f00 	ldrex	r3, [r3]
 800b7ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7f2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	330c      	adds	r3, #12
 800b800:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b804:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b808:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b810:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b814:	e841 2300 	strex	r3, r2, [r1]
 800b818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b81c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b820:	2b00      	cmp	r3, #0
 800b822:	d1d9      	bne.n	800b7d8 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	3314      	adds	r3, #20
 800b82a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b82c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b82e:	e853 3f00 	ldrex	r3, [r3]
 800b832:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b834:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b836:	f023 0301 	bic.w	r3, r3, #1
 800b83a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3314      	adds	r3, #20
 800b844:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b848:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b84c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b84e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b850:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b85a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e1      	bne.n	800b824 <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	3314      	adds	r3, #20
 800b866:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b868:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b86a:	e853 3f00 	ldrex	r3, [r3]
 800b86e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b870:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b872:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b876:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3314      	adds	r3, #20
 800b880:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b884:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b886:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b888:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b88a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b88c:	e841 2300 	strex	r3, r2, [r1]
 800b890:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b892:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b894:	2b00      	cmp	r3, #0
 800b896:	d1e3      	bne.n	800b860 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	2220      	movs	r2, #32
 800b89c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	2200      	movs	r2, #0
 800b8a4:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	330c      	adds	r3, #12
 800b8ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b8b0:	e853 3f00 	ldrex	r3, [r3]
 800b8b4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b8b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8b8:	f023 0310 	bic.w	r3, r3, #16
 800b8bc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	330c      	adds	r3, #12
 800b8c6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b8ca:	65ba      	str	r2, [r7, #88]	; 0x58
 800b8cc:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8ce:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b8d0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8d2:	e841 2300 	strex	r3, r2, [r1]
 800b8d6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d1e3      	bne.n	800b8a6 <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fa fab4 	bl	8005e50 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8ec:	687a      	ldr	r2, [r7, #4]
 800b8ee:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b8f0:	687a      	ldr	r2, [r7, #4]
 800b8f2:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b8f4:	b292      	uxth	r2, r2
 800b8f6:	1a8a      	subs	r2, r1, r2
 800b8f8:	b292      	uxth	r2, r2
 800b8fa:	4611      	mov	r1, r2
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b900:	e09a      	b.n	800ba38 <HAL_UART_IRQHandler+0x518>
 800b902:	bf00      	nop
 800b904:	0800be4f 	.word	0x0800be4f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b910:	b29b      	uxth	r3, r3
 800b912:	1ad3      	subs	r3, r2, r3
 800b914:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b91c:	b29b      	uxth	r3, r3
 800b91e:	2b00      	cmp	r3, #0
 800b920:	f000 808c 	beq.w	800ba3c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b924:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b928:	2b00      	cmp	r3, #0
 800b92a:	f000 8087 	beq.w	800ba3c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	330c      	adds	r3, #12
 800b934:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b93e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b940:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	330c      	adds	r3, #12
 800b94e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b952:	647a      	str	r2, [r7, #68]	; 0x44
 800b954:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b958:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e3      	bne.n	800b92e <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	3314      	adds	r3, #20
 800b96c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b970:	e853 3f00 	ldrex	r3, [r3]
 800b974:	623b      	str	r3, [r7, #32]
   return(result);
 800b976:	6a3b      	ldr	r3, [r7, #32]
 800b978:	f023 0301 	bic.w	r3, r3, #1
 800b97c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	3314      	adds	r3, #20
 800b986:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b98a:	633a      	str	r2, [r7, #48]	; 0x30
 800b98c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b98e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b990:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b992:	e841 2300 	strex	r3, r2, [r1]
 800b996:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b998:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d1e3      	bne.n	800b966 <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2220      	movs	r2, #32
 800b9a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	330c      	adds	r3, #12
 800b9b2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	e853 3f00 	ldrex	r3, [r3]
 800b9ba:	60fb      	str	r3, [r7, #12]
   return(result);
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f023 0310 	bic.w	r3, r3, #16
 800b9c2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b9c6:	687b      	ldr	r3, [r7, #4]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	330c      	adds	r3, #12
 800b9cc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b9d0:	61fa      	str	r2, [r7, #28]
 800b9d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9d4:	69b9      	ldr	r1, [r7, #24]
 800b9d6:	69fa      	ldr	r2, [r7, #28]
 800b9d8:	e841 2300 	strex	r3, r2, [r1]
 800b9dc:	617b      	str	r3, [r7, #20]
   return(result);
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d1e3      	bne.n	800b9ac <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9e8:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	6878      	ldr	r0, [r7, #4]
 800b9f0:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9f2:	e023      	b.n	800ba3c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9fc:	2b00      	cmp	r3, #0
 800b9fe:	d009      	beq.n	800ba14 <HAL_UART_IRQHandler+0x4f4>
 800ba00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ba08:	2b00      	cmp	r3, #0
 800ba0a:	d003      	beq.n	800ba14 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 fa33 	bl	800be78 <UART_Transmit_IT>
    return;
 800ba12:	e014      	b.n	800ba3e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800ba14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d00e      	beq.n	800ba3e <HAL_UART_IRQHandler+0x51e>
 800ba20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d008      	beq.n	800ba3e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800ba2c:	6878      	ldr	r0, [r7, #4]
 800ba2e:	f000 fa73 	bl	800bf18 <UART_EndTransmit_IT>
    return;
 800ba32:	e004      	b.n	800ba3e <HAL_UART_IRQHandler+0x51e>
    return;
 800ba34:	bf00      	nop
 800ba36:	e002      	b.n	800ba3e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba38:	bf00      	nop
 800ba3a:	e000      	b.n	800ba3e <HAL_UART_IRQHandler+0x51e>
      return;
 800ba3c:	bf00      	nop
  }
}
 800ba3e:	37e8      	adds	r7, #232	; 0xe8
 800ba40:	46bd      	mov	sp, r7
 800ba42:	bd80      	pop	{r7, pc}

0800ba44 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba44:	b480      	push	{r7}
 800ba46:	b083      	sub	sp, #12
 800ba48:	af00      	add	r7, sp, #0
 800ba4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba4c:	bf00      	nop
 800ba4e:	370c      	adds	r7, #12
 800ba50:	46bd      	mov	sp, r7
 800ba52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba56:	4770      	bx	lr

0800ba58 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba58:	b480      	push	{r7}
 800ba5a:	b083      	sub	sp, #12
 800ba5c:	af00      	add	r7, sp, #0
 800ba5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ba60:	bf00      	nop
 800ba62:	370c      	adds	r7, #12
 800ba64:	46bd      	mov	sp, r7
 800ba66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6a:	4770      	bx	lr

0800ba6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba6c:	b480      	push	{r7}
 800ba6e:	b083      	sub	sp, #12
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba74:	bf00      	nop
 800ba76:	370c      	adds	r7, #12
 800ba78:	46bd      	mov	sp, r7
 800ba7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7e:	4770      	bx	lr

0800ba80 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba80:	b480      	push	{r7}
 800ba82:	b083      	sub	sp, #12
 800ba84:	af00      	add	r7, sp, #0
 800ba86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ba88:	bf00      	nop
 800ba8a:	370c      	adds	r7, #12
 800ba8c:	46bd      	mov	sp, r7
 800ba8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba92:	4770      	bx	lr

0800ba94 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba94:	b480      	push	{r7}
 800ba96:	b083      	sub	sp, #12
 800ba98:	af00      	add	r7, sp, #0
 800ba9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba9c:	bf00      	nop
 800ba9e:	370c      	adds	r7, #12
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800baa8:	b480      	push	{r7}
 800baaa:	b083      	sub	sp, #12
 800baac:	af00      	add	r7, sp, #0
 800baae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800bab0:	bf00      	nop
 800bab2:	370c      	adds	r7, #12
 800bab4:	46bd      	mov	sp, r7
 800bab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baba:	4770      	bx	lr

0800babc <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800babc:	b480      	push	{r7}
 800babe:	b083      	sub	sp, #12
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800bac4:	bf00      	nop
 800bac6:	370c      	adds	r7, #12
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bad0:	b480      	push	{r7}
 800bad2:	b083      	sub	sp, #12
 800bad4:	af00      	add	r7, sp, #0
 800bad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bad8:	bf00      	nop
 800bada:	370c      	adds	r7, #12
 800badc:	46bd      	mov	sp, r7
 800bade:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae2:	4770      	bx	lr

0800bae4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800bae4:	b480      	push	{r7}
 800bae6:	b083      	sub	sp, #12
 800bae8:	af00      	add	r7, sp, #0
 800baea:	6078      	str	r0, [r7, #4]
 800baec:	460b      	mov	r3, r1
 800baee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800baf0:	bf00      	nop
 800baf2:	370c      	adds	r7, #12
 800baf4:	46bd      	mov	sp, r7
 800baf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafa:	4770      	bx	lr

0800bafc <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bafc:	b480      	push	{r7}
 800bafe:	b083      	sub	sp, #12
 800bb00:	af00      	add	r7, sp, #0
 800bb02:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	4a10      	ldr	r2, [pc, #64]	; (800bb48 <UART_InitCallbacksToDefault+0x4c>)
 800bb08:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	4a0f      	ldr	r2, [pc, #60]	; (800bb4c <UART_InitCallbacksToDefault+0x50>)
 800bb0e:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	4a0f      	ldr	r2, [pc, #60]	; (800bb50 <UART_InitCallbacksToDefault+0x54>)
 800bb14:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a0e      	ldr	r2, [pc, #56]	; (800bb54 <UART_InitCallbacksToDefault+0x58>)
 800bb1a:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	4a0e      	ldr	r2, [pc, #56]	; (800bb58 <UART_InitCallbacksToDefault+0x5c>)
 800bb20:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	4a0d      	ldr	r2, [pc, #52]	; (800bb5c <UART_InitCallbacksToDefault+0x60>)
 800bb26:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	4a0d      	ldr	r2, [pc, #52]	; (800bb60 <UART_InitCallbacksToDefault+0x64>)
 800bb2c:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a0c      	ldr	r2, [pc, #48]	; (800bb64 <UART_InitCallbacksToDefault+0x68>)
 800bb32:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	4a0c      	ldr	r2, [pc, #48]	; (800bb68 <UART_InitCallbacksToDefault+0x6c>)
 800bb38:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bb3a:	bf00      	nop
 800bb3c:	370c      	adds	r7, #12
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb44:	4770      	bx	lr
 800bb46:	bf00      	nop
 800bb48:	0800ba59 	.word	0x0800ba59
 800bb4c:	0800ba45 	.word	0x0800ba45
 800bb50:	0800ba81 	.word	0x0800ba81
 800bb54:	0800ba6d 	.word	0x0800ba6d
 800bb58:	0800ba95 	.word	0x0800ba95
 800bb5c:	0800baa9 	.word	0x0800baa9
 800bb60:	0800babd 	.word	0x0800babd
 800bb64:	0800bad1 	.word	0x0800bad1
 800bb68:	0800bae5 	.word	0x0800bae5

0800bb6c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b090      	sub	sp, #64	; 0x40
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb78:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bb7a:	687b      	ldr	r3, [r7, #4]
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d137      	bne.n	800bbf8 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bb88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	3314      	adds	r3, #20
 800bb94:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb98:	e853 3f00 	ldrex	r3, [r3]
 800bb9c:	623b      	str	r3, [r7, #32]
   return(result);
 800bb9e:	6a3b      	ldr	r3, [r7, #32]
 800bba0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bba4:	63bb      	str	r3, [r7, #56]	; 0x38
 800bba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3314      	adds	r3, #20
 800bbac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bbae:	633a      	str	r2, [r7, #48]	; 0x30
 800bbb0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbb2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bbb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbb6:	e841 2300 	strex	r3, r2, [r1]
 800bbba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bbbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d1e5      	bne.n	800bb8e <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bbc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	330c      	adds	r3, #12
 800bbc8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	e853 3f00 	ldrex	r3, [r3]
 800bbd0:	60fb      	str	r3, [r7, #12]
   return(result);
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bbd8:	637b      	str	r3, [r7, #52]	; 0x34
 800bbda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbdc:	681b      	ldr	r3, [r3, #0]
 800bbde:	330c      	adds	r3, #12
 800bbe0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbe2:	61fa      	str	r2, [r7, #28]
 800bbe4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbe6:	69b9      	ldr	r1, [r7, #24]
 800bbe8:	69fa      	ldr	r2, [r7, #28]
 800bbea:	e841 2300 	strex	r3, r2, [r1]
 800bbee:	617b      	str	r3, [r7, #20]
   return(result);
 800bbf0:	697b      	ldr	r3, [r7, #20]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	d1e5      	bne.n	800bbc2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbf6:	e003      	b.n	800bc00 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bbf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbfe:	4798      	blx	r3
}
 800bc00:	bf00      	nop
 800bc02:	3740      	adds	r7, #64	; 0x40
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc14:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bc16:	68fb      	ldr	r3, [r7, #12]
 800bc18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc1e:	bf00      	nop
 800bc20:	3710      	adds	r7, #16
 800bc22:	46bd      	mov	sp, r7
 800bc24:	bd80      	pop	{r7, pc}

0800bc26 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bc26:	b580      	push	{r7, lr}
 800bc28:	b084      	sub	sp, #16
 800bc2a:	af00      	add	r7, sp, #0
 800bc2c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bc2e:	2300      	movs	r3, #0
 800bc30:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bc36:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	695b      	ldr	r3, [r3, #20]
 800bc3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc42:	2b80      	cmp	r3, #128	; 0x80
 800bc44:	bf0c      	ite	eq
 800bc46:	2301      	moveq	r3, #1
 800bc48:	2300      	movne	r3, #0
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc4e:	68bb      	ldr	r3, [r7, #8]
 800bc50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc54:	b2db      	uxtb	r3, r3
 800bc56:	2b21      	cmp	r3, #33	; 0x21
 800bc58:	d108      	bne.n	800bc6c <UART_DMAError+0x46>
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2b00      	cmp	r3, #0
 800bc5e:	d005      	beq.n	800bc6c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc60:	68bb      	ldr	r3, [r7, #8]
 800bc62:	2200      	movs	r2, #0
 800bc64:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bc66:	68b8      	ldr	r0, [r7, #8]
 800bc68:	f000 f866 	bl	800bd38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc6c:	68bb      	ldr	r3, [r7, #8]
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	695b      	ldr	r3, [r3, #20]
 800bc72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc76:	2b40      	cmp	r3, #64	; 0x40
 800bc78:	bf0c      	ite	eq
 800bc7a:	2301      	moveq	r3, #1
 800bc7c:	2300      	movne	r3, #0
 800bc7e:	b2db      	uxtb	r3, r3
 800bc80:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc82:	68bb      	ldr	r3, [r7, #8]
 800bc84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc88:	b2db      	uxtb	r3, r3
 800bc8a:	2b22      	cmp	r3, #34	; 0x22
 800bc8c:	d108      	bne.n	800bca0 <UART_DMAError+0x7a>
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	d005      	beq.n	800bca0 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc94:	68bb      	ldr	r3, [r7, #8]
 800bc96:	2200      	movs	r2, #0
 800bc98:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc9a:	68b8      	ldr	r0, [r7, #8]
 800bc9c:	f000 f874 	bl	800bd88 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bca0:	68bb      	ldr	r3, [r7, #8]
 800bca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bca4:	f043 0210 	orr.w	r2, r3, #16
 800bca8:	68bb      	ldr	r3, [r7, #8]
 800bcaa:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcb0:	68b8      	ldr	r0, [r7, #8]
 800bcb2:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bcb4:	bf00      	nop
 800bcb6:	3710      	adds	r7, #16
 800bcb8:	46bd      	mov	sp, r7
 800bcba:	bd80      	pop	{r7, pc}

0800bcbc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bcbc:	b480      	push	{r7}
 800bcbe:	b085      	sub	sp, #20
 800bcc0:	af00      	add	r7, sp, #0
 800bcc2:	60f8      	str	r0, [r7, #12]
 800bcc4:	60b9      	str	r1, [r7, #8]
 800bcc6:	4613      	mov	r3, r2
 800bcc8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	68ba      	ldr	r2, [r7, #8]
 800bcce:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	88fa      	ldrh	r2, [r7, #6]
 800bcd4:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	88fa      	ldrh	r2, [r7, #6]
 800bcda:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	2200      	movs	r2, #0
 800bce0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	2222      	movs	r2, #34	; 0x22
 800bce6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	2200      	movs	r2, #0
 800bcee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	691b      	ldr	r3, [r3, #16]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d007      	beq.n	800bd0a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	68da      	ldr	r2, [r3, #12]
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bd08:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	695a      	ldr	r2, [r3, #20]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	681b      	ldr	r3, [r3, #0]
 800bd14:	f042 0201 	orr.w	r2, r2, #1
 800bd18:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bd1a:	68fb      	ldr	r3, [r7, #12]
 800bd1c:	681b      	ldr	r3, [r3, #0]
 800bd1e:	68da      	ldr	r2, [r3, #12]
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	f042 0220 	orr.w	r2, r2, #32
 800bd28:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bd2a:	2300      	movs	r3, #0
}
 800bd2c:	4618      	mov	r0, r3
 800bd2e:	3714      	adds	r7, #20
 800bd30:	46bd      	mov	sp, r7
 800bd32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd36:	4770      	bx	lr

0800bd38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd38:	b480      	push	{r7}
 800bd3a:	b089      	sub	sp, #36	; 0x24
 800bd3c:	af00      	add	r7, sp, #0
 800bd3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	681b      	ldr	r3, [r3, #0]
 800bd44:	330c      	adds	r3, #12
 800bd46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	e853 3f00 	ldrex	r3, [r3]
 800bd4e:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd50:	68bb      	ldr	r3, [r7, #8]
 800bd52:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd56:	61fb      	str	r3, [r7, #28]
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	69fa      	ldr	r2, [r7, #28]
 800bd60:	61ba      	str	r2, [r7, #24]
 800bd62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd64:	6979      	ldr	r1, [r7, #20]
 800bd66:	69ba      	ldr	r2, [r7, #24]
 800bd68:	e841 2300 	strex	r3, r2, [r1]
 800bd6c:	613b      	str	r3, [r7, #16]
   return(result);
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d1e5      	bne.n	800bd40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2220      	movs	r2, #32
 800bd78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bd7c:	bf00      	nop
 800bd7e:	3724      	adds	r7, #36	; 0x24
 800bd80:	46bd      	mov	sp, r7
 800bd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd86:	4770      	bx	lr

0800bd88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b095      	sub	sp, #84	; 0x54
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	330c      	adds	r3, #12
 800bd96:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd9a:	e853 3f00 	ldrex	r3, [r3]
 800bd9e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bda0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bda2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bda6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	330c      	adds	r3, #12
 800bdae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bdb0:	643a      	str	r2, [r7, #64]	; 0x40
 800bdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bdb6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bdb8:	e841 2300 	strex	r3, r2, [r1]
 800bdbc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bdbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	d1e5      	bne.n	800bd90 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	681b      	ldr	r3, [r3, #0]
 800bdc8:	3314      	adds	r3, #20
 800bdca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdcc:	6a3b      	ldr	r3, [r7, #32]
 800bdce:	e853 3f00 	ldrex	r3, [r3]
 800bdd2:	61fb      	str	r3, [r7, #28]
   return(result);
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	f023 0301 	bic.w	r3, r3, #1
 800bdda:	64bb      	str	r3, [r7, #72]	; 0x48
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	3314      	adds	r3, #20
 800bde2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bde4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bde6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdec:	e841 2300 	strex	r3, r2, [r1]
 800bdf0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf4:	2b00      	cmp	r3, #0
 800bdf6:	d1e5      	bne.n	800bdc4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdfc:	2b01      	cmp	r3, #1
 800bdfe:	d119      	bne.n	800be34 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	681b      	ldr	r3, [r3, #0]
 800be04:	330c      	adds	r3, #12
 800be06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	e853 3f00 	ldrex	r3, [r3]
 800be0e:	60bb      	str	r3, [r7, #8]
   return(result);
 800be10:	68bb      	ldr	r3, [r7, #8]
 800be12:	f023 0310 	bic.w	r3, r3, #16
 800be16:	647b      	str	r3, [r7, #68]	; 0x44
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	330c      	adds	r3, #12
 800be1e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800be20:	61ba      	str	r2, [r7, #24]
 800be22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be24:	6979      	ldr	r1, [r7, #20]
 800be26:	69ba      	ldr	r2, [r7, #24]
 800be28:	e841 2300 	strex	r3, r2, [r1]
 800be2c:	613b      	str	r3, [r7, #16]
   return(result);
 800be2e:	693b      	ldr	r3, [r7, #16]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d1e5      	bne.n	800be00 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2220      	movs	r2, #32
 800be38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be42:	bf00      	nop
 800be44:	3754      	adds	r7, #84	; 0x54
 800be46:	46bd      	mov	sp, r7
 800be48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be4c:	4770      	bx	lr

0800be4e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be4e:	b580      	push	{r7, lr}
 800be50:	b084      	sub	sp, #16
 800be52:	af00      	add	r7, sp, #0
 800be54:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be5a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be5c:	68fb      	ldr	r3, [r7, #12]
 800be5e:	2200      	movs	r2, #0
 800be60:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2200      	movs	r2, #0
 800be66:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be70:	bf00      	nop
 800be72:	3710      	adds	r7, #16
 800be74:	46bd      	mov	sp, r7
 800be76:	bd80      	pop	{r7, pc}

0800be78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be78:	b480      	push	{r7}
 800be7a:	b085      	sub	sp, #20
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be86:	b2db      	uxtb	r3, r3
 800be88:	2b21      	cmp	r3, #33	; 0x21
 800be8a:	d13e      	bne.n	800bf0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	689b      	ldr	r3, [r3, #8]
 800be90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be94:	d114      	bne.n	800bec0 <UART_Transmit_IT+0x48>
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d110      	bne.n	800bec0 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6a1b      	ldr	r3, [r3, #32]
 800bea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800bea4:	68fb      	ldr	r3, [r7, #12]
 800bea6:	881b      	ldrh	r3, [r3, #0]
 800bea8:	461a      	mov	r2, r3
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800beb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	6a1b      	ldr	r3, [r3, #32]
 800beb8:	1c9a      	adds	r2, r3, #2
 800beba:	687b      	ldr	r3, [r7, #4]
 800bebc:	621a      	str	r2, [r3, #32]
 800bebe:	e008      	b.n	800bed2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a1b      	ldr	r3, [r3, #32]
 800bec4:	1c59      	adds	r1, r3, #1
 800bec6:	687a      	ldr	r2, [r7, #4]
 800bec8:	6211      	str	r1, [r2, #32]
 800beca:	781a      	ldrb	r2, [r3, #0]
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800bed6:	b29b      	uxth	r3, r3
 800bed8:	3b01      	subs	r3, #1
 800beda:	b29b      	uxth	r3, r3
 800bedc:	687a      	ldr	r2, [r7, #4]
 800bede:	4619      	mov	r1, r3
 800bee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d10f      	bne.n	800bf06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	68da      	ldr	r2, [r3, #12]
 800beec:	687b      	ldr	r3, [r7, #4]
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	68da      	ldr	r2, [r3, #12]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800bf04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bf06:	2300      	movs	r3, #0
 800bf08:	e000      	b.n	800bf0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bf0a:	2302      	movs	r3, #2
  }
}
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	3714      	adds	r7, #20
 800bf10:	46bd      	mov	sp, r7
 800bf12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf16:	4770      	bx	lr

0800bf18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bf18:	b580      	push	{r7, lr}
 800bf1a:	b082      	sub	sp, #8
 800bf1c:	af00      	add	r7, sp, #0
 800bf1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	68da      	ldr	r2, [r3, #12]
 800bf26:	687b      	ldr	r3, [r7, #4]
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bf2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2220      	movs	r2, #32
 800bf34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf3c:	6878      	ldr	r0, [r7, #4]
 800bf3e:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf40:	2300      	movs	r3, #0
}
 800bf42:	4618      	mov	r0, r3
 800bf44:	3708      	adds	r7, #8
 800bf46:	46bd      	mov	sp, r7
 800bf48:	bd80      	pop	{r7, pc}

0800bf4a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf4a:	b580      	push	{r7, lr}
 800bf4c:	b08c      	sub	sp, #48	; 0x30
 800bf4e:	af00      	add	r7, sp, #0
 800bf50:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf58:	b2db      	uxtb	r3, r3
 800bf5a:	2b22      	cmp	r3, #34	; 0x22
 800bf5c:	f040 80ad 	bne.w	800c0ba <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	689b      	ldr	r3, [r3, #8]
 800bf64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf68:	d117      	bne.n	800bf9a <UART_Receive_IT+0x50>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	691b      	ldr	r3, [r3, #16]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d113      	bne.n	800bf9a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf7a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	685b      	ldr	r3, [r3, #4]
 800bf82:	b29b      	uxth	r3, r3
 800bf84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf88:	b29a      	uxth	r2, r3
 800bf8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf8c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf92:	1c9a      	adds	r2, r3, #2
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	629a      	str	r2, [r3, #40]	; 0x28
 800bf98:	e026      	b.n	800bfe8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf9e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	689b      	ldr	r3, [r3, #8]
 800bfa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bfac:	d007      	beq.n	800bfbe <UART_Receive_IT+0x74>
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	689b      	ldr	r3, [r3, #8]
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d10a      	bne.n	800bfcc <UART_Receive_IT+0x82>
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	691b      	ldr	r3, [r3, #16]
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	d106      	bne.n	800bfcc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bfbe:	687b      	ldr	r3, [r7, #4]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	685b      	ldr	r3, [r3, #4]
 800bfc4:	b2da      	uxtb	r2, r3
 800bfc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc8:	701a      	strb	r2, [r3, #0]
 800bfca:	e008      	b.n	800bfde <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	685b      	ldr	r3, [r3, #4]
 800bfd2:	b2db      	uxtb	r3, r3
 800bfd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfd8:	b2da      	uxtb	r2, r3
 800bfda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfdc:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe2:	1c5a      	adds	r2, r3, #1
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfec:	b29b      	uxth	r3, r3
 800bfee:	3b01      	subs	r3, #1
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	687a      	ldr	r2, [r7, #4]
 800bff4:	4619      	mov	r1, r3
 800bff6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d15c      	bne.n	800c0b6 <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	68da      	ldr	r2, [r3, #12]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f022 0220 	bic.w	r2, r2, #32
 800c00a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	68da      	ldr	r2, [r3, #12]
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	681b      	ldr	r3, [r3, #0]
 800c016:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c01a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	695a      	ldr	r2, [r3, #20]
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	f022 0201 	bic.w	r2, r2, #1
 800c02a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	2220      	movs	r2, #32
 800c030:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c038:	2b01      	cmp	r3, #1
 800c03a:	d136      	bne.n	800c0aa <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c03c:	687b      	ldr	r3, [r7, #4]
 800c03e:	2200      	movs	r2, #0
 800c040:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	330c      	adds	r3, #12
 800c048:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c04a:	697b      	ldr	r3, [r7, #20]
 800c04c:	e853 3f00 	ldrex	r3, [r3]
 800c050:	613b      	str	r3, [r7, #16]
   return(result);
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	f023 0310 	bic.w	r3, r3, #16
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	330c      	adds	r3, #12
 800c060:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c062:	623a      	str	r2, [r7, #32]
 800c064:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c066:	69f9      	ldr	r1, [r7, #28]
 800c068:	6a3a      	ldr	r2, [r7, #32]
 800c06a:	e841 2300 	strex	r3, r2, [r1]
 800c06e:	61bb      	str	r3, [r7, #24]
   return(result);
 800c070:	69bb      	ldr	r3, [r7, #24]
 800c072:	2b00      	cmp	r3, #0
 800c074:	d1e5      	bne.n	800c042 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	f003 0310 	and.w	r3, r3, #16
 800c080:	2b10      	cmp	r3, #16
 800c082:	d10a      	bne.n	800c09a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c084:	2300      	movs	r3, #0
 800c086:	60fb      	str	r3, [r7, #12]
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	681b      	ldr	r3, [r3, #0]
 800c094:	685b      	ldr	r3, [r3, #4]
 800c096:	60fb      	str	r3, [r7, #12]
 800c098:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c09e:	687a      	ldr	r2, [r7, #4]
 800c0a0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c0a2:	4611      	mov	r1, r2
 800c0a4:	6878      	ldr	r0, [r7, #4]
 800c0a6:	4798      	blx	r3
 800c0a8:	e003      	b.n	800c0b2 <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0ae:	6878      	ldr	r0, [r7, #4]
 800c0b0:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c0b2:	2300      	movs	r3, #0
 800c0b4:	e002      	b.n	800c0bc <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
 800c0b8:	e000      	b.n	800c0bc <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c0ba:	2302      	movs	r3, #2
  }
}
 800c0bc:	4618      	mov	r0, r3
 800c0be:	3730      	adds	r7, #48	; 0x30
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c0c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c0c8:	b0c0      	sub	sp, #256	; 0x100
 800c0ca:	af00      	add	r7, sp, #0
 800c0cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c0d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d4:	681b      	ldr	r3, [r3, #0]
 800c0d6:	691b      	ldr	r3, [r3, #16]
 800c0d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c0dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e0:	68d9      	ldr	r1, [r3, #12]
 800c0e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0e6:	681a      	ldr	r2, [r3, #0]
 800c0e8:	ea40 0301 	orr.w	r3, r0, r1
 800c0ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f2:	689a      	ldr	r2, [r3, #8]
 800c0f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0f8:	691b      	ldr	r3, [r3, #16]
 800c0fa:	431a      	orrs	r2, r3
 800c0fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c100:	695b      	ldr	r3, [r3, #20]
 800c102:	431a      	orrs	r2, r3
 800c104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c108:	69db      	ldr	r3, [r3, #28]
 800c10a:	4313      	orrs	r3, r2
 800c10c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	68db      	ldr	r3, [r3, #12]
 800c118:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c11c:	f021 010c 	bic.w	r1, r1, #12
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c12a:	430b      	orrs	r3, r1
 800c12c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c12e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	695b      	ldr	r3, [r3, #20]
 800c136:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c13a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c13e:	6999      	ldr	r1, [r3, #24]
 800c140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c144:	681a      	ldr	r2, [r3, #0]
 800c146:	ea40 0301 	orr.w	r3, r0, r1
 800c14a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c14c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c150:	681a      	ldr	r2, [r3, #0]
 800c152:	4b8f      	ldr	r3, [pc, #572]	; (800c390 <UART_SetConfig+0x2cc>)
 800c154:	429a      	cmp	r2, r3
 800c156:	d005      	beq.n	800c164 <UART_SetConfig+0xa0>
 800c158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c15c:	681a      	ldr	r2, [r3, #0]
 800c15e:	4b8d      	ldr	r3, [pc, #564]	; (800c394 <UART_SetConfig+0x2d0>)
 800c160:	429a      	cmp	r2, r3
 800c162:	d104      	bne.n	800c16e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c164:	f7fd f9b0 	bl	80094c8 <HAL_RCC_GetPCLK2Freq>
 800c168:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c16c:	e003      	b.n	800c176 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c16e:	f7fd f997 	bl	80094a0 <HAL_RCC_GetPCLK1Freq>
 800c172:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c17a:	69db      	ldr	r3, [r3, #28]
 800c17c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c180:	f040 810c 	bne.w	800c39c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c184:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c188:	2200      	movs	r2, #0
 800c18a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c18e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c192:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c196:	4622      	mov	r2, r4
 800c198:	462b      	mov	r3, r5
 800c19a:	1891      	adds	r1, r2, r2
 800c19c:	65b9      	str	r1, [r7, #88]	; 0x58
 800c19e:	415b      	adcs	r3, r3
 800c1a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c1a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c1a6:	4621      	mov	r1, r4
 800c1a8:	eb12 0801 	adds.w	r8, r2, r1
 800c1ac:	4629      	mov	r1, r5
 800c1ae:	eb43 0901 	adc.w	r9, r3, r1
 800c1b2:	f04f 0200 	mov.w	r2, #0
 800c1b6:	f04f 0300 	mov.w	r3, #0
 800c1ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c1be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c1c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c1c6:	4690      	mov	r8, r2
 800c1c8:	4699      	mov	r9, r3
 800c1ca:	4623      	mov	r3, r4
 800c1cc:	eb18 0303 	adds.w	r3, r8, r3
 800c1d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c1d4:	462b      	mov	r3, r5
 800c1d6:	eb49 0303 	adc.w	r3, r9, r3
 800c1da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1e2:	685b      	ldr	r3, [r3, #4]
 800c1e4:	2200      	movs	r2, #0
 800c1e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c1ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c1f2:	460b      	mov	r3, r1
 800c1f4:	18db      	adds	r3, r3, r3
 800c1f6:	653b      	str	r3, [r7, #80]	; 0x50
 800c1f8:	4613      	mov	r3, r2
 800c1fa:	eb42 0303 	adc.w	r3, r2, r3
 800c1fe:	657b      	str	r3, [r7, #84]	; 0x54
 800c200:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c204:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c208:	f7f4 fd46 	bl	8000c98 <__aeabi_uldivmod>
 800c20c:	4602      	mov	r2, r0
 800c20e:	460b      	mov	r3, r1
 800c210:	4b61      	ldr	r3, [pc, #388]	; (800c398 <UART_SetConfig+0x2d4>)
 800c212:	fba3 2302 	umull	r2, r3, r3, r2
 800c216:	095b      	lsrs	r3, r3, #5
 800c218:	011c      	lsls	r4, r3, #4
 800c21a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c21e:	2200      	movs	r2, #0
 800c220:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c224:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c228:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c22c:	4642      	mov	r2, r8
 800c22e:	464b      	mov	r3, r9
 800c230:	1891      	adds	r1, r2, r2
 800c232:	64b9      	str	r1, [r7, #72]	; 0x48
 800c234:	415b      	adcs	r3, r3
 800c236:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c238:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c23c:	4641      	mov	r1, r8
 800c23e:	eb12 0a01 	adds.w	sl, r2, r1
 800c242:	4649      	mov	r1, r9
 800c244:	eb43 0b01 	adc.w	fp, r3, r1
 800c248:	f04f 0200 	mov.w	r2, #0
 800c24c:	f04f 0300 	mov.w	r3, #0
 800c250:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c254:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c258:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c25c:	4692      	mov	sl, r2
 800c25e:	469b      	mov	fp, r3
 800c260:	4643      	mov	r3, r8
 800c262:	eb1a 0303 	adds.w	r3, sl, r3
 800c266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c26a:	464b      	mov	r3, r9
 800c26c:	eb4b 0303 	adc.w	r3, fp, r3
 800c270:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c274:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c278:	685b      	ldr	r3, [r3, #4]
 800c27a:	2200      	movs	r2, #0
 800c27c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c280:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c284:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c288:	460b      	mov	r3, r1
 800c28a:	18db      	adds	r3, r3, r3
 800c28c:	643b      	str	r3, [r7, #64]	; 0x40
 800c28e:	4613      	mov	r3, r2
 800c290:	eb42 0303 	adc.w	r3, r2, r3
 800c294:	647b      	str	r3, [r7, #68]	; 0x44
 800c296:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c29a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c29e:	f7f4 fcfb 	bl	8000c98 <__aeabi_uldivmod>
 800c2a2:	4602      	mov	r2, r0
 800c2a4:	460b      	mov	r3, r1
 800c2a6:	4611      	mov	r1, r2
 800c2a8:	4b3b      	ldr	r3, [pc, #236]	; (800c398 <UART_SetConfig+0x2d4>)
 800c2aa:	fba3 2301 	umull	r2, r3, r3, r1
 800c2ae:	095b      	lsrs	r3, r3, #5
 800c2b0:	2264      	movs	r2, #100	; 0x64
 800c2b2:	fb02 f303 	mul.w	r3, r2, r3
 800c2b6:	1acb      	subs	r3, r1, r3
 800c2b8:	00db      	lsls	r3, r3, #3
 800c2ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c2be:	4b36      	ldr	r3, [pc, #216]	; (800c398 <UART_SetConfig+0x2d4>)
 800c2c0:	fba3 2302 	umull	r2, r3, r3, r2
 800c2c4:	095b      	lsrs	r3, r3, #5
 800c2c6:	005b      	lsls	r3, r3, #1
 800c2c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c2cc:	441c      	add	r4, r3
 800c2ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c2d2:	2200      	movs	r2, #0
 800c2d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c2dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	464b      	mov	r3, r9
 800c2e4:	1891      	adds	r1, r2, r2
 800c2e6:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2e8:	415b      	adcs	r3, r3
 800c2ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2f0:	4641      	mov	r1, r8
 800c2f2:	1851      	adds	r1, r2, r1
 800c2f4:	6339      	str	r1, [r7, #48]	; 0x30
 800c2f6:	4649      	mov	r1, r9
 800c2f8:	414b      	adcs	r3, r1
 800c2fa:	637b      	str	r3, [r7, #52]	; 0x34
 800c2fc:	f04f 0200 	mov.w	r2, #0
 800c300:	f04f 0300 	mov.w	r3, #0
 800c304:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c308:	4659      	mov	r1, fp
 800c30a:	00cb      	lsls	r3, r1, #3
 800c30c:	4651      	mov	r1, sl
 800c30e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c312:	4651      	mov	r1, sl
 800c314:	00ca      	lsls	r2, r1, #3
 800c316:	4610      	mov	r0, r2
 800c318:	4619      	mov	r1, r3
 800c31a:	4603      	mov	r3, r0
 800c31c:	4642      	mov	r2, r8
 800c31e:	189b      	adds	r3, r3, r2
 800c320:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c324:	464b      	mov	r3, r9
 800c326:	460a      	mov	r2, r1
 800c328:	eb42 0303 	adc.w	r3, r2, r3
 800c32c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c334:	685b      	ldr	r3, [r3, #4]
 800c336:	2200      	movs	r2, #0
 800c338:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c33c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c340:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c344:	460b      	mov	r3, r1
 800c346:	18db      	adds	r3, r3, r3
 800c348:	62bb      	str	r3, [r7, #40]	; 0x28
 800c34a:	4613      	mov	r3, r2
 800c34c:	eb42 0303 	adc.w	r3, r2, r3
 800c350:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c352:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c356:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c35a:	f7f4 fc9d 	bl	8000c98 <__aeabi_uldivmod>
 800c35e:	4602      	mov	r2, r0
 800c360:	460b      	mov	r3, r1
 800c362:	4b0d      	ldr	r3, [pc, #52]	; (800c398 <UART_SetConfig+0x2d4>)
 800c364:	fba3 1302 	umull	r1, r3, r3, r2
 800c368:	095b      	lsrs	r3, r3, #5
 800c36a:	2164      	movs	r1, #100	; 0x64
 800c36c:	fb01 f303 	mul.w	r3, r1, r3
 800c370:	1ad3      	subs	r3, r2, r3
 800c372:	00db      	lsls	r3, r3, #3
 800c374:	3332      	adds	r3, #50	; 0x32
 800c376:	4a08      	ldr	r2, [pc, #32]	; (800c398 <UART_SetConfig+0x2d4>)
 800c378:	fba2 2303 	umull	r2, r3, r2, r3
 800c37c:	095b      	lsrs	r3, r3, #5
 800c37e:	f003 0207 	and.w	r2, r3, #7
 800c382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	4422      	add	r2, r4
 800c38a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c38c:	e105      	b.n	800c59a <UART_SetConfig+0x4d6>
 800c38e:	bf00      	nop
 800c390:	40011000 	.word	0x40011000
 800c394:	40011400 	.word	0x40011400
 800c398:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c39c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c3a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c3aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c3ae:	4642      	mov	r2, r8
 800c3b0:	464b      	mov	r3, r9
 800c3b2:	1891      	adds	r1, r2, r2
 800c3b4:	6239      	str	r1, [r7, #32]
 800c3b6:	415b      	adcs	r3, r3
 800c3b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c3ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c3be:	4641      	mov	r1, r8
 800c3c0:	1854      	adds	r4, r2, r1
 800c3c2:	4649      	mov	r1, r9
 800c3c4:	eb43 0501 	adc.w	r5, r3, r1
 800c3c8:	f04f 0200 	mov.w	r2, #0
 800c3cc:	f04f 0300 	mov.w	r3, #0
 800c3d0:	00eb      	lsls	r3, r5, #3
 800c3d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c3d6:	00e2      	lsls	r2, r4, #3
 800c3d8:	4614      	mov	r4, r2
 800c3da:	461d      	mov	r5, r3
 800c3dc:	4643      	mov	r3, r8
 800c3de:	18e3      	adds	r3, r4, r3
 800c3e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3e4:	464b      	mov	r3, r9
 800c3e6:	eb45 0303 	adc.w	r3, r5, r3
 800c3ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3f2:	685b      	ldr	r3, [r3, #4]
 800c3f4:	2200      	movs	r2, #0
 800c3f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3fe:	f04f 0200 	mov.w	r2, #0
 800c402:	f04f 0300 	mov.w	r3, #0
 800c406:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c40a:	4629      	mov	r1, r5
 800c40c:	008b      	lsls	r3, r1, #2
 800c40e:	4621      	mov	r1, r4
 800c410:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c414:	4621      	mov	r1, r4
 800c416:	008a      	lsls	r2, r1, #2
 800c418:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c41c:	f7f4 fc3c 	bl	8000c98 <__aeabi_uldivmod>
 800c420:	4602      	mov	r2, r0
 800c422:	460b      	mov	r3, r1
 800c424:	4b60      	ldr	r3, [pc, #384]	; (800c5a8 <UART_SetConfig+0x4e4>)
 800c426:	fba3 2302 	umull	r2, r3, r3, r2
 800c42a:	095b      	lsrs	r3, r3, #5
 800c42c:	011c      	lsls	r4, r3, #4
 800c42e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c432:	2200      	movs	r2, #0
 800c434:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c438:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c43c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c440:	4642      	mov	r2, r8
 800c442:	464b      	mov	r3, r9
 800c444:	1891      	adds	r1, r2, r2
 800c446:	61b9      	str	r1, [r7, #24]
 800c448:	415b      	adcs	r3, r3
 800c44a:	61fb      	str	r3, [r7, #28]
 800c44c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c450:	4641      	mov	r1, r8
 800c452:	1851      	adds	r1, r2, r1
 800c454:	6139      	str	r1, [r7, #16]
 800c456:	4649      	mov	r1, r9
 800c458:	414b      	adcs	r3, r1
 800c45a:	617b      	str	r3, [r7, #20]
 800c45c:	f04f 0200 	mov.w	r2, #0
 800c460:	f04f 0300 	mov.w	r3, #0
 800c464:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c468:	4659      	mov	r1, fp
 800c46a:	00cb      	lsls	r3, r1, #3
 800c46c:	4651      	mov	r1, sl
 800c46e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c472:	4651      	mov	r1, sl
 800c474:	00ca      	lsls	r2, r1, #3
 800c476:	4610      	mov	r0, r2
 800c478:	4619      	mov	r1, r3
 800c47a:	4603      	mov	r3, r0
 800c47c:	4642      	mov	r2, r8
 800c47e:	189b      	adds	r3, r3, r2
 800c480:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c484:	464b      	mov	r3, r9
 800c486:	460a      	mov	r2, r1
 800c488:	eb42 0303 	adc.w	r3, r2, r3
 800c48c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c494:	685b      	ldr	r3, [r3, #4]
 800c496:	2200      	movs	r2, #0
 800c498:	67bb      	str	r3, [r7, #120]	; 0x78
 800c49a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c49c:	f04f 0200 	mov.w	r2, #0
 800c4a0:	f04f 0300 	mov.w	r3, #0
 800c4a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c4a8:	4649      	mov	r1, r9
 800c4aa:	008b      	lsls	r3, r1, #2
 800c4ac:	4641      	mov	r1, r8
 800c4ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c4b2:	4641      	mov	r1, r8
 800c4b4:	008a      	lsls	r2, r1, #2
 800c4b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c4ba:	f7f4 fbed 	bl	8000c98 <__aeabi_uldivmod>
 800c4be:	4602      	mov	r2, r0
 800c4c0:	460b      	mov	r3, r1
 800c4c2:	4b39      	ldr	r3, [pc, #228]	; (800c5a8 <UART_SetConfig+0x4e4>)
 800c4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800c4c8:	095b      	lsrs	r3, r3, #5
 800c4ca:	2164      	movs	r1, #100	; 0x64
 800c4cc:	fb01 f303 	mul.w	r3, r1, r3
 800c4d0:	1ad3      	subs	r3, r2, r3
 800c4d2:	011b      	lsls	r3, r3, #4
 800c4d4:	3332      	adds	r3, #50	; 0x32
 800c4d6:	4a34      	ldr	r2, [pc, #208]	; (800c5a8 <UART_SetConfig+0x4e4>)
 800c4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800c4dc:	095b      	lsrs	r3, r3, #5
 800c4de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4e2:	441c      	add	r4, r3
 800c4e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	673b      	str	r3, [r7, #112]	; 0x70
 800c4ec:	677a      	str	r2, [r7, #116]	; 0x74
 800c4ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c4f2:	4642      	mov	r2, r8
 800c4f4:	464b      	mov	r3, r9
 800c4f6:	1891      	adds	r1, r2, r2
 800c4f8:	60b9      	str	r1, [r7, #8]
 800c4fa:	415b      	adcs	r3, r3
 800c4fc:	60fb      	str	r3, [r7, #12]
 800c4fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c502:	4641      	mov	r1, r8
 800c504:	1851      	adds	r1, r2, r1
 800c506:	6039      	str	r1, [r7, #0]
 800c508:	4649      	mov	r1, r9
 800c50a:	414b      	adcs	r3, r1
 800c50c:	607b      	str	r3, [r7, #4]
 800c50e:	f04f 0200 	mov.w	r2, #0
 800c512:	f04f 0300 	mov.w	r3, #0
 800c516:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c51a:	4659      	mov	r1, fp
 800c51c:	00cb      	lsls	r3, r1, #3
 800c51e:	4651      	mov	r1, sl
 800c520:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c524:	4651      	mov	r1, sl
 800c526:	00ca      	lsls	r2, r1, #3
 800c528:	4610      	mov	r0, r2
 800c52a:	4619      	mov	r1, r3
 800c52c:	4603      	mov	r3, r0
 800c52e:	4642      	mov	r2, r8
 800c530:	189b      	adds	r3, r3, r2
 800c532:	66bb      	str	r3, [r7, #104]	; 0x68
 800c534:	464b      	mov	r3, r9
 800c536:	460a      	mov	r2, r1
 800c538:	eb42 0303 	adc.w	r3, r2, r3
 800c53c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c53e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c542:	685b      	ldr	r3, [r3, #4]
 800c544:	2200      	movs	r2, #0
 800c546:	663b      	str	r3, [r7, #96]	; 0x60
 800c548:	667a      	str	r2, [r7, #100]	; 0x64
 800c54a:	f04f 0200 	mov.w	r2, #0
 800c54e:	f04f 0300 	mov.w	r3, #0
 800c552:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c556:	4649      	mov	r1, r9
 800c558:	008b      	lsls	r3, r1, #2
 800c55a:	4641      	mov	r1, r8
 800c55c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c560:	4641      	mov	r1, r8
 800c562:	008a      	lsls	r2, r1, #2
 800c564:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c568:	f7f4 fb96 	bl	8000c98 <__aeabi_uldivmod>
 800c56c:	4602      	mov	r2, r0
 800c56e:	460b      	mov	r3, r1
 800c570:	4b0d      	ldr	r3, [pc, #52]	; (800c5a8 <UART_SetConfig+0x4e4>)
 800c572:	fba3 1302 	umull	r1, r3, r3, r2
 800c576:	095b      	lsrs	r3, r3, #5
 800c578:	2164      	movs	r1, #100	; 0x64
 800c57a:	fb01 f303 	mul.w	r3, r1, r3
 800c57e:	1ad3      	subs	r3, r2, r3
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	3332      	adds	r3, #50	; 0x32
 800c584:	4a08      	ldr	r2, [pc, #32]	; (800c5a8 <UART_SetConfig+0x4e4>)
 800c586:	fba2 2303 	umull	r2, r3, r2, r3
 800c58a:	095b      	lsrs	r3, r3, #5
 800c58c:	f003 020f 	and.w	r2, r3, #15
 800c590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	4422      	add	r2, r4
 800c598:	609a      	str	r2, [r3, #8]
}
 800c59a:	bf00      	nop
 800c59c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c5a0:	46bd      	mov	sp, r7
 800c5a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5a6:	bf00      	nop
 800c5a8:	51eb851f 	.word	0x51eb851f

0800c5ac <__errno>:
 800c5ac:	4b01      	ldr	r3, [pc, #4]	; (800c5b4 <__errno+0x8>)
 800c5ae:	6818      	ldr	r0, [r3, #0]
 800c5b0:	4770      	bx	lr
 800c5b2:	bf00      	nop
 800c5b4:	2000025c 	.word	0x2000025c

0800c5b8 <__libc_init_array>:
 800c5b8:	b570      	push	{r4, r5, r6, lr}
 800c5ba:	4d0d      	ldr	r5, [pc, #52]	; (800c5f0 <__libc_init_array+0x38>)
 800c5bc:	4c0d      	ldr	r4, [pc, #52]	; (800c5f4 <__libc_init_array+0x3c>)
 800c5be:	1b64      	subs	r4, r4, r5
 800c5c0:	10a4      	asrs	r4, r4, #2
 800c5c2:	2600      	movs	r6, #0
 800c5c4:	42a6      	cmp	r6, r4
 800c5c6:	d109      	bne.n	800c5dc <__libc_init_array+0x24>
 800c5c8:	4d0b      	ldr	r5, [pc, #44]	; (800c5f8 <__libc_init_array+0x40>)
 800c5ca:	4c0c      	ldr	r4, [pc, #48]	; (800c5fc <__libc_init_array+0x44>)
 800c5cc:	f005 ffc2 	bl	8012554 <_init>
 800c5d0:	1b64      	subs	r4, r4, r5
 800c5d2:	10a4      	asrs	r4, r4, #2
 800c5d4:	2600      	movs	r6, #0
 800c5d6:	42a6      	cmp	r6, r4
 800c5d8:	d105      	bne.n	800c5e6 <__libc_init_array+0x2e>
 800c5da:	bd70      	pop	{r4, r5, r6, pc}
 800c5dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5e0:	4798      	blx	r3
 800c5e2:	3601      	adds	r6, #1
 800c5e4:	e7ee      	b.n	800c5c4 <__libc_init_array+0xc>
 800c5e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5ea:	4798      	blx	r3
 800c5ec:	3601      	adds	r6, #1
 800c5ee:	e7f2      	b.n	800c5d6 <__libc_init_array+0x1e>
 800c5f0:	08012c98 	.word	0x08012c98
 800c5f4:	08012c98 	.word	0x08012c98
 800c5f8:	08012c98 	.word	0x08012c98
 800c5fc:	08012c9c 	.word	0x08012c9c

0800c600 <memcpy>:
 800c600:	440a      	add	r2, r1
 800c602:	4291      	cmp	r1, r2
 800c604:	f100 33ff 	add.w	r3, r0, #4294967295
 800c608:	d100      	bne.n	800c60c <memcpy+0xc>
 800c60a:	4770      	bx	lr
 800c60c:	b510      	push	{r4, lr}
 800c60e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c612:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c616:	4291      	cmp	r1, r2
 800c618:	d1f9      	bne.n	800c60e <memcpy+0xe>
 800c61a:	bd10      	pop	{r4, pc}

0800c61c <memset>:
 800c61c:	4402      	add	r2, r0
 800c61e:	4603      	mov	r3, r0
 800c620:	4293      	cmp	r3, r2
 800c622:	d100      	bne.n	800c626 <memset+0xa>
 800c624:	4770      	bx	lr
 800c626:	f803 1b01 	strb.w	r1, [r3], #1
 800c62a:	e7f9      	b.n	800c620 <memset+0x4>

0800c62c <__cvt>:
 800c62c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c630:	ec55 4b10 	vmov	r4, r5, d0
 800c634:	2d00      	cmp	r5, #0
 800c636:	460e      	mov	r6, r1
 800c638:	4619      	mov	r1, r3
 800c63a:	462b      	mov	r3, r5
 800c63c:	bfbb      	ittet	lt
 800c63e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c642:	461d      	movlt	r5, r3
 800c644:	2300      	movge	r3, #0
 800c646:	232d      	movlt	r3, #45	; 0x2d
 800c648:	700b      	strb	r3, [r1, #0]
 800c64a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c64c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c650:	4691      	mov	r9, r2
 800c652:	f023 0820 	bic.w	r8, r3, #32
 800c656:	bfbc      	itt	lt
 800c658:	4622      	movlt	r2, r4
 800c65a:	4614      	movlt	r4, r2
 800c65c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c660:	d005      	beq.n	800c66e <__cvt+0x42>
 800c662:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c666:	d100      	bne.n	800c66a <__cvt+0x3e>
 800c668:	3601      	adds	r6, #1
 800c66a:	2102      	movs	r1, #2
 800c66c:	e000      	b.n	800c670 <__cvt+0x44>
 800c66e:	2103      	movs	r1, #3
 800c670:	ab03      	add	r3, sp, #12
 800c672:	9301      	str	r3, [sp, #4]
 800c674:	ab02      	add	r3, sp, #8
 800c676:	9300      	str	r3, [sp, #0]
 800c678:	ec45 4b10 	vmov	d0, r4, r5
 800c67c:	4653      	mov	r3, sl
 800c67e:	4632      	mov	r2, r6
 800c680:	f001 fdae 	bl	800e1e0 <_dtoa_r>
 800c684:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c688:	4607      	mov	r7, r0
 800c68a:	d102      	bne.n	800c692 <__cvt+0x66>
 800c68c:	f019 0f01 	tst.w	r9, #1
 800c690:	d022      	beq.n	800c6d8 <__cvt+0xac>
 800c692:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c696:	eb07 0906 	add.w	r9, r7, r6
 800c69a:	d110      	bne.n	800c6be <__cvt+0x92>
 800c69c:	783b      	ldrb	r3, [r7, #0]
 800c69e:	2b30      	cmp	r3, #48	; 0x30
 800c6a0:	d10a      	bne.n	800c6b8 <__cvt+0x8c>
 800c6a2:	2200      	movs	r2, #0
 800c6a4:	2300      	movs	r3, #0
 800c6a6:	4620      	mov	r0, r4
 800c6a8:	4629      	mov	r1, r5
 800c6aa:	f7f4 fa15 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6ae:	b918      	cbnz	r0, 800c6b8 <__cvt+0x8c>
 800c6b0:	f1c6 0601 	rsb	r6, r6, #1
 800c6b4:	f8ca 6000 	str.w	r6, [sl]
 800c6b8:	f8da 3000 	ldr.w	r3, [sl]
 800c6bc:	4499      	add	r9, r3
 800c6be:	2200      	movs	r2, #0
 800c6c0:	2300      	movs	r3, #0
 800c6c2:	4620      	mov	r0, r4
 800c6c4:	4629      	mov	r1, r5
 800c6c6:	f7f4 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6ca:	b108      	cbz	r0, 800c6d0 <__cvt+0xa4>
 800c6cc:	f8cd 900c 	str.w	r9, [sp, #12]
 800c6d0:	2230      	movs	r2, #48	; 0x30
 800c6d2:	9b03      	ldr	r3, [sp, #12]
 800c6d4:	454b      	cmp	r3, r9
 800c6d6:	d307      	bcc.n	800c6e8 <__cvt+0xbc>
 800c6d8:	9b03      	ldr	r3, [sp, #12]
 800c6da:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6dc:	1bdb      	subs	r3, r3, r7
 800c6de:	4638      	mov	r0, r7
 800c6e0:	6013      	str	r3, [r2, #0]
 800c6e2:	b004      	add	sp, #16
 800c6e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6e8:	1c59      	adds	r1, r3, #1
 800c6ea:	9103      	str	r1, [sp, #12]
 800c6ec:	701a      	strb	r2, [r3, #0]
 800c6ee:	e7f0      	b.n	800c6d2 <__cvt+0xa6>

0800c6f0 <__exponent>:
 800c6f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6f2:	4603      	mov	r3, r0
 800c6f4:	2900      	cmp	r1, #0
 800c6f6:	bfb8      	it	lt
 800c6f8:	4249      	neglt	r1, r1
 800c6fa:	f803 2b02 	strb.w	r2, [r3], #2
 800c6fe:	bfb4      	ite	lt
 800c700:	222d      	movlt	r2, #45	; 0x2d
 800c702:	222b      	movge	r2, #43	; 0x2b
 800c704:	2909      	cmp	r1, #9
 800c706:	7042      	strb	r2, [r0, #1]
 800c708:	dd2a      	ble.n	800c760 <__exponent+0x70>
 800c70a:	f10d 0407 	add.w	r4, sp, #7
 800c70e:	46a4      	mov	ip, r4
 800c710:	270a      	movs	r7, #10
 800c712:	46a6      	mov	lr, r4
 800c714:	460a      	mov	r2, r1
 800c716:	fb91 f6f7 	sdiv	r6, r1, r7
 800c71a:	fb07 1516 	mls	r5, r7, r6, r1
 800c71e:	3530      	adds	r5, #48	; 0x30
 800c720:	2a63      	cmp	r2, #99	; 0x63
 800c722:	f104 34ff 	add.w	r4, r4, #4294967295
 800c726:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c72a:	4631      	mov	r1, r6
 800c72c:	dcf1      	bgt.n	800c712 <__exponent+0x22>
 800c72e:	3130      	adds	r1, #48	; 0x30
 800c730:	f1ae 0502 	sub.w	r5, lr, #2
 800c734:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c738:	1c44      	adds	r4, r0, #1
 800c73a:	4629      	mov	r1, r5
 800c73c:	4561      	cmp	r1, ip
 800c73e:	d30a      	bcc.n	800c756 <__exponent+0x66>
 800c740:	f10d 0209 	add.w	r2, sp, #9
 800c744:	eba2 020e 	sub.w	r2, r2, lr
 800c748:	4565      	cmp	r5, ip
 800c74a:	bf88      	it	hi
 800c74c:	2200      	movhi	r2, #0
 800c74e:	4413      	add	r3, r2
 800c750:	1a18      	subs	r0, r3, r0
 800c752:	b003      	add	sp, #12
 800c754:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c756:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c75a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c75e:	e7ed      	b.n	800c73c <__exponent+0x4c>
 800c760:	2330      	movs	r3, #48	; 0x30
 800c762:	3130      	adds	r1, #48	; 0x30
 800c764:	7083      	strb	r3, [r0, #2]
 800c766:	70c1      	strb	r1, [r0, #3]
 800c768:	1d03      	adds	r3, r0, #4
 800c76a:	e7f1      	b.n	800c750 <__exponent+0x60>

0800c76c <_printf_float>:
 800c76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c770:	ed2d 8b02 	vpush	{d8}
 800c774:	b08d      	sub	sp, #52	; 0x34
 800c776:	460c      	mov	r4, r1
 800c778:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c77c:	4616      	mov	r6, r2
 800c77e:	461f      	mov	r7, r3
 800c780:	4605      	mov	r5, r0
 800c782:	f002 fe8b 	bl	800f49c <_localeconv_r>
 800c786:	f8d0 a000 	ldr.w	sl, [r0]
 800c78a:	4650      	mov	r0, sl
 800c78c:	f7f3 fd28 	bl	80001e0 <strlen>
 800c790:	2300      	movs	r3, #0
 800c792:	930a      	str	r3, [sp, #40]	; 0x28
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	9305      	str	r3, [sp, #20]
 800c798:	f8d8 3000 	ldr.w	r3, [r8]
 800c79c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c7a0:	3307      	adds	r3, #7
 800c7a2:	f023 0307 	bic.w	r3, r3, #7
 800c7a6:	f103 0208 	add.w	r2, r3, #8
 800c7aa:	f8c8 2000 	str.w	r2, [r8]
 800c7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c7b2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c7b6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c7ba:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c7be:	9307      	str	r3, [sp, #28]
 800c7c0:	f8cd 8018 	str.w	r8, [sp, #24]
 800c7c4:	ee08 0a10 	vmov	s16, r0
 800c7c8:	4b9f      	ldr	r3, [pc, #636]	; (800ca48 <_printf_float+0x2dc>)
 800c7ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7ce:	f04f 32ff 	mov.w	r2, #4294967295
 800c7d2:	f7f4 f9b3 	bl	8000b3c <__aeabi_dcmpun>
 800c7d6:	bb88      	cbnz	r0, 800c83c <_printf_float+0xd0>
 800c7d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7dc:	4b9a      	ldr	r3, [pc, #616]	; (800ca48 <_printf_float+0x2dc>)
 800c7de:	f04f 32ff 	mov.w	r2, #4294967295
 800c7e2:	f7f4 f98d 	bl	8000b00 <__aeabi_dcmple>
 800c7e6:	bb48      	cbnz	r0, 800c83c <_printf_float+0xd0>
 800c7e8:	2200      	movs	r2, #0
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	4640      	mov	r0, r8
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	f7f4 f97c 	bl	8000aec <__aeabi_dcmplt>
 800c7f4:	b110      	cbz	r0, 800c7fc <_printf_float+0x90>
 800c7f6:	232d      	movs	r3, #45	; 0x2d
 800c7f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7fc:	4b93      	ldr	r3, [pc, #588]	; (800ca4c <_printf_float+0x2e0>)
 800c7fe:	4894      	ldr	r0, [pc, #592]	; (800ca50 <_printf_float+0x2e4>)
 800c800:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c804:	bf94      	ite	ls
 800c806:	4698      	movls	r8, r3
 800c808:	4680      	movhi	r8, r0
 800c80a:	2303      	movs	r3, #3
 800c80c:	6123      	str	r3, [r4, #16]
 800c80e:	9b05      	ldr	r3, [sp, #20]
 800c810:	f023 0204 	bic.w	r2, r3, #4
 800c814:	6022      	str	r2, [r4, #0]
 800c816:	f04f 0900 	mov.w	r9, #0
 800c81a:	9700      	str	r7, [sp, #0]
 800c81c:	4633      	mov	r3, r6
 800c81e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c820:	4621      	mov	r1, r4
 800c822:	4628      	mov	r0, r5
 800c824:	f000 f9d8 	bl	800cbd8 <_printf_common>
 800c828:	3001      	adds	r0, #1
 800c82a:	f040 8090 	bne.w	800c94e <_printf_float+0x1e2>
 800c82e:	f04f 30ff 	mov.w	r0, #4294967295
 800c832:	b00d      	add	sp, #52	; 0x34
 800c834:	ecbd 8b02 	vpop	{d8}
 800c838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c83c:	4642      	mov	r2, r8
 800c83e:	464b      	mov	r3, r9
 800c840:	4640      	mov	r0, r8
 800c842:	4649      	mov	r1, r9
 800c844:	f7f4 f97a 	bl	8000b3c <__aeabi_dcmpun>
 800c848:	b140      	cbz	r0, 800c85c <_printf_float+0xf0>
 800c84a:	464b      	mov	r3, r9
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	bfbc      	itt	lt
 800c850:	232d      	movlt	r3, #45	; 0x2d
 800c852:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c856:	487f      	ldr	r0, [pc, #508]	; (800ca54 <_printf_float+0x2e8>)
 800c858:	4b7f      	ldr	r3, [pc, #508]	; (800ca58 <_printf_float+0x2ec>)
 800c85a:	e7d1      	b.n	800c800 <_printf_float+0x94>
 800c85c:	6863      	ldr	r3, [r4, #4]
 800c85e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c862:	9206      	str	r2, [sp, #24]
 800c864:	1c5a      	adds	r2, r3, #1
 800c866:	d13f      	bne.n	800c8e8 <_printf_float+0x17c>
 800c868:	2306      	movs	r3, #6
 800c86a:	6063      	str	r3, [r4, #4]
 800c86c:	9b05      	ldr	r3, [sp, #20]
 800c86e:	6861      	ldr	r1, [r4, #4]
 800c870:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c874:	2300      	movs	r3, #0
 800c876:	9303      	str	r3, [sp, #12]
 800c878:	ab0a      	add	r3, sp, #40	; 0x28
 800c87a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c87e:	ab09      	add	r3, sp, #36	; 0x24
 800c880:	ec49 8b10 	vmov	d0, r8, r9
 800c884:	9300      	str	r3, [sp, #0]
 800c886:	6022      	str	r2, [r4, #0]
 800c888:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c88c:	4628      	mov	r0, r5
 800c88e:	f7ff fecd 	bl	800c62c <__cvt>
 800c892:	9b06      	ldr	r3, [sp, #24]
 800c894:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c896:	2b47      	cmp	r3, #71	; 0x47
 800c898:	4680      	mov	r8, r0
 800c89a:	d108      	bne.n	800c8ae <_printf_float+0x142>
 800c89c:	1cc8      	adds	r0, r1, #3
 800c89e:	db02      	blt.n	800c8a6 <_printf_float+0x13a>
 800c8a0:	6863      	ldr	r3, [r4, #4]
 800c8a2:	4299      	cmp	r1, r3
 800c8a4:	dd41      	ble.n	800c92a <_printf_float+0x1be>
 800c8a6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c8aa:	fa5f fb8b 	uxtb.w	fp, fp
 800c8ae:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c8b2:	d820      	bhi.n	800c8f6 <_printf_float+0x18a>
 800c8b4:	3901      	subs	r1, #1
 800c8b6:	465a      	mov	r2, fp
 800c8b8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c8bc:	9109      	str	r1, [sp, #36]	; 0x24
 800c8be:	f7ff ff17 	bl	800c6f0 <__exponent>
 800c8c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c8c4:	1813      	adds	r3, r2, r0
 800c8c6:	2a01      	cmp	r2, #1
 800c8c8:	4681      	mov	r9, r0
 800c8ca:	6123      	str	r3, [r4, #16]
 800c8cc:	dc02      	bgt.n	800c8d4 <_printf_float+0x168>
 800c8ce:	6822      	ldr	r2, [r4, #0]
 800c8d0:	07d2      	lsls	r2, r2, #31
 800c8d2:	d501      	bpl.n	800c8d8 <_printf_float+0x16c>
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	6123      	str	r3, [r4, #16]
 800c8d8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d09c      	beq.n	800c81a <_printf_float+0xae>
 800c8e0:	232d      	movs	r3, #45	; 0x2d
 800c8e2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8e6:	e798      	b.n	800c81a <_printf_float+0xae>
 800c8e8:	9a06      	ldr	r2, [sp, #24]
 800c8ea:	2a47      	cmp	r2, #71	; 0x47
 800c8ec:	d1be      	bne.n	800c86c <_printf_float+0x100>
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d1bc      	bne.n	800c86c <_printf_float+0x100>
 800c8f2:	2301      	movs	r3, #1
 800c8f4:	e7b9      	b.n	800c86a <_printf_float+0xfe>
 800c8f6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8fa:	d118      	bne.n	800c92e <_printf_float+0x1c2>
 800c8fc:	2900      	cmp	r1, #0
 800c8fe:	6863      	ldr	r3, [r4, #4]
 800c900:	dd0b      	ble.n	800c91a <_printf_float+0x1ae>
 800c902:	6121      	str	r1, [r4, #16]
 800c904:	b913      	cbnz	r3, 800c90c <_printf_float+0x1a0>
 800c906:	6822      	ldr	r2, [r4, #0]
 800c908:	07d0      	lsls	r0, r2, #31
 800c90a:	d502      	bpl.n	800c912 <_printf_float+0x1a6>
 800c90c:	3301      	adds	r3, #1
 800c90e:	440b      	add	r3, r1
 800c910:	6123      	str	r3, [r4, #16]
 800c912:	65a1      	str	r1, [r4, #88]	; 0x58
 800c914:	f04f 0900 	mov.w	r9, #0
 800c918:	e7de      	b.n	800c8d8 <_printf_float+0x16c>
 800c91a:	b913      	cbnz	r3, 800c922 <_printf_float+0x1b6>
 800c91c:	6822      	ldr	r2, [r4, #0]
 800c91e:	07d2      	lsls	r2, r2, #31
 800c920:	d501      	bpl.n	800c926 <_printf_float+0x1ba>
 800c922:	3302      	adds	r3, #2
 800c924:	e7f4      	b.n	800c910 <_printf_float+0x1a4>
 800c926:	2301      	movs	r3, #1
 800c928:	e7f2      	b.n	800c910 <_printf_float+0x1a4>
 800c92a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c92e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c930:	4299      	cmp	r1, r3
 800c932:	db05      	blt.n	800c940 <_printf_float+0x1d4>
 800c934:	6823      	ldr	r3, [r4, #0]
 800c936:	6121      	str	r1, [r4, #16]
 800c938:	07d8      	lsls	r0, r3, #31
 800c93a:	d5ea      	bpl.n	800c912 <_printf_float+0x1a6>
 800c93c:	1c4b      	adds	r3, r1, #1
 800c93e:	e7e7      	b.n	800c910 <_printf_float+0x1a4>
 800c940:	2900      	cmp	r1, #0
 800c942:	bfd4      	ite	le
 800c944:	f1c1 0202 	rsble	r2, r1, #2
 800c948:	2201      	movgt	r2, #1
 800c94a:	4413      	add	r3, r2
 800c94c:	e7e0      	b.n	800c910 <_printf_float+0x1a4>
 800c94e:	6823      	ldr	r3, [r4, #0]
 800c950:	055a      	lsls	r2, r3, #21
 800c952:	d407      	bmi.n	800c964 <_printf_float+0x1f8>
 800c954:	6923      	ldr	r3, [r4, #16]
 800c956:	4642      	mov	r2, r8
 800c958:	4631      	mov	r1, r6
 800c95a:	4628      	mov	r0, r5
 800c95c:	47b8      	blx	r7
 800c95e:	3001      	adds	r0, #1
 800c960:	d12c      	bne.n	800c9bc <_printf_float+0x250>
 800c962:	e764      	b.n	800c82e <_printf_float+0xc2>
 800c964:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c968:	f240 80e0 	bls.w	800cb2c <_printf_float+0x3c0>
 800c96c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c970:	2200      	movs	r2, #0
 800c972:	2300      	movs	r3, #0
 800c974:	f7f4 f8b0 	bl	8000ad8 <__aeabi_dcmpeq>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d034      	beq.n	800c9e6 <_printf_float+0x27a>
 800c97c:	4a37      	ldr	r2, [pc, #220]	; (800ca5c <_printf_float+0x2f0>)
 800c97e:	2301      	movs	r3, #1
 800c980:	4631      	mov	r1, r6
 800c982:	4628      	mov	r0, r5
 800c984:	47b8      	blx	r7
 800c986:	3001      	adds	r0, #1
 800c988:	f43f af51 	beq.w	800c82e <_printf_float+0xc2>
 800c98c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c990:	429a      	cmp	r2, r3
 800c992:	db02      	blt.n	800c99a <_printf_float+0x22e>
 800c994:	6823      	ldr	r3, [r4, #0]
 800c996:	07d8      	lsls	r0, r3, #31
 800c998:	d510      	bpl.n	800c9bc <_printf_float+0x250>
 800c99a:	ee18 3a10 	vmov	r3, s16
 800c99e:	4652      	mov	r2, sl
 800c9a0:	4631      	mov	r1, r6
 800c9a2:	4628      	mov	r0, r5
 800c9a4:	47b8      	blx	r7
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	f43f af41 	beq.w	800c82e <_printf_float+0xc2>
 800c9ac:	f04f 0800 	mov.w	r8, #0
 800c9b0:	f104 091a 	add.w	r9, r4, #26
 800c9b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9b6:	3b01      	subs	r3, #1
 800c9b8:	4543      	cmp	r3, r8
 800c9ba:	dc09      	bgt.n	800c9d0 <_printf_float+0x264>
 800c9bc:	6823      	ldr	r3, [r4, #0]
 800c9be:	079b      	lsls	r3, r3, #30
 800c9c0:	f100 8105 	bmi.w	800cbce <_printf_float+0x462>
 800c9c4:	68e0      	ldr	r0, [r4, #12]
 800c9c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c9c8:	4298      	cmp	r0, r3
 800c9ca:	bfb8      	it	lt
 800c9cc:	4618      	movlt	r0, r3
 800c9ce:	e730      	b.n	800c832 <_printf_float+0xc6>
 800c9d0:	2301      	movs	r3, #1
 800c9d2:	464a      	mov	r2, r9
 800c9d4:	4631      	mov	r1, r6
 800c9d6:	4628      	mov	r0, r5
 800c9d8:	47b8      	blx	r7
 800c9da:	3001      	adds	r0, #1
 800c9dc:	f43f af27 	beq.w	800c82e <_printf_float+0xc2>
 800c9e0:	f108 0801 	add.w	r8, r8, #1
 800c9e4:	e7e6      	b.n	800c9b4 <_printf_float+0x248>
 800c9e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	dc39      	bgt.n	800ca60 <_printf_float+0x2f4>
 800c9ec:	4a1b      	ldr	r2, [pc, #108]	; (800ca5c <_printf_float+0x2f0>)
 800c9ee:	2301      	movs	r3, #1
 800c9f0:	4631      	mov	r1, r6
 800c9f2:	4628      	mov	r0, r5
 800c9f4:	47b8      	blx	r7
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	f43f af19 	beq.w	800c82e <_printf_float+0xc2>
 800c9fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca00:	4313      	orrs	r3, r2
 800ca02:	d102      	bne.n	800ca0a <_printf_float+0x29e>
 800ca04:	6823      	ldr	r3, [r4, #0]
 800ca06:	07d9      	lsls	r1, r3, #31
 800ca08:	d5d8      	bpl.n	800c9bc <_printf_float+0x250>
 800ca0a:	ee18 3a10 	vmov	r3, s16
 800ca0e:	4652      	mov	r2, sl
 800ca10:	4631      	mov	r1, r6
 800ca12:	4628      	mov	r0, r5
 800ca14:	47b8      	blx	r7
 800ca16:	3001      	adds	r0, #1
 800ca18:	f43f af09 	beq.w	800c82e <_printf_float+0xc2>
 800ca1c:	f04f 0900 	mov.w	r9, #0
 800ca20:	f104 0a1a 	add.w	sl, r4, #26
 800ca24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca26:	425b      	negs	r3, r3
 800ca28:	454b      	cmp	r3, r9
 800ca2a:	dc01      	bgt.n	800ca30 <_printf_float+0x2c4>
 800ca2c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca2e:	e792      	b.n	800c956 <_printf_float+0x1ea>
 800ca30:	2301      	movs	r3, #1
 800ca32:	4652      	mov	r2, sl
 800ca34:	4631      	mov	r1, r6
 800ca36:	4628      	mov	r0, r5
 800ca38:	47b8      	blx	r7
 800ca3a:	3001      	adds	r0, #1
 800ca3c:	f43f aef7 	beq.w	800c82e <_printf_float+0xc2>
 800ca40:	f109 0901 	add.w	r9, r9, #1
 800ca44:	e7ee      	b.n	800ca24 <_printf_float+0x2b8>
 800ca46:	bf00      	nop
 800ca48:	7fefffff 	.word	0x7fefffff
 800ca4c:	080125a4 	.word	0x080125a4
 800ca50:	080125a8 	.word	0x080125a8
 800ca54:	080125b0 	.word	0x080125b0
 800ca58:	080125ac 	.word	0x080125ac
 800ca5c:	080125b4 	.word	0x080125b4
 800ca60:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca62:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca64:	429a      	cmp	r2, r3
 800ca66:	bfa8      	it	ge
 800ca68:	461a      	movge	r2, r3
 800ca6a:	2a00      	cmp	r2, #0
 800ca6c:	4691      	mov	r9, r2
 800ca6e:	dc37      	bgt.n	800cae0 <_printf_float+0x374>
 800ca70:	f04f 0b00 	mov.w	fp, #0
 800ca74:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca78:	f104 021a 	add.w	r2, r4, #26
 800ca7c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca7e:	9305      	str	r3, [sp, #20]
 800ca80:	eba3 0309 	sub.w	r3, r3, r9
 800ca84:	455b      	cmp	r3, fp
 800ca86:	dc33      	bgt.n	800caf0 <_printf_float+0x384>
 800ca88:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca8c:	429a      	cmp	r2, r3
 800ca8e:	db3b      	blt.n	800cb08 <_printf_float+0x39c>
 800ca90:	6823      	ldr	r3, [r4, #0]
 800ca92:	07da      	lsls	r2, r3, #31
 800ca94:	d438      	bmi.n	800cb08 <_printf_float+0x39c>
 800ca96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca98:	9a05      	ldr	r2, [sp, #20]
 800ca9a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca9c:	1a9a      	subs	r2, r3, r2
 800ca9e:	eba3 0901 	sub.w	r9, r3, r1
 800caa2:	4591      	cmp	r9, r2
 800caa4:	bfa8      	it	ge
 800caa6:	4691      	movge	r9, r2
 800caa8:	f1b9 0f00 	cmp.w	r9, #0
 800caac:	dc35      	bgt.n	800cb1a <_printf_float+0x3ae>
 800caae:	f04f 0800 	mov.w	r8, #0
 800cab2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cab6:	f104 0a1a 	add.w	sl, r4, #26
 800caba:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cabe:	1a9b      	subs	r3, r3, r2
 800cac0:	eba3 0309 	sub.w	r3, r3, r9
 800cac4:	4543      	cmp	r3, r8
 800cac6:	f77f af79 	ble.w	800c9bc <_printf_float+0x250>
 800caca:	2301      	movs	r3, #1
 800cacc:	4652      	mov	r2, sl
 800cace:	4631      	mov	r1, r6
 800cad0:	4628      	mov	r0, r5
 800cad2:	47b8      	blx	r7
 800cad4:	3001      	adds	r0, #1
 800cad6:	f43f aeaa 	beq.w	800c82e <_printf_float+0xc2>
 800cada:	f108 0801 	add.w	r8, r8, #1
 800cade:	e7ec      	b.n	800caba <_printf_float+0x34e>
 800cae0:	4613      	mov	r3, r2
 800cae2:	4631      	mov	r1, r6
 800cae4:	4642      	mov	r2, r8
 800cae6:	4628      	mov	r0, r5
 800cae8:	47b8      	blx	r7
 800caea:	3001      	adds	r0, #1
 800caec:	d1c0      	bne.n	800ca70 <_printf_float+0x304>
 800caee:	e69e      	b.n	800c82e <_printf_float+0xc2>
 800caf0:	2301      	movs	r3, #1
 800caf2:	4631      	mov	r1, r6
 800caf4:	4628      	mov	r0, r5
 800caf6:	9205      	str	r2, [sp, #20]
 800caf8:	47b8      	blx	r7
 800cafa:	3001      	adds	r0, #1
 800cafc:	f43f ae97 	beq.w	800c82e <_printf_float+0xc2>
 800cb00:	9a05      	ldr	r2, [sp, #20]
 800cb02:	f10b 0b01 	add.w	fp, fp, #1
 800cb06:	e7b9      	b.n	800ca7c <_printf_float+0x310>
 800cb08:	ee18 3a10 	vmov	r3, s16
 800cb0c:	4652      	mov	r2, sl
 800cb0e:	4631      	mov	r1, r6
 800cb10:	4628      	mov	r0, r5
 800cb12:	47b8      	blx	r7
 800cb14:	3001      	adds	r0, #1
 800cb16:	d1be      	bne.n	800ca96 <_printf_float+0x32a>
 800cb18:	e689      	b.n	800c82e <_printf_float+0xc2>
 800cb1a:	9a05      	ldr	r2, [sp, #20]
 800cb1c:	464b      	mov	r3, r9
 800cb1e:	4442      	add	r2, r8
 800cb20:	4631      	mov	r1, r6
 800cb22:	4628      	mov	r0, r5
 800cb24:	47b8      	blx	r7
 800cb26:	3001      	adds	r0, #1
 800cb28:	d1c1      	bne.n	800caae <_printf_float+0x342>
 800cb2a:	e680      	b.n	800c82e <_printf_float+0xc2>
 800cb2c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb2e:	2a01      	cmp	r2, #1
 800cb30:	dc01      	bgt.n	800cb36 <_printf_float+0x3ca>
 800cb32:	07db      	lsls	r3, r3, #31
 800cb34:	d538      	bpl.n	800cba8 <_printf_float+0x43c>
 800cb36:	2301      	movs	r3, #1
 800cb38:	4642      	mov	r2, r8
 800cb3a:	4631      	mov	r1, r6
 800cb3c:	4628      	mov	r0, r5
 800cb3e:	47b8      	blx	r7
 800cb40:	3001      	adds	r0, #1
 800cb42:	f43f ae74 	beq.w	800c82e <_printf_float+0xc2>
 800cb46:	ee18 3a10 	vmov	r3, s16
 800cb4a:	4652      	mov	r2, sl
 800cb4c:	4631      	mov	r1, r6
 800cb4e:	4628      	mov	r0, r5
 800cb50:	47b8      	blx	r7
 800cb52:	3001      	adds	r0, #1
 800cb54:	f43f ae6b 	beq.w	800c82e <_printf_float+0xc2>
 800cb58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb5c:	2200      	movs	r2, #0
 800cb5e:	2300      	movs	r3, #0
 800cb60:	f7f3 ffba 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb64:	b9d8      	cbnz	r0, 800cb9e <_printf_float+0x432>
 800cb66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb68:	f108 0201 	add.w	r2, r8, #1
 800cb6c:	3b01      	subs	r3, #1
 800cb6e:	4631      	mov	r1, r6
 800cb70:	4628      	mov	r0, r5
 800cb72:	47b8      	blx	r7
 800cb74:	3001      	adds	r0, #1
 800cb76:	d10e      	bne.n	800cb96 <_printf_float+0x42a>
 800cb78:	e659      	b.n	800c82e <_printf_float+0xc2>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	4652      	mov	r2, sl
 800cb7e:	4631      	mov	r1, r6
 800cb80:	4628      	mov	r0, r5
 800cb82:	47b8      	blx	r7
 800cb84:	3001      	adds	r0, #1
 800cb86:	f43f ae52 	beq.w	800c82e <_printf_float+0xc2>
 800cb8a:	f108 0801 	add.w	r8, r8, #1
 800cb8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb90:	3b01      	subs	r3, #1
 800cb92:	4543      	cmp	r3, r8
 800cb94:	dcf1      	bgt.n	800cb7a <_printf_float+0x40e>
 800cb96:	464b      	mov	r3, r9
 800cb98:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb9c:	e6dc      	b.n	800c958 <_printf_float+0x1ec>
 800cb9e:	f04f 0800 	mov.w	r8, #0
 800cba2:	f104 0a1a 	add.w	sl, r4, #26
 800cba6:	e7f2      	b.n	800cb8e <_printf_float+0x422>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	4642      	mov	r2, r8
 800cbac:	e7df      	b.n	800cb6e <_printf_float+0x402>
 800cbae:	2301      	movs	r3, #1
 800cbb0:	464a      	mov	r2, r9
 800cbb2:	4631      	mov	r1, r6
 800cbb4:	4628      	mov	r0, r5
 800cbb6:	47b8      	blx	r7
 800cbb8:	3001      	adds	r0, #1
 800cbba:	f43f ae38 	beq.w	800c82e <_printf_float+0xc2>
 800cbbe:	f108 0801 	add.w	r8, r8, #1
 800cbc2:	68e3      	ldr	r3, [r4, #12]
 800cbc4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cbc6:	1a5b      	subs	r3, r3, r1
 800cbc8:	4543      	cmp	r3, r8
 800cbca:	dcf0      	bgt.n	800cbae <_printf_float+0x442>
 800cbcc:	e6fa      	b.n	800c9c4 <_printf_float+0x258>
 800cbce:	f04f 0800 	mov.w	r8, #0
 800cbd2:	f104 0919 	add.w	r9, r4, #25
 800cbd6:	e7f4      	b.n	800cbc2 <_printf_float+0x456>

0800cbd8 <_printf_common>:
 800cbd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbdc:	4616      	mov	r6, r2
 800cbde:	4699      	mov	r9, r3
 800cbe0:	688a      	ldr	r2, [r1, #8]
 800cbe2:	690b      	ldr	r3, [r1, #16]
 800cbe4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbe8:	4293      	cmp	r3, r2
 800cbea:	bfb8      	it	lt
 800cbec:	4613      	movlt	r3, r2
 800cbee:	6033      	str	r3, [r6, #0]
 800cbf0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbf4:	4607      	mov	r7, r0
 800cbf6:	460c      	mov	r4, r1
 800cbf8:	b10a      	cbz	r2, 800cbfe <_printf_common+0x26>
 800cbfa:	3301      	adds	r3, #1
 800cbfc:	6033      	str	r3, [r6, #0]
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	0699      	lsls	r1, r3, #26
 800cc02:	bf42      	ittt	mi
 800cc04:	6833      	ldrmi	r3, [r6, #0]
 800cc06:	3302      	addmi	r3, #2
 800cc08:	6033      	strmi	r3, [r6, #0]
 800cc0a:	6825      	ldr	r5, [r4, #0]
 800cc0c:	f015 0506 	ands.w	r5, r5, #6
 800cc10:	d106      	bne.n	800cc20 <_printf_common+0x48>
 800cc12:	f104 0a19 	add.w	sl, r4, #25
 800cc16:	68e3      	ldr	r3, [r4, #12]
 800cc18:	6832      	ldr	r2, [r6, #0]
 800cc1a:	1a9b      	subs	r3, r3, r2
 800cc1c:	42ab      	cmp	r3, r5
 800cc1e:	dc26      	bgt.n	800cc6e <_printf_common+0x96>
 800cc20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cc24:	1e13      	subs	r3, r2, #0
 800cc26:	6822      	ldr	r2, [r4, #0]
 800cc28:	bf18      	it	ne
 800cc2a:	2301      	movne	r3, #1
 800cc2c:	0692      	lsls	r2, r2, #26
 800cc2e:	d42b      	bmi.n	800cc88 <_printf_common+0xb0>
 800cc30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cc34:	4649      	mov	r1, r9
 800cc36:	4638      	mov	r0, r7
 800cc38:	47c0      	blx	r8
 800cc3a:	3001      	adds	r0, #1
 800cc3c:	d01e      	beq.n	800cc7c <_printf_common+0xa4>
 800cc3e:	6823      	ldr	r3, [r4, #0]
 800cc40:	68e5      	ldr	r5, [r4, #12]
 800cc42:	6832      	ldr	r2, [r6, #0]
 800cc44:	f003 0306 	and.w	r3, r3, #6
 800cc48:	2b04      	cmp	r3, #4
 800cc4a:	bf08      	it	eq
 800cc4c:	1aad      	subeq	r5, r5, r2
 800cc4e:	68a3      	ldr	r3, [r4, #8]
 800cc50:	6922      	ldr	r2, [r4, #16]
 800cc52:	bf0c      	ite	eq
 800cc54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc58:	2500      	movne	r5, #0
 800cc5a:	4293      	cmp	r3, r2
 800cc5c:	bfc4      	itt	gt
 800cc5e:	1a9b      	subgt	r3, r3, r2
 800cc60:	18ed      	addgt	r5, r5, r3
 800cc62:	2600      	movs	r6, #0
 800cc64:	341a      	adds	r4, #26
 800cc66:	42b5      	cmp	r5, r6
 800cc68:	d11a      	bne.n	800cca0 <_printf_common+0xc8>
 800cc6a:	2000      	movs	r0, #0
 800cc6c:	e008      	b.n	800cc80 <_printf_common+0xa8>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	4652      	mov	r2, sl
 800cc72:	4649      	mov	r1, r9
 800cc74:	4638      	mov	r0, r7
 800cc76:	47c0      	blx	r8
 800cc78:	3001      	adds	r0, #1
 800cc7a:	d103      	bne.n	800cc84 <_printf_common+0xac>
 800cc7c:	f04f 30ff 	mov.w	r0, #4294967295
 800cc80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc84:	3501      	adds	r5, #1
 800cc86:	e7c6      	b.n	800cc16 <_printf_common+0x3e>
 800cc88:	18e1      	adds	r1, r4, r3
 800cc8a:	1c5a      	adds	r2, r3, #1
 800cc8c:	2030      	movs	r0, #48	; 0x30
 800cc8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc92:	4422      	add	r2, r4
 800cc94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc9c:	3302      	adds	r3, #2
 800cc9e:	e7c7      	b.n	800cc30 <_printf_common+0x58>
 800cca0:	2301      	movs	r3, #1
 800cca2:	4622      	mov	r2, r4
 800cca4:	4649      	mov	r1, r9
 800cca6:	4638      	mov	r0, r7
 800cca8:	47c0      	blx	r8
 800ccaa:	3001      	adds	r0, #1
 800ccac:	d0e6      	beq.n	800cc7c <_printf_common+0xa4>
 800ccae:	3601      	adds	r6, #1
 800ccb0:	e7d9      	b.n	800cc66 <_printf_common+0x8e>
	...

0800ccb4 <_printf_i>:
 800ccb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ccb8:	7e0f      	ldrb	r7, [r1, #24]
 800ccba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ccbc:	2f78      	cmp	r7, #120	; 0x78
 800ccbe:	4691      	mov	r9, r2
 800ccc0:	4680      	mov	r8, r0
 800ccc2:	460c      	mov	r4, r1
 800ccc4:	469a      	mov	sl, r3
 800ccc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ccca:	d807      	bhi.n	800ccdc <_printf_i+0x28>
 800cccc:	2f62      	cmp	r7, #98	; 0x62
 800ccce:	d80a      	bhi.n	800cce6 <_printf_i+0x32>
 800ccd0:	2f00      	cmp	r7, #0
 800ccd2:	f000 80d8 	beq.w	800ce86 <_printf_i+0x1d2>
 800ccd6:	2f58      	cmp	r7, #88	; 0x58
 800ccd8:	f000 80a3 	beq.w	800ce22 <_printf_i+0x16e>
 800ccdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cce0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800cce4:	e03a      	b.n	800cd5c <_printf_i+0xa8>
 800cce6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccea:	2b15      	cmp	r3, #21
 800ccec:	d8f6      	bhi.n	800ccdc <_printf_i+0x28>
 800ccee:	a101      	add	r1, pc, #4	; (adr r1, 800ccf4 <_printf_i+0x40>)
 800ccf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccf4:	0800cd4d 	.word	0x0800cd4d
 800ccf8:	0800cd61 	.word	0x0800cd61
 800ccfc:	0800ccdd 	.word	0x0800ccdd
 800cd00:	0800ccdd 	.word	0x0800ccdd
 800cd04:	0800ccdd 	.word	0x0800ccdd
 800cd08:	0800ccdd 	.word	0x0800ccdd
 800cd0c:	0800cd61 	.word	0x0800cd61
 800cd10:	0800ccdd 	.word	0x0800ccdd
 800cd14:	0800ccdd 	.word	0x0800ccdd
 800cd18:	0800ccdd 	.word	0x0800ccdd
 800cd1c:	0800ccdd 	.word	0x0800ccdd
 800cd20:	0800ce6d 	.word	0x0800ce6d
 800cd24:	0800cd91 	.word	0x0800cd91
 800cd28:	0800ce4f 	.word	0x0800ce4f
 800cd2c:	0800ccdd 	.word	0x0800ccdd
 800cd30:	0800ccdd 	.word	0x0800ccdd
 800cd34:	0800ce8f 	.word	0x0800ce8f
 800cd38:	0800ccdd 	.word	0x0800ccdd
 800cd3c:	0800cd91 	.word	0x0800cd91
 800cd40:	0800ccdd 	.word	0x0800ccdd
 800cd44:	0800ccdd 	.word	0x0800ccdd
 800cd48:	0800ce57 	.word	0x0800ce57
 800cd4c:	682b      	ldr	r3, [r5, #0]
 800cd4e:	1d1a      	adds	r2, r3, #4
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	602a      	str	r2, [r5, #0]
 800cd54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	e0a3      	b.n	800cea8 <_printf_i+0x1f4>
 800cd60:	6820      	ldr	r0, [r4, #0]
 800cd62:	6829      	ldr	r1, [r5, #0]
 800cd64:	0606      	lsls	r6, r0, #24
 800cd66:	f101 0304 	add.w	r3, r1, #4
 800cd6a:	d50a      	bpl.n	800cd82 <_printf_i+0xce>
 800cd6c:	680e      	ldr	r6, [r1, #0]
 800cd6e:	602b      	str	r3, [r5, #0]
 800cd70:	2e00      	cmp	r6, #0
 800cd72:	da03      	bge.n	800cd7c <_printf_i+0xc8>
 800cd74:	232d      	movs	r3, #45	; 0x2d
 800cd76:	4276      	negs	r6, r6
 800cd78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd7c:	485e      	ldr	r0, [pc, #376]	; (800cef8 <_printf_i+0x244>)
 800cd7e:	230a      	movs	r3, #10
 800cd80:	e019      	b.n	800cdb6 <_printf_i+0x102>
 800cd82:	680e      	ldr	r6, [r1, #0]
 800cd84:	602b      	str	r3, [r5, #0]
 800cd86:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd8a:	bf18      	it	ne
 800cd8c:	b236      	sxthne	r6, r6
 800cd8e:	e7ef      	b.n	800cd70 <_printf_i+0xbc>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	6820      	ldr	r0, [r4, #0]
 800cd94:	1d19      	adds	r1, r3, #4
 800cd96:	6029      	str	r1, [r5, #0]
 800cd98:	0601      	lsls	r1, r0, #24
 800cd9a:	d501      	bpl.n	800cda0 <_printf_i+0xec>
 800cd9c:	681e      	ldr	r6, [r3, #0]
 800cd9e:	e002      	b.n	800cda6 <_printf_i+0xf2>
 800cda0:	0646      	lsls	r6, r0, #25
 800cda2:	d5fb      	bpl.n	800cd9c <_printf_i+0xe8>
 800cda4:	881e      	ldrh	r6, [r3, #0]
 800cda6:	4854      	ldr	r0, [pc, #336]	; (800cef8 <_printf_i+0x244>)
 800cda8:	2f6f      	cmp	r7, #111	; 0x6f
 800cdaa:	bf0c      	ite	eq
 800cdac:	2308      	moveq	r3, #8
 800cdae:	230a      	movne	r3, #10
 800cdb0:	2100      	movs	r1, #0
 800cdb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cdb6:	6865      	ldr	r5, [r4, #4]
 800cdb8:	60a5      	str	r5, [r4, #8]
 800cdba:	2d00      	cmp	r5, #0
 800cdbc:	bfa2      	ittt	ge
 800cdbe:	6821      	ldrge	r1, [r4, #0]
 800cdc0:	f021 0104 	bicge.w	r1, r1, #4
 800cdc4:	6021      	strge	r1, [r4, #0]
 800cdc6:	b90e      	cbnz	r6, 800cdcc <_printf_i+0x118>
 800cdc8:	2d00      	cmp	r5, #0
 800cdca:	d04d      	beq.n	800ce68 <_printf_i+0x1b4>
 800cdcc:	4615      	mov	r5, r2
 800cdce:	fbb6 f1f3 	udiv	r1, r6, r3
 800cdd2:	fb03 6711 	mls	r7, r3, r1, r6
 800cdd6:	5dc7      	ldrb	r7, [r0, r7]
 800cdd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cddc:	4637      	mov	r7, r6
 800cdde:	42bb      	cmp	r3, r7
 800cde0:	460e      	mov	r6, r1
 800cde2:	d9f4      	bls.n	800cdce <_printf_i+0x11a>
 800cde4:	2b08      	cmp	r3, #8
 800cde6:	d10b      	bne.n	800ce00 <_printf_i+0x14c>
 800cde8:	6823      	ldr	r3, [r4, #0]
 800cdea:	07de      	lsls	r6, r3, #31
 800cdec:	d508      	bpl.n	800ce00 <_printf_i+0x14c>
 800cdee:	6923      	ldr	r3, [r4, #16]
 800cdf0:	6861      	ldr	r1, [r4, #4]
 800cdf2:	4299      	cmp	r1, r3
 800cdf4:	bfde      	ittt	le
 800cdf6:	2330      	movle	r3, #48	; 0x30
 800cdf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cdfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ce00:	1b52      	subs	r2, r2, r5
 800ce02:	6122      	str	r2, [r4, #16]
 800ce04:	f8cd a000 	str.w	sl, [sp]
 800ce08:	464b      	mov	r3, r9
 800ce0a:	aa03      	add	r2, sp, #12
 800ce0c:	4621      	mov	r1, r4
 800ce0e:	4640      	mov	r0, r8
 800ce10:	f7ff fee2 	bl	800cbd8 <_printf_common>
 800ce14:	3001      	adds	r0, #1
 800ce16:	d14c      	bne.n	800ceb2 <_printf_i+0x1fe>
 800ce18:	f04f 30ff 	mov.w	r0, #4294967295
 800ce1c:	b004      	add	sp, #16
 800ce1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce22:	4835      	ldr	r0, [pc, #212]	; (800cef8 <_printf_i+0x244>)
 800ce24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800ce28:	6829      	ldr	r1, [r5, #0]
 800ce2a:	6823      	ldr	r3, [r4, #0]
 800ce2c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ce30:	6029      	str	r1, [r5, #0]
 800ce32:	061d      	lsls	r5, r3, #24
 800ce34:	d514      	bpl.n	800ce60 <_printf_i+0x1ac>
 800ce36:	07df      	lsls	r7, r3, #31
 800ce38:	bf44      	itt	mi
 800ce3a:	f043 0320 	orrmi.w	r3, r3, #32
 800ce3e:	6023      	strmi	r3, [r4, #0]
 800ce40:	b91e      	cbnz	r6, 800ce4a <_printf_i+0x196>
 800ce42:	6823      	ldr	r3, [r4, #0]
 800ce44:	f023 0320 	bic.w	r3, r3, #32
 800ce48:	6023      	str	r3, [r4, #0]
 800ce4a:	2310      	movs	r3, #16
 800ce4c:	e7b0      	b.n	800cdb0 <_printf_i+0xfc>
 800ce4e:	6823      	ldr	r3, [r4, #0]
 800ce50:	f043 0320 	orr.w	r3, r3, #32
 800ce54:	6023      	str	r3, [r4, #0]
 800ce56:	2378      	movs	r3, #120	; 0x78
 800ce58:	4828      	ldr	r0, [pc, #160]	; (800cefc <_printf_i+0x248>)
 800ce5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce5e:	e7e3      	b.n	800ce28 <_printf_i+0x174>
 800ce60:	0659      	lsls	r1, r3, #25
 800ce62:	bf48      	it	mi
 800ce64:	b2b6      	uxthmi	r6, r6
 800ce66:	e7e6      	b.n	800ce36 <_printf_i+0x182>
 800ce68:	4615      	mov	r5, r2
 800ce6a:	e7bb      	b.n	800cde4 <_printf_i+0x130>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	6826      	ldr	r6, [r4, #0]
 800ce70:	6961      	ldr	r1, [r4, #20]
 800ce72:	1d18      	adds	r0, r3, #4
 800ce74:	6028      	str	r0, [r5, #0]
 800ce76:	0635      	lsls	r5, r6, #24
 800ce78:	681b      	ldr	r3, [r3, #0]
 800ce7a:	d501      	bpl.n	800ce80 <_printf_i+0x1cc>
 800ce7c:	6019      	str	r1, [r3, #0]
 800ce7e:	e002      	b.n	800ce86 <_printf_i+0x1d2>
 800ce80:	0670      	lsls	r0, r6, #25
 800ce82:	d5fb      	bpl.n	800ce7c <_printf_i+0x1c8>
 800ce84:	8019      	strh	r1, [r3, #0]
 800ce86:	2300      	movs	r3, #0
 800ce88:	6123      	str	r3, [r4, #16]
 800ce8a:	4615      	mov	r5, r2
 800ce8c:	e7ba      	b.n	800ce04 <_printf_i+0x150>
 800ce8e:	682b      	ldr	r3, [r5, #0]
 800ce90:	1d1a      	adds	r2, r3, #4
 800ce92:	602a      	str	r2, [r5, #0]
 800ce94:	681d      	ldr	r5, [r3, #0]
 800ce96:	6862      	ldr	r2, [r4, #4]
 800ce98:	2100      	movs	r1, #0
 800ce9a:	4628      	mov	r0, r5
 800ce9c:	f7f3 f9a8 	bl	80001f0 <memchr>
 800cea0:	b108      	cbz	r0, 800cea6 <_printf_i+0x1f2>
 800cea2:	1b40      	subs	r0, r0, r5
 800cea4:	6060      	str	r0, [r4, #4]
 800cea6:	6863      	ldr	r3, [r4, #4]
 800cea8:	6123      	str	r3, [r4, #16]
 800ceaa:	2300      	movs	r3, #0
 800ceac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb0:	e7a8      	b.n	800ce04 <_printf_i+0x150>
 800ceb2:	6923      	ldr	r3, [r4, #16]
 800ceb4:	462a      	mov	r2, r5
 800ceb6:	4649      	mov	r1, r9
 800ceb8:	4640      	mov	r0, r8
 800ceba:	47d0      	blx	sl
 800cebc:	3001      	adds	r0, #1
 800cebe:	d0ab      	beq.n	800ce18 <_printf_i+0x164>
 800cec0:	6823      	ldr	r3, [r4, #0]
 800cec2:	079b      	lsls	r3, r3, #30
 800cec4:	d413      	bmi.n	800ceee <_printf_i+0x23a>
 800cec6:	68e0      	ldr	r0, [r4, #12]
 800cec8:	9b03      	ldr	r3, [sp, #12]
 800ceca:	4298      	cmp	r0, r3
 800cecc:	bfb8      	it	lt
 800cece:	4618      	movlt	r0, r3
 800ced0:	e7a4      	b.n	800ce1c <_printf_i+0x168>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4632      	mov	r2, r6
 800ced6:	4649      	mov	r1, r9
 800ced8:	4640      	mov	r0, r8
 800ceda:	47d0      	blx	sl
 800cedc:	3001      	adds	r0, #1
 800cede:	d09b      	beq.n	800ce18 <_printf_i+0x164>
 800cee0:	3501      	adds	r5, #1
 800cee2:	68e3      	ldr	r3, [r4, #12]
 800cee4:	9903      	ldr	r1, [sp, #12]
 800cee6:	1a5b      	subs	r3, r3, r1
 800cee8:	42ab      	cmp	r3, r5
 800ceea:	dcf2      	bgt.n	800ced2 <_printf_i+0x21e>
 800ceec:	e7eb      	b.n	800cec6 <_printf_i+0x212>
 800ceee:	2500      	movs	r5, #0
 800cef0:	f104 0619 	add.w	r6, r4, #25
 800cef4:	e7f5      	b.n	800cee2 <_printf_i+0x22e>
 800cef6:	bf00      	nop
 800cef8:	080125b6 	.word	0x080125b6
 800cefc:	080125c7 	.word	0x080125c7

0800cf00 <_scanf_float>:
 800cf00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf04:	b087      	sub	sp, #28
 800cf06:	4617      	mov	r7, r2
 800cf08:	9303      	str	r3, [sp, #12]
 800cf0a:	688b      	ldr	r3, [r1, #8]
 800cf0c:	1e5a      	subs	r2, r3, #1
 800cf0e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800cf12:	bf83      	ittte	hi
 800cf14:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cf18:	195b      	addhi	r3, r3, r5
 800cf1a:	9302      	strhi	r3, [sp, #8]
 800cf1c:	2300      	movls	r3, #0
 800cf1e:	bf86      	itte	hi
 800cf20:	f240 135d 	movwhi	r3, #349	; 0x15d
 800cf24:	608b      	strhi	r3, [r1, #8]
 800cf26:	9302      	strls	r3, [sp, #8]
 800cf28:	680b      	ldr	r3, [r1, #0]
 800cf2a:	468b      	mov	fp, r1
 800cf2c:	2500      	movs	r5, #0
 800cf2e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cf32:	f84b 3b1c 	str.w	r3, [fp], #28
 800cf36:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf3a:	4680      	mov	r8, r0
 800cf3c:	460c      	mov	r4, r1
 800cf3e:	465e      	mov	r6, fp
 800cf40:	46aa      	mov	sl, r5
 800cf42:	46a9      	mov	r9, r5
 800cf44:	9501      	str	r5, [sp, #4]
 800cf46:	68a2      	ldr	r2, [r4, #8]
 800cf48:	b152      	cbz	r2, 800cf60 <_scanf_float+0x60>
 800cf4a:	683b      	ldr	r3, [r7, #0]
 800cf4c:	781b      	ldrb	r3, [r3, #0]
 800cf4e:	2b4e      	cmp	r3, #78	; 0x4e
 800cf50:	d864      	bhi.n	800d01c <_scanf_float+0x11c>
 800cf52:	2b40      	cmp	r3, #64	; 0x40
 800cf54:	d83c      	bhi.n	800cfd0 <_scanf_float+0xd0>
 800cf56:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf5a:	b2c8      	uxtb	r0, r1
 800cf5c:	280e      	cmp	r0, #14
 800cf5e:	d93a      	bls.n	800cfd6 <_scanf_float+0xd6>
 800cf60:	f1b9 0f00 	cmp.w	r9, #0
 800cf64:	d003      	beq.n	800cf6e <_scanf_float+0x6e>
 800cf66:	6823      	ldr	r3, [r4, #0]
 800cf68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf6c:	6023      	str	r3, [r4, #0]
 800cf6e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf72:	f1ba 0f01 	cmp.w	sl, #1
 800cf76:	f200 8113 	bhi.w	800d1a0 <_scanf_float+0x2a0>
 800cf7a:	455e      	cmp	r6, fp
 800cf7c:	f200 8105 	bhi.w	800d18a <_scanf_float+0x28a>
 800cf80:	2501      	movs	r5, #1
 800cf82:	4628      	mov	r0, r5
 800cf84:	b007      	add	sp, #28
 800cf86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf8a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf8e:	2a0d      	cmp	r2, #13
 800cf90:	d8e6      	bhi.n	800cf60 <_scanf_float+0x60>
 800cf92:	a101      	add	r1, pc, #4	; (adr r1, 800cf98 <_scanf_float+0x98>)
 800cf94:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf98:	0800d0d7 	.word	0x0800d0d7
 800cf9c:	0800cf61 	.word	0x0800cf61
 800cfa0:	0800cf61 	.word	0x0800cf61
 800cfa4:	0800cf61 	.word	0x0800cf61
 800cfa8:	0800d137 	.word	0x0800d137
 800cfac:	0800d10f 	.word	0x0800d10f
 800cfb0:	0800cf61 	.word	0x0800cf61
 800cfb4:	0800cf61 	.word	0x0800cf61
 800cfb8:	0800d0e5 	.word	0x0800d0e5
 800cfbc:	0800cf61 	.word	0x0800cf61
 800cfc0:	0800cf61 	.word	0x0800cf61
 800cfc4:	0800cf61 	.word	0x0800cf61
 800cfc8:	0800cf61 	.word	0x0800cf61
 800cfcc:	0800d09d 	.word	0x0800d09d
 800cfd0:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cfd4:	e7db      	b.n	800cf8e <_scanf_float+0x8e>
 800cfd6:	290e      	cmp	r1, #14
 800cfd8:	d8c2      	bhi.n	800cf60 <_scanf_float+0x60>
 800cfda:	a001      	add	r0, pc, #4	; (adr r0, 800cfe0 <_scanf_float+0xe0>)
 800cfdc:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cfe0:	0800d08f 	.word	0x0800d08f
 800cfe4:	0800cf61 	.word	0x0800cf61
 800cfe8:	0800d08f 	.word	0x0800d08f
 800cfec:	0800d123 	.word	0x0800d123
 800cff0:	0800cf61 	.word	0x0800cf61
 800cff4:	0800d03d 	.word	0x0800d03d
 800cff8:	0800d079 	.word	0x0800d079
 800cffc:	0800d079 	.word	0x0800d079
 800d000:	0800d079 	.word	0x0800d079
 800d004:	0800d079 	.word	0x0800d079
 800d008:	0800d079 	.word	0x0800d079
 800d00c:	0800d079 	.word	0x0800d079
 800d010:	0800d079 	.word	0x0800d079
 800d014:	0800d079 	.word	0x0800d079
 800d018:	0800d079 	.word	0x0800d079
 800d01c:	2b6e      	cmp	r3, #110	; 0x6e
 800d01e:	d809      	bhi.n	800d034 <_scanf_float+0x134>
 800d020:	2b60      	cmp	r3, #96	; 0x60
 800d022:	d8b2      	bhi.n	800cf8a <_scanf_float+0x8a>
 800d024:	2b54      	cmp	r3, #84	; 0x54
 800d026:	d077      	beq.n	800d118 <_scanf_float+0x218>
 800d028:	2b59      	cmp	r3, #89	; 0x59
 800d02a:	d199      	bne.n	800cf60 <_scanf_float+0x60>
 800d02c:	2d07      	cmp	r5, #7
 800d02e:	d197      	bne.n	800cf60 <_scanf_float+0x60>
 800d030:	2508      	movs	r5, #8
 800d032:	e029      	b.n	800d088 <_scanf_float+0x188>
 800d034:	2b74      	cmp	r3, #116	; 0x74
 800d036:	d06f      	beq.n	800d118 <_scanf_float+0x218>
 800d038:	2b79      	cmp	r3, #121	; 0x79
 800d03a:	e7f6      	b.n	800d02a <_scanf_float+0x12a>
 800d03c:	6821      	ldr	r1, [r4, #0]
 800d03e:	05c8      	lsls	r0, r1, #23
 800d040:	d51a      	bpl.n	800d078 <_scanf_float+0x178>
 800d042:	9b02      	ldr	r3, [sp, #8]
 800d044:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d048:	6021      	str	r1, [r4, #0]
 800d04a:	f109 0901 	add.w	r9, r9, #1
 800d04e:	b11b      	cbz	r3, 800d058 <_scanf_float+0x158>
 800d050:	3b01      	subs	r3, #1
 800d052:	3201      	adds	r2, #1
 800d054:	9302      	str	r3, [sp, #8]
 800d056:	60a2      	str	r2, [r4, #8]
 800d058:	68a3      	ldr	r3, [r4, #8]
 800d05a:	3b01      	subs	r3, #1
 800d05c:	60a3      	str	r3, [r4, #8]
 800d05e:	6923      	ldr	r3, [r4, #16]
 800d060:	3301      	adds	r3, #1
 800d062:	6123      	str	r3, [r4, #16]
 800d064:	687b      	ldr	r3, [r7, #4]
 800d066:	3b01      	subs	r3, #1
 800d068:	2b00      	cmp	r3, #0
 800d06a:	607b      	str	r3, [r7, #4]
 800d06c:	f340 8084 	ble.w	800d178 <_scanf_float+0x278>
 800d070:	683b      	ldr	r3, [r7, #0]
 800d072:	3301      	adds	r3, #1
 800d074:	603b      	str	r3, [r7, #0]
 800d076:	e766      	b.n	800cf46 <_scanf_float+0x46>
 800d078:	eb1a 0f05 	cmn.w	sl, r5
 800d07c:	f47f af70 	bne.w	800cf60 <_scanf_float+0x60>
 800d080:	6822      	ldr	r2, [r4, #0]
 800d082:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d086:	6022      	str	r2, [r4, #0]
 800d088:	f806 3b01 	strb.w	r3, [r6], #1
 800d08c:	e7e4      	b.n	800d058 <_scanf_float+0x158>
 800d08e:	6822      	ldr	r2, [r4, #0]
 800d090:	0610      	lsls	r0, r2, #24
 800d092:	f57f af65 	bpl.w	800cf60 <_scanf_float+0x60>
 800d096:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d09a:	e7f4      	b.n	800d086 <_scanf_float+0x186>
 800d09c:	f1ba 0f00 	cmp.w	sl, #0
 800d0a0:	d10e      	bne.n	800d0c0 <_scanf_float+0x1c0>
 800d0a2:	f1b9 0f00 	cmp.w	r9, #0
 800d0a6:	d10e      	bne.n	800d0c6 <_scanf_float+0x1c6>
 800d0a8:	6822      	ldr	r2, [r4, #0]
 800d0aa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0ae:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0b2:	d108      	bne.n	800d0c6 <_scanf_float+0x1c6>
 800d0b4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0b8:	6022      	str	r2, [r4, #0]
 800d0ba:	f04f 0a01 	mov.w	sl, #1
 800d0be:	e7e3      	b.n	800d088 <_scanf_float+0x188>
 800d0c0:	f1ba 0f02 	cmp.w	sl, #2
 800d0c4:	d055      	beq.n	800d172 <_scanf_float+0x272>
 800d0c6:	2d01      	cmp	r5, #1
 800d0c8:	d002      	beq.n	800d0d0 <_scanf_float+0x1d0>
 800d0ca:	2d04      	cmp	r5, #4
 800d0cc:	f47f af48 	bne.w	800cf60 <_scanf_float+0x60>
 800d0d0:	3501      	adds	r5, #1
 800d0d2:	b2ed      	uxtb	r5, r5
 800d0d4:	e7d8      	b.n	800d088 <_scanf_float+0x188>
 800d0d6:	f1ba 0f01 	cmp.w	sl, #1
 800d0da:	f47f af41 	bne.w	800cf60 <_scanf_float+0x60>
 800d0de:	f04f 0a02 	mov.w	sl, #2
 800d0e2:	e7d1      	b.n	800d088 <_scanf_float+0x188>
 800d0e4:	b97d      	cbnz	r5, 800d106 <_scanf_float+0x206>
 800d0e6:	f1b9 0f00 	cmp.w	r9, #0
 800d0ea:	f47f af3c 	bne.w	800cf66 <_scanf_float+0x66>
 800d0ee:	6822      	ldr	r2, [r4, #0]
 800d0f0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0f4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0f8:	f47f af39 	bne.w	800cf6e <_scanf_float+0x6e>
 800d0fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d100:	6022      	str	r2, [r4, #0]
 800d102:	2501      	movs	r5, #1
 800d104:	e7c0      	b.n	800d088 <_scanf_float+0x188>
 800d106:	2d03      	cmp	r5, #3
 800d108:	d0e2      	beq.n	800d0d0 <_scanf_float+0x1d0>
 800d10a:	2d05      	cmp	r5, #5
 800d10c:	e7de      	b.n	800d0cc <_scanf_float+0x1cc>
 800d10e:	2d02      	cmp	r5, #2
 800d110:	f47f af26 	bne.w	800cf60 <_scanf_float+0x60>
 800d114:	2503      	movs	r5, #3
 800d116:	e7b7      	b.n	800d088 <_scanf_float+0x188>
 800d118:	2d06      	cmp	r5, #6
 800d11a:	f47f af21 	bne.w	800cf60 <_scanf_float+0x60>
 800d11e:	2507      	movs	r5, #7
 800d120:	e7b2      	b.n	800d088 <_scanf_float+0x188>
 800d122:	6822      	ldr	r2, [r4, #0]
 800d124:	0591      	lsls	r1, r2, #22
 800d126:	f57f af1b 	bpl.w	800cf60 <_scanf_float+0x60>
 800d12a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d12e:	6022      	str	r2, [r4, #0]
 800d130:	f8cd 9004 	str.w	r9, [sp, #4]
 800d134:	e7a8      	b.n	800d088 <_scanf_float+0x188>
 800d136:	6822      	ldr	r2, [r4, #0]
 800d138:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d13c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d140:	d006      	beq.n	800d150 <_scanf_float+0x250>
 800d142:	0550      	lsls	r0, r2, #21
 800d144:	f57f af0c 	bpl.w	800cf60 <_scanf_float+0x60>
 800d148:	f1b9 0f00 	cmp.w	r9, #0
 800d14c:	f43f af0f 	beq.w	800cf6e <_scanf_float+0x6e>
 800d150:	0591      	lsls	r1, r2, #22
 800d152:	bf58      	it	pl
 800d154:	9901      	ldrpl	r1, [sp, #4]
 800d156:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d15a:	bf58      	it	pl
 800d15c:	eba9 0101 	subpl.w	r1, r9, r1
 800d160:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d164:	bf58      	it	pl
 800d166:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d16a:	6022      	str	r2, [r4, #0]
 800d16c:	f04f 0900 	mov.w	r9, #0
 800d170:	e78a      	b.n	800d088 <_scanf_float+0x188>
 800d172:	f04f 0a03 	mov.w	sl, #3
 800d176:	e787      	b.n	800d088 <_scanf_float+0x188>
 800d178:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d17c:	4639      	mov	r1, r7
 800d17e:	4640      	mov	r0, r8
 800d180:	4798      	blx	r3
 800d182:	2800      	cmp	r0, #0
 800d184:	f43f aedf 	beq.w	800cf46 <_scanf_float+0x46>
 800d188:	e6ea      	b.n	800cf60 <_scanf_float+0x60>
 800d18a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d18e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d192:	463a      	mov	r2, r7
 800d194:	4640      	mov	r0, r8
 800d196:	4798      	blx	r3
 800d198:	6923      	ldr	r3, [r4, #16]
 800d19a:	3b01      	subs	r3, #1
 800d19c:	6123      	str	r3, [r4, #16]
 800d19e:	e6ec      	b.n	800cf7a <_scanf_float+0x7a>
 800d1a0:	1e6b      	subs	r3, r5, #1
 800d1a2:	2b06      	cmp	r3, #6
 800d1a4:	d825      	bhi.n	800d1f2 <_scanf_float+0x2f2>
 800d1a6:	2d02      	cmp	r5, #2
 800d1a8:	d836      	bhi.n	800d218 <_scanf_float+0x318>
 800d1aa:	455e      	cmp	r6, fp
 800d1ac:	f67f aee8 	bls.w	800cf80 <_scanf_float+0x80>
 800d1b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1b4:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1b8:	463a      	mov	r2, r7
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	4798      	blx	r3
 800d1be:	6923      	ldr	r3, [r4, #16]
 800d1c0:	3b01      	subs	r3, #1
 800d1c2:	6123      	str	r3, [r4, #16]
 800d1c4:	e7f1      	b.n	800d1aa <_scanf_float+0x2aa>
 800d1c6:	9802      	ldr	r0, [sp, #8]
 800d1c8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1cc:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d1d0:	9002      	str	r0, [sp, #8]
 800d1d2:	463a      	mov	r2, r7
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	4798      	blx	r3
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	6123      	str	r3, [r4, #16]
 800d1de:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1e2:	fa5f fa8a 	uxtb.w	sl, sl
 800d1e6:	f1ba 0f02 	cmp.w	sl, #2
 800d1ea:	d1ec      	bne.n	800d1c6 <_scanf_float+0x2c6>
 800d1ec:	3d03      	subs	r5, #3
 800d1ee:	b2ed      	uxtb	r5, r5
 800d1f0:	1b76      	subs	r6, r6, r5
 800d1f2:	6823      	ldr	r3, [r4, #0]
 800d1f4:	05da      	lsls	r2, r3, #23
 800d1f6:	d52f      	bpl.n	800d258 <_scanf_float+0x358>
 800d1f8:	055b      	lsls	r3, r3, #21
 800d1fa:	d510      	bpl.n	800d21e <_scanf_float+0x31e>
 800d1fc:	455e      	cmp	r6, fp
 800d1fe:	f67f aebf 	bls.w	800cf80 <_scanf_float+0x80>
 800d202:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d206:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d20a:	463a      	mov	r2, r7
 800d20c:	4640      	mov	r0, r8
 800d20e:	4798      	blx	r3
 800d210:	6923      	ldr	r3, [r4, #16]
 800d212:	3b01      	subs	r3, #1
 800d214:	6123      	str	r3, [r4, #16]
 800d216:	e7f1      	b.n	800d1fc <_scanf_float+0x2fc>
 800d218:	46aa      	mov	sl, r5
 800d21a:	9602      	str	r6, [sp, #8]
 800d21c:	e7df      	b.n	800d1de <_scanf_float+0x2de>
 800d21e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d222:	6923      	ldr	r3, [r4, #16]
 800d224:	2965      	cmp	r1, #101	; 0x65
 800d226:	f103 33ff 	add.w	r3, r3, #4294967295
 800d22a:	f106 35ff 	add.w	r5, r6, #4294967295
 800d22e:	6123      	str	r3, [r4, #16]
 800d230:	d00c      	beq.n	800d24c <_scanf_float+0x34c>
 800d232:	2945      	cmp	r1, #69	; 0x45
 800d234:	d00a      	beq.n	800d24c <_scanf_float+0x34c>
 800d236:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d23a:	463a      	mov	r2, r7
 800d23c:	4640      	mov	r0, r8
 800d23e:	4798      	blx	r3
 800d240:	6923      	ldr	r3, [r4, #16]
 800d242:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d246:	3b01      	subs	r3, #1
 800d248:	1eb5      	subs	r5, r6, #2
 800d24a:	6123      	str	r3, [r4, #16]
 800d24c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d250:	463a      	mov	r2, r7
 800d252:	4640      	mov	r0, r8
 800d254:	4798      	blx	r3
 800d256:	462e      	mov	r6, r5
 800d258:	6825      	ldr	r5, [r4, #0]
 800d25a:	f015 0510 	ands.w	r5, r5, #16
 800d25e:	d159      	bne.n	800d314 <_scanf_float+0x414>
 800d260:	7035      	strb	r5, [r6, #0]
 800d262:	6823      	ldr	r3, [r4, #0]
 800d264:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d268:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d26c:	d11b      	bne.n	800d2a6 <_scanf_float+0x3a6>
 800d26e:	9b01      	ldr	r3, [sp, #4]
 800d270:	454b      	cmp	r3, r9
 800d272:	eba3 0209 	sub.w	r2, r3, r9
 800d276:	d123      	bne.n	800d2c0 <_scanf_float+0x3c0>
 800d278:	2200      	movs	r2, #0
 800d27a:	4659      	mov	r1, fp
 800d27c:	4640      	mov	r0, r8
 800d27e:	f000 fe99 	bl	800dfb4 <_strtod_r>
 800d282:	6822      	ldr	r2, [r4, #0]
 800d284:	9b03      	ldr	r3, [sp, #12]
 800d286:	f012 0f02 	tst.w	r2, #2
 800d28a:	ec57 6b10 	vmov	r6, r7, d0
 800d28e:	681b      	ldr	r3, [r3, #0]
 800d290:	d021      	beq.n	800d2d6 <_scanf_float+0x3d6>
 800d292:	9903      	ldr	r1, [sp, #12]
 800d294:	1d1a      	adds	r2, r3, #4
 800d296:	600a      	str	r2, [r1, #0]
 800d298:	681b      	ldr	r3, [r3, #0]
 800d29a:	e9c3 6700 	strd	r6, r7, [r3]
 800d29e:	68e3      	ldr	r3, [r4, #12]
 800d2a0:	3301      	adds	r3, #1
 800d2a2:	60e3      	str	r3, [r4, #12]
 800d2a4:	e66d      	b.n	800cf82 <_scanf_float+0x82>
 800d2a6:	9b04      	ldr	r3, [sp, #16]
 800d2a8:	2b00      	cmp	r3, #0
 800d2aa:	d0e5      	beq.n	800d278 <_scanf_float+0x378>
 800d2ac:	9905      	ldr	r1, [sp, #20]
 800d2ae:	230a      	movs	r3, #10
 800d2b0:	462a      	mov	r2, r5
 800d2b2:	3101      	adds	r1, #1
 800d2b4:	4640      	mov	r0, r8
 800d2b6:	f000 ff05 	bl	800e0c4 <_strtol_r>
 800d2ba:	9b04      	ldr	r3, [sp, #16]
 800d2bc:	9e05      	ldr	r6, [sp, #20]
 800d2be:	1ac2      	subs	r2, r0, r3
 800d2c0:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d2c4:	429e      	cmp	r6, r3
 800d2c6:	bf28      	it	cs
 800d2c8:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d2cc:	4912      	ldr	r1, [pc, #72]	; (800d318 <_scanf_float+0x418>)
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	f000 f82c 	bl	800d32c <siprintf>
 800d2d4:	e7d0      	b.n	800d278 <_scanf_float+0x378>
 800d2d6:	9903      	ldr	r1, [sp, #12]
 800d2d8:	f012 0f04 	tst.w	r2, #4
 800d2dc:	f103 0204 	add.w	r2, r3, #4
 800d2e0:	600a      	str	r2, [r1, #0]
 800d2e2:	d1d9      	bne.n	800d298 <_scanf_float+0x398>
 800d2e4:	f8d3 8000 	ldr.w	r8, [r3]
 800d2e8:	ee10 2a10 	vmov	r2, s0
 800d2ec:	ee10 0a10 	vmov	r0, s0
 800d2f0:	463b      	mov	r3, r7
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	f7f3 fc22 	bl	8000b3c <__aeabi_dcmpun>
 800d2f8:	b128      	cbz	r0, 800d306 <_scanf_float+0x406>
 800d2fa:	4808      	ldr	r0, [pc, #32]	; (800d31c <_scanf_float+0x41c>)
 800d2fc:	f000 f810 	bl	800d320 <nanf>
 800d300:	ed88 0a00 	vstr	s0, [r8]
 800d304:	e7cb      	b.n	800d29e <_scanf_float+0x39e>
 800d306:	4630      	mov	r0, r6
 800d308:	4639      	mov	r1, r7
 800d30a:	f7f3 fc75 	bl	8000bf8 <__aeabi_d2f>
 800d30e:	f8c8 0000 	str.w	r0, [r8]
 800d312:	e7c4      	b.n	800d29e <_scanf_float+0x39e>
 800d314:	2500      	movs	r5, #0
 800d316:	e634      	b.n	800cf82 <_scanf_float+0x82>
 800d318:	080125d8 	.word	0x080125d8
 800d31c:	080129e0 	.word	0x080129e0

0800d320 <nanf>:
 800d320:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d328 <nanf+0x8>
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	7fc00000 	.word	0x7fc00000

0800d32c <siprintf>:
 800d32c:	b40e      	push	{r1, r2, r3}
 800d32e:	b500      	push	{lr}
 800d330:	b09c      	sub	sp, #112	; 0x70
 800d332:	ab1d      	add	r3, sp, #116	; 0x74
 800d334:	9002      	str	r0, [sp, #8]
 800d336:	9006      	str	r0, [sp, #24]
 800d338:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d33c:	4809      	ldr	r0, [pc, #36]	; (800d364 <siprintf+0x38>)
 800d33e:	9107      	str	r1, [sp, #28]
 800d340:	9104      	str	r1, [sp, #16]
 800d342:	4909      	ldr	r1, [pc, #36]	; (800d368 <siprintf+0x3c>)
 800d344:	f853 2b04 	ldr.w	r2, [r3], #4
 800d348:	9105      	str	r1, [sp, #20]
 800d34a:	6800      	ldr	r0, [r0, #0]
 800d34c:	9301      	str	r3, [sp, #4]
 800d34e:	a902      	add	r1, sp, #8
 800d350:	f002 fed6 	bl	8010100 <_svfiprintf_r>
 800d354:	9b02      	ldr	r3, [sp, #8]
 800d356:	2200      	movs	r2, #0
 800d358:	701a      	strb	r2, [r3, #0]
 800d35a:	b01c      	add	sp, #112	; 0x70
 800d35c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d360:	b003      	add	sp, #12
 800d362:	4770      	bx	lr
 800d364:	2000025c 	.word	0x2000025c
 800d368:	ffff0208 	.word	0xffff0208

0800d36c <sulp>:
 800d36c:	b570      	push	{r4, r5, r6, lr}
 800d36e:	4604      	mov	r4, r0
 800d370:	460d      	mov	r5, r1
 800d372:	ec45 4b10 	vmov	d0, r4, r5
 800d376:	4616      	mov	r6, r2
 800d378:	f002 fc20 	bl	800fbbc <__ulp>
 800d37c:	ec51 0b10 	vmov	r0, r1, d0
 800d380:	b17e      	cbz	r6, 800d3a2 <sulp+0x36>
 800d382:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d386:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d38a:	2b00      	cmp	r3, #0
 800d38c:	dd09      	ble.n	800d3a2 <sulp+0x36>
 800d38e:	051b      	lsls	r3, r3, #20
 800d390:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d394:	2400      	movs	r4, #0
 800d396:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d39a:	4622      	mov	r2, r4
 800d39c:	462b      	mov	r3, r5
 800d39e:	f7f3 f933 	bl	8000608 <__aeabi_dmul>
 800d3a2:	bd70      	pop	{r4, r5, r6, pc}
 800d3a4:	0000      	movs	r0, r0
	...

0800d3a8 <_strtod_l>:
 800d3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3ac:	ed2d 8b02 	vpush	{d8}
 800d3b0:	b09d      	sub	sp, #116	; 0x74
 800d3b2:	461f      	mov	r7, r3
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	9318      	str	r3, [sp, #96]	; 0x60
 800d3b8:	4ba2      	ldr	r3, [pc, #648]	; (800d644 <_strtod_l+0x29c>)
 800d3ba:	9213      	str	r2, [sp, #76]	; 0x4c
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	9305      	str	r3, [sp, #20]
 800d3c0:	4604      	mov	r4, r0
 800d3c2:	4618      	mov	r0, r3
 800d3c4:	4688      	mov	r8, r1
 800d3c6:	f7f2 ff0b 	bl	80001e0 <strlen>
 800d3ca:	f04f 0a00 	mov.w	sl, #0
 800d3ce:	4605      	mov	r5, r0
 800d3d0:	f04f 0b00 	mov.w	fp, #0
 800d3d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d3d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3da:	781a      	ldrb	r2, [r3, #0]
 800d3dc:	2a2b      	cmp	r2, #43	; 0x2b
 800d3de:	d04e      	beq.n	800d47e <_strtod_l+0xd6>
 800d3e0:	d83b      	bhi.n	800d45a <_strtod_l+0xb2>
 800d3e2:	2a0d      	cmp	r2, #13
 800d3e4:	d834      	bhi.n	800d450 <_strtod_l+0xa8>
 800d3e6:	2a08      	cmp	r2, #8
 800d3e8:	d834      	bhi.n	800d454 <_strtod_l+0xac>
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	d03e      	beq.n	800d46c <_strtod_l+0xc4>
 800d3ee:	2300      	movs	r3, #0
 800d3f0:	930a      	str	r3, [sp, #40]	; 0x28
 800d3f2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d3f4:	7833      	ldrb	r3, [r6, #0]
 800d3f6:	2b30      	cmp	r3, #48	; 0x30
 800d3f8:	f040 80b0 	bne.w	800d55c <_strtod_l+0x1b4>
 800d3fc:	7873      	ldrb	r3, [r6, #1]
 800d3fe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d402:	2b58      	cmp	r3, #88	; 0x58
 800d404:	d168      	bne.n	800d4d8 <_strtod_l+0x130>
 800d406:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d408:	9301      	str	r3, [sp, #4]
 800d40a:	ab18      	add	r3, sp, #96	; 0x60
 800d40c:	9702      	str	r7, [sp, #8]
 800d40e:	9300      	str	r3, [sp, #0]
 800d410:	4a8d      	ldr	r2, [pc, #564]	; (800d648 <_strtod_l+0x2a0>)
 800d412:	ab19      	add	r3, sp, #100	; 0x64
 800d414:	a917      	add	r1, sp, #92	; 0x5c
 800d416:	4620      	mov	r0, r4
 800d418:	f001 fd38 	bl	800ee8c <__gethex>
 800d41c:	f010 0707 	ands.w	r7, r0, #7
 800d420:	4605      	mov	r5, r0
 800d422:	d005      	beq.n	800d430 <_strtod_l+0x88>
 800d424:	2f06      	cmp	r7, #6
 800d426:	d12c      	bne.n	800d482 <_strtod_l+0xda>
 800d428:	3601      	adds	r6, #1
 800d42a:	2300      	movs	r3, #0
 800d42c:	9617      	str	r6, [sp, #92]	; 0x5c
 800d42e:	930a      	str	r3, [sp, #40]	; 0x28
 800d430:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d432:	2b00      	cmp	r3, #0
 800d434:	f040 8590 	bne.w	800df58 <_strtod_l+0xbb0>
 800d438:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d43a:	b1eb      	cbz	r3, 800d478 <_strtod_l+0xd0>
 800d43c:	4652      	mov	r2, sl
 800d43e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d442:	ec43 2b10 	vmov	d0, r2, r3
 800d446:	b01d      	add	sp, #116	; 0x74
 800d448:	ecbd 8b02 	vpop	{d8}
 800d44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d450:	2a20      	cmp	r2, #32
 800d452:	d1cc      	bne.n	800d3ee <_strtod_l+0x46>
 800d454:	3301      	adds	r3, #1
 800d456:	9317      	str	r3, [sp, #92]	; 0x5c
 800d458:	e7be      	b.n	800d3d8 <_strtod_l+0x30>
 800d45a:	2a2d      	cmp	r2, #45	; 0x2d
 800d45c:	d1c7      	bne.n	800d3ee <_strtod_l+0x46>
 800d45e:	2201      	movs	r2, #1
 800d460:	920a      	str	r2, [sp, #40]	; 0x28
 800d462:	1c5a      	adds	r2, r3, #1
 800d464:	9217      	str	r2, [sp, #92]	; 0x5c
 800d466:	785b      	ldrb	r3, [r3, #1]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d1c2      	bne.n	800d3f2 <_strtod_l+0x4a>
 800d46c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d46e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d472:	2b00      	cmp	r3, #0
 800d474:	f040 856e 	bne.w	800df54 <_strtod_l+0xbac>
 800d478:	4652      	mov	r2, sl
 800d47a:	465b      	mov	r3, fp
 800d47c:	e7e1      	b.n	800d442 <_strtod_l+0x9a>
 800d47e:	2200      	movs	r2, #0
 800d480:	e7ee      	b.n	800d460 <_strtod_l+0xb8>
 800d482:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d484:	b13a      	cbz	r2, 800d496 <_strtod_l+0xee>
 800d486:	2135      	movs	r1, #53	; 0x35
 800d488:	a81a      	add	r0, sp, #104	; 0x68
 800d48a:	f002 fca2 	bl	800fdd2 <__copybits>
 800d48e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d490:	4620      	mov	r0, r4
 800d492:	f002 f861 	bl	800f558 <_Bfree>
 800d496:	3f01      	subs	r7, #1
 800d498:	2f04      	cmp	r7, #4
 800d49a:	d806      	bhi.n	800d4aa <_strtod_l+0x102>
 800d49c:	e8df f007 	tbb	[pc, r7]
 800d4a0:	1714030a 	.word	0x1714030a
 800d4a4:	0a          	.byte	0x0a
 800d4a5:	00          	.byte	0x00
 800d4a6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d4aa:	0728      	lsls	r0, r5, #28
 800d4ac:	d5c0      	bpl.n	800d430 <_strtod_l+0x88>
 800d4ae:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d4b2:	e7bd      	b.n	800d430 <_strtod_l+0x88>
 800d4b4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d4b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d4ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d4be:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d4c2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d4c6:	e7f0      	b.n	800d4aa <_strtod_l+0x102>
 800d4c8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d64c <_strtod_l+0x2a4>
 800d4cc:	e7ed      	b.n	800d4aa <_strtod_l+0x102>
 800d4ce:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d4d2:	f04f 3aff 	mov.w	sl, #4294967295
 800d4d6:	e7e8      	b.n	800d4aa <_strtod_l+0x102>
 800d4d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4da:	1c5a      	adds	r2, r3, #1
 800d4dc:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4de:	785b      	ldrb	r3, [r3, #1]
 800d4e0:	2b30      	cmp	r3, #48	; 0x30
 800d4e2:	d0f9      	beq.n	800d4d8 <_strtod_l+0x130>
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d0a3      	beq.n	800d430 <_strtod_l+0x88>
 800d4e8:	2301      	movs	r3, #1
 800d4ea:	f04f 0900 	mov.w	r9, #0
 800d4ee:	9304      	str	r3, [sp, #16]
 800d4f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4f2:	9308      	str	r3, [sp, #32]
 800d4f4:	f8cd 901c 	str.w	r9, [sp, #28]
 800d4f8:	464f      	mov	r7, r9
 800d4fa:	220a      	movs	r2, #10
 800d4fc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d4fe:	7806      	ldrb	r6, [r0, #0]
 800d500:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d504:	b2d9      	uxtb	r1, r3
 800d506:	2909      	cmp	r1, #9
 800d508:	d92a      	bls.n	800d560 <_strtod_l+0x1b8>
 800d50a:	9905      	ldr	r1, [sp, #20]
 800d50c:	462a      	mov	r2, r5
 800d50e:	f002 ff0f 	bl	8010330 <strncmp>
 800d512:	b398      	cbz	r0, 800d57c <_strtod_l+0x1d4>
 800d514:	2000      	movs	r0, #0
 800d516:	4632      	mov	r2, r6
 800d518:	463d      	mov	r5, r7
 800d51a:	9005      	str	r0, [sp, #20]
 800d51c:	4603      	mov	r3, r0
 800d51e:	2a65      	cmp	r2, #101	; 0x65
 800d520:	d001      	beq.n	800d526 <_strtod_l+0x17e>
 800d522:	2a45      	cmp	r2, #69	; 0x45
 800d524:	d118      	bne.n	800d558 <_strtod_l+0x1b0>
 800d526:	b91d      	cbnz	r5, 800d530 <_strtod_l+0x188>
 800d528:	9a04      	ldr	r2, [sp, #16]
 800d52a:	4302      	orrs	r2, r0
 800d52c:	d09e      	beq.n	800d46c <_strtod_l+0xc4>
 800d52e:	2500      	movs	r5, #0
 800d530:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d534:	f108 0201 	add.w	r2, r8, #1
 800d538:	9217      	str	r2, [sp, #92]	; 0x5c
 800d53a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d53e:	2a2b      	cmp	r2, #43	; 0x2b
 800d540:	d075      	beq.n	800d62e <_strtod_l+0x286>
 800d542:	2a2d      	cmp	r2, #45	; 0x2d
 800d544:	d07b      	beq.n	800d63e <_strtod_l+0x296>
 800d546:	f04f 0c00 	mov.w	ip, #0
 800d54a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d54e:	2909      	cmp	r1, #9
 800d550:	f240 8082 	bls.w	800d658 <_strtod_l+0x2b0>
 800d554:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d558:	2600      	movs	r6, #0
 800d55a:	e09d      	b.n	800d698 <_strtod_l+0x2f0>
 800d55c:	2300      	movs	r3, #0
 800d55e:	e7c4      	b.n	800d4ea <_strtod_l+0x142>
 800d560:	2f08      	cmp	r7, #8
 800d562:	bfd8      	it	le
 800d564:	9907      	ldrle	r1, [sp, #28]
 800d566:	f100 0001 	add.w	r0, r0, #1
 800d56a:	bfda      	itte	le
 800d56c:	fb02 3301 	mlale	r3, r2, r1, r3
 800d570:	9307      	strle	r3, [sp, #28]
 800d572:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d576:	3701      	adds	r7, #1
 800d578:	9017      	str	r0, [sp, #92]	; 0x5c
 800d57a:	e7bf      	b.n	800d4fc <_strtod_l+0x154>
 800d57c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d57e:	195a      	adds	r2, r3, r5
 800d580:	9217      	str	r2, [sp, #92]	; 0x5c
 800d582:	5d5a      	ldrb	r2, [r3, r5]
 800d584:	2f00      	cmp	r7, #0
 800d586:	d037      	beq.n	800d5f8 <_strtod_l+0x250>
 800d588:	9005      	str	r0, [sp, #20]
 800d58a:	463d      	mov	r5, r7
 800d58c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d590:	2b09      	cmp	r3, #9
 800d592:	d912      	bls.n	800d5ba <_strtod_l+0x212>
 800d594:	2301      	movs	r3, #1
 800d596:	e7c2      	b.n	800d51e <_strtod_l+0x176>
 800d598:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d59a:	1c5a      	adds	r2, r3, #1
 800d59c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d59e:	785a      	ldrb	r2, [r3, #1]
 800d5a0:	3001      	adds	r0, #1
 800d5a2:	2a30      	cmp	r2, #48	; 0x30
 800d5a4:	d0f8      	beq.n	800d598 <_strtod_l+0x1f0>
 800d5a6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d5aa:	2b08      	cmp	r3, #8
 800d5ac:	f200 84d9 	bhi.w	800df62 <_strtod_l+0xbba>
 800d5b0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d5b2:	9005      	str	r0, [sp, #20]
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	9308      	str	r3, [sp, #32]
 800d5b8:	4605      	mov	r5, r0
 800d5ba:	3a30      	subs	r2, #48	; 0x30
 800d5bc:	f100 0301 	add.w	r3, r0, #1
 800d5c0:	d014      	beq.n	800d5ec <_strtod_l+0x244>
 800d5c2:	9905      	ldr	r1, [sp, #20]
 800d5c4:	4419      	add	r1, r3
 800d5c6:	9105      	str	r1, [sp, #20]
 800d5c8:	462b      	mov	r3, r5
 800d5ca:	eb00 0e05 	add.w	lr, r0, r5
 800d5ce:	210a      	movs	r1, #10
 800d5d0:	4573      	cmp	r3, lr
 800d5d2:	d113      	bne.n	800d5fc <_strtod_l+0x254>
 800d5d4:	182b      	adds	r3, r5, r0
 800d5d6:	2b08      	cmp	r3, #8
 800d5d8:	f105 0501 	add.w	r5, r5, #1
 800d5dc:	4405      	add	r5, r0
 800d5de:	dc1c      	bgt.n	800d61a <_strtod_l+0x272>
 800d5e0:	9907      	ldr	r1, [sp, #28]
 800d5e2:	230a      	movs	r3, #10
 800d5e4:	fb03 2301 	mla	r3, r3, r1, r2
 800d5e8:	9307      	str	r3, [sp, #28]
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5ee:	1c51      	adds	r1, r2, #1
 800d5f0:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5f2:	7852      	ldrb	r2, [r2, #1]
 800d5f4:	4618      	mov	r0, r3
 800d5f6:	e7c9      	b.n	800d58c <_strtod_l+0x1e4>
 800d5f8:	4638      	mov	r0, r7
 800d5fa:	e7d2      	b.n	800d5a2 <_strtod_l+0x1fa>
 800d5fc:	2b08      	cmp	r3, #8
 800d5fe:	dc04      	bgt.n	800d60a <_strtod_l+0x262>
 800d600:	9e07      	ldr	r6, [sp, #28]
 800d602:	434e      	muls	r6, r1
 800d604:	9607      	str	r6, [sp, #28]
 800d606:	3301      	adds	r3, #1
 800d608:	e7e2      	b.n	800d5d0 <_strtod_l+0x228>
 800d60a:	f103 0c01 	add.w	ip, r3, #1
 800d60e:	f1bc 0f10 	cmp.w	ip, #16
 800d612:	bfd8      	it	le
 800d614:	fb01 f909 	mulle.w	r9, r1, r9
 800d618:	e7f5      	b.n	800d606 <_strtod_l+0x25e>
 800d61a:	2d10      	cmp	r5, #16
 800d61c:	bfdc      	itt	le
 800d61e:	230a      	movle	r3, #10
 800d620:	fb03 2909 	mlale	r9, r3, r9, r2
 800d624:	e7e1      	b.n	800d5ea <_strtod_l+0x242>
 800d626:	2300      	movs	r3, #0
 800d628:	9305      	str	r3, [sp, #20]
 800d62a:	2301      	movs	r3, #1
 800d62c:	e77c      	b.n	800d528 <_strtod_l+0x180>
 800d62e:	f04f 0c00 	mov.w	ip, #0
 800d632:	f108 0202 	add.w	r2, r8, #2
 800d636:	9217      	str	r2, [sp, #92]	; 0x5c
 800d638:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d63c:	e785      	b.n	800d54a <_strtod_l+0x1a2>
 800d63e:	f04f 0c01 	mov.w	ip, #1
 800d642:	e7f6      	b.n	800d632 <_strtod_l+0x28a>
 800d644:	08012828 	.word	0x08012828
 800d648:	080125e0 	.word	0x080125e0
 800d64c:	7ff00000 	.word	0x7ff00000
 800d650:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d652:	1c51      	adds	r1, r2, #1
 800d654:	9117      	str	r1, [sp, #92]	; 0x5c
 800d656:	7852      	ldrb	r2, [r2, #1]
 800d658:	2a30      	cmp	r2, #48	; 0x30
 800d65a:	d0f9      	beq.n	800d650 <_strtod_l+0x2a8>
 800d65c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d660:	2908      	cmp	r1, #8
 800d662:	f63f af79 	bhi.w	800d558 <_strtod_l+0x1b0>
 800d666:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d66a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d66c:	9206      	str	r2, [sp, #24]
 800d66e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d670:	1c51      	adds	r1, r2, #1
 800d672:	9117      	str	r1, [sp, #92]	; 0x5c
 800d674:	7852      	ldrb	r2, [r2, #1]
 800d676:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d67a:	2e09      	cmp	r6, #9
 800d67c:	d937      	bls.n	800d6ee <_strtod_l+0x346>
 800d67e:	9e06      	ldr	r6, [sp, #24]
 800d680:	1b89      	subs	r1, r1, r6
 800d682:	2908      	cmp	r1, #8
 800d684:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d688:	dc02      	bgt.n	800d690 <_strtod_l+0x2e8>
 800d68a:	4576      	cmp	r6, lr
 800d68c:	bfa8      	it	ge
 800d68e:	4676      	movge	r6, lr
 800d690:	f1bc 0f00 	cmp.w	ip, #0
 800d694:	d000      	beq.n	800d698 <_strtod_l+0x2f0>
 800d696:	4276      	negs	r6, r6
 800d698:	2d00      	cmp	r5, #0
 800d69a:	d14d      	bne.n	800d738 <_strtod_l+0x390>
 800d69c:	9904      	ldr	r1, [sp, #16]
 800d69e:	4301      	orrs	r1, r0
 800d6a0:	f47f aec6 	bne.w	800d430 <_strtod_l+0x88>
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f47f aee1 	bne.w	800d46c <_strtod_l+0xc4>
 800d6aa:	2a69      	cmp	r2, #105	; 0x69
 800d6ac:	d027      	beq.n	800d6fe <_strtod_l+0x356>
 800d6ae:	dc24      	bgt.n	800d6fa <_strtod_l+0x352>
 800d6b0:	2a49      	cmp	r2, #73	; 0x49
 800d6b2:	d024      	beq.n	800d6fe <_strtod_l+0x356>
 800d6b4:	2a4e      	cmp	r2, #78	; 0x4e
 800d6b6:	f47f aed9 	bne.w	800d46c <_strtod_l+0xc4>
 800d6ba:	499f      	ldr	r1, [pc, #636]	; (800d938 <_strtod_l+0x590>)
 800d6bc:	a817      	add	r0, sp, #92	; 0x5c
 800d6be:	f001 fe3d 	bl	800f33c <__match>
 800d6c2:	2800      	cmp	r0, #0
 800d6c4:	f43f aed2 	beq.w	800d46c <_strtod_l+0xc4>
 800d6c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6ca:	781b      	ldrb	r3, [r3, #0]
 800d6cc:	2b28      	cmp	r3, #40	; 0x28
 800d6ce:	d12d      	bne.n	800d72c <_strtod_l+0x384>
 800d6d0:	499a      	ldr	r1, [pc, #616]	; (800d93c <_strtod_l+0x594>)
 800d6d2:	aa1a      	add	r2, sp, #104	; 0x68
 800d6d4:	a817      	add	r0, sp, #92	; 0x5c
 800d6d6:	f001 fe45 	bl	800f364 <__hexnan>
 800d6da:	2805      	cmp	r0, #5
 800d6dc:	d126      	bne.n	800d72c <_strtod_l+0x384>
 800d6de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6e0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d6e4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d6e8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d6ec:	e6a0      	b.n	800d430 <_strtod_l+0x88>
 800d6ee:	210a      	movs	r1, #10
 800d6f0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d6f4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d6f8:	e7b9      	b.n	800d66e <_strtod_l+0x2c6>
 800d6fa:	2a6e      	cmp	r2, #110	; 0x6e
 800d6fc:	e7db      	b.n	800d6b6 <_strtod_l+0x30e>
 800d6fe:	4990      	ldr	r1, [pc, #576]	; (800d940 <_strtod_l+0x598>)
 800d700:	a817      	add	r0, sp, #92	; 0x5c
 800d702:	f001 fe1b 	bl	800f33c <__match>
 800d706:	2800      	cmp	r0, #0
 800d708:	f43f aeb0 	beq.w	800d46c <_strtod_l+0xc4>
 800d70c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d70e:	498d      	ldr	r1, [pc, #564]	; (800d944 <_strtod_l+0x59c>)
 800d710:	3b01      	subs	r3, #1
 800d712:	a817      	add	r0, sp, #92	; 0x5c
 800d714:	9317      	str	r3, [sp, #92]	; 0x5c
 800d716:	f001 fe11 	bl	800f33c <__match>
 800d71a:	b910      	cbnz	r0, 800d722 <_strtod_l+0x37a>
 800d71c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d71e:	3301      	adds	r3, #1
 800d720:	9317      	str	r3, [sp, #92]	; 0x5c
 800d722:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d954 <_strtod_l+0x5ac>
 800d726:	f04f 0a00 	mov.w	sl, #0
 800d72a:	e681      	b.n	800d430 <_strtod_l+0x88>
 800d72c:	4886      	ldr	r0, [pc, #536]	; (800d948 <_strtod_l+0x5a0>)
 800d72e:	f002 fde7 	bl	8010300 <nan>
 800d732:	ec5b ab10 	vmov	sl, fp, d0
 800d736:	e67b      	b.n	800d430 <_strtod_l+0x88>
 800d738:	9b05      	ldr	r3, [sp, #20]
 800d73a:	9807      	ldr	r0, [sp, #28]
 800d73c:	1af3      	subs	r3, r6, r3
 800d73e:	2f00      	cmp	r7, #0
 800d740:	bf08      	it	eq
 800d742:	462f      	moveq	r7, r5
 800d744:	2d10      	cmp	r5, #16
 800d746:	9306      	str	r3, [sp, #24]
 800d748:	46a8      	mov	r8, r5
 800d74a:	bfa8      	it	ge
 800d74c:	f04f 0810 	movge.w	r8, #16
 800d750:	f7f2 fee0 	bl	8000514 <__aeabi_ui2d>
 800d754:	2d09      	cmp	r5, #9
 800d756:	4682      	mov	sl, r0
 800d758:	468b      	mov	fp, r1
 800d75a:	dd13      	ble.n	800d784 <_strtod_l+0x3dc>
 800d75c:	4b7b      	ldr	r3, [pc, #492]	; (800d94c <_strtod_l+0x5a4>)
 800d75e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d762:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d766:	f7f2 ff4f 	bl	8000608 <__aeabi_dmul>
 800d76a:	4682      	mov	sl, r0
 800d76c:	4648      	mov	r0, r9
 800d76e:	468b      	mov	fp, r1
 800d770:	f7f2 fed0 	bl	8000514 <__aeabi_ui2d>
 800d774:	4602      	mov	r2, r0
 800d776:	460b      	mov	r3, r1
 800d778:	4650      	mov	r0, sl
 800d77a:	4659      	mov	r1, fp
 800d77c:	f7f2 fd8e 	bl	800029c <__adddf3>
 800d780:	4682      	mov	sl, r0
 800d782:	468b      	mov	fp, r1
 800d784:	2d0f      	cmp	r5, #15
 800d786:	dc38      	bgt.n	800d7fa <_strtod_l+0x452>
 800d788:	9b06      	ldr	r3, [sp, #24]
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	f43f ae50 	beq.w	800d430 <_strtod_l+0x88>
 800d790:	dd24      	ble.n	800d7dc <_strtod_l+0x434>
 800d792:	2b16      	cmp	r3, #22
 800d794:	dc0b      	bgt.n	800d7ae <_strtod_l+0x406>
 800d796:	496d      	ldr	r1, [pc, #436]	; (800d94c <_strtod_l+0x5a4>)
 800d798:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d79c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7a0:	4652      	mov	r2, sl
 800d7a2:	465b      	mov	r3, fp
 800d7a4:	f7f2 ff30 	bl	8000608 <__aeabi_dmul>
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	e640      	b.n	800d430 <_strtod_l+0x88>
 800d7ae:	9a06      	ldr	r2, [sp, #24]
 800d7b0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d7b4:	4293      	cmp	r3, r2
 800d7b6:	db20      	blt.n	800d7fa <_strtod_l+0x452>
 800d7b8:	4c64      	ldr	r4, [pc, #400]	; (800d94c <_strtod_l+0x5a4>)
 800d7ba:	f1c5 050f 	rsb	r5, r5, #15
 800d7be:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d7c2:	4652      	mov	r2, sl
 800d7c4:	465b      	mov	r3, fp
 800d7c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7ca:	f7f2 ff1d 	bl	8000608 <__aeabi_dmul>
 800d7ce:	9b06      	ldr	r3, [sp, #24]
 800d7d0:	1b5d      	subs	r5, r3, r5
 800d7d2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d7d6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d7da:	e7e3      	b.n	800d7a4 <_strtod_l+0x3fc>
 800d7dc:	9b06      	ldr	r3, [sp, #24]
 800d7de:	3316      	adds	r3, #22
 800d7e0:	db0b      	blt.n	800d7fa <_strtod_l+0x452>
 800d7e2:	9b05      	ldr	r3, [sp, #20]
 800d7e4:	1b9e      	subs	r6, r3, r6
 800d7e6:	4b59      	ldr	r3, [pc, #356]	; (800d94c <_strtod_l+0x5a4>)
 800d7e8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d7ec:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7f0:	4650      	mov	r0, sl
 800d7f2:	4659      	mov	r1, fp
 800d7f4:	f7f3 f832 	bl	800085c <__aeabi_ddiv>
 800d7f8:	e7d6      	b.n	800d7a8 <_strtod_l+0x400>
 800d7fa:	9b06      	ldr	r3, [sp, #24]
 800d7fc:	eba5 0808 	sub.w	r8, r5, r8
 800d800:	4498      	add	r8, r3
 800d802:	f1b8 0f00 	cmp.w	r8, #0
 800d806:	dd74      	ble.n	800d8f2 <_strtod_l+0x54a>
 800d808:	f018 030f 	ands.w	r3, r8, #15
 800d80c:	d00a      	beq.n	800d824 <_strtod_l+0x47c>
 800d80e:	494f      	ldr	r1, [pc, #316]	; (800d94c <_strtod_l+0x5a4>)
 800d810:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d814:	4652      	mov	r2, sl
 800d816:	465b      	mov	r3, fp
 800d818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d81c:	f7f2 fef4 	bl	8000608 <__aeabi_dmul>
 800d820:	4682      	mov	sl, r0
 800d822:	468b      	mov	fp, r1
 800d824:	f038 080f 	bics.w	r8, r8, #15
 800d828:	d04f      	beq.n	800d8ca <_strtod_l+0x522>
 800d82a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d82e:	dd22      	ble.n	800d876 <_strtod_l+0x4ce>
 800d830:	2500      	movs	r5, #0
 800d832:	462e      	mov	r6, r5
 800d834:	9507      	str	r5, [sp, #28]
 800d836:	9505      	str	r5, [sp, #20]
 800d838:	2322      	movs	r3, #34	; 0x22
 800d83a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d954 <_strtod_l+0x5ac>
 800d83e:	6023      	str	r3, [r4, #0]
 800d840:	f04f 0a00 	mov.w	sl, #0
 800d844:	9b07      	ldr	r3, [sp, #28]
 800d846:	2b00      	cmp	r3, #0
 800d848:	f43f adf2 	beq.w	800d430 <_strtod_l+0x88>
 800d84c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d84e:	4620      	mov	r0, r4
 800d850:	f001 fe82 	bl	800f558 <_Bfree>
 800d854:	9905      	ldr	r1, [sp, #20]
 800d856:	4620      	mov	r0, r4
 800d858:	f001 fe7e 	bl	800f558 <_Bfree>
 800d85c:	4631      	mov	r1, r6
 800d85e:	4620      	mov	r0, r4
 800d860:	f001 fe7a 	bl	800f558 <_Bfree>
 800d864:	9907      	ldr	r1, [sp, #28]
 800d866:	4620      	mov	r0, r4
 800d868:	f001 fe76 	bl	800f558 <_Bfree>
 800d86c:	4629      	mov	r1, r5
 800d86e:	4620      	mov	r0, r4
 800d870:	f001 fe72 	bl	800f558 <_Bfree>
 800d874:	e5dc      	b.n	800d430 <_strtod_l+0x88>
 800d876:	4b36      	ldr	r3, [pc, #216]	; (800d950 <_strtod_l+0x5a8>)
 800d878:	9304      	str	r3, [sp, #16]
 800d87a:	2300      	movs	r3, #0
 800d87c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d880:	4650      	mov	r0, sl
 800d882:	4659      	mov	r1, fp
 800d884:	4699      	mov	r9, r3
 800d886:	f1b8 0f01 	cmp.w	r8, #1
 800d88a:	dc21      	bgt.n	800d8d0 <_strtod_l+0x528>
 800d88c:	b10b      	cbz	r3, 800d892 <_strtod_l+0x4ea>
 800d88e:	4682      	mov	sl, r0
 800d890:	468b      	mov	fp, r1
 800d892:	4b2f      	ldr	r3, [pc, #188]	; (800d950 <_strtod_l+0x5a8>)
 800d894:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d898:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d89c:	4652      	mov	r2, sl
 800d89e:	465b      	mov	r3, fp
 800d8a0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d8a4:	f7f2 feb0 	bl	8000608 <__aeabi_dmul>
 800d8a8:	4b2a      	ldr	r3, [pc, #168]	; (800d954 <_strtod_l+0x5ac>)
 800d8aa:	460a      	mov	r2, r1
 800d8ac:	400b      	ands	r3, r1
 800d8ae:	492a      	ldr	r1, [pc, #168]	; (800d958 <_strtod_l+0x5b0>)
 800d8b0:	428b      	cmp	r3, r1
 800d8b2:	4682      	mov	sl, r0
 800d8b4:	d8bc      	bhi.n	800d830 <_strtod_l+0x488>
 800d8b6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d8ba:	428b      	cmp	r3, r1
 800d8bc:	bf86      	itte	hi
 800d8be:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d95c <_strtod_l+0x5b4>
 800d8c2:	f04f 3aff 	movhi.w	sl, #4294967295
 800d8c6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	9304      	str	r3, [sp, #16]
 800d8ce:	e084      	b.n	800d9da <_strtod_l+0x632>
 800d8d0:	f018 0f01 	tst.w	r8, #1
 800d8d4:	d005      	beq.n	800d8e2 <_strtod_l+0x53a>
 800d8d6:	9b04      	ldr	r3, [sp, #16]
 800d8d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8dc:	f7f2 fe94 	bl	8000608 <__aeabi_dmul>
 800d8e0:	2301      	movs	r3, #1
 800d8e2:	9a04      	ldr	r2, [sp, #16]
 800d8e4:	3208      	adds	r2, #8
 800d8e6:	f109 0901 	add.w	r9, r9, #1
 800d8ea:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d8ee:	9204      	str	r2, [sp, #16]
 800d8f0:	e7c9      	b.n	800d886 <_strtod_l+0x4de>
 800d8f2:	d0ea      	beq.n	800d8ca <_strtod_l+0x522>
 800d8f4:	f1c8 0800 	rsb	r8, r8, #0
 800d8f8:	f018 020f 	ands.w	r2, r8, #15
 800d8fc:	d00a      	beq.n	800d914 <_strtod_l+0x56c>
 800d8fe:	4b13      	ldr	r3, [pc, #76]	; (800d94c <_strtod_l+0x5a4>)
 800d900:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90c:	f7f2 ffa6 	bl	800085c <__aeabi_ddiv>
 800d910:	4682      	mov	sl, r0
 800d912:	468b      	mov	fp, r1
 800d914:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d918:	d0d7      	beq.n	800d8ca <_strtod_l+0x522>
 800d91a:	f1b8 0f1f 	cmp.w	r8, #31
 800d91e:	dd1f      	ble.n	800d960 <_strtod_l+0x5b8>
 800d920:	2500      	movs	r5, #0
 800d922:	462e      	mov	r6, r5
 800d924:	9507      	str	r5, [sp, #28]
 800d926:	9505      	str	r5, [sp, #20]
 800d928:	2322      	movs	r3, #34	; 0x22
 800d92a:	f04f 0a00 	mov.w	sl, #0
 800d92e:	f04f 0b00 	mov.w	fp, #0
 800d932:	6023      	str	r3, [r4, #0]
 800d934:	e786      	b.n	800d844 <_strtod_l+0x49c>
 800d936:	bf00      	nop
 800d938:	080125b1 	.word	0x080125b1
 800d93c:	080125f4 	.word	0x080125f4
 800d940:	080125a9 	.word	0x080125a9
 800d944:	08012734 	.word	0x08012734
 800d948:	080129e0 	.word	0x080129e0
 800d94c:	080128c0 	.word	0x080128c0
 800d950:	08012898 	.word	0x08012898
 800d954:	7ff00000 	.word	0x7ff00000
 800d958:	7ca00000 	.word	0x7ca00000
 800d95c:	7fefffff 	.word	0x7fefffff
 800d960:	f018 0310 	ands.w	r3, r8, #16
 800d964:	bf18      	it	ne
 800d966:	236a      	movne	r3, #106	; 0x6a
 800d968:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dd18 <_strtod_l+0x970>
 800d96c:	9304      	str	r3, [sp, #16]
 800d96e:	4650      	mov	r0, sl
 800d970:	4659      	mov	r1, fp
 800d972:	2300      	movs	r3, #0
 800d974:	f018 0f01 	tst.w	r8, #1
 800d978:	d004      	beq.n	800d984 <_strtod_l+0x5dc>
 800d97a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d97e:	f7f2 fe43 	bl	8000608 <__aeabi_dmul>
 800d982:	2301      	movs	r3, #1
 800d984:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d988:	f109 0908 	add.w	r9, r9, #8
 800d98c:	d1f2      	bne.n	800d974 <_strtod_l+0x5cc>
 800d98e:	b10b      	cbz	r3, 800d994 <_strtod_l+0x5ec>
 800d990:	4682      	mov	sl, r0
 800d992:	468b      	mov	fp, r1
 800d994:	9b04      	ldr	r3, [sp, #16]
 800d996:	b1c3      	cbz	r3, 800d9ca <_strtod_l+0x622>
 800d998:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d99c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	4659      	mov	r1, fp
 800d9a4:	dd11      	ble.n	800d9ca <_strtod_l+0x622>
 800d9a6:	2b1f      	cmp	r3, #31
 800d9a8:	f340 8124 	ble.w	800dbf4 <_strtod_l+0x84c>
 800d9ac:	2b34      	cmp	r3, #52	; 0x34
 800d9ae:	bfde      	ittt	le
 800d9b0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d9b4:	f04f 33ff 	movle.w	r3, #4294967295
 800d9b8:	fa03 f202 	lslle.w	r2, r3, r2
 800d9bc:	f04f 0a00 	mov.w	sl, #0
 800d9c0:	bfcc      	ite	gt
 800d9c2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d9c6:	ea02 0b01 	andle.w	fp, r2, r1
 800d9ca:	2200      	movs	r2, #0
 800d9cc:	2300      	movs	r3, #0
 800d9ce:	4650      	mov	r0, sl
 800d9d0:	4659      	mov	r1, fp
 800d9d2:	f7f3 f881 	bl	8000ad8 <__aeabi_dcmpeq>
 800d9d6:	2800      	cmp	r0, #0
 800d9d8:	d1a2      	bne.n	800d920 <_strtod_l+0x578>
 800d9da:	9b07      	ldr	r3, [sp, #28]
 800d9dc:	9300      	str	r3, [sp, #0]
 800d9de:	9908      	ldr	r1, [sp, #32]
 800d9e0:	462b      	mov	r3, r5
 800d9e2:	463a      	mov	r2, r7
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f001 fe1f 	bl	800f628 <__s2b>
 800d9ea:	9007      	str	r0, [sp, #28]
 800d9ec:	2800      	cmp	r0, #0
 800d9ee:	f43f af1f 	beq.w	800d830 <_strtod_l+0x488>
 800d9f2:	9b05      	ldr	r3, [sp, #20]
 800d9f4:	1b9e      	subs	r6, r3, r6
 800d9f6:	9b06      	ldr	r3, [sp, #24]
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	bfb4      	ite	lt
 800d9fc:	4633      	movlt	r3, r6
 800d9fe:	2300      	movge	r3, #0
 800da00:	930c      	str	r3, [sp, #48]	; 0x30
 800da02:	9b06      	ldr	r3, [sp, #24]
 800da04:	2500      	movs	r5, #0
 800da06:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800da0a:	9312      	str	r3, [sp, #72]	; 0x48
 800da0c:	462e      	mov	r6, r5
 800da0e:	9b07      	ldr	r3, [sp, #28]
 800da10:	4620      	mov	r0, r4
 800da12:	6859      	ldr	r1, [r3, #4]
 800da14:	f001 fd60 	bl	800f4d8 <_Balloc>
 800da18:	9005      	str	r0, [sp, #20]
 800da1a:	2800      	cmp	r0, #0
 800da1c:	f43f af0c 	beq.w	800d838 <_strtod_l+0x490>
 800da20:	9b07      	ldr	r3, [sp, #28]
 800da22:	691a      	ldr	r2, [r3, #16]
 800da24:	3202      	adds	r2, #2
 800da26:	f103 010c 	add.w	r1, r3, #12
 800da2a:	0092      	lsls	r2, r2, #2
 800da2c:	300c      	adds	r0, #12
 800da2e:	f7fe fde7 	bl	800c600 <memcpy>
 800da32:	ec4b ab10 	vmov	d0, sl, fp
 800da36:	aa1a      	add	r2, sp, #104	; 0x68
 800da38:	a919      	add	r1, sp, #100	; 0x64
 800da3a:	4620      	mov	r0, r4
 800da3c:	f002 f93a 	bl	800fcb4 <__d2b>
 800da40:	ec4b ab18 	vmov	d8, sl, fp
 800da44:	9018      	str	r0, [sp, #96]	; 0x60
 800da46:	2800      	cmp	r0, #0
 800da48:	f43f aef6 	beq.w	800d838 <_strtod_l+0x490>
 800da4c:	2101      	movs	r1, #1
 800da4e:	4620      	mov	r0, r4
 800da50:	f001 fe84 	bl	800f75c <__i2b>
 800da54:	4606      	mov	r6, r0
 800da56:	2800      	cmp	r0, #0
 800da58:	f43f aeee 	beq.w	800d838 <_strtod_l+0x490>
 800da5c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da5e:	9904      	ldr	r1, [sp, #16]
 800da60:	2b00      	cmp	r3, #0
 800da62:	bfab      	itete	ge
 800da64:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800da66:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800da68:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800da6a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800da6e:	bfac      	ite	ge
 800da70:	eb03 0902 	addge.w	r9, r3, r2
 800da74:	1ad7      	sublt	r7, r2, r3
 800da76:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da78:	eba3 0801 	sub.w	r8, r3, r1
 800da7c:	4490      	add	r8, r2
 800da7e:	4ba1      	ldr	r3, [pc, #644]	; (800dd04 <_strtod_l+0x95c>)
 800da80:	f108 38ff 	add.w	r8, r8, #4294967295
 800da84:	4598      	cmp	r8, r3
 800da86:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da8a:	f280 80c7 	bge.w	800dc1c <_strtod_l+0x874>
 800da8e:	eba3 0308 	sub.w	r3, r3, r8
 800da92:	2b1f      	cmp	r3, #31
 800da94:	eba2 0203 	sub.w	r2, r2, r3
 800da98:	f04f 0101 	mov.w	r1, #1
 800da9c:	f300 80b1 	bgt.w	800dc02 <_strtod_l+0x85a>
 800daa0:	fa01 f303 	lsl.w	r3, r1, r3
 800daa4:	930d      	str	r3, [sp, #52]	; 0x34
 800daa6:	2300      	movs	r3, #0
 800daa8:	9308      	str	r3, [sp, #32]
 800daaa:	eb09 0802 	add.w	r8, r9, r2
 800daae:	9b04      	ldr	r3, [sp, #16]
 800dab0:	45c1      	cmp	r9, r8
 800dab2:	4417      	add	r7, r2
 800dab4:	441f      	add	r7, r3
 800dab6:	464b      	mov	r3, r9
 800dab8:	bfa8      	it	ge
 800daba:	4643      	movge	r3, r8
 800dabc:	42bb      	cmp	r3, r7
 800dabe:	bfa8      	it	ge
 800dac0:	463b      	movge	r3, r7
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	bfc2      	ittt	gt
 800dac6:	eba8 0803 	subgt.w	r8, r8, r3
 800daca:	1aff      	subgt	r7, r7, r3
 800dacc:	eba9 0903 	subgt.w	r9, r9, r3
 800dad0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	dd17      	ble.n	800db06 <_strtod_l+0x75e>
 800dad6:	4631      	mov	r1, r6
 800dad8:	461a      	mov	r2, r3
 800dada:	4620      	mov	r0, r4
 800dadc:	f001 fefe 	bl	800f8dc <__pow5mult>
 800dae0:	4606      	mov	r6, r0
 800dae2:	2800      	cmp	r0, #0
 800dae4:	f43f aea8 	beq.w	800d838 <_strtod_l+0x490>
 800dae8:	4601      	mov	r1, r0
 800daea:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800daec:	4620      	mov	r0, r4
 800daee:	f001 fe4b 	bl	800f788 <__multiply>
 800daf2:	900b      	str	r0, [sp, #44]	; 0x2c
 800daf4:	2800      	cmp	r0, #0
 800daf6:	f43f ae9f 	beq.w	800d838 <_strtod_l+0x490>
 800dafa:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dafc:	4620      	mov	r0, r4
 800dafe:	f001 fd2b 	bl	800f558 <_Bfree>
 800db02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db04:	9318      	str	r3, [sp, #96]	; 0x60
 800db06:	f1b8 0f00 	cmp.w	r8, #0
 800db0a:	f300 808c 	bgt.w	800dc26 <_strtod_l+0x87e>
 800db0e:	9b06      	ldr	r3, [sp, #24]
 800db10:	2b00      	cmp	r3, #0
 800db12:	dd08      	ble.n	800db26 <_strtod_l+0x77e>
 800db14:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800db16:	9905      	ldr	r1, [sp, #20]
 800db18:	4620      	mov	r0, r4
 800db1a:	f001 fedf 	bl	800f8dc <__pow5mult>
 800db1e:	9005      	str	r0, [sp, #20]
 800db20:	2800      	cmp	r0, #0
 800db22:	f43f ae89 	beq.w	800d838 <_strtod_l+0x490>
 800db26:	2f00      	cmp	r7, #0
 800db28:	dd08      	ble.n	800db3c <_strtod_l+0x794>
 800db2a:	9905      	ldr	r1, [sp, #20]
 800db2c:	463a      	mov	r2, r7
 800db2e:	4620      	mov	r0, r4
 800db30:	f001 ff2e 	bl	800f990 <__lshift>
 800db34:	9005      	str	r0, [sp, #20]
 800db36:	2800      	cmp	r0, #0
 800db38:	f43f ae7e 	beq.w	800d838 <_strtod_l+0x490>
 800db3c:	f1b9 0f00 	cmp.w	r9, #0
 800db40:	dd08      	ble.n	800db54 <_strtod_l+0x7ac>
 800db42:	4631      	mov	r1, r6
 800db44:	464a      	mov	r2, r9
 800db46:	4620      	mov	r0, r4
 800db48:	f001 ff22 	bl	800f990 <__lshift>
 800db4c:	4606      	mov	r6, r0
 800db4e:	2800      	cmp	r0, #0
 800db50:	f43f ae72 	beq.w	800d838 <_strtod_l+0x490>
 800db54:	9a05      	ldr	r2, [sp, #20]
 800db56:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db58:	4620      	mov	r0, r4
 800db5a:	f001 ffa5 	bl	800faa8 <__mdiff>
 800db5e:	4605      	mov	r5, r0
 800db60:	2800      	cmp	r0, #0
 800db62:	f43f ae69 	beq.w	800d838 <_strtod_l+0x490>
 800db66:	68c3      	ldr	r3, [r0, #12]
 800db68:	930b      	str	r3, [sp, #44]	; 0x2c
 800db6a:	2300      	movs	r3, #0
 800db6c:	60c3      	str	r3, [r0, #12]
 800db6e:	4631      	mov	r1, r6
 800db70:	f001 ff7e 	bl	800fa70 <__mcmp>
 800db74:	2800      	cmp	r0, #0
 800db76:	da60      	bge.n	800dc3a <_strtod_l+0x892>
 800db78:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db7a:	ea53 030a 	orrs.w	r3, r3, sl
 800db7e:	f040 8082 	bne.w	800dc86 <_strtod_l+0x8de>
 800db82:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db86:	2b00      	cmp	r3, #0
 800db88:	d17d      	bne.n	800dc86 <_strtod_l+0x8de>
 800db8a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db8e:	0d1b      	lsrs	r3, r3, #20
 800db90:	051b      	lsls	r3, r3, #20
 800db92:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db96:	d976      	bls.n	800dc86 <_strtod_l+0x8de>
 800db98:	696b      	ldr	r3, [r5, #20]
 800db9a:	b913      	cbnz	r3, 800dba2 <_strtod_l+0x7fa>
 800db9c:	692b      	ldr	r3, [r5, #16]
 800db9e:	2b01      	cmp	r3, #1
 800dba0:	dd71      	ble.n	800dc86 <_strtod_l+0x8de>
 800dba2:	4629      	mov	r1, r5
 800dba4:	2201      	movs	r2, #1
 800dba6:	4620      	mov	r0, r4
 800dba8:	f001 fef2 	bl	800f990 <__lshift>
 800dbac:	4631      	mov	r1, r6
 800dbae:	4605      	mov	r5, r0
 800dbb0:	f001 ff5e 	bl	800fa70 <__mcmp>
 800dbb4:	2800      	cmp	r0, #0
 800dbb6:	dd66      	ble.n	800dc86 <_strtod_l+0x8de>
 800dbb8:	9904      	ldr	r1, [sp, #16]
 800dbba:	4a53      	ldr	r2, [pc, #332]	; (800dd08 <_strtod_l+0x960>)
 800dbbc:	465b      	mov	r3, fp
 800dbbe:	2900      	cmp	r1, #0
 800dbc0:	f000 8081 	beq.w	800dcc6 <_strtod_l+0x91e>
 800dbc4:	ea02 010b 	and.w	r1, r2, fp
 800dbc8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dbcc:	dc7b      	bgt.n	800dcc6 <_strtod_l+0x91e>
 800dbce:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dbd2:	f77f aea9 	ble.w	800d928 <_strtod_l+0x580>
 800dbd6:	4b4d      	ldr	r3, [pc, #308]	; (800dd0c <_strtod_l+0x964>)
 800dbd8:	4650      	mov	r0, sl
 800dbda:	4659      	mov	r1, fp
 800dbdc:	2200      	movs	r2, #0
 800dbde:	f7f2 fd13 	bl	8000608 <__aeabi_dmul>
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4303      	orrs	r3, r0
 800dbe6:	bf08      	it	eq
 800dbe8:	2322      	moveq	r3, #34	; 0x22
 800dbea:	4682      	mov	sl, r0
 800dbec:	468b      	mov	fp, r1
 800dbee:	bf08      	it	eq
 800dbf0:	6023      	streq	r3, [r4, #0]
 800dbf2:	e62b      	b.n	800d84c <_strtod_l+0x4a4>
 800dbf4:	f04f 32ff 	mov.w	r2, #4294967295
 800dbf8:	fa02 f303 	lsl.w	r3, r2, r3
 800dbfc:	ea03 0a0a 	and.w	sl, r3, sl
 800dc00:	e6e3      	b.n	800d9ca <_strtod_l+0x622>
 800dc02:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dc06:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dc0a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dc0e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dc12:	fa01 f308 	lsl.w	r3, r1, r8
 800dc16:	9308      	str	r3, [sp, #32]
 800dc18:	910d      	str	r1, [sp, #52]	; 0x34
 800dc1a:	e746      	b.n	800daaa <_strtod_l+0x702>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	9308      	str	r3, [sp, #32]
 800dc20:	2301      	movs	r3, #1
 800dc22:	930d      	str	r3, [sp, #52]	; 0x34
 800dc24:	e741      	b.n	800daaa <_strtod_l+0x702>
 800dc26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc28:	4642      	mov	r2, r8
 800dc2a:	4620      	mov	r0, r4
 800dc2c:	f001 feb0 	bl	800f990 <__lshift>
 800dc30:	9018      	str	r0, [sp, #96]	; 0x60
 800dc32:	2800      	cmp	r0, #0
 800dc34:	f47f af6b 	bne.w	800db0e <_strtod_l+0x766>
 800dc38:	e5fe      	b.n	800d838 <_strtod_l+0x490>
 800dc3a:	465f      	mov	r7, fp
 800dc3c:	d16e      	bne.n	800dd1c <_strtod_l+0x974>
 800dc3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc40:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc44:	b342      	cbz	r2, 800dc98 <_strtod_l+0x8f0>
 800dc46:	4a32      	ldr	r2, [pc, #200]	; (800dd10 <_strtod_l+0x968>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d128      	bne.n	800dc9e <_strtod_l+0x8f6>
 800dc4c:	9b04      	ldr	r3, [sp, #16]
 800dc4e:	4651      	mov	r1, sl
 800dc50:	b1eb      	cbz	r3, 800dc8e <_strtod_l+0x8e6>
 800dc52:	4b2d      	ldr	r3, [pc, #180]	; (800dd08 <_strtod_l+0x960>)
 800dc54:	403b      	ands	r3, r7
 800dc56:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc5a:	f04f 32ff 	mov.w	r2, #4294967295
 800dc5e:	d819      	bhi.n	800dc94 <_strtod_l+0x8ec>
 800dc60:	0d1b      	lsrs	r3, r3, #20
 800dc62:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc66:	fa02 f303 	lsl.w	r3, r2, r3
 800dc6a:	4299      	cmp	r1, r3
 800dc6c:	d117      	bne.n	800dc9e <_strtod_l+0x8f6>
 800dc6e:	4b29      	ldr	r3, [pc, #164]	; (800dd14 <_strtod_l+0x96c>)
 800dc70:	429f      	cmp	r7, r3
 800dc72:	d102      	bne.n	800dc7a <_strtod_l+0x8d2>
 800dc74:	3101      	adds	r1, #1
 800dc76:	f43f addf 	beq.w	800d838 <_strtod_l+0x490>
 800dc7a:	4b23      	ldr	r3, [pc, #140]	; (800dd08 <_strtod_l+0x960>)
 800dc7c:	403b      	ands	r3, r7
 800dc7e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dc82:	f04f 0a00 	mov.w	sl, #0
 800dc86:	9b04      	ldr	r3, [sp, #16]
 800dc88:	2b00      	cmp	r3, #0
 800dc8a:	d1a4      	bne.n	800dbd6 <_strtod_l+0x82e>
 800dc8c:	e5de      	b.n	800d84c <_strtod_l+0x4a4>
 800dc8e:	f04f 33ff 	mov.w	r3, #4294967295
 800dc92:	e7ea      	b.n	800dc6a <_strtod_l+0x8c2>
 800dc94:	4613      	mov	r3, r2
 800dc96:	e7e8      	b.n	800dc6a <_strtod_l+0x8c2>
 800dc98:	ea53 030a 	orrs.w	r3, r3, sl
 800dc9c:	d08c      	beq.n	800dbb8 <_strtod_l+0x810>
 800dc9e:	9b08      	ldr	r3, [sp, #32]
 800dca0:	b1db      	cbz	r3, 800dcda <_strtod_l+0x932>
 800dca2:	423b      	tst	r3, r7
 800dca4:	d0ef      	beq.n	800dc86 <_strtod_l+0x8de>
 800dca6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dca8:	9a04      	ldr	r2, [sp, #16]
 800dcaa:	4650      	mov	r0, sl
 800dcac:	4659      	mov	r1, fp
 800dcae:	b1c3      	cbz	r3, 800dce2 <_strtod_l+0x93a>
 800dcb0:	f7ff fb5c 	bl	800d36c <sulp>
 800dcb4:	4602      	mov	r2, r0
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	ec51 0b18 	vmov	r0, r1, d8
 800dcbc:	f7f2 faee 	bl	800029c <__adddf3>
 800dcc0:	4682      	mov	sl, r0
 800dcc2:	468b      	mov	fp, r1
 800dcc4:	e7df      	b.n	800dc86 <_strtod_l+0x8de>
 800dcc6:	4013      	ands	r3, r2
 800dcc8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dccc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dcd0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dcd4:	f04f 3aff 	mov.w	sl, #4294967295
 800dcd8:	e7d5      	b.n	800dc86 <_strtod_l+0x8de>
 800dcda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dcdc:	ea13 0f0a 	tst.w	r3, sl
 800dce0:	e7e0      	b.n	800dca4 <_strtod_l+0x8fc>
 800dce2:	f7ff fb43 	bl	800d36c <sulp>
 800dce6:	4602      	mov	r2, r0
 800dce8:	460b      	mov	r3, r1
 800dcea:	ec51 0b18 	vmov	r0, r1, d8
 800dcee:	f7f2 fad3 	bl	8000298 <__aeabi_dsub>
 800dcf2:	2200      	movs	r2, #0
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4682      	mov	sl, r0
 800dcf8:	468b      	mov	fp, r1
 800dcfa:	f7f2 feed 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcfe:	2800      	cmp	r0, #0
 800dd00:	d0c1      	beq.n	800dc86 <_strtod_l+0x8de>
 800dd02:	e611      	b.n	800d928 <_strtod_l+0x580>
 800dd04:	fffffc02 	.word	0xfffffc02
 800dd08:	7ff00000 	.word	0x7ff00000
 800dd0c:	39500000 	.word	0x39500000
 800dd10:	000fffff 	.word	0x000fffff
 800dd14:	7fefffff 	.word	0x7fefffff
 800dd18:	08012608 	.word	0x08012608
 800dd1c:	4631      	mov	r1, r6
 800dd1e:	4628      	mov	r0, r5
 800dd20:	f002 f824 	bl	800fd6c <__ratio>
 800dd24:	ec59 8b10 	vmov	r8, r9, d0
 800dd28:	ee10 0a10 	vmov	r0, s0
 800dd2c:	2200      	movs	r2, #0
 800dd2e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dd32:	4649      	mov	r1, r9
 800dd34:	f7f2 fee4 	bl	8000b00 <__aeabi_dcmple>
 800dd38:	2800      	cmp	r0, #0
 800dd3a:	d07a      	beq.n	800de32 <_strtod_l+0xa8a>
 800dd3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d04a      	beq.n	800ddd8 <_strtod_l+0xa30>
 800dd42:	4b95      	ldr	r3, [pc, #596]	; (800df98 <_strtod_l+0xbf0>)
 800dd44:	2200      	movs	r2, #0
 800dd46:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd4a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800df98 <_strtod_l+0xbf0>
 800dd4e:	f04f 0800 	mov.w	r8, #0
 800dd52:	4b92      	ldr	r3, [pc, #584]	; (800df9c <_strtod_l+0xbf4>)
 800dd54:	403b      	ands	r3, r7
 800dd56:	930d      	str	r3, [sp, #52]	; 0x34
 800dd58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd5a:	4b91      	ldr	r3, [pc, #580]	; (800dfa0 <_strtod_l+0xbf8>)
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	f040 80b0 	bne.w	800dec2 <_strtod_l+0xb1a>
 800dd62:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd66:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dd6a:	ec4b ab10 	vmov	d0, sl, fp
 800dd6e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd72:	f001 ff23 	bl	800fbbc <__ulp>
 800dd76:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd7a:	ec53 2b10 	vmov	r2, r3, d0
 800dd7e:	f7f2 fc43 	bl	8000608 <__aeabi_dmul>
 800dd82:	4652      	mov	r2, sl
 800dd84:	465b      	mov	r3, fp
 800dd86:	f7f2 fa89 	bl	800029c <__adddf3>
 800dd8a:	460b      	mov	r3, r1
 800dd8c:	4983      	ldr	r1, [pc, #524]	; (800df9c <_strtod_l+0xbf4>)
 800dd8e:	4a85      	ldr	r2, [pc, #532]	; (800dfa4 <_strtod_l+0xbfc>)
 800dd90:	4019      	ands	r1, r3
 800dd92:	4291      	cmp	r1, r2
 800dd94:	4682      	mov	sl, r0
 800dd96:	d960      	bls.n	800de5a <_strtod_l+0xab2>
 800dd98:	ee18 3a90 	vmov	r3, s17
 800dd9c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dda0:	4293      	cmp	r3, r2
 800dda2:	d104      	bne.n	800ddae <_strtod_l+0xa06>
 800dda4:	ee18 3a10 	vmov	r3, s16
 800dda8:	3301      	adds	r3, #1
 800ddaa:	f43f ad45 	beq.w	800d838 <_strtod_l+0x490>
 800ddae:	f8df b200 	ldr.w	fp, [pc, #512]	; 800dfb0 <_strtod_l+0xc08>
 800ddb2:	f04f 3aff 	mov.w	sl, #4294967295
 800ddb6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f001 fbcd 	bl	800f558 <_Bfree>
 800ddbe:	9905      	ldr	r1, [sp, #20]
 800ddc0:	4620      	mov	r0, r4
 800ddc2:	f001 fbc9 	bl	800f558 <_Bfree>
 800ddc6:	4631      	mov	r1, r6
 800ddc8:	4620      	mov	r0, r4
 800ddca:	f001 fbc5 	bl	800f558 <_Bfree>
 800ddce:	4629      	mov	r1, r5
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	f001 fbc1 	bl	800f558 <_Bfree>
 800ddd6:	e61a      	b.n	800da0e <_strtod_l+0x666>
 800ddd8:	f1ba 0f00 	cmp.w	sl, #0
 800dddc:	d11b      	bne.n	800de16 <_strtod_l+0xa6e>
 800ddde:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dde2:	b9f3      	cbnz	r3, 800de22 <_strtod_l+0xa7a>
 800dde4:	4b6c      	ldr	r3, [pc, #432]	; (800df98 <_strtod_l+0xbf0>)
 800dde6:	2200      	movs	r2, #0
 800dde8:	4640      	mov	r0, r8
 800ddea:	4649      	mov	r1, r9
 800ddec:	f7f2 fe7e 	bl	8000aec <__aeabi_dcmplt>
 800ddf0:	b9d0      	cbnz	r0, 800de28 <_strtod_l+0xa80>
 800ddf2:	4640      	mov	r0, r8
 800ddf4:	4649      	mov	r1, r9
 800ddf6:	4b6c      	ldr	r3, [pc, #432]	; (800dfa8 <_strtod_l+0xc00>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f7f2 fc05 	bl	8000608 <__aeabi_dmul>
 800ddfe:	4680      	mov	r8, r0
 800de00:	4689      	mov	r9, r1
 800de02:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800de06:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800de0a:	9315      	str	r3, [sp, #84]	; 0x54
 800de0c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800de10:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800de14:	e79d      	b.n	800dd52 <_strtod_l+0x9aa>
 800de16:	f1ba 0f01 	cmp.w	sl, #1
 800de1a:	d102      	bne.n	800de22 <_strtod_l+0xa7a>
 800de1c:	2f00      	cmp	r7, #0
 800de1e:	f43f ad83 	beq.w	800d928 <_strtod_l+0x580>
 800de22:	4b62      	ldr	r3, [pc, #392]	; (800dfac <_strtod_l+0xc04>)
 800de24:	2200      	movs	r2, #0
 800de26:	e78e      	b.n	800dd46 <_strtod_l+0x99e>
 800de28:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800dfa8 <_strtod_l+0xc00>
 800de2c:	f04f 0800 	mov.w	r8, #0
 800de30:	e7e7      	b.n	800de02 <_strtod_l+0xa5a>
 800de32:	4b5d      	ldr	r3, [pc, #372]	; (800dfa8 <_strtod_l+0xc00>)
 800de34:	4640      	mov	r0, r8
 800de36:	4649      	mov	r1, r9
 800de38:	2200      	movs	r2, #0
 800de3a:	f7f2 fbe5 	bl	8000608 <__aeabi_dmul>
 800de3e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de40:	4680      	mov	r8, r0
 800de42:	4689      	mov	r9, r1
 800de44:	b933      	cbnz	r3, 800de54 <_strtod_l+0xaac>
 800de46:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de4a:	900e      	str	r0, [sp, #56]	; 0x38
 800de4c:	930f      	str	r3, [sp, #60]	; 0x3c
 800de4e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de52:	e7dd      	b.n	800de10 <_strtod_l+0xa68>
 800de54:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800de58:	e7f9      	b.n	800de4e <_strtod_l+0xaa6>
 800de5a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800de5e:	9b04      	ldr	r3, [sp, #16]
 800de60:	2b00      	cmp	r3, #0
 800de62:	d1a8      	bne.n	800ddb6 <_strtod_l+0xa0e>
 800de64:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de6a:	0d1b      	lsrs	r3, r3, #20
 800de6c:	051b      	lsls	r3, r3, #20
 800de6e:	429a      	cmp	r2, r3
 800de70:	d1a1      	bne.n	800ddb6 <_strtod_l+0xa0e>
 800de72:	4640      	mov	r0, r8
 800de74:	4649      	mov	r1, r9
 800de76:	f7f2 ff27 	bl	8000cc8 <__aeabi_d2lz>
 800de7a:	f7f2 fb97 	bl	80005ac <__aeabi_l2d>
 800de7e:	4602      	mov	r2, r0
 800de80:	460b      	mov	r3, r1
 800de82:	4640      	mov	r0, r8
 800de84:	4649      	mov	r1, r9
 800de86:	f7f2 fa07 	bl	8000298 <__aeabi_dsub>
 800de8a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de90:	ea43 030a 	orr.w	r3, r3, sl
 800de94:	4313      	orrs	r3, r2
 800de96:	4680      	mov	r8, r0
 800de98:	4689      	mov	r9, r1
 800de9a:	d055      	beq.n	800df48 <_strtod_l+0xba0>
 800de9c:	a336      	add	r3, pc, #216	; (adr r3, 800df78 <_strtod_l+0xbd0>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	f7f2 fe23 	bl	8000aec <__aeabi_dcmplt>
 800dea6:	2800      	cmp	r0, #0
 800dea8:	f47f acd0 	bne.w	800d84c <_strtod_l+0x4a4>
 800deac:	a334      	add	r3, pc, #208	; (adr r3, 800df80 <_strtod_l+0xbd8>)
 800deae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb2:	4640      	mov	r0, r8
 800deb4:	4649      	mov	r1, r9
 800deb6:	f7f2 fe37 	bl	8000b28 <__aeabi_dcmpgt>
 800deba:	2800      	cmp	r0, #0
 800debc:	f43f af7b 	beq.w	800ddb6 <_strtod_l+0xa0e>
 800dec0:	e4c4      	b.n	800d84c <_strtod_l+0x4a4>
 800dec2:	9b04      	ldr	r3, [sp, #16]
 800dec4:	b333      	cbz	r3, 800df14 <_strtod_l+0xb6c>
 800dec6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dec8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800decc:	d822      	bhi.n	800df14 <_strtod_l+0xb6c>
 800dece:	a32e      	add	r3, pc, #184	; (adr r3, 800df88 <_strtod_l+0xbe0>)
 800ded0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded4:	4640      	mov	r0, r8
 800ded6:	4649      	mov	r1, r9
 800ded8:	f7f2 fe12 	bl	8000b00 <__aeabi_dcmple>
 800dedc:	b1a0      	cbz	r0, 800df08 <_strtod_l+0xb60>
 800dede:	4649      	mov	r1, r9
 800dee0:	4640      	mov	r0, r8
 800dee2:	f7f2 fe69 	bl	8000bb8 <__aeabi_d2uiz>
 800dee6:	2801      	cmp	r0, #1
 800dee8:	bf38      	it	cc
 800deea:	2001      	movcc	r0, #1
 800deec:	f7f2 fb12 	bl	8000514 <__aeabi_ui2d>
 800def0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800def2:	4680      	mov	r8, r0
 800def4:	4689      	mov	r9, r1
 800def6:	bb23      	cbnz	r3, 800df42 <_strtod_l+0xb9a>
 800def8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800defc:	9010      	str	r0, [sp, #64]	; 0x40
 800defe:	9311      	str	r3, [sp, #68]	; 0x44
 800df00:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800df04:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800df08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df0a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800df0c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800df10:	1a9b      	subs	r3, r3, r2
 800df12:	9309      	str	r3, [sp, #36]	; 0x24
 800df14:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df18:	eeb0 0a48 	vmov.f32	s0, s16
 800df1c:	eef0 0a68 	vmov.f32	s1, s17
 800df20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800df24:	f001 fe4a 	bl	800fbbc <__ulp>
 800df28:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800df2c:	ec53 2b10 	vmov	r2, r3, d0
 800df30:	f7f2 fb6a 	bl	8000608 <__aeabi_dmul>
 800df34:	ec53 2b18 	vmov	r2, r3, d8
 800df38:	f7f2 f9b0 	bl	800029c <__adddf3>
 800df3c:	4682      	mov	sl, r0
 800df3e:	468b      	mov	fp, r1
 800df40:	e78d      	b.n	800de5e <_strtod_l+0xab6>
 800df42:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800df46:	e7db      	b.n	800df00 <_strtod_l+0xb58>
 800df48:	a311      	add	r3, pc, #68	; (adr r3, 800df90 <_strtod_l+0xbe8>)
 800df4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df4e:	f7f2 fdcd 	bl	8000aec <__aeabi_dcmplt>
 800df52:	e7b2      	b.n	800deba <_strtod_l+0xb12>
 800df54:	2300      	movs	r3, #0
 800df56:	930a      	str	r3, [sp, #40]	; 0x28
 800df58:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df5a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df5c:	6013      	str	r3, [r2, #0]
 800df5e:	f7ff ba6b 	b.w	800d438 <_strtod_l+0x90>
 800df62:	2a65      	cmp	r2, #101	; 0x65
 800df64:	f43f ab5f 	beq.w	800d626 <_strtod_l+0x27e>
 800df68:	2a45      	cmp	r2, #69	; 0x45
 800df6a:	f43f ab5c 	beq.w	800d626 <_strtod_l+0x27e>
 800df6e:	2301      	movs	r3, #1
 800df70:	f7ff bb94 	b.w	800d69c <_strtod_l+0x2f4>
 800df74:	f3af 8000 	nop.w
 800df78:	94a03595 	.word	0x94a03595
 800df7c:	3fdfffff 	.word	0x3fdfffff
 800df80:	35afe535 	.word	0x35afe535
 800df84:	3fe00000 	.word	0x3fe00000
 800df88:	ffc00000 	.word	0xffc00000
 800df8c:	41dfffff 	.word	0x41dfffff
 800df90:	94a03595 	.word	0x94a03595
 800df94:	3fcfffff 	.word	0x3fcfffff
 800df98:	3ff00000 	.word	0x3ff00000
 800df9c:	7ff00000 	.word	0x7ff00000
 800dfa0:	7fe00000 	.word	0x7fe00000
 800dfa4:	7c9fffff 	.word	0x7c9fffff
 800dfa8:	3fe00000 	.word	0x3fe00000
 800dfac:	bff00000 	.word	0xbff00000
 800dfb0:	7fefffff 	.word	0x7fefffff

0800dfb4 <_strtod_r>:
 800dfb4:	4b01      	ldr	r3, [pc, #4]	; (800dfbc <_strtod_r+0x8>)
 800dfb6:	f7ff b9f7 	b.w	800d3a8 <_strtod_l>
 800dfba:	bf00      	nop
 800dfbc:	200002c4 	.word	0x200002c4

0800dfc0 <_strtol_l.constprop.0>:
 800dfc0:	2b01      	cmp	r3, #1
 800dfc2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfc6:	d001      	beq.n	800dfcc <_strtol_l.constprop.0+0xc>
 800dfc8:	2b24      	cmp	r3, #36	; 0x24
 800dfca:	d906      	bls.n	800dfda <_strtol_l.constprop.0+0x1a>
 800dfcc:	f7fe faee 	bl	800c5ac <__errno>
 800dfd0:	2316      	movs	r3, #22
 800dfd2:	6003      	str	r3, [r0, #0]
 800dfd4:	2000      	movs	r0, #0
 800dfd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfda:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e0c0 <_strtol_l.constprop.0+0x100>
 800dfde:	460d      	mov	r5, r1
 800dfe0:	462e      	mov	r6, r5
 800dfe2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfe6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dfea:	f017 0708 	ands.w	r7, r7, #8
 800dfee:	d1f7      	bne.n	800dfe0 <_strtol_l.constprop.0+0x20>
 800dff0:	2c2d      	cmp	r4, #45	; 0x2d
 800dff2:	d132      	bne.n	800e05a <_strtol_l.constprop.0+0x9a>
 800dff4:	782c      	ldrb	r4, [r5, #0]
 800dff6:	2701      	movs	r7, #1
 800dff8:	1cb5      	adds	r5, r6, #2
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d05b      	beq.n	800e0b6 <_strtol_l.constprop.0+0xf6>
 800dffe:	2b10      	cmp	r3, #16
 800e000:	d109      	bne.n	800e016 <_strtol_l.constprop.0+0x56>
 800e002:	2c30      	cmp	r4, #48	; 0x30
 800e004:	d107      	bne.n	800e016 <_strtol_l.constprop.0+0x56>
 800e006:	782c      	ldrb	r4, [r5, #0]
 800e008:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e00c:	2c58      	cmp	r4, #88	; 0x58
 800e00e:	d14d      	bne.n	800e0ac <_strtol_l.constprop.0+0xec>
 800e010:	786c      	ldrb	r4, [r5, #1]
 800e012:	2310      	movs	r3, #16
 800e014:	3502      	adds	r5, #2
 800e016:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e01a:	f108 38ff 	add.w	r8, r8, #4294967295
 800e01e:	f04f 0c00 	mov.w	ip, #0
 800e022:	fbb8 f9f3 	udiv	r9, r8, r3
 800e026:	4666      	mov	r6, ip
 800e028:	fb03 8a19 	mls	sl, r3, r9, r8
 800e02c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e030:	f1be 0f09 	cmp.w	lr, #9
 800e034:	d816      	bhi.n	800e064 <_strtol_l.constprop.0+0xa4>
 800e036:	4674      	mov	r4, lr
 800e038:	42a3      	cmp	r3, r4
 800e03a:	dd24      	ble.n	800e086 <_strtol_l.constprop.0+0xc6>
 800e03c:	f1bc 0f00 	cmp.w	ip, #0
 800e040:	db1e      	blt.n	800e080 <_strtol_l.constprop.0+0xc0>
 800e042:	45b1      	cmp	r9, r6
 800e044:	d31c      	bcc.n	800e080 <_strtol_l.constprop.0+0xc0>
 800e046:	d101      	bne.n	800e04c <_strtol_l.constprop.0+0x8c>
 800e048:	45a2      	cmp	sl, r4
 800e04a:	db19      	blt.n	800e080 <_strtol_l.constprop.0+0xc0>
 800e04c:	fb06 4603 	mla	r6, r6, r3, r4
 800e050:	f04f 0c01 	mov.w	ip, #1
 800e054:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e058:	e7e8      	b.n	800e02c <_strtol_l.constprop.0+0x6c>
 800e05a:	2c2b      	cmp	r4, #43	; 0x2b
 800e05c:	bf04      	itt	eq
 800e05e:	782c      	ldrbeq	r4, [r5, #0]
 800e060:	1cb5      	addeq	r5, r6, #2
 800e062:	e7ca      	b.n	800dffa <_strtol_l.constprop.0+0x3a>
 800e064:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e068:	f1be 0f19 	cmp.w	lr, #25
 800e06c:	d801      	bhi.n	800e072 <_strtol_l.constprop.0+0xb2>
 800e06e:	3c37      	subs	r4, #55	; 0x37
 800e070:	e7e2      	b.n	800e038 <_strtol_l.constprop.0+0x78>
 800e072:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e076:	f1be 0f19 	cmp.w	lr, #25
 800e07a:	d804      	bhi.n	800e086 <_strtol_l.constprop.0+0xc6>
 800e07c:	3c57      	subs	r4, #87	; 0x57
 800e07e:	e7db      	b.n	800e038 <_strtol_l.constprop.0+0x78>
 800e080:	f04f 3cff 	mov.w	ip, #4294967295
 800e084:	e7e6      	b.n	800e054 <_strtol_l.constprop.0+0x94>
 800e086:	f1bc 0f00 	cmp.w	ip, #0
 800e08a:	da05      	bge.n	800e098 <_strtol_l.constprop.0+0xd8>
 800e08c:	2322      	movs	r3, #34	; 0x22
 800e08e:	6003      	str	r3, [r0, #0]
 800e090:	4646      	mov	r6, r8
 800e092:	b942      	cbnz	r2, 800e0a6 <_strtol_l.constprop.0+0xe6>
 800e094:	4630      	mov	r0, r6
 800e096:	e79e      	b.n	800dfd6 <_strtol_l.constprop.0+0x16>
 800e098:	b107      	cbz	r7, 800e09c <_strtol_l.constprop.0+0xdc>
 800e09a:	4276      	negs	r6, r6
 800e09c:	2a00      	cmp	r2, #0
 800e09e:	d0f9      	beq.n	800e094 <_strtol_l.constprop.0+0xd4>
 800e0a0:	f1bc 0f00 	cmp.w	ip, #0
 800e0a4:	d000      	beq.n	800e0a8 <_strtol_l.constprop.0+0xe8>
 800e0a6:	1e69      	subs	r1, r5, #1
 800e0a8:	6011      	str	r1, [r2, #0]
 800e0aa:	e7f3      	b.n	800e094 <_strtol_l.constprop.0+0xd4>
 800e0ac:	2430      	movs	r4, #48	; 0x30
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d1b1      	bne.n	800e016 <_strtol_l.constprop.0+0x56>
 800e0b2:	2308      	movs	r3, #8
 800e0b4:	e7af      	b.n	800e016 <_strtol_l.constprop.0+0x56>
 800e0b6:	2c30      	cmp	r4, #48	; 0x30
 800e0b8:	d0a5      	beq.n	800e006 <_strtol_l.constprop.0+0x46>
 800e0ba:	230a      	movs	r3, #10
 800e0bc:	e7ab      	b.n	800e016 <_strtol_l.constprop.0+0x56>
 800e0be:	bf00      	nop
 800e0c0:	08012631 	.word	0x08012631

0800e0c4 <_strtol_r>:
 800e0c4:	f7ff bf7c 	b.w	800dfc0 <_strtol_l.constprop.0>

0800e0c8 <quorem>:
 800e0c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0cc:	6903      	ldr	r3, [r0, #16]
 800e0ce:	690c      	ldr	r4, [r1, #16]
 800e0d0:	42a3      	cmp	r3, r4
 800e0d2:	4607      	mov	r7, r0
 800e0d4:	f2c0 8081 	blt.w	800e1da <quorem+0x112>
 800e0d8:	3c01      	subs	r4, #1
 800e0da:	f101 0814 	add.w	r8, r1, #20
 800e0de:	f100 0514 	add.w	r5, r0, #20
 800e0e2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0e6:	9301      	str	r3, [sp, #4]
 800e0e8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0ec:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0f0:	3301      	adds	r3, #1
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0f8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0fc:	fbb2 f6f3 	udiv	r6, r2, r3
 800e100:	d331      	bcc.n	800e166 <quorem+0x9e>
 800e102:	f04f 0e00 	mov.w	lr, #0
 800e106:	4640      	mov	r0, r8
 800e108:	46ac      	mov	ip, r5
 800e10a:	46f2      	mov	sl, lr
 800e10c:	f850 2b04 	ldr.w	r2, [r0], #4
 800e110:	b293      	uxth	r3, r2
 800e112:	fb06 e303 	mla	r3, r6, r3, lr
 800e116:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e11a:	b29b      	uxth	r3, r3
 800e11c:	ebaa 0303 	sub.w	r3, sl, r3
 800e120:	f8dc a000 	ldr.w	sl, [ip]
 800e124:	0c12      	lsrs	r2, r2, #16
 800e126:	fa13 f38a 	uxtah	r3, r3, sl
 800e12a:	fb06 e202 	mla	r2, r6, r2, lr
 800e12e:	9300      	str	r3, [sp, #0]
 800e130:	9b00      	ldr	r3, [sp, #0]
 800e132:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e136:	b292      	uxth	r2, r2
 800e138:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e13c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e140:	f8bd 3000 	ldrh.w	r3, [sp]
 800e144:	4581      	cmp	r9, r0
 800e146:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e14a:	f84c 3b04 	str.w	r3, [ip], #4
 800e14e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e152:	d2db      	bcs.n	800e10c <quorem+0x44>
 800e154:	f855 300b 	ldr.w	r3, [r5, fp]
 800e158:	b92b      	cbnz	r3, 800e166 <quorem+0x9e>
 800e15a:	9b01      	ldr	r3, [sp, #4]
 800e15c:	3b04      	subs	r3, #4
 800e15e:	429d      	cmp	r5, r3
 800e160:	461a      	mov	r2, r3
 800e162:	d32e      	bcc.n	800e1c2 <quorem+0xfa>
 800e164:	613c      	str	r4, [r7, #16]
 800e166:	4638      	mov	r0, r7
 800e168:	f001 fc82 	bl	800fa70 <__mcmp>
 800e16c:	2800      	cmp	r0, #0
 800e16e:	db24      	blt.n	800e1ba <quorem+0xf2>
 800e170:	3601      	adds	r6, #1
 800e172:	4628      	mov	r0, r5
 800e174:	f04f 0c00 	mov.w	ip, #0
 800e178:	f858 2b04 	ldr.w	r2, [r8], #4
 800e17c:	f8d0 e000 	ldr.w	lr, [r0]
 800e180:	b293      	uxth	r3, r2
 800e182:	ebac 0303 	sub.w	r3, ip, r3
 800e186:	0c12      	lsrs	r2, r2, #16
 800e188:	fa13 f38e 	uxtah	r3, r3, lr
 800e18c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e190:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e194:	b29b      	uxth	r3, r3
 800e196:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e19a:	45c1      	cmp	r9, r8
 800e19c:	f840 3b04 	str.w	r3, [r0], #4
 800e1a0:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e1a4:	d2e8      	bcs.n	800e178 <quorem+0xb0>
 800e1a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e1aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e1ae:	b922      	cbnz	r2, 800e1ba <quorem+0xf2>
 800e1b0:	3b04      	subs	r3, #4
 800e1b2:	429d      	cmp	r5, r3
 800e1b4:	461a      	mov	r2, r3
 800e1b6:	d30a      	bcc.n	800e1ce <quorem+0x106>
 800e1b8:	613c      	str	r4, [r7, #16]
 800e1ba:	4630      	mov	r0, r6
 800e1bc:	b003      	add	sp, #12
 800e1be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e1c2:	6812      	ldr	r2, [r2, #0]
 800e1c4:	3b04      	subs	r3, #4
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	d1cc      	bne.n	800e164 <quorem+0x9c>
 800e1ca:	3c01      	subs	r4, #1
 800e1cc:	e7c7      	b.n	800e15e <quorem+0x96>
 800e1ce:	6812      	ldr	r2, [r2, #0]
 800e1d0:	3b04      	subs	r3, #4
 800e1d2:	2a00      	cmp	r2, #0
 800e1d4:	d1f0      	bne.n	800e1b8 <quorem+0xf0>
 800e1d6:	3c01      	subs	r4, #1
 800e1d8:	e7eb      	b.n	800e1b2 <quorem+0xea>
 800e1da:	2000      	movs	r0, #0
 800e1dc:	e7ee      	b.n	800e1bc <quorem+0xf4>
	...

0800e1e0 <_dtoa_r>:
 800e1e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1e4:	ed2d 8b04 	vpush	{d8-d9}
 800e1e8:	ec57 6b10 	vmov	r6, r7, d0
 800e1ec:	b093      	sub	sp, #76	; 0x4c
 800e1ee:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1f0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1f4:	9106      	str	r1, [sp, #24]
 800e1f6:	ee10 aa10 	vmov	sl, s0
 800e1fa:	4604      	mov	r4, r0
 800e1fc:	9209      	str	r2, [sp, #36]	; 0x24
 800e1fe:	930c      	str	r3, [sp, #48]	; 0x30
 800e200:	46bb      	mov	fp, r7
 800e202:	b975      	cbnz	r5, 800e222 <_dtoa_r+0x42>
 800e204:	2010      	movs	r0, #16
 800e206:	f001 f94d 	bl	800f4a4 <malloc>
 800e20a:	4602      	mov	r2, r0
 800e20c:	6260      	str	r0, [r4, #36]	; 0x24
 800e20e:	b920      	cbnz	r0, 800e21a <_dtoa_r+0x3a>
 800e210:	4ba7      	ldr	r3, [pc, #668]	; (800e4b0 <_dtoa_r+0x2d0>)
 800e212:	21ea      	movs	r1, #234	; 0xea
 800e214:	48a7      	ldr	r0, [pc, #668]	; (800e4b4 <_dtoa_r+0x2d4>)
 800e216:	f002 f8ad 	bl	8010374 <__assert_func>
 800e21a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e21e:	6005      	str	r5, [r0, #0]
 800e220:	60c5      	str	r5, [r0, #12]
 800e222:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e224:	6819      	ldr	r1, [r3, #0]
 800e226:	b151      	cbz	r1, 800e23e <_dtoa_r+0x5e>
 800e228:	685a      	ldr	r2, [r3, #4]
 800e22a:	604a      	str	r2, [r1, #4]
 800e22c:	2301      	movs	r3, #1
 800e22e:	4093      	lsls	r3, r2
 800e230:	608b      	str	r3, [r1, #8]
 800e232:	4620      	mov	r0, r4
 800e234:	f001 f990 	bl	800f558 <_Bfree>
 800e238:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e23a:	2200      	movs	r2, #0
 800e23c:	601a      	str	r2, [r3, #0]
 800e23e:	1e3b      	subs	r3, r7, #0
 800e240:	bfaa      	itet	ge
 800e242:	2300      	movge	r3, #0
 800e244:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e248:	f8c8 3000 	strge.w	r3, [r8]
 800e24c:	4b9a      	ldr	r3, [pc, #616]	; (800e4b8 <_dtoa_r+0x2d8>)
 800e24e:	bfbc      	itt	lt
 800e250:	2201      	movlt	r2, #1
 800e252:	f8c8 2000 	strlt.w	r2, [r8]
 800e256:	ea33 030b 	bics.w	r3, r3, fp
 800e25a:	d11b      	bne.n	800e294 <_dtoa_r+0xb4>
 800e25c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e25e:	f242 730f 	movw	r3, #9999	; 0x270f
 800e262:	6013      	str	r3, [r2, #0]
 800e264:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e268:	4333      	orrs	r3, r6
 800e26a:	f000 8592 	beq.w	800ed92 <_dtoa_r+0xbb2>
 800e26e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e270:	b963      	cbnz	r3, 800e28c <_dtoa_r+0xac>
 800e272:	4b92      	ldr	r3, [pc, #584]	; (800e4bc <_dtoa_r+0x2dc>)
 800e274:	e022      	b.n	800e2bc <_dtoa_r+0xdc>
 800e276:	4b92      	ldr	r3, [pc, #584]	; (800e4c0 <_dtoa_r+0x2e0>)
 800e278:	9301      	str	r3, [sp, #4]
 800e27a:	3308      	adds	r3, #8
 800e27c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e27e:	6013      	str	r3, [r2, #0]
 800e280:	9801      	ldr	r0, [sp, #4]
 800e282:	b013      	add	sp, #76	; 0x4c
 800e284:	ecbd 8b04 	vpop	{d8-d9}
 800e288:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e28c:	4b8b      	ldr	r3, [pc, #556]	; (800e4bc <_dtoa_r+0x2dc>)
 800e28e:	9301      	str	r3, [sp, #4]
 800e290:	3303      	adds	r3, #3
 800e292:	e7f3      	b.n	800e27c <_dtoa_r+0x9c>
 800e294:	2200      	movs	r2, #0
 800e296:	2300      	movs	r3, #0
 800e298:	4650      	mov	r0, sl
 800e29a:	4659      	mov	r1, fp
 800e29c:	f7f2 fc1c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e2a0:	ec4b ab19 	vmov	d9, sl, fp
 800e2a4:	4680      	mov	r8, r0
 800e2a6:	b158      	cbz	r0, 800e2c0 <_dtoa_r+0xe0>
 800e2a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e2aa:	2301      	movs	r3, #1
 800e2ac:	6013      	str	r3, [r2, #0]
 800e2ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	f000 856b 	beq.w	800ed8c <_dtoa_r+0xbac>
 800e2b6:	4883      	ldr	r0, [pc, #524]	; (800e4c4 <_dtoa_r+0x2e4>)
 800e2b8:	6018      	str	r0, [r3, #0]
 800e2ba:	1e43      	subs	r3, r0, #1
 800e2bc:	9301      	str	r3, [sp, #4]
 800e2be:	e7df      	b.n	800e280 <_dtoa_r+0xa0>
 800e2c0:	ec4b ab10 	vmov	d0, sl, fp
 800e2c4:	aa10      	add	r2, sp, #64	; 0x40
 800e2c6:	a911      	add	r1, sp, #68	; 0x44
 800e2c8:	4620      	mov	r0, r4
 800e2ca:	f001 fcf3 	bl	800fcb4 <__d2b>
 800e2ce:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e2d2:	ee08 0a10 	vmov	s16, r0
 800e2d6:	2d00      	cmp	r5, #0
 800e2d8:	f000 8084 	beq.w	800e3e4 <_dtoa_r+0x204>
 800e2dc:	ee19 3a90 	vmov	r3, s19
 800e2e0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2e4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2e8:	4656      	mov	r6, sl
 800e2ea:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2ee:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2f2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2f6:	4b74      	ldr	r3, [pc, #464]	; (800e4c8 <_dtoa_r+0x2e8>)
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	4630      	mov	r0, r6
 800e2fc:	4639      	mov	r1, r7
 800e2fe:	f7f1 ffcb 	bl	8000298 <__aeabi_dsub>
 800e302:	a365      	add	r3, pc, #404	; (adr r3, 800e498 <_dtoa_r+0x2b8>)
 800e304:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e308:	f7f2 f97e 	bl	8000608 <__aeabi_dmul>
 800e30c:	a364      	add	r3, pc, #400	; (adr r3, 800e4a0 <_dtoa_r+0x2c0>)
 800e30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e312:	f7f1 ffc3 	bl	800029c <__adddf3>
 800e316:	4606      	mov	r6, r0
 800e318:	4628      	mov	r0, r5
 800e31a:	460f      	mov	r7, r1
 800e31c:	f7f2 f90a 	bl	8000534 <__aeabi_i2d>
 800e320:	a361      	add	r3, pc, #388	; (adr r3, 800e4a8 <_dtoa_r+0x2c8>)
 800e322:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e326:	f7f2 f96f 	bl	8000608 <__aeabi_dmul>
 800e32a:	4602      	mov	r2, r0
 800e32c:	460b      	mov	r3, r1
 800e32e:	4630      	mov	r0, r6
 800e330:	4639      	mov	r1, r7
 800e332:	f7f1 ffb3 	bl	800029c <__adddf3>
 800e336:	4606      	mov	r6, r0
 800e338:	460f      	mov	r7, r1
 800e33a:	f7f2 fc15 	bl	8000b68 <__aeabi_d2iz>
 800e33e:	2200      	movs	r2, #0
 800e340:	9000      	str	r0, [sp, #0]
 800e342:	2300      	movs	r3, #0
 800e344:	4630      	mov	r0, r6
 800e346:	4639      	mov	r1, r7
 800e348:	f7f2 fbd0 	bl	8000aec <__aeabi_dcmplt>
 800e34c:	b150      	cbz	r0, 800e364 <_dtoa_r+0x184>
 800e34e:	9800      	ldr	r0, [sp, #0]
 800e350:	f7f2 f8f0 	bl	8000534 <__aeabi_i2d>
 800e354:	4632      	mov	r2, r6
 800e356:	463b      	mov	r3, r7
 800e358:	f7f2 fbbe 	bl	8000ad8 <__aeabi_dcmpeq>
 800e35c:	b910      	cbnz	r0, 800e364 <_dtoa_r+0x184>
 800e35e:	9b00      	ldr	r3, [sp, #0]
 800e360:	3b01      	subs	r3, #1
 800e362:	9300      	str	r3, [sp, #0]
 800e364:	9b00      	ldr	r3, [sp, #0]
 800e366:	2b16      	cmp	r3, #22
 800e368:	d85a      	bhi.n	800e420 <_dtoa_r+0x240>
 800e36a:	9a00      	ldr	r2, [sp, #0]
 800e36c:	4b57      	ldr	r3, [pc, #348]	; (800e4cc <_dtoa_r+0x2ec>)
 800e36e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e372:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e376:	ec51 0b19 	vmov	r0, r1, d9
 800e37a:	f7f2 fbb7 	bl	8000aec <__aeabi_dcmplt>
 800e37e:	2800      	cmp	r0, #0
 800e380:	d050      	beq.n	800e424 <_dtoa_r+0x244>
 800e382:	9b00      	ldr	r3, [sp, #0]
 800e384:	3b01      	subs	r3, #1
 800e386:	9300      	str	r3, [sp, #0]
 800e388:	2300      	movs	r3, #0
 800e38a:	930b      	str	r3, [sp, #44]	; 0x2c
 800e38c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e38e:	1b5d      	subs	r5, r3, r5
 800e390:	1e6b      	subs	r3, r5, #1
 800e392:	9305      	str	r3, [sp, #20]
 800e394:	bf45      	ittet	mi
 800e396:	f1c5 0301 	rsbmi	r3, r5, #1
 800e39a:	9304      	strmi	r3, [sp, #16]
 800e39c:	2300      	movpl	r3, #0
 800e39e:	2300      	movmi	r3, #0
 800e3a0:	bf4c      	ite	mi
 800e3a2:	9305      	strmi	r3, [sp, #20]
 800e3a4:	9304      	strpl	r3, [sp, #16]
 800e3a6:	9b00      	ldr	r3, [sp, #0]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	db3d      	blt.n	800e428 <_dtoa_r+0x248>
 800e3ac:	9b05      	ldr	r3, [sp, #20]
 800e3ae:	9a00      	ldr	r2, [sp, #0]
 800e3b0:	920a      	str	r2, [sp, #40]	; 0x28
 800e3b2:	4413      	add	r3, r2
 800e3b4:	9305      	str	r3, [sp, #20]
 800e3b6:	2300      	movs	r3, #0
 800e3b8:	9307      	str	r3, [sp, #28]
 800e3ba:	9b06      	ldr	r3, [sp, #24]
 800e3bc:	2b09      	cmp	r3, #9
 800e3be:	f200 8089 	bhi.w	800e4d4 <_dtoa_r+0x2f4>
 800e3c2:	2b05      	cmp	r3, #5
 800e3c4:	bfc4      	itt	gt
 800e3c6:	3b04      	subgt	r3, #4
 800e3c8:	9306      	strgt	r3, [sp, #24]
 800e3ca:	9b06      	ldr	r3, [sp, #24]
 800e3cc:	f1a3 0302 	sub.w	r3, r3, #2
 800e3d0:	bfcc      	ite	gt
 800e3d2:	2500      	movgt	r5, #0
 800e3d4:	2501      	movle	r5, #1
 800e3d6:	2b03      	cmp	r3, #3
 800e3d8:	f200 8087 	bhi.w	800e4ea <_dtoa_r+0x30a>
 800e3dc:	e8df f003 	tbb	[pc, r3]
 800e3e0:	59383a2d 	.word	0x59383a2d
 800e3e4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3e8:	441d      	add	r5, r3
 800e3ea:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3ee:	2b20      	cmp	r3, #32
 800e3f0:	bfc1      	itttt	gt
 800e3f2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3f6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3fa:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3fe:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e402:	bfda      	itte	le
 800e404:	f1c3 0320 	rsble	r3, r3, #32
 800e408:	fa06 f003 	lslle.w	r0, r6, r3
 800e40c:	4318      	orrgt	r0, r3
 800e40e:	f7f2 f881 	bl	8000514 <__aeabi_ui2d>
 800e412:	2301      	movs	r3, #1
 800e414:	4606      	mov	r6, r0
 800e416:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e41a:	3d01      	subs	r5, #1
 800e41c:	930e      	str	r3, [sp, #56]	; 0x38
 800e41e:	e76a      	b.n	800e2f6 <_dtoa_r+0x116>
 800e420:	2301      	movs	r3, #1
 800e422:	e7b2      	b.n	800e38a <_dtoa_r+0x1aa>
 800e424:	900b      	str	r0, [sp, #44]	; 0x2c
 800e426:	e7b1      	b.n	800e38c <_dtoa_r+0x1ac>
 800e428:	9b04      	ldr	r3, [sp, #16]
 800e42a:	9a00      	ldr	r2, [sp, #0]
 800e42c:	1a9b      	subs	r3, r3, r2
 800e42e:	9304      	str	r3, [sp, #16]
 800e430:	4253      	negs	r3, r2
 800e432:	9307      	str	r3, [sp, #28]
 800e434:	2300      	movs	r3, #0
 800e436:	930a      	str	r3, [sp, #40]	; 0x28
 800e438:	e7bf      	b.n	800e3ba <_dtoa_r+0x1da>
 800e43a:	2300      	movs	r3, #0
 800e43c:	9308      	str	r3, [sp, #32]
 800e43e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e440:	2b00      	cmp	r3, #0
 800e442:	dc55      	bgt.n	800e4f0 <_dtoa_r+0x310>
 800e444:	2301      	movs	r3, #1
 800e446:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e44a:	461a      	mov	r2, r3
 800e44c:	9209      	str	r2, [sp, #36]	; 0x24
 800e44e:	e00c      	b.n	800e46a <_dtoa_r+0x28a>
 800e450:	2301      	movs	r3, #1
 800e452:	e7f3      	b.n	800e43c <_dtoa_r+0x25c>
 800e454:	2300      	movs	r3, #0
 800e456:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e458:	9308      	str	r3, [sp, #32]
 800e45a:	9b00      	ldr	r3, [sp, #0]
 800e45c:	4413      	add	r3, r2
 800e45e:	9302      	str	r3, [sp, #8]
 800e460:	3301      	adds	r3, #1
 800e462:	2b01      	cmp	r3, #1
 800e464:	9303      	str	r3, [sp, #12]
 800e466:	bfb8      	it	lt
 800e468:	2301      	movlt	r3, #1
 800e46a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e46c:	2200      	movs	r2, #0
 800e46e:	6042      	str	r2, [r0, #4]
 800e470:	2204      	movs	r2, #4
 800e472:	f102 0614 	add.w	r6, r2, #20
 800e476:	429e      	cmp	r6, r3
 800e478:	6841      	ldr	r1, [r0, #4]
 800e47a:	d93d      	bls.n	800e4f8 <_dtoa_r+0x318>
 800e47c:	4620      	mov	r0, r4
 800e47e:	f001 f82b 	bl	800f4d8 <_Balloc>
 800e482:	9001      	str	r0, [sp, #4]
 800e484:	2800      	cmp	r0, #0
 800e486:	d13b      	bne.n	800e500 <_dtoa_r+0x320>
 800e488:	4b11      	ldr	r3, [pc, #68]	; (800e4d0 <_dtoa_r+0x2f0>)
 800e48a:	4602      	mov	r2, r0
 800e48c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e490:	e6c0      	b.n	800e214 <_dtoa_r+0x34>
 800e492:	2301      	movs	r3, #1
 800e494:	e7df      	b.n	800e456 <_dtoa_r+0x276>
 800e496:	bf00      	nop
 800e498:	636f4361 	.word	0x636f4361
 800e49c:	3fd287a7 	.word	0x3fd287a7
 800e4a0:	8b60c8b3 	.word	0x8b60c8b3
 800e4a4:	3fc68a28 	.word	0x3fc68a28
 800e4a8:	509f79fb 	.word	0x509f79fb
 800e4ac:	3fd34413 	.word	0x3fd34413
 800e4b0:	0801273e 	.word	0x0801273e
 800e4b4:	08012755 	.word	0x08012755
 800e4b8:	7ff00000 	.word	0x7ff00000
 800e4bc:	0801273a 	.word	0x0801273a
 800e4c0:	08012731 	.word	0x08012731
 800e4c4:	080125b5 	.word	0x080125b5
 800e4c8:	3ff80000 	.word	0x3ff80000
 800e4cc:	080128c0 	.word	0x080128c0
 800e4d0:	080127b0 	.word	0x080127b0
 800e4d4:	2501      	movs	r5, #1
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	9306      	str	r3, [sp, #24]
 800e4da:	9508      	str	r5, [sp, #32]
 800e4dc:	f04f 33ff 	mov.w	r3, #4294967295
 800e4e0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	2312      	movs	r3, #18
 800e4e8:	e7b0      	b.n	800e44c <_dtoa_r+0x26c>
 800e4ea:	2301      	movs	r3, #1
 800e4ec:	9308      	str	r3, [sp, #32]
 800e4ee:	e7f5      	b.n	800e4dc <_dtoa_r+0x2fc>
 800e4f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4f2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4f6:	e7b8      	b.n	800e46a <_dtoa_r+0x28a>
 800e4f8:	3101      	adds	r1, #1
 800e4fa:	6041      	str	r1, [r0, #4]
 800e4fc:	0052      	lsls	r2, r2, #1
 800e4fe:	e7b8      	b.n	800e472 <_dtoa_r+0x292>
 800e500:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e502:	9a01      	ldr	r2, [sp, #4]
 800e504:	601a      	str	r2, [r3, #0]
 800e506:	9b03      	ldr	r3, [sp, #12]
 800e508:	2b0e      	cmp	r3, #14
 800e50a:	f200 809d 	bhi.w	800e648 <_dtoa_r+0x468>
 800e50e:	2d00      	cmp	r5, #0
 800e510:	f000 809a 	beq.w	800e648 <_dtoa_r+0x468>
 800e514:	9b00      	ldr	r3, [sp, #0]
 800e516:	2b00      	cmp	r3, #0
 800e518:	dd32      	ble.n	800e580 <_dtoa_r+0x3a0>
 800e51a:	4ab7      	ldr	r2, [pc, #732]	; (800e7f8 <_dtoa_r+0x618>)
 800e51c:	f003 030f 	and.w	r3, r3, #15
 800e520:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e524:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e528:	9b00      	ldr	r3, [sp, #0]
 800e52a:	05d8      	lsls	r0, r3, #23
 800e52c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e530:	d516      	bpl.n	800e560 <_dtoa_r+0x380>
 800e532:	4bb2      	ldr	r3, [pc, #712]	; (800e7fc <_dtoa_r+0x61c>)
 800e534:	ec51 0b19 	vmov	r0, r1, d9
 800e538:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e53c:	f7f2 f98e 	bl	800085c <__aeabi_ddiv>
 800e540:	f007 070f 	and.w	r7, r7, #15
 800e544:	4682      	mov	sl, r0
 800e546:	468b      	mov	fp, r1
 800e548:	2503      	movs	r5, #3
 800e54a:	4eac      	ldr	r6, [pc, #688]	; (800e7fc <_dtoa_r+0x61c>)
 800e54c:	b957      	cbnz	r7, 800e564 <_dtoa_r+0x384>
 800e54e:	4642      	mov	r2, r8
 800e550:	464b      	mov	r3, r9
 800e552:	4650      	mov	r0, sl
 800e554:	4659      	mov	r1, fp
 800e556:	f7f2 f981 	bl	800085c <__aeabi_ddiv>
 800e55a:	4682      	mov	sl, r0
 800e55c:	468b      	mov	fp, r1
 800e55e:	e028      	b.n	800e5b2 <_dtoa_r+0x3d2>
 800e560:	2502      	movs	r5, #2
 800e562:	e7f2      	b.n	800e54a <_dtoa_r+0x36a>
 800e564:	07f9      	lsls	r1, r7, #31
 800e566:	d508      	bpl.n	800e57a <_dtoa_r+0x39a>
 800e568:	4640      	mov	r0, r8
 800e56a:	4649      	mov	r1, r9
 800e56c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e570:	f7f2 f84a 	bl	8000608 <__aeabi_dmul>
 800e574:	3501      	adds	r5, #1
 800e576:	4680      	mov	r8, r0
 800e578:	4689      	mov	r9, r1
 800e57a:	107f      	asrs	r7, r7, #1
 800e57c:	3608      	adds	r6, #8
 800e57e:	e7e5      	b.n	800e54c <_dtoa_r+0x36c>
 800e580:	f000 809b 	beq.w	800e6ba <_dtoa_r+0x4da>
 800e584:	9b00      	ldr	r3, [sp, #0]
 800e586:	4f9d      	ldr	r7, [pc, #628]	; (800e7fc <_dtoa_r+0x61c>)
 800e588:	425e      	negs	r6, r3
 800e58a:	4b9b      	ldr	r3, [pc, #620]	; (800e7f8 <_dtoa_r+0x618>)
 800e58c:	f006 020f 	and.w	r2, r6, #15
 800e590:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e594:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e598:	ec51 0b19 	vmov	r0, r1, d9
 800e59c:	f7f2 f834 	bl	8000608 <__aeabi_dmul>
 800e5a0:	1136      	asrs	r6, r6, #4
 800e5a2:	4682      	mov	sl, r0
 800e5a4:	468b      	mov	fp, r1
 800e5a6:	2300      	movs	r3, #0
 800e5a8:	2502      	movs	r5, #2
 800e5aa:	2e00      	cmp	r6, #0
 800e5ac:	d17a      	bne.n	800e6a4 <_dtoa_r+0x4c4>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1d3      	bne.n	800e55a <_dtoa_r+0x37a>
 800e5b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	f000 8082 	beq.w	800e6be <_dtoa_r+0x4de>
 800e5ba:	4b91      	ldr	r3, [pc, #580]	; (800e800 <_dtoa_r+0x620>)
 800e5bc:	2200      	movs	r2, #0
 800e5be:	4650      	mov	r0, sl
 800e5c0:	4659      	mov	r1, fp
 800e5c2:	f7f2 fa93 	bl	8000aec <__aeabi_dcmplt>
 800e5c6:	2800      	cmp	r0, #0
 800e5c8:	d079      	beq.n	800e6be <_dtoa_r+0x4de>
 800e5ca:	9b03      	ldr	r3, [sp, #12]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d076      	beq.n	800e6be <_dtoa_r+0x4de>
 800e5d0:	9b02      	ldr	r3, [sp, #8]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	dd36      	ble.n	800e644 <_dtoa_r+0x464>
 800e5d6:	9b00      	ldr	r3, [sp, #0]
 800e5d8:	4650      	mov	r0, sl
 800e5da:	4659      	mov	r1, fp
 800e5dc:	1e5f      	subs	r7, r3, #1
 800e5de:	2200      	movs	r2, #0
 800e5e0:	4b88      	ldr	r3, [pc, #544]	; (800e804 <_dtoa_r+0x624>)
 800e5e2:	f7f2 f811 	bl	8000608 <__aeabi_dmul>
 800e5e6:	9e02      	ldr	r6, [sp, #8]
 800e5e8:	4682      	mov	sl, r0
 800e5ea:	468b      	mov	fp, r1
 800e5ec:	3501      	adds	r5, #1
 800e5ee:	4628      	mov	r0, r5
 800e5f0:	f7f1 ffa0 	bl	8000534 <__aeabi_i2d>
 800e5f4:	4652      	mov	r2, sl
 800e5f6:	465b      	mov	r3, fp
 800e5f8:	f7f2 f806 	bl	8000608 <__aeabi_dmul>
 800e5fc:	4b82      	ldr	r3, [pc, #520]	; (800e808 <_dtoa_r+0x628>)
 800e5fe:	2200      	movs	r2, #0
 800e600:	f7f1 fe4c 	bl	800029c <__adddf3>
 800e604:	46d0      	mov	r8, sl
 800e606:	46d9      	mov	r9, fp
 800e608:	4682      	mov	sl, r0
 800e60a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e60e:	2e00      	cmp	r6, #0
 800e610:	d158      	bne.n	800e6c4 <_dtoa_r+0x4e4>
 800e612:	4b7e      	ldr	r3, [pc, #504]	; (800e80c <_dtoa_r+0x62c>)
 800e614:	2200      	movs	r2, #0
 800e616:	4640      	mov	r0, r8
 800e618:	4649      	mov	r1, r9
 800e61a:	f7f1 fe3d 	bl	8000298 <__aeabi_dsub>
 800e61e:	4652      	mov	r2, sl
 800e620:	465b      	mov	r3, fp
 800e622:	4680      	mov	r8, r0
 800e624:	4689      	mov	r9, r1
 800e626:	f7f2 fa7f 	bl	8000b28 <__aeabi_dcmpgt>
 800e62a:	2800      	cmp	r0, #0
 800e62c:	f040 8295 	bne.w	800eb5a <_dtoa_r+0x97a>
 800e630:	4652      	mov	r2, sl
 800e632:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e636:	4640      	mov	r0, r8
 800e638:	4649      	mov	r1, r9
 800e63a:	f7f2 fa57 	bl	8000aec <__aeabi_dcmplt>
 800e63e:	2800      	cmp	r0, #0
 800e640:	f040 8289 	bne.w	800eb56 <_dtoa_r+0x976>
 800e644:	ec5b ab19 	vmov	sl, fp, d9
 800e648:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	f2c0 8148 	blt.w	800e8e0 <_dtoa_r+0x700>
 800e650:	9a00      	ldr	r2, [sp, #0]
 800e652:	2a0e      	cmp	r2, #14
 800e654:	f300 8144 	bgt.w	800e8e0 <_dtoa_r+0x700>
 800e658:	4b67      	ldr	r3, [pc, #412]	; (800e7f8 <_dtoa_r+0x618>)
 800e65a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e65e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e662:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e664:	2b00      	cmp	r3, #0
 800e666:	f280 80d5 	bge.w	800e814 <_dtoa_r+0x634>
 800e66a:	9b03      	ldr	r3, [sp, #12]
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	f300 80d1 	bgt.w	800e814 <_dtoa_r+0x634>
 800e672:	f040 826f 	bne.w	800eb54 <_dtoa_r+0x974>
 800e676:	4b65      	ldr	r3, [pc, #404]	; (800e80c <_dtoa_r+0x62c>)
 800e678:	2200      	movs	r2, #0
 800e67a:	4640      	mov	r0, r8
 800e67c:	4649      	mov	r1, r9
 800e67e:	f7f1 ffc3 	bl	8000608 <__aeabi_dmul>
 800e682:	4652      	mov	r2, sl
 800e684:	465b      	mov	r3, fp
 800e686:	f7f2 fa45 	bl	8000b14 <__aeabi_dcmpge>
 800e68a:	9e03      	ldr	r6, [sp, #12]
 800e68c:	4637      	mov	r7, r6
 800e68e:	2800      	cmp	r0, #0
 800e690:	f040 8245 	bne.w	800eb1e <_dtoa_r+0x93e>
 800e694:	9d01      	ldr	r5, [sp, #4]
 800e696:	2331      	movs	r3, #49	; 0x31
 800e698:	f805 3b01 	strb.w	r3, [r5], #1
 800e69c:	9b00      	ldr	r3, [sp, #0]
 800e69e:	3301      	adds	r3, #1
 800e6a0:	9300      	str	r3, [sp, #0]
 800e6a2:	e240      	b.n	800eb26 <_dtoa_r+0x946>
 800e6a4:	07f2      	lsls	r2, r6, #31
 800e6a6:	d505      	bpl.n	800e6b4 <_dtoa_r+0x4d4>
 800e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ac:	f7f1 ffac 	bl	8000608 <__aeabi_dmul>
 800e6b0:	3501      	adds	r5, #1
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	1076      	asrs	r6, r6, #1
 800e6b6:	3708      	adds	r7, #8
 800e6b8:	e777      	b.n	800e5aa <_dtoa_r+0x3ca>
 800e6ba:	2502      	movs	r5, #2
 800e6bc:	e779      	b.n	800e5b2 <_dtoa_r+0x3d2>
 800e6be:	9f00      	ldr	r7, [sp, #0]
 800e6c0:	9e03      	ldr	r6, [sp, #12]
 800e6c2:	e794      	b.n	800e5ee <_dtoa_r+0x40e>
 800e6c4:	9901      	ldr	r1, [sp, #4]
 800e6c6:	4b4c      	ldr	r3, [pc, #304]	; (800e7f8 <_dtoa_r+0x618>)
 800e6c8:	4431      	add	r1, r6
 800e6ca:	910d      	str	r1, [sp, #52]	; 0x34
 800e6cc:	9908      	ldr	r1, [sp, #32]
 800e6ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e6d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e6d6:	2900      	cmp	r1, #0
 800e6d8:	d043      	beq.n	800e762 <_dtoa_r+0x582>
 800e6da:	494d      	ldr	r1, [pc, #308]	; (800e810 <_dtoa_r+0x630>)
 800e6dc:	2000      	movs	r0, #0
 800e6de:	f7f2 f8bd 	bl	800085c <__aeabi_ddiv>
 800e6e2:	4652      	mov	r2, sl
 800e6e4:	465b      	mov	r3, fp
 800e6e6:	f7f1 fdd7 	bl	8000298 <__aeabi_dsub>
 800e6ea:	9d01      	ldr	r5, [sp, #4]
 800e6ec:	4682      	mov	sl, r0
 800e6ee:	468b      	mov	fp, r1
 800e6f0:	4649      	mov	r1, r9
 800e6f2:	4640      	mov	r0, r8
 800e6f4:	f7f2 fa38 	bl	8000b68 <__aeabi_d2iz>
 800e6f8:	4606      	mov	r6, r0
 800e6fa:	f7f1 ff1b 	bl	8000534 <__aeabi_i2d>
 800e6fe:	4602      	mov	r2, r0
 800e700:	460b      	mov	r3, r1
 800e702:	4640      	mov	r0, r8
 800e704:	4649      	mov	r1, r9
 800e706:	f7f1 fdc7 	bl	8000298 <__aeabi_dsub>
 800e70a:	3630      	adds	r6, #48	; 0x30
 800e70c:	f805 6b01 	strb.w	r6, [r5], #1
 800e710:	4652      	mov	r2, sl
 800e712:	465b      	mov	r3, fp
 800e714:	4680      	mov	r8, r0
 800e716:	4689      	mov	r9, r1
 800e718:	f7f2 f9e8 	bl	8000aec <__aeabi_dcmplt>
 800e71c:	2800      	cmp	r0, #0
 800e71e:	d163      	bne.n	800e7e8 <_dtoa_r+0x608>
 800e720:	4642      	mov	r2, r8
 800e722:	464b      	mov	r3, r9
 800e724:	4936      	ldr	r1, [pc, #216]	; (800e800 <_dtoa_r+0x620>)
 800e726:	2000      	movs	r0, #0
 800e728:	f7f1 fdb6 	bl	8000298 <__aeabi_dsub>
 800e72c:	4652      	mov	r2, sl
 800e72e:	465b      	mov	r3, fp
 800e730:	f7f2 f9dc 	bl	8000aec <__aeabi_dcmplt>
 800e734:	2800      	cmp	r0, #0
 800e736:	f040 80b5 	bne.w	800e8a4 <_dtoa_r+0x6c4>
 800e73a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e73c:	429d      	cmp	r5, r3
 800e73e:	d081      	beq.n	800e644 <_dtoa_r+0x464>
 800e740:	4b30      	ldr	r3, [pc, #192]	; (800e804 <_dtoa_r+0x624>)
 800e742:	2200      	movs	r2, #0
 800e744:	4650      	mov	r0, sl
 800e746:	4659      	mov	r1, fp
 800e748:	f7f1 ff5e 	bl	8000608 <__aeabi_dmul>
 800e74c:	4b2d      	ldr	r3, [pc, #180]	; (800e804 <_dtoa_r+0x624>)
 800e74e:	4682      	mov	sl, r0
 800e750:	468b      	mov	fp, r1
 800e752:	4640      	mov	r0, r8
 800e754:	4649      	mov	r1, r9
 800e756:	2200      	movs	r2, #0
 800e758:	f7f1 ff56 	bl	8000608 <__aeabi_dmul>
 800e75c:	4680      	mov	r8, r0
 800e75e:	4689      	mov	r9, r1
 800e760:	e7c6      	b.n	800e6f0 <_dtoa_r+0x510>
 800e762:	4650      	mov	r0, sl
 800e764:	4659      	mov	r1, fp
 800e766:	f7f1 ff4f 	bl	8000608 <__aeabi_dmul>
 800e76a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e76c:	9d01      	ldr	r5, [sp, #4]
 800e76e:	930f      	str	r3, [sp, #60]	; 0x3c
 800e770:	4682      	mov	sl, r0
 800e772:	468b      	mov	fp, r1
 800e774:	4649      	mov	r1, r9
 800e776:	4640      	mov	r0, r8
 800e778:	f7f2 f9f6 	bl	8000b68 <__aeabi_d2iz>
 800e77c:	4606      	mov	r6, r0
 800e77e:	f7f1 fed9 	bl	8000534 <__aeabi_i2d>
 800e782:	3630      	adds	r6, #48	; 0x30
 800e784:	4602      	mov	r2, r0
 800e786:	460b      	mov	r3, r1
 800e788:	4640      	mov	r0, r8
 800e78a:	4649      	mov	r1, r9
 800e78c:	f7f1 fd84 	bl	8000298 <__aeabi_dsub>
 800e790:	f805 6b01 	strb.w	r6, [r5], #1
 800e794:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e796:	429d      	cmp	r5, r3
 800e798:	4680      	mov	r8, r0
 800e79a:	4689      	mov	r9, r1
 800e79c:	f04f 0200 	mov.w	r2, #0
 800e7a0:	d124      	bne.n	800e7ec <_dtoa_r+0x60c>
 800e7a2:	4b1b      	ldr	r3, [pc, #108]	; (800e810 <_dtoa_r+0x630>)
 800e7a4:	4650      	mov	r0, sl
 800e7a6:	4659      	mov	r1, fp
 800e7a8:	f7f1 fd78 	bl	800029c <__adddf3>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	460b      	mov	r3, r1
 800e7b0:	4640      	mov	r0, r8
 800e7b2:	4649      	mov	r1, r9
 800e7b4:	f7f2 f9b8 	bl	8000b28 <__aeabi_dcmpgt>
 800e7b8:	2800      	cmp	r0, #0
 800e7ba:	d173      	bne.n	800e8a4 <_dtoa_r+0x6c4>
 800e7bc:	4652      	mov	r2, sl
 800e7be:	465b      	mov	r3, fp
 800e7c0:	4913      	ldr	r1, [pc, #76]	; (800e810 <_dtoa_r+0x630>)
 800e7c2:	2000      	movs	r0, #0
 800e7c4:	f7f1 fd68 	bl	8000298 <__aeabi_dsub>
 800e7c8:	4602      	mov	r2, r0
 800e7ca:	460b      	mov	r3, r1
 800e7cc:	4640      	mov	r0, r8
 800e7ce:	4649      	mov	r1, r9
 800e7d0:	f7f2 f98c 	bl	8000aec <__aeabi_dcmplt>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	f43f af35 	beq.w	800e644 <_dtoa_r+0x464>
 800e7da:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7dc:	1e6b      	subs	r3, r5, #1
 800e7de:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7e0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7e4:	2b30      	cmp	r3, #48	; 0x30
 800e7e6:	d0f8      	beq.n	800e7da <_dtoa_r+0x5fa>
 800e7e8:	9700      	str	r7, [sp, #0]
 800e7ea:	e049      	b.n	800e880 <_dtoa_r+0x6a0>
 800e7ec:	4b05      	ldr	r3, [pc, #20]	; (800e804 <_dtoa_r+0x624>)
 800e7ee:	f7f1 ff0b 	bl	8000608 <__aeabi_dmul>
 800e7f2:	4680      	mov	r8, r0
 800e7f4:	4689      	mov	r9, r1
 800e7f6:	e7bd      	b.n	800e774 <_dtoa_r+0x594>
 800e7f8:	080128c0 	.word	0x080128c0
 800e7fc:	08012898 	.word	0x08012898
 800e800:	3ff00000 	.word	0x3ff00000
 800e804:	40240000 	.word	0x40240000
 800e808:	401c0000 	.word	0x401c0000
 800e80c:	40140000 	.word	0x40140000
 800e810:	3fe00000 	.word	0x3fe00000
 800e814:	9d01      	ldr	r5, [sp, #4]
 800e816:	4656      	mov	r6, sl
 800e818:	465f      	mov	r7, fp
 800e81a:	4642      	mov	r2, r8
 800e81c:	464b      	mov	r3, r9
 800e81e:	4630      	mov	r0, r6
 800e820:	4639      	mov	r1, r7
 800e822:	f7f2 f81b 	bl	800085c <__aeabi_ddiv>
 800e826:	f7f2 f99f 	bl	8000b68 <__aeabi_d2iz>
 800e82a:	4682      	mov	sl, r0
 800e82c:	f7f1 fe82 	bl	8000534 <__aeabi_i2d>
 800e830:	4642      	mov	r2, r8
 800e832:	464b      	mov	r3, r9
 800e834:	f7f1 fee8 	bl	8000608 <__aeabi_dmul>
 800e838:	4602      	mov	r2, r0
 800e83a:	460b      	mov	r3, r1
 800e83c:	4630      	mov	r0, r6
 800e83e:	4639      	mov	r1, r7
 800e840:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e844:	f7f1 fd28 	bl	8000298 <__aeabi_dsub>
 800e848:	f805 6b01 	strb.w	r6, [r5], #1
 800e84c:	9e01      	ldr	r6, [sp, #4]
 800e84e:	9f03      	ldr	r7, [sp, #12]
 800e850:	1bae      	subs	r6, r5, r6
 800e852:	42b7      	cmp	r7, r6
 800e854:	4602      	mov	r2, r0
 800e856:	460b      	mov	r3, r1
 800e858:	d135      	bne.n	800e8c6 <_dtoa_r+0x6e6>
 800e85a:	f7f1 fd1f 	bl	800029c <__adddf3>
 800e85e:	4642      	mov	r2, r8
 800e860:	464b      	mov	r3, r9
 800e862:	4606      	mov	r6, r0
 800e864:	460f      	mov	r7, r1
 800e866:	f7f2 f95f 	bl	8000b28 <__aeabi_dcmpgt>
 800e86a:	b9d0      	cbnz	r0, 800e8a2 <_dtoa_r+0x6c2>
 800e86c:	4642      	mov	r2, r8
 800e86e:	464b      	mov	r3, r9
 800e870:	4630      	mov	r0, r6
 800e872:	4639      	mov	r1, r7
 800e874:	f7f2 f930 	bl	8000ad8 <__aeabi_dcmpeq>
 800e878:	b110      	cbz	r0, 800e880 <_dtoa_r+0x6a0>
 800e87a:	f01a 0f01 	tst.w	sl, #1
 800e87e:	d110      	bne.n	800e8a2 <_dtoa_r+0x6c2>
 800e880:	4620      	mov	r0, r4
 800e882:	ee18 1a10 	vmov	r1, s16
 800e886:	f000 fe67 	bl	800f558 <_Bfree>
 800e88a:	2300      	movs	r3, #0
 800e88c:	9800      	ldr	r0, [sp, #0]
 800e88e:	702b      	strb	r3, [r5, #0]
 800e890:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e892:	3001      	adds	r0, #1
 800e894:	6018      	str	r0, [r3, #0]
 800e896:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e898:	2b00      	cmp	r3, #0
 800e89a:	f43f acf1 	beq.w	800e280 <_dtoa_r+0xa0>
 800e89e:	601d      	str	r5, [r3, #0]
 800e8a0:	e4ee      	b.n	800e280 <_dtoa_r+0xa0>
 800e8a2:	9f00      	ldr	r7, [sp, #0]
 800e8a4:	462b      	mov	r3, r5
 800e8a6:	461d      	mov	r5, r3
 800e8a8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e8ac:	2a39      	cmp	r2, #57	; 0x39
 800e8ae:	d106      	bne.n	800e8be <_dtoa_r+0x6de>
 800e8b0:	9a01      	ldr	r2, [sp, #4]
 800e8b2:	429a      	cmp	r2, r3
 800e8b4:	d1f7      	bne.n	800e8a6 <_dtoa_r+0x6c6>
 800e8b6:	9901      	ldr	r1, [sp, #4]
 800e8b8:	2230      	movs	r2, #48	; 0x30
 800e8ba:	3701      	adds	r7, #1
 800e8bc:	700a      	strb	r2, [r1, #0]
 800e8be:	781a      	ldrb	r2, [r3, #0]
 800e8c0:	3201      	adds	r2, #1
 800e8c2:	701a      	strb	r2, [r3, #0]
 800e8c4:	e790      	b.n	800e7e8 <_dtoa_r+0x608>
 800e8c6:	4ba6      	ldr	r3, [pc, #664]	; (800eb60 <_dtoa_r+0x980>)
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	f7f1 fe9d 	bl	8000608 <__aeabi_dmul>
 800e8ce:	2200      	movs	r2, #0
 800e8d0:	2300      	movs	r3, #0
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	460f      	mov	r7, r1
 800e8d6:	f7f2 f8ff 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8da:	2800      	cmp	r0, #0
 800e8dc:	d09d      	beq.n	800e81a <_dtoa_r+0x63a>
 800e8de:	e7cf      	b.n	800e880 <_dtoa_r+0x6a0>
 800e8e0:	9a08      	ldr	r2, [sp, #32]
 800e8e2:	2a00      	cmp	r2, #0
 800e8e4:	f000 80d7 	beq.w	800ea96 <_dtoa_r+0x8b6>
 800e8e8:	9a06      	ldr	r2, [sp, #24]
 800e8ea:	2a01      	cmp	r2, #1
 800e8ec:	f300 80ba 	bgt.w	800ea64 <_dtoa_r+0x884>
 800e8f0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8f2:	2a00      	cmp	r2, #0
 800e8f4:	f000 80b2 	beq.w	800ea5c <_dtoa_r+0x87c>
 800e8f8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8fc:	9e07      	ldr	r6, [sp, #28]
 800e8fe:	9d04      	ldr	r5, [sp, #16]
 800e900:	9a04      	ldr	r2, [sp, #16]
 800e902:	441a      	add	r2, r3
 800e904:	9204      	str	r2, [sp, #16]
 800e906:	9a05      	ldr	r2, [sp, #20]
 800e908:	2101      	movs	r1, #1
 800e90a:	441a      	add	r2, r3
 800e90c:	4620      	mov	r0, r4
 800e90e:	9205      	str	r2, [sp, #20]
 800e910:	f000 ff24 	bl	800f75c <__i2b>
 800e914:	4607      	mov	r7, r0
 800e916:	2d00      	cmp	r5, #0
 800e918:	dd0c      	ble.n	800e934 <_dtoa_r+0x754>
 800e91a:	9b05      	ldr	r3, [sp, #20]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	dd09      	ble.n	800e934 <_dtoa_r+0x754>
 800e920:	42ab      	cmp	r3, r5
 800e922:	9a04      	ldr	r2, [sp, #16]
 800e924:	bfa8      	it	ge
 800e926:	462b      	movge	r3, r5
 800e928:	1ad2      	subs	r2, r2, r3
 800e92a:	9204      	str	r2, [sp, #16]
 800e92c:	9a05      	ldr	r2, [sp, #20]
 800e92e:	1aed      	subs	r5, r5, r3
 800e930:	1ad3      	subs	r3, r2, r3
 800e932:	9305      	str	r3, [sp, #20]
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	b31b      	cbz	r3, 800e980 <_dtoa_r+0x7a0>
 800e938:	9b08      	ldr	r3, [sp, #32]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	f000 80af 	beq.w	800ea9e <_dtoa_r+0x8be>
 800e940:	2e00      	cmp	r6, #0
 800e942:	dd13      	ble.n	800e96c <_dtoa_r+0x78c>
 800e944:	4639      	mov	r1, r7
 800e946:	4632      	mov	r2, r6
 800e948:	4620      	mov	r0, r4
 800e94a:	f000 ffc7 	bl	800f8dc <__pow5mult>
 800e94e:	ee18 2a10 	vmov	r2, s16
 800e952:	4601      	mov	r1, r0
 800e954:	4607      	mov	r7, r0
 800e956:	4620      	mov	r0, r4
 800e958:	f000 ff16 	bl	800f788 <__multiply>
 800e95c:	ee18 1a10 	vmov	r1, s16
 800e960:	4680      	mov	r8, r0
 800e962:	4620      	mov	r0, r4
 800e964:	f000 fdf8 	bl	800f558 <_Bfree>
 800e968:	ee08 8a10 	vmov	s16, r8
 800e96c:	9b07      	ldr	r3, [sp, #28]
 800e96e:	1b9a      	subs	r2, r3, r6
 800e970:	d006      	beq.n	800e980 <_dtoa_r+0x7a0>
 800e972:	ee18 1a10 	vmov	r1, s16
 800e976:	4620      	mov	r0, r4
 800e978:	f000 ffb0 	bl	800f8dc <__pow5mult>
 800e97c:	ee08 0a10 	vmov	s16, r0
 800e980:	2101      	movs	r1, #1
 800e982:	4620      	mov	r0, r4
 800e984:	f000 feea 	bl	800f75c <__i2b>
 800e988:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	4606      	mov	r6, r0
 800e98e:	f340 8088 	ble.w	800eaa2 <_dtoa_r+0x8c2>
 800e992:	461a      	mov	r2, r3
 800e994:	4601      	mov	r1, r0
 800e996:	4620      	mov	r0, r4
 800e998:	f000 ffa0 	bl	800f8dc <__pow5mult>
 800e99c:	9b06      	ldr	r3, [sp, #24]
 800e99e:	2b01      	cmp	r3, #1
 800e9a0:	4606      	mov	r6, r0
 800e9a2:	f340 8081 	ble.w	800eaa8 <_dtoa_r+0x8c8>
 800e9a6:	f04f 0800 	mov.w	r8, #0
 800e9aa:	6933      	ldr	r3, [r6, #16]
 800e9ac:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e9b0:	6918      	ldr	r0, [r3, #16]
 800e9b2:	f000 fe83 	bl	800f6bc <__hi0bits>
 800e9b6:	f1c0 0020 	rsb	r0, r0, #32
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	4418      	add	r0, r3
 800e9be:	f010 001f 	ands.w	r0, r0, #31
 800e9c2:	f000 8092 	beq.w	800eaea <_dtoa_r+0x90a>
 800e9c6:	f1c0 0320 	rsb	r3, r0, #32
 800e9ca:	2b04      	cmp	r3, #4
 800e9cc:	f340 808a 	ble.w	800eae4 <_dtoa_r+0x904>
 800e9d0:	f1c0 001c 	rsb	r0, r0, #28
 800e9d4:	9b04      	ldr	r3, [sp, #16]
 800e9d6:	4403      	add	r3, r0
 800e9d8:	9304      	str	r3, [sp, #16]
 800e9da:	9b05      	ldr	r3, [sp, #20]
 800e9dc:	4403      	add	r3, r0
 800e9de:	4405      	add	r5, r0
 800e9e0:	9305      	str	r3, [sp, #20]
 800e9e2:	9b04      	ldr	r3, [sp, #16]
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	dd07      	ble.n	800e9f8 <_dtoa_r+0x818>
 800e9e8:	ee18 1a10 	vmov	r1, s16
 800e9ec:	461a      	mov	r2, r3
 800e9ee:	4620      	mov	r0, r4
 800e9f0:	f000 ffce 	bl	800f990 <__lshift>
 800e9f4:	ee08 0a10 	vmov	s16, r0
 800e9f8:	9b05      	ldr	r3, [sp, #20]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	dd05      	ble.n	800ea0a <_dtoa_r+0x82a>
 800e9fe:	4631      	mov	r1, r6
 800ea00:	461a      	mov	r2, r3
 800ea02:	4620      	mov	r0, r4
 800ea04:	f000 ffc4 	bl	800f990 <__lshift>
 800ea08:	4606      	mov	r6, r0
 800ea0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	d06e      	beq.n	800eaee <_dtoa_r+0x90e>
 800ea10:	ee18 0a10 	vmov	r0, s16
 800ea14:	4631      	mov	r1, r6
 800ea16:	f001 f82b 	bl	800fa70 <__mcmp>
 800ea1a:	2800      	cmp	r0, #0
 800ea1c:	da67      	bge.n	800eaee <_dtoa_r+0x90e>
 800ea1e:	9b00      	ldr	r3, [sp, #0]
 800ea20:	3b01      	subs	r3, #1
 800ea22:	ee18 1a10 	vmov	r1, s16
 800ea26:	9300      	str	r3, [sp, #0]
 800ea28:	220a      	movs	r2, #10
 800ea2a:	2300      	movs	r3, #0
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	f000 fdb5 	bl	800f59c <__multadd>
 800ea32:	9b08      	ldr	r3, [sp, #32]
 800ea34:	ee08 0a10 	vmov	s16, r0
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	f000 81b1 	beq.w	800eda0 <_dtoa_r+0xbc0>
 800ea3e:	2300      	movs	r3, #0
 800ea40:	4639      	mov	r1, r7
 800ea42:	220a      	movs	r2, #10
 800ea44:	4620      	mov	r0, r4
 800ea46:	f000 fda9 	bl	800f59c <__multadd>
 800ea4a:	9b02      	ldr	r3, [sp, #8]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	4607      	mov	r7, r0
 800ea50:	f300 808e 	bgt.w	800eb70 <_dtoa_r+0x990>
 800ea54:	9b06      	ldr	r3, [sp, #24]
 800ea56:	2b02      	cmp	r3, #2
 800ea58:	dc51      	bgt.n	800eafe <_dtoa_r+0x91e>
 800ea5a:	e089      	b.n	800eb70 <_dtoa_r+0x990>
 800ea5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea5e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea62:	e74b      	b.n	800e8fc <_dtoa_r+0x71c>
 800ea64:	9b03      	ldr	r3, [sp, #12]
 800ea66:	1e5e      	subs	r6, r3, #1
 800ea68:	9b07      	ldr	r3, [sp, #28]
 800ea6a:	42b3      	cmp	r3, r6
 800ea6c:	bfbf      	itttt	lt
 800ea6e:	9b07      	ldrlt	r3, [sp, #28]
 800ea70:	9607      	strlt	r6, [sp, #28]
 800ea72:	1af2      	sublt	r2, r6, r3
 800ea74:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea76:	bfb6      	itet	lt
 800ea78:	189b      	addlt	r3, r3, r2
 800ea7a:	1b9e      	subge	r6, r3, r6
 800ea7c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea7e:	9b03      	ldr	r3, [sp, #12]
 800ea80:	bfb8      	it	lt
 800ea82:	2600      	movlt	r6, #0
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	bfb7      	itett	lt
 800ea88:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea8c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea90:	1a9d      	sublt	r5, r3, r2
 800ea92:	2300      	movlt	r3, #0
 800ea94:	e734      	b.n	800e900 <_dtoa_r+0x720>
 800ea96:	9e07      	ldr	r6, [sp, #28]
 800ea98:	9d04      	ldr	r5, [sp, #16]
 800ea9a:	9f08      	ldr	r7, [sp, #32]
 800ea9c:	e73b      	b.n	800e916 <_dtoa_r+0x736>
 800ea9e:	9a07      	ldr	r2, [sp, #28]
 800eaa0:	e767      	b.n	800e972 <_dtoa_r+0x792>
 800eaa2:	9b06      	ldr	r3, [sp, #24]
 800eaa4:	2b01      	cmp	r3, #1
 800eaa6:	dc18      	bgt.n	800eada <_dtoa_r+0x8fa>
 800eaa8:	f1ba 0f00 	cmp.w	sl, #0
 800eaac:	d115      	bne.n	800eada <_dtoa_r+0x8fa>
 800eaae:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eab2:	b993      	cbnz	r3, 800eada <_dtoa_r+0x8fa>
 800eab4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eab8:	0d1b      	lsrs	r3, r3, #20
 800eaba:	051b      	lsls	r3, r3, #20
 800eabc:	b183      	cbz	r3, 800eae0 <_dtoa_r+0x900>
 800eabe:	9b04      	ldr	r3, [sp, #16]
 800eac0:	3301      	adds	r3, #1
 800eac2:	9304      	str	r3, [sp, #16]
 800eac4:	9b05      	ldr	r3, [sp, #20]
 800eac6:	3301      	adds	r3, #1
 800eac8:	9305      	str	r3, [sp, #20]
 800eaca:	f04f 0801 	mov.w	r8, #1
 800eace:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead0:	2b00      	cmp	r3, #0
 800ead2:	f47f af6a 	bne.w	800e9aa <_dtoa_r+0x7ca>
 800ead6:	2001      	movs	r0, #1
 800ead8:	e76f      	b.n	800e9ba <_dtoa_r+0x7da>
 800eada:	f04f 0800 	mov.w	r8, #0
 800eade:	e7f6      	b.n	800eace <_dtoa_r+0x8ee>
 800eae0:	4698      	mov	r8, r3
 800eae2:	e7f4      	b.n	800eace <_dtoa_r+0x8ee>
 800eae4:	f43f af7d 	beq.w	800e9e2 <_dtoa_r+0x802>
 800eae8:	4618      	mov	r0, r3
 800eaea:	301c      	adds	r0, #28
 800eaec:	e772      	b.n	800e9d4 <_dtoa_r+0x7f4>
 800eaee:	9b03      	ldr	r3, [sp, #12]
 800eaf0:	2b00      	cmp	r3, #0
 800eaf2:	dc37      	bgt.n	800eb64 <_dtoa_r+0x984>
 800eaf4:	9b06      	ldr	r3, [sp, #24]
 800eaf6:	2b02      	cmp	r3, #2
 800eaf8:	dd34      	ble.n	800eb64 <_dtoa_r+0x984>
 800eafa:	9b03      	ldr	r3, [sp, #12]
 800eafc:	9302      	str	r3, [sp, #8]
 800eafe:	9b02      	ldr	r3, [sp, #8]
 800eb00:	b96b      	cbnz	r3, 800eb1e <_dtoa_r+0x93e>
 800eb02:	4631      	mov	r1, r6
 800eb04:	2205      	movs	r2, #5
 800eb06:	4620      	mov	r0, r4
 800eb08:	f000 fd48 	bl	800f59c <__multadd>
 800eb0c:	4601      	mov	r1, r0
 800eb0e:	4606      	mov	r6, r0
 800eb10:	ee18 0a10 	vmov	r0, s16
 800eb14:	f000 ffac 	bl	800fa70 <__mcmp>
 800eb18:	2800      	cmp	r0, #0
 800eb1a:	f73f adbb 	bgt.w	800e694 <_dtoa_r+0x4b4>
 800eb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eb20:	9d01      	ldr	r5, [sp, #4]
 800eb22:	43db      	mvns	r3, r3
 800eb24:	9300      	str	r3, [sp, #0]
 800eb26:	f04f 0800 	mov.w	r8, #0
 800eb2a:	4631      	mov	r1, r6
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f000 fd13 	bl	800f558 <_Bfree>
 800eb32:	2f00      	cmp	r7, #0
 800eb34:	f43f aea4 	beq.w	800e880 <_dtoa_r+0x6a0>
 800eb38:	f1b8 0f00 	cmp.w	r8, #0
 800eb3c:	d005      	beq.n	800eb4a <_dtoa_r+0x96a>
 800eb3e:	45b8      	cmp	r8, r7
 800eb40:	d003      	beq.n	800eb4a <_dtoa_r+0x96a>
 800eb42:	4641      	mov	r1, r8
 800eb44:	4620      	mov	r0, r4
 800eb46:	f000 fd07 	bl	800f558 <_Bfree>
 800eb4a:	4639      	mov	r1, r7
 800eb4c:	4620      	mov	r0, r4
 800eb4e:	f000 fd03 	bl	800f558 <_Bfree>
 800eb52:	e695      	b.n	800e880 <_dtoa_r+0x6a0>
 800eb54:	2600      	movs	r6, #0
 800eb56:	4637      	mov	r7, r6
 800eb58:	e7e1      	b.n	800eb1e <_dtoa_r+0x93e>
 800eb5a:	9700      	str	r7, [sp, #0]
 800eb5c:	4637      	mov	r7, r6
 800eb5e:	e599      	b.n	800e694 <_dtoa_r+0x4b4>
 800eb60:	40240000 	.word	0x40240000
 800eb64:	9b08      	ldr	r3, [sp, #32]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	f000 80ca 	beq.w	800ed00 <_dtoa_r+0xb20>
 800eb6c:	9b03      	ldr	r3, [sp, #12]
 800eb6e:	9302      	str	r3, [sp, #8]
 800eb70:	2d00      	cmp	r5, #0
 800eb72:	dd05      	ble.n	800eb80 <_dtoa_r+0x9a0>
 800eb74:	4639      	mov	r1, r7
 800eb76:	462a      	mov	r2, r5
 800eb78:	4620      	mov	r0, r4
 800eb7a:	f000 ff09 	bl	800f990 <__lshift>
 800eb7e:	4607      	mov	r7, r0
 800eb80:	f1b8 0f00 	cmp.w	r8, #0
 800eb84:	d05b      	beq.n	800ec3e <_dtoa_r+0xa5e>
 800eb86:	6879      	ldr	r1, [r7, #4]
 800eb88:	4620      	mov	r0, r4
 800eb8a:	f000 fca5 	bl	800f4d8 <_Balloc>
 800eb8e:	4605      	mov	r5, r0
 800eb90:	b928      	cbnz	r0, 800eb9e <_dtoa_r+0x9be>
 800eb92:	4b87      	ldr	r3, [pc, #540]	; (800edb0 <_dtoa_r+0xbd0>)
 800eb94:	4602      	mov	r2, r0
 800eb96:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb9a:	f7ff bb3b 	b.w	800e214 <_dtoa_r+0x34>
 800eb9e:	693a      	ldr	r2, [r7, #16]
 800eba0:	3202      	adds	r2, #2
 800eba2:	0092      	lsls	r2, r2, #2
 800eba4:	f107 010c 	add.w	r1, r7, #12
 800eba8:	300c      	adds	r0, #12
 800ebaa:	f7fd fd29 	bl	800c600 <memcpy>
 800ebae:	2201      	movs	r2, #1
 800ebb0:	4629      	mov	r1, r5
 800ebb2:	4620      	mov	r0, r4
 800ebb4:	f000 feec 	bl	800f990 <__lshift>
 800ebb8:	9b01      	ldr	r3, [sp, #4]
 800ebba:	f103 0901 	add.w	r9, r3, #1
 800ebbe:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800ebc2:	4413      	add	r3, r2
 800ebc4:	9305      	str	r3, [sp, #20]
 800ebc6:	f00a 0301 	and.w	r3, sl, #1
 800ebca:	46b8      	mov	r8, r7
 800ebcc:	9304      	str	r3, [sp, #16]
 800ebce:	4607      	mov	r7, r0
 800ebd0:	4631      	mov	r1, r6
 800ebd2:	ee18 0a10 	vmov	r0, s16
 800ebd6:	f7ff fa77 	bl	800e0c8 <quorem>
 800ebda:	4641      	mov	r1, r8
 800ebdc:	9002      	str	r0, [sp, #8]
 800ebde:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ebe2:	ee18 0a10 	vmov	r0, s16
 800ebe6:	f000 ff43 	bl	800fa70 <__mcmp>
 800ebea:	463a      	mov	r2, r7
 800ebec:	9003      	str	r0, [sp, #12]
 800ebee:	4631      	mov	r1, r6
 800ebf0:	4620      	mov	r0, r4
 800ebf2:	f000 ff59 	bl	800faa8 <__mdiff>
 800ebf6:	68c2      	ldr	r2, [r0, #12]
 800ebf8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ebfc:	4605      	mov	r5, r0
 800ebfe:	bb02      	cbnz	r2, 800ec42 <_dtoa_r+0xa62>
 800ec00:	4601      	mov	r1, r0
 800ec02:	ee18 0a10 	vmov	r0, s16
 800ec06:	f000 ff33 	bl	800fa70 <__mcmp>
 800ec0a:	4602      	mov	r2, r0
 800ec0c:	4629      	mov	r1, r5
 800ec0e:	4620      	mov	r0, r4
 800ec10:	9207      	str	r2, [sp, #28]
 800ec12:	f000 fca1 	bl	800f558 <_Bfree>
 800ec16:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ec1a:	ea43 0102 	orr.w	r1, r3, r2
 800ec1e:	9b04      	ldr	r3, [sp, #16]
 800ec20:	430b      	orrs	r3, r1
 800ec22:	464d      	mov	r5, r9
 800ec24:	d10f      	bne.n	800ec46 <_dtoa_r+0xa66>
 800ec26:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec2a:	d02a      	beq.n	800ec82 <_dtoa_r+0xaa2>
 800ec2c:	9b03      	ldr	r3, [sp, #12]
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	dd02      	ble.n	800ec38 <_dtoa_r+0xa58>
 800ec32:	9b02      	ldr	r3, [sp, #8]
 800ec34:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec38:	f88b a000 	strb.w	sl, [fp]
 800ec3c:	e775      	b.n	800eb2a <_dtoa_r+0x94a>
 800ec3e:	4638      	mov	r0, r7
 800ec40:	e7ba      	b.n	800ebb8 <_dtoa_r+0x9d8>
 800ec42:	2201      	movs	r2, #1
 800ec44:	e7e2      	b.n	800ec0c <_dtoa_r+0xa2c>
 800ec46:	9b03      	ldr	r3, [sp, #12]
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	db04      	blt.n	800ec56 <_dtoa_r+0xa76>
 800ec4c:	9906      	ldr	r1, [sp, #24]
 800ec4e:	430b      	orrs	r3, r1
 800ec50:	9904      	ldr	r1, [sp, #16]
 800ec52:	430b      	orrs	r3, r1
 800ec54:	d122      	bne.n	800ec9c <_dtoa_r+0xabc>
 800ec56:	2a00      	cmp	r2, #0
 800ec58:	ddee      	ble.n	800ec38 <_dtoa_r+0xa58>
 800ec5a:	ee18 1a10 	vmov	r1, s16
 800ec5e:	2201      	movs	r2, #1
 800ec60:	4620      	mov	r0, r4
 800ec62:	f000 fe95 	bl	800f990 <__lshift>
 800ec66:	4631      	mov	r1, r6
 800ec68:	ee08 0a10 	vmov	s16, r0
 800ec6c:	f000 ff00 	bl	800fa70 <__mcmp>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	dc03      	bgt.n	800ec7c <_dtoa_r+0xa9c>
 800ec74:	d1e0      	bne.n	800ec38 <_dtoa_r+0xa58>
 800ec76:	f01a 0f01 	tst.w	sl, #1
 800ec7a:	d0dd      	beq.n	800ec38 <_dtoa_r+0xa58>
 800ec7c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec80:	d1d7      	bne.n	800ec32 <_dtoa_r+0xa52>
 800ec82:	2339      	movs	r3, #57	; 0x39
 800ec84:	f88b 3000 	strb.w	r3, [fp]
 800ec88:	462b      	mov	r3, r5
 800ec8a:	461d      	mov	r5, r3
 800ec8c:	3b01      	subs	r3, #1
 800ec8e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec92:	2a39      	cmp	r2, #57	; 0x39
 800ec94:	d071      	beq.n	800ed7a <_dtoa_r+0xb9a>
 800ec96:	3201      	adds	r2, #1
 800ec98:	701a      	strb	r2, [r3, #0]
 800ec9a:	e746      	b.n	800eb2a <_dtoa_r+0x94a>
 800ec9c:	2a00      	cmp	r2, #0
 800ec9e:	dd07      	ble.n	800ecb0 <_dtoa_r+0xad0>
 800eca0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800eca4:	d0ed      	beq.n	800ec82 <_dtoa_r+0xaa2>
 800eca6:	f10a 0301 	add.w	r3, sl, #1
 800ecaa:	f88b 3000 	strb.w	r3, [fp]
 800ecae:	e73c      	b.n	800eb2a <_dtoa_r+0x94a>
 800ecb0:	9b05      	ldr	r3, [sp, #20]
 800ecb2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ecb6:	4599      	cmp	r9, r3
 800ecb8:	d047      	beq.n	800ed4a <_dtoa_r+0xb6a>
 800ecba:	ee18 1a10 	vmov	r1, s16
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	220a      	movs	r2, #10
 800ecc2:	4620      	mov	r0, r4
 800ecc4:	f000 fc6a 	bl	800f59c <__multadd>
 800ecc8:	45b8      	cmp	r8, r7
 800ecca:	ee08 0a10 	vmov	s16, r0
 800ecce:	f04f 0300 	mov.w	r3, #0
 800ecd2:	f04f 020a 	mov.w	r2, #10
 800ecd6:	4641      	mov	r1, r8
 800ecd8:	4620      	mov	r0, r4
 800ecda:	d106      	bne.n	800ecea <_dtoa_r+0xb0a>
 800ecdc:	f000 fc5e 	bl	800f59c <__multadd>
 800ece0:	4680      	mov	r8, r0
 800ece2:	4607      	mov	r7, r0
 800ece4:	f109 0901 	add.w	r9, r9, #1
 800ece8:	e772      	b.n	800ebd0 <_dtoa_r+0x9f0>
 800ecea:	f000 fc57 	bl	800f59c <__multadd>
 800ecee:	4639      	mov	r1, r7
 800ecf0:	4680      	mov	r8, r0
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	220a      	movs	r2, #10
 800ecf6:	4620      	mov	r0, r4
 800ecf8:	f000 fc50 	bl	800f59c <__multadd>
 800ecfc:	4607      	mov	r7, r0
 800ecfe:	e7f1      	b.n	800ece4 <_dtoa_r+0xb04>
 800ed00:	9b03      	ldr	r3, [sp, #12]
 800ed02:	9302      	str	r3, [sp, #8]
 800ed04:	9d01      	ldr	r5, [sp, #4]
 800ed06:	ee18 0a10 	vmov	r0, s16
 800ed0a:	4631      	mov	r1, r6
 800ed0c:	f7ff f9dc 	bl	800e0c8 <quorem>
 800ed10:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ed14:	9b01      	ldr	r3, [sp, #4]
 800ed16:	f805 ab01 	strb.w	sl, [r5], #1
 800ed1a:	1aea      	subs	r2, r5, r3
 800ed1c:	9b02      	ldr	r3, [sp, #8]
 800ed1e:	4293      	cmp	r3, r2
 800ed20:	dd09      	ble.n	800ed36 <_dtoa_r+0xb56>
 800ed22:	ee18 1a10 	vmov	r1, s16
 800ed26:	2300      	movs	r3, #0
 800ed28:	220a      	movs	r2, #10
 800ed2a:	4620      	mov	r0, r4
 800ed2c:	f000 fc36 	bl	800f59c <__multadd>
 800ed30:	ee08 0a10 	vmov	s16, r0
 800ed34:	e7e7      	b.n	800ed06 <_dtoa_r+0xb26>
 800ed36:	9b02      	ldr	r3, [sp, #8]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	bfc8      	it	gt
 800ed3c:	461d      	movgt	r5, r3
 800ed3e:	9b01      	ldr	r3, [sp, #4]
 800ed40:	bfd8      	it	le
 800ed42:	2501      	movle	r5, #1
 800ed44:	441d      	add	r5, r3
 800ed46:	f04f 0800 	mov.w	r8, #0
 800ed4a:	ee18 1a10 	vmov	r1, s16
 800ed4e:	2201      	movs	r2, #1
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 fe1d 	bl	800f990 <__lshift>
 800ed56:	4631      	mov	r1, r6
 800ed58:	ee08 0a10 	vmov	s16, r0
 800ed5c:	f000 fe88 	bl	800fa70 <__mcmp>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	dc91      	bgt.n	800ec88 <_dtoa_r+0xaa8>
 800ed64:	d102      	bne.n	800ed6c <_dtoa_r+0xb8c>
 800ed66:	f01a 0f01 	tst.w	sl, #1
 800ed6a:	d18d      	bne.n	800ec88 <_dtoa_r+0xaa8>
 800ed6c:	462b      	mov	r3, r5
 800ed6e:	461d      	mov	r5, r3
 800ed70:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed74:	2a30      	cmp	r2, #48	; 0x30
 800ed76:	d0fa      	beq.n	800ed6e <_dtoa_r+0xb8e>
 800ed78:	e6d7      	b.n	800eb2a <_dtoa_r+0x94a>
 800ed7a:	9a01      	ldr	r2, [sp, #4]
 800ed7c:	429a      	cmp	r2, r3
 800ed7e:	d184      	bne.n	800ec8a <_dtoa_r+0xaaa>
 800ed80:	9b00      	ldr	r3, [sp, #0]
 800ed82:	3301      	adds	r3, #1
 800ed84:	9300      	str	r3, [sp, #0]
 800ed86:	2331      	movs	r3, #49	; 0x31
 800ed88:	7013      	strb	r3, [r2, #0]
 800ed8a:	e6ce      	b.n	800eb2a <_dtoa_r+0x94a>
 800ed8c:	4b09      	ldr	r3, [pc, #36]	; (800edb4 <_dtoa_r+0xbd4>)
 800ed8e:	f7ff ba95 	b.w	800e2bc <_dtoa_r+0xdc>
 800ed92:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	f47f aa6e 	bne.w	800e276 <_dtoa_r+0x96>
 800ed9a:	4b07      	ldr	r3, [pc, #28]	; (800edb8 <_dtoa_r+0xbd8>)
 800ed9c:	f7ff ba8e 	b.w	800e2bc <_dtoa_r+0xdc>
 800eda0:	9b02      	ldr	r3, [sp, #8]
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	dcae      	bgt.n	800ed04 <_dtoa_r+0xb24>
 800eda6:	9b06      	ldr	r3, [sp, #24]
 800eda8:	2b02      	cmp	r3, #2
 800edaa:	f73f aea8 	bgt.w	800eafe <_dtoa_r+0x91e>
 800edae:	e7a9      	b.n	800ed04 <_dtoa_r+0xb24>
 800edb0:	080127b0 	.word	0x080127b0
 800edb4:	080125b4 	.word	0x080125b4
 800edb8:	08012731 	.word	0x08012731

0800edbc <rshift>:
 800edbc:	6903      	ldr	r3, [r0, #16]
 800edbe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800edc2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800edc6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800edca:	f100 0414 	add.w	r4, r0, #20
 800edce:	dd45      	ble.n	800ee5c <rshift+0xa0>
 800edd0:	f011 011f 	ands.w	r1, r1, #31
 800edd4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800edd8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eddc:	d10c      	bne.n	800edf8 <rshift+0x3c>
 800edde:	f100 0710 	add.w	r7, r0, #16
 800ede2:	4629      	mov	r1, r5
 800ede4:	42b1      	cmp	r1, r6
 800ede6:	d334      	bcc.n	800ee52 <rshift+0x96>
 800ede8:	1a9b      	subs	r3, r3, r2
 800edea:	009b      	lsls	r3, r3, #2
 800edec:	1eea      	subs	r2, r5, #3
 800edee:	4296      	cmp	r6, r2
 800edf0:	bf38      	it	cc
 800edf2:	2300      	movcc	r3, #0
 800edf4:	4423      	add	r3, r4
 800edf6:	e015      	b.n	800ee24 <rshift+0x68>
 800edf8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edfc:	f1c1 0820 	rsb	r8, r1, #32
 800ee00:	40cf      	lsrs	r7, r1
 800ee02:	f105 0e04 	add.w	lr, r5, #4
 800ee06:	46a1      	mov	r9, r4
 800ee08:	4576      	cmp	r6, lr
 800ee0a:	46f4      	mov	ip, lr
 800ee0c:	d815      	bhi.n	800ee3a <rshift+0x7e>
 800ee0e:	1a9a      	subs	r2, r3, r2
 800ee10:	0092      	lsls	r2, r2, #2
 800ee12:	3a04      	subs	r2, #4
 800ee14:	3501      	adds	r5, #1
 800ee16:	42ae      	cmp	r6, r5
 800ee18:	bf38      	it	cc
 800ee1a:	2200      	movcc	r2, #0
 800ee1c:	18a3      	adds	r3, r4, r2
 800ee1e:	50a7      	str	r7, [r4, r2]
 800ee20:	b107      	cbz	r7, 800ee24 <rshift+0x68>
 800ee22:	3304      	adds	r3, #4
 800ee24:	1b1a      	subs	r2, r3, r4
 800ee26:	42a3      	cmp	r3, r4
 800ee28:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ee2c:	bf08      	it	eq
 800ee2e:	2300      	moveq	r3, #0
 800ee30:	6102      	str	r2, [r0, #16]
 800ee32:	bf08      	it	eq
 800ee34:	6143      	streq	r3, [r0, #20]
 800ee36:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee3a:	f8dc c000 	ldr.w	ip, [ip]
 800ee3e:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee42:	ea4c 0707 	orr.w	r7, ip, r7
 800ee46:	f849 7b04 	str.w	r7, [r9], #4
 800ee4a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee4e:	40cf      	lsrs	r7, r1
 800ee50:	e7da      	b.n	800ee08 <rshift+0x4c>
 800ee52:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee56:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee5a:	e7c3      	b.n	800ede4 <rshift+0x28>
 800ee5c:	4623      	mov	r3, r4
 800ee5e:	e7e1      	b.n	800ee24 <rshift+0x68>

0800ee60 <__hexdig_fun>:
 800ee60:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee64:	2b09      	cmp	r3, #9
 800ee66:	d802      	bhi.n	800ee6e <__hexdig_fun+0xe>
 800ee68:	3820      	subs	r0, #32
 800ee6a:	b2c0      	uxtb	r0, r0
 800ee6c:	4770      	bx	lr
 800ee6e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee72:	2b05      	cmp	r3, #5
 800ee74:	d801      	bhi.n	800ee7a <__hexdig_fun+0x1a>
 800ee76:	3847      	subs	r0, #71	; 0x47
 800ee78:	e7f7      	b.n	800ee6a <__hexdig_fun+0xa>
 800ee7a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee7e:	2b05      	cmp	r3, #5
 800ee80:	d801      	bhi.n	800ee86 <__hexdig_fun+0x26>
 800ee82:	3827      	subs	r0, #39	; 0x27
 800ee84:	e7f1      	b.n	800ee6a <__hexdig_fun+0xa>
 800ee86:	2000      	movs	r0, #0
 800ee88:	4770      	bx	lr
	...

0800ee8c <__gethex>:
 800ee8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee90:	ed2d 8b02 	vpush	{d8}
 800ee94:	b089      	sub	sp, #36	; 0x24
 800ee96:	ee08 0a10 	vmov	s16, r0
 800ee9a:	9304      	str	r3, [sp, #16]
 800ee9c:	4bb4      	ldr	r3, [pc, #720]	; (800f170 <__gethex+0x2e4>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	9301      	str	r3, [sp, #4]
 800eea2:	4618      	mov	r0, r3
 800eea4:	468b      	mov	fp, r1
 800eea6:	4690      	mov	r8, r2
 800eea8:	f7f1 f99a 	bl	80001e0 <strlen>
 800eeac:	9b01      	ldr	r3, [sp, #4]
 800eeae:	f8db 2000 	ldr.w	r2, [fp]
 800eeb2:	4403      	add	r3, r0
 800eeb4:	4682      	mov	sl, r0
 800eeb6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800eeba:	9305      	str	r3, [sp, #20]
 800eebc:	1c93      	adds	r3, r2, #2
 800eebe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800eec2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800eec6:	32fe      	adds	r2, #254	; 0xfe
 800eec8:	18d1      	adds	r1, r2, r3
 800eeca:	461f      	mov	r7, r3
 800eecc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800eed0:	9100      	str	r1, [sp, #0]
 800eed2:	2830      	cmp	r0, #48	; 0x30
 800eed4:	d0f8      	beq.n	800eec8 <__gethex+0x3c>
 800eed6:	f7ff ffc3 	bl	800ee60 <__hexdig_fun>
 800eeda:	4604      	mov	r4, r0
 800eedc:	2800      	cmp	r0, #0
 800eede:	d13a      	bne.n	800ef56 <__gethex+0xca>
 800eee0:	9901      	ldr	r1, [sp, #4]
 800eee2:	4652      	mov	r2, sl
 800eee4:	4638      	mov	r0, r7
 800eee6:	f001 fa23 	bl	8010330 <strncmp>
 800eeea:	4605      	mov	r5, r0
 800eeec:	2800      	cmp	r0, #0
 800eeee:	d168      	bne.n	800efc2 <__gethex+0x136>
 800eef0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eef4:	eb07 060a 	add.w	r6, r7, sl
 800eef8:	f7ff ffb2 	bl	800ee60 <__hexdig_fun>
 800eefc:	2800      	cmp	r0, #0
 800eefe:	d062      	beq.n	800efc6 <__gethex+0x13a>
 800ef00:	4633      	mov	r3, r6
 800ef02:	7818      	ldrb	r0, [r3, #0]
 800ef04:	2830      	cmp	r0, #48	; 0x30
 800ef06:	461f      	mov	r7, r3
 800ef08:	f103 0301 	add.w	r3, r3, #1
 800ef0c:	d0f9      	beq.n	800ef02 <__gethex+0x76>
 800ef0e:	f7ff ffa7 	bl	800ee60 <__hexdig_fun>
 800ef12:	2301      	movs	r3, #1
 800ef14:	fab0 f480 	clz	r4, r0
 800ef18:	0964      	lsrs	r4, r4, #5
 800ef1a:	4635      	mov	r5, r6
 800ef1c:	9300      	str	r3, [sp, #0]
 800ef1e:	463a      	mov	r2, r7
 800ef20:	4616      	mov	r6, r2
 800ef22:	3201      	adds	r2, #1
 800ef24:	7830      	ldrb	r0, [r6, #0]
 800ef26:	f7ff ff9b 	bl	800ee60 <__hexdig_fun>
 800ef2a:	2800      	cmp	r0, #0
 800ef2c:	d1f8      	bne.n	800ef20 <__gethex+0x94>
 800ef2e:	9901      	ldr	r1, [sp, #4]
 800ef30:	4652      	mov	r2, sl
 800ef32:	4630      	mov	r0, r6
 800ef34:	f001 f9fc 	bl	8010330 <strncmp>
 800ef38:	b980      	cbnz	r0, 800ef5c <__gethex+0xd0>
 800ef3a:	b94d      	cbnz	r5, 800ef50 <__gethex+0xc4>
 800ef3c:	eb06 050a 	add.w	r5, r6, sl
 800ef40:	462a      	mov	r2, r5
 800ef42:	4616      	mov	r6, r2
 800ef44:	3201      	adds	r2, #1
 800ef46:	7830      	ldrb	r0, [r6, #0]
 800ef48:	f7ff ff8a 	bl	800ee60 <__hexdig_fun>
 800ef4c:	2800      	cmp	r0, #0
 800ef4e:	d1f8      	bne.n	800ef42 <__gethex+0xb6>
 800ef50:	1bad      	subs	r5, r5, r6
 800ef52:	00ad      	lsls	r5, r5, #2
 800ef54:	e004      	b.n	800ef60 <__gethex+0xd4>
 800ef56:	2400      	movs	r4, #0
 800ef58:	4625      	mov	r5, r4
 800ef5a:	e7e0      	b.n	800ef1e <__gethex+0x92>
 800ef5c:	2d00      	cmp	r5, #0
 800ef5e:	d1f7      	bne.n	800ef50 <__gethex+0xc4>
 800ef60:	7833      	ldrb	r3, [r6, #0]
 800ef62:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef66:	2b50      	cmp	r3, #80	; 0x50
 800ef68:	d13b      	bne.n	800efe2 <__gethex+0x156>
 800ef6a:	7873      	ldrb	r3, [r6, #1]
 800ef6c:	2b2b      	cmp	r3, #43	; 0x2b
 800ef6e:	d02c      	beq.n	800efca <__gethex+0x13e>
 800ef70:	2b2d      	cmp	r3, #45	; 0x2d
 800ef72:	d02e      	beq.n	800efd2 <__gethex+0x146>
 800ef74:	1c71      	adds	r1, r6, #1
 800ef76:	f04f 0900 	mov.w	r9, #0
 800ef7a:	7808      	ldrb	r0, [r1, #0]
 800ef7c:	f7ff ff70 	bl	800ee60 <__hexdig_fun>
 800ef80:	1e43      	subs	r3, r0, #1
 800ef82:	b2db      	uxtb	r3, r3
 800ef84:	2b18      	cmp	r3, #24
 800ef86:	d82c      	bhi.n	800efe2 <__gethex+0x156>
 800ef88:	f1a0 0210 	sub.w	r2, r0, #16
 800ef8c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef90:	f7ff ff66 	bl	800ee60 <__hexdig_fun>
 800ef94:	1e43      	subs	r3, r0, #1
 800ef96:	b2db      	uxtb	r3, r3
 800ef98:	2b18      	cmp	r3, #24
 800ef9a:	d91d      	bls.n	800efd8 <__gethex+0x14c>
 800ef9c:	f1b9 0f00 	cmp.w	r9, #0
 800efa0:	d000      	beq.n	800efa4 <__gethex+0x118>
 800efa2:	4252      	negs	r2, r2
 800efa4:	4415      	add	r5, r2
 800efa6:	f8cb 1000 	str.w	r1, [fp]
 800efaa:	b1e4      	cbz	r4, 800efe6 <__gethex+0x15a>
 800efac:	9b00      	ldr	r3, [sp, #0]
 800efae:	2b00      	cmp	r3, #0
 800efb0:	bf14      	ite	ne
 800efb2:	2700      	movne	r7, #0
 800efb4:	2706      	moveq	r7, #6
 800efb6:	4638      	mov	r0, r7
 800efb8:	b009      	add	sp, #36	; 0x24
 800efba:	ecbd 8b02 	vpop	{d8}
 800efbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efc2:	463e      	mov	r6, r7
 800efc4:	4625      	mov	r5, r4
 800efc6:	2401      	movs	r4, #1
 800efc8:	e7ca      	b.n	800ef60 <__gethex+0xd4>
 800efca:	f04f 0900 	mov.w	r9, #0
 800efce:	1cb1      	adds	r1, r6, #2
 800efd0:	e7d3      	b.n	800ef7a <__gethex+0xee>
 800efd2:	f04f 0901 	mov.w	r9, #1
 800efd6:	e7fa      	b.n	800efce <__gethex+0x142>
 800efd8:	230a      	movs	r3, #10
 800efda:	fb03 0202 	mla	r2, r3, r2, r0
 800efde:	3a10      	subs	r2, #16
 800efe0:	e7d4      	b.n	800ef8c <__gethex+0x100>
 800efe2:	4631      	mov	r1, r6
 800efe4:	e7df      	b.n	800efa6 <__gethex+0x11a>
 800efe6:	1bf3      	subs	r3, r6, r7
 800efe8:	3b01      	subs	r3, #1
 800efea:	4621      	mov	r1, r4
 800efec:	2b07      	cmp	r3, #7
 800efee:	dc0b      	bgt.n	800f008 <__gethex+0x17c>
 800eff0:	ee18 0a10 	vmov	r0, s16
 800eff4:	f000 fa70 	bl	800f4d8 <_Balloc>
 800eff8:	4604      	mov	r4, r0
 800effa:	b940      	cbnz	r0, 800f00e <__gethex+0x182>
 800effc:	4b5d      	ldr	r3, [pc, #372]	; (800f174 <__gethex+0x2e8>)
 800effe:	4602      	mov	r2, r0
 800f000:	21de      	movs	r1, #222	; 0xde
 800f002:	485d      	ldr	r0, [pc, #372]	; (800f178 <__gethex+0x2ec>)
 800f004:	f001 f9b6 	bl	8010374 <__assert_func>
 800f008:	3101      	adds	r1, #1
 800f00a:	105b      	asrs	r3, r3, #1
 800f00c:	e7ee      	b.n	800efec <__gethex+0x160>
 800f00e:	f100 0914 	add.w	r9, r0, #20
 800f012:	f04f 0b00 	mov.w	fp, #0
 800f016:	f1ca 0301 	rsb	r3, sl, #1
 800f01a:	f8cd 9008 	str.w	r9, [sp, #8]
 800f01e:	f8cd b000 	str.w	fp, [sp]
 800f022:	9306      	str	r3, [sp, #24]
 800f024:	42b7      	cmp	r7, r6
 800f026:	d340      	bcc.n	800f0aa <__gethex+0x21e>
 800f028:	9802      	ldr	r0, [sp, #8]
 800f02a:	9b00      	ldr	r3, [sp, #0]
 800f02c:	f840 3b04 	str.w	r3, [r0], #4
 800f030:	eba0 0009 	sub.w	r0, r0, r9
 800f034:	1080      	asrs	r0, r0, #2
 800f036:	0146      	lsls	r6, r0, #5
 800f038:	6120      	str	r0, [r4, #16]
 800f03a:	4618      	mov	r0, r3
 800f03c:	f000 fb3e 	bl	800f6bc <__hi0bits>
 800f040:	1a30      	subs	r0, r6, r0
 800f042:	f8d8 6000 	ldr.w	r6, [r8]
 800f046:	42b0      	cmp	r0, r6
 800f048:	dd63      	ble.n	800f112 <__gethex+0x286>
 800f04a:	1b87      	subs	r7, r0, r6
 800f04c:	4639      	mov	r1, r7
 800f04e:	4620      	mov	r0, r4
 800f050:	f000 fee2 	bl	800fe18 <__any_on>
 800f054:	4682      	mov	sl, r0
 800f056:	b1a8      	cbz	r0, 800f084 <__gethex+0x1f8>
 800f058:	1e7b      	subs	r3, r7, #1
 800f05a:	1159      	asrs	r1, r3, #5
 800f05c:	f003 021f 	and.w	r2, r3, #31
 800f060:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f064:	f04f 0a01 	mov.w	sl, #1
 800f068:	fa0a f202 	lsl.w	r2, sl, r2
 800f06c:	420a      	tst	r2, r1
 800f06e:	d009      	beq.n	800f084 <__gethex+0x1f8>
 800f070:	4553      	cmp	r3, sl
 800f072:	dd05      	ble.n	800f080 <__gethex+0x1f4>
 800f074:	1eb9      	subs	r1, r7, #2
 800f076:	4620      	mov	r0, r4
 800f078:	f000 fece 	bl	800fe18 <__any_on>
 800f07c:	2800      	cmp	r0, #0
 800f07e:	d145      	bne.n	800f10c <__gethex+0x280>
 800f080:	f04f 0a02 	mov.w	sl, #2
 800f084:	4639      	mov	r1, r7
 800f086:	4620      	mov	r0, r4
 800f088:	f7ff fe98 	bl	800edbc <rshift>
 800f08c:	443d      	add	r5, r7
 800f08e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f092:	42ab      	cmp	r3, r5
 800f094:	da4c      	bge.n	800f130 <__gethex+0x2a4>
 800f096:	ee18 0a10 	vmov	r0, s16
 800f09a:	4621      	mov	r1, r4
 800f09c:	f000 fa5c 	bl	800f558 <_Bfree>
 800f0a0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f0a2:	2300      	movs	r3, #0
 800f0a4:	6013      	str	r3, [r2, #0]
 800f0a6:	27a3      	movs	r7, #163	; 0xa3
 800f0a8:	e785      	b.n	800efb6 <__gethex+0x12a>
 800f0aa:	1e73      	subs	r3, r6, #1
 800f0ac:	9a05      	ldr	r2, [sp, #20]
 800f0ae:	9303      	str	r3, [sp, #12]
 800f0b0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	d019      	beq.n	800f0ec <__gethex+0x260>
 800f0b8:	f1bb 0f20 	cmp.w	fp, #32
 800f0bc:	d107      	bne.n	800f0ce <__gethex+0x242>
 800f0be:	9b02      	ldr	r3, [sp, #8]
 800f0c0:	9a00      	ldr	r2, [sp, #0]
 800f0c2:	f843 2b04 	str.w	r2, [r3], #4
 800f0c6:	9302      	str	r3, [sp, #8]
 800f0c8:	2300      	movs	r3, #0
 800f0ca:	9300      	str	r3, [sp, #0]
 800f0cc:	469b      	mov	fp, r3
 800f0ce:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f0d2:	f7ff fec5 	bl	800ee60 <__hexdig_fun>
 800f0d6:	9b00      	ldr	r3, [sp, #0]
 800f0d8:	f000 000f 	and.w	r0, r0, #15
 800f0dc:	fa00 f00b 	lsl.w	r0, r0, fp
 800f0e0:	4303      	orrs	r3, r0
 800f0e2:	9300      	str	r3, [sp, #0]
 800f0e4:	f10b 0b04 	add.w	fp, fp, #4
 800f0e8:	9b03      	ldr	r3, [sp, #12]
 800f0ea:	e00d      	b.n	800f108 <__gethex+0x27c>
 800f0ec:	9b03      	ldr	r3, [sp, #12]
 800f0ee:	9a06      	ldr	r2, [sp, #24]
 800f0f0:	4413      	add	r3, r2
 800f0f2:	42bb      	cmp	r3, r7
 800f0f4:	d3e0      	bcc.n	800f0b8 <__gethex+0x22c>
 800f0f6:	4618      	mov	r0, r3
 800f0f8:	9901      	ldr	r1, [sp, #4]
 800f0fa:	9307      	str	r3, [sp, #28]
 800f0fc:	4652      	mov	r2, sl
 800f0fe:	f001 f917 	bl	8010330 <strncmp>
 800f102:	9b07      	ldr	r3, [sp, #28]
 800f104:	2800      	cmp	r0, #0
 800f106:	d1d7      	bne.n	800f0b8 <__gethex+0x22c>
 800f108:	461e      	mov	r6, r3
 800f10a:	e78b      	b.n	800f024 <__gethex+0x198>
 800f10c:	f04f 0a03 	mov.w	sl, #3
 800f110:	e7b8      	b.n	800f084 <__gethex+0x1f8>
 800f112:	da0a      	bge.n	800f12a <__gethex+0x29e>
 800f114:	1a37      	subs	r7, r6, r0
 800f116:	4621      	mov	r1, r4
 800f118:	ee18 0a10 	vmov	r0, s16
 800f11c:	463a      	mov	r2, r7
 800f11e:	f000 fc37 	bl	800f990 <__lshift>
 800f122:	1bed      	subs	r5, r5, r7
 800f124:	4604      	mov	r4, r0
 800f126:	f100 0914 	add.w	r9, r0, #20
 800f12a:	f04f 0a00 	mov.w	sl, #0
 800f12e:	e7ae      	b.n	800f08e <__gethex+0x202>
 800f130:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f134:	42a8      	cmp	r0, r5
 800f136:	dd72      	ble.n	800f21e <__gethex+0x392>
 800f138:	1b45      	subs	r5, r0, r5
 800f13a:	42ae      	cmp	r6, r5
 800f13c:	dc36      	bgt.n	800f1ac <__gethex+0x320>
 800f13e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f142:	2b02      	cmp	r3, #2
 800f144:	d02a      	beq.n	800f19c <__gethex+0x310>
 800f146:	2b03      	cmp	r3, #3
 800f148:	d02c      	beq.n	800f1a4 <__gethex+0x318>
 800f14a:	2b01      	cmp	r3, #1
 800f14c:	d11c      	bne.n	800f188 <__gethex+0x2fc>
 800f14e:	42ae      	cmp	r6, r5
 800f150:	d11a      	bne.n	800f188 <__gethex+0x2fc>
 800f152:	2e01      	cmp	r6, #1
 800f154:	d112      	bne.n	800f17c <__gethex+0x2f0>
 800f156:	9a04      	ldr	r2, [sp, #16]
 800f158:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f15c:	6013      	str	r3, [r2, #0]
 800f15e:	2301      	movs	r3, #1
 800f160:	6123      	str	r3, [r4, #16]
 800f162:	f8c9 3000 	str.w	r3, [r9]
 800f166:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f168:	2762      	movs	r7, #98	; 0x62
 800f16a:	601c      	str	r4, [r3, #0]
 800f16c:	e723      	b.n	800efb6 <__gethex+0x12a>
 800f16e:	bf00      	nop
 800f170:	08012828 	.word	0x08012828
 800f174:	080127b0 	.word	0x080127b0
 800f178:	080127c1 	.word	0x080127c1
 800f17c:	1e71      	subs	r1, r6, #1
 800f17e:	4620      	mov	r0, r4
 800f180:	f000 fe4a 	bl	800fe18 <__any_on>
 800f184:	2800      	cmp	r0, #0
 800f186:	d1e6      	bne.n	800f156 <__gethex+0x2ca>
 800f188:	ee18 0a10 	vmov	r0, s16
 800f18c:	4621      	mov	r1, r4
 800f18e:	f000 f9e3 	bl	800f558 <_Bfree>
 800f192:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f194:	2300      	movs	r3, #0
 800f196:	6013      	str	r3, [r2, #0]
 800f198:	2750      	movs	r7, #80	; 0x50
 800f19a:	e70c      	b.n	800efb6 <__gethex+0x12a>
 800f19c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f19e:	2b00      	cmp	r3, #0
 800f1a0:	d1f2      	bne.n	800f188 <__gethex+0x2fc>
 800f1a2:	e7d8      	b.n	800f156 <__gethex+0x2ca>
 800f1a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1a6:	2b00      	cmp	r3, #0
 800f1a8:	d1d5      	bne.n	800f156 <__gethex+0x2ca>
 800f1aa:	e7ed      	b.n	800f188 <__gethex+0x2fc>
 800f1ac:	1e6f      	subs	r7, r5, #1
 800f1ae:	f1ba 0f00 	cmp.w	sl, #0
 800f1b2:	d131      	bne.n	800f218 <__gethex+0x38c>
 800f1b4:	b127      	cbz	r7, 800f1c0 <__gethex+0x334>
 800f1b6:	4639      	mov	r1, r7
 800f1b8:	4620      	mov	r0, r4
 800f1ba:	f000 fe2d 	bl	800fe18 <__any_on>
 800f1be:	4682      	mov	sl, r0
 800f1c0:	117b      	asrs	r3, r7, #5
 800f1c2:	2101      	movs	r1, #1
 800f1c4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f1c8:	f007 071f 	and.w	r7, r7, #31
 800f1cc:	fa01 f707 	lsl.w	r7, r1, r7
 800f1d0:	421f      	tst	r7, r3
 800f1d2:	4629      	mov	r1, r5
 800f1d4:	4620      	mov	r0, r4
 800f1d6:	bf18      	it	ne
 800f1d8:	f04a 0a02 	orrne.w	sl, sl, #2
 800f1dc:	1b76      	subs	r6, r6, r5
 800f1de:	f7ff fded 	bl	800edbc <rshift>
 800f1e2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f1e6:	2702      	movs	r7, #2
 800f1e8:	f1ba 0f00 	cmp.w	sl, #0
 800f1ec:	d048      	beq.n	800f280 <__gethex+0x3f4>
 800f1ee:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1f2:	2b02      	cmp	r3, #2
 800f1f4:	d015      	beq.n	800f222 <__gethex+0x396>
 800f1f6:	2b03      	cmp	r3, #3
 800f1f8:	d017      	beq.n	800f22a <__gethex+0x39e>
 800f1fa:	2b01      	cmp	r3, #1
 800f1fc:	d109      	bne.n	800f212 <__gethex+0x386>
 800f1fe:	f01a 0f02 	tst.w	sl, #2
 800f202:	d006      	beq.n	800f212 <__gethex+0x386>
 800f204:	f8d9 0000 	ldr.w	r0, [r9]
 800f208:	ea4a 0a00 	orr.w	sl, sl, r0
 800f20c:	f01a 0f01 	tst.w	sl, #1
 800f210:	d10e      	bne.n	800f230 <__gethex+0x3a4>
 800f212:	f047 0710 	orr.w	r7, r7, #16
 800f216:	e033      	b.n	800f280 <__gethex+0x3f4>
 800f218:	f04f 0a01 	mov.w	sl, #1
 800f21c:	e7d0      	b.n	800f1c0 <__gethex+0x334>
 800f21e:	2701      	movs	r7, #1
 800f220:	e7e2      	b.n	800f1e8 <__gethex+0x35c>
 800f222:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f224:	f1c3 0301 	rsb	r3, r3, #1
 800f228:	9315      	str	r3, [sp, #84]	; 0x54
 800f22a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d0f0      	beq.n	800f212 <__gethex+0x386>
 800f230:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f234:	f104 0314 	add.w	r3, r4, #20
 800f238:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f23c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f240:	f04f 0c00 	mov.w	ip, #0
 800f244:	4618      	mov	r0, r3
 800f246:	f853 2b04 	ldr.w	r2, [r3], #4
 800f24a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f24e:	d01c      	beq.n	800f28a <__gethex+0x3fe>
 800f250:	3201      	adds	r2, #1
 800f252:	6002      	str	r2, [r0, #0]
 800f254:	2f02      	cmp	r7, #2
 800f256:	f104 0314 	add.w	r3, r4, #20
 800f25a:	d13f      	bne.n	800f2dc <__gethex+0x450>
 800f25c:	f8d8 2000 	ldr.w	r2, [r8]
 800f260:	3a01      	subs	r2, #1
 800f262:	42b2      	cmp	r2, r6
 800f264:	d10a      	bne.n	800f27c <__gethex+0x3f0>
 800f266:	1171      	asrs	r1, r6, #5
 800f268:	2201      	movs	r2, #1
 800f26a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f26e:	f006 061f 	and.w	r6, r6, #31
 800f272:	fa02 f606 	lsl.w	r6, r2, r6
 800f276:	421e      	tst	r6, r3
 800f278:	bf18      	it	ne
 800f27a:	4617      	movne	r7, r2
 800f27c:	f047 0720 	orr.w	r7, r7, #32
 800f280:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f282:	601c      	str	r4, [r3, #0]
 800f284:	9b04      	ldr	r3, [sp, #16]
 800f286:	601d      	str	r5, [r3, #0]
 800f288:	e695      	b.n	800efb6 <__gethex+0x12a>
 800f28a:	4299      	cmp	r1, r3
 800f28c:	f843 cc04 	str.w	ip, [r3, #-4]
 800f290:	d8d8      	bhi.n	800f244 <__gethex+0x3b8>
 800f292:	68a3      	ldr	r3, [r4, #8]
 800f294:	459b      	cmp	fp, r3
 800f296:	db19      	blt.n	800f2cc <__gethex+0x440>
 800f298:	6861      	ldr	r1, [r4, #4]
 800f29a:	ee18 0a10 	vmov	r0, s16
 800f29e:	3101      	adds	r1, #1
 800f2a0:	f000 f91a 	bl	800f4d8 <_Balloc>
 800f2a4:	4681      	mov	r9, r0
 800f2a6:	b918      	cbnz	r0, 800f2b0 <__gethex+0x424>
 800f2a8:	4b1a      	ldr	r3, [pc, #104]	; (800f314 <__gethex+0x488>)
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	2184      	movs	r1, #132	; 0x84
 800f2ae:	e6a8      	b.n	800f002 <__gethex+0x176>
 800f2b0:	6922      	ldr	r2, [r4, #16]
 800f2b2:	3202      	adds	r2, #2
 800f2b4:	f104 010c 	add.w	r1, r4, #12
 800f2b8:	0092      	lsls	r2, r2, #2
 800f2ba:	300c      	adds	r0, #12
 800f2bc:	f7fd f9a0 	bl	800c600 <memcpy>
 800f2c0:	4621      	mov	r1, r4
 800f2c2:	ee18 0a10 	vmov	r0, s16
 800f2c6:	f000 f947 	bl	800f558 <_Bfree>
 800f2ca:	464c      	mov	r4, r9
 800f2cc:	6923      	ldr	r3, [r4, #16]
 800f2ce:	1c5a      	adds	r2, r3, #1
 800f2d0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f2d4:	6122      	str	r2, [r4, #16]
 800f2d6:	2201      	movs	r2, #1
 800f2d8:	615a      	str	r2, [r3, #20]
 800f2da:	e7bb      	b.n	800f254 <__gethex+0x3c8>
 800f2dc:	6922      	ldr	r2, [r4, #16]
 800f2de:	455a      	cmp	r2, fp
 800f2e0:	dd0b      	ble.n	800f2fa <__gethex+0x46e>
 800f2e2:	2101      	movs	r1, #1
 800f2e4:	4620      	mov	r0, r4
 800f2e6:	f7ff fd69 	bl	800edbc <rshift>
 800f2ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2ee:	3501      	adds	r5, #1
 800f2f0:	42ab      	cmp	r3, r5
 800f2f2:	f6ff aed0 	blt.w	800f096 <__gethex+0x20a>
 800f2f6:	2701      	movs	r7, #1
 800f2f8:	e7c0      	b.n	800f27c <__gethex+0x3f0>
 800f2fa:	f016 061f 	ands.w	r6, r6, #31
 800f2fe:	d0fa      	beq.n	800f2f6 <__gethex+0x46a>
 800f300:	4453      	add	r3, sl
 800f302:	f1c6 0620 	rsb	r6, r6, #32
 800f306:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f30a:	f000 f9d7 	bl	800f6bc <__hi0bits>
 800f30e:	42b0      	cmp	r0, r6
 800f310:	dbe7      	blt.n	800f2e2 <__gethex+0x456>
 800f312:	e7f0      	b.n	800f2f6 <__gethex+0x46a>
 800f314:	080127b0 	.word	0x080127b0

0800f318 <L_shift>:
 800f318:	f1c2 0208 	rsb	r2, r2, #8
 800f31c:	0092      	lsls	r2, r2, #2
 800f31e:	b570      	push	{r4, r5, r6, lr}
 800f320:	f1c2 0620 	rsb	r6, r2, #32
 800f324:	6843      	ldr	r3, [r0, #4]
 800f326:	6804      	ldr	r4, [r0, #0]
 800f328:	fa03 f506 	lsl.w	r5, r3, r6
 800f32c:	432c      	orrs	r4, r5
 800f32e:	40d3      	lsrs	r3, r2
 800f330:	6004      	str	r4, [r0, #0]
 800f332:	f840 3f04 	str.w	r3, [r0, #4]!
 800f336:	4288      	cmp	r0, r1
 800f338:	d3f4      	bcc.n	800f324 <L_shift+0xc>
 800f33a:	bd70      	pop	{r4, r5, r6, pc}

0800f33c <__match>:
 800f33c:	b530      	push	{r4, r5, lr}
 800f33e:	6803      	ldr	r3, [r0, #0]
 800f340:	3301      	adds	r3, #1
 800f342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f346:	b914      	cbnz	r4, 800f34e <__match+0x12>
 800f348:	6003      	str	r3, [r0, #0]
 800f34a:	2001      	movs	r0, #1
 800f34c:	bd30      	pop	{r4, r5, pc}
 800f34e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f352:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f356:	2d19      	cmp	r5, #25
 800f358:	bf98      	it	ls
 800f35a:	3220      	addls	r2, #32
 800f35c:	42a2      	cmp	r2, r4
 800f35e:	d0f0      	beq.n	800f342 <__match+0x6>
 800f360:	2000      	movs	r0, #0
 800f362:	e7f3      	b.n	800f34c <__match+0x10>

0800f364 <__hexnan>:
 800f364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f368:	680b      	ldr	r3, [r1, #0]
 800f36a:	115e      	asrs	r6, r3, #5
 800f36c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f370:	f013 031f 	ands.w	r3, r3, #31
 800f374:	b087      	sub	sp, #28
 800f376:	bf18      	it	ne
 800f378:	3604      	addne	r6, #4
 800f37a:	2500      	movs	r5, #0
 800f37c:	1f37      	subs	r7, r6, #4
 800f37e:	4690      	mov	r8, r2
 800f380:	6802      	ldr	r2, [r0, #0]
 800f382:	9301      	str	r3, [sp, #4]
 800f384:	4682      	mov	sl, r0
 800f386:	f846 5c04 	str.w	r5, [r6, #-4]
 800f38a:	46b9      	mov	r9, r7
 800f38c:	463c      	mov	r4, r7
 800f38e:	9502      	str	r5, [sp, #8]
 800f390:	46ab      	mov	fp, r5
 800f392:	7851      	ldrb	r1, [r2, #1]
 800f394:	1c53      	adds	r3, r2, #1
 800f396:	9303      	str	r3, [sp, #12]
 800f398:	b341      	cbz	r1, 800f3ec <__hexnan+0x88>
 800f39a:	4608      	mov	r0, r1
 800f39c:	9205      	str	r2, [sp, #20]
 800f39e:	9104      	str	r1, [sp, #16]
 800f3a0:	f7ff fd5e 	bl	800ee60 <__hexdig_fun>
 800f3a4:	2800      	cmp	r0, #0
 800f3a6:	d14f      	bne.n	800f448 <__hexnan+0xe4>
 800f3a8:	9904      	ldr	r1, [sp, #16]
 800f3aa:	9a05      	ldr	r2, [sp, #20]
 800f3ac:	2920      	cmp	r1, #32
 800f3ae:	d818      	bhi.n	800f3e2 <__hexnan+0x7e>
 800f3b0:	9b02      	ldr	r3, [sp, #8]
 800f3b2:	459b      	cmp	fp, r3
 800f3b4:	dd13      	ble.n	800f3de <__hexnan+0x7a>
 800f3b6:	454c      	cmp	r4, r9
 800f3b8:	d206      	bcs.n	800f3c8 <__hexnan+0x64>
 800f3ba:	2d07      	cmp	r5, #7
 800f3bc:	dc04      	bgt.n	800f3c8 <__hexnan+0x64>
 800f3be:	462a      	mov	r2, r5
 800f3c0:	4649      	mov	r1, r9
 800f3c2:	4620      	mov	r0, r4
 800f3c4:	f7ff ffa8 	bl	800f318 <L_shift>
 800f3c8:	4544      	cmp	r4, r8
 800f3ca:	d950      	bls.n	800f46e <__hexnan+0x10a>
 800f3cc:	2300      	movs	r3, #0
 800f3ce:	f1a4 0904 	sub.w	r9, r4, #4
 800f3d2:	f844 3c04 	str.w	r3, [r4, #-4]
 800f3d6:	f8cd b008 	str.w	fp, [sp, #8]
 800f3da:	464c      	mov	r4, r9
 800f3dc:	461d      	mov	r5, r3
 800f3de:	9a03      	ldr	r2, [sp, #12]
 800f3e0:	e7d7      	b.n	800f392 <__hexnan+0x2e>
 800f3e2:	2929      	cmp	r1, #41	; 0x29
 800f3e4:	d156      	bne.n	800f494 <__hexnan+0x130>
 800f3e6:	3202      	adds	r2, #2
 800f3e8:	f8ca 2000 	str.w	r2, [sl]
 800f3ec:	f1bb 0f00 	cmp.w	fp, #0
 800f3f0:	d050      	beq.n	800f494 <__hexnan+0x130>
 800f3f2:	454c      	cmp	r4, r9
 800f3f4:	d206      	bcs.n	800f404 <__hexnan+0xa0>
 800f3f6:	2d07      	cmp	r5, #7
 800f3f8:	dc04      	bgt.n	800f404 <__hexnan+0xa0>
 800f3fa:	462a      	mov	r2, r5
 800f3fc:	4649      	mov	r1, r9
 800f3fe:	4620      	mov	r0, r4
 800f400:	f7ff ff8a 	bl	800f318 <L_shift>
 800f404:	4544      	cmp	r4, r8
 800f406:	d934      	bls.n	800f472 <__hexnan+0x10e>
 800f408:	f1a8 0204 	sub.w	r2, r8, #4
 800f40c:	4623      	mov	r3, r4
 800f40e:	f853 1b04 	ldr.w	r1, [r3], #4
 800f412:	f842 1f04 	str.w	r1, [r2, #4]!
 800f416:	429f      	cmp	r7, r3
 800f418:	d2f9      	bcs.n	800f40e <__hexnan+0xaa>
 800f41a:	1b3b      	subs	r3, r7, r4
 800f41c:	f023 0303 	bic.w	r3, r3, #3
 800f420:	3304      	adds	r3, #4
 800f422:	3401      	adds	r4, #1
 800f424:	3e03      	subs	r6, #3
 800f426:	42b4      	cmp	r4, r6
 800f428:	bf88      	it	hi
 800f42a:	2304      	movhi	r3, #4
 800f42c:	4443      	add	r3, r8
 800f42e:	2200      	movs	r2, #0
 800f430:	f843 2b04 	str.w	r2, [r3], #4
 800f434:	429f      	cmp	r7, r3
 800f436:	d2fb      	bcs.n	800f430 <__hexnan+0xcc>
 800f438:	683b      	ldr	r3, [r7, #0]
 800f43a:	b91b      	cbnz	r3, 800f444 <__hexnan+0xe0>
 800f43c:	4547      	cmp	r7, r8
 800f43e:	d127      	bne.n	800f490 <__hexnan+0x12c>
 800f440:	2301      	movs	r3, #1
 800f442:	603b      	str	r3, [r7, #0]
 800f444:	2005      	movs	r0, #5
 800f446:	e026      	b.n	800f496 <__hexnan+0x132>
 800f448:	3501      	adds	r5, #1
 800f44a:	2d08      	cmp	r5, #8
 800f44c:	f10b 0b01 	add.w	fp, fp, #1
 800f450:	dd06      	ble.n	800f460 <__hexnan+0xfc>
 800f452:	4544      	cmp	r4, r8
 800f454:	d9c3      	bls.n	800f3de <__hexnan+0x7a>
 800f456:	2300      	movs	r3, #0
 800f458:	f844 3c04 	str.w	r3, [r4, #-4]
 800f45c:	2501      	movs	r5, #1
 800f45e:	3c04      	subs	r4, #4
 800f460:	6822      	ldr	r2, [r4, #0]
 800f462:	f000 000f 	and.w	r0, r0, #15
 800f466:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f46a:	6022      	str	r2, [r4, #0]
 800f46c:	e7b7      	b.n	800f3de <__hexnan+0x7a>
 800f46e:	2508      	movs	r5, #8
 800f470:	e7b5      	b.n	800f3de <__hexnan+0x7a>
 800f472:	9b01      	ldr	r3, [sp, #4]
 800f474:	2b00      	cmp	r3, #0
 800f476:	d0df      	beq.n	800f438 <__hexnan+0xd4>
 800f478:	f04f 32ff 	mov.w	r2, #4294967295
 800f47c:	f1c3 0320 	rsb	r3, r3, #32
 800f480:	fa22 f303 	lsr.w	r3, r2, r3
 800f484:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f488:	401a      	ands	r2, r3
 800f48a:	f846 2c04 	str.w	r2, [r6, #-4]
 800f48e:	e7d3      	b.n	800f438 <__hexnan+0xd4>
 800f490:	3f04      	subs	r7, #4
 800f492:	e7d1      	b.n	800f438 <__hexnan+0xd4>
 800f494:	2004      	movs	r0, #4
 800f496:	b007      	add	sp, #28
 800f498:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f49c <_localeconv_r>:
 800f49c:	4800      	ldr	r0, [pc, #0]	; (800f4a0 <_localeconv_r+0x4>)
 800f49e:	4770      	bx	lr
 800f4a0:	200003b4 	.word	0x200003b4

0800f4a4 <malloc>:
 800f4a4:	4b02      	ldr	r3, [pc, #8]	; (800f4b0 <malloc+0xc>)
 800f4a6:	4601      	mov	r1, r0
 800f4a8:	6818      	ldr	r0, [r3, #0]
 800f4aa:	f000 bd59 	b.w	800ff60 <_malloc_r>
 800f4ae:	bf00      	nop
 800f4b0:	2000025c 	.word	0x2000025c

0800f4b4 <__ascii_mbtowc>:
 800f4b4:	b082      	sub	sp, #8
 800f4b6:	b901      	cbnz	r1, 800f4ba <__ascii_mbtowc+0x6>
 800f4b8:	a901      	add	r1, sp, #4
 800f4ba:	b142      	cbz	r2, 800f4ce <__ascii_mbtowc+0x1a>
 800f4bc:	b14b      	cbz	r3, 800f4d2 <__ascii_mbtowc+0x1e>
 800f4be:	7813      	ldrb	r3, [r2, #0]
 800f4c0:	600b      	str	r3, [r1, #0]
 800f4c2:	7812      	ldrb	r2, [r2, #0]
 800f4c4:	1e10      	subs	r0, r2, #0
 800f4c6:	bf18      	it	ne
 800f4c8:	2001      	movne	r0, #1
 800f4ca:	b002      	add	sp, #8
 800f4cc:	4770      	bx	lr
 800f4ce:	4610      	mov	r0, r2
 800f4d0:	e7fb      	b.n	800f4ca <__ascii_mbtowc+0x16>
 800f4d2:	f06f 0001 	mvn.w	r0, #1
 800f4d6:	e7f8      	b.n	800f4ca <__ascii_mbtowc+0x16>

0800f4d8 <_Balloc>:
 800f4d8:	b570      	push	{r4, r5, r6, lr}
 800f4da:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4dc:	4604      	mov	r4, r0
 800f4de:	460d      	mov	r5, r1
 800f4e0:	b976      	cbnz	r6, 800f500 <_Balloc+0x28>
 800f4e2:	2010      	movs	r0, #16
 800f4e4:	f7ff ffde 	bl	800f4a4 <malloc>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	6260      	str	r0, [r4, #36]	; 0x24
 800f4ec:	b920      	cbnz	r0, 800f4f8 <_Balloc+0x20>
 800f4ee:	4b18      	ldr	r3, [pc, #96]	; (800f550 <_Balloc+0x78>)
 800f4f0:	4818      	ldr	r0, [pc, #96]	; (800f554 <_Balloc+0x7c>)
 800f4f2:	2166      	movs	r1, #102	; 0x66
 800f4f4:	f000 ff3e 	bl	8010374 <__assert_func>
 800f4f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4fc:	6006      	str	r6, [r0, #0]
 800f4fe:	60c6      	str	r6, [r0, #12]
 800f500:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f502:	68f3      	ldr	r3, [r6, #12]
 800f504:	b183      	cbz	r3, 800f528 <_Balloc+0x50>
 800f506:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f508:	68db      	ldr	r3, [r3, #12]
 800f50a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f50e:	b9b8      	cbnz	r0, 800f540 <_Balloc+0x68>
 800f510:	2101      	movs	r1, #1
 800f512:	fa01 f605 	lsl.w	r6, r1, r5
 800f516:	1d72      	adds	r2, r6, #5
 800f518:	0092      	lsls	r2, r2, #2
 800f51a:	4620      	mov	r0, r4
 800f51c:	f000 fc9d 	bl	800fe5a <_calloc_r>
 800f520:	b160      	cbz	r0, 800f53c <_Balloc+0x64>
 800f522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f526:	e00e      	b.n	800f546 <_Balloc+0x6e>
 800f528:	2221      	movs	r2, #33	; 0x21
 800f52a:	2104      	movs	r1, #4
 800f52c:	4620      	mov	r0, r4
 800f52e:	f000 fc94 	bl	800fe5a <_calloc_r>
 800f532:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f534:	60f0      	str	r0, [r6, #12]
 800f536:	68db      	ldr	r3, [r3, #12]
 800f538:	2b00      	cmp	r3, #0
 800f53a:	d1e4      	bne.n	800f506 <_Balloc+0x2e>
 800f53c:	2000      	movs	r0, #0
 800f53e:	bd70      	pop	{r4, r5, r6, pc}
 800f540:	6802      	ldr	r2, [r0, #0]
 800f542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f546:	2300      	movs	r3, #0
 800f548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f54c:	e7f7      	b.n	800f53e <_Balloc+0x66>
 800f54e:	bf00      	nop
 800f550:	0801273e 	.word	0x0801273e
 800f554:	0801283c 	.word	0x0801283c

0800f558 <_Bfree>:
 800f558:	b570      	push	{r4, r5, r6, lr}
 800f55a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f55c:	4605      	mov	r5, r0
 800f55e:	460c      	mov	r4, r1
 800f560:	b976      	cbnz	r6, 800f580 <_Bfree+0x28>
 800f562:	2010      	movs	r0, #16
 800f564:	f7ff ff9e 	bl	800f4a4 <malloc>
 800f568:	4602      	mov	r2, r0
 800f56a:	6268      	str	r0, [r5, #36]	; 0x24
 800f56c:	b920      	cbnz	r0, 800f578 <_Bfree+0x20>
 800f56e:	4b09      	ldr	r3, [pc, #36]	; (800f594 <_Bfree+0x3c>)
 800f570:	4809      	ldr	r0, [pc, #36]	; (800f598 <_Bfree+0x40>)
 800f572:	218a      	movs	r1, #138	; 0x8a
 800f574:	f000 fefe 	bl	8010374 <__assert_func>
 800f578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f57c:	6006      	str	r6, [r0, #0]
 800f57e:	60c6      	str	r6, [r0, #12]
 800f580:	b13c      	cbz	r4, 800f592 <_Bfree+0x3a>
 800f582:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f584:	6862      	ldr	r2, [r4, #4]
 800f586:	68db      	ldr	r3, [r3, #12]
 800f588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f58c:	6021      	str	r1, [r4, #0]
 800f58e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f592:	bd70      	pop	{r4, r5, r6, pc}
 800f594:	0801273e 	.word	0x0801273e
 800f598:	0801283c 	.word	0x0801283c

0800f59c <__multadd>:
 800f59c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5a0:	690d      	ldr	r5, [r1, #16]
 800f5a2:	4607      	mov	r7, r0
 800f5a4:	460c      	mov	r4, r1
 800f5a6:	461e      	mov	r6, r3
 800f5a8:	f101 0c14 	add.w	ip, r1, #20
 800f5ac:	2000      	movs	r0, #0
 800f5ae:	f8dc 3000 	ldr.w	r3, [ip]
 800f5b2:	b299      	uxth	r1, r3
 800f5b4:	fb02 6101 	mla	r1, r2, r1, r6
 800f5b8:	0c1e      	lsrs	r6, r3, #16
 800f5ba:	0c0b      	lsrs	r3, r1, #16
 800f5bc:	fb02 3306 	mla	r3, r2, r6, r3
 800f5c0:	b289      	uxth	r1, r1
 800f5c2:	3001      	adds	r0, #1
 800f5c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f5c8:	4285      	cmp	r5, r0
 800f5ca:	f84c 1b04 	str.w	r1, [ip], #4
 800f5ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f5d2:	dcec      	bgt.n	800f5ae <__multadd+0x12>
 800f5d4:	b30e      	cbz	r6, 800f61a <__multadd+0x7e>
 800f5d6:	68a3      	ldr	r3, [r4, #8]
 800f5d8:	42ab      	cmp	r3, r5
 800f5da:	dc19      	bgt.n	800f610 <__multadd+0x74>
 800f5dc:	6861      	ldr	r1, [r4, #4]
 800f5de:	4638      	mov	r0, r7
 800f5e0:	3101      	adds	r1, #1
 800f5e2:	f7ff ff79 	bl	800f4d8 <_Balloc>
 800f5e6:	4680      	mov	r8, r0
 800f5e8:	b928      	cbnz	r0, 800f5f6 <__multadd+0x5a>
 800f5ea:	4602      	mov	r2, r0
 800f5ec:	4b0c      	ldr	r3, [pc, #48]	; (800f620 <__multadd+0x84>)
 800f5ee:	480d      	ldr	r0, [pc, #52]	; (800f624 <__multadd+0x88>)
 800f5f0:	21b5      	movs	r1, #181	; 0xb5
 800f5f2:	f000 febf 	bl	8010374 <__assert_func>
 800f5f6:	6922      	ldr	r2, [r4, #16]
 800f5f8:	3202      	adds	r2, #2
 800f5fa:	f104 010c 	add.w	r1, r4, #12
 800f5fe:	0092      	lsls	r2, r2, #2
 800f600:	300c      	adds	r0, #12
 800f602:	f7fc fffd 	bl	800c600 <memcpy>
 800f606:	4621      	mov	r1, r4
 800f608:	4638      	mov	r0, r7
 800f60a:	f7ff ffa5 	bl	800f558 <_Bfree>
 800f60e:	4644      	mov	r4, r8
 800f610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f614:	3501      	adds	r5, #1
 800f616:	615e      	str	r6, [r3, #20]
 800f618:	6125      	str	r5, [r4, #16]
 800f61a:	4620      	mov	r0, r4
 800f61c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f620:	080127b0 	.word	0x080127b0
 800f624:	0801283c 	.word	0x0801283c

0800f628 <__s2b>:
 800f628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f62c:	460c      	mov	r4, r1
 800f62e:	4615      	mov	r5, r2
 800f630:	461f      	mov	r7, r3
 800f632:	2209      	movs	r2, #9
 800f634:	3308      	adds	r3, #8
 800f636:	4606      	mov	r6, r0
 800f638:	fb93 f3f2 	sdiv	r3, r3, r2
 800f63c:	2100      	movs	r1, #0
 800f63e:	2201      	movs	r2, #1
 800f640:	429a      	cmp	r2, r3
 800f642:	db09      	blt.n	800f658 <__s2b+0x30>
 800f644:	4630      	mov	r0, r6
 800f646:	f7ff ff47 	bl	800f4d8 <_Balloc>
 800f64a:	b940      	cbnz	r0, 800f65e <__s2b+0x36>
 800f64c:	4602      	mov	r2, r0
 800f64e:	4b19      	ldr	r3, [pc, #100]	; (800f6b4 <__s2b+0x8c>)
 800f650:	4819      	ldr	r0, [pc, #100]	; (800f6b8 <__s2b+0x90>)
 800f652:	21ce      	movs	r1, #206	; 0xce
 800f654:	f000 fe8e 	bl	8010374 <__assert_func>
 800f658:	0052      	lsls	r2, r2, #1
 800f65a:	3101      	adds	r1, #1
 800f65c:	e7f0      	b.n	800f640 <__s2b+0x18>
 800f65e:	9b08      	ldr	r3, [sp, #32]
 800f660:	6143      	str	r3, [r0, #20]
 800f662:	2d09      	cmp	r5, #9
 800f664:	f04f 0301 	mov.w	r3, #1
 800f668:	6103      	str	r3, [r0, #16]
 800f66a:	dd16      	ble.n	800f69a <__s2b+0x72>
 800f66c:	f104 0909 	add.w	r9, r4, #9
 800f670:	46c8      	mov	r8, r9
 800f672:	442c      	add	r4, r5
 800f674:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f678:	4601      	mov	r1, r0
 800f67a:	3b30      	subs	r3, #48	; 0x30
 800f67c:	220a      	movs	r2, #10
 800f67e:	4630      	mov	r0, r6
 800f680:	f7ff ff8c 	bl	800f59c <__multadd>
 800f684:	45a0      	cmp	r8, r4
 800f686:	d1f5      	bne.n	800f674 <__s2b+0x4c>
 800f688:	f1a5 0408 	sub.w	r4, r5, #8
 800f68c:	444c      	add	r4, r9
 800f68e:	1b2d      	subs	r5, r5, r4
 800f690:	1963      	adds	r3, r4, r5
 800f692:	42bb      	cmp	r3, r7
 800f694:	db04      	blt.n	800f6a0 <__s2b+0x78>
 800f696:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f69a:	340a      	adds	r4, #10
 800f69c:	2509      	movs	r5, #9
 800f69e:	e7f6      	b.n	800f68e <__s2b+0x66>
 800f6a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f6a4:	4601      	mov	r1, r0
 800f6a6:	3b30      	subs	r3, #48	; 0x30
 800f6a8:	220a      	movs	r2, #10
 800f6aa:	4630      	mov	r0, r6
 800f6ac:	f7ff ff76 	bl	800f59c <__multadd>
 800f6b0:	e7ee      	b.n	800f690 <__s2b+0x68>
 800f6b2:	bf00      	nop
 800f6b4:	080127b0 	.word	0x080127b0
 800f6b8:	0801283c 	.word	0x0801283c

0800f6bc <__hi0bits>:
 800f6bc:	0c03      	lsrs	r3, r0, #16
 800f6be:	041b      	lsls	r3, r3, #16
 800f6c0:	b9d3      	cbnz	r3, 800f6f8 <__hi0bits+0x3c>
 800f6c2:	0400      	lsls	r0, r0, #16
 800f6c4:	2310      	movs	r3, #16
 800f6c6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f6ca:	bf04      	itt	eq
 800f6cc:	0200      	lsleq	r0, r0, #8
 800f6ce:	3308      	addeq	r3, #8
 800f6d0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f6d4:	bf04      	itt	eq
 800f6d6:	0100      	lsleq	r0, r0, #4
 800f6d8:	3304      	addeq	r3, #4
 800f6da:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6de:	bf04      	itt	eq
 800f6e0:	0080      	lsleq	r0, r0, #2
 800f6e2:	3302      	addeq	r3, #2
 800f6e4:	2800      	cmp	r0, #0
 800f6e6:	db05      	blt.n	800f6f4 <__hi0bits+0x38>
 800f6e8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6ec:	f103 0301 	add.w	r3, r3, #1
 800f6f0:	bf08      	it	eq
 800f6f2:	2320      	moveq	r3, #32
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	4770      	bx	lr
 800f6f8:	2300      	movs	r3, #0
 800f6fa:	e7e4      	b.n	800f6c6 <__hi0bits+0xa>

0800f6fc <__lo0bits>:
 800f6fc:	6803      	ldr	r3, [r0, #0]
 800f6fe:	f013 0207 	ands.w	r2, r3, #7
 800f702:	4601      	mov	r1, r0
 800f704:	d00b      	beq.n	800f71e <__lo0bits+0x22>
 800f706:	07da      	lsls	r2, r3, #31
 800f708:	d423      	bmi.n	800f752 <__lo0bits+0x56>
 800f70a:	0798      	lsls	r0, r3, #30
 800f70c:	bf49      	itett	mi
 800f70e:	085b      	lsrmi	r3, r3, #1
 800f710:	089b      	lsrpl	r3, r3, #2
 800f712:	2001      	movmi	r0, #1
 800f714:	600b      	strmi	r3, [r1, #0]
 800f716:	bf5c      	itt	pl
 800f718:	600b      	strpl	r3, [r1, #0]
 800f71a:	2002      	movpl	r0, #2
 800f71c:	4770      	bx	lr
 800f71e:	b298      	uxth	r0, r3
 800f720:	b9a8      	cbnz	r0, 800f74e <__lo0bits+0x52>
 800f722:	0c1b      	lsrs	r3, r3, #16
 800f724:	2010      	movs	r0, #16
 800f726:	b2da      	uxtb	r2, r3
 800f728:	b90a      	cbnz	r2, 800f72e <__lo0bits+0x32>
 800f72a:	3008      	adds	r0, #8
 800f72c:	0a1b      	lsrs	r3, r3, #8
 800f72e:	071a      	lsls	r2, r3, #28
 800f730:	bf04      	itt	eq
 800f732:	091b      	lsreq	r3, r3, #4
 800f734:	3004      	addeq	r0, #4
 800f736:	079a      	lsls	r2, r3, #30
 800f738:	bf04      	itt	eq
 800f73a:	089b      	lsreq	r3, r3, #2
 800f73c:	3002      	addeq	r0, #2
 800f73e:	07da      	lsls	r2, r3, #31
 800f740:	d403      	bmi.n	800f74a <__lo0bits+0x4e>
 800f742:	085b      	lsrs	r3, r3, #1
 800f744:	f100 0001 	add.w	r0, r0, #1
 800f748:	d005      	beq.n	800f756 <__lo0bits+0x5a>
 800f74a:	600b      	str	r3, [r1, #0]
 800f74c:	4770      	bx	lr
 800f74e:	4610      	mov	r0, r2
 800f750:	e7e9      	b.n	800f726 <__lo0bits+0x2a>
 800f752:	2000      	movs	r0, #0
 800f754:	4770      	bx	lr
 800f756:	2020      	movs	r0, #32
 800f758:	4770      	bx	lr
	...

0800f75c <__i2b>:
 800f75c:	b510      	push	{r4, lr}
 800f75e:	460c      	mov	r4, r1
 800f760:	2101      	movs	r1, #1
 800f762:	f7ff feb9 	bl	800f4d8 <_Balloc>
 800f766:	4602      	mov	r2, r0
 800f768:	b928      	cbnz	r0, 800f776 <__i2b+0x1a>
 800f76a:	4b05      	ldr	r3, [pc, #20]	; (800f780 <__i2b+0x24>)
 800f76c:	4805      	ldr	r0, [pc, #20]	; (800f784 <__i2b+0x28>)
 800f76e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f772:	f000 fdff 	bl	8010374 <__assert_func>
 800f776:	2301      	movs	r3, #1
 800f778:	6144      	str	r4, [r0, #20]
 800f77a:	6103      	str	r3, [r0, #16]
 800f77c:	bd10      	pop	{r4, pc}
 800f77e:	bf00      	nop
 800f780:	080127b0 	.word	0x080127b0
 800f784:	0801283c 	.word	0x0801283c

0800f788 <__multiply>:
 800f788:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f78c:	4691      	mov	r9, r2
 800f78e:	690a      	ldr	r2, [r1, #16]
 800f790:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f794:	429a      	cmp	r2, r3
 800f796:	bfb8      	it	lt
 800f798:	460b      	movlt	r3, r1
 800f79a:	460c      	mov	r4, r1
 800f79c:	bfbc      	itt	lt
 800f79e:	464c      	movlt	r4, r9
 800f7a0:	4699      	movlt	r9, r3
 800f7a2:	6927      	ldr	r7, [r4, #16]
 800f7a4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f7a8:	68a3      	ldr	r3, [r4, #8]
 800f7aa:	6861      	ldr	r1, [r4, #4]
 800f7ac:	eb07 060a 	add.w	r6, r7, sl
 800f7b0:	42b3      	cmp	r3, r6
 800f7b2:	b085      	sub	sp, #20
 800f7b4:	bfb8      	it	lt
 800f7b6:	3101      	addlt	r1, #1
 800f7b8:	f7ff fe8e 	bl	800f4d8 <_Balloc>
 800f7bc:	b930      	cbnz	r0, 800f7cc <__multiply+0x44>
 800f7be:	4602      	mov	r2, r0
 800f7c0:	4b44      	ldr	r3, [pc, #272]	; (800f8d4 <__multiply+0x14c>)
 800f7c2:	4845      	ldr	r0, [pc, #276]	; (800f8d8 <__multiply+0x150>)
 800f7c4:	f240 115d 	movw	r1, #349	; 0x15d
 800f7c8:	f000 fdd4 	bl	8010374 <__assert_func>
 800f7cc:	f100 0514 	add.w	r5, r0, #20
 800f7d0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f7d4:	462b      	mov	r3, r5
 800f7d6:	2200      	movs	r2, #0
 800f7d8:	4543      	cmp	r3, r8
 800f7da:	d321      	bcc.n	800f820 <__multiply+0x98>
 800f7dc:	f104 0314 	add.w	r3, r4, #20
 800f7e0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7e4:	f109 0314 	add.w	r3, r9, #20
 800f7e8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7ec:	9202      	str	r2, [sp, #8]
 800f7ee:	1b3a      	subs	r2, r7, r4
 800f7f0:	3a15      	subs	r2, #21
 800f7f2:	f022 0203 	bic.w	r2, r2, #3
 800f7f6:	3204      	adds	r2, #4
 800f7f8:	f104 0115 	add.w	r1, r4, #21
 800f7fc:	428f      	cmp	r7, r1
 800f7fe:	bf38      	it	cc
 800f800:	2204      	movcc	r2, #4
 800f802:	9201      	str	r2, [sp, #4]
 800f804:	9a02      	ldr	r2, [sp, #8]
 800f806:	9303      	str	r3, [sp, #12]
 800f808:	429a      	cmp	r2, r3
 800f80a:	d80c      	bhi.n	800f826 <__multiply+0x9e>
 800f80c:	2e00      	cmp	r6, #0
 800f80e:	dd03      	ble.n	800f818 <__multiply+0x90>
 800f810:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f814:	2b00      	cmp	r3, #0
 800f816:	d05a      	beq.n	800f8ce <__multiply+0x146>
 800f818:	6106      	str	r6, [r0, #16]
 800f81a:	b005      	add	sp, #20
 800f81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f820:	f843 2b04 	str.w	r2, [r3], #4
 800f824:	e7d8      	b.n	800f7d8 <__multiply+0x50>
 800f826:	f8b3 a000 	ldrh.w	sl, [r3]
 800f82a:	f1ba 0f00 	cmp.w	sl, #0
 800f82e:	d024      	beq.n	800f87a <__multiply+0xf2>
 800f830:	f104 0e14 	add.w	lr, r4, #20
 800f834:	46a9      	mov	r9, r5
 800f836:	f04f 0c00 	mov.w	ip, #0
 800f83a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f83e:	f8d9 1000 	ldr.w	r1, [r9]
 800f842:	fa1f fb82 	uxth.w	fp, r2
 800f846:	b289      	uxth	r1, r1
 800f848:	fb0a 110b 	mla	r1, sl, fp, r1
 800f84c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f850:	f8d9 2000 	ldr.w	r2, [r9]
 800f854:	4461      	add	r1, ip
 800f856:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f85a:	fb0a c20b 	mla	r2, sl, fp, ip
 800f85e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f862:	b289      	uxth	r1, r1
 800f864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f868:	4577      	cmp	r7, lr
 800f86a:	f849 1b04 	str.w	r1, [r9], #4
 800f86e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f872:	d8e2      	bhi.n	800f83a <__multiply+0xb2>
 800f874:	9a01      	ldr	r2, [sp, #4]
 800f876:	f845 c002 	str.w	ip, [r5, r2]
 800f87a:	9a03      	ldr	r2, [sp, #12]
 800f87c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f880:	3304      	adds	r3, #4
 800f882:	f1b9 0f00 	cmp.w	r9, #0
 800f886:	d020      	beq.n	800f8ca <__multiply+0x142>
 800f888:	6829      	ldr	r1, [r5, #0]
 800f88a:	f104 0c14 	add.w	ip, r4, #20
 800f88e:	46ae      	mov	lr, r5
 800f890:	f04f 0a00 	mov.w	sl, #0
 800f894:	f8bc b000 	ldrh.w	fp, [ip]
 800f898:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f89c:	fb09 220b 	mla	r2, r9, fp, r2
 800f8a0:	4492      	add	sl, r2
 800f8a2:	b289      	uxth	r1, r1
 800f8a4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f8a8:	f84e 1b04 	str.w	r1, [lr], #4
 800f8ac:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f8b0:	f8be 1000 	ldrh.w	r1, [lr]
 800f8b4:	0c12      	lsrs	r2, r2, #16
 800f8b6:	fb09 1102 	mla	r1, r9, r2, r1
 800f8ba:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f8be:	4567      	cmp	r7, ip
 800f8c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f8c4:	d8e6      	bhi.n	800f894 <__multiply+0x10c>
 800f8c6:	9a01      	ldr	r2, [sp, #4]
 800f8c8:	50a9      	str	r1, [r5, r2]
 800f8ca:	3504      	adds	r5, #4
 800f8cc:	e79a      	b.n	800f804 <__multiply+0x7c>
 800f8ce:	3e01      	subs	r6, #1
 800f8d0:	e79c      	b.n	800f80c <__multiply+0x84>
 800f8d2:	bf00      	nop
 800f8d4:	080127b0 	.word	0x080127b0
 800f8d8:	0801283c 	.word	0x0801283c

0800f8dc <__pow5mult>:
 800f8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e0:	4615      	mov	r5, r2
 800f8e2:	f012 0203 	ands.w	r2, r2, #3
 800f8e6:	4606      	mov	r6, r0
 800f8e8:	460f      	mov	r7, r1
 800f8ea:	d007      	beq.n	800f8fc <__pow5mult+0x20>
 800f8ec:	4c25      	ldr	r4, [pc, #148]	; (800f984 <__pow5mult+0xa8>)
 800f8ee:	3a01      	subs	r2, #1
 800f8f0:	2300      	movs	r3, #0
 800f8f2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8f6:	f7ff fe51 	bl	800f59c <__multadd>
 800f8fa:	4607      	mov	r7, r0
 800f8fc:	10ad      	asrs	r5, r5, #2
 800f8fe:	d03d      	beq.n	800f97c <__pow5mult+0xa0>
 800f900:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f902:	b97c      	cbnz	r4, 800f924 <__pow5mult+0x48>
 800f904:	2010      	movs	r0, #16
 800f906:	f7ff fdcd 	bl	800f4a4 <malloc>
 800f90a:	4602      	mov	r2, r0
 800f90c:	6270      	str	r0, [r6, #36]	; 0x24
 800f90e:	b928      	cbnz	r0, 800f91c <__pow5mult+0x40>
 800f910:	4b1d      	ldr	r3, [pc, #116]	; (800f988 <__pow5mult+0xac>)
 800f912:	481e      	ldr	r0, [pc, #120]	; (800f98c <__pow5mult+0xb0>)
 800f914:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f918:	f000 fd2c 	bl	8010374 <__assert_func>
 800f91c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f920:	6004      	str	r4, [r0, #0]
 800f922:	60c4      	str	r4, [r0, #12]
 800f924:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f928:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f92c:	b94c      	cbnz	r4, 800f942 <__pow5mult+0x66>
 800f92e:	f240 2171 	movw	r1, #625	; 0x271
 800f932:	4630      	mov	r0, r6
 800f934:	f7ff ff12 	bl	800f75c <__i2b>
 800f938:	2300      	movs	r3, #0
 800f93a:	f8c8 0008 	str.w	r0, [r8, #8]
 800f93e:	4604      	mov	r4, r0
 800f940:	6003      	str	r3, [r0, #0]
 800f942:	f04f 0900 	mov.w	r9, #0
 800f946:	07eb      	lsls	r3, r5, #31
 800f948:	d50a      	bpl.n	800f960 <__pow5mult+0x84>
 800f94a:	4639      	mov	r1, r7
 800f94c:	4622      	mov	r2, r4
 800f94e:	4630      	mov	r0, r6
 800f950:	f7ff ff1a 	bl	800f788 <__multiply>
 800f954:	4639      	mov	r1, r7
 800f956:	4680      	mov	r8, r0
 800f958:	4630      	mov	r0, r6
 800f95a:	f7ff fdfd 	bl	800f558 <_Bfree>
 800f95e:	4647      	mov	r7, r8
 800f960:	106d      	asrs	r5, r5, #1
 800f962:	d00b      	beq.n	800f97c <__pow5mult+0xa0>
 800f964:	6820      	ldr	r0, [r4, #0]
 800f966:	b938      	cbnz	r0, 800f978 <__pow5mult+0x9c>
 800f968:	4622      	mov	r2, r4
 800f96a:	4621      	mov	r1, r4
 800f96c:	4630      	mov	r0, r6
 800f96e:	f7ff ff0b 	bl	800f788 <__multiply>
 800f972:	6020      	str	r0, [r4, #0]
 800f974:	f8c0 9000 	str.w	r9, [r0]
 800f978:	4604      	mov	r4, r0
 800f97a:	e7e4      	b.n	800f946 <__pow5mult+0x6a>
 800f97c:	4638      	mov	r0, r7
 800f97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f982:	bf00      	nop
 800f984:	08012988 	.word	0x08012988
 800f988:	0801273e 	.word	0x0801273e
 800f98c:	0801283c 	.word	0x0801283c

0800f990 <__lshift>:
 800f990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f994:	460c      	mov	r4, r1
 800f996:	6849      	ldr	r1, [r1, #4]
 800f998:	6923      	ldr	r3, [r4, #16]
 800f99a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f99e:	68a3      	ldr	r3, [r4, #8]
 800f9a0:	4607      	mov	r7, r0
 800f9a2:	4691      	mov	r9, r2
 800f9a4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f9a8:	f108 0601 	add.w	r6, r8, #1
 800f9ac:	42b3      	cmp	r3, r6
 800f9ae:	db0b      	blt.n	800f9c8 <__lshift+0x38>
 800f9b0:	4638      	mov	r0, r7
 800f9b2:	f7ff fd91 	bl	800f4d8 <_Balloc>
 800f9b6:	4605      	mov	r5, r0
 800f9b8:	b948      	cbnz	r0, 800f9ce <__lshift+0x3e>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	4b2a      	ldr	r3, [pc, #168]	; (800fa68 <__lshift+0xd8>)
 800f9be:	482b      	ldr	r0, [pc, #172]	; (800fa6c <__lshift+0xdc>)
 800f9c0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f9c4:	f000 fcd6 	bl	8010374 <__assert_func>
 800f9c8:	3101      	adds	r1, #1
 800f9ca:	005b      	lsls	r3, r3, #1
 800f9cc:	e7ee      	b.n	800f9ac <__lshift+0x1c>
 800f9ce:	2300      	movs	r3, #0
 800f9d0:	f100 0114 	add.w	r1, r0, #20
 800f9d4:	f100 0210 	add.w	r2, r0, #16
 800f9d8:	4618      	mov	r0, r3
 800f9da:	4553      	cmp	r3, sl
 800f9dc:	db37      	blt.n	800fa4e <__lshift+0xbe>
 800f9de:	6920      	ldr	r0, [r4, #16]
 800f9e0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9e4:	f104 0314 	add.w	r3, r4, #20
 800f9e8:	f019 091f 	ands.w	r9, r9, #31
 800f9ec:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9f0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f9f4:	d02f      	beq.n	800fa56 <__lshift+0xc6>
 800f9f6:	f1c9 0e20 	rsb	lr, r9, #32
 800f9fa:	468a      	mov	sl, r1
 800f9fc:	f04f 0c00 	mov.w	ip, #0
 800fa00:	681a      	ldr	r2, [r3, #0]
 800fa02:	fa02 f209 	lsl.w	r2, r2, r9
 800fa06:	ea42 020c 	orr.w	r2, r2, ip
 800fa0a:	f84a 2b04 	str.w	r2, [sl], #4
 800fa0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa12:	4298      	cmp	r0, r3
 800fa14:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fa18:	d8f2      	bhi.n	800fa00 <__lshift+0x70>
 800fa1a:	1b03      	subs	r3, r0, r4
 800fa1c:	3b15      	subs	r3, #21
 800fa1e:	f023 0303 	bic.w	r3, r3, #3
 800fa22:	3304      	adds	r3, #4
 800fa24:	f104 0215 	add.w	r2, r4, #21
 800fa28:	4290      	cmp	r0, r2
 800fa2a:	bf38      	it	cc
 800fa2c:	2304      	movcc	r3, #4
 800fa2e:	f841 c003 	str.w	ip, [r1, r3]
 800fa32:	f1bc 0f00 	cmp.w	ip, #0
 800fa36:	d001      	beq.n	800fa3c <__lshift+0xac>
 800fa38:	f108 0602 	add.w	r6, r8, #2
 800fa3c:	3e01      	subs	r6, #1
 800fa3e:	4638      	mov	r0, r7
 800fa40:	612e      	str	r6, [r5, #16]
 800fa42:	4621      	mov	r1, r4
 800fa44:	f7ff fd88 	bl	800f558 <_Bfree>
 800fa48:	4628      	mov	r0, r5
 800fa4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa4e:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa52:	3301      	adds	r3, #1
 800fa54:	e7c1      	b.n	800f9da <__lshift+0x4a>
 800fa56:	3904      	subs	r1, #4
 800fa58:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa5c:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa60:	4298      	cmp	r0, r3
 800fa62:	d8f9      	bhi.n	800fa58 <__lshift+0xc8>
 800fa64:	e7ea      	b.n	800fa3c <__lshift+0xac>
 800fa66:	bf00      	nop
 800fa68:	080127b0 	.word	0x080127b0
 800fa6c:	0801283c 	.word	0x0801283c

0800fa70 <__mcmp>:
 800fa70:	b530      	push	{r4, r5, lr}
 800fa72:	6902      	ldr	r2, [r0, #16]
 800fa74:	690c      	ldr	r4, [r1, #16]
 800fa76:	1b12      	subs	r2, r2, r4
 800fa78:	d10e      	bne.n	800fa98 <__mcmp+0x28>
 800fa7a:	f100 0314 	add.w	r3, r0, #20
 800fa7e:	3114      	adds	r1, #20
 800fa80:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa84:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa88:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa8c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa90:	42a5      	cmp	r5, r4
 800fa92:	d003      	beq.n	800fa9c <__mcmp+0x2c>
 800fa94:	d305      	bcc.n	800faa2 <__mcmp+0x32>
 800fa96:	2201      	movs	r2, #1
 800fa98:	4610      	mov	r0, r2
 800fa9a:	bd30      	pop	{r4, r5, pc}
 800fa9c:	4283      	cmp	r3, r0
 800fa9e:	d3f3      	bcc.n	800fa88 <__mcmp+0x18>
 800faa0:	e7fa      	b.n	800fa98 <__mcmp+0x28>
 800faa2:	f04f 32ff 	mov.w	r2, #4294967295
 800faa6:	e7f7      	b.n	800fa98 <__mcmp+0x28>

0800faa8 <__mdiff>:
 800faa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faac:	460c      	mov	r4, r1
 800faae:	4606      	mov	r6, r0
 800fab0:	4611      	mov	r1, r2
 800fab2:	4620      	mov	r0, r4
 800fab4:	4690      	mov	r8, r2
 800fab6:	f7ff ffdb 	bl	800fa70 <__mcmp>
 800faba:	1e05      	subs	r5, r0, #0
 800fabc:	d110      	bne.n	800fae0 <__mdiff+0x38>
 800fabe:	4629      	mov	r1, r5
 800fac0:	4630      	mov	r0, r6
 800fac2:	f7ff fd09 	bl	800f4d8 <_Balloc>
 800fac6:	b930      	cbnz	r0, 800fad6 <__mdiff+0x2e>
 800fac8:	4b3a      	ldr	r3, [pc, #232]	; (800fbb4 <__mdiff+0x10c>)
 800faca:	4602      	mov	r2, r0
 800facc:	f240 2132 	movw	r1, #562	; 0x232
 800fad0:	4839      	ldr	r0, [pc, #228]	; (800fbb8 <__mdiff+0x110>)
 800fad2:	f000 fc4f 	bl	8010374 <__assert_func>
 800fad6:	2301      	movs	r3, #1
 800fad8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fadc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fae0:	bfa4      	itt	ge
 800fae2:	4643      	movge	r3, r8
 800fae4:	46a0      	movge	r8, r4
 800fae6:	4630      	mov	r0, r6
 800fae8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800faec:	bfa6      	itte	ge
 800faee:	461c      	movge	r4, r3
 800faf0:	2500      	movge	r5, #0
 800faf2:	2501      	movlt	r5, #1
 800faf4:	f7ff fcf0 	bl	800f4d8 <_Balloc>
 800faf8:	b920      	cbnz	r0, 800fb04 <__mdiff+0x5c>
 800fafa:	4b2e      	ldr	r3, [pc, #184]	; (800fbb4 <__mdiff+0x10c>)
 800fafc:	4602      	mov	r2, r0
 800fafe:	f44f 7110 	mov.w	r1, #576	; 0x240
 800fb02:	e7e5      	b.n	800fad0 <__mdiff+0x28>
 800fb04:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fb08:	6926      	ldr	r6, [r4, #16]
 800fb0a:	60c5      	str	r5, [r0, #12]
 800fb0c:	f104 0914 	add.w	r9, r4, #20
 800fb10:	f108 0514 	add.w	r5, r8, #20
 800fb14:	f100 0e14 	add.w	lr, r0, #20
 800fb18:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fb1c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fb20:	f108 0210 	add.w	r2, r8, #16
 800fb24:	46f2      	mov	sl, lr
 800fb26:	2100      	movs	r1, #0
 800fb28:	f859 3b04 	ldr.w	r3, [r9], #4
 800fb2c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800fb30:	fa1f f883 	uxth.w	r8, r3
 800fb34:	fa11 f18b 	uxtah	r1, r1, fp
 800fb38:	0c1b      	lsrs	r3, r3, #16
 800fb3a:	eba1 0808 	sub.w	r8, r1, r8
 800fb3e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb42:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb46:	fa1f f888 	uxth.w	r8, r8
 800fb4a:	1419      	asrs	r1, r3, #16
 800fb4c:	454e      	cmp	r6, r9
 800fb4e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb52:	f84a 3b04 	str.w	r3, [sl], #4
 800fb56:	d8e7      	bhi.n	800fb28 <__mdiff+0x80>
 800fb58:	1b33      	subs	r3, r6, r4
 800fb5a:	3b15      	subs	r3, #21
 800fb5c:	f023 0303 	bic.w	r3, r3, #3
 800fb60:	3304      	adds	r3, #4
 800fb62:	3415      	adds	r4, #21
 800fb64:	42a6      	cmp	r6, r4
 800fb66:	bf38      	it	cc
 800fb68:	2304      	movcc	r3, #4
 800fb6a:	441d      	add	r5, r3
 800fb6c:	4473      	add	r3, lr
 800fb6e:	469e      	mov	lr, r3
 800fb70:	462e      	mov	r6, r5
 800fb72:	4566      	cmp	r6, ip
 800fb74:	d30e      	bcc.n	800fb94 <__mdiff+0xec>
 800fb76:	f10c 0203 	add.w	r2, ip, #3
 800fb7a:	1b52      	subs	r2, r2, r5
 800fb7c:	f022 0203 	bic.w	r2, r2, #3
 800fb80:	3d03      	subs	r5, #3
 800fb82:	45ac      	cmp	ip, r5
 800fb84:	bf38      	it	cc
 800fb86:	2200      	movcc	r2, #0
 800fb88:	441a      	add	r2, r3
 800fb8a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb8e:	b17b      	cbz	r3, 800fbb0 <__mdiff+0x108>
 800fb90:	6107      	str	r7, [r0, #16]
 800fb92:	e7a3      	b.n	800fadc <__mdiff+0x34>
 800fb94:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb98:	fa11 f288 	uxtah	r2, r1, r8
 800fb9c:	1414      	asrs	r4, r2, #16
 800fb9e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fba2:	b292      	uxth	r2, r2
 800fba4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fba8:	f84e 2b04 	str.w	r2, [lr], #4
 800fbac:	1421      	asrs	r1, r4, #16
 800fbae:	e7e0      	b.n	800fb72 <__mdiff+0xca>
 800fbb0:	3f01      	subs	r7, #1
 800fbb2:	e7ea      	b.n	800fb8a <__mdiff+0xe2>
 800fbb4:	080127b0 	.word	0x080127b0
 800fbb8:	0801283c 	.word	0x0801283c

0800fbbc <__ulp>:
 800fbbc:	b082      	sub	sp, #8
 800fbbe:	ed8d 0b00 	vstr	d0, [sp]
 800fbc2:	9b01      	ldr	r3, [sp, #4]
 800fbc4:	4912      	ldr	r1, [pc, #72]	; (800fc10 <__ulp+0x54>)
 800fbc6:	4019      	ands	r1, r3
 800fbc8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fbcc:	2900      	cmp	r1, #0
 800fbce:	dd05      	ble.n	800fbdc <__ulp+0x20>
 800fbd0:	2200      	movs	r2, #0
 800fbd2:	460b      	mov	r3, r1
 800fbd4:	ec43 2b10 	vmov	d0, r2, r3
 800fbd8:	b002      	add	sp, #8
 800fbda:	4770      	bx	lr
 800fbdc:	4249      	negs	r1, r1
 800fbde:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fbe2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fbe6:	f04f 0200 	mov.w	r2, #0
 800fbea:	f04f 0300 	mov.w	r3, #0
 800fbee:	da04      	bge.n	800fbfa <__ulp+0x3e>
 800fbf0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fbf4:	fa41 f300 	asr.w	r3, r1, r0
 800fbf8:	e7ec      	b.n	800fbd4 <__ulp+0x18>
 800fbfa:	f1a0 0114 	sub.w	r1, r0, #20
 800fbfe:	291e      	cmp	r1, #30
 800fc00:	bfda      	itte	le
 800fc02:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fc06:	fa20 f101 	lsrle.w	r1, r0, r1
 800fc0a:	2101      	movgt	r1, #1
 800fc0c:	460a      	mov	r2, r1
 800fc0e:	e7e1      	b.n	800fbd4 <__ulp+0x18>
 800fc10:	7ff00000 	.word	0x7ff00000

0800fc14 <__b2d>:
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc16:	6905      	ldr	r5, [r0, #16]
 800fc18:	f100 0714 	add.w	r7, r0, #20
 800fc1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fc20:	1f2e      	subs	r6, r5, #4
 800fc22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fc26:	4620      	mov	r0, r4
 800fc28:	f7ff fd48 	bl	800f6bc <__hi0bits>
 800fc2c:	f1c0 0320 	rsb	r3, r0, #32
 800fc30:	280a      	cmp	r0, #10
 800fc32:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fcb0 <__b2d+0x9c>
 800fc36:	600b      	str	r3, [r1, #0]
 800fc38:	dc14      	bgt.n	800fc64 <__b2d+0x50>
 800fc3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc42:	42b7      	cmp	r7, r6
 800fc44:	ea41 030c 	orr.w	r3, r1, ip
 800fc48:	bf34      	ite	cc
 800fc4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc4e:	2100      	movcs	r1, #0
 800fc50:	3015      	adds	r0, #21
 800fc52:	fa04 f000 	lsl.w	r0, r4, r0
 800fc56:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc5a:	ea40 0201 	orr.w	r2, r0, r1
 800fc5e:	ec43 2b10 	vmov	d0, r2, r3
 800fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc64:	42b7      	cmp	r7, r6
 800fc66:	bf3a      	itte	cc
 800fc68:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc6c:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc70:	2100      	movcs	r1, #0
 800fc72:	380b      	subs	r0, #11
 800fc74:	d017      	beq.n	800fca6 <__b2d+0x92>
 800fc76:	f1c0 0c20 	rsb	ip, r0, #32
 800fc7a:	fa04 f500 	lsl.w	r5, r4, r0
 800fc7e:	42be      	cmp	r6, r7
 800fc80:	fa21 f40c 	lsr.w	r4, r1, ip
 800fc84:	ea45 0504 	orr.w	r5, r5, r4
 800fc88:	bf8c      	ite	hi
 800fc8a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc8e:	2400      	movls	r4, #0
 800fc90:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fc94:	fa01 f000 	lsl.w	r0, r1, r0
 800fc98:	fa24 f40c 	lsr.w	r4, r4, ip
 800fc9c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fca0:	ea40 0204 	orr.w	r2, r0, r4
 800fca4:	e7db      	b.n	800fc5e <__b2d+0x4a>
 800fca6:	ea44 030c 	orr.w	r3, r4, ip
 800fcaa:	460a      	mov	r2, r1
 800fcac:	e7d7      	b.n	800fc5e <__b2d+0x4a>
 800fcae:	bf00      	nop
 800fcb0:	3ff00000 	.word	0x3ff00000

0800fcb4 <__d2b>:
 800fcb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcb8:	4689      	mov	r9, r1
 800fcba:	2101      	movs	r1, #1
 800fcbc:	ec57 6b10 	vmov	r6, r7, d0
 800fcc0:	4690      	mov	r8, r2
 800fcc2:	f7ff fc09 	bl	800f4d8 <_Balloc>
 800fcc6:	4604      	mov	r4, r0
 800fcc8:	b930      	cbnz	r0, 800fcd8 <__d2b+0x24>
 800fcca:	4602      	mov	r2, r0
 800fccc:	4b25      	ldr	r3, [pc, #148]	; (800fd64 <__d2b+0xb0>)
 800fcce:	4826      	ldr	r0, [pc, #152]	; (800fd68 <__d2b+0xb4>)
 800fcd0:	f240 310a 	movw	r1, #778	; 0x30a
 800fcd4:	f000 fb4e 	bl	8010374 <__assert_func>
 800fcd8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fcdc:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fce0:	bb35      	cbnz	r5, 800fd30 <__d2b+0x7c>
 800fce2:	2e00      	cmp	r6, #0
 800fce4:	9301      	str	r3, [sp, #4]
 800fce6:	d028      	beq.n	800fd3a <__d2b+0x86>
 800fce8:	4668      	mov	r0, sp
 800fcea:	9600      	str	r6, [sp, #0]
 800fcec:	f7ff fd06 	bl	800f6fc <__lo0bits>
 800fcf0:	9900      	ldr	r1, [sp, #0]
 800fcf2:	b300      	cbz	r0, 800fd36 <__d2b+0x82>
 800fcf4:	9a01      	ldr	r2, [sp, #4]
 800fcf6:	f1c0 0320 	rsb	r3, r0, #32
 800fcfa:	fa02 f303 	lsl.w	r3, r2, r3
 800fcfe:	430b      	orrs	r3, r1
 800fd00:	40c2      	lsrs	r2, r0
 800fd02:	6163      	str	r3, [r4, #20]
 800fd04:	9201      	str	r2, [sp, #4]
 800fd06:	9b01      	ldr	r3, [sp, #4]
 800fd08:	61a3      	str	r3, [r4, #24]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	bf14      	ite	ne
 800fd0e:	2202      	movne	r2, #2
 800fd10:	2201      	moveq	r2, #1
 800fd12:	6122      	str	r2, [r4, #16]
 800fd14:	b1d5      	cbz	r5, 800fd4c <__d2b+0x98>
 800fd16:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fd1a:	4405      	add	r5, r0
 800fd1c:	f8c9 5000 	str.w	r5, [r9]
 800fd20:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd24:	f8c8 0000 	str.w	r0, [r8]
 800fd28:	4620      	mov	r0, r4
 800fd2a:	b003      	add	sp, #12
 800fd2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd30:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd34:	e7d5      	b.n	800fce2 <__d2b+0x2e>
 800fd36:	6161      	str	r1, [r4, #20]
 800fd38:	e7e5      	b.n	800fd06 <__d2b+0x52>
 800fd3a:	a801      	add	r0, sp, #4
 800fd3c:	f7ff fcde 	bl	800f6fc <__lo0bits>
 800fd40:	9b01      	ldr	r3, [sp, #4]
 800fd42:	6163      	str	r3, [r4, #20]
 800fd44:	2201      	movs	r2, #1
 800fd46:	6122      	str	r2, [r4, #16]
 800fd48:	3020      	adds	r0, #32
 800fd4a:	e7e3      	b.n	800fd14 <__d2b+0x60>
 800fd4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd54:	f8c9 0000 	str.w	r0, [r9]
 800fd58:	6918      	ldr	r0, [r3, #16]
 800fd5a:	f7ff fcaf 	bl	800f6bc <__hi0bits>
 800fd5e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd62:	e7df      	b.n	800fd24 <__d2b+0x70>
 800fd64:	080127b0 	.word	0x080127b0
 800fd68:	0801283c 	.word	0x0801283c

0800fd6c <__ratio>:
 800fd6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd70:	4688      	mov	r8, r1
 800fd72:	4669      	mov	r1, sp
 800fd74:	4681      	mov	r9, r0
 800fd76:	f7ff ff4d 	bl	800fc14 <__b2d>
 800fd7a:	a901      	add	r1, sp, #4
 800fd7c:	4640      	mov	r0, r8
 800fd7e:	ec55 4b10 	vmov	r4, r5, d0
 800fd82:	f7ff ff47 	bl	800fc14 <__b2d>
 800fd86:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd8a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd8e:	eba3 0c02 	sub.w	ip, r3, r2
 800fd92:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd96:	1a9b      	subs	r3, r3, r2
 800fd98:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd9c:	ec51 0b10 	vmov	r0, r1, d0
 800fda0:	2b00      	cmp	r3, #0
 800fda2:	bfd6      	itet	le
 800fda4:	460a      	movle	r2, r1
 800fda6:	462a      	movgt	r2, r5
 800fda8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fdac:	468b      	mov	fp, r1
 800fdae:	462f      	mov	r7, r5
 800fdb0:	bfd4      	ite	le
 800fdb2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fdb6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fdba:	4620      	mov	r0, r4
 800fdbc:	ee10 2a10 	vmov	r2, s0
 800fdc0:	465b      	mov	r3, fp
 800fdc2:	4639      	mov	r1, r7
 800fdc4:	f7f0 fd4a 	bl	800085c <__aeabi_ddiv>
 800fdc8:	ec41 0b10 	vmov	d0, r0, r1
 800fdcc:	b003      	add	sp, #12
 800fdce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdd2 <__copybits>:
 800fdd2:	3901      	subs	r1, #1
 800fdd4:	b570      	push	{r4, r5, r6, lr}
 800fdd6:	1149      	asrs	r1, r1, #5
 800fdd8:	6914      	ldr	r4, [r2, #16]
 800fdda:	3101      	adds	r1, #1
 800fddc:	f102 0314 	add.w	r3, r2, #20
 800fde0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fde4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fde8:	1f05      	subs	r5, r0, #4
 800fdea:	42a3      	cmp	r3, r4
 800fdec:	d30c      	bcc.n	800fe08 <__copybits+0x36>
 800fdee:	1aa3      	subs	r3, r4, r2
 800fdf0:	3b11      	subs	r3, #17
 800fdf2:	f023 0303 	bic.w	r3, r3, #3
 800fdf6:	3211      	adds	r2, #17
 800fdf8:	42a2      	cmp	r2, r4
 800fdfa:	bf88      	it	hi
 800fdfc:	2300      	movhi	r3, #0
 800fdfe:	4418      	add	r0, r3
 800fe00:	2300      	movs	r3, #0
 800fe02:	4288      	cmp	r0, r1
 800fe04:	d305      	bcc.n	800fe12 <__copybits+0x40>
 800fe06:	bd70      	pop	{r4, r5, r6, pc}
 800fe08:	f853 6b04 	ldr.w	r6, [r3], #4
 800fe0c:	f845 6f04 	str.w	r6, [r5, #4]!
 800fe10:	e7eb      	b.n	800fdea <__copybits+0x18>
 800fe12:	f840 3b04 	str.w	r3, [r0], #4
 800fe16:	e7f4      	b.n	800fe02 <__copybits+0x30>

0800fe18 <__any_on>:
 800fe18:	f100 0214 	add.w	r2, r0, #20
 800fe1c:	6900      	ldr	r0, [r0, #16]
 800fe1e:	114b      	asrs	r3, r1, #5
 800fe20:	4298      	cmp	r0, r3
 800fe22:	b510      	push	{r4, lr}
 800fe24:	db11      	blt.n	800fe4a <__any_on+0x32>
 800fe26:	dd0a      	ble.n	800fe3e <__any_on+0x26>
 800fe28:	f011 011f 	ands.w	r1, r1, #31
 800fe2c:	d007      	beq.n	800fe3e <__any_on+0x26>
 800fe2e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe32:	fa24 f001 	lsr.w	r0, r4, r1
 800fe36:	fa00 f101 	lsl.w	r1, r0, r1
 800fe3a:	428c      	cmp	r4, r1
 800fe3c:	d10b      	bne.n	800fe56 <__any_on+0x3e>
 800fe3e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe42:	4293      	cmp	r3, r2
 800fe44:	d803      	bhi.n	800fe4e <__any_on+0x36>
 800fe46:	2000      	movs	r0, #0
 800fe48:	bd10      	pop	{r4, pc}
 800fe4a:	4603      	mov	r3, r0
 800fe4c:	e7f7      	b.n	800fe3e <__any_on+0x26>
 800fe4e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe52:	2900      	cmp	r1, #0
 800fe54:	d0f5      	beq.n	800fe42 <__any_on+0x2a>
 800fe56:	2001      	movs	r0, #1
 800fe58:	e7f6      	b.n	800fe48 <__any_on+0x30>

0800fe5a <_calloc_r>:
 800fe5a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe5c:	fba1 2402 	umull	r2, r4, r1, r2
 800fe60:	b94c      	cbnz	r4, 800fe76 <_calloc_r+0x1c>
 800fe62:	4611      	mov	r1, r2
 800fe64:	9201      	str	r2, [sp, #4]
 800fe66:	f000 f87b 	bl	800ff60 <_malloc_r>
 800fe6a:	9a01      	ldr	r2, [sp, #4]
 800fe6c:	4605      	mov	r5, r0
 800fe6e:	b930      	cbnz	r0, 800fe7e <_calloc_r+0x24>
 800fe70:	4628      	mov	r0, r5
 800fe72:	b003      	add	sp, #12
 800fe74:	bd30      	pop	{r4, r5, pc}
 800fe76:	220c      	movs	r2, #12
 800fe78:	6002      	str	r2, [r0, #0]
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	e7f8      	b.n	800fe70 <_calloc_r+0x16>
 800fe7e:	4621      	mov	r1, r4
 800fe80:	f7fc fbcc 	bl	800c61c <memset>
 800fe84:	e7f4      	b.n	800fe70 <_calloc_r+0x16>
	...

0800fe88 <_free_r>:
 800fe88:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe8a:	2900      	cmp	r1, #0
 800fe8c:	d044      	beq.n	800ff18 <_free_r+0x90>
 800fe8e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe92:	9001      	str	r0, [sp, #4]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	f1a1 0404 	sub.w	r4, r1, #4
 800fe9a:	bfb8      	it	lt
 800fe9c:	18e4      	addlt	r4, r4, r3
 800fe9e:	f000 fab3 	bl	8010408 <__malloc_lock>
 800fea2:	4a1e      	ldr	r2, [pc, #120]	; (800ff1c <_free_r+0x94>)
 800fea4:	9801      	ldr	r0, [sp, #4]
 800fea6:	6813      	ldr	r3, [r2, #0]
 800fea8:	b933      	cbnz	r3, 800feb8 <_free_r+0x30>
 800feaa:	6063      	str	r3, [r4, #4]
 800feac:	6014      	str	r4, [r2, #0]
 800feae:	b003      	add	sp, #12
 800feb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800feb4:	f000 baae 	b.w	8010414 <__malloc_unlock>
 800feb8:	42a3      	cmp	r3, r4
 800feba:	d908      	bls.n	800fece <_free_r+0x46>
 800febc:	6825      	ldr	r5, [r4, #0]
 800febe:	1961      	adds	r1, r4, r5
 800fec0:	428b      	cmp	r3, r1
 800fec2:	bf01      	itttt	eq
 800fec4:	6819      	ldreq	r1, [r3, #0]
 800fec6:	685b      	ldreq	r3, [r3, #4]
 800fec8:	1949      	addeq	r1, r1, r5
 800feca:	6021      	streq	r1, [r4, #0]
 800fecc:	e7ed      	b.n	800feaa <_free_r+0x22>
 800fece:	461a      	mov	r2, r3
 800fed0:	685b      	ldr	r3, [r3, #4]
 800fed2:	b10b      	cbz	r3, 800fed8 <_free_r+0x50>
 800fed4:	42a3      	cmp	r3, r4
 800fed6:	d9fa      	bls.n	800fece <_free_r+0x46>
 800fed8:	6811      	ldr	r1, [r2, #0]
 800feda:	1855      	adds	r5, r2, r1
 800fedc:	42a5      	cmp	r5, r4
 800fede:	d10b      	bne.n	800fef8 <_free_r+0x70>
 800fee0:	6824      	ldr	r4, [r4, #0]
 800fee2:	4421      	add	r1, r4
 800fee4:	1854      	adds	r4, r2, r1
 800fee6:	42a3      	cmp	r3, r4
 800fee8:	6011      	str	r1, [r2, #0]
 800feea:	d1e0      	bne.n	800feae <_free_r+0x26>
 800feec:	681c      	ldr	r4, [r3, #0]
 800feee:	685b      	ldr	r3, [r3, #4]
 800fef0:	6053      	str	r3, [r2, #4]
 800fef2:	4421      	add	r1, r4
 800fef4:	6011      	str	r1, [r2, #0]
 800fef6:	e7da      	b.n	800feae <_free_r+0x26>
 800fef8:	d902      	bls.n	800ff00 <_free_r+0x78>
 800fefa:	230c      	movs	r3, #12
 800fefc:	6003      	str	r3, [r0, #0]
 800fefe:	e7d6      	b.n	800feae <_free_r+0x26>
 800ff00:	6825      	ldr	r5, [r4, #0]
 800ff02:	1961      	adds	r1, r4, r5
 800ff04:	428b      	cmp	r3, r1
 800ff06:	bf04      	itt	eq
 800ff08:	6819      	ldreq	r1, [r3, #0]
 800ff0a:	685b      	ldreq	r3, [r3, #4]
 800ff0c:	6063      	str	r3, [r4, #4]
 800ff0e:	bf04      	itt	eq
 800ff10:	1949      	addeq	r1, r1, r5
 800ff12:	6021      	streq	r1, [r4, #0]
 800ff14:	6054      	str	r4, [r2, #4]
 800ff16:	e7ca      	b.n	800feae <_free_r+0x26>
 800ff18:	b003      	add	sp, #12
 800ff1a:	bd30      	pop	{r4, r5, pc}
 800ff1c:	20001104 	.word	0x20001104

0800ff20 <sbrk_aligned>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	4e0e      	ldr	r6, [pc, #56]	; (800ff5c <sbrk_aligned+0x3c>)
 800ff24:	460c      	mov	r4, r1
 800ff26:	6831      	ldr	r1, [r6, #0]
 800ff28:	4605      	mov	r5, r0
 800ff2a:	b911      	cbnz	r1, 800ff32 <sbrk_aligned+0x12>
 800ff2c:	f000 f9f0 	bl	8010310 <_sbrk_r>
 800ff30:	6030      	str	r0, [r6, #0]
 800ff32:	4621      	mov	r1, r4
 800ff34:	4628      	mov	r0, r5
 800ff36:	f000 f9eb 	bl	8010310 <_sbrk_r>
 800ff3a:	1c43      	adds	r3, r0, #1
 800ff3c:	d00a      	beq.n	800ff54 <sbrk_aligned+0x34>
 800ff3e:	1cc4      	adds	r4, r0, #3
 800ff40:	f024 0403 	bic.w	r4, r4, #3
 800ff44:	42a0      	cmp	r0, r4
 800ff46:	d007      	beq.n	800ff58 <sbrk_aligned+0x38>
 800ff48:	1a21      	subs	r1, r4, r0
 800ff4a:	4628      	mov	r0, r5
 800ff4c:	f000 f9e0 	bl	8010310 <_sbrk_r>
 800ff50:	3001      	adds	r0, #1
 800ff52:	d101      	bne.n	800ff58 <sbrk_aligned+0x38>
 800ff54:	f04f 34ff 	mov.w	r4, #4294967295
 800ff58:	4620      	mov	r0, r4
 800ff5a:	bd70      	pop	{r4, r5, r6, pc}
 800ff5c:	20001108 	.word	0x20001108

0800ff60 <_malloc_r>:
 800ff60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff64:	1ccd      	adds	r5, r1, #3
 800ff66:	f025 0503 	bic.w	r5, r5, #3
 800ff6a:	3508      	adds	r5, #8
 800ff6c:	2d0c      	cmp	r5, #12
 800ff6e:	bf38      	it	cc
 800ff70:	250c      	movcc	r5, #12
 800ff72:	2d00      	cmp	r5, #0
 800ff74:	4607      	mov	r7, r0
 800ff76:	db01      	blt.n	800ff7c <_malloc_r+0x1c>
 800ff78:	42a9      	cmp	r1, r5
 800ff7a:	d905      	bls.n	800ff88 <_malloc_r+0x28>
 800ff7c:	230c      	movs	r3, #12
 800ff7e:	603b      	str	r3, [r7, #0]
 800ff80:	2600      	movs	r6, #0
 800ff82:	4630      	mov	r0, r6
 800ff84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff88:	4e2e      	ldr	r6, [pc, #184]	; (8010044 <_malloc_r+0xe4>)
 800ff8a:	f000 fa3d 	bl	8010408 <__malloc_lock>
 800ff8e:	6833      	ldr	r3, [r6, #0]
 800ff90:	461c      	mov	r4, r3
 800ff92:	bb34      	cbnz	r4, 800ffe2 <_malloc_r+0x82>
 800ff94:	4629      	mov	r1, r5
 800ff96:	4638      	mov	r0, r7
 800ff98:	f7ff ffc2 	bl	800ff20 <sbrk_aligned>
 800ff9c:	1c43      	adds	r3, r0, #1
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	d14d      	bne.n	801003e <_malloc_r+0xde>
 800ffa2:	6834      	ldr	r4, [r6, #0]
 800ffa4:	4626      	mov	r6, r4
 800ffa6:	2e00      	cmp	r6, #0
 800ffa8:	d140      	bne.n	801002c <_malloc_r+0xcc>
 800ffaa:	6823      	ldr	r3, [r4, #0]
 800ffac:	4631      	mov	r1, r6
 800ffae:	4638      	mov	r0, r7
 800ffb0:	eb04 0803 	add.w	r8, r4, r3
 800ffb4:	f000 f9ac 	bl	8010310 <_sbrk_r>
 800ffb8:	4580      	cmp	r8, r0
 800ffba:	d13a      	bne.n	8010032 <_malloc_r+0xd2>
 800ffbc:	6821      	ldr	r1, [r4, #0]
 800ffbe:	3503      	adds	r5, #3
 800ffc0:	1a6d      	subs	r5, r5, r1
 800ffc2:	f025 0503 	bic.w	r5, r5, #3
 800ffc6:	3508      	adds	r5, #8
 800ffc8:	2d0c      	cmp	r5, #12
 800ffca:	bf38      	it	cc
 800ffcc:	250c      	movcc	r5, #12
 800ffce:	4629      	mov	r1, r5
 800ffd0:	4638      	mov	r0, r7
 800ffd2:	f7ff ffa5 	bl	800ff20 <sbrk_aligned>
 800ffd6:	3001      	adds	r0, #1
 800ffd8:	d02b      	beq.n	8010032 <_malloc_r+0xd2>
 800ffda:	6823      	ldr	r3, [r4, #0]
 800ffdc:	442b      	add	r3, r5
 800ffde:	6023      	str	r3, [r4, #0]
 800ffe0:	e00e      	b.n	8010000 <_malloc_r+0xa0>
 800ffe2:	6822      	ldr	r2, [r4, #0]
 800ffe4:	1b52      	subs	r2, r2, r5
 800ffe6:	d41e      	bmi.n	8010026 <_malloc_r+0xc6>
 800ffe8:	2a0b      	cmp	r2, #11
 800ffea:	d916      	bls.n	801001a <_malloc_r+0xba>
 800ffec:	1961      	adds	r1, r4, r5
 800ffee:	42a3      	cmp	r3, r4
 800fff0:	6025      	str	r5, [r4, #0]
 800fff2:	bf18      	it	ne
 800fff4:	6059      	strne	r1, [r3, #4]
 800fff6:	6863      	ldr	r3, [r4, #4]
 800fff8:	bf08      	it	eq
 800fffa:	6031      	streq	r1, [r6, #0]
 800fffc:	5162      	str	r2, [r4, r5]
 800fffe:	604b      	str	r3, [r1, #4]
 8010000:	4638      	mov	r0, r7
 8010002:	f104 060b 	add.w	r6, r4, #11
 8010006:	f000 fa05 	bl	8010414 <__malloc_unlock>
 801000a:	f026 0607 	bic.w	r6, r6, #7
 801000e:	1d23      	adds	r3, r4, #4
 8010010:	1af2      	subs	r2, r6, r3
 8010012:	d0b6      	beq.n	800ff82 <_malloc_r+0x22>
 8010014:	1b9b      	subs	r3, r3, r6
 8010016:	50a3      	str	r3, [r4, r2]
 8010018:	e7b3      	b.n	800ff82 <_malloc_r+0x22>
 801001a:	6862      	ldr	r2, [r4, #4]
 801001c:	42a3      	cmp	r3, r4
 801001e:	bf0c      	ite	eq
 8010020:	6032      	streq	r2, [r6, #0]
 8010022:	605a      	strne	r2, [r3, #4]
 8010024:	e7ec      	b.n	8010000 <_malloc_r+0xa0>
 8010026:	4623      	mov	r3, r4
 8010028:	6864      	ldr	r4, [r4, #4]
 801002a:	e7b2      	b.n	800ff92 <_malloc_r+0x32>
 801002c:	4634      	mov	r4, r6
 801002e:	6876      	ldr	r6, [r6, #4]
 8010030:	e7b9      	b.n	800ffa6 <_malloc_r+0x46>
 8010032:	230c      	movs	r3, #12
 8010034:	603b      	str	r3, [r7, #0]
 8010036:	4638      	mov	r0, r7
 8010038:	f000 f9ec 	bl	8010414 <__malloc_unlock>
 801003c:	e7a1      	b.n	800ff82 <_malloc_r+0x22>
 801003e:	6025      	str	r5, [r4, #0]
 8010040:	e7de      	b.n	8010000 <_malloc_r+0xa0>
 8010042:	bf00      	nop
 8010044:	20001104 	.word	0x20001104

08010048 <__ssputs_r>:
 8010048:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801004c:	688e      	ldr	r6, [r1, #8]
 801004e:	429e      	cmp	r6, r3
 8010050:	4682      	mov	sl, r0
 8010052:	460c      	mov	r4, r1
 8010054:	4690      	mov	r8, r2
 8010056:	461f      	mov	r7, r3
 8010058:	d838      	bhi.n	80100cc <__ssputs_r+0x84>
 801005a:	898a      	ldrh	r2, [r1, #12]
 801005c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010060:	d032      	beq.n	80100c8 <__ssputs_r+0x80>
 8010062:	6825      	ldr	r5, [r4, #0]
 8010064:	6909      	ldr	r1, [r1, #16]
 8010066:	eba5 0901 	sub.w	r9, r5, r1
 801006a:	6965      	ldr	r5, [r4, #20]
 801006c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010070:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8010074:	3301      	adds	r3, #1
 8010076:	444b      	add	r3, r9
 8010078:	106d      	asrs	r5, r5, #1
 801007a:	429d      	cmp	r5, r3
 801007c:	bf38      	it	cc
 801007e:	461d      	movcc	r5, r3
 8010080:	0553      	lsls	r3, r2, #21
 8010082:	d531      	bpl.n	80100e8 <__ssputs_r+0xa0>
 8010084:	4629      	mov	r1, r5
 8010086:	f7ff ff6b 	bl	800ff60 <_malloc_r>
 801008a:	4606      	mov	r6, r0
 801008c:	b950      	cbnz	r0, 80100a4 <__ssputs_r+0x5c>
 801008e:	230c      	movs	r3, #12
 8010090:	f8ca 3000 	str.w	r3, [sl]
 8010094:	89a3      	ldrh	r3, [r4, #12]
 8010096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801009a:	81a3      	strh	r3, [r4, #12]
 801009c:	f04f 30ff 	mov.w	r0, #4294967295
 80100a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100a4:	6921      	ldr	r1, [r4, #16]
 80100a6:	464a      	mov	r2, r9
 80100a8:	f7fc faaa 	bl	800c600 <memcpy>
 80100ac:	89a3      	ldrh	r3, [r4, #12]
 80100ae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80100b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80100b6:	81a3      	strh	r3, [r4, #12]
 80100b8:	6126      	str	r6, [r4, #16]
 80100ba:	6165      	str	r5, [r4, #20]
 80100bc:	444e      	add	r6, r9
 80100be:	eba5 0509 	sub.w	r5, r5, r9
 80100c2:	6026      	str	r6, [r4, #0]
 80100c4:	60a5      	str	r5, [r4, #8]
 80100c6:	463e      	mov	r6, r7
 80100c8:	42be      	cmp	r6, r7
 80100ca:	d900      	bls.n	80100ce <__ssputs_r+0x86>
 80100cc:	463e      	mov	r6, r7
 80100ce:	6820      	ldr	r0, [r4, #0]
 80100d0:	4632      	mov	r2, r6
 80100d2:	4641      	mov	r1, r8
 80100d4:	f000 f97e 	bl	80103d4 <memmove>
 80100d8:	68a3      	ldr	r3, [r4, #8]
 80100da:	1b9b      	subs	r3, r3, r6
 80100dc:	60a3      	str	r3, [r4, #8]
 80100de:	6823      	ldr	r3, [r4, #0]
 80100e0:	4433      	add	r3, r6
 80100e2:	6023      	str	r3, [r4, #0]
 80100e4:	2000      	movs	r0, #0
 80100e6:	e7db      	b.n	80100a0 <__ssputs_r+0x58>
 80100e8:	462a      	mov	r2, r5
 80100ea:	f000 f999 	bl	8010420 <_realloc_r>
 80100ee:	4606      	mov	r6, r0
 80100f0:	2800      	cmp	r0, #0
 80100f2:	d1e1      	bne.n	80100b8 <__ssputs_r+0x70>
 80100f4:	6921      	ldr	r1, [r4, #16]
 80100f6:	4650      	mov	r0, sl
 80100f8:	f7ff fec6 	bl	800fe88 <_free_r>
 80100fc:	e7c7      	b.n	801008e <__ssputs_r+0x46>
	...

08010100 <_svfiprintf_r>:
 8010100:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010104:	4698      	mov	r8, r3
 8010106:	898b      	ldrh	r3, [r1, #12]
 8010108:	061b      	lsls	r3, r3, #24
 801010a:	b09d      	sub	sp, #116	; 0x74
 801010c:	4607      	mov	r7, r0
 801010e:	460d      	mov	r5, r1
 8010110:	4614      	mov	r4, r2
 8010112:	d50e      	bpl.n	8010132 <_svfiprintf_r+0x32>
 8010114:	690b      	ldr	r3, [r1, #16]
 8010116:	b963      	cbnz	r3, 8010132 <_svfiprintf_r+0x32>
 8010118:	2140      	movs	r1, #64	; 0x40
 801011a:	f7ff ff21 	bl	800ff60 <_malloc_r>
 801011e:	6028      	str	r0, [r5, #0]
 8010120:	6128      	str	r0, [r5, #16]
 8010122:	b920      	cbnz	r0, 801012e <_svfiprintf_r+0x2e>
 8010124:	230c      	movs	r3, #12
 8010126:	603b      	str	r3, [r7, #0]
 8010128:	f04f 30ff 	mov.w	r0, #4294967295
 801012c:	e0d1      	b.n	80102d2 <_svfiprintf_r+0x1d2>
 801012e:	2340      	movs	r3, #64	; 0x40
 8010130:	616b      	str	r3, [r5, #20]
 8010132:	2300      	movs	r3, #0
 8010134:	9309      	str	r3, [sp, #36]	; 0x24
 8010136:	2320      	movs	r3, #32
 8010138:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801013c:	f8cd 800c 	str.w	r8, [sp, #12]
 8010140:	2330      	movs	r3, #48	; 0x30
 8010142:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102ec <_svfiprintf_r+0x1ec>
 8010146:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801014a:	f04f 0901 	mov.w	r9, #1
 801014e:	4623      	mov	r3, r4
 8010150:	469a      	mov	sl, r3
 8010152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010156:	b10a      	cbz	r2, 801015c <_svfiprintf_r+0x5c>
 8010158:	2a25      	cmp	r2, #37	; 0x25
 801015a:	d1f9      	bne.n	8010150 <_svfiprintf_r+0x50>
 801015c:	ebba 0b04 	subs.w	fp, sl, r4
 8010160:	d00b      	beq.n	801017a <_svfiprintf_r+0x7a>
 8010162:	465b      	mov	r3, fp
 8010164:	4622      	mov	r2, r4
 8010166:	4629      	mov	r1, r5
 8010168:	4638      	mov	r0, r7
 801016a:	f7ff ff6d 	bl	8010048 <__ssputs_r>
 801016e:	3001      	adds	r0, #1
 8010170:	f000 80aa 	beq.w	80102c8 <_svfiprintf_r+0x1c8>
 8010174:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010176:	445a      	add	r2, fp
 8010178:	9209      	str	r2, [sp, #36]	; 0x24
 801017a:	f89a 3000 	ldrb.w	r3, [sl]
 801017e:	2b00      	cmp	r3, #0
 8010180:	f000 80a2 	beq.w	80102c8 <_svfiprintf_r+0x1c8>
 8010184:	2300      	movs	r3, #0
 8010186:	f04f 32ff 	mov.w	r2, #4294967295
 801018a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801018e:	f10a 0a01 	add.w	sl, sl, #1
 8010192:	9304      	str	r3, [sp, #16]
 8010194:	9307      	str	r3, [sp, #28]
 8010196:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801019a:	931a      	str	r3, [sp, #104]	; 0x68
 801019c:	4654      	mov	r4, sl
 801019e:	2205      	movs	r2, #5
 80101a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80101a4:	4851      	ldr	r0, [pc, #324]	; (80102ec <_svfiprintf_r+0x1ec>)
 80101a6:	f7f0 f823 	bl	80001f0 <memchr>
 80101aa:	9a04      	ldr	r2, [sp, #16]
 80101ac:	b9d8      	cbnz	r0, 80101e6 <_svfiprintf_r+0xe6>
 80101ae:	06d0      	lsls	r0, r2, #27
 80101b0:	bf44      	itt	mi
 80101b2:	2320      	movmi	r3, #32
 80101b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101b8:	0711      	lsls	r1, r2, #28
 80101ba:	bf44      	itt	mi
 80101bc:	232b      	movmi	r3, #43	; 0x2b
 80101be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80101c2:	f89a 3000 	ldrb.w	r3, [sl]
 80101c6:	2b2a      	cmp	r3, #42	; 0x2a
 80101c8:	d015      	beq.n	80101f6 <_svfiprintf_r+0xf6>
 80101ca:	9a07      	ldr	r2, [sp, #28]
 80101cc:	4654      	mov	r4, sl
 80101ce:	2000      	movs	r0, #0
 80101d0:	f04f 0c0a 	mov.w	ip, #10
 80101d4:	4621      	mov	r1, r4
 80101d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101da:	3b30      	subs	r3, #48	; 0x30
 80101dc:	2b09      	cmp	r3, #9
 80101de:	d94e      	bls.n	801027e <_svfiprintf_r+0x17e>
 80101e0:	b1b0      	cbz	r0, 8010210 <_svfiprintf_r+0x110>
 80101e2:	9207      	str	r2, [sp, #28]
 80101e4:	e014      	b.n	8010210 <_svfiprintf_r+0x110>
 80101e6:	eba0 0308 	sub.w	r3, r0, r8
 80101ea:	fa09 f303 	lsl.w	r3, r9, r3
 80101ee:	4313      	orrs	r3, r2
 80101f0:	9304      	str	r3, [sp, #16]
 80101f2:	46a2      	mov	sl, r4
 80101f4:	e7d2      	b.n	801019c <_svfiprintf_r+0x9c>
 80101f6:	9b03      	ldr	r3, [sp, #12]
 80101f8:	1d19      	adds	r1, r3, #4
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	9103      	str	r1, [sp, #12]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	bfbb      	ittet	lt
 8010202:	425b      	neglt	r3, r3
 8010204:	f042 0202 	orrlt.w	r2, r2, #2
 8010208:	9307      	strge	r3, [sp, #28]
 801020a:	9307      	strlt	r3, [sp, #28]
 801020c:	bfb8      	it	lt
 801020e:	9204      	strlt	r2, [sp, #16]
 8010210:	7823      	ldrb	r3, [r4, #0]
 8010212:	2b2e      	cmp	r3, #46	; 0x2e
 8010214:	d10c      	bne.n	8010230 <_svfiprintf_r+0x130>
 8010216:	7863      	ldrb	r3, [r4, #1]
 8010218:	2b2a      	cmp	r3, #42	; 0x2a
 801021a:	d135      	bne.n	8010288 <_svfiprintf_r+0x188>
 801021c:	9b03      	ldr	r3, [sp, #12]
 801021e:	1d1a      	adds	r2, r3, #4
 8010220:	681b      	ldr	r3, [r3, #0]
 8010222:	9203      	str	r2, [sp, #12]
 8010224:	2b00      	cmp	r3, #0
 8010226:	bfb8      	it	lt
 8010228:	f04f 33ff 	movlt.w	r3, #4294967295
 801022c:	3402      	adds	r4, #2
 801022e:	9305      	str	r3, [sp, #20]
 8010230:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102fc <_svfiprintf_r+0x1fc>
 8010234:	7821      	ldrb	r1, [r4, #0]
 8010236:	2203      	movs	r2, #3
 8010238:	4650      	mov	r0, sl
 801023a:	f7ef ffd9 	bl	80001f0 <memchr>
 801023e:	b140      	cbz	r0, 8010252 <_svfiprintf_r+0x152>
 8010240:	2340      	movs	r3, #64	; 0x40
 8010242:	eba0 000a 	sub.w	r0, r0, sl
 8010246:	fa03 f000 	lsl.w	r0, r3, r0
 801024a:	9b04      	ldr	r3, [sp, #16]
 801024c:	4303      	orrs	r3, r0
 801024e:	3401      	adds	r4, #1
 8010250:	9304      	str	r3, [sp, #16]
 8010252:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010256:	4826      	ldr	r0, [pc, #152]	; (80102f0 <_svfiprintf_r+0x1f0>)
 8010258:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801025c:	2206      	movs	r2, #6
 801025e:	f7ef ffc7 	bl	80001f0 <memchr>
 8010262:	2800      	cmp	r0, #0
 8010264:	d038      	beq.n	80102d8 <_svfiprintf_r+0x1d8>
 8010266:	4b23      	ldr	r3, [pc, #140]	; (80102f4 <_svfiprintf_r+0x1f4>)
 8010268:	bb1b      	cbnz	r3, 80102b2 <_svfiprintf_r+0x1b2>
 801026a:	9b03      	ldr	r3, [sp, #12]
 801026c:	3307      	adds	r3, #7
 801026e:	f023 0307 	bic.w	r3, r3, #7
 8010272:	3308      	adds	r3, #8
 8010274:	9303      	str	r3, [sp, #12]
 8010276:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010278:	4433      	add	r3, r6
 801027a:	9309      	str	r3, [sp, #36]	; 0x24
 801027c:	e767      	b.n	801014e <_svfiprintf_r+0x4e>
 801027e:	fb0c 3202 	mla	r2, ip, r2, r3
 8010282:	460c      	mov	r4, r1
 8010284:	2001      	movs	r0, #1
 8010286:	e7a5      	b.n	80101d4 <_svfiprintf_r+0xd4>
 8010288:	2300      	movs	r3, #0
 801028a:	3401      	adds	r4, #1
 801028c:	9305      	str	r3, [sp, #20]
 801028e:	4619      	mov	r1, r3
 8010290:	f04f 0c0a 	mov.w	ip, #10
 8010294:	4620      	mov	r0, r4
 8010296:	f810 2b01 	ldrb.w	r2, [r0], #1
 801029a:	3a30      	subs	r2, #48	; 0x30
 801029c:	2a09      	cmp	r2, #9
 801029e:	d903      	bls.n	80102a8 <_svfiprintf_r+0x1a8>
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d0c5      	beq.n	8010230 <_svfiprintf_r+0x130>
 80102a4:	9105      	str	r1, [sp, #20]
 80102a6:	e7c3      	b.n	8010230 <_svfiprintf_r+0x130>
 80102a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80102ac:	4604      	mov	r4, r0
 80102ae:	2301      	movs	r3, #1
 80102b0:	e7f0      	b.n	8010294 <_svfiprintf_r+0x194>
 80102b2:	ab03      	add	r3, sp, #12
 80102b4:	9300      	str	r3, [sp, #0]
 80102b6:	462a      	mov	r2, r5
 80102b8:	4b0f      	ldr	r3, [pc, #60]	; (80102f8 <_svfiprintf_r+0x1f8>)
 80102ba:	a904      	add	r1, sp, #16
 80102bc:	4638      	mov	r0, r7
 80102be:	f7fc fa55 	bl	800c76c <_printf_float>
 80102c2:	1c42      	adds	r2, r0, #1
 80102c4:	4606      	mov	r6, r0
 80102c6:	d1d6      	bne.n	8010276 <_svfiprintf_r+0x176>
 80102c8:	89ab      	ldrh	r3, [r5, #12]
 80102ca:	065b      	lsls	r3, r3, #25
 80102cc:	f53f af2c 	bmi.w	8010128 <_svfiprintf_r+0x28>
 80102d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80102d2:	b01d      	add	sp, #116	; 0x74
 80102d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102d8:	ab03      	add	r3, sp, #12
 80102da:	9300      	str	r3, [sp, #0]
 80102dc:	462a      	mov	r2, r5
 80102de:	4b06      	ldr	r3, [pc, #24]	; (80102f8 <_svfiprintf_r+0x1f8>)
 80102e0:	a904      	add	r1, sp, #16
 80102e2:	4638      	mov	r0, r7
 80102e4:	f7fc fce6 	bl	800ccb4 <_printf_i>
 80102e8:	e7eb      	b.n	80102c2 <_svfiprintf_r+0x1c2>
 80102ea:	bf00      	nop
 80102ec:	08012994 	.word	0x08012994
 80102f0:	0801299e 	.word	0x0801299e
 80102f4:	0800c76d 	.word	0x0800c76d
 80102f8:	08010049 	.word	0x08010049
 80102fc:	0801299a 	.word	0x0801299a

08010300 <nan>:
 8010300:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010308 <nan+0x8>
 8010304:	4770      	bx	lr
 8010306:	bf00      	nop
 8010308:	00000000 	.word	0x00000000
 801030c:	7ff80000 	.word	0x7ff80000

08010310 <_sbrk_r>:
 8010310:	b538      	push	{r3, r4, r5, lr}
 8010312:	4d06      	ldr	r5, [pc, #24]	; (801032c <_sbrk_r+0x1c>)
 8010314:	2300      	movs	r3, #0
 8010316:	4604      	mov	r4, r0
 8010318:	4608      	mov	r0, r1
 801031a:	602b      	str	r3, [r5, #0]
 801031c:	f7f4 fe76 	bl	800500c <_sbrk>
 8010320:	1c43      	adds	r3, r0, #1
 8010322:	d102      	bne.n	801032a <_sbrk_r+0x1a>
 8010324:	682b      	ldr	r3, [r5, #0]
 8010326:	b103      	cbz	r3, 801032a <_sbrk_r+0x1a>
 8010328:	6023      	str	r3, [r4, #0]
 801032a:	bd38      	pop	{r3, r4, r5, pc}
 801032c:	2000110c 	.word	0x2000110c

08010330 <strncmp>:
 8010330:	b510      	push	{r4, lr}
 8010332:	b17a      	cbz	r2, 8010354 <strncmp+0x24>
 8010334:	4603      	mov	r3, r0
 8010336:	3901      	subs	r1, #1
 8010338:	1884      	adds	r4, r0, r2
 801033a:	f813 0b01 	ldrb.w	r0, [r3], #1
 801033e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8010342:	4290      	cmp	r0, r2
 8010344:	d101      	bne.n	801034a <strncmp+0x1a>
 8010346:	42a3      	cmp	r3, r4
 8010348:	d101      	bne.n	801034e <strncmp+0x1e>
 801034a:	1a80      	subs	r0, r0, r2
 801034c:	bd10      	pop	{r4, pc}
 801034e:	2800      	cmp	r0, #0
 8010350:	d1f3      	bne.n	801033a <strncmp+0xa>
 8010352:	e7fa      	b.n	801034a <strncmp+0x1a>
 8010354:	4610      	mov	r0, r2
 8010356:	e7f9      	b.n	801034c <strncmp+0x1c>

08010358 <__ascii_wctomb>:
 8010358:	b149      	cbz	r1, 801036e <__ascii_wctomb+0x16>
 801035a:	2aff      	cmp	r2, #255	; 0xff
 801035c:	bf85      	ittet	hi
 801035e:	238a      	movhi	r3, #138	; 0x8a
 8010360:	6003      	strhi	r3, [r0, #0]
 8010362:	700a      	strbls	r2, [r1, #0]
 8010364:	f04f 30ff 	movhi.w	r0, #4294967295
 8010368:	bf98      	it	ls
 801036a:	2001      	movls	r0, #1
 801036c:	4770      	bx	lr
 801036e:	4608      	mov	r0, r1
 8010370:	4770      	bx	lr
	...

08010374 <__assert_func>:
 8010374:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010376:	4614      	mov	r4, r2
 8010378:	461a      	mov	r2, r3
 801037a:	4b09      	ldr	r3, [pc, #36]	; (80103a0 <__assert_func+0x2c>)
 801037c:	681b      	ldr	r3, [r3, #0]
 801037e:	4605      	mov	r5, r0
 8010380:	68d8      	ldr	r0, [r3, #12]
 8010382:	b14c      	cbz	r4, 8010398 <__assert_func+0x24>
 8010384:	4b07      	ldr	r3, [pc, #28]	; (80103a4 <__assert_func+0x30>)
 8010386:	9100      	str	r1, [sp, #0]
 8010388:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801038c:	4906      	ldr	r1, [pc, #24]	; (80103a8 <__assert_func+0x34>)
 801038e:	462b      	mov	r3, r5
 8010390:	f000 f80e 	bl	80103b0 <fiprintf>
 8010394:	f000 fa8c 	bl	80108b0 <abort>
 8010398:	4b04      	ldr	r3, [pc, #16]	; (80103ac <__assert_func+0x38>)
 801039a:	461c      	mov	r4, r3
 801039c:	e7f3      	b.n	8010386 <__assert_func+0x12>
 801039e:	bf00      	nop
 80103a0:	2000025c 	.word	0x2000025c
 80103a4:	080129a5 	.word	0x080129a5
 80103a8:	080129b2 	.word	0x080129b2
 80103ac:	080129e0 	.word	0x080129e0

080103b0 <fiprintf>:
 80103b0:	b40e      	push	{r1, r2, r3}
 80103b2:	b503      	push	{r0, r1, lr}
 80103b4:	4601      	mov	r1, r0
 80103b6:	ab03      	add	r3, sp, #12
 80103b8:	4805      	ldr	r0, [pc, #20]	; (80103d0 <fiprintf+0x20>)
 80103ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80103be:	6800      	ldr	r0, [r0, #0]
 80103c0:	9301      	str	r3, [sp, #4]
 80103c2:	f000 f885 	bl	80104d0 <_vfiprintf_r>
 80103c6:	b002      	add	sp, #8
 80103c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80103cc:	b003      	add	sp, #12
 80103ce:	4770      	bx	lr
 80103d0:	2000025c 	.word	0x2000025c

080103d4 <memmove>:
 80103d4:	4288      	cmp	r0, r1
 80103d6:	b510      	push	{r4, lr}
 80103d8:	eb01 0402 	add.w	r4, r1, r2
 80103dc:	d902      	bls.n	80103e4 <memmove+0x10>
 80103de:	4284      	cmp	r4, r0
 80103e0:	4623      	mov	r3, r4
 80103e2:	d807      	bhi.n	80103f4 <memmove+0x20>
 80103e4:	1e43      	subs	r3, r0, #1
 80103e6:	42a1      	cmp	r1, r4
 80103e8:	d008      	beq.n	80103fc <memmove+0x28>
 80103ea:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103ee:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103f2:	e7f8      	b.n	80103e6 <memmove+0x12>
 80103f4:	4402      	add	r2, r0
 80103f6:	4601      	mov	r1, r0
 80103f8:	428a      	cmp	r2, r1
 80103fa:	d100      	bne.n	80103fe <memmove+0x2a>
 80103fc:	bd10      	pop	{r4, pc}
 80103fe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010402:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8010406:	e7f7      	b.n	80103f8 <memmove+0x24>

08010408 <__malloc_lock>:
 8010408:	4801      	ldr	r0, [pc, #4]	; (8010410 <__malloc_lock+0x8>)
 801040a:	f000 bc11 	b.w	8010c30 <__retarget_lock_acquire_recursive>
 801040e:	bf00      	nop
 8010410:	20001110 	.word	0x20001110

08010414 <__malloc_unlock>:
 8010414:	4801      	ldr	r0, [pc, #4]	; (801041c <__malloc_unlock+0x8>)
 8010416:	f000 bc0c 	b.w	8010c32 <__retarget_lock_release_recursive>
 801041a:	bf00      	nop
 801041c:	20001110 	.word	0x20001110

08010420 <_realloc_r>:
 8010420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010424:	4680      	mov	r8, r0
 8010426:	4614      	mov	r4, r2
 8010428:	460e      	mov	r6, r1
 801042a:	b921      	cbnz	r1, 8010436 <_realloc_r+0x16>
 801042c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010430:	4611      	mov	r1, r2
 8010432:	f7ff bd95 	b.w	800ff60 <_malloc_r>
 8010436:	b92a      	cbnz	r2, 8010444 <_realloc_r+0x24>
 8010438:	f7ff fd26 	bl	800fe88 <_free_r>
 801043c:	4625      	mov	r5, r4
 801043e:	4628      	mov	r0, r5
 8010440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010444:	f000 fc5c 	bl	8010d00 <_malloc_usable_size_r>
 8010448:	4284      	cmp	r4, r0
 801044a:	4607      	mov	r7, r0
 801044c:	d802      	bhi.n	8010454 <_realloc_r+0x34>
 801044e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8010452:	d812      	bhi.n	801047a <_realloc_r+0x5a>
 8010454:	4621      	mov	r1, r4
 8010456:	4640      	mov	r0, r8
 8010458:	f7ff fd82 	bl	800ff60 <_malloc_r>
 801045c:	4605      	mov	r5, r0
 801045e:	2800      	cmp	r0, #0
 8010460:	d0ed      	beq.n	801043e <_realloc_r+0x1e>
 8010462:	42bc      	cmp	r4, r7
 8010464:	4622      	mov	r2, r4
 8010466:	4631      	mov	r1, r6
 8010468:	bf28      	it	cs
 801046a:	463a      	movcs	r2, r7
 801046c:	f7fc f8c8 	bl	800c600 <memcpy>
 8010470:	4631      	mov	r1, r6
 8010472:	4640      	mov	r0, r8
 8010474:	f7ff fd08 	bl	800fe88 <_free_r>
 8010478:	e7e1      	b.n	801043e <_realloc_r+0x1e>
 801047a:	4635      	mov	r5, r6
 801047c:	e7df      	b.n	801043e <_realloc_r+0x1e>

0801047e <__sfputc_r>:
 801047e:	6893      	ldr	r3, [r2, #8]
 8010480:	3b01      	subs	r3, #1
 8010482:	2b00      	cmp	r3, #0
 8010484:	b410      	push	{r4}
 8010486:	6093      	str	r3, [r2, #8]
 8010488:	da08      	bge.n	801049c <__sfputc_r+0x1e>
 801048a:	6994      	ldr	r4, [r2, #24]
 801048c:	42a3      	cmp	r3, r4
 801048e:	db01      	blt.n	8010494 <__sfputc_r+0x16>
 8010490:	290a      	cmp	r1, #10
 8010492:	d103      	bne.n	801049c <__sfputc_r+0x1e>
 8010494:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010498:	f000 b94a 	b.w	8010730 <__swbuf_r>
 801049c:	6813      	ldr	r3, [r2, #0]
 801049e:	1c58      	adds	r0, r3, #1
 80104a0:	6010      	str	r0, [r2, #0]
 80104a2:	7019      	strb	r1, [r3, #0]
 80104a4:	4608      	mov	r0, r1
 80104a6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80104aa:	4770      	bx	lr

080104ac <__sfputs_r>:
 80104ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80104ae:	4606      	mov	r6, r0
 80104b0:	460f      	mov	r7, r1
 80104b2:	4614      	mov	r4, r2
 80104b4:	18d5      	adds	r5, r2, r3
 80104b6:	42ac      	cmp	r4, r5
 80104b8:	d101      	bne.n	80104be <__sfputs_r+0x12>
 80104ba:	2000      	movs	r0, #0
 80104bc:	e007      	b.n	80104ce <__sfputs_r+0x22>
 80104be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104c2:	463a      	mov	r2, r7
 80104c4:	4630      	mov	r0, r6
 80104c6:	f7ff ffda 	bl	801047e <__sfputc_r>
 80104ca:	1c43      	adds	r3, r0, #1
 80104cc:	d1f3      	bne.n	80104b6 <__sfputs_r+0xa>
 80104ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080104d0 <_vfiprintf_r>:
 80104d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80104d4:	460d      	mov	r5, r1
 80104d6:	b09d      	sub	sp, #116	; 0x74
 80104d8:	4614      	mov	r4, r2
 80104da:	4698      	mov	r8, r3
 80104dc:	4606      	mov	r6, r0
 80104de:	b118      	cbz	r0, 80104e8 <_vfiprintf_r+0x18>
 80104e0:	6983      	ldr	r3, [r0, #24]
 80104e2:	b90b      	cbnz	r3, 80104e8 <_vfiprintf_r+0x18>
 80104e4:	f000 fb06 	bl	8010af4 <__sinit>
 80104e8:	4b89      	ldr	r3, [pc, #548]	; (8010710 <_vfiprintf_r+0x240>)
 80104ea:	429d      	cmp	r5, r3
 80104ec:	d11b      	bne.n	8010526 <_vfiprintf_r+0x56>
 80104ee:	6875      	ldr	r5, [r6, #4]
 80104f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104f2:	07d9      	lsls	r1, r3, #31
 80104f4:	d405      	bmi.n	8010502 <_vfiprintf_r+0x32>
 80104f6:	89ab      	ldrh	r3, [r5, #12]
 80104f8:	059a      	lsls	r2, r3, #22
 80104fa:	d402      	bmi.n	8010502 <_vfiprintf_r+0x32>
 80104fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104fe:	f000 fb97 	bl	8010c30 <__retarget_lock_acquire_recursive>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	071b      	lsls	r3, r3, #28
 8010506:	d501      	bpl.n	801050c <_vfiprintf_r+0x3c>
 8010508:	692b      	ldr	r3, [r5, #16]
 801050a:	b9eb      	cbnz	r3, 8010548 <_vfiprintf_r+0x78>
 801050c:	4629      	mov	r1, r5
 801050e:	4630      	mov	r0, r6
 8010510:	f000 f960 	bl	80107d4 <__swsetup_r>
 8010514:	b1c0      	cbz	r0, 8010548 <_vfiprintf_r+0x78>
 8010516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010518:	07dc      	lsls	r4, r3, #31
 801051a:	d50e      	bpl.n	801053a <_vfiprintf_r+0x6a>
 801051c:	f04f 30ff 	mov.w	r0, #4294967295
 8010520:	b01d      	add	sp, #116	; 0x74
 8010522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010526:	4b7b      	ldr	r3, [pc, #492]	; (8010714 <_vfiprintf_r+0x244>)
 8010528:	429d      	cmp	r5, r3
 801052a:	d101      	bne.n	8010530 <_vfiprintf_r+0x60>
 801052c:	68b5      	ldr	r5, [r6, #8]
 801052e:	e7df      	b.n	80104f0 <_vfiprintf_r+0x20>
 8010530:	4b79      	ldr	r3, [pc, #484]	; (8010718 <_vfiprintf_r+0x248>)
 8010532:	429d      	cmp	r5, r3
 8010534:	bf08      	it	eq
 8010536:	68f5      	ldreq	r5, [r6, #12]
 8010538:	e7da      	b.n	80104f0 <_vfiprintf_r+0x20>
 801053a:	89ab      	ldrh	r3, [r5, #12]
 801053c:	0598      	lsls	r0, r3, #22
 801053e:	d4ed      	bmi.n	801051c <_vfiprintf_r+0x4c>
 8010540:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010542:	f000 fb76 	bl	8010c32 <__retarget_lock_release_recursive>
 8010546:	e7e9      	b.n	801051c <_vfiprintf_r+0x4c>
 8010548:	2300      	movs	r3, #0
 801054a:	9309      	str	r3, [sp, #36]	; 0x24
 801054c:	2320      	movs	r3, #32
 801054e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010552:	f8cd 800c 	str.w	r8, [sp, #12]
 8010556:	2330      	movs	r3, #48	; 0x30
 8010558:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801071c <_vfiprintf_r+0x24c>
 801055c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010560:	f04f 0901 	mov.w	r9, #1
 8010564:	4623      	mov	r3, r4
 8010566:	469a      	mov	sl, r3
 8010568:	f813 2b01 	ldrb.w	r2, [r3], #1
 801056c:	b10a      	cbz	r2, 8010572 <_vfiprintf_r+0xa2>
 801056e:	2a25      	cmp	r2, #37	; 0x25
 8010570:	d1f9      	bne.n	8010566 <_vfiprintf_r+0x96>
 8010572:	ebba 0b04 	subs.w	fp, sl, r4
 8010576:	d00b      	beq.n	8010590 <_vfiprintf_r+0xc0>
 8010578:	465b      	mov	r3, fp
 801057a:	4622      	mov	r2, r4
 801057c:	4629      	mov	r1, r5
 801057e:	4630      	mov	r0, r6
 8010580:	f7ff ff94 	bl	80104ac <__sfputs_r>
 8010584:	3001      	adds	r0, #1
 8010586:	f000 80aa 	beq.w	80106de <_vfiprintf_r+0x20e>
 801058a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801058c:	445a      	add	r2, fp
 801058e:	9209      	str	r2, [sp, #36]	; 0x24
 8010590:	f89a 3000 	ldrb.w	r3, [sl]
 8010594:	2b00      	cmp	r3, #0
 8010596:	f000 80a2 	beq.w	80106de <_vfiprintf_r+0x20e>
 801059a:	2300      	movs	r3, #0
 801059c:	f04f 32ff 	mov.w	r2, #4294967295
 80105a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105a4:	f10a 0a01 	add.w	sl, sl, #1
 80105a8:	9304      	str	r3, [sp, #16]
 80105aa:	9307      	str	r3, [sp, #28]
 80105ac:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105b0:	931a      	str	r3, [sp, #104]	; 0x68
 80105b2:	4654      	mov	r4, sl
 80105b4:	2205      	movs	r2, #5
 80105b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ba:	4858      	ldr	r0, [pc, #352]	; (801071c <_vfiprintf_r+0x24c>)
 80105bc:	f7ef fe18 	bl	80001f0 <memchr>
 80105c0:	9a04      	ldr	r2, [sp, #16]
 80105c2:	b9d8      	cbnz	r0, 80105fc <_vfiprintf_r+0x12c>
 80105c4:	06d1      	lsls	r1, r2, #27
 80105c6:	bf44      	itt	mi
 80105c8:	2320      	movmi	r3, #32
 80105ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ce:	0713      	lsls	r3, r2, #28
 80105d0:	bf44      	itt	mi
 80105d2:	232b      	movmi	r3, #43	; 0x2b
 80105d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105d8:	f89a 3000 	ldrb.w	r3, [sl]
 80105dc:	2b2a      	cmp	r3, #42	; 0x2a
 80105de:	d015      	beq.n	801060c <_vfiprintf_r+0x13c>
 80105e0:	9a07      	ldr	r2, [sp, #28]
 80105e2:	4654      	mov	r4, sl
 80105e4:	2000      	movs	r0, #0
 80105e6:	f04f 0c0a 	mov.w	ip, #10
 80105ea:	4621      	mov	r1, r4
 80105ec:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105f0:	3b30      	subs	r3, #48	; 0x30
 80105f2:	2b09      	cmp	r3, #9
 80105f4:	d94e      	bls.n	8010694 <_vfiprintf_r+0x1c4>
 80105f6:	b1b0      	cbz	r0, 8010626 <_vfiprintf_r+0x156>
 80105f8:	9207      	str	r2, [sp, #28]
 80105fa:	e014      	b.n	8010626 <_vfiprintf_r+0x156>
 80105fc:	eba0 0308 	sub.w	r3, r0, r8
 8010600:	fa09 f303 	lsl.w	r3, r9, r3
 8010604:	4313      	orrs	r3, r2
 8010606:	9304      	str	r3, [sp, #16]
 8010608:	46a2      	mov	sl, r4
 801060a:	e7d2      	b.n	80105b2 <_vfiprintf_r+0xe2>
 801060c:	9b03      	ldr	r3, [sp, #12]
 801060e:	1d19      	adds	r1, r3, #4
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	9103      	str	r1, [sp, #12]
 8010614:	2b00      	cmp	r3, #0
 8010616:	bfbb      	ittet	lt
 8010618:	425b      	neglt	r3, r3
 801061a:	f042 0202 	orrlt.w	r2, r2, #2
 801061e:	9307      	strge	r3, [sp, #28]
 8010620:	9307      	strlt	r3, [sp, #28]
 8010622:	bfb8      	it	lt
 8010624:	9204      	strlt	r2, [sp, #16]
 8010626:	7823      	ldrb	r3, [r4, #0]
 8010628:	2b2e      	cmp	r3, #46	; 0x2e
 801062a:	d10c      	bne.n	8010646 <_vfiprintf_r+0x176>
 801062c:	7863      	ldrb	r3, [r4, #1]
 801062e:	2b2a      	cmp	r3, #42	; 0x2a
 8010630:	d135      	bne.n	801069e <_vfiprintf_r+0x1ce>
 8010632:	9b03      	ldr	r3, [sp, #12]
 8010634:	1d1a      	adds	r2, r3, #4
 8010636:	681b      	ldr	r3, [r3, #0]
 8010638:	9203      	str	r2, [sp, #12]
 801063a:	2b00      	cmp	r3, #0
 801063c:	bfb8      	it	lt
 801063e:	f04f 33ff 	movlt.w	r3, #4294967295
 8010642:	3402      	adds	r4, #2
 8010644:	9305      	str	r3, [sp, #20]
 8010646:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801072c <_vfiprintf_r+0x25c>
 801064a:	7821      	ldrb	r1, [r4, #0]
 801064c:	2203      	movs	r2, #3
 801064e:	4650      	mov	r0, sl
 8010650:	f7ef fdce 	bl	80001f0 <memchr>
 8010654:	b140      	cbz	r0, 8010668 <_vfiprintf_r+0x198>
 8010656:	2340      	movs	r3, #64	; 0x40
 8010658:	eba0 000a 	sub.w	r0, r0, sl
 801065c:	fa03 f000 	lsl.w	r0, r3, r0
 8010660:	9b04      	ldr	r3, [sp, #16]
 8010662:	4303      	orrs	r3, r0
 8010664:	3401      	adds	r4, #1
 8010666:	9304      	str	r3, [sp, #16]
 8010668:	f814 1b01 	ldrb.w	r1, [r4], #1
 801066c:	482c      	ldr	r0, [pc, #176]	; (8010720 <_vfiprintf_r+0x250>)
 801066e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010672:	2206      	movs	r2, #6
 8010674:	f7ef fdbc 	bl	80001f0 <memchr>
 8010678:	2800      	cmp	r0, #0
 801067a:	d03f      	beq.n	80106fc <_vfiprintf_r+0x22c>
 801067c:	4b29      	ldr	r3, [pc, #164]	; (8010724 <_vfiprintf_r+0x254>)
 801067e:	bb1b      	cbnz	r3, 80106c8 <_vfiprintf_r+0x1f8>
 8010680:	9b03      	ldr	r3, [sp, #12]
 8010682:	3307      	adds	r3, #7
 8010684:	f023 0307 	bic.w	r3, r3, #7
 8010688:	3308      	adds	r3, #8
 801068a:	9303      	str	r3, [sp, #12]
 801068c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801068e:	443b      	add	r3, r7
 8010690:	9309      	str	r3, [sp, #36]	; 0x24
 8010692:	e767      	b.n	8010564 <_vfiprintf_r+0x94>
 8010694:	fb0c 3202 	mla	r2, ip, r2, r3
 8010698:	460c      	mov	r4, r1
 801069a:	2001      	movs	r0, #1
 801069c:	e7a5      	b.n	80105ea <_vfiprintf_r+0x11a>
 801069e:	2300      	movs	r3, #0
 80106a0:	3401      	adds	r4, #1
 80106a2:	9305      	str	r3, [sp, #20]
 80106a4:	4619      	mov	r1, r3
 80106a6:	f04f 0c0a 	mov.w	ip, #10
 80106aa:	4620      	mov	r0, r4
 80106ac:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106b0:	3a30      	subs	r2, #48	; 0x30
 80106b2:	2a09      	cmp	r2, #9
 80106b4:	d903      	bls.n	80106be <_vfiprintf_r+0x1ee>
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d0c5      	beq.n	8010646 <_vfiprintf_r+0x176>
 80106ba:	9105      	str	r1, [sp, #20]
 80106bc:	e7c3      	b.n	8010646 <_vfiprintf_r+0x176>
 80106be:	fb0c 2101 	mla	r1, ip, r1, r2
 80106c2:	4604      	mov	r4, r0
 80106c4:	2301      	movs	r3, #1
 80106c6:	e7f0      	b.n	80106aa <_vfiprintf_r+0x1da>
 80106c8:	ab03      	add	r3, sp, #12
 80106ca:	9300      	str	r3, [sp, #0]
 80106cc:	462a      	mov	r2, r5
 80106ce:	4b16      	ldr	r3, [pc, #88]	; (8010728 <_vfiprintf_r+0x258>)
 80106d0:	a904      	add	r1, sp, #16
 80106d2:	4630      	mov	r0, r6
 80106d4:	f7fc f84a 	bl	800c76c <_printf_float>
 80106d8:	4607      	mov	r7, r0
 80106da:	1c78      	adds	r0, r7, #1
 80106dc:	d1d6      	bne.n	801068c <_vfiprintf_r+0x1bc>
 80106de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106e0:	07d9      	lsls	r1, r3, #31
 80106e2:	d405      	bmi.n	80106f0 <_vfiprintf_r+0x220>
 80106e4:	89ab      	ldrh	r3, [r5, #12]
 80106e6:	059a      	lsls	r2, r3, #22
 80106e8:	d402      	bmi.n	80106f0 <_vfiprintf_r+0x220>
 80106ea:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106ec:	f000 faa1 	bl	8010c32 <__retarget_lock_release_recursive>
 80106f0:	89ab      	ldrh	r3, [r5, #12]
 80106f2:	065b      	lsls	r3, r3, #25
 80106f4:	f53f af12 	bmi.w	801051c <_vfiprintf_r+0x4c>
 80106f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106fa:	e711      	b.n	8010520 <_vfiprintf_r+0x50>
 80106fc:	ab03      	add	r3, sp, #12
 80106fe:	9300      	str	r3, [sp, #0]
 8010700:	462a      	mov	r2, r5
 8010702:	4b09      	ldr	r3, [pc, #36]	; (8010728 <_vfiprintf_r+0x258>)
 8010704:	a904      	add	r1, sp, #16
 8010706:	4630      	mov	r0, r6
 8010708:	f7fc fad4 	bl	800ccb4 <_printf_i>
 801070c:	e7e4      	b.n	80106d8 <_vfiprintf_r+0x208>
 801070e:	bf00      	nop
 8010710:	08012a04 	.word	0x08012a04
 8010714:	08012a24 	.word	0x08012a24
 8010718:	080129e4 	.word	0x080129e4
 801071c:	08012994 	.word	0x08012994
 8010720:	0801299e 	.word	0x0801299e
 8010724:	0800c76d 	.word	0x0800c76d
 8010728:	080104ad 	.word	0x080104ad
 801072c:	0801299a 	.word	0x0801299a

08010730 <__swbuf_r>:
 8010730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010732:	460e      	mov	r6, r1
 8010734:	4614      	mov	r4, r2
 8010736:	4605      	mov	r5, r0
 8010738:	b118      	cbz	r0, 8010742 <__swbuf_r+0x12>
 801073a:	6983      	ldr	r3, [r0, #24]
 801073c:	b90b      	cbnz	r3, 8010742 <__swbuf_r+0x12>
 801073e:	f000 f9d9 	bl	8010af4 <__sinit>
 8010742:	4b21      	ldr	r3, [pc, #132]	; (80107c8 <__swbuf_r+0x98>)
 8010744:	429c      	cmp	r4, r3
 8010746:	d12b      	bne.n	80107a0 <__swbuf_r+0x70>
 8010748:	686c      	ldr	r4, [r5, #4]
 801074a:	69a3      	ldr	r3, [r4, #24]
 801074c:	60a3      	str	r3, [r4, #8]
 801074e:	89a3      	ldrh	r3, [r4, #12]
 8010750:	071a      	lsls	r2, r3, #28
 8010752:	d52f      	bpl.n	80107b4 <__swbuf_r+0x84>
 8010754:	6923      	ldr	r3, [r4, #16]
 8010756:	b36b      	cbz	r3, 80107b4 <__swbuf_r+0x84>
 8010758:	6923      	ldr	r3, [r4, #16]
 801075a:	6820      	ldr	r0, [r4, #0]
 801075c:	1ac0      	subs	r0, r0, r3
 801075e:	6963      	ldr	r3, [r4, #20]
 8010760:	b2f6      	uxtb	r6, r6
 8010762:	4283      	cmp	r3, r0
 8010764:	4637      	mov	r7, r6
 8010766:	dc04      	bgt.n	8010772 <__swbuf_r+0x42>
 8010768:	4621      	mov	r1, r4
 801076a:	4628      	mov	r0, r5
 801076c:	f000 f92e 	bl	80109cc <_fflush_r>
 8010770:	bb30      	cbnz	r0, 80107c0 <__swbuf_r+0x90>
 8010772:	68a3      	ldr	r3, [r4, #8]
 8010774:	3b01      	subs	r3, #1
 8010776:	60a3      	str	r3, [r4, #8]
 8010778:	6823      	ldr	r3, [r4, #0]
 801077a:	1c5a      	adds	r2, r3, #1
 801077c:	6022      	str	r2, [r4, #0]
 801077e:	701e      	strb	r6, [r3, #0]
 8010780:	6963      	ldr	r3, [r4, #20]
 8010782:	3001      	adds	r0, #1
 8010784:	4283      	cmp	r3, r0
 8010786:	d004      	beq.n	8010792 <__swbuf_r+0x62>
 8010788:	89a3      	ldrh	r3, [r4, #12]
 801078a:	07db      	lsls	r3, r3, #31
 801078c:	d506      	bpl.n	801079c <__swbuf_r+0x6c>
 801078e:	2e0a      	cmp	r6, #10
 8010790:	d104      	bne.n	801079c <__swbuf_r+0x6c>
 8010792:	4621      	mov	r1, r4
 8010794:	4628      	mov	r0, r5
 8010796:	f000 f919 	bl	80109cc <_fflush_r>
 801079a:	b988      	cbnz	r0, 80107c0 <__swbuf_r+0x90>
 801079c:	4638      	mov	r0, r7
 801079e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107a0:	4b0a      	ldr	r3, [pc, #40]	; (80107cc <__swbuf_r+0x9c>)
 80107a2:	429c      	cmp	r4, r3
 80107a4:	d101      	bne.n	80107aa <__swbuf_r+0x7a>
 80107a6:	68ac      	ldr	r4, [r5, #8]
 80107a8:	e7cf      	b.n	801074a <__swbuf_r+0x1a>
 80107aa:	4b09      	ldr	r3, [pc, #36]	; (80107d0 <__swbuf_r+0xa0>)
 80107ac:	429c      	cmp	r4, r3
 80107ae:	bf08      	it	eq
 80107b0:	68ec      	ldreq	r4, [r5, #12]
 80107b2:	e7ca      	b.n	801074a <__swbuf_r+0x1a>
 80107b4:	4621      	mov	r1, r4
 80107b6:	4628      	mov	r0, r5
 80107b8:	f000 f80c 	bl	80107d4 <__swsetup_r>
 80107bc:	2800      	cmp	r0, #0
 80107be:	d0cb      	beq.n	8010758 <__swbuf_r+0x28>
 80107c0:	f04f 37ff 	mov.w	r7, #4294967295
 80107c4:	e7ea      	b.n	801079c <__swbuf_r+0x6c>
 80107c6:	bf00      	nop
 80107c8:	08012a04 	.word	0x08012a04
 80107cc:	08012a24 	.word	0x08012a24
 80107d0:	080129e4 	.word	0x080129e4

080107d4 <__swsetup_r>:
 80107d4:	4b32      	ldr	r3, [pc, #200]	; (80108a0 <__swsetup_r+0xcc>)
 80107d6:	b570      	push	{r4, r5, r6, lr}
 80107d8:	681d      	ldr	r5, [r3, #0]
 80107da:	4606      	mov	r6, r0
 80107dc:	460c      	mov	r4, r1
 80107de:	b125      	cbz	r5, 80107ea <__swsetup_r+0x16>
 80107e0:	69ab      	ldr	r3, [r5, #24]
 80107e2:	b913      	cbnz	r3, 80107ea <__swsetup_r+0x16>
 80107e4:	4628      	mov	r0, r5
 80107e6:	f000 f985 	bl	8010af4 <__sinit>
 80107ea:	4b2e      	ldr	r3, [pc, #184]	; (80108a4 <__swsetup_r+0xd0>)
 80107ec:	429c      	cmp	r4, r3
 80107ee:	d10f      	bne.n	8010810 <__swsetup_r+0x3c>
 80107f0:	686c      	ldr	r4, [r5, #4]
 80107f2:	89a3      	ldrh	r3, [r4, #12]
 80107f4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107f8:	0719      	lsls	r1, r3, #28
 80107fa:	d42c      	bmi.n	8010856 <__swsetup_r+0x82>
 80107fc:	06dd      	lsls	r5, r3, #27
 80107fe:	d411      	bmi.n	8010824 <__swsetup_r+0x50>
 8010800:	2309      	movs	r3, #9
 8010802:	6033      	str	r3, [r6, #0]
 8010804:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010808:	81a3      	strh	r3, [r4, #12]
 801080a:	f04f 30ff 	mov.w	r0, #4294967295
 801080e:	e03e      	b.n	801088e <__swsetup_r+0xba>
 8010810:	4b25      	ldr	r3, [pc, #148]	; (80108a8 <__swsetup_r+0xd4>)
 8010812:	429c      	cmp	r4, r3
 8010814:	d101      	bne.n	801081a <__swsetup_r+0x46>
 8010816:	68ac      	ldr	r4, [r5, #8]
 8010818:	e7eb      	b.n	80107f2 <__swsetup_r+0x1e>
 801081a:	4b24      	ldr	r3, [pc, #144]	; (80108ac <__swsetup_r+0xd8>)
 801081c:	429c      	cmp	r4, r3
 801081e:	bf08      	it	eq
 8010820:	68ec      	ldreq	r4, [r5, #12]
 8010822:	e7e6      	b.n	80107f2 <__swsetup_r+0x1e>
 8010824:	0758      	lsls	r0, r3, #29
 8010826:	d512      	bpl.n	801084e <__swsetup_r+0x7a>
 8010828:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801082a:	b141      	cbz	r1, 801083e <__swsetup_r+0x6a>
 801082c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010830:	4299      	cmp	r1, r3
 8010832:	d002      	beq.n	801083a <__swsetup_r+0x66>
 8010834:	4630      	mov	r0, r6
 8010836:	f7ff fb27 	bl	800fe88 <_free_r>
 801083a:	2300      	movs	r3, #0
 801083c:	6363      	str	r3, [r4, #52]	; 0x34
 801083e:	89a3      	ldrh	r3, [r4, #12]
 8010840:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010844:	81a3      	strh	r3, [r4, #12]
 8010846:	2300      	movs	r3, #0
 8010848:	6063      	str	r3, [r4, #4]
 801084a:	6923      	ldr	r3, [r4, #16]
 801084c:	6023      	str	r3, [r4, #0]
 801084e:	89a3      	ldrh	r3, [r4, #12]
 8010850:	f043 0308 	orr.w	r3, r3, #8
 8010854:	81a3      	strh	r3, [r4, #12]
 8010856:	6923      	ldr	r3, [r4, #16]
 8010858:	b94b      	cbnz	r3, 801086e <__swsetup_r+0x9a>
 801085a:	89a3      	ldrh	r3, [r4, #12]
 801085c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010860:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010864:	d003      	beq.n	801086e <__swsetup_r+0x9a>
 8010866:	4621      	mov	r1, r4
 8010868:	4630      	mov	r0, r6
 801086a:	f000 fa09 	bl	8010c80 <__smakebuf_r>
 801086e:	89a0      	ldrh	r0, [r4, #12]
 8010870:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010874:	f010 0301 	ands.w	r3, r0, #1
 8010878:	d00a      	beq.n	8010890 <__swsetup_r+0xbc>
 801087a:	2300      	movs	r3, #0
 801087c:	60a3      	str	r3, [r4, #8]
 801087e:	6963      	ldr	r3, [r4, #20]
 8010880:	425b      	negs	r3, r3
 8010882:	61a3      	str	r3, [r4, #24]
 8010884:	6923      	ldr	r3, [r4, #16]
 8010886:	b943      	cbnz	r3, 801089a <__swsetup_r+0xc6>
 8010888:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801088c:	d1ba      	bne.n	8010804 <__swsetup_r+0x30>
 801088e:	bd70      	pop	{r4, r5, r6, pc}
 8010890:	0781      	lsls	r1, r0, #30
 8010892:	bf58      	it	pl
 8010894:	6963      	ldrpl	r3, [r4, #20]
 8010896:	60a3      	str	r3, [r4, #8]
 8010898:	e7f4      	b.n	8010884 <__swsetup_r+0xb0>
 801089a:	2000      	movs	r0, #0
 801089c:	e7f7      	b.n	801088e <__swsetup_r+0xba>
 801089e:	bf00      	nop
 80108a0:	2000025c 	.word	0x2000025c
 80108a4:	08012a04 	.word	0x08012a04
 80108a8:	08012a24 	.word	0x08012a24
 80108ac:	080129e4 	.word	0x080129e4

080108b0 <abort>:
 80108b0:	b508      	push	{r3, lr}
 80108b2:	2006      	movs	r0, #6
 80108b4:	f000 fa54 	bl	8010d60 <raise>
 80108b8:	2001      	movs	r0, #1
 80108ba:	f7f4 fb2f 	bl	8004f1c <_exit>
	...

080108c0 <__sflush_r>:
 80108c0:	898a      	ldrh	r2, [r1, #12]
 80108c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108c6:	4605      	mov	r5, r0
 80108c8:	0710      	lsls	r0, r2, #28
 80108ca:	460c      	mov	r4, r1
 80108cc:	d458      	bmi.n	8010980 <__sflush_r+0xc0>
 80108ce:	684b      	ldr	r3, [r1, #4]
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	dc05      	bgt.n	80108e0 <__sflush_r+0x20>
 80108d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80108d6:	2b00      	cmp	r3, #0
 80108d8:	dc02      	bgt.n	80108e0 <__sflush_r+0x20>
 80108da:	2000      	movs	r0, #0
 80108dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108e2:	2e00      	cmp	r6, #0
 80108e4:	d0f9      	beq.n	80108da <__sflush_r+0x1a>
 80108e6:	2300      	movs	r3, #0
 80108e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108ec:	682f      	ldr	r7, [r5, #0]
 80108ee:	602b      	str	r3, [r5, #0]
 80108f0:	d032      	beq.n	8010958 <__sflush_r+0x98>
 80108f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108f4:	89a3      	ldrh	r3, [r4, #12]
 80108f6:	075a      	lsls	r2, r3, #29
 80108f8:	d505      	bpl.n	8010906 <__sflush_r+0x46>
 80108fa:	6863      	ldr	r3, [r4, #4]
 80108fc:	1ac0      	subs	r0, r0, r3
 80108fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010900:	b10b      	cbz	r3, 8010906 <__sflush_r+0x46>
 8010902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010904:	1ac0      	subs	r0, r0, r3
 8010906:	2300      	movs	r3, #0
 8010908:	4602      	mov	r2, r0
 801090a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801090c:	6a21      	ldr	r1, [r4, #32]
 801090e:	4628      	mov	r0, r5
 8010910:	47b0      	blx	r6
 8010912:	1c43      	adds	r3, r0, #1
 8010914:	89a3      	ldrh	r3, [r4, #12]
 8010916:	d106      	bne.n	8010926 <__sflush_r+0x66>
 8010918:	6829      	ldr	r1, [r5, #0]
 801091a:	291d      	cmp	r1, #29
 801091c:	d82c      	bhi.n	8010978 <__sflush_r+0xb8>
 801091e:	4a2a      	ldr	r2, [pc, #168]	; (80109c8 <__sflush_r+0x108>)
 8010920:	40ca      	lsrs	r2, r1
 8010922:	07d6      	lsls	r6, r2, #31
 8010924:	d528      	bpl.n	8010978 <__sflush_r+0xb8>
 8010926:	2200      	movs	r2, #0
 8010928:	6062      	str	r2, [r4, #4]
 801092a:	04d9      	lsls	r1, r3, #19
 801092c:	6922      	ldr	r2, [r4, #16]
 801092e:	6022      	str	r2, [r4, #0]
 8010930:	d504      	bpl.n	801093c <__sflush_r+0x7c>
 8010932:	1c42      	adds	r2, r0, #1
 8010934:	d101      	bne.n	801093a <__sflush_r+0x7a>
 8010936:	682b      	ldr	r3, [r5, #0]
 8010938:	b903      	cbnz	r3, 801093c <__sflush_r+0x7c>
 801093a:	6560      	str	r0, [r4, #84]	; 0x54
 801093c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801093e:	602f      	str	r7, [r5, #0]
 8010940:	2900      	cmp	r1, #0
 8010942:	d0ca      	beq.n	80108da <__sflush_r+0x1a>
 8010944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010948:	4299      	cmp	r1, r3
 801094a:	d002      	beq.n	8010952 <__sflush_r+0x92>
 801094c:	4628      	mov	r0, r5
 801094e:	f7ff fa9b 	bl	800fe88 <_free_r>
 8010952:	2000      	movs	r0, #0
 8010954:	6360      	str	r0, [r4, #52]	; 0x34
 8010956:	e7c1      	b.n	80108dc <__sflush_r+0x1c>
 8010958:	6a21      	ldr	r1, [r4, #32]
 801095a:	2301      	movs	r3, #1
 801095c:	4628      	mov	r0, r5
 801095e:	47b0      	blx	r6
 8010960:	1c41      	adds	r1, r0, #1
 8010962:	d1c7      	bne.n	80108f4 <__sflush_r+0x34>
 8010964:	682b      	ldr	r3, [r5, #0]
 8010966:	2b00      	cmp	r3, #0
 8010968:	d0c4      	beq.n	80108f4 <__sflush_r+0x34>
 801096a:	2b1d      	cmp	r3, #29
 801096c:	d001      	beq.n	8010972 <__sflush_r+0xb2>
 801096e:	2b16      	cmp	r3, #22
 8010970:	d101      	bne.n	8010976 <__sflush_r+0xb6>
 8010972:	602f      	str	r7, [r5, #0]
 8010974:	e7b1      	b.n	80108da <__sflush_r+0x1a>
 8010976:	89a3      	ldrh	r3, [r4, #12]
 8010978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801097c:	81a3      	strh	r3, [r4, #12]
 801097e:	e7ad      	b.n	80108dc <__sflush_r+0x1c>
 8010980:	690f      	ldr	r7, [r1, #16]
 8010982:	2f00      	cmp	r7, #0
 8010984:	d0a9      	beq.n	80108da <__sflush_r+0x1a>
 8010986:	0793      	lsls	r3, r2, #30
 8010988:	680e      	ldr	r6, [r1, #0]
 801098a:	bf08      	it	eq
 801098c:	694b      	ldreq	r3, [r1, #20]
 801098e:	600f      	str	r7, [r1, #0]
 8010990:	bf18      	it	ne
 8010992:	2300      	movne	r3, #0
 8010994:	eba6 0807 	sub.w	r8, r6, r7
 8010998:	608b      	str	r3, [r1, #8]
 801099a:	f1b8 0f00 	cmp.w	r8, #0
 801099e:	dd9c      	ble.n	80108da <__sflush_r+0x1a>
 80109a0:	6a21      	ldr	r1, [r4, #32]
 80109a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80109a4:	4643      	mov	r3, r8
 80109a6:	463a      	mov	r2, r7
 80109a8:	4628      	mov	r0, r5
 80109aa:	47b0      	blx	r6
 80109ac:	2800      	cmp	r0, #0
 80109ae:	dc06      	bgt.n	80109be <__sflush_r+0xfe>
 80109b0:	89a3      	ldrh	r3, [r4, #12]
 80109b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109b6:	81a3      	strh	r3, [r4, #12]
 80109b8:	f04f 30ff 	mov.w	r0, #4294967295
 80109bc:	e78e      	b.n	80108dc <__sflush_r+0x1c>
 80109be:	4407      	add	r7, r0
 80109c0:	eba8 0800 	sub.w	r8, r8, r0
 80109c4:	e7e9      	b.n	801099a <__sflush_r+0xda>
 80109c6:	bf00      	nop
 80109c8:	20400001 	.word	0x20400001

080109cc <_fflush_r>:
 80109cc:	b538      	push	{r3, r4, r5, lr}
 80109ce:	690b      	ldr	r3, [r1, #16]
 80109d0:	4605      	mov	r5, r0
 80109d2:	460c      	mov	r4, r1
 80109d4:	b913      	cbnz	r3, 80109dc <_fflush_r+0x10>
 80109d6:	2500      	movs	r5, #0
 80109d8:	4628      	mov	r0, r5
 80109da:	bd38      	pop	{r3, r4, r5, pc}
 80109dc:	b118      	cbz	r0, 80109e6 <_fflush_r+0x1a>
 80109de:	6983      	ldr	r3, [r0, #24]
 80109e0:	b90b      	cbnz	r3, 80109e6 <_fflush_r+0x1a>
 80109e2:	f000 f887 	bl	8010af4 <__sinit>
 80109e6:	4b14      	ldr	r3, [pc, #80]	; (8010a38 <_fflush_r+0x6c>)
 80109e8:	429c      	cmp	r4, r3
 80109ea:	d11b      	bne.n	8010a24 <_fflush_r+0x58>
 80109ec:	686c      	ldr	r4, [r5, #4]
 80109ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d0ef      	beq.n	80109d6 <_fflush_r+0xa>
 80109f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109f8:	07d0      	lsls	r0, r2, #31
 80109fa:	d404      	bmi.n	8010a06 <_fflush_r+0x3a>
 80109fc:	0599      	lsls	r1, r3, #22
 80109fe:	d402      	bmi.n	8010a06 <_fflush_r+0x3a>
 8010a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a02:	f000 f915 	bl	8010c30 <__retarget_lock_acquire_recursive>
 8010a06:	4628      	mov	r0, r5
 8010a08:	4621      	mov	r1, r4
 8010a0a:	f7ff ff59 	bl	80108c0 <__sflush_r>
 8010a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010a10:	07da      	lsls	r2, r3, #31
 8010a12:	4605      	mov	r5, r0
 8010a14:	d4e0      	bmi.n	80109d8 <_fflush_r+0xc>
 8010a16:	89a3      	ldrh	r3, [r4, #12]
 8010a18:	059b      	lsls	r3, r3, #22
 8010a1a:	d4dd      	bmi.n	80109d8 <_fflush_r+0xc>
 8010a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010a1e:	f000 f908 	bl	8010c32 <__retarget_lock_release_recursive>
 8010a22:	e7d9      	b.n	80109d8 <_fflush_r+0xc>
 8010a24:	4b05      	ldr	r3, [pc, #20]	; (8010a3c <_fflush_r+0x70>)
 8010a26:	429c      	cmp	r4, r3
 8010a28:	d101      	bne.n	8010a2e <_fflush_r+0x62>
 8010a2a:	68ac      	ldr	r4, [r5, #8]
 8010a2c:	e7df      	b.n	80109ee <_fflush_r+0x22>
 8010a2e:	4b04      	ldr	r3, [pc, #16]	; (8010a40 <_fflush_r+0x74>)
 8010a30:	429c      	cmp	r4, r3
 8010a32:	bf08      	it	eq
 8010a34:	68ec      	ldreq	r4, [r5, #12]
 8010a36:	e7da      	b.n	80109ee <_fflush_r+0x22>
 8010a38:	08012a04 	.word	0x08012a04
 8010a3c:	08012a24 	.word	0x08012a24
 8010a40:	080129e4 	.word	0x080129e4

08010a44 <std>:
 8010a44:	2300      	movs	r3, #0
 8010a46:	b510      	push	{r4, lr}
 8010a48:	4604      	mov	r4, r0
 8010a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8010a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a52:	6083      	str	r3, [r0, #8]
 8010a54:	8181      	strh	r1, [r0, #12]
 8010a56:	6643      	str	r3, [r0, #100]	; 0x64
 8010a58:	81c2      	strh	r2, [r0, #14]
 8010a5a:	6183      	str	r3, [r0, #24]
 8010a5c:	4619      	mov	r1, r3
 8010a5e:	2208      	movs	r2, #8
 8010a60:	305c      	adds	r0, #92	; 0x5c
 8010a62:	f7fb fddb 	bl	800c61c <memset>
 8010a66:	4b05      	ldr	r3, [pc, #20]	; (8010a7c <std+0x38>)
 8010a68:	6263      	str	r3, [r4, #36]	; 0x24
 8010a6a:	4b05      	ldr	r3, [pc, #20]	; (8010a80 <std+0x3c>)
 8010a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a6e:	4b05      	ldr	r3, [pc, #20]	; (8010a84 <std+0x40>)
 8010a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a72:	4b05      	ldr	r3, [pc, #20]	; (8010a88 <std+0x44>)
 8010a74:	6224      	str	r4, [r4, #32]
 8010a76:	6323      	str	r3, [r4, #48]	; 0x30
 8010a78:	bd10      	pop	{r4, pc}
 8010a7a:	bf00      	nop
 8010a7c:	08010d99 	.word	0x08010d99
 8010a80:	08010dbb 	.word	0x08010dbb
 8010a84:	08010df3 	.word	0x08010df3
 8010a88:	08010e17 	.word	0x08010e17

08010a8c <_cleanup_r>:
 8010a8c:	4901      	ldr	r1, [pc, #4]	; (8010a94 <_cleanup_r+0x8>)
 8010a8e:	f000 b8af 	b.w	8010bf0 <_fwalk_reent>
 8010a92:	bf00      	nop
 8010a94:	080109cd 	.word	0x080109cd

08010a98 <__sfmoreglue>:
 8010a98:	b570      	push	{r4, r5, r6, lr}
 8010a9a:	2268      	movs	r2, #104	; 0x68
 8010a9c:	1e4d      	subs	r5, r1, #1
 8010a9e:	4355      	muls	r5, r2
 8010aa0:	460e      	mov	r6, r1
 8010aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010aa6:	f7ff fa5b 	bl	800ff60 <_malloc_r>
 8010aaa:	4604      	mov	r4, r0
 8010aac:	b140      	cbz	r0, 8010ac0 <__sfmoreglue+0x28>
 8010aae:	2100      	movs	r1, #0
 8010ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8010ab4:	300c      	adds	r0, #12
 8010ab6:	60a0      	str	r0, [r4, #8]
 8010ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010abc:	f7fb fdae 	bl	800c61c <memset>
 8010ac0:	4620      	mov	r0, r4
 8010ac2:	bd70      	pop	{r4, r5, r6, pc}

08010ac4 <__sfp_lock_acquire>:
 8010ac4:	4801      	ldr	r0, [pc, #4]	; (8010acc <__sfp_lock_acquire+0x8>)
 8010ac6:	f000 b8b3 	b.w	8010c30 <__retarget_lock_acquire_recursive>
 8010aca:	bf00      	nop
 8010acc:	20001111 	.word	0x20001111

08010ad0 <__sfp_lock_release>:
 8010ad0:	4801      	ldr	r0, [pc, #4]	; (8010ad8 <__sfp_lock_release+0x8>)
 8010ad2:	f000 b8ae 	b.w	8010c32 <__retarget_lock_release_recursive>
 8010ad6:	bf00      	nop
 8010ad8:	20001111 	.word	0x20001111

08010adc <__sinit_lock_acquire>:
 8010adc:	4801      	ldr	r0, [pc, #4]	; (8010ae4 <__sinit_lock_acquire+0x8>)
 8010ade:	f000 b8a7 	b.w	8010c30 <__retarget_lock_acquire_recursive>
 8010ae2:	bf00      	nop
 8010ae4:	20001112 	.word	0x20001112

08010ae8 <__sinit_lock_release>:
 8010ae8:	4801      	ldr	r0, [pc, #4]	; (8010af0 <__sinit_lock_release+0x8>)
 8010aea:	f000 b8a2 	b.w	8010c32 <__retarget_lock_release_recursive>
 8010aee:	bf00      	nop
 8010af0:	20001112 	.word	0x20001112

08010af4 <__sinit>:
 8010af4:	b510      	push	{r4, lr}
 8010af6:	4604      	mov	r4, r0
 8010af8:	f7ff fff0 	bl	8010adc <__sinit_lock_acquire>
 8010afc:	69a3      	ldr	r3, [r4, #24]
 8010afe:	b11b      	cbz	r3, 8010b08 <__sinit+0x14>
 8010b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010b04:	f7ff bff0 	b.w	8010ae8 <__sinit_lock_release>
 8010b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8010b0e:	4b13      	ldr	r3, [pc, #76]	; (8010b5c <__sinit+0x68>)
 8010b10:	4a13      	ldr	r2, [pc, #76]	; (8010b60 <__sinit+0x6c>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8010b16:	42a3      	cmp	r3, r4
 8010b18:	bf04      	itt	eq
 8010b1a:	2301      	moveq	r3, #1
 8010b1c:	61a3      	streq	r3, [r4, #24]
 8010b1e:	4620      	mov	r0, r4
 8010b20:	f000 f820 	bl	8010b64 <__sfp>
 8010b24:	6060      	str	r0, [r4, #4]
 8010b26:	4620      	mov	r0, r4
 8010b28:	f000 f81c 	bl	8010b64 <__sfp>
 8010b2c:	60a0      	str	r0, [r4, #8]
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f000 f818 	bl	8010b64 <__sfp>
 8010b34:	2200      	movs	r2, #0
 8010b36:	60e0      	str	r0, [r4, #12]
 8010b38:	2104      	movs	r1, #4
 8010b3a:	6860      	ldr	r0, [r4, #4]
 8010b3c:	f7ff ff82 	bl	8010a44 <std>
 8010b40:	68a0      	ldr	r0, [r4, #8]
 8010b42:	2201      	movs	r2, #1
 8010b44:	2109      	movs	r1, #9
 8010b46:	f7ff ff7d 	bl	8010a44 <std>
 8010b4a:	68e0      	ldr	r0, [r4, #12]
 8010b4c:	2202      	movs	r2, #2
 8010b4e:	2112      	movs	r1, #18
 8010b50:	f7ff ff78 	bl	8010a44 <std>
 8010b54:	2301      	movs	r3, #1
 8010b56:	61a3      	str	r3, [r4, #24]
 8010b58:	e7d2      	b.n	8010b00 <__sinit+0xc>
 8010b5a:	bf00      	nop
 8010b5c:	080125a0 	.word	0x080125a0
 8010b60:	08010a8d 	.word	0x08010a8d

08010b64 <__sfp>:
 8010b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b66:	4607      	mov	r7, r0
 8010b68:	f7ff ffac 	bl	8010ac4 <__sfp_lock_acquire>
 8010b6c:	4b1e      	ldr	r3, [pc, #120]	; (8010be8 <__sfp+0x84>)
 8010b6e:	681e      	ldr	r6, [r3, #0]
 8010b70:	69b3      	ldr	r3, [r6, #24]
 8010b72:	b913      	cbnz	r3, 8010b7a <__sfp+0x16>
 8010b74:	4630      	mov	r0, r6
 8010b76:	f7ff ffbd 	bl	8010af4 <__sinit>
 8010b7a:	3648      	adds	r6, #72	; 0x48
 8010b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b80:	3b01      	subs	r3, #1
 8010b82:	d503      	bpl.n	8010b8c <__sfp+0x28>
 8010b84:	6833      	ldr	r3, [r6, #0]
 8010b86:	b30b      	cbz	r3, 8010bcc <__sfp+0x68>
 8010b88:	6836      	ldr	r6, [r6, #0]
 8010b8a:	e7f7      	b.n	8010b7c <__sfp+0x18>
 8010b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b90:	b9d5      	cbnz	r5, 8010bc8 <__sfp+0x64>
 8010b92:	4b16      	ldr	r3, [pc, #88]	; (8010bec <__sfp+0x88>)
 8010b94:	60e3      	str	r3, [r4, #12]
 8010b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8010b9c:	f000 f847 	bl	8010c2e <__retarget_lock_init_recursive>
 8010ba0:	f7ff ff96 	bl	8010ad0 <__sfp_lock_release>
 8010ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010bac:	6025      	str	r5, [r4, #0]
 8010bae:	61a5      	str	r5, [r4, #24]
 8010bb0:	2208      	movs	r2, #8
 8010bb2:	4629      	mov	r1, r5
 8010bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010bb8:	f7fb fd30 	bl	800c61c <memset>
 8010bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010bc4:	4620      	mov	r0, r4
 8010bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010bc8:	3468      	adds	r4, #104	; 0x68
 8010bca:	e7d9      	b.n	8010b80 <__sfp+0x1c>
 8010bcc:	2104      	movs	r1, #4
 8010bce:	4638      	mov	r0, r7
 8010bd0:	f7ff ff62 	bl	8010a98 <__sfmoreglue>
 8010bd4:	4604      	mov	r4, r0
 8010bd6:	6030      	str	r0, [r6, #0]
 8010bd8:	2800      	cmp	r0, #0
 8010bda:	d1d5      	bne.n	8010b88 <__sfp+0x24>
 8010bdc:	f7ff ff78 	bl	8010ad0 <__sfp_lock_release>
 8010be0:	230c      	movs	r3, #12
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	e7ee      	b.n	8010bc4 <__sfp+0x60>
 8010be6:	bf00      	nop
 8010be8:	080125a0 	.word	0x080125a0
 8010bec:	ffff0001 	.word	0xffff0001

08010bf0 <_fwalk_reent>:
 8010bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bf4:	4606      	mov	r6, r0
 8010bf6:	4688      	mov	r8, r1
 8010bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010bfc:	2700      	movs	r7, #0
 8010bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010c02:	f1b9 0901 	subs.w	r9, r9, #1
 8010c06:	d505      	bpl.n	8010c14 <_fwalk_reent+0x24>
 8010c08:	6824      	ldr	r4, [r4, #0]
 8010c0a:	2c00      	cmp	r4, #0
 8010c0c:	d1f7      	bne.n	8010bfe <_fwalk_reent+0xe>
 8010c0e:	4638      	mov	r0, r7
 8010c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010c14:	89ab      	ldrh	r3, [r5, #12]
 8010c16:	2b01      	cmp	r3, #1
 8010c18:	d907      	bls.n	8010c2a <_fwalk_reent+0x3a>
 8010c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010c1e:	3301      	adds	r3, #1
 8010c20:	d003      	beq.n	8010c2a <_fwalk_reent+0x3a>
 8010c22:	4629      	mov	r1, r5
 8010c24:	4630      	mov	r0, r6
 8010c26:	47c0      	blx	r8
 8010c28:	4307      	orrs	r7, r0
 8010c2a:	3568      	adds	r5, #104	; 0x68
 8010c2c:	e7e9      	b.n	8010c02 <_fwalk_reent+0x12>

08010c2e <__retarget_lock_init_recursive>:
 8010c2e:	4770      	bx	lr

08010c30 <__retarget_lock_acquire_recursive>:
 8010c30:	4770      	bx	lr

08010c32 <__retarget_lock_release_recursive>:
 8010c32:	4770      	bx	lr

08010c34 <__swhatbuf_r>:
 8010c34:	b570      	push	{r4, r5, r6, lr}
 8010c36:	460e      	mov	r6, r1
 8010c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c3c:	2900      	cmp	r1, #0
 8010c3e:	b096      	sub	sp, #88	; 0x58
 8010c40:	4614      	mov	r4, r2
 8010c42:	461d      	mov	r5, r3
 8010c44:	da08      	bge.n	8010c58 <__swhatbuf_r+0x24>
 8010c46:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	602a      	str	r2, [r5, #0]
 8010c4e:	061a      	lsls	r2, r3, #24
 8010c50:	d410      	bmi.n	8010c74 <__swhatbuf_r+0x40>
 8010c52:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c56:	e00e      	b.n	8010c76 <__swhatbuf_r+0x42>
 8010c58:	466a      	mov	r2, sp
 8010c5a:	f000 f903 	bl	8010e64 <_fstat_r>
 8010c5e:	2800      	cmp	r0, #0
 8010c60:	dbf1      	blt.n	8010c46 <__swhatbuf_r+0x12>
 8010c62:	9a01      	ldr	r2, [sp, #4]
 8010c64:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c68:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c6c:	425a      	negs	r2, r3
 8010c6e:	415a      	adcs	r2, r3
 8010c70:	602a      	str	r2, [r5, #0]
 8010c72:	e7ee      	b.n	8010c52 <__swhatbuf_r+0x1e>
 8010c74:	2340      	movs	r3, #64	; 0x40
 8010c76:	2000      	movs	r0, #0
 8010c78:	6023      	str	r3, [r4, #0]
 8010c7a:	b016      	add	sp, #88	; 0x58
 8010c7c:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c80 <__smakebuf_r>:
 8010c80:	898b      	ldrh	r3, [r1, #12]
 8010c82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c84:	079d      	lsls	r5, r3, #30
 8010c86:	4606      	mov	r6, r0
 8010c88:	460c      	mov	r4, r1
 8010c8a:	d507      	bpl.n	8010c9c <__smakebuf_r+0x1c>
 8010c8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c90:	6023      	str	r3, [r4, #0]
 8010c92:	6123      	str	r3, [r4, #16]
 8010c94:	2301      	movs	r3, #1
 8010c96:	6163      	str	r3, [r4, #20]
 8010c98:	b002      	add	sp, #8
 8010c9a:	bd70      	pop	{r4, r5, r6, pc}
 8010c9c:	ab01      	add	r3, sp, #4
 8010c9e:	466a      	mov	r2, sp
 8010ca0:	f7ff ffc8 	bl	8010c34 <__swhatbuf_r>
 8010ca4:	9900      	ldr	r1, [sp, #0]
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f7ff f959 	bl	800ff60 <_malloc_r>
 8010cae:	b948      	cbnz	r0, 8010cc4 <__smakebuf_r+0x44>
 8010cb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010cb4:	059a      	lsls	r2, r3, #22
 8010cb6:	d4ef      	bmi.n	8010c98 <__smakebuf_r+0x18>
 8010cb8:	f023 0303 	bic.w	r3, r3, #3
 8010cbc:	f043 0302 	orr.w	r3, r3, #2
 8010cc0:	81a3      	strh	r3, [r4, #12]
 8010cc2:	e7e3      	b.n	8010c8c <__smakebuf_r+0xc>
 8010cc4:	4b0d      	ldr	r3, [pc, #52]	; (8010cfc <__smakebuf_r+0x7c>)
 8010cc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8010cc8:	89a3      	ldrh	r3, [r4, #12]
 8010cca:	6020      	str	r0, [r4, #0]
 8010ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010cd0:	81a3      	strh	r3, [r4, #12]
 8010cd2:	9b00      	ldr	r3, [sp, #0]
 8010cd4:	6163      	str	r3, [r4, #20]
 8010cd6:	9b01      	ldr	r3, [sp, #4]
 8010cd8:	6120      	str	r0, [r4, #16]
 8010cda:	b15b      	cbz	r3, 8010cf4 <__smakebuf_r+0x74>
 8010cdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ce0:	4630      	mov	r0, r6
 8010ce2:	f000 f8d1 	bl	8010e88 <_isatty_r>
 8010ce6:	b128      	cbz	r0, 8010cf4 <__smakebuf_r+0x74>
 8010ce8:	89a3      	ldrh	r3, [r4, #12]
 8010cea:	f023 0303 	bic.w	r3, r3, #3
 8010cee:	f043 0301 	orr.w	r3, r3, #1
 8010cf2:	81a3      	strh	r3, [r4, #12]
 8010cf4:	89a0      	ldrh	r0, [r4, #12]
 8010cf6:	4305      	orrs	r5, r0
 8010cf8:	81a5      	strh	r5, [r4, #12]
 8010cfa:	e7cd      	b.n	8010c98 <__smakebuf_r+0x18>
 8010cfc:	08010a8d 	.word	0x08010a8d

08010d00 <_malloc_usable_size_r>:
 8010d00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010d04:	1f18      	subs	r0, r3, #4
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	bfbc      	itt	lt
 8010d0a:	580b      	ldrlt	r3, [r1, r0]
 8010d0c:	18c0      	addlt	r0, r0, r3
 8010d0e:	4770      	bx	lr

08010d10 <_raise_r>:
 8010d10:	291f      	cmp	r1, #31
 8010d12:	b538      	push	{r3, r4, r5, lr}
 8010d14:	4604      	mov	r4, r0
 8010d16:	460d      	mov	r5, r1
 8010d18:	d904      	bls.n	8010d24 <_raise_r+0x14>
 8010d1a:	2316      	movs	r3, #22
 8010d1c:	6003      	str	r3, [r0, #0]
 8010d1e:	f04f 30ff 	mov.w	r0, #4294967295
 8010d22:	bd38      	pop	{r3, r4, r5, pc}
 8010d24:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010d26:	b112      	cbz	r2, 8010d2e <_raise_r+0x1e>
 8010d28:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010d2c:	b94b      	cbnz	r3, 8010d42 <_raise_r+0x32>
 8010d2e:	4620      	mov	r0, r4
 8010d30:	f000 f830 	bl	8010d94 <_getpid_r>
 8010d34:	462a      	mov	r2, r5
 8010d36:	4601      	mov	r1, r0
 8010d38:	4620      	mov	r0, r4
 8010d3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d3e:	f000 b817 	b.w	8010d70 <_kill_r>
 8010d42:	2b01      	cmp	r3, #1
 8010d44:	d00a      	beq.n	8010d5c <_raise_r+0x4c>
 8010d46:	1c59      	adds	r1, r3, #1
 8010d48:	d103      	bne.n	8010d52 <_raise_r+0x42>
 8010d4a:	2316      	movs	r3, #22
 8010d4c:	6003      	str	r3, [r0, #0]
 8010d4e:	2001      	movs	r0, #1
 8010d50:	e7e7      	b.n	8010d22 <_raise_r+0x12>
 8010d52:	2400      	movs	r4, #0
 8010d54:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d58:	4628      	mov	r0, r5
 8010d5a:	4798      	blx	r3
 8010d5c:	2000      	movs	r0, #0
 8010d5e:	e7e0      	b.n	8010d22 <_raise_r+0x12>

08010d60 <raise>:
 8010d60:	4b02      	ldr	r3, [pc, #8]	; (8010d6c <raise+0xc>)
 8010d62:	4601      	mov	r1, r0
 8010d64:	6818      	ldr	r0, [r3, #0]
 8010d66:	f7ff bfd3 	b.w	8010d10 <_raise_r>
 8010d6a:	bf00      	nop
 8010d6c:	2000025c 	.word	0x2000025c

08010d70 <_kill_r>:
 8010d70:	b538      	push	{r3, r4, r5, lr}
 8010d72:	4d07      	ldr	r5, [pc, #28]	; (8010d90 <_kill_r+0x20>)
 8010d74:	2300      	movs	r3, #0
 8010d76:	4604      	mov	r4, r0
 8010d78:	4608      	mov	r0, r1
 8010d7a:	4611      	mov	r1, r2
 8010d7c:	602b      	str	r3, [r5, #0]
 8010d7e:	f7f4 f8bd 	bl	8004efc <_kill>
 8010d82:	1c43      	adds	r3, r0, #1
 8010d84:	d102      	bne.n	8010d8c <_kill_r+0x1c>
 8010d86:	682b      	ldr	r3, [r5, #0]
 8010d88:	b103      	cbz	r3, 8010d8c <_kill_r+0x1c>
 8010d8a:	6023      	str	r3, [r4, #0]
 8010d8c:	bd38      	pop	{r3, r4, r5, pc}
 8010d8e:	bf00      	nop
 8010d90:	2000110c 	.word	0x2000110c

08010d94 <_getpid_r>:
 8010d94:	f7f4 b8aa 	b.w	8004eec <_getpid>

08010d98 <__sread>:
 8010d98:	b510      	push	{r4, lr}
 8010d9a:	460c      	mov	r4, r1
 8010d9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010da0:	f000 f894 	bl	8010ecc <_read_r>
 8010da4:	2800      	cmp	r0, #0
 8010da6:	bfab      	itete	ge
 8010da8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010daa:	89a3      	ldrhlt	r3, [r4, #12]
 8010dac:	181b      	addge	r3, r3, r0
 8010dae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010db2:	bfac      	ite	ge
 8010db4:	6563      	strge	r3, [r4, #84]	; 0x54
 8010db6:	81a3      	strhlt	r3, [r4, #12]
 8010db8:	bd10      	pop	{r4, pc}

08010dba <__swrite>:
 8010dba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010dbe:	461f      	mov	r7, r3
 8010dc0:	898b      	ldrh	r3, [r1, #12]
 8010dc2:	05db      	lsls	r3, r3, #23
 8010dc4:	4605      	mov	r5, r0
 8010dc6:	460c      	mov	r4, r1
 8010dc8:	4616      	mov	r6, r2
 8010dca:	d505      	bpl.n	8010dd8 <__swrite+0x1e>
 8010dcc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dd0:	2302      	movs	r3, #2
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	f000 f868 	bl	8010ea8 <_lseek_r>
 8010dd8:	89a3      	ldrh	r3, [r4, #12]
 8010dda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010dde:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010de2:	81a3      	strh	r3, [r4, #12]
 8010de4:	4632      	mov	r2, r6
 8010de6:	463b      	mov	r3, r7
 8010de8:	4628      	mov	r0, r5
 8010dea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010dee:	f000 b817 	b.w	8010e20 <_write_r>

08010df2 <__sseek>:
 8010df2:	b510      	push	{r4, lr}
 8010df4:	460c      	mov	r4, r1
 8010df6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dfa:	f000 f855 	bl	8010ea8 <_lseek_r>
 8010dfe:	1c43      	adds	r3, r0, #1
 8010e00:	89a3      	ldrh	r3, [r4, #12]
 8010e02:	bf15      	itete	ne
 8010e04:	6560      	strne	r0, [r4, #84]	; 0x54
 8010e06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010e0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010e0e:	81a3      	strheq	r3, [r4, #12]
 8010e10:	bf18      	it	ne
 8010e12:	81a3      	strhne	r3, [r4, #12]
 8010e14:	bd10      	pop	{r4, pc}

08010e16 <__sclose>:
 8010e16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010e1a:	f000 b813 	b.w	8010e44 <_close_r>
	...

08010e20 <_write_r>:
 8010e20:	b538      	push	{r3, r4, r5, lr}
 8010e22:	4d07      	ldr	r5, [pc, #28]	; (8010e40 <_write_r+0x20>)
 8010e24:	4604      	mov	r4, r0
 8010e26:	4608      	mov	r0, r1
 8010e28:	4611      	mov	r1, r2
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	602a      	str	r2, [r5, #0]
 8010e2e:	461a      	mov	r2, r3
 8010e30:	f7f4 f89b 	bl	8004f6a <_write>
 8010e34:	1c43      	adds	r3, r0, #1
 8010e36:	d102      	bne.n	8010e3e <_write_r+0x1e>
 8010e38:	682b      	ldr	r3, [r5, #0]
 8010e3a:	b103      	cbz	r3, 8010e3e <_write_r+0x1e>
 8010e3c:	6023      	str	r3, [r4, #0]
 8010e3e:	bd38      	pop	{r3, r4, r5, pc}
 8010e40:	2000110c 	.word	0x2000110c

08010e44 <_close_r>:
 8010e44:	b538      	push	{r3, r4, r5, lr}
 8010e46:	4d06      	ldr	r5, [pc, #24]	; (8010e60 <_close_r+0x1c>)
 8010e48:	2300      	movs	r3, #0
 8010e4a:	4604      	mov	r4, r0
 8010e4c:	4608      	mov	r0, r1
 8010e4e:	602b      	str	r3, [r5, #0]
 8010e50:	f7f4 f8a7 	bl	8004fa2 <_close>
 8010e54:	1c43      	adds	r3, r0, #1
 8010e56:	d102      	bne.n	8010e5e <_close_r+0x1a>
 8010e58:	682b      	ldr	r3, [r5, #0]
 8010e5a:	b103      	cbz	r3, 8010e5e <_close_r+0x1a>
 8010e5c:	6023      	str	r3, [r4, #0]
 8010e5e:	bd38      	pop	{r3, r4, r5, pc}
 8010e60:	2000110c 	.word	0x2000110c

08010e64 <_fstat_r>:
 8010e64:	b538      	push	{r3, r4, r5, lr}
 8010e66:	4d07      	ldr	r5, [pc, #28]	; (8010e84 <_fstat_r+0x20>)
 8010e68:	2300      	movs	r3, #0
 8010e6a:	4604      	mov	r4, r0
 8010e6c:	4608      	mov	r0, r1
 8010e6e:	4611      	mov	r1, r2
 8010e70:	602b      	str	r3, [r5, #0]
 8010e72:	f7f4 f8a2 	bl	8004fba <_fstat>
 8010e76:	1c43      	adds	r3, r0, #1
 8010e78:	d102      	bne.n	8010e80 <_fstat_r+0x1c>
 8010e7a:	682b      	ldr	r3, [r5, #0]
 8010e7c:	b103      	cbz	r3, 8010e80 <_fstat_r+0x1c>
 8010e7e:	6023      	str	r3, [r4, #0]
 8010e80:	bd38      	pop	{r3, r4, r5, pc}
 8010e82:	bf00      	nop
 8010e84:	2000110c 	.word	0x2000110c

08010e88 <_isatty_r>:
 8010e88:	b538      	push	{r3, r4, r5, lr}
 8010e8a:	4d06      	ldr	r5, [pc, #24]	; (8010ea4 <_isatty_r+0x1c>)
 8010e8c:	2300      	movs	r3, #0
 8010e8e:	4604      	mov	r4, r0
 8010e90:	4608      	mov	r0, r1
 8010e92:	602b      	str	r3, [r5, #0]
 8010e94:	f7f4 f8a1 	bl	8004fda <_isatty>
 8010e98:	1c43      	adds	r3, r0, #1
 8010e9a:	d102      	bne.n	8010ea2 <_isatty_r+0x1a>
 8010e9c:	682b      	ldr	r3, [r5, #0]
 8010e9e:	b103      	cbz	r3, 8010ea2 <_isatty_r+0x1a>
 8010ea0:	6023      	str	r3, [r4, #0]
 8010ea2:	bd38      	pop	{r3, r4, r5, pc}
 8010ea4:	2000110c 	.word	0x2000110c

08010ea8 <_lseek_r>:
 8010ea8:	b538      	push	{r3, r4, r5, lr}
 8010eaa:	4d07      	ldr	r5, [pc, #28]	; (8010ec8 <_lseek_r+0x20>)
 8010eac:	4604      	mov	r4, r0
 8010eae:	4608      	mov	r0, r1
 8010eb0:	4611      	mov	r1, r2
 8010eb2:	2200      	movs	r2, #0
 8010eb4:	602a      	str	r2, [r5, #0]
 8010eb6:	461a      	mov	r2, r3
 8010eb8:	f7f4 f89a 	bl	8004ff0 <_lseek>
 8010ebc:	1c43      	adds	r3, r0, #1
 8010ebe:	d102      	bne.n	8010ec6 <_lseek_r+0x1e>
 8010ec0:	682b      	ldr	r3, [r5, #0]
 8010ec2:	b103      	cbz	r3, 8010ec6 <_lseek_r+0x1e>
 8010ec4:	6023      	str	r3, [r4, #0]
 8010ec6:	bd38      	pop	{r3, r4, r5, pc}
 8010ec8:	2000110c 	.word	0x2000110c

08010ecc <_read_r>:
 8010ecc:	b538      	push	{r3, r4, r5, lr}
 8010ece:	4d07      	ldr	r5, [pc, #28]	; (8010eec <_read_r+0x20>)
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	4608      	mov	r0, r1
 8010ed4:	4611      	mov	r1, r2
 8010ed6:	2200      	movs	r2, #0
 8010ed8:	602a      	str	r2, [r5, #0]
 8010eda:	461a      	mov	r2, r3
 8010edc:	f7f4 f828 	bl	8004f30 <_read>
 8010ee0:	1c43      	adds	r3, r0, #1
 8010ee2:	d102      	bne.n	8010eea <_read_r+0x1e>
 8010ee4:	682b      	ldr	r3, [r5, #0]
 8010ee6:	b103      	cbz	r3, 8010eea <_read_r+0x1e>
 8010ee8:	6023      	str	r3, [r4, #0]
 8010eea:	bd38      	pop	{r3, r4, r5, pc}
 8010eec:	2000110c 	.word	0x2000110c

08010ef0 <cos>:
 8010ef0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010ef2:	ec53 2b10 	vmov	r2, r3, d0
 8010ef6:	4826      	ldr	r0, [pc, #152]	; (8010f90 <cos+0xa0>)
 8010ef8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010efc:	4281      	cmp	r1, r0
 8010efe:	dc06      	bgt.n	8010f0e <cos+0x1e>
 8010f00:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8010f88 <cos+0x98>
 8010f04:	b005      	add	sp, #20
 8010f06:	f85d eb04 	ldr.w	lr, [sp], #4
 8010f0a:	f000 bb99 	b.w	8011640 <__kernel_cos>
 8010f0e:	4821      	ldr	r0, [pc, #132]	; (8010f94 <cos+0xa4>)
 8010f10:	4281      	cmp	r1, r0
 8010f12:	dd09      	ble.n	8010f28 <cos+0x38>
 8010f14:	ee10 0a10 	vmov	r0, s0
 8010f18:	4619      	mov	r1, r3
 8010f1a:	f7ef f9bd 	bl	8000298 <__aeabi_dsub>
 8010f1e:	ec41 0b10 	vmov	d0, r0, r1
 8010f22:	b005      	add	sp, #20
 8010f24:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f28:	4668      	mov	r0, sp
 8010f2a:	f000 f979 	bl	8011220 <__ieee754_rem_pio2>
 8010f2e:	f000 0003 	and.w	r0, r0, #3
 8010f32:	2801      	cmp	r0, #1
 8010f34:	d00b      	beq.n	8010f4e <cos+0x5e>
 8010f36:	2802      	cmp	r0, #2
 8010f38:	d016      	beq.n	8010f68 <cos+0x78>
 8010f3a:	b9e0      	cbnz	r0, 8010f76 <cos+0x86>
 8010f3c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f40:	ed9d 0b00 	vldr	d0, [sp]
 8010f44:	f000 fb7c 	bl	8011640 <__kernel_cos>
 8010f48:	ec51 0b10 	vmov	r0, r1, d0
 8010f4c:	e7e7      	b.n	8010f1e <cos+0x2e>
 8010f4e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f52:	ed9d 0b00 	vldr	d0, [sp]
 8010f56:	f000 ff8b 	bl	8011e70 <__kernel_sin>
 8010f5a:	ec53 2b10 	vmov	r2, r3, d0
 8010f5e:	ee10 0a10 	vmov	r0, s0
 8010f62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010f66:	e7da      	b.n	8010f1e <cos+0x2e>
 8010f68:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f6c:	ed9d 0b00 	vldr	d0, [sp]
 8010f70:	f000 fb66 	bl	8011640 <__kernel_cos>
 8010f74:	e7f1      	b.n	8010f5a <cos+0x6a>
 8010f76:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010f7a:	ed9d 0b00 	vldr	d0, [sp]
 8010f7e:	2001      	movs	r0, #1
 8010f80:	f000 ff76 	bl	8011e70 <__kernel_sin>
 8010f84:	e7e0      	b.n	8010f48 <cos+0x58>
 8010f86:	bf00      	nop
	...
 8010f90:	3fe921fb 	.word	0x3fe921fb
 8010f94:	7fefffff 	.word	0x7fefffff

08010f98 <sin>:
 8010f98:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010f9a:	ec53 2b10 	vmov	r2, r3, d0
 8010f9e:	4828      	ldr	r0, [pc, #160]	; (8011040 <sin+0xa8>)
 8010fa0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010fa4:	4281      	cmp	r1, r0
 8010fa6:	dc07      	bgt.n	8010fb8 <sin+0x20>
 8010fa8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011038 <sin+0xa0>
 8010fac:	2000      	movs	r0, #0
 8010fae:	b005      	add	sp, #20
 8010fb0:	f85d eb04 	ldr.w	lr, [sp], #4
 8010fb4:	f000 bf5c 	b.w	8011e70 <__kernel_sin>
 8010fb8:	4822      	ldr	r0, [pc, #136]	; (8011044 <sin+0xac>)
 8010fba:	4281      	cmp	r1, r0
 8010fbc:	dd09      	ble.n	8010fd2 <sin+0x3a>
 8010fbe:	ee10 0a10 	vmov	r0, s0
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	f7ef f968 	bl	8000298 <__aeabi_dsub>
 8010fc8:	ec41 0b10 	vmov	d0, r0, r1
 8010fcc:	b005      	add	sp, #20
 8010fce:	f85d fb04 	ldr.w	pc, [sp], #4
 8010fd2:	4668      	mov	r0, sp
 8010fd4:	f000 f924 	bl	8011220 <__ieee754_rem_pio2>
 8010fd8:	f000 0003 	and.w	r0, r0, #3
 8010fdc:	2801      	cmp	r0, #1
 8010fde:	d00c      	beq.n	8010ffa <sin+0x62>
 8010fe0:	2802      	cmp	r0, #2
 8010fe2:	d011      	beq.n	8011008 <sin+0x70>
 8010fe4:	b9f0      	cbnz	r0, 8011024 <sin+0x8c>
 8010fe6:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010fea:	ed9d 0b00 	vldr	d0, [sp]
 8010fee:	2001      	movs	r0, #1
 8010ff0:	f000 ff3e 	bl	8011e70 <__kernel_sin>
 8010ff4:	ec51 0b10 	vmov	r0, r1, d0
 8010ff8:	e7e6      	b.n	8010fc8 <sin+0x30>
 8010ffa:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ffe:	ed9d 0b00 	vldr	d0, [sp]
 8011002:	f000 fb1d 	bl	8011640 <__kernel_cos>
 8011006:	e7f5      	b.n	8010ff4 <sin+0x5c>
 8011008:	ed9d 1b02 	vldr	d1, [sp, #8]
 801100c:	ed9d 0b00 	vldr	d0, [sp]
 8011010:	2001      	movs	r0, #1
 8011012:	f000 ff2d 	bl	8011e70 <__kernel_sin>
 8011016:	ec53 2b10 	vmov	r2, r3, d0
 801101a:	ee10 0a10 	vmov	r0, s0
 801101e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011022:	e7d1      	b.n	8010fc8 <sin+0x30>
 8011024:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011028:	ed9d 0b00 	vldr	d0, [sp]
 801102c:	f000 fb08 	bl	8011640 <__kernel_cos>
 8011030:	e7f1      	b.n	8011016 <sin+0x7e>
 8011032:	bf00      	nop
 8011034:	f3af 8000 	nop.w
	...
 8011040:	3fe921fb 	.word	0x3fe921fb
 8011044:	7fefffff 	.word	0x7fefffff

08011048 <atan2>:
 8011048:	f000 b81e 	b.w	8011088 <__ieee754_atan2>

0801104c <sqrtf>:
 801104c:	b508      	push	{r3, lr}
 801104e:	ed2d 8b02 	vpush	{d8}
 8011052:	eeb0 8a40 	vmov.f32	s16, s0
 8011056:	f000 faef 	bl	8011638 <__ieee754_sqrtf>
 801105a:	eeb4 8a48 	vcmp.f32	s16, s16
 801105e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011062:	d60c      	bvs.n	801107e <sqrtf+0x32>
 8011064:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011084 <sqrtf+0x38>
 8011068:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011070:	d505      	bpl.n	801107e <sqrtf+0x32>
 8011072:	f7fb fa9b 	bl	800c5ac <__errno>
 8011076:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801107a:	2321      	movs	r3, #33	; 0x21
 801107c:	6003      	str	r3, [r0, #0]
 801107e:	ecbd 8b02 	vpop	{d8}
 8011082:	bd08      	pop	{r3, pc}
 8011084:	00000000 	.word	0x00000000

08011088 <__ieee754_atan2>:
 8011088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801108c:	ec57 6b11 	vmov	r6, r7, d1
 8011090:	4273      	negs	r3, r6
 8011092:	f8df e184 	ldr.w	lr, [pc, #388]	; 8011218 <__ieee754_atan2+0x190>
 8011096:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 801109a:	4333      	orrs	r3, r6
 801109c:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80110a0:	4573      	cmp	r3, lr
 80110a2:	ec51 0b10 	vmov	r0, r1, d0
 80110a6:	ee11 8a10 	vmov	r8, s2
 80110aa:	d80a      	bhi.n	80110c2 <__ieee754_atan2+0x3a>
 80110ac:	4244      	negs	r4, r0
 80110ae:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80110b2:	4304      	orrs	r4, r0
 80110b4:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80110b8:	4574      	cmp	r4, lr
 80110ba:	ee10 9a10 	vmov	r9, s0
 80110be:	468c      	mov	ip, r1
 80110c0:	d907      	bls.n	80110d2 <__ieee754_atan2+0x4a>
 80110c2:	4632      	mov	r2, r6
 80110c4:	463b      	mov	r3, r7
 80110c6:	f7ef f8e9 	bl	800029c <__adddf3>
 80110ca:	ec41 0b10 	vmov	d0, r0, r1
 80110ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80110d2:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 80110d6:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80110da:	4334      	orrs	r4, r6
 80110dc:	d103      	bne.n	80110e6 <__ieee754_atan2+0x5e>
 80110de:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80110e2:	f000 bf85 	b.w	8011ff0 <atan>
 80110e6:	17bc      	asrs	r4, r7, #30
 80110e8:	f004 0402 	and.w	r4, r4, #2
 80110ec:	ea53 0909 	orrs.w	r9, r3, r9
 80110f0:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80110f4:	d107      	bne.n	8011106 <__ieee754_atan2+0x7e>
 80110f6:	2c02      	cmp	r4, #2
 80110f8:	d060      	beq.n	80111bc <__ieee754_atan2+0x134>
 80110fa:	2c03      	cmp	r4, #3
 80110fc:	d1e5      	bne.n	80110ca <__ieee754_atan2+0x42>
 80110fe:	a142      	add	r1, pc, #264	; (adr r1, 8011208 <__ieee754_atan2+0x180>)
 8011100:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011104:	e7e1      	b.n	80110ca <__ieee754_atan2+0x42>
 8011106:	ea52 0808 	orrs.w	r8, r2, r8
 801110a:	d106      	bne.n	801111a <__ieee754_atan2+0x92>
 801110c:	f1bc 0f00 	cmp.w	ip, #0
 8011110:	da5f      	bge.n	80111d2 <__ieee754_atan2+0x14a>
 8011112:	a13f      	add	r1, pc, #252	; (adr r1, 8011210 <__ieee754_atan2+0x188>)
 8011114:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011118:	e7d7      	b.n	80110ca <__ieee754_atan2+0x42>
 801111a:	4572      	cmp	r2, lr
 801111c:	d10f      	bne.n	801113e <__ieee754_atan2+0xb6>
 801111e:	4293      	cmp	r3, r2
 8011120:	f104 34ff 	add.w	r4, r4, #4294967295
 8011124:	d107      	bne.n	8011136 <__ieee754_atan2+0xae>
 8011126:	2c02      	cmp	r4, #2
 8011128:	d84c      	bhi.n	80111c4 <__ieee754_atan2+0x13c>
 801112a:	4b35      	ldr	r3, [pc, #212]	; (8011200 <__ieee754_atan2+0x178>)
 801112c:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
 8011130:	e9d4 0100 	ldrd	r0, r1, [r4]
 8011134:	e7c9      	b.n	80110ca <__ieee754_atan2+0x42>
 8011136:	2c02      	cmp	r4, #2
 8011138:	d848      	bhi.n	80111cc <__ieee754_atan2+0x144>
 801113a:	4b32      	ldr	r3, [pc, #200]	; (8011204 <__ieee754_atan2+0x17c>)
 801113c:	e7f6      	b.n	801112c <__ieee754_atan2+0xa4>
 801113e:	4573      	cmp	r3, lr
 8011140:	d0e4      	beq.n	801110c <__ieee754_atan2+0x84>
 8011142:	1a9b      	subs	r3, r3, r2
 8011144:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 8011148:	ea4f 5223 	mov.w	r2, r3, asr #20
 801114c:	da1e      	bge.n	801118c <__ieee754_atan2+0x104>
 801114e:	2f00      	cmp	r7, #0
 8011150:	da01      	bge.n	8011156 <__ieee754_atan2+0xce>
 8011152:	323c      	adds	r2, #60	; 0x3c
 8011154:	db1e      	blt.n	8011194 <__ieee754_atan2+0x10c>
 8011156:	4632      	mov	r2, r6
 8011158:	463b      	mov	r3, r7
 801115a:	f7ef fb7f 	bl	800085c <__aeabi_ddiv>
 801115e:	ec41 0b10 	vmov	d0, r0, r1
 8011162:	f001 f8e5 	bl	8012330 <fabs>
 8011166:	f000 ff43 	bl	8011ff0 <atan>
 801116a:	ec51 0b10 	vmov	r0, r1, d0
 801116e:	2c01      	cmp	r4, #1
 8011170:	d013      	beq.n	801119a <__ieee754_atan2+0x112>
 8011172:	2c02      	cmp	r4, #2
 8011174:	d015      	beq.n	80111a2 <__ieee754_atan2+0x11a>
 8011176:	2c00      	cmp	r4, #0
 8011178:	d0a7      	beq.n	80110ca <__ieee754_atan2+0x42>
 801117a:	a319      	add	r3, pc, #100	; (adr r3, 80111e0 <__ieee754_atan2+0x158>)
 801117c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011180:	f7ef f88a 	bl	8000298 <__aeabi_dsub>
 8011184:	a318      	add	r3, pc, #96	; (adr r3, 80111e8 <__ieee754_atan2+0x160>)
 8011186:	e9d3 2300 	ldrd	r2, r3, [r3]
 801118a:	e014      	b.n	80111b6 <__ieee754_atan2+0x12e>
 801118c:	a118      	add	r1, pc, #96	; (adr r1, 80111f0 <__ieee754_atan2+0x168>)
 801118e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8011192:	e7ec      	b.n	801116e <__ieee754_atan2+0xe6>
 8011194:	2000      	movs	r0, #0
 8011196:	2100      	movs	r1, #0
 8011198:	e7e9      	b.n	801116e <__ieee754_atan2+0xe6>
 801119a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801119e:	4619      	mov	r1, r3
 80111a0:	e793      	b.n	80110ca <__ieee754_atan2+0x42>
 80111a2:	a30f      	add	r3, pc, #60	; (adr r3, 80111e0 <__ieee754_atan2+0x158>)
 80111a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111a8:	f7ef f876 	bl	8000298 <__aeabi_dsub>
 80111ac:	4602      	mov	r2, r0
 80111ae:	460b      	mov	r3, r1
 80111b0:	a10d      	add	r1, pc, #52	; (adr r1, 80111e8 <__ieee754_atan2+0x160>)
 80111b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111b6:	f7ef f86f 	bl	8000298 <__aeabi_dsub>
 80111ba:	e786      	b.n	80110ca <__ieee754_atan2+0x42>
 80111bc:	a10a      	add	r1, pc, #40	; (adr r1, 80111e8 <__ieee754_atan2+0x160>)
 80111be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111c2:	e782      	b.n	80110ca <__ieee754_atan2+0x42>
 80111c4:	a10c      	add	r1, pc, #48	; (adr r1, 80111f8 <__ieee754_atan2+0x170>)
 80111c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111ca:	e77e      	b.n	80110ca <__ieee754_atan2+0x42>
 80111cc:	2000      	movs	r0, #0
 80111ce:	2100      	movs	r1, #0
 80111d0:	e77b      	b.n	80110ca <__ieee754_atan2+0x42>
 80111d2:	a107      	add	r1, pc, #28	; (adr r1, 80111f0 <__ieee754_atan2+0x168>)
 80111d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80111d8:	e777      	b.n	80110ca <__ieee754_atan2+0x42>
 80111da:	bf00      	nop
 80111dc:	f3af 8000 	nop.w
 80111e0:	33145c07 	.word	0x33145c07
 80111e4:	3ca1a626 	.word	0x3ca1a626
 80111e8:	54442d18 	.word	0x54442d18
 80111ec:	400921fb 	.word	0x400921fb
 80111f0:	54442d18 	.word	0x54442d18
 80111f4:	3ff921fb 	.word	0x3ff921fb
 80111f8:	54442d18 	.word	0x54442d18
 80111fc:	3fe921fb 	.word	0x3fe921fb
 8011200:	08012a48 	.word	0x08012a48
 8011204:	08012a60 	.word	0x08012a60
 8011208:	54442d18 	.word	0x54442d18
 801120c:	c00921fb 	.word	0xc00921fb
 8011210:	54442d18 	.word	0x54442d18
 8011214:	bff921fb 	.word	0xbff921fb
 8011218:	7ff00000 	.word	0x7ff00000
 801121c:	00000000 	.word	0x00000000

08011220 <__ieee754_rem_pio2>:
 8011220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011224:	ed2d 8b02 	vpush	{d8}
 8011228:	ec55 4b10 	vmov	r4, r5, d0
 801122c:	4bca      	ldr	r3, [pc, #808]	; (8011558 <__ieee754_rem_pio2+0x338>)
 801122e:	b08b      	sub	sp, #44	; 0x2c
 8011230:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011234:	4598      	cmp	r8, r3
 8011236:	4682      	mov	sl, r0
 8011238:	9502      	str	r5, [sp, #8]
 801123a:	dc08      	bgt.n	801124e <__ieee754_rem_pio2+0x2e>
 801123c:	2200      	movs	r2, #0
 801123e:	2300      	movs	r3, #0
 8011240:	ed80 0b00 	vstr	d0, [r0]
 8011244:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011248:	f04f 0b00 	mov.w	fp, #0
 801124c:	e028      	b.n	80112a0 <__ieee754_rem_pio2+0x80>
 801124e:	4bc3      	ldr	r3, [pc, #780]	; (801155c <__ieee754_rem_pio2+0x33c>)
 8011250:	4598      	cmp	r8, r3
 8011252:	dc78      	bgt.n	8011346 <__ieee754_rem_pio2+0x126>
 8011254:	9b02      	ldr	r3, [sp, #8]
 8011256:	4ec2      	ldr	r6, [pc, #776]	; (8011560 <__ieee754_rem_pio2+0x340>)
 8011258:	2b00      	cmp	r3, #0
 801125a:	ee10 0a10 	vmov	r0, s0
 801125e:	a3b0      	add	r3, pc, #704	; (adr r3, 8011520 <__ieee754_rem_pio2+0x300>)
 8011260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011264:	4629      	mov	r1, r5
 8011266:	dd39      	ble.n	80112dc <__ieee754_rem_pio2+0xbc>
 8011268:	f7ef f816 	bl	8000298 <__aeabi_dsub>
 801126c:	45b0      	cmp	r8, r6
 801126e:	4604      	mov	r4, r0
 8011270:	460d      	mov	r5, r1
 8011272:	d01b      	beq.n	80112ac <__ieee754_rem_pio2+0x8c>
 8011274:	a3ac      	add	r3, pc, #688	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 8011276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127a:	f7ef f80d 	bl	8000298 <__aeabi_dsub>
 801127e:	4602      	mov	r2, r0
 8011280:	460b      	mov	r3, r1
 8011282:	e9ca 2300 	strd	r2, r3, [sl]
 8011286:	4620      	mov	r0, r4
 8011288:	4629      	mov	r1, r5
 801128a:	f7ef f805 	bl	8000298 <__aeabi_dsub>
 801128e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 8011290:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011294:	f7ef f800 	bl	8000298 <__aeabi_dsub>
 8011298:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801129c:	f04f 0b01 	mov.w	fp, #1
 80112a0:	4658      	mov	r0, fp
 80112a2:	b00b      	add	sp, #44	; 0x2c
 80112a4:	ecbd 8b02 	vpop	{d8}
 80112a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80112ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8011530 <__ieee754_rem_pio2+0x310>)
 80112ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112b2:	f7ee fff1 	bl	8000298 <__aeabi_dsub>
 80112b6:	a3a0      	add	r3, pc, #640	; (adr r3, 8011538 <__ieee754_rem_pio2+0x318>)
 80112b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112bc:	4604      	mov	r4, r0
 80112be:	460d      	mov	r5, r1
 80112c0:	f7ee ffea 	bl	8000298 <__aeabi_dsub>
 80112c4:	4602      	mov	r2, r0
 80112c6:	460b      	mov	r3, r1
 80112c8:	e9ca 2300 	strd	r2, r3, [sl]
 80112cc:	4620      	mov	r0, r4
 80112ce:	4629      	mov	r1, r5
 80112d0:	f7ee ffe2 	bl	8000298 <__aeabi_dsub>
 80112d4:	a398      	add	r3, pc, #608	; (adr r3, 8011538 <__ieee754_rem_pio2+0x318>)
 80112d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112da:	e7db      	b.n	8011294 <__ieee754_rem_pio2+0x74>
 80112dc:	f7ee ffde 	bl	800029c <__adddf3>
 80112e0:	45b0      	cmp	r8, r6
 80112e2:	4604      	mov	r4, r0
 80112e4:	460d      	mov	r5, r1
 80112e6:	d016      	beq.n	8011316 <__ieee754_rem_pio2+0xf6>
 80112e8:	a38f      	add	r3, pc, #572	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 80112ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80112ee:	f7ee ffd5 	bl	800029c <__adddf3>
 80112f2:	4602      	mov	r2, r0
 80112f4:	460b      	mov	r3, r1
 80112f6:	e9ca 2300 	strd	r2, r3, [sl]
 80112fa:	4620      	mov	r0, r4
 80112fc:	4629      	mov	r1, r5
 80112fe:	f7ee ffcb 	bl	8000298 <__aeabi_dsub>
 8011302:	a389      	add	r3, pc, #548	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 8011304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011308:	f7ee ffc8 	bl	800029c <__adddf3>
 801130c:	f04f 3bff 	mov.w	fp, #4294967295
 8011310:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011314:	e7c4      	b.n	80112a0 <__ieee754_rem_pio2+0x80>
 8011316:	a386      	add	r3, pc, #536	; (adr r3, 8011530 <__ieee754_rem_pio2+0x310>)
 8011318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801131c:	f7ee ffbe 	bl	800029c <__adddf3>
 8011320:	a385      	add	r3, pc, #532	; (adr r3, 8011538 <__ieee754_rem_pio2+0x318>)
 8011322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011326:	4604      	mov	r4, r0
 8011328:	460d      	mov	r5, r1
 801132a:	f7ee ffb7 	bl	800029c <__adddf3>
 801132e:	4602      	mov	r2, r0
 8011330:	460b      	mov	r3, r1
 8011332:	e9ca 2300 	strd	r2, r3, [sl]
 8011336:	4620      	mov	r0, r4
 8011338:	4629      	mov	r1, r5
 801133a:	f7ee ffad 	bl	8000298 <__aeabi_dsub>
 801133e:	a37e      	add	r3, pc, #504	; (adr r3, 8011538 <__ieee754_rem_pio2+0x318>)
 8011340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011344:	e7e0      	b.n	8011308 <__ieee754_rem_pio2+0xe8>
 8011346:	4b87      	ldr	r3, [pc, #540]	; (8011564 <__ieee754_rem_pio2+0x344>)
 8011348:	4598      	cmp	r8, r3
 801134a:	f300 80d9 	bgt.w	8011500 <__ieee754_rem_pio2+0x2e0>
 801134e:	f000 ffef 	bl	8012330 <fabs>
 8011352:	ec55 4b10 	vmov	r4, r5, d0
 8011356:	ee10 0a10 	vmov	r0, s0
 801135a:	a379      	add	r3, pc, #484	; (adr r3, 8011540 <__ieee754_rem_pio2+0x320>)
 801135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011360:	4629      	mov	r1, r5
 8011362:	f7ef f951 	bl	8000608 <__aeabi_dmul>
 8011366:	4b80      	ldr	r3, [pc, #512]	; (8011568 <__ieee754_rem_pio2+0x348>)
 8011368:	2200      	movs	r2, #0
 801136a:	f7ee ff97 	bl	800029c <__adddf3>
 801136e:	f7ef fbfb 	bl	8000b68 <__aeabi_d2iz>
 8011372:	4683      	mov	fp, r0
 8011374:	f7ef f8de 	bl	8000534 <__aeabi_i2d>
 8011378:	4602      	mov	r2, r0
 801137a:	460b      	mov	r3, r1
 801137c:	ec43 2b18 	vmov	d8, r2, r3
 8011380:	a367      	add	r3, pc, #412	; (adr r3, 8011520 <__ieee754_rem_pio2+0x300>)
 8011382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011386:	f7ef f93f 	bl	8000608 <__aeabi_dmul>
 801138a:	4602      	mov	r2, r0
 801138c:	460b      	mov	r3, r1
 801138e:	4620      	mov	r0, r4
 8011390:	4629      	mov	r1, r5
 8011392:	f7ee ff81 	bl	8000298 <__aeabi_dsub>
 8011396:	a364      	add	r3, pc, #400	; (adr r3, 8011528 <__ieee754_rem_pio2+0x308>)
 8011398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801139c:	4606      	mov	r6, r0
 801139e:	460f      	mov	r7, r1
 80113a0:	ec51 0b18 	vmov	r0, r1, d8
 80113a4:	f7ef f930 	bl	8000608 <__aeabi_dmul>
 80113a8:	f1bb 0f1f 	cmp.w	fp, #31
 80113ac:	4604      	mov	r4, r0
 80113ae:	460d      	mov	r5, r1
 80113b0:	dc0d      	bgt.n	80113ce <__ieee754_rem_pio2+0x1ae>
 80113b2:	4b6e      	ldr	r3, [pc, #440]	; (801156c <__ieee754_rem_pio2+0x34c>)
 80113b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 80113b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80113bc:	4543      	cmp	r3, r8
 80113be:	d006      	beq.n	80113ce <__ieee754_rem_pio2+0x1ae>
 80113c0:	4622      	mov	r2, r4
 80113c2:	462b      	mov	r3, r5
 80113c4:	4630      	mov	r0, r6
 80113c6:	4639      	mov	r1, r7
 80113c8:	f7ee ff66 	bl	8000298 <__aeabi_dsub>
 80113cc:	e00f      	b.n	80113ee <__ieee754_rem_pio2+0x1ce>
 80113ce:	462b      	mov	r3, r5
 80113d0:	4622      	mov	r2, r4
 80113d2:	4630      	mov	r0, r6
 80113d4:	4639      	mov	r1, r7
 80113d6:	f7ee ff5f 	bl	8000298 <__aeabi_dsub>
 80113da:	ea4f 5328 	mov.w	r3, r8, asr #20
 80113de:	9303      	str	r3, [sp, #12]
 80113e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80113e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80113e8:	f1b8 0f10 	cmp.w	r8, #16
 80113ec:	dc02      	bgt.n	80113f4 <__ieee754_rem_pio2+0x1d4>
 80113ee:	e9ca 0100 	strd	r0, r1, [sl]
 80113f2:	e039      	b.n	8011468 <__ieee754_rem_pio2+0x248>
 80113f4:	a34e      	add	r3, pc, #312	; (adr r3, 8011530 <__ieee754_rem_pio2+0x310>)
 80113f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fa:	ec51 0b18 	vmov	r0, r1, d8
 80113fe:	f7ef f903 	bl	8000608 <__aeabi_dmul>
 8011402:	4604      	mov	r4, r0
 8011404:	460d      	mov	r5, r1
 8011406:	4602      	mov	r2, r0
 8011408:	460b      	mov	r3, r1
 801140a:	4630      	mov	r0, r6
 801140c:	4639      	mov	r1, r7
 801140e:	f7ee ff43 	bl	8000298 <__aeabi_dsub>
 8011412:	4602      	mov	r2, r0
 8011414:	460b      	mov	r3, r1
 8011416:	4680      	mov	r8, r0
 8011418:	4689      	mov	r9, r1
 801141a:	4630      	mov	r0, r6
 801141c:	4639      	mov	r1, r7
 801141e:	f7ee ff3b 	bl	8000298 <__aeabi_dsub>
 8011422:	4622      	mov	r2, r4
 8011424:	462b      	mov	r3, r5
 8011426:	f7ee ff37 	bl	8000298 <__aeabi_dsub>
 801142a:	a343      	add	r3, pc, #268	; (adr r3, 8011538 <__ieee754_rem_pio2+0x318>)
 801142c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011430:	4604      	mov	r4, r0
 8011432:	460d      	mov	r5, r1
 8011434:	ec51 0b18 	vmov	r0, r1, d8
 8011438:	f7ef f8e6 	bl	8000608 <__aeabi_dmul>
 801143c:	4622      	mov	r2, r4
 801143e:	462b      	mov	r3, r5
 8011440:	f7ee ff2a 	bl	8000298 <__aeabi_dsub>
 8011444:	4602      	mov	r2, r0
 8011446:	460b      	mov	r3, r1
 8011448:	4604      	mov	r4, r0
 801144a:	460d      	mov	r5, r1
 801144c:	4640      	mov	r0, r8
 801144e:	4649      	mov	r1, r9
 8011450:	f7ee ff22 	bl	8000298 <__aeabi_dsub>
 8011454:	9a03      	ldr	r2, [sp, #12]
 8011456:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801145a:	1ad3      	subs	r3, r2, r3
 801145c:	2b31      	cmp	r3, #49	; 0x31
 801145e:	dc24      	bgt.n	80114aa <__ieee754_rem_pio2+0x28a>
 8011460:	e9ca 0100 	strd	r0, r1, [sl]
 8011464:	4646      	mov	r6, r8
 8011466:	464f      	mov	r7, r9
 8011468:	e9da 8900 	ldrd	r8, r9, [sl]
 801146c:	4630      	mov	r0, r6
 801146e:	4642      	mov	r2, r8
 8011470:	464b      	mov	r3, r9
 8011472:	4639      	mov	r1, r7
 8011474:	f7ee ff10 	bl	8000298 <__aeabi_dsub>
 8011478:	462b      	mov	r3, r5
 801147a:	4622      	mov	r2, r4
 801147c:	f7ee ff0c 	bl	8000298 <__aeabi_dsub>
 8011480:	9b02      	ldr	r3, [sp, #8]
 8011482:	2b00      	cmp	r3, #0
 8011484:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011488:	f6bf af0a 	bge.w	80112a0 <__ieee754_rem_pio2+0x80>
 801148c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011490:	f8ca 3004 	str.w	r3, [sl, #4]
 8011494:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011498:	f8ca 8000 	str.w	r8, [sl]
 801149c:	f8ca 0008 	str.w	r0, [sl, #8]
 80114a0:	f8ca 300c 	str.w	r3, [sl, #12]
 80114a4:	f1cb 0b00 	rsb	fp, fp, #0
 80114a8:	e6fa      	b.n	80112a0 <__ieee754_rem_pio2+0x80>
 80114aa:	a327      	add	r3, pc, #156	; (adr r3, 8011548 <__ieee754_rem_pio2+0x328>)
 80114ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114b0:	ec51 0b18 	vmov	r0, r1, d8
 80114b4:	f7ef f8a8 	bl	8000608 <__aeabi_dmul>
 80114b8:	4604      	mov	r4, r0
 80114ba:	460d      	mov	r5, r1
 80114bc:	4602      	mov	r2, r0
 80114be:	460b      	mov	r3, r1
 80114c0:	4640      	mov	r0, r8
 80114c2:	4649      	mov	r1, r9
 80114c4:	f7ee fee8 	bl	8000298 <__aeabi_dsub>
 80114c8:	4602      	mov	r2, r0
 80114ca:	460b      	mov	r3, r1
 80114cc:	4606      	mov	r6, r0
 80114ce:	460f      	mov	r7, r1
 80114d0:	4640      	mov	r0, r8
 80114d2:	4649      	mov	r1, r9
 80114d4:	f7ee fee0 	bl	8000298 <__aeabi_dsub>
 80114d8:	4622      	mov	r2, r4
 80114da:	462b      	mov	r3, r5
 80114dc:	f7ee fedc 	bl	8000298 <__aeabi_dsub>
 80114e0:	a31b      	add	r3, pc, #108	; (adr r3, 8011550 <__ieee754_rem_pio2+0x330>)
 80114e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114e6:	4604      	mov	r4, r0
 80114e8:	460d      	mov	r5, r1
 80114ea:	ec51 0b18 	vmov	r0, r1, d8
 80114ee:	f7ef f88b 	bl	8000608 <__aeabi_dmul>
 80114f2:	4622      	mov	r2, r4
 80114f4:	462b      	mov	r3, r5
 80114f6:	f7ee fecf 	bl	8000298 <__aeabi_dsub>
 80114fa:	4604      	mov	r4, r0
 80114fc:	460d      	mov	r5, r1
 80114fe:	e75f      	b.n	80113c0 <__ieee754_rem_pio2+0x1a0>
 8011500:	4b1b      	ldr	r3, [pc, #108]	; (8011570 <__ieee754_rem_pio2+0x350>)
 8011502:	4598      	cmp	r8, r3
 8011504:	dd36      	ble.n	8011574 <__ieee754_rem_pio2+0x354>
 8011506:	ee10 2a10 	vmov	r2, s0
 801150a:	462b      	mov	r3, r5
 801150c:	4620      	mov	r0, r4
 801150e:	4629      	mov	r1, r5
 8011510:	f7ee fec2 	bl	8000298 <__aeabi_dsub>
 8011514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011518:	e9ca 0100 	strd	r0, r1, [sl]
 801151c:	e694      	b.n	8011248 <__ieee754_rem_pio2+0x28>
 801151e:	bf00      	nop
 8011520:	54400000 	.word	0x54400000
 8011524:	3ff921fb 	.word	0x3ff921fb
 8011528:	1a626331 	.word	0x1a626331
 801152c:	3dd0b461 	.word	0x3dd0b461
 8011530:	1a600000 	.word	0x1a600000
 8011534:	3dd0b461 	.word	0x3dd0b461
 8011538:	2e037073 	.word	0x2e037073
 801153c:	3ba3198a 	.word	0x3ba3198a
 8011540:	6dc9c883 	.word	0x6dc9c883
 8011544:	3fe45f30 	.word	0x3fe45f30
 8011548:	2e000000 	.word	0x2e000000
 801154c:	3ba3198a 	.word	0x3ba3198a
 8011550:	252049c1 	.word	0x252049c1
 8011554:	397b839a 	.word	0x397b839a
 8011558:	3fe921fb 	.word	0x3fe921fb
 801155c:	4002d97b 	.word	0x4002d97b
 8011560:	3ff921fb 	.word	0x3ff921fb
 8011564:	413921fb 	.word	0x413921fb
 8011568:	3fe00000 	.word	0x3fe00000
 801156c:	08012a78 	.word	0x08012a78
 8011570:	7fefffff 	.word	0x7fefffff
 8011574:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011578:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801157c:	ee10 0a10 	vmov	r0, s0
 8011580:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011584:	ee10 6a10 	vmov	r6, s0
 8011588:	460f      	mov	r7, r1
 801158a:	f7ef faed 	bl	8000b68 <__aeabi_d2iz>
 801158e:	f7ee ffd1 	bl	8000534 <__aeabi_i2d>
 8011592:	4602      	mov	r2, r0
 8011594:	460b      	mov	r3, r1
 8011596:	4630      	mov	r0, r6
 8011598:	4639      	mov	r1, r7
 801159a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801159e:	f7ee fe7b 	bl	8000298 <__aeabi_dsub>
 80115a2:	4b23      	ldr	r3, [pc, #140]	; (8011630 <__ieee754_rem_pio2+0x410>)
 80115a4:	2200      	movs	r2, #0
 80115a6:	f7ef f82f 	bl	8000608 <__aeabi_dmul>
 80115aa:	460f      	mov	r7, r1
 80115ac:	4606      	mov	r6, r0
 80115ae:	f7ef fadb 	bl	8000b68 <__aeabi_d2iz>
 80115b2:	f7ee ffbf 	bl	8000534 <__aeabi_i2d>
 80115b6:	4602      	mov	r2, r0
 80115b8:	460b      	mov	r3, r1
 80115ba:	4630      	mov	r0, r6
 80115bc:	4639      	mov	r1, r7
 80115be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80115c2:	f7ee fe69 	bl	8000298 <__aeabi_dsub>
 80115c6:	4b1a      	ldr	r3, [pc, #104]	; (8011630 <__ieee754_rem_pio2+0x410>)
 80115c8:	2200      	movs	r2, #0
 80115ca:	f7ef f81d 	bl	8000608 <__aeabi_dmul>
 80115ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80115d2:	ad04      	add	r5, sp, #16
 80115d4:	f04f 0803 	mov.w	r8, #3
 80115d8:	46a9      	mov	r9, r5
 80115da:	2600      	movs	r6, #0
 80115dc:	2700      	movs	r7, #0
 80115de:	4632      	mov	r2, r6
 80115e0:	463b      	mov	r3, r7
 80115e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80115e6:	46c3      	mov	fp, r8
 80115e8:	3d08      	subs	r5, #8
 80115ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80115ee:	f7ef fa73 	bl	8000ad8 <__aeabi_dcmpeq>
 80115f2:	2800      	cmp	r0, #0
 80115f4:	d1f3      	bne.n	80115de <__ieee754_rem_pio2+0x3be>
 80115f6:	4b0f      	ldr	r3, [pc, #60]	; (8011634 <__ieee754_rem_pio2+0x414>)
 80115f8:	9301      	str	r3, [sp, #4]
 80115fa:	2302      	movs	r3, #2
 80115fc:	9300      	str	r3, [sp, #0]
 80115fe:	4622      	mov	r2, r4
 8011600:	465b      	mov	r3, fp
 8011602:	4651      	mov	r1, sl
 8011604:	4648      	mov	r0, r9
 8011606:	f000 f8e3 	bl	80117d0 <__kernel_rem_pio2>
 801160a:	9b02      	ldr	r3, [sp, #8]
 801160c:	2b00      	cmp	r3, #0
 801160e:	4683      	mov	fp, r0
 8011610:	f6bf ae46 	bge.w	80112a0 <__ieee754_rem_pio2+0x80>
 8011614:	e9da 2100 	ldrd	r2, r1, [sl]
 8011618:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801161c:	e9ca 2300 	strd	r2, r3, [sl]
 8011620:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011624:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011628:	e9ca 2302 	strd	r2, r3, [sl, #8]
 801162c:	e73a      	b.n	80114a4 <__ieee754_rem_pio2+0x284>
 801162e:	bf00      	nop
 8011630:	41700000 	.word	0x41700000
 8011634:	08012af8 	.word	0x08012af8

08011638 <__ieee754_sqrtf>:
 8011638:	eeb1 0ac0 	vsqrt.f32	s0, s0
 801163c:	4770      	bx	lr
	...

08011640 <__kernel_cos>:
 8011640:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011644:	ec57 6b10 	vmov	r6, r7, d0
 8011648:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 801164c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011650:	ed8d 1b00 	vstr	d1, [sp]
 8011654:	da07      	bge.n	8011666 <__kernel_cos+0x26>
 8011656:	ee10 0a10 	vmov	r0, s0
 801165a:	4639      	mov	r1, r7
 801165c:	f7ef fa84 	bl	8000b68 <__aeabi_d2iz>
 8011660:	2800      	cmp	r0, #0
 8011662:	f000 8088 	beq.w	8011776 <__kernel_cos+0x136>
 8011666:	4632      	mov	r2, r6
 8011668:	463b      	mov	r3, r7
 801166a:	4630      	mov	r0, r6
 801166c:	4639      	mov	r1, r7
 801166e:	f7ee ffcb 	bl	8000608 <__aeabi_dmul>
 8011672:	4b51      	ldr	r3, [pc, #324]	; (80117b8 <__kernel_cos+0x178>)
 8011674:	2200      	movs	r2, #0
 8011676:	4604      	mov	r4, r0
 8011678:	460d      	mov	r5, r1
 801167a:	f7ee ffc5 	bl	8000608 <__aeabi_dmul>
 801167e:	a340      	add	r3, pc, #256	; (adr r3, 8011780 <__kernel_cos+0x140>)
 8011680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011684:	4682      	mov	sl, r0
 8011686:	468b      	mov	fp, r1
 8011688:	4620      	mov	r0, r4
 801168a:	4629      	mov	r1, r5
 801168c:	f7ee ffbc 	bl	8000608 <__aeabi_dmul>
 8011690:	a33d      	add	r3, pc, #244	; (adr r3, 8011788 <__kernel_cos+0x148>)
 8011692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011696:	f7ee fe01 	bl	800029c <__adddf3>
 801169a:	4622      	mov	r2, r4
 801169c:	462b      	mov	r3, r5
 801169e:	f7ee ffb3 	bl	8000608 <__aeabi_dmul>
 80116a2:	a33b      	add	r3, pc, #236	; (adr r3, 8011790 <__kernel_cos+0x150>)
 80116a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a8:	f7ee fdf6 	bl	8000298 <__aeabi_dsub>
 80116ac:	4622      	mov	r2, r4
 80116ae:	462b      	mov	r3, r5
 80116b0:	f7ee ffaa 	bl	8000608 <__aeabi_dmul>
 80116b4:	a338      	add	r3, pc, #224	; (adr r3, 8011798 <__kernel_cos+0x158>)
 80116b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ba:	f7ee fdef 	bl	800029c <__adddf3>
 80116be:	4622      	mov	r2, r4
 80116c0:	462b      	mov	r3, r5
 80116c2:	f7ee ffa1 	bl	8000608 <__aeabi_dmul>
 80116c6:	a336      	add	r3, pc, #216	; (adr r3, 80117a0 <__kernel_cos+0x160>)
 80116c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116cc:	f7ee fde4 	bl	8000298 <__aeabi_dsub>
 80116d0:	4622      	mov	r2, r4
 80116d2:	462b      	mov	r3, r5
 80116d4:	f7ee ff98 	bl	8000608 <__aeabi_dmul>
 80116d8:	a333      	add	r3, pc, #204	; (adr r3, 80117a8 <__kernel_cos+0x168>)
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	f7ee fddd 	bl	800029c <__adddf3>
 80116e2:	4622      	mov	r2, r4
 80116e4:	462b      	mov	r3, r5
 80116e6:	f7ee ff8f 	bl	8000608 <__aeabi_dmul>
 80116ea:	4622      	mov	r2, r4
 80116ec:	462b      	mov	r3, r5
 80116ee:	f7ee ff8b 	bl	8000608 <__aeabi_dmul>
 80116f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80116f6:	4604      	mov	r4, r0
 80116f8:	460d      	mov	r5, r1
 80116fa:	4630      	mov	r0, r6
 80116fc:	4639      	mov	r1, r7
 80116fe:	f7ee ff83 	bl	8000608 <__aeabi_dmul>
 8011702:	460b      	mov	r3, r1
 8011704:	4602      	mov	r2, r0
 8011706:	4629      	mov	r1, r5
 8011708:	4620      	mov	r0, r4
 801170a:	f7ee fdc5 	bl	8000298 <__aeabi_dsub>
 801170e:	4b2b      	ldr	r3, [pc, #172]	; (80117bc <__kernel_cos+0x17c>)
 8011710:	4598      	cmp	r8, r3
 8011712:	4606      	mov	r6, r0
 8011714:	460f      	mov	r7, r1
 8011716:	dc10      	bgt.n	801173a <__kernel_cos+0xfa>
 8011718:	4602      	mov	r2, r0
 801171a:	460b      	mov	r3, r1
 801171c:	4650      	mov	r0, sl
 801171e:	4659      	mov	r1, fp
 8011720:	f7ee fdba 	bl	8000298 <__aeabi_dsub>
 8011724:	460b      	mov	r3, r1
 8011726:	4926      	ldr	r1, [pc, #152]	; (80117c0 <__kernel_cos+0x180>)
 8011728:	4602      	mov	r2, r0
 801172a:	2000      	movs	r0, #0
 801172c:	f7ee fdb4 	bl	8000298 <__aeabi_dsub>
 8011730:	ec41 0b10 	vmov	d0, r0, r1
 8011734:	b003      	add	sp, #12
 8011736:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801173a:	4b22      	ldr	r3, [pc, #136]	; (80117c4 <__kernel_cos+0x184>)
 801173c:	4920      	ldr	r1, [pc, #128]	; (80117c0 <__kernel_cos+0x180>)
 801173e:	4598      	cmp	r8, r3
 8011740:	bfcc      	ite	gt
 8011742:	4d21      	ldrgt	r5, [pc, #132]	; (80117c8 <__kernel_cos+0x188>)
 8011744:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011748:	2400      	movs	r4, #0
 801174a:	4622      	mov	r2, r4
 801174c:	462b      	mov	r3, r5
 801174e:	2000      	movs	r0, #0
 8011750:	f7ee fda2 	bl	8000298 <__aeabi_dsub>
 8011754:	4622      	mov	r2, r4
 8011756:	4680      	mov	r8, r0
 8011758:	4689      	mov	r9, r1
 801175a:	462b      	mov	r3, r5
 801175c:	4650      	mov	r0, sl
 801175e:	4659      	mov	r1, fp
 8011760:	f7ee fd9a 	bl	8000298 <__aeabi_dsub>
 8011764:	4632      	mov	r2, r6
 8011766:	463b      	mov	r3, r7
 8011768:	f7ee fd96 	bl	8000298 <__aeabi_dsub>
 801176c:	4602      	mov	r2, r0
 801176e:	460b      	mov	r3, r1
 8011770:	4640      	mov	r0, r8
 8011772:	4649      	mov	r1, r9
 8011774:	e7da      	b.n	801172c <__kernel_cos+0xec>
 8011776:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 80117b0 <__kernel_cos+0x170>
 801177a:	e7db      	b.n	8011734 <__kernel_cos+0xf4>
 801177c:	f3af 8000 	nop.w
 8011780:	be8838d4 	.word	0xbe8838d4
 8011784:	bda8fae9 	.word	0xbda8fae9
 8011788:	bdb4b1c4 	.word	0xbdb4b1c4
 801178c:	3e21ee9e 	.word	0x3e21ee9e
 8011790:	809c52ad 	.word	0x809c52ad
 8011794:	3e927e4f 	.word	0x3e927e4f
 8011798:	19cb1590 	.word	0x19cb1590
 801179c:	3efa01a0 	.word	0x3efa01a0
 80117a0:	16c15177 	.word	0x16c15177
 80117a4:	3f56c16c 	.word	0x3f56c16c
 80117a8:	5555554c 	.word	0x5555554c
 80117ac:	3fa55555 	.word	0x3fa55555
 80117b0:	00000000 	.word	0x00000000
 80117b4:	3ff00000 	.word	0x3ff00000
 80117b8:	3fe00000 	.word	0x3fe00000
 80117bc:	3fd33332 	.word	0x3fd33332
 80117c0:	3ff00000 	.word	0x3ff00000
 80117c4:	3fe90000 	.word	0x3fe90000
 80117c8:	3fd20000 	.word	0x3fd20000
 80117cc:	00000000 	.word	0x00000000

080117d0 <__kernel_rem_pio2>:
 80117d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80117d4:	ed2d 8b02 	vpush	{d8}
 80117d8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 80117dc:	f112 0f14 	cmn.w	r2, #20
 80117e0:	9308      	str	r3, [sp, #32]
 80117e2:	9101      	str	r1, [sp, #4]
 80117e4:	4bc4      	ldr	r3, [pc, #784]	; (8011af8 <__kernel_rem_pio2+0x328>)
 80117e6:	99a6      	ldr	r1, [sp, #664]	; 0x298
 80117e8:	900b      	str	r0, [sp, #44]	; 0x2c
 80117ea:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80117ee:	9302      	str	r3, [sp, #8]
 80117f0:	9b08      	ldr	r3, [sp, #32]
 80117f2:	f103 33ff 	add.w	r3, r3, #4294967295
 80117f6:	bfa8      	it	ge
 80117f8:	1ed4      	subge	r4, r2, #3
 80117fa:	9306      	str	r3, [sp, #24]
 80117fc:	bfb2      	itee	lt
 80117fe:	2400      	movlt	r4, #0
 8011800:	2318      	movge	r3, #24
 8011802:	fb94 f4f3 	sdivge	r4, r4, r3
 8011806:	f06f 0317 	mvn.w	r3, #23
 801180a:	fb04 3303 	mla	r3, r4, r3, r3
 801180e:	eb03 0a02 	add.w	sl, r3, r2
 8011812:	9b02      	ldr	r3, [sp, #8]
 8011814:	9a06      	ldr	r2, [sp, #24]
 8011816:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8011ae8 <__kernel_rem_pio2+0x318>
 801181a:	eb03 0802 	add.w	r8, r3, r2
 801181e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011820:	1aa7      	subs	r7, r4, r2
 8011822:	ae22      	add	r6, sp, #136	; 0x88
 8011824:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011828:	2500      	movs	r5, #0
 801182a:	4545      	cmp	r5, r8
 801182c:	dd13      	ble.n	8011856 <__kernel_rem_pio2+0x86>
 801182e:	9b08      	ldr	r3, [sp, #32]
 8011830:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8011ae8 <__kernel_rem_pio2+0x318>
 8011834:	aa22      	add	r2, sp, #136	; 0x88
 8011836:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801183a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801183e:	f04f 0800 	mov.w	r8, #0
 8011842:	9b02      	ldr	r3, [sp, #8]
 8011844:	4598      	cmp	r8, r3
 8011846:	dc2f      	bgt.n	80118a8 <__kernel_rem_pio2+0xd8>
 8011848:	ed8d 8b04 	vstr	d8, [sp, #16]
 801184c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011850:	462f      	mov	r7, r5
 8011852:	2600      	movs	r6, #0
 8011854:	e01b      	b.n	801188e <__kernel_rem_pio2+0xbe>
 8011856:	42ef      	cmn	r7, r5
 8011858:	d407      	bmi.n	801186a <__kernel_rem_pio2+0x9a>
 801185a:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 801185e:	f7ee fe69 	bl	8000534 <__aeabi_i2d>
 8011862:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011866:	3501      	adds	r5, #1
 8011868:	e7df      	b.n	801182a <__kernel_rem_pio2+0x5a>
 801186a:	ec51 0b18 	vmov	r0, r1, d8
 801186e:	e7f8      	b.n	8011862 <__kernel_rem_pio2+0x92>
 8011870:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011874:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011878:	f7ee fec6 	bl	8000608 <__aeabi_dmul>
 801187c:	4602      	mov	r2, r0
 801187e:	460b      	mov	r3, r1
 8011880:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011884:	f7ee fd0a 	bl	800029c <__adddf3>
 8011888:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801188c:	3601      	adds	r6, #1
 801188e:	9b06      	ldr	r3, [sp, #24]
 8011890:	429e      	cmp	r6, r3
 8011892:	f1a7 0708 	sub.w	r7, r7, #8
 8011896:	ddeb      	ble.n	8011870 <__kernel_rem_pio2+0xa0>
 8011898:	ed9d 7b04 	vldr	d7, [sp, #16]
 801189c:	f108 0801 	add.w	r8, r8, #1
 80118a0:	ecab 7b02 	vstmia	fp!, {d7}
 80118a4:	3508      	adds	r5, #8
 80118a6:	e7cc      	b.n	8011842 <__kernel_rem_pio2+0x72>
 80118a8:	9b02      	ldr	r3, [sp, #8]
 80118aa:	aa0e      	add	r2, sp, #56	; 0x38
 80118ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80118b0:	930d      	str	r3, [sp, #52]	; 0x34
 80118b2:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80118b4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80118b8:	9c02      	ldr	r4, [sp, #8]
 80118ba:	930c      	str	r3, [sp, #48]	; 0x30
 80118bc:	00e3      	lsls	r3, r4, #3
 80118be:	930a      	str	r3, [sp, #40]	; 0x28
 80118c0:	ab9a      	add	r3, sp, #616	; 0x268
 80118c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80118c6:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80118ca:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80118ce:	ab72      	add	r3, sp, #456	; 0x1c8
 80118d0:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80118d4:	46c3      	mov	fp, r8
 80118d6:	46a1      	mov	r9, r4
 80118d8:	f1b9 0f00 	cmp.w	r9, #0
 80118dc:	f1a5 0508 	sub.w	r5, r5, #8
 80118e0:	dc77      	bgt.n	80119d2 <__kernel_rem_pio2+0x202>
 80118e2:	ec47 6b10 	vmov	d0, r6, r7
 80118e6:	4650      	mov	r0, sl
 80118e8:	f000 fdae 	bl	8012448 <scalbn>
 80118ec:	ec57 6b10 	vmov	r6, r7, d0
 80118f0:	2200      	movs	r2, #0
 80118f2:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80118f6:	ee10 0a10 	vmov	r0, s0
 80118fa:	4639      	mov	r1, r7
 80118fc:	f7ee fe84 	bl	8000608 <__aeabi_dmul>
 8011900:	ec41 0b10 	vmov	d0, r0, r1
 8011904:	f000 fd20 	bl	8012348 <floor>
 8011908:	4b7c      	ldr	r3, [pc, #496]	; (8011afc <__kernel_rem_pio2+0x32c>)
 801190a:	ec51 0b10 	vmov	r0, r1, d0
 801190e:	2200      	movs	r2, #0
 8011910:	f7ee fe7a 	bl	8000608 <__aeabi_dmul>
 8011914:	4602      	mov	r2, r0
 8011916:	460b      	mov	r3, r1
 8011918:	4630      	mov	r0, r6
 801191a:	4639      	mov	r1, r7
 801191c:	f7ee fcbc 	bl	8000298 <__aeabi_dsub>
 8011920:	460f      	mov	r7, r1
 8011922:	4606      	mov	r6, r0
 8011924:	f7ef f920 	bl	8000b68 <__aeabi_d2iz>
 8011928:	9004      	str	r0, [sp, #16]
 801192a:	f7ee fe03 	bl	8000534 <__aeabi_i2d>
 801192e:	4602      	mov	r2, r0
 8011930:	460b      	mov	r3, r1
 8011932:	4630      	mov	r0, r6
 8011934:	4639      	mov	r1, r7
 8011936:	f7ee fcaf 	bl	8000298 <__aeabi_dsub>
 801193a:	f1ba 0f00 	cmp.w	sl, #0
 801193e:	4606      	mov	r6, r0
 8011940:	460f      	mov	r7, r1
 8011942:	dd6d      	ble.n	8011a20 <__kernel_rem_pio2+0x250>
 8011944:	1e62      	subs	r2, r4, #1
 8011946:	ab0e      	add	r3, sp, #56	; 0x38
 8011948:	9d04      	ldr	r5, [sp, #16]
 801194a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801194e:	f1ca 0118 	rsb	r1, sl, #24
 8011952:	fa40 f301 	asr.w	r3, r0, r1
 8011956:	441d      	add	r5, r3
 8011958:	408b      	lsls	r3, r1
 801195a:	1ac0      	subs	r0, r0, r3
 801195c:	ab0e      	add	r3, sp, #56	; 0x38
 801195e:	9504      	str	r5, [sp, #16]
 8011960:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011964:	f1ca 0317 	rsb	r3, sl, #23
 8011968:	fa40 fb03 	asr.w	fp, r0, r3
 801196c:	f1bb 0f00 	cmp.w	fp, #0
 8011970:	dd65      	ble.n	8011a3e <__kernel_rem_pio2+0x26e>
 8011972:	9b04      	ldr	r3, [sp, #16]
 8011974:	2200      	movs	r2, #0
 8011976:	3301      	adds	r3, #1
 8011978:	9304      	str	r3, [sp, #16]
 801197a:	4615      	mov	r5, r2
 801197c:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011980:	4294      	cmp	r4, r2
 8011982:	f300 809c 	bgt.w	8011abe <__kernel_rem_pio2+0x2ee>
 8011986:	f1ba 0f00 	cmp.w	sl, #0
 801198a:	dd07      	ble.n	801199c <__kernel_rem_pio2+0x1cc>
 801198c:	f1ba 0f01 	cmp.w	sl, #1
 8011990:	f000 80c0 	beq.w	8011b14 <__kernel_rem_pio2+0x344>
 8011994:	f1ba 0f02 	cmp.w	sl, #2
 8011998:	f000 80c6 	beq.w	8011b28 <__kernel_rem_pio2+0x358>
 801199c:	f1bb 0f02 	cmp.w	fp, #2
 80119a0:	d14d      	bne.n	8011a3e <__kernel_rem_pio2+0x26e>
 80119a2:	4632      	mov	r2, r6
 80119a4:	463b      	mov	r3, r7
 80119a6:	4956      	ldr	r1, [pc, #344]	; (8011b00 <__kernel_rem_pio2+0x330>)
 80119a8:	2000      	movs	r0, #0
 80119aa:	f7ee fc75 	bl	8000298 <__aeabi_dsub>
 80119ae:	4606      	mov	r6, r0
 80119b0:	460f      	mov	r7, r1
 80119b2:	2d00      	cmp	r5, #0
 80119b4:	d043      	beq.n	8011a3e <__kernel_rem_pio2+0x26e>
 80119b6:	4650      	mov	r0, sl
 80119b8:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8011af0 <__kernel_rem_pio2+0x320>
 80119bc:	f000 fd44 	bl	8012448 <scalbn>
 80119c0:	4630      	mov	r0, r6
 80119c2:	4639      	mov	r1, r7
 80119c4:	ec53 2b10 	vmov	r2, r3, d0
 80119c8:	f7ee fc66 	bl	8000298 <__aeabi_dsub>
 80119cc:	4606      	mov	r6, r0
 80119ce:	460f      	mov	r7, r1
 80119d0:	e035      	b.n	8011a3e <__kernel_rem_pio2+0x26e>
 80119d2:	4b4c      	ldr	r3, [pc, #304]	; (8011b04 <__kernel_rem_pio2+0x334>)
 80119d4:	2200      	movs	r2, #0
 80119d6:	4630      	mov	r0, r6
 80119d8:	4639      	mov	r1, r7
 80119da:	f7ee fe15 	bl	8000608 <__aeabi_dmul>
 80119de:	f7ef f8c3 	bl	8000b68 <__aeabi_d2iz>
 80119e2:	f7ee fda7 	bl	8000534 <__aeabi_i2d>
 80119e6:	4602      	mov	r2, r0
 80119e8:	460b      	mov	r3, r1
 80119ea:	ec43 2b18 	vmov	d8, r2, r3
 80119ee:	4b46      	ldr	r3, [pc, #280]	; (8011b08 <__kernel_rem_pio2+0x338>)
 80119f0:	2200      	movs	r2, #0
 80119f2:	f7ee fe09 	bl	8000608 <__aeabi_dmul>
 80119f6:	4602      	mov	r2, r0
 80119f8:	460b      	mov	r3, r1
 80119fa:	4630      	mov	r0, r6
 80119fc:	4639      	mov	r1, r7
 80119fe:	f7ee fc4b 	bl	8000298 <__aeabi_dsub>
 8011a02:	f7ef f8b1 	bl	8000b68 <__aeabi_d2iz>
 8011a06:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011a0a:	f84b 0b04 	str.w	r0, [fp], #4
 8011a0e:	ec51 0b18 	vmov	r0, r1, d8
 8011a12:	f7ee fc43 	bl	800029c <__adddf3>
 8011a16:	f109 39ff 	add.w	r9, r9, #4294967295
 8011a1a:	4606      	mov	r6, r0
 8011a1c:	460f      	mov	r7, r1
 8011a1e:	e75b      	b.n	80118d8 <__kernel_rem_pio2+0x108>
 8011a20:	d106      	bne.n	8011a30 <__kernel_rem_pio2+0x260>
 8011a22:	1e63      	subs	r3, r4, #1
 8011a24:	aa0e      	add	r2, sp, #56	; 0x38
 8011a26:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011a2a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011a2e:	e79d      	b.n	801196c <__kernel_rem_pio2+0x19c>
 8011a30:	4b36      	ldr	r3, [pc, #216]	; (8011b0c <__kernel_rem_pio2+0x33c>)
 8011a32:	2200      	movs	r2, #0
 8011a34:	f7ef f86e 	bl	8000b14 <__aeabi_dcmpge>
 8011a38:	2800      	cmp	r0, #0
 8011a3a:	d13d      	bne.n	8011ab8 <__kernel_rem_pio2+0x2e8>
 8011a3c:	4683      	mov	fp, r0
 8011a3e:	2200      	movs	r2, #0
 8011a40:	2300      	movs	r3, #0
 8011a42:	4630      	mov	r0, r6
 8011a44:	4639      	mov	r1, r7
 8011a46:	f7ef f847 	bl	8000ad8 <__aeabi_dcmpeq>
 8011a4a:	2800      	cmp	r0, #0
 8011a4c:	f000 80c0 	beq.w	8011bd0 <__kernel_rem_pio2+0x400>
 8011a50:	1e65      	subs	r5, r4, #1
 8011a52:	462b      	mov	r3, r5
 8011a54:	2200      	movs	r2, #0
 8011a56:	9902      	ldr	r1, [sp, #8]
 8011a58:	428b      	cmp	r3, r1
 8011a5a:	da6c      	bge.n	8011b36 <__kernel_rem_pio2+0x366>
 8011a5c:	2a00      	cmp	r2, #0
 8011a5e:	f000 8089 	beq.w	8011b74 <__kernel_rem_pio2+0x3a4>
 8011a62:	ab0e      	add	r3, sp, #56	; 0x38
 8011a64:	f1aa 0a18 	sub.w	sl, sl, #24
 8011a68:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011a6c:	2b00      	cmp	r3, #0
 8011a6e:	f000 80ad 	beq.w	8011bcc <__kernel_rem_pio2+0x3fc>
 8011a72:	4650      	mov	r0, sl
 8011a74:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8011af0 <__kernel_rem_pio2+0x320>
 8011a78:	f000 fce6 	bl	8012448 <scalbn>
 8011a7c:	ab9a      	add	r3, sp, #616	; 0x268
 8011a7e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011a82:	ec57 6b10 	vmov	r6, r7, d0
 8011a86:	00ec      	lsls	r4, r5, #3
 8011a88:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011a8c:	46aa      	mov	sl, r5
 8011a8e:	f1ba 0f00 	cmp.w	sl, #0
 8011a92:	f280 80d6 	bge.w	8011c42 <__kernel_rem_pio2+0x472>
 8011a96:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8011ae8 <__kernel_rem_pio2+0x318>
 8011a9a:	462e      	mov	r6, r5
 8011a9c:	2e00      	cmp	r6, #0
 8011a9e:	f2c0 8104 	blt.w	8011caa <__kernel_rem_pio2+0x4da>
 8011aa2:	ab72      	add	r3, sp, #456	; 0x1c8
 8011aa4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011aa8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8011b10 <__kernel_rem_pio2+0x340>
 8011aac:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8011ab0:	f04f 0800 	mov.w	r8, #0
 8011ab4:	1baf      	subs	r7, r5, r6
 8011ab6:	e0ea      	b.n	8011c8e <__kernel_rem_pio2+0x4be>
 8011ab8:	f04f 0b02 	mov.w	fp, #2
 8011abc:	e759      	b.n	8011972 <__kernel_rem_pio2+0x1a2>
 8011abe:	f8d8 3000 	ldr.w	r3, [r8]
 8011ac2:	b955      	cbnz	r5, 8011ada <__kernel_rem_pio2+0x30a>
 8011ac4:	b123      	cbz	r3, 8011ad0 <__kernel_rem_pio2+0x300>
 8011ac6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8011aca:	f8c8 3000 	str.w	r3, [r8]
 8011ace:	2301      	movs	r3, #1
 8011ad0:	3201      	adds	r2, #1
 8011ad2:	f108 0804 	add.w	r8, r8, #4
 8011ad6:	461d      	mov	r5, r3
 8011ad8:	e752      	b.n	8011980 <__kernel_rem_pio2+0x1b0>
 8011ada:	1acb      	subs	r3, r1, r3
 8011adc:	f8c8 3000 	str.w	r3, [r8]
 8011ae0:	462b      	mov	r3, r5
 8011ae2:	e7f5      	b.n	8011ad0 <__kernel_rem_pio2+0x300>
 8011ae4:	f3af 8000 	nop.w
	...
 8011af4:	3ff00000 	.word	0x3ff00000
 8011af8:	08012c40 	.word	0x08012c40
 8011afc:	40200000 	.word	0x40200000
 8011b00:	3ff00000 	.word	0x3ff00000
 8011b04:	3e700000 	.word	0x3e700000
 8011b08:	41700000 	.word	0x41700000
 8011b0c:	3fe00000 	.word	0x3fe00000
 8011b10:	08012c00 	.word	0x08012c00
 8011b14:	1e62      	subs	r2, r4, #1
 8011b16:	ab0e      	add	r3, sp, #56	; 0x38
 8011b18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b1c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8011b20:	a90e      	add	r1, sp, #56	; 0x38
 8011b22:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8011b26:	e739      	b.n	801199c <__kernel_rem_pio2+0x1cc>
 8011b28:	1e62      	subs	r2, r4, #1
 8011b2a:	ab0e      	add	r3, sp, #56	; 0x38
 8011b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b30:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8011b34:	e7f4      	b.n	8011b20 <__kernel_rem_pio2+0x350>
 8011b36:	a90e      	add	r1, sp, #56	; 0x38
 8011b38:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8011b3c:	3b01      	subs	r3, #1
 8011b3e:	430a      	orrs	r2, r1
 8011b40:	e789      	b.n	8011a56 <__kernel_rem_pio2+0x286>
 8011b42:	3301      	adds	r3, #1
 8011b44:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8011b48:	2900      	cmp	r1, #0
 8011b4a:	d0fa      	beq.n	8011b42 <__kernel_rem_pio2+0x372>
 8011b4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8011b4e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8011b52:	446a      	add	r2, sp
 8011b54:	3a98      	subs	r2, #152	; 0x98
 8011b56:	920a      	str	r2, [sp, #40]	; 0x28
 8011b58:	9a08      	ldr	r2, [sp, #32]
 8011b5a:	18e3      	adds	r3, r4, r3
 8011b5c:	18a5      	adds	r5, r4, r2
 8011b5e:	aa22      	add	r2, sp, #136	; 0x88
 8011b60:	f104 0801 	add.w	r8, r4, #1
 8011b64:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8011b68:	9304      	str	r3, [sp, #16]
 8011b6a:	9b04      	ldr	r3, [sp, #16]
 8011b6c:	4543      	cmp	r3, r8
 8011b6e:	da04      	bge.n	8011b7a <__kernel_rem_pio2+0x3aa>
 8011b70:	461c      	mov	r4, r3
 8011b72:	e6a3      	b.n	80118bc <__kernel_rem_pio2+0xec>
 8011b74:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8011b76:	2301      	movs	r3, #1
 8011b78:	e7e4      	b.n	8011b44 <__kernel_rem_pio2+0x374>
 8011b7a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b7c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8011b80:	f7ee fcd8 	bl	8000534 <__aeabi_i2d>
 8011b84:	e8e5 0102 	strd	r0, r1, [r5], #8
 8011b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8011b8a:	46ab      	mov	fp, r5
 8011b8c:	461c      	mov	r4, r3
 8011b8e:	f04f 0900 	mov.w	r9, #0
 8011b92:	2600      	movs	r6, #0
 8011b94:	2700      	movs	r7, #0
 8011b96:	9b06      	ldr	r3, [sp, #24]
 8011b98:	4599      	cmp	r9, r3
 8011b9a:	dd06      	ble.n	8011baa <__kernel_rem_pio2+0x3da>
 8011b9c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8011b9e:	e8e3 6702 	strd	r6, r7, [r3], #8
 8011ba2:	f108 0801 	add.w	r8, r8, #1
 8011ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8011ba8:	e7df      	b.n	8011b6a <__kernel_rem_pio2+0x39a>
 8011baa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8011bae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8011bb2:	f7ee fd29 	bl	8000608 <__aeabi_dmul>
 8011bb6:	4602      	mov	r2, r0
 8011bb8:	460b      	mov	r3, r1
 8011bba:	4630      	mov	r0, r6
 8011bbc:	4639      	mov	r1, r7
 8011bbe:	f7ee fb6d 	bl	800029c <__adddf3>
 8011bc2:	f109 0901 	add.w	r9, r9, #1
 8011bc6:	4606      	mov	r6, r0
 8011bc8:	460f      	mov	r7, r1
 8011bca:	e7e4      	b.n	8011b96 <__kernel_rem_pio2+0x3c6>
 8011bcc:	3d01      	subs	r5, #1
 8011bce:	e748      	b.n	8011a62 <__kernel_rem_pio2+0x292>
 8011bd0:	ec47 6b10 	vmov	d0, r6, r7
 8011bd4:	f1ca 0000 	rsb	r0, sl, #0
 8011bd8:	f000 fc36 	bl	8012448 <scalbn>
 8011bdc:	ec57 6b10 	vmov	r6, r7, d0
 8011be0:	4ba0      	ldr	r3, [pc, #640]	; (8011e64 <__kernel_rem_pio2+0x694>)
 8011be2:	ee10 0a10 	vmov	r0, s0
 8011be6:	2200      	movs	r2, #0
 8011be8:	4639      	mov	r1, r7
 8011bea:	f7ee ff93 	bl	8000b14 <__aeabi_dcmpge>
 8011bee:	b1f8      	cbz	r0, 8011c30 <__kernel_rem_pio2+0x460>
 8011bf0:	4b9d      	ldr	r3, [pc, #628]	; (8011e68 <__kernel_rem_pio2+0x698>)
 8011bf2:	2200      	movs	r2, #0
 8011bf4:	4630      	mov	r0, r6
 8011bf6:	4639      	mov	r1, r7
 8011bf8:	f7ee fd06 	bl	8000608 <__aeabi_dmul>
 8011bfc:	f7ee ffb4 	bl	8000b68 <__aeabi_d2iz>
 8011c00:	4680      	mov	r8, r0
 8011c02:	f7ee fc97 	bl	8000534 <__aeabi_i2d>
 8011c06:	4b97      	ldr	r3, [pc, #604]	; (8011e64 <__kernel_rem_pio2+0x694>)
 8011c08:	2200      	movs	r2, #0
 8011c0a:	f7ee fcfd 	bl	8000608 <__aeabi_dmul>
 8011c0e:	460b      	mov	r3, r1
 8011c10:	4602      	mov	r2, r0
 8011c12:	4639      	mov	r1, r7
 8011c14:	4630      	mov	r0, r6
 8011c16:	f7ee fb3f 	bl	8000298 <__aeabi_dsub>
 8011c1a:	f7ee ffa5 	bl	8000b68 <__aeabi_d2iz>
 8011c1e:	1c65      	adds	r5, r4, #1
 8011c20:	ab0e      	add	r3, sp, #56	; 0x38
 8011c22:	f10a 0a18 	add.w	sl, sl, #24
 8011c26:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c2a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8011c2e:	e720      	b.n	8011a72 <__kernel_rem_pio2+0x2a2>
 8011c30:	4630      	mov	r0, r6
 8011c32:	4639      	mov	r1, r7
 8011c34:	f7ee ff98 	bl	8000b68 <__aeabi_d2iz>
 8011c38:	ab0e      	add	r3, sp, #56	; 0x38
 8011c3a:	4625      	mov	r5, r4
 8011c3c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8011c40:	e717      	b.n	8011a72 <__kernel_rem_pio2+0x2a2>
 8011c42:	ab0e      	add	r3, sp, #56	; 0x38
 8011c44:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8011c48:	f7ee fc74 	bl	8000534 <__aeabi_i2d>
 8011c4c:	4632      	mov	r2, r6
 8011c4e:	463b      	mov	r3, r7
 8011c50:	f7ee fcda 	bl	8000608 <__aeabi_dmul>
 8011c54:	4b84      	ldr	r3, [pc, #528]	; (8011e68 <__kernel_rem_pio2+0x698>)
 8011c56:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8011c5a:	2200      	movs	r2, #0
 8011c5c:	4630      	mov	r0, r6
 8011c5e:	4639      	mov	r1, r7
 8011c60:	f7ee fcd2 	bl	8000608 <__aeabi_dmul>
 8011c64:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011c68:	4606      	mov	r6, r0
 8011c6a:	460f      	mov	r7, r1
 8011c6c:	e70f      	b.n	8011a8e <__kernel_rem_pio2+0x2be>
 8011c6e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8011c72:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8011c76:	f7ee fcc7 	bl	8000608 <__aeabi_dmul>
 8011c7a:	4602      	mov	r2, r0
 8011c7c:	460b      	mov	r3, r1
 8011c7e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8011c82:	f7ee fb0b 	bl	800029c <__adddf3>
 8011c86:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8011c8a:	f108 0801 	add.w	r8, r8, #1
 8011c8e:	9b02      	ldr	r3, [sp, #8]
 8011c90:	4598      	cmp	r8, r3
 8011c92:	dc01      	bgt.n	8011c98 <__kernel_rem_pio2+0x4c8>
 8011c94:	45b8      	cmp	r8, r7
 8011c96:	ddea      	ble.n	8011c6e <__kernel_rem_pio2+0x49e>
 8011c98:	ed9d 7b06 	vldr	d7, [sp, #24]
 8011c9c:	ab4a      	add	r3, sp, #296	; 0x128
 8011c9e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8011ca2:	ed87 7b00 	vstr	d7, [r7]
 8011ca6:	3e01      	subs	r6, #1
 8011ca8:	e6f8      	b.n	8011a9c <__kernel_rem_pio2+0x2cc>
 8011caa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011cac:	2b02      	cmp	r3, #2
 8011cae:	dc0b      	bgt.n	8011cc8 <__kernel_rem_pio2+0x4f8>
 8011cb0:	2b00      	cmp	r3, #0
 8011cb2:	dc35      	bgt.n	8011d20 <__kernel_rem_pio2+0x550>
 8011cb4:	d059      	beq.n	8011d6a <__kernel_rem_pio2+0x59a>
 8011cb6:	9b04      	ldr	r3, [sp, #16]
 8011cb8:	f003 0007 	and.w	r0, r3, #7
 8011cbc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8011cc0:	ecbd 8b02 	vpop	{d8}
 8011cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011cc8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8011cca:	2b03      	cmp	r3, #3
 8011ccc:	d1f3      	bne.n	8011cb6 <__kernel_rem_pio2+0x4e6>
 8011cce:	ab4a      	add	r3, sp, #296	; 0x128
 8011cd0:	4423      	add	r3, r4
 8011cd2:	9306      	str	r3, [sp, #24]
 8011cd4:	461c      	mov	r4, r3
 8011cd6:	469a      	mov	sl, r3
 8011cd8:	9502      	str	r5, [sp, #8]
 8011cda:	9b02      	ldr	r3, [sp, #8]
 8011cdc:	2b00      	cmp	r3, #0
 8011cde:	f1aa 0a08 	sub.w	sl, sl, #8
 8011ce2:	dc6b      	bgt.n	8011dbc <__kernel_rem_pio2+0x5ec>
 8011ce4:	46aa      	mov	sl, r5
 8011ce6:	f1ba 0f01 	cmp.w	sl, #1
 8011cea:	f1a4 0408 	sub.w	r4, r4, #8
 8011cee:	f300 8085 	bgt.w	8011dfc <__kernel_rem_pio2+0x62c>
 8011cf2:	9c06      	ldr	r4, [sp, #24]
 8011cf4:	2000      	movs	r0, #0
 8011cf6:	3408      	adds	r4, #8
 8011cf8:	2100      	movs	r1, #0
 8011cfa:	2d01      	cmp	r5, #1
 8011cfc:	f300 809d 	bgt.w	8011e3a <__kernel_rem_pio2+0x66a>
 8011d00:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8011d04:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8011d08:	f1bb 0f00 	cmp.w	fp, #0
 8011d0c:	f040 809b 	bne.w	8011e46 <__kernel_rem_pio2+0x676>
 8011d10:	9b01      	ldr	r3, [sp, #4]
 8011d12:	e9c3 5600 	strd	r5, r6, [r3]
 8011d16:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8011d1a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8011d1e:	e7ca      	b.n	8011cb6 <__kernel_rem_pio2+0x4e6>
 8011d20:	3408      	adds	r4, #8
 8011d22:	ab4a      	add	r3, sp, #296	; 0x128
 8011d24:	441c      	add	r4, r3
 8011d26:	462e      	mov	r6, r5
 8011d28:	2000      	movs	r0, #0
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	2e00      	cmp	r6, #0
 8011d2e:	da36      	bge.n	8011d9e <__kernel_rem_pio2+0x5ce>
 8011d30:	f1bb 0f00 	cmp.w	fp, #0
 8011d34:	d039      	beq.n	8011daa <__kernel_rem_pio2+0x5da>
 8011d36:	4602      	mov	r2, r0
 8011d38:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d3c:	9c01      	ldr	r4, [sp, #4]
 8011d3e:	e9c4 2300 	strd	r2, r3, [r4]
 8011d42:	4602      	mov	r2, r0
 8011d44:	460b      	mov	r3, r1
 8011d46:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8011d4a:	f7ee faa5 	bl	8000298 <__aeabi_dsub>
 8011d4e:	ae4c      	add	r6, sp, #304	; 0x130
 8011d50:	2401      	movs	r4, #1
 8011d52:	42a5      	cmp	r5, r4
 8011d54:	da2c      	bge.n	8011db0 <__kernel_rem_pio2+0x5e0>
 8011d56:	f1bb 0f00 	cmp.w	fp, #0
 8011d5a:	d002      	beq.n	8011d62 <__kernel_rem_pio2+0x592>
 8011d5c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d60:	4619      	mov	r1, r3
 8011d62:	9b01      	ldr	r3, [sp, #4]
 8011d64:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8011d68:	e7a5      	b.n	8011cb6 <__kernel_rem_pio2+0x4e6>
 8011d6a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8011d6e:	eb0d 0403 	add.w	r4, sp, r3
 8011d72:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8011d76:	2000      	movs	r0, #0
 8011d78:	2100      	movs	r1, #0
 8011d7a:	2d00      	cmp	r5, #0
 8011d7c:	da09      	bge.n	8011d92 <__kernel_rem_pio2+0x5c2>
 8011d7e:	f1bb 0f00 	cmp.w	fp, #0
 8011d82:	d002      	beq.n	8011d8a <__kernel_rem_pio2+0x5ba>
 8011d84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011d88:	4619      	mov	r1, r3
 8011d8a:	9b01      	ldr	r3, [sp, #4]
 8011d8c:	e9c3 0100 	strd	r0, r1, [r3]
 8011d90:	e791      	b.n	8011cb6 <__kernel_rem_pio2+0x4e6>
 8011d92:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011d96:	f7ee fa81 	bl	800029c <__adddf3>
 8011d9a:	3d01      	subs	r5, #1
 8011d9c:	e7ed      	b.n	8011d7a <__kernel_rem_pio2+0x5aa>
 8011d9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011da2:	f7ee fa7b 	bl	800029c <__adddf3>
 8011da6:	3e01      	subs	r6, #1
 8011da8:	e7c0      	b.n	8011d2c <__kernel_rem_pio2+0x55c>
 8011daa:	4602      	mov	r2, r0
 8011dac:	460b      	mov	r3, r1
 8011dae:	e7c5      	b.n	8011d3c <__kernel_rem_pio2+0x56c>
 8011db0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8011db4:	f7ee fa72 	bl	800029c <__adddf3>
 8011db8:	3401      	adds	r4, #1
 8011dba:	e7ca      	b.n	8011d52 <__kernel_rem_pio2+0x582>
 8011dbc:	e9da 8900 	ldrd	r8, r9, [sl]
 8011dc0:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8011dc4:	9b02      	ldr	r3, [sp, #8]
 8011dc6:	3b01      	subs	r3, #1
 8011dc8:	9302      	str	r3, [sp, #8]
 8011dca:	4632      	mov	r2, r6
 8011dcc:	463b      	mov	r3, r7
 8011dce:	4640      	mov	r0, r8
 8011dd0:	4649      	mov	r1, r9
 8011dd2:	f7ee fa63 	bl	800029c <__adddf3>
 8011dd6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8011dda:	4602      	mov	r2, r0
 8011ddc:	460b      	mov	r3, r1
 8011dde:	4640      	mov	r0, r8
 8011de0:	4649      	mov	r1, r9
 8011de2:	f7ee fa59 	bl	8000298 <__aeabi_dsub>
 8011de6:	4632      	mov	r2, r6
 8011de8:	463b      	mov	r3, r7
 8011dea:	f7ee fa57 	bl	800029c <__adddf3>
 8011dee:	ed9d 7b08 	vldr	d7, [sp, #32]
 8011df2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011df6:	ed8a 7b00 	vstr	d7, [sl]
 8011dfa:	e76e      	b.n	8011cda <__kernel_rem_pio2+0x50a>
 8011dfc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8011e00:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8011e04:	4640      	mov	r0, r8
 8011e06:	4632      	mov	r2, r6
 8011e08:	463b      	mov	r3, r7
 8011e0a:	4649      	mov	r1, r9
 8011e0c:	f7ee fa46 	bl	800029c <__adddf3>
 8011e10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011e14:	4602      	mov	r2, r0
 8011e16:	460b      	mov	r3, r1
 8011e18:	4640      	mov	r0, r8
 8011e1a:	4649      	mov	r1, r9
 8011e1c:	f7ee fa3c 	bl	8000298 <__aeabi_dsub>
 8011e20:	4632      	mov	r2, r6
 8011e22:	463b      	mov	r3, r7
 8011e24:	f7ee fa3a 	bl	800029c <__adddf3>
 8011e28:	ed9d 7b02 	vldr	d7, [sp, #8]
 8011e2c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8011e30:	ed84 7b00 	vstr	d7, [r4]
 8011e34:	f10a 3aff 	add.w	sl, sl, #4294967295
 8011e38:	e755      	b.n	8011ce6 <__kernel_rem_pio2+0x516>
 8011e3a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8011e3e:	f7ee fa2d 	bl	800029c <__adddf3>
 8011e42:	3d01      	subs	r5, #1
 8011e44:	e759      	b.n	8011cfa <__kernel_rem_pio2+0x52a>
 8011e46:	9b01      	ldr	r3, [sp, #4]
 8011e48:	9a01      	ldr	r2, [sp, #4]
 8011e4a:	601d      	str	r5, [r3, #0]
 8011e4c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8011e50:	605c      	str	r4, [r3, #4]
 8011e52:	609f      	str	r7, [r3, #8]
 8011e54:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8011e58:	60d3      	str	r3, [r2, #12]
 8011e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011e5e:	6110      	str	r0, [r2, #16]
 8011e60:	6153      	str	r3, [r2, #20]
 8011e62:	e728      	b.n	8011cb6 <__kernel_rem_pio2+0x4e6>
 8011e64:	41700000 	.word	0x41700000
 8011e68:	3e700000 	.word	0x3e700000
 8011e6c:	00000000 	.word	0x00000000

08011e70 <__kernel_sin>:
 8011e70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011e74:	ed2d 8b04 	vpush	{d8-d9}
 8011e78:	eeb0 8a41 	vmov.f32	s16, s2
 8011e7c:	eef0 8a61 	vmov.f32	s17, s3
 8011e80:	ec55 4b10 	vmov	r4, r5, d0
 8011e84:	b083      	sub	sp, #12
 8011e86:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8011e8a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8011e8e:	9001      	str	r0, [sp, #4]
 8011e90:	da06      	bge.n	8011ea0 <__kernel_sin+0x30>
 8011e92:	ee10 0a10 	vmov	r0, s0
 8011e96:	4629      	mov	r1, r5
 8011e98:	f7ee fe66 	bl	8000b68 <__aeabi_d2iz>
 8011e9c:	2800      	cmp	r0, #0
 8011e9e:	d051      	beq.n	8011f44 <__kernel_sin+0xd4>
 8011ea0:	4622      	mov	r2, r4
 8011ea2:	462b      	mov	r3, r5
 8011ea4:	4620      	mov	r0, r4
 8011ea6:	4629      	mov	r1, r5
 8011ea8:	f7ee fbae 	bl	8000608 <__aeabi_dmul>
 8011eac:	4682      	mov	sl, r0
 8011eae:	468b      	mov	fp, r1
 8011eb0:	4602      	mov	r2, r0
 8011eb2:	460b      	mov	r3, r1
 8011eb4:	4620      	mov	r0, r4
 8011eb6:	4629      	mov	r1, r5
 8011eb8:	f7ee fba6 	bl	8000608 <__aeabi_dmul>
 8011ebc:	a341      	add	r3, pc, #260	; (adr r3, 8011fc4 <__kernel_sin+0x154>)
 8011ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ec2:	4680      	mov	r8, r0
 8011ec4:	4689      	mov	r9, r1
 8011ec6:	4650      	mov	r0, sl
 8011ec8:	4659      	mov	r1, fp
 8011eca:	f7ee fb9d 	bl	8000608 <__aeabi_dmul>
 8011ece:	a33f      	add	r3, pc, #252	; (adr r3, 8011fcc <__kernel_sin+0x15c>)
 8011ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ed4:	f7ee f9e0 	bl	8000298 <__aeabi_dsub>
 8011ed8:	4652      	mov	r2, sl
 8011eda:	465b      	mov	r3, fp
 8011edc:	f7ee fb94 	bl	8000608 <__aeabi_dmul>
 8011ee0:	a33c      	add	r3, pc, #240	; (adr r3, 8011fd4 <__kernel_sin+0x164>)
 8011ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ee6:	f7ee f9d9 	bl	800029c <__adddf3>
 8011eea:	4652      	mov	r2, sl
 8011eec:	465b      	mov	r3, fp
 8011eee:	f7ee fb8b 	bl	8000608 <__aeabi_dmul>
 8011ef2:	a33a      	add	r3, pc, #232	; (adr r3, 8011fdc <__kernel_sin+0x16c>)
 8011ef4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ef8:	f7ee f9ce 	bl	8000298 <__aeabi_dsub>
 8011efc:	4652      	mov	r2, sl
 8011efe:	465b      	mov	r3, fp
 8011f00:	f7ee fb82 	bl	8000608 <__aeabi_dmul>
 8011f04:	a337      	add	r3, pc, #220	; (adr r3, 8011fe4 <__kernel_sin+0x174>)
 8011f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f0a:	f7ee f9c7 	bl	800029c <__adddf3>
 8011f0e:	9b01      	ldr	r3, [sp, #4]
 8011f10:	4606      	mov	r6, r0
 8011f12:	460f      	mov	r7, r1
 8011f14:	b9eb      	cbnz	r3, 8011f52 <__kernel_sin+0xe2>
 8011f16:	4602      	mov	r2, r0
 8011f18:	460b      	mov	r3, r1
 8011f1a:	4650      	mov	r0, sl
 8011f1c:	4659      	mov	r1, fp
 8011f1e:	f7ee fb73 	bl	8000608 <__aeabi_dmul>
 8011f22:	a325      	add	r3, pc, #148	; (adr r3, 8011fb8 <__kernel_sin+0x148>)
 8011f24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f28:	f7ee f9b6 	bl	8000298 <__aeabi_dsub>
 8011f2c:	4642      	mov	r2, r8
 8011f2e:	464b      	mov	r3, r9
 8011f30:	f7ee fb6a 	bl	8000608 <__aeabi_dmul>
 8011f34:	4602      	mov	r2, r0
 8011f36:	460b      	mov	r3, r1
 8011f38:	4620      	mov	r0, r4
 8011f3a:	4629      	mov	r1, r5
 8011f3c:	f7ee f9ae 	bl	800029c <__adddf3>
 8011f40:	4604      	mov	r4, r0
 8011f42:	460d      	mov	r5, r1
 8011f44:	ec45 4b10 	vmov	d0, r4, r5
 8011f48:	b003      	add	sp, #12
 8011f4a:	ecbd 8b04 	vpop	{d8-d9}
 8011f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f52:	4b1b      	ldr	r3, [pc, #108]	; (8011fc0 <__kernel_sin+0x150>)
 8011f54:	ec51 0b18 	vmov	r0, r1, d8
 8011f58:	2200      	movs	r2, #0
 8011f5a:	f7ee fb55 	bl	8000608 <__aeabi_dmul>
 8011f5e:	4632      	mov	r2, r6
 8011f60:	ec41 0b19 	vmov	d9, r0, r1
 8011f64:	463b      	mov	r3, r7
 8011f66:	4640      	mov	r0, r8
 8011f68:	4649      	mov	r1, r9
 8011f6a:	f7ee fb4d 	bl	8000608 <__aeabi_dmul>
 8011f6e:	4602      	mov	r2, r0
 8011f70:	460b      	mov	r3, r1
 8011f72:	ec51 0b19 	vmov	r0, r1, d9
 8011f76:	f7ee f98f 	bl	8000298 <__aeabi_dsub>
 8011f7a:	4652      	mov	r2, sl
 8011f7c:	465b      	mov	r3, fp
 8011f7e:	f7ee fb43 	bl	8000608 <__aeabi_dmul>
 8011f82:	ec53 2b18 	vmov	r2, r3, d8
 8011f86:	f7ee f987 	bl	8000298 <__aeabi_dsub>
 8011f8a:	a30b      	add	r3, pc, #44	; (adr r3, 8011fb8 <__kernel_sin+0x148>)
 8011f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011f90:	4606      	mov	r6, r0
 8011f92:	460f      	mov	r7, r1
 8011f94:	4640      	mov	r0, r8
 8011f96:	4649      	mov	r1, r9
 8011f98:	f7ee fb36 	bl	8000608 <__aeabi_dmul>
 8011f9c:	4602      	mov	r2, r0
 8011f9e:	460b      	mov	r3, r1
 8011fa0:	4630      	mov	r0, r6
 8011fa2:	4639      	mov	r1, r7
 8011fa4:	f7ee f97a 	bl	800029c <__adddf3>
 8011fa8:	4602      	mov	r2, r0
 8011faa:	460b      	mov	r3, r1
 8011fac:	4620      	mov	r0, r4
 8011fae:	4629      	mov	r1, r5
 8011fb0:	f7ee f972 	bl	8000298 <__aeabi_dsub>
 8011fb4:	e7c4      	b.n	8011f40 <__kernel_sin+0xd0>
 8011fb6:	bf00      	nop
 8011fb8:	55555549 	.word	0x55555549
 8011fbc:	3fc55555 	.word	0x3fc55555
 8011fc0:	3fe00000 	.word	0x3fe00000
 8011fc4:	5acfd57c 	.word	0x5acfd57c
 8011fc8:	3de5d93a 	.word	0x3de5d93a
 8011fcc:	8a2b9ceb 	.word	0x8a2b9ceb
 8011fd0:	3e5ae5e6 	.word	0x3e5ae5e6
 8011fd4:	57b1fe7d 	.word	0x57b1fe7d
 8011fd8:	3ec71de3 	.word	0x3ec71de3
 8011fdc:	19c161d5 	.word	0x19c161d5
 8011fe0:	3f2a01a0 	.word	0x3f2a01a0
 8011fe4:	1110f8a6 	.word	0x1110f8a6
 8011fe8:	3f811111 	.word	0x3f811111
 8011fec:	00000000 	.word	0x00000000

08011ff0 <atan>:
 8011ff0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ff4:	ec55 4b10 	vmov	r4, r5, d0
 8011ff8:	4bc3      	ldr	r3, [pc, #780]	; (8012308 <atan+0x318>)
 8011ffa:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011ffe:	429e      	cmp	r6, r3
 8012000:	46ab      	mov	fp, r5
 8012002:	dd18      	ble.n	8012036 <atan+0x46>
 8012004:	4bc1      	ldr	r3, [pc, #772]	; (801230c <atan+0x31c>)
 8012006:	429e      	cmp	r6, r3
 8012008:	dc01      	bgt.n	801200e <atan+0x1e>
 801200a:	d109      	bne.n	8012020 <atan+0x30>
 801200c:	b144      	cbz	r4, 8012020 <atan+0x30>
 801200e:	4622      	mov	r2, r4
 8012010:	462b      	mov	r3, r5
 8012012:	4620      	mov	r0, r4
 8012014:	4629      	mov	r1, r5
 8012016:	f7ee f941 	bl	800029c <__adddf3>
 801201a:	4604      	mov	r4, r0
 801201c:	460d      	mov	r5, r1
 801201e:	e006      	b.n	801202e <atan+0x3e>
 8012020:	f1bb 0f00 	cmp.w	fp, #0
 8012024:	f300 8131 	bgt.w	801228a <atan+0x29a>
 8012028:	a59b      	add	r5, pc, #620	; (adr r5, 8012298 <atan+0x2a8>)
 801202a:	e9d5 4500 	ldrd	r4, r5, [r5]
 801202e:	ec45 4b10 	vmov	d0, r4, r5
 8012032:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012036:	4bb6      	ldr	r3, [pc, #728]	; (8012310 <atan+0x320>)
 8012038:	429e      	cmp	r6, r3
 801203a:	dc14      	bgt.n	8012066 <atan+0x76>
 801203c:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8012040:	429e      	cmp	r6, r3
 8012042:	dc0d      	bgt.n	8012060 <atan+0x70>
 8012044:	a396      	add	r3, pc, #600	; (adr r3, 80122a0 <atan+0x2b0>)
 8012046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801204a:	ee10 0a10 	vmov	r0, s0
 801204e:	4629      	mov	r1, r5
 8012050:	f7ee f924 	bl	800029c <__adddf3>
 8012054:	4baf      	ldr	r3, [pc, #700]	; (8012314 <atan+0x324>)
 8012056:	2200      	movs	r2, #0
 8012058:	f7ee fd66 	bl	8000b28 <__aeabi_dcmpgt>
 801205c:	2800      	cmp	r0, #0
 801205e:	d1e6      	bne.n	801202e <atan+0x3e>
 8012060:	f04f 3aff 	mov.w	sl, #4294967295
 8012064:	e02b      	b.n	80120be <atan+0xce>
 8012066:	f000 f963 	bl	8012330 <fabs>
 801206a:	4bab      	ldr	r3, [pc, #684]	; (8012318 <atan+0x328>)
 801206c:	429e      	cmp	r6, r3
 801206e:	ec55 4b10 	vmov	r4, r5, d0
 8012072:	f300 80bf 	bgt.w	80121f4 <atan+0x204>
 8012076:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 801207a:	429e      	cmp	r6, r3
 801207c:	f300 80a0 	bgt.w	80121c0 <atan+0x1d0>
 8012080:	ee10 2a10 	vmov	r2, s0
 8012084:	ee10 0a10 	vmov	r0, s0
 8012088:	462b      	mov	r3, r5
 801208a:	4629      	mov	r1, r5
 801208c:	f7ee f906 	bl	800029c <__adddf3>
 8012090:	4ba0      	ldr	r3, [pc, #640]	; (8012314 <atan+0x324>)
 8012092:	2200      	movs	r2, #0
 8012094:	f7ee f900 	bl	8000298 <__aeabi_dsub>
 8012098:	2200      	movs	r2, #0
 801209a:	4606      	mov	r6, r0
 801209c:	460f      	mov	r7, r1
 801209e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80120a2:	4620      	mov	r0, r4
 80120a4:	4629      	mov	r1, r5
 80120a6:	f7ee f8f9 	bl	800029c <__adddf3>
 80120aa:	4602      	mov	r2, r0
 80120ac:	460b      	mov	r3, r1
 80120ae:	4630      	mov	r0, r6
 80120b0:	4639      	mov	r1, r7
 80120b2:	f7ee fbd3 	bl	800085c <__aeabi_ddiv>
 80120b6:	f04f 0a00 	mov.w	sl, #0
 80120ba:	4604      	mov	r4, r0
 80120bc:	460d      	mov	r5, r1
 80120be:	4622      	mov	r2, r4
 80120c0:	462b      	mov	r3, r5
 80120c2:	4620      	mov	r0, r4
 80120c4:	4629      	mov	r1, r5
 80120c6:	f7ee fa9f 	bl	8000608 <__aeabi_dmul>
 80120ca:	4602      	mov	r2, r0
 80120cc:	460b      	mov	r3, r1
 80120ce:	4680      	mov	r8, r0
 80120d0:	4689      	mov	r9, r1
 80120d2:	f7ee fa99 	bl	8000608 <__aeabi_dmul>
 80120d6:	a374      	add	r3, pc, #464	; (adr r3, 80122a8 <atan+0x2b8>)
 80120d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120dc:	4606      	mov	r6, r0
 80120de:	460f      	mov	r7, r1
 80120e0:	f7ee fa92 	bl	8000608 <__aeabi_dmul>
 80120e4:	a372      	add	r3, pc, #456	; (adr r3, 80122b0 <atan+0x2c0>)
 80120e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120ea:	f7ee f8d7 	bl	800029c <__adddf3>
 80120ee:	4632      	mov	r2, r6
 80120f0:	463b      	mov	r3, r7
 80120f2:	f7ee fa89 	bl	8000608 <__aeabi_dmul>
 80120f6:	a370      	add	r3, pc, #448	; (adr r3, 80122b8 <atan+0x2c8>)
 80120f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80120fc:	f7ee f8ce 	bl	800029c <__adddf3>
 8012100:	4632      	mov	r2, r6
 8012102:	463b      	mov	r3, r7
 8012104:	f7ee fa80 	bl	8000608 <__aeabi_dmul>
 8012108:	a36d      	add	r3, pc, #436	; (adr r3, 80122c0 <atan+0x2d0>)
 801210a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801210e:	f7ee f8c5 	bl	800029c <__adddf3>
 8012112:	4632      	mov	r2, r6
 8012114:	463b      	mov	r3, r7
 8012116:	f7ee fa77 	bl	8000608 <__aeabi_dmul>
 801211a:	a36b      	add	r3, pc, #428	; (adr r3, 80122c8 <atan+0x2d8>)
 801211c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012120:	f7ee f8bc 	bl	800029c <__adddf3>
 8012124:	4632      	mov	r2, r6
 8012126:	463b      	mov	r3, r7
 8012128:	f7ee fa6e 	bl	8000608 <__aeabi_dmul>
 801212c:	a368      	add	r3, pc, #416	; (adr r3, 80122d0 <atan+0x2e0>)
 801212e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012132:	f7ee f8b3 	bl	800029c <__adddf3>
 8012136:	4642      	mov	r2, r8
 8012138:	464b      	mov	r3, r9
 801213a:	f7ee fa65 	bl	8000608 <__aeabi_dmul>
 801213e:	a366      	add	r3, pc, #408	; (adr r3, 80122d8 <atan+0x2e8>)
 8012140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012144:	4680      	mov	r8, r0
 8012146:	4689      	mov	r9, r1
 8012148:	4630      	mov	r0, r6
 801214a:	4639      	mov	r1, r7
 801214c:	f7ee fa5c 	bl	8000608 <__aeabi_dmul>
 8012150:	a363      	add	r3, pc, #396	; (adr r3, 80122e0 <atan+0x2f0>)
 8012152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012156:	f7ee f89f 	bl	8000298 <__aeabi_dsub>
 801215a:	4632      	mov	r2, r6
 801215c:	463b      	mov	r3, r7
 801215e:	f7ee fa53 	bl	8000608 <__aeabi_dmul>
 8012162:	a361      	add	r3, pc, #388	; (adr r3, 80122e8 <atan+0x2f8>)
 8012164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012168:	f7ee f896 	bl	8000298 <__aeabi_dsub>
 801216c:	4632      	mov	r2, r6
 801216e:	463b      	mov	r3, r7
 8012170:	f7ee fa4a 	bl	8000608 <__aeabi_dmul>
 8012174:	a35e      	add	r3, pc, #376	; (adr r3, 80122f0 <atan+0x300>)
 8012176:	e9d3 2300 	ldrd	r2, r3, [r3]
 801217a:	f7ee f88d 	bl	8000298 <__aeabi_dsub>
 801217e:	4632      	mov	r2, r6
 8012180:	463b      	mov	r3, r7
 8012182:	f7ee fa41 	bl	8000608 <__aeabi_dmul>
 8012186:	a35c      	add	r3, pc, #368	; (adr r3, 80122f8 <atan+0x308>)
 8012188:	e9d3 2300 	ldrd	r2, r3, [r3]
 801218c:	f7ee f884 	bl	8000298 <__aeabi_dsub>
 8012190:	4632      	mov	r2, r6
 8012192:	463b      	mov	r3, r7
 8012194:	f7ee fa38 	bl	8000608 <__aeabi_dmul>
 8012198:	4602      	mov	r2, r0
 801219a:	460b      	mov	r3, r1
 801219c:	4640      	mov	r0, r8
 801219e:	4649      	mov	r1, r9
 80121a0:	f7ee f87c 	bl	800029c <__adddf3>
 80121a4:	4622      	mov	r2, r4
 80121a6:	462b      	mov	r3, r5
 80121a8:	f7ee fa2e 	bl	8000608 <__aeabi_dmul>
 80121ac:	f1ba 3fff 	cmp.w	sl, #4294967295
 80121b0:	4602      	mov	r2, r0
 80121b2:	460b      	mov	r3, r1
 80121b4:	d14b      	bne.n	801224e <atan+0x25e>
 80121b6:	4620      	mov	r0, r4
 80121b8:	4629      	mov	r1, r5
 80121ba:	f7ee f86d 	bl	8000298 <__aeabi_dsub>
 80121be:	e72c      	b.n	801201a <atan+0x2a>
 80121c0:	ee10 0a10 	vmov	r0, s0
 80121c4:	4b53      	ldr	r3, [pc, #332]	; (8012314 <atan+0x324>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	4629      	mov	r1, r5
 80121ca:	f7ee f865 	bl	8000298 <__aeabi_dsub>
 80121ce:	4b51      	ldr	r3, [pc, #324]	; (8012314 <atan+0x324>)
 80121d0:	4606      	mov	r6, r0
 80121d2:	460f      	mov	r7, r1
 80121d4:	2200      	movs	r2, #0
 80121d6:	4620      	mov	r0, r4
 80121d8:	4629      	mov	r1, r5
 80121da:	f7ee f85f 	bl	800029c <__adddf3>
 80121de:	4602      	mov	r2, r0
 80121e0:	460b      	mov	r3, r1
 80121e2:	4630      	mov	r0, r6
 80121e4:	4639      	mov	r1, r7
 80121e6:	f7ee fb39 	bl	800085c <__aeabi_ddiv>
 80121ea:	f04f 0a01 	mov.w	sl, #1
 80121ee:	4604      	mov	r4, r0
 80121f0:	460d      	mov	r5, r1
 80121f2:	e764      	b.n	80120be <atan+0xce>
 80121f4:	4b49      	ldr	r3, [pc, #292]	; (801231c <atan+0x32c>)
 80121f6:	429e      	cmp	r6, r3
 80121f8:	da1d      	bge.n	8012236 <atan+0x246>
 80121fa:	ee10 0a10 	vmov	r0, s0
 80121fe:	4b48      	ldr	r3, [pc, #288]	; (8012320 <atan+0x330>)
 8012200:	2200      	movs	r2, #0
 8012202:	4629      	mov	r1, r5
 8012204:	f7ee f848 	bl	8000298 <__aeabi_dsub>
 8012208:	4b45      	ldr	r3, [pc, #276]	; (8012320 <atan+0x330>)
 801220a:	4606      	mov	r6, r0
 801220c:	460f      	mov	r7, r1
 801220e:	2200      	movs	r2, #0
 8012210:	4620      	mov	r0, r4
 8012212:	4629      	mov	r1, r5
 8012214:	f7ee f9f8 	bl	8000608 <__aeabi_dmul>
 8012218:	4b3e      	ldr	r3, [pc, #248]	; (8012314 <atan+0x324>)
 801221a:	2200      	movs	r2, #0
 801221c:	f7ee f83e 	bl	800029c <__adddf3>
 8012220:	4602      	mov	r2, r0
 8012222:	460b      	mov	r3, r1
 8012224:	4630      	mov	r0, r6
 8012226:	4639      	mov	r1, r7
 8012228:	f7ee fb18 	bl	800085c <__aeabi_ddiv>
 801222c:	f04f 0a02 	mov.w	sl, #2
 8012230:	4604      	mov	r4, r0
 8012232:	460d      	mov	r5, r1
 8012234:	e743      	b.n	80120be <atan+0xce>
 8012236:	462b      	mov	r3, r5
 8012238:	ee10 2a10 	vmov	r2, s0
 801223c:	4939      	ldr	r1, [pc, #228]	; (8012324 <atan+0x334>)
 801223e:	2000      	movs	r0, #0
 8012240:	f7ee fb0c 	bl	800085c <__aeabi_ddiv>
 8012244:	f04f 0a03 	mov.w	sl, #3
 8012248:	4604      	mov	r4, r0
 801224a:	460d      	mov	r5, r1
 801224c:	e737      	b.n	80120be <atan+0xce>
 801224e:	4b36      	ldr	r3, [pc, #216]	; (8012328 <atan+0x338>)
 8012250:	4e36      	ldr	r6, [pc, #216]	; (801232c <atan+0x33c>)
 8012252:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8012256:	eb03 0aca 	add.w	sl, r3, sl, lsl #3
 801225a:	e9da 2300 	ldrd	r2, r3, [sl]
 801225e:	f7ee f81b 	bl	8000298 <__aeabi_dsub>
 8012262:	4622      	mov	r2, r4
 8012264:	462b      	mov	r3, r5
 8012266:	f7ee f817 	bl	8000298 <__aeabi_dsub>
 801226a:	4602      	mov	r2, r0
 801226c:	460b      	mov	r3, r1
 801226e:	e9d6 0100 	ldrd	r0, r1, [r6]
 8012272:	f7ee f811 	bl	8000298 <__aeabi_dsub>
 8012276:	f1bb 0f00 	cmp.w	fp, #0
 801227a:	4604      	mov	r4, r0
 801227c:	460d      	mov	r5, r1
 801227e:	f6bf aed6 	bge.w	801202e <atan+0x3e>
 8012282:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012286:	461d      	mov	r5, r3
 8012288:	e6d1      	b.n	801202e <atan+0x3e>
 801228a:	a51d      	add	r5, pc, #116	; (adr r5, 8012300 <atan+0x310>)
 801228c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8012290:	e6cd      	b.n	801202e <atan+0x3e>
 8012292:	bf00      	nop
 8012294:	f3af 8000 	nop.w
 8012298:	54442d18 	.word	0x54442d18
 801229c:	bff921fb 	.word	0xbff921fb
 80122a0:	8800759c 	.word	0x8800759c
 80122a4:	7e37e43c 	.word	0x7e37e43c
 80122a8:	e322da11 	.word	0xe322da11
 80122ac:	3f90ad3a 	.word	0x3f90ad3a
 80122b0:	24760deb 	.word	0x24760deb
 80122b4:	3fa97b4b 	.word	0x3fa97b4b
 80122b8:	a0d03d51 	.word	0xa0d03d51
 80122bc:	3fb10d66 	.word	0x3fb10d66
 80122c0:	c54c206e 	.word	0xc54c206e
 80122c4:	3fb745cd 	.word	0x3fb745cd
 80122c8:	920083ff 	.word	0x920083ff
 80122cc:	3fc24924 	.word	0x3fc24924
 80122d0:	5555550d 	.word	0x5555550d
 80122d4:	3fd55555 	.word	0x3fd55555
 80122d8:	2c6a6c2f 	.word	0x2c6a6c2f
 80122dc:	bfa2b444 	.word	0xbfa2b444
 80122e0:	52defd9a 	.word	0x52defd9a
 80122e4:	3fadde2d 	.word	0x3fadde2d
 80122e8:	af749a6d 	.word	0xaf749a6d
 80122ec:	3fb3b0f2 	.word	0x3fb3b0f2
 80122f0:	fe231671 	.word	0xfe231671
 80122f4:	3fbc71c6 	.word	0x3fbc71c6
 80122f8:	9998ebc4 	.word	0x9998ebc4
 80122fc:	3fc99999 	.word	0x3fc99999
 8012300:	54442d18 	.word	0x54442d18
 8012304:	3ff921fb 	.word	0x3ff921fb
 8012308:	440fffff 	.word	0x440fffff
 801230c:	7ff00000 	.word	0x7ff00000
 8012310:	3fdbffff 	.word	0x3fdbffff
 8012314:	3ff00000 	.word	0x3ff00000
 8012318:	3ff2ffff 	.word	0x3ff2ffff
 801231c:	40038000 	.word	0x40038000
 8012320:	3ff80000 	.word	0x3ff80000
 8012324:	bff00000 	.word	0xbff00000
 8012328:	08012c70 	.word	0x08012c70
 801232c:	08012c50 	.word	0x08012c50

08012330 <fabs>:
 8012330:	ec51 0b10 	vmov	r0, r1, d0
 8012334:	ee10 2a10 	vmov	r2, s0
 8012338:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801233c:	ec43 2b10 	vmov	d0, r2, r3
 8012340:	4770      	bx	lr
 8012342:	0000      	movs	r0, r0
 8012344:	0000      	movs	r0, r0
	...

08012348 <floor>:
 8012348:	ec51 0b10 	vmov	r0, r1, d0
 801234c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012350:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8012354:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8012358:	2e13      	cmp	r6, #19
 801235a:	ee10 5a10 	vmov	r5, s0
 801235e:	ee10 8a10 	vmov	r8, s0
 8012362:	460c      	mov	r4, r1
 8012364:	dc32      	bgt.n	80123cc <floor+0x84>
 8012366:	2e00      	cmp	r6, #0
 8012368:	da14      	bge.n	8012394 <floor+0x4c>
 801236a:	a333      	add	r3, pc, #204	; (adr r3, 8012438 <floor+0xf0>)
 801236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012370:	f7ed ff94 	bl	800029c <__adddf3>
 8012374:	2200      	movs	r2, #0
 8012376:	2300      	movs	r3, #0
 8012378:	f7ee fbd6 	bl	8000b28 <__aeabi_dcmpgt>
 801237c:	b138      	cbz	r0, 801238e <floor+0x46>
 801237e:	2c00      	cmp	r4, #0
 8012380:	da57      	bge.n	8012432 <floor+0xea>
 8012382:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012386:	431d      	orrs	r5, r3
 8012388:	d001      	beq.n	801238e <floor+0x46>
 801238a:	4c2d      	ldr	r4, [pc, #180]	; (8012440 <floor+0xf8>)
 801238c:	2500      	movs	r5, #0
 801238e:	4621      	mov	r1, r4
 8012390:	4628      	mov	r0, r5
 8012392:	e025      	b.n	80123e0 <floor+0x98>
 8012394:	4f2b      	ldr	r7, [pc, #172]	; (8012444 <floor+0xfc>)
 8012396:	4137      	asrs	r7, r6
 8012398:	ea01 0307 	and.w	r3, r1, r7
 801239c:	4303      	orrs	r3, r0
 801239e:	d01f      	beq.n	80123e0 <floor+0x98>
 80123a0:	a325      	add	r3, pc, #148	; (adr r3, 8012438 <floor+0xf0>)
 80123a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123a6:	f7ed ff79 	bl	800029c <__adddf3>
 80123aa:	2200      	movs	r2, #0
 80123ac:	2300      	movs	r3, #0
 80123ae:	f7ee fbbb 	bl	8000b28 <__aeabi_dcmpgt>
 80123b2:	2800      	cmp	r0, #0
 80123b4:	d0eb      	beq.n	801238e <floor+0x46>
 80123b6:	2c00      	cmp	r4, #0
 80123b8:	bfbe      	ittt	lt
 80123ba:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80123be:	fa43 f606 	asrlt.w	r6, r3, r6
 80123c2:	19a4      	addlt	r4, r4, r6
 80123c4:	ea24 0407 	bic.w	r4, r4, r7
 80123c8:	2500      	movs	r5, #0
 80123ca:	e7e0      	b.n	801238e <floor+0x46>
 80123cc:	2e33      	cmp	r6, #51	; 0x33
 80123ce:	dd0b      	ble.n	80123e8 <floor+0xa0>
 80123d0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80123d4:	d104      	bne.n	80123e0 <floor+0x98>
 80123d6:	ee10 2a10 	vmov	r2, s0
 80123da:	460b      	mov	r3, r1
 80123dc:	f7ed ff5e 	bl	800029c <__adddf3>
 80123e0:	ec41 0b10 	vmov	d0, r0, r1
 80123e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80123e8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80123ec:	f04f 33ff 	mov.w	r3, #4294967295
 80123f0:	fa23 f707 	lsr.w	r7, r3, r7
 80123f4:	4207      	tst	r7, r0
 80123f6:	d0f3      	beq.n	80123e0 <floor+0x98>
 80123f8:	a30f      	add	r3, pc, #60	; (adr r3, 8012438 <floor+0xf0>)
 80123fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80123fe:	f7ed ff4d 	bl	800029c <__adddf3>
 8012402:	2200      	movs	r2, #0
 8012404:	2300      	movs	r3, #0
 8012406:	f7ee fb8f 	bl	8000b28 <__aeabi_dcmpgt>
 801240a:	2800      	cmp	r0, #0
 801240c:	d0bf      	beq.n	801238e <floor+0x46>
 801240e:	2c00      	cmp	r4, #0
 8012410:	da02      	bge.n	8012418 <floor+0xd0>
 8012412:	2e14      	cmp	r6, #20
 8012414:	d103      	bne.n	801241e <floor+0xd6>
 8012416:	3401      	adds	r4, #1
 8012418:	ea25 0507 	bic.w	r5, r5, r7
 801241c:	e7b7      	b.n	801238e <floor+0x46>
 801241e:	2301      	movs	r3, #1
 8012420:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8012424:	fa03 f606 	lsl.w	r6, r3, r6
 8012428:	4435      	add	r5, r6
 801242a:	4545      	cmp	r5, r8
 801242c:	bf38      	it	cc
 801242e:	18e4      	addcc	r4, r4, r3
 8012430:	e7f2      	b.n	8012418 <floor+0xd0>
 8012432:	2500      	movs	r5, #0
 8012434:	462c      	mov	r4, r5
 8012436:	e7aa      	b.n	801238e <floor+0x46>
 8012438:	8800759c 	.word	0x8800759c
 801243c:	7e37e43c 	.word	0x7e37e43c
 8012440:	bff00000 	.word	0xbff00000
 8012444:	000fffff 	.word	0x000fffff

08012448 <scalbn>:
 8012448:	b570      	push	{r4, r5, r6, lr}
 801244a:	ec55 4b10 	vmov	r4, r5, d0
 801244e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8012452:	4606      	mov	r6, r0
 8012454:	462b      	mov	r3, r5
 8012456:	b99a      	cbnz	r2, 8012480 <scalbn+0x38>
 8012458:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801245c:	4323      	orrs	r3, r4
 801245e:	d036      	beq.n	80124ce <scalbn+0x86>
 8012460:	4b39      	ldr	r3, [pc, #228]	; (8012548 <scalbn+0x100>)
 8012462:	4629      	mov	r1, r5
 8012464:	ee10 0a10 	vmov	r0, s0
 8012468:	2200      	movs	r2, #0
 801246a:	f7ee f8cd 	bl	8000608 <__aeabi_dmul>
 801246e:	4b37      	ldr	r3, [pc, #220]	; (801254c <scalbn+0x104>)
 8012470:	429e      	cmp	r6, r3
 8012472:	4604      	mov	r4, r0
 8012474:	460d      	mov	r5, r1
 8012476:	da10      	bge.n	801249a <scalbn+0x52>
 8012478:	a32b      	add	r3, pc, #172	; (adr r3, 8012528 <scalbn+0xe0>)
 801247a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801247e:	e03a      	b.n	80124f6 <scalbn+0xae>
 8012480:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012484:	428a      	cmp	r2, r1
 8012486:	d10c      	bne.n	80124a2 <scalbn+0x5a>
 8012488:	ee10 2a10 	vmov	r2, s0
 801248c:	4620      	mov	r0, r4
 801248e:	4629      	mov	r1, r5
 8012490:	f7ed ff04 	bl	800029c <__adddf3>
 8012494:	4604      	mov	r4, r0
 8012496:	460d      	mov	r5, r1
 8012498:	e019      	b.n	80124ce <scalbn+0x86>
 801249a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801249e:	460b      	mov	r3, r1
 80124a0:	3a36      	subs	r2, #54	; 0x36
 80124a2:	4432      	add	r2, r6
 80124a4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80124a8:	428a      	cmp	r2, r1
 80124aa:	dd08      	ble.n	80124be <scalbn+0x76>
 80124ac:	2d00      	cmp	r5, #0
 80124ae:	a120      	add	r1, pc, #128	; (adr r1, 8012530 <scalbn+0xe8>)
 80124b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124b4:	da1c      	bge.n	80124f0 <scalbn+0xa8>
 80124b6:	a120      	add	r1, pc, #128	; (adr r1, 8012538 <scalbn+0xf0>)
 80124b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124bc:	e018      	b.n	80124f0 <scalbn+0xa8>
 80124be:	2a00      	cmp	r2, #0
 80124c0:	dd08      	ble.n	80124d4 <scalbn+0x8c>
 80124c2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80124c6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80124ca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80124ce:	ec45 4b10 	vmov	d0, r4, r5
 80124d2:	bd70      	pop	{r4, r5, r6, pc}
 80124d4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80124d8:	da19      	bge.n	801250e <scalbn+0xc6>
 80124da:	f24c 3350 	movw	r3, #50000	; 0xc350
 80124de:	429e      	cmp	r6, r3
 80124e0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80124e4:	dd0a      	ble.n	80124fc <scalbn+0xb4>
 80124e6:	a112      	add	r1, pc, #72	; (adr r1, 8012530 <scalbn+0xe8>)
 80124e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80124ec:	2b00      	cmp	r3, #0
 80124ee:	d1e2      	bne.n	80124b6 <scalbn+0x6e>
 80124f0:	a30f      	add	r3, pc, #60	; (adr r3, 8012530 <scalbn+0xe8>)
 80124f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124f6:	f7ee f887 	bl	8000608 <__aeabi_dmul>
 80124fa:	e7cb      	b.n	8012494 <scalbn+0x4c>
 80124fc:	a10a      	add	r1, pc, #40	; (adr r1, 8012528 <scalbn+0xe0>)
 80124fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012502:	2b00      	cmp	r3, #0
 8012504:	d0b8      	beq.n	8012478 <scalbn+0x30>
 8012506:	a10e      	add	r1, pc, #56	; (adr r1, 8012540 <scalbn+0xf8>)
 8012508:	e9d1 0100 	ldrd	r0, r1, [r1]
 801250c:	e7b4      	b.n	8012478 <scalbn+0x30>
 801250e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012512:	3236      	adds	r2, #54	; 0x36
 8012514:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012518:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801251c:	4620      	mov	r0, r4
 801251e:	4b0c      	ldr	r3, [pc, #48]	; (8012550 <scalbn+0x108>)
 8012520:	2200      	movs	r2, #0
 8012522:	e7e8      	b.n	80124f6 <scalbn+0xae>
 8012524:	f3af 8000 	nop.w
 8012528:	c2f8f359 	.word	0xc2f8f359
 801252c:	01a56e1f 	.word	0x01a56e1f
 8012530:	8800759c 	.word	0x8800759c
 8012534:	7e37e43c 	.word	0x7e37e43c
 8012538:	8800759c 	.word	0x8800759c
 801253c:	fe37e43c 	.word	0xfe37e43c
 8012540:	c2f8f359 	.word	0xc2f8f359
 8012544:	81a56e1f 	.word	0x81a56e1f
 8012548:	43500000 	.word	0x43500000
 801254c:	ffff3cb0 	.word	0xffff3cb0
 8012550:	3c900000 	.word	0x3c900000

08012554 <_init>:
 8012554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012556:	bf00      	nop
 8012558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801255a:	bc08      	pop	{r3}
 801255c:	469e      	mov	lr, r3
 801255e:	4770      	bx	lr

08012560 <_fini>:
 8012560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012562:	bf00      	nop
 8012564:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012566:	bc08      	pop	{r3}
 8012568:	469e      	mov	lr, r3
 801256a:	4770      	bx	lr
