
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000567c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005834  08005834  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005834  08005834  00015834  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800583c  0800583c  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800583c  0800583c  0001583c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005840  08005840  00015840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005844  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000018  08005858  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200002e0  08005858  000202e0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f0ae  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e44  00000000  00000000  0002f0f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d70  00000000  00000000  00030f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cc8  00000000  00000000  00031ca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779e  00000000  00000000  00032970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0bb  00000000  00000000  0004a10e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a122  00000000  00000000  000591c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f32eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  000f333c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080057fc 	.word	0x080057fc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	080057fc 	.word	0x080057fc

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_d2f>:
 80007f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007fc:	bf24      	itt	cs
 80007fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000802:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000806:	d90d      	bls.n	8000824 <__aeabi_d2f+0x30>
 8000808:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800080c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000810:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000814:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000818:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800081c:	bf08      	it	eq
 800081e:	f020 0001 	biceq.w	r0, r0, #1
 8000822:	4770      	bx	lr
 8000824:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000828:	d121      	bne.n	800086e <__aeabi_d2f+0x7a>
 800082a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800082e:	bfbc      	itt	lt
 8000830:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000834:	4770      	bxlt	lr
 8000836:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800083a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800083e:	f1c2 0218 	rsb	r2, r2, #24
 8000842:	f1c2 0c20 	rsb	ip, r2, #32
 8000846:	fa10 f30c 	lsls.w	r3, r0, ip
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	bf18      	it	ne
 8000850:	f040 0001 	orrne.w	r0, r0, #1
 8000854:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000858:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800085c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000860:	ea40 000c 	orr.w	r0, r0, ip
 8000864:	fa23 f302 	lsr.w	r3, r3, r2
 8000868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800086c:	e7cc      	b.n	8000808 <__aeabi_d2f+0x14>
 800086e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000872:	d107      	bne.n	8000884 <__aeabi_d2f+0x90>
 8000874:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000878:	bf1e      	ittt	ne
 800087a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800087e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000882:	4770      	bxne	lr
 8000884:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000888:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800088c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000890:	4770      	bx	lr
 8000892:	bf00      	nop

08000894 <__aeabi_frsub>:
 8000894:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000898:	e002      	b.n	80008a0 <__addsf3>
 800089a:	bf00      	nop

0800089c <__aeabi_fsub>:
 800089c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

080008a0 <__addsf3>:
 80008a0:	0042      	lsls	r2, r0, #1
 80008a2:	bf1f      	itttt	ne
 80008a4:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80008a8:	ea92 0f03 	teqne	r2, r3
 80008ac:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80008b0:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80008b4:	d06a      	beq.n	800098c <__addsf3+0xec>
 80008b6:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80008ba:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80008be:	bfc1      	itttt	gt
 80008c0:	18d2      	addgt	r2, r2, r3
 80008c2:	4041      	eorgt	r1, r0
 80008c4:	4048      	eorgt	r0, r1
 80008c6:	4041      	eorgt	r1, r0
 80008c8:	bfb8      	it	lt
 80008ca:	425b      	neglt	r3, r3
 80008cc:	2b19      	cmp	r3, #25
 80008ce:	bf88      	it	hi
 80008d0:	4770      	bxhi	lr
 80008d2:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80008d6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80008da:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80008de:	bf18      	it	ne
 80008e0:	4240      	negne	r0, r0
 80008e2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80008e6:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80008ea:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80008ee:	bf18      	it	ne
 80008f0:	4249      	negne	r1, r1
 80008f2:	ea92 0f03 	teq	r2, r3
 80008f6:	d03f      	beq.n	8000978 <__addsf3+0xd8>
 80008f8:	f1a2 0201 	sub.w	r2, r2, #1
 80008fc:	fa41 fc03 	asr.w	ip, r1, r3
 8000900:	eb10 000c 	adds.w	r0, r0, ip
 8000904:	f1c3 0320 	rsb	r3, r3, #32
 8000908:	fa01 f103 	lsl.w	r1, r1, r3
 800090c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000910:	d502      	bpl.n	8000918 <__addsf3+0x78>
 8000912:	4249      	negs	r1, r1
 8000914:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000918:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 800091c:	d313      	bcc.n	8000946 <__addsf3+0xa6>
 800091e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000922:	d306      	bcc.n	8000932 <__addsf3+0x92>
 8000924:	0840      	lsrs	r0, r0, #1
 8000926:	ea4f 0131 	mov.w	r1, r1, rrx
 800092a:	f102 0201 	add.w	r2, r2, #1
 800092e:	2afe      	cmp	r2, #254	; 0xfe
 8000930:	d251      	bcs.n	80009d6 <__addsf3+0x136>
 8000932:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000936:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800093a:	bf08      	it	eq
 800093c:	f020 0001 	biceq.w	r0, r0, #1
 8000940:	ea40 0003 	orr.w	r0, r0, r3
 8000944:	4770      	bx	lr
 8000946:	0049      	lsls	r1, r1, #1
 8000948:	eb40 0000 	adc.w	r0, r0, r0
 800094c:	3a01      	subs	r2, #1
 800094e:	bf28      	it	cs
 8000950:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000954:	d2ed      	bcs.n	8000932 <__addsf3+0x92>
 8000956:	fab0 fc80 	clz	ip, r0
 800095a:	f1ac 0c08 	sub.w	ip, ip, #8
 800095e:	ebb2 020c 	subs.w	r2, r2, ip
 8000962:	fa00 f00c 	lsl.w	r0, r0, ip
 8000966:	bfaa      	itet	ge
 8000968:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800096c:	4252      	neglt	r2, r2
 800096e:	4318      	orrge	r0, r3
 8000970:	bfbc      	itt	lt
 8000972:	40d0      	lsrlt	r0, r2
 8000974:	4318      	orrlt	r0, r3
 8000976:	4770      	bx	lr
 8000978:	f092 0f00 	teq	r2, #0
 800097c:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000980:	bf06      	itte	eq
 8000982:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000986:	3201      	addeq	r2, #1
 8000988:	3b01      	subne	r3, #1
 800098a:	e7b5      	b.n	80008f8 <__addsf3+0x58>
 800098c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000990:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000994:	bf18      	it	ne
 8000996:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800099a:	d021      	beq.n	80009e0 <__addsf3+0x140>
 800099c:	ea92 0f03 	teq	r2, r3
 80009a0:	d004      	beq.n	80009ac <__addsf3+0x10c>
 80009a2:	f092 0f00 	teq	r2, #0
 80009a6:	bf08      	it	eq
 80009a8:	4608      	moveq	r0, r1
 80009aa:	4770      	bx	lr
 80009ac:	ea90 0f01 	teq	r0, r1
 80009b0:	bf1c      	itt	ne
 80009b2:	2000      	movne	r0, #0
 80009b4:	4770      	bxne	lr
 80009b6:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 80009ba:	d104      	bne.n	80009c6 <__addsf3+0x126>
 80009bc:	0040      	lsls	r0, r0, #1
 80009be:	bf28      	it	cs
 80009c0:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 80009c4:	4770      	bx	lr
 80009c6:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 80009ca:	bf3c      	itt	cc
 80009cc:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80009d0:	4770      	bxcc	lr
 80009d2:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009d6:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80009da:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009de:	4770      	bx	lr
 80009e0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80009e4:	bf16      	itet	ne
 80009e6:	4608      	movne	r0, r1
 80009e8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80009ec:	4601      	movne	r1, r0
 80009ee:	0242      	lsls	r2, r0, #9
 80009f0:	bf06      	itte	eq
 80009f2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80009f6:	ea90 0f01 	teqeq	r0, r1
 80009fa:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80009fe:	4770      	bx	lr

08000a00 <__aeabi_ui2f>:
 8000a00:	f04f 0300 	mov.w	r3, #0
 8000a04:	e004      	b.n	8000a10 <__aeabi_i2f+0x8>
 8000a06:	bf00      	nop

08000a08 <__aeabi_i2f>:
 8000a08:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000a0c:	bf48      	it	mi
 8000a0e:	4240      	negmi	r0, r0
 8000a10:	ea5f 0c00 	movs.w	ip, r0
 8000a14:	bf08      	it	eq
 8000a16:	4770      	bxeq	lr
 8000a18:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000a1c:	4601      	mov	r1, r0
 8000a1e:	f04f 0000 	mov.w	r0, #0
 8000a22:	e01c      	b.n	8000a5e <__aeabi_l2f+0x2a>

08000a24 <__aeabi_ul2f>:
 8000a24:	ea50 0201 	orrs.w	r2, r0, r1
 8000a28:	bf08      	it	eq
 8000a2a:	4770      	bxeq	lr
 8000a2c:	f04f 0300 	mov.w	r3, #0
 8000a30:	e00a      	b.n	8000a48 <__aeabi_l2f+0x14>
 8000a32:	bf00      	nop

08000a34 <__aeabi_l2f>:
 8000a34:	ea50 0201 	orrs.w	r2, r0, r1
 8000a38:	bf08      	it	eq
 8000a3a:	4770      	bxeq	lr
 8000a3c:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000a40:	d502      	bpl.n	8000a48 <__aeabi_l2f+0x14>
 8000a42:	4240      	negs	r0, r0
 8000a44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000a48:	ea5f 0c01 	movs.w	ip, r1
 8000a4c:	bf02      	ittt	eq
 8000a4e:	4684      	moveq	ip, r0
 8000a50:	4601      	moveq	r1, r0
 8000a52:	2000      	moveq	r0, #0
 8000a54:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000a58:	bf08      	it	eq
 8000a5a:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000a5e:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000a62:	fabc f28c 	clz	r2, ip
 8000a66:	3a08      	subs	r2, #8
 8000a68:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000a6c:	db10      	blt.n	8000a90 <__aeabi_l2f+0x5c>
 8000a6e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a72:	4463      	add	r3, ip
 8000a74:	fa00 fc02 	lsl.w	ip, r0, r2
 8000a78:	f1c2 0220 	rsb	r2, r2, #32
 8000a7c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000a80:	fa20 f202 	lsr.w	r2, r0, r2
 8000a84:	eb43 0002 	adc.w	r0, r3, r2
 8000a88:	bf08      	it	eq
 8000a8a:	f020 0001 	biceq.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	f102 0220 	add.w	r2, r2, #32
 8000a94:	fa01 fc02 	lsl.w	ip, r1, r2
 8000a98:	f1c2 0220 	rsb	r2, r2, #32
 8000a9c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000aa0:	fa21 f202 	lsr.w	r2, r1, r2
 8000aa4:	eb43 0002 	adc.w	r0, r3, r2
 8000aa8:	bf08      	it	eq
 8000aaa:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b974 	b.w	8000db0 <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9d08      	ldr	r5, [sp, #32]
 8000ae6:	4604      	mov	r4, r0
 8000ae8:	468e      	mov	lr, r1
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d14d      	bne.n	8000b8a <__udivmoddi4+0xaa>
 8000aee:	428a      	cmp	r2, r1
 8000af0:	4694      	mov	ip, r2
 8000af2:	d969      	bls.n	8000bc8 <__udivmoddi4+0xe8>
 8000af4:	fab2 f282 	clz	r2, r2
 8000af8:	b152      	cbz	r2, 8000b10 <__udivmoddi4+0x30>
 8000afa:	fa01 f302 	lsl.w	r3, r1, r2
 8000afe:	f1c2 0120 	rsb	r1, r2, #32
 8000b02:	fa20 f101 	lsr.w	r1, r0, r1
 8000b06:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0a:	ea41 0e03 	orr.w	lr, r1, r3
 8000b0e:	4094      	lsls	r4, r2
 8000b10:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b14:	0c21      	lsrs	r1, r4, #16
 8000b16:	fbbe f6f8 	udiv	r6, lr, r8
 8000b1a:	fa1f f78c 	uxth.w	r7, ip
 8000b1e:	fb08 e316 	mls	r3, r8, r6, lr
 8000b22:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b26:	fb06 f107 	mul.w	r1, r6, r7
 8000b2a:	4299      	cmp	r1, r3
 8000b2c:	d90a      	bls.n	8000b44 <__udivmoddi4+0x64>
 8000b2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000b32:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b36:	f080 811f 	bcs.w	8000d78 <__udivmoddi4+0x298>
 8000b3a:	4299      	cmp	r1, r3
 8000b3c:	f240 811c 	bls.w	8000d78 <__udivmoddi4+0x298>
 8000b40:	3e02      	subs	r6, #2
 8000b42:	4463      	add	r3, ip
 8000b44:	1a5b      	subs	r3, r3, r1
 8000b46:	b2a4      	uxth	r4, r4
 8000b48:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b4c:	fb08 3310 	mls	r3, r8, r0, r3
 8000b50:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b54:	fb00 f707 	mul.w	r7, r0, r7
 8000b58:	42a7      	cmp	r7, r4
 8000b5a:	d90a      	bls.n	8000b72 <__udivmoddi4+0x92>
 8000b5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000b60:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b64:	f080 810a 	bcs.w	8000d7c <__udivmoddi4+0x29c>
 8000b68:	42a7      	cmp	r7, r4
 8000b6a:	f240 8107 	bls.w	8000d7c <__udivmoddi4+0x29c>
 8000b6e:	4464      	add	r4, ip
 8000b70:	3802      	subs	r0, #2
 8000b72:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b76:	1be4      	subs	r4, r4, r7
 8000b78:	2600      	movs	r6, #0
 8000b7a:	b11d      	cbz	r5, 8000b84 <__udivmoddi4+0xa4>
 8000b7c:	40d4      	lsrs	r4, r2
 8000b7e:	2300      	movs	r3, #0
 8000b80:	e9c5 4300 	strd	r4, r3, [r5]
 8000b84:	4631      	mov	r1, r6
 8000b86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8a:	428b      	cmp	r3, r1
 8000b8c:	d909      	bls.n	8000ba2 <__udivmoddi4+0xc2>
 8000b8e:	2d00      	cmp	r5, #0
 8000b90:	f000 80ef 	beq.w	8000d72 <__udivmoddi4+0x292>
 8000b94:	2600      	movs	r6, #0
 8000b96:	e9c5 0100 	strd	r0, r1, [r5]
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	4631      	mov	r1, r6
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f683 	clz	r6, r3
 8000ba6:	2e00      	cmp	r6, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x160>
 8000baa:	428b      	cmp	r3, r1
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0xd4>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80f9 	bhi.w	8000da6 <__udivmoddi4+0x2c6>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb61 0303 	sbc.w	r3, r1, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	469e      	mov	lr, r3
 8000bbe:	2d00      	cmp	r5, #0
 8000bc0:	d0e0      	beq.n	8000b84 <__udivmoddi4+0xa4>
 8000bc2:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bc6:	e7dd      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000bc8:	b902      	cbnz	r2, 8000bcc <__udivmoddi4+0xec>
 8000bca:	deff      	udf	#255	; 0xff
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f040 8092 	bne.w	8000cfa <__udivmoddi4+0x21a>
 8000bd6:	eba1 010c 	sub.w	r1, r1, ip
 8000bda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bde:	fa1f fe8c 	uxth.w	lr, ip
 8000be2:	2601      	movs	r6, #1
 8000be4:	0c20      	lsrs	r0, r4, #16
 8000be6:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bea:	fb07 1113 	mls	r1, r7, r3, r1
 8000bee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf2:	fb0e f003 	mul.w	r0, lr, r3
 8000bf6:	4288      	cmp	r0, r1
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x12c>
 8000bfa:	eb1c 0101 	adds.w	r1, ip, r1
 8000bfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x12a>
 8000c04:	4288      	cmp	r0, r1
 8000c06:	f200 80cb 	bhi.w	8000da0 <__udivmoddi4+0x2c0>
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	1a09      	subs	r1, r1, r0
 8000c0e:	b2a4      	uxth	r4, r4
 8000c10:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c14:	fb07 1110 	mls	r1, r7, r0, r1
 8000c18:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x156>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c2c:	d202      	bcs.n	8000c34 <__udivmoddi4+0x154>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f200 80bb 	bhi.w	8000daa <__udivmoddi4+0x2ca>
 8000c34:	4608      	mov	r0, r1
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3e:	e79c      	b.n	8000b7a <__udivmoddi4+0x9a>
 8000c40:	f1c6 0720 	rsb	r7, r6, #32
 8000c44:	40b3      	lsls	r3, r6
 8000c46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa20 f407 	lsr.w	r4, r0, r7
 8000c52:	fa01 f306 	lsl.w	r3, r1, r6
 8000c56:	431c      	orrs	r4, r3
 8000c58:	40f9      	lsrs	r1, r7
 8000c5a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c5e:	fa00 f306 	lsl.w	r3, r0, r6
 8000c62:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c66:	0c20      	lsrs	r0, r4, #16
 8000c68:	fa1f fe8c 	uxth.w	lr, ip
 8000c6c:	fb09 1118 	mls	r1, r9, r8, r1
 8000c70:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c74:	fb08 f00e 	mul.w	r0, r8, lr
 8000c78:	4288      	cmp	r0, r1
 8000c7a:	fa02 f206 	lsl.w	r2, r2, r6
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b8>
 8000c80:	eb1c 0101 	adds.w	r1, ip, r1
 8000c84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c88:	f080 8088 	bcs.w	8000d9c <__udivmoddi4+0x2bc>
 8000c8c:	4288      	cmp	r0, r1
 8000c8e:	f240 8085 	bls.w	8000d9c <__udivmoddi4+0x2bc>
 8000c92:	f1a8 0802 	sub.w	r8, r8, #2
 8000c96:	4461      	add	r1, ip
 8000c98:	1a09      	subs	r1, r1, r0
 8000c9a:	b2a4      	uxth	r4, r4
 8000c9c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ca0:	fb09 1110 	mls	r1, r9, r0, r1
 8000ca4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000ca8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cac:	458e      	cmp	lr, r1
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1e2>
 8000cb0:	eb1c 0101 	adds.w	r1, ip, r1
 8000cb4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cb8:	d26c      	bcs.n	8000d94 <__udivmoddi4+0x2b4>
 8000cba:	458e      	cmp	lr, r1
 8000cbc:	d96a      	bls.n	8000d94 <__udivmoddi4+0x2b4>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4461      	add	r1, ip
 8000cc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc6:	fba0 9402 	umull	r9, r4, r0, r2
 8000cca:	eba1 010e 	sub.w	r1, r1, lr
 8000cce:	42a1      	cmp	r1, r4
 8000cd0:	46c8      	mov	r8, r9
 8000cd2:	46a6      	mov	lr, r4
 8000cd4:	d356      	bcc.n	8000d84 <__udivmoddi4+0x2a4>
 8000cd6:	d053      	beq.n	8000d80 <__udivmoddi4+0x2a0>
 8000cd8:	b15d      	cbz	r5, 8000cf2 <__udivmoddi4+0x212>
 8000cda:	ebb3 0208 	subs.w	r2, r3, r8
 8000cde:	eb61 010e 	sbc.w	r1, r1, lr
 8000ce2:	fa01 f707 	lsl.w	r7, r1, r7
 8000ce6:	fa22 f306 	lsr.w	r3, r2, r6
 8000cea:	40f1      	lsrs	r1, r6
 8000cec:	431f      	orrs	r7, r3
 8000cee:	e9c5 7100 	strd	r7, r1, [r5]
 8000cf2:	2600      	movs	r6, #0
 8000cf4:	4631      	mov	r1, r6
 8000cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cfa:	f1c2 0320 	rsb	r3, r2, #32
 8000cfe:	40d8      	lsrs	r0, r3
 8000d00:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d04:	fa21 f303 	lsr.w	r3, r1, r3
 8000d08:	4091      	lsls	r1, r2
 8000d0a:	4301      	orrs	r1, r0
 8000d0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d10:	fa1f fe8c 	uxth.w	lr, ip
 8000d14:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d18:	fb07 3610 	mls	r6, r7, r0, r3
 8000d1c:	0c0b      	lsrs	r3, r1, #16
 8000d1e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d22:	fb00 f60e 	mul.w	r6, r0, lr
 8000d26:	429e      	cmp	r6, r3
 8000d28:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x260>
 8000d2e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d36:	d22f      	bcs.n	8000d98 <__udivmoddi4+0x2b8>
 8000d38:	429e      	cmp	r6, r3
 8000d3a:	d92d      	bls.n	8000d98 <__udivmoddi4+0x2b8>
 8000d3c:	3802      	subs	r0, #2
 8000d3e:	4463      	add	r3, ip
 8000d40:	1b9b      	subs	r3, r3, r6
 8000d42:	b289      	uxth	r1, r1
 8000d44:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d48:	fb07 3316 	mls	r3, r7, r6, r3
 8000d4c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d50:	fb06 f30e 	mul.w	r3, r6, lr
 8000d54:	428b      	cmp	r3, r1
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x28a>
 8000d58:	eb1c 0101 	adds.w	r1, ip, r1
 8000d5c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d60:	d216      	bcs.n	8000d90 <__udivmoddi4+0x2b0>
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d914      	bls.n	8000d90 <__udivmoddi4+0x2b0>
 8000d66:	3e02      	subs	r6, #2
 8000d68:	4461      	add	r1, ip
 8000d6a:	1ac9      	subs	r1, r1, r3
 8000d6c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d70:	e738      	b.n	8000be4 <__udivmoddi4+0x104>
 8000d72:	462e      	mov	r6, r5
 8000d74:	4628      	mov	r0, r5
 8000d76:	e705      	b.n	8000b84 <__udivmoddi4+0xa4>
 8000d78:	4606      	mov	r6, r0
 8000d7a:	e6e3      	b.n	8000b44 <__udivmoddi4+0x64>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6f8      	b.n	8000b72 <__udivmoddi4+0x92>
 8000d80:	454b      	cmp	r3, r9
 8000d82:	d2a9      	bcs.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d84:	ebb9 0802 	subs.w	r8, r9, r2
 8000d88:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e7a3      	b.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d90:	4646      	mov	r6, r8
 8000d92:	e7ea      	b.n	8000d6a <__udivmoddi4+0x28a>
 8000d94:	4620      	mov	r0, r4
 8000d96:	e794      	b.n	8000cc2 <__udivmoddi4+0x1e2>
 8000d98:	4640      	mov	r0, r8
 8000d9a:	e7d1      	b.n	8000d40 <__udivmoddi4+0x260>
 8000d9c:	46d0      	mov	r8, sl
 8000d9e:	e77b      	b.n	8000c98 <__udivmoddi4+0x1b8>
 8000da0:	3b02      	subs	r3, #2
 8000da2:	4461      	add	r1, ip
 8000da4:	e732      	b.n	8000c0c <__udivmoddi4+0x12c>
 8000da6:	4630      	mov	r0, r6
 8000da8:	e709      	b.n	8000bbe <__udivmoddi4+0xde>
 8000daa:	4464      	add	r4, ip
 8000dac:	3802      	subs	r0, #2
 8000dae:	e742      	b.n	8000c36 <__udivmoddi4+0x156>

08000db0 <__aeabi_idiv0>:
 8000db0:	4770      	bx	lr
 8000db2:	bf00      	nop

08000db4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000db4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dba:	f001 f965 	bl	8002088 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dbe:	f000 f8dd 	bl	8000f7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dc2:	f000 fb21 	bl	8001408 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dc6:	f000 faff 	bl	80013c8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000dca:	f000 fad3 	bl	8001374 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 8000dce:	f000 fa83 	bl	80012d8 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000dd2:	f000 fa2d 	bl	8001230 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000dd6:	f000 f99b 	bl	8001110 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000dda:	f000 f939 	bl	8001050 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8000dde:	2104      	movs	r1, #4
 8000de0:	4856      	ldr	r0, [pc, #344]	; (8000f3c <main+0x188>)
 8000de2:	f003 fae5 	bl	80043b0 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8000de6:	4856      	ldr	r0, [pc, #344]	; (8000f40 <main+0x18c>)
 8000de8:	f003 f8e2 	bl	8003fb0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	4854      	ldr	r0, [pc, #336]	; (8000f40 <main+0x18c>)
 8000df0:	f003 f988 	bl	8004104 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df4:	2104      	movs	r1, #4
 8000df6:	4852      	ldr	r0, [pc, #328]	; (8000f40 <main+0x18c>)
 8000df8:	f003 f984 	bl	8004104 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8000dfc:	4b51      	ldr	r3, [pc, #324]	; (8000f44 <main+0x190>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	461a      	mov	r2, r3
 8000e04:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000e08:	484f      	ldr	r0, [pc, #316]	; (8000f48 <main+0x194>)
 8000e0a:	f002 fbcf 	bl	80035ac <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8000e0e:	4b4f      	ldr	r3, [pc, #316]	; (8000f4c <main+0x198>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	461a      	mov	r2, r3
 8000e16:	2110      	movs	r1, #16
 8000e18:	484b      	ldr	r0, [pc, #300]	; (8000f48 <main+0x194>)
 8000e1a:	f002 fbc7 	bl	80035ac <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim5); //Start Timer5
 8000e1e:	484c      	ldr	r0, [pc, #304]	; (8000f50 <main+0x19c>)
 8000e20:	f003 f8c6 	bl	8003fb0 <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8000e24:	2202      	movs	r2, #2
 8000e26:	494b      	ldr	r1, [pc, #300]	; (8000f54 <main+0x1a0>)
 8000e28:	484b      	ldr	r0, [pc, #300]	; (8000f58 <main+0x1a4>)
 8000e2a:	f001 f9e3 	bl	80021f4 <HAL_ADC_Start_DMA>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  //Joystick
	  JoystickControl();
 8000e2e:	f000 fce3 	bl	80017f8 <JoystickControl>
	  JoystickPinUpdate();
 8000e32:	f000 fc63 	bl	80016fc <JoystickPinUpdate>
	  JoystickLocationState();
 8000e36:	f000 fde3 	bl	8001a00 <JoystickLocationState>

	  //QEI
	  position = __HAL_TIM_GET_COUNTER(&htim3);
 8000e3a:	4b40      	ldr	r3, [pc, #256]	; (8000f3c <main+0x188>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e40:	b21a      	sxth	r2, r3
 8000e42:	4b46      	ldr	r3, [pc, #280]	; (8000f5c <main+0x1a8>)
 8000e44:	801a      	strh	r2, [r3, #0]

	  static uint64_t timestamp1 = 0;
	  currentTime = micros();
 8000e46:	f000 fb6b 	bl	8001520 <micros>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	460b      	mov	r3, r1
 8000e4e:	4944      	ldr	r1, [pc, #272]	; (8000f60 <main+0x1ac>)
 8000e50:	e9c1 2300 	strd	r2, r3, [r1]
	  if(currentTime > timestamp1)
 8000e54:	4b42      	ldr	r3, [pc, #264]	; (8000f60 <main+0x1ac>)
 8000e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5a:	4610      	mov	r0, r2
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4b41      	ldr	r3, [pc, #260]	; (8000f64 <main+0x1b0>)
 8000e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e64:	4282      	cmp	r2, r0
 8000e66:	418b      	sbcs	r3, r1
 8000e68:	d211      	bcs.n	8000e8e <main+0xda>
	  {
		  timestamp1 = currentTime + 1000;
 8000e6a:	4b3d      	ldr	r3, [pc, #244]	; (8000f60 <main+0x1ac>)
 8000e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e70:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 8000e74:	f143 0900 	adc.w	r9, r3, #0
 8000e78:	4642      	mov	r2, r8
 8000e7a:	464b      	mov	r3, r9
 8000e7c:	4939      	ldr	r1, [pc, #228]	; (8000f64 <main+0x1b0>)
 8000e7e:	e9c1 2300 	strd	r2, r3, [r1]
		  QEIEncoderPositionVelocity_Update();
 8000e82:	f000 fb67 	bl	8001554 <QEIEncoderPositionVelocity_Update>
		  velocity = QEIData.QEIVelocity;
 8000e86:	4b38      	ldr	r3, [pc, #224]	; (8000f68 <main+0x1b4>)
 8000e88:	69db      	ldr	r3, [r3, #28]
 8000e8a:	4a38      	ldr	r2, [pc, #224]	; (8000f6c <main+0x1b8>)
 8000e8c:	6013      	str	r3, [r2, #0]
	  }

	  //PWM & Motor drive
	  static uint64_t timestamp2 = 0;
	  	  if (HAL_GetTick()>= timestamp2)
 8000e8e:	f001 f961 	bl	8002154 <HAL_GetTick>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2200      	movs	r2, #0
 8000e96:	461c      	mov	r4, r3
 8000e98:	4615      	mov	r5, r2
 8000e9a:	4b35      	ldr	r3, [pc, #212]	; (8000f70 <main+0x1bc>)
 8000e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea0:	4294      	cmp	r4, r2
 8000ea2:	eb75 0303 	sbcs.w	r3, r5, r3
 8000ea6:	d3c2      	bcc.n	8000e2e <main+0x7a>
	  	  {
	  		  timestamp2 = HAL_GetTick()+10;
 8000ea8:	f001 f954 	bl	8002154 <HAL_GetTick>
 8000eac:	4603      	mov	r3, r0
 8000eae:	330a      	adds	r3, #10
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	469a      	mov	sl, r3
 8000eb4:	4693      	mov	fp, r2
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <main+0x1bc>)
 8000eb8:	e9c3 ab00 	strd	sl, fp, [r3]
	  		  duty = PIDcal(setposition, position);
 8000ebc:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <main+0x1c0>)
 8000ebe:	edd3 7a00 	vldr	s15, [r3]
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <main+0x1a8>)
 8000ec4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ec8:	4618      	mov	r0, r3
 8000eca:	eeb0 0a67 	vmov.f32	s0, s15
 8000ece:	f000 fbad 	bl	800162c <PIDcal>
 8000ed2:	eef0 7a40 	vmov.f32	s15, s0
 8000ed6:	4b28      	ldr	r3, [pc, #160]	; (8000f78 <main+0x1c4>)
 8000ed8:	edc3 7a00 	vstr	s15, [r3]
	  		  if (duty >= 0)
 8000edc:	4b26      	ldr	r3, [pc, #152]	; (8000f78 <main+0x1c4>)
 8000ede:	edd3 7a00 	vldr	s15, [r3]
 8000ee2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ee6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eea:	db0e      	blt.n	8000f0a <main+0x156>
	  		  {
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8000eec:	4b14      	ldr	r3, [pc, #80]	; (8000f40 <main+0x18c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	639a      	str	r2, [r3, #56]	; 0x38
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8000ef4:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <main+0x1c4>)
 8000ef6:	edd3 7a00 	vldr	s15, [r3]
 8000efa:	4b11      	ldr	r3, [pc, #68]	; (8000f40 <main+0x18c>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f02:	ee17 2a90 	vmov	r2, s15
 8000f06:	635a      	str	r2, [r3, #52]	; 0x34
 8000f08:	e791      	b.n	8000e2e <main+0x7a>
	  		  }
	  		  else if (duty < 0)
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <main+0x1c4>)
 8000f0c:	edd3 7a00 	vldr	s15, [r3]
 8000f10:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000f14:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f18:	d50f      	bpl.n	8000f3a <main+0x186>
	  		  {
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8000f1a:	4b09      	ldr	r3, [pc, #36]	; (8000f40 <main+0x18c>)
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	635a      	str	r2, [r3, #52]	; 0x34
	  			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8000f22:	4b15      	ldr	r3, [pc, #84]	; (8000f78 <main+0x1c4>)
 8000f24:	edd3 7a00 	vldr	s15, [r3]
 8000f28:	eef1 7a67 	vneg.f32	s15, s15
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <main+0x18c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f34:	ee17 2a90 	vmov	r2, s15
 8000f38:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000f3a:	e778      	b.n	8000e2e <main+0x7a>
 8000f3c:	20000124 	.word	0x20000124
 8000f40:	200000dc 	.word	0x200000dc
 8000f44:	20000004 	.word	0x20000004
 8000f48:	40020400 	.word	0x40020400
 8000f4c:	20000000 	.word	0x20000000
 8000f50:	2000016c 	.word	0x2000016c
 8000f54:	200002b8 	.word	0x200002b8
 8000f58:	20000034 	.word	0x20000034
 8000f5c:	2000022c 	.word	0x2000022c
 8000f60:	20000200 	.word	0x20000200
 8000f64:	200002c0 	.word	0x200002c0
 8000f68:	20000208 	.word	0x20000208
 8000f6c:	20000248 	.word	0x20000248
 8000f70:	200002c8 	.word	0x200002c8
 8000f74:	20000230 	.word	0x20000230
 8000f78:	20000228 	.word	0x20000228

08000f7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b094      	sub	sp, #80	; 0x50
 8000f80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f82:	f107 0320 	add.w	r3, r7, #32
 8000f86:	2230      	movs	r2, #48	; 0x30
 8000f88:	2100      	movs	r1, #0
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f004 fbe8 	bl	8005760 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2200      	movs	r2, #0
 8000f96:	601a      	str	r2, [r3, #0]
 8000f98:	605a      	str	r2, [r3, #4]
 8000f9a:	609a      	str	r2, [r3, #8]
 8000f9c:	60da      	str	r2, [r3, #12]
 8000f9e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60bb      	str	r3, [r7, #8]
 8000fa4:	4b28      	ldr	r3, [pc, #160]	; (8001048 <SystemClock_Config+0xcc>)
 8000fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa8:	4a27      	ldr	r2, [pc, #156]	; (8001048 <SystemClock_Config+0xcc>)
 8000faa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fae:	6413      	str	r3, [r2, #64]	; 0x40
 8000fb0:	4b25      	ldr	r3, [pc, #148]	; (8001048 <SystemClock_Config+0xcc>)
 8000fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	60bb      	str	r3, [r7, #8]
 8000fba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	607b      	str	r3, [r7, #4]
 8000fc0:	4b22      	ldr	r3, [pc, #136]	; (800104c <SystemClock_Config+0xd0>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <SystemClock_Config+0xd0>)
 8000fc6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000fca:	6013      	str	r3, [r2, #0]
 8000fcc:	4b1f      	ldr	r3, [pc, #124]	; (800104c <SystemClock_Config+0xd0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe0:	2310      	movs	r3, #16
 8000fe2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000fec:	2310      	movs	r3, #16
 8000fee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000ff0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ff4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ff6:	2304      	movs	r3, #4
 8000ff8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000ffa:	2304      	movs	r3, #4
 8000ffc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffe:	f107 0320 	add.w	r3, r7, #32
 8001002:	4618      	mov	r0, r3
 8001004:	f002 faec 	bl	80035e0 <HAL_RCC_OscConfig>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800100e:	f000 fe07 	bl	8001c20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001012:	230f      	movs	r3, #15
 8001014:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001016:	2302      	movs	r3, #2
 8001018:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800101e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001022:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001024:	2300      	movs	r3, #0
 8001026:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001028:	f107 030c 	add.w	r3, r7, #12
 800102c:	2102      	movs	r1, #2
 800102e:	4618      	mov	r0, r3
 8001030:	f002 fd4e 	bl	8003ad0 <HAL_RCC_ClockConfig>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800103a:	f000 fdf1 	bl	8001c20 <Error_Handler>
  }
}
 800103e:	bf00      	nop
 8001040:	3750      	adds	r7, #80	; 0x50
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	40023800 	.word	0x40023800
 800104c:	40007000 	.word	0x40007000

08001050 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b084      	sub	sp, #16
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001056:	463b      	mov	r3, r7
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001062:	4b28      	ldr	r3, [pc, #160]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001064:	4a28      	ldr	r2, [pc, #160]	; (8001108 <MX_ADC1_Init+0xb8>)
 8001066:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001068:	4b26      	ldr	r3, [pc, #152]	; (8001104 <MX_ADC1_Init+0xb4>)
 800106a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800106e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001070:	4b24      	ldr	r3, [pc, #144]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001072:	2200      	movs	r2, #0
 8001074:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001076:	4b23      	ldr	r3, [pc, #140]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001078:	2201      	movs	r2, #1
 800107a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800107c:	4b21      	ldr	r3, [pc, #132]	; (8001104 <MX_ADC1_Init+0xb4>)
 800107e:	2201      	movs	r2, #1
 8001080:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001082:	4b20      	ldr	r3, [pc, #128]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001084:	2200      	movs	r2, #0
 8001086:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800108a:	4b1e      	ldr	r3, [pc, #120]	; (8001104 <MX_ADC1_Init+0xb4>)
 800108c:	2200      	movs	r2, #0
 800108e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001090:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001092:	4a1e      	ldr	r2, [pc, #120]	; (800110c <MX_ADC1_Init+0xbc>)
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <MX_ADC1_Init+0xb4>)
 8001098:	2200      	movs	r2, #0
 800109a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800109c:	4b19      	ldr	r3, [pc, #100]	; (8001104 <MX_ADC1_Init+0xb4>)
 800109e:	2202      	movs	r2, #2
 80010a0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80010a2:	4b18      	ldr	r3, [pc, #96]	; (8001104 <MX_ADC1_Init+0xb4>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010aa:	4b16      	ldr	r3, [pc, #88]	; (8001104 <MX_ADC1_Init+0xb4>)
 80010ac:	2201      	movs	r2, #1
 80010ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80010b0:	4814      	ldr	r0, [pc, #80]	; (8001104 <MX_ADC1_Init+0xb4>)
 80010b2:	f001 f85b 	bl	800216c <HAL_ADC_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80010bc:	f000 fdb0 	bl	8001c20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80010c0:	2300      	movs	r3, #0
 80010c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010c4:	2301      	movs	r3, #1
 80010c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80010c8:	2303      	movs	r3, #3
 80010ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010cc:	463b      	mov	r3, r7
 80010ce:	4619      	mov	r1, r3
 80010d0:	480c      	ldr	r0, [pc, #48]	; (8001104 <MX_ADC1_Init+0xb4>)
 80010d2:	f001 f99d 	bl	8002410 <HAL_ADC_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80010dc:	f000 fda0 	bl	8001c20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80010e0:	2301      	movs	r3, #1
 80010e2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80010e8:	463b      	mov	r3, r7
 80010ea:	4619      	mov	r1, r3
 80010ec:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_ADC1_Init+0xb4>)
 80010ee:	f001 f98f 	bl	8002410 <HAL_ADC_ConfigChannel>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80010f8:	f000 fd92 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80010fc:	bf00      	nop
 80010fe:	3710      	adds	r7, #16
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	20000034 	.word	0x20000034
 8001108:	40012000 	.word	0x40012000
 800110c:	0f000001 	.word	0x0f000001

08001110 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b092      	sub	sp, #72	; 0x48
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001116:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001120:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001124:	2200      	movs	r2, #0
 8001126:	601a      	str	r2, [r3, #0]
 8001128:	605a      	str	r2, [r3, #4]
 800112a:	609a      	str	r2, [r3, #8]
 800112c:	60da      	str	r2, [r3, #12]
 800112e:	611a      	str	r2, [r3, #16]
 8001130:	615a      	str	r2, [r3, #20]
 8001132:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2220      	movs	r2, #32
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fb10 	bl	8005760 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001140:	4b39      	ldr	r3, [pc, #228]	; (8001228 <MX_TIM1_Init+0x118>)
 8001142:	4a3a      	ldr	r2, [pc, #232]	; (800122c <MX_TIM1_Init+0x11c>)
 8001144:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001146:	4b38      	ldr	r3, [pc, #224]	; (8001228 <MX_TIM1_Init+0x118>)
 8001148:	2253      	movs	r2, #83	; 0x53
 800114a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800114c:	4b36      	ldr	r3, [pc, #216]	; (8001228 <MX_TIM1_Init+0x118>)
 800114e:	2200      	movs	r2, #0
 8001150:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8001152:	4b35      	ldr	r3, [pc, #212]	; (8001228 <MX_TIM1_Init+0x118>)
 8001154:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001158:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800115a:	4b33      	ldr	r3, [pc, #204]	; (8001228 <MX_TIM1_Init+0x118>)
 800115c:	2200      	movs	r2, #0
 800115e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001160:	4b31      	ldr	r3, [pc, #196]	; (8001228 <MX_TIM1_Init+0x118>)
 8001162:	2200      	movs	r2, #0
 8001164:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001166:	4b30      	ldr	r3, [pc, #192]	; (8001228 <MX_TIM1_Init+0x118>)
 8001168:	2200      	movs	r2, #0
 800116a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800116c:	482e      	ldr	r0, [pc, #184]	; (8001228 <MX_TIM1_Init+0x118>)
 800116e:	f002 ff79 	bl	8004064 <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001178:	f000 fd52 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	4619      	mov	r1, r3
 800118a:	4827      	ldr	r0, [pc, #156]	; (8001228 <MX_TIM1_Init+0x118>)
 800118c:	f003 ff2e 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001196:	f000 fd43 	bl	8001c20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	481a      	ldr	r0, [pc, #104]	; (8001228 <MX_TIM1_Init+0x118>)
 80011c0:	f003 fa8c 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80011ca:	f000 fd29 	bl	8001c20 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011d2:	2204      	movs	r2, #4
 80011d4:	4619      	mov	r1, r3
 80011d6:	4814      	ldr	r0, [pc, #80]	; (8001228 <MX_TIM1_Init+0x118>)
 80011d8:	f003 fa80 	bl	80046dc <HAL_TIM_PWM_ConfigChannel>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80011e2:	f000 fd1d 	bl	8001c20 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011ea:	2300      	movs	r3, #0
 80011ec:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011ee:	2300      	movs	r3, #0
 80011f0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011fa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011fe:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	4619      	mov	r1, r3
 8001208:	4807      	ldr	r0, [pc, #28]	; (8001228 <MX_TIM1_Init+0x118>)
 800120a:	f003 ff5d 	bl	80050c8 <HAL_TIMEx_ConfigBreakDeadTime>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001214:	f000 fd04 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001218:	4803      	ldr	r0, [pc, #12]	; (8001228 <MX_TIM1_Init+0x118>)
 800121a:	f000 fe39 	bl	8001e90 <HAL_TIM_MspPostInit>

}
 800121e:	bf00      	nop
 8001220:	3748      	adds	r7, #72	; 0x48
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	200000dc 	.word	0x200000dc
 800122c:	40010000 	.word	0x40010000

08001230 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b08c      	sub	sp, #48	; 0x30
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001236:	f107 030c 	add.w	r3, r7, #12
 800123a:	2224      	movs	r2, #36	; 0x24
 800123c:	2100      	movs	r1, #0
 800123e:	4618      	mov	r0, r3
 8001240:	f004 fa8e 	bl	8005760 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800124c:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM3_Init+0xa0>)
 800124e:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <MX_TIM3_Init+0xa4>)
 8001250:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001252:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <MX_TIM3_Init+0xa0>)
 8001254:	2200      	movs	r2, #0
 8001256:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001258:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM3_Init+0xa0>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <MX_TIM3_Init+0xa0>)
 8001260:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001264:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001266:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <MX_TIM3_Init+0xa0>)
 8001268:	2200      	movs	r2, #0
 800126a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126c:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM3_Init+0xa0>)
 800126e:	2200      	movs	r2, #0
 8001270:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001272:	2301      	movs	r3, #1
 8001274:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001276:	2300      	movs	r3, #0
 8001278:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800127a:	2301      	movs	r3, #1
 800127c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800127e:	2300      	movs	r3, #0
 8001280:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 800128a:	2301      	movs	r3, #1
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800128e:	2300      	movs	r3, #0
 8001290:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001292:	2300      	movs	r3, #0
 8001294:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001296:	f107 030c 	add.w	r3, r7, #12
 800129a:	4619      	mov	r1, r3
 800129c:	480c      	ldr	r0, [pc, #48]	; (80012d0 <MX_TIM3_Init+0xa0>)
 800129e:	f002 ffe1 	bl	8004264 <HAL_TIM_Encoder_Init>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d001      	beq.n	80012ac <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80012a8:	f000 fcba 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012b0:	2300      	movs	r3, #0
 80012b2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	4619      	mov	r1, r3
 80012b8:	4805      	ldr	r0, [pc, #20]	; (80012d0 <MX_TIM3_Init+0xa0>)
 80012ba:	f003 fe97 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012c4:	f000 fcac 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	3730      	adds	r7, #48	; 0x30
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}
 80012d0:	20000124 	.word	0x20000124
 80012d4:	40000400 	.word	0x40000400

080012d8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b086      	sub	sp, #24
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0308 	add.w	r3, r7, #8
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	463b      	mov	r3, r7
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012f4:	4b1d      	ldr	r3, [pc, #116]	; (800136c <MX_TIM5_Init+0x94>)
 80012f6:	4a1e      	ldr	r2, [pc, #120]	; (8001370 <MX_TIM5_Init+0x98>)
 80012f8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80012fa:	4b1c      	ldr	r3, [pc, #112]	; (800136c <MX_TIM5_Init+0x94>)
 80012fc:	2253      	movs	r2, #83	; 0x53
 80012fe:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001300:	4b1a      	ldr	r3, [pc, #104]	; (800136c <MX_TIM5_Init+0x94>)
 8001302:	2200      	movs	r2, #0
 8001304:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001306:	4b19      	ldr	r3, [pc, #100]	; (800136c <MX_TIM5_Init+0x94>)
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800130e:	4b17      	ldr	r3, [pc, #92]	; (800136c <MX_TIM5_Init+0x94>)
 8001310:	2200      	movs	r2, #0
 8001312:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001314:	4b15      	ldr	r3, [pc, #84]	; (800136c <MX_TIM5_Init+0x94>)
 8001316:	2200      	movs	r2, #0
 8001318:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800131a:	4814      	ldr	r0, [pc, #80]	; (800136c <MX_TIM5_Init+0x94>)
 800131c:	f002 fdf8 	bl	8003f10 <HAL_TIM_Base_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001326:	f000 fc7b 	bl	8001c20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800132e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001330:	f107 0308 	add.w	r3, r7, #8
 8001334:	4619      	mov	r1, r3
 8001336:	480d      	ldr	r0, [pc, #52]	; (800136c <MX_TIM5_Init+0x94>)
 8001338:	f003 fa92 	bl	8004860 <HAL_TIM_ConfigClockSource>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001342:	f000 fc6d 	bl	8001c20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001346:	2300      	movs	r3, #0
 8001348:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800134e:	463b      	mov	r3, r7
 8001350:	4619      	mov	r1, r3
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <MX_TIM5_Init+0x94>)
 8001354:	f003 fe4a 	bl	8004fec <HAL_TIMEx_MasterConfigSynchronization>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800135e:	f000 fc5f 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001362:	bf00      	nop
 8001364:	3718      	adds	r7, #24
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	2000016c 	.word	0x2000016c
 8001370:	40000c00 	.word	0x40000c00

08001374 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001378:	4b11      	ldr	r3, [pc, #68]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800137a:	4a12      	ldr	r2, [pc, #72]	; (80013c4 <MX_USART2_UART_Init+0x50>)
 800137c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800137e:	4b10      	ldr	r3, [pc, #64]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001380:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001384:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001386:	4b0e      	ldr	r3, [pc, #56]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001388:	2200      	movs	r2, #0
 800138a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800138e:	2200      	movs	r2, #0
 8001390:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001392:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 8001394:	2200      	movs	r2, #0
 8001396:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001398:	4b09      	ldr	r3, [pc, #36]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 800139a:	220c      	movs	r2, #12
 800139c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800139e:	4b08      	ldr	r3, [pc, #32]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013aa:	4805      	ldr	r0, [pc, #20]	; (80013c0 <MX_USART2_UART_Init+0x4c>)
 80013ac:	f003 fef2 	bl	8005194 <HAL_UART_Init>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80013b6:	f000 fc33 	bl	8001c20 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	200001b4 	.word	0x200001b4
 80013c4:	40004400 	.word	0x40004400

080013c8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	607b      	str	r3, [r7, #4]
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_DMA_Init+0x3c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a0b      	ldr	r2, [pc, #44]	; (8001404 <MX_DMA_Init+0x3c>)
 80013d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_DMA_Init+0x3c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013e6:	607b      	str	r3, [r7, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2038      	movs	r0, #56	; 0x38
 80013f0:	f001 fb99 	bl	8002b26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80013f4:	2038      	movs	r0, #56	; 0x38
 80013f6:	f001 fbb2 	bl	8002b5e <HAL_NVIC_EnableIRQ>

}
 80013fa:	bf00      	nop
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40023800 	.word	0x40023800

08001408 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08a      	sub	sp, #40	; 0x28
 800140c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 0314 	add.w	r3, r7, #20
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	4b3b      	ldr	r3, [pc, #236]	; (8001510 <MX_GPIO_Init+0x108>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001426:	4a3a      	ldr	r2, [pc, #232]	; (8001510 <MX_GPIO_Init+0x108>)
 8001428:	f043 0304 	orr.w	r3, r3, #4
 800142c:	6313      	str	r3, [r2, #48]	; 0x30
 800142e:	4b38      	ldr	r3, [pc, #224]	; (8001510 <MX_GPIO_Init+0x108>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001432:	f003 0304 	and.w	r3, r3, #4
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	60fb      	str	r3, [r7, #12]
 800143e:	4b34      	ldr	r3, [pc, #208]	; (8001510 <MX_GPIO_Init+0x108>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	4a33      	ldr	r2, [pc, #204]	; (8001510 <MX_GPIO_Init+0x108>)
 8001444:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001448:	6313      	str	r3, [r2, #48]	; 0x30
 800144a:	4b31      	ldr	r3, [pc, #196]	; (8001510 <MX_GPIO_Init+0x108>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	60bb      	str	r3, [r7, #8]
 800145a:	4b2d      	ldr	r3, [pc, #180]	; (8001510 <MX_GPIO_Init+0x108>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	4a2c      	ldr	r2, [pc, #176]	; (8001510 <MX_GPIO_Init+0x108>)
 8001460:	f043 0301 	orr.w	r3, r3, #1
 8001464:	6313      	str	r3, [r2, #48]	; 0x30
 8001466:	4b2a      	ldr	r3, [pc, #168]	; (8001510 <MX_GPIO_Init+0x108>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146a:	f003 0301 	and.w	r3, r3, #1
 800146e:	60bb      	str	r3, [r7, #8]
 8001470:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	4b26      	ldr	r3, [pc, #152]	; (8001510 <MX_GPIO_Init+0x108>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a25      	ldr	r2, [pc, #148]	; (8001510 <MX_GPIO_Init+0x108>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_GPIO_Init+0x108>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	607b      	str	r3, [r7, #4]
 800148c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 800148e:	2200      	movs	r2, #0
 8001490:	f44f 6182 	mov.w	r1, #1040	; 0x410
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <MX_GPIO_Init+0x10c>)
 8001496:	f002 f889 	bl	80035ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800149a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800149e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80014a0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80014a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80014aa:	f107 0314 	add.w	r3, r7, #20
 80014ae:	4619      	mov	r1, r3
 80014b0:	4819      	ldr	r0, [pc, #100]	; (8001518 <MX_GPIO_Init+0x110>)
 80014b2:	f001 fedf 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 80014b6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80014ba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014bc:	2300      	movs	r3, #0
 80014be:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4814      	ldr	r0, [pc, #80]	; (800151c <MX_GPIO_Init+0x114>)
 80014cc:	f001 fed2 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 80014d0:	2361      	movs	r3, #97	; 0x61
 80014d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014dc:	f107 0314 	add.w	r3, r7, #20
 80014e0:	4619      	mov	r1, r3
 80014e2:	480c      	ldr	r0, [pc, #48]	; (8001514 <MX_GPIO_Init+0x10c>)
 80014e4:	f001 fec6 	bl	8003274 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 80014e8:	f44f 6382 	mov.w	r3, #1040	; 0x410
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ee:	2301      	movs	r3, #1
 80014f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	4619      	mov	r1, r3
 8001500:	4804      	ldr	r0, [pc, #16]	; (8001514 <MX_GPIO_Init+0x10c>)
 8001502:	f001 feb7 	bl	8003274 <HAL_GPIO_Init>

}
 8001506:	bf00      	nop
 8001508:	3728      	adds	r7, #40	; 0x28
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	40023800 	.word	0x40023800
 8001514:	40020400 	.word	0x40020400
 8001518:	40020800 	.word	0x40020800
 800151c:	40020000 	.word	0x40020000

08001520 <micros>:
	}
}


uint64_t micros()
{
 8001520:	b4b0      	push	{r4, r5, r7}
 8001522:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001524:	4b09      	ldr	r3, [pc, #36]	; (800154c <micros+0x2c>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800152a:	2200      	movs	r2, #0
 800152c:	4618      	mov	r0, r3
 800152e:	4611      	mov	r1, r2
 8001530:	4b07      	ldr	r3, [pc, #28]	; (8001550 <micros+0x30>)
 8001532:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001536:	1884      	adds	r4, r0, r2
 8001538:	eb41 0503 	adc.w	r5, r1, r3
 800153c:	4622      	mov	r2, r4
 800153e:	462b      	mov	r3, r5
}
 8001540:	4610      	mov	r0, r2
 8001542:	4619      	mov	r1, r3
 8001544:	46bd      	mov	sp, r7
 8001546:	bcb0      	pop	{r4, r5, r7}
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	2000016c 	.word	0x2000016c
 8001550:	200001f8 	.word	0x200001f8

08001554 <QEIEncoderPositionVelocity_Update>:


void QEIEncoderPositionVelocity_Update()
{
 8001554:	b5b0      	push	{r4, r5, r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
	QEIData.timestamp[0] = micros();
 800155a:	f7ff ffe1 	bl	8001520 <micros>
 800155e:	4602      	mov	r2, r0
 8001560:	460b      	mov	r3, r1
 8001562:	492e      	ldr	r1, [pc, #184]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001564:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint32_t counterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <QEIEncoderPositionVelocity_Update+0xcc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156e:	60bb      	str	r3, [r7, #8]
	QEIData.data[0] = counterPosition;
 8001570:	4a2a      	ldr	r2, [pc, #168]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	6013      	str	r3, [r2, #0]

	QEIData.QEIPosition = counterPosition % 1600;
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4b2a      	ldr	r3, [pc, #168]	; (8001624 <QEIEncoderPositionVelocity_Update+0xd0>)
 800157a:	fba3 1302 	umull	r1, r3, r3, r2
 800157e:	0a5b      	lsrs	r3, r3, #9
 8001580:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8001584:	fb01 f303 	mul.w	r3, r1, r3
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	ee07 3a90 	vmov	s15, r3
 800158e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001592:	4b22      	ldr	r3, [pc, #136]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001594:	edc3 7a06 	vstr	s15, [r3, #24]

	int32_t diffPosition = QEIData.data[0]-QEIData.data[1];
 8001598:	4b20      	ldr	r3, [pc, #128]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 800159a:	681a      	ldr	r2, [r3, #0]
 800159c:	4b1f      	ldr	r3, [pc, #124]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	1ad3      	subs	r3, r2, r3
 80015a2:	60fb      	str	r3, [r7, #12]
	float difftime = (QEIData.timestamp[0]-QEIData.timestamp[1]);
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 80015a6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 80015ac:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80015b0:	1a84      	subs	r4, r0, r2
 80015b2:	eb61 0503 	sbc.w	r5, r1, r3
 80015b6:	4620      	mov	r0, r4
 80015b8:	4629      	mov	r1, r5
 80015ba:	f7ff fa33 	bl	8000a24 <__aeabi_ul2f>
 80015be:	4603      	mov	r3, r0
 80015c0:	607b      	str	r3, [r7, #4]

	if(diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015c8:	dd03      	ble.n	80015d2 <QEIEncoderPositionVelocity_Update+0x7e>
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80015d0:	60fb      	str	r3, [r7, #12]
	if(diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 80015d8:	da03      	bge.n	80015e2 <QEIEncoderPositionVelocity_Update+0x8e>
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80015e0:	60fb      	str	r3, [r7, #12]

	QEIData.QEIVelocity = (diffPosition * 1000000)/difftime;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	4a10      	ldr	r2, [pc, #64]	; (8001628 <QEIEncoderPositionVelocity_Update+0xd4>)
 80015e6:	fb02 f303 	mul.w	r3, r2, r3
 80015ea:	ee07 3a90 	vmov	s15, r3
 80015ee:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80015f2:	ed97 7a01 	vldr	s14, [r7, #4]
 80015f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015fa:	4b08      	ldr	r3, [pc, #32]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 80015fc:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIData.data[1] = QEIData.data[0];
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a05      	ldr	r2, [pc, #20]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001606:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 800160a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800160e:	4903      	ldr	r1, [pc, #12]	; (800161c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001610:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001614:	bf00      	nop
 8001616:	3710      	adds	r7, #16
 8001618:	46bd      	mov	sp, r7
 800161a:	bdb0      	pop	{r4, r5, r7, pc}
 800161c:	20000208 	.word	0x20000208
 8001620:	20000124 	.word	0x20000124
 8001624:	51eb851f 	.word	0x51eb851f
 8001628:	000f4240 	.word	0x000f4240

0800162c <PIDcal>:

float PIDcal(float setposition, int16_t position)
{
 800162c:	b480      	push	{r7}
 800162e:	b083      	sub	sp, #12
 8001630:	af00      	add	r7, sp, #0
 8001632:	ed87 0a01 	vstr	s0, [r7, #4]
 8001636:	4603      	mov	r3, r0
 8001638:	807b      	strh	r3, [r7, #2]
	errorposition = setposition - position;
 800163a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800163e:	ee07 3a90 	vmov	s15, r3
 8001642:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001646:	ed97 7a01 	vldr	s14, [r7, #4]
 800164a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800164e:	4b23      	ldr	r3, [pc, #140]	; (80016dc <PIDcal+0xb0>)
 8001650:	edc3 7a00 	vstr	s15, [r3]

	integral = integral + errorposition;
 8001654:	4b22      	ldr	r3, [pc, #136]	; (80016e0 <PIDcal+0xb4>)
 8001656:	ed93 7a00 	vldr	s14, [r3]
 800165a:	4b20      	ldr	r3, [pc, #128]	; (80016dc <PIDcal+0xb0>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001664:	4b1e      	ldr	r3, [pc, #120]	; (80016e0 <PIDcal+0xb4>)
 8001666:	edc3 7a00 	vstr	s15, [r3]
	derivative = errorposition - pre_errorposition;
 800166a:	4b1c      	ldr	r3, [pc, #112]	; (80016dc <PIDcal+0xb0>)
 800166c:	ed93 7a00 	vldr	s14, [r3]
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <PIDcal+0xb8>)
 8001672:	edd3 7a00 	vldr	s15, [r3]
 8001676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800167a:	4b1b      	ldr	r3, [pc, #108]	; (80016e8 <PIDcal+0xbc>)
 800167c:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp*errorposition + Ki*integral + Kd*derivative;
 8001680:	4b1a      	ldr	r3, [pc, #104]	; (80016ec <PIDcal+0xc0>)
 8001682:	ed93 7a00 	vldr	s14, [r3]
 8001686:	4b15      	ldr	r3, [pc, #84]	; (80016dc <PIDcal+0xb0>)
 8001688:	edd3 7a00 	vldr	s15, [r3]
 800168c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001690:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <PIDcal+0xc4>)
 8001692:	edd3 6a00 	vldr	s13, [r3]
 8001696:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <PIDcal+0xb4>)
 8001698:	edd3 7a00 	vldr	s15, [r3]
 800169c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <PIDcal+0xc8>)
 80016a6:	edd3 6a00 	vldr	s13, [r3]
 80016aa:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <PIDcal+0xbc>)
 80016ac:	edd3 7a00 	vldr	s15, [r3]
 80016b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80016b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016b8:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <PIDcal+0xcc>)
 80016ba:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 80016be:	4b07      	ldr	r3, [pc, #28]	; (80016dc <PIDcal+0xb0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a08      	ldr	r2, [pc, #32]	; (80016e4 <PIDcal+0xb8>)
 80016c4:	6013      	str	r3, [r2, #0]

	return u_position;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <PIDcal+0xcc>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	ee07 3a90 	vmov	s15, r3
}
 80016ce:	eeb0 0a67 	vmov.f32	s0, s15
 80016d2:	370c      	adds	r7, #12
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr
 80016dc:	20000234 	.word	0x20000234
 80016e0:	20000240 	.word	0x20000240
 80016e4:	2000023c 	.word	0x2000023c
 80016e8:	20000244 	.word	0x20000244
 80016ec:	2000024c 	.word	0x2000024c
 80016f0:	20000250 	.word	0x20000250
 80016f4:	20000254 	.word	0x20000254
 80016f8:	20000238 	.word	0x20000238

080016fc <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001700:	2140      	movs	r1, #64	; 0x40
 8001702:	4837      	ldr	r0, [pc, #220]	; (80017e0 <JoystickPinUpdate+0xe4>)
 8001704:	f001 ff3a 	bl	800357c <HAL_GPIO_ReadPin>
 8001708:	4603      	mov	r3, r0
 800170a:	461a      	mov	r2, r3
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <JoystickPinUpdate+0xe8>)
 800170e:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8001710:	4b34      	ldr	r3, [pc, #208]	; (80017e4 <JoystickPinUpdate+0xe8>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	2b01      	cmp	r3, #1
 8001716:	d107      	bne.n	8001728 <JoystickPinUpdate+0x2c>
 8001718:	4b32      	ldr	r3, [pc, #200]	; (80017e4 <JoystickPinUpdate+0xe8>)
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d103      	bne.n	8001728 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8001720:	4b30      	ldr	r3, [pc, #192]	; (80017e4 <JoystickPinUpdate+0xe8>)
 8001722:	2201      	movs	r2, #1
 8001724:	609a      	str	r2, [r3, #8]
 8001726:	e002      	b.n	800172e <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8001728:	4b2e      	ldr	r3, [pc, #184]	; (80017e4 <JoystickPinUpdate+0xe8>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 800172e:	4b2d      	ldr	r3, [pc, #180]	; (80017e4 <JoystickPinUpdate+0xe8>)
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	4a2c      	ldr	r2, [pc, #176]	; (80017e4 <JoystickPinUpdate+0xe8>)
 8001734:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001736:	2120      	movs	r1, #32
 8001738:	482b      	ldr	r0, [pc, #172]	; (80017e8 <JoystickPinUpdate+0xec>)
 800173a:	f001 ff1f 	bl	800357c <HAL_GPIO_ReadPin>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001744:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8001746:	4b29      	ldr	r3, [pc, #164]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	2b01      	cmp	r3, #1
 800174c:	d107      	bne.n	800175e <JoystickPinUpdate+0x62>
 800174e:	4b27      	ldr	r3, [pc, #156]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d103      	bne.n	800175e <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8001756:	4b25      	ldr	r3, [pc, #148]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001758:	2201      	movs	r2, #1
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	e002      	b.n	8001764 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8001764:	4b21      	ldr	r3, [pc, #132]	; (80017ec <JoystickPinUpdate+0xf0>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a20      	ldr	r2, [pc, #128]	; (80017ec <JoystickPinUpdate+0xf0>)
 800176a:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 800176c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001770:	481d      	ldr	r0, [pc, #116]	; (80017e8 <JoystickPinUpdate+0xec>)
 8001772:	f001 ff03 	bl	800357c <HAL_GPIO_ReadPin>
 8001776:	4603      	mov	r3, r0
 8001778:	461a      	mov	r2, r3
 800177a:	4b1d      	ldr	r3, [pc, #116]	; (80017f0 <JoystickPinUpdate+0xf4>)
 800177c:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 800177e:	4b1c      	ldr	r3, [pc, #112]	; (80017f0 <JoystickPinUpdate+0xf4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	2b01      	cmp	r3, #1
 8001784:	d107      	bne.n	8001796 <JoystickPinUpdate+0x9a>
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <JoystickPinUpdate+0xf4>)
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d103      	bne.n	8001796 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <JoystickPinUpdate+0xf4>)
 8001790:	2201      	movs	r2, #1
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	e002      	b.n	800179c <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8001796:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <JoystickPinUpdate+0xf4>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <JoystickPinUpdate+0xf4>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	4a13      	ldr	r2, [pc, #76]	; (80017f0 <JoystickPinUpdate+0xf4>)
 80017a2:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 80017a4:	2120      	movs	r1, #32
 80017a6:	480e      	ldr	r0, [pc, #56]	; (80017e0 <JoystickPinUpdate+0xe4>)
 80017a8:	f001 fee8 	bl	800357c <HAL_GPIO_ReadPin>
 80017ac:	4603      	mov	r3, r0
 80017ae:	461a      	mov	r2, r3
 80017b0:	4b10      	ldr	r3, [pc, #64]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017b2:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 80017b4:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b01      	cmp	r3, #1
 80017ba:	d107      	bne.n	80017cc <JoystickPinUpdate+0xd0>
 80017bc:	4b0d      	ldr	r3, [pc, #52]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d103      	bne.n	80017cc <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	609a      	str	r2, [r3, #8]
 80017ca:	e002      	b.n	80017d2 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 80017cc:	4b09      	ldr	r3, [pc, #36]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 80017d2:	4b08      	ldr	r3, [pc, #32]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	4a07      	ldr	r2, [pc, #28]	; (80017f4 <JoystickPinUpdate+0xf8>)
 80017d8:	6013      	str	r3, [r2, #0]
}
 80017da:	bf00      	nop
 80017dc:	bd80      	pop	{r7, pc}
 80017de:	bf00      	nop
 80017e0:	40020400 	.word	0x40020400
 80017e4:	20000288 	.word	0x20000288
 80017e8:	40020000 	.word	0x40020000
 80017ec:	20000294 	.word	0x20000294
 80017f0:	200002a0 	.word	0x200002a0
 80017f4:	200002ac 	.word	0x200002ac

080017f8 <JoystickControl>:

void JoystickControl()
{
 80017f8:	b5b0      	push	{r4, r5, r7, lr}
 80017fa:	af00      	add	r7, sp, #0
	static float setposition_f = 0;
	static int JoySpeed = 0;

	if(RoughButton.flag == 1)
 80017fc:	4b7a      	ldr	r3, [pc, #488]	; (80019e8 <JoystickControl+0x1f0>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	2b01      	cmp	r3, #1
 8001802:	d106      	bne.n	8001812 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8001804:	4b79      	ldr	r3, [pc, #484]	; (80019ec <JoystickControl+0x1f4>)
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 800180a:	4b77      	ldr	r3, [pc, #476]	; (80019e8 <JoystickControl+0x1f0>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	e009      	b.n	8001826 <JoystickControl+0x2e>
	}
	else if(FineButton.flag == 1)
 8001812:	4b77      	ldr	r3, [pc, #476]	; (80019f0 <JoystickControl+0x1f8>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	2b01      	cmp	r3, #1
 8001818:	d105      	bne.n	8001826 <JoystickControl+0x2e>
	{
		JoySpeed = 1;
 800181a:	4b74      	ldr	r3, [pc, #464]	; (80019ec <JoystickControl+0x1f4>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8001820:	4b73      	ldr	r3, [pc, #460]	; (80019f0 <JoystickControl+0x1f8>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8001826:	4b71      	ldr	r3, [pc, #452]	; (80019ec <JoystickControl+0x1f4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d002      	beq.n	8001834 <JoystickControl+0x3c>
 800182e:	2b01      	cmp	r3, #1
 8001830:	d067      	beq.n	8001902 <JoystickControl+0x10a>
			setposition_f -= (4096-XYSwitch[1])*0.0000005;
		}
		setposition = (int)round(setposition_f);
		break;
	}
}
 8001832:	e0cd      	b.n	80019d0 <JoystickControl+0x1d8>
		if(XYSwitch[1] > 2150)
 8001834:	4b6f      	ldr	r3, [pc, #444]	; (80019f4 <JoystickControl+0x1fc>)
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f640 0266 	movw	r2, #2150	; 0x866
 800183c:	4293      	cmp	r3, r2
 800183e:	dd20      	ble.n	8001882 <JoystickControl+0x8a>
			setposition_f += XYSwitch[1]*0.00002;
 8001840:	4b6d      	ldr	r3, [pc, #436]	; (80019f8 <JoystickControl+0x200>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4618      	mov	r0, r3
 8001846:	f7fe ff55 	bl	80006f4 <__aeabi_f2d>
 800184a:	4604      	mov	r4, r0
 800184c:	460d      	mov	r5, r1
 800184e:	4b69      	ldr	r3, [pc, #420]	; (80019f4 <JoystickControl+0x1fc>)
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f7fe ff3c 	bl	80006d0 <__aeabi_i2d>
 8001858:	a35f      	add	r3, pc, #380	; (adr r3, 80019d8 <JoystickControl+0x1e0>)
 800185a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800185e:	f7fe fcbb 	bl	80001d8 <__aeabi_dmul>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	4620      	mov	r0, r4
 8001868:	4629      	mov	r1, r5
 800186a:	f7fe fde5 	bl	8000438 <__adddf3>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f7fe ffbd 	bl	80007f4 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	4a5e      	ldr	r2, [pc, #376]	; (80019f8 <JoystickControl+0x200>)
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	e026      	b.n	80018d0 <JoystickControl+0xd8>
		else if(XYSwitch[1] < 2000)
 8001882:	4b5c      	ldr	r3, [pc, #368]	; (80019f4 <JoystickControl+0x1fc>)
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800188a:	da21      	bge.n	80018d0 <JoystickControl+0xd8>
			setposition_f -= (4096-XYSwitch[1])*0.00002;
 800188c:	4b5a      	ldr	r3, [pc, #360]	; (80019f8 <JoystickControl+0x200>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7fe ff2f 	bl	80006f4 <__aeabi_f2d>
 8001896:	4604      	mov	r4, r0
 8001898:	460d      	mov	r5, r1
 800189a:	4b56      	ldr	r3, [pc, #344]	; (80019f4 <JoystickControl+0x1fc>)
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 80018a2:	4618      	mov	r0, r3
 80018a4:	f7fe ff14 	bl	80006d0 <__aeabi_i2d>
 80018a8:	a34b      	add	r3, pc, #300	; (adr r3, 80019d8 <JoystickControl+0x1e0>)
 80018aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ae:	f7fe fc93 	bl	80001d8 <__aeabi_dmul>
 80018b2:	4602      	mov	r2, r0
 80018b4:	460b      	mov	r3, r1
 80018b6:	4620      	mov	r0, r4
 80018b8:	4629      	mov	r1, r5
 80018ba:	f7fe fdbb 	bl	8000434 <__aeabi_dsub>
 80018be:	4602      	mov	r2, r0
 80018c0:	460b      	mov	r3, r1
 80018c2:	4610      	mov	r0, r2
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7fe ff95 	bl	80007f4 <__aeabi_d2f>
 80018ca:	4603      	mov	r3, r0
 80018cc:	4a4a      	ldr	r2, [pc, #296]	; (80019f8 <JoystickControl+0x200>)
 80018ce:	6013      	str	r3, [r2, #0]
		setposition = (int)round(setposition_f);
 80018d0:	4b49      	ldr	r3, [pc, #292]	; (80019f8 <JoystickControl+0x200>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4618      	mov	r0, r3
 80018d6:	f7fe ff0d 	bl	80006f4 <__aeabi_f2d>
 80018da:	4602      	mov	r2, r0
 80018dc:	460b      	mov	r3, r1
 80018de:	ec43 2b10 	vmov	d0, r2, r3
 80018e2:	f003 ff45 	bl	8005770 <round>
 80018e6:	ec53 2b10 	vmov	r2, r3, d0
 80018ea:	4610      	mov	r0, r2
 80018ec:	4619      	mov	r1, r3
 80018ee:	f7fe ff59 	bl	80007a4 <__aeabi_d2iz>
 80018f2:	ee07 0a90 	vmov	s15, r0
 80018f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018fa:	4b40      	ldr	r3, [pc, #256]	; (80019fc <JoystickControl+0x204>)
 80018fc:	edc3 7a00 	vstr	s15, [r3]
		break;
 8001900:	e066      	b.n	80019d0 <JoystickControl+0x1d8>
		if(XYSwitch[1] > 2150)
 8001902:	4b3c      	ldr	r3, [pc, #240]	; (80019f4 <JoystickControl+0x1fc>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f640 0266 	movw	r2, #2150	; 0x866
 800190a:	4293      	cmp	r3, r2
 800190c:	dd20      	ble.n	8001950 <JoystickControl+0x158>
			setposition_f += XYSwitch[1]*0.0000005;
 800190e:	4b3a      	ldr	r3, [pc, #232]	; (80019f8 <JoystickControl+0x200>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4618      	mov	r0, r3
 8001914:	f7fe feee 	bl	80006f4 <__aeabi_f2d>
 8001918:	4604      	mov	r4, r0
 800191a:	460d      	mov	r5, r1
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <JoystickControl+0x1fc>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4618      	mov	r0, r3
 8001922:	f7fe fed5 	bl	80006d0 <__aeabi_i2d>
 8001926:	a32e      	add	r3, pc, #184	; (adr r3, 80019e0 <JoystickControl+0x1e8>)
 8001928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800192c:	f7fe fc54 	bl	80001d8 <__aeabi_dmul>
 8001930:	4602      	mov	r2, r0
 8001932:	460b      	mov	r3, r1
 8001934:	4620      	mov	r0, r4
 8001936:	4629      	mov	r1, r5
 8001938:	f7fe fd7e 	bl	8000438 <__adddf3>
 800193c:	4602      	mov	r2, r0
 800193e:	460b      	mov	r3, r1
 8001940:	4610      	mov	r0, r2
 8001942:	4619      	mov	r1, r3
 8001944:	f7fe ff56 	bl	80007f4 <__aeabi_d2f>
 8001948:	4603      	mov	r3, r0
 800194a:	4a2b      	ldr	r2, [pc, #172]	; (80019f8 <JoystickControl+0x200>)
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e026      	b.n	800199e <JoystickControl+0x1a6>
		else if(XYSwitch[1] < 2000)
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <JoystickControl+0x1fc>)
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001958:	da21      	bge.n	800199e <JoystickControl+0x1a6>
			setposition_f -= (4096-XYSwitch[1])*0.0000005;
 800195a:	4b27      	ldr	r3, [pc, #156]	; (80019f8 <JoystickControl+0x200>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4618      	mov	r0, r3
 8001960:	f7fe fec8 	bl	80006f4 <__aeabi_f2d>
 8001964:	4604      	mov	r4, r0
 8001966:	460d      	mov	r5, r1
 8001968:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <JoystickControl+0x1fc>)
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
 8001970:	4618      	mov	r0, r3
 8001972:	f7fe fead 	bl	80006d0 <__aeabi_i2d>
 8001976:	a31a      	add	r3, pc, #104	; (adr r3, 80019e0 <JoystickControl+0x1e8>)
 8001978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800197c:	f7fe fc2c 	bl	80001d8 <__aeabi_dmul>
 8001980:	4602      	mov	r2, r0
 8001982:	460b      	mov	r3, r1
 8001984:	4620      	mov	r0, r4
 8001986:	4629      	mov	r1, r5
 8001988:	f7fe fd54 	bl	8000434 <__aeabi_dsub>
 800198c:	4602      	mov	r2, r0
 800198e:	460b      	mov	r3, r1
 8001990:	4610      	mov	r0, r2
 8001992:	4619      	mov	r1, r3
 8001994:	f7fe ff2e 	bl	80007f4 <__aeabi_d2f>
 8001998:	4603      	mov	r3, r0
 800199a:	4a17      	ldr	r2, [pc, #92]	; (80019f8 <JoystickControl+0x200>)
 800199c:	6013      	str	r3, [r2, #0]
		setposition = (int)round(setposition_f);
 800199e:	4b16      	ldr	r3, [pc, #88]	; (80019f8 <JoystickControl+0x200>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7fe fea6 	bl	80006f4 <__aeabi_f2d>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	ec43 2b10 	vmov	d0, r2, r3
 80019b0:	f003 fede 	bl	8005770 <round>
 80019b4:	ec53 2b10 	vmov	r2, r3, d0
 80019b8:	4610      	mov	r0, r2
 80019ba:	4619      	mov	r1, r3
 80019bc:	f7fe fef2 	bl	80007a4 <__aeabi_d2iz>
 80019c0:	ee07 0a90 	vmov	s15, r0
 80019c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019c8:	4b0c      	ldr	r3, [pc, #48]	; (80019fc <JoystickControl+0x204>)
 80019ca:	edc3 7a00 	vstr	s15, [r3]
		break;
 80019ce:	bf00      	nop
}
 80019d0:	bf00      	nop
 80019d2:	bdb0      	pop	{r4, r5, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	88e368f1 	.word	0x88e368f1
 80019dc:	3ef4f8b5 	.word	0x3ef4f8b5
 80019e0:	a0b5ed8d 	.word	0xa0b5ed8d
 80019e4:	3ea0c6f7 	.word	0x3ea0c6f7
 80019e8:	200002ac 	.word	0x200002ac
 80019ec:	200002d0 	.word	0x200002d0
 80019f0:	200002a0 	.word	0x200002a0
 80019f4:	200002b8 	.word	0x200002b8
 80019f8:	200002d4 	.word	0x200002d4
 80019fc:	20000230 	.word	0x20000230

08001a00 <JoystickLocationState>:

void JoystickLocationState()
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
	static int state = 0;
	switch(state)
 8001a04:	4b80      	ldr	r3, [pc, #512]	; (8001c08 <JoystickLocationState+0x208>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b06      	cmp	r3, #6
 8001a0a:	f200 80f8 	bhi.w	8001bfe <JoystickLocationState+0x1fe>
 8001a0e:	a201      	add	r2, pc, #4	; (adr r2, 8001a14 <JoystickLocationState+0x14>)
 8001a10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a14:	08001a31 	.word	0x08001a31
 8001a18:	08001a8d 	.word	0x08001a8d
 8001a1c:	08001acf 	.word	0x08001acf
 8001a20:	08001b0f 	.word	0x08001b0f
 8001a24:	08001b4f 	.word	0x08001b4f
 8001a28:	08001b8f 	.word	0x08001b8f
 8001a2c:	08001bcf 	.word	0x08001bcf
	{
	case 0:
		PickTray.L1[1] = 0;
 8001a30:	4b76      	ldr	r3, [pc, #472]	; (8001c0c <JoystickLocationState+0x20c>)
 8001a32:	f04f 0200 	mov.w	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8001a38:	4b74      	ldr	r3, [pc, #464]	; (8001c0c <JoystickLocationState+0x20c>)
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	60da      	str	r2, [r3, #12]
		PickTray.L3[1] = 0;
 8001a40:	4b72      	ldr	r3, [pc, #456]	; (8001c0c <JoystickLocationState+0x20c>)
 8001a42:	f04f 0200 	mov.w	r2, #0
 8001a46:	615a      	str	r2, [r3, #20]
		PlaceTray.L1[1] = 0;
 8001a48:	4b71      	ldr	r3, [pc, #452]	; (8001c10 <JoystickLocationState+0x210>)
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8001a50:	4b6f      	ldr	r3, [pc, #444]	; (8001c10 <JoystickLocationState+0x210>)
 8001a52:	f04f 0200 	mov.w	r2, #0
 8001a56:	60da      	str	r2, [r3, #12]
		PlaceTray.L3[1] = 0;
 8001a58:	4b6d      	ldr	r3, [pc, #436]	; (8001c10 <JoystickLocationState+0x210>)
 8001a5a:	f04f 0200 	mov.w	r2, #0
 8001a5e:	615a      	str	r2, [r3, #20]
		if (GetPositionButton.flag == 1)
 8001a60:	4b6c      	ldr	r3, [pc, #432]	; (8001c14 <JoystickLocationState+0x214>)
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	f040 80bd 	bne.w	8001be4 <JoystickLocationState+0x1e4>
		{
			PickTray.L1[1] = position;
 8001a6a:	4b6b      	ldr	r3, [pc, #428]	; (8001c18 <JoystickLocationState+0x218>)
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	ee07 3a90 	vmov	s15, r3
 8001a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a78:	4b64      	ldr	r3, [pc, #400]	; (8001c0c <JoystickLocationState+0x20c>)
 8001a7a:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001a7e:	4b65      	ldr	r3, [pc, #404]	; (8001c14 <JoystickLocationState+0x214>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
			state = 1;
 8001a84:	4b60      	ldr	r3, [pc, #384]	; (8001c08 <JoystickLocationState+0x208>)
 8001a86:	2201      	movs	r2, #1
 8001a88:	601a      	str	r2, [r3, #0]
		}
		break;
 8001a8a:	e0ab      	b.n	8001be4 <JoystickLocationState+0x1e4>
	case 1:
		if (GetPositionButton.flag == 1)
 8001a8c:	4b61      	ldr	r3, [pc, #388]	; (8001c14 <JoystickLocationState+0x214>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d110      	bne.n	8001ab6 <JoystickLocationState+0xb6>
		{
			PickTray.L2[1] = position;
 8001a94:	4b60      	ldr	r3, [pc, #384]	; (8001c18 <JoystickLocationState+0x218>)
 8001a96:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9a:	ee07 3a90 	vmov	s15, r3
 8001a9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001aa2:	4b5a      	ldr	r3, [pc, #360]	; (8001c0c <JoystickLocationState+0x20c>)
 8001aa4:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001aa8:	4b5a      	ldr	r3, [pc, #360]	; (8001c14 <JoystickLocationState+0x214>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
			state = 2;
 8001aae:	4b56      	ldr	r3, [pc, #344]	; (8001c08 <JoystickLocationState+0x208>)
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001ab4:	e098      	b.n	8001be8 <JoystickLocationState+0x1e8>
		else if (ResetButton.flag == 1)
 8001ab6:	4b59      	ldr	r3, [pc, #356]	; (8001c1c <JoystickLocationState+0x21c>)
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	f040 8094 	bne.w	8001be8 <JoystickLocationState+0x1e8>
			ResetButton.flag = 0;
 8001ac0:	4b56      	ldr	r3, [pc, #344]	; (8001c1c <JoystickLocationState+0x21c>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	609a      	str	r2, [r3, #8]
			state = 0;
 8001ac6:	4b50      	ldr	r3, [pc, #320]	; (8001c08 <JoystickLocationState+0x208>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	601a      	str	r2, [r3, #0]
		break;
 8001acc:	e08c      	b.n	8001be8 <JoystickLocationState+0x1e8>
	case 2:
		if (GetPositionButton.flag == 1)
 8001ace:	4b51      	ldr	r3, [pc, #324]	; (8001c14 <JoystickLocationState+0x214>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d110      	bne.n	8001af8 <JoystickLocationState+0xf8>
		{
			PickTray.L3[1] = position;
 8001ad6:	4b50      	ldr	r3, [pc, #320]	; (8001c18 <JoystickLocationState+0x218>)
 8001ad8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ae4:	4b49      	ldr	r3, [pc, #292]	; (8001c0c <JoystickLocationState+0x20c>)
 8001ae6:	edc3 7a05 	vstr	s15, [r3, #20]
			GetPositionButton.flag = 0;
 8001aea:	4b4a      	ldr	r3, [pc, #296]	; (8001c14 <JoystickLocationState+0x214>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	609a      	str	r2, [r3, #8]
			state = 3;
 8001af0:	4b45      	ldr	r3, [pc, #276]	; (8001c08 <JoystickLocationState+0x208>)
 8001af2:	2203      	movs	r2, #3
 8001af4:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001af6:	e079      	b.n	8001bec <JoystickLocationState+0x1ec>
		else if (ResetButton.flag == 1)
 8001af8:	4b48      	ldr	r3, [pc, #288]	; (8001c1c <JoystickLocationState+0x21c>)
 8001afa:	689b      	ldr	r3, [r3, #8]
 8001afc:	2b01      	cmp	r3, #1
 8001afe:	d175      	bne.n	8001bec <JoystickLocationState+0x1ec>
			ResetButton.flag = 0;
 8001b00:	4b46      	ldr	r3, [pc, #280]	; (8001c1c <JoystickLocationState+0x21c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	609a      	str	r2, [r3, #8]
			state = 0;
 8001b06:	4b40      	ldr	r3, [pc, #256]	; (8001c08 <JoystickLocationState+0x208>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	601a      	str	r2, [r3, #0]
		break;
 8001b0c:	e06e      	b.n	8001bec <JoystickLocationState+0x1ec>
	case 3:
		if (GetPositionButton.flag == 1)
 8001b0e:	4b41      	ldr	r3, [pc, #260]	; (8001c14 <JoystickLocationState+0x214>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	2b01      	cmp	r3, #1
 8001b14:	d110      	bne.n	8001b38 <JoystickLocationState+0x138>
		{
			PlaceTray.L1[1] = position;
 8001b16:	4b40      	ldr	r3, [pc, #256]	; (8001c18 <JoystickLocationState+0x218>)
 8001b18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b1c:	ee07 3a90 	vmov	s15, r3
 8001b20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b24:	4b3a      	ldr	r3, [pc, #232]	; (8001c10 <JoystickLocationState+0x210>)
 8001b26:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001b2a:	4b3a      	ldr	r3, [pc, #232]	; (8001c14 <JoystickLocationState+0x214>)
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	609a      	str	r2, [r3, #8]
			state = 4;
 8001b30:	4b35      	ldr	r3, [pc, #212]	; (8001c08 <JoystickLocationState+0x208>)
 8001b32:	2204      	movs	r2, #4
 8001b34:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001b36:	e05b      	b.n	8001bf0 <JoystickLocationState+0x1f0>
		else if (ResetButton.flag == 1)
 8001b38:	4b38      	ldr	r3, [pc, #224]	; (8001c1c <JoystickLocationState+0x21c>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	d157      	bne.n	8001bf0 <JoystickLocationState+0x1f0>
			ResetButton.flag = 0;
 8001b40:	4b36      	ldr	r3, [pc, #216]	; (8001c1c <JoystickLocationState+0x21c>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	609a      	str	r2, [r3, #8]
			state = 0;
 8001b46:	4b30      	ldr	r3, [pc, #192]	; (8001c08 <JoystickLocationState+0x208>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	601a      	str	r2, [r3, #0]
		break;
 8001b4c:	e050      	b.n	8001bf0 <JoystickLocationState+0x1f0>
	case 4:
		if (GetPositionButton.flag == 1)
 8001b4e:	4b31      	ldr	r3, [pc, #196]	; (8001c14 <JoystickLocationState+0x214>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b01      	cmp	r3, #1
 8001b54:	d110      	bne.n	8001b78 <JoystickLocationState+0x178>
		{
			PlaceTray.L2[1] = position;
 8001b56:	4b30      	ldr	r3, [pc, #192]	; (8001c18 <JoystickLocationState+0x218>)
 8001b58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b5c:	ee07 3a90 	vmov	s15, r3
 8001b60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b64:	4b2a      	ldr	r3, [pc, #168]	; (8001c10 <JoystickLocationState+0x210>)
 8001b66:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001b6a:	4b2a      	ldr	r3, [pc, #168]	; (8001c14 <JoystickLocationState+0x214>)
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	609a      	str	r2, [r3, #8]
			state = 5;
 8001b70:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <JoystickLocationState+0x208>)
 8001b72:	2205      	movs	r2, #5
 8001b74:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001b76:	e03d      	b.n	8001bf4 <JoystickLocationState+0x1f4>
		else if (ResetButton.flag == 1)
 8001b78:	4b28      	ldr	r3, [pc, #160]	; (8001c1c <JoystickLocationState+0x21c>)
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d139      	bne.n	8001bf4 <JoystickLocationState+0x1f4>
			ResetButton.flag = 0;
 8001b80:	4b26      	ldr	r3, [pc, #152]	; (8001c1c <JoystickLocationState+0x21c>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
			state = 0;
 8001b86:	4b20      	ldr	r3, [pc, #128]	; (8001c08 <JoystickLocationState+0x208>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	601a      	str	r2, [r3, #0]
		break;
 8001b8c:	e032      	b.n	8001bf4 <JoystickLocationState+0x1f4>
	case 5:
		if (GetPositionButton.flag == 1)
 8001b8e:	4b21      	ldr	r3, [pc, #132]	; (8001c14 <JoystickLocationState+0x214>)
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b01      	cmp	r3, #1
 8001b94:	d110      	bne.n	8001bb8 <JoystickLocationState+0x1b8>
		{
			PlaceTray.L3[1] = position;
 8001b96:	4b20      	ldr	r3, [pc, #128]	; (8001c18 <JoystickLocationState+0x218>)
 8001b98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b9c:	ee07 3a90 	vmov	s15, r3
 8001ba0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba4:	4b1a      	ldr	r3, [pc, #104]	; (8001c10 <JoystickLocationState+0x210>)
 8001ba6:	edc3 7a05 	vstr	s15, [r3, #20]
			GetPositionButton.flag = 0;
 8001baa:	4b1a      	ldr	r3, [pc, #104]	; (8001c14 <JoystickLocationState+0x214>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	609a      	str	r2, [r3, #8]
			state = 6;
 8001bb0:	4b15      	ldr	r3, [pc, #84]	; (8001c08 <JoystickLocationState+0x208>)
 8001bb2:	2206      	movs	r2, #6
 8001bb4:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 8001bb6:	e01f      	b.n	8001bf8 <JoystickLocationState+0x1f8>
		else if (ResetButton.flag == 1)
 8001bb8:	4b18      	ldr	r3, [pc, #96]	; (8001c1c <JoystickLocationState+0x21c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b01      	cmp	r3, #1
 8001bbe:	d11b      	bne.n	8001bf8 <JoystickLocationState+0x1f8>
			ResetButton.flag = 0;
 8001bc0:	4b16      	ldr	r3, [pc, #88]	; (8001c1c <JoystickLocationState+0x21c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	609a      	str	r2, [r3, #8]
			state = 0;
 8001bc6:	4b10      	ldr	r3, [pc, #64]	; (8001c08 <JoystickLocationState+0x208>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
		break;
 8001bcc:	e014      	b.n	8001bf8 <JoystickLocationState+0x1f8>
	case 6:
		if (ResetButton.flag == 1)
 8001bce:	4b13      	ldr	r3, [pc, #76]	; (8001c1c <JoystickLocationState+0x21c>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d112      	bne.n	8001bfc <JoystickLocationState+0x1fc>
		{
			ResetButton.flag = 0;
 8001bd6:	4b11      	ldr	r3, [pc, #68]	; (8001c1c <JoystickLocationState+0x21c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	609a      	str	r2, [r3, #8]
			state = 0;
 8001bdc:	4b0a      	ldr	r3, [pc, #40]	; (8001c08 <JoystickLocationState+0x208>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	601a      	str	r2, [r3, #0]
		}
		break;
 8001be2:	e00b      	b.n	8001bfc <JoystickLocationState+0x1fc>
		break;
 8001be4:	bf00      	nop
 8001be6:	e00a      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001be8:	bf00      	nop
 8001bea:	e008      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001bec:	bf00      	nop
 8001bee:	e006      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001bf0:	bf00      	nop
 8001bf2:	e004      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001bf4:	bf00      	nop
 8001bf6:	e002      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001bf8:	bf00      	nop
 8001bfa:	e000      	b.n	8001bfe <JoystickLocationState+0x1fe>
		break;
 8001bfc:	bf00      	nop
	}
}
 8001bfe:	bf00      	nop
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	200002d8 	.word	0x200002d8
 8001c0c:	20000258 	.word	0x20000258
 8001c10:	20000270 	.word	0x20000270
 8001c14:	20000288 	.word	0x20000288
 8001c18:	2000022c 	.word	0x2000022c
 8001c1c:	20000294 	.word	0x20000294

08001c20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c24:	b672      	cpsid	i
}
 8001c26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c28:	e7fe      	b.n	8001c28 <Error_Handler+0x8>
	...

08001c2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b082      	sub	sp, #8
 8001c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c32:	2300      	movs	r3, #0
 8001c34:	607b      	str	r3, [r7, #4]
 8001c36:	4b10      	ldr	r3, [pc, #64]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3a:	4a0f      	ldr	r2, [pc, #60]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c3c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c40:	6453      	str	r3, [r2, #68]	; 0x44
 8001c42:	4b0d      	ldr	r3, [pc, #52]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c46:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c4a:	607b      	str	r3, [r7, #4]
 8001c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	603b      	str	r3, [r7, #0]
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	4a08      	ldr	r2, [pc, #32]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <HAL_MspInit+0x4c>)
 8001c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c66:	603b      	str	r3, [r7, #0]
 8001c68:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001c6a:	2007      	movs	r0, #7
 8001c6c:	f000 ff50 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c70:	bf00      	nop
 8001c72:	3708      	adds	r7, #8
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40023800 	.word	0x40023800

08001c7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b08a      	sub	sp, #40	; 0x28
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c84:	f107 0314 	add.w	r3, r7, #20
 8001c88:	2200      	movs	r2, #0
 8001c8a:	601a      	str	r2, [r3, #0]
 8001c8c:	605a      	str	r2, [r3, #4]
 8001c8e:	609a      	str	r2, [r3, #8]
 8001c90:	60da      	str	r2, [r3, #12]
 8001c92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a2f      	ldr	r2, [pc, #188]	; (8001d58 <HAL_ADC_MspInit+0xdc>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d157      	bne.n	8001d4e <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	613b      	str	r3, [r7, #16]
 8001ca2:	4b2e      	ldr	r3, [pc, #184]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ca6:	4a2d      	ldr	r2, [pc, #180]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001ca8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cac:	6453      	str	r3, [r2, #68]	; 0x44
 8001cae:	4b2b      	ldr	r3, [pc, #172]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	613b      	str	r3, [r7, #16]
 8001cb8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cba:	2300      	movs	r3, #0
 8001cbc:	60fb      	str	r3, [r7, #12]
 8001cbe:	4b27      	ldr	r3, [pc, #156]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	4a26      	ldr	r2, [pc, #152]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001cc4:	f043 0301 	orr.w	r3, r3, #1
 8001cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cca:	4b24      	ldr	r3, [pc, #144]	; (8001d5c <HAL_ADC_MspInit+0xe0>)
 8001ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cce:	f003 0301 	and.w	r3, r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001cda:	2303      	movs	r3, #3
 8001cdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ce2:	f107 0314 	add.w	r3, r7, #20
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	481d      	ldr	r0, [pc, #116]	; (8001d60 <HAL_ADC_MspInit+0xe4>)
 8001cea:	f001 fac3 	bl	8003274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001cee:	4b1d      	ldr	r3, [pc, #116]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001cf0:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_ADC_MspInit+0xec>)
 8001cf2:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001cfa:	4b1a      	ldr	r3, [pc, #104]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d00:	4b18      	ldr	r3, [pc, #96]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001d06:	4b17      	ldr	r3, [pc, #92]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d0c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001d0e:	4b15      	ldr	r3, [pc, #84]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d10:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001d14:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001d16:	4b13      	ldr	r3, [pc, #76]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d18:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001d1c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d20:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d24:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001d26:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d28:	2200      	movs	r2, #0
 8001d2a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d2e:	2200      	movs	r2, #0
 8001d30:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001d32:	480c      	ldr	r0, [pc, #48]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d34:	f000 ff2e 	bl	8002b94 <HAL_DMA_Init>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001d3e:	f7ff ff6f 	bl	8001c20 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d46:	639a      	str	r2, [r3, #56]	; 0x38
 8001d48:	4a06      	ldr	r2, [pc, #24]	; (8001d64 <HAL_ADC_MspInit+0xe8>)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d4e:	bf00      	nop
 8001d50:	3728      	adds	r7, #40	; 0x28
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012000 	.word	0x40012000
 8001d5c:	40023800 	.word	0x40023800
 8001d60:	40020000 	.word	0x40020000
 8001d64:	2000007c 	.word	0x2000007c
 8001d68:	40026410 	.word	0x40026410

08001d6c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a0b      	ldr	r2, [pc, #44]	; (8001da8 <HAL_TIM_PWM_MspInit+0x3c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d10d      	bne.n	8001d9a <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d7e:	2300      	movs	r3, #0
 8001d80:	60fb      	str	r3, [r7, #12]
 8001d82:	4b0a      	ldr	r3, [pc, #40]	; (8001dac <HAL_TIM_PWM_MspInit+0x40>)
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_TIM_PWM_MspInit+0x40>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d8e:	4b07      	ldr	r3, [pc, #28]	; (8001dac <HAL_TIM_PWM_MspInit+0x40>)
 8001d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d92:	f003 0301 	and.w	r3, r3, #1
 8001d96:	60fb      	str	r3, [r7, #12]
 8001d98:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8001d9a:	bf00      	nop
 8001d9c:	3714      	adds	r7, #20
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr
 8001da6:	bf00      	nop
 8001da8:	40010000 	.word	0x40010000
 8001dac:	40023800 	.word	0x40023800

08001db0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08a      	sub	sp, #40	; 0x28
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 0314 	add.w	r3, r7, #20
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a19      	ldr	r2, [pc, #100]	; (8001e34 <HAL_TIM_Encoder_MspInit+0x84>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d12b      	bne.n	8001e2a <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	4b18      	ldr	r3, [pc, #96]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a17      	ldr	r2, [pc, #92]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001ddc:	f043 0302 	orr.w	r3, r3, #2
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b15      	ldr	r3, [pc, #84]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 0302 	and.w	r3, r3, #2
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	4a10      	ldr	r2, [pc, #64]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dfe:	4b0e      	ldr	r3, [pc, #56]	; (8001e38 <HAL_TIM_Encoder_MspInit+0x88>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	60fb      	str	r3, [r7, #12]
 8001e08:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e0a:	23c0      	movs	r3, #192	; 0xc0
 8001e0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e1a:	2302      	movs	r3, #2
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 0314 	add.w	r3, r7, #20
 8001e22:	4619      	mov	r1, r3
 8001e24:	4805      	ldr	r0, [pc, #20]	; (8001e3c <HAL_TIM_Encoder_MspInit+0x8c>)
 8001e26:	f001 fa25 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e2a:	bf00      	nop
 8001e2c:	3728      	adds	r7, #40	; 0x28
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40000400 	.word	0x40000400
 8001e38:	40023800 	.word	0x40023800
 8001e3c:	40020000 	.word	0x40020000

08001e40 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a0e      	ldr	r2, [pc, #56]	; (8001e88 <HAL_TIM_Base_MspInit+0x48>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d115      	bne.n	8001e7e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <HAL_TIM_Base_MspInit+0x4c>)
 8001e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e5a:	4a0c      	ldr	r2, [pc, #48]	; (8001e8c <HAL_TIM_Base_MspInit+0x4c>)
 8001e5c:	f043 0308 	orr.w	r3, r3, #8
 8001e60:	6413      	str	r3, [r2, #64]	; 0x40
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_TIM_Base_MspInit+0x4c>)
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	f003 0308 	and.w	r3, r3, #8
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	2032      	movs	r0, #50	; 0x32
 8001e74:	f000 fe57 	bl	8002b26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001e78:	2032      	movs	r0, #50	; 0x32
 8001e7a:	f000 fe70 	bl	8002b5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40023800 	.word	0x40023800

08001e90 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b088      	sub	sp, #32
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e98:	f107 030c 	add.w	r3, r7, #12
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a12      	ldr	r2, [pc, #72]	; (8001ef8 <HAL_TIM_MspPostInit+0x68>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d11e      	bne.n	8001ef0 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	60bb      	str	r3, [r7, #8]
 8001eb6:	4b11      	ldr	r3, [pc, #68]	; (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eba:	4a10      	ldr	r2, [pc, #64]	; (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001ebc:	f043 0301 	orr.w	r3, r3, #1
 8001ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec2:	4b0e      	ldr	r3, [pc, #56]	; (8001efc <HAL_TIM_MspPostInit+0x6c>)
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001ece:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ed2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ed4:	2302      	movs	r3, #2
 8001ed6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001edc:	2300      	movs	r3, #0
 8001ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee4:	f107 030c 	add.w	r3, r7, #12
 8001ee8:	4619      	mov	r1, r3
 8001eea:	4805      	ldr	r0, [pc, #20]	; (8001f00 <HAL_TIM_MspPostInit+0x70>)
 8001eec:	f001 f9c2 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ef0:	bf00      	nop
 8001ef2:	3720      	adds	r7, #32
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bd80      	pop	{r7, pc}
 8001ef8:	40010000 	.word	0x40010000
 8001efc:	40023800 	.word	0x40023800
 8001f00:	40020000 	.word	0x40020000

08001f04 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a19      	ldr	r2, [pc, #100]	; (8001f88 <HAL_UART_MspInit+0x84>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d12b      	bne.n	8001f7e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001f26:	2300      	movs	r3, #0
 8001f28:	613b      	str	r3, [r7, #16]
 8001f2a:	4b18      	ldr	r3, [pc, #96]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2e:	4a17      	ldr	r2, [pc, #92]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001f34:	6413      	str	r3, [r2, #64]	; 0x40
 8001f36:	4b15      	ldr	r3, [pc, #84]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f3e:	613b      	str	r3, [r7, #16]
 8001f40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f42:	2300      	movs	r3, #0
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4a:	4a10      	ldr	r2, [pc, #64]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	6313      	str	r3, [r2, #48]	; 0x30
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <HAL_UART_MspInit+0x88>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001f5e:	230c      	movs	r3, #12
 8001f60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f62:	2302      	movs	r3, #2
 8001f64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f66:	2300      	movs	r3, #0
 8001f68:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001f6e:	2307      	movs	r3, #7
 8001f70:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f72:	f107 0314 	add.w	r3, r7, #20
 8001f76:	4619      	mov	r1, r3
 8001f78:	4805      	ldr	r0, [pc, #20]	; (8001f90 <HAL_UART_MspInit+0x8c>)
 8001f7a:	f001 f97b 	bl	8003274 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001f7e:	bf00      	nop
 8001f80:	3728      	adds	r7, #40	; 0x28
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop
 8001f88:	40004400 	.word	0x40004400
 8001f8c:	40023800 	.word	0x40023800
 8001f90:	40020000 	.word	0x40020000

08001f94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001f98:	e7fe      	b.n	8001f98 <NMI_Handler+0x4>

08001f9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f9a:	b480      	push	{r7}
 8001f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f9e:	e7fe      	b.n	8001f9e <HardFault_Handler+0x4>

08001fa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fa4:	e7fe      	b.n	8001fa4 <MemManage_Handler+0x4>

08001fa6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fa6:	b480      	push	{r7}
 8001fa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001faa:	e7fe      	b.n	8001faa <BusFault_Handler+0x4>

08001fac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fb0:	e7fe      	b.n	8001fb0 <UsageFault_Handler+0x4>

08001fb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fb2:	b480      	push	{r7}
 8001fb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fb6:	bf00      	nop
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fbe:	4770      	bx	lr

08001fc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fc4:	bf00      	nop
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fcc:	4770      	bx	lr

08001fce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fce:	b480      	push	{r7}
 8001fd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fd2:	bf00      	nop
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001fe0:	f000 f8a4 	bl	800212c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001fe4:	bf00      	nop
 8001fe6:	bd80      	pop	{r7, pc}

08001fe8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001fec:	4802      	ldr	r0, [pc, #8]	; (8001ff8 <TIM5_IRQHandler+0x10>)
 8001fee:	f002 fa6d 	bl	80044cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	2000016c 	.word	0x2000016c

08001ffc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002000:	4802      	ldr	r0, [pc, #8]	; (800200c <DMA2_Stream0_IRQHandler+0x10>)
 8002002:	f000 fecd 	bl	8002da0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	2000007c 	.word	0x2000007c

08002010 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002010:	b480      	push	{r7}
 8002012:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <SystemInit+0x20>)
 8002016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800201a:	4a05      	ldr	r2, [pc, #20]	; (8002030 <SystemInit+0x20>)
 800201c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002020:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002024:	bf00      	nop
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr
 800202e:	bf00      	nop
 8002030:	e000ed00 	.word	0xe000ed00

08002034 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002034:	f8df d034 	ldr.w	sp, [pc, #52]	; 800206c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002038:	480d      	ldr	r0, [pc, #52]	; (8002070 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800203a:	490e      	ldr	r1, [pc, #56]	; (8002074 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800203e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002040:	e002      	b.n	8002048 <LoopCopyDataInit>

08002042 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002042:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002044:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002046:	3304      	adds	r3, #4

08002048 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002048:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800204a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800204c:	d3f9      	bcc.n	8002042 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800204e:	4a0b      	ldr	r2, [pc, #44]	; (800207c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002050:	4c0b      	ldr	r4, [pc, #44]	; (8002080 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002052:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002054:	e001      	b.n	800205a <LoopFillZerobss>

08002056 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002056:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002058:	3204      	adds	r2, #4

0800205a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800205a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800205c:	d3fb      	bcc.n	8002056 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800205e:	f7ff ffd7 	bl	8002010 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002062:	f003 fb59 	bl	8005718 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002066:	f7fe fea5 	bl	8000db4 <main>
  bx  lr    
 800206a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800206c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002070:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002074:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002078:	08005844 	.word	0x08005844
  ldr r2, =_sbss
 800207c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8002080:	200002e0 	.word	0x200002e0

08002084 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002084:	e7fe      	b.n	8002084 <ADC_IRQHandler>
	...

08002088 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800208c:	4b0e      	ldr	r3, [pc, #56]	; (80020c8 <HAL_Init+0x40>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a0d      	ldr	r2, [pc, #52]	; (80020c8 <HAL_Init+0x40>)
 8002092:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002096:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002098:	4b0b      	ldr	r3, [pc, #44]	; (80020c8 <HAL_Init+0x40>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a0a      	ldr	r2, [pc, #40]	; (80020c8 <HAL_Init+0x40>)
 800209e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020a4:	4b08      	ldr	r3, [pc, #32]	; (80020c8 <HAL_Init+0x40>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <HAL_Init+0x40>)
 80020aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020b0:	2003      	movs	r0, #3
 80020b2:	f000 fd2d 	bl	8002b10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020b6:	2000      	movs	r0, #0
 80020b8:	f000 f808 	bl	80020cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020bc:	f7ff fdb6 	bl	8001c2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020c0:	2300      	movs	r3, #0
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop
 80020c8:	40023c00 	.word	0x40023c00

080020cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b082      	sub	sp, #8
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020d4:	4b12      	ldr	r3, [pc, #72]	; (8002120 <HAL_InitTick+0x54>)
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	4b12      	ldr	r3, [pc, #72]	; (8002124 <HAL_InitTick+0x58>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	4619      	mov	r1, r3
 80020de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80020e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80020ea:	4618      	mov	r0, r3
 80020ec:	f000 fd45 	bl	8002b7a <HAL_SYSTICK_Config>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020f6:	2301      	movs	r3, #1
 80020f8:	e00e      	b.n	8002118 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2b0f      	cmp	r3, #15
 80020fe:	d80a      	bhi.n	8002116 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002100:	2200      	movs	r2, #0
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	f04f 30ff 	mov.w	r0, #4294967295
 8002108:	f000 fd0d 	bl	8002b26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800210c:	4a06      	ldr	r2, [pc, #24]	; (8002128 <HAL_InitTick+0x5c>)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002112:	2300      	movs	r3, #0
 8002114:	e000      	b.n	8002118 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
}
 8002118:	4618      	mov	r0, r3
 800211a:	3708      	adds	r7, #8
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	20000008 	.word	0x20000008
 8002124:	20000010 	.word	0x20000010
 8002128:	2000000c 	.word	0x2000000c

0800212c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800212c:	b480      	push	{r7}
 800212e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002130:	4b06      	ldr	r3, [pc, #24]	; (800214c <HAL_IncTick+0x20>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	461a      	mov	r2, r3
 8002136:	4b06      	ldr	r3, [pc, #24]	; (8002150 <HAL_IncTick+0x24>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4413      	add	r3, r2
 800213c:	4a04      	ldr	r2, [pc, #16]	; (8002150 <HAL_IncTick+0x24>)
 800213e:	6013      	str	r3, [r2, #0]
}
 8002140:	bf00      	nop
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr
 800214a:	bf00      	nop
 800214c:	20000010 	.word	0x20000010
 8002150:	200002dc 	.word	0x200002dc

08002154 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return uwTick;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_GetTick+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	200002dc 	.word	0x200002dc

0800216c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b084      	sub	sp, #16
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002174:	2300      	movs	r3, #0
 8002176:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e033      	b.n	80021ea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f7ff fd76 	bl	8001c7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a2:	f003 0310 	and.w	r3, r3, #16
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d118      	bne.n	80021dc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b2:	f023 0302 	bic.w	r3, r3, #2
 80021b6:	f043 0202 	orr.w	r2, r3, #2
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f000 fa58 	bl	8002674 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2200      	movs	r2, #0
 80021c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	f023 0303 	bic.w	r3, r3, #3
 80021d2:	f043 0201 	orr.w	r2, r3, #1
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
 80021da:	e001      	b.n	80021e0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3710      	adds	r7, #16
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}
	...

080021f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b086      	sub	sp, #24
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002200:	2300      	movs	r3, #0
 8002202:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_ADC_Start_DMA+0x1e>
 800220e:	2302      	movs	r3, #2
 8002210:	e0ce      	b.n	80023b0 <HAL_ADC_Start_DMA+0x1bc>
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	f003 0301 	and.w	r3, r3, #1
 8002224:	2b01      	cmp	r3, #1
 8002226:	d018      	beq.n	800225a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	689a      	ldr	r2, [r3, #8]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f042 0201 	orr.w	r2, r2, #1
 8002236:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002238:	4b5f      	ldr	r3, [pc, #380]	; (80023b8 <HAL_ADC_Start_DMA+0x1c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a5f      	ldr	r2, [pc, #380]	; (80023bc <HAL_ADC_Start_DMA+0x1c8>)
 800223e:	fba2 2303 	umull	r2, r3, r2, r3
 8002242:	0c9a      	lsrs	r2, r3, #18
 8002244:	4613      	mov	r3, r2
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	4413      	add	r3, r2
 800224a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800224c:	e002      	b.n	8002254 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	3b01      	subs	r3, #1
 8002252:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d1f9      	bne.n	800224e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002264:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002268:	d107      	bne.n	800227a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	689a      	ldr	r2, [r3, #8]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002278:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 0301 	and.w	r3, r3, #1
 8002284:	2b01      	cmp	r3, #1
 8002286:	f040 8086 	bne.w	8002396 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002292:	f023 0301 	bic.w	r3, r3, #1
 8002296:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d007      	beq.n	80022bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80022b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80022c8:	d106      	bne.n	80022d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ce:	f023 0206 	bic.w	r2, r3, #6
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	645a      	str	r2, [r3, #68]	; 0x44
 80022d6:	e002      	b.n	80022de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2200      	movs	r2, #0
 80022dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022e6:	4b36      	ldr	r3, [pc, #216]	; (80023c0 <HAL_ADC_Start_DMA+0x1cc>)
 80022e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ee:	4a35      	ldr	r2, [pc, #212]	; (80023c4 <HAL_ADC_Start_DMA+0x1d0>)
 80022f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022f6:	4a34      	ldr	r2, [pc, #208]	; (80023c8 <HAL_ADC_Start_DMA+0x1d4>)
 80022f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022fe:	4a33      	ldr	r2, [pc, #204]	; (80023cc <HAL_ADC_Start_DMA+0x1d8>)
 8002300:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800230a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685a      	ldr	r2, [r3, #4]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800231a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	689a      	ldr	r2, [r3, #8]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800232a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	334c      	adds	r3, #76	; 0x4c
 8002336:	4619      	mov	r1, r3
 8002338:	68ba      	ldr	r2, [r7, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f000 fcd8 	bl	8002cf0 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 031f 	and.w	r3, r3, #31
 8002348:	2b00      	cmp	r3, #0
 800234a:	d10f      	bne.n	800236c <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002356:	2b00      	cmp	r3, #0
 8002358:	d129      	bne.n	80023ae <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002368:	609a      	str	r2, [r3, #8]
 800236a:	e020      	b.n	80023ae <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a17      	ldr	r2, [pc, #92]	; (80023d0 <HAL_ADC_Start_DMA+0x1dc>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d11b      	bne.n	80023ae <HAL_ADC_Start_DMA+0x1ba>
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d114      	bne.n	80023ae <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002392:	609a      	str	r2, [r3, #8]
 8002394:	e00b      	b.n	80023ae <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f043 0210 	orr.w	r2, r3, #16
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a6:	f043 0201 	orr.w	r2, r3, #1
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80023ae:	2300      	movs	r3, #0
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}
 80023b8:	20000008 	.word	0x20000008
 80023bc:	431bde83 	.word	0x431bde83
 80023c0:	40012300 	.word	0x40012300
 80023c4:	0800286d 	.word	0x0800286d
 80023c8:	08002927 	.word	0x08002927
 80023cc:	08002943 	.word	0x08002943
 80023d0:	40012000 	.word	0x40012000

080023d4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80023dc:	bf00      	nop
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80023f0:	bf00      	nop
 80023f2:	370c      	adds	r7, #12
 80023f4:	46bd      	mov	sp, r7
 80023f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fa:	4770      	bx	lr

080023fc <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80023fc:	b480      	push	{r7}
 80023fe:	b083      	sub	sp, #12
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002404:	bf00      	nop
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002410:	b480      	push	{r7}
 8002412:	b085      	sub	sp, #20
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002424:	2b01      	cmp	r3, #1
 8002426:	d101      	bne.n	800242c <HAL_ADC_ConfigChannel+0x1c>
 8002428:	2302      	movs	r3, #2
 800242a:	e113      	b.n	8002654 <HAL_ADC_ConfigChannel+0x244>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002434:	683b      	ldr	r3, [r7, #0]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b09      	cmp	r3, #9
 800243a:	d925      	bls.n	8002488 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	68d9      	ldr	r1, [r3, #12]
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	4613      	mov	r3, r2
 800244c:	005b      	lsls	r3, r3, #1
 800244e:	4413      	add	r3, r2
 8002450:	3b1e      	subs	r3, #30
 8002452:	2207      	movs	r2, #7
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	43da      	mvns	r2, r3
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	400a      	ands	r2, r1
 8002460:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68d9      	ldr	r1, [r3, #12]
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	689a      	ldr	r2, [r3, #8]
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	b29b      	uxth	r3, r3
 8002472:	4618      	mov	r0, r3
 8002474:	4603      	mov	r3, r0
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	4403      	add	r3, r0
 800247a:	3b1e      	subs	r3, #30
 800247c:	409a      	lsls	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	60da      	str	r2, [r3, #12]
 8002486:	e022      	b.n	80024ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6919      	ldr	r1, [r3, #16]
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	b29b      	uxth	r3, r3
 8002494:	461a      	mov	r2, r3
 8002496:	4613      	mov	r3, r2
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4413      	add	r3, r2
 800249c:	2207      	movs	r2, #7
 800249e:	fa02 f303 	lsl.w	r3, r2, r3
 80024a2:	43da      	mvns	r2, r3
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	400a      	ands	r2, r1
 80024aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	6919      	ldr	r1, [r3, #16]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	689a      	ldr	r2, [r3, #8]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	4618      	mov	r0, r3
 80024be:	4603      	mov	r3, r0
 80024c0:	005b      	lsls	r3, r3, #1
 80024c2:	4403      	add	r3, r0
 80024c4:	409a      	lsls	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	430a      	orrs	r2, r1
 80024cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b06      	cmp	r3, #6
 80024d4:	d824      	bhi.n	8002520 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685a      	ldr	r2, [r3, #4]
 80024e0:	4613      	mov	r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	4413      	add	r3, r2
 80024e6:	3b05      	subs	r3, #5
 80024e8:	221f      	movs	r2, #31
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43da      	mvns	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	400a      	ands	r2, r1
 80024f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	b29b      	uxth	r3, r3
 8002504:	4618      	mov	r0, r3
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685a      	ldr	r2, [r3, #4]
 800250a:	4613      	mov	r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	4413      	add	r3, r2
 8002510:	3b05      	subs	r3, #5
 8002512:	fa00 f203 	lsl.w	r2, r0, r3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	430a      	orrs	r2, r1
 800251c:	635a      	str	r2, [r3, #52]	; 0x34
 800251e:	e04c      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	2b0c      	cmp	r3, #12
 8002526:	d824      	bhi.n	8002572 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	685a      	ldr	r2, [r3, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	009b      	lsls	r3, r3, #2
 8002536:	4413      	add	r3, r2
 8002538:	3b23      	subs	r3, #35	; 0x23
 800253a:	221f      	movs	r2, #31
 800253c:	fa02 f303 	lsl.w	r3, r2, r3
 8002540:	43da      	mvns	r2, r3
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	400a      	ands	r2, r1
 8002548:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	b29b      	uxth	r3, r3
 8002556:	4618      	mov	r0, r3
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685a      	ldr	r2, [r3, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	4413      	add	r3, r2
 8002562:	3b23      	subs	r3, #35	; 0x23
 8002564:	fa00 f203 	lsl.w	r2, r0, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	430a      	orrs	r2, r1
 800256e:	631a      	str	r2, [r3, #48]	; 0x30
 8002570:	e023      	b.n	80025ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	4613      	mov	r3, r2
 800257e:	009b      	lsls	r3, r3, #2
 8002580:	4413      	add	r3, r2
 8002582:	3b41      	subs	r3, #65	; 0x41
 8002584:	221f      	movs	r2, #31
 8002586:	fa02 f303 	lsl.w	r3, r2, r3
 800258a:	43da      	mvns	r2, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	400a      	ands	r2, r1
 8002592:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	b29b      	uxth	r3, r3
 80025a0:	4618      	mov	r0, r3
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	4613      	mov	r3, r2
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	3b41      	subs	r3, #65	; 0x41
 80025ae:	fa00 f203 	lsl.w	r2, r0, r3
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	430a      	orrs	r2, r1
 80025b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_ADC_ConfigChannel+0x250>)
 80025bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a28      	ldr	r2, [pc, #160]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d10f      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
 80025c8:	683b      	ldr	r3, [r7, #0]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2b12      	cmp	r3, #18
 80025ce:	d10b      	bne.n	80025e8 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a1d      	ldr	r2, [pc, #116]	; (8002664 <HAL_ADC_ConfigChannel+0x254>)
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d12b      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4a1c      	ldr	r2, [pc, #112]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_ADC_ConfigChannel+0x1f4>
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2b11      	cmp	r3, #17
 8002602:	d122      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a11      	ldr	r2, [pc, #68]	; (8002668 <HAL_ADC_ConfigChannel+0x258>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d111      	bne.n	800264a <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002626:	4b11      	ldr	r3, [pc, #68]	; (800266c <HAL_ADC_ConfigChannel+0x25c>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a11      	ldr	r2, [pc, #68]	; (8002670 <HAL_ADC_ConfigChannel+0x260>)
 800262c:	fba2 2303 	umull	r2, r3, r2, r3
 8002630:	0c9a      	lsrs	r2, r3, #18
 8002632:	4613      	mov	r3, r2
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	005b      	lsls	r3, r3, #1
 800263a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800263c:	e002      	b.n	8002644 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800263e:	68bb      	ldr	r3, [r7, #8]
 8002640:	3b01      	subs	r3, #1
 8002642:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f9      	bne.n	800263e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr
 8002660:	40012300 	.word	0x40012300
 8002664:	40012000 	.word	0x40012000
 8002668:	10000012 	.word	0x10000012
 800266c:	20000008 	.word	0x20000008
 8002670:	431bde83 	.word	0x431bde83

08002674 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002674:	b480      	push	{r7}
 8002676:	b085      	sub	sp, #20
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800267c:	4b79      	ldr	r3, [pc, #484]	; (8002864 <ADC_Init+0x1f0>)
 800267e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685a      	ldr	r2, [r3, #4]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	431a      	orrs	r2, r3
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	685a      	ldr	r2, [r3, #4]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80026a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6859      	ldr	r1, [r3, #4]
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	691b      	ldr	r3, [r3, #16]
 80026b4:	021a      	lsls	r2, r3, #8
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	430a      	orrs	r2, r1
 80026bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	685a      	ldr	r2, [r3, #4]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80026cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	6859      	ldr	r1, [r3, #4]
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	430a      	orrs	r2, r1
 80026de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	689a      	ldr	r2, [r3, #8]
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	6899      	ldr	r1, [r3, #8]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68da      	ldr	r2, [r3, #12]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	430a      	orrs	r2, r1
 8002700:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002706:	4a58      	ldr	r2, [pc, #352]	; (8002868 <ADC_Init+0x1f4>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d022      	beq.n	8002752 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689a      	ldr	r2, [r3, #8]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800271a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6899      	ldr	r1, [r3, #8]
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	430a      	orrs	r2, r1
 800272c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800273c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	6899      	ldr	r1, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e00f      	b.n	8002772 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002760:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689a      	ldr	r2, [r3, #8]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002770:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689a      	ldr	r2, [r3, #8]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0202 	bic.w	r2, r2, #2
 8002780:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	6899      	ldr	r1, [r3, #8]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	7e1b      	ldrb	r3, [r3, #24]
 800278c:	005a      	lsls	r2, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	430a      	orrs	r2, r1
 8002794:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f893 3020 	ldrb.w	r3, [r3, #32]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d01b      	beq.n	80027d8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	685a      	ldr	r2, [r3, #4]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80027ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685a      	ldr	r2, [r3, #4]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80027be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	6859      	ldr	r1, [r3, #4]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ca:	3b01      	subs	r3, #1
 80027cc:	035a      	lsls	r2, r3, #13
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	430a      	orrs	r2, r1
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	e007      	b.n	80027e8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80027e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80027f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	3b01      	subs	r3, #1
 8002804:	051a      	lsls	r2, r3, #20
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	430a      	orrs	r2, r1
 800280c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	689a      	ldr	r2, [r3, #8]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800281c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	6899      	ldr	r1, [r3, #8]
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800282a:	025a      	lsls	r2, r3, #9
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	430a      	orrs	r2, r1
 8002832:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689a      	ldr	r2, [r3, #8]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002842:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	6899      	ldr	r1, [r3, #8]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	029a      	lsls	r2, r3, #10
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	609a      	str	r2, [r3, #8]
}
 8002858:	bf00      	nop
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	40012300 	.word	0x40012300
 8002868:	0f000001 	.word	0x0f000001

0800286c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800286c:	b580      	push	{r7, lr}
 800286e:	b084      	sub	sp, #16
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002882:	2b00      	cmp	r3, #0
 8002884:	d13c      	bne.n	8002900 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d12b      	bne.n	80028f8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d127      	bne.n	80028f8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ae:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d006      	beq.n	80028c4 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d119      	bne.n	80028f8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	685a      	ldr	r2, [r3, #4]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f022 0220 	bic.w	r2, r2, #32
 80028d2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d105      	bne.n	80028f8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f0:	f043 0201 	orr.w	r2, r3, #1
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80028f8:	68f8      	ldr	r0, [r7, #12]
 80028fa:	f7ff fd6b 	bl	80023d4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80028fe:	e00e      	b.n	800291e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002904:	f003 0310 	and.w	r3, r3, #16
 8002908:	2b00      	cmp	r3, #0
 800290a:	d003      	beq.n	8002914 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800290c:	68f8      	ldr	r0, [r7, #12]
 800290e:	f7ff fd75 	bl	80023fc <HAL_ADC_ErrorCallback>
}
 8002912:	e004      	b.n	800291e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	4798      	blx	r3
}
 800291e:	bf00      	nop
 8002920:	3710      	adds	r7, #16
 8002922:	46bd      	mov	sp, r7
 8002924:	bd80      	pop	{r7, pc}

08002926 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002926:	b580      	push	{r7, lr}
 8002928:	b084      	sub	sp, #16
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002932:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002934:	68f8      	ldr	r0, [r7, #12]
 8002936:	f7ff fd57 	bl	80023e8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800293a:	bf00      	nop
 800293c:	3710      	adds	r7, #16
 800293e:	46bd      	mov	sp, r7
 8002940:	bd80      	pop	{r7, pc}

08002942 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8002942:	b580      	push	{r7, lr}
 8002944:	b084      	sub	sp, #16
 8002946:	af00      	add	r7, sp, #0
 8002948:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800294e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	2240      	movs	r2, #64	; 0x40
 8002954:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295a:	f043 0204 	orr.w	r2, r3, #4
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002962:	68f8      	ldr	r0, [r7, #12]
 8002964:	f7ff fd4a 	bl	80023fc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002968:	bf00      	nop
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002970:	b480      	push	{r7}
 8002972:	b085      	sub	sp, #20
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800298c:	4013      	ands	r3, r2
 800298e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800299c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80029a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80029a2:	4a04      	ldr	r2, [pc, #16]	; (80029b4 <__NVIC_SetPriorityGrouping+0x44>)
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	60d3      	str	r3, [r2, #12]
}
 80029a8:	bf00      	nop
 80029aa:	3714      	adds	r7, #20
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr
 80029b4:	e000ed00 	.word	0xe000ed00

080029b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029b8:	b480      	push	{r7}
 80029ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029bc:	4b04      	ldr	r3, [pc, #16]	; (80029d0 <__NVIC_GetPriorityGrouping+0x18>)
 80029be:	68db      	ldr	r3, [r3, #12]
 80029c0:	0a1b      	lsrs	r3, r3, #8
 80029c2:	f003 0307 	and.w	r3, r3, #7
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr
 80029d0:	e000ed00 	.word	0xe000ed00

080029d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	4603      	mov	r3, r0
 80029dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	db0b      	blt.n	80029fe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029e6:	79fb      	ldrb	r3, [r7, #7]
 80029e8:	f003 021f 	and.w	r2, r3, #31
 80029ec:	4907      	ldr	r1, [pc, #28]	; (8002a0c <__NVIC_EnableIRQ+0x38>)
 80029ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029f2:	095b      	lsrs	r3, r3, #5
 80029f4:	2001      	movs	r0, #1
 80029f6:	fa00 f202 	lsl.w	r2, r0, r2
 80029fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	e000e100 	.word	0xe000e100

08002a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b083      	sub	sp, #12
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	4603      	mov	r3, r0
 8002a18:	6039      	str	r1, [r7, #0]
 8002a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	db0a      	blt.n	8002a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	b2da      	uxtb	r2, r3
 8002a28:	490c      	ldr	r1, [pc, #48]	; (8002a5c <__NVIC_SetPriority+0x4c>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	0112      	lsls	r2, r2, #4
 8002a30:	b2d2      	uxtb	r2, r2
 8002a32:	440b      	add	r3, r1
 8002a34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a38:	e00a      	b.n	8002a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	b2da      	uxtb	r2, r3
 8002a3e:	4908      	ldr	r1, [pc, #32]	; (8002a60 <__NVIC_SetPriority+0x50>)
 8002a40:	79fb      	ldrb	r3, [r7, #7]
 8002a42:	f003 030f 	and.w	r3, r3, #15
 8002a46:	3b04      	subs	r3, #4
 8002a48:	0112      	lsls	r2, r2, #4
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	761a      	strb	r2, [r3, #24]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	e000e100 	.word	0xe000e100
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b089      	sub	sp, #36	; 0x24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f003 0307 	and.w	r3, r3, #7
 8002a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	f1c3 0307 	rsb	r3, r3, #7
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	bf28      	it	cs
 8002a82:	2304      	movcs	r3, #4
 8002a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	3304      	adds	r3, #4
 8002a8a:	2b06      	cmp	r3, #6
 8002a8c:	d902      	bls.n	8002a94 <NVIC_EncodePriority+0x30>
 8002a8e:	69fb      	ldr	r3, [r7, #28]
 8002a90:	3b03      	subs	r3, #3
 8002a92:	e000      	b.n	8002a96 <NVIC_EncodePriority+0x32>
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a98:	f04f 32ff 	mov.w	r2, #4294967295
 8002a9c:	69bb      	ldr	r3, [r7, #24]
 8002a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa2:	43da      	mvns	r2, r3
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002aac:	f04f 31ff 	mov.w	r1, #4294967295
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ab6:	43d9      	mvns	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002abc:	4313      	orrs	r3, r2
         );
}
 8002abe:	4618      	mov	r0, r3
 8002ac0:	3724      	adds	r7, #36	; 0x24
 8002ac2:	46bd      	mov	sp, r7
 8002ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac8:	4770      	bx	lr
	...

08002acc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b082      	sub	sp, #8
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002adc:	d301      	bcc.n	8002ae2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e00f      	b.n	8002b02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ae2:	4a0a      	ldr	r2, [pc, #40]	; (8002b0c <SysTick_Config+0x40>)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	3b01      	subs	r3, #1
 8002ae8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aea:	210f      	movs	r1, #15
 8002aec:	f04f 30ff 	mov.w	r0, #4294967295
 8002af0:	f7ff ff8e 	bl	8002a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002af4:	4b05      	ldr	r3, [pc, #20]	; (8002b0c <SysTick_Config+0x40>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002afa:	4b04      	ldr	r3, [pc, #16]	; (8002b0c <SysTick_Config+0x40>)
 8002afc:	2207      	movs	r2, #7
 8002afe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b00:	2300      	movs	r3, #0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}
 8002b0a:	bf00      	nop
 8002b0c:	e000e010 	.word	0xe000e010

08002b10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b082      	sub	sp, #8
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f7ff ff29 	bl	8002970 <__NVIC_SetPriorityGrouping>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}

08002b26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b26:	b580      	push	{r7, lr}
 8002b28:	b086      	sub	sp, #24
 8002b2a:	af00      	add	r7, sp, #0
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	60b9      	str	r1, [r7, #8]
 8002b30:	607a      	str	r2, [r7, #4]
 8002b32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b34:	2300      	movs	r3, #0
 8002b36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b38:	f7ff ff3e 	bl	80029b8 <__NVIC_GetPriorityGrouping>
 8002b3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68b9      	ldr	r1, [r7, #8]
 8002b42:	6978      	ldr	r0, [r7, #20]
 8002b44:	f7ff ff8e 	bl	8002a64 <NVIC_EncodePriority>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff5d 	bl	8002a10 <__NVIC_SetPriority>
}
 8002b56:	bf00      	nop
 8002b58:	3718      	adds	r7, #24
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	4603      	mov	r3, r0
 8002b66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7ff ff31 	bl	80029d4 <__NVIC_EnableIRQ>
}
 8002b72:	bf00      	nop
 8002b74:	3708      	adds	r7, #8
 8002b76:	46bd      	mov	sp, r7
 8002b78:	bd80      	pop	{r7, pc}

08002b7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b7a:	b580      	push	{r7, lr}
 8002b7c:	b082      	sub	sp, #8
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f7ff ffa2 	bl	8002acc <SysTick_Config>
 8002b88:	4603      	mov	r3, r0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3708      	adds	r7, #8
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b086      	sub	sp, #24
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002ba0:	f7ff fad8 	bl	8002154 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d101      	bne.n	8002bb0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e099      	b.n	8002ce4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	681a      	ldr	r2, [r3, #0]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f022 0201 	bic.w	r2, r2, #1
 8002bce:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bd0:	e00f      	b.n	8002bf2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002bd2:	f7ff fabf 	bl	8002154 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	693b      	ldr	r3, [r7, #16]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b05      	cmp	r3, #5
 8002bde:	d908      	bls.n	8002bf2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2220      	movs	r2, #32
 8002be4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2203      	movs	r2, #3
 8002bea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e078      	b.n	8002ce4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1e8      	bne.n	8002bd2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002c08:	697a      	ldr	r2, [r7, #20]
 8002c0a:	4b38      	ldr	r3, [pc, #224]	; (8002cec <HAL_DMA_Init+0x158>)
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002c2a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	699b      	ldr	r3, [r3, #24]
 8002c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002c36:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6a1b      	ldr	r3, [r3, #32]
 8002c3c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002c3e:	697a      	ldr	r2, [r7, #20]
 8002c40:	4313      	orrs	r3, r2
 8002c42:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d107      	bne.n	8002c5c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c54:	4313      	orrs	r3, r2
 8002c56:	697a      	ldr	r2, [r7, #20]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	697a      	ldr	r2, [r7, #20]
 8002c62:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695b      	ldr	r3, [r3, #20]
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	f023 0307 	bic.w	r3, r3, #7
 8002c72:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c78:	697a      	ldr	r2, [r7, #20]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d117      	bne.n	8002cb6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d00e      	beq.n	8002cb6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002c98:	6878      	ldr	r0, [r7, #4]
 8002c9a:	f000 fa6f 	bl	800317c <DMA_CheckFifoParam>
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d008      	beq.n	8002cb6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2240      	movs	r2, #64	; 0x40
 8002ca8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e016      	b.n	8002ce4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa26 	bl	8003110 <DMA_CalcBaseAndBitshift>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ccc:	223f      	movs	r2, #63	; 0x3f
 8002cce:	409a      	lsls	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
}
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	3718      	adds	r7, #24
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	bd80      	pop	{r7, pc}
 8002cec:	f010803f 	.word	0xf010803f

08002cf0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
 8002cfc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d06:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d101      	bne.n	8002d16 <HAL_DMA_Start_IT+0x26>
 8002d12:	2302      	movs	r3, #2
 8002d14:	e040      	b.n	8002d98 <HAL_DMA_Start_IT+0xa8>
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2201      	movs	r2, #1
 8002d1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d12f      	bne.n	8002d8a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2200      	movs	r2, #0
 8002d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	68b9      	ldr	r1, [r7, #8]
 8002d3e:	68f8      	ldr	r0, [r7, #12]
 8002d40:	f000 f9b8 	bl	80030b4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	223f      	movs	r2, #63	; 0x3f
 8002d4a:	409a      	lsls	r2, r3
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	f042 0216 	orr.w	r2, r2, #22
 8002d5e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d007      	beq.n	8002d78 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f042 0208 	orr.w	r2, r2, #8
 8002d76:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f042 0201 	orr.w	r2, r2, #1
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	e005      	b.n	8002d96 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
 8002d94:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002d96:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3718      	adds	r7, #24
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b086      	sub	sp, #24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002da8:	2300      	movs	r3, #0
 8002daa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002dac:	4b8e      	ldr	r3, [pc, #568]	; (8002fe8 <HAL_DMA_IRQHandler+0x248>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a8e      	ldr	r2, [pc, #568]	; (8002fec <HAL_DMA_IRQHandler+0x24c>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0a9b      	lsrs	r3, r3, #10
 8002db8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dbe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dca:	2208      	movs	r2, #8
 8002dcc:	409a      	lsls	r2, r3
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d01a      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d013      	beq.n	8002e0c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0204 	bic.w	r2, r2, #4
 8002df2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df8:	2208      	movs	r2, #8
 8002dfa:	409a      	lsls	r2, r3
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e10:	2201      	movs	r2, #1
 8002e12:	409a      	lsls	r2, r3
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4013      	ands	r3, r2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d012      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	2201      	movs	r2, #1
 8002e30:	409a      	lsls	r2, r3
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e3a:	f043 0202 	orr.w	r2, r3, #2
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e46:	2204      	movs	r2, #4
 8002e48:	409a      	lsls	r2, r3
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d012      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f003 0302 	and.w	r3, r3, #2
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d00b      	beq.n	8002e78 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e64:	2204      	movs	r2, #4
 8002e66:	409a      	lsls	r2, r3
 8002e68:	693b      	ldr	r3, [r7, #16]
 8002e6a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e70:	f043 0204 	orr.w	r2, r3, #4
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	4013      	ands	r3, r2
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d043      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0308 	and.w	r3, r3, #8
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d03c      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9a:	2210      	movs	r2, #16
 8002e9c:	409a      	lsls	r2, r3
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d018      	beq.n	8002ee2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d108      	bne.n	8002ed0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d024      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	4798      	blx	r3
 8002ece:	e01f      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d01b      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	4798      	blx	r3
 8002ee0:	e016      	b.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d107      	bne.n	8002f00 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0208 	bic.w	r2, r2, #8
 8002efe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d003      	beq.n	8002f10 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0c:	6878      	ldr	r0, [r7, #4]
 8002f0e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2220      	movs	r2, #32
 8002f16:	409a      	lsls	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	f000 808f 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f003 0310 	and.w	r3, r3, #16
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8087 	beq.w	8003040 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f36:	2220      	movs	r2, #32
 8002f38:	409a      	lsls	r2, r3
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f44:	b2db      	uxtb	r3, r3
 8002f46:	2b05      	cmp	r3, #5
 8002f48:	d136      	bne.n	8002fb8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681a      	ldr	r2, [r3, #0]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f022 0216 	bic.w	r2, r2, #22
 8002f58:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	695a      	ldr	r2, [r3, #20]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f68:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_DMA_IRQHandler+0x1da>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d007      	beq.n	8002f8a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8e:	223f      	movs	r2, #63	; 0x3f
 8002f90:	409a      	lsls	r2, r3
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d07e      	beq.n	80030ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	4798      	blx	r3
        }
        return;
 8002fb6:	e079      	b.n	80030ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d01d      	beq.n	8003002 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d10d      	bne.n	8002ff0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d031      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe0:	6878      	ldr	r0, [r7, #4]
 8002fe2:	4798      	blx	r3
 8002fe4:	e02c      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
 8002fe6:	bf00      	nop
 8002fe8:	20000008 	.word	0x20000008
 8002fec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d023      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	4798      	blx	r3
 8003000:	e01e      	b.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800300c:	2b00      	cmp	r3, #0
 800300e:	d10f      	bne.n	8003030 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0210 	bic.w	r2, r2, #16
 800301e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	2b00      	cmp	r3, #0
 8003036:	d003      	beq.n	8003040 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003044:	2b00      	cmp	r3, #0
 8003046:	d032      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304c:	f003 0301 	and.w	r3, r3, #1
 8003050:	2b00      	cmp	r3, #0
 8003052:	d022      	beq.n	800309a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2205      	movs	r2, #5
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681a      	ldr	r2, [r3, #0]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f022 0201 	bic.w	r2, r2, #1
 800306a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800306c:	68bb      	ldr	r3, [r7, #8]
 800306e:	3301      	adds	r3, #1
 8003070:	60bb      	str	r3, [r7, #8]
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	429a      	cmp	r2, r3
 8003076:	d307      	bcc.n	8003088 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d1f2      	bne.n	800306c <HAL_DMA_IRQHandler+0x2cc>
 8003086:	e000      	b.n	800308a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8003088:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2201      	movs	r2, #1
 800308e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d005      	beq.n	80030ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	4798      	blx	r3
 80030aa:	e000      	b.n	80030ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80030ac:	bf00      	nop
    }
  }
}
 80030ae:	3718      	adds	r7, #24
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b085      	sub	sp, #20
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030d0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	683a      	ldr	r2, [r7, #0]
 80030d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	2b40      	cmp	r3, #64	; 0x40
 80030e0:	d108      	bne.n	80030f4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	687a      	ldr	r2, [r7, #4]
 80030e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	68ba      	ldr	r2, [r7, #8]
 80030f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80030f2:	e007      	b.n	8003104 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	68ba      	ldr	r2, [r7, #8]
 80030fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]
}
 8003104:	bf00      	nop
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	b2db      	uxtb	r3, r3
 800311e:	3b10      	subs	r3, #16
 8003120:	4a14      	ldr	r2, [pc, #80]	; (8003174 <DMA_CalcBaseAndBitshift+0x64>)
 8003122:	fba2 2303 	umull	r2, r3, r2, r3
 8003126:	091b      	lsrs	r3, r3, #4
 8003128:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800312a:	4a13      	ldr	r2, [pc, #76]	; (8003178 <DMA_CalcBaseAndBitshift+0x68>)
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	4413      	add	r3, r2
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	461a      	mov	r2, r3
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b03      	cmp	r3, #3
 800313c:	d909      	bls.n	8003152 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003146:	f023 0303 	bic.w	r3, r3, #3
 800314a:	1d1a      	adds	r2, r3, #4
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	659a      	str	r2, [r3, #88]	; 0x58
 8003150:	e007      	b.n	8003162 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800315a:	f023 0303 	bic.w	r3, r3, #3
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003166:	4618      	mov	r0, r3
 8003168:	3714      	adds	r7, #20
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr
 8003172:	bf00      	nop
 8003174:	aaaaaaab 	.word	0xaaaaaaab
 8003178:	0800582c 	.word	0x0800582c

0800317c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003184:	2300      	movs	r3, #0
 8003186:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800318c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11f      	bne.n	80031d6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	2b03      	cmp	r3, #3
 800319a:	d856      	bhi.n	800324a <DMA_CheckFifoParam+0xce>
 800319c:	a201      	add	r2, pc, #4	; (adr r2, 80031a4 <DMA_CheckFifoParam+0x28>)
 800319e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031a2:	bf00      	nop
 80031a4:	080031b5 	.word	0x080031b5
 80031a8:	080031c7 	.word	0x080031c7
 80031ac:	080031b5 	.word	0x080031b5
 80031b0:	0800324b 	.word	0x0800324b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d046      	beq.n	800324e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80031c0:	2301      	movs	r3, #1
 80031c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031c4:	e043      	b.n	800324e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031ca:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80031ce:	d140      	bne.n	8003252 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80031d4:	e03d      	b.n	8003252 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	699b      	ldr	r3, [r3, #24]
 80031da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031de:	d121      	bne.n	8003224 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80031e0:	68bb      	ldr	r3, [r7, #8]
 80031e2:	2b03      	cmp	r3, #3
 80031e4:	d837      	bhi.n	8003256 <DMA_CheckFifoParam+0xda>
 80031e6:	a201      	add	r2, pc, #4	; (adr r2, 80031ec <DMA_CheckFifoParam+0x70>)
 80031e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ec:	080031fd 	.word	0x080031fd
 80031f0:	08003203 	.word	0x08003203
 80031f4:	080031fd 	.word	0x080031fd
 80031f8:	08003215 	.word	0x08003215
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	73fb      	strb	r3, [r7, #15]
      break;
 8003200:	e030      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003206:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d025      	beq.n	800325a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003212:	e022      	b.n	800325a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003218:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800321c:	d11f      	bne.n	800325e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003222:	e01c      	b.n	800325e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003224:	68bb      	ldr	r3, [r7, #8]
 8003226:	2b02      	cmp	r3, #2
 8003228:	d903      	bls.n	8003232 <DMA_CheckFifoParam+0xb6>
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	2b03      	cmp	r3, #3
 800322e:	d003      	beq.n	8003238 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003230:	e018      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003232:	2301      	movs	r3, #1
 8003234:	73fb      	strb	r3, [r7, #15]
      break;
 8003236:	e015      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00e      	beq.n	8003262 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      break;
 8003248:	e00b      	b.n	8003262 <DMA_CheckFifoParam+0xe6>
      break;
 800324a:	bf00      	nop
 800324c:	e00a      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 800324e:	bf00      	nop
 8003250:	e008      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003252:	bf00      	nop
 8003254:	e006      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003256:	bf00      	nop
 8003258:	e004      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 800325a:	bf00      	nop
 800325c:	e002      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;   
 800325e:	bf00      	nop
 8003260:	e000      	b.n	8003264 <DMA_CheckFifoParam+0xe8>
      break;
 8003262:	bf00      	nop
    }
  } 
  
  return status; 
 8003264:	7bfb      	ldrb	r3, [r7, #15]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop

08003274 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003274:	b480      	push	{r7}
 8003276:	b089      	sub	sp, #36	; 0x24
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800327e:	2300      	movs	r3, #0
 8003280:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003282:	2300      	movs	r3, #0
 8003284:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003286:	2300      	movs	r3, #0
 8003288:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800328a:	2300      	movs	r3, #0
 800328c:	61fb      	str	r3, [r7, #28]
 800328e:	e159      	b.n	8003544 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003290:	2201      	movs	r2, #1
 8003292:	69fb      	ldr	r3, [r7, #28]
 8003294:	fa02 f303 	lsl.w	r3, r2, r3
 8003298:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	4013      	ands	r3, r2
 80032a2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032a4:	693a      	ldr	r2, [r7, #16]
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	f040 8148 	bne.w	800353e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0303 	and.w	r3, r3, #3
 80032b6:	2b01      	cmp	r3, #1
 80032b8:	d005      	beq.n	80032c6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032c2:	2b02      	cmp	r3, #2
 80032c4:	d130      	bne.n	8003328 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80032cc:	69fb      	ldr	r3, [r7, #28]
 80032ce:	005b      	lsls	r3, r3, #1
 80032d0:	2203      	movs	r2, #3
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43db      	mvns	r3, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	4013      	ands	r3, r2
 80032dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	69ba      	ldr	r2, [r7, #24]
 80032f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	091b      	lsrs	r3, r3, #4
 8003312:	f003 0201 	and.w	r2, r3, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69ba      	ldr	r2, [r7, #24]
 8003326:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f003 0303 	and.w	r3, r3, #3
 8003330:	2b03      	cmp	r3, #3
 8003332:	d017      	beq.n	8003364 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	005b      	lsls	r3, r3, #1
 800333e:	2203      	movs	r2, #3
 8003340:	fa02 f303 	lsl.w	r3, r2, r3
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f003 0303 	and.w	r3, r3, #3
 800336c:	2b02      	cmp	r3, #2
 800336e:	d123      	bne.n	80033b8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	08da      	lsrs	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	3208      	adds	r2, #8
 8003378:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800337c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	f003 0307 	and.w	r3, r3, #7
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	220f      	movs	r2, #15
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	43db      	mvns	r3, r3
 800338e:	69ba      	ldr	r2, [r7, #24]
 8003390:	4013      	ands	r3, r2
 8003392:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69fb      	ldr	r3, [r7, #28]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	009b      	lsls	r3, r3, #2
 80033a0:	fa02 f303 	lsl.w	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	4313      	orrs	r3, r2
 80033a8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	08da      	lsrs	r2, r3, #3
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	3208      	adds	r2, #8
 80033b2:	69b9      	ldr	r1, [r7, #24]
 80033b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f003 0203 	and.w	r2, r3, #3
 80033d8:	69fb      	ldr	r3, [r7, #28]
 80033da:	005b      	lsls	r3, r3, #1
 80033dc:	fa02 f303 	lsl.w	r3, r2, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	f000 80a2 	beq.w	800353e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	60fb      	str	r3, [r7, #12]
 80033fe:	4b57      	ldr	r3, [pc, #348]	; (800355c <HAL_GPIO_Init+0x2e8>)
 8003400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003402:	4a56      	ldr	r2, [pc, #344]	; (800355c <HAL_GPIO_Init+0x2e8>)
 8003404:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003408:	6453      	str	r3, [r2, #68]	; 0x44
 800340a:	4b54      	ldr	r3, [pc, #336]	; (800355c <HAL_GPIO_Init+0x2e8>)
 800340c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800340e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003412:	60fb      	str	r3, [r7, #12]
 8003414:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003416:	4a52      	ldr	r2, [pc, #328]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 8003418:	69fb      	ldr	r3, [r7, #28]
 800341a:	089b      	lsrs	r3, r3, #2
 800341c:	3302      	adds	r3, #2
 800341e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003422:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003424:	69fb      	ldr	r3, [r7, #28]
 8003426:	f003 0303 	and.w	r3, r3, #3
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	220f      	movs	r2, #15
 800342e:	fa02 f303 	lsl.w	r3, r2, r3
 8003432:	43db      	mvns	r3, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4013      	ands	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a49      	ldr	r2, [pc, #292]	; (8003564 <HAL_GPIO_Init+0x2f0>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d019      	beq.n	8003476 <HAL_GPIO_Init+0x202>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a48      	ldr	r2, [pc, #288]	; (8003568 <HAL_GPIO_Init+0x2f4>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d013      	beq.n	8003472 <HAL_GPIO_Init+0x1fe>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a47      	ldr	r2, [pc, #284]	; (800356c <HAL_GPIO_Init+0x2f8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d00d      	beq.n	800346e <HAL_GPIO_Init+0x1fa>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	4a46      	ldr	r2, [pc, #280]	; (8003570 <HAL_GPIO_Init+0x2fc>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d007      	beq.n	800346a <HAL_GPIO_Init+0x1f6>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	4a45      	ldr	r2, [pc, #276]	; (8003574 <HAL_GPIO_Init+0x300>)
 800345e:	4293      	cmp	r3, r2
 8003460:	d101      	bne.n	8003466 <HAL_GPIO_Init+0x1f2>
 8003462:	2304      	movs	r3, #4
 8003464:	e008      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003466:	2307      	movs	r3, #7
 8003468:	e006      	b.n	8003478 <HAL_GPIO_Init+0x204>
 800346a:	2303      	movs	r3, #3
 800346c:	e004      	b.n	8003478 <HAL_GPIO_Init+0x204>
 800346e:	2302      	movs	r3, #2
 8003470:	e002      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003472:	2301      	movs	r3, #1
 8003474:	e000      	b.n	8003478 <HAL_GPIO_Init+0x204>
 8003476:	2300      	movs	r3, #0
 8003478:	69fa      	ldr	r2, [r7, #28]
 800347a:	f002 0203 	and.w	r2, r2, #3
 800347e:	0092      	lsls	r2, r2, #2
 8003480:	4093      	lsls	r3, r2
 8003482:	69ba      	ldr	r2, [r7, #24]
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003488:	4935      	ldr	r1, [pc, #212]	; (8003560 <HAL_GPIO_Init+0x2ec>)
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	089b      	lsrs	r3, r3, #2
 800348e:	3302      	adds	r3, #2
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003496:	4b38      	ldr	r3, [pc, #224]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800349c:	693b      	ldr	r3, [r7, #16]
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80034b2:	69ba      	ldr	r2, [r7, #24]
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80034ba:	4a2f      	ldr	r2, [pc, #188]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80034c0:	4b2d      	ldr	r3, [pc, #180]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	43db      	mvns	r3, r3
 80034ca:	69ba      	ldr	r2, [r7, #24]
 80034cc:	4013      	ands	r3, r2
 80034ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d003      	beq.n	80034e4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80034dc:	69ba      	ldr	r2, [r7, #24]
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80034e4:	4a24      	ldr	r2, [pc, #144]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034e6:	69bb      	ldr	r3, [r7, #24]
 80034e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80034ea:	4b23      	ldr	r3, [pc, #140]	; (8003578 <HAL_GPIO_Init+0x304>)
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f0:	693b      	ldr	r3, [r7, #16]
 80034f2:	43db      	mvns	r3, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4013      	ands	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d003      	beq.n	800350e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	4313      	orrs	r3, r2
 800350c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800350e:	4a1a      	ldr	r2, [pc, #104]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003514:	4b18      	ldr	r3, [pc, #96]	; (8003578 <HAL_GPIO_Init+0x304>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	43db      	mvns	r3, r3
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4013      	ands	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800352c:	2b00      	cmp	r3, #0
 800352e:	d003      	beq.n	8003538 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	4313      	orrs	r3, r2
 8003536:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003538:	4a0f      	ldr	r2, [pc, #60]	; (8003578 <HAL_GPIO_Init+0x304>)
 800353a:	69bb      	ldr	r3, [r7, #24]
 800353c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	3301      	adds	r3, #1
 8003542:	61fb      	str	r3, [r7, #28]
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	2b0f      	cmp	r3, #15
 8003548:	f67f aea2 	bls.w	8003290 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800354c:	bf00      	nop
 800354e:	bf00      	nop
 8003550:	3724      	adds	r7, #36	; 0x24
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr
 800355a:	bf00      	nop
 800355c:	40023800 	.word	0x40023800
 8003560:	40013800 	.word	0x40013800
 8003564:	40020000 	.word	0x40020000
 8003568:	40020400 	.word	0x40020400
 800356c:	40020800 	.word	0x40020800
 8003570:	40020c00 	.word	0x40020c00
 8003574:	40021000 	.word	0x40021000
 8003578:	40013c00 	.word	0x40013c00

0800357c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800357c:	b480      	push	{r7}
 800357e:	b085      	sub	sp, #20
 8003580:	af00      	add	r7, sp, #0
 8003582:	6078      	str	r0, [r7, #4]
 8003584:	460b      	mov	r3, r1
 8003586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	887b      	ldrh	r3, [r7, #2]
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d002      	beq.n	800359a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003594:	2301      	movs	r3, #1
 8003596:	73fb      	strb	r3, [r7, #15]
 8003598:	e001      	b.n	800359e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800359a:	2300      	movs	r3, #0
 800359c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800359e:	7bfb      	ldrb	r3, [r7, #15]
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3714      	adds	r7, #20
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
 80035b8:	4613      	mov	r3, r2
 80035ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035bc:	787b      	ldrb	r3, [r7, #1]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035c2:	887a      	ldrh	r2, [r7, #2]
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035c8:	e003      	b.n	80035d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	041a      	lsls	r2, r3, #16
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	619a      	str	r2, [r3, #24]
}
 80035d2:	bf00      	nop
 80035d4:	370c      	adds	r7, #12
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
	...

080035e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d101      	bne.n	80035f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ee:	2301      	movs	r3, #1
 80035f0:	e267      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d075      	beq.n	80036ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035fe:	4b88      	ldr	r3, [pc, #544]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003600:	689b      	ldr	r3, [r3, #8]
 8003602:	f003 030c 	and.w	r3, r3, #12
 8003606:	2b04      	cmp	r3, #4
 8003608:	d00c      	beq.n	8003624 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800360a:	4b85      	ldr	r3, [pc, #532]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800360c:	689b      	ldr	r3, [r3, #8]
 800360e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003612:	2b08      	cmp	r3, #8
 8003614:	d112      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003616:	4b82      	ldr	r3, [pc, #520]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003622:	d10b      	bne.n	800363c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003624:	4b7e      	ldr	r3, [pc, #504]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d05b      	beq.n	80036e8 <HAL_RCC_OscConfig+0x108>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d157      	bne.n	80036e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e242      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003644:	d106      	bne.n	8003654 <HAL_RCC_OscConfig+0x74>
 8003646:	4b76      	ldr	r3, [pc, #472]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a75      	ldr	r2, [pc, #468]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003650:	6013      	str	r3, [r2, #0]
 8003652:	e01d      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800365c:	d10c      	bne.n	8003678 <HAL_RCC_OscConfig+0x98>
 800365e:	4b70      	ldr	r3, [pc, #448]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a6f      	ldr	r2, [pc, #444]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003664:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	4b6d      	ldr	r3, [pc, #436]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	4a6c      	ldr	r2, [pc, #432]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003670:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003674:	6013      	str	r3, [r2, #0]
 8003676:	e00b      	b.n	8003690 <HAL_RCC_OscConfig+0xb0>
 8003678:	4b69      	ldr	r3, [pc, #420]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a68      	ldr	r2, [pc, #416]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800367e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003682:	6013      	str	r3, [r2, #0]
 8003684:	4b66      	ldr	r3, [pc, #408]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	4a65      	ldr	r2, [pc, #404]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800368a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800368e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d013      	beq.n	80036c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003698:	f7fe fd5c 	bl	8002154 <HAL_GetTick>
 800369c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369e:	e008      	b.n	80036b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036a0:	f7fe fd58 	bl	8002154 <HAL_GetTick>
 80036a4:	4602      	mov	r2, r0
 80036a6:	693b      	ldr	r3, [r7, #16]
 80036a8:	1ad3      	subs	r3, r2, r3
 80036aa:	2b64      	cmp	r3, #100	; 0x64
 80036ac:	d901      	bls.n	80036b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e207      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b2:	4b5b      	ldr	r3, [pc, #364]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d0f0      	beq.n	80036a0 <HAL_RCC_OscConfig+0xc0>
 80036be:	e014      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fe fd48 	bl	8002154 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036c8:	f7fe fd44 	bl	8002154 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b64      	cmp	r3, #100	; 0x64
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e1f3      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036da:	4b51      	ldr	r3, [pc, #324]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0xe8>
 80036e6:	e000      	b.n	80036ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d063      	beq.n	80037be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036f6:	4b4a      	ldr	r3, [pc, #296]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d00b      	beq.n	800371a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003702:	4b47      	ldr	r3, [pc, #284]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800370a:	2b08      	cmp	r3, #8
 800370c:	d11c      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800370e:	4b44      	ldr	r3, [pc, #272]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003716:	2b00      	cmp	r3, #0
 8003718:	d116      	bne.n	8003748 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800371a:	4b41      	ldr	r3, [pc, #260]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d001      	beq.n	8003732 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e1c7      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003732:	4b3b      	ldr	r3, [pc, #236]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	691b      	ldr	r3, [r3, #16]
 800373e:	00db      	lsls	r3, r3, #3
 8003740:	4937      	ldr	r1, [pc, #220]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003746:	e03a      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	68db      	ldr	r3, [r3, #12]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d020      	beq.n	8003792 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003750:	4b34      	ldr	r3, [pc, #208]	; (8003824 <HAL_RCC_OscConfig+0x244>)
 8003752:	2201      	movs	r2, #1
 8003754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003756:	f7fe fcfd 	bl	8002154 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800375c:	e008      	b.n	8003770 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800375e:	f7fe fcf9 	bl	8002154 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	2b02      	cmp	r3, #2
 800376a:	d901      	bls.n	8003770 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e1a8      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003770:	4b2b      	ldr	r3, [pc, #172]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f003 0302 	and.w	r3, r3, #2
 8003778:	2b00      	cmp	r3, #0
 800377a:	d0f0      	beq.n	800375e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800377c:	4b28      	ldr	r3, [pc, #160]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	691b      	ldr	r3, [r3, #16]
 8003788:	00db      	lsls	r3, r3, #3
 800378a:	4925      	ldr	r1, [pc, #148]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 800378c:	4313      	orrs	r3, r2
 800378e:	600b      	str	r3, [r1, #0]
 8003790:	e015      	b.n	80037be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003792:	4b24      	ldr	r3, [pc, #144]	; (8003824 <HAL_RCC_OscConfig+0x244>)
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003798:	f7fe fcdc 	bl	8002154 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037a0:	f7fe fcd8 	bl	8002154 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e187      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037b2:	4b1b      	ldr	r3, [pc, #108]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1f0      	bne.n	80037a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0308 	and.w	r3, r3, #8
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d036      	beq.n	8003838 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	695b      	ldr	r3, [r3, #20]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d016      	beq.n	8003800 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d2:	4b15      	ldr	r3, [pc, #84]	; (8003828 <HAL_RCC_OscConfig+0x248>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037d8:	f7fe fcbc 	bl	8002154 <HAL_GetTick>
 80037dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037de:	e008      	b.n	80037f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037e0:	f7fe fcb8 	bl	8002154 <HAL_GetTick>
 80037e4:	4602      	mov	r2, r0
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	2b02      	cmp	r3, #2
 80037ec:	d901      	bls.n	80037f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ee:	2303      	movs	r3, #3
 80037f0:	e167      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <HAL_RCC_OscConfig+0x240>)
 80037f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f6:	f003 0302 	and.w	r3, r3, #2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d0f0      	beq.n	80037e0 <HAL_RCC_OscConfig+0x200>
 80037fe:	e01b      	b.n	8003838 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003800:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_OscConfig+0x248>)
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003806:	f7fe fca5 	bl	8002154 <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800380c:	e00e      	b.n	800382c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800380e:	f7fe fca1 	bl	8002154 <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d907      	bls.n	800382c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e150      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
 8003820:	40023800 	.word	0x40023800
 8003824:	42470000 	.word	0x42470000
 8003828:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800382c:	4b88      	ldr	r3, [pc, #544]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800382e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d1ea      	bne.n	800380e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8097 	beq.w	8003974 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b81      	ldr	r3, [pc, #516]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10f      	bne.n	8003876 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	2300      	movs	r3, #0
 8003858:	60bb      	str	r3, [r7, #8]
 800385a:	4b7d      	ldr	r3, [pc, #500]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800385c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385e:	4a7c      	ldr	r2, [pc, #496]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6413      	str	r3, [r2, #64]	; 0x40
 8003866:	4b7a      	ldr	r3, [pc, #488]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	60bb      	str	r3, [r7, #8]
 8003870:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003872:	2301      	movs	r3, #1
 8003874:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003876:	4b77      	ldr	r3, [pc, #476]	; (8003a54 <HAL_RCC_OscConfig+0x474>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800387e:	2b00      	cmp	r3, #0
 8003880:	d118      	bne.n	80038b4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003882:	4b74      	ldr	r3, [pc, #464]	; (8003a54 <HAL_RCC_OscConfig+0x474>)
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a73      	ldr	r2, [pc, #460]	; (8003a54 <HAL_RCC_OscConfig+0x474>)
 8003888:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800388c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800388e:	f7fe fc61 	bl	8002154 <HAL_GetTick>
 8003892:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003894:	e008      	b.n	80038a8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003896:	f7fe fc5d 	bl	8002154 <HAL_GetTick>
 800389a:	4602      	mov	r2, r0
 800389c:	693b      	ldr	r3, [r7, #16]
 800389e:	1ad3      	subs	r3, r2, r3
 80038a0:	2b02      	cmp	r3, #2
 80038a2:	d901      	bls.n	80038a8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80038a4:	2303      	movs	r3, #3
 80038a6:	e10c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038a8:	4b6a      	ldr	r3, [pc, #424]	; (8003a54 <HAL_RCC_OscConfig+0x474>)
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d0f0      	beq.n	8003896 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d106      	bne.n	80038ca <HAL_RCC_OscConfig+0x2ea>
 80038bc:	4b64      	ldr	r3, [pc, #400]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c0:	4a63      	ldr	r2, [pc, #396]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038c2:	f043 0301 	orr.w	r3, r3, #1
 80038c6:	6713      	str	r3, [r2, #112]	; 0x70
 80038c8:	e01c      	b.n	8003904 <HAL_RCC_OscConfig+0x324>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	2b05      	cmp	r3, #5
 80038d0:	d10c      	bne.n	80038ec <HAL_RCC_OscConfig+0x30c>
 80038d2:	4b5f      	ldr	r3, [pc, #380]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d6:	4a5e      	ldr	r2, [pc, #376]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038d8:	f043 0304 	orr.w	r3, r3, #4
 80038dc:	6713      	str	r3, [r2, #112]	; 0x70
 80038de:	4b5c      	ldr	r3, [pc, #368]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e2:	4a5b      	ldr	r2, [pc, #364]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	6713      	str	r3, [r2, #112]	; 0x70
 80038ea:	e00b      	b.n	8003904 <HAL_RCC_OscConfig+0x324>
 80038ec:	4b58      	ldr	r3, [pc, #352]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038f0:	4a57      	ldr	r2, [pc, #348]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038f2:	f023 0301 	bic.w	r3, r3, #1
 80038f6:	6713      	str	r3, [r2, #112]	; 0x70
 80038f8:	4b55      	ldr	r3, [pc, #340]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038fc:	4a54      	ldr	r2, [pc, #336]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80038fe:	f023 0304 	bic.w	r3, r3, #4
 8003902:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d015      	beq.n	8003938 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800390c:	f7fe fc22 	bl	8002154 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003912:	e00a      	b.n	800392a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003914:	f7fe fc1e 	bl	8002154 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e0cb      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800392a:	4b49      	ldr	r3, [pc, #292]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800392c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800392e:	f003 0302 	and.w	r3, r3, #2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d0ee      	beq.n	8003914 <HAL_RCC_OscConfig+0x334>
 8003936:	e014      	b.n	8003962 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003938:	f7fe fc0c 	bl	8002154 <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800393e:	e00a      	b.n	8003956 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003940:	f7fe fc08 	bl	8002154 <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	f241 3288 	movw	r2, #5000	; 0x1388
 800394e:	4293      	cmp	r3, r2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e0b5      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003956:	4b3e      	ldr	r3, [pc, #248]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800395a:	f003 0302 	and.w	r3, r3, #2
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1ee      	bne.n	8003940 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003962:	7dfb      	ldrb	r3, [r7, #23]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d105      	bne.n	8003974 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003968:	4b39      	ldr	r3, [pc, #228]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800396a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396c:	4a38      	ldr	r2, [pc, #224]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 800396e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003972:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	2b00      	cmp	r3, #0
 800397a:	f000 80a1 	beq.w	8003ac0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800397e:	4b34      	ldr	r3, [pc, #208]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 030c 	and.w	r3, r3, #12
 8003986:	2b08      	cmp	r3, #8
 8003988:	d05c      	beq.n	8003a44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	699b      	ldr	r3, [r3, #24]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d141      	bne.n	8003a16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003992:	4b31      	ldr	r3, [pc, #196]	; (8003a58 <HAL_RCC_OscConfig+0x478>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003998:	f7fe fbdc 	bl	8002154 <HAL_GetTick>
 800399c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800399e:	e008      	b.n	80039b2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039a0:	f7fe fbd8 	bl	8002154 <HAL_GetTick>
 80039a4:	4602      	mov	r2, r0
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	d901      	bls.n	80039b2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80039ae:	2303      	movs	r3, #3
 80039b0:	e087      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d1f0      	bne.n	80039a0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	69da      	ldr	r2, [r3, #28]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a1b      	ldr	r3, [r3, #32]
 80039c6:	431a      	orrs	r2, r3
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	019b      	lsls	r3, r3, #6
 80039ce:	431a      	orrs	r2, r3
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d4:	085b      	lsrs	r3, r3, #1
 80039d6:	3b01      	subs	r3, #1
 80039d8:	041b      	lsls	r3, r3, #16
 80039da:	431a      	orrs	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	061b      	lsls	r3, r3, #24
 80039e2:	491b      	ldr	r1, [pc, #108]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 80039e4:	4313      	orrs	r3, r2
 80039e6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <HAL_RCC_OscConfig+0x478>)
 80039ea:	2201      	movs	r2, #1
 80039ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ee:	f7fe fbb1 	bl	8002154 <HAL_GetTick>
 80039f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f4:	e008      	b.n	8003a08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039f6:	f7fe fbad 	bl	8002154 <HAL_GetTick>
 80039fa:	4602      	mov	r2, r0
 80039fc:	693b      	ldr	r3, [r7, #16]
 80039fe:	1ad3      	subs	r3, r2, r3
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d901      	bls.n	8003a08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003a04:	2303      	movs	r3, #3
 8003a06:	e05c      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a08:	4b11      	ldr	r3, [pc, #68]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d0f0      	beq.n	80039f6 <HAL_RCC_OscConfig+0x416>
 8003a14:	e054      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a16:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <HAL_RCC_OscConfig+0x478>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a1c:	f7fe fb9a 	bl	8002154 <HAL_GetTick>
 8003a20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a22:	e008      	b.n	8003a36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a24:	f7fe fb96 	bl	8002154 <HAL_GetTick>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	1ad3      	subs	r3, r2, r3
 8003a2e:	2b02      	cmp	r3, #2
 8003a30:	d901      	bls.n	8003a36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a32:	2303      	movs	r3, #3
 8003a34:	e045      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a36:	4b06      	ldr	r3, [pc, #24]	; (8003a50 <HAL_RCC_OscConfig+0x470>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d1f0      	bne.n	8003a24 <HAL_RCC_OscConfig+0x444>
 8003a42:	e03d      	b.n	8003ac0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	699b      	ldr	r3, [r3, #24]
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d107      	bne.n	8003a5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e038      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
 8003a50:	40023800 	.word	0x40023800
 8003a54:	40007000 	.word	0x40007000
 8003a58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a5c:	4b1b      	ldr	r3, [pc, #108]	; (8003acc <HAL_RCC_OscConfig+0x4ec>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	699b      	ldr	r3, [r3, #24]
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d028      	beq.n	8003abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d121      	bne.n	8003abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d11a      	bne.n	8003abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a86:	68fa      	ldr	r2, [r7, #12]
 8003a88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	687a      	ldr	r2, [r7, #4]
 8003a90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d111      	bne.n	8003abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	3b01      	subs	r3, #1
 8003aa6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d107      	bne.n	8003abc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ab6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	d001      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3718      	adds	r7, #24
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
 8003ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d101      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ae0:	2301      	movs	r3, #1
 8003ae2:	e0cc      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ae4:	4b68      	ldr	r3, [pc, #416]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f003 0307 	and.w	r3, r3, #7
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d90c      	bls.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003af2:	4b65      	ldr	r3, [pc, #404]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003af4:	683a      	ldr	r2, [r7, #0]
 8003af6:	b2d2      	uxtb	r2, r2
 8003af8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003afa:	4b63      	ldr	r3, [pc, #396]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	683a      	ldr	r2, [r7, #0]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d001      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	e0b8      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0302 	and.w	r3, r3, #2
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d020      	beq.n	8003b5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 0304 	and.w	r3, r3, #4
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d005      	beq.n	8003b30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b24:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	4a58      	ldr	r2, [pc, #352]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0308 	and.w	r3, r3, #8
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d005      	beq.n	8003b48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b3c:	4b53      	ldr	r3, [pc, #332]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	4a52      	ldr	r2, [pc, #328]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b48:	4b50      	ldr	r3, [pc, #320]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	689b      	ldr	r3, [r3, #8]
 8003b54:	494d      	ldr	r1, [pc, #308]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b56:	4313      	orrs	r3, r2
 8003b58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f003 0301 	and.w	r3, r3, #1
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d044      	beq.n	8003bf0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d107      	bne.n	8003b7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6e:	4b47      	ldr	r3, [pc, #284]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d119      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e07f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d003      	beq.n	8003b8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b8a:	2b03      	cmp	r3, #3
 8003b8c:	d107      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b8e:	4b3f      	ldr	r3, [pc, #252]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d109      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e06f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b9e:	4b3b      	ldr	r3, [pc, #236]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 0302 	and.w	r3, r3, #2
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d101      	bne.n	8003bae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	e067      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003bae:	4b37      	ldr	r3, [pc, #220]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f023 0203 	bic.w	r2, r3, #3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4934      	ldr	r1, [pc, #208]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bc0:	f7fe fac8 	bl	8002154 <HAL_GetTick>
 8003bc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bc6:	e00a      	b.n	8003bde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bc8:	f7fe fac4 	bl	8002154 <HAL_GetTick>
 8003bcc:	4602      	mov	r2, r0
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e04f      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bde:	4b2b      	ldr	r3, [pc, #172]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f003 020c 	and.w	r2, r3, #12
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d1eb      	bne.n	8003bc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bf0:	4b25      	ldr	r3, [pc, #148]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f003 0307 	and.w	r3, r3, #7
 8003bf8:	683a      	ldr	r2, [r7, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d20c      	bcs.n	8003c18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bfe:	4b22      	ldr	r3, [pc, #136]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c00:	683a      	ldr	r2, [r7, #0]
 8003c02:	b2d2      	uxtb	r2, r2
 8003c04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c06:	4b20      	ldr	r3, [pc, #128]	; (8003c88 <HAL_RCC_ClockConfig+0x1b8>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f003 0307 	and.w	r3, r3, #7
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	429a      	cmp	r2, r3
 8003c12:	d001      	beq.n	8003c18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c14:	2301      	movs	r3, #1
 8003c16:	e032      	b.n	8003c7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f003 0304 	and.w	r3, r3, #4
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d008      	beq.n	8003c36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c24:	4b19      	ldr	r3, [pc, #100]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	4916      	ldr	r1, [pc, #88]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f003 0308 	and.w	r3, r3, #8
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d009      	beq.n	8003c56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c42:	4b12      	ldr	r3, [pc, #72]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	691b      	ldr	r3, [r3, #16]
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c52:	4313      	orrs	r3, r2
 8003c54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c56:	f000 f821 	bl	8003c9c <HAL_RCC_GetSysClockFreq>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_ClockConfig+0x1bc>)
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	490a      	ldr	r1, [pc, #40]	; (8003c90 <HAL_RCC_ClockConfig+0x1c0>)
 8003c68:	5ccb      	ldrb	r3, [r1, r3]
 8003c6a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c6e:	4a09      	ldr	r2, [pc, #36]	; (8003c94 <HAL_RCC_ClockConfig+0x1c4>)
 8003c70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c72:	4b09      	ldr	r3, [pc, #36]	; (8003c98 <HAL_RCC_ClockConfig+0x1c8>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4618      	mov	r0, r3
 8003c78:	f7fe fa28 	bl	80020cc <HAL_InitTick>

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	40023c00 	.word	0x40023c00
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	08005814 	.word	0x08005814
 8003c94:	20000008 	.word	0x20000008
 8003c98:	2000000c 	.word	0x2000000c

08003c9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ca0:	b094      	sub	sp, #80	; 0x50
 8003ca2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003ca4:	2300      	movs	r3, #0
 8003ca6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ca8:	2300      	movs	r3, #0
 8003caa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cac:	2300      	movs	r3, #0
 8003cae:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003cb4:	4b79      	ldr	r3, [pc, #484]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	f003 030c 	and.w	r3, r3, #12
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d00d      	beq.n	8003cdc <HAL_RCC_GetSysClockFreq+0x40>
 8003cc0:	2b08      	cmp	r3, #8
 8003cc2:	f200 80e1 	bhi.w	8003e88 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d003      	beq.n	8003cd6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cce:	e0db      	b.n	8003e88 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cd0:	4b73      	ldr	r3, [pc, #460]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cd2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003cd4:	e0db      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cd6:	4b73      	ldr	r3, [pc, #460]	; (8003ea4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003cd8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003cda:	e0d8      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003cdc:	4b6f      	ldr	r3, [pc, #444]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ce4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ce6:	4b6d      	ldr	r3, [pc, #436]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d063      	beq.n	8003dba <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cf2:	4b6a      	ldr	r3, [pc, #424]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	099b      	lsrs	r3, r3, #6
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003cfc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d04:	633b      	str	r3, [r7, #48]	; 0x30
 8003d06:	2300      	movs	r3, #0
 8003d08:	637b      	str	r3, [r7, #52]	; 0x34
 8003d0a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003d0e:	4622      	mov	r2, r4
 8003d10:	462b      	mov	r3, r5
 8003d12:	f04f 0000 	mov.w	r0, #0
 8003d16:	f04f 0100 	mov.w	r1, #0
 8003d1a:	0159      	lsls	r1, r3, #5
 8003d1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d20:	0150      	lsls	r0, r2, #5
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4621      	mov	r1, r4
 8003d28:	1a51      	subs	r1, r2, r1
 8003d2a:	6139      	str	r1, [r7, #16]
 8003d2c:	4629      	mov	r1, r5
 8003d2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d40:	4659      	mov	r1, fp
 8003d42:	018b      	lsls	r3, r1, #6
 8003d44:	4651      	mov	r1, sl
 8003d46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d4a:	4651      	mov	r1, sl
 8003d4c:	018a      	lsls	r2, r1, #6
 8003d4e:	4651      	mov	r1, sl
 8003d50:	ebb2 0801 	subs.w	r8, r2, r1
 8003d54:	4659      	mov	r1, fp
 8003d56:	eb63 0901 	sbc.w	r9, r3, r1
 8003d5a:	f04f 0200 	mov.w	r2, #0
 8003d5e:	f04f 0300 	mov.w	r3, #0
 8003d62:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d66:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d6a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d6e:	4690      	mov	r8, r2
 8003d70:	4699      	mov	r9, r3
 8003d72:	4623      	mov	r3, r4
 8003d74:	eb18 0303 	adds.w	r3, r8, r3
 8003d78:	60bb      	str	r3, [r7, #8]
 8003d7a:	462b      	mov	r3, r5
 8003d7c:	eb49 0303 	adc.w	r3, r9, r3
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	024b      	lsls	r3, r1, #9
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d98:	4621      	mov	r1, r4
 8003d9a:	024a      	lsls	r2, r1, #9
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	62bb      	str	r3, [r7, #40]	; 0x28
 8003da6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003da8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003dac:	f7fc fe80 	bl	8000ab0 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003db8:	e058      	b.n	8003e6c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003dba:	4b38      	ldr	r3, [pc, #224]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	099b      	lsrs	r3, r3, #6
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003dca:	623b      	str	r3, [r7, #32]
 8003dcc:	2300      	movs	r3, #0
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
 8003dd0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f04f 0000 	mov.w	r0, #0
 8003ddc:	f04f 0100 	mov.w	r1, #0
 8003de0:	0159      	lsls	r1, r3, #5
 8003de2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003de6:	0150      	lsls	r0, r2, #5
 8003de8:	4602      	mov	r2, r0
 8003dea:	460b      	mov	r3, r1
 8003dec:	4641      	mov	r1, r8
 8003dee:	ebb2 0a01 	subs.w	sl, r2, r1
 8003df2:	4649      	mov	r1, r9
 8003df4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003df8:	f04f 0200 	mov.w	r2, #0
 8003dfc:	f04f 0300 	mov.w	r3, #0
 8003e00:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003e04:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003e08:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003e0c:	ebb2 040a 	subs.w	r4, r2, sl
 8003e10:	eb63 050b 	sbc.w	r5, r3, fp
 8003e14:	f04f 0200 	mov.w	r2, #0
 8003e18:	f04f 0300 	mov.w	r3, #0
 8003e1c:	00eb      	lsls	r3, r5, #3
 8003e1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003e22:	00e2      	lsls	r2, r4, #3
 8003e24:	4614      	mov	r4, r2
 8003e26:	461d      	mov	r5, r3
 8003e28:	4643      	mov	r3, r8
 8003e2a:	18e3      	adds	r3, r4, r3
 8003e2c:	603b      	str	r3, [r7, #0]
 8003e2e:	464b      	mov	r3, r9
 8003e30:	eb45 0303 	adc.w	r3, r5, r3
 8003e34:	607b      	str	r3, [r7, #4]
 8003e36:	f04f 0200 	mov.w	r2, #0
 8003e3a:	f04f 0300 	mov.w	r3, #0
 8003e3e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e42:	4629      	mov	r1, r5
 8003e44:	028b      	lsls	r3, r1, #10
 8003e46:	4621      	mov	r1, r4
 8003e48:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e4c:	4621      	mov	r1, r4
 8003e4e:	028a      	lsls	r2, r1, #10
 8003e50:	4610      	mov	r0, r2
 8003e52:	4619      	mov	r1, r3
 8003e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e56:	2200      	movs	r2, #0
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	61fa      	str	r2, [r7, #28]
 8003e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e60:	f7fc fe26 	bl	8000ab0 <__aeabi_uldivmod>
 8003e64:	4602      	mov	r2, r0
 8003e66:	460b      	mov	r3, r1
 8003e68:	4613      	mov	r3, r2
 8003e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	0c1b      	lsrs	r3, r3, #16
 8003e72:	f003 0303 	and.w	r3, r3, #3
 8003e76:	3301      	adds	r3, #1
 8003e78:	005b      	lsls	r3, r3, #1
 8003e7a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003e7c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003e7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e84:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e86:	e002      	b.n	8003e8e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e88:	4b05      	ldr	r3, [pc, #20]	; (8003ea0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e8a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003e8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3750      	adds	r7, #80	; 0x50
 8003e94:	46bd      	mov	sp, r7
 8003e96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e9a:	bf00      	nop
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	00f42400 	.word	0x00f42400
 8003ea4:	007a1200 	.word	0x007a1200

08003ea8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eac:	4b03      	ldr	r3, [pc, #12]	; (8003ebc <HAL_RCC_GetHCLKFreq+0x14>)
 8003eae:	681b      	ldr	r3, [r3, #0]
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr
 8003eba:	bf00      	nop
 8003ebc:	20000008 	.word	0x20000008

08003ec0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec4:	f7ff fff0 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	0a9b      	lsrs	r3, r3, #10
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	4903      	ldr	r1, [pc, #12]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003ed6:	5ccb      	ldrb	r3, [r1, r3]
 8003ed8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	bd80      	pop	{r7, pc}
 8003ee0:	40023800 	.word	0x40023800
 8003ee4:	08005824 	.word	0x08005824

08003ee8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ee8:	b580      	push	{r7, lr}
 8003eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003eec:	f7ff ffdc 	bl	8003ea8 <HAL_RCC_GetHCLKFreq>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	4b05      	ldr	r3, [pc, #20]	; (8003f08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	0b5b      	lsrs	r3, r3, #13
 8003ef8:	f003 0307 	and.w	r3, r3, #7
 8003efc:	4903      	ldr	r1, [pc, #12]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003efe:	5ccb      	ldrb	r3, [r1, r3]
 8003f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	08005824 	.word	0x08005824

08003f10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d101      	bne.n	8003f22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	e041      	b.n	8003fa6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d106      	bne.n	8003f3c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	2200      	movs	r2, #0
 8003f32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f36:	6878      	ldr	r0, [r7, #4]
 8003f38:	f7fd ff82 	bl	8001e40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2202      	movs	r2, #2
 8003f40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	3304      	adds	r3, #4
 8003f4c:	4619      	mov	r1, r3
 8003f4e:	4610      	mov	r0, r2
 8003f50:	f000 fd80 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
	...

08003fb0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbe:	b2db      	uxtb	r3, r3
 8003fc0:	2b01      	cmp	r3, #1
 8003fc2:	d001      	beq.n	8003fc8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003fc4:	2301      	movs	r3, #1
 8003fc6:	e03c      	b.n	8004042 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a1e      	ldr	r2, [pc, #120]	; (8004050 <HAL_TIM_Base_Start+0xa0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d018      	beq.n	800400c <HAL_TIM_Base_Start+0x5c>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe2:	d013      	beq.n	800400c <HAL_TIM_Base_Start+0x5c>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	4a1a      	ldr	r2, [pc, #104]	; (8004054 <HAL_TIM_Base_Start+0xa4>)
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d00e      	beq.n	800400c <HAL_TIM_Base_Start+0x5c>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a19      	ldr	r2, [pc, #100]	; (8004058 <HAL_TIM_Base_Start+0xa8>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d009      	beq.n	800400c <HAL_TIM_Base_Start+0x5c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a17      	ldr	r2, [pc, #92]	; (800405c <HAL_TIM_Base_Start+0xac>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d004      	beq.n	800400c <HAL_TIM_Base_Start+0x5c>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	4a16      	ldr	r2, [pc, #88]	; (8004060 <HAL_TIM_Base_Start+0xb0>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d111      	bne.n	8004030 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	689b      	ldr	r3, [r3, #8]
 8004012:	f003 0307 	and.w	r3, r3, #7
 8004016:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	2b06      	cmp	r3, #6
 800401c:	d010      	beq.n	8004040 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f042 0201 	orr.w	r2, r2, #1
 800402c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800402e:	e007      	b.n	8004040 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f042 0201 	orr.w	r2, r2, #1
 800403e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	40010000 	.word	0x40010000
 8004054:	40000400 	.word	0x40000400
 8004058:	40000800 	.word	0x40000800
 800405c:	40000c00 	.word	0x40000c00
 8004060:	40014000 	.word	0x40014000

08004064 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e041      	b.n	80040fa <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800408a:	6878      	ldr	r0, [r7, #4]
 800408c:	f7fd fe6e 	bl	8001d6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2202      	movs	r2, #2
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	3304      	adds	r3, #4
 80040a0:	4619      	mov	r1, r3
 80040a2:	4610      	mov	r0, r2
 80040a4:	f000 fcd6 	bl	8004a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2201      	movs	r2, #1
 80040ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2201      	movs	r2, #1
 80040bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2201      	movs	r2, #1
 80040c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2201      	movs	r2, #1
 80040dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2201      	movs	r2, #1
 80040e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2201      	movs	r2, #1
 80040ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2201      	movs	r2, #1
 80040f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80040f8:	2300      	movs	r3, #0
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}
	...

08004104 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d109      	bne.n	8004128 <HAL_TIM_PWM_Start+0x24>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b01      	cmp	r3, #1
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	e022      	b.n	800416e <HAL_TIM_PWM_Start+0x6a>
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	2b04      	cmp	r3, #4
 800412c:	d109      	bne.n	8004142 <HAL_TIM_PWM_Start+0x3e>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004134:	b2db      	uxtb	r3, r3
 8004136:	2b01      	cmp	r3, #1
 8004138:	bf14      	ite	ne
 800413a:	2301      	movne	r3, #1
 800413c:	2300      	moveq	r3, #0
 800413e:	b2db      	uxtb	r3, r3
 8004140:	e015      	b.n	800416e <HAL_TIM_PWM_Start+0x6a>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b08      	cmp	r3, #8
 8004146:	d109      	bne.n	800415c <HAL_TIM_PWM_Start+0x58>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800414e:	b2db      	uxtb	r3, r3
 8004150:	2b01      	cmp	r3, #1
 8004152:	bf14      	ite	ne
 8004154:	2301      	movne	r3, #1
 8004156:	2300      	moveq	r3, #0
 8004158:	b2db      	uxtb	r3, r3
 800415a:	e008      	b.n	800416e <HAL_TIM_PWM_Start+0x6a>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b01      	cmp	r3, #1
 8004166:	bf14      	ite	ne
 8004168:	2301      	movne	r3, #1
 800416a:	2300      	moveq	r3, #0
 800416c:	b2db      	uxtb	r3, r3
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e068      	b.n	8004248 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d104      	bne.n	8004186 <HAL_TIM_PWM_Start+0x82>
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2202      	movs	r2, #2
 8004180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004184:	e013      	b.n	80041ae <HAL_TIM_PWM_Start+0xaa>
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	2b04      	cmp	r3, #4
 800418a:	d104      	bne.n	8004196 <HAL_TIM_PWM_Start+0x92>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004194:	e00b      	b.n	80041ae <HAL_TIM_PWM_Start+0xaa>
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b08      	cmp	r3, #8
 800419a:	d104      	bne.n	80041a6 <HAL_TIM_PWM_Start+0xa2>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041a4:	e003      	b.n	80041ae <HAL_TIM_PWM_Start+0xaa>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2202      	movs	r2, #2
 80041aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2201      	movs	r2, #1
 80041b4:	6839      	ldr	r1, [r7, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f000 fef2 	bl	8004fa0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a23      	ldr	r2, [pc, #140]	; (8004250 <HAL_TIM_PWM_Start+0x14c>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d107      	bne.n	80041d6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a1d      	ldr	r2, [pc, #116]	; (8004250 <HAL_TIM_PWM_Start+0x14c>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d018      	beq.n	8004212 <HAL_TIM_PWM_Start+0x10e>
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041e8:	d013      	beq.n	8004212 <HAL_TIM_PWM_Start+0x10e>
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a19      	ldr	r2, [pc, #100]	; (8004254 <HAL_TIM_PWM_Start+0x150>)
 80041f0:	4293      	cmp	r3, r2
 80041f2:	d00e      	beq.n	8004212 <HAL_TIM_PWM_Start+0x10e>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a17      	ldr	r2, [pc, #92]	; (8004258 <HAL_TIM_PWM_Start+0x154>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d009      	beq.n	8004212 <HAL_TIM_PWM_Start+0x10e>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a16      	ldr	r2, [pc, #88]	; (800425c <HAL_TIM_PWM_Start+0x158>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d004      	beq.n	8004212 <HAL_TIM_PWM_Start+0x10e>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a14      	ldr	r2, [pc, #80]	; (8004260 <HAL_TIM_PWM_Start+0x15c>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d111      	bne.n	8004236 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f003 0307 	and.w	r3, r3, #7
 800421c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b06      	cmp	r3, #6
 8004222:	d010      	beq.n	8004246 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004234:	e007      	b.n	8004246 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f042 0201 	orr.w	r2, r2, #1
 8004244:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3710      	adds	r7, #16
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}
 8004250:	40010000 	.word	0x40010000
 8004254:	40000400 	.word	0x40000400
 8004258:	40000800 	.word	0x40000800
 800425c:	40000c00 	.word	0x40000c00
 8004260:	40014000 	.word	0x40014000

08004264 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004264:	b580      	push	{r7, lr}
 8004266:	b086      	sub	sp, #24
 8004268:	af00      	add	r7, sp, #0
 800426a:	6078      	str	r0, [r7, #4]
 800426c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d101      	bne.n	8004278 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004274:	2301      	movs	r3, #1
 8004276:	e097      	b.n	80043a8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800427e:	b2db      	uxtb	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	d106      	bne.n	8004292 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800428c:	6878      	ldr	r0, [r7, #4]
 800428e:	f7fd fd8f 	bl	8001db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2202      	movs	r2, #2
 8004296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	6812      	ldr	r2, [r2, #0]
 80042a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042a8:	f023 0307 	bic.w	r3, r3, #7
 80042ac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681a      	ldr	r2, [r3, #0]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	3304      	adds	r3, #4
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f000 fbcb 	bl	8004a54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	6a1b      	ldr	r3, [r3, #32]
 80042d4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	697a      	ldr	r2, [r7, #20]
 80042dc:	4313      	orrs	r3, r2
 80042de:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042e6:	f023 0303 	bic.w	r3, r3, #3
 80042ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	689a      	ldr	r2, [r3, #8]
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	699b      	ldr	r3, [r3, #24]
 80042f4:	021b      	lsls	r3, r3, #8
 80042f6:	4313      	orrs	r3, r2
 80042f8:	693a      	ldr	r2, [r7, #16]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004304:	f023 030c 	bic.w	r3, r3, #12
 8004308:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004310:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004314:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	68da      	ldr	r2, [r3, #12]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	69db      	ldr	r3, [r3, #28]
 800431e:	021b      	lsls	r3, r3, #8
 8004320:	4313      	orrs	r3, r2
 8004322:	693a      	ldr	r2, [r7, #16]
 8004324:	4313      	orrs	r3, r2
 8004326:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	011a      	lsls	r2, r3, #4
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	031b      	lsls	r3, r3, #12
 8004334:	4313      	orrs	r3, r2
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	4313      	orrs	r3, r2
 800433a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004342:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	4313      	orrs	r3, r2
 8004358:	68fa      	ldr	r2, [r7, #12]
 800435a:	4313      	orrs	r3, r2
 800435c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	697a      	ldr	r2, [r7, #20]
 8004364:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	693a      	ldr	r2, [r7, #16]
 800436c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	68fa      	ldr	r2, [r7, #12]
 8004374:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2201      	movs	r2, #1
 800437a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2201      	movs	r2, #1
 800438a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2201      	movs	r2, #1
 8004392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	2201      	movs	r2, #1
 800439a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2201      	movs	r2, #1
 80043a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80043a6:	2300      	movs	r3, #0
}
 80043a8:	4618      	mov	r0, r3
 80043aa:	3718      	adds	r7, #24
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b084      	sub	sp, #16
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
 80043b8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043c0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043c8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043d0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80043d8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d110      	bne.n	8004402 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80043e0:	7bfb      	ldrb	r3, [r7, #15]
 80043e2:	2b01      	cmp	r3, #1
 80043e4:	d102      	bne.n	80043ec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80043e6:	7b7b      	ldrb	r3, [r7, #13]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d001      	beq.n	80043f0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e069      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2202      	movs	r2, #2
 80043f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2202      	movs	r2, #2
 80043fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004400:	e031      	b.n	8004466 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d110      	bne.n	800442a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004408:	7bbb      	ldrb	r3, [r7, #14]
 800440a:	2b01      	cmp	r3, #1
 800440c:	d102      	bne.n	8004414 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800440e:	7b3b      	ldrb	r3, [r7, #12]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d001      	beq.n	8004418 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e055      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	2202      	movs	r2, #2
 800441c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	2202      	movs	r2, #2
 8004424:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004428:	e01d      	b.n	8004466 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800442a:	7bfb      	ldrb	r3, [r7, #15]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d108      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004430:	7bbb      	ldrb	r3, [r7, #14]
 8004432:	2b01      	cmp	r3, #1
 8004434:	d105      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004436:	7b7b      	ldrb	r3, [r7, #13]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d102      	bne.n	8004442 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800443c:	7b3b      	ldrb	r3, [r7, #12]
 800443e:	2b01      	cmp	r3, #1
 8004440:	d001      	beq.n	8004446 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e03e      	b.n	80044c4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2202      	movs	r2, #2
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2202      	movs	r2, #2
 8004452:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	2202      	movs	r2, #2
 8004462:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_TIM_Encoder_Start+0xc4>
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	2b04      	cmp	r3, #4
 8004470:	d008      	beq.n	8004484 <HAL_TIM_Encoder_Start+0xd4>
 8004472:	e00f      	b.n	8004494 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	2201      	movs	r2, #1
 800447a:	2100      	movs	r1, #0
 800447c:	4618      	mov	r0, r3
 800447e:	f000 fd8f 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 8004482:	e016      	b.n	80044b2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	2201      	movs	r2, #1
 800448a:	2104      	movs	r1, #4
 800448c:	4618      	mov	r0, r3
 800448e:	f000 fd87 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 8004492:	e00e      	b.n	80044b2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	2201      	movs	r2, #1
 800449a:	2100      	movs	r1, #0
 800449c:	4618      	mov	r0, r3
 800449e:	f000 fd7f 	bl	8004fa0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2201      	movs	r2, #1
 80044a8:	2104      	movs	r1, #4
 80044aa:	4618      	mov	r0, r3
 80044ac:	f000 fd78 	bl	8004fa0 <TIM_CCxChannelCmd>
      break;
 80044b0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f042 0201 	orr.w	r2, r2, #1
 80044c0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	691b      	ldr	r3, [r3, #16]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b02      	cmp	r3, #2
 80044e0:	d122      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	f003 0302 	and.w	r3, r3, #2
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d11b      	bne.n	8004528 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f06f 0202 	mvn.w	r2, #2
 80044f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2201      	movs	r2, #1
 80044fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	f003 0303 	and.w	r3, r3, #3
 800450a:	2b00      	cmp	r3, #0
 800450c:	d003      	beq.n	8004516 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f000 fa81 	bl	8004a16 <HAL_TIM_IC_CaptureCallback>
 8004514:	e005      	b.n	8004522 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004516:	6878      	ldr	r0, [r7, #4]
 8004518:	f000 fa73 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f000 fa84 	bl	8004a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2200      	movs	r2, #0
 8004526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b04      	cmp	r3, #4
 8004534:	d122      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f003 0304 	and.w	r3, r3, #4
 8004540:	2b04      	cmp	r3, #4
 8004542:	d11b      	bne.n	800457c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f06f 0204 	mvn.w	r2, #4
 800454c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2202      	movs	r2, #2
 8004552:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699b      	ldr	r3, [r3, #24]
 800455a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 fa57 	bl	8004a16 <HAL_TIM_IC_CaptureCallback>
 8004568:	e005      	b.n	8004576 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f000 fa49 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fa5a 	bl	8004a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2200      	movs	r2, #0
 800457a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b08      	cmp	r3, #8
 8004588:	d122      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	f003 0308 	and.w	r3, r3, #8
 8004594:	2b08      	cmp	r3, #8
 8004596:	d11b      	bne.n	80045d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f06f 0208 	mvn.w	r2, #8
 80045a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2204      	movs	r2, #4
 80045a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	69db      	ldr	r3, [r3, #28]
 80045ae:	f003 0303 	and.w	r3, r3, #3
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f000 fa2d 	bl	8004a16 <HAL_TIM_IC_CaptureCallback>
 80045bc:	e005      	b.n	80045ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 fa1f 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045c4:	6878      	ldr	r0, [r7, #4]
 80045c6:	f000 fa30 	bl	8004a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	2200      	movs	r2, #0
 80045ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	691b      	ldr	r3, [r3, #16]
 80045d6:	f003 0310 	and.w	r3, r3, #16
 80045da:	2b10      	cmp	r3, #16
 80045dc:	d122      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	68db      	ldr	r3, [r3, #12]
 80045e4:	f003 0310 	and.w	r3, r3, #16
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	d11b      	bne.n	8004624 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f06f 0210 	mvn.w	r2, #16
 80045f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2208      	movs	r2, #8
 80045fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	69db      	ldr	r3, [r3, #28]
 8004602:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800460a:	6878      	ldr	r0, [r7, #4]
 800460c:	f000 fa03 	bl	8004a16 <HAL_TIM_IC_CaptureCallback>
 8004610:	e005      	b.n	800461e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004612:	6878      	ldr	r0, [r7, #4]
 8004614:	f000 f9f5 	bl	8004a02 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	f000 fa06 	bl	8004a2a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2200      	movs	r2, #0
 8004622:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b01      	cmp	r3, #1
 8004630:	d10e      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68db      	ldr	r3, [r3, #12]
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	2b01      	cmp	r3, #1
 800463e:	d107      	bne.n	8004650 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f06f 0201 	mvn.w	r2, #1
 8004648:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f000 f9cf 	bl	80049ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b80      	cmp	r3, #128	; 0x80
 800465c:	d10e      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004668:	2b80      	cmp	r3, #128	; 0x80
 800466a:	d107      	bne.n	800467c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004674:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 fd82 	bl	8005180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004686:	2b40      	cmp	r3, #64	; 0x40
 8004688:	d10e      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004694:	2b40      	cmp	r3, #64	; 0x40
 8004696:	d107      	bne.n	80046a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80046a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f000 f9cb 	bl	8004a3e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f003 0320 	and.w	r3, r3, #32
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d10e      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68db      	ldr	r3, [r3, #12]
 80046bc:	f003 0320 	and.w	r3, r3, #32
 80046c0:	2b20      	cmp	r3, #32
 80046c2:	d107      	bne.n	80046d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f06f 0220 	mvn.w	r2, #32
 80046cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fd4c 	bl	800516c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80046d4:	bf00      	nop
 80046d6:	3708      	adds	r7, #8
 80046d8:	46bd      	mov	sp, r7
 80046da:	bd80      	pop	{r7, pc}

080046dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b086      	sub	sp, #24
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046e8:	2300      	movs	r3, #0
 80046ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046f2:	2b01      	cmp	r3, #1
 80046f4:	d101      	bne.n	80046fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80046f6:	2302      	movs	r3, #2
 80046f8:	e0ae      	b.n	8004858 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2b0c      	cmp	r3, #12
 8004706:	f200 809f 	bhi.w	8004848 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800470a:	a201      	add	r2, pc, #4	; (adr r2, 8004710 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800470c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004710:	08004745 	.word	0x08004745
 8004714:	08004849 	.word	0x08004849
 8004718:	08004849 	.word	0x08004849
 800471c:	08004849 	.word	0x08004849
 8004720:	08004785 	.word	0x08004785
 8004724:	08004849 	.word	0x08004849
 8004728:	08004849 	.word	0x08004849
 800472c:	08004849 	.word	0x08004849
 8004730:	080047c7 	.word	0x080047c7
 8004734:	08004849 	.word	0x08004849
 8004738:	08004849 	.word	0x08004849
 800473c:	08004849 	.word	0x08004849
 8004740:	08004807 	.word	0x08004807
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68b9      	ldr	r1, [r7, #8]
 800474a:	4618      	mov	r0, r3
 800474c:	f000 fa02 	bl	8004b54 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	699a      	ldr	r2, [r3, #24]
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f042 0208 	orr.w	r2, r2, #8
 800475e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	699a      	ldr	r2, [r3, #24]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0204 	bic.w	r2, r2, #4
 800476e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6999      	ldr	r1, [r3, #24]
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	691a      	ldr	r2, [r3, #16]
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	430a      	orrs	r2, r1
 8004780:	619a      	str	r2, [r3, #24]
      break;
 8004782:	e064      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68b9      	ldr	r1, [r7, #8]
 800478a:	4618      	mov	r0, r3
 800478c:	f000 fa48 	bl	8004c20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	699a      	ldr	r2, [r3, #24]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800479e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699a      	ldr	r2, [r3, #24]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	6999      	ldr	r1, [r3, #24]
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	021a      	lsls	r2, r3, #8
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	430a      	orrs	r2, r1
 80047c2:	619a      	str	r2, [r3, #24]
      break;
 80047c4:	e043      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	68b9      	ldr	r1, [r7, #8]
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 fa93 	bl	8004cf8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f042 0208 	orr.w	r2, r2, #8
 80047e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	69da      	ldr	r2, [r3, #28]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0204 	bic.w	r2, r2, #4
 80047f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	69d9      	ldr	r1, [r3, #28]
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691a      	ldr	r2, [r3, #16]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	430a      	orrs	r2, r1
 8004802:	61da      	str	r2, [r3, #28]
      break;
 8004804:	e023      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	68b9      	ldr	r1, [r7, #8]
 800480c:	4618      	mov	r0, r3
 800480e:	f000 fadd 	bl	8004dcc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	69da      	ldr	r2, [r3, #28]
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004820:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	69da      	ldr	r2, [r3, #28]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004830:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	69d9      	ldr	r1, [r3, #28]
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	691b      	ldr	r3, [r3, #16]
 800483c:	021a      	lsls	r2, r3, #8
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	430a      	orrs	r2, r1
 8004844:	61da      	str	r2, [r3, #28]
      break;
 8004846:	e002      	b.n	800484e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	75fb      	strb	r3, [r7, #23]
      break;
 800484c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004856:	7dfb      	ldrb	r3, [r7, #23]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3718      	adds	r7, #24
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800486a:	2300      	movs	r3, #0
 800486c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004874:	2b01      	cmp	r3, #1
 8004876:	d101      	bne.n	800487c <HAL_TIM_ConfigClockSource+0x1c>
 8004878:	2302      	movs	r3, #2
 800487a:	e0b4      	b.n	80049e6 <HAL_TIM_ConfigClockSource+0x186>
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	2201      	movs	r2, #1
 8004880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2202      	movs	r2, #2
 8004888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800489a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800489c:	68bb      	ldr	r3, [r7, #8]
 800489e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80048a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048b4:	d03e      	beq.n	8004934 <HAL_TIM_ConfigClockSource+0xd4>
 80048b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80048ba:	f200 8087 	bhi.w	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048c2:	f000 8086 	beq.w	80049d2 <HAL_TIM_ConfigClockSource+0x172>
 80048c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ca:	d87f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048cc:	2b70      	cmp	r3, #112	; 0x70
 80048ce:	d01a      	beq.n	8004906 <HAL_TIM_ConfigClockSource+0xa6>
 80048d0:	2b70      	cmp	r3, #112	; 0x70
 80048d2:	d87b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048d4:	2b60      	cmp	r3, #96	; 0x60
 80048d6:	d050      	beq.n	800497a <HAL_TIM_ConfigClockSource+0x11a>
 80048d8:	2b60      	cmp	r3, #96	; 0x60
 80048da:	d877      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048dc:	2b50      	cmp	r3, #80	; 0x50
 80048de:	d03c      	beq.n	800495a <HAL_TIM_ConfigClockSource+0xfa>
 80048e0:	2b50      	cmp	r3, #80	; 0x50
 80048e2:	d873      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048e4:	2b40      	cmp	r3, #64	; 0x40
 80048e6:	d058      	beq.n	800499a <HAL_TIM_ConfigClockSource+0x13a>
 80048e8:	2b40      	cmp	r3, #64	; 0x40
 80048ea:	d86f      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048ec:	2b30      	cmp	r3, #48	; 0x30
 80048ee:	d064      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 80048f0:	2b30      	cmp	r3, #48	; 0x30
 80048f2:	d86b      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048f4:	2b20      	cmp	r3, #32
 80048f6:	d060      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 80048f8:	2b20      	cmp	r3, #32
 80048fa:	d867      	bhi.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05c      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 8004900:	2b10      	cmp	r3, #16
 8004902:	d05a      	beq.n	80049ba <HAL_TIM_ConfigClockSource+0x15a>
 8004904:	e062      	b.n	80049cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6818      	ldr	r0, [r3, #0]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	6899      	ldr	r1, [r3, #8]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f000 fb23 	bl	8004f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	689b      	ldr	r3, [r3, #8]
 8004920:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004928:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	68ba      	ldr	r2, [r7, #8]
 8004930:	609a      	str	r2, [r3, #8]
      break;
 8004932:	e04f      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	6899      	ldr	r1, [r3, #8]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	685a      	ldr	r2, [r3, #4]
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f000 fb0c 	bl	8004f60 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	689a      	ldr	r2, [r3, #8]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004956:	609a      	str	r2, [r3, #8]
      break;
 8004958:	e03c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6818      	ldr	r0, [r3, #0]
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	6859      	ldr	r1, [r3, #4]
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	461a      	mov	r2, r3
 8004968:	f000 fa80 	bl	8004e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	2150      	movs	r1, #80	; 0x50
 8004972:	4618      	mov	r0, r3
 8004974:	f000 fad9 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 8004978:	e02c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6859      	ldr	r1, [r3, #4]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f000 fa9f 	bl	8004eca <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2160      	movs	r1, #96	; 0x60
 8004992:	4618      	mov	r0, r3
 8004994:	f000 fac9 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 8004998:	e01c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6818      	ldr	r0, [r3, #0]
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	6859      	ldr	r1, [r3, #4]
 80049a2:	683b      	ldr	r3, [r7, #0]
 80049a4:	68db      	ldr	r3, [r3, #12]
 80049a6:	461a      	mov	r2, r3
 80049a8:	f000 fa60 	bl	8004e6c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	2140      	movs	r1, #64	; 0x40
 80049b2:	4618      	mov	r0, r3
 80049b4:	f000 fab9 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 80049b8:	e00c      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4619      	mov	r1, r3
 80049c4:	4610      	mov	r0, r2
 80049c6:	f000 fab0 	bl	8004f2a <TIM_ITRx_SetConfig>
      break;
 80049ca:	e003      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	73fb      	strb	r3, [r7, #15]
      break;
 80049d0:	e000      	b.n	80049d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80049d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80049e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	3710      	adds	r7, #16
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bd80      	pop	{r7, pc}

080049ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b083      	sub	sp, #12
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80049f6:	bf00      	nop
 80049f8:	370c      	adds	r7, #12
 80049fa:	46bd      	mov	sp, r7
 80049fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a00:	4770      	bx	lr

08004a02 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a02:	b480      	push	{r7}
 8004a04:	b083      	sub	sp, #12
 8004a06:	af00      	add	r7, sp, #0
 8004a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004a0a:	bf00      	nop
 8004a0c:	370c      	adds	r7, #12
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a14:	4770      	bx	lr

08004a16 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004a16:	b480      	push	{r7}
 8004a18:	b083      	sub	sp, #12
 8004a1a:	af00      	add	r7, sp, #0
 8004a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a1e:	bf00      	nop
 8004a20:	370c      	adds	r7, #12
 8004a22:	46bd      	mov	sp, r7
 8004a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a28:	4770      	bx	lr

08004a2a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a2a:	b480      	push	{r7}
 8004a2c:	b083      	sub	sp, #12
 8004a2e:	af00      	add	r7, sp, #0
 8004a30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a32:	bf00      	nop
 8004a34:	370c      	adds	r7, #12
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr

08004a3e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a3e:	b480      	push	{r7}
 8004a40:	b083      	sub	sp, #12
 8004a42:	af00      	add	r7, sp, #0
 8004a44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a46:	bf00      	nop
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a50:	4770      	bx	lr
	...

08004a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a34      	ldr	r2, [pc, #208]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d00f      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a72:	d00b      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	4a31      	ldr	r2, [pc, #196]	; (8004b3c <TIM_Base_SetConfig+0xe8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d007      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	4a30      	ldr	r2, [pc, #192]	; (8004b40 <TIM_Base_SetConfig+0xec>)
 8004a80:	4293      	cmp	r3, r2
 8004a82:	d003      	beq.n	8004a8c <TIM_Base_SetConfig+0x38>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	4a2f      	ldr	r2, [pc, #188]	; (8004b44 <TIM_Base_SetConfig+0xf0>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d108      	bne.n	8004a9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	68fa      	ldr	r2, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a25      	ldr	r2, [pc, #148]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aac:	d017      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a22      	ldr	r2, [pc, #136]	; (8004b3c <TIM_Base_SetConfig+0xe8>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d013      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a21      	ldr	r2, [pc, #132]	; (8004b40 <TIM_Base_SetConfig+0xec>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d00f      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a20      	ldr	r2, [pc, #128]	; (8004b44 <TIM_Base_SetConfig+0xf0>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00b      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a1f      	ldr	r2, [pc, #124]	; (8004b48 <TIM_Base_SetConfig+0xf4>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d007      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a1e      	ldr	r2, [pc, #120]	; (8004b4c <TIM_Base_SetConfig+0xf8>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d003      	beq.n	8004ade <TIM_Base_SetConfig+0x8a>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a1d      	ldr	r2, [pc, #116]	; (8004b50 <TIM_Base_SetConfig+0xfc>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d108      	bne.n	8004af0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4313      	orrs	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	4313      	orrs	r3, r2
 8004afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	68fa      	ldr	r2, [r7, #12]
 8004b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a08      	ldr	r2, [pc, #32]	; (8004b38 <TIM_Base_SetConfig+0xe4>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d103      	bne.n	8004b24 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b1c:	683b      	ldr	r3, [r7, #0]
 8004b1e:	691a      	ldr	r2, [r3, #16]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2201      	movs	r2, #1
 8004b28:	615a      	str	r2, [r3, #20]
}
 8004b2a:	bf00      	nop
 8004b2c:	3714      	adds	r7, #20
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40010000 	.word	0x40010000
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40014400 	.word	0x40014400
 8004b50:	40014800 	.word	0x40014800

08004b54 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b54:	b480      	push	{r7}
 8004b56:	b087      	sub	sp, #28
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
 8004b5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a1b      	ldr	r3, [r3, #32]
 8004b62:	f023 0201 	bic.w	r2, r3, #1
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	699b      	ldr	r3, [r3, #24]
 8004b7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	f023 0303 	bic.w	r3, r3, #3
 8004b8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b96:	697b      	ldr	r3, [r7, #20]
 8004b98:	f023 0302 	bic.w	r3, r3, #2
 8004b9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	697a      	ldr	r2, [r7, #20]
 8004ba4:	4313      	orrs	r3, r2
 8004ba6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	4a1c      	ldr	r2, [pc, #112]	; (8004c1c <TIM_OC1_SetConfig+0xc8>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d10c      	bne.n	8004bca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	f023 0308 	bic.w	r3, r3, #8
 8004bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	697a      	ldr	r2, [r7, #20]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	f023 0304 	bic.w	r3, r3, #4
 8004bc8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	4a13      	ldr	r2, [pc, #76]	; (8004c1c <TIM_OC1_SetConfig+0xc8>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d111      	bne.n	8004bf6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	695b      	ldr	r3, [r3, #20]
 8004be6:	693a      	ldr	r2, [r7, #16]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	699b      	ldr	r3, [r3, #24]
 8004bf0:	693a      	ldr	r2, [r7, #16]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	693a      	ldr	r2, [r7, #16]
 8004bfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004c02:	683b      	ldr	r3, [r7, #0]
 8004c04:	685a      	ldr	r2, [r3, #4]
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	697a      	ldr	r2, [r7, #20]
 8004c0e:	621a      	str	r2, [r3, #32]
}
 8004c10:	bf00      	nop
 8004c12:	371c      	adds	r7, #28
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40010000 	.word	0x40010000

08004c20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b087      	sub	sp, #28
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a1b      	ldr	r3, [r3, #32]
 8004c2e:	f023 0210 	bic.w	r2, r3, #16
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a1b      	ldr	r3, [r3, #32]
 8004c3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	699b      	ldr	r3, [r3, #24]
 8004c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	021b      	lsls	r3, r3, #8
 8004c5e:	68fa      	ldr	r2, [r7, #12]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c64:	697b      	ldr	r3, [r7, #20]
 8004c66:	f023 0320 	bic.w	r3, r3, #32
 8004c6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	689b      	ldr	r3, [r3, #8]
 8004c70:	011b      	lsls	r3, r3, #4
 8004c72:	697a      	ldr	r2, [r7, #20]
 8004c74:	4313      	orrs	r3, r2
 8004c76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a1e      	ldr	r2, [pc, #120]	; (8004cf4 <TIM_OC2_SetConfig+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d10d      	bne.n	8004c9c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	011b      	lsls	r3, r3, #4
 8004c8e:	697a      	ldr	r2, [r7, #20]
 8004c90:	4313      	orrs	r3, r2
 8004c92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c94:	697b      	ldr	r3, [r7, #20]
 8004c96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	4a15      	ldr	r2, [pc, #84]	; (8004cf4 <TIM_OC2_SetConfig+0xd4>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d113      	bne.n	8004ccc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	695b      	ldr	r3, [r3, #20]
 8004cb8:	009b      	lsls	r3, r3, #2
 8004cba:	693a      	ldr	r2, [r7, #16]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	699b      	ldr	r3, [r3, #24]
 8004cc4:	009b      	lsls	r3, r3, #2
 8004cc6:	693a      	ldr	r2, [r7, #16]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	693a      	ldr	r2, [r7, #16]
 8004cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685a      	ldr	r2, [r3, #4]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	697a      	ldr	r2, [r7, #20]
 8004ce4:	621a      	str	r2, [r3, #32]
}
 8004ce6:	bf00      	nop
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
 8004cf2:	bf00      	nop
 8004cf4:	40010000 	.word	0x40010000

08004cf8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b087      	sub	sp, #28
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]
 8004d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6a1b      	ldr	r3, [r3, #32]
 8004d06:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	6a1b      	ldr	r3, [r3, #32]
 8004d12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	69db      	ldr	r3, [r3, #28]
 8004d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f023 0303 	bic.w	r3, r3, #3
 8004d2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	68fa      	ldr	r2, [r7, #12]
 8004d36:	4313      	orrs	r3, r2
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004d40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	021b      	lsls	r3, r3, #8
 8004d48:	697a      	ldr	r2, [r7, #20]
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a1d      	ldr	r2, [pc, #116]	; (8004dc8 <TIM_OC3_SetConfig+0xd0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d10d      	bne.n	8004d72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004d5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	697a      	ldr	r2, [r7, #20]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004d70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a14      	ldr	r2, [pc, #80]	; (8004dc8 <TIM_OC3_SetConfig+0xd0>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d113      	bne.n	8004da2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004d80:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004d88:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	011b      	lsls	r3, r3, #4
 8004d90:	693a      	ldr	r2, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	699b      	ldr	r3, [r3, #24]
 8004d9a:	011b      	lsls	r3, r3, #4
 8004d9c:	693a      	ldr	r2, [r7, #16]
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	685a      	ldr	r2, [r3, #4]
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	697a      	ldr	r2, [r7, #20]
 8004dba:	621a      	str	r2, [r3, #32]
}
 8004dbc:	bf00      	nop
 8004dbe:	371c      	adds	r7, #28
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc6:	4770      	bx	lr
 8004dc8:	40010000 	.word	0x40010000

08004dcc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b087      	sub	sp, #28
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a1b      	ldr	r3, [r3, #32]
 8004dda:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6a1b      	ldr	r3, [r3, #32]
 8004de6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	69db      	ldr	r3, [r3, #28]
 8004df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	021b      	lsls	r3, r3, #8
 8004e0a:	68fa      	ldr	r2, [r7, #12]
 8004e0c:	4313      	orrs	r3, r2
 8004e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e10:	693b      	ldr	r3, [r7, #16]
 8004e12:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004e16:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	031b      	lsls	r3, r3, #12
 8004e1e:	693a      	ldr	r2, [r7, #16]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	4a10      	ldr	r2, [pc, #64]	; (8004e68 <TIM_OC4_SetConfig+0x9c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d109      	bne.n	8004e40 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004e2c:	697b      	ldr	r3, [r7, #20]
 8004e2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e32:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004e34:	683b      	ldr	r3, [r7, #0]
 8004e36:	695b      	ldr	r3, [r3, #20]
 8004e38:	019b      	lsls	r3, r3, #6
 8004e3a:	697a      	ldr	r2, [r7, #20]
 8004e3c:	4313      	orrs	r3, r2
 8004e3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	697a      	ldr	r2, [r7, #20]
 8004e44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68fa      	ldr	r2, [r7, #12]
 8004e4a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	685a      	ldr	r2, [r3, #4]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	693a      	ldr	r2, [r7, #16]
 8004e58:	621a      	str	r2, [r3, #32]
}
 8004e5a:	bf00      	nop
 8004e5c:	371c      	adds	r7, #28
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
 8004e66:	bf00      	nop
 8004e68:	40010000 	.word	0x40010000

08004e6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004e6c:	b480      	push	{r7}
 8004e6e:	b087      	sub	sp, #28
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	60f8      	str	r0, [r7, #12]
 8004e74:	60b9      	str	r1, [r7, #8]
 8004e76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	6a1b      	ldr	r3, [r3, #32]
 8004e7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	6a1b      	ldr	r3, [r3, #32]
 8004e82:	f023 0201 	bic.w	r2, r3, #1
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	699b      	ldr	r3, [r3, #24]
 8004e8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	011b      	lsls	r3, r3, #4
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f023 030a 	bic.w	r3, r3, #10
 8004ea8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004eaa:	697a      	ldr	r2, [r7, #20]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	693a      	ldr	r2, [r7, #16]
 8004eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	697a      	ldr	r2, [r7, #20]
 8004ebc:	621a      	str	r2, [r3, #32]
}
 8004ebe:	bf00      	nop
 8004ec0:	371c      	adds	r7, #28
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec8:	4770      	bx	lr

08004eca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004eca:	b480      	push	{r7}
 8004ecc:	b087      	sub	sp, #28
 8004ece:	af00      	add	r7, sp, #0
 8004ed0:	60f8      	str	r0, [r7, #12]
 8004ed2:	60b9      	str	r1, [r7, #8]
 8004ed4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 0210 	bic.w	r2, r3, #16
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	699b      	ldr	r3, [r3, #24]
 8004ee6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	6a1b      	ldr	r3, [r3, #32]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004eee:	697b      	ldr	r3, [r7, #20]
 8004ef0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ef4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	031b      	lsls	r3, r3, #12
 8004efa:	697a      	ldr	r2, [r7, #20]
 8004efc:	4313      	orrs	r3, r2
 8004efe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004f06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	011b      	lsls	r3, r3, #4
 8004f0c:	693a      	ldr	r2, [r7, #16]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	697a      	ldr	r2, [r7, #20]
 8004f16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	693a      	ldr	r2, [r7, #16]
 8004f1c:	621a      	str	r2, [r3, #32]
}
 8004f1e:	bf00      	nop
 8004f20:	371c      	adds	r7, #28
 8004f22:	46bd      	mov	sp, r7
 8004f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f28:	4770      	bx	lr

08004f2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004f2a:	b480      	push	{r7}
 8004f2c:	b085      	sub	sp, #20
 8004f2e:	af00      	add	r7, sp, #0
 8004f30:	6078      	str	r0, [r7, #4]
 8004f32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	f043 0307 	orr.w	r3, r3, #7
 8004f4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	68fa      	ldr	r2, [r7, #12]
 8004f52:	609a      	str	r2, [r3, #8]
}
 8004f54:	bf00      	nop
 8004f56:	3714      	adds	r7, #20
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5e:	4770      	bx	lr

08004f60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f60:	b480      	push	{r7}
 8004f62:	b087      	sub	sp, #28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
 8004f6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f74:	697b      	ldr	r3, [r7, #20]
 8004f76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	021a      	lsls	r2, r3, #8
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	431a      	orrs	r2, r3
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4313      	orrs	r3, r2
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	609a      	str	r2, [r3, #8]
}
 8004f94:	bf00      	nop
 8004f96:	371c      	adds	r7, #28
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9e:	4770      	bx	lr

08004fa0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	60f8      	str	r0, [r7, #12]
 8004fa8:	60b9      	str	r1, [r7, #8]
 8004faa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	f003 031f 	and.w	r3, r3, #31
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a1a      	ldr	r2, [r3, #32]
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	401a      	ands	r2, r3
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a1a      	ldr	r2, [r3, #32]
 8004fcc:	68bb      	ldr	r3, [r7, #8]
 8004fce:	f003 031f 	and.w	r3, r3, #31
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	621a      	str	r2, [r3, #32]
}
 8004fde:	bf00      	nop
 8004fe0:	371c      	adds	r7, #28
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe8:	4770      	bx	lr
	...

08004fec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fec:	b480      	push	{r7}
 8004fee:	b085      	sub	sp, #20
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
 8004ff4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d101      	bne.n	8005004 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005000:	2302      	movs	r3, #2
 8005002:	e050      	b.n	80050a6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2201      	movs	r2, #1
 8005008:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2202      	movs	r2, #2
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800502a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	4313      	orrs	r3, r2
 8005034:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	68fa      	ldr	r2, [r7, #12]
 800503c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a1c      	ldr	r2, [pc, #112]	; (80050b4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d018      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005050:	d013      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a18      	ldr	r2, [pc, #96]	; (80050b8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d00e      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a16      	ldr	r2, [pc, #88]	; (80050bc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d009      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a15      	ldr	r2, [pc, #84]	; (80050c0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d004      	beq.n	800507a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a13      	ldr	r2, [pc, #76]	; (80050c4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10c      	bne.n	8005094 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005080:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	68ba      	ldr	r2, [r7, #8]
 8005088:	4313      	orrs	r3, r2
 800508a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050a4:	2300      	movs	r3, #0
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3714      	adds	r7, #20
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
 80050b2:	bf00      	nop
 80050b4:	40010000 	.word	0x40010000
 80050b8:	40000400 	.word	0x40000400
 80050bc:	40000800 	.word	0x40000800
 80050c0:	40000c00 	.word	0x40000c00
 80050c4:	40014000 	.word	0x40014000

080050c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050d2:	2300      	movs	r3, #0
 80050d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e03d      	b.n	8005160 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2201      	movs	r2, #1
 80050e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	68db      	ldr	r3, [r3, #12]
 80050f6:	4313      	orrs	r3, r2
 80050f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4313      	orrs	r3, r2
 8005106:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	4313      	orrs	r3, r2
 8005114:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4313      	orrs	r3, r2
 8005122:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	691b      	ldr	r3, [r3, #16]
 800512e:	4313      	orrs	r3, r2
 8005130:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	695b      	ldr	r3, [r3, #20]
 800513c:	4313      	orrs	r3, r2
 800513e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	69db      	ldr	r3, [r3, #28]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2200      	movs	r2, #0
 800515a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800515e:	2300      	movs	r3, #0
}
 8005160:	4618      	mov	r0, r3
 8005162:	3714      	adds	r7, #20
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005188:	bf00      	nop
 800518a:	370c      	adds	r7, #12
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005194:	b580      	push	{r7, lr}
 8005196:	b082      	sub	sp, #8
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e03f      	b.n	8005226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d106      	bne.n	80051c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051ba:	6878      	ldr	r0, [r7, #4]
 80051bc:	f7fc fea2 	bl	8001f04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2224      	movs	r2, #36	; 0x24
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	f000 f829 	bl	8005230 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	695a      	ldr	r2, [r3, #20]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68da      	ldr	r2, [r3, #12]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800520c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2220      	movs	r2, #32
 8005218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2220      	movs	r2, #32
 8005220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005234:	b0c0      	sub	sp, #256	; 0x100
 8005236:	af00      	add	r7, sp, #0
 8005238:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800523c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	691b      	ldr	r3, [r3, #16]
 8005244:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800524c:	68d9      	ldr	r1, [r3, #12]
 800524e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005252:	681a      	ldr	r2, [r3, #0]
 8005254:	ea40 0301 	orr.w	r3, r0, r1
 8005258:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800525a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800525e:	689a      	ldr	r2, [r3, #8]
 8005260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	431a      	orrs	r2, r3
 8005268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526c:	695b      	ldr	r3, [r3, #20]
 800526e:	431a      	orrs	r2, r3
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	69db      	ldr	r3, [r3, #28]
 8005276:	4313      	orrs	r3, r2
 8005278:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005288:	f021 010c 	bic.w	r1, r1, #12
 800528c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005290:	681a      	ldr	r2, [r3, #0]
 8005292:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005296:	430b      	orrs	r3, r1
 8005298:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800529a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	6999      	ldr	r1, [r3, #24]
 80052ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b0:	681a      	ldr	r2, [r3, #0]
 80052b2:	ea40 0301 	orr.w	r3, r0, r1
 80052b6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80052b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	4b8f      	ldr	r3, [pc, #572]	; (80054fc <UART_SetConfig+0x2cc>)
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d005      	beq.n	80052d0 <UART_SetConfig+0xa0>
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	4b8d      	ldr	r3, [pc, #564]	; (8005500 <UART_SetConfig+0x2d0>)
 80052cc:	429a      	cmp	r2, r3
 80052ce:	d104      	bne.n	80052da <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80052d0:	f7fe fe0a 	bl	8003ee8 <HAL_RCC_GetPCLK2Freq>
 80052d4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80052d8:	e003      	b.n	80052e2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80052da:	f7fe fdf1 	bl	8003ec0 <HAL_RCC_GetPCLK1Freq>
 80052de:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e6:	69db      	ldr	r3, [r3, #28]
 80052e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052ec:	f040 810c 	bne.w	8005508 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052f4:	2200      	movs	r2, #0
 80052f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052fa:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052fe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	1891      	adds	r1, r2, r2
 8005308:	65b9      	str	r1, [r7, #88]	; 0x58
 800530a:	415b      	adcs	r3, r3
 800530c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800530e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005312:	4621      	mov	r1, r4
 8005314:	eb12 0801 	adds.w	r8, r2, r1
 8005318:	4629      	mov	r1, r5
 800531a:	eb43 0901 	adc.w	r9, r3, r1
 800531e:	f04f 0200 	mov.w	r2, #0
 8005322:	f04f 0300 	mov.w	r3, #0
 8005326:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800532a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800532e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005332:	4690      	mov	r8, r2
 8005334:	4699      	mov	r9, r3
 8005336:	4623      	mov	r3, r4
 8005338:	eb18 0303 	adds.w	r3, r8, r3
 800533c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005340:	462b      	mov	r3, r5
 8005342:	eb49 0303 	adc.w	r3, r9, r3
 8005346:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005356:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800535a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800535e:	460b      	mov	r3, r1
 8005360:	18db      	adds	r3, r3, r3
 8005362:	653b      	str	r3, [r7, #80]	; 0x50
 8005364:	4613      	mov	r3, r2
 8005366:	eb42 0303 	adc.w	r3, r2, r3
 800536a:	657b      	str	r3, [r7, #84]	; 0x54
 800536c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005370:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005374:	f7fb fb9c 	bl	8000ab0 <__aeabi_uldivmod>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4b61      	ldr	r3, [pc, #388]	; (8005504 <UART_SetConfig+0x2d4>)
 800537e:	fba3 2302 	umull	r2, r3, r3, r2
 8005382:	095b      	lsrs	r3, r3, #5
 8005384:	011c      	lsls	r4, r3, #4
 8005386:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800538a:	2200      	movs	r2, #0
 800538c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005390:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005394:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005398:	4642      	mov	r2, r8
 800539a:	464b      	mov	r3, r9
 800539c:	1891      	adds	r1, r2, r2
 800539e:	64b9      	str	r1, [r7, #72]	; 0x48
 80053a0:	415b      	adcs	r3, r3
 80053a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053a4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053a8:	4641      	mov	r1, r8
 80053aa:	eb12 0a01 	adds.w	sl, r2, r1
 80053ae:	4649      	mov	r1, r9
 80053b0:	eb43 0b01 	adc.w	fp, r3, r1
 80053b4:	f04f 0200 	mov.w	r2, #0
 80053b8:	f04f 0300 	mov.w	r3, #0
 80053bc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80053c0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80053c4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80053c8:	4692      	mov	sl, r2
 80053ca:	469b      	mov	fp, r3
 80053cc:	4643      	mov	r3, r8
 80053ce:	eb1a 0303 	adds.w	r3, sl, r3
 80053d2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80053d6:	464b      	mov	r3, r9
 80053d8:	eb4b 0303 	adc.w	r3, fp, r3
 80053dc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	685b      	ldr	r3, [r3, #4]
 80053e6:	2200      	movs	r2, #0
 80053e8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053ec:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053f0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053f4:	460b      	mov	r3, r1
 80053f6:	18db      	adds	r3, r3, r3
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
 80053fa:	4613      	mov	r3, r2
 80053fc:	eb42 0303 	adc.w	r3, r2, r3
 8005400:	647b      	str	r3, [r7, #68]	; 0x44
 8005402:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005406:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800540a:	f7fb fb51 	bl	8000ab0 <__aeabi_uldivmod>
 800540e:	4602      	mov	r2, r0
 8005410:	460b      	mov	r3, r1
 8005412:	4611      	mov	r1, r2
 8005414:	4b3b      	ldr	r3, [pc, #236]	; (8005504 <UART_SetConfig+0x2d4>)
 8005416:	fba3 2301 	umull	r2, r3, r3, r1
 800541a:	095b      	lsrs	r3, r3, #5
 800541c:	2264      	movs	r2, #100	; 0x64
 800541e:	fb02 f303 	mul.w	r3, r2, r3
 8005422:	1acb      	subs	r3, r1, r3
 8005424:	00db      	lsls	r3, r3, #3
 8005426:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800542a:	4b36      	ldr	r3, [pc, #216]	; (8005504 <UART_SetConfig+0x2d4>)
 800542c:	fba3 2302 	umull	r2, r3, r3, r2
 8005430:	095b      	lsrs	r3, r3, #5
 8005432:	005b      	lsls	r3, r3, #1
 8005434:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005438:	441c      	add	r4, r3
 800543a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800543e:	2200      	movs	r2, #0
 8005440:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005444:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005448:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800544c:	4642      	mov	r2, r8
 800544e:	464b      	mov	r3, r9
 8005450:	1891      	adds	r1, r2, r2
 8005452:	63b9      	str	r1, [r7, #56]	; 0x38
 8005454:	415b      	adcs	r3, r3
 8005456:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005458:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800545c:	4641      	mov	r1, r8
 800545e:	1851      	adds	r1, r2, r1
 8005460:	6339      	str	r1, [r7, #48]	; 0x30
 8005462:	4649      	mov	r1, r9
 8005464:	414b      	adcs	r3, r1
 8005466:	637b      	str	r3, [r7, #52]	; 0x34
 8005468:	f04f 0200 	mov.w	r2, #0
 800546c:	f04f 0300 	mov.w	r3, #0
 8005470:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005474:	4659      	mov	r1, fp
 8005476:	00cb      	lsls	r3, r1, #3
 8005478:	4651      	mov	r1, sl
 800547a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800547e:	4651      	mov	r1, sl
 8005480:	00ca      	lsls	r2, r1, #3
 8005482:	4610      	mov	r0, r2
 8005484:	4619      	mov	r1, r3
 8005486:	4603      	mov	r3, r0
 8005488:	4642      	mov	r2, r8
 800548a:	189b      	adds	r3, r3, r2
 800548c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005490:	464b      	mov	r3, r9
 8005492:	460a      	mov	r2, r1
 8005494:	eb42 0303 	adc.w	r3, r2, r3
 8005498:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	2200      	movs	r2, #0
 80054a4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054a8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80054ac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80054b0:	460b      	mov	r3, r1
 80054b2:	18db      	adds	r3, r3, r3
 80054b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054b6:	4613      	mov	r3, r2
 80054b8:	eb42 0303 	adc.w	r3, r2, r3
 80054bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80054be:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054c2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80054c6:	f7fb faf3 	bl	8000ab0 <__aeabi_uldivmod>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4b0d      	ldr	r3, [pc, #52]	; (8005504 <UART_SetConfig+0x2d4>)
 80054d0:	fba3 1302 	umull	r1, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	2164      	movs	r1, #100	; 0x64
 80054d8:	fb01 f303 	mul.w	r3, r1, r3
 80054dc:	1ad3      	subs	r3, r2, r3
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	3332      	adds	r3, #50	; 0x32
 80054e2:	4a08      	ldr	r2, [pc, #32]	; (8005504 <UART_SetConfig+0x2d4>)
 80054e4:	fba2 2303 	umull	r2, r3, r2, r3
 80054e8:	095b      	lsrs	r3, r3, #5
 80054ea:	f003 0207 	and.w	r2, r3, #7
 80054ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4422      	add	r2, r4
 80054f6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054f8:	e105      	b.n	8005706 <UART_SetConfig+0x4d6>
 80054fa:	bf00      	nop
 80054fc:	40011000 	.word	0x40011000
 8005500:	40011400 	.word	0x40011400
 8005504:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005508:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800550c:	2200      	movs	r2, #0
 800550e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005512:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005516:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800551a:	4642      	mov	r2, r8
 800551c:	464b      	mov	r3, r9
 800551e:	1891      	adds	r1, r2, r2
 8005520:	6239      	str	r1, [r7, #32]
 8005522:	415b      	adcs	r3, r3
 8005524:	627b      	str	r3, [r7, #36]	; 0x24
 8005526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800552a:	4641      	mov	r1, r8
 800552c:	1854      	adds	r4, r2, r1
 800552e:	4649      	mov	r1, r9
 8005530:	eb43 0501 	adc.w	r5, r3, r1
 8005534:	f04f 0200 	mov.w	r2, #0
 8005538:	f04f 0300 	mov.w	r3, #0
 800553c:	00eb      	lsls	r3, r5, #3
 800553e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005542:	00e2      	lsls	r2, r4, #3
 8005544:	4614      	mov	r4, r2
 8005546:	461d      	mov	r5, r3
 8005548:	4643      	mov	r3, r8
 800554a:	18e3      	adds	r3, r4, r3
 800554c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005550:	464b      	mov	r3, r9
 8005552:	eb45 0303 	adc.w	r3, r5, r3
 8005556:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005566:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800556a:	f04f 0200 	mov.w	r2, #0
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005576:	4629      	mov	r1, r5
 8005578:	008b      	lsls	r3, r1, #2
 800557a:	4621      	mov	r1, r4
 800557c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005580:	4621      	mov	r1, r4
 8005582:	008a      	lsls	r2, r1, #2
 8005584:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005588:	f7fb fa92 	bl	8000ab0 <__aeabi_uldivmod>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4b60      	ldr	r3, [pc, #384]	; (8005714 <UART_SetConfig+0x4e4>)
 8005592:	fba3 2302 	umull	r2, r3, r3, r2
 8005596:	095b      	lsrs	r3, r3, #5
 8005598:	011c      	lsls	r4, r3, #4
 800559a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800559e:	2200      	movs	r2, #0
 80055a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055a4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80055ac:	4642      	mov	r2, r8
 80055ae:	464b      	mov	r3, r9
 80055b0:	1891      	adds	r1, r2, r2
 80055b2:	61b9      	str	r1, [r7, #24]
 80055b4:	415b      	adcs	r3, r3
 80055b6:	61fb      	str	r3, [r7, #28]
 80055b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055bc:	4641      	mov	r1, r8
 80055be:	1851      	adds	r1, r2, r1
 80055c0:	6139      	str	r1, [r7, #16]
 80055c2:	4649      	mov	r1, r9
 80055c4:	414b      	adcs	r3, r1
 80055c6:	617b      	str	r3, [r7, #20]
 80055c8:	f04f 0200 	mov.w	r2, #0
 80055cc:	f04f 0300 	mov.w	r3, #0
 80055d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80055d4:	4659      	mov	r1, fp
 80055d6:	00cb      	lsls	r3, r1, #3
 80055d8:	4651      	mov	r1, sl
 80055da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055de:	4651      	mov	r1, sl
 80055e0:	00ca      	lsls	r2, r1, #3
 80055e2:	4610      	mov	r0, r2
 80055e4:	4619      	mov	r1, r3
 80055e6:	4603      	mov	r3, r0
 80055e8:	4642      	mov	r2, r8
 80055ea:	189b      	adds	r3, r3, r2
 80055ec:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055f0:	464b      	mov	r3, r9
 80055f2:	460a      	mov	r2, r1
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2200      	movs	r2, #0
 8005604:	67bb      	str	r3, [r7, #120]	; 0x78
 8005606:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005608:	f04f 0200 	mov.w	r2, #0
 800560c:	f04f 0300 	mov.w	r3, #0
 8005610:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005614:	4649      	mov	r1, r9
 8005616:	008b      	lsls	r3, r1, #2
 8005618:	4641      	mov	r1, r8
 800561a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800561e:	4641      	mov	r1, r8
 8005620:	008a      	lsls	r2, r1, #2
 8005622:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005626:	f7fb fa43 	bl	8000ab0 <__aeabi_uldivmod>
 800562a:	4602      	mov	r2, r0
 800562c:	460b      	mov	r3, r1
 800562e:	4b39      	ldr	r3, [pc, #228]	; (8005714 <UART_SetConfig+0x4e4>)
 8005630:	fba3 1302 	umull	r1, r3, r3, r2
 8005634:	095b      	lsrs	r3, r3, #5
 8005636:	2164      	movs	r1, #100	; 0x64
 8005638:	fb01 f303 	mul.w	r3, r1, r3
 800563c:	1ad3      	subs	r3, r2, r3
 800563e:	011b      	lsls	r3, r3, #4
 8005640:	3332      	adds	r3, #50	; 0x32
 8005642:	4a34      	ldr	r2, [pc, #208]	; (8005714 <UART_SetConfig+0x4e4>)
 8005644:	fba2 2303 	umull	r2, r3, r2, r3
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800564e:	441c      	add	r4, r3
 8005650:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005654:	2200      	movs	r2, #0
 8005656:	673b      	str	r3, [r7, #112]	; 0x70
 8005658:	677a      	str	r2, [r7, #116]	; 0x74
 800565a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800565e:	4642      	mov	r2, r8
 8005660:	464b      	mov	r3, r9
 8005662:	1891      	adds	r1, r2, r2
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	415b      	adcs	r3, r3
 8005668:	60fb      	str	r3, [r7, #12]
 800566a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800566e:	4641      	mov	r1, r8
 8005670:	1851      	adds	r1, r2, r1
 8005672:	6039      	str	r1, [r7, #0]
 8005674:	4649      	mov	r1, r9
 8005676:	414b      	adcs	r3, r1
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	f04f 0200 	mov.w	r2, #0
 800567e:	f04f 0300 	mov.w	r3, #0
 8005682:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005686:	4659      	mov	r1, fp
 8005688:	00cb      	lsls	r3, r1, #3
 800568a:	4651      	mov	r1, sl
 800568c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005690:	4651      	mov	r1, sl
 8005692:	00ca      	lsls	r2, r1, #3
 8005694:	4610      	mov	r0, r2
 8005696:	4619      	mov	r1, r3
 8005698:	4603      	mov	r3, r0
 800569a:	4642      	mov	r2, r8
 800569c:	189b      	adds	r3, r3, r2
 800569e:	66bb      	str	r3, [r7, #104]	; 0x68
 80056a0:	464b      	mov	r3, r9
 80056a2:	460a      	mov	r2, r1
 80056a4:	eb42 0303 	adc.w	r3, r2, r3
 80056a8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80056aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056ae:	685b      	ldr	r3, [r3, #4]
 80056b0:	2200      	movs	r2, #0
 80056b2:	663b      	str	r3, [r7, #96]	; 0x60
 80056b4:	667a      	str	r2, [r7, #100]	; 0x64
 80056b6:	f04f 0200 	mov.w	r2, #0
 80056ba:	f04f 0300 	mov.w	r3, #0
 80056be:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80056c2:	4649      	mov	r1, r9
 80056c4:	008b      	lsls	r3, r1, #2
 80056c6:	4641      	mov	r1, r8
 80056c8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056cc:	4641      	mov	r1, r8
 80056ce:	008a      	lsls	r2, r1, #2
 80056d0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80056d4:	f7fb f9ec 	bl	8000ab0 <__aeabi_uldivmod>
 80056d8:	4602      	mov	r2, r0
 80056da:	460b      	mov	r3, r1
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <UART_SetConfig+0x4e4>)
 80056de:	fba3 1302 	umull	r1, r3, r3, r2
 80056e2:	095b      	lsrs	r3, r3, #5
 80056e4:	2164      	movs	r1, #100	; 0x64
 80056e6:	fb01 f303 	mul.w	r3, r1, r3
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	011b      	lsls	r3, r3, #4
 80056ee:	3332      	adds	r3, #50	; 0x32
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <UART_SetConfig+0x4e4>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	095b      	lsrs	r3, r3, #5
 80056f8:	f003 020f 	and.w	r2, r3, #15
 80056fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	4422      	add	r2, r4
 8005704:	609a      	str	r2, [r3, #8]
}
 8005706:	bf00      	nop
 8005708:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800570c:	46bd      	mov	sp, r7
 800570e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005712:	bf00      	nop
 8005714:	51eb851f 	.word	0x51eb851f

08005718 <__libc_init_array>:
 8005718:	b570      	push	{r4, r5, r6, lr}
 800571a:	4d0d      	ldr	r5, [pc, #52]	; (8005750 <__libc_init_array+0x38>)
 800571c:	4c0d      	ldr	r4, [pc, #52]	; (8005754 <__libc_init_array+0x3c>)
 800571e:	1b64      	subs	r4, r4, r5
 8005720:	10a4      	asrs	r4, r4, #2
 8005722:	2600      	movs	r6, #0
 8005724:	42a6      	cmp	r6, r4
 8005726:	d109      	bne.n	800573c <__libc_init_array+0x24>
 8005728:	4d0b      	ldr	r5, [pc, #44]	; (8005758 <__libc_init_array+0x40>)
 800572a:	4c0c      	ldr	r4, [pc, #48]	; (800575c <__libc_init_array+0x44>)
 800572c:	f000 f866 	bl	80057fc <_init>
 8005730:	1b64      	subs	r4, r4, r5
 8005732:	10a4      	asrs	r4, r4, #2
 8005734:	2600      	movs	r6, #0
 8005736:	42a6      	cmp	r6, r4
 8005738:	d105      	bne.n	8005746 <__libc_init_array+0x2e>
 800573a:	bd70      	pop	{r4, r5, r6, pc}
 800573c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005740:	4798      	blx	r3
 8005742:	3601      	adds	r6, #1
 8005744:	e7ee      	b.n	8005724 <__libc_init_array+0xc>
 8005746:	f855 3b04 	ldr.w	r3, [r5], #4
 800574a:	4798      	blx	r3
 800574c:	3601      	adds	r6, #1
 800574e:	e7f2      	b.n	8005736 <__libc_init_array+0x1e>
 8005750:	0800583c 	.word	0x0800583c
 8005754:	0800583c 	.word	0x0800583c
 8005758:	0800583c 	.word	0x0800583c
 800575c:	08005840 	.word	0x08005840

08005760 <memset>:
 8005760:	4402      	add	r2, r0
 8005762:	4603      	mov	r3, r0
 8005764:	4293      	cmp	r3, r2
 8005766:	d100      	bne.n	800576a <memset+0xa>
 8005768:	4770      	bx	lr
 800576a:	f803 1b01 	strb.w	r1, [r3], #1
 800576e:	e7f9      	b.n	8005764 <memset+0x4>

08005770 <round>:
 8005770:	ec51 0b10 	vmov	r0, r1, d0
 8005774:	b570      	push	{r4, r5, r6, lr}
 8005776:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800577a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800577e:	2c13      	cmp	r4, #19
 8005780:	ee10 2a10 	vmov	r2, s0
 8005784:	460b      	mov	r3, r1
 8005786:	dc19      	bgt.n	80057bc <round+0x4c>
 8005788:	2c00      	cmp	r4, #0
 800578a:	da09      	bge.n	80057a0 <round+0x30>
 800578c:	3401      	adds	r4, #1
 800578e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8005792:	d103      	bne.n	800579c <round+0x2c>
 8005794:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005798:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800579c:	2200      	movs	r2, #0
 800579e:	e028      	b.n	80057f2 <round+0x82>
 80057a0:	4d15      	ldr	r5, [pc, #84]	; (80057f8 <round+0x88>)
 80057a2:	4125      	asrs	r5, r4
 80057a4:	ea01 0605 	and.w	r6, r1, r5
 80057a8:	4332      	orrs	r2, r6
 80057aa:	d00e      	beq.n	80057ca <round+0x5a>
 80057ac:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80057b0:	fa42 f404 	asr.w	r4, r2, r4
 80057b4:	4423      	add	r3, r4
 80057b6:	ea23 0305 	bic.w	r3, r3, r5
 80057ba:	e7ef      	b.n	800579c <round+0x2c>
 80057bc:	2c33      	cmp	r4, #51	; 0x33
 80057be:	dd07      	ble.n	80057d0 <round+0x60>
 80057c0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80057c4:	d101      	bne.n	80057ca <round+0x5a>
 80057c6:	f7fa fe37 	bl	8000438 <__adddf3>
 80057ca:	ec41 0b10 	vmov	d0, r0, r1
 80057ce:	bd70      	pop	{r4, r5, r6, pc}
 80057d0:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 80057d4:	f04f 35ff 	mov.w	r5, #4294967295
 80057d8:	40f5      	lsrs	r5, r6
 80057da:	4228      	tst	r0, r5
 80057dc:	d0f5      	beq.n	80057ca <round+0x5a>
 80057de:	2101      	movs	r1, #1
 80057e0:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80057e4:	fa01 f404 	lsl.w	r4, r1, r4
 80057e8:	1912      	adds	r2, r2, r4
 80057ea:	bf28      	it	cs
 80057ec:	185b      	addcs	r3, r3, r1
 80057ee:	ea22 0205 	bic.w	r2, r2, r5
 80057f2:	4619      	mov	r1, r3
 80057f4:	4610      	mov	r0, r2
 80057f6:	e7e8      	b.n	80057ca <round+0x5a>
 80057f8:	000fffff 	.word	0x000fffff

080057fc <_init>:
 80057fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057fe:	bf00      	nop
 8005800:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005802:	bc08      	pop	{r3}
 8005804:	469e      	mov	lr, r3
 8005806:	4770      	bx	lr

08005808 <_fini>:
 8005808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580a:	bf00      	nop
 800580c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800580e:	bc08      	pop	{r3}
 8005810:	469e      	mov	lr, r3
 8005812:	4770      	bx	lr
