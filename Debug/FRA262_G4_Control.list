
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011408  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  080115a8  080115a8  000215a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011a84  08011a84  00030438  2**0
                  CONTENTS
  4 .ARM          00000008  08011a84  08011a84  00021a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011a8c  08011a8c  00030438  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011a8c  08011a8c  00021a8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011a90  08011a90  00021a90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000438  20000000  08011a94  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d0c  20000438  08011ecc  00030438  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001144  08011ecc  00031144  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030438  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001575b  00000000  00000000  00030468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000274c  00000000  00000000  00045bc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00048310  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001148  00000000  00000000  00049528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000193b7  00000000  00000000  0004a670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dd4  00000000  00000000  00063a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a06d4  00000000  00000000  000797fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119ecf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006460  00000000  00000000  00119f20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000438 	.word	0x20000438
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011590 	.word	0x08011590

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000043c 	.word	0x2000043c
 80001dc:	08011590 	.word	0x08011590

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	20000454 	.word	0x20000454

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	20000454 	.word	0x20000454

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a faf8 	bl	800b682 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000454 	.word	0x20000454

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fc44 	bl	800a95c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fc3c 	bl	800a95c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f00a f9da 	bl	800b4a8 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a fab6 	bl	800b682 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fc99 	bl	8009a64 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fefe 	bl	8009f3c <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	20000454 	.word	0x20000454
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f00a fa01 	bl	800b682 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b fb4e 	bl	800ca08 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a fa26 	bl	800b7e0 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	20000454 	.word	0x20000454

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b fae2 	bl	800ca08 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	20000454 	.word	0x20000454

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000454 	.word	0x20000454

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	20000454 	.word	0x20000454

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	20000454 	.word	0x20000454

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00b fa08 	bl	800ca08 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f00a f82e 	bl	800b6e4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000454 	.word	0x20000454
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80016bc:	b087      	sub	sp, #28
 80016be:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016c0:	f003 ff1a 	bl	80054f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c4:	f000 fc60 	bl	8001f88 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c8:	f000 ff52 	bl	8002570 <MX_GPIO_Init>
  MX_DMA_Init();
 80016cc:	f000 ff1a 	bl	8002504 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016d0:	f000 feec 	bl	80024ac <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d4:	f000 fdde 	bl	8002294 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d8:	f000 fd4c 	bl	8002174 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016dc:	f000 fcbc 	bl	8002058 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016e0:	f000 feba 	bl	8002458 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e4:	f000 fe64 	bl	80023b0 <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e8:	f000 fe28 	bl	800233c <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ec:	f000 fd14 	bl	8002118 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016f0:	4ba3      	ldr	r3, [pc, #652]	; (8001980 <main+0x2c8>)
 80016f2:	4aa4      	ldr	r2, [pc, #656]	; (8001984 <main+0x2cc>)
 80016f4:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f6:	4ba2      	ldr	r3, [pc, #648]	; (8001980 <main+0x2c8>)
 80016f8:	4aa3      	ldr	r2, [pc, #652]	; (8001988 <main+0x2d0>)
 80016fa:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fc:	4ba0      	ldr	r3, [pc, #640]	; (8001980 <main+0x2c8>)
 80016fe:	2215      	movs	r2, #21
 8001700:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001702:	4b9f      	ldr	r3, [pc, #636]	; (8001980 <main+0x2c8>)
 8001704:	2246      	movs	r2, #70	; 0x46
 8001706:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001708:	49a0      	ldr	r1, [pc, #640]	; (800198c <main+0x2d4>)
 800170a:	489d      	ldr	r0, [pc, #628]	; (8001980 <main+0x2c8>)
 800170c:	f7ff fcce 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 8001710:	2104      	movs	r1, #4
 8001712:	489f      	ldr	r0, [pc, #636]	; (8001990 <main+0x2d8>)
 8001714:	f008 fd2c 	bl	800a170 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001718:	489e      	ldr	r0, [pc, #632]	; (8001994 <main+0x2dc>)
 800171a:	f008 f949 	bl	80099b0 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171e:	2100      	movs	r1, #0
 8001720:	489c      	ldr	r0, [pc, #624]	; (8001994 <main+0x2dc>)
 8001722:	f008 faf3 	bl	8009d0c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001726:	2104      	movs	r1, #4
 8001728:	489a      	ldr	r0, [pc, #616]	; (8001994 <main+0x2dc>)
 800172a:	f008 faef 	bl	8009d0c <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172e:	4b9a      	ldr	r3, [pc, #616]	; (8001998 <main+0x2e0>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	b2db      	uxtb	r3, r3
 8001734:	461a      	mov	r2, r3
 8001736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800173a:	4898      	ldr	r0, [pc, #608]	; (800199c <main+0x2e4>)
 800173c:	f005 fa3e 	bl	8006bbc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 8001740:	4b97      	ldr	r3, [pc, #604]	; (80019a0 <main+0x2e8>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	b2db      	uxtb	r3, r3
 8001746:	461a      	mov	r2, r3
 8001748:	2110      	movs	r1, #16
 800174a:	4894      	ldr	r0, [pc, #592]	; (800199c <main+0x2e4>)
 800174c:	f005 fa36 	bl	8006bbc <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001750:	2202      	movs	r2, #2
 8001752:	4994      	ldr	r1, [pc, #592]	; (80019a4 <main+0x2ec>)
 8001754:	4894      	ldr	r0, [pc, #592]	; (80019a8 <main+0x2f0>)
 8001756:	f003 ffa9 	bl	80056ac <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 800175a:	4b8c      	ldr	r3, [pc, #560]	; (800198c <main+0x2d4>)
 800175c:	2200      	movs	r2, #0
 800175e:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 8001760:	4b92      	ldr	r3, [pc, #584]	; (80019ac <main+0x2f4>)
 8001762:	2200      	movs	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001766:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <main+0x2f8>)
 8001768:	2201      	movs	r2, #1
 800176a:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176c:	f001 f836 	bl	80027dc <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 8001770:	f7ff fd28 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001774:	f003 ff26 	bl	80055c4 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	4b8e      	ldr	r3, [pc, #568]	; (80019b4 <main+0x2fc>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	429a      	cmp	r2, r3
 8001780:	d909      	bls.n	8001796 <main+0xde>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001782:	f003 ff1f 	bl	80055c4 <HAL_GetTick>
 8001786:	4603      	mov	r3, r0
 8001788:	33c8      	adds	r3, #200	; 0xc8
 800178a:	4a8a      	ldr	r2, [pc, #552]	; (80019b4 <main+0x2fc>)
 800178c:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178e:	4b7f      	ldr	r3, [pc, #508]	; (800198c <main+0x2d4>)
 8001790:	f645 1261 	movw	r2, #22881	; 0x5961
 8001794:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001796:	4b88      	ldr	r3, [pc, #544]	; (80019b8 <main+0x300>)
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d139      	bne.n	8001816 <main+0x15e>
 80017a2:	f003 ff0f 	bl	80055c4 <HAL_GetTick>
 80017a6:	4602      	mov	r2, r0
 80017a8:	4b84      	ldr	r3, [pc, #528]	; (80019bc <main+0x304>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d332      	bcc.n	8001816 <main+0x15e>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f %.2f\r\n",position, setposition, velocity_mm, Accel_mm);
 80017b0:	4b83      	ldr	r3, [pc, #524]	; (80019c0 <main+0x308>)
 80017b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b6:	461e      	mov	r6, r3
 80017b8:	4b82      	ldr	r3, [pc, #520]	; (80019c4 <main+0x30c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7fe fecb 	bl	8000558 <__aeabi_f2d>
 80017c2:	4604      	mov	r4, r0
 80017c4:	460d      	mov	r5, r1
 80017c6:	4b80      	ldr	r3, [pc, #512]	; (80019c8 <main+0x310>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4618      	mov	r0, r3
 80017cc:	f7fe fec4 	bl	8000558 <__aeabi_f2d>
 80017d0:	4680      	mov	r8, r0
 80017d2:	4689      	mov	r9, r1
 80017d4:	4b7d      	ldr	r3, [pc, #500]	; (80019cc <main+0x314>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe febd 	bl	8000558 <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80017e6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80017ea:	e9cd 4500 	strd	r4, r5, [sp]
 80017ee:	4632      	mov	r2, r6
 80017f0:	4977      	ldr	r1, [pc, #476]	; (80019d0 <main+0x318>)
 80017f2:	4878      	ldr	r0, [pc, #480]	; (80019d4 <main+0x31c>)
 80017f4:	f00b ff9e 	bl	800d734 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017f8:	4876      	ldr	r0, [pc, #472]	; (80019d4 <main+0x31c>)
 80017fa:	f7fe fcf1 	bl	80001e0 <strlen>
 80017fe:	4603      	mov	r3, r0
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4973      	ldr	r1, [pc, #460]	; (80019d4 <main+0x31c>)
 8001806:	486c      	ldr	r0, [pc, #432]	; (80019b8 <main+0x300>)
 8001808:	f009 fef6 	bl	800b5f8 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 800180c:	4b6b      	ldr	r3, [pc, #428]	; (80019bc <main+0x304>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	3314      	adds	r3, #20
 8001812:	4a6a      	ldr	r2, [pc, #424]	; (80019bc <main+0x304>)
 8001814:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 8001816:	f001 fa13 	bl	8002c40 <Routine>
	  JoystickPinUpdate(); //Check Pin Flag
 800181a:	f001 fb03 	bl	8002e24 <JoystickPinUpdate>

	  //Emergency
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 0) //Push Emergency
 800181e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001822:	485e      	ldr	r0, [pc, #376]	; (800199c <main+0x2e4>)
 8001824:	f005 f9b2 	bl	8006b8c <HAL_GPIO_ReadPin>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d111      	bne.n	8001852 <main+0x19a>
	  {
		  if(Emercount == 0)
 800182e:	4b6a      	ldr	r3, [pc, #424]	; (80019d8 <main+0x320>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <main+0x19a>
		  {
			  EndEffectorState = 7;	//Emergency
 8001836:	4b5d      	ldr	r3, [pc, #372]	; (80019ac <main+0x2f4>)
 8001838:	2207      	movs	r2, #7
 800183a:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 800183c:	4b5c      	ldr	r3, [pc, #368]	; (80019b0 <main+0x2f8>)
 800183e:	2201      	movs	r2, #1
 8001840:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001842:	f000 ffcb 	bl	80027dc <EndEffectorWrite>
			  Emercount = 1;
 8001846:	4b64      	ldr	r3, [pc, #400]	; (80019d8 <main+0x320>)
 8001848:	2201      	movs	r2, #1
 800184a:	601a      	str	r2, [r3, #0]
			  scheduler = 6;
 800184c:	4b63      	ldr	r3, [pc, #396]	; (80019dc <main+0x324>)
 800184e:	2206      	movs	r2, #6
 8001850:	601a      	str	r2, [r3, #0]
		  }
	  }

	  switch(scheduler)
 8001852:	4b62      	ldr	r3, [pc, #392]	; (80019dc <main+0x324>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b07      	cmp	r3, #7
 8001858:	d88a      	bhi.n	8001770 <main+0xb8>
 800185a:	a201      	add	r2, pc, #4	; (adr r2, 8001860 <main+0x1a8>)
 800185c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001860:	08001881 	.word	0x08001881
 8001864:	08001a3d 	.word	0x08001a3d
 8001868:	08001af5 	.word	0x08001af5
 800186c:	08001bad 	.word	0x08001bad
 8001870:	08001d45 	.word	0x08001d45
 8001874:	08001d8d 	.word	0x08001d8d
 8001878:	08001d93 	.word	0x08001d93
 800187c:	08001e1d 	.word	0x08001e1d
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001880:	4b43      	ldr	r3, [pc, #268]	; (8001990 <main+0x2d8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001886:	b21a      	sxth	r2, r3
 8001888:	4b4d      	ldr	r3, [pc, #308]	; (80019c0 <main+0x308>)
 800188a:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 800188c:	f001 fbcc 	bl	8003028 <JoystickControl>
		  JoystickLocationState();
 8001890:	f001 fc9a 	bl	80031c8 <JoystickLocationState>

		  ////////////////////////////////////////////////////////////
		  if(LaserUI.flag == 1)
 8001894:	4b52      	ldr	r3, [pc, #328]	; (80019e0 <main+0x328>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	2b01      	cmp	r3, #1
 800189a:	d107      	bne.n	80018ac <main+0x1f4>
		  {
			  EndEffectorState = 1;	//TestModeOn
 800189c:	4b43      	ldr	r3, [pc, #268]	; (80019ac <main+0x2f4>)
 800189e:	2201      	movs	r2, #1
 80018a0:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018a2:	4b43      	ldr	r3, [pc, #268]	; (80019b0 <main+0x2f8>)
 80018a4:	2201      	movs	r2, #1
 80018a6:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018a8:	f000 ff98 	bl	80027dc <EndEffectorWrite>
		  }
		  if(LaserUI.flag == 2)
 80018ac:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <main+0x328>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d107      	bne.n	80018c4 <main+0x20c>
		  {
			  EndEffectorState = 2;	//TestModeOff
 80018b4:	4b3d      	ldr	r3, [pc, #244]	; (80019ac <main+0x2f4>)
 80018b6:	2202      	movs	r2, #2
 80018b8:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018ba:	4b3d      	ldr	r3, [pc, #244]	; (80019b0 <main+0x2f8>)
 80018bc:	2201      	movs	r2, #1
 80018be:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018c0:	f000 ff8c 	bl	80027dc <EndEffectorWrite>
		  }
		  ///////////////////////////////////////////////////////////
		  //write//
		  if(GripperUI.flag == 1)
 80018c4:	4b47      	ldr	r3, [pc, #284]	; (80019e4 <main+0x32c>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	2b01      	cmp	r3, #1
 80018ca:	d107      	bne.n	80018dc <main+0x224>
		  {
			  EndEffectorState = 3;	//Gripper Power On
 80018cc:	4b37      	ldr	r3, [pc, #220]	; (80019ac <main+0x2f4>)
 80018ce:	2203      	movs	r2, #3
 80018d0:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018d2:	4b37      	ldr	r3, [pc, #220]	; (80019b0 <main+0x2f8>)
 80018d4:	2201      	movs	r2, #1
 80018d6:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018d8:	f000 ff80 	bl	80027dc <EndEffectorWrite>
		  }
		  if(GripperUI.flag == 2)
 80018dc:	4b41      	ldr	r3, [pc, #260]	; (80019e4 <main+0x32c>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	2b02      	cmp	r3, #2
 80018e2:	d107      	bne.n	80018f4 <main+0x23c>
		  {
			  EndEffectorState = 6;	//Gripper Power Off
 80018e4:	4b31      	ldr	r3, [pc, #196]	; (80019ac <main+0x2f4>)
 80018e6:	2206      	movs	r2, #6
 80018e8:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 80018ea:	4b31      	ldr	r3, [pc, #196]	; (80019b0 <main+0x2f8>)
 80018ec:	2201      	movs	r2, #1
 80018ee:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 80018f0:	f000 ff74 	bl	80027dc <EndEffectorWrite>
		  }
		  if(GripperUI.flag == 3)
 80018f4:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <main+0x32c>)
 80018f6:	689b      	ldr	r3, [r3, #8]
 80018f8:	2b03      	cmp	r3, #3
 80018fa:	d10a      	bne.n	8001912 <main+0x25a>
		  {
			  EndEffectorState = 4;	//Gripper Pick
 80018fc:	4b2b      	ldr	r3, [pc, #172]	; (80019ac <main+0x2f4>)
 80018fe:	2204      	movs	r2, #4
 8001900:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001902:	4b2b      	ldr	r3, [pc, #172]	; (80019b0 <main+0x2f8>)
 8001904:	2201      	movs	r2, #1
 8001906:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001908:	f000 ff68 	bl	80027dc <EndEffectorWrite>
			  EndEffectorReadFlag = 1;
 800190c:	4b36      	ldr	r3, [pc, #216]	; (80019e8 <main+0x330>)
 800190e:	2201      	movs	r2, #1
 8001910:	701a      	strb	r2, [r3, #0]
		  }
		  if(GripperUI.flag == 4)
 8001912:	4b34      	ldr	r3, [pc, #208]	; (80019e4 <main+0x32c>)
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b04      	cmp	r3, #4
 8001918:	d10a      	bne.n	8001930 <main+0x278>
		  {
			  EndEffectorState = 5;	//Gripper Place
 800191a:	4b24      	ldr	r3, [pc, #144]	; (80019ac <main+0x2f4>)
 800191c:	2205      	movs	r2, #5
 800191e:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001920:	4b23      	ldr	r3, [pc, #140]	; (80019b0 <main+0x2f8>)
 8001922:	2201      	movs	r2, #1
 8001924:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001926:	f000 ff59 	bl	80027dc <EndEffectorWrite>
			  EndEffectorReadFlag = 1;
 800192a:	4b2f      	ldr	r3, [pc, #188]	; (80019e8 <main+0x330>)
 800192c:	2201      	movs	r2, #1
 800192e:	701a      	strb	r2, [r3, #0]
		  }
		  static uint32_t Readbeat = 0;
		  if(Readbeat < HAL_GetTick())
 8001930:	f003 fe48 	bl	80055c4 <HAL_GetTick>
 8001934:	4602      	mov	r2, r0
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <main+0x334>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d966      	bls.n	8001a0c <main+0x354>
		  {
			  Readbeat = HAL_GetTick()+100 ;
 800193e:	f003 fe41 	bl	80055c4 <HAL_GetTick>
 8001942:	4603      	mov	r3, r0
 8001944:	3364      	adds	r3, #100	; 0x64
 8001946:	4a29      	ldr	r2, [pc, #164]	; (80019ec <main+0x334>)
 8001948:	6013      	str	r3, [r2, #0]
			  //Read//
			  if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 800194a:	4b27      	ldr	r3, [pc, #156]	; (80019e8 <main+0x330>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d15c      	bne.n	8001a0c <main+0x354>
 8001952:	4b27      	ldr	r3, [pc, #156]	; (80019f0 <main+0x338>)
 8001954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b20      	cmp	r3, #32
 800195c:	d156      	bne.n	8001a0c <main+0x354>
			  {
				  HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 800195e:	2301      	movs	r3, #1
 8001960:	4a24      	ldr	r2, [pc, #144]	; (80019f4 <main+0x33c>)
 8001962:	212a      	movs	r1, #42	; 0x2a
 8001964:	4822      	ldr	r0, [pc, #136]	; (80019f0 <main+0x338>)
 8001966:	f005 fb9d 	bl	80070a4 <HAL_I2C_Master_Receive_IT>
				  if(EndEffectorDataReadBack[0] == 0x07) // Picked
 800196a:	4b22      	ldr	r3, [pc, #136]	; (80019f4 <main+0x33c>)
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	2b07      	cmp	r3, #7
 8001970:	d142      	bne.n	80019f8 <main+0x340>
				  {
					  registerFrame[2].U16 = 2;
 8001972:	4b06      	ldr	r3, [pc, #24]	; (800198c <main+0x2d4>)
 8001974:	2202      	movs	r2, #2
 8001976:	809a      	strh	r2, [r3, #4]
					  EndEffectorReadFlag = 0;
 8001978:	4b1b      	ldr	r3, [pc, #108]	; (80019e8 <main+0x330>)
 800197a:	2200      	movs	r2, #0
 800197c:	701a      	strb	r2, [r3, #0]
 800197e:	e045      	b.n	8001a0c <main+0x354>
 8001980:	20000b44 	.word	0x20000b44
 8001984:	20000898 	.word	0x20000898
 8001988:	20000770 	.word	0x20000770
 800198c:	2000101c 	.word	0x2000101c
 8001990:	20000608 	.word	0x20000608
 8001994:	20000554 	.word	0x20000554
 8001998:	2000020c 	.word	0x2000020c
 800199c:	40020400 	.word	0x40020400
 80019a0:	20000208 	.word	0x20000208
 80019a4:	20000b28 	.word	0x20000b28
 80019a8:	20000458 	.word	0x20000458
 80019ac:	20000b3c 	.word	0x20000b3c
 80019b0:	20000b34 	.word	0x20000b34
 80019b4:	20001100 	.word	0x20001100
 80019b8:	20000824 	.word	0x20000824
 80019bc:	20001104 	.word	0x20001104
 80019c0:	200009b8 	.word	0x200009b8
 80019c4:	200009c8 	.word	0x200009c8
 80019c8:	200009e4 	.word	0x200009e4
 80019cc:	200009ec 	.word	0x200009ec
 80019d0:	080115a8 	.word	0x080115a8
 80019d4:	200010a8 	.word	0x200010a8
 80019d8:	20000b40 	.word	0x20000b40
 80019dc:	20000200 	.word	0x20000200
 80019e0:	20000b04 	.word	0x20000b04
 80019e4:	20000b10 	.word	0x20000b10
 80019e8:	20000b35 	.word	0x20000b35
 80019ec:	20001108 	.word	0x20001108
 80019f0:	20000500 	.word	0x20000500
 80019f4:	20000b38 	.word	0x20000b38
				  }
				  else if(EndEffectorDataReadBack[0] == 0x04) // Placed
 80019f8:	4bb3      	ldr	r3, [pc, #716]	; (8001cc8 <main+0x610>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b04      	cmp	r3, #4
 80019fe:	d105      	bne.n	8001a0c <main+0x354>
				  {
					  registerFrame[2].U16 = 2;
 8001a00:	4bb2      	ldr	r3, [pc, #712]	; (8001ccc <main+0x614>)
 8001a02:	2202      	movs	r2, #2
 8001a04:	809a      	strh	r2, [r3, #4]
					  EndEffectorReadFlag = 0;
 8001a06:	4bb2      	ldr	r3, [pc, #712]	; (8001cd0 <main+0x618>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
				  }
			  }
		  }

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001a0c:	4baf      	ldr	r3, [pc, #700]	; (8001ccc <main+0x614>)
 8001a0e:	885b      	ldrh	r3, [r3, #2]
 8001a10:	2b10      	cmp	r3, #16
 8001a12:	d103      	bne.n	8001a1c <main+0x364>
		  {
			  scheduler = 7;
 8001a14:	4baf      	ldr	r3, [pc, #700]	; (8001cd4 <main+0x61c>)
 8001a16:	2207      	movs	r2, #7
 8001a18:	601a      	str	r2, [r3, #0]
		  {
			  registerFrame[64].U16 = 1;
			  Proximity = 3;
			  scheduler = 5;
		  }
		  break;
 8001a1a:	e27b      	b.n	8001f14 <main+0x85c>
		  else if(registerFrame[1].U16 == 4) //Home
 8001a1c:	4bab      	ldr	r3, [pc, #684]	; (8001ccc <main+0x614>)
 8001a1e:	885b      	ldrh	r3, [r3, #2]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	f040 8277 	bne.w	8001f14 <main+0x85c>
			  registerFrame[64].U16 = 1;
 8001a26:	4ba9      	ldr	r3, [pc, #676]	; (8001ccc <main+0x614>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
			  Proximity = 3;
 8001a2e:	4baa      	ldr	r3, [pc, #680]	; (8001cd8 <main+0x620>)
 8001a30:	2203      	movs	r2, #3
 8001a32:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001a34:	4ba7      	ldr	r3, [pc, #668]	; (8001cd4 <main+0x61c>)
 8001a36:	2205      	movs	r2, #5
 8001a38:	601a      	str	r2, [r3, #0]
		  break;
 8001a3a:	e26b      	b.n	8001f14 <main+0x85c>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001a3c:	4ba3      	ldr	r3, [pc, #652]	; (8001ccc <main+0x614>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 8001a42:	4ba6      	ldr	r3, [pc, #664]	; (8001cdc <main+0x624>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4aa6      	ldr	r2, [pc, #664]	; (8001ce0 <main+0x628>)
 8001a48:	330c      	adds	r3, #12
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	3304      	adds	r3, #4
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4618      	mov	r0, r3
 8001a54:	f7fe fd80 	bl	8000558 <__aeabi_f2d>
 8001a58:	a399      	add	r3, pc, #612	; (adr r3, 8001cc0 <main+0x608>)
 8001a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a5e:	f7fe fefd 	bl	800085c <__aeabi_ddiv>
 8001a62:	4602      	mov	r2, r0
 8001a64:	460b      	mov	r3, r1
 8001a66:	4610      	mov	r0, r2
 8001a68:	4619      	mov	r1, r3
 8001a6a:	f7ff f8c5 	bl	8000bf8 <__aeabi_d2f>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	4a9c      	ldr	r2, [pc, #624]	; (8001ce4 <main+0x62c>)
 8001a72:	6013      	str	r3, [r2, #0]
		  qi = position;
 8001a74:	4b9c      	ldr	r3, [pc, #624]	; (8001ce8 <main+0x630>)
 8001a76:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a7a:	ee07 3a90 	vmov	s15, r3
 8001a7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a82:	4b9a      	ldr	r3, [pc, #616]	; (8001cec <main+0x634>)
 8001a84:	edc3 7a00 	vstr	s15, [r3]
		  PickTray.hole_x_16 = PickTray.hole_x[HoleSequence]*10;
 8001a88:	4b94      	ldr	r3, [pc, #592]	; (8001cdc <main+0x624>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a94      	ldr	r2, [pc, #592]	; (8001ce0 <main+0x628>)
 8001a8e:	3304      	adds	r3, #4
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	4413      	add	r3, r2
 8001a94:	edd3 7a00 	vldr	s15, [r3]
 8001a98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001aa0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001aa4:	ee17 3a90 	vmov	r3, s15
 8001aa8:	b21a      	sxth	r2, r3
 8001aaa:	4b8d      	ldr	r3, [pc, #564]	; (8001ce0 <main+0x628>)
 8001aac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		  registerFrame[65].U16 = PickTray.hole_x_16;
 8001ab0:	4b8b      	ldr	r3, [pc, #556]	; (8001ce0 <main+0x628>)
 8001ab2:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001ab6:	b29a      	uxth	r2, r3
 8001ab8:	4b84      	ldr	r3, [pc, #528]	; (8001ccc <main+0x614>)
 8001aba:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001abe:	4b83      	ldr	r3, [pc, #524]	; (8001ccc <main+0x614>)
 8001ac0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001ac4:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001ac8:	4b80      	ldr	r3, [pc, #512]	; (8001ccc <main+0x614>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001ad0:	4b7e      	ldr	r3, [pc, #504]	; (8001ccc <main+0x614>)
 8001ad2:	2202      	movs	r2, #2
 8001ad4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001ad8:	4b85      	ldr	r3, [pc, #532]	; (8001cf0 <main+0x638>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
		  duty = 0;
 8001ade:	4b85      	ldr	r3, [pc, #532]	; (8001cf4 <main+0x63c>)
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001ae6:	4884      	ldr	r0, [pc, #528]	; (8001cf8 <main+0x640>)
 8001ae8:	f007 ffbc 	bl	8009a64 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001aec:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <main+0x61c>)
 8001aee:	2203      	movs	r2, #3
 8001af0:	601a      	str	r2, [r3, #0]
		  break;
 8001af2:	e216      	b.n	8001f22 <main+0x86a>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 8001af4:	4b75      	ldr	r3, [pc, #468]	; (8001ccc <main+0x614>)
 8001af6:	2210      	movs	r2, #16
 8001af8:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <main+0x624>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a7f      	ldr	r2, [pc, #508]	; (8001cfc <main+0x644>)
 8001b00:	330c      	adds	r3, #12
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	4413      	add	r3, r2
 8001b06:	3304      	adds	r3, #4
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fd24 	bl	8000558 <__aeabi_f2d>
 8001b10:	a36b      	add	r3, pc, #428	; (adr r3, 8001cc0 <main+0x608>)
 8001b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b16:	f7fe fea1 	bl	800085c <__aeabi_ddiv>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	460b      	mov	r3, r1
 8001b1e:	4610      	mov	r0, r2
 8001b20:	4619      	mov	r1, r3
 8001b22:	f7ff f869 	bl	8000bf8 <__aeabi_d2f>
 8001b26:	4603      	mov	r3, r0
 8001b28:	4a6e      	ldr	r2, [pc, #440]	; (8001ce4 <main+0x62c>)
 8001b2a:	6013      	str	r3, [r2, #0]
		  qi = position;
 8001b2c:	4b6e      	ldr	r3, [pc, #440]	; (8001ce8 <main+0x630>)
 8001b2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b3a:	4b6c      	ldr	r3, [pc, #432]	; (8001cec <main+0x634>)
 8001b3c:	edc3 7a00 	vstr	s15, [r3]
		  PlaceTray.hole_x_16 = PlaceTray.hole_x[HoleSequence]*10;
 8001b40:	4b66      	ldr	r3, [pc, #408]	; (8001cdc <main+0x624>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a6d      	ldr	r2, [pc, #436]	; (8001cfc <main+0x644>)
 8001b46:	3304      	adds	r3, #4
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b58:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b5c:	ee17 3a90 	vmov	r3, s15
 8001b60:	b21a      	sxth	r2, r3
 8001b62:	4b66      	ldr	r3, [pc, #408]	; (8001cfc <main+0x644>)
 8001b64:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
		  registerFrame[65].U16 = PlaceTray.hole_x_16;
 8001b68:	4b64      	ldr	r3, [pc, #400]	; (8001cfc <main+0x644>)
 8001b6a:	f9b3 305e 	ldrsh.w	r3, [r3, #94]	; 0x5e
 8001b6e:	b29a      	uxth	r2, r3
 8001b70:	4b56      	ldr	r3, [pc, #344]	; (8001ccc <main+0x614>)
 8001b72:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001b76:	4b55      	ldr	r3, [pc, #340]	; (8001ccc <main+0x614>)
 8001b78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001b7c:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;
 8001b80:	4b52      	ldr	r3, [pc, #328]	; (8001ccc <main+0x614>)
 8001b82:	2201      	movs	r2, #1
 8001b84:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001b88:	4b50      	ldr	r3, [pc, #320]	; (8001ccc <main+0x614>)
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 8001b90:	4b57      	ldr	r3, [pc, #348]	; (8001cf0 <main+0x638>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
		  duty = 0;
 8001b96:	4b57      	ldr	r3, [pc, #348]	; (8001cf4 <main+0x63c>)
 8001b98:	f04f 0200 	mov.w	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001b9e:	4856      	ldr	r0, [pc, #344]	; (8001cf8 <main+0x640>)
 8001ba0:	f007 ff60 	bl	8009a64 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 8001ba4:	4b4b      	ldr	r3, [pc, #300]	; (8001cd4 <main+0x61c>)
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	601a      	str	r2, [r3, #0]
		  break;
 8001baa:	e1ba      	b.n	8001f22 <main+0x86a>

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001bac:	4b54      	ldr	r3, [pc, #336]	; (8001d00 <main+0x648>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb2:	b21a      	sxth	r2, r3
 8001bb4:	4b4c      	ldr	r3, [pc, #304]	; (8001ce8 <main+0x630>)
 8001bb6:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001bb8:	f003 fd04 	bl	80055c4 <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	4b51      	ldr	r3, [pc, #324]	; (8001d04 <main+0x64c>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	429a      	cmp	r2, r3
 8001bc4:	d909      	bls.n	8001bda <main+0x522>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001bc6:	f003 fcfd 	bl	80055c4 <HAL_GetTick>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	3301      	adds	r3, #1
 8001bce:	4a4d      	ldr	r2, [pc, #308]	; (8001d04 <main+0x64c>)
 8001bd0:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001bd2:	f000 ff71 	bl	8002ab8 <VelocityApprox>
			  AccelerationApprox();
 8001bd6:	f000 ffdb 	bl	8002b90 <AccelerationApprox>
//				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
//				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
//			  }
//		  }

		  if(position > Overshootposition){
 8001bda:	4b43      	ldr	r3, [pc, #268]	; (8001ce8 <main+0x630>)
 8001bdc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001be0:	4b49      	ldr	r3, [pc, #292]	; (8001d08 <main+0x650>)
 8001be2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	dd21      	ble.n	8001c2e <main+0x576>
			  Overshootposition = position;
 8001bea:	4b3f      	ldr	r3, [pc, #252]	; (8001ce8 <main+0x630>)
 8001bec:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001bf0:	4b45      	ldr	r3, [pc, #276]	; (8001d08 <main+0x650>)
 8001bf2:	801a      	strh	r2, [r3, #0]
			  PercentOS = ((Overshootposition-qf)/(qf-qi))*100;
 8001bf4:	4b44      	ldr	r3, [pc, #272]	; (8001d08 <main+0x650>)
 8001bf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bfa:	ee07 3a90 	vmov	s15, r3
 8001bfe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <main+0x62c>)
 8001c04:	edd3 7a00 	vldr	s15, [r3]
 8001c08:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001c0c:	4b35      	ldr	r3, [pc, #212]	; (8001ce4 <main+0x62c>)
 8001c0e:	ed93 7a00 	vldr	s14, [r3]
 8001c12:	4b36      	ldr	r3, [pc, #216]	; (8001cec <main+0x634>)
 8001c14:	edd3 7a00 	vldr	s15, [r3]
 8001c18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c20:	ed9f 7a3a 	vldr	s14, [pc, #232]	; 8001d0c <main+0x654>
 8001c24:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c28:	4b39      	ldr	r3, [pc, #228]	; (8001d10 <main+0x658>)
 8001c2a:	edc3 7a00 	vstr	s15, [r3]
		  }
		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001c2e:	4b2e      	ldr	r3, [pc, #184]	; (8001ce8 <main+0x630>)
 8001c30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c34:	ee07 3a90 	vmov	s15, r3
 8001c38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c3c:	4b29      	ldr	r3, [pc, #164]	; (8001ce4 <main+0x62c>)
 8001c3e:	edd3 7a00 	vldr	s15, [r3]
 8001c42:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c46:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001c4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c52:	db6b      	blt.n	8001d2c <main+0x674>
 8001c54:	4b24      	ldr	r3, [pc, #144]	; (8001ce8 <main+0x630>)
 8001c56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c5a:	ee07 3a90 	vmov	s15, r3
 8001c5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c62:	4b20      	ldr	r3, [pc, #128]	; (8001ce4 <main+0x62c>)
 8001c64:	edd3 7a00 	vldr	s15, [r3]
 8001c68:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001c6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001c70:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d858      	bhi.n	8001d2c <main+0x674>
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <main+0x614>)
 8001c7c:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d153      	bne.n	8001d2c <main+0x674>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001c84:	4b23      	ldr	r3, [pc, #140]	; (8001d14 <main+0x65c>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <main+0x65c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2200      	movs	r2, #0
 8001c92:	639a      	str	r2, [r3, #56]	; 0x38
			  Overshootposition = 0;
 8001c94:	4b1c      	ldr	r3, [pc, #112]	; (8001d08 <main+0x650>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	801a      	strh	r2, [r3, #0]
			  PIDFrag = 0;
 8001c9a:	4b1f      	ldr	r3, [pc, #124]	; (8001d18 <main+0x660>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001ca0:	4815      	ldr	r0, [pc, #84]	; (8001cf8 <main+0x640>)
 8001ca2:	f007 ff41 	bl	8009b28 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001ca6:	4b1d      	ldr	r3, [pc, #116]	; (8001d1c <main+0x664>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2b01      	cmp	r3, #1
 8001cac:	d138      	bne.n	8001d20 <main+0x668>
			  {
				  registerFrame[16].U16 = 0;
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <main+0x614>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001cb4:	4b07      	ldr	r3, [pc, #28]	; (8001cd4 <main+0x61c>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	e037      	b.n	8001d2c <main+0x674>
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	70a3d70a 	.word	0x70a3d70a
 8001cc4:	3fa70a3d 	.word	0x3fa70a3d
 8001cc8:	20000b38 	.word	0x20000b38
 8001ccc:	2000101c 	.word	0x2000101c
 8001cd0:	20000b35 	.word	0x20000b35
 8001cd4:	20000200 	.word	0x20000200
 8001cd8:	2000024c 	.word	0x2000024c
 8001cdc:	2000096c 	.word	0x2000096c
 8001ce0:	200009f8 	.word	0x200009f8
 8001ce4:	2000097c 	.word	0x2000097c
 8001ce8:	200009b8 	.word	0x200009b8
 8001cec:	20000980 	.word	0x20000980
 8001cf0:	20000974 	.word	0x20000974
 8001cf4:	20000970 	.word	0x20000970
 8001cf8:	200006bc 	.word	0x200006bc
 8001cfc:	20000a5c 	.word	0x20000a5c
 8001d00:	20000608 	.word	0x20000608
 8001d04:	2000110c 	.word	0x2000110c
 8001d08:	200009ba 	.word	0x200009ba
 8001d0c:	42c80000 	.word	0x42c80000
 8001d10:	200009bc 	.word	0x200009bc
 8001d14:	20000554 	.word	0x20000554
 8001d18:	200009b4 	.word	0x200009b4
 8001d1c:	200010fc 	.word	0x200010fc
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001d20:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <main+0x878>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001d26:	4b83      	ldr	r3, [pc, #524]	; (8001f34 <main+0x87c>)
 8001d28:	2204      	movs	r2, #4
 8001d2a:	601a      	str	r2, [r3, #0]
			  }
		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001d2c:	4b82      	ldr	r3, [pc, #520]	; (8001f38 <main+0x880>)
 8001d2e:	689b      	ldr	r3, [r3, #8]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	f040 80f1 	bne.w	8001f18 <main+0x860>
		  {
			  ResetButton.flag = 0;
 8001d36:	4b80      	ldr	r3, [pc, #512]	; (8001f38 <main+0x880>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001d3c:	4b7d      	ldr	r3, [pc, #500]	; (8001f34 <main+0x87c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001d42:	e0e9      	b.n	8001f18 <main+0x860>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001d44:	4b7d      	ldr	r3, [pc, #500]	; (8001f3c <main+0x884>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b08      	cmp	r3, #8
 8001d4a:	dc13      	bgt.n	8001d74 <main+0x6bc>
		  {
			  if (TaskType == 1)
 8001d4c:	4b7c      	ldr	r3, [pc, #496]	; (8001f40 <main+0x888>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2b01      	cmp	r3, #1
 8001d52:	d105      	bne.n	8001d60 <main+0x6a8>
			  {
				  EndEffectorState = 4;			//Pick
 8001d54:	4b7b      	ldr	r3, [pc, #492]	; (8001f44 <main+0x88c>)
 8001d56:	2204      	movs	r2, #4
 8001d58:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001d5a:	f000 fd3f 	bl	80027dc <EndEffectorWrite>
 8001d5e:	e009      	b.n	8001d74 <main+0x6bc>
			  }
			  else if (TaskType == -1)
 8001d60:	4b77      	ldr	r3, [pc, #476]	; (8001f40 <main+0x888>)
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d68:	d104      	bne.n	8001d74 <main+0x6bc>
			  {
				  EndEffectorState = 5;			//Place
 8001d6a:	4b76      	ldr	r3, [pc, #472]	; (8001f44 <main+0x88c>)
 8001d6c:	2205      	movs	r2, #5
 8001d6e:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001d70:	f000 fd34 	bl	80027dc <EndEffectorWrite>
			  }
		  }
		  if (ResetButton.flag == 1)
 8001d74:	4b70      	ldr	r3, [pc, #448]	; (8001f38 <main+0x880>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	f040 80cf 	bne.w	8001f1c <main+0x864>
			  {
				  ResetButton.flag = 0;
 8001d7e:	4b6e      	ldr	r3, [pc, #440]	; (8001f38 <main+0x880>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001d84:	4b6b      	ldr	r3, [pc, #428]	; (8001f34 <main+0x87c>)
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001d8a:	e0c7      	b.n	8001f1c <main+0x864>

	  //Homing
	  case 5:
		  Homing();
 8001d8c:	f000 fcc6 	bl	800271c <Homing>
		  break;
 8001d90:	e0c7      	b.n	8001f22 <main+0x86a>

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d92:	4b6d      	ldr	r3, [pc, #436]	; (8001f48 <main+0x890>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2200      	movs	r2, #0
 8001d98:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001d9a:	4b6b      	ldr	r3, [pc, #428]	; (8001f48 <main+0x890>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	2200      	movs	r2, #0
 8001da0:	639a      	str	r2, [r3, #56]	; 0x38
		  duty = 0;
 8001da2:	4b6a      	ldr	r3, [pc, #424]	; (8001f4c <main+0x894>)
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	601a      	str	r2, [r3, #0]

		  static uint32_t Emerstamp = 0;
		  if(Emerstamp < HAL_GetTick())
 8001daa:	f003 fc0b 	bl	80055c4 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	4b67      	ldr	r3, [pc, #412]	; (8001f50 <main+0x898>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	429a      	cmp	r2, r3
 8001db6:	f240 80b3 	bls.w	8001f20 <main+0x868>
		  {
			  Emerstamp = HAL_GetTick()+200;
 8001dba:	f003 fc03 	bl	80055c4 <HAL_GetTick>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	33c8      	adds	r3, #200	; 0xc8
 8001dc2:	4a63      	ldr	r2, [pc, #396]	; (8001f50 <main+0x898>)
 8001dc4:	6013      	str	r3, [r2, #0]
			  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1 && Emer.last == 1)
 8001dc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001dca:	4862      	ldr	r0, [pc, #392]	; (8001f54 <main+0x89c>)
 8001dcc:	f004 fede 	bl	8006b8c <HAL_GPIO_ReadPin>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b01      	cmp	r3, #1
 8001dd4:	d118      	bne.n	8001e08 <main+0x750>
 8001dd6:	4b60      	ldr	r3, [pc, #384]	; (8001f58 <main+0x8a0>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2b01      	cmp	r3, #1
 8001ddc:	d114      	bne.n	8001e08 <main+0x750>
			  {
				  HAL_Delay(2000);
 8001dde:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001de2:	f003 fbfb 	bl	80055dc <HAL_Delay>
				  Emercount = 0;
 8001de6:	4b5d      	ldr	r3, [pc, #372]	; (8001f5c <main+0x8a4>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	601a      	str	r2, [r3, #0]
				  EndEffectorState = 8;	//Quit Emergency
 8001dec:	4b55      	ldr	r3, [pc, #340]	; (8001f44 <main+0x88c>)
 8001dee:	2208      	movs	r2, #8
 8001df0:	601a      	str	r2, [r3, #0]
				  EndEffectorWriteFlag = 1;
 8001df2:	4b4f      	ldr	r3, [pc, #316]	; (8001f30 <main+0x878>)
 8001df4:	2201      	movs	r2, #1
 8001df6:	701a      	strb	r2, [r3, #0]
				  EndEffectorWrite();
 8001df8:	f000 fcf0 	bl	80027dc <EndEffectorWrite>
				  Proximity = 3;
 8001dfc:	4b58      	ldr	r3, [pc, #352]	; (8001f60 <main+0x8a8>)
 8001dfe:	2203      	movs	r2, #3
 8001e00:	601a      	str	r2, [r3, #0]
				  scheduler = 5;
 8001e02:	4b4c      	ldr	r3, [pc, #304]	; (8001f34 <main+0x87c>)
 8001e04:	2205      	movs	r2, #5
 8001e06:	601a      	str	r2, [r3, #0]
			  }
			  Emer.last = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8001e08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e0c:	4851      	ldr	r0, [pc, #324]	; (8001f54 <main+0x89c>)
 8001e0e:	f004 febd 	bl	8006b8c <HAL_GPIO_ReadPin>
 8001e12:	4603      	mov	r3, r0
 8001e14:	461a      	mov	r2, r3
 8001e16:	4b50      	ldr	r3, [pc, #320]	; (8001f58 <main+0x8a0>)
 8001e18:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001e1a:	e081      	b.n	8001f20 <main+0x868>

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001e1c:	4b51      	ldr	r3, [pc, #324]	; (8001f64 <main+0x8ac>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001e22:	4b50      	ldr	r3, [pc, #320]	; (8001f64 <main+0x8ac>)
 8001e24:	2220      	movs	r2, #32
 8001e26:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001e28:	4b4e      	ldr	r3, [pc, #312]	; (8001f64 <main+0x8ac>)
 8001e2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001e2e:	b21a      	sxth	r2, r3
 8001e30:	4b4d      	ldr	r3, [pc, #308]	; (8001f68 <main+0x8b0>)
 8001e32:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001e34:	4b4c      	ldr	r3, [pc, #304]	; (8001f68 <main+0x8b0>)
 8001e36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3a:	b29a      	uxth	r2, r3
 8001e3c:	4b49      	ldr	r3, [pc, #292]	; (8001f64 <main+0x8ac>)
 8001e3e:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001e42:	4b48      	ldr	r3, [pc, #288]	; (8001f64 <main+0x8ac>)
 8001e44:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001e48:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 1;        // 500 ms
 8001e4c:	4b45      	ldr	r3, [pc, #276]	; (8001f64 <main+0x8ac>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001e54:	4b43      	ldr	r3, [pc, #268]	; (8001f64 <main+0x8ac>)
 8001e56:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	4b43      	ldr	r3, [pc, #268]	; (8001f6c <main+0x8b4>)
 8001e5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	d003      	beq.n	8001e6e <main+0x7b6>
			  registerFrame[64].U16 = 2;  	// RUN
 8001e66:	4b3f      	ldr	r3, [pc, #252]	; (8001f64 <main+0x8ac>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <main+0x8ac>)
 8001e70:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001e74:	b21a      	sxth	r2, r3
 8001e76:	4b3d      	ldr	r3, [pc, #244]	; (8001f6c <main+0x8b4>)
 8001e78:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001e7a:	4b3d      	ldr	r3, [pc, #244]	; (8001f70 <main+0x8b8>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001e80:	4b38      	ldr	r3, [pc, #224]	; (8001f64 <main+0x8ac>)
 8001e82:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e86:	f247 522f 	movw	r2, #29999	; 0x752f
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d916      	bls.n	8001ebc <main+0x804>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001e8e:	4b35      	ldr	r3, [pc, #212]	; (8001f64 <main+0x8ac>)
 8001e90:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001e94:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f7fe fb4b 	bl	8000534 <__aeabi_i2d>
 8001e9e:	a322      	add	r3, pc, #136	; (adr r3, 8001f28 <main+0x870>)
 8001ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ea4:	f7fe fcda 	bl	800085c <__aeabi_ddiv>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	460b      	mov	r3, r1
 8001eac:	4610      	mov	r0, r2
 8001eae:	4619      	mov	r1, r3
 8001eb0:	f7fe fea2 	bl	8000bf8 <__aeabi_d2f>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	4a2f      	ldr	r2, [pc, #188]	; (8001f74 <main+0x8bc>)
 8001eb8:	6013      	str	r3, [r2, #0]
 8001eba:	e013      	b.n	8001ee4 <main+0x82c>
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001ebc:	4b29      	ldr	r3, [pc, #164]	; (8001f64 <main+0x8ac>)
 8001ebe:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	f7fe fb36 	bl	8000534 <__aeabi_i2d>
 8001ec8:	a317      	add	r3, pc, #92	; (adr r3, 8001f28 <main+0x870>)
 8001eca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ece:	f7fe fcc5 	bl	800085c <__aeabi_ddiv>
 8001ed2:	4602      	mov	r2, r0
 8001ed4:	460b      	mov	r3, r1
 8001ed6:	4610      	mov	r0, r2
 8001ed8:	4619      	mov	r1, r3
 8001eda:	f7fe fe8d 	bl	8000bf8 <__aeabi_d2f>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	4a24      	ldr	r2, [pc, #144]	; (8001f74 <main+0x8bc>)
 8001ee2:	6013      	str	r3, [r2, #0]
		  }
		  qi = position;
 8001ee4:	4b24      	ldr	r3, [pc, #144]	; (8001f78 <main+0x8c0>)
 8001ee6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eea:	ee07 3a90 	vmov	s15, r3
 8001eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ef2:	4b22      	ldr	r3, [pc, #136]	; (8001f7c <main+0x8c4>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001ef8:	4821      	ldr	r0, [pc, #132]	; (8001f80 <main+0x8c8>)
 8001efa:	f007 fdb3 	bl	8009a64 <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <main+0x8cc>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	601a      	str	r2, [r3, #0]
		  duty = 0;
 8001f04:	4b11      	ldr	r3, [pc, #68]	; (8001f4c <main+0x894>)
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001f0c:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <main+0x87c>)
 8001f0e:	2203      	movs	r2, #3
 8001f10:	601a      	str	r2, [r3, #0]
		  break;
 8001f12:	e006      	b.n	8001f22 <main+0x86a>
		  break;
 8001f14:	bf00      	nop
 8001f16:	e42b      	b.n	8001770 <main+0xb8>
		  break;
 8001f18:	bf00      	nop
 8001f1a:	e429      	b.n	8001770 <main+0xb8>
		  break;
 8001f1c:	bf00      	nop
 8001f1e:	e427      	b.n	8001770 <main+0xb8>
		  break;
 8001f20:	bf00      	nop
  {
 8001f22:	e425      	b.n	8001770 <main+0xb8>
 8001f24:	f3af 8000 	nop.w
 8001f28:	cccccccd 	.word	0xcccccccd
 8001f2c:	3fdccccc 	.word	0x3fdccccc
 8001f30:	20000b34 	.word	0x20000b34
 8001f34:	20000200 	.word	0x20000200
 8001f38:	20000ad4 	.word	0x20000ad4
 8001f3c:	2000096c 	.word	0x2000096c
 8001f40:	20000204 	.word	0x20000204
 8001f44:	20000b3c 	.word	0x20000b3c
 8001f48:	20000554 	.word	0x20000554
 8001f4c:	20000970 	.word	0x20000970
 8001f50:	20001110 	.word	0x20001110
 8001f54:	40020400 	.word	0x40020400
 8001f58:	20000b1c 	.word	0x20000b1c
 8001f5c:	20000b40 	.word	0x20000b40
 8001f60:	2000024c 	.word	0x2000024c
 8001f64:	2000101c 	.word	0x2000101c
 8001f68:	200010f8 	.word	0x200010f8
 8001f6c:	200010fa 	.word	0x200010fa
 8001f70:	20000974 	.word	0x20000974
 8001f74:	2000097c 	.word	0x2000097c
 8001f78:	200009b8 	.word	0x200009b8
 8001f7c:	20000980 	.word	0x20000980
 8001f80:	200006bc 	.word	0x200006bc
 8001f84:	200010fc 	.word	0x200010fc

08001f88 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b094      	sub	sp, #80	; 0x50
 8001f8c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f8e:	f107 0320 	add.w	r3, r7, #32
 8001f92:	2230      	movs	r2, #48	; 0x30
 8001f94:	2100      	movs	r1, #0
 8001f96:	4618      	mov	r0, r3
 8001f98:	f00a fd44 	bl	800ca24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f9c:	f107 030c 	add.w	r3, r7, #12
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	60bb      	str	r3, [r7, #8]
 8001fb0:	4b27      	ldr	r3, [pc, #156]	; (8002050 <SystemClock_Config+0xc8>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <SystemClock_Config+0xc8>)
 8001fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fba:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbc:	4b24      	ldr	r3, [pc, #144]	; (8002050 <SystemClock_Config+0xc8>)
 8001fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fc8:	2300      	movs	r3, #0
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <SystemClock_Config+0xcc>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <SystemClock_Config+0xcc>)
 8001fd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001fd6:	6013      	str	r3, [r2, #0]
 8001fd8:	4b1e      	ldr	r3, [pc, #120]	; (8002054 <SystemClock_Config+0xcc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fe0:	607b      	str	r3, [r7, #4]
 8001fe2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fec:	2310      	movs	r3, #16
 8001fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001ff8:	2308      	movs	r3, #8
 8001ffa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001ffc:	2364      	movs	r3, #100	; 0x64
 8001ffe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002000:	2302      	movs	r3, #2
 8002002:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002004:	2304      	movs	r3, #4
 8002006:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002008:	f107 0320 	add.w	r3, r7, #32
 800200c:	4618      	mov	r0, r3
 800200e:	f006 ffdb 	bl	8008fc8 <HAL_RCC_OscConfig>
 8002012:	4603      	mov	r3, r0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d001      	beq.n	800201c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002018:	f002 fe08 	bl	8004c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800201c:	230f      	movs	r3, #15
 800201e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002020:	2302      	movs	r3, #2
 8002022:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002028:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800202c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8002032:	f107 030c 	add.w	r3, r7, #12
 8002036:	2103      	movs	r1, #3
 8002038:	4618      	mov	r0, r3
 800203a:	f007 fa3d 	bl	80094b8 <HAL_RCC_ClockConfig>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002044:	f002 fdf2 	bl	8004c2c <Error_Handler>
  }
}
 8002048:	bf00      	nop
 800204a:	3750      	adds	r7, #80	; 0x50
 800204c:	46bd      	mov	sp, r7
 800204e:	bd80      	pop	{r7, pc}
 8002050:	40023800 	.word	0x40023800
 8002054:	40007000 	.word	0x40007000

08002058 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800205e:	463b      	mov	r3, r7
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800206a:	4b28      	ldr	r3, [pc, #160]	; (800210c <MX_ADC1_Init+0xb4>)
 800206c:	4a28      	ldr	r2, [pc, #160]	; (8002110 <MX_ADC1_Init+0xb8>)
 800206e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002070:	4b26      	ldr	r3, [pc, #152]	; (800210c <MX_ADC1_Init+0xb4>)
 8002072:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002076:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002078:	4b24      	ldr	r3, [pc, #144]	; (800210c <MX_ADC1_Init+0xb4>)
 800207a:	2200      	movs	r2, #0
 800207c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 800207e:	4b23      	ldr	r3, [pc, #140]	; (800210c <MX_ADC1_Init+0xb4>)
 8002080:	2201      	movs	r2, #1
 8002082:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8002084:	4b21      	ldr	r3, [pc, #132]	; (800210c <MX_ADC1_Init+0xb4>)
 8002086:	2201      	movs	r2, #1
 8002088:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800208a:	4b20      	ldr	r3, [pc, #128]	; (800210c <MX_ADC1_Init+0xb4>)
 800208c:	2200      	movs	r2, #0
 800208e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002092:	4b1e      	ldr	r3, [pc, #120]	; (800210c <MX_ADC1_Init+0xb4>)
 8002094:	2200      	movs	r2, #0
 8002096:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002098:	4b1c      	ldr	r3, [pc, #112]	; (800210c <MX_ADC1_Init+0xb4>)
 800209a:	4a1e      	ldr	r2, [pc, #120]	; (8002114 <MX_ADC1_Init+0xbc>)
 800209c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800209e:	4b1b      	ldr	r3, [pc, #108]	; (800210c <MX_ADC1_Init+0xb4>)
 80020a0:	2200      	movs	r2, #0
 80020a2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80020a4:	4b19      	ldr	r3, [pc, #100]	; (800210c <MX_ADC1_Init+0xb4>)
 80020a6:	2202      	movs	r2, #2
 80020a8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80020aa:	4b18      	ldr	r3, [pc, #96]	; (800210c <MX_ADC1_Init+0xb4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80020b2:	4b16      	ldr	r3, [pc, #88]	; (800210c <MX_ADC1_Init+0xb4>)
 80020b4:	2201      	movs	r2, #1
 80020b6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80020b8:	4814      	ldr	r0, [pc, #80]	; (800210c <MX_ADC1_Init+0xb4>)
 80020ba:	f003 fab3 	bl	8005624 <HAL_ADC_Init>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d001      	beq.n	80020c8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80020c4:	f002 fdb2 	bl	8004c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80020cc:	2301      	movs	r3, #1
 80020ce:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 80020d0:	2303      	movs	r3, #3
 80020d2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020d4:	463b      	mov	r3, r7
 80020d6:	4619      	mov	r1, r3
 80020d8:	480c      	ldr	r0, [pc, #48]	; (800210c <MX_ADC1_Init+0xb4>)
 80020da:	f003 fbf5 	bl	80058c8 <HAL_ADC_ConfigChannel>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d001      	beq.n	80020e8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80020e4:	f002 fda2 	bl	8004c2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80020e8:	2301      	movs	r3, #1
 80020ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80020ec:	2302      	movs	r3, #2
 80020ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80020f0:	463b      	mov	r3, r7
 80020f2:	4619      	mov	r1, r3
 80020f4:	4805      	ldr	r0, [pc, #20]	; (800210c <MX_ADC1_Init+0xb4>)
 80020f6:	f003 fbe7 	bl	80058c8 <HAL_ADC_ConfigChannel>
 80020fa:	4603      	mov	r3, r0
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d001      	beq.n	8002104 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8002100:	f002 fd94 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002104:	bf00      	nop
 8002106:	3710      	adds	r7, #16
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000458 	.word	0x20000458
 8002110:	40012000 	.word	0x40012000
 8002114:	0f000001 	.word	0x0f000001

08002118 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800211c:	4b12      	ldr	r3, [pc, #72]	; (8002168 <MX_I2C1_Init+0x50>)
 800211e:	4a13      	ldr	r2, [pc, #76]	; (800216c <MX_I2C1_Init+0x54>)
 8002120:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002122:	4b11      	ldr	r3, [pc, #68]	; (8002168 <MX_I2C1_Init+0x50>)
 8002124:	4a12      	ldr	r2, [pc, #72]	; (8002170 <MX_I2C1_Init+0x58>)
 8002126:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <MX_I2C1_Init+0x50>)
 800212a:	2200      	movs	r2, #0
 800212c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800212e:	4b0e      	ldr	r3, [pc, #56]	; (8002168 <MX_I2C1_Init+0x50>)
 8002130:	2200      	movs	r2, #0
 8002132:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002134:	4b0c      	ldr	r3, [pc, #48]	; (8002168 <MX_I2C1_Init+0x50>)
 8002136:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800213a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800213c:	4b0a      	ldr	r3, [pc, #40]	; (8002168 <MX_I2C1_Init+0x50>)
 800213e:	2200      	movs	r2, #0
 8002140:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002142:	4b09      	ldr	r3, [pc, #36]	; (8002168 <MX_I2C1_Init+0x50>)
 8002144:	2200      	movs	r2, #0
 8002146:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <MX_I2C1_Init+0x50>)
 800214a:	2200      	movs	r2, #0
 800214c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800214e:	4b06      	ldr	r3, [pc, #24]	; (8002168 <MX_I2C1_Init+0x50>)
 8002150:	2200      	movs	r2, #0
 8002152:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002154:	4804      	ldr	r0, [pc, #16]	; (8002168 <MX_I2C1_Init+0x50>)
 8002156:	f004 fd63 	bl	8006c20 <HAL_I2C_Init>
 800215a:	4603      	mov	r3, r0
 800215c:	2b00      	cmp	r3, #0
 800215e:	d001      	beq.n	8002164 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002160:	f002 fd64 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002164:	bf00      	nop
 8002166:	bd80      	pop	{r7, pc}
 8002168:	20000500 	.word	0x20000500
 800216c:	40005400 	.word	0x40005400
 8002170:	000186a0 	.word	0x000186a0

08002174 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b092      	sub	sp, #72	; 0x48
 8002178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800217a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002184:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002188:	2200      	movs	r2, #0
 800218a:	601a      	str	r2, [r3, #0]
 800218c:	605a      	str	r2, [r3, #4]
 800218e:	609a      	str	r2, [r3, #8]
 8002190:	60da      	str	r2, [r3, #12]
 8002192:	611a      	str	r2, [r3, #16]
 8002194:	615a      	str	r2, [r3, #20]
 8002196:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002198:	1d3b      	adds	r3, r7, #4
 800219a:	2220      	movs	r2, #32
 800219c:	2100      	movs	r1, #0
 800219e:	4618      	mov	r0, r3
 80021a0:	f00a fc40 	bl	800ca24 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <MX_TIM1_Init+0x118>)
 80021a6:	4a3a      	ldr	r2, [pc, #232]	; (8002290 <MX_TIM1_Init+0x11c>)
 80021a8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80021aa:	4b38      	ldr	r3, [pc, #224]	; (800228c <MX_TIM1_Init+0x118>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <MX_TIM1_Init+0x118>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 80021b6:	4b35      	ldr	r3, [pc, #212]	; (800228c <MX_TIM1_Init+0x118>)
 80021b8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80021bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021be:	4b33      	ldr	r3, [pc, #204]	; (800228c <MX_TIM1_Init+0x118>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021c4:	4b31      	ldr	r3, [pc, #196]	; (800228c <MX_TIM1_Init+0x118>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021ca:	4b30      	ldr	r3, [pc, #192]	; (800228c <MX_TIM1_Init+0x118>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021d0:	482e      	ldr	r0, [pc, #184]	; (800228c <MX_TIM1_Init+0x118>)
 80021d2:	f007 fd3f 	bl	8009c54 <HAL_TIM_PWM_Init>
 80021d6:	4603      	mov	r3, r0
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d001      	beq.n	80021e0 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80021dc:	f002 fd26 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021e0:	2300      	movs	r3, #0
 80021e2:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80021e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80021ec:	4619      	mov	r1, r3
 80021ee:	4827      	ldr	r0, [pc, #156]	; (800228c <MX_TIM1_Init+0x118>)
 80021f0:	f009 f822 	bl	800b238 <HAL_TIMEx_MasterConfigSynchronization>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80021fa:	f002 fd17 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021fe:	2360      	movs	r3, #96	; 0x60
 8002200:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8002202:	2300      	movs	r3, #0
 8002204:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002206:	2300      	movs	r3, #0
 8002208:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800220a:	2300      	movs	r3, #0
 800220c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800220e:	2300      	movs	r3, #0
 8002210:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002212:	2300      	movs	r3, #0
 8002214:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002216:	2300      	movs	r3, #0
 8002218:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800221a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221e:	2200      	movs	r2, #0
 8002220:	4619      	mov	r1, r3
 8002222:	481a      	ldr	r0, [pc, #104]	; (800228c <MX_TIM1_Init+0x118>)
 8002224:	f008 f9b6 	bl	800a594 <HAL_TIM_PWM_ConfigChannel>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800222e:	f002 fcfd 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8002232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002236:	2204      	movs	r2, #4
 8002238:	4619      	mov	r1, r3
 800223a:	4814      	ldr	r0, [pc, #80]	; (800228c <MX_TIM1_Init+0x118>)
 800223c:	f008 f9aa 	bl	800a594 <HAL_TIM_PWM_ConfigChannel>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002246:	f002 fcf1 	bl	8004c2c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800224a:	2300      	movs	r3, #0
 800224c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800224e:	2300      	movs	r3, #0
 8002250:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8002252:	2300      	movs	r3, #0
 8002254:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800225a:	2300      	movs	r3, #0
 800225c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800225e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002262:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002268:	1d3b      	adds	r3, r7, #4
 800226a:	4619      	mov	r1, r3
 800226c:	4807      	ldr	r0, [pc, #28]	; (800228c <MX_TIM1_Init+0x118>)
 800226e:	f009 f851 	bl	800b314 <HAL_TIMEx_ConfigBreakDeadTime>
 8002272:	4603      	mov	r3, r0
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002278:	f002 fcd8 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800227c:	4803      	ldr	r0, [pc, #12]	; (800228c <MX_TIM1_Init+0x118>)
 800227e:	f002 fe91 	bl	8004fa4 <HAL_TIM_MspPostInit>

}
 8002282:	bf00      	nop
 8002284:	3748      	adds	r7, #72	; 0x48
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	20000554 	.word	0x20000554
 8002290:	40010000 	.word	0x40010000

08002294 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08c      	sub	sp, #48	; 0x30
 8002298:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800229a:	f107 030c 	add.w	r3, r7, #12
 800229e:	2224      	movs	r2, #36	; 0x24
 80022a0:	2100      	movs	r1, #0
 80022a2:	4618      	mov	r0, r3
 80022a4:	f00a fbbe 	bl	800ca24 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022a8:	1d3b      	adds	r3, r7, #4
 80022aa:	2200      	movs	r2, #0
 80022ac:	601a      	str	r2, [r3, #0]
 80022ae:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80022b0:	4b20      	ldr	r3, [pc, #128]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022b2:	4a21      	ldr	r2, [pc, #132]	; (8002338 <MX_TIM3_Init+0xa4>)
 80022b4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80022b6:	4b1f      	ldr	r3, [pc, #124]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022b8:	2200      	movs	r2, #0
 80022ba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022bc:	4b1d      	ldr	r3, [pc, #116]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022be:	2200      	movs	r2, #0
 80022c0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80022c2:	4b1c      	ldr	r3, [pc, #112]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022c8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ca:	4b1a      	ldr	r3, [pc, #104]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022d0:	4b18      	ldr	r3, [pc, #96]	; (8002334 <MX_TIM3_Init+0xa0>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80022d6:	2303      	movs	r3, #3
 80022d8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80022da:	2300      	movs	r3, #0
 80022dc:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80022de:	2301      	movs	r3, #1
 80022e0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80022ea:	2300      	movs	r3, #0
 80022ec:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80022ee:	2301      	movs	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80022f6:	2300      	movs	r3, #0
 80022f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	4619      	mov	r1, r3
 8002300:	480c      	ldr	r0, [pc, #48]	; (8002334 <MX_TIM3_Init+0xa0>)
 8002302:	f007 fe81 	bl	800a008 <HAL_TIM_Encoder_Init>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800230c:	f002 fc8e 	bl	8004c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002310:	2300      	movs	r3, #0
 8002312:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002314:	2300      	movs	r3, #0
 8002316:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002318:	1d3b      	adds	r3, r7, #4
 800231a:	4619      	mov	r1, r3
 800231c:	4805      	ldr	r0, [pc, #20]	; (8002334 <MX_TIM3_Init+0xa0>)
 800231e:	f008 ff8b 	bl	800b238 <HAL_TIMEx_MasterConfigSynchronization>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d001      	beq.n	800232c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8002328:	f002 fc80 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800232c:	bf00      	nop
 800232e:	3730      	adds	r7, #48	; 0x30
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	20000608 	.word	0x20000608
 8002338:	40000400 	.word	0x40000400

0800233c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002342:	463b      	mov	r3, r7
 8002344:	2200      	movs	r2, #0
 8002346:	601a      	str	r2, [r3, #0]
 8002348:	605a      	str	r2, [r3, #4]
 800234a:	609a      	str	r2, [r3, #8]
 800234c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800234e:	4b16      	ldr	r3, [pc, #88]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002350:	4a16      	ldr	r2, [pc, #88]	; (80023ac <MX_TIM9_Init+0x70>)
 8002352:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8002354:	4b14      	ldr	r3, [pc, #80]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002356:	2263      	movs	r2, #99	; 0x63
 8002358:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800235a:	4b13      	ldr	r3, [pc, #76]	; (80023a8 <MX_TIM9_Init+0x6c>)
 800235c:	2200      	movs	r2, #0
 800235e:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002362:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002366:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002368:	4b0f      	ldr	r3, [pc, #60]	; (80023a8 <MX_TIM9_Init+0x6c>)
 800236a:	2200      	movs	r2, #0
 800236c:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800236e:	4b0e      	ldr	r3, [pc, #56]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002374:	480c      	ldr	r0, [pc, #48]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002376:	f007 fabf 	bl	80098f8 <HAL_TIM_Base_Init>
 800237a:	4603      	mov	r3, r0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d001      	beq.n	8002384 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8002380:	f002 fc54 	bl	8004c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002388:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800238a:	463b      	mov	r3, r7
 800238c:	4619      	mov	r1, r3
 800238e:	4806      	ldr	r0, [pc, #24]	; (80023a8 <MX_TIM9_Init+0x6c>)
 8002390:	f008 f9c2 	bl	800a718 <HAL_TIM_ConfigClockSource>
 8002394:	4603      	mov	r3, r0
 8002396:	2b00      	cmp	r3, #0
 8002398:	d001      	beq.n	800239e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800239a:	f002 fc47 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800239e:	bf00      	nop
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	200006bc 	.word	0x200006bc
 80023ac:	40014000 	.word	0x40014000

080023b0 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b088      	sub	sp, #32
 80023b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80023b6:	1d3b      	adds	r3, r7, #4
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
 80023bc:	605a      	str	r2, [r3, #4]
 80023be:	609a      	str	r2, [r3, #8]
 80023c0:	60da      	str	r2, [r3, #12]
 80023c2:	611a      	str	r2, [r3, #16]
 80023c4:	615a      	str	r2, [r3, #20]
 80023c6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80023c8:	4b21      	ldr	r3, [pc, #132]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023ca:	4a22      	ldr	r2, [pc, #136]	; (8002454 <MX_TIM11_Init+0xa4>)
 80023cc:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 80023ce:	4b20      	ldr	r3, [pc, #128]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023d0:	2263      	movs	r2, #99	; 0x63
 80023d2:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80023d4:	4b1e      	ldr	r3, [pc, #120]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80023da:	4b1d      	ldr	r3, [pc, #116]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023dc:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80023e0:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80023e8:	4b19      	ldr	r3, [pc, #100]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80023ee:	4818      	ldr	r0, [pc, #96]	; (8002450 <MX_TIM11_Init+0xa0>)
 80023f0:	f007 fa82 	bl	80098f8 <HAL_TIM_Base_Init>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d001      	beq.n	80023fe <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80023fa:	f002 fc17 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80023fe:	4814      	ldr	r0, [pc, #80]	; (8002450 <MX_TIM11_Init+0xa0>)
 8002400:	f007 fbc2 	bl	8009b88 <HAL_TIM_OC_Init>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d001      	beq.n	800240e <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 800240a:	f002 fc0f 	bl	8004c2c <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 800240e:	2108      	movs	r1, #8
 8002410:	480f      	ldr	r0, [pc, #60]	; (8002450 <MX_TIM11_Init+0xa0>)
 8002412:	f007 fd2b 	bl	8009e6c <HAL_TIM_OnePulse_Init>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d001      	beq.n	8002420 <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 800241c:	f002 fc06 	bl	8004c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 8002420:	2310      	movs	r3, #16
 8002422:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 8002424:	f240 5399 	movw	r3, #1433	; 0x599
 8002428:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800242e:	2300      	movs	r3, #0
 8002430:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002432:	1d3b      	adds	r3, r7, #4
 8002434:	2200      	movs	r2, #0
 8002436:	4619      	mov	r1, r3
 8002438:	4805      	ldr	r0, [pc, #20]	; (8002450 <MX_TIM11_Init+0xa0>)
 800243a:	f008 f84f 	bl	800a4dc <HAL_TIM_OC_ConfigChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d001      	beq.n	8002448 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002444:	f002 fbf2 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002448:	bf00      	nop
 800244a:	3720      	adds	r7, #32
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000770 	.word	0x20000770
 8002454:	40014800 	.word	0x40014800

08002458 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 800245e:	4a12      	ldr	r2, [pc, #72]	; (80024a8 <MX_USART1_UART_Init+0x50>)
 8002460:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002462:	4b10      	ldr	r3, [pc, #64]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 8002464:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002468:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800246a:	4b0e      	ldr	r3, [pc, #56]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 800246c:	2200      	movs	r2, #0
 800246e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002470:	4b0c      	ldr	r3, [pc, #48]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 8002472:	2200      	movs	r2, #0
 8002474:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002476:	4b0b      	ldr	r3, [pc, #44]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 8002478:	2200      	movs	r2, #0
 800247a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 800247e:	220c      	movs	r2, #12
 8002480:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002482:	4b08      	ldr	r3, [pc, #32]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 8002484:	2200      	movs	r2, #0
 8002486:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 800248a:	2200      	movs	r2, #0
 800248c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800248e:	4805      	ldr	r0, [pc, #20]	; (80024a4 <MX_USART1_UART_Init+0x4c>)
 8002490:	f008 ffb0 	bl	800b3f4 <HAL_UART_Init>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d001      	beq.n	800249e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800249a:	f002 fbc7 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800249e:	bf00      	nop
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	bf00      	nop
 80024a4:	20000824 	.word	0x20000824
 80024a8:	40011000 	.word	0x40011000

080024ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80024b0:	4b12      	ldr	r3, [pc, #72]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024b2:	4a13      	ldr	r2, [pc, #76]	; (8002500 <MX_USART2_UART_Init+0x54>)
 80024b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 80024b6:	4b11      	ldr	r3, [pc, #68]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024b8:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 80024bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80024be:	4b0f      	ldr	r3, [pc, #60]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024c4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80024c6:	4b0d      	ldr	r3, [pc, #52]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024c8:	2200      	movs	r2, #0
 80024ca:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80024cc:	4b0b      	ldr	r3, [pc, #44]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80024d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80024d4:	4b09      	ldr	r3, [pc, #36]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024d6:	220c      	movs	r2, #12
 80024d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024da:	4b08      	ldr	r3, [pc, #32]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024dc:	2200      	movs	r2, #0
 80024de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e0:	4b06      	ldr	r3, [pc, #24]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80024e6:	4805      	ldr	r0, [pc, #20]	; (80024fc <MX_USART2_UART_Init+0x50>)
 80024e8:	f008 ff84 	bl	800b3f4 <HAL_UART_Init>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80024f2:	f002 fb9b 	bl	8004c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80024f6:	bf00      	nop
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	20000898 	.word	0x20000898
 8002500:	40004400 	.word	0x40004400

08002504 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b082      	sub	sp, #8
 8002508:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800250a:	2300      	movs	r3, #0
 800250c:	607b      	str	r3, [r7, #4]
 800250e:	4b17      	ldr	r3, [pc, #92]	; (800256c <MX_DMA_Init+0x68>)
 8002510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002512:	4a16      	ldr	r2, [pc, #88]	; (800256c <MX_DMA_Init+0x68>)
 8002514:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002518:	6313      	str	r3, [r2, #48]	; 0x30
 800251a:	4b14      	ldr	r3, [pc, #80]	; (800256c <MX_DMA_Init+0x68>)
 800251c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002522:	607b      	str	r3, [r7, #4]
 8002524:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002526:	2300      	movs	r3, #0
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4b10      	ldr	r3, [pc, #64]	; (800256c <MX_DMA_Init+0x68>)
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	4a0f      	ldr	r2, [pc, #60]	; (800256c <MX_DMA_Init+0x68>)
 8002530:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002534:	6313      	str	r3, [r2, #48]	; 0x30
 8002536:	4b0d      	ldr	r3, [pc, #52]	; (800256c <MX_DMA_Init+0x68>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002542:	2200      	movs	r2, #0
 8002544:	2100      	movs	r1, #0
 8002546:	2011      	movs	r0, #17
 8002548:	f003 fd49 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800254c:	2011      	movs	r0, #17
 800254e:	f003 fd62 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8002552:	2200      	movs	r2, #0
 8002554:	2100      	movs	r1, #0
 8002556:	2038      	movs	r0, #56	; 0x38
 8002558:	f003 fd41 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 800255c:	2038      	movs	r0, #56	; 0x38
 800255e:	f003 fd5a 	bl	8006016 <HAL_NVIC_EnableIRQ>

}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40023800 	.word	0x40023800

08002570 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b08a      	sub	sp, #40	; 0x28
 8002574:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002576:	f107 0314 	add.w	r3, r7, #20
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	605a      	str	r2, [r3, #4]
 8002580:	609a      	str	r2, [r3, #8]
 8002582:	60da      	str	r2, [r3, #12]
 8002584:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]
 800258a:	4b4f      	ldr	r3, [pc, #316]	; (80026c8 <MX_GPIO_Init+0x158>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	4a4e      	ldr	r2, [pc, #312]	; (80026c8 <MX_GPIO_Init+0x158>)
 8002590:	f043 0304 	orr.w	r3, r3, #4
 8002594:	6313      	str	r3, [r2, #48]	; 0x30
 8002596:	4b4c      	ldr	r3, [pc, #304]	; (80026c8 <MX_GPIO_Init+0x158>)
 8002598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	613b      	str	r3, [r7, #16]
 80025a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80025a2:	2300      	movs	r3, #0
 80025a4:	60fb      	str	r3, [r7, #12]
 80025a6:	4b48      	ldr	r3, [pc, #288]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a47      	ldr	r2, [pc, #284]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b45      	ldr	r3, [pc, #276]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025be:	2300      	movs	r3, #0
 80025c0:	60bb      	str	r3, [r7, #8]
 80025c2:	4b41      	ldr	r3, [pc, #260]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c6:	4a40      	ldr	r2, [pc, #256]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025c8:	f043 0301 	orr.w	r3, r3, #1
 80025cc:	6313      	str	r3, [r2, #48]	; 0x30
 80025ce:	4b3e      	ldr	r3, [pc, #248]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	f003 0301 	and.w	r3, r3, #1
 80025d6:	60bb      	str	r3, [r7, #8]
 80025d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80025da:	2300      	movs	r3, #0
 80025dc:	607b      	str	r3, [r7, #4]
 80025de:	4b3a      	ldr	r3, [pc, #232]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e2:	4a39      	ldr	r2, [pc, #228]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025e4:	f043 0302 	orr.w	r3, r3, #2
 80025e8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ea:	4b37      	ldr	r3, [pc, #220]	; (80026c8 <MX_GPIO_Init+0x158>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	607b      	str	r3, [r7, #4]
 80025f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Motor_Drive_L_EN_Pin|Motor_Drive_R_EN_Pin, GPIO_PIN_RESET);
 80025f6:	2200      	movs	r2, #0
 80025f8:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80025fc:	4833      	ldr	r0, [pc, #204]	; (80026cc <MX_GPIO_Init+0x15c>)
 80025fe:	f004 fadd 	bl	8006bbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Proximity_1_Pin */
  GPIO_InitStruct.Pin = Proximity_1_Pin;
 8002602:	2302      	movs	r3, #2
 8002604:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002606:	2300      	movs	r3, #0
 8002608:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800260a:	2300      	movs	r3, #0
 800260c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Proximity_1_GPIO_Port, &GPIO_InitStruct);
 800260e:	f107 0314 	add.w	r3, r7, #20
 8002612:	4619      	mov	r1, r3
 8002614:	482e      	ldr	r0, [pc, #184]	; (80026d0 <MX_GPIO_Init+0x160>)
 8002616:	f004 f935 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : Proximity_2_Pin Proximity_3_Pin */
  GPIO_InitStruct.Pin = Proximity_2_Pin|Proximity_3_Pin;
 800261a:	230c      	movs	r3, #12
 800261c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800261e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002622:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002624:	2300      	movs	r3, #0
 8002626:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 0314 	add.w	r3, r7, #20
 800262c:	4619      	mov	r1, r3
 800262e:	4828      	ldr	r0, [pc, #160]	; (80026d0 <MX_GPIO_Init+0x160>)
 8002630:	f004 f928 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Reset_Pin Joystick_Fine_Pin */
  GPIO_InitStruct.Pin = Joystick_Reset_Pin|Joystick_Fine_Pin;
 8002634:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800263a:	2300      	movs	r3, #0
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 0314 	add.w	r3, r7, #20
 8002646:	4619      	mov	r1, r3
 8002648:	4822      	ldr	r0, [pc, #136]	; (80026d4 <MX_GPIO_Init+0x164>)
 800264a:	f004 f91b 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor_Drive_L_EN_Pin Motor_Drive_R_EN_Pin */
  GPIO_InitStruct.Pin = Motor_Drive_L_EN_Pin|Motor_Drive_R_EN_Pin;
 800264e:	f44f 6382 	mov.w	r3, #1040	; 0x410
 8002652:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	4619      	mov	r1, r3
 8002666:	4819      	ldr	r0, [pc, #100]	; (80026cc <MX_GPIO_Init+0x15c>)
 8002668:	f004 f90c 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pin : Emergency_Switch_Pin */
  GPIO_InitStruct.Pin = Emergency_Switch_Pin;
 800266c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002672:	2300      	movs	r3, #0
 8002674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002676:	2302      	movs	r3, #2
 8002678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Emergency_Switch_GPIO_Port, &GPIO_InitStruct);
 800267a:	f107 0314 	add.w	r3, r7, #20
 800267e:	4619      	mov	r1, r3
 8002680:	4812      	ldr	r0, [pc, #72]	; (80026cc <MX_GPIO_Init+0x15c>)
 8002682:	f004 f8ff 	bl	8006884 <HAL_GPIO_Init>

  /*Configure GPIO pins : Joystick_Rough_Pin Joystick_Get_Position_Pin */
  GPIO_InitStruct.Pin = Joystick_Rough_Pin|Joystick_Get_Position_Pin;
 8002686:	2360      	movs	r3, #96	; 0x60
 8002688:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800268a:	2300      	movs	r3, #0
 800268c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002692:	f107 0314 	add.w	r3, r7, #20
 8002696:	4619      	mov	r1, r3
 8002698:	480c      	ldr	r0, [pc, #48]	; (80026cc <MX_GPIO_Init+0x15c>)
 800269a:	f004 f8f3 	bl	8006884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800269e:	2200      	movs	r2, #0
 80026a0:	2100      	movs	r1, #0
 80026a2:	2008      	movs	r0, #8
 80026a4:	f003 fc9b 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80026a8:	2008      	movs	r0, #8
 80026aa:	f003 fcb4 	bl	8006016 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80026ae:	2200      	movs	r2, #0
 80026b0:	2100      	movs	r1, #0
 80026b2:	2009      	movs	r0, #9
 80026b4:	f003 fc93 	bl	8005fde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80026b8:	2009      	movs	r0, #9
 80026ba:	f003 fcac 	bl	8006016 <HAL_NVIC_EnableIRQ>

}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	; 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800
 80026cc:	40020400 	.word	0x40020400
 80026d0:	40020800 	.word	0x40020800
 80026d4:	40020000 	.word	0x40020000

080026d8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	4603      	mov	r3, r0
 80026e0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b04      	cmp	r3, #4
 80026e6:	d106      	bne.n	80026f6 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 80026e8:	4b0a      	ldr	r3, [pc, #40]	; (8002714 <HAL_GPIO_EXTI_Callback+0x3c>)
 80026ea:	2205      	movs	r2, #5
 80026ec:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 80026ee:	4b0a      	ldr	r3, [pc, #40]	; (8002718 <HAL_GPIO_EXTI_Callback+0x40>)
 80026f0:	2203      	movs	r2, #3
 80026f2:	601a      	str	r2, [r3, #0]
	else if(GPIO_Pin == GPIO_PIN_3)
	{
		scheduler = 5;
		Proximity = 2;
	}
}
 80026f4:	e008      	b.n	8002708 <HAL_GPIO_EXTI_Callback+0x30>
	else if(GPIO_Pin == GPIO_PIN_3)
 80026f6:	88fb      	ldrh	r3, [r7, #6]
 80026f8:	2b08      	cmp	r3, #8
 80026fa:	d105      	bne.n	8002708 <HAL_GPIO_EXTI_Callback+0x30>
		scheduler = 5;
 80026fc:	4b05      	ldr	r3, [pc, #20]	; (8002714 <HAL_GPIO_EXTI_Callback+0x3c>)
 80026fe:	2205      	movs	r2, #5
 8002700:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 8002702:	4b05      	ldr	r3, [pc, #20]	; (8002718 <HAL_GPIO_EXTI_Callback+0x40>)
 8002704:	2202      	movs	r2, #2
 8002706:	601a      	str	r2, [r3, #0]
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr
 8002714:	20000200 	.word	0x20000200
 8002718:	2000024c 	.word	0x2000024c

0800271c <Homing>:

void Homing()
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 8002720:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <Homing+0xa4>)
 8002722:	2204      	movs	r2, #4
 8002724:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 8002726:	4b26      	ldr	r3, [pc, #152]	; (80027c0 <Homing+0xa4>)
 8002728:	2201      	movs	r2, #1
 800272a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <Homing+0xa4>)
 8002730:	2204      	movs	r2, #4
 8002732:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 8002734:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <Homing+0xa8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b03      	cmp	r3, #3
 800273a:	d109      	bne.n	8002750 <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800273c:	4b22      	ldr	r3, [pc, #136]	; (80027c8 <Homing+0xac>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2200      	movs	r2, #0
 8002742:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002744:	4b20      	ldr	r3, [pc, #128]	; (80027c8 <Homing+0xac>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f242 7210 	movw	r2, #10000	; 0x2710
 800274c:	635a      	str	r2, [r3, #52]	; 0x34
 800274e:	e00c      	b.n	800276a <Homing+0x4e>
	}

	else if (Proximity == 2)
 8002750:	4b1c      	ldr	r3, [pc, #112]	; (80027c4 <Homing+0xa8>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	2b02      	cmp	r3, #2
 8002756:	d108      	bne.n	800276a <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 8002758:	4b1b      	ldr	r3, [pc, #108]	; (80027c8 <Homing+0xac>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002760:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002762:	4b19      	ldr	r3, [pc, #100]	; (80027c8 <Homing+0xac>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	2200      	movs	r2, #0
 8002768:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 800276a:	2102      	movs	r1, #2
 800276c:	4817      	ldr	r0, [pc, #92]	; (80027cc <Homing+0xb0>)
 800276e:	f004 fa0d 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d120      	bne.n	80027ba <Homing+0x9e>
	{
		Proximity = 0;
 8002778:	4b12      	ldr	r3, [pc, #72]	; (80027c4 <Homing+0xa8>)
 800277a:	2200      	movs	r2, #0
 800277c:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 800277e:	4b14      	ldr	r3, [pc, #80]	; (80027d0 <Homing+0xb4>)
 8002780:	2200      	movs	r2, #0
 8002782:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 8002784:	4b0e      	ldr	r3, [pc, #56]	; (80027c0 <Homing+0xa4>)
 8002786:	2200      	movs	r2, #0
 8002788:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 800278a:	4b0d      	ldr	r3, [pc, #52]	; (80027c0 <Homing+0xa4>)
 800278c:	2200      	movs	r2, #0
 800278e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 8002792:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <Homing+0xa4>)
 8002794:	2200      	movs	r2, #0
 8002796:	841a      	strh	r2, [r3, #32]

		HAL_Delay(35);
 8002798:	2023      	movs	r0, #35	; 0x23
 800279a:	f002 ff1f 	bl	80055dc <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <Homing+0xac>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2200      	movs	r2, #0
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80027a6:	4b08      	ldr	r3, [pc, #32]	; (80027c8 <Homing+0xac>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	2200      	movs	r2, #0
 80027ac:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 80027ae:	4b09      	ldr	r3, [pc, #36]	; (80027d4 <Homing+0xb8>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 80027b4:	4b08      	ldr	r3, [pc, #32]	; (80027d8 <Homing+0xbc>)
 80027b6:	2200      	movs	r2, #0
 80027b8:	601a      	str	r2, [r3, #0]
	}
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	2000101c 	.word	0x2000101c
 80027c4:	2000024c 	.word	0x2000024c
 80027c8:	20000554 	.word	0x20000554
 80027cc:	40020800 	.word	0x40020800
 80027d0:	20000b40 	.word	0x20000b40
 80027d4:	20000b30 	.word	0x20000b30
 80027d8:	20000200 	.word	0x20000200

080027dc <EndEffectorWrite>:

void EndEffectorWrite()
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af02      	add	r7, sp, #8
	switch(EndEffectorState)
 80027e2:	4ba2      	ldr	r3, [pc, #648]	; (8002a6c <EndEffectorWrite+0x290>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	2b08      	cmp	r3, #8
 80027e8:	f200 813c 	bhi.w	8002a64 <EndEffectorWrite+0x288>
 80027ec:	a201      	add	r2, pc, #4	; (adr r2, 80027f4 <EndEffectorWrite+0x18>)
 80027ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f2:	bf00      	nop
 80027f4:	08002819 	.word	0x08002819
 80027f8:	0800283b 	.word	0x0800283b
 80027fc:	08002863 	.word	0x08002863
 8002800:	0800288b 	.word	0x0800288b
 8002804:	080028b3 	.word	0x080028b3
 8002808:	08002927 	.word	0x08002927
 800280c:	080029d1 	.word	0x080029d1
 8002810:	080029f7 	.word	0x080029f7
 8002814:	08002a1d 	.word	0x08002a1d
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 8002818:	4b95      	ldr	r3, [pc, #596]	; (8002a70 <EndEffectorWrite+0x294>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	2b01      	cmp	r3, #1
 800281e:	f040 8110 	bne.w	8002a42 <EndEffectorWrite+0x266>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 8002822:	2364      	movs	r3, #100	; 0x64
 8002824:	9300      	str	r3, [sp, #0]
 8002826:	2304      	movs	r3, #4
 8002828:	4a92      	ldr	r2, [pc, #584]	; (8002a74 <EndEffectorWrite+0x298>)
 800282a:	212a      	movs	r1, #42	; 0x2a
 800282c:	4892      	ldr	r0, [pc, #584]	; (8002a78 <EndEffectorWrite+0x29c>)
 800282e:	f004 fb3b 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 8002832:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <EndEffectorWrite+0x294>)
 8002834:	2200      	movs	r2, #0
 8002836:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002838:	e103      	b.n	8002a42 <EndEffectorWrite+0x266>
	case 1:
		if(EndEffectorWriteFlag == 1)
 800283a:	4b8d      	ldr	r3, [pc, #564]	; (8002a70 <EndEffectorWrite+0x294>)
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b01      	cmp	r3, #1
 8002840:	f040 8101 	bne.w	8002a46 <EndEffectorWrite+0x26a>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 8002844:	2364      	movs	r3, #100	; 0x64
 8002846:	9300      	str	r3, [sp, #0]
 8002848:	2302      	movs	r3, #2
 800284a:	4a8c      	ldr	r2, [pc, #560]	; (8002a7c <EndEffectorWrite+0x2a0>)
 800284c:	212a      	movs	r1, #42	; 0x2a
 800284e:	488a      	ldr	r0, [pc, #552]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002850:	f004 fb2a 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 8002854:	4b8a      	ldr	r3, [pc, #552]	; (8002a80 <EndEffectorWrite+0x2a4>)
 8002856:	2201      	movs	r2, #1
 8002858:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800285a:	4b85      	ldr	r3, [pc, #532]	; (8002a70 <EndEffectorWrite+0x294>)
 800285c:	2200      	movs	r2, #0
 800285e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002860:	e0f1      	b.n	8002a46 <EndEffectorWrite+0x26a>
	case 2:
		if(EndEffectorWriteFlag == 1)
 8002862:	4b83      	ldr	r3, [pc, #524]	; (8002a70 <EndEffectorWrite+0x294>)
 8002864:	781b      	ldrb	r3, [r3, #0]
 8002866:	2b01      	cmp	r3, #1
 8002868:	f040 80ef 	bne.w	8002a4a <EndEffectorWrite+0x26e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 800286c:	2364      	movs	r3, #100	; 0x64
 800286e:	9300      	str	r3, [sp, #0]
 8002870:	2302      	movs	r3, #2
 8002872:	4a84      	ldr	r2, [pc, #528]	; (8002a84 <EndEffectorWrite+0x2a8>)
 8002874:	212a      	movs	r1, #42	; 0x2a
 8002876:	4880      	ldr	r0, [pc, #512]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002878:	f004 fb16 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 800287c:	4b80      	ldr	r3, [pc, #512]	; (8002a80 <EndEffectorWrite+0x2a4>)
 800287e:	2200      	movs	r2, #0
 8002880:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002882:	4b7b      	ldr	r3, [pc, #492]	; (8002a70 <EndEffectorWrite+0x294>)
 8002884:	2200      	movs	r2, #0
 8002886:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002888:	e0df      	b.n	8002a4a <EndEffectorWrite+0x26e>
	case 3:
		if(EndEffectorWriteFlag == 1)
 800288a:	4b79      	ldr	r3, [pc, #484]	; (8002a70 <EndEffectorWrite+0x294>)
 800288c:	781b      	ldrb	r3, [r3, #0]
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 80dd 	bne.w	8002a4e <EndEffectorWrite+0x272>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 8002894:	2364      	movs	r3, #100	; 0x64
 8002896:	9300      	str	r3, [sp, #0]
 8002898:	2302      	movs	r3, #2
 800289a:	4a7b      	ldr	r2, [pc, #492]	; (8002a88 <EndEffectorWrite+0x2ac>)
 800289c:	212a      	movs	r1, #42	; 0x2a
 800289e:	4876      	ldr	r0, [pc, #472]	; (8002a78 <EndEffectorWrite+0x29c>)
 80028a0:	f004 fb02 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 80028a4:	4b76      	ldr	r3, [pc, #472]	; (8002a80 <EndEffectorWrite+0x2a4>)
 80028a6:	2202      	movs	r2, #2
 80028a8:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80028aa:	4b71      	ldr	r3, [pc, #452]	; (8002a70 <EndEffectorWrite+0x294>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
			}
		break;
 80028b0:	e0cd      	b.n	8002a4e <EndEffectorWrite+0x272>
	case 4:
		if(EndEffectorWriteFlag == 1)
 80028b2:	4b6f      	ldr	r3, [pc, #444]	; (8002a70 <EndEffectorWrite+0x294>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d114      	bne.n	80028e4 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 80028ba:	2364      	movs	r3, #100	; 0x64
 80028bc:	9300      	str	r3, [sp, #0]
 80028be:	2302      	movs	r3, #2
 80028c0:	4a72      	ldr	r2, [pc, #456]	; (8002a8c <EndEffectorWrite+0x2b0>)
 80028c2:	212a      	movs	r1, #42	; 0x2a
 80028c4:	486c      	ldr	r0, [pc, #432]	; (8002a78 <EndEffectorWrite+0x29c>)
 80028c6:	f004 faef 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 80028ca:	4b6d      	ldr	r3, [pc, #436]	; (8002a80 <EndEffectorWrite+0x2a4>)
 80028cc:	2206      	movs	r2, #6
 80028ce:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80028d0:	2064      	movs	r0, #100	; 0x64
 80028d2:	f002 fe83 	bl	80055dc <HAL_Delay>
				EndEffectorReadFlag = 1;
 80028d6:	4b6e      	ldr	r3, [pc, #440]	; (8002a90 <EndEffectorWrite+0x2b4>)
 80028d8:	2201      	movs	r2, #1
 80028da:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80028dc:	4b64      	ldr	r3, [pc, #400]	; (8002a70 <EndEffectorWrite+0x294>)
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
 80028e2:	e00f      	b.n	8002904 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80028e4:	4b6a      	ldr	r3, [pc, #424]	; (8002a90 <EndEffectorWrite+0x2b4>)
 80028e6:	781b      	ldrb	r3, [r3, #0]
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d10b      	bne.n	8002904 <EndEffectorWrite+0x128>
 80028ec:	4b62      	ldr	r3, [pc, #392]	; (8002a78 <EndEffectorWrite+0x29c>)
 80028ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b20      	cmp	r3, #32
 80028f6:	d105      	bne.n	8002904 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 80028f8:	2301      	movs	r3, #1
 80028fa:	4a66      	ldr	r2, [pc, #408]	; (8002a94 <EndEffectorWrite+0x2b8>)
 80028fc:	212a      	movs	r1, #42	; 0x2a
 80028fe:	485e      	ldr	r0, [pc, #376]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002900:	f004 fbd0 	bl	80070a4 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 8002904:	4b63      	ldr	r3, [pc, #396]	; (8002a94 <EndEffectorWrite+0x2b8>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b07      	cmp	r3, #7
 800290a:	f040 80a2 	bne.w	8002a52 <EndEffectorWrite+0x276>
			{
				TaskType *= -1;
 800290e:	4b62      	ldr	r3, [pc, #392]	; (8002a98 <EndEffectorWrite+0x2bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	425b      	negs	r3, r3
 8002914:	4a60      	ldr	r2, [pc, #384]	; (8002a98 <EndEffectorWrite+0x2bc>)
 8002916:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 8002918:	4b5d      	ldr	r3, [pc, #372]	; (8002a90 <EndEffectorWrite+0x2b4>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 800291e:	4b5f      	ldr	r3, [pc, #380]	; (8002a9c <EndEffectorWrite+0x2c0>)
 8002920:	2202      	movs	r2, #2
 8002922:	601a      	str	r2, [r3, #0]
			}
		break;
 8002924:	e095      	b.n	8002a52 <EndEffectorWrite+0x276>
	case 5:
		if(EndEffectorWriteFlag == 1)
 8002926:	4b52      	ldr	r3, [pc, #328]	; (8002a70 <EndEffectorWrite+0x294>)
 8002928:	781b      	ldrb	r3, [r3, #0]
 800292a:	2b01      	cmp	r3, #1
 800292c:	d114      	bne.n	8002958 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 800292e:	2364      	movs	r3, #100	; 0x64
 8002930:	9300      	str	r3, [sp, #0]
 8002932:	2302      	movs	r3, #2
 8002934:	4a5a      	ldr	r2, [pc, #360]	; (8002aa0 <EndEffectorWrite+0x2c4>)
 8002936:	212a      	movs	r1, #42	; 0x2a
 8002938:	484f      	ldr	r0, [pc, #316]	; (8002a78 <EndEffectorWrite+0x29c>)
 800293a:	f004 fab5 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 800293e:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <EndEffectorWrite+0x2a4>)
 8002940:	220a      	movs	r2, #10
 8002942:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 8002944:	2064      	movs	r0, #100	; 0x64
 8002946:	f002 fe49 	bl	80055dc <HAL_Delay>
				EndEffectorReadFlag = 1;
 800294a:	4b51      	ldr	r3, [pc, #324]	; (8002a90 <EndEffectorWrite+0x2b4>)
 800294c:	2201      	movs	r2, #1
 800294e:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002950:	4b47      	ldr	r3, [pc, #284]	; (8002a70 <EndEffectorWrite+0x294>)
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e00f      	b.n	8002978 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002958:	4b4d      	ldr	r3, [pc, #308]	; (8002a90 <EndEffectorWrite+0x2b4>)
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d10b      	bne.n	8002978 <EndEffectorWrite+0x19c>
 8002960:	4b45      	ldr	r3, [pc, #276]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002962:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b20      	cmp	r3, #32
 800296a:	d105      	bne.n	8002978 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 800296c:	2301      	movs	r3, #1
 800296e:	4a49      	ldr	r2, [pc, #292]	; (8002a94 <EndEffectorWrite+0x2b8>)
 8002970:	212a      	movs	r1, #42	; 0x2a
 8002972:	4841      	ldr	r0, [pc, #260]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002974:	f004 fb96 	bl	80070a4 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 8002978:	4b46      	ldr	r3, [pc, #280]	; (8002a94 <EndEffectorWrite+0x2b8>)
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b04      	cmp	r3, #4
 800297e:	d16a      	bne.n	8002a56 <EndEffectorWrite+0x27a>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002980:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <EndEffectorWrite+0x2a4>)
 8002982:	2202      	movs	r2, #2
 8002984:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 8002986:	4b44      	ldr	r3, [pc, #272]	; (8002a98 <EndEffectorWrite+0x2bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	425b      	negs	r3, r3
 800298c:	4a42      	ldr	r2, [pc, #264]	; (8002a98 <EndEffectorWrite+0x2bc>)
 800298e:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 8002990:	4b3f      	ldr	r3, [pc, #252]	; (8002a90 <EndEffectorWrite+0x2b4>)
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <EndEffectorWrite+0x2c8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	3301      	adds	r3, #1
 800299c:	4a41      	ldr	r2, [pc, #260]	; (8002aa4 <EndEffectorWrite+0x2c8>)
 800299e:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 80029a0:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <EndEffectorWrite+0x2c8>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2b09      	cmp	r3, #9
 80029a6:	d10f      	bne.n	80029c8 <EndEffectorWrite+0x1ec>
				{
					HoleSequence = 0;
 80029a8:	4b3e      	ldr	r3, [pc, #248]	; (8002aa4 <EndEffectorWrite+0x2c8>)
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 80029ae:	4b3a      	ldr	r3, [pc, #232]	; (8002a98 <EndEffectorWrite+0x2bc>)
 80029b0:	2201      	movs	r2, #1
 80029b2:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 80029b4:	4b32      	ldr	r3, [pc, #200]	; (8002a80 <EndEffectorWrite+0x2a4>)
 80029b6:	2200      	movs	r2, #0
 80029b8:	805a      	strh	r2, [r3, #2]
					Proximity = 3;
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <EndEffectorWrite+0x2cc>)
 80029bc:	2203      	movs	r2, #3
 80029be:	601a      	str	r2, [r3, #0]
					scheduler = 5;
 80029c0:	4b36      	ldr	r3, [pc, #216]	; (8002a9c <EndEffectorWrite+0x2c0>)
 80029c2:	2205      	movs	r2, #5
 80029c4:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 80029c6:	e046      	b.n	8002a56 <EndEffectorWrite+0x27a>
					scheduler = 1;
 80029c8:	4b34      	ldr	r3, [pc, #208]	; (8002a9c <EndEffectorWrite+0x2c0>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	601a      	str	r2, [r3, #0]
		break;
 80029ce:	e042      	b.n	8002a56 <EndEffectorWrite+0x27a>
	case 6:
		if(EndEffectorWriteFlag == 1)
 80029d0:	4b27      	ldr	r3, [pc, #156]	; (8002a70 <EndEffectorWrite+0x294>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d140      	bne.n	8002a5a <EndEffectorWrite+0x27e>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 80029d8:	2364      	movs	r3, #100	; 0x64
 80029da:	9300      	str	r3, [sp, #0]
 80029dc:	2302      	movs	r3, #2
 80029de:	4a33      	ldr	r2, [pc, #204]	; (8002aac <EndEffectorWrite+0x2d0>)
 80029e0:	212a      	movs	r1, #42	; 0x2a
 80029e2:	4825      	ldr	r0, [pc, #148]	; (8002a78 <EndEffectorWrite+0x29c>)
 80029e4:	f004 fa60 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80029e8:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <EndEffectorWrite+0x2a4>)
 80029ea:	2200      	movs	r2, #0
 80029ec:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80029ee:	4b20      	ldr	r3, [pc, #128]	; (8002a70 <EndEffectorWrite+0x294>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
			}
		break;
 80029f4:	e031      	b.n	8002a5a <EndEffectorWrite+0x27e>
	case 7:
		if(EndEffectorWriteFlag == 1)
 80029f6:	4b1e      	ldr	r3, [pc, #120]	; (8002a70 <EndEffectorWrite+0x294>)
 80029f8:	781b      	ldrb	r3, [r3, #0]
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d12f      	bne.n	8002a5e <EndEffectorWrite+0x282>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 80029fe:	2364      	movs	r3, #100	; 0x64
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	2301      	movs	r3, #1
 8002a04:	4a2a      	ldr	r2, [pc, #168]	; (8002ab0 <EndEffectorWrite+0x2d4>)
 8002a06:	212a      	movs	r1, #42	; 0x2a
 8002a08:	481b      	ldr	r0, [pc, #108]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002a0a:	f004 fa4d 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002a0e:	4b1c      	ldr	r3, [pc, #112]	; (8002a80 <EndEffectorWrite+0x2a4>)
 8002a10:	2200      	movs	r2, #0
 8002a12:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002a14:	4b16      	ldr	r3, [pc, #88]	; (8002a70 <EndEffectorWrite+0x294>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002a1a:	e020      	b.n	8002a5e <EndEffectorWrite+0x282>
	case 8:
		if(EndEffectorWriteFlag == 1)
 8002a1c:	4b14      	ldr	r3, [pc, #80]	; (8002a70 <EndEffectorWrite+0x294>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d11e      	bne.n	8002a62 <EndEffectorWrite+0x286>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 8002a24:	2364      	movs	r3, #100	; 0x64
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2304      	movs	r3, #4
 8002a2a:	4a22      	ldr	r2, [pc, #136]	; (8002ab4 <EndEffectorWrite+0x2d8>)
 8002a2c:	212a      	movs	r1, #42	; 0x2a
 8002a2e:	4812      	ldr	r0, [pc, #72]	; (8002a78 <EndEffectorWrite+0x29c>)
 8002a30:	f004 fa3a 	bl	8006ea8 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002a34:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <EndEffectorWrite+0x2a4>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002a3a:	4b0d      	ldr	r3, [pc, #52]	; (8002a70 <EndEffectorWrite+0x294>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002a40:	e00f      	b.n	8002a62 <EndEffectorWrite+0x286>
		break;
 8002a42:	bf00      	nop
 8002a44:	e00e      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a46:	bf00      	nop
 8002a48:	e00c      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a4a:	bf00      	nop
 8002a4c:	e00a      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a4e:	bf00      	nop
 8002a50:	e008      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a52:	bf00      	nop
 8002a54:	e006      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a56:	bf00      	nop
 8002a58:	e004      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a5a:	bf00      	nop
 8002a5c:	e002      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a5e:	bf00      	nop
 8002a60:	e000      	b.n	8002a64 <EndEffectorWrite+0x288>
		break;
 8002a62:	bf00      	nop
	}
}
 8002a64:	bf00      	nop
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	20000b3c 	.word	0x20000b3c
 8002a70:	20000b34 	.word	0x20000b34
 8002a74:	20000228 	.word	0x20000228
 8002a78:	20000500 	.word	0x20000500
 8002a7c:	20000234 	.word	0x20000234
 8002a80:	2000101c 	.word	0x2000101c
 8002a84:	20000238 	.word	0x20000238
 8002a88:	2000023c 	.word	0x2000023c
 8002a8c:	20000244 	.word	0x20000244
 8002a90:	20000b35 	.word	0x20000b35
 8002a94:	20000b38 	.word	0x20000b38
 8002a98:	20000204 	.word	0x20000204
 8002a9c:	20000200 	.word	0x20000200
 8002aa0:	20000248 	.word	0x20000248
 8002aa4:	2000096c 	.word	0x2000096c
 8002aa8:	2000024c 	.word	0x2000024c
 8002aac:	20000240 	.word	0x20000240
 8002ab0:	2000022c 	.word	0x2000022c
 8002ab4:	20000230 	.word	0x20000230

08002ab8 <VelocityApprox>:

void VelocityApprox()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	static float velocity_last = 0;
	static float velocity_lowpass = 0;
	static float C_V = 0.0196;
	velocity = (position - lastposition)/0.001; //pulse/s
 8002abc:	4b2c      	ldr	r3, [pc, #176]	; (8002b70 <VelocityApprox+0xb8>)
 8002abe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	4b2b      	ldr	r3, [pc, #172]	; (8002b74 <VelocityApprox+0xbc>)
 8002ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd31 	bl	8000534 <__aeabi_i2d>
 8002ad2:	a323      	add	r3, pc, #140	; (adr r3, 8002b60 <VelocityApprox+0xa8>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fec0 	bl	800085c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f888 	bl	8000bf8 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a23      	ldr	r2, [pc, #140]	; (8002b78 <VelocityApprox+0xc0>)
 8002aec:	6013      	str	r3, [r2, #0]
	lastposition = position;
 8002aee:	4b20      	ldr	r3, [pc, #128]	; (8002b70 <VelocityApprox+0xb8>)
 8002af0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002af4:	4b1f      	ldr	r3, [pc, #124]	; (8002b74 <VelocityApprox+0xbc>)
 8002af6:	801a      	strh	r2, [r3, #0]

	velocity_lowpass = C_V*velocity + (1-C_V)*velocity_last;
 8002af8:	4b20      	ldr	r3, [pc, #128]	; (8002b7c <VelocityApprox+0xc4>)
 8002afa:	ed93 7a00 	vldr	s14, [r3]
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <VelocityApprox+0xc0>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002b08:	4b1c      	ldr	r3, [pc, #112]	; (8002b7c <VelocityApprox+0xc4>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002b12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002b16:	4b1a      	ldr	r3, [pc, #104]	; (8002b80 <VelocityApprox+0xc8>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002b20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <VelocityApprox+0xcc>)
 8002b26:	edc3 7a00 	vstr	s15, [r3]
	velocity_last = velocity_lowpass;
 8002b2a:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <VelocityApprox+0xcc>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a14      	ldr	r2, [pc, #80]	; (8002b80 <VelocityApprox+0xc8>)
 8002b30:	6013      	str	r3, [r2, #0]

	velocity_mm = velocity_lowpass*0.045; //mm/s
 8002b32:	4b14      	ldr	r3, [pc, #80]	; (8002b84 <VelocityApprox+0xcc>)
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd0e 	bl	8000558 <__aeabi_f2d>
 8002b3c:	a30a      	add	r3, pc, #40	; (adr r3, 8002b68 <VelocityApprox+0xb0>)
 8002b3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b42:	f7fd fd61 	bl	8000608 <__aeabi_dmul>
 8002b46:	4602      	mov	r2, r0
 8002b48:	460b      	mov	r3, r1
 8002b4a:	4610      	mov	r0, r2
 8002b4c:	4619      	mov	r1, r3
 8002b4e:	f7fe f853 	bl	8000bf8 <__aeabi_d2f>
 8002b52:	4603      	mov	r3, r0
 8002b54:	4a0c      	ldr	r2, [pc, #48]	; (8002b88 <VelocityApprox+0xd0>)
 8002b56:	6013      	str	r3, [r2, #0]

}
 8002b58:	bf00      	nop
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	f3af 8000 	nop.w
 8002b60:	d2f1a9fc 	.word	0xd2f1a9fc
 8002b64:	3f50624d 	.word	0x3f50624d
 8002b68:	70a3d70a 	.word	0x70a3d70a
 8002b6c:	3fa70a3d 	.word	0x3fa70a3d
 8002b70:	200009b8 	.word	0x200009b8
 8002b74:	20001114 	.word	0x20001114
 8002b78:	200009e0 	.word	0x200009e0
 8002b7c:	20000250 	.word	0x20000250
 8002b80:	20001118 	.word	0x20001118
 8002b84:	2000111c 	.word	0x2000111c
 8002b88:	200009e4 	.word	0x200009e4
 8002b8c:	00000000 	.word	0x00000000

08002b90 <AccelerationApprox>:

void AccelerationApprox()
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	static float Accel_last = 0;
	static float Accel_lowpass = 0;
	static float C_A = 0.0177;
	Accel = (velocity_mm - LastVelo)/0.001;	//pulse/s^2
 8002b94:	4b22      	ldr	r3, [pc, #136]	; (8002c20 <AccelerationApprox+0x90>)
 8002b96:	ed93 7a00 	vldr	s14, [r3]
 8002b9a:	4b22      	ldr	r3, [pc, #136]	; (8002c24 <AccelerationApprox+0x94>)
 8002b9c:	edd3 7a00 	vldr	s15, [r3]
 8002ba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ba4:	ee17 0a90 	vmov	r0, s15
 8002ba8:	f7fd fcd6 	bl	8000558 <__aeabi_f2d>
 8002bac:	a31a      	add	r3, pc, #104	; (adr r3, 8002c18 <AccelerationApprox+0x88>)
 8002bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb2:	f7fd fe53 	bl	800085c <__aeabi_ddiv>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	460b      	mov	r3, r1
 8002bba:	4610      	mov	r0, r2
 8002bbc:	4619      	mov	r1, r3
 8002bbe:	f7fe f81b 	bl	8000bf8 <__aeabi_d2f>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	4a18      	ldr	r2, [pc, #96]	; (8002c28 <AccelerationApprox+0x98>)
 8002bc6:	6013      	str	r3, [r2, #0]
	LastVelo = velocity_mm;
 8002bc8:	4b15      	ldr	r3, [pc, #84]	; (8002c20 <AccelerationApprox+0x90>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a15      	ldr	r2, [pc, #84]	; (8002c24 <AccelerationApprox+0x94>)
 8002bce:	6013      	str	r3, [r2, #0]

	Accel_lowpass = C_A*Accel + (1-C_A)*Accel_last;
 8002bd0:	4b16      	ldr	r3, [pc, #88]	; (8002c2c <AccelerationApprox+0x9c>)
 8002bd2:	ed93 7a00 	vldr	s14, [r3]
 8002bd6:	4b14      	ldr	r3, [pc, #80]	; (8002c28 <AccelerationApprox+0x98>)
 8002bd8:	edd3 7a00 	vldr	s15, [r3]
 8002bdc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be0:	4b12      	ldr	r3, [pc, #72]	; (8002c2c <AccelerationApprox+0x9c>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002bea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002bee:	4b10      	ldr	r3, [pc, #64]	; (8002c30 <AccelerationApprox+0xa0>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002bf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bfc:	4b0d      	ldr	r3, [pc, #52]	; (8002c34 <AccelerationApprox+0xa4>)
 8002bfe:	edc3 7a00 	vstr	s15, [r3]
	Accel_last = Accel_lowpass;
 8002c02:	4b0c      	ldr	r3, [pc, #48]	; (8002c34 <AccelerationApprox+0xa4>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	4a0a      	ldr	r2, [pc, #40]	; (8002c30 <AccelerationApprox+0xa0>)
 8002c08:	6013      	str	r3, [r2, #0]

	Accel_mm = Accel_lowpass; //mm/s^2
 8002c0a:	4b0a      	ldr	r3, [pc, #40]	; (8002c34 <AccelerationApprox+0xa4>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a0a      	ldr	r2, [pc, #40]	; (8002c38 <AccelerationApprox+0xa8>)
 8002c10:	6013      	str	r3, [r2, #0]
}
 8002c12:	bf00      	nop
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	bf00      	nop
 8002c18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c1c:	3f50624d 	.word	0x3f50624d
 8002c20:	200009e4 	.word	0x200009e4
 8002c24:	20001120 	.word	0x20001120
 8002c28:	200009e8 	.word	0x200009e8
 8002c2c:	20000254 	.word	0x20000254
 8002c30:	20001124 	.word	0x20001124
 8002c34:	20001128 	.word	0x20001128
 8002c38:	200009ec 	.word	0x200009ec
 8002c3c:	00000000 	.word	0x00000000

08002c40 <Routine>:

void Routine()
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
	position_f = position;
 8002c44:	4b28      	ldr	r3, [pc, #160]	; (8002ce8 <Routine+0xa8>)
 8002c46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c4a:	ee07 3a90 	vmov	s15, r3
 8002c4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c52:	4b26      	ldr	r3, [pc, #152]	; (8002cec <Routine+0xac>)
 8002c54:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002c58:	4b24      	ldr	r3, [pc, #144]	; (8002cec <Routine+0xac>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	f7fd fc7b 	bl	8000558 <__aeabi_f2d>
 8002c62:	a31f      	add	r3, pc, #124	; (adr r3, 8002ce0 <Routine+0xa0>)
 8002c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c68:	f7fd fcce 	bl	8000608 <__aeabi_dmul>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4610      	mov	r0, r2
 8002c72:	4619      	mov	r1, r3
 8002c74:	f7fd ff78 	bl	8000b68 <__aeabi_d2iz>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	b21a      	sxth	r2, r3
 8002c7c:	4b1c      	ldr	r3, [pc, #112]	; (8002cf0 <Routine+0xb0>)
 8002c7e:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <Routine+0xb0>)
 8002c82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c86:	b29a      	uxth	r2, r3
 8002c88:	4b1a      	ldr	r3, [pc, #104]	; (8002cf4 <Routine+0xb4>)
 8002c8a:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 8002c8c:	4b1a      	ldr	r3, [pc, #104]	; (8002cf8 <Routine+0xb8>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7fd fc61 	bl	8000558 <__aeabi_f2d>
 8002c96:	a312      	add	r3, pc, #72	; (adr r3, 8002ce0 <Routine+0xa0>)
 8002c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c9c:	f7fd fcb4 	bl	8000608 <__aeabi_dmul>
 8002ca0:	4602      	mov	r2, r0
 8002ca2:	460b      	mov	r3, r1
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f7fd ff86 	bl	8000bb8 <__aeabi_d2uiz>
 8002cac:	4603      	mov	r3, r0
 8002cae:	b29a      	uxth	r2, r3
 8002cb0:	4b10      	ldr	r3, [pc, #64]	; (8002cf4 <Routine+0xb4>)
 8002cb2:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 8002cb4:	4b11      	ldr	r3, [pc, #68]	; (8002cfc <Routine+0xbc>)
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7fd fc4d 	bl	8000558 <__aeabi_f2d>
 8002cbe:	a308      	add	r3, pc, #32	; (adr r3, 8002ce0 <Routine+0xa0>)
 8002cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc4:	f7fd fca0 	bl	8000608 <__aeabi_dmul>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	460b      	mov	r3, r1
 8002ccc:	4610      	mov	r0, r2
 8002cce:	4619      	mov	r1, r3
 8002cd0:	f7fd ff72 	bl	8000bb8 <__aeabi_d2uiz>
 8002cd4:	4603      	mov	r3, r0
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	4b06      	ldr	r3, [pc, #24]	; (8002cf4 <Routine+0xb4>)
 8002cda:	84da      	strh	r2, [r3, #38]	; 0x26
}
 8002cdc:	bf00      	nop
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	cccccccd 	.word	0xcccccccd
 8002ce4:	3fdccccc 	.word	0x3fdccccc
 8002ce8:	200009b8 	.word	0x200009b8
 8002cec:	200009c0 	.word	0x200009c0
 8002cf0:	200009c4 	.word	0x200009c4
 8002cf4:	2000101c 	.word	0x2000101c
 8002cf8:	200009e0 	.word	0x200009e0
 8002cfc:	200009e8 	.word	0x200009e8

08002d00 <PIDcal>:

float PIDcal()
{
 8002d00:	b480      	push	{r7}
 8002d02:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002d04:	4b3d      	ldr	r3, [pc, #244]	; (8002dfc <PIDcal+0xfc>)
 8002d06:	ed93 7a00 	vldr	s14, [r3]
 8002d0a:	4b3d      	ldr	r3, [pc, #244]	; (8002e00 <PIDcal+0x100>)
 8002d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d10:	ee07 3a90 	vmov	s15, r3
 8002d14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d18:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d1c:	4b39      	ldr	r3, [pc, #228]	; (8002e04 <PIDcal+0x104>)
 8002d1e:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002d22:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <PIDcal+0x104>)
 8002d24:	edd3 7a00 	vldr	s15, [r3]
 8002d28:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	db0a      	blt.n	8002d4c <PIDcal+0x4c>
	{
		errorposition += 22;
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <PIDcal+0x104>)
 8002d38:	edd3 7a00 	vldr	s15, [r3]
 8002d3c:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002d40:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002d44:	4b2f      	ldr	r3, [pc, #188]	; (8002e04 <PIDcal+0x104>)
 8002d46:	edc3 7a00 	vstr	s15, [r3]
 8002d4a:	e013      	b.n	8002d74 <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002d4c:	4b2d      	ldr	r3, [pc, #180]	; (8002e04 <PIDcal+0x104>)
 8002d4e:	edd3 7a00 	vldr	s15, [r3]
 8002d52:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002d56:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d5e:	d809      	bhi.n	8002d74 <PIDcal+0x74>
	{
		errorposition -= 22;
 8002d60:	4b28      	ldr	r3, [pc, #160]	; (8002e04 <PIDcal+0x104>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002d6a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002d6e:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <PIDcal+0x104>)
 8002d70:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002d74:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <PIDcal+0x108>)
 8002d76:	ed93 7a00 	vldr	s14, [r3]
 8002d7a:	4b22      	ldr	r3, [pc, #136]	; (8002e04 <PIDcal+0x104>)
 8002d7c:	edd3 7a00 	vldr	s15, [r3]
 8002d80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d84:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <PIDcal+0x108>)
 8002d86:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002d8a:	4b1e      	ldr	r3, [pc, #120]	; (8002e04 <PIDcal+0x104>)
 8002d8c:	ed93 7a00 	vldr	s14, [r3]
 8002d90:	4b1e      	ldr	r3, [pc, #120]	; (8002e0c <PIDcal+0x10c>)
 8002d92:	edd3 7a00 	vldr	s15, [r3]
 8002d96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9a:	4b1d      	ldr	r3, [pc, #116]	; (8002e10 <PIDcal+0x110>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002da0:	4b1c      	ldr	r3, [pc, #112]	; (8002e14 <PIDcal+0x114>)
 8002da2:	ed93 7a00 	vldr	s14, [r3]
 8002da6:	4b17      	ldr	r3, [pc, #92]	; (8002e04 <PIDcal+0x104>)
 8002da8:	edd3 7a00 	vldr	s15, [r3]
 8002dac:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002db0:	4b19      	ldr	r3, [pc, #100]	; (8002e18 <PIDcal+0x118>)
 8002db2:	edd3 6a00 	vldr	s13, [r3]
 8002db6:	4b14      	ldr	r3, [pc, #80]	; (8002e08 <PIDcal+0x108>)
 8002db8:	edd3 7a00 	vldr	s15, [r3]
 8002dbc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dc0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002dc4:	4b15      	ldr	r3, [pc, #84]	; (8002e1c <PIDcal+0x11c>)
 8002dc6:	edd3 6a00 	vldr	s13, [r3]
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <PIDcal+0x110>)
 8002dcc:	edd3 7a00 	vldr	s15, [r3]
 8002dd0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002dd4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002dd8:	4b11      	ldr	r3, [pc, #68]	; (8002e20 <PIDcal+0x120>)
 8002dda:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002dde:	4b09      	ldr	r3, [pc, #36]	; (8002e04 <PIDcal+0x104>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a0a      	ldr	r2, [pc, #40]	; (8002e0c <PIDcal+0x10c>)
 8002de4:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002de6:	4b0e      	ldr	r3, [pc, #56]	; (8002e20 <PIDcal+0x120>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	ee07 3a90 	vmov	s15, r3
}
 8002dee:	eeb0 0a67 	vmov.f32	s0, s15
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	200009c8 	.word	0x200009c8
 8002e00:	200009b8 	.word	0x200009b8
 8002e04:	200009cc 	.word	0x200009cc
 8002e08:	200009d8 	.word	0x200009d8
 8002e0c:	200009d4 	.word	0x200009d4
 8002e10:	200009dc 	.word	0x200009dc
 8002e14:	20000218 	.word	0x20000218
 8002e18:	2000021c 	.word	0x2000021c
 8002e1c:	20000220 	.word	0x20000220
 8002e20:	200009d0 	.word	0x200009d0

08002e24 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	4875      	ldr	r0, [pc, #468]	; (8003000 <JoystickPinUpdate+0x1dc>)
 8002e2c:	f003 feae 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002e30:	4603      	mov	r3, r0
 8002e32:	461a      	mov	r2, r3
 8002e34:	4b73      	ldr	r3, [pc, #460]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e36:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002e38:	4b72      	ldr	r3, [pc, #456]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d107      	bne.n	8002e50 <JoystickPinUpdate+0x2c>
 8002e40:	4b70      	ldr	r3, [pc, #448]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d103      	bne.n	8002e50 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002e48:	4b6e      	ldr	r3, [pc, #440]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	e002      	b.n	8002e56 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e52:	2200      	movs	r2, #0
 8002e54:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002e56:	4b6b      	ldr	r3, [pc, #428]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	4a6a      	ldr	r2, [pc, #424]	; (8003004 <JoystickPinUpdate+0x1e0>)
 8002e5c:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002e5e:	2120      	movs	r1, #32
 8002e60:	4869      	ldr	r0, [pc, #420]	; (8003008 <JoystickPinUpdate+0x1e4>)
 8002e62:	f003 fe93 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002e66:	4603      	mov	r3, r0
 8002e68:	461a      	mov	r2, r3
 8002e6a:	4b68      	ldr	r3, [pc, #416]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e6c:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002e6e:	4b67      	ldr	r3, [pc, #412]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b01      	cmp	r3, #1
 8002e74:	d107      	bne.n	8002e86 <JoystickPinUpdate+0x62>
 8002e76:	4b65      	ldr	r3, [pc, #404]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d103      	bne.n	8002e86 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002e7e:	4b63      	ldr	r3, [pc, #396]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	609a      	str	r2, [r3, #8]
 8002e84:	e002      	b.n	8002e8c <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002e86:	4b61      	ldr	r3, [pc, #388]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002e8c:	4b5f      	ldr	r3, [pc, #380]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4a5e      	ldr	r2, [pc, #376]	; (800300c <JoystickPinUpdate+0x1e8>)
 8002e92:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002e94:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002e98:	485b      	ldr	r0, [pc, #364]	; (8003008 <JoystickPinUpdate+0x1e4>)
 8002e9a:	f003 fe77 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002ea4:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002ea6:	4b5a      	ldr	r3, [pc, #360]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d107      	bne.n	8002ebe <JoystickPinUpdate+0x9a>
 8002eae:	4b58      	ldr	r3, [pc, #352]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d103      	bne.n	8002ebe <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002eb6:	4b56      	ldr	r3, [pc, #344]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002eb8:	2201      	movs	r2, #1
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	e002      	b.n	8002ec4 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002ebe:	4b54      	ldr	r3, [pc, #336]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002ec4:	4b52      	ldr	r3, [pc, #328]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	4a51      	ldr	r2, [pc, #324]	; (8003010 <JoystickPinUpdate+0x1ec>)
 8002eca:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002ecc:	2120      	movs	r1, #32
 8002ece:	484c      	ldr	r0, [pc, #304]	; (8003000 <JoystickPinUpdate+0x1dc>)
 8002ed0:	f003 fe5c 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	461a      	mov	r2, r3
 8002ed8:	4b4e      	ldr	r3, [pc, #312]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002eda:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002edc:	4b4d      	ldr	r3, [pc, #308]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <JoystickPinUpdate+0xd0>
 8002ee4:	4b4b      	ldr	r3, [pc, #300]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d103      	bne.n	8002ef4 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002eec:	4b49      	ldr	r3, [pc, #292]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002eee:	2201      	movs	r2, #1
 8002ef0:	609a      	str	r2, [r3, #8]
 8002ef2:	e002      	b.n	8002efa <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002ef4:	4b47      	ldr	r3, [pc, #284]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002efa:	4b46      	ldr	r3, [pc, #280]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	4a45      	ldr	r2, [pc, #276]	; (8003014 <JoystickPinUpdate+0x1f0>)
 8002f00:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002f02:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002f06:	483e      	ldr	r0, [pc, #248]	; (8003000 <JoystickPinUpdate+0x1dc>)
 8002f08:	f003 fe40 	bl	8006b8c <HAL_GPIO_ReadPin>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	461a      	mov	r2, r3
 8002f10:	4b41      	ldr	r3, [pc, #260]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f12:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002f14:	4b40      	ldr	r3, [pc, #256]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d107      	bne.n	8002f2c <JoystickPinUpdate+0x108>
 8002f1c:	4b3e      	ldr	r3, [pc, #248]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d103      	bne.n	8002f2c <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002f24:	4b3c      	ldr	r3, [pc, #240]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f26:	2201      	movs	r2, #1
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	e002      	b.n	8002f32 <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002f2c:	4b3a      	ldr	r3, [pc, #232]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	4a38      	ldr	r2, [pc, #224]	; (8003018 <JoystickPinUpdate+0x1f4>)
 8002f38:	6013      	str	r3, [r2, #0]

	  LaserUI.current = registerFrame[2].U16;
 8002f3a:	4b38      	ldr	r3, [pc, #224]	; (800301c <JoystickPinUpdate+0x1f8>)
 8002f3c:	889b      	ldrh	r3, [r3, #4]
 8002f3e:	461a      	mov	r2, r3
 8002f40:	4b37      	ldr	r3, [pc, #220]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f42:	605a      	str	r2, [r3, #4]
	  if (LaserUI.last == 0 && LaserUI.current == 1)
 8002f44:	4b36      	ldr	r3, [pc, #216]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d107      	bne.n	8002f5c <JoystickPinUpdate+0x138>
 8002f4c:	4b34      	ldr	r3, [pc, #208]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d103      	bne.n	8002f5c <JoystickPinUpdate+0x138>
	  {
		  LaserUI.flag = 1;	//Rising Edge
 8002f54:	4b32      	ldr	r3, [pc, #200]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	609a      	str	r2, [r3, #8]
 8002f5a:	e00e      	b.n	8002f7a <JoystickPinUpdate+0x156>
	  }
	  else if(LaserUI.last == 1 && LaserUI.current == 0)
 8002f5c:	4b30      	ldr	r3, [pc, #192]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d107      	bne.n	8002f74 <JoystickPinUpdate+0x150>
 8002f64:	4b2e      	ldr	r3, [pc, #184]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d103      	bne.n	8002f74 <JoystickPinUpdate+0x150>
	  {
		  LaserUI.flag = 2;	//Falling Edge
 8002f6c:	4b2c      	ldr	r3, [pc, #176]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f6e:	2202      	movs	r2, #2
 8002f70:	609a      	str	r2, [r3, #8]
 8002f72:	e002      	b.n	8002f7a <JoystickPinUpdate+0x156>
	  }
	  else
	  {
		  LaserUI.flag = 0;
 8002f74:	4b2a      	ldr	r3, [pc, #168]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f76:	2200      	movs	r2, #0
 8002f78:	609a      	str	r2, [r3, #8]
	  }
	  LaserUI.last = LaserUI.current;
 8002f7a:	4b29      	ldr	r3, [pc, #164]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	4a28      	ldr	r2, [pc, #160]	; (8003020 <JoystickPinUpdate+0x1fc>)
 8002f80:	6013      	str	r3, [r2, #0]

	  GripperUI.current = registerFrame[2].U16;
 8002f82:	4b26      	ldr	r3, [pc, #152]	; (800301c <JoystickPinUpdate+0x1f8>)
 8002f84:	889b      	ldrh	r3, [r3, #4]
 8002f86:	461a      	mov	r2, r3
 8002f88:	4b26      	ldr	r3, [pc, #152]	; (8003024 <JoystickPinUpdate+0x200>)
 8002f8a:	605a      	str	r2, [r3, #4]
	  if (GripperUI.last == 0 && GripperUI.current == 2)
 8002f8c:	4b25      	ldr	r3, [pc, #148]	; (8003024 <JoystickPinUpdate+0x200>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d107      	bne.n	8002fa4 <JoystickPinUpdate+0x180>
 8002f94:	4b23      	ldr	r3, [pc, #140]	; (8003024 <JoystickPinUpdate+0x200>)
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d103      	bne.n	8002fa4 <JoystickPinUpdate+0x180>
	  {
		  GripperUI.flag = 1; //Gripper On
 8002f9c:	4b21      	ldr	r3, [pc, #132]	; (8003024 <JoystickPinUpdate+0x200>)
 8002f9e:	2201      	movs	r2, #1
 8002fa0:	609a      	str	r2, [r3, #8]
 8002fa2:	e026      	b.n	8002ff2 <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 0)
 8002fa4:	4b1f      	ldr	r3, [pc, #124]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d107      	bne.n	8002fbc <JoystickPinUpdate+0x198>
 8002fac:	4b1d      	ldr	r3, [pc, #116]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fae:	685b      	ldr	r3, [r3, #4]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d103      	bne.n	8002fbc <JoystickPinUpdate+0x198>
	  {
		  GripperUI.flag = 2; //Gripper Off
 8002fb4:	4b1b      	ldr	r3, [pc, #108]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fb6:	2202      	movs	r2, #2
 8002fb8:	609a      	str	r2, [r3, #8]
 8002fba:	e01a      	b.n	8002ff2 <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 6)
 8002fbc:	4b19      	ldr	r3, [pc, #100]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d107      	bne.n	8002fd4 <JoystickPinUpdate+0x1b0>
 8002fc4:	4b17      	ldr	r3, [pc, #92]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d103      	bne.n	8002fd4 <JoystickPinUpdate+0x1b0>
	  {
		  GripperUI.flag = 3; //Gripper Pick
 8002fcc:	4b15      	ldr	r3, [pc, #84]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fce:	2203      	movs	r2, #3
 8002fd0:	609a      	str	r2, [r3, #8]
 8002fd2:	e00e      	b.n	8002ff2 <JoystickPinUpdate+0x1ce>
	  }
	  else if(GripperUI.last == 2 && GripperUI.current == 10)
 8002fd4:	4b13      	ldr	r3, [pc, #76]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b02      	cmp	r3, #2
 8002fda:	d107      	bne.n	8002fec <JoystickPinUpdate+0x1c8>
 8002fdc:	4b11      	ldr	r3, [pc, #68]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	2b0a      	cmp	r3, #10
 8002fe2:	d103      	bne.n	8002fec <JoystickPinUpdate+0x1c8>
	  {
		  GripperUI.flag = 4; //Gripper Place
 8002fe4:	4b0f      	ldr	r3, [pc, #60]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fe6:	2204      	movs	r2, #4
 8002fe8:	609a      	str	r2, [r3, #8]
 8002fea:	e002      	b.n	8002ff2 <JoystickPinUpdate+0x1ce>
	  }
	  else
	  {
		  GripperUI.flag = 0;
 8002fec:	4b0d      	ldr	r3, [pc, #52]	; (8003024 <JoystickPinUpdate+0x200>)
 8002fee:	2200      	movs	r2, #0
 8002ff0:	609a      	str	r2, [r3, #8]
	  }
	  GripperUI.last = GripperUI.current;
 8002ff2:	4b0c      	ldr	r3, [pc, #48]	; (8003024 <JoystickPinUpdate+0x200>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a0b      	ldr	r2, [pc, #44]	; (8003024 <JoystickPinUpdate+0x200>)
 8002ff8:	6013      	str	r3, [r2, #0]
}
 8002ffa:	bf00      	nop
 8002ffc:	bd80      	pop	{r7, pc}
 8002ffe:	bf00      	nop
 8003000:	40020400 	.word	0x40020400
 8003004:	20000ac8 	.word	0x20000ac8
 8003008:	40020000 	.word	0x40020000
 800300c:	20000ad4 	.word	0x20000ad4
 8003010:	20000ae0 	.word	0x20000ae0
 8003014:	20000aec 	.word	0x20000aec
 8003018:	20000af8 	.word	0x20000af8
 800301c:	2000101c 	.word	0x2000101c
 8003020:	20000b04 	.word	0x20000b04
 8003024:	20000b10 	.word	0x20000b10

08003028 <JoystickControl>:

void JoystickControl()
{
 8003028:	b580      	push	{r7, lr}
 800302a:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <JoystickControl+0x180>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d106      	bne.n	8003042 <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8003034:	4b5d      	ldr	r3, [pc, #372]	; (80031ac <JoystickControl+0x184>)
 8003036:	2200      	movs	r2, #0
 8003038:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <JoystickControl+0x180>)
 800303c:	2200      	movs	r2, #0
 800303e:	609a      	str	r2, [r3, #8]
 8003040:	e014      	b.n	800306c <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8003042:	4b5b      	ldr	r3, [pc, #364]	; (80031b0 <JoystickControl+0x188>)
 8003044:	689b      	ldr	r3, [r3, #8]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d106      	bne.n	8003058 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 800304a:	4b58      	ldr	r3, [pc, #352]	; (80031ac <JoystickControl+0x184>)
 800304c:	2201      	movs	r2, #1
 800304e:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8003050:	4b57      	ldr	r3, [pc, #348]	; (80031b0 <JoystickControl+0x188>)
 8003052:	2200      	movs	r2, #0
 8003054:	609a      	str	r2, [r3, #8]
 8003056:	e009      	b.n	800306c <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8003058:	4b56      	ldr	r3, [pc, #344]	; (80031b4 <JoystickControl+0x18c>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d105      	bne.n	800306c <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8003060:	4b52      	ldr	r3, [pc, #328]	; (80031ac <JoystickControl+0x184>)
 8003062:	2202      	movs	r2, #2
 8003064:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8003066:	4b53      	ldr	r3, [pc, #332]	; (80031b4 <JoystickControl+0x18c>)
 8003068:	2200      	movs	r2, #0
 800306a:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 800306c:	4b4f      	ldr	r3, [pc, #316]	; (80031ac <JoystickControl+0x184>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2b02      	cmp	r3, #2
 8003072:	f000 808a 	beq.w	800318a <JoystickControl+0x162>
 8003076:	2b02      	cmp	r3, #2
 8003078:	f300 8093 	bgt.w	80031a2 <JoystickControl+0x17a>
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <JoystickControl+0x5e>
 8003080:	2b01      	cmp	r3, #1
 8003082:	d041      	beq.n	8003108 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8003084:	e08d      	b.n	80031a2 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8003086:	4b4c      	ldr	r3, [pc, #304]	; (80031b8 <JoystickControl+0x190>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800308e:	4293      	cmp	r3, r2
 8003090:	dd09      	ble.n	80030a6 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8003092:	4b4a      	ldr	r3, [pc, #296]	; (80031bc <JoystickControl+0x194>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	2200      	movs	r2, #0
 8003098:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 800309a:	4b48      	ldr	r3, [pc, #288]	; (80031bc <JoystickControl+0x194>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f643 2298 	movw	r2, #15000	; 0x3a98
 80030a2:	635a      	str	r2, [r3, #52]	; 0x34
 80030a4:	e016      	b.n	80030d4 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 80030a6:	4b44      	ldr	r3, [pc, #272]	; (80031b8 <JoystickControl+0x190>)
 80030a8:	685b      	ldr	r3, [r3, #4]
 80030aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030ae:	da09      	bge.n	80030c4 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 80030b0:	4b42      	ldr	r3, [pc, #264]	; (80031bc <JoystickControl+0x194>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80030b8:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80030ba:	4b40      	ldr	r3, [pc, #256]	; (80031bc <JoystickControl+0x194>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2200      	movs	r2, #0
 80030c0:	635a      	str	r2, [r3, #52]	; 0x34
 80030c2:	e007      	b.n	80030d4 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80030c4:	4b3d      	ldr	r3, [pc, #244]	; (80031bc <JoystickControl+0x194>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	2200      	movs	r2, #0
 80030ca:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80030cc:	4b3b      	ldr	r3, [pc, #236]	; (80031bc <JoystickControl+0x194>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2200      	movs	r2, #0
 80030d2:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 80030d4:	4b38      	ldr	r3, [pc, #224]	; (80031b8 <JoystickControl+0x190>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80030dc:	4293      	cmp	r3, r2
 80030de:	dd04      	ble.n	80030ea <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 80030e0:	4b37      	ldr	r3, [pc, #220]	; (80031c0 <JoystickControl+0x198>)
 80030e2:	2204      	movs	r2, #4
 80030e4:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80030e8:	e05b      	b.n	80031a2 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 80030ea:	4b33      	ldr	r3, [pc, #204]	; (80031b8 <JoystickControl+0x190>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80030f2:	da04      	bge.n	80030fe <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 80030f4:	4b32      	ldr	r3, [pc, #200]	; (80031c0 <JoystickControl+0x198>)
 80030f6:	2208      	movs	r2, #8
 80030f8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 80030fc:	e051      	b.n	80031a2 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 80030fe:	4b30      	ldr	r3, [pc, #192]	; (80031c0 <JoystickControl+0x198>)
 8003100:	2200      	movs	r2, #0
 8003102:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8003106:	e04c      	b.n	80031a2 <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8003108:	4b2b      	ldr	r3, [pc, #172]	; (80031b8 <JoystickControl+0x190>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8003110:	4293      	cmp	r3, r2
 8003112:	dd09      	ble.n	8003128 <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8003114:	4b29      	ldr	r3, [pc, #164]	; (80031bc <JoystickControl+0x194>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	2200      	movs	r2, #0
 800311a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,7000);
 800311c:	4b27      	ldr	r3, [pc, #156]	; (80031bc <JoystickControl+0x194>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	f641 3258 	movw	r2, #7000	; 0x1b58
 8003124:	635a      	str	r2, [r3, #52]	; 0x34
 8003126:	e016      	b.n	8003156 <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8003128:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <JoystickControl+0x190>)
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003130:	da09      	bge.n	8003146 <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,7000);
 8003132:	4b22      	ldr	r3, [pc, #136]	; (80031bc <JoystickControl+0x194>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f641 3258 	movw	r2, #7000	; 0x1b58
 800313a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800313c:	4b1f      	ldr	r3, [pc, #124]	; (80031bc <JoystickControl+0x194>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2200      	movs	r2, #0
 8003142:	635a      	str	r2, [r3, #52]	; 0x34
 8003144:	e007      	b.n	8003156 <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <JoystickControl+0x194>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2200      	movs	r2, #0
 800314c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 800314e:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <JoystickControl+0x194>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	2200      	movs	r2, #0
 8003154:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8003156:	4b18      	ldr	r3, [pc, #96]	; (80031b8 <JoystickControl+0x190>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800315e:	4293      	cmp	r3, r2
 8003160:	dd04      	ble.n	800316c <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8003162:	4b17      	ldr	r3, [pc, #92]	; (80031c0 <JoystickControl+0x198>)
 8003164:	2204      	movs	r2, #4
 8003166:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800316a:	e01a      	b.n	80031a2 <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 800316c:	4b12      	ldr	r3, [pc, #72]	; (80031b8 <JoystickControl+0x190>)
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003174:	da04      	bge.n	8003180 <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8003176:	4b12      	ldr	r3, [pc, #72]	; (80031c0 <JoystickControl+0x198>)
 8003178:	2208      	movs	r2, #8
 800317a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 800317e:	e010      	b.n	80031a2 <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8003180:	4b0f      	ldr	r3, [pc, #60]	; (80031c0 <JoystickControl+0x198>)
 8003182:	2200      	movs	r2, #0
 8003184:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8003188:	e00b      	b.n	80031a2 <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800318a:	4b0c      	ldr	r3, [pc, #48]	; (80031bc <JoystickControl+0x194>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2200      	movs	r2, #0
 8003190:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8003192:	4b0a      	ldr	r3, [pc, #40]	; (80031bc <JoystickControl+0x194>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f242 7210 	movw	r2, #10000	; 0x2710
 800319a:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 800319c:	f7ff fabe 	bl	800271c <Homing>
		break;
 80031a0:	bf00      	nop
}
 80031a2:	bf00      	nop
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	20000aec 	.word	0x20000aec
 80031ac:	20000b30 	.word	0x20000b30
 80031b0:	20000ae0 	.word	0x20000ae0
 80031b4:	20000af8 	.word	0x20000af8
 80031b8:	20000b28 	.word	0x20000b28
 80031bc:	20000554 	.word	0x20000554
 80031c0:	2000101c 	.word	0x2000101c
 80031c4:	00000000 	.word	0x00000000

080031c8 <JoystickLocationState>:

void JoystickLocationState()
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	ed2d 8b02 	vpush	{d8}
 80031ce:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 80031d0:	4b61      	ldr	r3, [pc, #388]	; (8003358 <JoystickLocationState+0x190>)
 80031d2:	885b      	ldrh	r3, [r3, #2]
 80031d4:	2b01      	cmp	r3, #1
 80031d6:	d114      	bne.n	8003202 <JoystickLocationState+0x3a>
	{
		registerFrame[1].U16 = 0;
 80031d8:	4b5f      	ldr	r3, [pc, #380]	; (8003358 <JoystickLocationState+0x190>)
 80031da:	2200      	movs	r2, #0
 80031dc:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 80031de:	4b5e      	ldr	r3, [pc, #376]	; (8003358 <JoystickLocationState+0x190>)
 80031e0:	2201      	movs	r2, #1
 80031e2:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 80031e4:	4b5d      	ldr	r3, [pc, #372]	; (800335c <JoystickLocationState+0x194>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 80031ea:	4b5b      	ldr	r3, [pc, #364]	; (8003358 <JoystickLocationState+0x190>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 80031f0:	4b5b      	ldr	r3, [pc, #364]	; (8003360 <JoystickLocationState+0x198>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 80031f6:	f7ff faf1 	bl	80027dc <EndEffectorWrite>
		state = 1;					//Go Pick state
 80031fa:	4b5a      	ldr	r3, [pc, #360]	; (8003364 <JoystickLocationState+0x19c>)
 80031fc:	2201      	movs	r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e00f      	b.n	8003222 <JoystickLocationState+0x5a>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8003202:	4b55      	ldr	r3, [pc, #340]	; (8003358 <JoystickLocationState+0x190>)
 8003204:	885b      	ldrh	r3, [r3, #2]
 8003206:	2b02      	cmp	r3, #2
 8003208:	d10b      	bne.n	8003222 <JoystickLocationState+0x5a>
	{
		registerFrame[1].U16 = 0;
 800320a:	4b53      	ldr	r3, [pc, #332]	; (8003358 <JoystickLocationState+0x190>)
 800320c:	2200      	movs	r2, #0
 800320e:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8003210:	4b51      	ldr	r3, [pc, #324]	; (8003358 <JoystickLocationState+0x190>)
 8003212:	2202      	movs	r2, #2
 8003214:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 8003216:	4b50      	ldr	r3, [pc, #320]	; (8003358 <JoystickLocationState+0x190>)
 8003218:	2201      	movs	r2, #1
 800321a:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 800321c:	4b51      	ldr	r3, [pc, #324]	; (8003364 <JoystickLocationState+0x19c>)
 800321e:	2203      	movs	r2, #3
 8003220:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8003222:	4b4d      	ldr	r3, [pc, #308]	; (8003358 <JoystickLocationState+0x190>)
 8003224:	885b      	ldrh	r3, [r3, #2]
 8003226:	2b08      	cmp	r3, #8
 8003228:	d102      	bne.n	8003230 <JoystickLocationState+0x68>
	{
		state = 5;
 800322a:	4b4e      	ldr	r3, [pc, #312]	; (8003364 <JoystickLocationState+0x19c>)
 800322c:	2205      	movs	r2, #5
 800322e:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8003230:	4b4c      	ldr	r3, [pc, #304]	; (8003364 <JoystickLocationState+0x19c>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3b01      	subs	r3, #1
 8003236:	2b04      	cmp	r3, #4
 8003238:	f200 8737 	bhi.w	80040aa <JoystickLocationState+0xee2>
 800323c:	a201      	add	r2, pc, #4	; (adr r2, 8003244 <JoystickLocationState+0x7c>)
 800323e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003242:	bf00      	nop
 8003244:	08003259 	.word	0x08003259
 8003248:	0800330d 	.word	0x0800330d
 800324c:	08003931 	.word	0x08003931
 8003250:	08003a41 	.word	0x08003a41
 8003254:	0800403f 	.word	0x0800403f
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <JoystickLocationState+0x1a0>)
 800325a:	f04f 0200 	mov.w	r2, #0
 800325e:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8003260:	4b41      	ldr	r3, [pc, #260]	; (8003368 <JoystickLocationState+0x1a0>)
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8003268:	4b3f      	ldr	r3, [pc, #252]	; (8003368 <JoystickLocationState+0x1a0>)
 800326a:	f04f 0200 	mov.w	r2, #0
 800326e:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8003270:	4b3d      	ldr	r3, [pc, #244]	; (8003368 <JoystickLocationState+0x1a0>)
 8003272:	f04f 0200 	mov.w	r2, #0
 8003276:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8003278:	4b3c      	ldr	r3, [pc, #240]	; (800336c <JoystickLocationState+0x1a4>)
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b01      	cmp	r3, #1
 800327e:	f040 870b 	bne.w	8004098 <JoystickLocationState+0xed0>
		{
			if(registerFrame[68].U16 >= 30000)
 8003282:	4b35      	ldr	r3, [pc, #212]	; (8003358 <JoystickLocationState+0x190>)
 8003284:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003288:	f247 522f 	movw	r2, #29999	; 0x752f
 800328c:	4293      	cmp	r3, r2
 800328e:	d912      	bls.n	80032b6 <JoystickLocationState+0xee>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8003290:	4b31      	ldr	r3, [pc, #196]	; (8003358 <JoystickLocationState+0x190>)
 8003292:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003296:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800329a:	4a35      	ldr	r2, [pc, #212]	; (8003370 <JoystickLocationState+0x1a8>)
 800329c:	fb82 1203 	smull	r1, r2, r2, r3
 80032a0:	1092      	asrs	r2, r2, #2
 80032a2:	17db      	asrs	r3, r3, #31
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ae:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <JoystickLocationState+0x1a0>)
 80032b0:	edc3 7a00 	vstr	s15, [r3]
 80032b4:	e00e      	b.n	80032d4 <JoystickLocationState+0x10c>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 80032b6:	4b28      	ldr	r3, [pc, #160]	; (8003358 <JoystickLocationState+0x190>)
 80032b8:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80032bc:	4a2d      	ldr	r2, [pc, #180]	; (8003374 <JoystickLocationState+0x1ac>)
 80032be:	fba2 2303 	umull	r2, r3, r2, r3
 80032c2:	08db      	lsrs	r3, r3, #3
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	ee07 3a90 	vmov	s15, r3
 80032ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80032ce:	4b26      	ldr	r3, [pc, #152]	; (8003368 <JoystickLocationState+0x1a0>)
 80032d0:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 80032d4:	4b28      	ldr	r3, [pc, #160]	; (8003378 <JoystickLocationState+0x1b0>)
 80032d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f92a 	bl	8000534 <__aeabi_i2d>
 80032e0:	a31b      	add	r3, pc, #108	; (adr r3, 8003350 <JoystickLocationState+0x188>)
 80032e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032e6:	f7fd f98f 	bl	8000608 <__aeabi_dmul>
 80032ea:	4602      	mov	r2, r0
 80032ec:	460b      	mov	r3, r1
 80032ee:	4610      	mov	r0, r2
 80032f0:	4619      	mov	r1, r3
 80032f2:	f7fd fc81 	bl	8000bf8 <__aeabi_d2f>
 80032f6:	4603      	mov	r3, r0
 80032f8:	4a1b      	ldr	r2, [pc, #108]	; (8003368 <JoystickLocationState+0x1a0>)
 80032fa:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 80032fc:	4b1b      	ldr	r3, [pc, #108]	; (800336c <JoystickLocationState+0x1a4>)
 80032fe:	2200      	movs	r2, #0
 8003300:	609a      	str	r2, [r3, #8]
			state = 2;
 8003302:	4b18      	ldr	r3, [pc, #96]	; (8003364 <JoystickLocationState+0x19c>)
 8003304:	2202      	movs	r2, #2
 8003306:	601a      	str	r2, [r3, #0]
		}
		break;
 8003308:	f000 bec6 	b.w	8004098 <JoystickLocationState+0xed0>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 800330c:	4b17      	ldr	r3, [pc, #92]	; (800336c <JoystickLocationState+0x1a4>)
 800330e:	689b      	ldr	r3, [r3, #8]
 8003310:	2b01      	cmp	r3, #1
 8003312:	f040 8301 	bne.w	8003918 <JoystickLocationState+0x750>
		{
			if(registerFrame[68].U16 >= 30000)
 8003316:	4b10      	ldr	r3, [pc, #64]	; (8003358 <JoystickLocationState+0x190>)
 8003318:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800331c:	f247 522f 	movw	r2, #29999	; 0x752f
 8003320:	4293      	cmp	r3, r2
 8003322:	d92b      	bls.n	800337c <JoystickLocationState+0x1b4>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003324:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <JoystickLocationState+0x190>)
 8003326:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800332a:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800332e:	4a10      	ldr	r2, [pc, #64]	; (8003370 <JoystickLocationState+0x1a8>)
 8003330:	fb82 1203 	smull	r1, r2, r2, r3
 8003334:	1092      	asrs	r2, r2, #2
 8003336:	17db      	asrs	r3, r3, #31
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	ee07 3a90 	vmov	s15, r3
 800333e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003342:	4b09      	ldr	r3, [pc, #36]	; (8003368 <JoystickLocationState+0x1a0>)
 8003344:	edc3 7a02 	vstr	s15, [r3, #8]
 8003348:	e027      	b.n	800339a <JoystickLocationState+0x1d2>
 800334a:	bf00      	nop
 800334c:	f3af 8000 	nop.w
 8003350:	70a3d70a 	.word	0x70a3d70a
 8003354:	3fa70a3d 	.word	0x3fa70a3d
 8003358:	2000101c 	.word	0x2000101c
 800335c:	20000b3c 	.word	0x20000b3c
 8003360:	20000b34 	.word	0x20000b34
 8003364:	20000224 	.word	0x20000224
 8003368:	200009f8 	.word	0x200009f8
 800336c:	20000ac8 	.word	0x20000ac8
 8003370:	66666667 	.word	0x66666667
 8003374:	cccccccd 	.word	0xcccccccd
 8003378:	200009b8 	.word	0x200009b8
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm0
 800337c:	4bd6      	ldr	r3, [pc, #856]	; (80036d8 <JoystickLocationState+0x510>)
 800337e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003382:	4ad6      	ldr	r2, [pc, #856]	; (80036dc <JoystickLocationState+0x514>)
 8003384:	fba2 2303 	umull	r2, r3, r2, r3
 8003388:	08db      	lsrs	r3, r3, #3
 800338a:	b29b      	uxth	r3, r3
 800338c:	ee07 3a90 	vmov	s15, r3
 8003390:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003394:	4bd2      	ldr	r3, [pc, #840]	; (80036e0 <JoystickLocationState+0x518>)
 8003396:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 800339a:	4bd2      	ldr	r3, [pc, #840]	; (80036e4 <JoystickLocationState+0x51c>)
 800339c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7fd f8c7 	bl	8000534 <__aeabi_i2d>
 80033a6:	a3ca      	add	r3, pc, #808	; (adr r3, 80036d0 <JoystickLocationState+0x508>)
 80033a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ac:	f7fd f92c 	bl	8000608 <__aeabi_dmul>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4610      	mov	r0, r2
 80033b6:	4619      	mov	r1, r3
 80033b8:	f7fd fc1e 	bl	8000bf8 <__aeabi_d2f>
 80033bc:	4603      	mov	r3, r0
 80033be:	4ac8      	ldr	r2, [pc, #800]	; (80036e0 <JoystickLocationState+0x518>)
 80033c0:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 80033c2:	4bc9      	ldr	r3, [pc, #804]	; (80036e8 <JoystickLocationState+0x520>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 80033c8:	4bc5      	ldr	r3, [pc, #788]	; (80036e0 <JoystickLocationState+0x518>)
 80033ca:	ed93 7a02 	vldr	s14, [r3, #8]
 80033ce:	4bc4      	ldr	r3, [pc, #784]	; (80036e0 <JoystickLocationState+0x518>)
 80033d0:	edd3 7a00 	vldr	s15, [r3]
 80033d4:	ee37 8a67 	vsub.f32	s16, s14, s15
 80033d8:	4bc1      	ldr	r3, [pc, #772]	; (80036e0 <JoystickLocationState+0x518>)
 80033da:	ed93 7a02 	vldr	s14, [r3, #8]
 80033de:	4bc0      	ldr	r3, [pc, #768]	; (80036e0 <JoystickLocationState+0x518>)
 80033e0:	edd3 7a00 	vldr	s15, [r3]
 80033e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80033e8:	4bbd      	ldr	r3, [pc, #756]	; (80036e0 <JoystickLocationState+0x518>)
 80033ea:	edd3 6a02 	vldr	s13, [r3, #8]
 80033ee:	4bbc      	ldr	r3, [pc, #752]	; (80036e0 <JoystickLocationState+0x518>)
 80033f0:	edd3 7a00 	vldr	s15, [r3]
 80033f4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80033f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80033fc:	4bb8      	ldr	r3, [pc, #736]	; (80036e0 <JoystickLocationState+0x518>)
 80033fe:	edd3 6a03 	vldr	s13, [r3, #12]
 8003402:	4bb7      	ldr	r3, [pc, #732]	; (80036e0 <JoystickLocationState+0x518>)
 8003404:	edd3 7a01 	vldr	s15, [r3, #4]
 8003408:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800340c:	4bb4      	ldr	r3, [pc, #720]	; (80036e0 <JoystickLocationState+0x518>)
 800340e:	ed93 6a03 	vldr	s12, [r3, #12]
 8003412:	4bb3      	ldr	r3, [pc, #716]	; (80036e0 <JoystickLocationState+0x518>)
 8003414:	edd3 7a01 	vldr	s15, [r3, #4]
 8003418:	ee76 7a67 	vsub.f32	s15, s12, s15
 800341c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003420:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003424:	eeb0 0a67 	vmov.f32	s0, s15
 8003428:	f00d ff92 	bl	8011350 <sqrtf>
 800342c:	eeb0 7a40 	vmov.f32	s14, s0
 8003430:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003434:	4bad      	ldr	r3, [pc, #692]	; (80036ec <JoystickLocationState+0x524>)
 8003436:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 800343a:	4ba9      	ldr	r3, [pc, #676]	; (80036e0 <JoystickLocationState+0x518>)
 800343c:	ed93 7a03 	vldr	s14, [r3, #12]
 8003440:	4ba7      	ldr	r3, [pc, #668]	; (80036e0 <JoystickLocationState+0x518>)
 8003442:	edd3 7a01 	vldr	s15, [r3, #4]
 8003446:	ee37 8a67 	vsub.f32	s16, s14, s15
 800344a:	4ba5      	ldr	r3, [pc, #660]	; (80036e0 <JoystickLocationState+0x518>)
 800344c:	ed93 7a02 	vldr	s14, [r3, #8]
 8003450:	4ba3      	ldr	r3, [pc, #652]	; (80036e0 <JoystickLocationState+0x518>)
 8003452:	edd3 7a00 	vldr	s15, [r3]
 8003456:	ee37 7a67 	vsub.f32	s14, s14, s15
 800345a:	4ba1      	ldr	r3, [pc, #644]	; (80036e0 <JoystickLocationState+0x518>)
 800345c:	edd3 6a02 	vldr	s13, [r3, #8]
 8003460:	4b9f      	ldr	r3, [pc, #636]	; (80036e0 <JoystickLocationState+0x518>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800346a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800346e:	4b9c      	ldr	r3, [pc, #624]	; (80036e0 <JoystickLocationState+0x518>)
 8003470:	edd3 6a03 	vldr	s13, [r3, #12]
 8003474:	4b9a      	ldr	r3, [pc, #616]	; (80036e0 <JoystickLocationState+0x518>)
 8003476:	edd3 7a01 	vldr	s15, [r3, #4]
 800347a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800347e:	4b98      	ldr	r3, [pc, #608]	; (80036e0 <JoystickLocationState+0x518>)
 8003480:	ed93 6a03 	vldr	s12, [r3, #12]
 8003484:	4b96      	ldr	r3, [pc, #600]	; (80036e0 <JoystickLocationState+0x518>)
 8003486:	edd3 7a01 	vldr	s15, [r3, #4]
 800348a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800348e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003496:	eeb0 0a67 	vmov.f32	s0, s15
 800349a:	f00d ff59 	bl	8011350 <sqrtf>
 800349e:	eeb0 7a40 	vmov.f32	s14, s0
 80034a2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80034a6:	4b92      	ldr	r3, [pc, #584]	; (80036f0 <JoystickLocationState+0x528>)
 80034a8:	edc3 7a00 	vstr	s15, [r3]
			//sin_Theta = sin(angle);

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 80034ac:	4b8f      	ldr	r3, [pc, #572]	; (80036ec <JoystickLocationState+0x524>)
 80034ae:	edd3 7a00 	vldr	s15, [r3]
 80034b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034b6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ba:	4b8d      	ldr	r3, [pc, #564]	; (80036f0 <JoystickLocationState+0x528>)
 80034bc:	edd3 7a00 	vldr	s15, [r3]
 80034c0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80034c4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034cc:	4b84      	ldr	r3, [pc, #528]	; (80036e0 <JoystickLocationState+0x518>)
 80034ce:	edd3 7a00 	vldr	s15, [r3]
 80034d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d6:	4b82      	ldr	r3, [pc, #520]	; (80036e0 <JoystickLocationState+0x518>)
 80034d8:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 80034dc:	4b84      	ldr	r3, [pc, #528]	; (80036f0 <JoystickLocationState+0x528>)
 80034de:	edd3 7a00 	vldr	s15, [r3]
 80034e2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034e6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034ea:	4b80      	ldr	r3, [pc, #512]	; (80036ec <JoystickLocationState+0x524>)
 80034ec:	edd3 7a00 	vldr	s15, [r3]
 80034f0:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80034f4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80034fc:	4b78      	ldr	r3, [pc, #480]	; (80036e0 <JoystickLocationState+0x518>)
 80034fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003502:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003506:	4b76      	ldr	r3, [pc, #472]	; (80036e0 <JoystickLocationState+0x518>)
 8003508:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 800350c:	4b77      	ldr	r3, [pc, #476]	; (80036ec <JoystickLocationState+0x524>)
 800350e:	edd3 7a00 	vldr	s15, [r3]
 8003512:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003516:	ee27 7a87 	vmul.f32	s14, s15, s14
 800351a:	4b75      	ldr	r3, [pc, #468]	; (80036f0 <JoystickLocationState+0x528>)
 800351c:	edd3 7a00 	vldr	s15, [r3]
 8003520:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003524:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800352c:	4b6c      	ldr	r3, [pc, #432]	; (80036e0 <JoystickLocationState+0x518>)
 800352e:	edd3 7a00 	vldr	s15, [r3]
 8003532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003536:	4b6a      	ldr	r3, [pc, #424]	; (80036e0 <JoystickLocationState+0x518>)
 8003538:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 800353c:	4b6c      	ldr	r3, [pc, #432]	; (80036f0 <JoystickLocationState+0x528>)
 800353e:	edd3 7a00 	vldr	s15, [r3]
 8003542:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003546:	ee27 7a87 	vmul.f32	s14, s15, s14
 800354a:	4b68      	ldr	r3, [pc, #416]	; (80036ec <JoystickLocationState+0x524>)
 800354c:	edd3 7a00 	vldr	s15, [r3]
 8003550:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003554:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003558:	ee37 7a27 	vadd.f32	s14, s14, s15
 800355c:	4b60      	ldr	r3, [pc, #384]	; (80036e0 <JoystickLocationState+0x518>)
 800355e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003562:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003566:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <JoystickLocationState+0x518>)
 8003568:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 800356c:	4b5f      	ldr	r3, [pc, #380]	; (80036ec <JoystickLocationState+0x524>)
 800356e:	edd3 7a00 	vldr	s15, [r3]
 8003572:	ed9f 7a60 	vldr	s14, [pc, #384]	; 80036f4 <JoystickLocationState+0x52c>
 8003576:	ee27 7a87 	vmul.f32	s14, s15, s14
 800357a:	4b5d      	ldr	r3, [pc, #372]	; (80036f0 <JoystickLocationState+0x528>)
 800357c:	edd3 7a00 	vldr	s15, [r3]
 8003580:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003584:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003588:	ee37 7a27 	vadd.f32	s14, s14, s15
 800358c:	4b54      	ldr	r3, [pc, #336]	; (80036e0 <JoystickLocationState+0x518>)
 800358e:	edd3 7a00 	vldr	s15, [r3]
 8003592:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <JoystickLocationState+0x518>)
 8003598:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 800359c:	4b54      	ldr	r3, [pc, #336]	; (80036f0 <JoystickLocationState+0x528>)
 800359e:	edd3 7a00 	vldr	s15, [r3]
 80035a2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 80036f4 <JoystickLocationState+0x52c>
 80035a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035aa:	4b50      	ldr	r3, [pc, #320]	; (80036ec <JoystickLocationState+0x524>)
 80035ac:	edd3 7a00 	vldr	s15, [r3]
 80035b0:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80035b4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035bc:	4b48      	ldr	r3, [pc, #288]	; (80036e0 <JoystickLocationState+0x518>)
 80035be:	edd3 7a01 	vldr	s15, [r3, #4]
 80035c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <JoystickLocationState+0x518>)
 80035c8:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 80035cc:	4b47      	ldr	r3, [pc, #284]	; (80036ec <JoystickLocationState+0x524>)
 80035ce:	edd3 7a00 	vldr	s15, [r3]
 80035d2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80035d6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80035da:	4b45      	ldr	r3, [pc, #276]	; (80036f0 <JoystickLocationState+0x528>)
 80035dc:	edd3 7a00 	vldr	s15, [r3]
 80035e0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80035e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80035e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80035ec:	4b3c      	ldr	r3, [pc, #240]	; (80036e0 <JoystickLocationState+0x518>)
 80035ee:	edd3 7a00 	vldr	s15, [r3]
 80035f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <JoystickLocationState+0x518>)
 80035f8:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 80035fc:	4b3c      	ldr	r3, [pc, #240]	; (80036f0 <JoystickLocationState+0x528>)
 80035fe:	edd3 7a00 	vldr	s15, [r3]
 8003602:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003606:	ee27 7a87 	vmul.f32	s14, s15, s14
 800360a:	4b38      	ldr	r3, [pc, #224]	; (80036ec <JoystickLocationState+0x524>)
 800360c:	edd3 7a00 	vldr	s15, [r3]
 8003610:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003614:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003618:	ee37 7a27 	vadd.f32	s14, s14, s15
 800361c:	4b30      	ldr	r3, [pc, #192]	; (80036e0 <JoystickLocationState+0x518>)
 800361e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003622:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003626:	4b2e      	ldr	r3, [pc, #184]	; (80036e0 <JoystickLocationState+0x518>)
 8003628:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 800362c:	4b2f      	ldr	r3, [pc, #188]	; (80036ec <JoystickLocationState+0x524>)
 800362e:	edd3 7a00 	vldr	s15, [r3]
 8003632:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003636:	ee27 7a87 	vmul.f32	s14, s15, s14
 800363a:	4b2d      	ldr	r3, [pc, #180]	; (80036f0 <JoystickLocationState+0x528>)
 800363c:	edd3 7a00 	vldr	s15, [r3]
 8003640:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003644:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003648:	ee37 7a27 	vadd.f32	s14, s14, s15
 800364c:	4b24      	ldr	r3, [pc, #144]	; (80036e0 <JoystickLocationState+0x518>)
 800364e:	edd3 7a00 	vldr	s15, [r3]
 8003652:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003656:	4b22      	ldr	r3, [pc, #136]	; (80036e0 <JoystickLocationState+0x518>)
 8003658:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 800365c:	4b24      	ldr	r3, [pc, #144]	; (80036f0 <JoystickLocationState+0x528>)
 800365e:	edd3 7a00 	vldr	s15, [r3]
 8003662:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003666:	ee27 7a87 	vmul.f32	s14, s15, s14
 800366a:	4b20      	ldr	r3, [pc, #128]	; (80036ec <JoystickLocationState+0x524>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003674:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003678:	ee37 7a27 	vadd.f32	s14, s14, s15
 800367c:	4b18      	ldr	r3, [pc, #96]	; (80036e0 <JoystickLocationState+0x518>)
 800367e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003682:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003686:	4b16      	ldr	r3, [pc, #88]	; (80036e0 <JoystickLocationState+0x518>)
 8003688:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 800368c:	4b17      	ldr	r3, [pc, #92]	; (80036ec <JoystickLocationState+0x524>)
 800368e:	edd3 7a00 	vldr	s15, [r3]
 8003692:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80036f4 <JoystickLocationState+0x52c>
 8003696:	ee27 7a87 	vmul.f32	s14, s15, s14
 800369a:	4b15      	ldr	r3, [pc, #84]	; (80036f0 <JoystickLocationState+0x528>)
 800369c:	edd3 7a00 	vldr	s15, [r3]
 80036a0:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80036a4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80036a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <JoystickLocationState+0x518>)
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80036b6:	4b0a      	ldr	r3, [pc, #40]	; (80036e0 <JoystickLocationState+0x518>)
 80036b8:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 80036bc:	4b0c      	ldr	r3, [pc, #48]	; (80036f0 <JoystickLocationState+0x528>)
 80036be:	edd3 7a00 	vldr	s15, [r3]
 80036c2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80036f4 <JoystickLocationState+0x52c>
 80036c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80036ca:	e015      	b.n	80036f8 <JoystickLocationState+0x530>
 80036cc:	f3af 8000 	nop.w
 80036d0:	70a3d70a 	.word	0x70a3d70a
 80036d4:	3fa70a3d 	.word	0x3fa70a3d
 80036d8:	2000101c 	.word	0x2000101c
 80036dc:	cccccccd 	.word	0xcccccccd
 80036e0:	200009f8 	.word	0x200009f8
 80036e4:	200009b8 	.word	0x200009b8
 80036e8:	20000ac8 	.word	0x20000ac8
 80036ec:	20000ac0 	.word	0x20000ac0
 80036f0:	20000ac4 	.word	0x20000ac4
 80036f4:	42480000 	.word	0x42480000
 80036f8:	4bc3      	ldr	r3, [pc, #780]	; (8003a08 <JoystickLocationState+0x840>)
 80036fa:	edd3 7a00 	vldr	s15, [r3]
 80036fe:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003702:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003706:	ee37 7a27 	vadd.f32	s14, s14, s15
 800370a:	4bc0      	ldr	r3, [pc, #768]	; (8003a0c <JoystickLocationState+0x844>)
 800370c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003710:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003714:	4bbd      	ldr	r3, [pc, #756]	; (8003a0c <JoystickLocationState+0x844>)
 8003716:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 800371a:	4bbb      	ldr	r3, [pc, #748]	; (8003a08 <JoystickLocationState+0x840>)
 800371c:	edd3 7a00 	vldr	s15, [r3]
 8003720:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003724:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003728:	4bb9      	ldr	r3, [pc, #740]	; (8003a10 <JoystickLocationState+0x848>)
 800372a:	edd3 7a00 	vldr	s15, [r3]
 800372e:	eddf 6ab9 	vldr	s13, [pc, #740]	; 8003a14 <JoystickLocationState+0x84c>
 8003732:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003736:	ee37 7a27 	vadd.f32	s14, s14, s15
 800373a:	4bb4      	ldr	r3, [pc, #720]	; (8003a0c <JoystickLocationState+0x844>)
 800373c:	edd3 7a00 	vldr	s15, [r3]
 8003740:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003744:	4bb1      	ldr	r3, [pc, #708]	; (8003a0c <JoystickLocationState+0x844>)
 8003746:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 800374a:	4bb1      	ldr	r3, [pc, #708]	; (8003a10 <JoystickLocationState+0x848>)
 800374c:	edd3 7a00 	vldr	s15, [r3]
 8003750:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003754:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003758:	4bab      	ldr	r3, [pc, #684]	; (8003a08 <JoystickLocationState+0x840>)
 800375a:	edd3 7a00 	vldr	s15, [r3]
 800375e:	eddf 6aae 	vldr	s13, [pc, #696]	; 8003a18 <JoystickLocationState+0x850>
 8003762:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800376a:	4ba8      	ldr	r3, [pc, #672]	; (8003a0c <JoystickLocationState+0x844>)
 800376c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003770:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003774:	4ba5      	ldr	r3, [pc, #660]	; (8003a0c <JoystickLocationState+0x844>)
 8003776:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 800377a:	4ba3      	ldr	r3, [pc, #652]	; (8003a08 <JoystickLocationState+0x840>)
 800377c:	edd3 7a00 	vldr	s15, [r3]
 8003780:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003784:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003788:	4ba1      	ldr	r3, [pc, #644]	; (8003a10 <JoystickLocationState+0x848>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	eddf 6aa1 	vldr	s13, [pc, #644]	; 8003a14 <JoystickLocationState+0x84c>
 8003792:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003796:	ee37 7a27 	vadd.f32	s14, s14, s15
 800379a:	4b9c      	ldr	r3, [pc, #624]	; (8003a0c <JoystickLocationState+0x844>)
 800379c:	edd3 7a00 	vldr	s15, [r3]
 80037a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037a4:	4b99      	ldr	r3, [pc, #612]	; (8003a0c <JoystickLocationState+0x844>)
 80037a6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 80037aa:	4b99      	ldr	r3, [pc, #612]	; (8003a10 <JoystickLocationState+0x848>)
 80037ac:	edd3 7a00 	vldr	s15, [r3]
 80037b0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80037b4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037b8:	4b93      	ldr	r3, [pc, #588]	; (8003a08 <JoystickLocationState+0x840>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	eddf 6a96 	vldr	s13, [pc, #600]	; 8003a18 <JoystickLocationState+0x850>
 80037c2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037c6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037ca:	4b90      	ldr	r3, [pc, #576]	; (8003a0c <JoystickLocationState+0x844>)
 80037cc:	edd3 7a01 	vldr	s15, [r3, #4]
 80037d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037d4:	4b8d      	ldr	r3, [pc, #564]	; (8003a0c <JoystickLocationState+0x844>)
 80037d6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 80037da:	4b8b      	ldr	r3, [pc, #556]	; (8003a08 <JoystickLocationState+0x840>)
 80037dc:	edd3 7a00 	vldr	s15, [r3]
 80037e0:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8003a1c <JoystickLocationState+0x854>
 80037e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80037e8:	4b89      	ldr	r3, [pc, #548]	; (8003a10 <JoystickLocationState+0x848>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	eddf 6a89 	vldr	s13, [pc, #548]	; 8003a14 <JoystickLocationState+0x84c>
 80037f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80037f6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037fa:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <JoystickLocationState+0x844>)
 80037fc:	edd3 7a00 	vldr	s15, [r3]
 8003800:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003804:	4b81      	ldr	r3, [pc, #516]	; (8003a0c <JoystickLocationState+0x844>)
 8003806:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <JoystickLocationState+0x848>)
 800380c:	edd3 7a00 	vldr	s15, [r3]
 8003810:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8003a1c <JoystickLocationState+0x854>
 8003814:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003818:	4b7b      	ldr	r3, [pc, #492]	; (8003a08 <JoystickLocationState+0x840>)
 800381a:	edd3 7a00 	vldr	s15, [r3]
 800381e:	eddf 6a7e 	vldr	s13, [pc, #504]	; 8003a18 <JoystickLocationState+0x850>
 8003822:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003826:	ee37 7a27 	vadd.f32	s14, s14, s15
 800382a:	4b78      	ldr	r3, [pc, #480]	; (8003a0c <JoystickLocationState+0x844>)
 800382c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003830:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003834:	4b75      	ldr	r3, [pc, #468]	; (8003a0c <JoystickLocationState+0x844>)
 8003836:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = (PickTray.L1[0]+(50*sin_Theta))*10;
 800383a:	4b74      	ldr	r3, [pc, #464]	; (8003a0c <JoystickLocationState+0x844>)
 800383c:	ed93 7a00 	vldr	s14, [r3]
 8003840:	4b73      	ldr	r3, [pc, #460]	; (8003a10 <JoystickLocationState+0x848>)
 8003842:	edd3 7a00 	vldr	s15, [r3]
 8003846:	eddf 6a75 	vldr	s13, [pc, #468]	; 8003a1c <JoystickLocationState+0x854>
 800384a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800384e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003852:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003856:	ee67 7a87 	vmul.f32	s15, s15, s14
 800385a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800385e:	ee17 3a90 	vmov	r3, s15
 8003862:	b21a      	sxth	r2, r3
 8003864:	4b69      	ldr	r3, [pc, #420]	; (8003a0c <JoystickLocationState+0x844>)
 8003866:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			PickTray.origin_y = (PickTray.L1[1]-(50*cos_Theta))*10;
 800386a:	4b68      	ldr	r3, [pc, #416]	; (8003a0c <JoystickLocationState+0x844>)
 800386c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003870:	4b65      	ldr	r3, [pc, #404]	; (8003a08 <JoystickLocationState+0x840>)
 8003872:	edd3 7a00 	vldr	s15, [r3]
 8003876:	eddf 6a69 	vldr	s13, [pc, #420]	; 8003a1c <JoystickLocationState+0x854>
 800387a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800387e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003882:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800388a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800388e:	ee17 3a90 	vmov	r3, s15
 8003892:	b21a      	sxth	r2, r3
 8003894:	4b5d      	ldr	r3, [pc, #372]	; (8003a0c <JoystickLocationState+0x844>)
 8003896:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 800389a:	4b5b      	ldr	r3, [pc, #364]	; (8003a08 <JoystickLocationState+0x840>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	eeb0 0a67 	vmov.f32	s0, s15
 80038a4:	f00d fd28 	bl	80112f8 <acosf>
 80038a8:	ee10 3a10 	vmov	r3, s0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7fc fe53 	bl	8000558 <__aeabi_f2d>
 80038b2:	a351      	add	r3, pc, #324	; (adr r3, 80039f8 <JoystickLocationState+0x830>)
 80038b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038b8:	f7fc fea6 	bl	8000608 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f7fd f950 	bl	8000b68 <__aeabi_d2iz>
 80038c8:	4603      	mov	r3, r0
 80038ca:	b21a      	sxth	r2, r3
 80038cc:	4b4f      	ldr	r3, [pc, #316]	; (8003a0c <JoystickLocationState+0x844>)
 80038ce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			registerFrame[35].U16 = PickTray.origin_x;
 80038d2:	4b4e      	ldr	r3, [pc, #312]	; (8003a0c <JoystickLocationState+0x844>)
 80038d4:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 80038d8:	b29a      	uxth	r2, r3
 80038da:	4b51      	ldr	r3, [pc, #324]	; (8003a20 <JoystickLocationState+0x858>)
 80038dc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PickTray.origin_y;
 80038e0:	4b4a      	ldr	r3, [pc, #296]	; (8003a0c <JoystickLocationState+0x844>)
 80038e2:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	4b4d      	ldr	r3, [pc, #308]	; (8003a20 <JoystickLocationState+0x858>)
 80038ea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PickTray.orientation * 100;
 80038ee:	4b47      	ldr	r3, [pc, #284]	; (8003a0c <JoystickLocationState+0x844>)
 80038f0:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	461a      	mov	r2, r3
 80038f8:	0092      	lsls	r2, r2, #2
 80038fa:	4413      	add	r3, r2
 80038fc:	461a      	mov	r2, r3
 80038fe:	0091      	lsls	r1, r2, #2
 8003900:	461a      	mov	r2, r3
 8003902:	460b      	mov	r3, r1
 8003904:	4413      	add	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	b29a      	uxth	r2, r3
 800390a:	4b45      	ldr	r3, [pc, #276]	; (8003a20 <JoystickLocationState+0x858>)
 800390c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003910:	4b43      	ldr	r3, [pc, #268]	; (8003a20 <JoystickLocationState+0x858>)
 8003912:	2200      	movs	r2, #0
 8003914:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003916:	e3c1      	b.n	800409c <JoystickLocationState+0xed4>
		else if (ResetButton.flag == 1)
 8003918:	4b42      	ldr	r3, [pc, #264]	; (8003a24 <JoystickLocationState+0x85c>)
 800391a:	689b      	ldr	r3, [r3, #8]
 800391c:	2b01      	cmp	r3, #1
 800391e:	f040 83bd 	bne.w	800409c <JoystickLocationState+0xed4>
			ResetButton.flag = 0;
 8003922:	4b40      	ldr	r3, [pc, #256]	; (8003a24 <JoystickLocationState+0x85c>)
 8003924:	2200      	movs	r2, #0
 8003926:	609a      	str	r2, [r3, #8]
			state = 1;
 8003928:	4b3f      	ldr	r3, [pc, #252]	; (8003a28 <JoystickLocationState+0x860>)
 800392a:	2201      	movs	r2, #1
 800392c:	601a      	str	r2, [r3, #0]
		break;
 800392e:	e3b5      	b.n	800409c <JoystickLocationState+0xed4>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 8003930:	4b3e      	ldr	r3, [pc, #248]	; (8003a2c <JoystickLocationState+0x864>)
 8003932:	f04f 0200 	mov.w	r2, #0
 8003936:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8003938:	4b3c      	ldr	r3, [pc, #240]	; (8003a2c <JoystickLocationState+0x864>)
 800393a:	f04f 0200 	mov.w	r2, #0
 800393e:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 8003940:	4b3a      	ldr	r3, [pc, #232]	; (8003a2c <JoystickLocationState+0x864>)
 8003942:	f04f 0200 	mov.w	r2, #0
 8003946:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8003948:	4b38      	ldr	r3, [pc, #224]	; (8003a2c <JoystickLocationState+0x864>)
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8003950:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <JoystickLocationState+0x868>)
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d143      	bne.n	80039e0 <JoystickLocationState+0x818>
		{
			if(registerFrame[68].U16 >= 30000)
 8003958:	4b31      	ldr	r3, [pc, #196]	; (8003a20 <JoystickLocationState+0x858>)
 800395a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800395e:	f247 522f 	movw	r2, #29999	; 0x752f
 8003962:	4293      	cmp	r3, r2
 8003964:	d912      	bls.n	800398c <JoystickLocationState+0x7c4>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8003966:	4b2e      	ldr	r3, [pc, #184]	; (8003a20 <JoystickLocationState+0x858>)
 8003968:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800396c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003970:	4a30      	ldr	r2, [pc, #192]	; (8003a34 <JoystickLocationState+0x86c>)
 8003972:	fb82 1203 	smull	r1, r2, r2, r3
 8003976:	1092      	asrs	r2, r2, #2
 8003978:	17db      	asrs	r3, r3, #31
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003984:	4b29      	ldr	r3, [pc, #164]	; (8003a2c <JoystickLocationState+0x864>)
 8003986:	edc3 7a00 	vstr	s15, [r3]
 800398a:	e00e      	b.n	80039aa <JoystickLocationState+0x7e2>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 800398c:	4b24      	ldr	r3, [pc, #144]	; (8003a20 <JoystickLocationState+0x858>)
 800398e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003992:	4a29      	ldr	r2, [pc, #164]	; (8003a38 <JoystickLocationState+0x870>)
 8003994:	fba2 2303 	umull	r2, r3, r2, r3
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	b29b      	uxth	r3, r3
 800399c:	ee07 3a90 	vmov	s15, r3
 80039a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039a4:	4b21      	ldr	r3, [pc, #132]	; (8003a2c <JoystickLocationState+0x864>)
 80039a6:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 80039aa:	4b24      	ldr	r3, [pc, #144]	; (8003a3c <JoystickLocationState+0x874>)
 80039ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdbf 	bl	8000534 <__aeabi_i2d>
 80039b6:	a312      	add	r3, pc, #72	; (adr r3, 8003a00 <JoystickLocationState+0x838>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fe24 	bl	8000608 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4610      	mov	r0, r2
 80039c6:	4619      	mov	r1, r3
 80039c8:	f7fd f916 	bl	8000bf8 <__aeabi_d2f>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4a17      	ldr	r2, [pc, #92]	; (8003a2c <JoystickLocationState+0x864>)
 80039d0:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 80039d2:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <JoystickLocationState+0x868>)
 80039d4:	2200      	movs	r2, #0
 80039d6:	609a      	str	r2, [r3, #8]
			state = 4;
 80039d8:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <JoystickLocationState+0x860>)
 80039da:	2204      	movs	r2, #4
 80039dc:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 80039de:	e35f      	b.n	80040a0 <JoystickLocationState+0xed8>
		else if (ResetButton.flag == 1)
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <JoystickLocationState+0x85c>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	f040 835b 	bne.w	80040a0 <JoystickLocationState+0xed8>
			ResetButton.flag = 0;
 80039ea:	4b0e      	ldr	r3, [pc, #56]	; (8003a24 <JoystickLocationState+0x85c>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	609a      	str	r2, [r3, #8]
			state = 1;
 80039f0:	4b0d      	ldr	r3, [pc, #52]	; (8003a28 <JoystickLocationState+0x860>)
 80039f2:	2201      	movs	r2, #1
 80039f4:	601a      	str	r2, [r3, #0]
		break;
 80039f6:	e353      	b.n	80040a0 <JoystickLocationState+0xed8>
 80039f8:	1a63c1f8 	.word	0x1a63c1f8
 80039fc:	404ca5dc 	.word	0x404ca5dc
 8003a00:	70a3d70a 	.word	0x70a3d70a
 8003a04:	3fa70a3d 	.word	0x3fa70a3d
 8003a08:	20000ac0 	.word	0x20000ac0
 8003a0c:	200009f8 	.word	0x200009f8
 8003a10:	20000ac4 	.word	0x20000ac4
 8003a14:	42200000 	.word	0x42200000
 8003a18:	c2200000 	.word	0xc2200000
 8003a1c:	42480000 	.word	0x42480000
 8003a20:	2000101c 	.word	0x2000101c
 8003a24:	20000ad4 	.word	0x20000ad4
 8003a28:	20000224 	.word	0x20000224
 8003a2c:	20000a5c 	.word	0x20000a5c
 8003a30:	20000ac8 	.word	0x20000ac8
 8003a34:	66666667 	.word	0x66666667
 8003a38:	cccccccd 	.word	0xcccccccd
 8003a3c:	200009b8 	.word	0x200009b8

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003a40:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <JoystickLocationState+0x8b8>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	f040 82ef 	bne.w	8004028 <JoystickLocationState+0xe60>
		{
			if(registerFrame[68].U16 >= 30000)
 8003a4a:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <JoystickLocationState+0x8bc>)
 8003a4c:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003a50:	f247 522f 	movw	r2, #29999	; 0x752f
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d91b      	bls.n	8003a90 <JoystickLocationState+0x8c8>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8003a58:	4b0a      	ldr	r3, [pc, #40]	; (8003a84 <JoystickLocationState+0x8bc>)
 8003a5a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003a5e:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8003a62:	4a09      	ldr	r2, [pc, #36]	; (8003a88 <JoystickLocationState+0x8c0>)
 8003a64:	fb82 1203 	smull	r1, r2, r2, r3
 8003a68:	1092      	asrs	r2, r2, #2
 8003a6a:	17db      	asrs	r3, r3, #31
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	ee07 3a90 	vmov	s15, r3
 8003a72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003a76:	4b05      	ldr	r3, [pc, #20]	; (8003a8c <JoystickLocationState+0x8c4>)
 8003a78:	edc3 7a02 	vstr	s15, [r3, #8]
 8003a7c:	e017      	b.n	8003aae <JoystickLocationState+0x8e6>
 8003a7e:	bf00      	nop
 8003a80:	20000ac8 	.word	0x20000ac8
 8003a84:	2000101c 	.word	0x2000101c
 8003a88:	66666667 	.word	0x66666667
 8003a8c:	20000a5c 	.word	0x20000a5c
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8003a90:	4bd5      	ldr	r3, [pc, #852]	; (8003de8 <JoystickLocationState+0xc20>)
 8003a92:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003a96:	4ad5      	ldr	r2, [pc, #852]	; (8003dec <JoystickLocationState+0xc24>)
 8003a98:	fba2 2303 	umull	r2, r3, r2, r3
 8003a9c:	08db      	lsrs	r3, r3, #3
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	ee07 3a90 	vmov	s15, r3
 8003aa4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003aa8:	4bd1      	ldr	r3, [pc, #836]	; (8003df0 <JoystickLocationState+0xc28>)
 8003aaa:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 8003aae:	4bd1      	ldr	r3, [pc, #836]	; (8003df4 <JoystickLocationState+0xc2c>)
 8003ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fc fd3d 	bl	8000534 <__aeabi_i2d>
 8003aba:	a3c9      	add	r3, pc, #804	; (adr r3, 8003de0 <JoystickLocationState+0xc18>)
 8003abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ac0:	f7fc fda2 	bl	8000608 <__aeabi_dmul>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	460b      	mov	r3, r1
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	f7fd f894 	bl	8000bf8 <__aeabi_d2f>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	4ac7      	ldr	r2, [pc, #796]	; (8003df0 <JoystickLocationState+0xc28>)
 8003ad4:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 8003ad6:	4bc8      	ldr	r3, [pc, #800]	; (8003df8 <JoystickLocationState+0xc30>)
 8003ad8:	2200      	movs	r2, #0
 8003ada:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003adc:	4bc4      	ldr	r3, [pc, #784]	; (8003df0 <JoystickLocationState+0xc28>)
 8003ade:	ed93 7a02 	vldr	s14, [r3, #8]
 8003ae2:	4bc3      	ldr	r3, [pc, #780]	; (8003df0 <JoystickLocationState+0xc28>)
 8003ae4:	edd3 7a00 	vldr	s15, [r3]
 8003ae8:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003aec:	4bc0      	ldr	r3, [pc, #768]	; (8003df0 <JoystickLocationState+0xc28>)
 8003aee:	ed93 7a02 	vldr	s14, [r3, #8]
 8003af2:	4bbf      	ldr	r3, [pc, #764]	; (8003df0 <JoystickLocationState+0xc28>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003afc:	4bbc      	ldr	r3, [pc, #752]	; (8003df0 <JoystickLocationState+0xc28>)
 8003afe:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b02:	4bbb      	ldr	r3, [pc, #748]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b10:	4bb7      	ldr	r3, [pc, #732]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b12:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b16:	4bb6      	ldr	r3, [pc, #728]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b18:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b1c:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b20:	4bb3      	ldr	r3, [pc, #716]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b22:	ed93 6a03 	vldr	s12, [r3, #12]
 8003b26:	4bb2      	ldr	r3, [pc, #712]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b28:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b2c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003b30:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b38:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3c:	f00d fc08 	bl	8011350 <sqrtf>
 8003b40:	eeb0 7a40 	vmov.f32	s14, s0
 8003b44:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003b48:	4bac      	ldr	r3, [pc, #688]	; (8003dfc <JoystickLocationState+0xc34>)
 8003b4a:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003b4e:	4ba8      	ldr	r3, [pc, #672]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b50:	ed93 7a03 	vldr	s14, [r3, #12]
 8003b54:	4ba6      	ldr	r3, [pc, #664]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b56:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b5a:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003b5e:	4ba4      	ldr	r3, [pc, #656]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b60:	ed93 7a02 	vldr	s14, [r3, #8]
 8003b64:	4ba2      	ldr	r3, [pc, #648]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b66:	edd3 7a00 	vldr	s15, [r3]
 8003b6a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003b6e:	4ba0      	ldr	r3, [pc, #640]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b70:	edd3 6a02 	vldr	s13, [r3, #8]
 8003b74:	4b9e      	ldr	r3, [pc, #632]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b76:	edd3 7a00 	vldr	s15, [r3]
 8003b7a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b7e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b82:	4b9b      	ldr	r3, [pc, #620]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b84:	edd3 6a03 	vldr	s13, [r3, #12]
 8003b88:	4b99      	ldr	r3, [pc, #612]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b8a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b8e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003b92:	4b97      	ldr	r3, [pc, #604]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b94:	ed93 6a03 	vldr	s12, [r3, #12]
 8003b98:	4b95      	ldr	r3, [pc, #596]	; (8003df0 <JoystickLocationState+0xc28>)
 8003b9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b9e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003ba2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	eeb0 0a67 	vmov.f32	s0, s15
 8003bae:	f00d fbcf 	bl	8011350 <sqrtf>
 8003bb2:	eeb0 7a40 	vmov.f32	s14, s0
 8003bb6:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003bba:	4b91      	ldr	r3, [pc, #580]	; (8003e00 <JoystickLocationState+0xc38>)
 8003bbc:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003bc0:	4b8e      	ldr	r3, [pc, #568]	; (8003dfc <JoystickLocationState+0xc34>)
 8003bc2:	edd3 7a00 	vldr	s15, [r3]
 8003bc6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bca:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bce:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <JoystickLocationState+0xc38>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bdc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003be0:	4b83      	ldr	r3, [pc, #524]	; (8003df0 <JoystickLocationState+0xc28>)
 8003be2:	edd3 7a00 	vldr	s15, [r3]
 8003be6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003bea:	4b81      	ldr	r3, [pc, #516]	; (8003df0 <JoystickLocationState+0xc28>)
 8003bec:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003bf0:	4b83      	ldr	r3, [pc, #524]	; (8003e00 <JoystickLocationState+0xc38>)
 8003bf2:	edd3 7a00 	vldr	s15, [r3]
 8003bf6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003bfa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003bfe:	4b7f      	ldr	r3, [pc, #508]	; (8003dfc <JoystickLocationState+0xc34>)
 8003c00:	edd3 7a00 	vldr	s15, [r3]
 8003c04:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003c08:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c10:	4b77      	ldr	r3, [pc, #476]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c12:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c1a:	4b75      	ldr	r3, [pc, #468]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c1c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003c20:	4b76      	ldr	r3, [pc, #472]	; (8003dfc <JoystickLocationState+0xc34>)
 8003c22:	edd3 7a00 	vldr	s15, [r3]
 8003c26:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003c2a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c2e:	4b74      	ldr	r3, [pc, #464]	; (8003e00 <JoystickLocationState+0xc38>)
 8003c30:	edd3 7a00 	vldr	s15, [r3]
 8003c34:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c38:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c3c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c40:	4b6b      	ldr	r3, [pc, #428]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c42:	edd3 7a00 	vldr	s15, [r3]
 8003c46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c4a:	4b69      	ldr	r3, [pc, #420]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c4c:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003c50:	4b6b      	ldr	r3, [pc, #428]	; (8003e00 <JoystickLocationState+0xc38>)
 8003c52:	edd3 7a00 	vldr	s15, [r3]
 8003c56:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003c5a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c5e:	4b67      	ldr	r3, [pc, #412]	; (8003dfc <JoystickLocationState+0xc34>)
 8003c60:	edd3 7a00 	vldr	s15, [r3]
 8003c64:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003c68:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c6c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003c70:	4b5f      	ldr	r3, [pc, #380]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c72:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c7a:	4b5d      	ldr	r3, [pc, #372]	; (8003df0 <JoystickLocationState+0xc28>)
 8003c7c:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003c80:	4b5e      	ldr	r3, [pc, #376]	; (8003dfc <JoystickLocationState+0xc34>)
 8003c82:	edd3 7a00 	vldr	s15, [r3]
 8003c86:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8003e04 <JoystickLocationState+0xc3c>
 8003c8a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003c8e:	4b5c      	ldr	r3, [pc, #368]	; (8003e00 <JoystickLocationState+0xc38>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003c98:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003c9c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ca0:	4b53      	ldr	r3, [pc, #332]	; (8003df0 <JoystickLocationState+0xc28>)
 8003ca2:	edd3 7a00 	vldr	s15, [r3]
 8003ca6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003caa:	4b51      	ldr	r3, [pc, #324]	; (8003df0 <JoystickLocationState+0xc28>)
 8003cac:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003cb0:	4b53      	ldr	r3, [pc, #332]	; (8003e00 <JoystickLocationState+0xc38>)
 8003cb2:	edd3 7a00 	vldr	s15, [r3]
 8003cb6:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8003e04 <JoystickLocationState+0xc3c>
 8003cba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cbe:	4b4f      	ldr	r3, [pc, #316]	; (8003dfc <JoystickLocationState+0xc34>)
 8003cc0:	edd3 7a00 	vldr	s15, [r3]
 8003cc4:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003cc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ccc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003cd0:	4b47      	ldr	r3, [pc, #284]	; (8003df0 <JoystickLocationState+0xc28>)
 8003cd2:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cda:	4b45      	ldr	r3, [pc, #276]	; (8003df0 <JoystickLocationState+0xc28>)
 8003cdc:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003ce0:	4b46      	ldr	r3, [pc, #280]	; (8003dfc <JoystickLocationState+0xc34>)
 8003ce2:	edd3 7a00 	vldr	s15, [r3]
 8003ce6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003cea:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003cee:	4b44      	ldr	r3, [pc, #272]	; (8003e00 <JoystickLocationState+0xc38>)
 8003cf0:	edd3 7a00 	vldr	s15, [r3]
 8003cf4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003cf8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003cfc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d00:	4b3b      	ldr	r3, [pc, #236]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d0a:	4b39      	ldr	r3, [pc, #228]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d0c:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003d10:	4b3b      	ldr	r3, [pc, #236]	; (8003e00 <JoystickLocationState+0xc38>)
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003d1a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d1e:	4b37      	ldr	r3, [pc, #220]	; (8003dfc <JoystickLocationState+0xc34>)
 8003d20:	edd3 7a00 	vldr	s15, [r3]
 8003d24:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003d28:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d30:	4b2f      	ldr	r3, [pc, #188]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d3a:	4b2d      	ldr	r3, [pc, #180]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d3c:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003d40:	4b2e      	ldr	r3, [pc, #184]	; (8003dfc <JoystickLocationState+0xc34>)
 8003d42:	edd3 7a00 	vldr	s15, [r3]
 8003d46:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d4e:	4b2c      	ldr	r3, [pc, #176]	; (8003e00 <JoystickLocationState+0xc38>)
 8003d50:	edd3 7a00 	vldr	s15, [r3]
 8003d54:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003d58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d60:	4b23      	ldr	r3, [pc, #140]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d62:	edd3 7a00 	vldr	s15, [r3]
 8003d66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d6a:	4b21      	ldr	r3, [pc, #132]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d6c:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003d70:	4b23      	ldr	r3, [pc, #140]	; (8003e00 <JoystickLocationState+0xc38>)
 8003d72:	edd3 7a00 	vldr	s15, [r3]
 8003d76:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003d7a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003d7e:	4b1f      	ldr	r3, [pc, #124]	; (8003dfc <JoystickLocationState+0xc34>)
 8003d80:	edd3 7a00 	vldr	s15, [r3]
 8003d84:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003d88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003d8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003d90:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d92:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003d9a:	4b15      	ldr	r3, [pc, #84]	; (8003df0 <JoystickLocationState+0xc28>)
 8003d9c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003da0:	4b16      	ldr	r3, [pc, #88]	; (8003dfc <JoystickLocationState+0xc34>)
 8003da2:	edd3 7a00 	vldr	s15, [r3]
 8003da6:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8003e04 <JoystickLocationState+0xc3c>
 8003daa:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dae:	4b14      	ldr	r3, [pc, #80]	; (8003e00 <JoystickLocationState+0xc38>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8003db8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003dc0:	4b0b      	ldr	r3, [pc, #44]	; (8003df0 <JoystickLocationState+0xc28>)
 8003dc2:	edd3 7a00 	vldr	s15, [r3]
 8003dc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <JoystickLocationState+0xc28>)
 8003dcc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003dd0:	4b0b      	ldr	r3, [pc, #44]	; (8003e00 <JoystickLocationState+0xc38>)
 8003dd2:	edd3 7a00 	vldr	s15, [r3]
 8003dd6:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8003e04 <JoystickLocationState+0xc3c>
 8003dda:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003dde:	e013      	b.n	8003e08 <JoystickLocationState+0xc40>
 8003de0:	70a3d70a 	.word	0x70a3d70a
 8003de4:	3fa70a3d 	.word	0x3fa70a3d
 8003de8:	2000101c 	.word	0x2000101c
 8003dec:	cccccccd 	.word	0xcccccccd
 8003df0:	20000a5c 	.word	0x20000a5c
 8003df4:	200009b8 	.word	0x200009b8
 8003df8:	20000ac8 	.word	0x20000ac8
 8003dfc:	20000ac0 	.word	0x20000ac0
 8003e00:	20000ac4 	.word	0x20000ac4
 8003e04:	42480000 	.word	0x42480000
 8003e08:	4bad      	ldr	r3, [pc, #692]	; (80040c0 <JoystickLocationState+0xef8>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003e12:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e1a:	4baa      	ldr	r3, [pc, #680]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e24:	4ba7      	ldr	r3, [pc, #668]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e26:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003e2a:	4ba5      	ldr	r3, [pc, #660]	; (80040c0 <JoystickLocationState+0xef8>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e38:	4ba3      	ldr	r3, [pc, #652]	; (80040c8 <JoystickLocationState+0xf00>)
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	eddf 6aa3 	vldr	s13, [pc, #652]	; 80040cc <JoystickLocationState+0xf04>
 8003e42:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e46:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e4a:	4b9e      	ldr	r3, [pc, #632]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e4c:	edd3 7a00 	vldr	s15, [r3]
 8003e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e54:	4b9b      	ldr	r3, [pc, #620]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e56:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003e5a:	4b9b      	ldr	r3, [pc, #620]	; (80040c8 <JoystickLocationState+0xf00>)
 8003e5c:	edd3 7a00 	vldr	s15, [r3]
 8003e60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003e64:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e68:	4b95      	ldr	r3, [pc, #596]	; (80040c0 <JoystickLocationState+0xef8>)
 8003e6a:	edd3 7a00 	vldr	s15, [r3]
 8003e6e:	eddf 6a98 	vldr	s13, [pc, #608]	; 80040d0 <JoystickLocationState+0xf08>
 8003e72:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003e76:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e7a:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e7c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003e84:	4b8f      	ldr	r3, [pc, #572]	; (80040c4 <JoystickLocationState+0xefc>)
 8003e86:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003e8a:	4b8d      	ldr	r3, [pc, #564]	; (80040c0 <JoystickLocationState+0xef8>)
 8003e8c:	edd3 7a00 	vldr	s15, [r3]
 8003e90:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003e94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003e98:	4b8b      	ldr	r3, [pc, #556]	; (80040c8 <JoystickLocationState+0xf00>)
 8003e9a:	edd3 7a00 	vldr	s15, [r3]
 8003e9e:	eddf 6a8b 	vldr	s13, [pc, #556]	; 80040cc <JoystickLocationState+0xf04>
 8003ea2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eaa:	4b86      	ldr	r3, [pc, #536]	; (80040c4 <JoystickLocationState+0xefc>)
 8003eac:	edd3 7a00 	vldr	s15, [r3]
 8003eb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003eb4:	4b83      	ldr	r3, [pc, #524]	; (80040c4 <JoystickLocationState+0xefc>)
 8003eb6:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003eba:	4b83      	ldr	r3, [pc, #524]	; (80040c8 <JoystickLocationState+0xf00>)
 8003ebc:	edd3 7a00 	vldr	s15, [r3]
 8003ec0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003ec4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ec8:	4b7d      	ldr	r3, [pc, #500]	; (80040c0 <JoystickLocationState+0xef8>)
 8003eca:	edd3 7a00 	vldr	s15, [r3]
 8003ece:	eddf 6a80 	vldr	s13, [pc, #512]	; 80040d0 <JoystickLocationState+0xf08>
 8003ed2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ed6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003eda:	4b7a      	ldr	r3, [pc, #488]	; (80040c4 <JoystickLocationState+0xefc>)
 8003edc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ee0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ee4:	4b77      	ldr	r3, [pc, #476]	; (80040c4 <JoystickLocationState+0xefc>)
 8003ee6:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003eea:	4b75      	ldr	r3, [pc, #468]	; (80040c0 <JoystickLocationState+0xef8>)
 8003eec:	edd3 7a00 	vldr	s15, [r3]
 8003ef0:	ed9f 7a78 	vldr	s14, [pc, #480]	; 80040d4 <JoystickLocationState+0xf0c>
 8003ef4:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ef8:	4b73      	ldr	r3, [pc, #460]	; (80040c8 <JoystickLocationState+0xf00>)
 8003efa:	edd3 7a00 	vldr	s15, [r3]
 8003efe:	eddf 6a73 	vldr	s13, [pc, #460]	; 80040cc <JoystickLocationState+0xf04>
 8003f02:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003f06:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f0a:	4b6e      	ldr	r3, [pc, #440]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f0c:	edd3 7a00 	vldr	s15, [r3]
 8003f10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f14:	4b6b      	ldr	r3, [pc, #428]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f16:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003f1a:	4b6b      	ldr	r3, [pc, #428]	; (80040c8 <JoystickLocationState+0xf00>)
 8003f1c:	edd3 7a00 	vldr	s15, [r3]
 8003f20:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 80040d4 <JoystickLocationState+0xf0c>
 8003f24:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003f28:	4b65      	ldr	r3, [pc, #404]	; (80040c0 <JoystickLocationState+0xef8>)
 8003f2a:	edd3 7a00 	vldr	s15, [r3]
 8003f2e:	eddf 6a68 	vldr	s13, [pc, #416]	; 80040d0 <JoystickLocationState+0xf08>
 8003f32:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003f36:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f3a:	4b62      	ldr	r3, [pc, #392]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f3c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f44:	4b5f      	ldr	r3, [pc, #380]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f46:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = (PlaceTray.L1[0]+(50*sin_Theta))*10;
 8003f4a:	4b5e      	ldr	r3, [pc, #376]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f4c:	ed93 7a00 	vldr	s14, [r3]
 8003f50:	4b5d      	ldr	r3, [pc, #372]	; (80040c8 <JoystickLocationState+0xf00>)
 8003f52:	edd3 7a00 	vldr	s15, [r3]
 8003f56:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040d4 <JoystickLocationState+0xf0c>
 8003f5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003f5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f62:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f6e:	ee17 3a90 	vmov	r3, s15
 8003f72:	b21a      	sxth	r2, r3
 8003f74:	4b53      	ldr	r3, [pc, #332]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f76:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
			PlaceTray.origin_y = (PlaceTray.L1[1]-(50*cos_Theta))*10;
 8003f7a:	4b52      	ldr	r3, [pc, #328]	; (80040c4 <JoystickLocationState+0xefc>)
 8003f7c:	ed93 7a01 	vldr	s14, [r3, #4]
 8003f80:	4b4f      	ldr	r3, [pc, #316]	; (80040c0 <JoystickLocationState+0xef8>)
 8003f82:	edd3 7a00 	vldr	s15, [r3]
 8003f86:	eddf 6a53 	vldr	s13, [pc, #332]	; 80040d4 <JoystickLocationState+0xf0c>
 8003f8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003f8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003f92:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003f96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003f9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f9e:	ee17 3a90 	vmov	r3, s15
 8003fa2:	b21a      	sxth	r2, r3
 8003fa4:	4b47      	ldr	r3, [pc, #284]	; (80040c4 <JoystickLocationState+0xefc>)
 8003fa6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003faa:	4b45      	ldr	r3, [pc, #276]	; (80040c0 <JoystickLocationState+0xef8>)
 8003fac:	edd3 7a00 	vldr	s15, [r3]
 8003fb0:	eeb0 0a67 	vmov.f32	s0, s15
 8003fb4:	f00d f9a0 	bl	80112f8 <acosf>
 8003fb8:	ee10 3a10 	vmov	r3, s0
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc facb 	bl	8000558 <__aeabi_f2d>
 8003fc2:	a33d      	add	r3, pc, #244	; (adr r3, 80040b8 <JoystickLocationState+0xef0>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fb1e 	bl	8000608 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fdc8 	bl	8000b68 <__aeabi_d2iz>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	b21a      	sxth	r2, r3
 8003fdc:	4b39      	ldr	r3, [pc, #228]	; (80040c4 <JoystickLocationState+0xefc>)
 8003fde:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

			registerFrame[35].U16 = PlaceTray.origin_x;
 8003fe2:	4b38      	ldr	r3, [pc, #224]	; (80040c4 <JoystickLocationState+0xefc>)
 8003fe4:	f9b3 3058 	ldrsh.w	r3, [r3, #88]	; 0x58
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	4b3b      	ldr	r3, [pc, #236]	; (80040d8 <JoystickLocationState+0xf10>)
 8003fec:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y;
 8003ff0:	4b34      	ldr	r3, [pc, #208]	; (80040c4 <JoystickLocationState+0xefc>)
 8003ff2:	f9b3 305a 	ldrsh.w	r3, [r3, #90]	; 0x5a
 8003ff6:	b29a      	uxth	r2, r3
 8003ff8:	4b37      	ldr	r3, [pc, #220]	; (80040d8 <JoystickLocationState+0xf10>)
 8003ffa:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003ffe:	4b31      	ldr	r3, [pc, #196]	; (80040c4 <JoystickLocationState+0xefc>)
 8004000:	f9b3 305c 	ldrsh.w	r3, [r3, #92]	; 0x5c
 8004004:	b29b      	uxth	r3, r3
 8004006:	461a      	mov	r2, r3
 8004008:	0092      	lsls	r2, r2, #2
 800400a:	4413      	add	r3, r2
 800400c:	461a      	mov	r2, r3
 800400e:	0091      	lsls	r1, r2, #2
 8004010:	461a      	mov	r2, r3
 8004012:	460b      	mov	r3, r1
 8004014:	4413      	add	r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	b29a      	uxth	r2, r3
 800401a:	4b2f      	ldr	r3, [pc, #188]	; (80040d8 <JoystickLocationState+0xf10>)
 800401c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8004020:	4b2d      	ldr	r3, [pc, #180]	; (80040d8 <JoystickLocationState+0xf10>)
 8004022:	2200      	movs	r2, #0
 8004024:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8004026:	e03d      	b.n	80040a4 <JoystickLocationState+0xedc>
		else if (ResetButton.flag == 1)
 8004028:	4b2c      	ldr	r3, [pc, #176]	; (80040dc <JoystickLocationState+0xf14>)
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d139      	bne.n	80040a4 <JoystickLocationState+0xedc>
			ResetButton.flag = 0;
 8004030:	4b2a      	ldr	r3, [pc, #168]	; (80040dc <JoystickLocationState+0xf14>)
 8004032:	2200      	movs	r2, #0
 8004034:	609a      	str	r2, [r3, #8]
			state = 1;
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <JoystickLocationState+0xf18>)
 8004038:	2201      	movs	r2, #1
 800403a:	601a      	str	r2, [r3, #0]
		break;
 800403c:	e032      	b.n	80040a4 <JoystickLocationState+0xedc>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 800403e:	4b29      	ldr	r3, [pc, #164]	; (80040e4 <JoystickLocationState+0xf1c>)
 8004040:	2202      	movs	r2, #2
 8004042:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8004044:	4b24      	ldr	r3, [pc, #144]	; (80040d8 <JoystickLocationState+0xf10>)
 8004046:	2200      	movs	r2, #0
 8004048:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 800404a:	4b27      	ldr	r3, [pc, #156]	; (80040e8 <JoystickLocationState+0xf20>)
 800404c:	2201      	movs	r2, #1
 800404e:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8004050:	f7fe fbc4 	bl	80027dc <EndEffectorWrite>

		HAL_Delay(100);
 8004054:	2064      	movs	r0, #100	; 0x64
 8004056:	f001 fac1 	bl	80055dc <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 800405a:	4b22      	ldr	r3, [pc, #136]	; (80040e4 <JoystickLocationState+0xf1c>)
 800405c:	2203      	movs	r2, #3
 800405e:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8004060:	4b1d      	ldr	r3, [pc, #116]	; (80040d8 <JoystickLocationState+0xf10>)
 8004062:	2202      	movs	r2, #2
 8004064:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8004066:	4b20      	ldr	r3, [pc, #128]	; (80040e8 <JoystickLocationState+0xf20>)
 8004068:	2201      	movs	r2, #1
 800406a:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 800406c:	f7fe fbb6 	bl	80027dc <EndEffectorWrite>

		HAL_Delay(100);
 8004070:	2064      	movs	r0, #100	; 0x64
 8004072:	f001 fab3 	bl	80055dc <HAL_Delay>

		state = 1;
 8004076:	4b1a      	ldr	r3, [pc, #104]	; (80040e0 <JoystickLocationState+0xf18>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 800407c:	4b1b      	ldr	r3, [pc, #108]	; (80040ec <JoystickLocationState+0xf24>)
 800407e:	2201      	movs	r2, #1
 8004080:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8004082:	4b16      	ldr	r3, [pc, #88]	; (80040dc <JoystickLocationState+0xf14>)
 8004084:	689b      	ldr	r3, [r3, #8]
 8004086:	2b01      	cmp	r3, #1
 8004088:	d10e      	bne.n	80040a8 <JoystickLocationState+0xee0>
		{
			ResetButton.flag = 0;
 800408a:	4b14      	ldr	r3, [pc, #80]	; (80040dc <JoystickLocationState+0xf14>)
 800408c:	2200      	movs	r2, #0
 800408e:	609a      	str	r2, [r3, #8]
			state = 1;
 8004090:	4b13      	ldr	r3, [pc, #76]	; (80040e0 <JoystickLocationState+0xf18>)
 8004092:	2201      	movs	r2, #1
 8004094:	601a      	str	r2, [r3, #0]
		}
		break;
 8004096:	e007      	b.n	80040a8 <JoystickLocationState+0xee0>
		break;
 8004098:	bf00      	nop
 800409a:	e006      	b.n	80040aa <JoystickLocationState+0xee2>
		break;
 800409c:	bf00      	nop
 800409e:	e004      	b.n	80040aa <JoystickLocationState+0xee2>
		break;
 80040a0:	bf00      	nop
 80040a2:	e002      	b.n	80040aa <JoystickLocationState+0xee2>
		break;
 80040a4:	bf00      	nop
 80040a6:	e000      	b.n	80040aa <JoystickLocationState+0xee2>
		break;
 80040a8:	bf00      	nop
	}
}
 80040aa:	bf00      	nop
 80040ac:	46bd      	mov	sp, r7
 80040ae:	ecbd 8b02 	vpop	{d8}
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	f3af 8000 	nop.w
 80040b8:	1a63c1f8 	.word	0x1a63c1f8
 80040bc:	404ca5dc 	.word	0x404ca5dc
 80040c0:	20000ac0 	.word	0x20000ac0
 80040c4:	20000a5c 	.word	0x20000a5c
 80040c8:	20000ac4 	.word	0x20000ac4
 80040cc:	42200000 	.word	0x42200000
 80040d0:	c2200000 	.word	0xc2200000
 80040d4:	42480000 	.word	0x42480000
 80040d8:	2000101c 	.word	0x2000101c
 80040dc:	20000ad4 	.word	0x20000ad4
 80040e0:	20000224 	.word	0x20000224
 80040e4:	20000b3c 	.word	0x20000b3c
 80040e8:	20000b34 	.word	0x20000b34
 80040ec:	20000200 	.word	0x20000200

080040f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	4a24      	ldr	r2, [pc, #144]	; (800418c <HAL_TIM_PeriodElapsedCallback+0x9c>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d140      	bne.n	8004182 <HAL_TIM_PeriodElapsedCallback+0x92>
	{
		if(scheduler == 3)
 8004100:	4b23      	ldr	r3, [pc, #140]	; (8004190 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	2b03      	cmp	r3, #3
 8004106:	d13c      	bne.n	8004182 <HAL_TIM_PeriodElapsedCallback+0x92>
		{
			TrajectoryGenerator();
 8004108:	f000 f84a 	bl	80041a0 <TrajectoryGenerator>
			if(PIDFrag == 1){
 800410c:	4b21      	ldr	r3, [pc, #132]	; (8004194 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2b01      	cmp	r3, #1
 8004112:	d136      	bne.n	8004182 <HAL_TIM_PeriodElapsedCallback+0x92>
				duty = PIDcal();
 8004114:	f7fe fdf4 	bl	8002d00 <PIDcal>
 8004118:	eef0 7a40 	vmov.f32	s15, s0
 800411c:	4b1e      	ldr	r3, [pc, #120]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800411e:	edc3 7a00 	vstr	s15, [r3]
				if (duty >= 0)
 8004122:	4b1d      	ldr	r3, [pc, #116]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004124:	edd3 7a00 	vldr	s15, [r3]
 8004128:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800412c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004130:	db0e      	blt.n	8004150 <HAL_TIM_PeriodElapsedCallback+0x60>
				{
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8004132:	4b1a      	ldr	r3, [pc, #104]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2200      	movs	r2, #0
 8004138:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 800413a:	4b17      	ldr	r3, [pc, #92]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800413c:	edd3 7a00 	vldr	s15, [r3]
 8004140:	4b16      	ldr	r3, [pc, #88]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004148:	ee17 2a90 	vmov	r2, s15
 800414c:	635a      	str	r2, [r3, #52]	; 0x34
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 800414e:	e018      	b.n	8004182 <HAL_TIM_PeriodElapsedCallback+0x92>
				else if (duty < 0)
 8004150:	4b11      	ldr	r3, [pc, #68]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8004152:	edd3 7a00 	vldr	s15, [r3]
 8004156:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800415a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800415e:	d400      	bmi.n	8004162 <HAL_TIM_PeriodElapsedCallback+0x72>
}
 8004160:	e00f      	b.n	8004182 <HAL_TIM_PeriodElapsedCallback+0x92>
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8004162:	4b0e      	ldr	r3, [pc, #56]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2200      	movs	r2, #0
 8004168:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 800416a:	4b0b      	ldr	r3, [pc, #44]	; (8004198 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 800416c:	edd3 7a00 	vldr	s15, [r3]
 8004170:	eef1 7a67 	vneg.f32	s15, s15
 8004174:	4b09      	ldr	r3, [pc, #36]	; (800419c <HAL_TIM_PeriodElapsedCallback+0xac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800417c:	ee17 2a90 	vmov	r2, s15
 8004180:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004182:	bf00      	nop
 8004184:	3708      	adds	r7, #8
 8004186:	46bd      	mov	sp, r7
 8004188:	bd80      	pop	{r7, pc}
 800418a:	bf00      	nop
 800418c:	200006bc 	.word	0x200006bc
 8004190:	20000200 	.word	0x20000200
 8004194:	200009b4 	.word	0x200009b4
 8004198:	20000970 	.word	0x20000970
 800419c:	20000554 	.word	0x20000554

080041a0 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 80041a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041a4:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 80041a6:	4b8f      	ldr	r3, [pc, #572]	; (80043e4 <TrajectoryGenerator+0x244>)
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	2b03      	cmp	r3, #3
 80041ac:	f200 851b 	bhi.w	8004be6 <TrajectoryGenerator+0xa46>
 80041b0:	a201      	add	r2, pc, #4	; (adr r2, 80041b8 <TrajectoryGenerator+0x18>)
 80041b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041b6:	bf00      	nop
 80041b8:	080041c9 	.word	0x080041c9
 80041bc:	08004425 	.word	0x08004425
 80041c0:	08004771 	.word	0x08004771
 80041c4:	08004be5 	.word	0x08004be5
	{
	case 0: //initial Condition & Case Check
//			qi = position;
			qdi = 0;
 80041c8:	4b87      	ldr	r3, [pc, #540]	; (80043e8 <TrajectoryGenerator+0x248>)
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
			qd_max = 22222.22;  //1000 pulse/s
 80041d0:	4b86      	ldr	r3, [pc, #536]	; (80043ec <TrajectoryGenerator+0x24c>)
 80041d2:	4a87      	ldr	r2, [pc, #540]	; (80043f0 <TrajectoryGenerator+0x250>)
 80041d4:	601a      	str	r2, [r3, #0]
			qdd_max = 22222.22; //1000 pulse/s^2 /0.045
 80041d6:	4b87      	ldr	r3, [pc, #540]	; (80043f4 <TrajectoryGenerator+0x254>)
 80041d8:	4a85      	ldr	r2, [pc, #532]	; (80043f0 <TrajectoryGenerator+0x250>)
 80041da:	601a      	str	r2, [r3, #0]
//			qdd_max = 11111.11; //500 pulse/s^2 /0.045 with mass

		  if(qf > qi)
 80041dc:	4b86      	ldr	r3, [pc, #536]	; (80043f8 <TrajectoryGenerator+0x258>)
 80041de:	ed93 7a00 	vldr	s14, [r3]
 80041e2:	4b86      	ldr	r3, [pc, #536]	; (80043fc <TrajectoryGenerator+0x25c>)
 80041e4:	edd3 7a00 	vldr	s15, [r3]
 80041e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80041ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041f0:	dd16      	ble.n	8004220 <TrajectoryGenerator+0x80>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 80041f2:	4b81      	ldr	r3, [pc, #516]	; (80043f8 <TrajectoryGenerator+0x258>)
 80041f4:	ed93 7a00 	vldr	s14, [r3]
 80041f8:	4b80      	ldr	r3, [pc, #512]	; (80043fc <TrajectoryGenerator+0x25c>)
 80041fa:	edd3 7a00 	vldr	s15, [r3]
 80041fe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004202:	4b7c      	ldr	r3, [pc, #496]	; (80043f4 <TrajectoryGenerator+0x254>)
 8004204:	edd3 7a00 	vldr	s15, [r3]
 8004208:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800420c:	eeb0 0a66 	vmov.f32	s0, s13
 8004210:	f00d f89e 	bl	8011350 <sqrtf>
 8004214:	eef0 7a40 	vmov.f32	s15, s0
 8004218:	4b79      	ldr	r3, [pc, #484]	; (8004400 <TrajectoryGenerator+0x260>)
 800421a:	edc3 7a00 	vstr	s15, [r3]
 800421e:	e022      	b.n	8004266 <TrajectoryGenerator+0xc6>
		  }
		  else if(qf < qi)
 8004220:	4b75      	ldr	r3, [pc, #468]	; (80043f8 <TrajectoryGenerator+0x258>)
 8004222:	ed93 7a00 	vldr	s14, [r3]
 8004226:	4b75      	ldr	r3, [pc, #468]	; (80043fc <TrajectoryGenerator+0x25c>)
 8004228:	edd3 7a00 	vldr	s15, [r3]
 800422c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004230:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004234:	d517      	bpl.n	8004266 <TrajectoryGenerator+0xc6>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8004236:	4b70      	ldr	r3, [pc, #448]	; (80043f8 <TrajectoryGenerator+0x258>)
 8004238:	ed93 7a00 	vldr	s14, [r3]
 800423c:	4b6f      	ldr	r3, [pc, #444]	; (80043fc <TrajectoryGenerator+0x25c>)
 800423e:	edd3 7a00 	vldr	s15, [r3]
 8004242:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004246:	eeb1 7a67 	vneg.f32	s14, s15
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <TrajectoryGenerator+0x254>)
 800424c:	edd3 7a00 	vldr	s15, [r3]
 8004250:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004254:	eeb0 0a66 	vmov.f32	s0, s13
 8004258:	f00d f87a 	bl	8011350 <sqrtf>
 800425c:	eef0 7a40 	vmov.f32	s15, s0
 8004260:	4b67      	ldr	r3, [pc, #412]	; (8004400 <TrajectoryGenerator+0x260>)
 8004262:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8004266:	4b64      	ldr	r3, [pc, #400]	; (80043f8 <TrajectoryGenerator+0x258>)
 8004268:	ed93 7a00 	vldr	s14, [r3]
 800426c:	4b63      	ldr	r3, [pc, #396]	; (80043fc <TrajectoryGenerator+0x25c>)
 800426e:	edd3 7a00 	vldr	s15, [r3]
 8004272:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004276:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800427a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800427e:	d50f      	bpl.n	80042a0 <TrajectoryGenerator+0x100>
		  {
			  qd_max = -1*qd_max;
 8004280:	4b5a      	ldr	r3, [pc, #360]	; (80043ec <TrajectoryGenerator+0x24c>)
 8004282:	edd3 7a00 	vldr	s15, [r3]
 8004286:	eef1 7a67 	vneg.f32	s15, s15
 800428a:	4b58      	ldr	r3, [pc, #352]	; (80043ec <TrajectoryGenerator+0x24c>)
 800428c:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8004290:	4b58      	ldr	r3, [pc, #352]	; (80043f4 <TrajectoryGenerator+0x254>)
 8004292:	edd3 7a00 	vldr	s15, [r3]
 8004296:	eef1 7a67 	vneg.f32	s15, s15
 800429a:	4b56      	ldr	r3, [pc, #344]	; (80043f4 <TrajectoryGenerator+0x254>)
 800429c:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 80042a0:	4b52      	ldr	r3, [pc, #328]	; (80043ec <TrajectoryGenerator+0x24c>)
 80042a2:	ed93 7a00 	vldr	s14, [r3]
 80042a6:	4b50      	ldr	r3, [pc, #320]	; (80043e8 <TrajectoryGenerator+0x248>)
 80042a8:	edd3 7a00 	vldr	s15, [r3]
 80042ac:	ee77 6a67 	vsub.f32	s13, s14, s15
 80042b0:	4b50      	ldr	r3, [pc, #320]	; (80043f4 <TrajectoryGenerator+0x254>)
 80042b2:	ed93 7a00 	vldr	s14, [r3]
 80042b6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80042ba:	4b52      	ldr	r3, [pc, #328]	; (8004404 <TrajectoryGenerator+0x264>)
 80042bc:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 80042c0:	4b49      	ldr	r3, [pc, #292]	; (80043e8 <TrajectoryGenerator+0x248>)
 80042c2:	ed93 7a00 	vldr	s14, [r3]
 80042c6:	4b4f      	ldr	r3, [pc, #316]	; (8004404 <TrajectoryGenerator+0x264>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80042d0:	ee17 0a90 	vmov	r0, s15
 80042d4:	f7fc f940 	bl	8000558 <__aeabi_f2d>
 80042d8:	4604      	mov	r4, r0
 80042da:	460d      	mov	r5, r1
 80042dc:	4b45      	ldr	r3, [pc, #276]	; (80043f4 <TrajectoryGenerator+0x254>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4618      	mov	r0, r3
 80042e2:	f7fc f939 	bl	8000558 <__aeabi_f2d>
 80042e6:	f04f 0200 	mov.w	r2, #0
 80042ea:	4b47      	ldr	r3, [pc, #284]	; (8004408 <TrajectoryGenerator+0x268>)
 80042ec:	f7fc f98c 	bl	8000608 <__aeabi_dmul>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4690      	mov	r8, r2
 80042f6:	4699      	mov	r9, r3
 80042f8:	4b42      	ldr	r3, [pc, #264]	; (8004404 <TrajectoryGenerator+0x264>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7fc f92b 	bl	8000558 <__aeabi_f2d>
 8004302:	4602      	mov	r2, r0
 8004304:	460b      	mov	r3, r1
 8004306:	4640      	mov	r0, r8
 8004308:	4649      	mov	r1, r9
 800430a:	f7fc f97d 	bl	8000608 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4690      	mov	r8, r2
 8004314:	4699      	mov	r9, r3
 8004316:	4b3b      	ldr	r3, [pc, #236]	; (8004404 <TrajectoryGenerator+0x264>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4618      	mov	r0, r3
 800431c:	f7fc f91c 	bl	8000558 <__aeabi_f2d>
 8004320:	4602      	mov	r2, r0
 8004322:	460b      	mov	r3, r1
 8004324:	4640      	mov	r0, r8
 8004326:	4649      	mov	r1, r9
 8004328:	f7fc f96e 	bl	8000608 <__aeabi_dmul>
 800432c:	4602      	mov	r2, r0
 800432e:	460b      	mov	r3, r1
 8004330:	4620      	mov	r0, r4
 8004332:	4629      	mov	r1, r5
 8004334:	f7fb ffb2 	bl	800029c <__adddf3>
 8004338:	4602      	mov	r2, r0
 800433a:	460b      	mov	r3, r1
 800433c:	4610      	mov	r0, r2
 800433e:	4619      	mov	r1, r3
 8004340:	f7fc fc5a 	bl	8000bf8 <__aeabi_d2f>
 8004344:	4603      	mov	r3, r0
 8004346:	4a31      	ldr	r2, [pc, #196]	; (800440c <TrajectoryGenerator+0x26c>)
 8004348:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 800434a:	4b30      	ldr	r3, [pc, #192]	; (800440c <TrajectoryGenerator+0x26c>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a30      	ldr	r2, [pc, #192]	; (8004410 <TrajectoryGenerator+0x270>)
 8004350:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8004352:	4b29      	ldr	r3, [pc, #164]	; (80043f8 <TrajectoryGenerator+0x258>)
 8004354:	ed93 7a00 	vldr	s14, [r3]
 8004358:	4b28      	ldr	r3, [pc, #160]	; (80043fc <TrajectoryGenerator+0x25c>)
 800435a:	edd3 7a00 	vldr	s15, [r3]
 800435e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004362:	4b2a      	ldr	r3, [pc, #168]	; (800440c <TrajectoryGenerator+0x26c>)
 8004364:	edd3 7a00 	vldr	s15, [r3]
 8004368:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436c:	4b28      	ldr	r3, [pc, #160]	; (8004410 <TrajectoryGenerator+0x270>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	ee77 6a67 	vsub.f32	s13, s14, s15
 8004376:	4b1d      	ldr	r3, [pc, #116]	; (80043ec <TrajectoryGenerator+0x24c>)
 8004378:	ed93 7a00 	vldr	s14, [r3]
 800437c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004380:	4b24      	ldr	r3, [pc, #144]	; (8004414 <TrajectoryGenerator+0x274>)
 8004382:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8004386:	4b1f      	ldr	r3, [pc, #124]	; (8004404 <TrajectoryGenerator+0x264>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a23      	ldr	r2, [pc, #140]	; (8004418 <TrajectoryGenerator+0x278>)
 800438c:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 800438e:	4b19      	ldr	r3, [pc, #100]	; (80043f4 <TrajectoryGenerator+0x254>)
 8004390:	ed93 7a00 	vldr	s14, [r3]
 8004394:	4b1a      	ldr	r3, [pc, #104]	; (8004400 <TrajectoryGenerator+0x260>)
 8004396:	edd3 7a00 	vldr	s15, [r3]
 800439a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800439e:	4b12      	ldr	r3, [pc, #72]	; (80043e8 <TrajectoryGenerator+0x248>)
 80043a0:	edd3 7a00 	vldr	s15, [r3]
 80043a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043a8:	eeb0 7ae7 	vabs.f32	s14, s15
 80043ac:	4b0f      	ldr	r3, [pc, #60]	; (80043ec <TrajectoryGenerator+0x24c>)
 80043ae:	edd3 7a00 	vldr	s15, [r3]
 80043b2:	eef0 7ae7 	vabs.f32	s15, s15
 80043b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80043ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043be:	db08      	blt.n	80043d2 <TrajectoryGenerator+0x232>
		  {
			  initime = time;
 80043c0:	4b16      	ldr	r3, [pc, #88]	; (800441c <TrajectoryGenerator+0x27c>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4a16      	ldr	r2, [pc, #88]	; (8004420 <TrajectoryGenerator+0x280>)
 80043c6:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 80043c8:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <TrajectoryGenerator+0x244>)
 80043ca:	2202      	movs	r2, #2
 80043cc:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 80043ce:	f000 bc0a 	b.w	8004be6 <TrajectoryGenerator+0xa46>
			  initime = time;
 80043d2:	4b12      	ldr	r3, [pc, #72]	; (800441c <TrajectoryGenerator+0x27c>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a12      	ldr	r2, [pc, #72]	; (8004420 <TrajectoryGenerator+0x280>)
 80043d8:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 80043da:	4b02      	ldr	r3, [pc, #8]	; (80043e4 <TrajectoryGenerator+0x244>)
 80043dc:	2201      	movs	r2, #1
 80043de:	601a      	str	r2, [r3, #0]
		  break;
 80043e0:	f000 bc01 	b.w	8004be6 <TrajectoryGenerator+0xa46>
 80043e4:	20000974 	.word	0x20000974
 80043e8:	20000984 	.word	0x20000984
 80043ec:	20000210 	.word	0x20000210
 80043f0:	46ad9c71 	.word	0x46ad9c71
 80043f4:	20000214 	.word	0x20000214
 80043f8:	2000097c 	.word	0x2000097c
 80043fc:	20000980 	.word	0x20000980
 8004400:	2000098c 	.word	0x2000098c
 8004404:	200009a0 	.word	0x200009a0
 8004408:	3fe00000 	.word	0x3fe00000
 800440c:	200009a4 	.word	0x200009a4
 8004410:	200009a8 	.word	0x200009a8
 8004414:	200009ac 	.word	0x200009ac
 8004418:	200009b0 	.word	0x200009b0
 800441c:	20000978 	.word	0x20000978
 8004420:	20000988 	.word	0x20000988

	case 1:
		PIDFrag = 1;
 8004424:	4bc4      	ldr	r3, [pc, #784]	; (8004738 <TrajectoryGenerator+0x598>)
 8004426:	2201      	movs	r2, #1
 8004428:	601a      	str	r2, [r3, #0]
		  if(time <= t_half + initime)
 800442a:	4bc4      	ldr	r3, [pc, #784]	; (800473c <TrajectoryGenerator+0x59c>)
 800442c:	ed93 7a00 	vldr	s14, [r3]
 8004430:	4bc3      	ldr	r3, [pc, #780]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004432:	edd3 7a00 	vldr	s15, [r3]
 8004436:	ee37 7a27 	vadd.f32	s14, s14, s15
 800443a:	4bc2      	ldr	r3, [pc, #776]	; (8004744 <TrajectoryGenerator+0x5a4>)
 800443c:	edd3 7a00 	vldr	s15, [r3]
 8004440:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004448:	f2c0 8092 	blt.w	8004570 <TrajectoryGenerator+0x3d0>
		  {
			  setacc = qdd_max;
 800444c:	4bbe      	ldr	r3, [pc, #760]	; (8004748 <TrajectoryGenerator+0x5a8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4abe      	ldr	r2, [pc, #760]	; (800474c <TrajectoryGenerator+0x5ac>)
 8004452:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 8004454:	4bbb      	ldr	r3, [pc, #748]	; (8004744 <TrajectoryGenerator+0x5a4>)
 8004456:	ed93 7a00 	vldr	s14, [r3]
 800445a:	4bb9      	ldr	r3, [pc, #740]	; (8004740 <TrajectoryGenerator+0x5a0>)
 800445c:	edd3 7a00 	vldr	s15, [r3]
 8004460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004464:	4bb9      	ldr	r3, [pc, #740]	; (800474c <TrajectoryGenerator+0x5ac>)
 8004466:	edd3 7a00 	vldr	s15, [r3]
 800446a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800446e:	4bb8      	ldr	r3, [pc, #736]	; (8004750 <TrajectoryGenerator+0x5b0>)
 8004470:	edd3 7a00 	vldr	s15, [r3]
 8004474:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004478:	4bb6      	ldr	r3, [pc, #728]	; (8004754 <TrajectoryGenerator+0x5b4>)
 800447a:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 800447e:	4bb1      	ldr	r3, [pc, #708]	; (8004744 <TrajectoryGenerator+0x5a4>)
 8004480:	ed93 7a00 	vldr	s14, [r3]
 8004484:	4bae      	ldr	r3, [pc, #696]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004486:	edd3 7a00 	vldr	s15, [r3]
 800448a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800448e:	4bb0      	ldr	r3, [pc, #704]	; (8004750 <TrajectoryGenerator+0x5b0>)
 8004490:	edd3 7a00 	vldr	s15, [r3]
 8004494:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004498:	4baf      	ldr	r3, [pc, #700]	; (8004758 <TrajectoryGenerator+0x5b8>)
 800449a:	edd3 7a00 	vldr	s15, [r3]
 800449e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80044a2:	ee17 0a90 	vmov	r0, s15
 80044a6:	f7fc f857 	bl	8000558 <__aeabi_f2d>
 80044aa:	4604      	mov	r4, r0
 80044ac:	460d      	mov	r5, r1
 80044ae:	4ba7      	ldr	r3, [pc, #668]	; (800474c <TrajectoryGenerator+0x5ac>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4618      	mov	r0, r3
 80044b4:	f7fc f850 	bl	8000558 <__aeabi_f2d>
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	4ba7      	ldr	r3, [pc, #668]	; (800475c <TrajectoryGenerator+0x5bc>)
 80044be:	f7fc f8a3 	bl	8000608 <__aeabi_dmul>
 80044c2:	4602      	mov	r2, r0
 80044c4:	460b      	mov	r3, r1
 80044c6:	4690      	mov	r8, r2
 80044c8:	4699      	mov	r9, r3
 80044ca:	4b9e      	ldr	r3, [pc, #632]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80044cc:	ed93 7a00 	vldr	s14, [r3]
 80044d0:	4b9b      	ldr	r3, [pc, #620]	; (8004740 <TrajectoryGenerator+0x5a0>)
 80044d2:	edd3 7a00 	vldr	s15, [r3]
 80044d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80044da:	ee17 0a90 	vmov	r0, s15
 80044de:	f7fc f83b 	bl	8000558 <__aeabi_f2d>
 80044e2:	4602      	mov	r2, r0
 80044e4:	460b      	mov	r3, r1
 80044e6:	4640      	mov	r0, r8
 80044e8:	4649      	mov	r1, r9
 80044ea:	f7fc f88d 	bl	8000608 <__aeabi_dmul>
 80044ee:	4602      	mov	r2, r0
 80044f0:	460b      	mov	r3, r1
 80044f2:	4690      	mov	r8, r2
 80044f4:	4699      	mov	r9, r3
 80044f6:	4b93      	ldr	r3, [pc, #588]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80044f8:	ed93 7a00 	vldr	s14, [r3]
 80044fc:	4b90      	ldr	r3, [pc, #576]	; (8004740 <TrajectoryGenerator+0x5a0>)
 80044fe:	edd3 7a00 	vldr	s15, [r3]
 8004502:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004506:	ee17 0a90 	vmov	r0, s15
 800450a:	f7fc f825 	bl	8000558 <__aeabi_f2d>
 800450e:	4602      	mov	r2, r0
 8004510:	460b      	mov	r3, r1
 8004512:	4640      	mov	r0, r8
 8004514:	4649      	mov	r1, r9
 8004516:	f7fc f877 	bl	8000608 <__aeabi_dmul>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4620      	mov	r0, r4
 8004520:	4629      	mov	r1, r5
 8004522:	f7fb febb 	bl	800029c <__adddf3>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	4610      	mov	r0, r2
 800452c:	4619      	mov	r1, r3
 800452e:	f7fc fb63 	bl	8000bf8 <__aeabi_d2f>
 8004532:	4603      	mov	r3, r0
 8004534:	4a8a      	ldr	r2, [pc, #552]	; (8004760 <TrajectoryGenerator+0x5c0>)
 8004536:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 8004538:	4b89      	ldr	r3, [pc, #548]	; (8004760 <TrajectoryGenerator+0x5c0>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4a89      	ldr	r2, [pc, #548]	; (8004764 <TrajectoryGenerator+0x5c4>)
 800453e:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 8004540:	4b84      	ldr	r3, [pc, #528]	; (8004754 <TrajectoryGenerator+0x5b4>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	4a88      	ldr	r2, [pc, #544]	; (8004768 <TrajectoryGenerator+0x5c8>)
 8004546:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8004548:	4b7e      	ldr	r3, [pc, #504]	; (8004744 <TrajectoryGenerator+0x5a4>)
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4618      	mov	r0, r3
 800454e:	f7fc f803 	bl	8000558 <__aeabi_f2d>
 8004552:	a377      	add	r3, pc, #476	; (adr r3, 8004730 <TrajectoryGenerator+0x590>)
 8004554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004558:	f7fb fea0 	bl	800029c <__adddf3>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4610      	mov	r0, r2
 8004562:	4619      	mov	r1, r3
 8004564:	f7fc fb48 	bl	8000bf8 <__aeabi_d2f>
 8004568:	4603      	mov	r3, r0
 800456a:	4a76      	ldr	r2, [pc, #472]	; (8004744 <TrajectoryGenerator+0x5a4>)
 800456c:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 800456e:	e33a      	b.n	8004be6 <TrajectoryGenerator+0xa46>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 8004570:	4b72      	ldr	r3, [pc, #456]	; (800473c <TrajectoryGenerator+0x59c>)
 8004572:	ed93 7a00 	vldr	s14, [r3]
 8004576:	4b72      	ldr	r3, [pc, #456]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004578:	edd3 7a00 	vldr	s15, [r3]
 800457c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004580:	4b70      	ldr	r3, [pc, #448]	; (8004744 <TrajectoryGenerator+0x5a4>)
 8004582:	edd3 7a00 	vldr	s15, [r3]
 8004586:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800458a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800458e:	f140 80b5 	bpl.w	80046fc <TrajectoryGenerator+0x55c>
 8004592:	4b6a      	ldr	r3, [pc, #424]	; (800473c <TrajectoryGenerator+0x59c>)
 8004594:	edd3 7a00 	vldr	s15, [r3]
 8004598:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800459c:	4b68      	ldr	r3, [pc, #416]	; (8004740 <TrajectoryGenerator+0x5a0>)
 800459e:	edd3 7a00 	vldr	s15, [r3]
 80045a2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a6:	4b67      	ldr	r3, [pc, #412]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80045a8:	edd3 7a00 	vldr	s15, [r3]
 80045ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b4:	f2c0 80a2 	blt.w	80046fc <TrajectoryGenerator+0x55c>
			  setacc = -qdd_max;
 80045b8:	4b63      	ldr	r3, [pc, #396]	; (8004748 <TrajectoryGenerator+0x5a8>)
 80045ba:	edd3 7a00 	vldr	s15, [r3]
 80045be:	eef1 7a67 	vneg.f32	s15, s15
 80045c2:	4b62      	ldr	r3, [pc, #392]	; (800474c <TrajectoryGenerator+0x5ac>)
 80045c4:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 80045c8:	4b5e      	ldr	r3, [pc, #376]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80045ca:	ed93 7a00 	vldr	s14, [r3]
 80045ce:	4b5c      	ldr	r3, [pc, #368]	; (8004740 <TrajectoryGenerator+0x5a0>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045d8:	4b58      	ldr	r3, [pc, #352]	; (800473c <TrajectoryGenerator+0x59c>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80045e2:	4b5a      	ldr	r3, [pc, #360]	; (800474c <TrajectoryGenerator+0x5ac>)
 80045e4:	edd3 7a00 	vldr	s15, [r3]
 80045e8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80045ec:	4b5e      	ldr	r3, [pc, #376]	; (8004768 <TrajectoryGenerator+0x5c8>)
 80045ee:	edd3 7a00 	vldr	s15, [r3]
 80045f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80045f6:	4b57      	ldr	r3, [pc, #348]	; (8004754 <TrajectoryGenerator+0x5b4>)
 80045f8:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 80045fc:	4b51      	ldr	r3, [pc, #324]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80045fe:	ed93 7a00 	vldr	s14, [r3]
 8004602:	4b4f      	ldr	r3, [pc, #316]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004604:	edd3 7a00 	vldr	s15, [r3]
 8004608:	ee37 7a67 	vsub.f32	s14, s14, s15
 800460c:	4b4b      	ldr	r3, [pc, #300]	; (800473c <TrajectoryGenerator+0x59c>)
 800460e:	edd3 7a00 	vldr	s15, [r3]
 8004612:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004616:	4b54      	ldr	r3, [pc, #336]	; (8004768 <TrajectoryGenerator+0x5c8>)
 8004618:	edd3 7a00 	vldr	s15, [r3]
 800461c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004620:	4b50      	ldr	r3, [pc, #320]	; (8004764 <TrajectoryGenerator+0x5c4>)
 8004622:	edd3 7a00 	vldr	s15, [r3]
 8004626:	ee77 7a27 	vadd.f32	s15, s14, s15
 800462a:	ee17 0a90 	vmov	r0, s15
 800462e:	f7fb ff93 	bl	8000558 <__aeabi_f2d>
 8004632:	4604      	mov	r4, r0
 8004634:	460d      	mov	r5, r1
 8004636:	4b45      	ldr	r3, [pc, #276]	; (800474c <TrajectoryGenerator+0x5ac>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7fb ff8c 	bl	8000558 <__aeabi_f2d>
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	4b45      	ldr	r3, [pc, #276]	; (800475c <TrajectoryGenerator+0x5bc>)
 8004646:	f7fb ffdf 	bl	8000608 <__aeabi_dmul>
 800464a:	4602      	mov	r2, r0
 800464c:	460b      	mov	r3, r1
 800464e:	4690      	mov	r8, r2
 8004650:	4699      	mov	r9, r3
 8004652:	4b3c      	ldr	r3, [pc, #240]	; (8004744 <TrajectoryGenerator+0x5a4>)
 8004654:	ed93 7a00 	vldr	s14, [r3]
 8004658:	4b39      	ldr	r3, [pc, #228]	; (8004740 <TrajectoryGenerator+0x5a0>)
 800465a:	edd3 7a00 	vldr	s15, [r3]
 800465e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004662:	4b36      	ldr	r3, [pc, #216]	; (800473c <TrajectoryGenerator+0x59c>)
 8004664:	edd3 7a00 	vldr	s15, [r3]
 8004668:	ee77 7a67 	vsub.f32	s15, s14, s15
 800466c:	ee17 0a90 	vmov	r0, s15
 8004670:	f7fb ff72 	bl	8000558 <__aeabi_f2d>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4640      	mov	r0, r8
 800467a:	4649      	mov	r1, r9
 800467c:	f7fb ffc4 	bl	8000608 <__aeabi_dmul>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4690      	mov	r8, r2
 8004686:	4699      	mov	r9, r3
 8004688:	4b2e      	ldr	r3, [pc, #184]	; (8004744 <TrajectoryGenerator+0x5a4>)
 800468a:	ed93 7a00 	vldr	s14, [r3]
 800468e:	4b2c      	ldr	r3, [pc, #176]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004690:	edd3 7a00 	vldr	s15, [r3]
 8004694:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004698:	4b28      	ldr	r3, [pc, #160]	; (800473c <TrajectoryGenerator+0x59c>)
 800469a:	edd3 7a00 	vldr	s15, [r3]
 800469e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046a2:	ee17 0a90 	vmov	r0, s15
 80046a6:	f7fb ff57 	bl	8000558 <__aeabi_f2d>
 80046aa:	4602      	mov	r2, r0
 80046ac:	460b      	mov	r3, r1
 80046ae:	4640      	mov	r0, r8
 80046b0:	4649      	mov	r1, r9
 80046b2:	f7fb ffa9 	bl	8000608 <__aeabi_dmul>
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4620      	mov	r0, r4
 80046bc:	4629      	mov	r1, r5
 80046be:	f7fb fded 	bl	800029c <__adddf3>
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4610      	mov	r0, r2
 80046c8:	4619      	mov	r1, r3
 80046ca:	f7fc fa95 	bl	8000bf8 <__aeabi_d2f>
 80046ce:	4603      	mov	r3, r0
 80046d0:	4a23      	ldr	r2, [pc, #140]	; (8004760 <TrajectoryGenerator+0x5c0>)
 80046d2:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 80046d4:	4b1b      	ldr	r3, [pc, #108]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb ff3d 	bl	8000558 <__aeabi_f2d>
 80046de:	a314      	add	r3, pc, #80	; (adr r3, 8004730 <TrajectoryGenerator+0x590>)
 80046e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046e4:	f7fb fdda 	bl	800029c <__adddf3>
 80046e8:	4602      	mov	r2, r0
 80046ea:	460b      	mov	r3, r1
 80046ec:	4610      	mov	r0, r2
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7fc fa82 	bl	8000bf8 <__aeabi_d2f>
 80046f4:	4603      	mov	r3, r0
 80046f6:	4a13      	ldr	r2, [pc, #76]	; (8004744 <TrajectoryGenerator+0x5a4>)
 80046f8:	6013      	str	r3, [r2, #0]
		break;
 80046fa:	e274      	b.n	8004be6 <TrajectoryGenerator+0xa46>
		  else if(time > (2*t_half) + initime){
 80046fc:	4b0f      	ldr	r3, [pc, #60]	; (800473c <TrajectoryGenerator+0x59c>)
 80046fe:	edd3 7a00 	vldr	s15, [r3]
 8004702:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004706:	4b0e      	ldr	r3, [pc, #56]	; (8004740 <TrajectoryGenerator+0x5a0>)
 8004708:	edd3 7a00 	vldr	s15, [r3]
 800470c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004710:	4b0c      	ldr	r3, [pc, #48]	; (8004744 <TrajectoryGenerator+0x5a4>)
 8004712:	edd3 7a00 	vldr	s15, [r3]
 8004716:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800471a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800471e:	d400      	bmi.n	8004722 <TrajectoryGenerator+0x582>
		break;
 8004720:	e261      	b.n	8004be6 <TrajectoryGenerator+0xa46>
			  setposition = qf;
 8004722:	4b12      	ldr	r3, [pc, #72]	; (800476c <TrajectoryGenerator+0x5cc>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a0e      	ldr	r2, [pc, #56]	; (8004760 <TrajectoryGenerator+0x5c0>)
 8004728:	6013      	str	r3, [r2, #0]
		break;
 800472a:	e25c      	b.n	8004be6 <TrajectoryGenerator+0xa46>
 800472c:	f3af 8000 	nop.w
 8004730:	d2f1a9fc 	.word	0xd2f1a9fc
 8004734:	3f50624d 	.word	0x3f50624d
 8004738:	200009b4 	.word	0x200009b4
 800473c:	2000098c 	.word	0x2000098c
 8004740:	20000988 	.word	0x20000988
 8004744:	20000978 	.word	0x20000978
 8004748:	20000214 	.word	0x20000214
 800474c:	200009f4 	.word	0x200009f4
 8004750:	20000984 	.word	0x20000984
 8004754:	200009f0 	.word	0x200009f0
 8004758:	20000980 	.word	0x20000980
 800475c:	3fe00000 	.word	0x3fe00000
 8004760:	200009c8 	.word	0x200009c8
 8004764:	20000998 	.word	0x20000998
 8004768:	20000990 	.word	0x20000990
 800476c:	2000097c 	.word	0x2000097c

	case 2:
		PIDFrag = 1;
 8004770:	4b87      	ldr	r3, [pc, #540]	; (8004990 <TrajectoryGenerator+0x7f0>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]
		 if(time <= tacc + initime)
 8004776:	4b87      	ldr	r3, [pc, #540]	; (8004994 <TrajectoryGenerator+0x7f4>)
 8004778:	ed93 7a00 	vldr	s14, [r3]
 800477c:	4b86      	ldr	r3, [pc, #536]	; (8004998 <TrajectoryGenerator+0x7f8>)
 800477e:	edd3 7a00 	vldr	s15, [r3]
 8004782:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004786:	4b85      	ldr	r3, [pc, #532]	; (800499c <TrajectoryGenerator+0x7fc>)
 8004788:	edd3 7a00 	vldr	s15, [r3]
 800478c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004794:	f2c0 8092 	blt.w	80048bc <TrajectoryGenerator+0x71c>
		 {
			 setacc = qdd_max;
 8004798:	4b81      	ldr	r3, [pc, #516]	; (80049a0 <TrajectoryGenerator+0x800>)
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	4a81      	ldr	r2, [pc, #516]	; (80049a4 <TrajectoryGenerator+0x804>)
 800479e:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 80047a0:	4b7e      	ldr	r3, [pc, #504]	; (800499c <TrajectoryGenerator+0x7fc>)
 80047a2:	ed93 7a00 	vldr	s14, [r3]
 80047a6:	4b7c      	ldr	r3, [pc, #496]	; (8004998 <TrajectoryGenerator+0x7f8>)
 80047a8:	edd3 7a00 	vldr	s15, [r3]
 80047ac:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047b0:	4b7c      	ldr	r3, [pc, #496]	; (80049a4 <TrajectoryGenerator+0x804>)
 80047b2:	edd3 7a00 	vldr	s15, [r3]
 80047b6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047ba:	4b7b      	ldr	r3, [pc, #492]	; (80049a8 <TrajectoryGenerator+0x808>)
 80047bc:	edd3 7a00 	vldr	s15, [r3]
 80047c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047c4:	4b79      	ldr	r3, [pc, #484]	; (80049ac <TrajectoryGenerator+0x80c>)
 80047c6:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 80047ca:	4b74      	ldr	r3, [pc, #464]	; (800499c <TrajectoryGenerator+0x7fc>)
 80047cc:	ed93 7a00 	vldr	s14, [r3]
 80047d0:	4b71      	ldr	r3, [pc, #452]	; (8004998 <TrajectoryGenerator+0x7f8>)
 80047d2:	edd3 7a00 	vldr	s15, [r3]
 80047d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80047da:	4b73      	ldr	r3, [pc, #460]	; (80049a8 <TrajectoryGenerator+0x808>)
 80047dc:	edd3 7a00 	vldr	s15, [r3]
 80047e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80047e4:	4b72      	ldr	r3, [pc, #456]	; (80049b0 <TrajectoryGenerator+0x810>)
 80047e6:	edd3 7a00 	vldr	s15, [r3]
 80047ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80047ee:	ee17 0a90 	vmov	r0, s15
 80047f2:	f7fb feb1 	bl	8000558 <__aeabi_f2d>
 80047f6:	4604      	mov	r4, r0
 80047f8:	460d      	mov	r5, r1
 80047fa:	4b6a      	ldr	r3, [pc, #424]	; (80049a4 <TrajectoryGenerator+0x804>)
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4618      	mov	r0, r3
 8004800:	f7fb feaa 	bl	8000558 <__aeabi_f2d>
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	4b6a      	ldr	r3, [pc, #424]	; (80049b4 <TrajectoryGenerator+0x814>)
 800480a:	f7fb fefd 	bl	8000608 <__aeabi_dmul>
 800480e:	4602      	mov	r2, r0
 8004810:	460b      	mov	r3, r1
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4b61      	ldr	r3, [pc, #388]	; (800499c <TrajectoryGenerator+0x7fc>)
 8004818:	ed93 7a00 	vldr	s14, [r3]
 800481c:	4b5e      	ldr	r3, [pc, #376]	; (8004998 <TrajectoryGenerator+0x7f8>)
 800481e:	edd3 7a00 	vldr	s15, [r3]
 8004822:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004826:	ee17 0a90 	vmov	r0, s15
 800482a:	f7fb fe95 	bl	8000558 <__aeabi_f2d>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	f7fb fee7 	bl	8000608 <__aeabi_dmul>
 800483a:	4602      	mov	r2, r0
 800483c:	460b      	mov	r3, r1
 800483e:	4690      	mov	r8, r2
 8004840:	4699      	mov	r9, r3
 8004842:	4b56      	ldr	r3, [pc, #344]	; (800499c <TrajectoryGenerator+0x7fc>)
 8004844:	ed93 7a00 	vldr	s14, [r3]
 8004848:	4b53      	ldr	r3, [pc, #332]	; (8004998 <TrajectoryGenerator+0x7f8>)
 800484a:	edd3 7a00 	vldr	s15, [r3]
 800484e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004852:	ee17 0a90 	vmov	r0, s15
 8004856:	f7fb fe7f 	bl	8000558 <__aeabi_f2d>
 800485a:	4602      	mov	r2, r0
 800485c:	460b      	mov	r3, r1
 800485e:	4640      	mov	r0, r8
 8004860:	4649      	mov	r1, r9
 8004862:	f7fb fed1 	bl	8000608 <__aeabi_dmul>
 8004866:	4602      	mov	r2, r0
 8004868:	460b      	mov	r3, r1
 800486a:	4620      	mov	r0, r4
 800486c:	4629      	mov	r1, r5
 800486e:	f7fb fd15 	bl	800029c <__adddf3>
 8004872:	4602      	mov	r2, r0
 8004874:	460b      	mov	r3, r1
 8004876:	4610      	mov	r0, r2
 8004878:	4619      	mov	r1, r3
 800487a:	f7fc f9bd 	bl	8000bf8 <__aeabi_d2f>
 800487e:	4603      	mov	r3, r0
 8004880:	4a4d      	ldr	r2, [pc, #308]	; (80049b8 <TrajectoryGenerator+0x818>)
 8004882:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 8004884:	4b4c      	ldr	r3, [pc, #304]	; (80049b8 <TrajectoryGenerator+0x818>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4a4c      	ldr	r2, [pc, #304]	; (80049bc <TrajectoryGenerator+0x81c>)
 800488a:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 800488c:	4b47      	ldr	r3, [pc, #284]	; (80049ac <TrajectoryGenerator+0x80c>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <TrajectoryGenerator+0x820>)
 8004892:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004894:	4b41      	ldr	r3, [pc, #260]	; (800499c <TrajectoryGenerator+0x7fc>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4618      	mov	r0, r3
 800489a:	f7fb fe5d 	bl	8000558 <__aeabi_f2d>
 800489e:	a33a      	add	r3, pc, #232	; (adr r3, 8004988 <TrajectoryGenerator+0x7e8>)
 80048a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048a4:	f7fb fcfa 	bl	800029c <__adddf3>
 80048a8:	4602      	mov	r2, r0
 80048aa:	460b      	mov	r3, r1
 80048ac:	4610      	mov	r0, r2
 80048ae:	4619      	mov	r1, r3
 80048b0:	f7fc f9a2 	bl	8000bf8 <__aeabi_d2f>
 80048b4:	4603      	mov	r3, r0
 80048b6:	4a39      	ldr	r2, [pc, #228]	; (800499c <TrajectoryGenerator+0x7fc>)
 80048b8:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 80048ba:	e194      	b.n	8004be6 <TrajectoryGenerator+0xa46>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 80048bc:	4b35      	ldr	r3, [pc, #212]	; (8004994 <TrajectoryGenerator+0x7f4>)
 80048be:	ed93 7a00 	vldr	s14, [r3]
 80048c2:	4b35      	ldr	r3, [pc, #212]	; (8004998 <TrajectoryGenerator+0x7f8>)
 80048c4:	edd3 7a00 	vldr	s15, [r3]
 80048c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048cc:	4b33      	ldr	r3, [pc, #204]	; (800499c <TrajectoryGenerator+0x7fc>)
 80048ce:	edd3 7a00 	vldr	s15, [r3]
 80048d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80048d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048da:	d57b      	bpl.n	80049d4 <TrajectoryGenerator+0x834>
 80048dc:	4b2e      	ldr	r3, [pc, #184]	; (8004998 <TrajectoryGenerator+0x7f8>)
 80048de:	ed93 7a00 	vldr	s14, [r3]
 80048e2:	4b2c      	ldr	r3, [pc, #176]	; (8004994 <TrajectoryGenerator+0x7f4>)
 80048e4:	edd3 7a00 	vldr	s15, [r3]
 80048e8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048ec:	4b35      	ldr	r3, [pc, #212]	; (80049c4 <TrajectoryGenerator+0x824>)
 80048ee:	edd3 7a00 	vldr	s15, [r3]
 80048f2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80048f6:	4b29      	ldr	r3, [pc, #164]	; (800499c <TrajectoryGenerator+0x7fc>)
 80048f8:	edd3 7a00 	vldr	s15, [r3]
 80048fc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	db66      	blt.n	80049d4 <TrajectoryGenerator+0x834>
			 setacc = 0;
 8004906:	4b27      	ldr	r3, [pc, #156]	; (80049a4 <TrajectoryGenerator+0x804>)
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 800490e:	4b2e      	ldr	r3, [pc, #184]	; (80049c8 <TrajectoryGenerator+0x828>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a26      	ldr	r2, [pc, #152]	; (80049ac <TrajectoryGenerator+0x80c>)
 8004914:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 8004916:	4b21      	ldr	r3, [pc, #132]	; (800499c <TrajectoryGenerator+0x7fc>)
 8004918:	ed93 7a00 	vldr	s14, [r3]
 800491c:	4b1e      	ldr	r3, [pc, #120]	; (8004998 <TrajectoryGenerator+0x7f8>)
 800491e:	edd3 7a00 	vldr	s15, [r3]
 8004922:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004926:	4b1b      	ldr	r3, [pc, #108]	; (8004994 <TrajectoryGenerator+0x7f4>)
 8004928:	edd3 7a00 	vldr	s15, [r3]
 800492c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004930:	4b25      	ldr	r3, [pc, #148]	; (80049c8 <TrajectoryGenerator+0x828>)
 8004932:	edd3 7a00 	vldr	s15, [r3]
 8004936:	ee27 7a27 	vmul.f32	s14, s14, s15
 800493a:	4b20      	ldr	r3, [pc, #128]	; (80049bc <TrajectoryGenerator+0x81c>)
 800493c:	edd3 7a00 	vldr	s15, [r3]
 8004940:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004944:	4b1c      	ldr	r3, [pc, #112]	; (80049b8 <TrajectoryGenerator+0x818>)
 8004946:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 800494a:	4b1b      	ldr	r3, [pc, #108]	; (80049b8 <TrajectoryGenerator+0x818>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a1f      	ldr	r2, [pc, #124]	; (80049cc <TrajectoryGenerator+0x82c>)
 8004950:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 8004952:	4b16      	ldr	r3, [pc, #88]	; (80049ac <TrajectoryGenerator+0x80c>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a1e      	ldr	r2, [pc, #120]	; (80049d0 <TrajectoryGenerator+0x830>)
 8004958:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 800495a:	4b10      	ldr	r3, [pc, #64]	; (800499c <TrajectoryGenerator+0x7fc>)
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	4618      	mov	r0, r3
 8004960:	f7fb fdfa 	bl	8000558 <__aeabi_f2d>
 8004964:	a308      	add	r3, pc, #32	; (adr r3, 8004988 <TrajectoryGenerator+0x7e8>)
 8004966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800496a:	f7fb fc97 	bl	800029c <__adddf3>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4610      	mov	r0, r2
 8004974:	4619      	mov	r1, r3
 8004976:	f7fc f93f 	bl	8000bf8 <__aeabi_d2f>
 800497a:	4603      	mov	r3, r0
 800497c:	4a07      	ldr	r2, [pc, #28]	; (800499c <TrajectoryGenerator+0x7fc>)
 800497e:	6013      	str	r3, [r2, #0]
 8004980:	e12f      	b.n	8004be2 <TrajectoryGenerator+0xa42>
 8004982:	bf00      	nop
 8004984:	f3af 8000 	nop.w
 8004988:	d2f1a9fc 	.word	0xd2f1a9fc
 800498c:	3f50624d 	.word	0x3f50624d
 8004990:	200009b4 	.word	0x200009b4
 8004994:	200009a0 	.word	0x200009a0
 8004998:	20000988 	.word	0x20000988
 800499c:	20000978 	.word	0x20000978
 80049a0:	20000214 	.word	0x20000214
 80049a4:	200009f4 	.word	0x200009f4
 80049a8:	20000984 	.word	0x20000984
 80049ac:	200009f0 	.word	0x200009f0
 80049b0:	20000980 	.word	0x20000980
 80049b4:	3fe00000 	.word	0x3fe00000
 80049b8:	200009c8 	.word	0x200009c8
 80049bc:	20000998 	.word	0x20000998
 80049c0:	20000990 	.word	0x20000990
 80049c4:	200009ac 	.word	0x200009ac
 80049c8:	20000210 	.word	0x20000210
 80049cc:	2000099c 	.word	0x2000099c
 80049d0:	20000994 	.word	0x20000994
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 80049d4:	4b88      	ldr	r3, [pc, #544]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 80049d6:	ed93 7a00 	vldr	s14, [r3]
 80049da:	4b88      	ldr	r3, [pc, #544]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 80049dc:	edd3 7a00 	vldr	s15, [r3]
 80049e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049e4:	4b86      	ldr	r3, [pc, #536]	; (8004c00 <TrajectoryGenerator+0xa60>)
 80049e6:	edd3 7a00 	vldr	s15, [r3]
 80049ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80049ee:	4b85      	ldr	r3, [pc, #532]	; (8004c04 <TrajectoryGenerator+0xa64>)
 80049f0:	edd3 7a00 	vldr	s15, [r3]
 80049f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80049f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049fc:	f140 80d1 	bpl.w	8004ba2 <TrajectoryGenerator+0xa02>
 8004a00:	4b7d      	ldr	r3, [pc, #500]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004a02:	ed93 7a00 	vldr	s14, [r3]
 8004a06:	4b7d      	ldr	r3, [pc, #500]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004a08:	edd3 7a00 	vldr	s15, [r3]
 8004a0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a10:	4b7d      	ldr	r3, [pc, #500]	; (8004c08 <TrajectoryGenerator+0xa68>)
 8004a12:	edd3 7a00 	vldr	s15, [r3]
 8004a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a1a:	4b79      	ldr	r3, [pc, #484]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004a1c:	edd3 7a00 	vldr	s15, [r3]
 8004a20:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004a24:	4b77      	ldr	r3, [pc, #476]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004a26:	edd3 7a00 	vldr	s15, [r3]
 8004a2a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004a2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a32:	f2c0 80b6 	blt.w	8004ba2 <TrajectoryGenerator+0xa02>
			 setacc = -qdd_max;
 8004a36:	4b75      	ldr	r3, [pc, #468]	; (8004c0c <TrajectoryGenerator+0xa6c>)
 8004a38:	edd3 7a00 	vldr	s15, [r3]
 8004a3c:	eef1 7a67 	vneg.f32	s15, s15
 8004a40:	4b73      	ldr	r3, [pc, #460]	; (8004c10 <TrajectoryGenerator+0xa70>)
 8004a42:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 8004a46:	4b6f      	ldr	r3, [pc, #444]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004a48:	ed93 7a00 	vldr	s14, [r3]
 8004a4c:	4b6c      	ldr	r3, [pc, #432]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004a4e:	edd3 7a00 	vldr	s15, [r3]
 8004a52:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a56:	4b68      	ldr	r3, [pc, #416]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004a58:	edd3 7a00 	vldr	s15, [r3]
 8004a5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a60:	4b66      	ldr	r3, [pc, #408]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004a62:	edd3 7a00 	vldr	s15, [r3]
 8004a66:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a6a:	4b69      	ldr	r3, [pc, #420]	; (8004c10 <TrajectoryGenerator+0xa70>)
 8004a6c:	edd3 7a00 	vldr	s15, [r3]
 8004a70:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004a74:	4b67      	ldr	r3, [pc, #412]	; (8004c14 <TrajectoryGenerator+0xa74>)
 8004a76:	edd3 7a00 	vldr	s15, [r3]
 8004a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004a7e:	4b66      	ldr	r3, [pc, #408]	; (8004c18 <TrajectoryGenerator+0xa78>)
 8004a80:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8004a84:	4b5f      	ldr	r3, [pc, #380]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004a86:	ed93 7a00 	vldr	s14, [r3]
 8004a8a:	4b5d      	ldr	r3, [pc, #372]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004a8c:	edd3 7a00 	vldr	s15, [r3]
 8004a90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a94:	4b58      	ldr	r3, [pc, #352]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004a96:	edd3 7a00 	vldr	s15, [r3]
 8004a9a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004a9e:	4b57      	ldr	r3, [pc, #348]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004aa0:	edd3 7a00 	vldr	s15, [r3]
 8004aa4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004aa8:	4b5a      	ldr	r3, [pc, #360]	; (8004c14 <TrajectoryGenerator+0xa74>)
 8004aaa:	edd3 7a00 	vldr	s15, [r3]
 8004aae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004ab2:	4b5a      	ldr	r3, [pc, #360]	; (8004c1c <TrajectoryGenerator+0xa7c>)
 8004ab4:	edd3 7a00 	vldr	s15, [r3]
 8004ab8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004abc:	ee17 0a90 	vmov	r0, s15
 8004ac0:	f7fb fd4a 	bl	8000558 <__aeabi_f2d>
 8004ac4:	4604      	mov	r4, r0
 8004ac6:	460d      	mov	r5, r1
 8004ac8:	4b51      	ldr	r3, [pc, #324]	; (8004c10 <TrajectoryGenerator+0xa70>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4618      	mov	r0, r3
 8004ace:	f7fb fd43 	bl	8000558 <__aeabi_f2d>
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	4b52      	ldr	r3, [pc, #328]	; (8004c20 <TrajectoryGenerator+0xa80>)
 8004ad8:	f7fb fd96 	bl	8000608 <__aeabi_dmul>
 8004adc:	4602      	mov	r2, r0
 8004ade:	460b      	mov	r3, r1
 8004ae0:	4690      	mov	r8, r2
 8004ae2:	4699      	mov	r9, r3
 8004ae4:	4b47      	ldr	r3, [pc, #284]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004ae6:	ed93 7a00 	vldr	s14, [r3]
 8004aea:	4b45      	ldr	r3, [pc, #276]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004aec:	edd3 7a00 	vldr	s15, [r3]
 8004af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004af4:	4b40      	ldr	r3, [pc, #256]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004af6:	edd3 7a00 	vldr	s15, [r3]
 8004afa:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004afe:	4b3f      	ldr	r3, [pc, #252]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004b00:	edd3 7a00 	vldr	s15, [r3]
 8004b04:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b08:	ee17 0a90 	vmov	r0, s15
 8004b0c:	f7fb fd24 	bl	8000558 <__aeabi_f2d>
 8004b10:	4602      	mov	r2, r0
 8004b12:	460b      	mov	r3, r1
 8004b14:	4640      	mov	r0, r8
 8004b16:	4649      	mov	r1, r9
 8004b18:	f7fb fd76 	bl	8000608 <__aeabi_dmul>
 8004b1c:	4602      	mov	r2, r0
 8004b1e:	460b      	mov	r3, r1
 8004b20:	4690      	mov	r8, r2
 8004b22:	4699      	mov	r9, r3
 8004b24:	4b37      	ldr	r3, [pc, #220]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004b26:	ed93 7a00 	vldr	s14, [r3]
 8004b2a:	4b35      	ldr	r3, [pc, #212]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004b2c:	edd3 7a00 	vldr	s15, [r3]
 8004b30:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b34:	4b30      	ldr	r3, [pc, #192]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004b36:	edd3 7a00 	vldr	s15, [r3]
 8004b3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004b3e:	4b2f      	ldr	r3, [pc, #188]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004b40:	edd3 7a00 	vldr	s15, [r3]
 8004b44:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b48:	ee17 0a90 	vmov	r0, s15
 8004b4c:	f7fb fd04 	bl	8000558 <__aeabi_f2d>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	4640      	mov	r0, r8
 8004b56:	4649      	mov	r1, r9
 8004b58:	f7fb fd56 	bl	8000608 <__aeabi_dmul>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	460b      	mov	r3, r1
 8004b60:	4620      	mov	r0, r4
 8004b62:	4629      	mov	r1, r5
 8004b64:	f7fb fb9a 	bl	800029c <__adddf3>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f7fc f842 	bl	8000bf8 <__aeabi_d2f>
 8004b74:	4603      	mov	r3, r0
 8004b76:	4a2b      	ldr	r2, [pc, #172]	; (8004c24 <TrajectoryGenerator+0xa84>)
 8004b78:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004b7a:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4618      	mov	r0, r3
 8004b80:	f7fb fcea 	bl	8000558 <__aeabi_f2d>
 8004b84:	a31a      	add	r3, pc, #104	; (adr r3, 8004bf0 <TrajectoryGenerator+0xa50>)
 8004b86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b8a:	f7fb fb87 	bl	800029c <__adddf3>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4610      	mov	r0, r2
 8004b94:	4619      	mov	r1, r3
 8004b96:	f7fc f82f 	bl	8000bf8 <__aeabi_d2f>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	e01f      	b.n	8004be2 <TrajectoryGenerator+0xa42>
		 else if(time > tacc+tconst+tdec+initime){
 8004ba2:	4b15      	ldr	r3, [pc, #84]	; (8004bf8 <TrajectoryGenerator+0xa58>)
 8004ba4:	ed93 7a00 	vldr	s14, [r3]
 8004ba8:	4b14      	ldr	r3, [pc, #80]	; (8004bfc <TrajectoryGenerator+0xa5c>)
 8004baa:	edd3 7a00 	vldr	s15, [r3]
 8004bae:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bb2:	4b15      	ldr	r3, [pc, #84]	; (8004c08 <TrajectoryGenerator+0xa68>)
 8004bb4:	edd3 7a00 	vldr	s15, [r3]
 8004bb8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bbc:	4b10      	ldr	r3, [pc, #64]	; (8004c00 <TrajectoryGenerator+0xa60>)
 8004bbe:	edd3 7a00 	vldr	s15, [r3]
 8004bc2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004bc6:	4b0f      	ldr	r3, [pc, #60]	; (8004c04 <TrajectoryGenerator+0xa64>)
 8004bc8:	edd3 7a00 	vldr	s15, [r3]
 8004bcc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bd4:	d400      	bmi.n	8004bd8 <TrajectoryGenerator+0xa38>
		 break;
 8004bd6:	e006      	b.n	8004be6 <TrajectoryGenerator+0xa46>
			 setposition = qf;
 8004bd8:	4b13      	ldr	r3, [pc, #76]	; (8004c28 <TrajectoryGenerator+0xa88>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a11      	ldr	r2, [pc, #68]	; (8004c24 <TrajectoryGenerator+0xa84>)
 8004bde:	6013      	str	r3, [r2, #0]
		 break;
 8004be0:	e001      	b.n	8004be6 <TrajectoryGenerator+0xa46>
 8004be2:	e000      	b.n	8004be6 <TrajectoryGenerator+0xa46>
	case 3: // wait state
//		setposition = position;
		break;
 8004be4:	bf00      	nop
	}

}
 8004be6:	bf00      	nop
 8004be8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004bec:	f3af 8000 	nop.w
 8004bf0:	d2f1a9fc 	.word	0xd2f1a9fc
 8004bf4:	3f50624d 	.word	0x3f50624d
 8004bf8:	200009a0 	.word	0x200009a0
 8004bfc:	200009ac 	.word	0x200009ac
 8004c00:	20000988 	.word	0x20000988
 8004c04:	20000978 	.word	0x20000978
 8004c08:	200009b0 	.word	0x200009b0
 8004c0c:	20000214 	.word	0x20000214
 8004c10:	200009f4 	.word	0x200009f4
 8004c14:	20000994 	.word	0x20000994
 8004c18:	200009f0 	.word	0x200009f0
 8004c1c:	2000099c 	.word	0x2000099c
 8004c20:	3fe00000 	.word	0x3fe00000
 8004c24:	200009c8 	.word	0x200009c8
 8004c28:	2000097c 	.word	0x2000097c

08004c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004c30:	b672      	cpsid	i
}
 8004c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004c34:	e7fe      	b.n	8004c34 <Error_Handler+0x8>
	...

08004c38 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004c38:	b580      	push	{r7, lr}
 8004c3a:	b082      	sub	sp, #8
 8004c3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c3e:	2300      	movs	r3, #0
 8004c40:	607b      	str	r3, [r7, #4]
 8004c42:	4b10      	ldr	r3, [pc, #64]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c46:	4a0f      	ldr	r2, [pc, #60]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c4c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c4e:	4b0d      	ldr	r3, [pc, #52]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c56:	607b      	str	r3, [r7, #4]
 8004c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	603b      	str	r3, [r7, #0]
 8004c5e:	4b09      	ldr	r3, [pc, #36]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	4a08      	ldr	r2, [pc, #32]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c68:	6413      	str	r3, [r2, #64]	; 0x40
 8004c6a:	4b06      	ldr	r3, [pc, #24]	; (8004c84 <HAL_MspInit+0x4c>)
 8004c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c72:	603b      	str	r3, [r7, #0]
 8004c74:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004c76:	2007      	movs	r0, #7
 8004c78:	f001 f9a6 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004c7c:	bf00      	nop
 8004c7e:	3708      	adds	r7, #8
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	40023800 	.word	0x40023800

08004c88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b08a      	sub	sp, #40	; 0x28
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c90:	f107 0314 	add.w	r3, r7, #20
 8004c94:	2200      	movs	r2, #0
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	605a      	str	r2, [r3, #4]
 8004c9a:	609a      	str	r2, [r3, #8]
 8004c9c:	60da      	str	r2, [r3, #12]
 8004c9e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	4a2f      	ldr	r2, [pc, #188]	; (8004d64 <HAL_ADC_MspInit+0xdc>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d157      	bne.n	8004d5a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004caa:	2300      	movs	r3, #0
 8004cac:	613b      	str	r3, [r7, #16]
 8004cae:	4b2e      	ldr	r3, [pc, #184]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004cb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cb2:	4a2d      	ldr	r2, [pc, #180]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004cb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004cb8:	6453      	str	r3, [r2, #68]	; 0x44
 8004cba:	4b2b      	ldr	r3, [pc, #172]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004cc2:	613b      	str	r3, [r7, #16]
 8004cc4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60fb      	str	r3, [r7, #12]
 8004cca:	4b27      	ldr	r3, [pc, #156]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	4a26      	ldr	r2, [pc, #152]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004cd0:	f043 0301 	orr.w	r3, r3, #1
 8004cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004cd6:	4b24      	ldr	r3, [pc, #144]	; (8004d68 <HAL_ADC_MspInit+0xe0>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	f003 0301 	and.w	r3, r3, #1
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Joystick_Analog_X_Pin|Joystick_Analog_Y_Pin;
 8004ce2:	2303      	movs	r3, #3
 8004ce4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cee:	f107 0314 	add.w	r3, r7, #20
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	481d      	ldr	r0, [pc, #116]	; (8004d6c <HAL_ADC_MspInit+0xe4>)
 8004cf6:	f001 fdc5 	bl	8006884 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8004cfa:	4b1d      	ldr	r3, [pc, #116]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004cfc:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <HAL_ADC_MspInit+0xec>)
 8004cfe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004d00:	4b1b      	ldr	r3, [pc, #108]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d02:	2200      	movs	r2, #0
 8004d04:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d06:	4b1a      	ldr	r3, [pc, #104]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d08:	2200      	movs	r2, #0
 8004d0a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d0c:	4b18      	ldr	r3, [pc, #96]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d0e:	2200      	movs	r2, #0
 8004d10:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004d12:	4b17      	ldr	r3, [pc, #92]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d18:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d1a:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d20:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004d2a:	4b11      	ldr	r3, [pc, #68]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d30:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d38:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8004d3e:	480c      	ldr	r0, [pc, #48]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d40:	f001 f984 	bl	800604c <HAL_DMA_Init>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8004d4a:	f7ff ff6f 	bl	8004c2c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	4a07      	ldr	r2, [pc, #28]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d52:	639a      	str	r2, [r3, #56]	; 0x38
 8004d54:	4a06      	ldr	r2, [pc, #24]	; (8004d70 <HAL_ADC_MspInit+0xe8>)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004d5a:	bf00      	nop
 8004d5c:	3728      	adds	r7, #40	; 0x28
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
 8004d62:	bf00      	nop
 8004d64:	40012000 	.word	0x40012000
 8004d68:	40023800 	.word	0x40023800
 8004d6c:	40020000 	.word	0x40020000
 8004d70:	200004a0 	.word	0x200004a0
 8004d74:	40026410 	.word	0x40026410

08004d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b08a      	sub	sp, #40	; 0x28
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d80:	f107 0314 	add.w	r3, r7, #20
 8004d84:	2200      	movs	r2, #0
 8004d86:	601a      	str	r2, [r3, #0]
 8004d88:	605a      	str	r2, [r3, #4]
 8004d8a:	609a      	str	r2, [r3, #8]
 8004d8c:	60da      	str	r2, [r3, #12]
 8004d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4a21      	ldr	r2, [pc, #132]	; (8004e1c <HAL_I2C_MspInit+0xa4>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	d13c      	bne.n	8004e14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	4b20      	ldr	r3, [pc, #128]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	4a1f      	ldr	r2, [pc, #124]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004da4:	f043 0302 	orr.w	r3, r3, #2
 8004da8:	6313      	str	r3, [r2, #48]	; 0x30
 8004daa:	4b1d      	ldr	r3, [pc, #116]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	f003 0302 	and.w	r3, r3, #2
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004dbc:	2312      	movs	r3, #18
 8004dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004dc8:	2304      	movs	r3, #4
 8004dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004dcc:	f107 0314 	add.w	r3, r7, #20
 8004dd0:	4619      	mov	r1, r3
 8004dd2:	4814      	ldr	r0, [pc, #80]	; (8004e24 <HAL_I2C_MspInit+0xac>)
 8004dd4:	f001 fd56 	bl	8006884 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004dd8:	2300      	movs	r3, #0
 8004dda:	60fb      	str	r3, [r7, #12]
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de0:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004de6:	6413      	str	r3, [r2, #64]	; 0x40
 8004de8:	4b0d      	ldr	r3, [pc, #52]	; (8004e20 <HAL_I2C_MspInit+0xa8>)
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004df0:	60fb      	str	r3, [r7, #12]
 8004df2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8004df4:	2200      	movs	r2, #0
 8004df6:	2100      	movs	r1, #0
 8004df8:	201f      	movs	r0, #31
 8004dfa:	f001 f8f0 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8004dfe:	201f      	movs	r0, #31
 8004e00:	f001 f909 	bl	8006016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8004e04:	2200      	movs	r2, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	2020      	movs	r0, #32
 8004e0a:	f001 f8e8 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8004e0e:	2020      	movs	r0, #32
 8004e10:	f001 f901 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e14:	bf00      	nop
 8004e16:	3728      	adds	r7, #40	; 0x28
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	40005400 	.word	0x40005400
 8004e20:	40023800 	.word	0x40023800
 8004e24:	40020400 	.word	0x40020400

08004e28 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a12      	ldr	r2, [pc, #72]	; (8004e80 <HAL_TIM_PWM_MspInit+0x58>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d11d      	bne.n	8004e76 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	60fb      	str	r3, [r7, #12]
 8004e3e:	4b11      	ldr	r3, [pc, #68]	; (8004e84 <HAL_TIM_PWM_MspInit+0x5c>)
 8004e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e42:	4a10      	ldr	r2, [pc, #64]	; (8004e84 <HAL_TIM_PWM_MspInit+0x5c>)
 8004e44:	f043 0301 	orr.w	r3, r3, #1
 8004e48:	6453      	str	r3, [r2, #68]	; 0x44
 8004e4a:	4b0e      	ldr	r3, [pc, #56]	; (8004e84 <HAL_TIM_PWM_MspInit+0x5c>)
 8004e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e4e:	f003 0301 	and.w	r3, r3, #1
 8004e52:	60fb      	str	r3, [r7, #12]
 8004e54:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004e56:	2205      	movs	r2, #5
 8004e58:	2100      	movs	r1, #0
 8004e5a:	2018      	movs	r0, #24
 8004e5c:	f001 f8bf 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004e60:	2018      	movs	r0, #24
 8004e62:	f001 f8d8 	bl	8006016 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004e66:	2200      	movs	r2, #0
 8004e68:	2100      	movs	r1, #0
 8004e6a:	201a      	movs	r0, #26
 8004e6c:	f001 f8b7 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004e70:	201a      	movs	r0, #26
 8004e72:	f001 f8d0 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004e76:	bf00      	nop
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	40010000 	.word	0x40010000
 8004e84:	40023800 	.word	0x40023800

08004e88 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b08a      	sub	sp, #40	; 0x28
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e90:	f107 0314 	add.w	r3, r7, #20
 8004e94:	2200      	movs	r2, #0
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	605a      	str	r2, [r3, #4]
 8004e9a:	609a      	str	r2, [r3, #8]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a19      	ldr	r2, [pc, #100]	; (8004f0c <HAL_TIM_Encoder_MspInit+0x84>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d12b      	bne.n	8004f02 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
 8004eae:	4b18      	ldr	r3, [pc, #96]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	4a17      	ldr	r2, [pc, #92]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004eb4:	f043 0302 	orr.w	r3, r3, #2
 8004eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004eba:	4b15      	ldr	r3, [pc, #84]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	613b      	str	r3, [r7, #16]
 8004ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	60fb      	str	r3, [r7, #12]
 8004eca:	4b11      	ldr	r3, [pc, #68]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ece:	4a10      	ldr	r2, [pc, #64]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ed0:	f043 0301 	orr.w	r3, r3, #1
 8004ed4:	6313      	str	r3, [r2, #48]	; 0x30
 8004ed6:	4b0e      	ldr	r3, [pc, #56]	; (8004f10 <HAL_TIM_Encoder_MspInit+0x88>)
 8004ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eda:	f003 0301 	and.w	r3, r3, #1
 8004ede:	60fb      	str	r3, [r7, #12]
 8004ee0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = QEI_B_Pin|QEI_A_Pin;
 8004ee2:	23c0      	movs	r3, #192	; 0xc0
 8004ee4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eea:	2300      	movs	r3, #0
 8004eec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004ef2:	2302      	movs	r3, #2
 8004ef4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef6:	f107 0314 	add.w	r3, r7, #20
 8004efa:	4619      	mov	r1, r3
 8004efc:	4805      	ldr	r0, [pc, #20]	; (8004f14 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004efe:	f001 fcc1 	bl	8006884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004f02:	bf00      	nop
 8004f04:	3728      	adds	r7, #40	; 0x28
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	40000400 	.word	0x40000400
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40020000 	.word	0x40020000

08004f18 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b084      	sub	sp, #16
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a1c      	ldr	r2, [pc, #112]	; (8004f98 <HAL_TIM_Base_MspInit+0x80>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d116      	bne.n	8004f58 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	60fb      	str	r3, [r7, #12]
 8004f2e:	4b1b      	ldr	r3, [pc, #108]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f32:	4a1a      	ldr	r2, [pc, #104]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6453      	str	r3, [r2, #68]	; 0x44
 8004f3a:	4b18      	ldr	r3, [pc, #96]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f42:	60fb      	str	r3, [r7, #12]
 8004f44:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004f46:	2205      	movs	r2, #5
 8004f48:	2100      	movs	r1, #0
 8004f4a:	2018      	movs	r0, #24
 8004f4c:	f001 f847 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004f50:	2018      	movs	r0, #24
 8004f52:	f001 f860 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004f56:	e01a      	b.n	8004f8e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a10      	ldr	r2, [pc, #64]	; (8004fa0 <HAL_TIM_Base_MspInit+0x88>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d115      	bne.n	8004f8e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004f62:	2300      	movs	r3, #0
 8004f64:	60bb      	str	r3, [r7, #8]
 8004f66:	4b0d      	ldr	r3, [pc, #52]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	4a0c      	ldr	r2, [pc, #48]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f70:	6453      	str	r3, [r2, #68]	; 0x44
 8004f72:	4b0a      	ldr	r3, [pc, #40]	; (8004f9c <HAL_TIM_Base_MspInit+0x84>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f7a:	60bb      	str	r3, [r7, #8]
 8004f7c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004f7e:	2200      	movs	r2, #0
 8004f80:	2100      	movs	r1, #0
 8004f82:	201a      	movs	r0, #26
 8004f84:	f001 f82b 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004f88:	201a      	movs	r0, #26
 8004f8a:	f001 f844 	bl	8006016 <HAL_NVIC_EnableIRQ>
}
 8004f8e:	bf00      	nop
 8004f90:	3710      	adds	r7, #16
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop
 8004f98:	40014000 	.word	0x40014000
 8004f9c:	40023800 	.word	0x40023800
 8004fa0:	40014800 	.word	0x40014800

08004fa4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b088      	sub	sp, #32
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fac:	f107 030c 	add.w	r3, r7, #12
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	601a      	str	r2, [r3, #0]
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	609a      	str	r2, [r3, #8]
 8004fb8:	60da      	str	r2, [r3, #12]
 8004fba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	4a12      	ldr	r2, [pc, #72]	; (800500c <HAL_TIM_MspPostInit+0x68>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d11e      	bne.n	8005004 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004fc6:	2300      	movs	r3, #0
 8004fc8:	60bb      	str	r3, [r7, #8]
 8004fca:	4b11      	ldr	r3, [pc, #68]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fce:	4a10      	ldr	r2, [pc, #64]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6313      	str	r3, [r2, #48]	; 0x30
 8004fd6:	4b0e      	ldr	r3, [pc, #56]	; (8005010 <HAL_TIM_MspPostInit+0x6c>)
 8004fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	60bb      	str	r3, [r7, #8]
 8004fe0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = PWM_CH1_Pin|PWM_CH2_Pin;
 8004fe2:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fe8:	2302      	movs	r3, #2
 8004fea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fec:	2300      	movs	r3, #0
 8004fee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ff8:	f107 030c 	add.w	r3, r7, #12
 8004ffc:	4619      	mov	r1, r3
 8004ffe:	4805      	ldr	r0, [pc, #20]	; (8005014 <HAL_TIM_MspPostInit+0x70>)
 8005000:	f001 fc40 	bl	8006884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8005004:	bf00      	nop
 8005006:	3720      	adds	r7, #32
 8005008:	46bd      	mov	sp, r7
 800500a:	bd80      	pop	{r7, pc}
 800500c:	40010000 	.word	0x40010000
 8005010:	40023800 	.word	0x40023800
 8005014:	40020000 	.word	0x40020000

08005018 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b08c      	sub	sp, #48	; 0x30
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005020:	f107 031c 	add.w	r3, r7, #28
 8005024:	2200      	movs	r2, #0
 8005026:	601a      	str	r2, [r3, #0]
 8005028:	605a      	str	r2, [r3, #4]
 800502a:	609a      	str	r2, [r3, #8]
 800502c:	60da      	str	r2, [r3, #12]
 800502e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a60      	ldr	r2, [pc, #384]	; (80051b8 <HAL_UART_MspInit+0x1a0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d153      	bne.n	80050e2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800503a:	2300      	movs	r3, #0
 800503c:	61bb      	str	r3, [r7, #24]
 800503e:	4b5f      	ldr	r3, [pc, #380]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005042:	4a5e      	ldr	r2, [pc, #376]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005044:	f043 0310 	orr.w	r3, r3, #16
 8005048:	6453      	str	r3, [r2, #68]	; 0x44
 800504a:	4b5c      	ldr	r3, [pc, #368]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	f003 0310 	and.w	r3, r3, #16
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005056:	2300      	movs	r3, #0
 8005058:	617b      	str	r3, [r7, #20]
 800505a:	4b58      	ldr	r3, [pc, #352]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 800505c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800505e:	4a57      	ldr	r2, [pc, #348]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005060:	f043 0301 	orr.w	r3, r3, #1
 8005064:	6313      	str	r3, [r2, #48]	; 0x30
 8005066:	4b55      	ldr	r3, [pc, #340]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506a:	f003 0301 	and.w	r3, r3, #1
 800506e:	617b      	str	r3, [r7, #20]
 8005070:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005072:	2300      	movs	r3, #0
 8005074:	613b      	str	r3, [r7, #16]
 8005076:	4b51      	ldr	r3, [pc, #324]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005078:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507a:	4a50      	ldr	r2, [pc, #320]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 800507c:	f043 0302 	orr.w	r3, r3, #2
 8005080:	6313      	str	r3, [r2, #48]	; 0x30
 8005082:	4b4e      	ldr	r3, [pc, #312]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	613b      	str	r3, [r7, #16]
 800508c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800508e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005092:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005094:	2302      	movs	r3, #2
 8005096:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005098:	2300      	movs	r3, #0
 800509a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800509c:	2303      	movs	r3, #3
 800509e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050a0:	2307      	movs	r3, #7
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050a4:	f107 031c 	add.w	r3, r7, #28
 80050a8:	4619      	mov	r1, r3
 80050aa:	4845      	ldr	r0, [pc, #276]	; (80051c0 <HAL_UART_MspInit+0x1a8>)
 80050ac:	f001 fbea 	bl	8006884 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80050b0:	2380      	movs	r3, #128	; 0x80
 80050b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050b4:	2302      	movs	r3, #2
 80050b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80050bc:	2303      	movs	r3, #3
 80050be:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050c0:	2307      	movs	r3, #7
 80050c2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050c4:	f107 031c 	add.w	r3, r7, #28
 80050c8:	4619      	mov	r1, r3
 80050ca:	483e      	ldr	r0, [pc, #248]	; (80051c4 <HAL_UART_MspInit+0x1ac>)
 80050cc:	f001 fbda 	bl	8006884 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80050d0:	2200      	movs	r2, #0
 80050d2:	2100      	movs	r1, #0
 80050d4:	2025      	movs	r0, #37	; 0x25
 80050d6:	f000 ff82 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80050da:	2025      	movs	r0, #37	; 0x25
 80050dc:	f000 ff9b 	bl	8006016 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80050e0:	e066      	b.n	80051b0 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a38      	ldr	r2, [pc, #224]	; (80051c8 <HAL_UART_MspInit+0x1b0>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d161      	bne.n	80051b0 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 80050ec:	2300      	movs	r3, #0
 80050ee:	60fb      	str	r3, [r7, #12]
 80050f0:	4b32      	ldr	r3, [pc, #200]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 80050f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050f4:	4a31      	ldr	r2, [pc, #196]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 80050f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80050fa:	6413      	str	r3, [r2, #64]	; 0x40
 80050fc:	4b2f      	ldr	r3, [pc, #188]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 80050fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005104:	60fb      	str	r3, [r7, #12]
 8005106:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005108:	2300      	movs	r3, #0
 800510a:	60bb      	str	r3, [r7, #8]
 800510c:	4b2b      	ldr	r3, [pc, #172]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 800510e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005110:	4a2a      	ldr	r2, [pc, #168]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 8005112:	f043 0301 	orr.w	r3, r3, #1
 8005116:	6313      	str	r3, [r2, #48]	; 0x30
 8005118:	4b28      	ldr	r3, [pc, #160]	; (80051bc <HAL_UART_MspInit+0x1a4>)
 800511a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8005124:	230c      	movs	r3, #12
 8005126:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005128:	2302      	movs	r3, #2
 800512a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800512c:	2300      	movs	r3, #0
 800512e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005130:	2303      	movs	r3, #3
 8005132:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8005134:	2307      	movs	r3, #7
 8005136:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005138:	f107 031c 	add.w	r3, r7, #28
 800513c:	4619      	mov	r1, r3
 800513e:	4820      	ldr	r0, [pc, #128]	; (80051c0 <HAL_UART_MspInit+0x1a8>)
 8005140:	f001 fba0 	bl	8006884 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005146:	4a22      	ldr	r2, [pc, #136]	; (80051d0 <HAL_UART_MspInit+0x1b8>)
 8005148:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 800514c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005150:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005152:	4b1e      	ldr	r3, [pc, #120]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005154:	2240      	movs	r2, #64	; 0x40
 8005156:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005158:	4b1c      	ldr	r3, [pc, #112]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 800515a:	2200      	movs	r2, #0
 800515c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800515e:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005164:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005166:	4b19      	ldr	r3, [pc, #100]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005168:	2200      	movs	r2, #0
 800516a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800516c:	4b17      	ldr	r3, [pc, #92]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 800516e:	2200      	movs	r2, #0
 8005170:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8005172:	4b16      	ldr	r3, [pc, #88]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005174:	2200      	movs	r2, #0
 8005176:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 800517a:	2200      	movs	r2, #0
 800517c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800517e:	4b13      	ldr	r3, [pc, #76]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005180:	2200      	movs	r2, #0
 8005182:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8005184:	4811      	ldr	r0, [pc, #68]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005186:	f000 ff61 	bl	800604c <HAL_DMA_Init>
 800518a:	4603      	mov	r3, r0
 800518c:	2b00      	cmp	r3, #0
 800518e:	d001      	beq.n	8005194 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8005190:	f7ff fd4c 	bl	8004c2c <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a0d      	ldr	r2, [pc, #52]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 8005198:	635a      	str	r2, [r3, #52]	; 0x34
 800519a:	4a0c      	ldr	r2, [pc, #48]	; (80051cc <HAL_UART_MspInit+0x1b4>)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80051a0:	2200      	movs	r2, #0
 80051a2:	2100      	movs	r1, #0
 80051a4:	2026      	movs	r0, #38	; 0x26
 80051a6:	f000 ff1a 	bl	8005fde <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80051aa:	2026      	movs	r0, #38	; 0x26
 80051ac:	f000 ff33 	bl	8006016 <HAL_NVIC_EnableIRQ>
}
 80051b0:	bf00      	nop
 80051b2:	3730      	adds	r7, #48	; 0x30
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	40011000 	.word	0x40011000
 80051bc:	40023800 	.word	0x40023800
 80051c0:	40020000 	.word	0x40020000
 80051c4:	40020400 	.word	0x40020400
 80051c8:	40004400 	.word	0x40004400
 80051cc:	2000090c 	.word	0x2000090c
 80051d0:	400260a0 	.word	0x400260a0

080051d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80051d4:	b480      	push	{r7}
 80051d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80051d8:	e7fe      	b.n	80051d8 <NMI_Handler+0x4>

080051da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80051da:	b480      	push	{r7}
 80051dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80051de:	e7fe      	b.n	80051de <HardFault_Handler+0x4>

080051e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80051e0:	b480      	push	{r7}
 80051e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80051e4:	e7fe      	b.n	80051e4 <MemManage_Handler+0x4>

080051e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80051e6:	b480      	push	{r7}
 80051e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80051ea:	e7fe      	b.n	80051ea <BusFault_Handler+0x4>

080051ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80051ec:	b480      	push	{r7}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80051f0:	e7fe      	b.n	80051f0 <UsageFault_Handler+0x4>

080051f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80051f2:	b480      	push	{r7}
 80051f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80051f6:	bf00      	nop
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005200:	b480      	push	{r7}
 8005202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005204:	bf00      	nop
 8005206:	46bd      	mov	sp, r7
 8005208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520c:	4770      	bx	lr

0800520e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800520e:	b480      	push	{r7}
 8005210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005212:	bf00      	nop
 8005214:	46bd      	mov	sp, r7
 8005216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521a:	4770      	bx	lr

0800521c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005220:	f000 f9bc 	bl	800559c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005224:	bf00      	nop
 8005226:	bd80      	pop	{r7, pc}

08005228 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_2_Pin);
 800522c:	2004      	movs	r0, #4
 800522e:	f001 fcdf 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8005232:	bf00      	nop
 8005234:	bd80      	pop	{r7, pc}

08005236 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8005236:	b580      	push	{r7, lr}
 8005238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Proximity_3_Pin);
 800523a:	2008      	movs	r0, #8
 800523c:	f001 fcd8 	bl	8006bf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8005240:	bf00      	nop
 8005242:	bd80      	pop	{r7, pc}

08005244 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8005248:	4802      	ldr	r0, [pc, #8]	; (8005254 <DMA1_Stream6_IRQHandler+0x10>)
 800524a:	f001 f897 	bl	800637c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800524e:	bf00      	nop
 8005250:	bd80      	pop	{r7, pc}
 8005252:	bf00      	nop
 8005254:	2000090c 	.word	0x2000090c

08005258 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800525c:	4803      	ldr	r0, [pc, #12]	; (800526c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800525e:	f005 f815 	bl	800a28c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8005262:	4803      	ldr	r0, [pc, #12]	; (8005270 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8005264:	f005 f812 	bl	800a28c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8005268:	bf00      	nop
 800526a:	bd80      	pop	{r7, pc}
 800526c:	20000554 	.word	0x20000554
 8005270:	200006bc 	.word	0x200006bc

08005274 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8005278:	4803      	ldr	r0, [pc, #12]	; (8005288 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 800527a:	f005 f807 	bl	800a28c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 800527e:	4803      	ldr	r0, [pc, #12]	; (800528c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8005280:	f005 f804 	bl	800a28c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8005284:	bf00      	nop
 8005286:	bd80      	pop	{r7, pc}
 8005288:	20000554 	.word	0x20000554
 800528c:	20000770 	.word	0x20000770

08005290 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8005294:	4802      	ldr	r0, [pc, #8]	; (80052a0 <I2C1_EV_IRQHandler+0x10>)
 8005296:	f001 ffb3 	bl	8007200 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800529a:	bf00      	nop
 800529c:	bd80      	pop	{r7, pc}
 800529e:	bf00      	nop
 80052a0:	20000500 	.word	0x20000500

080052a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80052a4:	b580      	push	{r7, lr}
 80052a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <I2C1_ER_IRQHandler+0x10>)
 80052aa:	f002 f91a 	bl	80074e2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80052ae:	bf00      	nop
 80052b0:	bd80      	pop	{r7, pc}
 80052b2:	bf00      	nop
 80052b4:	20000500 	.word	0x20000500

080052b8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80052bc:	4802      	ldr	r0, [pc, #8]	; (80052c8 <USART1_IRQHandler+0x10>)
 80052be:	f006 fb33 	bl	800b928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80052c2:	bf00      	nop
 80052c4:	bd80      	pop	{r7, pc}
 80052c6:	bf00      	nop
 80052c8:	20000824 	.word	0x20000824

080052cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80052d0:	4802      	ldr	r0, [pc, #8]	; (80052dc <USART2_IRQHandler+0x10>)
 80052d2:	f006 fb29 	bl	800b928 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80052d6:	bf00      	nop
 80052d8:	bd80      	pop	{r7, pc}
 80052da:	bf00      	nop
 80052dc:	20000898 	.word	0x20000898

080052e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80052e4:	4802      	ldr	r0, [pc, #8]	; (80052f0 <DMA2_Stream0_IRQHandler+0x10>)
 80052e6:	f001 f849 	bl	800637c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80052ea:	bf00      	nop
 80052ec:	bd80      	pop	{r7, pc}
 80052ee:	bf00      	nop
 80052f0:	200004a0 	.word	0x200004a0

080052f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80052f4:	b480      	push	{r7}
 80052f6:	af00      	add	r7, sp, #0
  return 1;
 80052f8:	2301      	movs	r3, #1
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <_kill>:

int _kill(int pid, int sig)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800530e:	f007 fb51 	bl	800c9b4 <__errno>
 8005312:	4603      	mov	r3, r0
 8005314:	2216      	movs	r2, #22
 8005316:	601a      	str	r2, [r3, #0]
  return -1;
 8005318:	f04f 33ff 	mov.w	r3, #4294967295
}
 800531c:	4618      	mov	r0, r3
 800531e:	3708      	adds	r7, #8
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}

08005324 <_exit>:

void _exit (int status)
{
 8005324:	b580      	push	{r7, lr}
 8005326:	b082      	sub	sp, #8
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800532c:	f04f 31ff 	mov.w	r1, #4294967295
 8005330:	6878      	ldr	r0, [r7, #4]
 8005332:	f7ff ffe7 	bl	8005304 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005336:	e7fe      	b.n	8005336 <_exit+0x12>

08005338 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b086      	sub	sp, #24
 800533c:	af00      	add	r7, sp, #0
 800533e:	60f8      	str	r0, [r7, #12]
 8005340:	60b9      	str	r1, [r7, #8]
 8005342:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005344:	2300      	movs	r3, #0
 8005346:	617b      	str	r3, [r7, #20]
 8005348:	e00a      	b.n	8005360 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800534a:	f3af 8000 	nop.w
 800534e:	4601      	mov	r1, r0
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	1c5a      	adds	r2, r3, #1
 8005354:	60ba      	str	r2, [r7, #8]
 8005356:	b2ca      	uxtb	r2, r1
 8005358:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800535a:	697b      	ldr	r3, [r7, #20]
 800535c:	3301      	adds	r3, #1
 800535e:	617b      	str	r3, [r7, #20]
 8005360:	697a      	ldr	r2, [r7, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	429a      	cmp	r2, r3
 8005366:	dbf0      	blt.n	800534a <_read+0x12>
  }

  return len;
 8005368:	687b      	ldr	r3, [r7, #4]
}
 800536a:	4618      	mov	r0, r3
 800536c:	3718      	adds	r7, #24
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b086      	sub	sp, #24
 8005376:	af00      	add	r7, sp, #0
 8005378:	60f8      	str	r0, [r7, #12]
 800537a:	60b9      	str	r1, [r7, #8]
 800537c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]
 8005382:	e009      	b.n	8005398 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	1c5a      	adds	r2, r3, #1
 8005388:	60ba      	str	r2, [r7, #8]
 800538a:	781b      	ldrb	r3, [r3, #0]
 800538c:	4618      	mov	r0, r3
 800538e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005392:	697b      	ldr	r3, [r7, #20]
 8005394:	3301      	adds	r3, #1
 8005396:	617b      	str	r3, [r7, #20]
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	429a      	cmp	r2, r3
 800539e:	dbf1      	blt.n	8005384 <_write+0x12>
  }
  return len;
 80053a0:	687b      	ldr	r3, [r7, #4]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3718      	adds	r7, #24
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <_close>:

int _close(int file)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b083      	sub	sp, #12
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80053b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr

080053c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80053c2:	b480      	push	{r7}
 80053c4:	b083      	sub	sp, #12
 80053c6:	af00      	add	r7, sp, #0
 80053c8:	6078      	str	r0, [r7, #4]
 80053ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80053d2:	605a      	str	r2, [r3, #4]
  return 0;
 80053d4:	2300      	movs	r3, #0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	370c      	adds	r7, #12
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr

080053e2 <_isatty>:

int _isatty(int file)
{
 80053e2:	b480      	push	{r7}
 80053e4:	b083      	sub	sp, #12
 80053e6:	af00      	add	r7, sp, #0
 80053e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80053ea:	2301      	movs	r3, #1
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	60f8      	str	r0, [r7, #12]
 8005400:	60b9      	str	r1, [r7, #8]
 8005402:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3714      	adds	r7, #20
 800540a:	46bd      	mov	sp, r7
 800540c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005410:	4770      	bx	lr
	...

08005414 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b086      	sub	sp, #24
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800541c:	4a14      	ldr	r2, [pc, #80]	; (8005470 <_sbrk+0x5c>)
 800541e:	4b15      	ldr	r3, [pc, #84]	; (8005474 <_sbrk+0x60>)
 8005420:	1ad3      	subs	r3, r2, r3
 8005422:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005428:	4b13      	ldr	r3, [pc, #76]	; (8005478 <_sbrk+0x64>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d102      	bne.n	8005436 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <_sbrk+0x64>)
 8005432:	4a12      	ldr	r2, [pc, #72]	; (800547c <_sbrk+0x68>)
 8005434:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005436:	4b10      	ldr	r3, [pc, #64]	; (8005478 <_sbrk+0x64>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4413      	add	r3, r2
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	429a      	cmp	r2, r3
 8005442:	d207      	bcs.n	8005454 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005444:	f007 fab6 	bl	800c9b4 <__errno>
 8005448:	4603      	mov	r3, r0
 800544a:	220c      	movs	r2, #12
 800544c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800544e:	f04f 33ff 	mov.w	r3, #4294967295
 8005452:	e009      	b.n	8005468 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005454:	4b08      	ldr	r3, [pc, #32]	; (8005478 <_sbrk+0x64>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800545a:	4b07      	ldr	r3, [pc, #28]	; (8005478 <_sbrk+0x64>)
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	4413      	add	r3, r2
 8005462:	4a05      	ldr	r2, [pc, #20]	; (8005478 <_sbrk+0x64>)
 8005464:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005466:	68fb      	ldr	r3, [r7, #12]
}
 8005468:	4618      	mov	r0, r3
 800546a:	3718      	adds	r7, #24
 800546c:	46bd      	mov	sp, r7
 800546e:	bd80      	pop	{r7, pc}
 8005470:	20020000 	.word	0x20020000
 8005474:	00000400 	.word	0x00000400
 8005478:	2000112c 	.word	0x2000112c
 800547c:	20001148 	.word	0x20001148

08005480 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005480:	b480      	push	{r7}
 8005482:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005484:	4b06      	ldr	r3, [pc, #24]	; (80054a0 <SystemInit+0x20>)
 8005486:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800548a:	4a05      	ldr	r2, [pc, #20]	; (80054a0 <SystemInit+0x20>)
 800548c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005490:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005494:	bf00      	nop
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	e000ed00 	.word	0xe000ed00

080054a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 80054a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80054dc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80054a8:	480d      	ldr	r0, [pc, #52]	; (80054e0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80054aa:	490e      	ldr	r1, [pc, #56]	; (80054e4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80054ac:	4a0e      	ldr	r2, [pc, #56]	; (80054e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80054ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80054b0:	e002      	b.n	80054b8 <LoopCopyDataInit>

080054b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80054b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80054b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80054b6:	3304      	adds	r3, #4

080054b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80054b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80054ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80054bc:	d3f9      	bcc.n	80054b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80054be:	4a0b      	ldr	r2, [pc, #44]	; (80054ec <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80054c0:	4c0b      	ldr	r4, [pc, #44]	; (80054f0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80054c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80054c4:	e001      	b.n	80054ca <LoopFillZerobss>

080054c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80054c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80054c8:	3204      	adds	r2, #4

080054ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80054ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80054cc:	d3fb      	bcc.n	80054c6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80054ce:	f7ff ffd7 	bl	8005480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80054d2:	f007 fa75 	bl	800c9c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80054d6:	f7fc f8ef 	bl	80016b8 <main>
  bx  lr    
 80054da:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 80054dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80054e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80054e4:	20000438 	.word	0x20000438
  ldr r2, =_sidata
 80054e8:	08011a94 	.word	0x08011a94
  ldr r2, =_sbss
 80054ec:	20000438 	.word	0x20000438
  ldr r4, =_ebss
 80054f0:	20001144 	.word	0x20001144

080054f4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054f4:	e7fe      	b.n	80054f4 <ADC_IRQHandler>
	...

080054f8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054f8:	b580      	push	{r7, lr}
 80054fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054fc:	4b0e      	ldr	r3, [pc, #56]	; (8005538 <HAL_Init+0x40>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4a0d      	ldr	r2, [pc, #52]	; (8005538 <HAL_Init+0x40>)
 8005502:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005506:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005508:	4b0b      	ldr	r3, [pc, #44]	; (8005538 <HAL_Init+0x40>)
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a0a      	ldr	r2, [pc, #40]	; (8005538 <HAL_Init+0x40>)
 800550e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005512:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005514:	4b08      	ldr	r3, [pc, #32]	; (8005538 <HAL_Init+0x40>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a07      	ldr	r2, [pc, #28]	; (8005538 <HAL_Init+0x40>)
 800551a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800551e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005520:	2003      	movs	r0, #3
 8005522:	f000 fd51 	bl	8005fc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005526:	2000      	movs	r0, #0
 8005528:	f000 f808 	bl	800553c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800552c:	f7ff fb84 	bl	8004c38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8005530:	2300      	movs	r3, #0
}
 8005532:	4618      	mov	r0, r3
 8005534:	bd80      	pop	{r7, pc}
 8005536:	bf00      	nop
 8005538:	40023c00 	.word	0x40023c00

0800553c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005544:	4b12      	ldr	r3, [pc, #72]	; (8005590 <HAL_InitTick+0x54>)
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	4b12      	ldr	r3, [pc, #72]	; (8005594 <HAL_InitTick+0x58>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	4619      	mov	r1, r3
 800554e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005552:	fbb3 f3f1 	udiv	r3, r3, r1
 8005556:	fbb2 f3f3 	udiv	r3, r2, r3
 800555a:	4618      	mov	r0, r3
 800555c:	f000 fd69 	bl	8006032 <HAL_SYSTICK_Config>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d001      	beq.n	800556a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005566:	2301      	movs	r3, #1
 8005568:	e00e      	b.n	8005588 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2b0f      	cmp	r3, #15
 800556e:	d80a      	bhi.n	8005586 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005570:	2200      	movs	r2, #0
 8005572:	6879      	ldr	r1, [r7, #4]
 8005574:	f04f 30ff 	mov.w	r0, #4294967295
 8005578:	f000 fd31 	bl	8005fde <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800557c:	4a06      	ldr	r2, [pc, #24]	; (8005598 <HAL_InitTick+0x5c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	e000      	b.n	8005588 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
}
 8005588:	4618      	mov	r0, r3
 800558a:	3708      	adds	r7, #8
 800558c:	46bd      	mov	sp, r7
 800558e:	bd80      	pop	{r7, pc}
 8005590:	20000258 	.word	0x20000258
 8005594:	20000260 	.word	0x20000260
 8005598:	2000025c 	.word	0x2000025c

0800559c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800559c:	b480      	push	{r7}
 800559e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80055a0:	4b06      	ldr	r3, [pc, #24]	; (80055bc <HAL_IncTick+0x20>)
 80055a2:	781b      	ldrb	r3, [r3, #0]
 80055a4:	461a      	mov	r2, r3
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_IncTick+0x24>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4413      	add	r3, r2
 80055ac:	4a04      	ldr	r2, [pc, #16]	; (80055c0 <HAL_IncTick+0x24>)
 80055ae:	6013      	str	r3, [r2, #0]
}
 80055b0:	bf00      	nop
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	20000260 	.word	0x20000260
 80055c0:	20001130 	.word	0x20001130

080055c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80055c4:	b480      	push	{r7}
 80055c6:	af00      	add	r7, sp, #0
  return uwTick;
 80055c8:	4b03      	ldr	r3, [pc, #12]	; (80055d8 <HAL_GetTick+0x14>)
 80055ca:	681b      	ldr	r3, [r3, #0]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	46bd      	mov	sp, r7
 80055d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d4:	4770      	bx	lr
 80055d6:	bf00      	nop
 80055d8:	20001130 	.word	0x20001130

080055dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b084      	sub	sp, #16
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80055e4:	f7ff ffee 	bl	80055c4 <HAL_GetTick>
 80055e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055f4:	d005      	beq.n	8005602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055f6:	4b0a      	ldr	r3, [pc, #40]	; (8005620 <HAL_Delay+0x44>)
 80055f8:	781b      	ldrb	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005602:	bf00      	nop
 8005604:	f7ff ffde 	bl	80055c4 <HAL_GetTick>
 8005608:	4602      	mov	r2, r0
 800560a:	68bb      	ldr	r3, [r7, #8]
 800560c:	1ad3      	subs	r3, r2, r3
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	429a      	cmp	r2, r3
 8005612:	d8f7      	bhi.n	8005604 <HAL_Delay+0x28>
  {
  }
}
 8005614:	bf00      	nop
 8005616:	bf00      	nop
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	20000260 	.word	0x20000260

08005624 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800562c:	2300      	movs	r3, #0
 800562e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d101      	bne.n	800563a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e033      	b.n	80056a2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563e:	2b00      	cmp	r3, #0
 8005640:	d109      	bne.n	8005656 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7ff fb20 	bl	8004c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2200      	movs	r2, #0
 800564c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f003 0310 	and.w	r3, r3, #16
 800565e:	2b00      	cmp	r3, #0
 8005660:	d118      	bne.n	8005694 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800566a:	f023 0302 	bic.w	r3, r3, #2
 800566e:	f043 0202 	orr.w	r2, r3, #2
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 fa58 	bl	8005b2c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f023 0303 	bic.w	r3, r3, #3
 800568a:	f043 0201 	orr.w	r2, r3, #1
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	641a      	str	r2, [r3, #64]	; 0x40
 8005692:	e001      	b.n	8005698 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80056a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a2:	4618      	mov	r0, r3
 80056a4:	3710      	adds	r7, #16
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bd80      	pop	{r7, pc}
	...

080056ac <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	60f8      	str	r0, [r7, #12]
 80056b4:	60b9      	str	r1, [r7, #8]
 80056b6:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d101      	bne.n	80056ca <HAL_ADC_Start_DMA+0x1e>
 80056c6:	2302      	movs	r3, #2
 80056c8:	e0ce      	b.n	8005868 <HAL_ADC_Start_DMA+0x1bc>
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2201      	movs	r2, #1
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	689b      	ldr	r3, [r3, #8]
 80056d8:	f003 0301 	and.w	r3, r3, #1
 80056dc:	2b01      	cmp	r3, #1
 80056de:	d018      	beq.n	8005712 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	689a      	ldr	r2, [r3, #8]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f042 0201 	orr.w	r2, r2, #1
 80056ee:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80056f0:	4b5f      	ldr	r3, [pc, #380]	; (8005870 <HAL_ADC_Start_DMA+0x1c4>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	4a5f      	ldr	r2, [pc, #380]	; (8005874 <HAL_ADC_Start_DMA+0x1c8>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	0c9a      	lsrs	r2, r3, #18
 80056fc:	4613      	mov	r3, r2
 80056fe:	005b      	lsls	r3, r3, #1
 8005700:	4413      	add	r3, r2
 8005702:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8005704:	e002      	b.n	800570c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	3b01      	subs	r3, #1
 800570a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1f9      	bne.n	8005706 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800571c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005720:	d107      	bne.n	8005732 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005730:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	f003 0301 	and.w	r3, r3, #1
 800573c:	2b01      	cmp	r3, #1
 800573e:	f040 8086 	bne.w	800584e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005746:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800574a:	f023 0301 	bic.w	r3, r3, #1
 800574e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	685b      	ldr	r3, [r3, #4]
 800575c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005760:	2b00      	cmp	r3, #0
 8005762:	d007      	beq.n	8005774 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005768:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800576c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005778:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d106      	bne.n	8005790 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005786:	f023 0206 	bic.w	r2, r3, #6
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	645a      	str	r2, [r3, #68]	; 0x44
 800578e:	e002      	b.n	8005796 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2200      	movs	r2, #0
 8005794:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800579e:	4b36      	ldr	r3, [pc, #216]	; (8005878 <HAL_ADC_Start_DMA+0x1cc>)
 80057a0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057a6:	4a35      	ldr	r2, [pc, #212]	; (800587c <HAL_ADC_Start_DMA+0x1d0>)
 80057a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057ae:	4a34      	ldr	r2, [pc, #208]	; (8005880 <HAL_ADC_Start_DMA+0x1d4>)
 80057b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b6:	4a33      	ldr	r2, [pc, #204]	; (8005884 <HAL_ADC_Start_DMA+0x1d8>)
 80057b8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80057c2:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057d2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	689a      	ldr	r2, [r3, #8]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80057e2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	334c      	adds	r3, #76	; 0x4c
 80057ee:	4619      	mov	r1, r3
 80057f0:	68ba      	ldr	r2, [r7, #8]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f000 fcd8 	bl	80061a8 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	685b      	ldr	r3, [r3, #4]
 80057fc:	f003 031f 	and.w	r3, r3, #31
 8005800:	2b00      	cmp	r3, #0
 8005802:	d10f      	bne.n	8005824 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d129      	bne.n	8005866 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005820:	609a      	str	r2, [r3, #8]
 8005822:	e020      	b.n	8005866 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a17      	ldr	r2, [pc, #92]	; (8005888 <HAL_ADC_Start_DMA+0x1dc>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d11b      	bne.n	8005866 <HAL_ADC_Start_DMA+0x1ba>
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	689b      	ldr	r3, [r3, #8]
 8005834:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d114      	bne.n	8005866 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689a      	ldr	r2, [r3, #8]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800584a:	609a      	str	r2, [r3, #8]
 800584c:	e00b      	b.n	8005866 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005852:	f043 0210 	orr.w	r2, r3, #16
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800585e:	f043 0201 	orr.w	r2, r3, #1
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005866:	2300      	movs	r3, #0
}
 8005868:	4618      	mov	r0, r3
 800586a:	3718      	adds	r7, #24
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	20000258 	.word	0x20000258
 8005874:	431bde83 	.word	0x431bde83
 8005878:	40012300 	.word	0x40012300
 800587c:	08005d25 	.word	0x08005d25
 8005880:	08005ddf 	.word	0x08005ddf
 8005884:	08005dfb 	.word	0x08005dfb
 8005888:	40012000 	.word	0x40012000

0800588c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800588c:	b480      	push	{r7}
 800588e:	b083      	sub	sp, #12
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005894:	bf00      	nop
 8005896:	370c      	adds	r7, #12
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80058a8:	bf00      	nop
 80058aa:	370c      	adds	r7, #12
 80058ac:	46bd      	mov	sp, r7
 80058ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b2:	4770      	bx	lr

080058b4 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80058bc:	bf00      	nop
 80058be:	370c      	adds	r7, #12
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr

080058c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
 80058d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80058d2:	2300      	movs	r3, #0
 80058d4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058dc:	2b01      	cmp	r3, #1
 80058de:	d101      	bne.n	80058e4 <HAL_ADC_ConfigChannel+0x1c>
 80058e0:	2302      	movs	r3, #2
 80058e2:	e113      	b.n	8005b0c <HAL_ADC_ConfigChannel+0x244>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2201      	movs	r2, #1
 80058e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80058ec:	683b      	ldr	r3, [r7, #0]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b09      	cmp	r3, #9
 80058f2:	d925      	bls.n	8005940 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	68d9      	ldr	r1, [r3, #12]
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	b29b      	uxth	r3, r3
 8005900:	461a      	mov	r2, r3
 8005902:	4613      	mov	r3, r2
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	4413      	add	r3, r2
 8005908:	3b1e      	subs	r3, #30
 800590a:	2207      	movs	r2, #7
 800590c:	fa02 f303 	lsl.w	r3, r2, r3
 8005910:	43da      	mvns	r2, r3
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	400a      	ands	r2, r1
 8005918:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	68d9      	ldr	r1, [r3, #12]
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689a      	ldr	r2, [r3, #8]
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	b29b      	uxth	r3, r3
 800592a:	4618      	mov	r0, r3
 800592c:	4603      	mov	r3, r0
 800592e:	005b      	lsls	r3, r3, #1
 8005930:	4403      	add	r3, r0
 8005932:	3b1e      	subs	r3, #30
 8005934:	409a      	lsls	r2, r3
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	430a      	orrs	r2, r1
 800593c:	60da      	str	r2, [r3, #12]
 800593e:	e022      	b.n	8005986 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6919      	ldr	r1, [r3, #16]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	b29b      	uxth	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	4613      	mov	r3, r2
 8005950:	005b      	lsls	r3, r3, #1
 8005952:	4413      	add	r3, r2
 8005954:	2207      	movs	r2, #7
 8005956:	fa02 f303 	lsl.w	r3, r2, r3
 800595a:	43da      	mvns	r2, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	400a      	ands	r2, r1
 8005962:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6919      	ldr	r1, [r3, #16]
 800596a:	683b      	ldr	r3, [r7, #0]
 800596c:	689a      	ldr	r2, [r3, #8]
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	b29b      	uxth	r3, r3
 8005974:	4618      	mov	r0, r3
 8005976:	4603      	mov	r3, r0
 8005978:	005b      	lsls	r3, r3, #1
 800597a:	4403      	add	r3, r0
 800597c:	409a      	lsls	r2, r3
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	2b06      	cmp	r3, #6
 800598c:	d824      	bhi.n	80059d8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	685a      	ldr	r2, [r3, #4]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	3b05      	subs	r3, #5
 80059a0:	221f      	movs	r2, #31
 80059a2:	fa02 f303 	lsl.w	r3, r2, r3
 80059a6:	43da      	mvns	r2, r3
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	400a      	ands	r2, r1
 80059ae:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	4618      	mov	r0, r3
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	685a      	ldr	r2, [r3, #4]
 80059c2:	4613      	mov	r3, r2
 80059c4:	009b      	lsls	r3, r3, #2
 80059c6:	4413      	add	r3, r2
 80059c8:	3b05      	subs	r3, #5
 80059ca:	fa00 f203 	lsl.w	r2, r0, r3
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	430a      	orrs	r2, r1
 80059d4:	635a      	str	r2, [r3, #52]	; 0x34
 80059d6:	e04c      	b.n	8005a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	685b      	ldr	r3, [r3, #4]
 80059dc:	2b0c      	cmp	r3, #12
 80059de:	d824      	bhi.n	8005a2a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	685a      	ldr	r2, [r3, #4]
 80059ea:	4613      	mov	r3, r2
 80059ec:	009b      	lsls	r3, r3, #2
 80059ee:	4413      	add	r3, r2
 80059f0:	3b23      	subs	r3, #35	; 0x23
 80059f2:	221f      	movs	r2, #31
 80059f4:	fa02 f303 	lsl.w	r3, r2, r3
 80059f8:	43da      	mvns	r2, r3
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	400a      	ands	r2, r1
 8005a00:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	b29b      	uxth	r3, r3
 8005a0e:	4618      	mov	r0, r3
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	685a      	ldr	r2, [r3, #4]
 8005a14:	4613      	mov	r3, r2
 8005a16:	009b      	lsls	r3, r3, #2
 8005a18:	4413      	add	r3, r2
 8005a1a:	3b23      	subs	r3, #35	; 0x23
 8005a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	430a      	orrs	r2, r1
 8005a26:	631a      	str	r2, [r3, #48]	; 0x30
 8005a28:	e023      	b.n	8005a72 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	685a      	ldr	r2, [r3, #4]
 8005a34:	4613      	mov	r3, r2
 8005a36:	009b      	lsls	r3, r3, #2
 8005a38:	4413      	add	r3, r2
 8005a3a:	3b41      	subs	r3, #65	; 0x41
 8005a3c:	221f      	movs	r2, #31
 8005a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a42:	43da      	mvns	r2, r3
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	400a      	ands	r2, r1
 8005a4a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a52:	683b      	ldr	r3, [r7, #0]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	b29b      	uxth	r3, r3
 8005a58:	4618      	mov	r0, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	009b      	lsls	r3, r3, #2
 8005a62:	4413      	add	r3, r2
 8005a64:	3b41      	subs	r3, #65	; 0x41
 8005a66:	fa00 f203 	lsl.w	r2, r0, r3
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	430a      	orrs	r2, r1
 8005a70:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005a72:	4b29      	ldr	r3, [pc, #164]	; (8005b18 <HAL_ADC_ConfigChannel+0x250>)
 8005a74:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a28      	ldr	r2, [pc, #160]	; (8005b1c <HAL_ADC_ConfigChannel+0x254>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d10f      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x1d8>
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b12      	cmp	r3, #18
 8005a86:	d10b      	bne.n	8005aa0 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	; (8005b1c <HAL_ADC_ConfigChannel+0x254>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d12b      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	4a1c      	ldr	r2, [pc, #112]	; (8005b20 <HAL_ADC_ConfigChannel+0x258>)
 8005ab0:	4293      	cmp	r3, r2
 8005ab2:	d003      	beq.n	8005abc <HAL_ADC_ConfigChannel+0x1f4>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b11      	cmp	r3, #17
 8005aba:	d122      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	685b      	ldr	r3, [r3, #4]
 8005ac0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	685b      	ldr	r3, [r3, #4]
 8005acc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a11      	ldr	r2, [pc, #68]	; (8005b20 <HAL_ADC_ConfigChannel+0x258>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d111      	bne.n	8005b02 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_ADC_ConfigChannel+0x25c>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a11      	ldr	r2, [pc, #68]	; (8005b28 <HAL_ADC_ConfigChannel+0x260>)
 8005ae4:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae8:	0c9a      	lsrs	r2, r3, #18
 8005aea:	4613      	mov	r3, r2
 8005aec:	009b      	lsls	r3, r3, #2
 8005aee:	4413      	add	r3, r2
 8005af0:	005b      	lsls	r3, r3, #1
 8005af2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005af4:	e002      	b.n	8005afc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	3b01      	subs	r3, #1
 8005afa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8005afc:	68bb      	ldr	r3, [r7, #8]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d1f9      	bne.n	8005af6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr
 8005b18:	40012300 	.word	0x40012300
 8005b1c:	40012000 	.word	0x40012000
 8005b20:	10000012 	.word	0x10000012
 8005b24:	20000258 	.word	0x20000258
 8005b28:	431bde83 	.word	0x431bde83

08005b2c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b085      	sub	sp, #20
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005b34:	4b79      	ldr	r3, [pc, #484]	; (8005d1c <ADC_Init+0x1f0>)
 8005b36:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	685a      	ldr	r2, [r3, #4]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685a      	ldr	r2, [r3, #4]
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	6859      	ldr	r1, [r3, #4]
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	691b      	ldr	r3, [r3, #16]
 8005b6c:	021a      	lsls	r2, r3, #8
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	430a      	orrs	r2, r1
 8005b74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	685a      	ldr	r2, [r3, #4]
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005b84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	689a      	ldr	r2, [r3, #8]
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	430a      	orrs	r2, r1
 8005b96:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	689a      	ldr	r2, [r3, #8]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ba6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	6899      	ldr	r1, [r3, #8]
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	68da      	ldr	r2, [r3, #12]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	430a      	orrs	r2, r1
 8005bb8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bbe:	4a58      	ldr	r2, [pc, #352]	; (8005d20 <ADC_Init+0x1f4>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d022      	beq.n	8005c0a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	689a      	ldr	r2, [r3, #8]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005bd2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	6899      	ldr	r1, [r3, #8]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	430a      	orrs	r2, r1
 8005be4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	689a      	ldr	r2, [r3, #8]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005bf4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	6899      	ldr	r1, [r3, #8]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	430a      	orrs	r2, r1
 8005c06:	609a      	str	r2, [r3, #8]
 8005c08:	e00f      	b.n	8005c2a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	689a      	ldr	r2, [r3, #8]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005c18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005c28:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689a      	ldr	r2, [r3, #8]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f022 0202 	bic.w	r2, r2, #2
 8005c38:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	6899      	ldr	r1, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	7e1b      	ldrb	r3, [r3, #24]
 8005c44:	005a      	lsls	r2, r3, #1
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	430a      	orrs	r2, r1
 8005c4c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d01b      	beq.n	8005c90 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	685a      	ldr	r2, [r3, #4]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c66:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005c76:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6859      	ldr	r1, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	3b01      	subs	r3, #1
 8005c84:	035a      	lsls	r2, r3, #13
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	605a      	str	r2, [r3, #4]
 8005c8e:	e007      	b.n	8005ca0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	685a      	ldr	r2, [r3, #4]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c9e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005cae:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	69db      	ldr	r3, [r3, #28]
 8005cba:	3b01      	subs	r3, #1
 8005cbc:	051a      	lsls	r2, r3, #20
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	430a      	orrs	r2, r1
 8005cc4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689a      	ldr	r2, [r3, #8]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005cd4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	6899      	ldr	r1, [r3, #8]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005ce2:	025a      	lsls	r2, r3, #9
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	430a      	orrs	r2, r1
 8005cea:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	689a      	ldr	r2, [r3, #8]
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cfa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	6899      	ldr	r1, [r3, #8]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	695b      	ldr	r3, [r3, #20]
 8005d06:	029a      	lsls	r2, r3, #10
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	430a      	orrs	r2, r1
 8005d0e:	609a      	str	r2, [r3, #8]
}
 8005d10:	bf00      	nop
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr
 8005d1c:	40012300 	.word	0x40012300
 8005d20:	0f000001 	.word	0x0f000001

08005d24 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b084      	sub	sp, #16
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d30:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d36:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d13c      	bne.n	8005db8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d42:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	689b      	ldr	r3, [r3, #8]
 8005d50:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d12b      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d127      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d66:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d006      	beq.n	8005d7c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	689b      	ldr	r3, [r3, #8]
 8005d74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d119      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0220 	bic.w	r2, r2, #32
 8005d8a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d9c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d105      	bne.n	8005db0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da8:	f043 0201 	orr.w	r2, r3, #1
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f7ff fd6b 	bl	800588c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005db6:	e00e      	b.n	8005dd6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbc:	f003 0310 	and.w	r3, r3, #16
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d003      	beq.n	8005dcc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fd75 	bl	80058b4 <HAL_ADC_ErrorCallback>
}
 8005dca:	e004      	b.n	8005dd6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	4798      	blx	r3
}
 8005dd6:	bf00      	nop
 8005dd8:	3710      	adds	r7, #16
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}

08005dde <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8005dde:	b580      	push	{r7, lr}
 8005de0:	b084      	sub	sp, #16
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dea:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f7ff fd57 	bl	80058a0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}

08005dfa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8005dfa:	b580      	push	{r7, lr}
 8005dfc:	b084      	sub	sp, #16
 8005dfe:	af00      	add	r7, sp, #0
 8005e00:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e06:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	2240      	movs	r2, #64	; 0x40
 8005e0c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e12:	f043 0204 	orr.w	r2, r3, #4
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8005e1a:	68f8      	ldr	r0, [r7, #12]
 8005e1c:	f7ff fd4a 	bl	80058b4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8005e20:	bf00      	nop
 8005e22:	3710      	adds	r7, #16
 8005e24:	46bd      	mov	sp, r7
 8005e26:	bd80      	pop	{r7, pc}

08005e28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b085      	sub	sp, #20
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	f003 0307 	and.w	r3, r3, #7
 8005e36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e38:	4b0c      	ldr	r3, [pc, #48]	; (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e3a:	68db      	ldr	r3, [r3, #12]
 8005e3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e3e:	68ba      	ldr	r2, [r7, #8]
 8005e40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e44:	4013      	ands	r3, r2
 8005e46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005e50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005e54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005e58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e5a:	4a04      	ldr	r2, [pc, #16]	; (8005e6c <__NVIC_SetPriorityGrouping+0x44>)
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	60d3      	str	r3, [r2, #12]
}
 8005e60:	bf00      	nop
 8005e62:	3714      	adds	r7, #20
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	e000ed00 	.word	0xe000ed00

08005e70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005e70:	b480      	push	{r7}
 8005e72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e74:	4b04      	ldr	r3, [pc, #16]	; (8005e88 <__NVIC_GetPriorityGrouping+0x18>)
 8005e76:	68db      	ldr	r3, [r3, #12]
 8005e78:	0a1b      	lsrs	r3, r3, #8
 8005e7a:	f003 0307 	and.w	r3, r3, #7
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	46bd      	mov	sp, r7
 8005e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e86:	4770      	bx	lr
 8005e88:	e000ed00 	.word	0xe000ed00

08005e8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	4603      	mov	r3, r0
 8005e94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	db0b      	blt.n	8005eb6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005e9e:	79fb      	ldrb	r3, [r7, #7]
 8005ea0:	f003 021f 	and.w	r2, r3, #31
 8005ea4:	4907      	ldr	r1, [pc, #28]	; (8005ec4 <__NVIC_EnableIRQ+0x38>)
 8005ea6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005eaa:	095b      	lsrs	r3, r3, #5
 8005eac:	2001      	movs	r0, #1
 8005eae:	fa00 f202 	lsl.w	r2, r0, r2
 8005eb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005eb6:	bf00      	nop
 8005eb8:	370c      	adds	r7, #12
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec0:	4770      	bx	lr
 8005ec2:	bf00      	nop
 8005ec4:	e000e100 	.word	0xe000e100

08005ec8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ec8:	b480      	push	{r7}
 8005eca:	b083      	sub	sp, #12
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	4603      	mov	r3, r0
 8005ed0:	6039      	str	r1, [r7, #0]
 8005ed2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005ed4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	db0a      	blt.n	8005ef2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	b2da      	uxtb	r2, r3
 8005ee0:	490c      	ldr	r1, [pc, #48]	; (8005f14 <__NVIC_SetPriority+0x4c>)
 8005ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ee6:	0112      	lsls	r2, r2, #4
 8005ee8:	b2d2      	uxtb	r2, r2
 8005eea:	440b      	add	r3, r1
 8005eec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ef0:	e00a      	b.n	8005f08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	b2da      	uxtb	r2, r3
 8005ef6:	4908      	ldr	r1, [pc, #32]	; (8005f18 <__NVIC_SetPriority+0x50>)
 8005ef8:	79fb      	ldrb	r3, [r7, #7]
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	3b04      	subs	r3, #4
 8005f00:	0112      	lsls	r2, r2, #4
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	440b      	add	r3, r1
 8005f06:	761a      	strb	r2, [r3, #24]
}
 8005f08:	bf00      	nop
 8005f0a:	370c      	adds	r7, #12
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	e000e100 	.word	0xe000e100
 8005f18:	e000ed00 	.word	0xe000ed00

08005f1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b089      	sub	sp, #36	; 0x24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	60f8      	str	r0, [r7, #12]
 8005f24:	60b9      	str	r1, [r7, #8]
 8005f26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	f003 0307 	and.w	r3, r3, #7
 8005f2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f30:	69fb      	ldr	r3, [r7, #28]
 8005f32:	f1c3 0307 	rsb	r3, r3, #7
 8005f36:	2b04      	cmp	r3, #4
 8005f38:	bf28      	it	cs
 8005f3a:	2304      	movcs	r3, #4
 8005f3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f3e:	69fb      	ldr	r3, [r7, #28]
 8005f40:	3304      	adds	r3, #4
 8005f42:	2b06      	cmp	r3, #6
 8005f44:	d902      	bls.n	8005f4c <NVIC_EncodePriority+0x30>
 8005f46:	69fb      	ldr	r3, [r7, #28]
 8005f48:	3b03      	subs	r3, #3
 8005f4a:	e000      	b.n	8005f4e <NVIC_EncodePriority+0x32>
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f50:	f04f 32ff 	mov.w	r2, #4294967295
 8005f54:	69bb      	ldr	r3, [r7, #24]
 8005f56:	fa02 f303 	lsl.w	r3, r2, r3
 8005f5a:	43da      	mvns	r2, r3
 8005f5c:	68bb      	ldr	r3, [r7, #8]
 8005f5e:	401a      	ands	r2, r3
 8005f60:	697b      	ldr	r3, [r7, #20]
 8005f62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f64:	f04f 31ff 	mov.w	r1, #4294967295
 8005f68:	697b      	ldr	r3, [r7, #20]
 8005f6a:	fa01 f303 	lsl.w	r3, r1, r3
 8005f6e:	43d9      	mvns	r1, r3
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f74:	4313      	orrs	r3, r2
         );
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3724      	adds	r7, #36	; 0x24
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr
	...

08005f84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b082      	sub	sp, #8
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	3b01      	subs	r3, #1
 8005f90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005f94:	d301      	bcc.n	8005f9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005f96:	2301      	movs	r3, #1
 8005f98:	e00f      	b.n	8005fba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005f9a:	4a0a      	ldr	r2, [pc, #40]	; (8005fc4 <SysTick_Config+0x40>)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	3b01      	subs	r3, #1
 8005fa0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fa2:	210f      	movs	r1, #15
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	f7ff ff8e 	bl	8005ec8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fac:	4b05      	ldr	r3, [pc, #20]	; (8005fc4 <SysTick_Config+0x40>)
 8005fae:	2200      	movs	r2, #0
 8005fb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fb2:	4b04      	ldr	r3, [pc, #16]	; (8005fc4 <SysTick_Config+0x40>)
 8005fb4:	2207      	movs	r2, #7
 8005fb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3708      	adds	r7, #8
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
 8005fc2:	bf00      	nop
 8005fc4:	e000e010 	.word	0xe000e010

08005fc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005fc8:	b580      	push	{r7, lr}
 8005fca:	b082      	sub	sp, #8
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f7ff ff29 	bl	8005e28 <__NVIC_SetPriorityGrouping>
}
 8005fd6:	bf00      	nop
 8005fd8:	3708      	adds	r7, #8
 8005fda:	46bd      	mov	sp, r7
 8005fdc:	bd80      	pop	{r7, pc}

08005fde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005fde:	b580      	push	{r7, lr}
 8005fe0:	b086      	sub	sp, #24
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	4603      	mov	r3, r0
 8005fe6:	60b9      	str	r1, [r7, #8]
 8005fe8:	607a      	str	r2, [r7, #4]
 8005fea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005fec:	2300      	movs	r3, #0
 8005fee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005ff0:	f7ff ff3e 	bl	8005e70 <__NVIC_GetPriorityGrouping>
 8005ff4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ff6:	687a      	ldr	r2, [r7, #4]
 8005ff8:	68b9      	ldr	r1, [r7, #8]
 8005ffa:	6978      	ldr	r0, [r7, #20]
 8005ffc:	f7ff ff8e 	bl	8005f1c <NVIC_EncodePriority>
 8006000:	4602      	mov	r2, r0
 8006002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006006:	4611      	mov	r1, r2
 8006008:	4618      	mov	r0, r3
 800600a:	f7ff ff5d 	bl	8005ec8 <__NVIC_SetPriority>
}
 800600e:	bf00      	nop
 8006010:	3718      	adds	r7, #24
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b082      	sub	sp, #8
 800601a:	af00      	add	r7, sp, #0
 800601c:	4603      	mov	r3, r0
 800601e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006020:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006024:	4618      	mov	r0, r3
 8006026:	f7ff ff31 	bl	8005e8c <__NVIC_EnableIRQ>
}
 800602a:	bf00      	nop
 800602c:	3708      	adds	r7, #8
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}

08006032 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006032:	b580      	push	{r7, lr}
 8006034:	b082      	sub	sp, #8
 8006036:	af00      	add	r7, sp, #0
 8006038:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f7ff ffa2 	bl	8005f84 <SysTick_Config>
 8006040:	4603      	mov	r3, r0
}
 8006042:	4618      	mov	r0, r3
 8006044:	3708      	adds	r7, #8
 8006046:	46bd      	mov	sp, r7
 8006048:	bd80      	pop	{r7, pc}
	...

0800604c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800604c:	b580      	push	{r7, lr}
 800604e:	b086      	sub	sp, #24
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006054:	2300      	movs	r3, #0
 8006056:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006058:	f7ff fab4 	bl	80055c4 <HAL_GetTick>
 800605c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d101      	bne.n	8006068 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006064:	2301      	movs	r3, #1
 8006066:	e099      	b.n	800619c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f022 0201 	bic.w	r2, r2, #1
 8006086:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006088:	e00f      	b.n	80060aa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800608a:	f7ff fa9b 	bl	80055c4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	693b      	ldr	r3, [r7, #16]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b05      	cmp	r3, #5
 8006096:	d908      	bls.n	80060aa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2220      	movs	r2, #32
 800609c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2203      	movs	r2, #3
 80060a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80060a6:	2303      	movs	r3, #3
 80060a8:	e078      	b.n	800619c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f003 0301 	and.w	r3, r3, #1
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d1e8      	bne.n	800608a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80060c0:	697a      	ldr	r2, [r7, #20]
 80060c2:	4b38      	ldr	r3, [pc, #224]	; (80061a4 <HAL_DMA_Init+0x158>)
 80060c4:	4013      	ands	r3, r2
 80060c6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060d6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	691b      	ldr	r3, [r3, #16]
 80060dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80060e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80060ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6a1b      	ldr	r3, [r3, #32]
 80060f4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80060f6:	697a      	ldr	r2, [r7, #20]
 80060f8:	4313      	orrs	r3, r2
 80060fa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006100:	2b04      	cmp	r3, #4
 8006102:	d107      	bne.n	8006114 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610c:	4313      	orrs	r3, r2
 800610e:	697a      	ldr	r2, [r7, #20]
 8006110:	4313      	orrs	r3, r2
 8006112:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	695b      	ldr	r3, [r3, #20]
 8006122:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f023 0307 	bic.w	r3, r3, #7
 800612a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800613a:	2b04      	cmp	r3, #4
 800613c:	d117      	bne.n	800616e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006142:	697a      	ldr	r2, [r7, #20]
 8006144:	4313      	orrs	r3, r2
 8006146:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00e      	beq.n	800616e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006150:	6878      	ldr	r0, [r7, #4]
 8006152:	f000 fb1b 	bl	800678c <DMA_CheckFifoParam>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d008      	beq.n	800616e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	2240      	movs	r2, #64	; 0x40
 8006160:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	2201      	movs	r2, #1
 8006166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800616a:	2301      	movs	r3, #1
 800616c:	e016      	b.n	800619c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	697a      	ldr	r2, [r7, #20]
 8006174:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fad2 	bl	8006720 <DMA_CalcBaseAndBitshift>
 800617c:	4603      	mov	r3, r0
 800617e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006184:	223f      	movs	r2, #63	; 0x3f
 8006186:	409a      	lsls	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800619a:	2300      	movs	r3, #0
}
 800619c:	4618      	mov	r0, r3
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}
 80061a4:	f010803f 	.word	0xf010803f

080061a8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	b086      	sub	sp, #24
 80061ac:	af00      	add	r7, sp, #0
 80061ae:	60f8      	str	r0, [r7, #12]
 80061b0:	60b9      	str	r1, [r7, #8]
 80061b2:	607a      	str	r2, [r7, #4]
 80061b4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80061b6:	2300      	movs	r3, #0
 80061b8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80061be:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80061c6:	2b01      	cmp	r3, #1
 80061c8:	d101      	bne.n	80061ce <HAL_DMA_Start_IT+0x26>
 80061ca:	2302      	movs	r3, #2
 80061cc:	e040      	b.n	8006250 <HAL_DMA_Start_IT+0xa8>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80061dc:	b2db      	uxtb	r3, r3
 80061de:	2b01      	cmp	r3, #1
 80061e0:	d12f      	bne.n	8006242 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	2202      	movs	r2, #2
 80061e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2200      	movs	r2, #0
 80061ee:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80061f0:	683b      	ldr	r3, [r7, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	68b9      	ldr	r1, [r7, #8]
 80061f6:	68f8      	ldr	r0, [r7, #12]
 80061f8:	f000 fa64 	bl	80066c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	223f      	movs	r2, #63	; 0x3f
 8006202:	409a      	lsls	r2, r3
 8006204:	693b      	ldr	r3, [r7, #16]
 8006206:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	681a      	ldr	r2, [r3, #0]
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f042 0216 	orr.w	r2, r2, #22
 8006216:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d007      	beq.n	8006230 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	681a      	ldr	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f042 0208 	orr.w	r2, r2, #8
 800622e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	681a      	ldr	r2, [r3, #0]
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	f042 0201 	orr.w	r2, r2, #1
 800623e:	601a      	str	r2, [r3, #0]
 8006240:	e005      	b.n	800624e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800624a:	2302      	movs	r3, #2
 800624c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800624e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006258:	b580      	push	{r7, lr}
 800625a:	b084      	sub	sp, #16
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006264:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006266:	f7ff f9ad 	bl	80055c4 <HAL_GetTick>
 800626a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2b02      	cmp	r3, #2
 8006276:	d008      	beq.n	800628a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2280      	movs	r2, #128	; 0x80
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006286:	2301      	movs	r3, #1
 8006288:	e052      	b.n	8006330 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	681a      	ldr	r2, [r3, #0]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f022 0216 	bic.w	r2, r2, #22
 8006298:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80062a8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d103      	bne.n	80062ba <HAL_DMA_Abort+0x62>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d007      	beq.n	80062ca <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f022 0208 	bic.w	r2, r2, #8
 80062c8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681a      	ldr	r2, [r3, #0]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f022 0201 	bic.w	r2, r2, #1
 80062d8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80062da:	e013      	b.n	8006304 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80062dc:	f7ff f972 	bl	80055c4 <HAL_GetTick>
 80062e0:	4602      	mov	r2, r0
 80062e2:	68bb      	ldr	r3, [r7, #8]
 80062e4:	1ad3      	subs	r3, r2, r3
 80062e6:	2b05      	cmp	r3, #5
 80062e8:	d90c      	bls.n	8006304 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	2220      	movs	r2, #32
 80062ee:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2203      	movs	r2, #3
 80062f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006300:	2303      	movs	r3, #3
 8006302:	e015      	b.n	8006330 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0301 	and.w	r3, r3, #1
 800630e:	2b00      	cmp	r3, #0
 8006310:	d1e4      	bne.n	80062dc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006316:	223f      	movs	r2, #63	; 0x3f
 8006318:	409a      	lsls	r2, r3
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2201      	movs	r2, #1
 8006322:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	2200      	movs	r2, #0
 800632a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800632e:	2300      	movs	r3, #0
}
 8006330:	4618      	mov	r0, r3
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}

08006338 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006346:	b2db      	uxtb	r3, r3
 8006348:	2b02      	cmp	r3, #2
 800634a:	d004      	beq.n	8006356 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2280      	movs	r2, #128	; 0x80
 8006350:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e00c      	b.n	8006370 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2205      	movs	r2, #5
 800635a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f022 0201 	bic.w	r2, r2, #1
 800636c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800636e:	2300      	movs	r3, #0
}
 8006370:	4618      	mov	r0, r3
 8006372:	370c      	adds	r7, #12
 8006374:	46bd      	mov	sp, r7
 8006376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637a:	4770      	bx	lr

0800637c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800637c:	b580      	push	{r7, lr}
 800637e:	b086      	sub	sp, #24
 8006380:	af00      	add	r7, sp, #0
 8006382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8006384:	2300      	movs	r3, #0
 8006386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8006388:	4b8e      	ldr	r3, [pc, #568]	; (80065c4 <HAL_DMA_IRQHandler+0x248>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	4a8e      	ldr	r2, [pc, #568]	; (80065c8 <HAL_DMA_IRQHandler+0x24c>)
 800638e:	fba2 2303 	umull	r2, r3, r2, r3
 8006392:	0a9b      	lsrs	r3, r3, #10
 8006394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800639a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a6:	2208      	movs	r2, #8
 80063a8:	409a      	lsls	r2, r3
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	4013      	ands	r3, r2
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d01a      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f003 0304 	and.w	r3, r3, #4
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d013      	beq.n	80063e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0204 	bic.w	r2, r2, #4
 80063ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063d4:	2208      	movs	r2, #8
 80063d6:	409a      	lsls	r2, r3
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80063e0:	f043 0201 	orr.w	r2, r3, #1
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063ec:	2201      	movs	r2, #1
 80063ee:	409a      	lsls	r2, r3
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	4013      	ands	r3, r2
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d012      	beq.n	800641e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006402:	2b00      	cmp	r3, #0
 8006404:	d00b      	beq.n	800641e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800640a:	2201      	movs	r2, #1
 800640c:	409a      	lsls	r2, r3
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006416:	f043 0202 	orr.w	r2, r3, #2
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006422:	2204      	movs	r2, #4
 8006424:	409a      	lsls	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4013      	ands	r3, r2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d012      	beq.n	8006454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f003 0302 	and.w	r3, r3, #2
 8006438:	2b00      	cmp	r3, #0
 800643a:	d00b      	beq.n	8006454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006440:	2204      	movs	r2, #4
 8006442:	409a      	lsls	r2, r3
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800644c:	f043 0204 	orr.w	r2, r3, #4
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006458:	2210      	movs	r2, #16
 800645a:	409a      	lsls	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	4013      	ands	r3, r2
 8006460:	2b00      	cmp	r3, #0
 8006462:	d043      	beq.n	80064ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f003 0308 	and.w	r3, r3, #8
 800646e:	2b00      	cmp	r3, #0
 8006470:	d03c      	beq.n	80064ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006476:	2210      	movs	r2, #16
 8006478:	409a      	lsls	r2, r3
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d018      	beq.n	80064be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006496:	2b00      	cmp	r3, #0
 8006498:	d108      	bne.n	80064ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d024      	beq.n	80064ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	e01f      	b.n	80064ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d01b      	beq.n	80064ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	4798      	blx	r3
 80064bc:	e016      	b.n	80064ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d107      	bne.n	80064dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	681a      	ldr	r2, [r3, #0]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f022 0208 	bic.w	r2, r2, #8
 80064da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d003      	beq.n	80064ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064e8:	6878      	ldr	r0, [r7, #4]
 80064ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80064f0:	2220      	movs	r2, #32
 80064f2:	409a      	lsls	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	4013      	ands	r3, r2
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	f000 808f 	beq.w	800661c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	f003 0310 	and.w	r3, r3, #16
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8087 	beq.w	800661c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006512:	2220      	movs	r2, #32
 8006514:	409a      	lsls	r2, r3
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b05      	cmp	r3, #5
 8006524:	d136      	bne.n	8006594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f022 0216 	bic.w	r2, r2, #22
 8006534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	695a      	ldr	r2, [r3, #20]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800654a:	2b00      	cmp	r3, #0
 800654c:	d103      	bne.n	8006556 <HAL_DMA_IRQHandler+0x1da>
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006552:	2b00      	cmp	r3, #0
 8006554:	d007      	beq.n	8006566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f022 0208 	bic.w	r2, r2, #8
 8006564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800656a:	223f      	movs	r2, #63	; 0x3f
 800656c:	409a      	lsls	r2, r3
 800656e:	693b      	ldr	r3, [r7, #16]
 8006570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2201      	movs	r2, #1
 8006576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2200      	movs	r2, #0
 800657e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006586:	2b00      	cmp	r3, #0
 8006588:	d07e      	beq.n	8006688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658e:	6878      	ldr	r0, [r7, #4]
 8006590:	4798      	blx	r3
        }
        return;
 8006592:	e079      	b.n	8006688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d01d      	beq.n	80065de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d10d      	bne.n	80065cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d031      	beq.n	800661c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	4798      	blx	r3
 80065c0:	e02c      	b.n	800661c <HAL_DMA_IRQHandler+0x2a0>
 80065c2:	bf00      	nop
 80065c4:	20000258 	.word	0x20000258
 80065c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d023      	beq.n	800661c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065d8:	6878      	ldr	r0, [r7, #4]
 80065da:	4798      	blx	r3
 80065dc:	e01e      	b.n	800661c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d10f      	bne.n	800660c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	681a      	ldr	r2, [r3, #0]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f022 0210 	bic.w	r2, r2, #16
 80065fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006610:	2b00      	cmp	r3, #0
 8006612:	d003      	beq.n	800661c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006620:	2b00      	cmp	r3, #0
 8006622:	d032      	beq.n	800668a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006628:	f003 0301 	and.w	r3, r3, #1
 800662c:	2b00      	cmp	r3, #0
 800662e:	d022      	beq.n	8006676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2205      	movs	r2, #5
 8006634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f022 0201 	bic.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006648:	68bb      	ldr	r3, [r7, #8]
 800664a:	3301      	adds	r3, #1
 800664c:	60bb      	str	r3, [r7, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	429a      	cmp	r2, r3
 8006652:	d307      	bcc.n	8006664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 0301 	and.w	r3, r3, #1
 800665e:	2b00      	cmp	r3, #0
 8006660:	d1f2      	bne.n	8006648 <HAL_DMA_IRQHandler+0x2cc>
 8006662:	e000      	b.n	8006666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	2201      	movs	r2, #1
 800666a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800667a:	2b00      	cmp	r3, #0
 800667c:	d005      	beq.n	800668a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	4798      	blx	r3
 8006686:	e000      	b.n	800668a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006688:	bf00      	nop
    }
  }
}
 800668a:	3718      	adds	r7, #24
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800669e:	b2db      	uxtb	r3, r3
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr

080066ac <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80066ac:	b480      	push	{r7}
 80066ae:	b083      	sub	sp, #12
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	370c      	adds	r7, #12
 80066bc:	46bd      	mov	sp, r7
 80066be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c2:	4770      	bx	lr

080066c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80066c4:	b480      	push	{r7}
 80066c6:	b085      	sub	sp, #20
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	60f8      	str	r0, [r7, #12]
 80066cc:	60b9      	str	r1, [r7, #8]
 80066ce:	607a      	str	r2, [r7, #4]
 80066d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80066e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	683a      	ldr	r2, [r7, #0]
 80066e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	2b40      	cmp	r3, #64	; 0x40
 80066f0:	d108      	bne.n	8006704 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	687a      	ldr	r2, [r7, #4]
 80066f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8006702:	e007      	b.n	8006714 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	68ba      	ldr	r2, [r7, #8]
 800670a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	60da      	str	r2, [r3, #12]
}
 8006714:	bf00      	nop
 8006716:	3714      	adds	r7, #20
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006720:	b480      	push	{r7}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	3b10      	subs	r3, #16
 8006730:	4a14      	ldr	r2, [pc, #80]	; (8006784 <DMA_CalcBaseAndBitshift+0x64>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	091b      	lsrs	r3, r3, #4
 8006738:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800673a:	4a13      	ldr	r2, [pc, #76]	; (8006788 <DMA_CalcBaseAndBitshift+0x68>)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4413      	add	r3, r2
 8006740:	781b      	ldrb	r3, [r3, #0]
 8006742:	461a      	mov	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	2b03      	cmp	r3, #3
 800674c:	d909      	bls.n	8006762 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	1d1a      	adds	r2, r3, #4
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	659a      	str	r2, [r3, #88]	; 0x58
 8006760:	e007      	b.n	8006772 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800676a:	f023 0303 	bic.w	r3, r3, #3
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006776:	4618      	mov	r0, r3
 8006778:	3714      	adds	r7, #20
 800677a:	46bd      	mov	sp, r7
 800677c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	aaaaaaab 	.word	0xaaaaaaab
 8006788:	080115d4 	.word	0x080115d4

0800678c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800678c:	b480      	push	{r7}
 800678e:	b085      	sub	sp, #20
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006794:	2300      	movs	r3, #0
 8006796:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800679c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	699b      	ldr	r3, [r3, #24]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d11f      	bne.n	80067e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80067a6:	68bb      	ldr	r3, [r7, #8]
 80067a8:	2b03      	cmp	r3, #3
 80067aa:	d856      	bhi.n	800685a <DMA_CheckFifoParam+0xce>
 80067ac:	a201      	add	r2, pc, #4	; (adr r2, 80067b4 <DMA_CheckFifoParam+0x28>)
 80067ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b2:	bf00      	nop
 80067b4:	080067c5 	.word	0x080067c5
 80067b8:	080067d7 	.word	0x080067d7
 80067bc:	080067c5 	.word	0x080067c5
 80067c0:	0800685b 	.word	0x0800685b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d046      	beq.n	800685e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067d4:	e043      	b.n	800685e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80067de:	d140      	bne.n	8006862 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80067e0:	2301      	movs	r3, #1
 80067e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80067e4:	e03d      	b.n	8006862 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80067ee:	d121      	bne.n	8006834 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80067f0:	68bb      	ldr	r3, [r7, #8]
 80067f2:	2b03      	cmp	r3, #3
 80067f4:	d837      	bhi.n	8006866 <DMA_CheckFifoParam+0xda>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <DMA_CheckFifoParam+0x70>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	0800680d 	.word	0x0800680d
 8006800:	08006813 	.word	0x08006813
 8006804:	0800680d 	.word	0x0800680d
 8006808:	08006825 	.word	0x08006825
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800680c:	2301      	movs	r3, #1
 800680e:	73fb      	strb	r3, [r7, #15]
      break;
 8006810:	e030      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006816:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800681a:	2b00      	cmp	r3, #0
 800681c:	d025      	beq.n	800686a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006822:	e022      	b.n	800686a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800682c:	d11f      	bne.n	800686e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006832:	e01c      	b.n	800686e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	2b02      	cmp	r3, #2
 8006838:	d903      	bls.n	8006842 <DMA_CheckFifoParam+0xb6>
 800683a:	68bb      	ldr	r3, [r7, #8]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d003      	beq.n	8006848 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006840:	e018      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006842:	2301      	movs	r3, #1
 8006844:	73fb      	strb	r3, [r7, #15]
      break;
 8006846:	e015      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800684c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006850:	2b00      	cmp	r3, #0
 8006852:	d00e      	beq.n	8006872 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006854:	2301      	movs	r3, #1
 8006856:	73fb      	strb	r3, [r7, #15]
      break;
 8006858:	e00b      	b.n	8006872 <DMA_CheckFifoParam+0xe6>
      break;
 800685a:	bf00      	nop
 800685c:	e00a      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;
 800685e:	bf00      	nop
 8006860:	e008      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;
 8006862:	bf00      	nop
 8006864:	e006      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;
 8006866:	bf00      	nop
 8006868:	e004      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;
 800686a:	bf00      	nop
 800686c:	e002      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;   
 800686e:	bf00      	nop
 8006870:	e000      	b.n	8006874 <DMA_CheckFifoParam+0xe8>
      break;
 8006872:	bf00      	nop
    }
  } 
  
  return status; 
 8006874:	7bfb      	ldrb	r3, [r7, #15]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3714      	adds	r7, #20
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
 8006882:	bf00      	nop

08006884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006884:	b480      	push	{r7}
 8006886:	b089      	sub	sp, #36	; 0x24
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800688e:	2300      	movs	r3, #0
 8006890:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006892:	2300      	movs	r3, #0
 8006894:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006896:	2300      	movs	r3, #0
 8006898:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800689a:	2300      	movs	r3, #0
 800689c:	61fb      	str	r3, [r7, #28]
 800689e:	e159      	b.n	8006b54 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80068a0:	2201      	movs	r2, #1
 80068a2:	69fb      	ldr	r3, [r7, #28]
 80068a4:	fa02 f303 	lsl.w	r3, r2, r3
 80068a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	4013      	ands	r3, r2
 80068b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	f040 8148 	bne.w	8006b4e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068be:	683b      	ldr	r3, [r7, #0]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	f003 0303 	and.w	r3, r3, #3
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d005      	beq.n	80068d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	685b      	ldr	r3, [r3, #4]
 80068ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80068d2:	2b02      	cmp	r3, #2
 80068d4:	d130      	bne.n	8006938 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80068dc:	69fb      	ldr	r3, [r7, #28]
 80068de:	005b      	lsls	r3, r3, #1
 80068e0:	2203      	movs	r2, #3
 80068e2:	fa02 f303 	lsl.w	r3, r2, r3
 80068e6:	43db      	mvns	r3, r3
 80068e8:	69ba      	ldr	r2, [r7, #24]
 80068ea:	4013      	ands	r3, r2
 80068ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	68da      	ldr	r2, [r3, #12]
 80068f2:	69fb      	ldr	r3, [r7, #28]
 80068f4:	005b      	lsls	r3, r3, #1
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	69ba      	ldr	r2, [r7, #24]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	69ba      	ldr	r2, [r7, #24]
 8006904:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800690c:	2201      	movs	r2, #1
 800690e:	69fb      	ldr	r3, [r7, #28]
 8006910:	fa02 f303 	lsl.w	r3, r2, r3
 8006914:	43db      	mvns	r3, r3
 8006916:	69ba      	ldr	r2, [r7, #24]
 8006918:	4013      	ands	r3, r2
 800691a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	091b      	lsrs	r3, r3, #4
 8006922:	f003 0201 	and.w	r2, r3, #1
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	fa02 f303 	lsl.w	r3, r2, r3
 800692c:	69ba      	ldr	r2, [r7, #24]
 800692e:	4313      	orrs	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69ba      	ldr	r2, [r7, #24]
 8006936:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	685b      	ldr	r3, [r3, #4]
 800693c:	f003 0303 	and.w	r3, r3, #3
 8006940:	2b03      	cmp	r3, #3
 8006942:	d017      	beq.n	8006974 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800694a:	69fb      	ldr	r3, [r7, #28]
 800694c:	005b      	lsls	r3, r3, #1
 800694e:	2203      	movs	r2, #3
 8006950:	fa02 f303 	lsl.w	r3, r2, r3
 8006954:	43db      	mvns	r3, r3
 8006956:	69ba      	ldr	r2, [r7, #24]
 8006958:	4013      	ands	r3, r2
 800695a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	69fb      	ldr	r3, [r7, #28]
 8006962:	005b      	lsls	r3, r3, #1
 8006964:	fa02 f303 	lsl.w	r3, r2, r3
 8006968:	69ba      	ldr	r2, [r7, #24]
 800696a:	4313      	orrs	r3, r2
 800696c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69ba      	ldr	r2, [r7, #24]
 8006972:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	685b      	ldr	r3, [r3, #4]
 8006978:	f003 0303 	and.w	r3, r3, #3
 800697c:	2b02      	cmp	r3, #2
 800697e:	d123      	bne.n	80069c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	08da      	lsrs	r2, r3, #3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	3208      	adds	r2, #8
 8006988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800698c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	f003 0307 	and.w	r3, r3, #7
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	220f      	movs	r2, #15
 8006998:	fa02 f303 	lsl.w	r3, r2, r3
 800699c:	43db      	mvns	r3, r3
 800699e:	69ba      	ldr	r2, [r7, #24]
 80069a0:	4013      	ands	r3, r2
 80069a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	691a      	ldr	r2, [r3, #16]
 80069a8:	69fb      	ldr	r3, [r7, #28]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	009b      	lsls	r3, r3, #2
 80069b0:	fa02 f303 	lsl.w	r3, r2, r3
 80069b4:	69ba      	ldr	r2, [r7, #24]
 80069b6:	4313      	orrs	r3, r2
 80069b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80069ba:	69fb      	ldr	r3, [r7, #28]
 80069bc:	08da      	lsrs	r2, r3, #3
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	3208      	adds	r2, #8
 80069c2:	69b9      	ldr	r1, [r7, #24]
 80069c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	2203      	movs	r2, #3
 80069d4:	fa02 f303 	lsl.w	r3, r2, r3
 80069d8:	43db      	mvns	r3, r3
 80069da:	69ba      	ldr	r2, [r7, #24]
 80069dc:	4013      	ands	r3, r2
 80069de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	685b      	ldr	r3, [r3, #4]
 80069e4:	f003 0203 	and.w	r2, r3, #3
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	005b      	lsls	r3, r3, #1
 80069ec:	fa02 f303 	lsl.w	r3, r2, r3
 80069f0:	69ba      	ldr	r2, [r7, #24]
 80069f2:	4313      	orrs	r3, r2
 80069f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69ba      	ldr	r2, [r7, #24]
 80069fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 80a2 	beq.w	8006b4e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	60fb      	str	r3, [r7, #12]
 8006a0e:	4b57      	ldr	r3, [pc, #348]	; (8006b6c <HAL_GPIO_Init+0x2e8>)
 8006a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a12:	4a56      	ldr	r2, [pc, #344]	; (8006b6c <HAL_GPIO_Init+0x2e8>)
 8006a14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a18:	6453      	str	r3, [r2, #68]	; 0x44
 8006a1a:	4b54      	ldr	r3, [pc, #336]	; (8006b6c <HAL_GPIO_Init+0x2e8>)
 8006a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a22:	60fb      	str	r3, [r7, #12]
 8006a24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006a26:	4a52      	ldr	r2, [pc, #328]	; (8006b70 <HAL_GPIO_Init+0x2ec>)
 8006a28:	69fb      	ldr	r3, [r7, #28]
 8006a2a:	089b      	lsrs	r3, r3, #2
 8006a2c:	3302      	adds	r3, #2
 8006a2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006a32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006a34:	69fb      	ldr	r3, [r7, #28]
 8006a36:	f003 0303 	and.w	r3, r3, #3
 8006a3a:	009b      	lsls	r3, r3, #2
 8006a3c:	220f      	movs	r2, #15
 8006a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8006a42:	43db      	mvns	r3, r3
 8006a44:	69ba      	ldr	r2, [r7, #24]
 8006a46:	4013      	ands	r3, r2
 8006a48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	4a49      	ldr	r2, [pc, #292]	; (8006b74 <HAL_GPIO_Init+0x2f0>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d019      	beq.n	8006a86 <HAL_GPIO_Init+0x202>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	4a48      	ldr	r2, [pc, #288]	; (8006b78 <HAL_GPIO_Init+0x2f4>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d013      	beq.n	8006a82 <HAL_GPIO_Init+0x1fe>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	4a47      	ldr	r2, [pc, #284]	; (8006b7c <HAL_GPIO_Init+0x2f8>)
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	d00d      	beq.n	8006a7e <HAL_GPIO_Init+0x1fa>
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	4a46      	ldr	r2, [pc, #280]	; (8006b80 <HAL_GPIO_Init+0x2fc>)
 8006a66:	4293      	cmp	r3, r2
 8006a68:	d007      	beq.n	8006a7a <HAL_GPIO_Init+0x1f6>
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	4a45      	ldr	r2, [pc, #276]	; (8006b84 <HAL_GPIO_Init+0x300>)
 8006a6e:	4293      	cmp	r3, r2
 8006a70:	d101      	bne.n	8006a76 <HAL_GPIO_Init+0x1f2>
 8006a72:	2304      	movs	r3, #4
 8006a74:	e008      	b.n	8006a88 <HAL_GPIO_Init+0x204>
 8006a76:	2307      	movs	r3, #7
 8006a78:	e006      	b.n	8006a88 <HAL_GPIO_Init+0x204>
 8006a7a:	2303      	movs	r3, #3
 8006a7c:	e004      	b.n	8006a88 <HAL_GPIO_Init+0x204>
 8006a7e:	2302      	movs	r3, #2
 8006a80:	e002      	b.n	8006a88 <HAL_GPIO_Init+0x204>
 8006a82:	2301      	movs	r3, #1
 8006a84:	e000      	b.n	8006a88 <HAL_GPIO_Init+0x204>
 8006a86:	2300      	movs	r3, #0
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	f002 0203 	and.w	r2, r2, #3
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	4093      	lsls	r3, r2
 8006a92:	69ba      	ldr	r2, [r7, #24]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006a98:	4935      	ldr	r1, [pc, #212]	; (8006b70 <HAL_GPIO_Init+0x2ec>)
 8006a9a:	69fb      	ldr	r3, [r7, #28]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	3302      	adds	r3, #2
 8006aa0:	69ba      	ldr	r2, [r7, #24]
 8006aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006aa6:	4b38      	ldr	r3, [pc, #224]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006aa8:	689b      	ldr	r3, [r3, #8]
 8006aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	43db      	mvns	r3, r3
 8006ab0:	69ba      	ldr	r2, [r7, #24]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d003      	beq.n	8006aca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006ac2:	69ba      	ldr	r2, [r7, #24]
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006aca:	4a2f      	ldr	r2, [pc, #188]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006acc:	69bb      	ldr	r3, [r7, #24]
 8006ace:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006ad0:	4b2d      	ldr	r3, [pc, #180]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ad6:	693b      	ldr	r3, [r7, #16]
 8006ad8:	43db      	mvns	r3, r3
 8006ada:	69ba      	ldr	r2, [r7, #24]
 8006adc:	4013      	ands	r3, r2
 8006ade:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d003      	beq.n	8006af4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8006aec:	69ba      	ldr	r2, [r7, #24]
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	4313      	orrs	r3, r2
 8006af2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006af4:	4a24      	ldr	r2, [pc, #144]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006af6:	69bb      	ldr	r3, [r7, #24]
 8006af8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006afa:	4b23      	ldr	r3, [pc, #140]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	43db      	mvns	r3, r3
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	4013      	ands	r3, r2
 8006b08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	685b      	ldr	r3, [r3, #4]
 8006b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d003      	beq.n	8006b1e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8006b16:	69ba      	ldr	r2, [r7, #24]
 8006b18:	693b      	ldr	r3, [r7, #16]
 8006b1a:	4313      	orrs	r3, r2
 8006b1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006b1e:	4a1a      	ldr	r2, [pc, #104]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006b20:	69bb      	ldr	r3, [r7, #24]
 8006b22:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006b24:	4b18      	ldr	r3, [pc, #96]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b2a:	693b      	ldr	r3, [r7, #16]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	69ba      	ldr	r2, [r7, #24]
 8006b30:	4013      	ands	r3, r2
 8006b32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	685b      	ldr	r3, [r3, #4]
 8006b38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d003      	beq.n	8006b48 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006b40:	69ba      	ldr	r2, [r7, #24]
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006b48:	4a0f      	ldr	r2, [pc, #60]	; (8006b88 <HAL_GPIO_Init+0x304>)
 8006b4a:	69bb      	ldr	r3, [r7, #24]
 8006b4c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006b4e:	69fb      	ldr	r3, [r7, #28]
 8006b50:	3301      	adds	r3, #1
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	69fb      	ldr	r3, [r7, #28]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	f67f aea2 	bls.w	80068a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006b5c:	bf00      	nop
 8006b5e:	bf00      	nop
 8006b60:	3724      	adds	r7, #36	; 0x24
 8006b62:	46bd      	mov	sp, r7
 8006b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b68:	4770      	bx	lr
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	40013800 	.word	0x40013800
 8006b74:	40020000 	.word	0x40020000
 8006b78:	40020400 	.word	0x40020400
 8006b7c:	40020800 	.word	0x40020800
 8006b80:	40020c00 	.word	0x40020c00
 8006b84:	40021000 	.word	0x40021000
 8006b88:	40013c00 	.word	0x40013c00

08006b8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	b085      	sub	sp, #20
 8006b90:	af00      	add	r7, sp, #0
 8006b92:	6078      	str	r0, [r7, #4]
 8006b94:	460b      	mov	r3, r1
 8006b96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	887b      	ldrh	r3, [r7, #2]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	73fb      	strb	r3, [r7, #15]
 8006ba8:	e001      	b.n	8006bae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006baa:	2300      	movs	r3, #0
 8006bac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006bae:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr

08006bbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b083      	sub	sp, #12
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	807b      	strh	r3, [r7, #2]
 8006bc8:	4613      	mov	r3, r2
 8006bca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006bcc:	787b      	ldrb	r3, [r7, #1]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006bd2:	887a      	ldrh	r2, [r7, #2]
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006bd8:	e003      	b.n	8006be2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006bda:	887b      	ldrh	r3, [r7, #2]
 8006bdc:	041a      	lsls	r2, r3, #16
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	619a      	str	r2, [r3, #24]
}
 8006be2:	bf00      	nop
 8006be4:	370c      	adds	r7, #12
 8006be6:	46bd      	mov	sp, r7
 8006be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bec:	4770      	bx	lr
	...

08006bf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b082      	sub	sp, #8
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	4603      	mov	r3, r0
 8006bf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8006bfa:	4b08      	ldr	r3, [pc, #32]	; (8006c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006bfc:	695a      	ldr	r2, [r3, #20]
 8006bfe:	88fb      	ldrh	r3, [r7, #6]
 8006c00:	4013      	ands	r3, r2
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d006      	beq.n	8006c14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006c06:	4a05      	ldr	r2, [pc, #20]	; (8006c1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006c0c:	88fb      	ldrh	r3, [r7, #6]
 8006c0e:	4618      	mov	r0, r3
 8006c10:	f7fb fd62 	bl	80026d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8006c14:	bf00      	nop
 8006c16:	3708      	adds	r7, #8
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	40013c00 	.word	0x40013c00

08006c20 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d101      	bne.n	8006c32 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e12b      	b.n	8006e8a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c38:	b2db      	uxtb	r3, r3
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d106      	bne.n	8006c4c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fe f896 	bl	8004d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2224      	movs	r2, #36	; 0x24
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	681a      	ldr	r2, [r3, #0]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	f022 0201 	bic.w	r2, r2, #1
 8006c62:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006c72:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	681a      	ldr	r2, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c82:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006c84:	f002 fe10 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 8006c88:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	685b      	ldr	r3, [r3, #4]
 8006c8e:	4a81      	ldr	r2, [pc, #516]	; (8006e94 <HAL_I2C_Init+0x274>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d807      	bhi.n	8006ca4 <HAL_I2C_Init+0x84>
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	4a80      	ldr	r2, [pc, #512]	; (8006e98 <HAL_I2C_Init+0x278>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	bf94      	ite	ls
 8006c9c:	2301      	movls	r3, #1
 8006c9e:	2300      	movhi	r3, #0
 8006ca0:	b2db      	uxtb	r3, r3
 8006ca2:	e006      	b.n	8006cb2 <HAL_I2C_Init+0x92>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	4a7d      	ldr	r2, [pc, #500]	; (8006e9c <HAL_I2C_Init+0x27c>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	bf94      	ite	ls
 8006cac:	2301      	movls	r3, #1
 8006cae:	2300      	movhi	r3, #0
 8006cb0:	b2db      	uxtb	r3, r3
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d001      	beq.n	8006cba <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006cb6:	2301      	movs	r3, #1
 8006cb8:	e0e7      	b.n	8006e8a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	4a78      	ldr	r2, [pc, #480]	; (8006ea0 <HAL_I2C_Init+0x280>)
 8006cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc2:	0c9b      	lsrs	r3, r3, #18
 8006cc4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	6a1b      	ldr	r3, [r3, #32]
 8006ce0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	4a6a      	ldr	r2, [pc, #424]	; (8006e94 <HAL_I2C_Init+0x274>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d802      	bhi.n	8006cf4 <HAL_I2C_Init+0xd4>
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	3301      	adds	r3, #1
 8006cf2:	e009      	b.n	8006d08 <HAL_I2C_Init+0xe8>
 8006cf4:	68bb      	ldr	r3, [r7, #8]
 8006cf6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006cfa:	fb02 f303 	mul.w	r3, r2, r3
 8006cfe:	4a69      	ldr	r2, [pc, #420]	; (8006ea4 <HAL_I2C_Init+0x284>)
 8006d00:	fba2 2303 	umull	r2, r3, r2, r3
 8006d04:	099b      	lsrs	r3, r3, #6
 8006d06:	3301      	adds	r3, #1
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6812      	ldr	r2, [r2, #0]
 8006d0c:	430b      	orrs	r3, r1
 8006d0e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006d1a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	495c      	ldr	r1, [pc, #368]	; (8006e94 <HAL_I2C_Init+0x274>)
 8006d24:	428b      	cmp	r3, r1
 8006d26:	d819      	bhi.n	8006d5c <HAL_I2C_Init+0x13c>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	1e59      	subs	r1, r3, #1
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	685b      	ldr	r3, [r3, #4]
 8006d30:	005b      	lsls	r3, r3, #1
 8006d32:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006d3c:	400b      	ands	r3, r1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d00a      	beq.n	8006d58 <HAL_I2C_Init+0x138>
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	1e59      	subs	r1, r3, #1
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	005b      	lsls	r3, r3, #1
 8006d4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006d50:	3301      	adds	r3, #1
 8006d52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d56:	e051      	b.n	8006dfc <HAL_I2C_Init+0x1dc>
 8006d58:	2304      	movs	r3, #4
 8006d5a:	e04f      	b.n	8006dfc <HAL_I2C_Init+0x1dc>
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d111      	bne.n	8006d88 <HAL_I2C_Init+0x168>
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	1e58      	subs	r0, r3, #1
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	6859      	ldr	r1, [r3, #4]
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	005b      	lsls	r3, r3, #1
 8006d70:	440b      	add	r3, r1
 8006d72:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d76:	3301      	adds	r3, #1
 8006d78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	bf0c      	ite	eq
 8006d80:	2301      	moveq	r3, #1
 8006d82:	2300      	movne	r3, #0
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	e012      	b.n	8006dae <HAL_I2C_Init+0x18e>
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	1e58      	subs	r0, r3, #1
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6859      	ldr	r1, [r3, #4]
 8006d90:	460b      	mov	r3, r1
 8006d92:	009b      	lsls	r3, r3, #2
 8006d94:	440b      	add	r3, r1
 8006d96:	0099      	lsls	r1, r3, #2
 8006d98:	440b      	add	r3, r1
 8006d9a:	fbb0 f3f3 	udiv	r3, r0, r3
 8006d9e:	3301      	adds	r3, #1
 8006da0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	bf0c      	ite	eq
 8006da8:	2301      	moveq	r3, #1
 8006daa:	2300      	movne	r3, #0
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d001      	beq.n	8006db6 <HAL_I2C_Init+0x196>
 8006db2:	2301      	movs	r3, #1
 8006db4:	e022      	b.n	8006dfc <HAL_I2C_Init+0x1dc>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	689b      	ldr	r3, [r3, #8]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10e      	bne.n	8006ddc <HAL_I2C_Init+0x1bc>
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	1e58      	subs	r0, r3, #1
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	6859      	ldr	r1, [r3, #4]
 8006dc6:	460b      	mov	r3, r1
 8006dc8:	005b      	lsls	r3, r3, #1
 8006dca:	440b      	add	r3, r1
 8006dcc:	fbb0 f3f3 	udiv	r3, r0, r3
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dda:	e00f      	b.n	8006dfc <HAL_I2C_Init+0x1dc>
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	1e58      	subs	r0, r3, #1
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	6859      	ldr	r1, [r3, #4]
 8006de4:	460b      	mov	r3, r1
 8006de6:	009b      	lsls	r3, r3, #2
 8006de8:	440b      	add	r3, r1
 8006dea:	0099      	lsls	r1, r3, #2
 8006dec:	440b      	add	r3, r1
 8006dee:	fbb0 f3f3 	udiv	r3, r0, r3
 8006df2:	3301      	adds	r3, #1
 8006df4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006df8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006dfc:	6879      	ldr	r1, [r7, #4]
 8006dfe:	6809      	ldr	r1, [r1, #0]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	69da      	ldr	r2, [r3, #28]
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	6a1b      	ldr	r3, [r3, #32]
 8006e16:	431a      	orrs	r2, r3
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	430a      	orrs	r2, r1
 8006e1e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006e2a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	6911      	ldr	r1, [r2, #16]
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	68d2      	ldr	r2, [r2, #12]
 8006e36:	4311      	orrs	r1, r2
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	6812      	ldr	r2, [r2, #0]
 8006e3c:	430b      	orrs	r3, r1
 8006e3e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68db      	ldr	r3, [r3, #12]
 8006e46:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	695a      	ldr	r2, [r3, #20]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	699b      	ldr	r3, [r3, #24]
 8006e52:	431a      	orrs	r2, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	430a      	orrs	r2, r1
 8006e5a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	681a      	ldr	r2, [r3, #0]
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	f042 0201 	orr.w	r2, r2, #1
 8006e6a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	2220      	movs	r2, #32
 8006e76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e88:	2300      	movs	r3, #0
}
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	3710      	adds	r7, #16
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	000186a0 	.word	0x000186a0
 8006e98:	001e847f 	.word	0x001e847f
 8006e9c:	003d08ff 	.word	0x003d08ff
 8006ea0:	431bde83 	.word	0x431bde83
 8006ea4:	10624dd3 	.word	0x10624dd3

08006ea8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b088      	sub	sp, #32
 8006eac:	af02      	add	r7, sp, #8
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	607a      	str	r2, [r7, #4]
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	460b      	mov	r3, r1
 8006eb6:	817b      	strh	r3, [r7, #10]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006ebc:	f7fe fb82 	bl	80055c4 <HAL_GetTick>
 8006ec0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b20      	cmp	r3, #32
 8006ecc:	f040 80e0 	bne.w	8007090 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	2319      	movs	r3, #25
 8006ed6:	2201      	movs	r2, #1
 8006ed8:	4970      	ldr	r1, [pc, #448]	; (800709c <HAL_I2C_Master_Transmit+0x1f4>)
 8006eda:	68f8      	ldr	r0, [r7, #12]
 8006edc:	f001 fea0 	bl	8008c20 <I2C_WaitOnFlagUntilTimeout>
 8006ee0:	4603      	mov	r3, r0
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006ee6:	2302      	movs	r3, #2
 8006ee8:	e0d3      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef0:	2b01      	cmp	r3, #1
 8006ef2:	d101      	bne.n	8006ef8 <HAL_I2C_Master_Transmit+0x50>
 8006ef4:	2302      	movs	r3, #2
 8006ef6:	e0cc      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d007      	beq.n	8006f1e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	f042 0201 	orr.w	r2, r2, #1
 8006f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	681a      	ldr	r2, [r3, #0]
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006f2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	2221      	movs	r2, #33	; 0x21
 8006f32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	2210      	movs	r2, #16
 8006f3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2200      	movs	r2, #0
 8006f42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	893a      	ldrh	r2, [r7, #8]
 8006f4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a50      	ldr	r2, [pc, #320]	; (80070a0 <HAL_I2C_Master_Transmit+0x1f8>)
 8006f5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006f60:	8979      	ldrh	r1, [r7, #10]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	6a3a      	ldr	r2, [r7, #32]
 8006f66:	68f8      	ldr	r0, [r7, #12]
 8006f68:	f001 fd30 	bl	80089cc <I2C_MasterRequestWrite>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006f72:	2301      	movs	r3, #1
 8006f74:	e08d      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f76:	2300      	movs	r3, #0
 8006f78:	613b      	str	r3, [r7, #16]
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	695b      	ldr	r3, [r3, #20]
 8006f80:	613b      	str	r3, [r7, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	699b      	ldr	r3, [r3, #24]
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006f8c:	e066      	b.n	800705c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	6a39      	ldr	r1, [r7, #32]
 8006f92:	68f8      	ldr	r0, [r7, #12]
 8006f94:	f001 ff1a 	bl	8008dcc <I2C_WaitOnTXEFlagUntilTimeout>
 8006f98:	4603      	mov	r3, r0
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d00d      	beq.n	8006fba <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fa2:	2b04      	cmp	r3, #4
 8006fa4:	d107      	bne.n	8006fb6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fb4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006fb6:	2301      	movs	r3, #1
 8006fb8:	e06b      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fbe:	781a      	ldrb	r2, [r3, #0]
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	b29a      	uxth	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b29a      	uxth	r2, r3
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	695b      	ldr	r3, [r3, #20]
 8006ff0:	f003 0304 	and.w	r3, r3, #4
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d11b      	bne.n	8007030 <HAL_I2C_Master_Transmit+0x188>
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d017      	beq.n	8007030 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	781a      	ldrb	r2, [r3, #0]
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007010:	1c5a      	adds	r2, r3, #1
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800701a:	b29b      	uxth	r3, r3
 800701c:	3b01      	subs	r3, #1
 800701e:	b29a      	uxth	r2, r3
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007028:	3b01      	subs	r3, #1
 800702a:	b29a      	uxth	r2, r3
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007030:	697a      	ldr	r2, [r7, #20]
 8007032:	6a39      	ldr	r1, [r7, #32]
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f001 ff0a 	bl	8008e4e <I2C_WaitOnBTFFlagUntilTimeout>
 800703a:	4603      	mov	r3, r0
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00d      	beq.n	800705c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007044:	2b04      	cmp	r3, #4
 8007046:	d107      	bne.n	8007058 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007056:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e01a      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007060:	2b00      	cmp	r3, #0
 8007062:	d194      	bne.n	8006f8e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007072:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	2200      	movs	r2, #0
 8007080:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800708c:	2300      	movs	r3, #0
 800708e:	e000      	b.n	8007092 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007090:	2302      	movs	r3, #2
  }
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	00100002 	.word	0x00100002
 80070a0:	ffff0000 	.word	0xffff0000

080070a4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b087      	sub	sp, #28
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	60f8      	str	r0, [r7, #12]
 80070ac:	607a      	str	r2, [r7, #4]
 80070ae:	461a      	mov	r2, r3
 80070b0:	460b      	mov	r3, r1
 80070b2:	817b      	strh	r3, [r7, #10]
 80070b4:	4613      	mov	r3, r2
 80070b6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 80070b8:	2300      	movs	r3, #0
 80070ba:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c2:	b2db      	uxtb	r3, r3
 80070c4:	2b20      	cmp	r3, #32
 80070c6:	f040 808d 	bne.w	80071e4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80070ca:	4b4a      	ldr	r3, [pc, #296]	; (80071f4 <HAL_I2C_Master_Receive_IT+0x150>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	08db      	lsrs	r3, r3, #3
 80070d0:	4a49      	ldr	r2, [pc, #292]	; (80071f8 <HAL_I2C_Master_Receive_IT+0x154>)
 80070d2:	fba2 2303 	umull	r2, r3, r2, r3
 80070d6:	0a1a      	lsrs	r2, r3, #8
 80070d8:	4613      	mov	r3, r2
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	009a      	lsls	r2, r3, #2
 80070e0:	4413      	add	r3, r2
 80070e2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	3b01      	subs	r3, #1
 80070e8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d116      	bne.n	800711e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	2220      	movs	r2, #32
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800710a:	f043 0220 	orr.w	r2, r3, #32
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e063      	b.n	80071e6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	699b      	ldr	r3, [r3, #24]
 8007124:	f003 0302 	and.w	r3, r3, #2
 8007128:	2b02      	cmp	r3, #2
 800712a:	d0db      	beq.n	80070e4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007132:	2b01      	cmp	r3, #1
 8007134:	d101      	bne.n	800713a <HAL_I2C_Master_Receive_IT+0x96>
 8007136:	2302      	movs	r3, #2
 8007138:	e055      	b.n	80071e6 <HAL_I2C_Master_Receive_IT+0x142>
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2201      	movs	r2, #1
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0301 	and.w	r3, r3, #1
 800714c:	2b01      	cmp	r3, #1
 800714e:	d007      	beq.n	8007160 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	f042 0201 	orr.w	r2, r2, #1
 800715e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	681a      	ldr	r2, [r3, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800716e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2222      	movs	r2, #34	; 0x22
 8007174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	2210      	movs	r2, #16
 800717c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	893a      	ldrh	r2, [r7, #8]
 8007190:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007196:	b29a      	uxth	r2, r3
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a17      	ldr	r2, [pc, #92]	; (80071fc <HAL_I2C_Master_Receive_IT+0x158>)
 80071a0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80071a2:	897a      	ldrh	r2, [r7, #10]
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	685a      	ldr	r2, [r3, #4]
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80071be:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	681a      	ldr	r2, [r3, #0]
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80071ce:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681a      	ldr	r2, [r3, #0]
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80071de:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 80071e0:	2300      	movs	r3, #0
 80071e2:	e000      	b.n	80071e6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 80071e4:	2302      	movs	r3, #2
  }
}
 80071e6:	4618      	mov	r0, r3
 80071e8:	371c      	adds	r7, #28
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	20000258 	.word	0x20000258
 80071f8:	14f8b589 	.word	0x14f8b589
 80071fc:	ffff0000 	.word	0xffff0000

08007200 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b088      	sub	sp, #32
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
 8007212:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007218:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007220:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007228:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800722a:	7bfb      	ldrb	r3, [r7, #15]
 800722c:	2b10      	cmp	r3, #16
 800722e:	d003      	beq.n	8007238 <HAL_I2C_EV_IRQHandler+0x38>
 8007230:	7bfb      	ldrb	r3, [r7, #15]
 8007232:	2b40      	cmp	r3, #64	; 0x40
 8007234:	f040 80c1 	bne.w	80073ba <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	695b      	ldr	r3, [r3, #20]
 8007246:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8007248:	69fb      	ldr	r3, [r7, #28]
 800724a:	f003 0301 	and.w	r3, r3, #1
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10d      	bne.n	800726e <HAL_I2C_EV_IRQHandler+0x6e>
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8007258:	d003      	beq.n	8007262 <HAL_I2C_EV_IRQHandler+0x62>
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8007260:	d101      	bne.n	8007266 <HAL_I2C_EV_IRQHandler+0x66>
 8007262:	2301      	movs	r3, #1
 8007264:	e000      	b.n	8007268 <HAL_I2C_EV_IRQHandler+0x68>
 8007266:	2300      	movs	r3, #0
 8007268:	2b01      	cmp	r3, #1
 800726a:	f000 8132 	beq.w	80074d2 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	f003 0301 	and.w	r3, r3, #1
 8007274:	2b00      	cmp	r3, #0
 8007276:	d00c      	beq.n	8007292 <HAL_I2C_EV_IRQHandler+0x92>
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	0a5b      	lsrs	r3, r3, #9
 800727c:	f003 0301 	and.w	r3, r3, #1
 8007280:	2b00      	cmp	r3, #0
 8007282:	d006      	beq.n	8007292 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f001 fe84 	bl	8008f92 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f000 fd83 	bl	8007d96 <I2C_Master_SB>
 8007290:	e092      	b.n	80073b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	08db      	lsrs	r3, r3, #3
 8007296:	f003 0301 	and.w	r3, r3, #1
 800729a:	2b00      	cmp	r3, #0
 800729c:	d009      	beq.n	80072b2 <HAL_I2C_EV_IRQHandler+0xb2>
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	0a5b      	lsrs	r3, r3, #9
 80072a2:	f003 0301 	and.w	r3, r3, #1
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fdf9 	bl	8007ea2 <I2C_Master_ADD10>
 80072b0:	e082      	b.n	80073b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	085b      	lsrs	r3, r3, #1
 80072b6:	f003 0301 	and.w	r3, r3, #1
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <HAL_I2C_EV_IRQHandler+0xd2>
 80072be:	697b      	ldr	r3, [r7, #20]
 80072c0:	0a5b      	lsrs	r3, r3, #9
 80072c2:	f003 0301 	and.w	r3, r3, #1
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d003      	beq.n	80072d2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fe13 	bl	8007ef6 <I2C_Master_ADDR>
 80072d0:	e072      	b.n	80073b8 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	089b      	lsrs	r3, r3, #2
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d03b      	beq.n	8007356 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	685b      	ldr	r3, [r3, #4]
 80072e4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80072e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072ec:	f000 80f3 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80072f0:	69fb      	ldr	r3, [r7, #28]
 80072f2:	09db      	lsrs	r3, r3, #7
 80072f4:	f003 0301 	and.w	r3, r3, #1
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d00f      	beq.n	800731c <HAL_I2C_EV_IRQHandler+0x11c>
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	0a9b      	lsrs	r3, r3, #10
 8007300:	f003 0301 	and.w	r3, r3, #1
 8007304:	2b00      	cmp	r3, #0
 8007306:	d009      	beq.n	800731c <HAL_I2C_EV_IRQHandler+0x11c>
 8007308:	69fb      	ldr	r3, [r7, #28]
 800730a:	089b      	lsrs	r3, r3, #2
 800730c:	f003 0301 	and.w	r3, r3, #1
 8007310:	2b00      	cmp	r3, #0
 8007312:	d103      	bne.n	800731c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8007314:	6878      	ldr	r0, [r7, #4]
 8007316:	f000 f9f3 	bl	8007700 <I2C_MasterTransmit_TXE>
 800731a:	e04d      	b.n	80073b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	089b      	lsrs	r3, r3, #2
 8007320:	f003 0301 	and.w	r3, r3, #1
 8007324:	2b00      	cmp	r3, #0
 8007326:	f000 80d6 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	0a5b      	lsrs	r3, r3, #9
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	f000 80cf 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8007338:	7bbb      	ldrb	r3, [r7, #14]
 800733a:	2b21      	cmp	r3, #33	; 0x21
 800733c:	d103      	bne.n	8007346 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fa7a 	bl	8007838 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007344:	e0c7      	b.n	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8007346:	7bfb      	ldrb	r3, [r7, #15]
 8007348:	2b40      	cmp	r3, #64	; 0x40
 800734a:	f040 80c4 	bne.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 fae8 	bl	8007924 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007354:	e0bf      	b.n	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007360:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007364:	f000 80b7 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007368:	69fb      	ldr	r3, [r7, #28]
 800736a:	099b      	lsrs	r3, r3, #6
 800736c:	f003 0301 	and.w	r3, r3, #1
 8007370:	2b00      	cmp	r3, #0
 8007372:	d00f      	beq.n	8007394 <HAL_I2C_EV_IRQHandler+0x194>
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	0a9b      	lsrs	r3, r3, #10
 8007378:	f003 0301 	and.w	r3, r3, #1
 800737c:	2b00      	cmp	r3, #0
 800737e:	d009      	beq.n	8007394 <HAL_I2C_EV_IRQHandler+0x194>
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	089b      	lsrs	r3, r3, #2
 8007384:	f003 0301 	and.w	r3, r3, #1
 8007388:	2b00      	cmp	r3, #0
 800738a:	d103      	bne.n	8007394 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 fb5d 	bl	8007a4c <I2C_MasterReceive_RXNE>
 8007392:	e011      	b.n	80073b8 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	089b      	lsrs	r3, r3, #2
 8007398:	f003 0301 	and.w	r3, r3, #1
 800739c:	2b00      	cmp	r3, #0
 800739e:	f000 809a 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80073a2:	697b      	ldr	r3, [r7, #20]
 80073a4:	0a5b      	lsrs	r3, r3, #9
 80073a6:	f003 0301 	and.w	r3, r3, #1
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	f000 8093 	beq.w	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	f000 fc06 	bl	8007bc2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073b6:	e08e      	b.n	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
 80073b8:	e08d      	b.n	80074d6 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d004      	beq.n	80073cc <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	695b      	ldr	r3, [r3, #20]
 80073c8:	61fb      	str	r3, [r7, #28]
 80073ca:	e007      	b.n	80073dc <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	699b      	ldr	r3, [r3, #24]
 80073d2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	695b      	ldr	r3, [r3, #20]
 80073da:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80073dc:	69fb      	ldr	r3, [r7, #28]
 80073de:	085b      	lsrs	r3, r3, #1
 80073e0:	f003 0301 	and.w	r3, r3, #1
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d012      	beq.n	800740e <HAL_I2C_EV_IRQHandler+0x20e>
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	0a5b      	lsrs	r3, r3, #9
 80073ec:	f003 0301 	and.w	r3, r3, #1
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	d00c      	beq.n	800740e <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d003      	beq.n	8007404 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	699b      	ldr	r3, [r3, #24]
 8007402:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8007404:	69b9      	ldr	r1, [r7, #24]
 8007406:	6878      	ldr	r0, [r7, #4]
 8007408:	f000 ffc4 	bl	8008394 <I2C_Slave_ADDR>
 800740c:	e066      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800740e:	69fb      	ldr	r3, [r7, #28]
 8007410:	091b      	lsrs	r3, r3, #4
 8007412:	f003 0301 	and.w	r3, r3, #1
 8007416:	2b00      	cmp	r3, #0
 8007418:	d009      	beq.n	800742e <HAL_I2C_EV_IRQHandler+0x22e>
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	0a5b      	lsrs	r3, r3, #9
 800741e:	f003 0301 	and.w	r3, r3, #1
 8007422:	2b00      	cmp	r3, #0
 8007424:	d003      	beq.n	800742e <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 fffe 	bl	8008428 <I2C_Slave_STOPF>
 800742c:	e056      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800742e:	7bbb      	ldrb	r3, [r7, #14]
 8007430:	2b21      	cmp	r3, #33	; 0x21
 8007432:	d002      	beq.n	800743a <HAL_I2C_EV_IRQHandler+0x23a>
 8007434:	7bbb      	ldrb	r3, [r7, #14]
 8007436:	2b29      	cmp	r3, #41	; 0x29
 8007438:	d125      	bne.n	8007486 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800743a:	69fb      	ldr	r3, [r7, #28]
 800743c:	09db      	lsrs	r3, r3, #7
 800743e:	f003 0301 	and.w	r3, r3, #1
 8007442:	2b00      	cmp	r3, #0
 8007444:	d00f      	beq.n	8007466 <HAL_I2C_EV_IRQHandler+0x266>
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	0a9b      	lsrs	r3, r3, #10
 800744a:	f003 0301 	and.w	r3, r3, #1
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_I2C_EV_IRQHandler+0x266>
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	089b      	lsrs	r3, r3, #2
 8007456:	f003 0301 	and.w	r3, r3, #1
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 feda 	bl	8008218 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007464:	e039      	b.n	80074da <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	089b      	lsrs	r3, r3, #2
 800746a:	f003 0301 	and.w	r3, r3, #1
 800746e:	2b00      	cmp	r3, #0
 8007470:	d033      	beq.n	80074da <HAL_I2C_EV_IRQHandler+0x2da>
 8007472:	697b      	ldr	r3, [r7, #20]
 8007474:	0a5b      	lsrs	r3, r3, #9
 8007476:	f003 0301 	and.w	r3, r3, #1
 800747a:	2b00      	cmp	r3, #0
 800747c:	d02d      	beq.n	80074da <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800747e:	6878      	ldr	r0, [r7, #4]
 8007480:	f000 ff07 	bl	8008292 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007484:	e029      	b.n	80074da <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	099b      	lsrs	r3, r3, #6
 800748a:	f003 0301 	and.w	r3, r3, #1
 800748e:	2b00      	cmp	r3, #0
 8007490:	d00f      	beq.n	80074b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	0a9b      	lsrs	r3, r3, #10
 8007496:	f003 0301 	and.w	r3, r3, #1
 800749a:	2b00      	cmp	r3, #0
 800749c:	d009      	beq.n	80074b2 <HAL_I2C_EV_IRQHandler+0x2b2>
 800749e:	69fb      	ldr	r3, [r7, #28]
 80074a0:	089b      	lsrs	r3, r3, #2
 80074a2:	f003 0301 	and.w	r3, r3, #1
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d103      	bne.n	80074b2 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80074aa:	6878      	ldr	r0, [r7, #4]
 80074ac:	f000 ff12 	bl	80082d4 <I2C_SlaveReceive_RXNE>
 80074b0:	e014      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074b2:	69fb      	ldr	r3, [r7, #28]
 80074b4:	089b      	lsrs	r3, r3, #2
 80074b6:	f003 0301 	and.w	r3, r3, #1
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00e      	beq.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	0a5b      	lsrs	r3, r3, #9
 80074c2:	f003 0301 	and.w	r3, r3, #1
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d008      	beq.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 ff40 	bl	8008350 <I2C_SlaveReceive_BTF>
 80074d0:	e004      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 80074d2:	bf00      	nop
 80074d4:	e002      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80074d6:	bf00      	nop
 80074d8:	e000      	b.n	80074dc <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80074da:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80074dc:	3720      	adds	r7, #32
 80074de:	46bd      	mov	sp, r7
 80074e0:	bd80      	pop	{r7, pc}

080074e2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80074e2:	b580      	push	{r7, lr}
 80074e4:	b08a      	sub	sp, #40	; 0x28
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	695b      	ldr	r3, [r3, #20]
 80074f0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	685b      	ldr	r3, [r3, #4]
 80074f8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80074fa:	2300      	movs	r3, #0
 80074fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007504:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007506:	6a3b      	ldr	r3, [r7, #32]
 8007508:	0a1b      	lsrs	r3, r3, #8
 800750a:	f003 0301 	and.w	r3, r3, #1
 800750e:	2b00      	cmp	r3, #0
 8007510:	d00e      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x4e>
 8007512:	69fb      	ldr	r3, [r7, #28]
 8007514:	0a1b      	lsrs	r3, r3, #8
 8007516:	f003 0301 	and.w	r3, r3, #1
 800751a:	2b00      	cmp	r3, #0
 800751c:	d008      	beq.n	8007530 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800751e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007520:	f043 0301 	orr.w	r3, r3, #1
 8007524:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800752e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8007530:	6a3b      	ldr	r3, [r7, #32]
 8007532:	0a5b      	lsrs	r3, r3, #9
 8007534:	f003 0301 	and.w	r3, r3, #1
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00e      	beq.n	800755a <HAL_I2C_ER_IRQHandler+0x78>
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	0a1b      	lsrs	r3, r3, #8
 8007540:	f003 0301 	and.w	r3, r3, #1
 8007544:	2b00      	cmp	r3, #0
 8007546:	d008      	beq.n	800755a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754a:	f043 0302 	orr.w	r3, r3, #2
 800754e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007558:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	0a9b      	lsrs	r3, r3, #10
 800755e:	f003 0301 	and.w	r3, r3, #1
 8007562:	2b00      	cmp	r3, #0
 8007564:	d03f      	beq.n	80075e6 <HAL_I2C_ER_IRQHandler+0x104>
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	0a1b      	lsrs	r3, r3, #8
 800756a:	f003 0301 	and.w	r3, r3, #1
 800756e:	2b00      	cmp	r3, #0
 8007570:	d039      	beq.n	80075e6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007572:	7efb      	ldrb	r3, [r7, #27]
 8007574:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800757a:	b29b      	uxth	r3, r3
 800757c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007584:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800758c:	7ebb      	ldrb	r3, [r7, #26]
 800758e:	2b20      	cmp	r3, #32
 8007590:	d112      	bne.n	80075b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8007592:	697b      	ldr	r3, [r7, #20]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d10f      	bne.n	80075b8 <HAL_I2C_ER_IRQHandler+0xd6>
 8007598:	7cfb      	ldrb	r3, [r7, #19]
 800759a:	2b21      	cmp	r3, #33	; 0x21
 800759c:	d008      	beq.n	80075b0 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800759e:	7cfb      	ldrb	r3, [r7, #19]
 80075a0:	2b29      	cmp	r3, #41	; 0x29
 80075a2:	d005      	beq.n	80075b0 <HAL_I2C_ER_IRQHandler+0xce>
 80075a4:	7cfb      	ldrb	r3, [r7, #19]
 80075a6:	2b28      	cmp	r3, #40	; 0x28
 80075a8:	d106      	bne.n	80075b8 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	2b21      	cmp	r3, #33	; 0x21
 80075ae:	d103      	bne.n	80075b8 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f001 f869 	bl	8008688 <I2C_Slave_AF>
 80075b6:	e016      	b.n	80075e6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80075c0:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80075c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075c4:	f043 0304 	orr.w	r3, r3, #4
 80075c8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80075ca:	7efb      	ldrb	r3, [r7, #27]
 80075cc:	2b10      	cmp	r3, #16
 80075ce:	d002      	beq.n	80075d6 <HAL_I2C_ER_IRQHandler+0xf4>
 80075d0:	7efb      	ldrb	r3, [r7, #27]
 80075d2:	2b40      	cmp	r3, #64	; 0x40
 80075d4:	d107      	bne.n	80075e6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80075e6:	6a3b      	ldr	r3, [r7, #32]
 80075e8:	0adb      	lsrs	r3, r3, #11
 80075ea:	f003 0301 	and.w	r3, r3, #1
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00e      	beq.n	8007610 <HAL_I2C_ER_IRQHandler+0x12e>
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	0a1b      	lsrs	r3, r3, #8
 80075f6:	f003 0301 	and.w	r3, r3, #1
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d008      	beq.n	8007610 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80075fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007600:	f043 0308 	orr.w	r3, r3, #8
 8007604:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800760e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8007610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007612:	2b00      	cmp	r3, #0
 8007614:	d008      	beq.n	8007628 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800761a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761c:	431a      	orrs	r2, r3
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f001 f8a0 	bl	8008768 <I2C_ITError>
  }
}
 8007628:	bf00      	nop
 800762a:	3728      	adds	r7, #40	; 0x28
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8007638:	bf00      	nop
 800763a:	370c      	adds	r7, #12
 800763c:	46bd      	mov	sp, r7
 800763e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007642:	4770      	bx	lr

08007644 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007644:	b480      	push	{r7}
 8007646:	b083      	sub	sp, #12
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800764c:	bf00      	nop
 800764e:	370c      	adds	r7, #12
 8007650:	46bd      	mov	sp, r7
 8007652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007656:	4770      	bx	lr

08007658 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007660:	bf00      	nop
 8007662:	370c      	adds	r7, #12
 8007664:	46bd      	mov	sp, r7
 8007666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800766a:	4770      	bx	lr

0800766c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
 8007688:	460b      	mov	r3, r1
 800768a:	70fb      	strb	r3, [r7, #3]
 800768c:	4613      	mov	r3, r2
 800768e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007690:	bf00      	nop
 8007692:	370c      	adds	r7, #12
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800769c:	b480      	push	{r7}
 800769e:	b083      	sub	sp, #12
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80076a4:	bf00      	nop
 80076a6:	370c      	adds	r7, #12
 80076a8:	46bd      	mov	sp, r7
 80076aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ae:	4770      	bx	lr

080076b0 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b083      	sub	sp, #12
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80076b8:	bf00      	nop
 80076ba:	370c      	adds	r7, #12
 80076bc:	46bd      	mov	sp, r7
 80076be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c2:	4770      	bx	lr

080076c4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076c4:	b480      	push	{r7}
 80076c6:	b083      	sub	sp, #12
 80076c8:	af00      	add	r7, sp, #0
 80076ca:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80076cc:	bf00      	nop
 80076ce:	370c      	adds	r7, #12
 80076d0:	46bd      	mov	sp, r7
 80076d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d6:	4770      	bx	lr

080076d8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80076e0:	bf00      	nop
 80076e2:	370c      	adds	r7, #12
 80076e4:	46bd      	mov	sp, r7
 80076e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ea:	4770      	bx	lr

080076ec <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80076f4:	bf00      	nop
 80076f6:	370c      	adds	r7, #12
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr

08007700 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b084      	sub	sp, #16
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800770e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007716:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800771c:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007722:	2b00      	cmp	r3, #0
 8007724:	d150      	bne.n	80077c8 <I2C_MasterTransmit_TXE+0xc8>
 8007726:	7bfb      	ldrb	r3, [r7, #15]
 8007728:	2b21      	cmp	r3, #33	; 0x21
 800772a:	d14d      	bne.n	80077c8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	2b08      	cmp	r3, #8
 8007730:	d01d      	beq.n	800776e <I2C_MasterTransmit_TXE+0x6e>
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	2b20      	cmp	r3, #32
 8007736:	d01a      	beq.n	800776e <I2C_MasterTransmit_TXE+0x6e>
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800773e:	d016      	beq.n	800776e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	685a      	ldr	r2, [r3, #4]
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800774e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2211      	movs	r2, #17
 8007754:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2200      	movs	r2, #0
 800775a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2220      	movs	r2, #32
 8007762:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff ff62 	bl	8007630 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800776c:	e060      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	685a      	ldr	r2, [r3, #4]
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800777c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800778c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2200      	movs	r2, #0
 8007792:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077a2:	b2db      	uxtb	r3, r3
 80077a4:	2b40      	cmp	r3, #64	; 0x40
 80077a6:	d107      	bne.n	80077b8 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80077b0:	6878      	ldr	r0, [r7, #4]
 80077b2:	f7ff ff7d 	bl	80076b0 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077b6:	e03b      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	2200      	movs	r2, #0
 80077bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ff35 	bl	8007630 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80077c6:	e033      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80077c8:	7bfb      	ldrb	r3, [r7, #15]
 80077ca:	2b21      	cmp	r3, #33	; 0x21
 80077cc:	d005      	beq.n	80077da <I2C_MasterTransmit_TXE+0xda>
 80077ce:	7bbb      	ldrb	r3, [r7, #14]
 80077d0:	2b40      	cmp	r3, #64	; 0x40
 80077d2:	d12d      	bne.n	8007830 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80077d4:	7bfb      	ldrb	r3, [r7, #15]
 80077d6:	2b22      	cmp	r3, #34	; 0x22
 80077d8:	d12a      	bne.n	8007830 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077de:	b29b      	uxth	r3, r3
 80077e0:	2b00      	cmp	r3, #0
 80077e2:	d108      	bne.n	80077f6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	685a      	ldr	r2, [r3, #4]
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077f2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80077f4:	e01c      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	2b40      	cmp	r3, #64	; 0x40
 8007800:	d103      	bne.n	800780a <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8007802:	6878      	ldr	r0, [r7, #4]
 8007804:	f000 f88e 	bl	8007924 <I2C_MemoryTransmit_TXE_BTF>
}
 8007808:	e012      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800780e:	781a      	ldrb	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800782e:	e7ff      	b.n	8007830 <I2C_MasterTransmit_TXE+0x130>
 8007830:	bf00      	nop
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}

08007838 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b084      	sub	sp, #16
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007844:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800784c:	b2db      	uxtb	r3, r3
 800784e:	2b21      	cmp	r3, #33	; 0x21
 8007850:	d164      	bne.n	800791c <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007856:	b29b      	uxth	r3, r3
 8007858:	2b00      	cmp	r3, #0
 800785a:	d012      	beq.n	8007882 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007860:	781a      	ldrb	r2, [r3, #0]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786c:	1c5a      	adds	r2, r3, #1
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007876:	b29b      	uxth	r3, r3
 8007878:	3b01      	subs	r3, #1
 800787a:	b29a      	uxth	r2, r3
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007880:	e04c      	b.n	800791c <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	2b08      	cmp	r3, #8
 8007886:	d01d      	beq.n	80078c4 <I2C_MasterTransmit_BTF+0x8c>
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2b20      	cmp	r3, #32
 800788c:	d01a      	beq.n	80078c4 <I2C_MasterTransmit_BTF+0x8c>
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007894:	d016      	beq.n	80078c4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	685a      	ldr	r2, [r3, #4]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078a4:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2211      	movs	r2, #17
 80078aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2200      	movs	r2, #0
 80078b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80078bc:	6878      	ldr	r0, [r7, #4]
 80078be:	f7ff feb7 	bl	8007630 <HAL_I2C_MasterTxCpltCallback>
}
 80078c2:	e02b      	b.n	800791c <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	685a      	ldr	r2, [r3, #4]
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80078d2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	681a      	ldr	r2, [r3, #0]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80078e2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	2220      	movs	r2, #32
 80078ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b40      	cmp	r3, #64	; 0x40
 80078fc:	d107      	bne.n	800790e <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8007906:	6878      	ldr	r0, [r7, #4]
 8007908:	f7ff fed2 	bl	80076b0 <HAL_I2C_MemTxCpltCallback>
}
 800790c:	e006      	b.n	800791c <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f7ff fe8a 	bl	8007630 <HAL_I2C_MasterTxCpltCallback>
}
 800791c:	bf00      	nop
 800791e:	3710      	adds	r7, #16
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007932:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007938:	2b00      	cmp	r3, #0
 800793a:	d11d      	bne.n	8007978 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007940:	2b01      	cmp	r3, #1
 8007942:	d10b      	bne.n	800795c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007948:	b2da      	uxtb	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007954:	1c9a      	adds	r2, r3, #2
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800795a:	e073      	b.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007960:	b29b      	uxth	r3, r3
 8007962:	121b      	asrs	r3, r3, #8
 8007964:	b2da      	uxtb	r2, r3
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007976:	e065      	b.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800797c:	2b01      	cmp	r3, #1
 800797e:	d10b      	bne.n	8007998 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007984:	b2da      	uxtb	r2, r3
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007990:	1c5a      	adds	r2, r3, #1
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007996:	e055      	b.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800799c:	2b02      	cmp	r3, #2
 800799e:	d151      	bne.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80079a0:	7bfb      	ldrb	r3, [r7, #15]
 80079a2:	2b22      	cmp	r3, #34	; 0x22
 80079a4:	d10d      	bne.n	80079c2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80079b4:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80079ba:	1c5a      	adds	r2, r3, #1
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	651a      	str	r2, [r3, #80]	; 0x50
}
 80079c0:	e040      	b.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079c6:	b29b      	uxth	r3, r3
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d015      	beq.n	80079f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 80079cc:	7bfb      	ldrb	r3, [r7, #15]
 80079ce:	2b21      	cmp	r3, #33	; 0x21
 80079d0:	d112      	bne.n	80079f8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d6:	781a      	ldrb	r2, [r3, #0]
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079e2:	1c5a      	adds	r2, r3, #1
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079ec:	b29b      	uxth	r3, r3
 80079ee:	3b01      	subs	r3, #1
 80079f0:	b29a      	uxth	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80079f6:	e025      	b.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d120      	bne.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	2b21      	cmp	r3, #33	; 0x21
 8007a06:	d11d      	bne.n	8007a44 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685a      	ldr	r2, [r3, #4]
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007a16:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	681a      	ldr	r2, [r3, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007a26:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2200      	movs	r2, #0
 8007a2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	2220      	movs	r2, #32
 8007a32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f7ff fe36 	bl	80076b0 <HAL_I2C_MemTxCpltCallback>
}
 8007a44:	bf00      	nop
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a5a:	b2db      	uxtb	r3, r3
 8007a5c:	2b22      	cmp	r3, #34	; 0x22
 8007a5e:	f040 80ac 	bne.w	8007bba <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a66:	b29b      	uxth	r3, r3
 8007a68:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d921      	bls.n	8007ab4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	691a      	ldr	r2, [r3, #16]
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a8c:	b29b      	uxth	r3, r3
 8007a8e:	3b01      	subs	r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a9a:	b29b      	uxth	r3, r3
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	f040 808c 	bne.w	8007bba <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	685a      	ldr	r2, [r3, #4]
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ab0:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007ab2:	e082      	b.n	8007bba <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d075      	beq.n	8007ba8 <I2C_MasterReceive_RXNE+0x15c>
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2b01      	cmp	r3, #1
 8007ac0:	d002      	beq.n	8007ac8 <I2C_MasterReceive_RXNE+0x7c>
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d16f      	bne.n	8007ba8 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ac8:	6878      	ldr	r0, [r7, #4]
 8007aca:	f001 fa01 	bl	8008ed0 <I2C_WaitOnSTOPRequestThroughIT>
 8007ace:	4603      	mov	r3, r0
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d142      	bne.n	8007b5a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	681a      	ldr	r2, [r3, #0]
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ae2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007af2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691a      	ldr	r2, [r3, #16]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007afe:	b2d2      	uxtb	r2, r2
 8007b00:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b06:	1c5a      	adds	r2, r3, #1
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b10:	b29b      	uxth	r3, r3
 8007b12:	3b01      	subs	r3, #1
 8007b14:	b29a      	uxth	r2, r3
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2220      	movs	r2, #32
 8007b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b28:	b2db      	uxtb	r3, r3
 8007b2a:	2b40      	cmp	r3, #64	; 0x40
 8007b2c:	d10a      	bne.n	8007b44 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f7ff fdc1 	bl	80076c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007b42:	e03a      	b.n	8007bba <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2212      	movs	r2, #18
 8007b50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f7ff fd76 	bl	8007644 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007b58:	e02f      	b.n	8007bba <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	685a      	ldr	r2, [r3, #4]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007b68:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	691a      	ldr	r2, [r3, #16]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b74:	b2d2      	uxtb	r2, r2
 8007b76:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	1c5a      	adds	r2, r3, #1
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b86:	b29b      	uxth	r3, r3
 8007b88:	3b01      	subs	r3, #1
 8007b8a:	b29a      	uxth	r2, r3
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	2220      	movs	r2, #32
 8007b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f7ff fd99 	bl	80076d8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007ba6:	e008      	b.n	8007bba <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	685a      	ldr	r2, [r3, #4]
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bb6:	605a      	str	r2, [r3, #4]
}
 8007bb8:	e7ff      	b.n	8007bba <I2C_MasterReceive_RXNE+0x16e>
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b084      	sub	sp, #16
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd4:	b29b      	uxth	r3, r3
 8007bd6:	2b04      	cmp	r3, #4
 8007bd8:	d11b      	bne.n	8007c12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	685a      	ldr	r2, [r3, #4]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007be8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	691a      	ldr	r2, [r3, #16]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bf4:	b2d2      	uxtb	r2, r2
 8007bf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bfc:	1c5a      	adds	r2, r3, #1
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c06:	b29b      	uxth	r3, r3
 8007c08:	3b01      	subs	r3, #1
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8007c10:	e0bd      	b.n	8007d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d129      	bne.n	8007c70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	685a      	ldr	r2, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	2b04      	cmp	r3, #4
 8007c30:	d00a      	beq.n	8007c48 <I2C_MasterReceive_BTF+0x86>
 8007c32:	68fb      	ldr	r3, [r7, #12]
 8007c34:	2b02      	cmp	r3, #2
 8007c36:	d007      	beq.n	8007c48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	681a      	ldr	r2, [r3, #0]
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	691a      	ldr	r2, [r3, #16]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c52:	b2d2      	uxtb	r2, r2
 8007c54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	b29a      	uxth	r2, r3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007c6e:	e08e      	b.n	8007d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	2b02      	cmp	r3, #2
 8007c78:	d176      	bne.n	8007d68 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d002      	beq.n	8007c86 <I2C_MasterReceive_BTF+0xc4>
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	2b10      	cmp	r3, #16
 8007c84:	d108      	bne.n	8007c98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	681a      	ldr	r2, [r3, #0]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c94:	601a      	str	r2, [r3, #0]
 8007c96:	e019      	b.n	8007ccc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	2b04      	cmp	r3, #4
 8007c9c:	d002      	beq.n	8007ca4 <I2C_MasterReceive_BTF+0xe2>
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	2b02      	cmp	r3, #2
 8007ca2:	d108      	bne.n	8007cb6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	e00a      	b.n	8007ccc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d007      	beq.n	8007ccc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007cca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	691a      	ldr	r2, [r3, #16]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cd6:	b2d2      	uxtb	r2, r2
 8007cd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cde:	1c5a      	adds	r2, r3, #1
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	3b01      	subs	r3, #1
 8007cec:	b29a      	uxth	r2, r3
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	691a      	ldr	r2, [r3, #16]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cfc:	b2d2      	uxtb	r2, r2
 8007cfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d04:	1c5a      	adds	r2, r3, #1
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d0e:	b29b      	uxth	r3, r3
 8007d10:	3b01      	subs	r3, #1
 8007d12:	b29a      	uxth	r2, r3
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	685a      	ldr	r2, [r3, #4]
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8007d26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2220      	movs	r2, #32
 8007d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007d36:	b2db      	uxtb	r3, r3
 8007d38:	2b40      	cmp	r3, #64	; 0x40
 8007d3a:	d10a      	bne.n	8007d52 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8007d4a:	6878      	ldr	r0, [r7, #4]
 8007d4c:	f7ff fcba 	bl	80076c4 <HAL_I2C_MemRxCpltCallback>
}
 8007d50:	e01d      	b.n	8007d8e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	2212      	movs	r2, #18
 8007d5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007d60:	6878      	ldr	r0, [r7, #4]
 8007d62:	f7ff fc6f 	bl	8007644 <HAL_I2C_MasterRxCpltCallback>
}
 8007d66:	e012      	b.n	8007d8e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	691a      	ldr	r2, [r3, #16]
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d72:	b2d2      	uxtb	r2, r2
 8007d74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d7a:	1c5a      	adds	r2, r3, #1
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007d84:	b29b      	uxth	r3, r3
 8007d86:	3b01      	subs	r3, #1
 8007d88:	b29a      	uxth	r2, r3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8007d8e:	bf00      	nop
 8007d90:	3710      	adds	r7, #16
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007d96:	b480      	push	{r7}
 8007d98:	b083      	sub	sp, #12
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007da4:	b2db      	uxtb	r3, r3
 8007da6:	2b40      	cmp	r3, #64	; 0x40
 8007da8:	d117      	bne.n	8007dda <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d109      	bne.n	8007dc6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	b2db      	uxtb	r3, r3
 8007db8:	461a      	mov	r2, r3
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007dc2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007dc4:	e067      	b.n	8007e96 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dca:	b2db      	uxtb	r3, r3
 8007dcc:	f043 0301 	orr.w	r3, r3, #1
 8007dd0:	b2da      	uxtb	r2, r3
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	611a      	str	r2, [r3, #16]
}
 8007dd8:	e05d      	b.n	8007e96 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	691b      	ldr	r3, [r3, #16]
 8007dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007de2:	d133      	bne.n	8007e4c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007dea:	b2db      	uxtb	r3, r3
 8007dec:	2b21      	cmp	r3, #33	; 0x21
 8007dee:	d109      	bne.n	8007e04 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007df0:	687b      	ldr	r3, [r7, #4]
 8007df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	461a      	mov	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007e00:	611a      	str	r2, [r3, #16]
 8007e02:	e008      	b.n	8007e16 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e08:	b2db      	uxtb	r3, r3
 8007e0a:	f043 0301 	orr.w	r3, r3, #1
 8007e0e:	b2da      	uxtb	r2, r3
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d004      	beq.n	8007e28 <I2C_Master_SB+0x92>
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d108      	bne.n	8007e3a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d032      	beq.n	8007e96 <I2C_Master_SB+0x100>
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d02d      	beq.n	8007e96 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	685a      	ldr	r2, [r3, #4]
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007e48:	605a      	str	r2, [r3, #4]
}
 8007e4a:	e024      	b.n	8007e96 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d10e      	bne.n	8007e72 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e58:	b29b      	uxth	r3, r3
 8007e5a:	11db      	asrs	r3, r3, #7
 8007e5c:	b2db      	uxtb	r3, r3
 8007e5e:	f003 0306 	and.w	r3, r3, #6
 8007e62:	b2db      	uxtb	r3, r3
 8007e64:	f063 030f 	orn	r3, r3, #15
 8007e68:	b2da      	uxtb	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	611a      	str	r2, [r3, #16]
}
 8007e70:	e011      	b.n	8007e96 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e76:	2b01      	cmp	r3, #1
 8007e78:	d10d      	bne.n	8007e96 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	11db      	asrs	r3, r3, #7
 8007e82:	b2db      	uxtb	r3, r3
 8007e84:	f003 0306 	and.w	r3, r3, #6
 8007e88:	b2db      	uxtb	r3, r3
 8007e8a:	f063 030e 	orn	r3, r3, #14
 8007e8e:	b2da      	uxtb	r2, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	611a      	str	r2, [r3, #16]
}
 8007e96:	bf00      	nop
 8007e98:	370c      	adds	r7, #12
 8007e9a:	46bd      	mov	sp, r7
 8007e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ea0:	4770      	bx	lr

08007ea2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007ea2:	b480      	push	{r7}
 8007ea4:	b083      	sub	sp, #12
 8007ea6:	af00      	add	r7, sp, #0
 8007ea8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eae:	b2da      	uxtb	r2, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <I2C_Master_ADD10+0x26>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d108      	bne.n	8007eda <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d00c      	beq.n	8007eea <I2C_Master_ADD10+0x48>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d007      	beq.n	8007eea <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	685a      	ldr	r2, [r3, #4]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ee8:	605a      	str	r2, [r3, #4]
  }
}
 8007eea:	bf00      	nop
 8007eec:	370c      	adds	r7, #12
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef4:	4770      	bx	lr

08007ef6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007ef6:	b480      	push	{r7}
 8007ef8:	b091      	sub	sp, #68	; 0x44
 8007efa:	af00      	add	r7, sp, #0
 8007efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f12:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f1a:	b2db      	uxtb	r3, r3
 8007f1c:	2b22      	cmp	r3, #34	; 0x22
 8007f1e:	f040 8169 	bne.w	80081f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10f      	bne.n	8007f4a <I2C_Master_ADDR+0x54>
 8007f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007f2e:	2b40      	cmp	r3, #64	; 0x40
 8007f30:	d10b      	bne.n	8007f4a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f32:	2300      	movs	r3, #0
 8007f34:	633b      	str	r3, [r7, #48]	; 0x30
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	695b      	ldr	r3, [r3, #20]
 8007f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	633b      	str	r3, [r7, #48]	; 0x30
 8007f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f48:	e160      	b.n	800820c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d11d      	bne.n	8007f8e <I2C_Master_ADDR+0x98>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	691b      	ldr	r3, [r3, #16]
 8007f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f5a:	d118      	bne.n	8007f8e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f5c:	2300      	movs	r3, #0
 8007f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	695b      	ldr	r3, [r3, #20]
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007f80:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f86:	1c5a      	adds	r2, r3, #1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8007f8c:	e13e      	b.n	800820c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f92:	b29b      	uxth	r3, r3
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d113      	bne.n	8007fc0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007f98:	2300      	movs	r3, #0
 8007f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	695b      	ldr	r3, [r3, #20]
 8007fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e115      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fc4:	b29b      	uxth	r3, r3
 8007fc6:	2b01      	cmp	r3, #1
 8007fc8:	f040 808a 	bne.w	80080e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007fd2:	d137      	bne.n	8008044 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007fe2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	685b      	ldr	r3, [r3, #4]
 8007fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ff2:	d113      	bne.n	800801c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008002:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008004:	2300      	movs	r3, #0
 8008006:	627b      	str	r3, [r7, #36]	; 0x24
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	695b      	ldr	r3, [r3, #20]
 800800e:	627b      	str	r3, [r7, #36]	; 0x24
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	627b      	str	r3, [r7, #36]	; 0x24
 8008018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801a:	e0e7      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800801c:	2300      	movs	r3, #0
 800801e:	623b      	str	r3, [r7, #32]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	623b      	str	r3, [r7, #32]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	623b      	str	r3, [r7, #32]
 8008030:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	681a      	ldr	r2, [r3, #0]
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e0d3      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8008044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008046:	2b08      	cmp	r3, #8
 8008048:	d02e      	beq.n	80080a8 <I2C_Master_ADDR+0x1b2>
 800804a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800804c:	2b20      	cmp	r3, #32
 800804e:	d02b      	beq.n	80080a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8008050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008052:	2b12      	cmp	r3, #18
 8008054:	d102      	bne.n	800805c <I2C_Master_ADDR+0x166>
 8008056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008058:	2b01      	cmp	r3, #1
 800805a:	d125      	bne.n	80080a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800805c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800805e:	2b04      	cmp	r3, #4
 8008060:	d00e      	beq.n	8008080 <I2C_Master_ADDR+0x18a>
 8008062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008064:	2b02      	cmp	r3, #2
 8008066:	d00b      	beq.n	8008080 <I2C_Master_ADDR+0x18a>
 8008068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806a:	2b10      	cmp	r3, #16
 800806c:	d008      	beq.n	8008080 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	681a      	ldr	r2, [r3, #0]
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800807c:	601a      	str	r2, [r3, #0]
 800807e:	e007      	b.n	8008090 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	681a      	ldr	r2, [r3, #0]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800808e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008090:	2300      	movs	r3, #0
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	699b      	ldr	r3, [r3, #24]
 80080a2:	61fb      	str	r3, [r7, #28]
 80080a4:	69fb      	ldr	r3, [r7, #28]
 80080a6:	e0a1      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80080b8:	2300      	movs	r3, #0
 80080ba:	61bb      	str	r3, [r7, #24]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	681b      	ldr	r3, [r3, #0]
 80080c0:	695b      	ldr	r3, [r3, #20]
 80080c2:	61bb      	str	r3, [r7, #24]
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	699b      	ldr	r3, [r3, #24]
 80080ca:	61bb      	str	r3, [r7, #24]
 80080cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80080dc:	601a      	str	r2, [r3, #0]
 80080de:	e085      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b02      	cmp	r3, #2
 80080e8:	d14d      	bne.n	8008186 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80080ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080ec:	2b04      	cmp	r3, #4
 80080ee:	d016      	beq.n	800811e <I2C_Master_ADDR+0x228>
 80080f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f2:	2b02      	cmp	r3, #2
 80080f4:	d013      	beq.n	800811e <I2C_Master_ADDR+0x228>
 80080f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d010      	beq.n	800811e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800810a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	681a      	ldr	r2, [r3, #0]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800811a:	601a      	str	r2, [r3, #0]
 800811c:	e007      	b.n	800812e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	681a      	ldr	r2, [r3, #0]
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800812c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	685b      	ldr	r3, [r3, #4]
 8008134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800813c:	d117      	bne.n	800816e <I2C_Master_ADDR+0x278>
 800813e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8008144:	d00b      	beq.n	800815e <I2C_Master_ADDR+0x268>
 8008146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008148:	2b01      	cmp	r3, #1
 800814a:	d008      	beq.n	800815e <I2C_Master_ADDR+0x268>
 800814c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800814e:	2b08      	cmp	r3, #8
 8008150:	d005      	beq.n	800815e <I2C_Master_ADDR+0x268>
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	2b10      	cmp	r3, #16
 8008156:	d002      	beq.n	800815e <I2C_Master_ADDR+0x268>
 8008158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800815a:	2b20      	cmp	r3, #32
 800815c:	d107      	bne.n	800816e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	685a      	ldr	r2, [r3, #4]
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800816c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800816e:	2300      	movs	r3, #0
 8008170:	617b      	str	r3, [r7, #20]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	695b      	ldr	r3, [r3, #20]
 8008178:	617b      	str	r3, [r7, #20]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	699b      	ldr	r3, [r3, #24]
 8008180:	617b      	str	r3, [r7, #20]
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	e032      	b.n	80081ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008194:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	685b      	ldr	r3, [r3, #4]
 800819c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a4:	d117      	bne.n	80081d6 <I2C_Master_ADDR+0x2e0>
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80081ac:	d00b      	beq.n	80081c6 <I2C_Master_ADDR+0x2d0>
 80081ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d008      	beq.n	80081c6 <I2C_Master_ADDR+0x2d0>
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	2b08      	cmp	r3, #8
 80081b8:	d005      	beq.n	80081c6 <I2C_Master_ADDR+0x2d0>
 80081ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d002      	beq.n	80081c6 <I2C_Master_ADDR+0x2d0>
 80081c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081c2:	2b20      	cmp	r3, #32
 80081c4:	d107      	bne.n	80081d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	685a      	ldr	r2, [r3, #4]
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	681b      	ldr	r3, [r3, #0]
 80081d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80081d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081d6:	2300      	movs	r3, #0
 80081d8:	613b      	str	r3, [r7, #16]
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	695b      	ldr	r3, [r3, #20]
 80081e0:	613b      	str	r3, [r7, #16]
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	699b      	ldr	r3, [r3, #24]
 80081e8:	613b      	str	r3, [r7, #16]
 80081ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2200      	movs	r2, #0
 80081f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80081f2:	e00b      	b.n	800820c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80081f4:	2300      	movs	r3, #0
 80081f6:	60fb      	str	r3, [r7, #12]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	695b      	ldr	r3, [r3, #20]
 80081fe:	60fb      	str	r3, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	699b      	ldr	r3, [r3, #24]
 8008206:	60fb      	str	r3, [r7, #12]
 8008208:	68fb      	ldr	r3, [r7, #12]
}
 800820a:	e7ff      	b.n	800820c <I2C_Master_ADDR+0x316>
 800820c:	bf00      	nop
 800820e:	3744      	adds	r7, #68	; 0x44
 8008210:	46bd      	mov	sp, r7
 8008212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008216:	4770      	bx	lr

08008218 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008226:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800822c:	b29b      	uxth	r3, r3
 800822e:	2b00      	cmp	r3, #0
 8008230:	d02b      	beq.n	800828a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008236:	781a      	ldrb	r2, [r3, #0]
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008242:	1c5a      	adds	r2, r3, #1
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800824c:	b29b      	uxth	r3, r3
 800824e:	3b01      	subs	r3, #1
 8008250:	b29a      	uxth	r2, r3
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800825a:	b29b      	uxth	r3, r3
 800825c:	2b00      	cmp	r3, #0
 800825e:	d114      	bne.n	800828a <I2C_SlaveTransmit_TXE+0x72>
 8008260:	7bfb      	ldrb	r3, [r7, #15]
 8008262:	2b29      	cmp	r3, #41	; 0x29
 8008264:	d111      	bne.n	800828a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	685a      	ldr	r2, [r3, #4]
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008274:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2221      	movs	r2, #33	; 0x21
 800827a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2228      	movs	r2, #40	; 0x28
 8008280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f7ff f9e7 	bl	8007658 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800828a:	bf00      	nop
 800828c:	3710      	adds	r7, #16
 800828e:	46bd      	mov	sp, r7
 8008290:	bd80      	pop	{r7, pc}

08008292 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8008292:	b480      	push	{r7}
 8008294:	b083      	sub	sp, #12
 8008296:	af00      	add	r7, sp, #0
 8008298:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800829e:	b29b      	uxth	r3, r3
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d011      	beq.n	80082c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082b4:	1c5a      	adds	r2, r3, #1
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80082e8:	b29b      	uxth	r3, r3
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d02c      	beq.n	8008348 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	691a      	ldr	r2, [r3, #16]
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f8:	b2d2      	uxtb	r2, r2
 80082fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008300:	1c5a      	adds	r2, r3, #1
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800830a:	b29b      	uxth	r3, r3
 800830c:	3b01      	subs	r3, #1
 800830e:	b29a      	uxth	r2, r3
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008318:	b29b      	uxth	r3, r3
 800831a:	2b00      	cmp	r3, #0
 800831c:	d114      	bne.n	8008348 <I2C_SlaveReceive_RXNE+0x74>
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	2b2a      	cmp	r3, #42	; 0x2a
 8008322:	d111      	bne.n	8008348 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	685a      	ldr	r2, [r3, #4]
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008332:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2222      	movs	r2, #34	; 0x22
 8008338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2228      	movs	r2, #40	; 0x28
 800833e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008342:	6878      	ldr	r0, [r7, #4]
 8008344:	f7ff f992 	bl	800766c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8008348:	bf00      	nop
 800834a:	3710      	adds	r7, #16
 800834c:	46bd      	mov	sp, r7
 800834e:	bd80      	pop	{r7, pc}

08008350 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8008350:	b480      	push	{r7}
 8008352:	b083      	sub	sp, #12
 8008354:	af00      	add	r7, sp, #0
 8008356:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800835c:	b29b      	uxth	r3, r3
 800835e:	2b00      	cmp	r3, #0
 8008360:	d012      	beq.n	8008388 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	691a      	ldr	r2, [r3, #16]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800836c:	b2d2      	uxtb	r2, r2
 800836e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008374:	1c5a      	adds	r2, r3, #1
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800837e:	b29b      	uxth	r3, r3
 8008380:	3b01      	subs	r3, #1
 8008382:	b29a      	uxth	r2, r3
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8008388:	bf00      	nop
 800838a:	370c      	adds	r7, #12
 800838c:	46bd      	mov	sp, r7
 800838e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008392:	4770      	bx	lr

08008394 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8008394:	b580      	push	{r7, lr}
 8008396:	b084      	sub	sp, #16
 8008398:	af00      	add	r7, sp, #0
 800839a:	6078      	str	r0, [r7, #4]
 800839c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800839e:	2300      	movs	r3, #0
 80083a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80083ae:	2b28      	cmp	r3, #40	; 0x28
 80083b0:	d127      	bne.n	8008402 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	685a      	ldr	r2, [r3, #4]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80083c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	089b      	lsrs	r3, r3, #2
 80083c6:	f003 0301 	and.w	r3, r3, #1
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d101      	bne.n	80083d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80083ce:	2301      	movs	r3, #1
 80083d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80083d2:	683b      	ldr	r3, [r7, #0]
 80083d4:	09db      	lsrs	r3, r3, #7
 80083d6:	f003 0301 	and.w	r3, r3, #1
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d103      	bne.n	80083e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	68db      	ldr	r3, [r3, #12]
 80083e2:	81bb      	strh	r3, [r7, #12]
 80083e4:	e002      	b.n	80083ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	699b      	ldr	r3, [r3, #24]
 80083ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2200      	movs	r2, #0
 80083f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80083f4:	89ba      	ldrh	r2, [r7, #12]
 80083f6:	7bfb      	ldrb	r3, [r7, #15]
 80083f8:	4619      	mov	r1, r3
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f7ff f940 	bl	8007680 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008400:	e00e      	b.n	8008420 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8008402:	2300      	movs	r3, #0
 8008404:	60bb      	str	r3, [r7, #8]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	695b      	ldr	r3, [r3, #20]
 800840c:	60bb      	str	r3, [r7, #8]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	699b      	ldr	r3, [r3, #24]
 8008414:	60bb      	str	r3, [r7, #8]
 8008416:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	2200      	movs	r2, #0
 800841c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8008420:	bf00      	nop
 8008422:	3710      	adds	r7, #16
 8008424:	46bd      	mov	sp, r7
 8008426:	bd80      	pop	{r7, pc}

08008428 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	b084      	sub	sp, #16
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008436:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	685a      	ldr	r2, [r3, #4]
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008446:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008448:	2300      	movs	r3, #0
 800844a:	60bb      	str	r3, [r7, #8]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	695b      	ldr	r3, [r3, #20]
 8008452:	60bb      	str	r3, [r7, #8]
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	681a      	ldr	r2, [r3, #0]
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f042 0201 	orr.w	r2, r2, #1
 8008462:	601a      	str	r2, [r3, #0]
 8008464:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	681a      	ldr	r2, [r3, #0]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008474:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008480:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008484:	d172      	bne.n	800856c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	2b22      	cmp	r3, #34	; 0x22
 800848a:	d002      	beq.n	8008492 <I2C_Slave_STOPF+0x6a>
 800848c:	7bfb      	ldrb	r3, [r7, #15]
 800848e:	2b2a      	cmp	r3, #42	; 0x2a
 8008490:	d135      	bne.n	80084fe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	685b      	ldr	r3, [r3, #4]
 800849a:	b29a      	uxth	r2, r3
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084a4:	b29b      	uxth	r3, r3
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d005      	beq.n	80084b6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ae:	f043 0204 	orr.w	r2, r3, #4
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	685a      	ldr	r2, [r3, #4]
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	681b      	ldr	r3, [r3, #0]
 80084c0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80084c4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fe f8e0 	bl	8006690 <HAL_DMA_GetState>
 80084d0:	4603      	mov	r3, r0
 80084d2:	2b01      	cmp	r3, #1
 80084d4:	d049      	beq.n	800856a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084da:	4a69      	ldr	r2, [pc, #420]	; (8008680 <I2C_Slave_STOPF+0x258>)
 80084dc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084e2:	4618      	mov	r0, r3
 80084e4:	f7fd ff28 	bl	8006338 <HAL_DMA_Abort_IT>
 80084e8:	4603      	mov	r3, r0
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d03d      	beq.n	800856a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084f4:	687a      	ldr	r2, [r7, #4]
 80084f6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80084f8:	4610      	mov	r0, r2
 80084fa:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80084fc:	e035      	b.n	800856a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d005      	beq.n	8008522 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800851a:	f043 0204 	orr.w	r2, r3, #4
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	685a      	ldr	r2, [r3, #4]
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008530:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008536:	4618      	mov	r0, r3
 8008538:	f7fe f8aa 	bl	8006690 <HAL_DMA_GetState>
 800853c:	4603      	mov	r3, r0
 800853e:	2b01      	cmp	r3, #1
 8008540:	d014      	beq.n	800856c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008546:	4a4e      	ldr	r2, [pc, #312]	; (8008680 <I2C_Slave_STOPF+0x258>)
 8008548:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854e:	4618      	mov	r0, r3
 8008550:	f7fd fef2 	bl	8006338 <HAL_DMA_Abort_IT>
 8008554:	4603      	mov	r3, r0
 8008556:	2b00      	cmp	r3, #0
 8008558:	d008      	beq.n	800856c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800855e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008564:	4610      	mov	r0, r2
 8008566:	4798      	blx	r3
 8008568:	e000      	b.n	800856c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800856a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008570:	b29b      	uxth	r3, r3
 8008572:	2b00      	cmp	r3, #0
 8008574:	d03e      	beq.n	80085f4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	695b      	ldr	r3, [r3, #20]
 800857c:	f003 0304 	and.w	r3, r3, #4
 8008580:	2b04      	cmp	r3, #4
 8008582:	d112      	bne.n	80085aa <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	691a      	ldr	r2, [r3, #16]
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800858e:	b2d2      	uxtb	r2, r2
 8008590:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008596:	1c5a      	adds	r2, r3, #1
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085a0:	b29b      	uxth	r3, r3
 80085a2:	3b01      	subs	r3, #1
 80085a4:	b29a      	uxth	r2, r3
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	695b      	ldr	r3, [r3, #20]
 80085b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80085b4:	2b40      	cmp	r3, #64	; 0x40
 80085b6:	d112      	bne.n	80085de <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	691a      	ldr	r2, [r3, #16]
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085c2:	b2d2      	uxtb	r2, r2
 80085c4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ca:	1c5a      	adds	r2, r3, #1
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085d4:	b29b      	uxth	r3, r3
 80085d6:	3b01      	subs	r3, #1
 80085d8:	b29a      	uxth	r2, r3
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80085e2:	b29b      	uxth	r3, r3
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d005      	beq.n	80085f4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ec:	f043 0204 	orr.w	r2, r3, #4
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d003      	beq.n	8008604 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80085fc:	6878      	ldr	r0, [r7, #4]
 80085fe:	f000 f8b3 	bl	8008768 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8008602:	e039      	b.n	8008678 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008604:	7bfb      	ldrb	r3, [r7, #15]
 8008606:	2b2a      	cmp	r3, #42	; 0x2a
 8008608:	d109      	bne.n	800861e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2228      	movs	r2, #40	; 0x28
 8008614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008618:	6878      	ldr	r0, [r7, #4]
 800861a:	f7ff f827 	bl	800766c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008624:	b2db      	uxtb	r3, r3
 8008626:	2b28      	cmp	r3, #40	; 0x28
 8008628:	d111      	bne.n	800864e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	4a15      	ldr	r2, [pc, #84]	; (8008684 <I2C_Slave_STOPF+0x25c>)
 800862e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	2220      	movs	r2, #32
 800863a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2200      	movs	r2, #0
 8008642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008646:	6878      	ldr	r0, [r7, #4]
 8008648:	f7ff f828 	bl	800769c <HAL_I2C_ListenCpltCallback>
}
 800864c:	e014      	b.n	8008678 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008652:	2b22      	cmp	r3, #34	; 0x22
 8008654:	d002      	beq.n	800865c <I2C_Slave_STOPF+0x234>
 8008656:	7bfb      	ldrb	r3, [r7, #15]
 8008658:	2b22      	cmp	r3, #34	; 0x22
 800865a:	d10d      	bne.n	8008678 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2220      	movs	r2, #32
 8008666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	2200      	movs	r2, #0
 800866e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f7fe fffa 	bl	800766c <HAL_I2C_SlaveRxCpltCallback>
}
 8008678:	bf00      	nop
 800867a:	3710      	adds	r7, #16
 800867c:	46bd      	mov	sp, r7
 800867e:	bd80      	pop	{r7, pc}
 8008680:	08008ad1 	.word	0x08008ad1
 8008684:	ffff0000 	.word	0xffff0000

08008688 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008696:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800869c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	2b08      	cmp	r3, #8
 80086a2:	d002      	beq.n	80086aa <I2C_Slave_AF+0x22>
 80086a4:	68bb      	ldr	r3, [r7, #8]
 80086a6:	2b20      	cmp	r3, #32
 80086a8:	d129      	bne.n	80086fe <I2C_Slave_AF+0x76>
 80086aa:	7bfb      	ldrb	r3, [r7, #15]
 80086ac:	2b28      	cmp	r3, #40	; 0x28
 80086ae:	d126      	bne.n	80086fe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	4a2c      	ldr	r2, [pc, #176]	; (8008764 <I2C_Slave_AF+0xdc>)
 80086b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	685a      	ldr	r2, [r3, #4]
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	681b      	ldr	r3, [r3, #0]
 80086c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80086c4:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80086ce:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80086de:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2200      	movs	r2, #0
 80086e4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	2220      	movs	r2, #32
 80086ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	2200      	movs	r2, #0
 80086f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f7fe ffd0 	bl	800769c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80086fc:	e02e      	b.n	800875c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80086fe:	7bfb      	ldrb	r3, [r7, #15]
 8008700:	2b21      	cmp	r3, #33	; 0x21
 8008702:	d126      	bne.n	8008752 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	4a17      	ldr	r2, [pc, #92]	; (8008764 <I2C_Slave_AF+0xdc>)
 8008708:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2221      	movs	r2, #33	; 0x21
 800870e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2220      	movs	r2, #32
 8008714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2200      	movs	r2, #0
 800871c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	685a      	ldr	r2, [r3, #4]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800872e:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008738:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	681a      	ldr	r2, [r3, #0]
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008748:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f7fe ff84 	bl	8007658 <HAL_I2C_SlaveTxCpltCallback>
}
 8008750:	e004      	b.n	800875c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800875a:	615a      	str	r2, [r3, #20]
}
 800875c:	bf00      	nop
 800875e:	3710      	adds	r7, #16
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	ffff0000 	.word	0xffff0000

08008768 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b084      	sub	sp, #16
 800876c:	af00      	add	r7, sp, #0
 800876e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008776:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800877e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008780:	7bbb      	ldrb	r3, [r7, #14]
 8008782:	2b10      	cmp	r3, #16
 8008784:	d002      	beq.n	800878c <I2C_ITError+0x24>
 8008786:	7bbb      	ldrb	r3, [r7, #14]
 8008788:	2b40      	cmp	r3, #64	; 0x40
 800878a:	d10a      	bne.n	80087a2 <I2C_ITError+0x3a>
 800878c:	7bfb      	ldrb	r3, [r7, #15]
 800878e:	2b22      	cmp	r3, #34	; 0x22
 8008790:	d107      	bne.n	80087a2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80087a0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80087a2:	7bfb      	ldrb	r3, [r7, #15]
 80087a4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80087a8:	2b28      	cmp	r3, #40	; 0x28
 80087aa:	d107      	bne.n	80087bc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	2200      	movs	r2, #0
 80087b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	2228      	movs	r2, #40	; 0x28
 80087b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087ba:	e015      	b.n	80087e8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	685b      	ldr	r3, [r3, #4]
 80087c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087ca:	d00a      	beq.n	80087e2 <I2C_ITError+0x7a>
 80087cc:	7bfb      	ldrb	r3, [r7, #15]
 80087ce:	2b60      	cmp	r3, #96	; 0x60
 80087d0:	d007      	beq.n	80087e2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2220      	movs	r2, #32
 80087d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	2200      	movs	r2, #0
 80087de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	685b      	ldr	r3, [r3, #4]
 80087ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80087f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80087f6:	d162      	bne.n	80088be <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	685a      	ldr	r2, [r3, #4]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008806:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800880c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008810:	b2db      	uxtb	r3, r3
 8008812:	2b01      	cmp	r3, #1
 8008814:	d020      	beq.n	8008858 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800881a:	4a6a      	ldr	r2, [pc, #424]	; (80089c4 <I2C_ITError+0x25c>)
 800881c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008822:	4618      	mov	r0, r3
 8008824:	f7fd fd88 	bl	8006338 <HAL_DMA_Abort_IT>
 8008828:	4603      	mov	r3, r0
 800882a:	2b00      	cmp	r3, #0
 800882c:	f000 8089 	beq.w	8008942 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	681a      	ldr	r2, [r3, #0]
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0201 	bic.w	r2, r2, #1
 800883e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2220      	movs	r2, #32
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800884c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800884e:	687a      	ldr	r2, [r7, #4]
 8008850:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008852:	4610      	mov	r0, r2
 8008854:	4798      	blx	r3
 8008856:	e074      	b.n	8008942 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885c:	4a59      	ldr	r2, [pc, #356]	; (80089c4 <I2C_ITError+0x25c>)
 800885e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008864:	4618      	mov	r0, r3
 8008866:	f7fd fd67 	bl	8006338 <HAL_DMA_Abort_IT>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d068      	beq.n	8008942 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	695b      	ldr	r3, [r3, #20]
 8008876:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800887a:	2b40      	cmp	r3, #64	; 0x40
 800887c:	d10b      	bne.n	8008896 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	691a      	ldr	r2, [r3, #16]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008888:	b2d2      	uxtb	r2, r2
 800888a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008890:	1c5a      	adds	r2, r3, #1
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	681a      	ldr	r2, [r3, #0]
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f022 0201 	bic.w	r2, r2, #1
 80088a4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2220      	movs	r2, #32
 80088aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80088b8:	4610      	mov	r0, r2
 80088ba:	4798      	blx	r3
 80088bc:	e041      	b.n	8008942 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80088c4:	b2db      	uxtb	r3, r3
 80088c6:	2b60      	cmp	r3, #96	; 0x60
 80088c8:	d125      	bne.n	8008916 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2220      	movs	r2, #32
 80088ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2200      	movs	r2, #0
 80088d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	695b      	ldr	r3, [r3, #20]
 80088de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088e2:	2b40      	cmp	r3, #64	; 0x40
 80088e4:	d10b      	bne.n	80088fe <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	691a      	ldr	r2, [r3, #16]
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f0:	b2d2      	uxtb	r2, r2
 80088f2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f8:	1c5a      	adds	r2, r3, #1
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	681a      	ldr	r2, [r3, #0]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0201 	bic.w	r2, r2, #1
 800890c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800890e:	6878      	ldr	r0, [r7, #4]
 8008910:	f7fe feec 	bl	80076ec <HAL_I2C_AbortCpltCallback>
 8008914:	e015      	b.n	8008942 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008920:	2b40      	cmp	r3, #64	; 0x40
 8008922:	d10b      	bne.n	800893c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	691a      	ldr	r2, [r3, #16]
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	b2d2      	uxtb	r2, r2
 8008930:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008936:	1c5a      	adds	r2, r3, #1
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800893c:	6878      	ldr	r0, [r7, #4]
 800893e:	f7fe fecb 	bl	80076d8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	f003 0301 	and.w	r3, r3, #1
 800894e:	2b00      	cmp	r3, #0
 8008950:	d10e      	bne.n	8008970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008958:	2b00      	cmp	r3, #0
 800895a:	d109      	bne.n	8008970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008962:	2b00      	cmp	r3, #0
 8008964:	d104      	bne.n	8008970 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008966:	68bb      	ldr	r3, [r7, #8]
 8008968:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800896c:	2b00      	cmp	r3, #0
 800896e:	d007      	beq.n	8008980 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	685a      	ldr	r2, [r3, #4]
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	681b      	ldr	r3, [r3, #0]
 800897a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800897e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008986:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800898c:	f003 0304 	and.w	r3, r3, #4
 8008990:	2b04      	cmp	r3, #4
 8008992:	d113      	bne.n	80089bc <I2C_ITError+0x254>
 8008994:	7bfb      	ldrb	r3, [r7, #15]
 8008996:	2b28      	cmp	r3, #40	; 0x28
 8008998:	d110      	bne.n	80089bc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	4a0a      	ldr	r2, [pc, #40]	; (80089c8 <I2C_ITError+0x260>)
 800899e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2220      	movs	r2, #32
 80089aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7fe fe70 	bl	800769c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80089bc:	bf00      	nop
 80089be:	3710      	adds	r7, #16
 80089c0:	46bd      	mov	sp, r7
 80089c2:	bd80      	pop	{r7, pc}
 80089c4:	08008ad1 	.word	0x08008ad1
 80089c8:	ffff0000 	.word	0xffff0000

080089cc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80089cc:	b580      	push	{r7, lr}
 80089ce:	b088      	sub	sp, #32
 80089d0:	af02      	add	r7, sp, #8
 80089d2:	60f8      	str	r0, [r7, #12]
 80089d4:	607a      	str	r2, [r7, #4]
 80089d6:	603b      	str	r3, [r7, #0]
 80089d8:	460b      	mov	r3, r1
 80089da:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	2b08      	cmp	r3, #8
 80089e6:	d006      	beq.n	80089f6 <I2C_MasterRequestWrite+0x2a>
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d003      	beq.n	80089f6 <I2C_MasterRequestWrite+0x2a>
 80089ee:	697b      	ldr	r3, [r7, #20]
 80089f0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80089f4:	d108      	bne.n	8008a08 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	681a      	ldr	r2, [r3, #0]
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a04:	601a      	str	r2, [r3, #0]
 8008a06:	e00b      	b.n	8008a20 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a0c:	2b12      	cmp	r3, #18
 8008a0e:	d107      	bne.n	8008a20 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a1e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8008a20:	683b      	ldr	r3, [r7, #0]
 8008a22:	9300      	str	r3, [sp, #0]
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	2200      	movs	r2, #0
 8008a28:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8008a2c:	68f8      	ldr	r0, [r7, #12]
 8008a2e:	f000 f8f7 	bl	8008c20 <I2C_WaitOnFlagUntilTimeout>
 8008a32:	4603      	mov	r3, r0
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d00d      	beq.n	8008a54 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a42:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008a46:	d103      	bne.n	8008a50 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008a4e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008a50:	2303      	movs	r3, #3
 8008a52:	e035      	b.n	8008ac0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	691b      	ldr	r3, [r3, #16]
 8008a58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008a5c:	d108      	bne.n	8008a70 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8008a5e:	897b      	ldrh	r3, [r7, #10]
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	461a      	mov	r2, r3
 8008a64:	68fb      	ldr	r3, [r7, #12]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8008a6c:	611a      	str	r2, [r3, #16]
 8008a6e:	e01b      	b.n	8008aa8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008a70:	897b      	ldrh	r3, [r7, #10]
 8008a72:	11db      	asrs	r3, r3, #7
 8008a74:	b2db      	uxtb	r3, r3
 8008a76:	f003 0306 	and.w	r3, r3, #6
 8008a7a:	b2db      	uxtb	r3, r3
 8008a7c:	f063 030f 	orn	r3, r3, #15
 8008a80:	b2da      	uxtb	r2, r3
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	681b      	ldr	r3, [r3, #0]
 8008a86:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	687a      	ldr	r2, [r7, #4]
 8008a8c:	490e      	ldr	r1, [pc, #56]	; (8008ac8 <I2C_MasterRequestWrite+0xfc>)
 8008a8e:	68f8      	ldr	r0, [r7, #12]
 8008a90:	f000 f91d 	bl	8008cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008a94:	4603      	mov	r3, r0
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d001      	beq.n	8008a9e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8008a9a:	2301      	movs	r3, #1
 8008a9c:	e010      	b.n	8008ac0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8008a9e:	897b      	ldrh	r3, [r7, #10]
 8008aa0:	b2da      	uxtb	r2, r3
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	687a      	ldr	r2, [r7, #4]
 8008aac:	4907      	ldr	r1, [pc, #28]	; (8008acc <I2C_MasterRequestWrite+0x100>)
 8008aae:	68f8      	ldr	r0, [r7, #12]
 8008ab0:	f000 f90d 	bl	8008cce <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008ab4:	4603      	mov	r3, r0
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d001      	beq.n	8008abe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8008aba:	2301      	movs	r3, #1
 8008abc:	e000      	b.n	8008ac0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8008abe:	2300      	movs	r3, #0
}
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	3718      	adds	r7, #24
 8008ac4:	46bd      	mov	sp, r7
 8008ac6:	bd80      	pop	{r7, pc}
 8008ac8:	00010008 	.word	0x00010008
 8008acc:	00010002 	.word	0x00010002

08008ad0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008ad0:	b580      	push	{r7, lr}
 8008ad2:	b086      	sub	sp, #24
 8008ad4:	af00      	add	r7, sp, #0
 8008ad6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ad8:	2300      	movs	r3, #0
 8008ada:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ae0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ae8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8008aea:	4b4b      	ldr	r3, [pc, #300]	; (8008c18 <I2C_DMAAbort+0x148>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	08db      	lsrs	r3, r3, #3
 8008af0:	4a4a      	ldr	r2, [pc, #296]	; (8008c1c <I2C_DMAAbort+0x14c>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	0a1a      	lsrs	r2, r3, #8
 8008af8:	4613      	mov	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	4413      	add	r3, r2
 8008afe:	00da      	lsls	r2, r3, #3
 8008b00:	1ad3      	subs	r3, r2, r3
 8008b02:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d106      	bne.n	8008b18 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b0e:	f043 0220 	orr.w	r2, r3, #32
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8008b16:	e00a      	b.n	8008b2e <I2C_DMAAbort+0x5e>
    }
    count--;
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	3b01      	subs	r3, #1
 8008b1c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008b28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b2c:	d0ea      	beq.n	8008b04 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d003      	beq.n	8008b3e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b42:	2b00      	cmp	r3, #0
 8008b44:	d003      	beq.n	8008b4e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008b4e:	697b      	ldr	r3, [r7, #20]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008b5c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8008b5e:	697b      	ldr	r3, [r7, #20]
 8008b60:	2200      	movs	r2, #0
 8008b62:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d003      	beq.n	8008b74 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008b6c:	697b      	ldr	r3, [r7, #20]
 8008b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b70:	2200      	movs	r2, #0
 8008b72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008b74:	697b      	ldr	r3, [r7, #20]
 8008b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d003      	beq.n	8008b84 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008b7c:	697b      	ldr	r3, [r7, #20]
 8008b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b80:	2200      	movs	r2, #0
 8008b82:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008b84:	697b      	ldr	r3, [r7, #20]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681a      	ldr	r2, [r3, #0]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f022 0201 	bic.w	r2, r2, #1
 8008b92:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b9a:	b2db      	uxtb	r3, r3
 8008b9c:	2b60      	cmp	r3, #96	; 0x60
 8008b9e:	d10e      	bne.n	8008bbe <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008ba0:	697b      	ldr	r3, [r7, #20]
 8008ba2:	2220      	movs	r2, #32
 8008ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008ba8:	697b      	ldr	r3, [r7, #20]
 8008baa:	2200      	movs	r2, #0
 8008bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008bb0:	697b      	ldr	r3, [r7, #20]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008bb6:	6978      	ldr	r0, [r7, #20]
 8008bb8:	f7fe fd98 	bl	80076ec <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008bbc:	e027      	b.n	8008c0e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008bbe:	7cfb      	ldrb	r3, [r7, #19]
 8008bc0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008bc4:	2b28      	cmp	r3, #40	; 0x28
 8008bc6:	d117      	bne.n	8008bf8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008bc8:	697b      	ldr	r3, [r7, #20]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	681a      	ldr	r2, [r3, #0]
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f042 0201 	orr.w	r2, r2, #1
 8008bd6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	681a      	ldr	r2, [r3, #0]
 8008bde:	697b      	ldr	r3, [r7, #20]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008be6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8008be8:	697b      	ldr	r3, [r7, #20]
 8008bea:	2200      	movs	r2, #0
 8008bec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8008bee:	697b      	ldr	r3, [r7, #20]
 8008bf0:	2228      	movs	r2, #40	; 0x28
 8008bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008bf6:	e007      	b.n	8008c08 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	2220      	movs	r2, #32
 8008bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c00:	697b      	ldr	r3, [r7, #20]
 8008c02:	2200      	movs	r2, #0
 8008c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8008c08:	6978      	ldr	r0, [r7, #20]
 8008c0a:	f7fe fd65 	bl	80076d8 <HAL_I2C_ErrorCallback>
}
 8008c0e:	bf00      	nop
 8008c10:	3718      	adds	r7, #24
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	20000258 	.word	0x20000258
 8008c1c:	14f8b589 	.word	0x14f8b589

08008c20 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b084      	sub	sp, #16
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	603b      	str	r3, [r7, #0]
 8008c2c:	4613      	mov	r3, r2
 8008c2e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c30:	e025      	b.n	8008c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c38:	d021      	beq.n	8008c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c3a:	f7fc fcc3 	bl	80055c4 <HAL_GetTick>
 8008c3e:	4602      	mov	r2, r0
 8008c40:	69bb      	ldr	r3, [r7, #24]
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	683a      	ldr	r2, [r7, #0]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d302      	bcc.n	8008c50 <I2C_WaitOnFlagUntilTimeout+0x30>
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d116      	bne.n	8008c7e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	2200      	movs	r2, #0
 8008c54:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	2220      	movs	r2, #32
 8008c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	2200      	movs	r2, #0
 8008c62:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c6a:	f043 0220 	orr.w	r2, r3, #32
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2200      	movs	r2, #0
 8008c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008c7a:	2301      	movs	r3, #1
 8008c7c:	e023      	b.n	8008cc6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	0c1b      	lsrs	r3, r3, #16
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d10d      	bne.n	8008ca4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	695b      	ldr	r3, [r3, #20]
 8008c8e:	43da      	mvns	r2, r3
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4013      	ands	r3, r2
 8008c94:	b29b      	uxth	r3, r3
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	bf0c      	ite	eq
 8008c9a:	2301      	moveq	r3, #1
 8008c9c:	2300      	movne	r3, #0
 8008c9e:	b2db      	uxtb	r3, r3
 8008ca0:	461a      	mov	r2, r3
 8008ca2:	e00c      	b.n	8008cbe <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	699b      	ldr	r3, [r3, #24]
 8008caa:	43da      	mvns	r2, r3
 8008cac:	68bb      	ldr	r3, [r7, #8]
 8008cae:	4013      	ands	r3, r2
 8008cb0:	b29b      	uxth	r3, r3
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	bf0c      	ite	eq
 8008cb6:	2301      	moveq	r3, #1
 8008cb8:	2300      	movne	r3, #0
 8008cba:	b2db      	uxtb	r3, r3
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	79fb      	ldrb	r3, [r7, #7]
 8008cc0:	429a      	cmp	r2, r3
 8008cc2:	d0b6      	beq.n	8008c32 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008cc4:	2300      	movs	r3, #0
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	3710      	adds	r7, #16
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	bd80      	pop	{r7, pc}

08008cce <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8008cce:	b580      	push	{r7, lr}
 8008cd0:	b084      	sub	sp, #16
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	60f8      	str	r0, [r7, #12]
 8008cd6:	60b9      	str	r1, [r7, #8]
 8008cd8:	607a      	str	r2, [r7, #4]
 8008cda:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008cdc:	e051      	b.n	8008d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ce8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008cec:	d123      	bne.n	8008d36 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	681a      	ldr	r2, [r3, #0]
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008cfc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008cfe:	68fb      	ldr	r3, [r7, #12]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008d06:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2220      	movs	r2, #32
 8008d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d22:	f043 0204 	orr.w	r2, r3, #4
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e046      	b.n	8008dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d3c:	d021      	beq.n	8008d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d3e:	f7fc fc41 	bl	80055c4 <HAL_GetTick>
 8008d42:	4602      	mov	r2, r0
 8008d44:	683b      	ldr	r3, [r7, #0]
 8008d46:	1ad3      	subs	r3, r2, r3
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	429a      	cmp	r2, r3
 8008d4c:	d302      	bcc.n	8008d54 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	d116      	bne.n	8008d82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008d54:	68fb      	ldr	r3, [r7, #12]
 8008d56:	2200      	movs	r2, #0
 8008d58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	2220      	movs	r2, #32
 8008d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2200      	movs	r2, #0
 8008d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d6e:	f043 0220 	orr.w	r2, r3, #32
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008d7e:	2301      	movs	r3, #1
 8008d80:	e020      	b.n	8008dc4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008d82:	68bb      	ldr	r3, [r7, #8]
 8008d84:	0c1b      	lsrs	r3, r3, #16
 8008d86:	b2db      	uxtb	r3, r3
 8008d88:	2b01      	cmp	r3, #1
 8008d8a:	d10c      	bne.n	8008da6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	695b      	ldr	r3, [r3, #20]
 8008d92:	43da      	mvns	r2, r3
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	4013      	ands	r3, r2
 8008d98:	b29b      	uxth	r3, r3
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	bf14      	ite	ne
 8008d9e:	2301      	movne	r3, #1
 8008da0:	2300      	moveq	r3, #0
 8008da2:	b2db      	uxtb	r3, r3
 8008da4:	e00b      	b.n	8008dbe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	699b      	ldr	r3, [r3, #24]
 8008dac:	43da      	mvns	r2, r3
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	4013      	ands	r3, r2
 8008db2:	b29b      	uxth	r3, r3
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	bf14      	ite	ne
 8008db8:	2301      	movne	r3, #1
 8008dba:	2300      	moveq	r3, #0
 8008dbc:	b2db      	uxtb	r3, r3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d18d      	bne.n	8008cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008dc2:	2300      	movs	r3, #0
}
 8008dc4:	4618      	mov	r0, r3
 8008dc6:	3710      	adds	r7, #16
 8008dc8:	46bd      	mov	sp, r7
 8008dca:	bd80      	pop	{r7, pc}

08008dcc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b084      	sub	sp, #16
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	60f8      	str	r0, [r7, #12]
 8008dd4:	60b9      	str	r1, [r7, #8]
 8008dd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008dd8:	e02d      	b.n	8008e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008dda:	68f8      	ldr	r0, [r7, #12]
 8008ddc:	f000 f8aa 	bl	8008f34 <I2C_IsAcknowledgeFailed>
 8008de0:	4603      	mov	r3, r0
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d001      	beq.n	8008dea <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008de6:	2301      	movs	r3, #1
 8008de8:	e02d      	b.n	8008e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dea:	68bb      	ldr	r3, [r7, #8]
 8008dec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008df0:	d021      	beq.n	8008e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008df2:	f7fc fbe7 	bl	80055c4 <HAL_GetTick>
 8008df6:	4602      	mov	r2, r0
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	1ad3      	subs	r3, r2, r3
 8008dfc:	68ba      	ldr	r2, [r7, #8]
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d302      	bcc.n	8008e08 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8008e02:	68bb      	ldr	r3, [r7, #8]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d116      	bne.n	8008e36 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	2220      	movs	r2, #32
 8008e12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2200      	movs	r2, #0
 8008e1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e22:	f043 0220 	orr.w	r2, r3, #32
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008e32:	2301      	movs	r3, #1
 8008e34:	e007      	b.n	8008e46 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	695b      	ldr	r3, [r3, #20]
 8008e3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008e40:	2b80      	cmp	r3, #128	; 0x80
 8008e42:	d1ca      	bne.n	8008dda <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008e44:	2300      	movs	r3, #0
}
 8008e46:	4618      	mov	r0, r3
 8008e48:	3710      	adds	r7, #16
 8008e4a:	46bd      	mov	sp, r7
 8008e4c:	bd80      	pop	{r7, pc}

08008e4e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008e4e:	b580      	push	{r7, lr}
 8008e50:	b084      	sub	sp, #16
 8008e52:	af00      	add	r7, sp, #0
 8008e54:	60f8      	str	r0, [r7, #12]
 8008e56:	60b9      	str	r1, [r7, #8]
 8008e58:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008e5a:	e02d      	b.n	8008eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008e5c:	68f8      	ldr	r0, [r7, #12]
 8008e5e:	f000 f869 	bl	8008f34 <I2C_IsAcknowledgeFailed>
 8008e62:	4603      	mov	r3, r0
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d001      	beq.n	8008e6c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e02d      	b.n	8008ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e72:	d021      	beq.n	8008eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008e74:	f7fc fba6 	bl	80055c4 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	68ba      	ldr	r2, [r7, #8]
 8008e80:	429a      	cmp	r2, r3
 8008e82:	d302      	bcc.n	8008e8a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008e84:	68bb      	ldr	r3, [r7, #8]
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d116      	bne.n	8008eb8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	2200      	movs	r2, #0
 8008e8e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ea4:	f043 0220 	orr.w	r2, r3, #32
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008eb4:	2301      	movs	r3, #1
 8008eb6:	e007      	b.n	8008ec8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008eb8:	68fb      	ldr	r3, [r7, #12]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	695b      	ldr	r3, [r3, #20]
 8008ebe:	f003 0304 	and.w	r3, r3, #4
 8008ec2:	2b04      	cmp	r3, #4
 8008ec4:	d1ca      	bne.n	8008e5c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	3710      	adds	r7, #16
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd80      	pop	{r7, pc}

08008ed0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b085      	sub	sp, #20
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008ed8:	2300      	movs	r3, #0
 8008eda:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008edc:	4b13      	ldr	r3, [pc, #76]	; (8008f2c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	08db      	lsrs	r3, r3, #3
 8008ee2:	4a13      	ldr	r2, [pc, #76]	; (8008f30 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8008ee8:	0a1a      	lsrs	r2, r3, #8
 8008eea:	4613      	mov	r3, r2
 8008eec:	009b      	lsls	r3, r3, #2
 8008eee:	4413      	add	r3, r2
 8008ef0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	3b01      	subs	r3, #1
 8008ef6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d107      	bne.n	8008f0e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f02:	f043 0220 	orr.w	r2, r3, #32
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008f0a:	2301      	movs	r3, #1
 8008f0c:	e008      	b.n	8008f20 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008f18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008f1c:	d0e9      	beq.n	8008ef2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008f1e:	2300      	movs	r3, #0
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3714      	adds	r7, #20
 8008f24:	46bd      	mov	sp, r7
 8008f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f2a:	4770      	bx	lr
 8008f2c:	20000258 	.word	0x20000258
 8008f30:	14f8b589 	.word	0x14f8b589

08008f34 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008f34:	b480      	push	{r7}
 8008f36:	b083      	sub	sp, #12
 8008f38:	af00      	add	r7, sp, #0
 8008f3a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	681b      	ldr	r3, [r3, #0]
 8008f40:	695b      	ldr	r3, [r3, #20]
 8008f42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008f46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f4a:	d11b      	bne.n	8008f84 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008f54:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2200      	movs	r2, #0
 8008f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	2220      	movs	r2, #32
 8008f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2200      	movs	r2, #0
 8008f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f70:	f043 0204 	orr.w	r2, r3, #4
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2200      	movs	r2, #0
 8008f7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e000      	b.n	8008f86 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008f84:	2300      	movs	r3, #0
}
 8008f86:	4618      	mov	r0, r3
 8008f88:	370c      	adds	r7, #12
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr

08008f92 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008f92:	b480      	push	{r7}
 8008f94:	b083      	sub	sp, #12
 8008f96:	af00      	add	r7, sp, #0
 8008f98:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f9e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008fa2:	d103      	bne.n	8008fac <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2201      	movs	r2, #1
 8008fa8:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008faa:	e007      	b.n	8008fbc <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008fb4:	d102      	bne.n	8008fbc <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	2208      	movs	r2, #8
 8008fba:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008fbc:	bf00      	nop
 8008fbe:	370c      	adds	r7, #12
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc6:	4770      	bx	lr

08008fc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d101      	bne.n	8008fda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	e267      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d075      	beq.n	80090d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008fe6:	4b88      	ldr	r3, [pc, #544]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8008fe8:	689b      	ldr	r3, [r3, #8]
 8008fea:	f003 030c 	and.w	r3, r3, #12
 8008fee:	2b04      	cmp	r3, #4
 8008ff0:	d00c      	beq.n	800900c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ff2:	4b85      	ldr	r3, [pc, #532]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8008ff4:	689b      	ldr	r3, [r3, #8]
 8008ff6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ffa:	2b08      	cmp	r3, #8
 8008ffc:	d112      	bne.n	8009024 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008ffe:	4b82      	ldr	r3, [pc, #520]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009000:	685b      	ldr	r3, [r3, #4]
 8009002:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009006:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800900a:	d10b      	bne.n	8009024 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800900c:	4b7e      	ldr	r3, [pc, #504]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009014:	2b00      	cmp	r3, #0
 8009016:	d05b      	beq.n	80090d0 <HAL_RCC_OscConfig+0x108>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685b      	ldr	r3, [r3, #4]
 800901c:	2b00      	cmp	r3, #0
 800901e:	d157      	bne.n	80090d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8009020:	2301      	movs	r3, #1
 8009022:	e242      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	685b      	ldr	r3, [r3, #4]
 8009028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800902c:	d106      	bne.n	800903c <HAL_RCC_OscConfig+0x74>
 800902e:	4b76      	ldr	r3, [pc, #472]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	4a75      	ldr	r2, [pc, #468]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009038:	6013      	str	r3, [r2, #0]
 800903a:	e01d      	b.n	8009078 <HAL_RCC_OscConfig+0xb0>
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	685b      	ldr	r3, [r3, #4]
 8009040:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009044:	d10c      	bne.n	8009060 <HAL_RCC_OscConfig+0x98>
 8009046:	4b70      	ldr	r3, [pc, #448]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	4a6f      	ldr	r2, [pc, #444]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800904c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009050:	6013      	str	r3, [r2, #0]
 8009052:	4b6d      	ldr	r3, [pc, #436]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	4a6c      	ldr	r2, [pc, #432]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800905c:	6013      	str	r3, [r2, #0]
 800905e:	e00b      	b.n	8009078 <HAL_RCC_OscConfig+0xb0>
 8009060:	4b69      	ldr	r3, [pc, #420]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	4a68      	ldr	r2, [pc, #416]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009066:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	4b66      	ldr	r3, [pc, #408]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	4a65      	ldr	r2, [pc, #404]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009072:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009076:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	685b      	ldr	r3, [r3, #4]
 800907c:	2b00      	cmp	r3, #0
 800907e:	d013      	beq.n	80090a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009080:	f7fc faa0 	bl	80055c4 <HAL_GetTick>
 8009084:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009086:	e008      	b.n	800909a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8009088:	f7fc fa9c 	bl	80055c4 <HAL_GetTick>
 800908c:	4602      	mov	r2, r0
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	2b64      	cmp	r3, #100	; 0x64
 8009094:	d901      	bls.n	800909a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8009096:	2303      	movs	r3, #3
 8009098:	e207      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800909a:	4b5b      	ldr	r3, [pc, #364]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d0f0      	beq.n	8009088 <HAL_RCC_OscConfig+0xc0>
 80090a6:	e014      	b.n	80090d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80090a8:	f7fc fa8c 	bl	80055c4 <HAL_GetTick>
 80090ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090ae:	e008      	b.n	80090c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80090b0:	f7fc fa88 	bl	80055c4 <HAL_GetTick>
 80090b4:	4602      	mov	r2, r0
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	1ad3      	subs	r3, r2, r3
 80090ba:	2b64      	cmp	r3, #100	; 0x64
 80090bc:	d901      	bls.n	80090c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80090be:	2303      	movs	r3, #3
 80090c0:	e1f3      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80090c2:	4b51      	ldr	r3, [pc, #324]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d1f0      	bne.n	80090b0 <HAL_RCC_OscConfig+0xe8>
 80090ce:	e000      	b.n	80090d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80090d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d063      	beq.n	80091a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090de:	4b4a      	ldr	r3, [pc, #296]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090e0:	689b      	ldr	r3, [r3, #8]
 80090e2:	f003 030c 	and.w	r3, r3, #12
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d00b      	beq.n	8009102 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090ea:	4b47      	ldr	r3, [pc, #284]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80090f2:	2b08      	cmp	r3, #8
 80090f4:	d11c      	bne.n	8009130 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80090f6:	4b44      	ldr	r3, [pc, #272]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d116      	bne.n	8009130 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009102:	4b41      	ldr	r3, [pc, #260]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0302 	and.w	r3, r3, #2
 800910a:	2b00      	cmp	r3, #0
 800910c:	d005      	beq.n	800911a <HAL_RCC_OscConfig+0x152>
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d001      	beq.n	800911a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8009116:	2301      	movs	r3, #1
 8009118:	e1c7      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800911a:	4b3b      	ldr	r3, [pc, #236]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	691b      	ldr	r3, [r3, #16]
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	4937      	ldr	r1, [pc, #220]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800912a:	4313      	orrs	r3, r2
 800912c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800912e:	e03a      	b.n	80091a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	68db      	ldr	r3, [r3, #12]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d020      	beq.n	800917a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8009138:	4b34      	ldr	r3, [pc, #208]	; (800920c <HAL_RCC_OscConfig+0x244>)
 800913a:	2201      	movs	r2, #1
 800913c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800913e:	f7fc fa41 	bl	80055c4 <HAL_GetTick>
 8009142:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009144:	e008      	b.n	8009158 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009146:	f7fc fa3d 	bl	80055c4 <HAL_GetTick>
 800914a:	4602      	mov	r2, r0
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	1ad3      	subs	r3, r2, r3
 8009150:	2b02      	cmp	r3, #2
 8009152:	d901      	bls.n	8009158 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8009154:	2303      	movs	r3, #3
 8009156:	e1a8      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009158:	4b2b      	ldr	r3, [pc, #172]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 0302 	and.w	r3, r3, #2
 8009160:	2b00      	cmp	r3, #0
 8009162:	d0f0      	beq.n	8009146 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009164:	4b28      	ldr	r3, [pc, #160]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	691b      	ldr	r3, [r3, #16]
 8009170:	00db      	lsls	r3, r3, #3
 8009172:	4925      	ldr	r1, [pc, #148]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 8009174:	4313      	orrs	r3, r2
 8009176:	600b      	str	r3, [r1, #0]
 8009178:	e015      	b.n	80091a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800917a:	4b24      	ldr	r3, [pc, #144]	; (800920c <HAL_RCC_OscConfig+0x244>)
 800917c:	2200      	movs	r2, #0
 800917e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009180:	f7fc fa20 	bl	80055c4 <HAL_GetTick>
 8009184:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8009186:	e008      	b.n	800919a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009188:	f7fc fa1c 	bl	80055c4 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	1ad3      	subs	r3, r2, r3
 8009192:	2b02      	cmp	r3, #2
 8009194:	d901      	bls.n	800919a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8009196:	2303      	movs	r3, #3
 8009198:	e187      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800919a:	4b1b      	ldr	r3, [pc, #108]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f003 0302 	and.w	r3, r3, #2
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1f0      	bne.n	8009188 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d036      	beq.n	8009220 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	695b      	ldr	r3, [r3, #20]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d016      	beq.n	80091e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80091ba:	4b15      	ldr	r3, [pc, #84]	; (8009210 <HAL_RCC_OscConfig+0x248>)
 80091bc:	2201      	movs	r2, #1
 80091be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80091c0:	f7fc fa00 	bl	80055c4 <HAL_GetTick>
 80091c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091c6:	e008      	b.n	80091da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091c8:	f7fc f9fc 	bl	80055c4 <HAL_GetTick>
 80091cc:	4602      	mov	r2, r0
 80091ce:	693b      	ldr	r3, [r7, #16]
 80091d0:	1ad3      	subs	r3, r2, r3
 80091d2:	2b02      	cmp	r3, #2
 80091d4:	d901      	bls.n	80091da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80091d6:	2303      	movs	r3, #3
 80091d8:	e167      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80091da:	4b0b      	ldr	r3, [pc, #44]	; (8009208 <HAL_RCC_OscConfig+0x240>)
 80091dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091de:	f003 0302 	and.w	r3, r3, #2
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d0f0      	beq.n	80091c8 <HAL_RCC_OscConfig+0x200>
 80091e6:	e01b      	b.n	8009220 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80091e8:	4b09      	ldr	r3, [pc, #36]	; (8009210 <HAL_RCC_OscConfig+0x248>)
 80091ea:	2200      	movs	r2, #0
 80091ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80091ee:	f7fc f9e9 	bl	80055c4 <HAL_GetTick>
 80091f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80091f4:	e00e      	b.n	8009214 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80091f6:	f7fc f9e5 	bl	80055c4 <HAL_GetTick>
 80091fa:	4602      	mov	r2, r0
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	1ad3      	subs	r3, r2, r3
 8009200:	2b02      	cmp	r3, #2
 8009202:	d907      	bls.n	8009214 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8009204:	2303      	movs	r3, #3
 8009206:	e150      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
 8009208:	40023800 	.word	0x40023800
 800920c:	42470000 	.word	0x42470000
 8009210:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009214:	4b88      	ldr	r3, [pc, #544]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009218:	f003 0302 	and.w	r3, r3, #2
 800921c:	2b00      	cmp	r3, #0
 800921e:	d1ea      	bne.n	80091f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f003 0304 	and.w	r3, r3, #4
 8009228:	2b00      	cmp	r3, #0
 800922a:	f000 8097 	beq.w	800935c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800922e:	2300      	movs	r3, #0
 8009230:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009232:	4b81      	ldr	r3, [pc, #516]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009236:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800923a:	2b00      	cmp	r3, #0
 800923c:	d10f      	bne.n	800925e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800923e:	2300      	movs	r3, #0
 8009240:	60bb      	str	r3, [r7, #8]
 8009242:	4b7d      	ldr	r3, [pc, #500]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009246:	4a7c      	ldr	r2, [pc, #496]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800924c:	6413      	str	r3, [r2, #64]	; 0x40
 800924e:	4b7a      	ldr	r3, [pc, #488]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009256:	60bb      	str	r3, [r7, #8]
 8009258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800925a:	2301      	movs	r3, #1
 800925c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800925e:	4b77      	ldr	r3, [pc, #476]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009266:	2b00      	cmp	r3, #0
 8009268:	d118      	bne.n	800929c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800926a:	4b74      	ldr	r3, [pc, #464]	; (800943c <HAL_RCC_OscConfig+0x474>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	4a73      	ldr	r2, [pc, #460]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009270:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009274:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009276:	f7fc f9a5 	bl	80055c4 <HAL_GetTick>
 800927a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800927c:	e008      	b.n	8009290 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800927e:	f7fc f9a1 	bl	80055c4 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	693b      	ldr	r3, [r7, #16]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e10c      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009290:	4b6a      	ldr	r3, [pc, #424]	; (800943c <HAL_RCC_OscConfig+0x474>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009298:	2b00      	cmp	r3, #0
 800929a:	d0f0      	beq.n	800927e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	689b      	ldr	r3, [r3, #8]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d106      	bne.n	80092b2 <HAL_RCC_OscConfig+0x2ea>
 80092a4:	4b64      	ldr	r3, [pc, #400]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092a8:	4a63      	ldr	r2, [pc, #396]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092aa:	f043 0301 	orr.w	r3, r3, #1
 80092ae:	6713      	str	r3, [r2, #112]	; 0x70
 80092b0:	e01c      	b.n	80092ec <HAL_RCC_OscConfig+0x324>
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	689b      	ldr	r3, [r3, #8]
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	d10c      	bne.n	80092d4 <HAL_RCC_OscConfig+0x30c>
 80092ba:	4b5f      	ldr	r3, [pc, #380]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092be:	4a5e      	ldr	r2, [pc, #376]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092c0:	f043 0304 	orr.w	r3, r3, #4
 80092c4:	6713      	str	r3, [r2, #112]	; 0x70
 80092c6:	4b5c      	ldr	r3, [pc, #368]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092ca:	4a5b      	ldr	r2, [pc, #364]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092cc:	f043 0301 	orr.w	r3, r3, #1
 80092d0:	6713      	str	r3, [r2, #112]	; 0x70
 80092d2:	e00b      	b.n	80092ec <HAL_RCC_OscConfig+0x324>
 80092d4:	4b58      	ldr	r3, [pc, #352]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092d8:	4a57      	ldr	r2, [pc, #348]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092da:	f023 0301 	bic.w	r3, r3, #1
 80092de:	6713      	str	r3, [r2, #112]	; 0x70
 80092e0:	4b55      	ldr	r3, [pc, #340]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80092e4:	4a54      	ldr	r2, [pc, #336]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80092e6:	f023 0304 	bic.w	r3, r3, #4
 80092ea:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80092ec:	687b      	ldr	r3, [r7, #4]
 80092ee:	689b      	ldr	r3, [r3, #8]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d015      	beq.n	8009320 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80092f4:	f7fc f966 	bl	80055c4 <HAL_GetTick>
 80092f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80092fa:	e00a      	b.n	8009312 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80092fc:	f7fc f962 	bl	80055c4 <HAL_GetTick>
 8009300:	4602      	mov	r2, r0
 8009302:	693b      	ldr	r3, [r7, #16]
 8009304:	1ad3      	subs	r3, r2, r3
 8009306:	f241 3288 	movw	r2, #5000	; 0x1388
 800930a:	4293      	cmp	r3, r2
 800930c:	d901      	bls.n	8009312 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800930e:	2303      	movs	r3, #3
 8009310:	e0cb      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009312:	4b49      	ldr	r3, [pc, #292]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009316:	f003 0302 	and.w	r3, r3, #2
 800931a:	2b00      	cmp	r3, #0
 800931c:	d0ee      	beq.n	80092fc <HAL_RCC_OscConfig+0x334>
 800931e:	e014      	b.n	800934a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009320:	f7fc f950 	bl	80055c4 <HAL_GetTick>
 8009324:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009326:	e00a      	b.n	800933e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009328:	f7fc f94c 	bl	80055c4 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	693b      	ldr	r3, [r7, #16]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	f241 3288 	movw	r2, #5000	; 0x1388
 8009336:	4293      	cmp	r3, r2
 8009338:	d901      	bls.n	800933e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800933a:	2303      	movs	r3, #3
 800933c:	e0b5      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800933e:	4b3e      	ldr	r3, [pc, #248]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009342:	f003 0302 	and.w	r3, r3, #2
 8009346:	2b00      	cmp	r3, #0
 8009348:	d1ee      	bne.n	8009328 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800934a:	7dfb      	ldrb	r3, [r7, #23]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d105      	bne.n	800935c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009350:	4b39      	ldr	r3, [pc, #228]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009354:	4a38      	ldr	r2, [pc, #224]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009356:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800935a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	699b      	ldr	r3, [r3, #24]
 8009360:	2b00      	cmp	r3, #0
 8009362:	f000 80a1 	beq.w	80094a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8009366:	4b34      	ldr	r3, [pc, #208]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f003 030c 	and.w	r3, r3, #12
 800936e:	2b08      	cmp	r3, #8
 8009370:	d05c      	beq.n	800942c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	699b      	ldr	r3, [r3, #24]
 8009376:	2b02      	cmp	r3, #2
 8009378:	d141      	bne.n	80093fe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800937a:	4b31      	ldr	r3, [pc, #196]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 800937c:	2200      	movs	r2, #0
 800937e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009380:	f7fc f920 	bl	80055c4 <HAL_GetTick>
 8009384:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009386:	e008      	b.n	800939a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009388:	f7fc f91c 	bl	80055c4 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	693b      	ldr	r3, [r7, #16]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b02      	cmp	r3, #2
 8009394:	d901      	bls.n	800939a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8009396:	2303      	movs	r3, #3
 8009398:	e087      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800939a:	4b27      	ldr	r3, [pc, #156]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d1f0      	bne.n	8009388 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	69da      	ldr	r2, [r3, #28]
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6a1b      	ldr	r3, [r3, #32]
 80093ae:	431a      	orrs	r2, r3
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80093b4:	019b      	lsls	r3, r3, #6
 80093b6:	431a      	orrs	r2, r3
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80093bc:	085b      	lsrs	r3, r3, #1
 80093be:	3b01      	subs	r3, #1
 80093c0:	041b      	lsls	r3, r3, #16
 80093c2:	431a      	orrs	r2, r3
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093c8:	061b      	lsls	r3, r3, #24
 80093ca:	491b      	ldr	r1, [pc, #108]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80093d0:	4b1b      	ldr	r3, [pc, #108]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 80093d2:	2201      	movs	r2, #1
 80093d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80093d6:	f7fc f8f5 	bl	80055c4 <HAL_GetTick>
 80093da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093dc:	e008      	b.n	80093f0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80093de:	f7fc f8f1 	bl	80055c4 <HAL_GetTick>
 80093e2:	4602      	mov	r2, r0
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	1ad3      	subs	r3, r2, r3
 80093e8:	2b02      	cmp	r3, #2
 80093ea:	d901      	bls.n	80093f0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80093ec:	2303      	movs	r3, #3
 80093ee:	e05c      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80093f0:	4b11      	ldr	r3, [pc, #68]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d0f0      	beq.n	80093de <HAL_RCC_OscConfig+0x416>
 80093fc:	e054      	b.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80093fe:	4b10      	ldr	r3, [pc, #64]	; (8009440 <HAL_RCC_OscConfig+0x478>)
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009404:	f7fc f8de 	bl	80055c4 <HAL_GetTick>
 8009408:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800940a:	e008      	b.n	800941e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800940c:	f7fc f8da 	bl	80055c4 <HAL_GetTick>
 8009410:	4602      	mov	r2, r0
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	1ad3      	subs	r3, r2, r3
 8009416:	2b02      	cmp	r3, #2
 8009418:	d901      	bls.n	800941e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800941a:	2303      	movs	r3, #3
 800941c:	e045      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800941e:	4b06      	ldr	r3, [pc, #24]	; (8009438 <HAL_RCC_OscConfig+0x470>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f0      	bne.n	800940c <HAL_RCC_OscConfig+0x444>
 800942a:	e03d      	b.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	699b      	ldr	r3, [r3, #24]
 8009430:	2b01      	cmp	r3, #1
 8009432:	d107      	bne.n	8009444 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8009434:	2301      	movs	r3, #1
 8009436:	e038      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
 8009438:	40023800 	.word	0x40023800
 800943c:	40007000 	.word	0x40007000
 8009440:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009444:	4b1b      	ldr	r3, [pc, #108]	; (80094b4 <HAL_RCC_OscConfig+0x4ec>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	699b      	ldr	r3, [r3, #24]
 800944e:	2b01      	cmp	r3, #1
 8009450:	d028      	beq.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800945c:	429a      	cmp	r2, r3
 800945e:	d121      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800946a:	429a      	cmp	r2, r3
 800946c:	d11a      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009474:	4013      	ands	r3, r2
 8009476:	687a      	ldr	r2, [r7, #4]
 8009478:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800947a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800947c:	4293      	cmp	r3, r2
 800947e:	d111      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800948a:	085b      	lsrs	r3, r3, #1
 800948c:	3b01      	subs	r3, #1
 800948e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009490:	429a      	cmp	r2, r3
 8009492:	d107      	bne.n	80094a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800949e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80094a0:	429a      	cmp	r2, r3
 80094a2:	d001      	beq.n	80094a8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80094a4:	2301      	movs	r3, #1
 80094a6:	e000      	b.n	80094aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80094a8:	2300      	movs	r3, #0
}
 80094aa:	4618      	mov	r0, r3
 80094ac:	3718      	adds	r7, #24
 80094ae:	46bd      	mov	sp, r7
 80094b0:	bd80      	pop	{r7, pc}
 80094b2:	bf00      	nop
 80094b4:	40023800 	.word	0x40023800

080094b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b084      	sub	sp, #16
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
 80094c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d101      	bne.n	80094cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80094c8:	2301      	movs	r3, #1
 80094ca:	e0cc      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80094cc:	4b68      	ldr	r3, [pc, #416]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f003 0307 	and.w	r3, r3, #7
 80094d4:	683a      	ldr	r2, [r7, #0]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d90c      	bls.n	80094f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80094da:	4b65      	ldr	r3, [pc, #404]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094dc:	683a      	ldr	r2, [r7, #0]
 80094de:	b2d2      	uxtb	r2, r2
 80094e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80094e2:	4b63      	ldr	r3, [pc, #396]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	f003 0307 	and.w	r3, r3, #7
 80094ea:	683a      	ldr	r2, [r7, #0]
 80094ec:	429a      	cmp	r2, r3
 80094ee:	d001      	beq.n	80094f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80094f0:	2301      	movs	r3, #1
 80094f2:	e0b8      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	f003 0302 	and.w	r3, r3, #2
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d020      	beq.n	8009542 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	f003 0304 	and.w	r3, r3, #4
 8009508:	2b00      	cmp	r3, #0
 800950a:	d005      	beq.n	8009518 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800950c:	4b59      	ldr	r3, [pc, #356]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800950e:	689b      	ldr	r3, [r3, #8]
 8009510:	4a58      	ldr	r2, [pc, #352]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009512:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8009516:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	f003 0308 	and.w	r3, r3, #8
 8009520:	2b00      	cmp	r3, #0
 8009522:	d005      	beq.n	8009530 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8009524:	4b53      	ldr	r3, [pc, #332]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009526:	689b      	ldr	r3, [r3, #8]
 8009528:	4a52      	ldr	r2, [pc, #328]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800952a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800952e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009530:	4b50      	ldr	r3, [pc, #320]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	689b      	ldr	r3, [r3, #8]
 800953c:	494d      	ldr	r1, [pc, #308]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800953e:	4313      	orrs	r3, r2
 8009540:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	2b00      	cmp	r3, #0
 800954c:	d044      	beq.n	80095d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	2b01      	cmp	r3, #1
 8009554:	d107      	bne.n	8009566 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009556:	4b47      	ldr	r3, [pc, #284]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800955e:	2b00      	cmp	r3, #0
 8009560:	d119      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009562:	2301      	movs	r3, #1
 8009564:	e07f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2b02      	cmp	r3, #2
 800956c:	d003      	beq.n	8009576 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009572:	2b03      	cmp	r3, #3
 8009574:	d107      	bne.n	8009586 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009576:	4b3f      	ldr	r3, [pc, #252]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d109      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009582:	2301      	movs	r3, #1
 8009584:	e06f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009586:	4b3b      	ldr	r3, [pc, #236]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f003 0302 	and.w	r3, r3, #2
 800958e:	2b00      	cmp	r3, #0
 8009590:	d101      	bne.n	8009596 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009592:	2301      	movs	r3, #1
 8009594:	e067      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009596:	4b37      	ldr	r3, [pc, #220]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009598:	689b      	ldr	r3, [r3, #8]
 800959a:	f023 0203 	bic.w	r2, r3, #3
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	4934      	ldr	r1, [pc, #208]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 80095a4:	4313      	orrs	r3, r2
 80095a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80095a8:	f7fc f80c 	bl	80055c4 <HAL_GetTick>
 80095ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095ae:	e00a      	b.n	80095c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80095b0:	f7fc f808 	bl	80055c4 <HAL_GetTick>
 80095b4:	4602      	mov	r2, r0
 80095b6:	68fb      	ldr	r3, [r7, #12]
 80095b8:	1ad3      	subs	r3, r2, r3
 80095ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80095be:	4293      	cmp	r3, r2
 80095c0:	d901      	bls.n	80095c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80095c2:	2303      	movs	r3, #3
 80095c4:	e04f      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80095c6:	4b2b      	ldr	r3, [pc, #172]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	f003 020c 	and.w	r2, r3, #12
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	009b      	lsls	r3, r3, #2
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d1eb      	bne.n	80095b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80095d8:	4b25      	ldr	r3, [pc, #148]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0307 	and.w	r3, r3, #7
 80095e0:	683a      	ldr	r2, [r7, #0]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d20c      	bcs.n	8009600 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80095e6:	4b22      	ldr	r3, [pc, #136]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095e8:	683a      	ldr	r2, [r7, #0]
 80095ea:	b2d2      	uxtb	r2, r2
 80095ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80095ee:	4b20      	ldr	r3, [pc, #128]	; (8009670 <HAL_RCC_ClockConfig+0x1b8>)
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f003 0307 	and.w	r3, r3, #7
 80095f6:	683a      	ldr	r2, [r7, #0]
 80095f8:	429a      	cmp	r2, r3
 80095fa:	d001      	beq.n	8009600 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	e032      	b.n	8009666 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	f003 0304 	and.w	r3, r3, #4
 8009608:	2b00      	cmp	r3, #0
 800960a:	d008      	beq.n	800961e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800960c:	4b19      	ldr	r3, [pc, #100]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800960e:	689b      	ldr	r3, [r3, #8]
 8009610:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	4916      	ldr	r1, [pc, #88]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800961a:	4313      	orrs	r3, r2
 800961c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	681b      	ldr	r3, [r3, #0]
 8009622:	f003 0308 	and.w	r3, r3, #8
 8009626:	2b00      	cmp	r3, #0
 8009628:	d009      	beq.n	800963e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800962a:	4b12      	ldr	r3, [pc, #72]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800962c:	689b      	ldr	r3, [r3, #8]
 800962e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	00db      	lsls	r3, r3, #3
 8009638:	490e      	ldr	r1, [pc, #56]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 800963a:	4313      	orrs	r3, r2
 800963c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800963e:	f000 f821 	bl	8009684 <HAL_RCC_GetSysClockFreq>
 8009642:	4602      	mov	r2, r0
 8009644:	4b0b      	ldr	r3, [pc, #44]	; (8009674 <HAL_RCC_ClockConfig+0x1bc>)
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	f003 030f 	and.w	r3, r3, #15
 800964e:	490a      	ldr	r1, [pc, #40]	; (8009678 <HAL_RCC_ClockConfig+0x1c0>)
 8009650:	5ccb      	ldrb	r3, [r1, r3]
 8009652:	fa22 f303 	lsr.w	r3, r2, r3
 8009656:	4a09      	ldr	r2, [pc, #36]	; (800967c <HAL_RCC_ClockConfig+0x1c4>)
 8009658:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800965a:	4b09      	ldr	r3, [pc, #36]	; (8009680 <HAL_RCC_ClockConfig+0x1c8>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	4618      	mov	r0, r3
 8009660:	f7fb ff6c 	bl	800553c <HAL_InitTick>

  return HAL_OK;
 8009664:	2300      	movs	r3, #0
}
 8009666:	4618      	mov	r0, r3
 8009668:	3710      	adds	r7, #16
 800966a:	46bd      	mov	sp, r7
 800966c:	bd80      	pop	{r7, pc}
 800966e:	bf00      	nop
 8009670:	40023c00 	.word	0x40023c00
 8009674:	40023800 	.word	0x40023800
 8009678:	080115bc 	.word	0x080115bc
 800967c:	20000258 	.word	0x20000258
 8009680:	2000025c 	.word	0x2000025c

08009684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009688:	b094      	sub	sp, #80	; 0x50
 800968a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800968c:	2300      	movs	r3, #0
 800968e:	647b      	str	r3, [r7, #68]	; 0x44
 8009690:	2300      	movs	r3, #0
 8009692:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009694:	2300      	movs	r3, #0
 8009696:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009698:	2300      	movs	r3, #0
 800969a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800969c:	4b79      	ldr	r3, [pc, #484]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 800969e:	689b      	ldr	r3, [r3, #8]
 80096a0:	f003 030c 	and.w	r3, r3, #12
 80096a4:	2b08      	cmp	r3, #8
 80096a6:	d00d      	beq.n	80096c4 <HAL_RCC_GetSysClockFreq+0x40>
 80096a8:	2b08      	cmp	r3, #8
 80096aa:	f200 80e1 	bhi.w	8009870 <HAL_RCC_GetSysClockFreq+0x1ec>
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d002      	beq.n	80096b8 <HAL_RCC_GetSysClockFreq+0x34>
 80096b2:	2b04      	cmp	r3, #4
 80096b4:	d003      	beq.n	80096be <HAL_RCC_GetSysClockFreq+0x3a>
 80096b6:	e0db      	b.n	8009870 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80096b8:	4b73      	ldr	r3, [pc, #460]	; (8009888 <HAL_RCC_GetSysClockFreq+0x204>)
 80096ba:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80096bc:	e0db      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80096be:	4b73      	ldr	r3, [pc, #460]	; (800988c <HAL_RCC_GetSysClockFreq+0x208>)
 80096c0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80096c2:	e0d8      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80096c4:	4b6f      	ldr	r3, [pc, #444]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096c6:	685b      	ldr	r3, [r3, #4]
 80096c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80096cc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80096ce:	4b6d      	ldr	r3, [pc, #436]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096d0:	685b      	ldr	r3, [r3, #4]
 80096d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	d063      	beq.n	80097a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80096da:	4b6a      	ldr	r3, [pc, #424]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80096dc:	685b      	ldr	r3, [r3, #4]
 80096de:	099b      	lsrs	r3, r3, #6
 80096e0:	2200      	movs	r2, #0
 80096e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80096e4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80096e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80096e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096ec:	633b      	str	r3, [r7, #48]	; 0x30
 80096ee:	2300      	movs	r3, #0
 80096f0:	637b      	str	r3, [r7, #52]	; 0x34
 80096f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80096f6:	4622      	mov	r2, r4
 80096f8:	462b      	mov	r3, r5
 80096fa:	f04f 0000 	mov.w	r0, #0
 80096fe:	f04f 0100 	mov.w	r1, #0
 8009702:	0159      	lsls	r1, r3, #5
 8009704:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009708:	0150      	lsls	r0, r2, #5
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	4621      	mov	r1, r4
 8009710:	1a51      	subs	r1, r2, r1
 8009712:	6139      	str	r1, [r7, #16]
 8009714:	4629      	mov	r1, r5
 8009716:	eb63 0301 	sbc.w	r3, r3, r1
 800971a:	617b      	str	r3, [r7, #20]
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009728:	4659      	mov	r1, fp
 800972a:	018b      	lsls	r3, r1, #6
 800972c:	4651      	mov	r1, sl
 800972e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8009732:	4651      	mov	r1, sl
 8009734:	018a      	lsls	r2, r1, #6
 8009736:	4651      	mov	r1, sl
 8009738:	ebb2 0801 	subs.w	r8, r2, r1
 800973c:	4659      	mov	r1, fp
 800973e:	eb63 0901 	sbc.w	r9, r3, r1
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800974e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009752:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009756:	4690      	mov	r8, r2
 8009758:	4699      	mov	r9, r3
 800975a:	4623      	mov	r3, r4
 800975c:	eb18 0303 	adds.w	r3, r8, r3
 8009760:	60bb      	str	r3, [r7, #8]
 8009762:	462b      	mov	r3, r5
 8009764:	eb49 0303 	adc.w	r3, r9, r3
 8009768:	60fb      	str	r3, [r7, #12]
 800976a:	f04f 0200 	mov.w	r2, #0
 800976e:	f04f 0300 	mov.w	r3, #0
 8009772:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009776:	4629      	mov	r1, r5
 8009778:	024b      	lsls	r3, r1, #9
 800977a:	4621      	mov	r1, r4
 800977c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009780:	4621      	mov	r1, r4
 8009782:	024a      	lsls	r2, r1, #9
 8009784:	4610      	mov	r0, r2
 8009786:	4619      	mov	r1, r3
 8009788:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800978a:	2200      	movs	r2, #0
 800978c:	62bb      	str	r3, [r7, #40]	; 0x28
 800978e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009790:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009794:	f7f7 fa80 	bl	8000c98 <__aeabi_uldivmod>
 8009798:	4602      	mov	r2, r0
 800979a:	460b      	mov	r3, r1
 800979c:	4613      	mov	r3, r2
 800979e:	64fb      	str	r3, [r7, #76]	; 0x4c
 80097a0:	e058      	b.n	8009854 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80097a2:	4b38      	ldr	r3, [pc, #224]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 80097a4:	685b      	ldr	r3, [r3, #4]
 80097a6:	099b      	lsrs	r3, r3, #6
 80097a8:	2200      	movs	r2, #0
 80097aa:	4618      	mov	r0, r3
 80097ac:	4611      	mov	r1, r2
 80097ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80097b2:	623b      	str	r3, [r7, #32]
 80097b4:	2300      	movs	r3, #0
 80097b6:	627b      	str	r3, [r7, #36]	; 0x24
 80097b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80097bc:	4642      	mov	r2, r8
 80097be:	464b      	mov	r3, r9
 80097c0:	f04f 0000 	mov.w	r0, #0
 80097c4:	f04f 0100 	mov.w	r1, #0
 80097c8:	0159      	lsls	r1, r3, #5
 80097ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80097ce:	0150      	lsls	r0, r2, #5
 80097d0:	4602      	mov	r2, r0
 80097d2:	460b      	mov	r3, r1
 80097d4:	4641      	mov	r1, r8
 80097d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80097da:	4649      	mov	r1, r9
 80097dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80097e0:	f04f 0200 	mov.w	r2, #0
 80097e4:	f04f 0300 	mov.w	r3, #0
 80097e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80097ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80097f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80097f4:	ebb2 040a 	subs.w	r4, r2, sl
 80097f8:	eb63 050b 	sbc.w	r5, r3, fp
 80097fc:	f04f 0200 	mov.w	r2, #0
 8009800:	f04f 0300 	mov.w	r3, #0
 8009804:	00eb      	lsls	r3, r5, #3
 8009806:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800980a:	00e2      	lsls	r2, r4, #3
 800980c:	4614      	mov	r4, r2
 800980e:	461d      	mov	r5, r3
 8009810:	4643      	mov	r3, r8
 8009812:	18e3      	adds	r3, r4, r3
 8009814:	603b      	str	r3, [r7, #0]
 8009816:	464b      	mov	r3, r9
 8009818:	eb45 0303 	adc.w	r3, r5, r3
 800981c:	607b      	str	r3, [r7, #4]
 800981e:	f04f 0200 	mov.w	r2, #0
 8009822:	f04f 0300 	mov.w	r3, #0
 8009826:	e9d7 4500 	ldrd	r4, r5, [r7]
 800982a:	4629      	mov	r1, r5
 800982c:	028b      	lsls	r3, r1, #10
 800982e:	4621      	mov	r1, r4
 8009830:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8009834:	4621      	mov	r1, r4
 8009836:	028a      	lsls	r2, r1, #10
 8009838:	4610      	mov	r0, r2
 800983a:	4619      	mov	r1, r3
 800983c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800983e:	2200      	movs	r2, #0
 8009840:	61bb      	str	r3, [r7, #24]
 8009842:	61fa      	str	r2, [r7, #28]
 8009844:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009848:	f7f7 fa26 	bl	8000c98 <__aeabi_uldivmod>
 800984c:	4602      	mov	r2, r0
 800984e:	460b      	mov	r3, r1
 8009850:	4613      	mov	r3, r2
 8009852:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009854:	4b0b      	ldr	r3, [pc, #44]	; (8009884 <HAL_RCC_GetSysClockFreq+0x200>)
 8009856:	685b      	ldr	r3, [r3, #4]
 8009858:	0c1b      	lsrs	r3, r3, #16
 800985a:	f003 0303 	and.w	r3, r3, #3
 800985e:	3301      	adds	r3, #1
 8009860:	005b      	lsls	r3, r3, #1
 8009862:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009864:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009868:	fbb2 f3f3 	udiv	r3, r2, r3
 800986c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800986e:	e002      	b.n	8009876 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009870:	4b05      	ldr	r3, [pc, #20]	; (8009888 <HAL_RCC_GetSysClockFreq+0x204>)
 8009872:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009874:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009876:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009878:	4618      	mov	r0, r3
 800987a:	3750      	adds	r7, #80	; 0x50
 800987c:	46bd      	mov	sp, r7
 800987e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009882:	bf00      	nop
 8009884:	40023800 	.word	0x40023800
 8009888:	00f42400 	.word	0x00f42400
 800988c:	007a1200 	.word	0x007a1200

08009890 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009890:	b480      	push	{r7}
 8009892:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009894:	4b03      	ldr	r3, [pc, #12]	; (80098a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8009896:	681b      	ldr	r3, [r3, #0]
}
 8009898:	4618      	mov	r0, r3
 800989a:	46bd      	mov	sp, r7
 800989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a0:	4770      	bx	lr
 80098a2:	bf00      	nop
 80098a4:	20000258 	.word	0x20000258

080098a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80098a8:	b580      	push	{r7, lr}
 80098aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80098ac:	f7ff fff0 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098b0:	4602      	mov	r2, r0
 80098b2:	4b05      	ldr	r3, [pc, #20]	; (80098c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80098b4:	689b      	ldr	r3, [r3, #8]
 80098b6:	0a9b      	lsrs	r3, r3, #10
 80098b8:	f003 0307 	and.w	r3, r3, #7
 80098bc:	4903      	ldr	r1, [pc, #12]	; (80098cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80098be:	5ccb      	ldrb	r3, [r1, r3]
 80098c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098c4:	4618      	mov	r0, r3
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	40023800 	.word	0x40023800
 80098cc:	080115cc 	.word	0x080115cc

080098d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80098d4:	f7ff ffdc 	bl	8009890 <HAL_RCC_GetHCLKFreq>
 80098d8:	4602      	mov	r2, r0
 80098da:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80098dc:	689b      	ldr	r3, [r3, #8]
 80098de:	0b5b      	lsrs	r3, r3, #13
 80098e0:	f003 0307 	and.w	r3, r3, #7
 80098e4:	4903      	ldr	r1, [pc, #12]	; (80098f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80098e6:	5ccb      	ldrb	r3, [r1, r3]
 80098e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80098ec:	4618      	mov	r0, r3
 80098ee:	bd80      	pop	{r7, pc}
 80098f0:	40023800 	.word	0x40023800
 80098f4:	080115cc 	.word	0x080115cc

080098f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80098f8:	b580      	push	{r7, lr}
 80098fa:	b082      	sub	sp, #8
 80098fc:	af00      	add	r7, sp, #0
 80098fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	d101      	bne.n	800990a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009906:	2301      	movs	r3, #1
 8009908:	e04c      	b.n	80099a4 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009910:	b2db      	uxtb	r3, r3
 8009912:	2b00      	cmp	r3, #0
 8009914:	d111      	bne.n	800993a <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f001 fc32 	bl	800b188 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009928:	2b00      	cmp	r3, #0
 800992a:	d102      	bne.n	8009932 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	4a1f      	ldr	r2, [pc, #124]	; (80099ac <HAL_TIM_Base_Init+0xb4>)
 8009930:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	2202      	movs	r2, #2
 800993e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681a      	ldr	r2, [r3, #0]
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	3304      	adds	r3, #4
 800994a:	4619      	mov	r1, r3
 800994c:	4610      	mov	r0, r2
 800994e:	f001 f94f 	bl	800abf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	2201      	movs	r2, #1
 800995e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2201      	movs	r2, #1
 8009966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	2201      	movs	r2, #1
 800996e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	2201      	movs	r2, #1
 8009976:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2201      	movs	r2, #1
 800997e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	2201      	movs	r2, #1
 8009986:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	2201      	movs	r2, #1
 800998e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	2201      	movs	r2, #1
 800999e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099a2:	2300      	movs	r3, #0
}
 80099a4:	4618      	mov	r0, r3
 80099a6:	3708      	adds	r7, #8
 80099a8:	46bd      	mov	sp, r7
 80099aa:	bd80      	pop	{r7, pc}
 80099ac:	08004f19 	.word	0x08004f19

080099b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099b0:	b480      	push	{r7}
 80099b2:	b085      	sub	sp, #20
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099be:	b2db      	uxtb	r3, r3
 80099c0:	2b01      	cmp	r3, #1
 80099c2:	d001      	beq.n	80099c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099c4:	2301      	movs	r3, #1
 80099c6:	e03c      	b.n	8009a42 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2202      	movs	r2, #2
 80099cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a1e      	ldr	r2, [pc, #120]	; (8009a50 <HAL_TIM_Base_Start+0xa0>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d018      	beq.n	8009a0c <HAL_TIM_Base_Start+0x5c>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099e2:	d013      	beq.n	8009a0c <HAL_TIM_Base_Start+0x5c>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a1a      	ldr	r2, [pc, #104]	; (8009a54 <HAL_TIM_Base_Start+0xa4>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d00e      	beq.n	8009a0c <HAL_TIM_Base_Start+0x5c>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a19      	ldr	r2, [pc, #100]	; (8009a58 <HAL_TIM_Base_Start+0xa8>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d009      	beq.n	8009a0c <HAL_TIM_Base_Start+0x5c>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a17      	ldr	r2, [pc, #92]	; (8009a5c <HAL_TIM_Base_Start+0xac>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d004      	beq.n	8009a0c <HAL_TIM_Base_Start+0x5c>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a16      	ldr	r2, [pc, #88]	; (8009a60 <HAL_TIM_Base_Start+0xb0>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d111      	bne.n	8009a30 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	689b      	ldr	r3, [r3, #8]
 8009a12:	f003 0307 	and.w	r3, r3, #7
 8009a16:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a18:	68fb      	ldr	r3, [r7, #12]
 8009a1a:	2b06      	cmp	r3, #6
 8009a1c:	d010      	beq.n	8009a40 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	681a      	ldr	r2, [r3, #0]
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	681b      	ldr	r3, [r3, #0]
 8009a28:	f042 0201 	orr.w	r2, r2, #1
 8009a2c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a2e:	e007      	b.n	8009a40 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	681a      	ldr	r2, [r3, #0]
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f042 0201 	orr.w	r2, r2, #1
 8009a3e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a40:	2300      	movs	r3, #0
}
 8009a42:	4618      	mov	r0, r3
 8009a44:	3714      	adds	r7, #20
 8009a46:	46bd      	mov	sp, r7
 8009a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4c:	4770      	bx	lr
 8009a4e:	bf00      	nop
 8009a50:	40010000 	.word	0x40010000
 8009a54:	40000400 	.word	0x40000400
 8009a58:	40000800 	.word	0x40000800
 8009a5c:	40000c00 	.word	0x40000c00
 8009a60:	40014000 	.word	0x40014000

08009a64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009a64:	b480      	push	{r7}
 8009a66:	b085      	sub	sp, #20
 8009a68:	af00      	add	r7, sp, #0
 8009a6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	d001      	beq.n	8009a7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009a78:	2301      	movs	r3, #1
 8009a7a:	e044      	b.n	8009b06 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	2202      	movs	r2, #2
 8009a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	68da      	ldr	r2, [r3, #12]
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0201 	orr.w	r2, r2, #1
 8009a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	4a1e      	ldr	r2, [pc, #120]	; (8009b14 <HAL_TIM_Base_Start_IT+0xb0>)
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	d018      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aa6:	d013      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	4a1a      	ldr	r2, [pc, #104]	; (8009b18 <HAL_TIM_Base_Start_IT+0xb4>)
 8009aae:	4293      	cmp	r3, r2
 8009ab0:	d00e      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	4a19      	ldr	r2, [pc, #100]	; (8009b1c <HAL_TIM_Base_Start_IT+0xb8>)
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d009      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	681b      	ldr	r3, [r3, #0]
 8009ac0:	4a17      	ldr	r2, [pc, #92]	; (8009b20 <HAL_TIM_Base_Start_IT+0xbc>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d004      	beq.n	8009ad0 <HAL_TIM_Base_Start_IT+0x6c>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	4a16      	ldr	r2, [pc, #88]	; (8009b24 <HAL_TIM_Base_Start_IT+0xc0>)
 8009acc:	4293      	cmp	r3, r2
 8009ace:	d111      	bne.n	8009af4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	689b      	ldr	r3, [r3, #8]
 8009ad6:	f003 0307 	and.w	r3, r3, #7
 8009ada:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2b06      	cmp	r3, #6
 8009ae0:	d010      	beq.n	8009b04 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	681a      	ldr	r2, [r3, #0]
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f042 0201 	orr.w	r2, r2, #1
 8009af0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009af2:	e007      	b.n	8009b04 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	681a      	ldr	r2, [r3, #0]
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	f042 0201 	orr.w	r2, r2, #1
 8009b02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009b04:	2300      	movs	r3, #0
}
 8009b06:	4618      	mov	r0, r3
 8009b08:	3714      	adds	r7, #20
 8009b0a:	46bd      	mov	sp, r7
 8009b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b10:	4770      	bx	lr
 8009b12:	bf00      	nop
 8009b14:	40010000 	.word	0x40010000
 8009b18:	40000400 	.word	0x40000400
 8009b1c:	40000800 	.word	0x40000800
 8009b20:	40000c00 	.word	0x40000c00
 8009b24:	40014000 	.word	0x40014000

08009b28 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8009b28:	b480      	push	{r7}
 8009b2a:	b083      	sub	sp, #12
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	68da      	ldr	r2, [r3, #12]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f022 0201 	bic.w	r2, r2, #1
 8009b3e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	6a1a      	ldr	r2, [r3, #32]
 8009b46:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b4a:	4013      	ands	r3, r2
 8009b4c:	2b00      	cmp	r3, #0
 8009b4e:	d10f      	bne.n	8009b70 <HAL_TIM_Base_Stop_IT+0x48>
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	6a1a      	ldr	r2, [r3, #32]
 8009b56:	f240 4344 	movw	r3, #1092	; 0x444
 8009b5a:	4013      	ands	r3, r2
 8009b5c:	2b00      	cmp	r3, #0
 8009b5e:	d107      	bne.n	8009b70 <HAL_TIM_Base_Stop_IT+0x48>
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	681a      	ldr	r2, [r3, #0]
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	f022 0201 	bic.w	r2, r2, #1
 8009b6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2201      	movs	r2, #1
 8009b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b78:	2300      	movs	r3, #0
}
 8009b7a:	4618      	mov	r0, r3
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr
	...

08009b88 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009b88:	b580      	push	{r7, lr}
 8009b8a:	b082      	sub	sp, #8
 8009b8c:	af00      	add	r7, sp, #0
 8009b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d101      	bne.n	8009b9a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009b96:	2301      	movs	r3, #1
 8009b98:	e04c      	b.n	8009c34 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba0:	b2db      	uxtb	r3, r3
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d111      	bne.n	8009bca <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	2200      	movs	r2, #0
 8009baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009bae:	6878      	ldr	r0, [r7, #4]
 8009bb0:	f001 faea 	bl	800b188 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d102      	bne.n	8009bc2 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	4a1f      	ldr	r2, [pc, #124]	; (8009c3c <HAL_TIM_OC_Init+0xb4>)
 8009bc0:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	2202      	movs	r2, #2
 8009bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681a      	ldr	r2, [r3, #0]
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	3304      	adds	r3, #4
 8009bda:	4619      	mov	r1, r3
 8009bdc:	4610      	mov	r0, r2
 8009bde:	f001 f807 	bl	800abf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2201      	movs	r2, #1
 8009be6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2201      	movs	r2, #1
 8009bee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2201      	movs	r2, #1
 8009bf6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	2201      	movs	r2, #1
 8009bfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	2201      	movs	r2, #1
 8009c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	2201      	movs	r2, #1
 8009c1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2201      	movs	r2, #1
 8009c26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2201      	movs	r2, #1
 8009c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009c32:	2300      	movs	r3, #0
}
 8009c34:	4618      	mov	r0, r3
 8009c36:	3708      	adds	r7, #8
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	bd80      	pop	{r7, pc}
 8009c3c:	08009c41 	.word	0x08009c41

08009c40 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009c40:	b480      	push	{r7}
 8009c42:	b083      	sub	sp, #12
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009c48:	bf00      	nop
 8009c4a:	370c      	adds	r7, #12
 8009c4c:	46bd      	mov	sp, r7
 8009c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c52:	4770      	bx	lr

08009c54 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009c54:	b580      	push	{r7, lr}
 8009c56:	b082      	sub	sp, #8
 8009c58:	af00      	add	r7, sp, #0
 8009c5a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d101      	bne.n	8009c66 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009c62:	2301      	movs	r3, #1
 8009c64:	e04c      	b.n	8009d00 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c6c:	b2db      	uxtb	r3, r3
 8009c6e:	2b00      	cmp	r3, #0
 8009c70:	d111      	bne.n	8009c96 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009c7a:	6878      	ldr	r0, [r7, #4]
 8009c7c:	f001 fa84 	bl	800b188 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d102      	bne.n	8009c8e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	4a1f      	ldr	r2, [pc, #124]	; (8009d08 <HAL_TIM_PWM_Init+0xb4>)
 8009c8c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c92:	6878      	ldr	r0, [r7, #4]
 8009c94:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	2202      	movs	r2, #2
 8009c9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681a      	ldr	r2, [r3, #0]
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	3304      	adds	r3, #4
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f000 ffa1 	bl	800abf0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2201      	movs	r2, #1
 8009cb2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	2201      	movs	r2, #1
 8009cba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2201      	movs	r2, #1
 8009cca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	2201      	movs	r2, #1
 8009cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	2201      	movs	r2, #1
 8009ce2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	2201      	movs	r2, #1
 8009cea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009cfe:	2300      	movs	r3, #0
}
 8009d00:	4618      	mov	r0, r3
 8009d02:	3708      	adds	r7, #8
 8009d04:	46bd      	mov	sp, r7
 8009d06:	bd80      	pop	{r7, pc}
 8009d08:	08004e29 	.word	0x08004e29

08009d0c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d109      	bne.n	8009d30 <HAL_TIM_PWM_Start+0x24>
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	bf14      	ite	ne
 8009d28:	2301      	movne	r3, #1
 8009d2a:	2300      	moveq	r3, #0
 8009d2c:	b2db      	uxtb	r3, r3
 8009d2e:	e022      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d30:	683b      	ldr	r3, [r7, #0]
 8009d32:	2b04      	cmp	r3, #4
 8009d34:	d109      	bne.n	8009d4a <HAL_TIM_PWM_Start+0x3e>
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b01      	cmp	r3, #1
 8009d40:	bf14      	ite	ne
 8009d42:	2301      	movne	r3, #1
 8009d44:	2300      	moveq	r3, #0
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	e015      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d4a:	683b      	ldr	r3, [r7, #0]
 8009d4c:	2b08      	cmp	r3, #8
 8009d4e:	d109      	bne.n	8009d64 <HAL_TIM_PWM_Start+0x58>
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009d56:	b2db      	uxtb	r3, r3
 8009d58:	2b01      	cmp	r3, #1
 8009d5a:	bf14      	ite	ne
 8009d5c:	2301      	movne	r3, #1
 8009d5e:	2300      	moveq	r3, #0
 8009d60:	b2db      	uxtb	r3, r3
 8009d62:	e008      	b.n	8009d76 <HAL_TIM_PWM_Start+0x6a>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8009d6a:	b2db      	uxtb	r3, r3
 8009d6c:	2b01      	cmp	r3, #1
 8009d6e:	bf14      	ite	ne
 8009d70:	2301      	movne	r3, #1
 8009d72:	2300      	moveq	r3, #0
 8009d74:	b2db      	uxtb	r3, r3
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d001      	beq.n	8009d7e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8009d7a:	2301      	movs	r3, #1
 8009d7c:	e068      	b.n	8009e50 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d104      	bne.n	8009d8e <HAL_TIM_PWM_Start+0x82>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2202      	movs	r2, #2
 8009d88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009d8c:	e013      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009d8e:	683b      	ldr	r3, [r7, #0]
 8009d90:	2b04      	cmp	r3, #4
 8009d92:	d104      	bne.n	8009d9e <HAL_TIM_PWM_Start+0x92>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	2202      	movs	r2, #2
 8009d98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009d9c:	e00b      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	2b08      	cmp	r3, #8
 8009da2:	d104      	bne.n	8009dae <HAL_TIM_PWM_Start+0xa2>
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	2202      	movs	r2, #2
 8009da8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009dac:	e003      	b.n	8009db6 <HAL_TIM_PWM_Start+0xaa>
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	2202      	movs	r2, #2
 8009db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2201      	movs	r2, #1
 8009dbc:	6839      	ldr	r1, [r7, #0]
 8009dbe:	4618      	mov	r0, r3
 8009dc0:	f001 f9bc 	bl	800b13c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	4a23      	ldr	r2, [pc, #140]	; (8009e58 <HAL_TIM_PWM_Start+0x14c>)
 8009dca:	4293      	cmp	r3, r2
 8009dcc:	d107      	bne.n	8009dde <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ddc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1d      	ldr	r2, [pc, #116]	; (8009e58 <HAL_TIM_PWM_Start+0x14c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d018      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009df0:	d013      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a19      	ldr	r2, [pc, #100]	; (8009e5c <HAL_TIM_PWM_Start+0x150>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a17      	ldr	r2, [pc, #92]	; (8009e60 <HAL_TIM_PWM_Start+0x154>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a16      	ldr	r2, [pc, #88]	; (8009e64 <HAL_TIM_PWM_Start+0x158>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_TIM_PWM_Start+0x10e>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a14      	ldr	r2, [pc, #80]	; (8009e68 <HAL_TIM_PWM_Start+0x15c>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d111      	bne.n	8009e3e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	689b      	ldr	r3, [r3, #8]
 8009e20:	f003 0307 	and.w	r3, r3, #7
 8009e24:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e26:	68fb      	ldr	r3, [r7, #12]
 8009e28:	2b06      	cmp	r3, #6
 8009e2a:	d010      	beq.n	8009e4e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	681a      	ldr	r2, [r3, #0]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	f042 0201 	orr.w	r2, r2, #1
 8009e3a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009e3c:	e007      	b.n	8009e4e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	681a      	ldr	r2, [r3, #0]
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	f042 0201 	orr.w	r2, r2, #1
 8009e4c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009e4e:	2300      	movs	r3, #0
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	3710      	adds	r7, #16
 8009e54:	46bd      	mov	sp, r7
 8009e56:	bd80      	pop	{r7, pc}
 8009e58:	40010000 	.word	0x40010000
 8009e5c:	40000400 	.word	0x40000400
 8009e60:	40000800 	.word	0x40000800
 8009e64:	40000c00 	.word	0x40000c00
 8009e68:	40014000 	.word	0x40014000

08009e6c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009e6c:	b580      	push	{r7, lr}
 8009e6e:	b082      	sub	sp, #8
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	6078      	str	r0, [r7, #4]
 8009e74:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	2b00      	cmp	r3, #0
 8009e7a:	d101      	bne.n	8009e80 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009e7c:	2301      	movs	r3, #1
 8009e7e:	e04c      	b.n	8009f1a <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e86:	b2db      	uxtb	r3, r3
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d111      	bne.n	8009eb0 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	f001 f977 	bl	800b188 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d102      	bne.n	8009ea8 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	4a1f      	ldr	r2, [pc, #124]	; (8009f24 <HAL_TIM_OnePulse_Init+0xb8>)
 8009ea6:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009eac:	6878      	ldr	r0, [r7, #4]
 8009eae:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2202      	movs	r2, #2
 8009eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	687b      	ldr	r3, [r7, #4]
 8009ebe:	3304      	adds	r3, #4
 8009ec0:	4619      	mov	r1, r3
 8009ec2:	4610      	mov	r0, r2
 8009ec4:	f000 fe94 	bl	800abf0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f022 0208 	bic.w	r2, r2, #8
 8009ed6:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	6819      	ldr	r1, [r3, #0]
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	683a      	ldr	r2, [r7, #0]
 8009ee4:	430a      	orrs	r2, r1
 8009ee6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	2201      	movs	r2, #1
 8009eec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	2201      	movs	r2, #1
 8009efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	2201      	movs	r2, #1
 8009f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2201      	movs	r2, #1
 8009f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	2201      	movs	r2, #1
 8009f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f18:	2300      	movs	r3, #0
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3708      	adds	r7, #8
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	08009f29 	.word	0x08009f29

08009f28 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009f28:	b480      	push	{r7}
 8009f2a:	b083      	sub	sp, #12
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009f30:	bf00      	nop
 8009f32:	370c      	adds	r7, #12
 8009f34:	46bd      	mov	sp, r7
 8009f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3a:	4770      	bx	lr

08009f3c <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009f3c:	b580      	push	{r7, lr}
 8009f3e:	b084      	sub	sp, #16
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
 8009f44:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009f4c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009f54:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009f5c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009f64:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f66:	7bfb      	ldrb	r3, [r7, #15]
 8009f68:	2b01      	cmp	r3, #1
 8009f6a:	d108      	bne.n	8009f7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f6c:	7bbb      	ldrb	r3, [r7, #14]
 8009f6e:	2b01      	cmp	r3, #1
 8009f70:	d105      	bne.n	8009f7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009f72:	7b7b      	ldrb	r3, [r7, #13]
 8009f74:	2b01      	cmp	r3, #1
 8009f76:	d102      	bne.n	8009f7e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009f78:	7b3b      	ldrb	r3, [r7, #12]
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d001      	beq.n	8009f82 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e03b      	b.n	8009ffa <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2202      	movs	r2, #2
 8009f86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	2202      	movs	r2, #2
 8009f8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	2202      	movs	r2, #2
 8009f96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2202      	movs	r2, #2
 8009f9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	68da      	ldr	r2, [r3, #12]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f042 0202 	orr.w	r2, r2, #2
 8009fb0:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	68da      	ldr	r2, [r3, #12]
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f042 0204 	orr.w	r2, r2, #4
 8009fc0:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	2100      	movs	r1, #0
 8009fca:	4618      	mov	r0, r3
 8009fcc:	f001 f8b6 	bl	800b13c <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	2201      	movs	r2, #1
 8009fd6:	2104      	movs	r1, #4
 8009fd8:	4618      	mov	r0, r3
 8009fda:	f001 f8af 	bl	800b13c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	4a08      	ldr	r2, [pc, #32]	; (800a004 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009fe4:	4293      	cmp	r3, r2
 8009fe6:	d107      	bne.n	8009ff8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009ff6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009ff8:	2300      	movs	r3, #0
}
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	3710      	adds	r7, #16
 8009ffe:	46bd      	mov	sp, r7
 800a000:	bd80      	pop	{r7, pc}
 800a002:	bf00      	nop
 800a004:	40010000 	.word	0x40010000

0800a008 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800a008:	b580      	push	{r7, lr}
 800a00a:	b086      	sub	sp, #24
 800a00c:	af00      	add	r7, sp, #0
 800a00e:	6078      	str	r0, [r7, #4]
 800a010:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2b00      	cmp	r3, #0
 800a016:	d101      	bne.n	800a01c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800a018:	2301      	movs	r3, #1
 800a01a:	e0a2      	b.n	800a162 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a022:	b2db      	uxtb	r3, r3
 800a024:	2b00      	cmp	r3, #0
 800a026:	d111      	bne.n	800a04c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	2200      	movs	r2, #0
 800a02c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	f001 f8a9 	bl	800b188 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d102      	bne.n	800a044 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	4a4a      	ldr	r2, [pc, #296]	; (800a16c <HAL_TIM_Encoder_Init+0x164>)
 800a042:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a048:	6878      	ldr	r0, [r7, #4]
 800a04a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	2202      	movs	r2, #2
 800a050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	689b      	ldr	r3, [r3, #8]
 800a05a:	687a      	ldr	r2, [r7, #4]
 800a05c:	6812      	ldr	r2, [r2, #0]
 800a05e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a062:	f023 0307 	bic.w	r3, r3, #7
 800a066:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	681a      	ldr	r2, [r3, #0]
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	3304      	adds	r3, #4
 800a070:	4619      	mov	r1, r3
 800a072:	4610      	mov	r0, r2
 800a074:	f000 fdbc 	bl	800abf0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689b      	ldr	r3, [r3, #8]
 800a07e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	699b      	ldr	r3, [r3, #24]
 800a086:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	6a1b      	ldr	r3, [r3, #32]
 800a08e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	697a      	ldr	r2, [r7, #20]
 800a096:	4313      	orrs	r3, r2
 800a098:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800a09a:	693b      	ldr	r3, [r7, #16]
 800a09c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a0:	f023 0303 	bic.w	r3, r3, #3
 800a0a4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	689a      	ldr	r2, [r3, #8]
 800a0aa:	683b      	ldr	r3, [r7, #0]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	021b      	lsls	r3, r3, #8
 800a0b0:	4313      	orrs	r3, r2
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	4313      	orrs	r3, r2
 800a0b6:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800a0b8:	693b      	ldr	r3, [r7, #16]
 800a0ba:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800a0be:	f023 030c 	bic.w	r3, r3, #12
 800a0c2:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800a0c4:	693b      	ldr	r3, [r7, #16]
 800a0c6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a0ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800a0d0:	683b      	ldr	r3, [r7, #0]
 800a0d2:	68da      	ldr	r2, [r3, #12]
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	69db      	ldr	r3, [r3, #28]
 800a0d8:	021b      	lsls	r3, r3, #8
 800a0da:	4313      	orrs	r3, r2
 800a0dc:	693a      	ldr	r2, [r7, #16]
 800a0de:	4313      	orrs	r3, r2
 800a0e0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800a0e2:	683b      	ldr	r3, [r7, #0]
 800a0e4:	691b      	ldr	r3, [r3, #16]
 800a0e6:	011a      	lsls	r2, r3, #4
 800a0e8:	683b      	ldr	r3, [r7, #0]
 800a0ea:	6a1b      	ldr	r3, [r3, #32]
 800a0ec:	031b      	lsls	r3, r3, #12
 800a0ee:	4313      	orrs	r3, r2
 800a0f0:	693a      	ldr	r2, [r7, #16]
 800a0f2:	4313      	orrs	r3, r2
 800a0f4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800a0fc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800a104:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	695b      	ldr	r3, [r3, #20]
 800a10e:	011b      	lsls	r3, r3, #4
 800a110:	4313      	orrs	r3, r2
 800a112:	68fa      	ldr	r2, [r7, #12]
 800a114:	4313      	orrs	r3, r2
 800a116:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	697a      	ldr	r2, [r7, #20]
 800a11e:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	693a      	ldr	r2, [r7, #16]
 800a126:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	68fa      	ldr	r2, [r7, #12]
 800a12e:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	2201      	movs	r2, #1
 800a134:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	2201      	movs	r2, #1
 800a144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	2201      	movs	r2, #1
 800a14c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	2201      	movs	r2, #1
 800a154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2201      	movs	r2, #1
 800a15c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a160:	2300      	movs	r3, #0
}
 800a162:	4618      	mov	r0, r3
 800a164:	3718      	adds	r7, #24
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}
 800a16a:	bf00      	nop
 800a16c:	08004e89 	.word	0x08004e89

0800a170 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b084      	sub	sp, #16
 800a174:	af00      	add	r7, sp, #0
 800a176:	6078      	str	r0, [r7, #4]
 800a178:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a180:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800a188:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800a190:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800a198:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d110      	bne.n	800a1c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1a0:	7bfb      	ldrb	r3, [r7, #15]
 800a1a2:	2b01      	cmp	r3, #1
 800a1a4:	d102      	bne.n	800a1ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1a6:	7b7b      	ldrb	r3, [r7, #13]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d001      	beq.n	800a1b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800a1ac:	2301      	movs	r3, #1
 800a1ae:	e069      	b.n	800a284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2202      	movs	r2, #2
 800a1b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	2202      	movs	r2, #2
 800a1bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a1c0:	e031      	b.n	800a226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	2b04      	cmp	r3, #4
 800a1c6:	d110      	bne.n	800a1ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1c8:	7bbb      	ldrb	r3, [r7, #14]
 800a1ca:	2b01      	cmp	r3, #1
 800a1cc:	d102      	bne.n	800a1d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1ce:	7b3b      	ldrb	r3, [r7, #12]
 800a1d0:	2b01      	cmp	r3, #1
 800a1d2:	d001      	beq.n	800a1d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800a1d4:	2301      	movs	r3, #1
 800a1d6:	e055      	b.n	800a284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2202      	movs	r2, #2
 800a1dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2202      	movs	r2, #2
 800a1e4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a1e8:	e01d      	b.n	800a226 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1ea:	7bfb      	ldrb	r3, [r7, #15]
 800a1ec:	2b01      	cmp	r3, #1
 800a1ee:	d108      	bne.n	800a202 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1f0:	7bbb      	ldrb	r3, [r7, #14]
 800a1f2:	2b01      	cmp	r3, #1
 800a1f4:	d105      	bne.n	800a202 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800a1f6:	7b7b      	ldrb	r3, [r7, #13]
 800a1f8:	2b01      	cmp	r3, #1
 800a1fa:	d102      	bne.n	800a202 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800a1fc:	7b3b      	ldrb	r3, [r7, #12]
 800a1fe:	2b01      	cmp	r3, #1
 800a200:	d001      	beq.n	800a206 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800a202:	2301      	movs	r3, #1
 800a204:	e03e      	b.n	800a284 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2202      	movs	r2, #2
 800a20a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	2202      	movs	r2, #2
 800a212:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800a216:	687b      	ldr	r3, [r7, #4]
 800a218:	2202      	movs	r2, #2
 800a21a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	2202      	movs	r2, #2
 800a222:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	2b00      	cmp	r3, #0
 800a22a:	d003      	beq.n	800a234 <HAL_TIM_Encoder_Start+0xc4>
 800a22c:	683b      	ldr	r3, [r7, #0]
 800a22e:	2b04      	cmp	r3, #4
 800a230:	d008      	beq.n	800a244 <HAL_TIM_Encoder_Start+0xd4>
 800a232:	e00f      	b.n	800a254 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	2201      	movs	r2, #1
 800a23a:	2100      	movs	r1, #0
 800a23c:	4618      	mov	r0, r3
 800a23e:	f000 ff7d 	bl	800b13c <TIM_CCxChannelCmd>
      break;
 800a242:	e016      	b.n	800a272 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	2201      	movs	r2, #1
 800a24a:	2104      	movs	r1, #4
 800a24c:	4618      	mov	r0, r3
 800a24e:	f000 ff75 	bl	800b13c <TIM_CCxChannelCmd>
      break;
 800a252:	e00e      	b.n	800a272 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	2201      	movs	r2, #1
 800a25a:	2100      	movs	r1, #0
 800a25c:	4618      	mov	r0, r3
 800a25e:	f000 ff6d 	bl	800b13c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	2201      	movs	r2, #1
 800a268:	2104      	movs	r1, #4
 800a26a:	4618      	mov	r0, r3
 800a26c:	f000 ff66 	bl	800b13c <TIM_CCxChannelCmd>
      break;
 800a270:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	681a      	ldr	r2, [r3, #0]
 800a278:	687b      	ldr	r3, [r7, #4]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f042 0201 	orr.w	r2, r2, #1
 800a280:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b082      	sub	sp, #8
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a294:	687b      	ldr	r3, [r7, #4]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	691b      	ldr	r3, [r3, #16]
 800a29a:	f003 0302 	and.w	r3, r3, #2
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d128      	bne.n	800a2f4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	68db      	ldr	r3, [r3, #12]
 800a2a8:	f003 0302 	and.w	r3, r3, #2
 800a2ac:	2b02      	cmp	r3, #2
 800a2ae:	d121      	bne.n	800a2f4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f06f 0202 	mvn.w	r2, #2
 800a2b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	699b      	ldr	r3, [r3, #24]
 800a2c6:	f003 0303 	and.w	r3, r3, #3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d005      	beq.n	800a2da <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	4798      	blx	r3
 800a2d8:	e009      	b.n	800a2ee <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	2200      	movs	r2, #0
 800a2f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	691b      	ldr	r3, [r3, #16]
 800a2fa:	f003 0304 	and.w	r3, r3, #4
 800a2fe:	2b04      	cmp	r3, #4
 800a300:	d128      	bne.n	800a354 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	68db      	ldr	r3, [r3, #12]
 800a308:	f003 0304 	and.w	r3, r3, #4
 800a30c:	2b04      	cmp	r3, #4
 800a30e:	d121      	bne.n	800a354 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	681b      	ldr	r3, [r3, #0]
 800a314:	f06f 0204 	mvn.w	r2, #4
 800a318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2202      	movs	r2, #2
 800a31e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a32a:	2b00      	cmp	r3, #0
 800a32c:	d005      	beq.n	800a33a <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a334:	6878      	ldr	r0, [r7, #4]
 800a336:	4798      	blx	r3
 800a338:	e009      	b.n	800a34e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2200      	movs	r2, #0
 800a352:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	691b      	ldr	r3, [r3, #16]
 800a35a:	f003 0308 	and.w	r3, r3, #8
 800a35e:	2b08      	cmp	r3, #8
 800a360:	d128      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	68db      	ldr	r3, [r3, #12]
 800a368:	f003 0308 	and.w	r3, r3, #8
 800a36c:	2b08      	cmp	r3, #8
 800a36e:	d121      	bne.n	800a3b4 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	f06f 0208 	mvn.w	r2, #8
 800a378:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2204      	movs	r2, #4
 800a37e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	69db      	ldr	r3, [r3, #28]
 800a386:	f003 0303 	and.w	r3, r3, #3
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d005      	beq.n	800a39a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a394:	6878      	ldr	r0, [r7, #4]
 800a396:	4798      	blx	r3
 800a398:	e009      	b.n	800a3ae <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	2200      	movs	r2, #0
 800a3b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	681b      	ldr	r3, [r3, #0]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	f003 0310 	and.w	r3, r3, #16
 800a3be:	2b10      	cmp	r3, #16
 800a3c0:	d128      	bne.n	800a414 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	68db      	ldr	r3, [r3, #12]
 800a3c8:	f003 0310 	and.w	r3, r3, #16
 800a3cc:	2b10      	cmp	r3, #16
 800a3ce:	d121      	bne.n	800a414 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	f06f 0210 	mvn.w	r2, #16
 800a3d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	2208      	movs	r2, #8
 800a3de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	69db      	ldr	r3, [r3, #28]
 800a3e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d005      	beq.n	800a3fa <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f4:	6878      	ldr	r0, [r7, #4]
 800a3f6:	4798      	blx	r3
 800a3f8:	e009      	b.n	800a40e <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a400:	6878      	ldr	r0, [r7, #4]
 800a402:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a40a:	6878      	ldr	r0, [r7, #4]
 800a40c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	2200      	movs	r2, #0
 800a412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	691b      	ldr	r3, [r3, #16]
 800a41a:	f003 0301 	and.w	r3, r3, #1
 800a41e:	2b01      	cmp	r3, #1
 800a420:	d110      	bne.n	800a444 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	68db      	ldr	r3, [r3, #12]
 800a428:	f003 0301 	and.w	r3, r3, #1
 800a42c:	2b01      	cmp	r3, #1
 800a42e:	d109      	bne.n	800a444 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	681b      	ldr	r3, [r3, #0]
 800a434:	f06f 0201 	mvn.w	r2, #1
 800a438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	691b      	ldr	r3, [r3, #16]
 800a44a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a44e:	2b80      	cmp	r3, #128	; 0x80
 800a450:	d110      	bne.n	800a474 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	68db      	ldr	r3, [r3, #12]
 800a458:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a45c:	2b80      	cmp	r3, #128	; 0x80
 800a45e:	d109      	bne.n	800a474 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a468:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	691b      	ldr	r3, [r3, #16]
 800a47a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a47e:	2b40      	cmp	r3, #64	; 0x40
 800a480:	d110      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a48c:	2b40      	cmp	r3, #64	; 0x40
 800a48e:	d109      	bne.n	800a4a4 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a4a0:	6878      	ldr	r0, [r7, #4]
 800a4a2:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	691b      	ldr	r3, [r3, #16]
 800a4aa:	f003 0320 	and.w	r3, r3, #32
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d110      	bne.n	800a4d4 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	68db      	ldr	r3, [r3, #12]
 800a4b8:	f003 0320 	and.w	r3, r3, #32
 800a4bc:	2b20      	cmp	r3, #32
 800a4be:	d109      	bne.n	800a4d4 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	f06f 0220 	mvn.w	r2, #32
 800a4c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a4d4:	bf00      	nop
 800a4d6:	3708      	adds	r7, #8
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	bd80      	pop	{r7, pc}

0800a4dc <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	60f8      	str	r0, [r7, #12]
 800a4e4:	60b9      	str	r1, [r7, #8]
 800a4e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <HAL_TIM_OC_ConfigChannel+0x1e>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e048      	b.n	800a58c <HAL_TIM_OC_ConfigChannel+0xb0>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2201      	movs	r2, #1
 800a4fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2b0c      	cmp	r3, #12
 800a506:	d839      	bhi.n	800a57c <HAL_TIM_OC_ConfigChannel+0xa0>
 800a508:	a201      	add	r2, pc, #4	; (adr r2, 800a510 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a50a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a50e:	bf00      	nop
 800a510:	0800a545 	.word	0x0800a545
 800a514:	0800a57d 	.word	0x0800a57d
 800a518:	0800a57d 	.word	0x0800a57d
 800a51c:	0800a57d 	.word	0x0800a57d
 800a520:	0800a553 	.word	0x0800a553
 800a524:	0800a57d 	.word	0x0800a57d
 800a528:	0800a57d 	.word	0x0800a57d
 800a52c:	0800a57d 	.word	0x0800a57d
 800a530:	0800a561 	.word	0x0800a561
 800a534:	0800a57d 	.word	0x0800a57d
 800a538:	0800a57d 	.word	0x0800a57d
 800a53c:	0800a57d 	.word	0x0800a57d
 800a540:	0800a56f 	.word	0x0800a56f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68b9      	ldr	r1, [r7, #8]
 800a54a:	4618      	mov	r0, r3
 800a54c:	f000 fbd0 	bl	800acf0 <TIM_OC1_SetConfig>
      break;
 800a550:	e017      	b.n	800a582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	68b9      	ldr	r1, [r7, #8]
 800a558:	4618      	mov	r0, r3
 800a55a:	f000 fc2f 	bl	800adbc <TIM_OC2_SetConfig>
      break;
 800a55e:	e010      	b.n	800a582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a560:	68fb      	ldr	r3, [r7, #12]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	68b9      	ldr	r1, [r7, #8]
 800a566:	4618      	mov	r0, r3
 800a568:	f000 fc94 	bl	800ae94 <TIM_OC3_SetConfig>
      break;
 800a56c:	e009      	b.n	800a582 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	68b9      	ldr	r1, [r7, #8]
 800a574:	4618      	mov	r0, r3
 800a576:	f000 fcf7 	bl	800af68 <TIM_OC4_SetConfig>
      break;
 800a57a:	e002      	b.n	800a582 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a57c:	2301      	movs	r3, #1
 800a57e:	75fb      	strb	r3, [r7, #23]
      break;
 800a580:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	2200      	movs	r2, #0
 800a586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a58a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3718      	adds	r7, #24
 800a590:	46bd      	mov	sp, r7
 800a592:	bd80      	pop	{r7, pc}

0800a594 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a594:	b580      	push	{r7, lr}
 800a596:	b086      	sub	sp, #24
 800a598:	af00      	add	r7, sp, #0
 800a59a:	60f8      	str	r0, [r7, #12]
 800a59c:	60b9      	str	r1, [r7, #8]
 800a59e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a5a0:	2300      	movs	r3, #0
 800a5a2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d101      	bne.n	800a5b2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a5ae:	2302      	movs	r3, #2
 800a5b0:	e0ae      	b.n	800a710 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a5b2:	68fb      	ldr	r3, [r7, #12]
 800a5b4:	2201      	movs	r2, #1
 800a5b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2b0c      	cmp	r3, #12
 800a5be:	f200 809f 	bhi.w	800a700 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a5c2:	a201      	add	r2, pc, #4	; (adr r2, 800a5c8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a5c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5c8:	0800a5fd 	.word	0x0800a5fd
 800a5cc:	0800a701 	.word	0x0800a701
 800a5d0:	0800a701 	.word	0x0800a701
 800a5d4:	0800a701 	.word	0x0800a701
 800a5d8:	0800a63d 	.word	0x0800a63d
 800a5dc:	0800a701 	.word	0x0800a701
 800a5e0:	0800a701 	.word	0x0800a701
 800a5e4:	0800a701 	.word	0x0800a701
 800a5e8:	0800a67f 	.word	0x0800a67f
 800a5ec:	0800a701 	.word	0x0800a701
 800a5f0:	0800a701 	.word	0x0800a701
 800a5f4:	0800a701 	.word	0x0800a701
 800a5f8:	0800a6bf 	.word	0x0800a6bf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a5fc:	68fb      	ldr	r3, [r7, #12]
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	68b9      	ldr	r1, [r7, #8]
 800a602:	4618      	mov	r0, r3
 800a604:	f000 fb74 	bl	800acf0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	681b      	ldr	r3, [r3, #0]
 800a60c:	699a      	ldr	r2, [r3, #24]
 800a60e:	68fb      	ldr	r3, [r7, #12]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f042 0208 	orr.w	r2, r2, #8
 800a616:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	699a      	ldr	r2, [r3, #24]
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f022 0204 	bic.w	r2, r2, #4
 800a626:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	6999      	ldr	r1, [r3, #24]
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	691a      	ldr	r2, [r3, #16]
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	430a      	orrs	r2, r1
 800a638:	619a      	str	r2, [r3, #24]
      break;
 800a63a:	e064      	b.n	800a706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	68b9      	ldr	r1, [r7, #8]
 800a642:	4618      	mov	r0, r3
 800a644:	f000 fbba 	bl	800adbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	699a      	ldr	r2, [r3, #24]
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	699a      	ldr	r2, [r3, #24]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	6999      	ldr	r1, [r3, #24]
 800a66e:	68bb      	ldr	r3, [r7, #8]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	021a      	lsls	r2, r3, #8
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	430a      	orrs	r2, r1
 800a67a:	619a      	str	r2, [r3, #24]
      break;
 800a67c:	e043      	b.n	800a706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	68b9      	ldr	r1, [r7, #8]
 800a684:	4618      	mov	r0, r3
 800a686:	f000 fc05 	bl	800ae94 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	69da      	ldr	r2, [r3, #28]
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	f042 0208 	orr.w	r2, r2, #8
 800a698:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	69da      	ldr	r2, [r3, #28]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	f022 0204 	bic.w	r2, r2, #4
 800a6a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a6aa:	68fb      	ldr	r3, [r7, #12]
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69d9      	ldr	r1, [r3, #28]
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	691a      	ldr	r2, [r3, #16]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	430a      	orrs	r2, r1
 800a6ba:	61da      	str	r2, [r3, #28]
      break;
 800a6bc:	e023      	b.n	800a706 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	4618      	mov	r0, r3
 800a6c6:	f000 fc4f 	bl	800af68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	69da      	ldr	r2, [r3, #28]
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a6d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	69da      	ldr	r2, [r3, #28]
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	69d9      	ldr	r1, [r3, #28]
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	691b      	ldr	r3, [r3, #16]
 800a6f4:	021a      	lsls	r2, r3, #8
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	430a      	orrs	r2, r1
 800a6fc:	61da      	str	r2, [r3, #28]
      break;
 800a6fe:	e002      	b.n	800a706 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a700:	2301      	movs	r3, #1
 800a702:	75fb      	strb	r3, [r7, #23]
      break;
 800a704:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a70e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3718      	adds	r7, #24
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a718:	b580      	push	{r7, lr}
 800a71a:	b084      	sub	sp, #16
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a722:	2300      	movs	r3, #0
 800a724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a72c:	2b01      	cmp	r3, #1
 800a72e:	d101      	bne.n	800a734 <HAL_TIM_ConfigClockSource+0x1c>
 800a730:	2302      	movs	r3, #2
 800a732:	e0b4      	b.n	800a89e <HAL_TIM_ConfigClockSource+0x186>
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	2201      	movs	r2, #1
 800a738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	2202      	movs	r2, #2
 800a740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	689b      	ldr	r3, [r3, #8]
 800a74a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a754:	68bb      	ldr	r3, [r7, #8]
 800a756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a75a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	68ba      	ldr	r2, [r7, #8]
 800a762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a76c:	d03e      	beq.n	800a7ec <HAL_TIM_ConfigClockSource+0xd4>
 800a76e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a772:	f200 8087 	bhi.w	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a77a:	f000 8086 	beq.w	800a88a <HAL_TIM_ConfigClockSource+0x172>
 800a77e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a782:	d87f      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a784:	2b70      	cmp	r3, #112	; 0x70
 800a786:	d01a      	beq.n	800a7be <HAL_TIM_ConfigClockSource+0xa6>
 800a788:	2b70      	cmp	r3, #112	; 0x70
 800a78a:	d87b      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a78c:	2b60      	cmp	r3, #96	; 0x60
 800a78e:	d050      	beq.n	800a832 <HAL_TIM_ConfigClockSource+0x11a>
 800a790:	2b60      	cmp	r3, #96	; 0x60
 800a792:	d877      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a794:	2b50      	cmp	r3, #80	; 0x50
 800a796:	d03c      	beq.n	800a812 <HAL_TIM_ConfigClockSource+0xfa>
 800a798:	2b50      	cmp	r3, #80	; 0x50
 800a79a:	d873      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a79c:	2b40      	cmp	r3, #64	; 0x40
 800a79e:	d058      	beq.n	800a852 <HAL_TIM_ConfigClockSource+0x13a>
 800a7a0:	2b40      	cmp	r3, #64	; 0x40
 800a7a2:	d86f      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a7a4:	2b30      	cmp	r3, #48	; 0x30
 800a7a6:	d064      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x15a>
 800a7a8:	2b30      	cmp	r3, #48	; 0x30
 800a7aa:	d86b      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a7ac:	2b20      	cmp	r3, #32
 800a7ae:	d060      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x15a>
 800a7b0:	2b20      	cmp	r3, #32
 800a7b2:	d867      	bhi.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d05c      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x15a>
 800a7b8:	2b10      	cmp	r3, #16
 800a7ba:	d05a      	beq.n	800a872 <HAL_TIM_ConfigClockSource+0x15a>
 800a7bc:	e062      	b.n	800a884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6818      	ldr	r0, [r3, #0]
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	6899      	ldr	r1, [r3, #8]
 800a7c6:	683b      	ldr	r3, [r7, #0]
 800a7c8:	685a      	ldr	r2, [r3, #4]
 800a7ca:	683b      	ldr	r3, [r7, #0]
 800a7cc:	68db      	ldr	r3, [r3, #12]
 800a7ce:	f000 fc95 	bl	800b0fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	689b      	ldr	r3, [r3, #8]
 800a7d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a7da:	68bb      	ldr	r3, [r7, #8]
 800a7dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a7e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68ba      	ldr	r2, [r7, #8]
 800a7e8:	609a      	str	r2, [r3, #8]
      break;
 800a7ea:	e04f      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	6818      	ldr	r0, [r3, #0]
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	6899      	ldr	r1, [r3, #8]
 800a7f4:	683b      	ldr	r3, [r7, #0]
 800a7f6:	685a      	ldr	r2, [r3, #4]
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	68db      	ldr	r3, [r3, #12]
 800a7fc:	f000 fc7e 	bl	800b0fc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	689a      	ldr	r2, [r3, #8]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a80e:	609a      	str	r2, [r3, #8]
      break;
 800a810:	e03c      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	6818      	ldr	r0, [r3, #0]
 800a816:	683b      	ldr	r3, [r7, #0]
 800a818:	6859      	ldr	r1, [r3, #4]
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	461a      	mov	r2, r3
 800a820:	f000 fbf2 	bl	800b008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	2150      	movs	r1, #80	; 0x50
 800a82a:	4618      	mov	r0, r3
 800a82c:	f000 fc4b 	bl	800b0c6 <TIM_ITRx_SetConfig>
      break;
 800a830:	e02c      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6818      	ldr	r0, [r3, #0]
 800a836:	683b      	ldr	r3, [r7, #0]
 800a838:	6859      	ldr	r1, [r3, #4]
 800a83a:	683b      	ldr	r3, [r7, #0]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	461a      	mov	r2, r3
 800a840:	f000 fc11 	bl	800b066 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	2160      	movs	r1, #96	; 0x60
 800a84a:	4618      	mov	r0, r3
 800a84c:	f000 fc3b 	bl	800b0c6 <TIM_ITRx_SetConfig>
      break;
 800a850:	e01c      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	6818      	ldr	r0, [r3, #0]
 800a856:	683b      	ldr	r3, [r7, #0]
 800a858:	6859      	ldr	r1, [r3, #4]
 800a85a:	683b      	ldr	r3, [r7, #0]
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	461a      	mov	r2, r3
 800a860:	f000 fbd2 	bl	800b008 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	2140      	movs	r1, #64	; 0x40
 800a86a:	4618      	mov	r0, r3
 800a86c:	f000 fc2b 	bl	800b0c6 <TIM_ITRx_SetConfig>
      break;
 800a870:	e00c      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681a      	ldr	r2, [r3, #0]
 800a876:	683b      	ldr	r3, [r7, #0]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	4619      	mov	r1, r3
 800a87c:	4610      	mov	r0, r2
 800a87e:	f000 fc22 	bl	800b0c6 <TIM_ITRx_SetConfig>
      break;
 800a882:	e003      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a884:	2301      	movs	r3, #1
 800a886:	73fb      	strb	r3, [r7, #15]
      break;
 800a888:	e000      	b.n	800a88c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a88a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2201      	movs	r2, #1
 800a890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	2200      	movs	r2, #0
 800a898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a89c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3710      	adds	r7, #16
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}

0800a8a6 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8a6:	b480      	push	{r7}
 800a8a8:	b083      	sub	sp, #12
 800a8aa:	af00      	add	r7, sp, #0
 800a8ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a8ae:	bf00      	nop
 800a8b0:	370c      	adds	r7, #12
 800a8b2:	46bd      	mov	sp, r7
 800a8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b8:	4770      	bx	lr

0800a8ba <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a8ba:	b480      	push	{r7}
 800a8bc:	b083      	sub	sp, #12
 800a8be:	af00      	add	r7, sp, #0
 800a8c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a8c2:	bf00      	nop
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a8ce:	b480      	push	{r7}
 800a8d0:	b083      	sub	sp, #12
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a8d6:	bf00      	nop
 800a8d8:	370c      	adds	r7, #12
 800a8da:	46bd      	mov	sp, r7
 800a8dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e0:	4770      	bx	lr

0800a8e2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a8e2:	b480      	push	{r7}
 800a8e4:	b083      	sub	sp, #12
 800a8e6:	af00      	add	r7, sp, #0
 800a8e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a8ea:	bf00      	nop
 800a8ec:	370c      	adds	r7, #12
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f4:	4770      	bx	lr

0800a8f6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a8f6:	b480      	push	{r7}
 800a8f8:	b083      	sub	sp, #12
 800a8fa:	af00      	add	r7, sp, #0
 800a8fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a8fe:	bf00      	nop
 800a900:	370c      	adds	r7, #12
 800a902:	46bd      	mov	sp, r7
 800a904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a908:	4770      	bx	lr

0800a90a <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a90a:	b480      	push	{r7}
 800a90c:	b083      	sub	sp, #12
 800a90e:	af00      	add	r7, sp, #0
 800a910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a912:	bf00      	nop
 800a914:	370c      	adds	r7, #12
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a91e:	b480      	push	{r7}
 800a920:	b083      	sub	sp, #12
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a926:	bf00      	nop
 800a928:	370c      	adds	r7, #12
 800a92a:	46bd      	mov	sp, r7
 800a92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a930:	4770      	bx	lr

0800a932 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a932:	b480      	push	{r7}
 800a934:	b083      	sub	sp, #12
 800a936:	af00      	add	r7, sp, #0
 800a938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a93a:	bf00      	nop
 800a93c:	370c      	adds	r7, #12
 800a93e:	46bd      	mov	sp, r7
 800a940:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a944:	4770      	bx	lr

0800a946 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a946:	b480      	push	{r7}
 800a948:	b083      	sub	sp, #12
 800a94a:	af00      	add	r7, sp, #0
 800a94c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a94e:	bf00      	nop
 800a950:	370c      	adds	r7, #12
 800a952:	46bd      	mov	sp, r7
 800a954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a958:	4770      	bx	lr
	...

0800a95c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a95c:	b480      	push	{r7}
 800a95e:	b087      	sub	sp, #28
 800a960:	af00      	add	r7, sp, #0
 800a962:	60f8      	str	r0, [r7, #12]
 800a964:	460b      	mov	r3, r1
 800a966:	607a      	str	r2, [r7, #4]
 800a968:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a96a:	2300      	movs	r3, #0
 800a96c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	2b00      	cmp	r3, #0
 800a972:	d101      	bne.n	800a978 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a974:	2301      	movs	r3, #1
 800a976:	e135      	b.n	800abe4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d101      	bne.n	800a986 <HAL_TIM_RegisterCallback+0x2a>
 800a982:	2302      	movs	r3, #2
 800a984:	e12e      	b.n	800abe4 <HAL_TIM_RegisterCallback+0x288>
 800a986:	68fb      	ldr	r3, [r7, #12]
 800a988:	2201      	movs	r2, #1
 800a98a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a994:	b2db      	uxtb	r3, r3
 800a996:	2b01      	cmp	r3, #1
 800a998:	f040 80ba 	bne.w	800ab10 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a99c:	7afb      	ldrb	r3, [r7, #11]
 800a99e:	2b1a      	cmp	r3, #26
 800a9a0:	f200 80b3 	bhi.w	800ab0a <HAL_TIM_RegisterCallback+0x1ae>
 800a9a4:	a201      	add	r2, pc, #4	; (adr r2, 800a9ac <HAL_TIM_RegisterCallback+0x50>)
 800a9a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9aa:	bf00      	nop
 800a9ac:	0800aa19 	.word	0x0800aa19
 800a9b0:	0800aa21 	.word	0x0800aa21
 800a9b4:	0800aa29 	.word	0x0800aa29
 800a9b8:	0800aa31 	.word	0x0800aa31
 800a9bc:	0800aa39 	.word	0x0800aa39
 800a9c0:	0800aa41 	.word	0x0800aa41
 800a9c4:	0800aa49 	.word	0x0800aa49
 800a9c8:	0800aa51 	.word	0x0800aa51
 800a9cc:	0800aa59 	.word	0x0800aa59
 800a9d0:	0800aa61 	.word	0x0800aa61
 800a9d4:	0800aa69 	.word	0x0800aa69
 800a9d8:	0800aa71 	.word	0x0800aa71
 800a9dc:	0800aa79 	.word	0x0800aa79
 800a9e0:	0800aa81 	.word	0x0800aa81
 800a9e4:	0800aa89 	.word	0x0800aa89
 800a9e8:	0800aa93 	.word	0x0800aa93
 800a9ec:	0800aa9d 	.word	0x0800aa9d
 800a9f0:	0800aaa7 	.word	0x0800aaa7
 800a9f4:	0800aab1 	.word	0x0800aab1
 800a9f8:	0800aabb 	.word	0x0800aabb
 800a9fc:	0800aac5 	.word	0x0800aac5
 800aa00:	0800aacf 	.word	0x0800aacf
 800aa04:	0800aad9 	.word	0x0800aad9
 800aa08:	0800aae3 	.word	0x0800aae3
 800aa0c:	0800aaed 	.word	0x0800aaed
 800aa10:	0800aaf7 	.word	0x0800aaf7
 800aa14:	0800ab01 	.word	0x0800ab01
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	687a      	ldr	r2, [r7, #4]
 800aa1c:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800aa1e:	e0dc      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	687a      	ldr	r2, [r7, #4]
 800aa24:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800aa26:	e0d8      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	687a      	ldr	r2, [r7, #4]
 800aa2c:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800aa2e:	e0d4      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	687a      	ldr	r2, [r7, #4]
 800aa34:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800aa36:	e0d0      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	687a      	ldr	r2, [r7, #4]
 800aa3c:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800aa3e:	e0cc      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	687a      	ldr	r2, [r7, #4]
 800aa44:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800aa46:	e0c8      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800aa4e:	e0c4      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	687a      	ldr	r2, [r7, #4]
 800aa54:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800aa56:	e0c0      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	687a      	ldr	r2, [r7, #4]
 800aa5c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800aa5e:	e0bc      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800aa66:	e0b8      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800aa68:	68fb      	ldr	r3, [r7, #12]
 800aa6a:	687a      	ldr	r2, [r7, #4]
 800aa6c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800aa6e:	e0b4      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800aa70:	68fb      	ldr	r3, [r7, #12]
 800aa72:	687a      	ldr	r2, [r7, #4]
 800aa74:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800aa76:	e0b0      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	687a      	ldr	r2, [r7, #4]
 800aa7c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800aa7e:	e0ac      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800aa80:	68fb      	ldr	r3, [r7, #12]
 800aa82:	687a      	ldr	r2, [r7, #4]
 800aa84:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800aa86:	e0a8      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	687a      	ldr	r2, [r7, #4]
 800aa8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800aa90:	e0a3      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	687a      	ldr	r2, [r7, #4]
 800aa96:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800aa9a:	e09e      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800aaa4:	e099      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800aaae:	e094      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	687a      	ldr	r2, [r7, #4]
 800aab4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800aab8:	e08f      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	687a      	ldr	r2, [r7, #4]
 800aabe:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800aac2:	e08a      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	687a      	ldr	r2, [r7, #4]
 800aac8:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800aacc:	e085      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	687a      	ldr	r2, [r7, #4]
 800aad2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800aad6:	e080      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	687a      	ldr	r2, [r7, #4]
 800aadc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800aae0:	e07b      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800aaea:	e076      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800aaec:	68fb      	ldr	r3, [r7, #12]
 800aaee:	687a      	ldr	r2, [r7, #4]
 800aaf0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800aaf4:	e071      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	687a      	ldr	r2, [r7, #4]
 800aafa:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800aafe:	e06c      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800ab00:	68fb      	ldr	r3, [r7, #12]
 800ab02:	687a      	ldr	r2, [r7, #4]
 800ab04:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800ab08:	e067      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800ab0a:	2301      	movs	r3, #1
 800ab0c:	75fb      	strb	r3, [r7, #23]
        break;
 800ab0e:	e064      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab16:	b2db      	uxtb	r3, r3
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d15c      	bne.n	800abd6 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800ab1c:	7afb      	ldrb	r3, [r7, #11]
 800ab1e:	2b0d      	cmp	r3, #13
 800ab20:	d856      	bhi.n	800abd0 <HAL_TIM_RegisterCallback+0x274>
 800ab22:	a201      	add	r2, pc, #4	; (adr r2, 800ab28 <HAL_TIM_RegisterCallback+0x1cc>)
 800ab24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ab28:	0800ab61 	.word	0x0800ab61
 800ab2c:	0800ab69 	.word	0x0800ab69
 800ab30:	0800ab71 	.word	0x0800ab71
 800ab34:	0800ab79 	.word	0x0800ab79
 800ab38:	0800ab81 	.word	0x0800ab81
 800ab3c:	0800ab89 	.word	0x0800ab89
 800ab40:	0800ab91 	.word	0x0800ab91
 800ab44:	0800ab99 	.word	0x0800ab99
 800ab48:	0800aba1 	.word	0x0800aba1
 800ab4c:	0800aba9 	.word	0x0800aba9
 800ab50:	0800abb1 	.word	0x0800abb1
 800ab54:	0800abb9 	.word	0x0800abb9
 800ab58:	0800abc1 	.word	0x0800abc1
 800ab5c:	0800abc9 	.word	0x0800abc9
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	687a      	ldr	r2, [r7, #4]
 800ab64:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800ab66:	e038      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	687a      	ldr	r2, [r7, #4]
 800ab6c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800ab6e:	e034      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800ab76:	e030      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	687a      	ldr	r2, [r7, #4]
 800ab7c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800ab7e:	e02c      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	687a      	ldr	r2, [r7, #4]
 800ab84:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800ab86:	e028      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	687a      	ldr	r2, [r7, #4]
 800ab8c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800ab8e:	e024      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	687a      	ldr	r2, [r7, #4]
 800ab94:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800ab96:	e020      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	687a      	ldr	r2, [r7, #4]
 800ab9c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800ab9e:	e01c      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	687a      	ldr	r2, [r7, #4]
 800aba4:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800aba6:	e018      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	687a      	ldr	r2, [r7, #4]
 800abac:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800abae:	e014      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	687a      	ldr	r2, [r7, #4]
 800abb4:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800abb6:	e010      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800abb8:	68fb      	ldr	r3, [r7, #12]
 800abba:	687a      	ldr	r2, [r7, #4]
 800abbc:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800abbe:	e00c      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	687a      	ldr	r2, [r7, #4]
 800abc4:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800abc6:	e008      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	687a      	ldr	r2, [r7, #4]
 800abcc:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800abce:	e004      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800abd0:	2301      	movs	r3, #1
 800abd2:	75fb      	strb	r3, [r7, #23]
        break;
 800abd4:	e001      	b.n	800abda <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800abd6:	2301      	movs	r3, #1
 800abd8:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	2200      	movs	r2, #0
 800abde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800abe2:	7dfb      	ldrb	r3, [r7, #23]
}
 800abe4:	4618      	mov	r0, r3
 800abe6:	371c      	adds	r7, #28
 800abe8:	46bd      	mov	sp, r7
 800abea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abee:	4770      	bx	lr

0800abf0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	4a34      	ldr	r2, [pc, #208]	; (800acd4 <TIM_Base_SetConfig+0xe4>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d00f      	beq.n	800ac28 <TIM_Base_SetConfig+0x38>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac0e:	d00b      	beq.n	800ac28 <TIM_Base_SetConfig+0x38>
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	4a31      	ldr	r2, [pc, #196]	; (800acd8 <TIM_Base_SetConfig+0xe8>)
 800ac14:	4293      	cmp	r3, r2
 800ac16:	d007      	beq.n	800ac28 <TIM_Base_SetConfig+0x38>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	4a30      	ldr	r2, [pc, #192]	; (800acdc <TIM_Base_SetConfig+0xec>)
 800ac1c:	4293      	cmp	r3, r2
 800ac1e:	d003      	beq.n	800ac28 <TIM_Base_SetConfig+0x38>
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	4a2f      	ldr	r2, [pc, #188]	; (800ace0 <TIM_Base_SetConfig+0xf0>)
 800ac24:	4293      	cmp	r3, r2
 800ac26:	d108      	bne.n	800ac3a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ac30:	683b      	ldr	r3, [r7, #0]
 800ac32:	685b      	ldr	r3, [r3, #4]
 800ac34:	68fa      	ldr	r2, [r7, #12]
 800ac36:	4313      	orrs	r3, r2
 800ac38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	4a25      	ldr	r2, [pc, #148]	; (800acd4 <TIM_Base_SetConfig+0xe4>)
 800ac3e:	4293      	cmp	r3, r2
 800ac40:	d01b      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ac48:	d017      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	4a22      	ldr	r2, [pc, #136]	; (800acd8 <TIM_Base_SetConfig+0xe8>)
 800ac4e:	4293      	cmp	r3, r2
 800ac50:	d013      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	4a21      	ldr	r2, [pc, #132]	; (800acdc <TIM_Base_SetConfig+0xec>)
 800ac56:	4293      	cmp	r3, r2
 800ac58:	d00f      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	4a20      	ldr	r2, [pc, #128]	; (800ace0 <TIM_Base_SetConfig+0xf0>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d00b      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	4a1f      	ldr	r2, [pc, #124]	; (800ace4 <TIM_Base_SetConfig+0xf4>)
 800ac66:	4293      	cmp	r3, r2
 800ac68:	d007      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	4a1e      	ldr	r2, [pc, #120]	; (800ace8 <TIM_Base_SetConfig+0xf8>)
 800ac6e:	4293      	cmp	r3, r2
 800ac70:	d003      	beq.n	800ac7a <TIM_Base_SetConfig+0x8a>
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	4a1d      	ldr	r2, [pc, #116]	; (800acec <TIM_Base_SetConfig+0xfc>)
 800ac76:	4293      	cmp	r3, r2
 800ac78:	d108      	bne.n	800ac8c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	68db      	ldr	r3, [r3, #12]
 800ac86:	68fa      	ldr	r2, [r7, #12]
 800ac88:	4313      	orrs	r3, r2
 800ac8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac8c:	68fb      	ldr	r3, [r7, #12]
 800ac8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac92:	683b      	ldr	r3, [r7, #0]
 800ac94:	695b      	ldr	r3, [r3, #20]
 800ac96:	4313      	orrs	r3, r2
 800ac98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800aca0:	683b      	ldr	r3, [r7, #0]
 800aca2:	689a      	ldr	r2, [r3, #8]
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800aca8:	683b      	ldr	r3, [r7, #0]
 800acaa:	681a      	ldr	r2, [r3, #0]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	4a08      	ldr	r2, [pc, #32]	; (800acd4 <TIM_Base_SetConfig+0xe4>)
 800acb4:	4293      	cmp	r3, r2
 800acb6:	d103      	bne.n	800acc0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800acb8:	683b      	ldr	r3, [r7, #0]
 800acba:	691a      	ldr	r2, [r3, #16]
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	2201      	movs	r2, #1
 800acc4:	615a      	str	r2, [r3, #20]
}
 800acc6:	bf00      	nop
 800acc8:	3714      	adds	r7, #20
 800acca:	46bd      	mov	sp, r7
 800accc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd0:	4770      	bx	lr
 800acd2:	bf00      	nop
 800acd4:	40010000 	.word	0x40010000
 800acd8:	40000400 	.word	0x40000400
 800acdc:	40000800 	.word	0x40000800
 800ace0:	40000c00 	.word	0x40000c00
 800ace4:	40014000 	.word	0x40014000
 800ace8:	40014400 	.word	0x40014400
 800acec:	40014800 	.word	0x40014800

0800acf0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800acf0:	b480      	push	{r7}
 800acf2:	b087      	sub	sp, #28
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
 800acf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6a1b      	ldr	r3, [r3, #32]
 800acfe:	f023 0201 	bic.w	r2, r3, #1
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6a1b      	ldr	r3, [r3, #32]
 800ad0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	685b      	ldr	r3, [r3, #4]
 800ad10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	699b      	ldr	r3, [r3, #24]
 800ad16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	f023 0303 	bic.w	r3, r3, #3
 800ad26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	68fa      	ldr	r2, [r7, #12]
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	f023 0302 	bic.w	r3, r3, #2
 800ad38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ad3a:	683b      	ldr	r3, [r7, #0]
 800ad3c:	689b      	ldr	r3, [r3, #8]
 800ad3e:	697a      	ldr	r2, [r7, #20]
 800ad40:	4313      	orrs	r3, r2
 800ad42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a1c      	ldr	r2, [pc, #112]	; (800adb8 <TIM_OC1_SetConfig+0xc8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d10c      	bne.n	800ad66 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	f023 0308 	bic.w	r3, r3, #8
 800ad52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad54:	683b      	ldr	r3, [r7, #0]
 800ad56:	68db      	ldr	r3, [r3, #12]
 800ad58:	697a      	ldr	r2, [r7, #20]
 800ad5a:	4313      	orrs	r3, r2
 800ad5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad5e:	697b      	ldr	r3, [r7, #20]
 800ad60:	f023 0304 	bic.w	r3, r3, #4
 800ad64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a13      	ldr	r2, [pc, #76]	; (800adb8 <TIM_OC1_SetConfig+0xc8>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d111      	bne.n	800ad92 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad6e:	693b      	ldr	r3, [r7, #16]
 800ad70:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad76:	693b      	ldr	r3, [r7, #16]
 800ad78:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad7e:	683b      	ldr	r3, [r7, #0]
 800ad80:	695b      	ldr	r3, [r3, #20]
 800ad82:	693a      	ldr	r2, [r7, #16]
 800ad84:	4313      	orrs	r3, r2
 800ad86:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad88:	683b      	ldr	r3, [r7, #0]
 800ad8a:	699b      	ldr	r3, [r3, #24]
 800ad8c:	693a      	ldr	r2, [r7, #16]
 800ad8e:	4313      	orrs	r3, r2
 800ad90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	693a      	ldr	r2, [r7, #16]
 800ad96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	685a      	ldr	r2, [r3, #4]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	697a      	ldr	r2, [r7, #20]
 800adaa:	621a      	str	r2, [r3, #32]
}
 800adac:	bf00      	nop
 800adae:	371c      	adds	r7, #28
 800adb0:	46bd      	mov	sp, r7
 800adb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adb6:	4770      	bx	lr
 800adb8:	40010000 	.word	0x40010000

0800adbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800adbc:	b480      	push	{r7}
 800adbe:	b087      	sub	sp, #28
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
 800adc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	6a1b      	ldr	r3, [r3, #32]
 800adca:	f023 0210 	bic.w	r2, r3, #16
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	6a1b      	ldr	r3, [r3, #32]
 800add6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	685b      	ldr	r3, [r3, #4]
 800addc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	699b      	ldr	r3, [r3, #24]
 800ade2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800adea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	021b      	lsls	r3, r3, #8
 800adfa:	68fa      	ldr	r2, [r7, #12]
 800adfc:	4313      	orrs	r3, r2
 800adfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800ae00:	697b      	ldr	r3, [r7, #20]
 800ae02:	f023 0320 	bic.w	r3, r3, #32
 800ae06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	689b      	ldr	r3, [r3, #8]
 800ae0c:	011b      	lsls	r3, r3, #4
 800ae0e:	697a      	ldr	r2, [r7, #20]
 800ae10:	4313      	orrs	r3, r2
 800ae12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	4a1e      	ldr	r2, [pc, #120]	; (800ae90 <TIM_OC2_SetConfig+0xd4>)
 800ae18:	4293      	cmp	r3, r2
 800ae1a:	d10d      	bne.n	800ae38 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ae1c:	697b      	ldr	r3, [r7, #20]
 800ae1e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae22:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ae24:	683b      	ldr	r3, [r7, #0]
 800ae26:	68db      	ldr	r3, [r3, #12]
 800ae28:	011b      	lsls	r3, r3, #4
 800ae2a:	697a      	ldr	r2, [r7, #20]
 800ae2c:	4313      	orrs	r3, r2
 800ae2e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800ae30:	697b      	ldr	r3, [r7, #20]
 800ae32:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ae36:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	4a15      	ldr	r2, [pc, #84]	; (800ae90 <TIM_OC2_SetConfig+0xd4>)
 800ae3c:	4293      	cmp	r3, r2
 800ae3e:	d113      	bne.n	800ae68 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae40:	693b      	ldr	r3, [r7, #16]
 800ae42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae46:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae48:	693b      	ldr	r3, [r7, #16]
 800ae4a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae4e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae50:	683b      	ldr	r3, [r7, #0]
 800ae52:	695b      	ldr	r3, [r3, #20]
 800ae54:	009b      	lsls	r3, r3, #2
 800ae56:	693a      	ldr	r2, [r7, #16]
 800ae58:	4313      	orrs	r3, r2
 800ae5a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae5c:	683b      	ldr	r3, [r7, #0]
 800ae5e:	699b      	ldr	r3, [r3, #24]
 800ae60:	009b      	lsls	r3, r3, #2
 800ae62:	693a      	ldr	r2, [r7, #16]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	693a      	ldr	r2, [r7, #16]
 800ae6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	68fa      	ldr	r2, [r7, #12]
 800ae72:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae74:	683b      	ldr	r3, [r7, #0]
 800ae76:	685a      	ldr	r2, [r3, #4]
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	697a      	ldr	r2, [r7, #20]
 800ae80:	621a      	str	r2, [r3, #32]
}
 800ae82:	bf00      	nop
 800ae84:	371c      	adds	r7, #28
 800ae86:	46bd      	mov	sp, r7
 800ae88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae8c:	4770      	bx	lr
 800ae8e:	bf00      	nop
 800ae90:	40010000 	.word	0x40010000

0800ae94 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae94:	b480      	push	{r7}
 800ae96:	b087      	sub	sp, #28
 800ae98:	af00      	add	r7, sp, #0
 800ae9a:	6078      	str	r0, [r7, #4]
 800ae9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	6a1b      	ldr	r3, [r3, #32]
 800aea2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	6a1b      	ldr	r3, [r3, #32]
 800aeae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	685b      	ldr	r3, [r3, #4]
 800aeb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	69db      	ldr	r3, [r3, #28]
 800aeba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aec2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	f023 0303 	bic.w	r3, r3, #3
 800aeca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aecc:	683b      	ldr	r3, [r7, #0]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	68fa      	ldr	r2, [r7, #12]
 800aed2:	4313      	orrs	r3, r2
 800aed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aed6:	697b      	ldr	r3, [r7, #20]
 800aed8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aedc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aede:	683b      	ldr	r3, [r7, #0]
 800aee0:	689b      	ldr	r3, [r3, #8]
 800aee2:	021b      	lsls	r3, r3, #8
 800aee4:	697a      	ldr	r2, [r7, #20]
 800aee6:	4313      	orrs	r3, r2
 800aee8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a1d      	ldr	r2, [pc, #116]	; (800af64 <TIM_OC3_SetConfig+0xd0>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d10d      	bne.n	800af0e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aef8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aefa:	683b      	ldr	r3, [r7, #0]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	021b      	lsls	r3, r3, #8
 800af00:	697a      	ldr	r2, [r7, #20]
 800af02:	4313      	orrs	r3, r2
 800af04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	4a14      	ldr	r2, [pc, #80]	; (800af64 <TIM_OC3_SetConfig+0xd0>)
 800af12:	4293      	cmp	r3, r2
 800af14:	d113      	bne.n	800af3e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af1e:	693b      	ldr	r3, [r7, #16]
 800af20:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af26:	683b      	ldr	r3, [r7, #0]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	011b      	lsls	r3, r3, #4
 800af2c:	693a      	ldr	r2, [r7, #16]
 800af2e:	4313      	orrs	r3, r2
 800af30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	699b      	ldr	r3, [r3, #24]
 800af36:	011b      	lsls	r3, r3, #4
 800af38:	693a      	ldr	r2, [r7, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	693a      	ldr	r2, [r7, #16]
 800af42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	68fa      	ldr	r2, [r7, #12]
 800af48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af4a:	683b      	ldr	r3, [r7, #0]
 800af4c:	685a      	ldr	r2, [r3, #4]
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	697a      	ldr	r2, [r7, #20]
 800af56:	621a      	str	r2, [r3, #32]
}
 800af58:	bf00      	nop
 800af5a:	371c      	adds	r7, #28
 800af5c:	46bd      	mov	sp, r7
 800af5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af62:	4770      	bx	lr
 800af64:	40010000 	.word	0x40010000

0800af68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af68:	b480      	push	{r7}
 800af6a:	b087      	sub	sp, #28
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	6a1b      	ldr	r3, [r3, #32]
 800af76:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	6a1b      	ldr	r3, [r3, #32]
 800af82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	685b      	ldr	r3, [r3, #4]
 800af88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	69db      	ldr	r3, [r3, #28]
 800af8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800af96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	021b      	lsls	r3, r3, #8
 800afa6:	68fa      	ldr	r2, [r7, #12]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800afac:	693b      	ldr	r3, [r7, #16]
 800afae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800afb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afb4:	683b      	ldr	r3, [r7, #0]
 800afb6:	689b      	ldr	r3, [r3, #8]
 800afb8:	031b      	lsls	r3, r3, #12
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	4313      	orrs	r3, r2
 800afbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a10      	ldr	r2, [pc, #64]	; (800b004 <TIM_OC4_SetConfig+0x9c>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d109      	bne.n	800afdc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afc8:	697b      	ldr	r3, [r7, #20]
 800afca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afd0:	683b      	ldr	r3, [r7, #0]
 800afd2:	695b      	ldr	r3, [r3, #20]
 800afd4:	019b      	lsls	r3, r3, #6
 800afd6:	697a      	ldr	r2, [r7, #20]
 800afd8:	4313      	orrs	r3, r2
 800afda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afdc:	687b      	ldr	r3, [r7, #4]
 800afde:	697a      	ldr	r2, [r7, #20]
 800afe0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afe2:	687b      	ldr	r3, [r7, #4]
 800afe4:	68fa      	ldr	r2, [r7, #12]
 800afe6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	685a      	ldr	r2, [r3, #4]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	693a      	ldr	r2, [r7, #16]
 800aff4:	621a      	str	r2, [r3, #32]
}
 800aff6:	bf00      	nop
 800aff8:	371c      	adds	r7, #28
 800affa:	46bd      	mov	sp, r7
 800affc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b000:	4770      	bx	lr
 800b002:	bf00      	nop
 800b004:	40010000 	.word	0x40010000

0800b008 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b008:	b480      	push	{r7}
 800b00a:	b087      	sub	sp, #28
 800b00c:	af00      	add	r7, sp, #0
 800b00e:	60f8      	str	r0, [r7, #12]
 800b010:	60b9      	str	r1, [r7, #8]
 800b012:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	6a1b      	ldr	r3, [r3, #32]
 800b018:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	f023 0201 	bic.w	r2, r3, #1
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	699b      	ldr	r3, [r3, #24]
 800b02a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b02c:	693b      	ldr	r3, [r7, #16]
 800b02e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b032:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	011b      	lsls	r3, r3, #4
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	f023 030a 	bic.w	r3, r3, #10
 800b044:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b046:	697a      	ldr	r2, [r7, #20]
 800b048:	68bb      	ldr	r3, [r7, #8]
 800b04a:	4313      	orrs	r3, r2
 800b04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	693a      	ldr	r2, [r7, #16]
 800b052:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	697a      	ldr	r2, [r7, #20]
 800b058:	621a      	str	r2, [r3, #32]
}
 800b05a:	bf00      	nop
 800b05c:	371c      	adds	r7, #28
 800b05e:	46bd      	mov	sp, r7
 800b060:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b064:	4770      	bx	lr

0800b066 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b066:	b480      	push	{r7}
 800b068:	b087      	sub	sp, #28
 800b06a:	af00      	add	r7, sp, #0
 800b06c:	60f8      	str	r0, [r7, #12]
 800b06e:	60b9      	str	r1, [r7, #8]
 800b070:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	6a1b      	ldr	r3, [r3, #32]
 800b076:	f023 0210 	bic.w	r2, r3, #16
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b07e:	68fb      	ldr	r3, [r7, #12]
 800b080:	699b      	ldr	r3, [r3, #24]
 800b082:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	6a1b      	ldr	r3, [r3, #32]
 800b088:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b08a:	697b      	ldr	r3, [r7, #20]
 800b08c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b090:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	031b      	lsls	r3, r3, #12
 800b096:	697a      	ldr	r2, [r7, #20]
 800b098:	4313      	orrs	r3, r2
 800b09a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b09c:	693b      	ldr	r3, [r7, #16]
 800b09e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b0a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b0a4:	68bb      	ldr	r3, [r7, #8]
 800b0a6:	011b      	lsls	r3, r3, #4
 800b0a8:	693a      	ldr	r2, [r7, #16]
 800b0aa:	4313      	orrs	r3, r2
 800b0ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b0ae:	68fb      	ldr	r3, [r7, #12]
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	693a      	ldr	r2, [r7, #16]
 800b0b8:	621a      	str	r2, [r3, #32]
}
 800b0ba:	bf00      	nop
 800b0bc:	371c      	adds	r7, #28
 800b0be:	46bd      	mov	sp, r7
 800b0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c4:	4770      	bx	lr

0800b0c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0c6:	b480      	push	{r7}
 800b0c8:	b085      	sub	sp, #20
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	689b      	ldr	r3, [r3, #8]
 800b0d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0dc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0de:	683a      	ldr	r2, [r7, #0]
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	4313      	orrs	r3, r2
 800b0e4:	f043 0307 	orr.w	r3, r3, #7
 800b0e8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	68fa      	ldr	r2, [r7, #12]
 800b0ee:	609a      	str	r2, [r3, #8]
}
 800b0f0:	bf00      	nop
 800b0f2:	3714      	adds	r7, #20
 800b0f4:	46bd      	mov	sp, r7
 800b0f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fa:	4770      	bx	lr

0800b0fc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0fc:	b480      	push	{r7}
 800b0fe:	b087      	sub	sp, #28
 800b100:	af00      	add	r7, sp, #0
 800b102:	60f8      	str	r0, [r7, #12]
 800b104:	60b9      	str	r1, [r7, #8]
 800b106:	607a      	str	r2, [r7, #4]
 800b108:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	689b      	ldr	r3, [r3, #8]
 800b10e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b110:	697b      	ldr	r3, [r7, #20]
 800b112:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b116:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b118:	683b      	ldr	r3, [r7, #0]
 800b11a:	021a      	lsls	r2, r3, #8
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	431a      	orrs	r2, r3
 800b120:	68bb      	ldr	r3, [r7, #8]
 800b122:	4313      	orrs	r3, r2
 800b124:	697a      	ldr	r2, [r7, #20]
 800b126:	4313      	orrs	r3, r2
 800b128:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	697a      	ldr	r2, [r7, #20]
 800b12e:	609a      	str	r2, [r3, #8]
}
 800b130:	bf00      	nop
 800b132:	371c      	adds	r7, #28
 800b134:	46bd      	mov	sp, r7
 800b136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13a:	4770      	bx	lr

0800b13c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800b13c:	b480      	push	{r7}
 800b13e:	b087      	sub	sp, #28
 800b140:	af00      	add	r7, sp, #0
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800b148:	68bb      	ldr	r3, [r7, #8]
 800b14a:	f003 031f 	and.w	r3, r3, #31
 800b14e:	2201      	movs	r2, #1
 800b150:	fa02 f303 	lsl.w	r3, r2, r3
 800b154:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	6a1a      	ldr	r2, [r3, #32]
 800b15a:	697b      	ldr	r3, [r7, #20]
 800b15c:	43db      	mvns	r3, r3
 800b15e:	401a      	ands	r2, r3
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	6a1a      	ldr	r2, [r3, #32]
 800b168:	68bb      	ldr	r3, [r7, #8]
 800b16a:	f003 031f 	and.w	r3, r3, #31
 800b16e:	6879      	ldr	r1, [r7, #4]
 800b170:	fa01 f303 	lsl.w	r3, r1, r3
 800b174:	431a      	orrs	r2, r3
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	621a      	str	r2, [r3, #32]
}
 800b17a:	bf00      	nop
 800b17c:	371c      	adds	r7, #28
 800b17e:	46bd      	mov	sp, r7
 800b180:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b184:	4770      	bx	lr
	...

0800b188 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800b188:	b480      	push	{r7}
 800b18a:	b083      	sub	sp, #12
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	4a1c      	ldr	r2, [pc, #112]	; (800b204 <TIM_ResetCallback+0x7c>)
 800b194:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	4a1b      	ldr	r2, [pc, #108]	; (800b208 <TIM_ResetCallback+0x80>)
 800b19c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	4a1a      	ldr	r2, [pc, #104]	; (800b20c <TIM_ResetCallback+0x84>)
 800b1a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	4a19      	ldr	r2, [pc, #100]	; (800b210 <TIM_ResetCallback+0x88>)
 800b1ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	4a18      	ldr	r2, [pc, #96]	; (800b214 <TIM_ResetCallback+0x8c>)
 800b1b4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800b1b8:	687b      	ldr	r3, [r7, #4]
 800b1ba:	4a17      	ldr	r2, [pc, #92]	; (800b218 <TIM_ResetCallback+0x90>)
 800b1bc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	4a16      	ldr	r2, [pc, #88]	; (800b21c <TIM_ResetCallback+0x94>)
 800b1c4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	4a15      	ldr	r2, [pc, #84]	; (800b220 <TIM_ResetCallback+0x98>)
 800b1cc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	4a14      	ldr	r2, [pc, #80]	; (800b224 <TIM_ResetCallback+0x9c>)
 800b1d4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	4a13      	ldr	r2, [pc, #76]	; (800b228 <TIM_ResetCallback+0xa0>)
 800b1dc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	4a12      	ldr	r2, [pc, #72]	; (800b22c <TIM_ResetCallback+0xa4>)
 800b1e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800b1e8:	687b      	ldr	r3, [r7, #4]
 800b1ea:	4a11      	ldr	r2, [pc, #68]	; (800b230 <TIM_ResetCallback+0xa8>)
 800b1ec:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	4a10      	ldr	r2, [pc, #64]	; (800b234 <TIM_ResetCallback+0xac>)
 800b1f4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr
 800b204:	080040f1 	.word	0x080040f1
 800b208:	0800a8a7 	.word	0x0800a8a7
 800b20c:	0800a91f 	.word	0x0800a91f
 800b210:	0800a933 	.word	0x0800a933
 800b214:	0800a8cf 	.word	0x0800a8cf
 800b218:	0800a8e3 	.word	0x0800a8e3
 800b21c:	0800a8bb 	.word	0x0800a8bb
 800b220:	0800a8f7 	.word	0x0800a8f7
 800b224:	0800a90b 	.word	0x0800a90b
 800b228:	0800a947 	.word	0x0800a947
 800b22c:	0800b3b9 	.word	0x0800b3b9
 800b230:	0800b3cd 	.word	0x0800b3cd
 800b234:	0800b3e1 	.word	0x0800b3e1

0800b238 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b238:	b480      	push	{r7}
 800b23a:	b085      	sub	sp, #20
 800b23c:	af00      	add	r7, sp, #0
 800b23e:	6078      	str	r0, [r7, #4]
 800b240:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b248:	2b01      	cmp	r3, #1
 800b24a:	d101      	bne.n	800b250 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b24c:	2302      	movs	r3, #2
 800b24e:	e050      	b.n	800b2f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2201      	movs	r2, #1
 800b254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	2202      	movs	r2, #2
 800b25c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b276:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b278:	683b      	ldr	r3, [r7, #0]
 800b27a:	681b      	ldr	r3, [r3, #0]
 800b27c:	68fa      	ldr	r2, [r7, #12]
 800b27e:	4313      	orrs	r3, r2
 800b280:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b282:	687b      	ldr	r3, [r7, #4]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	68fa      	ldr	r2, [r7, #12]
 800b288:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	4a1c      	ldr	r2, [pc, #112]	; (800b300 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b290:	4293      	cmp	r3, r2
 800b292:	d018      	beq.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b29c:	d013      	beq.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	4a18      	ldr	r2, [pc, #96]	; (800b304 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800b2a4:	4293      	cmp	r3, r2
 800b2a6:	d00e      	beq.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	4a16      	ldr	r2, [pc, #88]	; (800b308 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	d009      	beq.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	681b      	ldr	r3, [r3, #0]
 800b2b6:	4a15      	ldr	r2, [pc, #84]	; (800b30c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800b2b8:	4293      	cmp	r3, r2
 800b2ba:	d004      	beq.n	800b2c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	4a13      	ldr	r2, [pc, #76]	; (800b310 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d10c      	bne.n	800b2e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b2cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b2ce:	683b      	ldr	r3, [r7, #0]
 800b2d0:	685b      	ldr	r3, [r3, #4]
 800b2d2:	68ba      	ldr	r2, [r7, #8]
 800b2d4:	4313      	orrs	r3, r2
 800b2d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	68ba      	ldr	r2, [r7, #8]
 800b2de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2201      	movs	r2, #1
 800b2e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	2200      	movs	r2, #0
 800b2ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b2f0:	2300      	movs	r3, #0
}
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	3714      	adds	r7, #20
 800b2f6:	46bd      	mov	sp, r7
 800b2f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2fc:	4770      	bx	lr
 800b2fe:	bf00      	nop
 800b300:	40010000 	.word	0x40010000
 800b304:	40000400 	.word	0x40000400
 800b308:	40000800 	.word	0x40000800
 800b30c:	40000c00 	.word	0x40000c00
 800b310:	40014000 	.word	0x40014000

0800b314 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b314:	b480      	push	{r7}
 800b316:	b085      	sub	sp, #20
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b31e:	2300      	movs	r3, #0
 800b320:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b328:	2b01      	cmp	r3, #1
 800b32a:	d101      	bne.n	800b330 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b32c:	2302      	movs	r3, #2
 800b32e:	e03d      	b.n	800b3ac <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800b330:	687b      	ldr	r3, [r7, #4]
 800b332:	2201      	movs	r2, #1
 800b334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b33e:	683b      	ldr	r3, [r7, #0]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	4313      	orrs	r3, r2
 800b344:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b34c:	683b      	ldr	r3, [r7, #0]
 800b34e:	689b      	ldr	r3, [r3, #8]
 800b350:	4313      	orrs	r3, r2
 800b352:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	685b      	ldr	r3, [r3, #4]
 800b35e:	4313      	orrs	r3, r2
 800b360:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b368:	683b      	ldr	r3, [r7, #0]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4313      	orrs	r3, r2
 800b36e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b370:	68fb      	ldr	r3, [r7, #12]
 800b372:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b376:	683b      	ldr	r3, [r7, #0]
 800b378:	691b      	ldr	r3, [r3, #16]
 800b37a:	4313      	orrs	r3, r2
 800b37c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	695b      	ldr	r3, [r3, #20]
 800b388:	4313      	orrs	r3, r2
 800b38a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b392:	683b      	ldr	r3, [r7, #0]
 800b394:	69db      	ldr	r3, [r3, #28]
 800b396:	4313      	orrs	r3, r2
 800b398:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	68fa      	ldr	r2, [r7, #12]
 800b3a0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b3aa:	2300      	movs	r3, #0
}
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	3714      	adds	r7, #20
 800b3b0:	46bd      	mov	sp, r7
 800b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b6:	4770      	bx	lr

0800b3b8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b3c0:	bf00      	nop
 800b3c2:	370c      	adds	r7, #12
 800b3c4:	46bd      	mov	sp, r7
 800b3c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ca:	4770      	bx	lr

0800b3cc <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800b3cc:	b480      	push	{r7}
 800b3ce:	b083      	sub	sp, #12
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800b3d4:	bf00      	nop
 800b3d6:	370c      	adds	r7, #12
 800b3d8:	46bd      	mov	sp, r7
 800b3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3de:	4770      	bx	lr

0800b3e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b3e0:	b480      	push	{r7}
 800b3e2:	b083      	sub	sp, #12
 800b3e4:	af00      	add	r7, sp, #0
 800b3e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b3e8:	bf00      	nop
 800b3ea:	370c      	adds	r7, #12
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3f2:	4770      	bx	lr

0800b3f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b082      	sub	sp, #8
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	2b00      	cmp	r3, #0
 800b400:	d101      	bne.n	800b406 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b402:	2301      	movs	r3, #1
 800b404:	e04a      	b.n	800b49c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b40c:	b2db      	uxtb	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d111      	bne.n	800b436 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	2200      	movs	r2, #0
 800b416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f000 fd72 	bl	800bf04 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b424:	2b00      	cmp	r3, #0
 800b426:	d102      	bne.n	800b42e <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	4a1e      	ldr	r2, [pc, #120]	; (800b4a4 <HAL_UART_Init+0xb0>)
 800b42c:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b432:	6878      	ldr	r0, [r7, #4]
 800b434:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2224      	movs	r2, #36	; 0x24
 800b43a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	68da      	ldr	r2, [r3, #12]
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b44c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b44e:	6878      	ldr	r0, [r7, #4]
 800b450:	f001 f83c 	bl	800c4cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691a      	ldr	r2, [r3, #16]
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b462:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	695a      	ldr	r2, [r3, #20]
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b472:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	68da      	ldr	r2, [r3, #12]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b482:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2200      	movs	r2, #0
 800b488:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2220      	movs	r2, #32
 800b48e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	2220      	movs	r2, #32
 800b496:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b49a:	2300      	movs	r3, #0
}
 800b49c:	4618      	mov	r0, r3
 800b49e:	3708      	adds	r7, #8
 800b4a0:	46bd      	mov	sp, r7
 800b4a2:	bd80      	pop	{r7, pc}
 800b4a4:	08005019 	.word	0x08005019

0800b4a8 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	b087      	sub	sp, #28
 800b4ac:	af00      	add	r7, sp, #0
 800b4ae:	60f8      	str	r0, [r7, #12]
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	607a      	str	r2, [r7, #4]
 800b4b4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b4b6:	2300      	movs	r3, #0
 800b4b8:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d107      	bne.n	800b4d0 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b4c4:	f043 0220 	orr.w	r2, r3, #32
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	e08c      	b.n	800b5ea <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d6:	2b01      	cmp	r3, #1
 800b4d8:	d101      	bne.n	800b4de <HAL_UART_RegisterCallback+0x36>
 800b4da:	2302      	movs	r3, #2
 800b4dc:	e085      	b.n	800b5ea <HAL_UART_RegisterCallback+0x142>
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	2201      	movs	r2, #1
 800b4e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4ec:	b2db      	uxtb	r3, r3
 800b4ee:	2b20      	cmp	r3, #32
 800b4f0:	d151      	bne.n	800b596 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b4f2:	7afb      	ldrb	r3, [r7, #11]
 800b4f4:	2b0c      	cmp	r3, #12
 800b4f6:	d845      	bhi.n	800b584 <HAL_UART_RegisterCallback+0xdc>
 800b4f8:	a201      	add	r2, pc, #4	; (adr r2, 800b500 <HAL_UART_RegisterCallback+0x58>)
 800b4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4fe:	bf00      	nop
 800b500:	0800b535 	.word	0x0800b535
 800b504:	0800b53d 	.word	0x0800b53d
 800b508:	0800b545 	.word	0x0800b545
 800b50c:	0800b54d 	.word	0x0800b54d
 800b510:	0800b555 	.word	0x0800b555
 800b514:	0800b55d 	.word	0x0800b55d
 800b518:	0800b565 	.word	0x0800b565
 800b51c:	0800b56d 	.word	0x0800b56d
 800b520:	0800b585 	.word	0x0800b585
 800b524:	0800b585 	.word	0x0800b585
 800b528:	0800b585 	.word	0x0800b585
 800b52c:	0800b575 	.word	0x0800b575
 800b530:	0800b57d 	.word	0x0800b57d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	687a      	ldr	r2, [r7, #4]
 800b538:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b53a:	e051      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b53c:	68fb      	ldr	r3, [r7, #12]
 800b53e:	687a      	ldr	r2, [r7, #4]
 800b540:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b542:	e04d      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	687a      	ldr	r2, [r7, #4]
 800b548:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b54a:	e049      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	687a      	ldr	r2, [r7, #4]
 800b550:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b552:	e045      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	687a      	ldr	r2, [r7, #4]
 800b558:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b55a:	e041      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	687a      	ldr	r2, [r7, #4]
 800b560:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b562:	e03d      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	687a      	ldr	r2, [r7, #4]
 800b568:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b56a:	e039      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	687a      	ldr	r2, [r7, #4]
 800b570:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b572:	e035      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b574:	68fb      	ldr	r3, [r7, #12]
 800b576:	687a      	ldr	r2, [r7, #4]
 800b578:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b57a:	e031      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	687a      	ldr	r2, [r7, #4]
 800b580:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b582:	e02d      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b588:	f043 0220 	orr.w	r2, r3, #32
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b590:	2301      	movs	r3, #1
 800b592:	75fb      	strb	r3, [r7, #23]
        break;
 800b594:	e024      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b59c:	b2db      	uxtb	r3, r3
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d116      	bne.n	800b5d0 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b5a2:	7afb      	ldrb	r3, [r7, #11]
 800b5a4:	2b0b      	cmp	r3, #11
 800b5a6:	d002      	beq.n	800b5ae <HAL_UART_RegisterCallback+0x106>
 800b5a8:	2b0c      	cmp	r3, #12
 800b5aa:	d004      	beq.n	800b5b6 <HAL_UART_RegisterCallback+0x10e>
 800b5ac:	e007      	b.n	800b5be <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	687a      	ldr	r2, [r7, #4]
 800b5b2:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b5b4:	e014      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	687a      	ldr	r2, [r7, #4]
 800b5ba:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b5bc:	e010      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5c2:	f043 0220 	orr.w	r2, r3, #32
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	75fb      	strb	r3, [r7, #23]
        break;
 800b5ce:	e007      	b.n	800b5e0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d4:	f043 0220 	orr.w	r2, r3, #32
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b5dc:	2301      	movs	r3, #1
 800b5de:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b5e8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	371c      	adds	r7, #28
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f4:	4770      	bx	lr
 800b5f6:	bf00      	nop

0800b5f8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b5f8:	b480      	push	{r7}
 800b5fa:	b085      	sub	sp, #20
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	60f8      	str	r0, [r7, #12]
 800b600:	60b9      	str	r1, [r7, #8]
 800b602:	4613      	mov	r3, r2
 800b604:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b606:	68fb      	ldr	r3, [r7, #12]
 800b608:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b60c:	b2db      	uxtb	r3, r3
 800b60e:	2b20      	cmp	r3, #32
 800b610:	d130      	bne.n	800b674 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b612:	68bb      	ldr	r3, [r7, #8]
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <HAL_UART_Transmit_IT+0x26>
 800b618:	88fb      	ldrh	r3, [r7, #6]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d101      	bne.n	800b622 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
 800b620:	e029      	b.n	800b676 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d101      	bne.n	800b630 <HAL_UART_Transmit_IT+0x38>
 800b62c:	2302      	movs	r3, #2
 800b62e:	e022      	b.n	800b676 <HAL_UART_Transmit_IT+0x7e>
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	2201      	movs	r2, #1
 800b634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	68ba      	ldr	r2, [r7, #8]
 800b63c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b63e:	68fb      	ldr	r3, [r7, #12]
 800b640:	88fa      	ldrh	r2, [r7, #6]
 800b642:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b644:	68fb      	ldr	r3, [r7, #12]
 800b646:	88fa      	ldrh	r2, [r7, #6]
 800b648:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	2200      	movs	r2, #0
 800b64e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	2221      	movs	r2, #33	; 0x21
 800b654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	2200      	movs	r2, #0
 800b65c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	68da      	ldr	r2, [r3, #12]
 800b666:	68fb      	ldr	r3, [r7, #12]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b66e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b670:	2300      	movs	r3, #0
 800b672:	e000      	b.n	800b676 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b674:	2302      	movs	r3, #2
  }
}
 800b676:	4618      	mov	r0, r3
 800b678:	3714      	adds	r7, #20
 800b67a:	46bd      	mov	sp, r7
 800b67c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b680:	4770      	bx	lr

0800b682 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b682:	b580      	push	{r7, lr}
 800b684:	b084      	sub	sp, #16
 800b686:	af00      	add	r7, sp, #0
 800b688:	60f8      	str	r0, [r7, #12]
 800b68a:	60b9      	str	r1, [r7, #8]
 800b68c:	4613      	mov	r3, r2
 800b68e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b690:	68fb      	ldr	r3, [r7, #12]
 800b692:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b696:	b2db      	uxtb	r3, r3
 800b698:	2b20      	cmp	r3, #32
 800b69a:	d11d      	bne.n	800b6d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b69c:	68bb      	ldr	r3, [r7, #8]
 800b69e:	2b00      	cmp	r3, #0
 800b6a0:	d002      	beq.n	800b6a8 <HAL_UART_Receive_IT+0x26>
 800b6a2:	88fb      	ldrh	r3, [r7, #6]
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d101      	bne.n	800b6ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b6a8:	2301      	movs	r3, #1
 800b6aa:	e016      	b.n	800b6da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b6ac:	68fb      	ldr	r3, [r7, #12]
 800b6ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b6b2:	2b01      	cmp	r3, #1
 800b6b4:	d101      	bne.n	800b6ba <HAL_UART_Receive_IT+0x38>
 800b6b6:	2302      	movs	r3, #2
 800b6b8:	e00f      	b.n	800b6da <HAL_UART_Receive_IT+0x58>
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2201      	movs	r2, #1
 800b6be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2200      	movs	r2, #0
 800b6c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b6c8:	88fb      	ldrh	r3, [r7, #6]
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	68b9      	ldr	r1, [r7, #8]
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f000 fcf8 	bl	800c0c4 <UART_Start_Receive_IT>
 800b6d4:	4603      	mov	r3, r0
 800b6d6:	e000      	b.n	800b6da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b6d8:	2302      	movs	r3, #2
  }
}
 800b6da:	4618      	mov	r0, r3
 800b6dc:	3710      	adds	r7, #16
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
	...

0800b6e4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b08c      	sub	sp, #48	; 0x30
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	60f8      	str	r0, [r7, #12]
 800b6ec:	60b9      	str	r1, [r7, #8]
 800b6ee:	4613      	mov	r3, r2
 800b6f0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b6f8:	b2db      	uxtb	r3, r3
 800b6fa:	2b20      	cmp	r3, #32
 800b6fc:	d165      	bne.n	800b7ca <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	2b00      	cmp	r3, #0
 800b702:	d002      	beq.n	800b70a <HAL_UART_Transmit_DMA+0x26>
 800b704:	88fb      	ldrh	r3, [r7, #6]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d101      	bne.n	800b70e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b70a:	2301      	movs	r3, #1
 800b70c:	e05e      	b.n	800b7cc <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b714:	2b01      	cmp	r3, #1
 800b716:	d101      	bne.n	800b71c <HAL_UART_Transmit_DMA+0x38>
 800b718:	2302      	movs	r3, #2
 800b71a:	e057      	b.n	800b7cc <HAL_UART_Transmit_DMA+0xe8>
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2201      	movs	r2, #1
 800b720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	88fa      	ldrh	r2, [r7, #6]
 800b72e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b730:	68fb      	ldr	r3, [r7, #12]
 800b732:	88fa      	ldrh	r2, [r7, #6]
 800b734:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	2200      	movs	r2, #0
 800b73a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	2221      	movs	r2, #33	; 0x21
 800b740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b748:	4a22      	ldr	r2, [pc, #136]	; (800b7d4 <HAL_UART_Transmit_DMA+0xf0>)
 800b74a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b750:	4a21      	ldr	r2, [pc, #132]	; (800b7d8 <HAL_UART_Transmit_DMA+0xf4>)
 800b752:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b754:	68fb      	ldr	r3, [r7, #12]
 800b756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b758:	4a20      	ldr	r2, [pc, #128]	; (800b7dc <HAL_UART_Transmit_DMA+0xf8>)
 800b75a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b760:	2200      	movs	r2, #0
 800b762:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b764:	f107 0308 	add.w	r3, r7, #8
 800b768:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b76e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b770:	6819      	ldr	r1, [r3, #0]
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	3304      	adds	r3, #4
 800b778:	461a      	mov	r2, r3
 800b77a:	88fb      	ldrh	r3, [r7, #6]
 800b77c:	f7fa fd14 	bl	80061a8 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b780:	68fb      	ldr	r3, [r7, #12]
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b788:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	2200      	movs	r2, #0
 800b78e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3314      	adds	r3, #20
 800b798:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b79a:	69bb      	ldr	r3, [r7, #24]
 800b79c:	e853 3f00 	ldrex	r3, [r3]
 800b7a0:	617b      	str	r3, [r7, #20]
   return(result);
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b7a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	3314      	adds	r3, #20
 800b7b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7b2:	627a      	str	r2, [r7, #36]	; 0x24
 800b7b4:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7b6:	6a39      	ldr	r1, [r7, #32]
 800b7b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7ba:	e841 2300 	strex	r3, r2, [r1]
 800b7be:	61fb      	str	r3, [r7, #28]
   return(result);
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	2b00      	cmp	r3, #0
 800b7c4:	d1e5      	bne.n	800b792 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	e000      	b.n	800b7cc <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b7ca:	2302      	movs	r3, #2
  }
}
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	3730      	adds	r7, #48	; 0x30
 800b7d0:	46bd      	mov	sp, r7
 800b7d2:	bd80      	pop	{r7, pc}
 800b7d4:	0800bf75 	.word	0x0800bf75
 800b7d8:	0800c011 	.word	0x0800c011
 800b7dc:	0800c02f 	.word	0x0800c02f

0800b7e0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b7e0:	b580      	push	{r7, lr}
 800b7e2:	b09a      	sub	sp, #104	; 0x68
 800b7e4:	af00      	add	r7, sp, #0
 800b7e6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	330c      	adds	r3, #12
 800b7ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b7f2:	e853 3f00 	ldrex	r3, [r3]
 800b7f6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b7f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b7fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b7fe:	667b      	str	r3, [r7, #100]	; 0x64
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	681b      	ldr	r3, [r3, #0]
 800b804:	330c      	adds	r3, #12
 800b806:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b808:	657a      	str	r2, [r7, #84]	; 0x54
 800b80a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b80c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b80e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b810:	e841 2300 	strex	r3, r2, [r1]
 800b814:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d1e5      	bne.n	800b7e8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3314      	adds	r3, #20
 800b822:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b824:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b826:	e853 3f00 	ldrex	r3, [r3]
 800b82a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b82c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	663b      	str	r3, [r7, #96]	; 0x60
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	3314      	adds	r3, #20
 800b83a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b83c:	643a      	str	r2, [r7, #64]	; 0x40
 800b83e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b840:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b842:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b844:	e841 2300 	strex	r3, r2, [r1]
 800b848:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b84a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d1e5      	bne.n	800b81c <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b854:	2b01      	cmp	r3, #1
 800b856:	d119      	bne.n	800b88c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	330c      	adds	r3, #12
 800b85e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b860:	6a3b      	ldr	r3, [r7, #32]
 800b862:	e853 3f00 	ldrex	r3, [r3]
 800b866:	61fb      	str	r3, [r7, #28]
   return(result);
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	f023 0310 	bic.w	r3, r3, #16
 800b86e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	681b      	ldr	r3, [r3, #0]
 800b874:	330c      	adds	r3, #12
 800b876:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b878:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b87a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b87c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b87e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b880:	e841 2300 	strex	r3, r2, [r1]
 800b884:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d1e5      	bne.n	800b858 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	695b      	ldr	r3, [r3, #20]
 800b892:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b896:	2b40      	cmp	r3, #64	; 0x40
 800b898:	d136      	bne.n	800b908 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	3314      	adds	r3, #20
 800b8a0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	e853 3f00 	ldrex	r3, [r3]
 800b8a8:	60bb      	str	r3, [r7, #8]
   return(result);
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b8b0:	65bb      	str	r3, [r7, #88]	; 0x58
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	3314      	adds	r3, #20
 800b8b8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b8ba:	61ba      	str	r2, [r7, #24]
 800b8bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8be:	6979      	ldr	r1, [r7, #20]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	e841 2300 	strex	r3, r2, [r1]
 800b8c6:	613b      	str	r3, [r7, #16]
   return(result);
 800b8c8:	693b      	ldr	r3, [r7, #16]
 800b8ca:	2b00      	cmp	r3, #0
 800b8cc:	d1e5      	bne.n	800b89a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d2:	2b00      	cmp	r3, #0
 800b8d4:	d018      	beq.n	800b908 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8da:	2200      	movs	r2, #0
 800b8dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8e2:	4618      	mov	r0, r3
 800b8e4:	f7fa fcb8 	bl	8006258 <HAL_DMA_Abort>
 800b8e8:	4603      	mov	r3, r0
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d00c      	beq.n	800b908 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7fa feda 	bl	80066ac <HAL_DMA_GetError>
 800b8f8:	4603      	mov	r3, r0
 800b8fa:	2b20      	cmp	r3, #32
 800b8fc:	d104      	bne.n	800b908 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	2210      	movs	r2, #16
 800b902:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b904:	2303      	movs	r3, #3
 800b906:	e00a      	b.n	800b91e <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	2200      	movs	r2, #0
 800b90c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2220      	movs	r2, #32
 800b912:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	2200      	movs	r2, #0
 800b91a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b91c:	2300      	movs	r3, #0
}
 800b91e:	4618      	mov	r0, r3
 800b920:	3768      	adds	r7, #104	; 0x68
 800b922:	46bd      	mov	sp, r7
 800b924:	bd80      	pop	{r7, pc}
	...

0800b928 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b928:	b580      	push	{r7, lr}
 800b92a:	b0ba      	sub	sp, #232	; 0xe8
 800b92c:	af00      	add	r7, sp, #0
 800b92e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	681b      	ldr	r3, [r3, #0]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	68db      	ldr	r3, [r3, #12]
 800b940:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	695b      	ldr	r3, [r3, #20]
 800b94a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b94e:	2300      	movs	r3, #0
 800b950:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b954:	2300      	movs	r3, #0
 800b956:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b95a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b95e:	f003 030f 	and.w	r3, r3, #15
 800b962:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b96a:	2b00      	cmp	r3, #0
 800b96c:	d10f      	bne.n	800b98e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b96e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b972:	f003 0320 	and.w	r3, r3, #32
 800b976:	2b00      	cmp	r3, #0
 800b978:	d009      	beq.n	800b98e <HAL_UART_IRQHandler+0x66>
 800b97a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b97e:	f003 0320 	and.w	r3, r3, #32
 800b982:	2b00      	cmp	r3, #0
 800b984:	d003      	beq.n	800b98e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b986:	6878      	ldr	r0, [r7, #4]
 800b988:	f000 fce3 	bl	800c352 <UART_Receive_IT>
      return;
 800b98c:	e25b      	b.n	800be46 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b98e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b992:	2b00      	cmp	r3, #0
 800b994:	f000 80e1 	beq.w	800bb5a <HAL_UART_IRQHandler+0x232>
 800b998:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b99c:	f003 0301 	and.w	r3, r3, #1
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d106      	bne.n	800b9b2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b9a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	f000 80d4 	beq.w	800bb5a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b9b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9b6:	f003 0301 	and.w	r3, r3, #1
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d00b      	beq.n	800b9d6 <HAL_UART_IRQHandler+0xae>
 800b9be:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d005      	beq.n	800b9d6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9ce:	f043 0201 	orr.w	r2, r3, #1
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9da:	f003 0304 	and.w	r3, r3, #4
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d00b      	beq.n	800b9fa <HAL_UART_IRQHandler+0xd2>
 800b9e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9e6:	f003 0301 	and.w	r3, r3, #1
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d005      	beq.n	800b9fa <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b9f2:	f043 0202 	orr.w	r2, r3, #2
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b9fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9fe:	f003 0302 	and.w	r3, r3, #2
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d00b      	beq.n	800ba1e <HAL_UART_IRQHandler+0xf6>
 800ba06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba0a:	f003 0301 	and.w	r3, r3, #1
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d005      	beq.n	800ba1e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba16:	f043 0204 	orr.w	r2, r3, #4
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800ba1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba22:	f003 0308 	and.w	r3, r3, #8
 800ba26:	2b00      	cmp	r3, #0
 800ba28:	d011      	beq.n	800ba4e <HAL_UART_IRQHandler+0x126>
 800ba2a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba2e:	f003 0320 	and.w	r3, r3, #32
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d105      	bne.n	800ba42 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800ba36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ba3a:	f003 0301 	and.w	r3, r3, #1
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d005      	beq.n	800ba4e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba46:	f043 0208 	orr.w	r2, r3, #8
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba52:	2b00      	cmp	r3, #0
 800ba54:	f000 81f2 	beq.w	800be3c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800ba58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba5c:	f003 0320 	and.w	r3, r3, #32
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d008      	beq.n	800ba76 <HAL_UART_IRQHandler+0x14e>
 800ba64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ba68:	f003 0320 	and.w	r3, r3, #32
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d002      	beq.n	800ba76 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800ba70:	6878      	ldr	r0, [r7, #4]
 800ba72:	f000 fc6e 	bl	800c352 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	695b      	ldr	r3, [r3, #20]
 800ba7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ba80:	2b40      	cmp	r3, #64	; 0x40
 800ba82:	bf0c      	ite	eq
 800ba84:	2301      	moveq	r3, #1
 800ba86:	2300      	movne	r3, #0
 800ba88:	b2db      	uxtb	r3, r3
 800ba8a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ba92:	f003 0308 	and.w	r3, r3, #8
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d103      	bne.n	800baa2 <HAL_UART_IRQHandler+0x17a>
 800ba9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d051      	beq.n	800bb46 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800baa2:	6878      	ldr	r0, [r7, #4]
 800baa4:	f000 fb74 	bl	800c190 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bab2:	2b40      	cmp	r3, #64	; 0x40
 800bab4:	d142      	bne.n	800bb3c <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	681b      	ldr	r3, [r3, #0]
 800baba:	3314      	adds	r3, #20
 800babc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bac0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800bac4:	e853 3f00 	ldrex	r3, [r3]
 800bac8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800bacc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800bad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bad4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	3314      	adds	r3, #20
 800bade:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bae2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800bae6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baea:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800baee:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800baf2:	e841 2300 	strex	r3, r2, [r1]
 800baf6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800bafa:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d1d9      	bne.n	800bab6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800bb02:	687b      	ldr	r3, [r7, #4]
 800bb04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb06:	2b00      	cmp	r3, #0
 800bb08:	d013      	beq.n	800bb32 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb0e:	4a7f      	ldr	r2, [pc, #508]	; (800bd0c <HAL_UART_IRQHandler+0x3e4>)
 800bb10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb16:	4618      	mov	r0, r3
 800bb18:	f7fa fc0e 	bl	8006338 <HAL_DMA_Abort_IT>
 800bb1c:	4603      	mov	r3, r0
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	d019      	beq.n	800bb56 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800bb2c:	4610      	mov	r0, r2
 800bb2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb30:	e011      	b.n	800bb56 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb36:	6878      	ldr	r0, [r7, #4]
 800bb38:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb3a:	e00c      	b.n	800bb56 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb44:	e007      	b.n	800bb56 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb4a:	6878      	ldr	r0, [r7, #4]
 800bb4c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	2200      	movs	r2, #0
 800bb52:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800bb54:	e172      	b.n	800be3c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb56:	bf00      	nop
    return;
 800bb58:	e170      	b.n	800be3c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bb5e:	2b01      	cmp	r3, #1
 800bb60:	f040 814c 	bne.w	800bdfc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800bb64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb68:	f003 0310 	and.w	r3, r3, #16
 800bb6c:	2b00      	cmp	r3, #0
 800bb6e:	f000 8145 	beq.w	800bdfc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800bb72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb76:	f003 0310 	and.w	r3, r3, #16
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	f000 813e 	beq.w	800bdfc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800bb80:	2300      	movs	r3, #0
 800bb82:	60bb      	str	r3, [r7, #8]
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	60bb      	str	r3, [r7, #8]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	60bb      	str	r3, [r7, #8]
 800bb94:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	681b      	ldr	r3, [r3, #0]
 800bb9a:	695b      	ldr	r3, [r3, #20]
 800bb9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bba0:	2b40      	cmp	r3, #64	; 0x40
 800bba2:	f040 80b5 	bne.w	800bd10 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	685b      	ldr	r3, [r3, #4]
 800bbae:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800bbb2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	f000 8142 	beq.w	800be40 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800bbc0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbc4:	429a      	cmp	r2, r3
 800bbc6:	f080 813b 	bcs.w	800be40 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800bbd0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bbd2:	687b      	ldr	r3, [r7, #4]
 800bbd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbd6:	69db      	ldr	r3, [r3, #28]
 800bbd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbdc:	f000 8088 	beq.w	800bcf0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bbe0:	687b      	ldr	r3, [r7, #4]
 800bbe2:	681b      	ldr	r3, [r3, #0]
 800bbe4:	330c      	adds	r3, #12
 800bbe6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800bbee:	e853 3f00 	ldrex	r3, [r3]
 800bbf2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800bbf6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800bbfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800bbfe:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	681b      	ldr	r3, [r3, #0]
 800bc06:	330c      	adds	r3, #12
 800bc08:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800bc0c:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800bc10:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc14:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800bc18:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800bc1c:	e841 2300 	strex	r3, r2, [r1]
 800bc20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800bc24:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800bc28:	2b00      	cmp	r3, #0
 800bc2a:	d1d9      	bne.n	800bbe0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	3314      	adds	r3, #20
 800bc32:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bc36:	e853 3f00 	ldrex	r3, [r3]
 800bc3a:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800bc3c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bc3e:	f023 0301 	bic.w	r3, r3, #1
 800bc42:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	3314      	adds	r3, #20
 800bc4c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800bc50:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800bc54:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc56:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800bc58:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800bc5c:	e841 2300 	strex	r3, r2, [r1]
 800bc60:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800bc62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d1e1      	bne.n	800bc2c <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bc70:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bc72:	e853 3f00 	ldrex	r3, [r3]
 800bc76:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bc78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bc7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc7e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	3314      	adds	r3, #20
 800bc88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800bc8c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800bc8e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bc90:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bc92:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bc94:	e841 2300 	strex	r3, r2, [r1]
 800bc98:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bc9a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	d1e3      	bne.n	800bc68 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	2220      	movs	r2, #32
 800bca4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	2200      	movs	r2, #0
 800bcac:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	330c      	adds	r3, #12
 800bcb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bcb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bcb8:	e853 3f00 	ldrex	r3, [r3]
 800bcbc:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bcbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bcc0:	f023 0310 	bic.w	r3, r3, #16
 800bcc4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	330c      	adds	r3, #12
 800bcce:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800bcd2:	65ba      	str	r2, [r7, #88]	; 0x58
 800bcd4:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bcd6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bcd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bcda:	e841 2300 	strex	r3, r2, [r1]
 800bcde:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bce0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d1e3      	bne.n	800bcae <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bcea:	4618      	mov	r0, r3
 800bcec:	f7fa fab4 	bl	8006258 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bcf4:	687a      	ldr	r2, [r7, #4]
 800bcf6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800bcf8:	687a      	ldr	r2, [r7, #4]
 800bcfa:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800bcfc:	b292      	uxth	r2, r2
 800bcfe:	1a8a      	subs	r2, r1, r2
 800bd00:	b292      	uxth	r2, r2
 800bd02:	4611      	mov	r1, r2
 800bd04:	6878      	ldr	r0, [r7, #4]
 800bd06:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bd08:	e09a      	b.n	800be40 <HAL_UART_IRQHandler+0x518>
 800bd0a:	bf00      	nop
 800bd0c:	0800c257 	.word	0x0800c257
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd18:	b29b      	uxth	r3, r3
 800bd1a:	1ad3      	subs	r3, r2, r3
 800bd1c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bd24:	b29b      	uxth	r3, r3
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	f000 808c 	beq.w	800be44 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800bd2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	f000 8087 	beq.w	800be44 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	330c      	adds	r3, #12
 800bd3c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd40:	e853 3f00 	ldrex	r3, [r3]
 800bd44:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bd46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd48:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd4c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	330c      	adds	r3, #12
 800bd56:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bd5a:	647a      	str	r2, [r7, #68]	; 0x44
 800bd5c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd5e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bd60:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bd62:	e841 2300 	strex	r3, r2, [r1]
 800bd66:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bd68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d1e3      	bne.n	800bd36 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	681b      	ldr	r3, [r3, #0]
 800bd72:	3314      	adds	r3, #20
 800bd74:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd78:	e853 3f00 	ldrex	r3, [r3]
 800bd7c:	623b      	str	r3, [r7, #32]
   return(result);
 800bd7e:	6a3b      	ldr	r3, [r7, #32]
 800bd80:	f023 0301 	bic.w	r3, r3, #1
 800bd84:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800bd88:	687b      	ldr	r3, [r7, #4]
 800bd8a:	681b      	ldr	r3, [r3, #0]
 800bd8c:	3314      	adds	r3, #20
 800bd8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bd92:	633a      	str	r2, [r7, #48]	; 0x30
 800bd94:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd96:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bd98:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bd9a:	e841 2300 	strex	r3, r2, [r1]
 800bd9e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bda0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d1e3      	bne.n	800bd6e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800bda6:	687b      	ldr	r3, [r7, #4]
 800bda8:	2220      	movs	r2, #32
 800bdaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bdae:	687b      	ldr	r3, [r7, #4]
 800bdb0:	2200      	movs	r2, #0
 800bdb2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	330c      	adds	r3, #12
 800bdba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdbc:	693b      	ldr	r3, [r7, #16]
 800bdbe:	e853 3f00 	ldrex	r3, [r3]
 800bdc2:	60fb      	str	r3, [r7, #12]
   return(result);
 800bdc4:	68fb      	ldr	r3, [r7, #12]
 800bdc6:	f023 0310 	bic.w	r3, r3, #16
 800bdca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	330c      	adds	r3, #12
 800bdd4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bdd8:	61fa      	str	r2, [r7, #28]
 800bdda:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bddc:	69b9      	ldr	r1, [r7, #24]
 800bdde:	69fa      	ldr	r2, [r7, #28]
 800bde0:	e841 2300 	strex	r3, r2, [r1]
 800bde4:	617b      	str	r3, [r7, #20]
   return(result);
 800bde6:	697b      	ldr	r3, [r7, #20]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d1e3      	bne.n	800bdb4 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800bdf0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800bdf4:	4611      	mov	r1, r2
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800bdfa:	e023      	b.n	800be44 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800bdfc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be04:	2b00      	cmp	r3, #0
 800be06:	d009      	beq.n	800be1c <HAL_UART_IRQHandler+0x4f4>
 800be08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800be10:	2b00      	cmp	r3, #0
 800be12:	d003      	beq.n	800be1c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800be14:	6878      	ldr	r0, [r7, #4]
 800be16:	f000 fa33 	bl	800c280 <UART_Transmit_IT>
    return;
 800be1a:	e014      	b.n	800be46 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800be1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800be20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be24:	2b00      	cmp	r3, #0
 800be26:	d00e      	beq.n	800be46 <HAL_UART_IRQHandler+0x51e>
 800be28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800be2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be30:	2b00      	cmp	r3, #0
 800be32:	d008      	beq.n	800be46 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800be34:	6878      	ldr	r0, [r7, #4]
 800be36:	f000 fa73 	bl	800c320 <UART_EndTransmit_IT>
    return;
 800be3a:	e004      	b.n	800be46 <HAL_UART_IRQHandler+0x51e>
    return;
 800be3c:	bf00      	nop
 800be3e:	e002      	b.n	800be46 <HAL_UART_IRQHandler+0x51e>
      return;
 800be40:	bf00      	nop
 800be42:	e000      	b.n	800be46 <HAL_UART_IRQHandler+0x51e>
      return;
 800be44:	bf00      	nop
  }
}
 800be46:	37e8      	adds	r7, #232	; 0xe8
 800be48:	46bd      	mov	sp, r7
 800be4a:	bd80      	pop	{r7, pc}

0800be4c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800be4c:	b480      	push	{r7}
 800be4e:	b083      	sub	sp, #12
 800be50:	af00      	add	r7, sp, #0
 800be52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800be54:	bf00      	nop
 800be56:	370c      	adds	r7, #12
 800be58:	46bd      	mov	sp, r7
 800be5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be5e:	4770      	bx	lr

0800be60 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be60:	b480      	push	{r7}
 800be62:	b083      	sub	sp, #12
 800be64:	af00      	add	r7, sp, #0
 800be66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800be68:	bf00      	nop
 800be6a:	370c      	adds	r7, #12
 800be6c:	46bd      	mov	sp, r7
 800be6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be72:	4770      	bx	lr

0800be74 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800be74:	b480      	push	{r7}
 800be76:	b083      	sub	sp, #12
 800be78:	af00      	add	r7, sp, #0
 800be7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800be7c:	bf00      	nop
 800be7e:	370c      	adds	r7, #12
 800be80:	46bd      	mov	sp, r7
 800be82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be86:	4770      	bx	lr

0800be88 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800be88:	b480      	push	{r7}
 800be8a:	b083      	sub	sp, #12
 800be8c:	af00      	add	r7, sp, #0
 800be8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800be90:	bf00      	nop
 800be92:	370c      	adds	r7, #12
 800be94:	46bd      	mov	sp, r7
 800be96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be9a:	4770      	bx	lr

0800be9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800be9c:	b480      	push	{r7}
 800be9e:	b083      	sub	sp, #12
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800bea4:	bf00      	nop
 800bea6:	370c      	adds	r7, #12
 800bea8:	46bd      	mov	sp, r7
 800beaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beae:	4770      	bx	lr

0800beb0 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800beb0:	b480      	push	{r7}
 800beb2:	b083      	sub	sp, #12
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800beb8:	bf00      	nop
 800beba:	370c      	adds	r7, #12
 800bebc:	46bd      	mov	sp, r7
 800bebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bec2:	4770      	bx	lr

0800bec4 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800bec4:	b480      	push	{r7}
 800bec6:	b083      	sub	sp, #12
 800bec8:	af00      	add	r7, sp, #0
 800beca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800becc:	bf00      	nop
 800bece:	370c      	adds	r7, #12
 800bed0:	46bd      	mov	sp, r7
 800bed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bed6:	4770      	bx	lr

0800bed8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800bed8:	b480      	push	{r7}
 800beda:	b083      	sub	sp, #12
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800bee0:	bf00      	nop
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800beec:	b480      	push	{r7}
 800beee:	b083      	sub	sp, #12
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]
 800bef4:	460b      	mov	r3, r1
 800bef6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bef8:	bf00      	nop
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	4a10      	ldr	r2, [pc, #64]	; (800bf50 <UART_InitCallbacksToDefault+0x4c>)
 800bf10:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	4a0f      	ldr	r2, [pc, #60]	; (800bf54 <UART_InitCallbacksToDefault+0x50>)
 800bf16:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	4a0f      	ldr	r2, [pc, #60]	; (800bf58 <UART_InitCallbacksToDefault+0x54>)
 800bf1c:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	4a0e      	ldr	r2, [pc, #56]	; (800bf5c <UART_InitCallbacksToDefault+0x58>)
 800bf22:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a0e      	ldr	r2, [pc, #56]	; (800bf60 <UART_InitCallbacksToDefault+0x5c>)
 800bf28:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a0d      	ldr	r2, [pc, #52]	; (800bf64 <UART_InitCallbacksToDefault+0x60>)
 800bf2e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	4a0d      	ldr	r2, [pc, #52]	; (800bf68 <UART_InitCallbacksToDefault+0x64>)
 800bf34:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	4a0c      	ldr	r2, [pc, #48]	; (800bf6c <UART_InitCallbacksToDefault+0x68>)
 800bf3a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	4a0c      	ldr	r2, [pc, #48]	; (800bf70 <UART_InitCallbacksToDefault+0x6c>)
 800bf40:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
 800bf4e:	bf00      	nop
 800bf50:	0800be61 	.word	0x0800be61
 800bf54:	0800be4d 	.word	0x0800be4d
 800bf58:	0800be89 	.word	0x0800be89
 800bf5c:	0800be75 	.word	0x0800be75
 800bf60:	0800be9d 	.word	0x0800be9d
 800bf64:	0800beb1 	.word	0x0800beb1
 800bf68:	0800bec5 	.word	0x0800bec5
 800bf6c:	0800bed9 	.word	0x0800bed9
 800bf70:	0800beed 	.word	0x0800beed

0800bf74 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bf74:	b580      	push	{r7, lr}
 800bf76:	b090      	sub	sp, #64	; 0x40
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf80:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d137      	bne.n	800c000 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bf90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf92:	2200      	movs	r2, #0
 800bf94:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	3314      	adds	r3, #20
 800bf9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa0:	e853 3f00 	ldrex	r3, [r3]
 800bfa4:	623b      	str	r3, [r7, #32]
   return(result);
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfac:	63bb      	str	r3, [r7, #56]	; 0x38
 800bfae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	3314      	adds	r3, #20
 800bfb4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bfb6:	633a      	str	r2, [r7, #48]	; 0x30
 800bfb8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bfbc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bfbe:	e841 2300 	strex	r3, r2, [r1]
 800bfc2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bfc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bfc6:	2b00      	cmp	r3, #0
 800bfc8:	d1e5      	bne.n	800bf96 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bfca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	330c      	adds	r3, #12
 800bfd0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfd2:	693b      	ldr	r3, [r7, #16]
 800bfd4:	e853 3f00 	ldrex	r3, [r3]
 800bfd8:	60fb      	str	r3, [r7, #12]
   return(result);
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfe0:	637b      	str	r3, [r7, #52]	; 0x34
 800bfe2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	330c      	adds	r3, #12
 800bfe8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bfea:	61fa      	str	r2, [r7, #28]
 800bfec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfee:	69b9      	ldr	r1, [r7, #24]
 800bff0:	69fa      	ldr	r2, [r7, #28]
 800bff2:	e841 2300 	strex	r3, r2, [r1]
 800bff6:	617b      	str	r3, [r7, #20]
   return(result);
 800bff8:	697b      	ldr	r3, [r7, #20]
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	d1e5      	bne.n	800bfca <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bffe:	e003      	b.n	800c008 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800c000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c002:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c004:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c006:	4798      	blx	r3
}
 800c008:	bf00      	nop
 800c00a:	3740      	adds	r7, #64	; 0x40
 800c00c:	46bd      	mov	sp, r7
 800c00e:	bd80      	pop	{r7, pc}

0800c010 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c01c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c022:	68f8      	ldr	r0, [r7, #12]
 800c024:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c026:	bf00      	nop
 800c028:	3710      	adds	r7, #16
 800c02a:	46bd      	mov	sp, r7
 800c02c:	bd80      	pop	{r7, pc}

0800c02e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c02e:	b580      	push	{r7, lr}
 800c030:	b084      	sub	sp, #16
 800c032:	af00      	add	r7, sp, #0
 800c034:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c036:	2300      	movs	r3, #0
 800c038:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c03e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	695b      	ldr	r3, [r3, #20]
 800c046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04a:	2b80      	cmp	r3, #128	; 0x80
 800c04c:	bf0c      	ite	eq
 800c04e:	2301      	moveq	r3, #1
 800c050:	2300      	movne	r3, #0
 800c052:	b2db      	uxtb	r3, r3
 800c054:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c056:	68bb      	ldr	r3, [r7, #8]
 800c058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c05c:	b2db      	uxtb	r3, r3
 800c05e:	2b21      	cmp	r3, #33	; 0x21
 800c060:	d108      	bne.n	800c074 <UART_DMAError+0x46>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d005      	beq.n	800c074 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c068:	68bb      	ldr	r3, [r7, #8]
 800c06a:	2200      	movs	r2, #0
 800c06c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c06e:	68b8      	ldr	r0, [r7, #8]
 800c070:	f000 f866 	bl	800c140 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c074:	68bb      	ldr	r3, [r7, #8]
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	695b      	ldr	r3, [r3, #20]
 800c07a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c07e:	2b40      	cmp	r3, #64	; 0x40
 800c080:	bf0c      	ite	eq
 800c082:	2301      	moveq	r3, #1
 800c084:	2300      	movne	r3, #0
 800c086:	b2db      	uxtb	r3, r3
 800c088:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c090:	b2db      	uxtb	r3, r3
 800c092:	2b22      	cmp	r3, #34	; 0x22
 800c094:	d108      	bne.n	800c0a8 <UART_DMAError+0x7a>
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d005      	beq.n	800c0a8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c09c:	68bb      	ldr	r3, [r7, #8]
 800c09e:	2200      	movs	r2, #0
 800c0a0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c0a2:	68b8      	ldr	r0, [r7, #8]
 800c0a4:	f000 f874 	bl	800c190 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ac:	f043 0210 	orr.w	r2, r3, #16
 800c0b0:	68bb      	ldr	r3, [r7, #8]
 800c0b2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0b8:	68b8      	ldr	r0, [r7, #8]
 800c0ba:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c0bc:	bf00      	nop
 800c0be:	3710      	adds	r7, #16
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	bd80      	pop	{r7, pc}

0800c0c4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b085      	sub	sp, #20
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	60f8      	str	r0, [r7, #12]
 800c0cc:	60b9      	str	r1, [r7, #8]
 800c0ce:	4613      	mov	r3, r2
 800c0d0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800c0d2:	68fb      	ldr	r3, [r7, #12]
 800c0d4:	68ba      	ldr	r2, [r7, #8]
 800c0d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	88fa      	ldrh	r2, [r7, #6]
 800c0dc:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	88fa      	ldrh	r2, [r7, #6]
 800c0e2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c0e4:	68fb      	ldr	r3, [r7, #12]
 800c0e6:	2200      	movs	r2, #0
 800c0e8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c0ea:	68fb      	ldr	r3, [r7, #12]
 800c0ec:	2222      	movs	r2, #34	; 0x22
 800c0ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	691b      	ldr	r3, [r3, #16]
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d007      	beq.n	800c112 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	68da      	ldr	r2, [r3, #12]
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	681b      	ldr	r3, [r3, #0]
 800c10c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c110:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	681b      	ldr	r3, [r3, #0]
 800c116:	695a      	ldr	r2, [r3, #20]
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	681b      	ldr	r3, [r3, #0]
 800c11c:	f042 0201 	orr.w	r2, r2, #1
 800c120:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800c122:	68fb      	ldr	r3, [r7, #12]
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	68da      	ldr	r2, [r3, #12]
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	681b      	ldr	r3, [r3, #0]
 800c12c:	f042 0220 	orr.w	r2, r2, #32
 800c130:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800c132:	2300      	movs	r3, #0
}
 800c134:	4618      	mov	r0, r3
 800c136:	3714      	adds	r7, #20
 800c138:	46bd      	mov	sp, r7
 800c13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c13e:	4770      	bx	lr

0800c140 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c140:	b480      	push	{r7}
 800c142:	b089      	sub	sp, #36	; 0x24
 800c144:	af00      	add	r7, sp, #0
 800c146:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	330c      	adds	r3, #12
 800c14e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c150:	68fb      	ldr	r3, [r7, #12]
 800c152:	e853 3f00 	ldrex	r3, [r3]
 800c156:	60bb      	str	r3, [r7, #8]
   return(result);
 800c158:	68bb      	ldr	r3, [r7, #8]
 800c15a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800c15e:	61fb      	str	r3, [r7, #28]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	330c      	adds	r3, #12
 800c166:	69fa      	ldr	r2, [r7, #28]
 800c168:	61ba      	str	r2, [r7, #24]
 800c16a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c16c:	6979      	ldr	r1, [r7, #20]
 800c16e:	69ba      	ldr	r2, [r7, #24]
 800c170:	e841 2300 	strex	r3, r2, [r1]
 800c174:	613b      	str	r3, [r7, #16]
   return(result);
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	2b00      	cmp	r3, #0
 800c17a:	d1e5      	bne.n	800c148 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c17c:	687b      	ldr	r3, [r7, #4]
 800c17e:	2220      	movs	r2, #32
 800c180:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800c184:	bf00      	nop
 800c186:	3724      	adds	r7, #36	; 0x24
 800c188:	46bd      	mov	sp, r7
 800c18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c18e:	4770      	bx	lr

0800c190 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c190:	b480      	push	{r7}
 800c192:	b095      	sub	sp, #84	; 0x54
 800c194:	af00      	add	r7, sp, #0
 800c196:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	330c      	adds	r3, #12
 800c19e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1a2:	e853 3f00 	ldrex	r3, [r3]
 800c1a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	330c      	adds	r3, #12
 800c1b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c1b8:	643a      	str	r2, [r7, #64]	; 0x40
 800c1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1c0:	e841 2300 	strex	r3, r2, [r1]
 800c1c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d1e5      	bne.n	800c198 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	3314      	adds	r3, #20
 800c1d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d4:	6a3b      	ldr	r3, [r7, #32]
 800c1d6:	e853 3f00 	ldrex	r3, [r3]
 800c1da:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1dc:	69fb      	ldr	r3, [r7, #28]
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3314      	adds	r3, #20
 800c1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e5      	bne.n	800c1cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c204:	2b01      	cmp	r3, #1
 800c206:	d119      	bne.n	800c23c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	330c      	adds	r3, #12
 800c20e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c210:	68fb      	ldr	r3, [r7, #12]
 800c212:	e853 3f00 	ldrex	r3, [r3]
 800c216:	60bb      	str	r3, [r7, #8]
   return(result);
 800c218:	68bb      	ldr	r3, [r7, #8]
 800c21a:	f023 0310 	bic.w	r3, r3, #16
 800c21e:	647b      	str	r3, [r7, #68]	; 0x44
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	330c      	adds	r3, #12
 800c226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c228:	61ba      	str	r2, [r7, #24]
 800c22a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22c:	6979      	ldr	r1, [r7, #20]
 800c22e:	69ba      	ldr	r2, [r7, #24]
 800c230:	e841 2300 	strex	r3, r2, [r1]
 800c234:	613b      	str	r3, [r7, #16]
   return(result);
 800c236:	693b      	ldr	r3, [r7, #16]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d1e5      	bne.n	800c208 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2220      	movs	r2, #32
 800c240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2200      	movs	r2, #0
 800c248:	631a      	str	r2, [r3, #48]	; 0x30
}
 800c24a:	bf00      	nop
 800c24c:	3754      	adds	r7, #84	; 0x54
 800c24e:	46bd      	mov	sp, r7
 800c250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c254:	4770      	bx	lr

0800c256 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c256:	b580      	push	{r7, lr}
 800c258:	b084      	sub	sp, #16
 800c25a:	af00      	add	r7, sp, #0
 800c25c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c262:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800c264:	68fb      	ldr	r3, [r7, #12]
 800c266:	2200      	movs	r2, #0
 800c268:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800c26a:	68fb      	ldr	r3, [r7, #12]
 800c26c:	2200      	movs	r2, #0
 800c26e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c274:	68f8      	ldr	r0, [r7, #12]
 800c276:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c278:	bf00      	nop
 800c27a:	3710      	adds	r7, #16
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800c280:	b480      	push	{r7}
 800c282:	b085      	sub	sp, #20
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c28e:	b2db      	uxtb	r3, r3
 800c290:	2b21      	cmp	r3, #33	; 0x21
 800c292:	d13e      	bne.n	800c312 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c294:	687b      	ldr	r3, [r7, #4]
 800c296:	689b      	ldr	r3, [r3, #8]
 800c298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c29c:	d114      	bne.n	800c2c8 <UART_Transmit_IT+0x48>
 800c29e:	687b      	ldr	r3, [r7, #4]
 800c2a0:	691b      	ldr	r3, [r3, #16]
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d110      	bne.n	800c2c8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	6a1b      	ldr	r3, [r3, #32]
 800c2aa:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800c2ac:	68fb      	ldr	r3, [r7, #12]
 800c2ae:	881b      	ldrh	r3, [r3, #0]
 800c2b0:	461a      	mov	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2ba:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	6a1b      	ldr	r3, [r3, #32]
 800c2c0:	1c9a      	adds	r2, r3, #2
 800c2c2:	687b      	ldr	r3, [r7, #4]
 800c2c4:	621a      	str	r2, [r3, #32]
 800c2c6:	e008      	b.n	800c2da <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6a1b      	ldr	r3, [r3, #32]
 800c2cc:	1c59      	adds	r1, r3, #1
 800c2ce:	687a      	ldr	r2, [r7, #4]
 800c2d0:	6211      	str	r1, [r2, #32]
 800c2d2:	781a      	ldrb	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	3b01      	subs	r3, #1
 800c2e2:	b29b      	uxth	r3, r3
 800c2e4:	687a      	ldr	r2, [r7, #4]
 800c2e6:	4619      	mov	r1, r3
 800c2e8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800c2ea:	2b00      	cmp	r3, #0
 800c2ec:	d10f      	bne.n	800c30e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800c2ee:	687b      	ldr	r3, [r7, #4]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68da      	ldr	r2, [r3, #12]
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2fc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	68da      	ldr	r2, [r3, #12]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c30c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800c30e:	2300      	movs	r3, #0
 800c310:	e000      	b.n	800c314 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800c312:	2302      	movs	r3, #2
  }
}
 800c314:	4618      	mov	r0, r3
 800c316:	3714      	adds	r7, #20
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr

0800c320 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b082      	sub	sp, #8
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	681b      	ldr	r3, [r3, #0]
 800c32c:	68da      	ldr	r2, [r3, #12]
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c336:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3708      	adds	r7, #8
 800c34e:	46bd      	mov	sp, r7
 800c350:	bd80      	pop	{r7, pc}

0800c352 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800c352:	b580      	push	{r7, lr}
 800c354:	b08c      	sub	sp, #48	; 0x30
 800c356:	af00      	add	r7, sp, #0
 800c358:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c35a:	687b      	ldr	r3, [r7, #4]
 800c35c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800c360:	b2db      	uxtb	r3, r3
 800c362:	2b22      	cmp	r3, #34	; 0x22
 800c364:	f040 80ad 	bne.w	800c4c2 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	689b      	ldr	r3, [r3, #8]
 800c36c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c370:	d117      	bne.n	800c3a2 <UART_Receive_IT+0x50>
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	691b      	ldr	r3, [r3, #16]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d113      	bne.n	800c3a2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800c37a:	2300      	movs	r3, #0
 800c37c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c382:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	685b      	ldr	r3, [r3, #4]
 800c38a:	b29b      	uxth	r3, r3
 800c38c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c390:	b29a      	uxth	r2, r3
 800c392:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c394:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c39a:	1c9a      	adds	r2, r3, #2
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	629a      	str	r2, [r3, #40]	; 0x28
 800c3a0:	e026      	b.n	800c3f0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	689b      	ldr	r3, [r3, #8]
 800c3b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c3b4:	d007      	beq.n	800c3c6 <UART_Receive_IT+0x74>
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	689b      	ldr	r3, [r3, #8]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d10a      	bne.n	800c3d4 <UART_Receive_IT+0x82>
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	691b      	ldr	r3, [r3, #16]
 800c3c2:	2b00      	cmp	r3, #0
 800c3c4:	d106      	bne.n	800c3d4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800c3c6:	687b      	ldr	r3, [r7, #4]
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	685b      	ldr	r3, [r3, #4]
 800c3cc:	b2da      	uxtb	r2, r3
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	701a      	strb	r2, [r3, #0]
 800c3d2:	e008      	b.n	800c3e6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	681b      	ldr	r3, [r3, #0]
 800c3d8:	685b      	ldr	r3, [r3, #4]
 800c3da:	b2db      	uxtb	r3, r3
 800c3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c3e0:	b2da      	uxtb	r2, r3
 800c3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800c3e6:	687b      	ldr	r3, [r7, #4]
 800c3e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3ea:	1c5a      	adds	r2, r3, #1
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800c3f0:	687b      	ldr	r3, [r7, #4]
 800c3f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800c3f4:	b29b      	uxth	r3, r3
 800c3f6:	3b01      	subs	r3, #1
 800c3f8:	b29b      	uxth	r3, r3
 800c3fa:	687a      	ldr	r2, [r7, #4]
 800c3fc:	4619      	mov	r1, r3
 800c3fe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800c400:	2b00      	cmp	r3, #0
 800c402:	d15c      	bne.n	800c4be <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	681b      	ldr	r3, [r3, #0]
 800c408:	68da      	ldr	r2, [r3, #12]
 800c40a:	687b      	ldr	r3, [r7, #4]
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f022 0220 	bic.w	r2, r2, #32
 800c412:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	68da      	ldr	r2, [r3, #12]
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c422:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	681b      	ldr	r3, [r3, #0]
 800c428:	695a      	ldr	r2, [r3, #20]
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	f022 0201 	bic.w	r2, r2, #1
 800c432:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	2220      	movs	r2, #32
 800c438:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c440:	2b01      	cmp	r3, #1
 800c442:	d136      	bne.n	800c4b2 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2200      	movs	r2, #0
 800c448:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	330c      	adds	r3, #12
 800c450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c452:	697b      	ldr	r3, [r7, #20]
 800c454:	e853 3f00 	ldrex	r3, [r3]
 800c458:	613b      	str	r3, [r7, #16]
   return(result);
 800c45a:	693b      	ldr	r3, [r7, #16]
 800c45c:	f023 0310 	bic.w	r3, r3, #16
 800c460:	627b      	str	r3, [r7, #36]	; 0x24
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	330c      	adds	r3, #12
 800c468:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c46a:	623a      	str	r2, [r7, #32]
 800c46c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c46e:	69f9      	ldr	r1, [r7, #28]
 800c470:	6a3a      	ldr	r2, [r7, #32]
 800c472:	e841 2300 	strex	r3, r2, [r1]
 800c476:	61bb      	str	r3, [r7, #24]
   return(result);
 800c478:	69bb      	ldr	r3, [r7, #24]
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	d1e5      	bne.n	800c44a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	f003 0310 	and.w	r3, r3, #16
 800c488:	2b10      	cmp	r3, #16
 800c48a:	d10a      	bne.n	800c4a2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c48c:	2300      	movs	r3, #0
 800c48e:	60fb      	str	r3, [r7, #12]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	60fb      	str	r3, [r7, #12]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	685b      	ldr	r3, [r3, #4]
 800c49e:	60fb      	str	r3, [r7, #12]
 800c4a0:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c4a6:	687a      	ldr	r2, [r7, #4]
 800c4a8:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c4aa:	4611      	mov	r1, r2
 800c4ac:	6878      	ldr	r0, [r7, #4]
 800c4ae:	4798      	blx	r3
 800c4b0:	e003      	b.n	800c4ba <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4b6:	6878      	ldr	r0, [r7, #4]
 800c4b8:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	e002      	b.n	800c4c4 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c4be:	2300      	movs	r3, #0
 800c4c0:	e000      	b.n	800c4c4 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c4c2:	2302      	movs	r3, #2
  }
}
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	3730      	adds	r7, #48	; 0x30
 800c4c8:	46bd      	mov	sp, r7
 800c4ca:	bd80      	pop	{r7, pc}

0800c4cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c4cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c4d0:	b0c0      	sub	sp, #256	; 0x100
 800c4d2:	af00      	add	r7, sp, #0
 800c4d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c4d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	691b      	ldr	r3, [r3, #16]
 800c4e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c4e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4e8:	68d9      	ldr	r1, [r3, #12]
 800c4ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4ee:	681a      	ldr	r2, [r3, #0]
 800c4f0:	ea40 0301 	orr.w	r3, r0, r1
 800c4f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c4f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c4fa:	689a      	ldr	r2, [r3, #8]
 800c4fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c500:	691b      	ldr	r3, [r3, #16]
 800c502:	431a      	orrs	r2, r3
 800c504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c508:	695b      	ldr	r3, [r3, #20]
 800c50a:	431a      	orrs	r2, r3
 800c50c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c510:	69db      	ldr	r3, [r3, #28]
 800c512:	4313      	orrs	r3, r2
 800c514:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	68db      	ldr	r3, [r3, #12]
 800c520:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c524:	f021 010c 	bic.w	r1, r1, #12
 800c528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c52c:	681a      	ldr	r2, [r3, #0]
 800c52e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c532:	430b      	orrs	r3, r1
 800c534:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	695b      	ldr	r3, [r3, #20]
 800c53e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c546:	6999      	ldr	r1, [r3, #24]
 800c548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c54c:	681a      	ldr	r2, [r3, #0]
 800c54e:	ea40 0301 	orr.w	r3, r0, r1
 800c552:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c554:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	4b8f      	ldr	r3, [pc, #572]	; (800c798 <UART_SetConfig+0x2cc>)
 800c55c:	429a      	cmp	r2, r3
 800c55e:	d005      	beq.n	800c56c <UART_SetConfig+0xa0>
 800c560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c564:	681a      	ldr	r2, [r3, #0]
 800c566:	4b8d      	ldr	r3, [pc, #564]	; (800c79c <UART_SetConfig+0x2d0>)
 800c568:	429a      	cmp	r2, r3
 800c56a:	d104      	bne.n	800c576 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c56c:	f7fd f9b0 	bl	80098d0 <HAL_RCC_GetPCLK2Freq>
 800c570:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c574:	e003      	b.n	800c57e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c576:	f7fd f997 	bl	80098a8 <HAL_RCC_GetPCLK1Freq>
 800c57a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c57e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c582:	69db      	ldr	r3, [r3, #28]
 800c584:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c588:	f040 810c 	bne.w	800c7a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c58c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c590:	2200      	movs	r2, #0
 800c592:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c596:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c59a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c59e:	4622      	mov	r2, r4
 800c5a0:	462b      	mov	r3, r5
 800c5a2:	1891      	adds	r1, r2, r2
 800c5a4:	65b9      	str	r1, [r7, #88]	; 0x58
 800c5a6:	415b      	adcs	r3, r3
 800c5a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c5aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c5ae:	4621      	mov	r1, r4
 800c5b0:	eb12 0801 	adds.w	r8, r2, r1
 800c5b4:	4629      	mov	r1, r5
 800c5b6:	eb43 0901 	adc.w	r9, r3, r1
 800c5ba:	f04f 0200 	mov.w	r2, #0
 800c5be:	f04f 0300 	mov.w	r3, #0
 800c5c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5ce:	4690      	mov	r8, r2
 800c5d0:	4699      	mov	r9, r3
 800c5d2:	4623      	mov	r3, r4
 800c5d4:	eb18 0303 	adds.w	r3, r8, r3
 800c5d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c5dc:	462b      	mov	r3, r5
 800c5de:	eb49 0303 	adc.w	r3, r9, r3
 800c5e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c5e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c5ea:	685b      	ldr	r3, [r3, #4]
 800c5ec:	2200      	movs	r2, #0
 800c5ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c5f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c5f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c5fa:	460b      	mov	r3, r1
 800c5fc:	18db      	adds	r3, r3, r3
 800c5fe:	653b      	str	r3, [r7, #80]	; 0x50
 800c600:	4613      	mov	r3, r2
 800c602:	eb42 0303 	adc.w	r3, r2, r3
 800c606:	657b      	str	r3, [r7, #84]	; 0x54
 800c608:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c60c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c610:	f7f4 fb42 	bl	8000c98 <__aeabi_uldivmod>
 800c614:	4602      	mov	r2, r0
 800c616:	460b      	mov	r3, r1
 800c618:	4b61      	ldr	r3, [pc, #388]	; (800c7a0 <UART_SetConfig+0x2d4>)
 800c61a:	fba3 2302 	umull	r2, r3, r3, r2
 800c61e:	095b      	lsrs	r3, r3, #5
 800c620:	011c      	lsls	r4, r3, #4
 800c622:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c626:	2200      	movs	r2, #0
 800c628:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c62c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c630:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c634:	4642      	mov	r2, r8
 800c636:	464b      	mov	r3, r9
 800c638:	1891      	adds	r1, r2, r2
 800c63a:	64b9      	str	r1, [r7, #72]	; 0x48
 800c63c:	415b      	adcs	r3, r3
 800c63e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c640:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c644:	4641      	mov	r1, r8
 800c646:	eb12 0a01 	adds.w	sl, r2, r1
 800c64a:	4649      	mov	r1, r9
 800c64c:	eb43 0b01 	adc.w	fp, r3, r1
 800c650:	f04f 0200 	mov.w	r2, #0
 800c654:	f04f 0300 	mov.w	r3, #0
 800c658:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c65c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c660:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c664:	4692      	mov	sl, r2
 800c666:	469b      	mov	fp, r3
 800c668:	4643      	mov	r3, r8
 800c66a:	eb1a 0303 	adds.w	r3, sl, r3
 800c66e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c672:	464b      	mov	r3, r9
 800c674:	eb4b 0303 	adc.w	r3, fp, r3
 800c678:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c67c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	2200      	movs	r2, #0
 800c684:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c688:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c68c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c690:	460b      	mov	r3, r1
 800c692:	18db      	adds	r3, r3, r3
 800c694:	643b      	str	r3, [r7, #64]	; 0x40
 800c696:	4613      	mov	r3, r2
 800c698:	eb42 0303 	adc.w	r3, r2, r3
 800c69c:	647b      	str	r3, [r7, #68]	; 0x44
 800c69e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c6a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c6a6:	f7f4 faf7 	bl	8000c98 <__aeabi_uldivmod>
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	460b      	mov	r3, r1
 800c6ae:	4611      	mov	r1, r2
 800c6b0:	4b3b      	ldr	r3, [pc, #236]	; (800c7a0 <UART_SetConfig+0x2d4>)
 800c6b2:	fba3 2301 	umull	r2, r3, r3, r1
 800c6b6:	095b      	lsrs	r3, r3, #5
 800c6b8:	2264      	movs	r2, #100	; 0x64
 800c6ba:	fb02 f303 	mul.w	r3, r2, r3
 800c6be:	1acb      	subs	r3, r1, r3
 800c6c0:	00db      	lsls	r3, r3, #3
 800c6c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c6c6:	4b36      	ldr	r3, [pc, #216]	; (800c7a0 <UART_SetConfig+0x2d4>)
 800c6c8:	fba3 2302 	umull	r2, r3, r3, r2
 800c6cc:	095b      	lsrs	r3, r3, #5
 800c6ce:	005b      	lsls	r3, r3, #1
 800c6d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c6d4:	441c      	add	r4, r3
 800c6d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c6da:	2200      	movs	r2, #0
 800c6dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c6e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c6e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c6e8:	4642      	mov	r2, r8
 800c6ea:	464b      	mov	r3, r9
 800c6ec:	1891      	adds	r1, r2, r2
 800c6ee:	63b9      	str	r1, [r7, #56]	; 0x38
 800c6f0:	415b      	adcs	r3, r3
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c6f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c6f8:	4641      	mov	r1, r8
 800c6fa:	1851      	adds	r1, r2, r1
 800c6fc:	6339      	str	r1, [r7, #48]	; 0x30
 800c6fe:	4649      	mov	r1, r9
 800c700:	414b      	adcs	r3, r1
 800c702:	637b      	str	r3, [r7, #52]	; 0x34
 800c704:	f04f 0200 	mov.w	r2, #0
 800c708:	f04f 0300 	mov.w	r3, #0
 800c70c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c710:	4659      	mov	r1, fp
 800c712:	00cb      	lsls	r3, r1, #3
 800c714:	4651      	mov	r1, sl
 800c716:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c71a:	4651      	mov	r1, sl
 800c71c:	00ca      	lsls	r2, r1, #3
 800c71e:	4610      	mov	r0, r2
 800c720:	4619      	mov	r1, r3
 800c722:	4603      	mov	r3, r0
 800c724:	4642      	mov	r2, r8
 800c726:	189b      	adds	r3, r3, r2
 800c728:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c72c:	464b      	mov	r3, r9
 800c72e:	460a      	mov	r2, r1
 800c730:	eb42 0303 	adc.w	r3, r2, r3
 800c734:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c738:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c73c:	685b      	ldr	r3, [r3, #4]
 800c73e:	2200      	movs	r2, #0
 800c740:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c744:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c748:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c74c:	460b      	mov	r3, r1
 800c74e:	18db      	adds	r3, r3, r3
 800c750:	62bb      	str	r3, [r7, #40]	; 0x28
 800c752:	4613      	mov	r3, r2
 800c754:	eb42 0303 	adc.w	r3, r2, r3
 800c758:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c75a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c75e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c762:	f7f4 fa99 	bl	8000c98 <__aeabi_uldivmod>
 800c766:	4602      	mov	r2, r0
 800c768:	460b      	mov	r3, r1
 800c76a:	4b0d      	ldr	r3, [pc, #52]	; (800c7a0 <UART_SetConfig+0x2d4>)
 800c76c:	fba3 1302 	umull	r1, r3, r3, r2
 800c770:	095b      	lsrs	r3, r3, #5
 800c772:	2164      	movs	r1, #100	; 0x64
 800c774:	fb01 f303 	mul.w	r3, r1, r3
 800c778:	1ad3      	subs	r3, r2, r3
 800c77a:	00db      	lsls	r3, r3, #3
 800c77c:	3332      	adds	r3, #50	; 0x32
 800c77e:	4a08      	ldr	r2, [pc, #32]	; (800c7a0 <UART_SetConfig+0x2d4>)
 800c780:	fba2 2303 	umull	r2, r3, r2, r3
 800c784:	095b      	lsrs	r3, r3, #5
 800c786:	f003 0207 	and.w	r2, r3, #7
 800c78a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	4422      	add	r2, r4
 800c792:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c794:	e105      	b.n	800c9a2 <UART_SetConfig+0x4d6>
 800c796:	bf00      	nop
 800c798:	40011000 	.word	0x40011000
 800c79c:	40011400 	.word	0x40011400
 800c7a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c7a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c7a8:	2200      	movs	r2, #0
 800c7aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c7ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c7b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c7b6:	4642      	mov	r2, r8
 800c7b8:	464b      	mov	r3, r9
 800c7ba:	1891      	adds	r1, r2, r2
 800c7bc:	6239      	str	r1, [r7, #32]
 800c7be:	415b      	adcs	r3, r3
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24
 800c7c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c7c6:	4641      	mov	r1, r8
 800c7c8:	1854      	adds	r4, r2, r1
 800c7ca:	4649      	mov	r1, r9
 800c7cc:	eb43 0501 	adc.w	r5, r3, r1
 800c7d0:	f04f 0200 	mov.w	r2, #0
 800c7d4:	f04f 0300 	mov.w	r3, #0
 800c7d8:	00eb      	lsls	r3, r5, #3
 800c7da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c7de:	00e2      	lsls	r2, r4, #3
 800c7e0:	4614      	mov	r4, r2
 800c7e2:	461d      	mov	r5, r3
 800c7e4:	4643      	mov	r3, r8
 800c7e6:	18e3      	adds	r3, r4, r3
 800c7e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c7ec:	464b      	mov	r3, r9
 800c7ee:	eb45 0303 	adc.w	r3, r5, r3
 800c7f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c7f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c7fa:	685b      	ldr	r3, [r3, #4]
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c802:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c806:	f04f 0200 	mov.w	r2, #0
 800c80a:	f04f 0300 	mov.w	r3, #0
 800c80e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c812:	4629      	mov	r1, r5
 800c814:	008b      	lsls	r3, r1, #2
 800c816:	4621      	mov	r1, r4
 800c818:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c81c:	4621      	mov	r1, r4
 800c81e:	008a      	lsls	r2, r1, #2
 800c820:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c824:	f7f4 fa38 	bl	8000c98 <__aeabi_uldivmod>
 800c828:	4602      	mov	r2, r0
 800c82a:	460b      	mov	r3, r1
 800c82c:	4b60      	ldr	r3, [pc, #384]	; (800c9b0 <UART_SetConfig+0x4e4>)
 800c82e:	fba3 2302 	umull	r2, r3, r3, r2
 800c832:	095b      	lsrs	r3, r3, #5
 800c834:	011c      	lsls	r4, r3, #4
 800c836:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c83a:	2200      	movs	r2, #0
 800c83c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c840:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c844:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c848:	4642      	mov	r2, r8
 800c84a:	464b      	mov	r3, r9
 800c84c:	1891      	adds	r1, r2, r2
 800c84e:	61b9      	str	r1, [r7, #24]
 800c850:	415b      	adcs	r3, r3
 800c852:	61fb      	str	r3, [r7, #28]
 800c854:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c858:	4641      	mov	r1, r8
 800c85a:	1851      	adds	r1, r2, r1
 800c85c:	6139      	str	r1, [r7, #16]
 800c85e:	4649      	mov	r1, r9
 800c860:	414b      	adcs	r3, r1
 800c862:	617b      	str	r3, [r7, #20]
 800c864:	f04f 0200 	mov.w	r2, #0
 800c868:	f04f 0300 	mov.w	r3, #0
 800c86c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c870:	4659      	mov	r1, fp
 800c872:	00cb      	lsls	r3, r1, #3
 800c874:	4651      	mov	r1, sl
 800c876:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c87a:	4651      	mov	r1, sl
 800c87c:	00ca      	lsls	r2, r1, #3
 800c87e:	4610      	mov	r0, r2
 800c880:	4619      	mov	r1, r3
 800c882:	4603      	mov	r3, r0
 800c884:	4642      	mov	r2, r8
 800c886:	189b      	adds	r3, r3, r2
 800c888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c88c:	464b      	mov	r3, r9
 800c88e:	460a      	mov	r2, r1
 800c890:	eb42 0303 	adc.w	r3, r2, r3
 800c894:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c89c:	685b      	ldr	r3, [r3, #4]
 800c89e:	2200      	movs	r2, #0
 800c8a0:	67bb      	str	r3, [r7, #120]	; 0x78
 800c8a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c8a4:	f04f 0200 	mov.w	r2, #0
 800c8a8:	f04f 0300 	mov.w	r3, #0
 800c8ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c8b0:	4649      	mov	r1, r9
 800c8b2:	008b      	lsls	r3, r1, #2
 800c8b4:	4641      	mov	r1, r8
 800c8b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c8ba:	4641      	mov	r1, r8
 800c8bc:	008a      	lsls	r2, r1, #2
 800c8be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c8c2:	f7f4 f9e9 	bl	8000c98 <__aeabi_uldivmod>
 800c8c6:	4602      	mov	r2, r0
 800c8c8:	460b      	mov	r3, r1
 800c8ca:	4b39      	ldr	r3, [pc, #228]	; (800c9b0 <UART_SetConfig+0x4e4>)
 800c8cc:	fba3 1302 	umull	r1, r3, r3, r2
 800c8d0:	095b      	lsrs	r3, r3, #5
 800c8d2:	2164      	movs	r1, #100	; 0x64
 800c8d4:	fb01 f303 	mul.w	r3, r1, r3
 800c8d8:	1ad3      	subs	r3, r2, r3
 800c8da:	011b      	lsls	r3, r3, #4
 800c8dc:	3332      	adds	r3, #50	; 0x32
 800c8de:	4a34      	ldr	r2, [pc, #208]	; (800c9b0 <UART_SetConfig+0x4e4>)
 800c8e0:	fba2 2303 	umull	r2, r3, r2, r3
 800c8e4:	095b      	lsrs	r3, r3, #5
 800c8e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c8ea:	441c      	add	r4, r3
 800c8ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	673b      	str	r3, [r7, #112]	; 0x70
 800c8f4:	677a      	str	r2, [r7, #116]	; 0x74
 800c8f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c8fa:	4642      	mov	r2, r8
 800c8fc:	464b      	mov	r3, r9
 800c8fe:	1891      	adds	r1, r2, r2
 800c900:	60b9      	str	r1, [r7, #8]
 800c902:	415b      	adcs	r3, r3
 800c904:	60fb      	str	r3, [r7, #12]
 800c906:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c90a:	4641      	mov	r1, r8
 800c90c:	1851      	adds	r1, r2, r1
 800c90e:	6039      	str	r1, [r7, #0]
 800c910:	4649      	mov	r1, r9
 800c912:	414b      	adcs	r3, r1
 800c914:	607b      	str	r3, [r7, #4]
 800c916:	f04f 0200 	mov.w	r2, #0
 800c91a:	f04f 0300 	mov.w	r3, #0
 800c91e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c922:	4659      	mov	r1, fp
 800c924:	00cb      	lsls	r3, r1, #3
 800c926:	4651      	mov	r1, sl
 800c928:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c92c:	4651      	mov	r1, sl
 800c92e:	00ca      	lsls	r2, r1, #3
 800c930:	4610      	mov	r0, r2
 800c932:	4619      	mov	r1, r3
 800c934:	4603      	mov	r3, r0
 800c936:	4642      	mov	r2, r8
 800c938:	189b      	adds	r3, r3, r2
 800c93a:	66bb      	str	r3, [r7, #104]	; 0x68
 800c93c:	464b      	mov	r3, r9
 800c93e:	460a      	mov	r2, r1
 800c940:	eb42 0303 	adc.w	r3, r2, r3
 800c944:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c94a:	685b      	ldr	r3, [r3, #4]
 800c94c:	2200      	movs	r2, #0
 800c94e:	663b      	str	r3, [r7, #96]	; 0x60
 800c950:	667a      	str	r2, [r7, #100]	; 0x64
 800c952:	f04f 0200 	mov.w	r2, #0
 800c956:	f04f 0300 	mov.w	r3, #0
 800c95a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c95e:	4649      	mov	r1, r9
 800c960:	008b      	lsls	r3, r1, #2
 800c962:	4641      	mov	r1, r8
 800c964:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c968:	4641      	mov	r1, r8
 800c96a:	008a      	lsls	r2, r1, #2
 800c96c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c970:	f7f4 f992 	bl	8000c98 <__aeabi_uldivmod>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	4b0d      	ldr	r3, [pc, #52]	; (800c9b0 <UART_SetConfig+0x4e4>)
 800c97a:	fba3 1302 	umull	r1, r3, r3, r2
 800c97e:	095b      	lsrs	r3, r3, #5
 800c980:	2164      	movs	r1, #100	; 0x64
 800c982:	fb01 f303 	mul.w	r3, r1, r3
 800c986:	1ad3      	subs	r3, r2, r3
 800c988:	011b      	lsls	r3, r3, #4
 800c98a:	3332      	adds	r3, #50	; 0x32
 800c98c:	4a08      	ldr	r2, [pc, #32]	; (800c9b0 <UART_SetConfig+0x4e4>)
 800c98e:	fba2 2303 	umull	r2, r3, r2, r3
 800c992:	095b      	lsrs	r3, r3, #5
 800c994:	f003 020f 	and.w	r2, r3, #15
 800c998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	4422      	add	r2, r4
 800c9a0:	609a      	str	r2, [r3, #8]
}
 800c9a2:	bf00      	nop
 800c9a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c9ae:	bf00      	nop
 800c9b0:	51eb851f 	.word	0x51eb851f

0800c9b4 <__errno>:
 800c9b4:	4b01      	ldr	r3, [pc, #4]	; (800c9bc <__errno+0x8>)
 800c9b6:	6818      	ldr	r0, [r3, #0]
 800c9b8:	4770      	bx	lr
 800c9ba:	bf00      	nop
 800c9bc:	20000264 	.word	0x20000264

0800c9c0 <__libc_init_array>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4d0d      	ldr	r5, [pc, #52]	; (800c9f8 <__libc_init_array+0x38>)
 800c9c4:	4c0d      	ldr	r4, [pc, #52]	; (800c9fc <__libc_init_array+0x3c>)
 800c9c6:	1b64      	subs	r4, r4, r5
 800c9c8:	10a4      	asrs	r4, r4, #2
 800c9ca:	2600      	movs	r6, #0
 800c9cc:	42a6      	cmp	r6, r4
 800c9ce:	d109      	bne.n	800c9e4 <__libc_init_array+0x24>
 800c9d0:	4d0b      	ldr	r5, [pc, #44]	; (800ca00 <__libc_init_array+0x40>)
 800c9d2:	4c0c      	ldr	r4, [pc, #48]	; (800ca04 <__libc_init_array+0x44>)
 800c9d4:	f004 fddc 	bl	8011590 <_init>
 800c9d8:	1b64      	subs	r4, r4, r5
 800c9da:	10a4      	asrs	r4, r4, #2
 800c9dc:	2600      	movs	r6, #0
 800c9de:	42a6      	cmp	r6, r4
 800c9e0:	d105      	bne.n	800c9ee <__libc_init_array+0x2e>
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}
 800c9e4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9e8:	4798      	blx	r3
 800c9ea:	3601      	adds	r6, #1
 800c9ec:	e7ee      	b.n	800c9cc <__libc_init_array+0xc>
 800c9ee:	f855 3b04 	ldr.w	r3, [r5], #4
 800c9f2:	4798      	blx	r3
 800c9f4:	3601      	adds	r6, #1
 800c9f6:	e7f2      	b.n	800c9de <__libc_init_array+0x1e>
 800c9f8:	08011a8c 	.word	0x08011a8c
 800c9fc:	08011a8c 	.word	0x08011a8c
 800ca00:	08011a8c 	.word	0x08011a8c
 800ca04:	08011a90 	.word	0x08011a90

0800ca08 <memcpy>:
 800ca08:	440a      	add	r2, r1
 800ca0a:	4291      	cmp	r1, r2
 800ca0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca10:	d100      	bne.n	800ca14 <memcpy+0xc>
 800ca12:	4770      	bx	lr
 800ca14:	b510      	push	{r4, lr}
 800ca16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca1e:	4291      	cmp	r1, r2
 800ca20:	d1f9      	bne.n	800ca16 <memcpy+0xe>
 800ca22:	bd10      	pop	{r4, pc}

0800ca24 <memset>:
 800ca24:	4402      	add	r2, r0
 800ca26:	4603      	mov	r3, r0
 800ca28:	4293      	cmp	r3, r2
 800ca2a:	d100      	bne.n	800ca2e <memset+0xa>
 800ca2c:	4770      	bx	lr
 800ca2e:	f803 1b01 	strb.w	r1, [r3], #1
 800ca32:	e7f9      	b.n	800ca28 <memset+0x4>

0800ca34 <__cvt>:
 800ca34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca38:	ec55 4b10 	vmov	r4, r5, d0
 800ca3c:	2d00      	cmp	r5, #0
 800ca3e:	460e      	mov	r6, r1
 800ca40:	4619      	mov	r1, r3
 800ca42:	462b      	mov	r3, r5
 800ca44:	bfbb      	ittet	lt
 800ca46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ca4a:	461d      	movlt	r5, r3
 800ca4c:	2300      	movge	r3, #0
 800ca4e:	232d      	movlt	r3, #45	; 0x2d
 800ca50:	700b      	strb	r3, [r1, #0]
 800ca52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ca58:	4691      	mov	r9, r2
 800ca5a:	f023 0820 	bic.w	r8, r3, #32
 800ca5e:	bfbc      	itt	lt
 800ca60:	4622      	movlt	r2, r4
 800ca62:	4614      	movlt	r4, r2
 800ca64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca68:	d005      	beq.n	800ca76 <__cvt+0x42>
 800ca6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ca6e:	d100      	bne.n	800ca72 <__cvt+0x3e>
 800ca70:	3601      	adds	r6, #1
 800ca72:	2102      	movs	r1, #2
 800ca74:	e000      	b.n	800ca78 <__cvt+0x44>
 800ca76:	2103      	movs	r1, #3
 800ca78:	ab03      	add	r3, sp, #12
 800ca7a:	9301      	str	r3, [sp, #4]
 800ca7c:	ab02      	add	r3, sp, #8
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	ec45 4b10 	vmov	d0, r4, r5
 800ca84:	4653      	mov	r3, sl
 800ca86:	4632      	mov	r2, r6
 800ca88:	f001 fdae 	bl	800e5e8 <_dtoa_r>
 800ca8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ca90:	4607      	mov	r7, r0
 800ca92:	d102      	bne.n	800ca9a <__cvt+0x66>
 800ca94:	f019 0f01 	tst.w	r9, #1
 800ca98:	d022      	beq.n	800cae0 <__cvt+0xac>
 800ca9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ca9e:	eb07 0906 	add.w	r9, r7, r6
 800caa2:	d110      	bne.n	800cac6 <__cvt+0x92>
 800caa4:	783b      	ldrb	r3, [r7, #0]
 800caa6:	2b30      	cmp	r3, #48	; 0x30
 800caa8:	d10a      	bne.n	800cac0 <__cvt+0x8c>
 800caaa:	2200      	movs	r2, #0
 800caac:	2300      	movs	r3, #0
 800caae:	4620      	mov	r0, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7f4 f811 	bl	8000ad8 <__aeabi_dcmpeq>
 800cab6:	b918      	cbnz	r0, 800cac0 <__cvt+0x8c>
 800cab8:	f1c6 0601 	rsb	r6, r6, #1
 800cabc:	f8ca 6000 	str.w	r6, [sl]
 800cac0:	f8da 3000 	ldr.w	r3, [sl]
 800cac4:	4499      	add	r9, r3
 800cac6:	2200      	movs	r2, #0
 800cac8:	2300      	movs	r3, #0
 800caca:	4620      	mov	r0, r4
 800cacc:	4629      	mov	r1, r5
 800cace:	f7f4 f803 	bl	8000ad8 <__aeabi_dcmpeq>
 800cad2:	b108      	cbz	r0, 800cad8 <__cvt+0xa4>
 800cad4:	f8cd 900c 	str.w	r9, [sp, #12]
 800cad8:	2230      	movs	r2, #48	; 0x30
 800cada:	9b03      	ldr	r3, [sp, #12]
 800cadc:	454b      	cmp	r3, r9
 800cade:	d307      	bcc.n	800caf0 <__cvt+0xbc>
 800cae0:	9b03      	ldr	r3, [sp, #12]
 800cae2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cae4:	1bdb      	subs	r3, r3, r7
 800cae6:	4638      	mov	r0, r7
 800cae8:	6013      	str	r3, [r2, #0]
 800caea:	b004      	add	sp, #16
 800caec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800caf0:	1c59      	adds	r1, r3, #1
 800caf2:	9103      	str	r1, [sp, #12]
 800caf4:	701a      	strb	r2, [r3, #0]
 800caf6:	e7f0      	b.n	800cada <__cvt+0xa6>

0800caf8 <__exponent>:
 800caf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cafa:	4603      	mov	r3, r0
 800cafc:	2900      	cmp	r1, #0
 800cafe:	bfb8      	it	lt
 800cb00:	4249      	neglt	r1, r1
 800cb02:	f803 2b02 	strb.w	r2, [r3], #2
 800cb06:	bfb4      	ite	lt
 800cb08:	222d      	movlt	r2, #45	; 0x2d
 800cb0a:	222b      	movge	r2, #43	; 0x2b
 800cb0c:	2909      	cmp	r1, #9
 800cb0e:	7042      	strb	r2, [r0, #1]
 800cb10:	dd2a      	ble.n	800cb68 <__exponent+0x70>
 800cb12:	f10d 0407 	add.w	r4, sp, #7
 800cb16:	46a4      	mov	ip, r4
 800cb18:	270a      	movs	r7, #10
 800cb1a:	46a6      	mov	lr, r4
 800cb1c:	460a      	mov	r2, r1
 800cb1e:	fb91 f6f7 	sdiv	r6, r1, r7
 800cb22:	fb07 1516 	mls	r5, r7, r6, r1
 800cb26:	3530      	adds	r5, #48	; 0x30
 800cb28:	2a63      	cmp	r2, #99	; 0x63
 800cb2a:	f104 34ff 	add.w	r4, r4, #4294967295
 800cb2e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800cb32:	4631      	mov	r1, r6
 800cb34:	dcf1      	bgt.n	800cb1a <__exponent+0x22>
 800cb36:	3130      	adds	r1, #48	; 0x30
 800cb38:	f1ae 0502 	sub.w	r5, lr, #2
 800cb3c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800cb40:	1c44      	adds	r4, r0, #1
 800cb42:	4629      	mov	r1, r5
 800cb44:	4561      	cmp	r1, ip
 800cb46:	d30a      	bcc.n	800cb5e <__exponent+0x66>
 800cb48:	f10d 0209 	add.w	r2, sp, #9
 800cb4c:	eba2 020e 	sub.w	r2, r2, lr
 800cb50:	4565      	cmp	r5, ip
 800cb52:	bf88      	it	hi
 800cb54:	2200      	movhi	r2, #0
 800cb56:	4413      	add	r3, r2
 800cb58:	1a18      	subs	r0, r3, r0
 800cb5a:	b003      	add	sp, #12
 800cb5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb5e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cb62:	f804 2f01 	strb.w	r2, [r4, #1]!
 800cb66:	e7ed      	b.n	800cb44 <__exponent+0x4c>
 800cb68:	2330      	movs	r3, #48	; 0x30
 800cb6a:	3130      	adds	r1, #48	; 0x30
 800cb6c:	7083      	strb	r3, [r0, #2]
 800cb6e:	70c1      	strb	r1, [r0, #3]
 800cb70:	1d03      	adds	r3, r0, #4
 800cb72:	e7f1      	b.n	800cb58 <__exponent+0x60>

0800cb74 <_printf_float>:
 800cb74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb78:	ed2d 8b02 	vpush	{d8}
 800cb7c:	b08d      	sub	sp, #52	; 0x34
 800cb7e:	460c      	mov	r4, r1
 800cb80:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800cb84:	4616      	mov	r6, r2
 800cb86:	461f      	mov	r7, r3
 800cb88:	4605      	mov	r5, r0
 800cb8a:	f002 fe8b 	bl	800f8a4 <_localeconv_r>
 800cb8e:	f8d0 a000 	ldr.w	sl, [r0]
 800cb92:	4650      	mov	r0, sl
 800cb94:	f7f3 fb24 	bl	80001e0 <strlen>
 800cb98:	2300      	movs	r3, #0
 800cb9a:	930a      	str	r3, [sp, #40]	; 0x28
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	9305      	str	r3, [sp, #20]
 800cba0:	f8d8 3000 	ldr.w	r3, [r8]
 800cba4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800cba8:	3307      	adds	r3, #7
 800cbaa:	f023 0307 	bic.w	r3, r3, #7
 800cbae:	f103 0208 	add.w	r2, r3, #8
 800cbb2:	f8c8 2000 	str.w	r2, [r8]
 800cbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800cbbe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800cbc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	f8cd 8018 	str.w	r8, [sp, #24]
 800cbcc:	ee08 0a10 	vmov	s16, r0
 800cbd0:	4b9f      	ldr	r3, [pc, #636]	; (800ce50 <_printf_float+0x2dc>)
 800cbd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbd6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbda:	f7f3 ffaf 	bl	8000b3c <__aeabi_dcmpun>
 800cbde:	bb88      	cbnz	r0, 800cc44 <_printf_float+0xd0>
 800cbe0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cbe4:	4b9a      	ldr	r3, [pc, #616]	; (800ce50 <_printf_float+0x2dc>)
 800cbe6:	f04f 32ff 	mov.w	r2, #4294967295
 800cbea:	f7f3 ff89 	bl	8000b00 <__aeabi_dcmple>
 800cbee:	bb48      	cbnz	r0, 800cc44 <_printf_float+0xd0>
 800cbf0:	2200      	movs	r2, #0
 800cbf2:	2300      	movs	r3, #0
 800cbf4:	4640      	mov	r0, r8
 800cbf6:	4649      	mov	r1, r9
 800cbf8:	f7f3 ff78 	bl	8000aec <__aeabi_dcmplt>
 800cbfc:	b110      	cbz	r0, 800cc04 <_printf_float+0x90>
 800cbfe:	232d      	movs	r3, #45	; 0x2d
 800cc00:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cc04:	4b93      	ldr	r3, [pc, #588]	; (800ce54 <_printf_float+0x2e0>)
 800cc06:	4894      	ldr	r0, [pc, #592]	; (800ce58 <_printf_float+0x2e4>)
 800cc08:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800cc0c:	bf94      	ite	ls
 800cc0e:	4698      	movls	r8, r3
 800cc10:	4680      	movhi	r8, r0
 800cc12:	2303      	movs	r3, #3
 800cc14:	6123      	str	r3, [r4, #16]
 800cc16:	9b05      	ldr	r3, [sp, #20]
 800cc18:	f023 0204 	bic.w	r2, r3, #4
 800cc1c:	6022      	str	r2, [r4, #0]
 800cc1e:	f04f 0900 	mov.w	r9, #0
 800cc22:	9700      	str	r7, [sp, #0]
 800cc24:	4633      	mov	r3, r6
 800cc26:	aa0b      	add	r2, sp, #44	; 0x2c
 800cc28:	4621      	mov	r1, r4
 800cc2a:	4628      	mov	r0, r5
 800cc2c:	f000 f9d8 	bl	800cfe0 <_printf_common>
 800cc30:	3001      	adds	r0, #1
 800cc32:	f040 8090 	bne.w	800cd56 <_printf_float+0x1e2>
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	b00d      	add	sp, #52	; 0x34
 800cc3c:	ecbd 8b02 	vpop	{d8}
 800cc40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc44:	4642      	mov	r2, r8
 800cc46:	464b      	mov	r3, r9
 800cc48:	4640      	mov	r0, r8
 800cc4a:	4649      	mov	r1, r9
 800cc4c:	f7f3 ff76 	bl	8000b3c <__aeabi_dcmpun>
 800cc50:	b140      	cbz	r0, 800cc64 <_printf_float+0xf0>
 800cc52:	464b      	mov	r3, r9
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	bfbc      	itt	lt
 800cc58:	232d      	movlt	r3, #45	; 0x2d
 800cc5a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800cc5e:	487f      	ldr	r0, [pc, #508]	; (800ce5c <_printf_float+0x2e8>)
 800cc60:	4b7f      	ldr	r3, [pc, #508]	; (800ce60 <_printf_float+0x2ec>)
 800cc62:	e7d1      	b.n	800cc08 <_printf_float+0x94>
 800cc64:	6863      	ldr	r3, [r4, #4]
 800cc66:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800cc6a:	9206      	str	r2, [sp, #24]
 800cc6c:	1c5a      	adds	r2, r3, #1
 800cc6e:	d13f      	bne.n	800ccf0 <_printf_float+0x17c>
 800cc70:	2306      	movs	r3, #6
 800cc72:	6063      	str	r3, [r4, #4]
 800cc74:	9b05      	ldr	r3, [sp, #20]
 800cc76:	6861      	ldr	r1, [r4, #4]
 800cc78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	9303      	str	r3, [sp, #12]
 800cc80:	ab0a      	add	r3, sp, #40	; 0x28
 800cc82:	e9cd b301 	strd	fp, r3, [sp, #4]
 800cc86:	ab09      	add	r3, sp, #36	; 0x24
 800cc88:	ec49 8b10 	vmov	d0, r8, r9
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	6022      	str	r2, [r4, #0]
 800cc90:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800cc94:	4628      	mov	r0, r5
 800cc96:	f7ff fecd 	bl	800ca34 <__cvt>
 800cc9a:	9b06      	ldr	r3, [sp, #24]
 800cc9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cc9e:	2b47      	cmp	r3, #71	; 0x47
 800cca0:	4680      	mov	r8, r0
 800cca2:	d108      	bne.n	800ccb6 <_printf_float+0x142>
 800cca4:	1cc8      	adds	r0, r1, #3
 800cca6:	db02      	blt.n	800ccae <_printf_float+0x13a>
 800cca8:	6863      	ldr	r3, [r4, #4]
 800ccaa:	4299      	cmp	r1, r3
 800ccac:	dd41      	ble.n	800cd32 <_printf_float+0x1be>
 800ccae:	f1ab 0b02 	sub.w	fp, fp, #2
 800ccb2:	fa5f fb8b 	uxtb.w	fp, fp
 800ccb6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800ccba:	d820      	bhi.n	800ccfe <_printf_float+0x18a>
 800ccbc:	3901      	subs	r1, #1
 800ccbe:	465a      	mov	r2, fp
 800ccc0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800ccc4:	9109      	str	r1, [sp, #36]	; 0x24
 800ccc6:	f7ff ff17 	bl	800caf8 <__exponent>
 800ccca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cccc:	1813      	adds	r3, r2, r0
 800ccce:	2a01      	cmp	r2, #1
 800ccd0:	4681      	mov	r9, r0
 800ccd2:	6123      	str	r3, [r4, #16]
 800ccd4:	dc02      	bgt.n	800ccdc <_printf_float+0x168>
 800ccd6:	6822      	ldr	r2, [r4, #0]
 800ccd8:	07d2      	lsls	r2, r2, #31
 800ccda:	d501      	bpl.n	800cce0 <_printf_float+0x16c>
 800ccdc:	3301      	adds	r3, #1
 800ccde:	6123      	str	r3, [r4, #16]
 800cce0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800cce4:	2b00      	cmp	r3, #0
 800cce6:	d09c      	beq.n	800cc22 <_printf_float+0xae>
 800cce8:	232d      	movs	r3, #45	; 0x2d
 800ccea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ccee:	e798      	b.n	800cc22 <_printf_float+0xae>
 800ccf0:	9a06      	ldr	r2, [sp, #24]
 800ccf2:	2a47      	cmp	r2, #71	; 0x47
 800ccf4:	d1be      	bne.n	800cc74 <_printf_float+0x100>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d1bc      	bne.n	800cc74 <_printf_float+0x100>
 800ccfa:	2301      	movs	r3, #1
 800ccfc:	e7b9      	b.n	800cc72 <_printf_float+0xfe>
 800ccfe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800cd02:	d118      	bne.n	800cd36 <_printf_float+0x1c2>
 800cd04:	2900      	cmp	r1, #0
 800cd06:	6863      	ldr	r3, [r4, #4]
 800cd08:	dd0b      	ble.n	800cd22 <_printf_float+0x1ae>
 800cd0a:	6121      	str	r1, [r4, #16]
 800cd0c:	b913      	cbnz	r3, 800cd14 <_printf_float+0x1a0>
 800cd0e:	6822      	ldr	r2, [r4, #0]
 800cd10:	07d0      	lsls	r0, r2, #31
 800cd12:	d502      	bpl.n	800cd1a <_printf_float+0x1a6>
 800cd14:	3301      	adds	r3, #1
 800cd16:	440b      	add	r3, r1
 800cd18:	6123      	str	r3, [r4, #16]
 800cd1a:	65a1      	str	r1, [r4, #88]	; 0x58
 800cd1c:	f04f 0900 	mov.w	r9, #0
 800cd20:	e7de      	b.n	800cce0 <_printf_float+0x16c>
 800cd22:	b913      	cbnz	r3, 800cd2a <_printf_float+0x1b6>
 800cd24:	6822      	ldr	r2, [r4, #0]
 800cd26:	07d2      	lsls	r2, r2, #31
 800cd28:	d501      	bpl.n	800cd2e <_printf_float+0x1ba>
 800cd2a:	3302      	adds	r3, #2
 800cd2c:	e7f4      	b.n	800cd18 <_printf_float+0x1a4>
 800cd2e:	2301      	movs	r3, #1
 800cd30:	e7f2      	b.n	800cd18 <_printf_float+0x1a4>
 800cd32:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800cd36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cd38:	4299      	cmp	r1, r3
 800cd3a:	db05      	blt.n	800cd48 <_printf_float+0x1d4>
 800cd3c:	6823      	ldr	r3, [r4, #0]
 800cd3e:	6121      	str	r1, [r4, #16]
 800cd40:	07d8      	lsls	r0, r3, #31
 800cd42:	d5ea      	bpl.n	800cd1a <_printf_float+0x1a6>
 800cd44:	1c4b      	adds	r3, r1, #1
 800cd46:	e7e7      	b.n	800cd18 <_printf_float+0x1a4>
 800cd48:	2900      	cmp	r1, #0
 800cd4a:	bfd4      	ite	le
 800cd4c:	f1c1 0202 	rsble	r2, r1, #2
 800cd50:	2201      	movgt	r2, #1
 800cd52:	4413      	add	r3, r2
 800cd54:	e7e0      	b.n	800cd18 <_printf_float+0x1a4>
 800cd56:	6823      	ldr	r3, [r4, #0]
 800cd58:	055a      	lsls	r2, r3, #21
 800cd5a:	d407      	bmi.n	800cd6c <_printf_float+0x1f8>
 800cd5c:	6923      	ldr	r3, [r4, #16]
 800cd5e:	4642      	mov	r2, r8
 800cd60:	4631      	mov	r1, r6
 800cd62:	4628      	mov	r0, r5
 800cd64:	47b8      	blx	r7
 800cd66:	3001      	adds	r0, #1
 800cd68:	d12c      	bne.n	800cdc4 <_printf_float+0x250>
 800cd6a:	e764      	b.n	800cc36 <_printf_float+0xc2>
 800cd6c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800cd70:	f240 80e0 	bls.w	800cf34 <_printf_float+0x3c0>
 800cd74:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cd78:	2200      	movs	r2, #0
 800cd7a:	2300      	movs	r3, #0
 800cd7c:	f7f3 feac 	bl	8000ad8 <__aeabi_dcmpeq>
 800cd80:	2800      	cmp	r0, #0
 800cd82:	d034      	beq.n	800cdee <_printf_float+0x27a>
 800cd84:	4a37      	ldr	r2, [pc, #220]	; (800ce64 <_printf_float+0x2f0>)
 800cd86:	2301      	movs	r3, #1
 800cd88:	4631      	mov	r1, r6
 800cd8a:	4628      	mov	r0, r5
 800cd8c:	47b8      	blx	r7
 800cd8e:	3001      	adds	r0, #1
 800cd90:	f43f af51 	beq.w	800cc36 <_printf_float+0xc2>
 800cd94:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	db02      	blt.n	800cda2 <_printf_float+0x22e>
 800cd9c:	6823      	ldr	r3, [r4, #0]
 800cd9e:	07d8      	lsls	r0, r3, #31
 800cda0:	d510      	bpl.n	800cdc4 <_printf_float+0x250>
 800cda2:	ee18 3a10 	vmov	r3, s16
 800cda6:	4652      	mov	r2, sl
 800cda8:	4631      	mov	r1, r6
 800cdaa:	4628      	mov	r0, r5
 800cdac:	47b8      	blx	r7
 800cdae:	3001      	adds	r0, #1
 800cdb0:	f43f af41 	beq.w	800cc36 <_printf_float+0xc2>
 800cdb4:	f04f 0800 	mov.w	r8, #0
 800cdb8:	f104 091a 	add.w	r9, r4, #26
 800cdbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cdbe:	3b01      	subs	r3, #1
 800cdc0:	4543      	cmp	r3, r8
 800cdc2:	dc09      	bgt.n	800cdd8 <_printf_float+0x264>
 800cdc4:	6823      	ldr	r3, [r4, #0]
 800cdc6:	079b      	lsls	r3, r3, #30
 800cdc8:	f100 8105 	bmi.w	800cfd6 <_printf_float+0x462>
 800cdcc:	68e0      	ldr	r0, [r4, #12]
 800cdce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cdd0:	4298      	cmp	r0, r3
 800cdd2:	bfb8      	it	lt
 800cdd4:	4618      	movlt	r0, r3
 800cdd6:	e730      	b.n	800cc3a <_printf_float+0xc6>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	464a      	mov	r2, r9
 800cddc:	4631      	mov	r1, r6
 800cdde:	4628      	mov	r0, r5
 800cde0:	47b8      	blx	r7
 800cde2:	3001      	adds	r0, #1
 800cde4:	f43f af27 	beq.w	800cc36 <_printf_float+0xc2>
 800cde8:	f108 0801 	add.w	r8, r8, #1
 800cdec:	e7e6      	b.n	800cdbc <_printf_float+0x248>
 800cdee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdf0:	2b00      	cmp	r3, #0
 800cdf2:	dc39      	bgt.n	800ce68 <_printf_float+0x2f4>
 800cdf4:	4a1b      	ldr	r2, [pc, #108]	; (800ce64 <_printf_float+0x2f0>)
 800cdf6:	2301      	movs	r3, #1
 800cdf8:	4631      	mov	r1, r6
 800cdfa:	4628      	mov	r0, r5
 800cdfc:	47b8      	blx	r7
 800cdfe:	3001      	adds	r0, #1
 800ce00:	f43f af19 	beq.w	800cc36 <_printf_float+0xc2>
 800ce04:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce08:	4313      	orrs	r3, r2
 800ce0a:	d102      	bne.n	800ce12 <_printf_float+0x29e>
 800ce0c:	6823      	ldr	r3, [r4, #0]
 800ce0e:	07d9      	lsls	r1, r3, #31
 800ce10:	d5d8      	bpl.n	800cdc4 <_printf_float+0x250>
 800ce12:	ee18 3a10 	vmov	r3, s16
 800ce16:	4652      	mov	r2, sl
 800ce18:	4631      	mov	r1, r6
 800ce1a:	4628      	mov	r0, r5
 800ce1c:	47b8      	blx	r7
 800ce1e:	3001      	adds	r0, #1
 800ce20:	f43f af09 	beq.w	800cc36 <_printf_float+0xc2>
 800ce24:	f04f 0900 	mov.w	r9, #0
 800ce28:	f104 0a1a 	add.w	sl, r4, #26
 800ce2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce2e:	425b      	negs	r3, r3
 800ce30:	454b      	cmp	r3, r9
 800ce32:	dc01      	bgt.n	800ce38 <_printf_float+0x2c4>
 800ce34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ce36:	e792      	b.n	800cd5e <_printf_float+0x1ea>
 800ce38:	2301      	movs	r3, #1
 800ce3a:	4652      	mov	r2, sl
 800ce3c:	4631      	mov	r1, r6
 800ce3e:	4628      	mov	r0, r5
 800ce40:	47b8      	blx	r7
 800ce42:	3001      	adds	r0, #1
 800ce44:	f43f aef7 	beq.w	800cc36 <_printf_float+0xc2>
 800ce48:	f109 0901 	add.w	r9, r9, #1
 800ce4c:	e7ee      	b.n	800ce2c <_printf_float+0x2b8>
 800ce4e:	bf00      	nop
 800ce50:	7fefffff 	.word	0x7fefffff
 800ce54:	080115e0 	.word	0x080115e0
 800ce58:	080115e4 	.word	0x080115e4
 800ce5c:	080115ec 	.word	0x080115ec
 800ce60:	080115e8 	.word	0x080115e8
 800ce64:	080115f0 	.word	0x080115f0
 800ce68:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ce6a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce6c:	429a      	cmp	r2, r3
 800ce6e:	bfa8      	it	ge
 800ce70:	461a      	movge	r2, r3
 800ce72:	2a00      	cmp	r2, #0
 800ce74:	4691      	mov	r9, r2
 800ce76:	dc37      	bgt.n	800cee8 <_printf_float+0x374>
 800ce78:	f04f 0b00 	mov.w	fp, #0
 800ce7c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ce80:	f104 021a 	add.w	r2, r4, #26
 800ce84:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ce86:	9305      	str	r3, [sp, #20]
 800ce88:	eba3 0309 	sub.w	r3, r3, r9
 800ce8c:	455b      	cmp	r3, fp
 800ce8e:	dc33      	bgt.n	800cef8 <_printf_float+0x384>
 800ce90:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ce94:	429a      	cmp	r2, r3
 800ce96:	db3b      	blt.n	800cf10 <_printf_float+0x39c>
 800ce98:	6823      	ldr	r3, [r4, #0]
 800ce9a:	07da      	lsls	r2, r3, #31
 800ce9c:	d438      	bmi.n	800cf10 <_printf_float+0x39c>
 800ce9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cea0:	9a05      	ldr	r2, [sp, #20]
 800cea2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cea4:	1a9a      	subs	r2, r3, r2
 800cea6:	eba3 0901 	sub.w	r9, r3, r1
 800ceaa:	4591      	cmp	r9, r2
 800ceac:	bfa8      	it	ge
 800ceae:	4691      	movge	r9, r2
 800ceb0:	f1b9 0f00 	cmp.w	r9, #0
 800ceb4:	dc35      	bgt.n	800cf22 <_printf_float+0x3ae>
 800ceb6:	f04f 0800 	mov.w	r8, #0
 800ceba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cebe:	f104 0a1a 	add.w	sl, r4, #26
 800cec2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cec6:	1a9b      	subs	r3, r3, r2
 800cec8:	eba3 0309 	sub.w	r3, r3, r9
 800cecc:	4543      	cmp	r3, r8
 800cece:	f77f af79 	ble.w	800cdc4 <_printf_float+0x250>
 800ced2:	2301      	movs	r3, #1
 800ced4:	4652      	mov	r2, sl
 800ced6:	4631      	mov	r1, r6
 800ced8:	4628      	mov	r0, r5
 800ceda:	47b8      	blx	r7
 800cedc:	3001      	adds	r0, #1
 800cede:	f43f aeaa 	beq.w	800cc36 <_printf_float+0xc2>
 800cee2:	f108 0801 	add.w	r8, r8, #1
 800cee6:	e7ec      	b.n	800cec2 <_printf_float+0x34e>
 800cee8:	4613      	mov	r3, r2
 800ceea:	4631      	mov	r1, r6
 800ceec:	4642      	mov	r2, r8
 800ceee:	4628      	mov	r0, r5
 800cef0:	47b8      	blx	r7
 800cef2:	3001      	adds	r0, #1
 800cef4:	d1c0      	bne.n	800ce78 <_printf_float+0x304>
 800cef6:	e69e      	b.n	800cc36 <_printf_float+0xc2>
 800cef8:	2301      	movs	r3, #1
 800cefa:	4631      	mov	r1, r6
 800cefc:	4628      	mov	r0, r5
 800cefe:	9205      	str	r2, [sp, #20]
 800cf00:	47b8      	blx	r7
 800cf02:	3001      	adds	r0, #1
 800cf04:	f43f ae97 	beq.w	800cc36 <_printf_float+0xc2>
 800cf08:	9a05      	ldr	r2, [sp, #20]
 800cf0a:	f10b 0b01 	add.w	fp, fp, #1
 800cf0e:	e7b9      	b.n	800ce84 <_printf_float+0x310>
 800cf10:	ee18 3a10 	vmov	r3, s16
 800cf14:	4652      	mov	r2, sl
 800cf16:	4631      	mov	r1, r6
 800cf18:	4628      	mov	r0, r5
 800cf1a:	47b8      	blx	r7
 800cf1c:	3001      	adds	r0, #1
 800cf1e:	d1be      	bne.n	800ce9e <_printf_float+0x32a>
 800cf20:	e689      	b.n	800cc36 <_printf_float+0xc2>
 800cf22:	9a05      	ldr	r2, [sp, #20]
 800cf24:	464b      	mov	r3, r9
 800cf26:	4442      	add	r2, r8
 800cf28:	4631      	mov	r1, r6
 800cf2a:	4628      	mov	r0, r5
 800cf2c:	47b8      	blx	r7
 800cf2e:	3001      	adds	r0, #1
 800cf30:	d1c1      	bne.n	800ceb6 <_printf_float+0x342>
 800cf32:	e680      	b.n	800cc36 <_printf_float+0xc2>
 800cf34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf36:	2a01      	cmp	r2, #1
 800cf38:	dc01      	bgt.n	800cf3e <_printf_float+0x3ca>
 800cf3a:	07db      	lsls	r3, r3, #31
 800cf3c:	d538      	bpl.n	800cfb0 <_printf_float+0x43c>
 800cf3e:	2301      	movs	r3, #1
 800cf40:	4642      	mov	r2, r8
 800cf42:	4631      	mov	r1, r6
 800cf44:	4628      	mov	r0, r5
 800cf46:	47b8      	blx	r7
 800cf48:	3001      	adds	r0, #1
 800cf4a:	f43f ae74 	beq.w	800cc36 <_printf_float+0xc2>
 800cf4e:	ee18 3a10 	vmov	r3, s16
 800cf52:	4652      	mov	r2, sl
 800cf54:	4631      	mov	r1, r6
 800cf56:	4628      	mov	r0, r5
 800cf58:	47b8      	blx	r7
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f43f ae6b 	beq.w	800cc36 <_printf_float+0xc2>
 800cf60:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cf64:	2200      	movs	r2, #0
 800cf66:	2300      	movs	r3, #0
 800cf68:	f7f3 fdb6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cf6c:	b9d8      	cbnz	r0, 800cfa6 <_printf_float+0x432>
 800cf6e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf70:	f108 0201 	add.w	r2, r8, #1
 800cf74:	3b01      	subs	r3, #1
 800cf76:	4631      	mov	r1, r6
 800cf78:	4628      	mov	r0, r5
 800cf7a:	47b8      	blx	r7
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	d10e      	bne.n	800cf9e <_printf_float+0x42a>
 800cf80:	e659      	b.n	800cc36 <_printf_float+0xc2>
 800cf82:	2301      	movs	r3, #1
 800cf84:	4652      	mov	r2, sl
 800cf86:	4631      	mov	r1, r6
 800cf88:	4628      	mov	r0, r5
 800cf8a:	47b8      	blx	r7
 800cf8c:	3001      	adds	r0, #1
 800cf8e:	f43f ae52 	beq.w	800cc36 <_printf_float+0xc2>
 800cf92:	f108 0801 	add.w	r8, r8, #1
 800cf96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cf98:	3b01      	subs	r3, #1
 800cf9a:	4543      	cmp	r3, r8
 800cf9c:	dcf1      	bgt.n	800cf82 <_printf_float+0x40e>
 800cf9e:	464b      	mov	r3, r9
 800cfa0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cfa4:	e6dc      	b.n	800cd60 <_printf_float+0x1ec>
 800cfa6:	f04f 0800 	mov.w	r8, #0
 800cfaa:	f104 0a1a 	add.w	sl, r4, #26
 800cfae:	e7f2      	b.n	800cf96 <_printf_float+0x422>
 800cfb0:	2301      	movs	r3, #1
 800cfb2:	4642      	mov	r2, r8
 800cfb4:	e7df      	b.n	800cf76 <_printf_float+0x402>
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	464a      	mov	r2, r9
 800cfba:	4631      	mov	r1, r6
 800cfbc:	4628      	mov	r0, r5
 800cfbe:	47b8      	blx	r7
 800cfc0:	3001      	adds	r0, #1
 800cfc2:	f43f ae38 	beq.w	800cc36 <_printf_float+0xc2>
 800cfc6:	f108 0801 	add.w	r8, r8, #1
 800cfca:	68e3      	ldr	r3, [r4, #12]
 800cfcc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cfce:	1a5b      	subs	r3, r3, r1
 800cfd0:	4543      	cmp	r3, r8
 800cfd2:	dcf0      	bgt.n	800cfb6 <_printf_float+0x442>
 800cfd4:	e6fa      	b.n	800cdcc <_printf_float+0x258>
 800cfd6:	f04f 0800 	mov.w	r8, #0
 800cfda:	f104 0919 	add.w	r9, r4, #25
 800cfde:	e7f4      	b.n	800cfca <_printf_float+0x456>

0800cfe0 <_printf_common>:
 800cfe0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfe4:	4616      	mov	r6, r2
 800cfe6:	4699      	mov	r9, r3
 800cfe8:	688a      	ldr	r2, [r1, #8]
 800cfea:	690b      	ldr	r3, [r1, #16]
 800cfec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cff0:	4293      	cmp	r3, r2
 800cff2:	bfb8      	it	lt
 800cff4:	4613      	movlt	r3, r2
 800cff6:	6033      	str	r3, [r6, #0]
 800cff8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cffc:	4607      	mov	r7, r0
 800cffe:	460c      	mov	r4, r1
 800d000:	b10a      	cbz	r2, 800d006 <_printf_common+0x26>
 800d002:	3301      	adds	r3, #1
 800d004:	6033      	str	r3, [r6, #0]
 800d006:	6823      	ldr	r3, [r4, #0]
 800d008:	0699      	lsls	r1, r3, #26
 800d00a:	bf42      	ittt	mi
 800d00c:	6833      	ldrmi	r3, [r6, #0]
 800d00e:	3302      	addmi	r3, #2
 800d010:	6033      	strmi	r3, [r6, #0]
 800d012:	6825      	ldr	r5, [r4, #0]
 800d014:	f015 0506 	ands.w	r5, r5, #6
 800d018:	d106      	bne.n	800d028 <_printf_common+0x48>
 800d01a:	f104 0a19 	add.w	sl, r4, #25
 800d01e:	68e3      	ldr	r3, [r4, #12]
 800d020:	6832      	ldr	r2, [r6, #0]
 800d022:	1a9b      	subs	r3, r3, r2
 800d024:	42ab      	cmp	r3, r5
 800d026:	dc26      	bgt.n	800d076 <_printf_common+0x96>
 800d028:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d02c:	1e13      	subs	r3, r2, #0
 800d02e:	6822      	ldr	r2, [r4, #0]
 800d030:	bf18      	it	ne
 800d032:	2301      	movne	r3, #1
 800d034:	0692      	lsls	r2, r2, #26
 800d036:	d42b      	bmi.n	800d090 <_printf_common+0xb0>
 800d038:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d03c:	4649      	mov	r1, r9
 800d03e:	4638      	mov	r0, r7
 800d040:	47c0      	blx	r8
 800d042:	3001      	adds	r0, #1
 800d044:	d01e      	beq.n	800d084 <_printf_common+0xa4>
 800d046:	6823      	ldr	r3, [r4, #0]
 800d048:	68e5      	ldr	r5, [r4, #12]
 800d04a:	6832      	ldr	r2, [r6, #0]
 800d04c:	f003 0306 	and.w	r3, r3, #6
 800d050:	2b04      	cmp	r3, #4
 800d052:	bf08      	it	eq
 800d054:	1aad      	subeq	r5, r5, r2
 800d056:	68a3      	ldr	r3, [r4, #8]
 800d058:	6922      	ldr	r2, [r4, #16]
 800d05a:	bf0c      	ite	eq
 800d05c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d060:	2500      	movne	r5, #0
 800d062:	4293      	cmp	r3, r2
 800d064:	bfc4      	itt	gt
 800d066:	1a9b      	subgt	r3, r3, r2
 800d068:	18ed      	addgt	r5, r5, r3
 800d06a:	2600      	movs	r6, #0
 800d06c:	341a      	adds	r4, #26
 800d06e:	42b5      	cmp	r5, r6
 800d070:	d11a      	bne.n	800d0a8 <_printf_common+0xc8>
 800d072:	2000      	movs	r0, #0
 800d074:	e008      	b.n	800d088 <_printf_common+0xa8>
 800d076:	2301      	movs	r3, #1
 800d078:	4652      	mov	r2, sl
 800d07a:	4649      	mov	r1, r9
 800d07c:	4638      	mov	r0, r7
 800d07e:	47c0      	blx	r8
 800d080:	3001      	adds	r0, #1
 800d082:	d103      	bne.n	800d08c <_printf_common+0xac>
 800d084:	f04f 30ff 	mov.w	r0, #4294967295
 800d088:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d08c:	3501      	adds	r5, #1
 800d08e:	e7c6      	b.n	800d01e <_printf_common+0x3e>
 800d090:	18e1      	adds	r1, r4, r3
 800d092:	1c5a      	adds	r2, r3, #1
 800d094:	2030      	movs	r0, #48	; 0x30
 800d096:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d09a:	4422      	add	r2, r4
 800d09c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d0a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d0a4:	3302      	adds	r3, #2
 800d0a6:	e7c7      	b.n	800d038 <_printf_common+0x58>
 800d0a8:	2301      	movs	r3, #1
 800d0aa:	4622      	mov	r2, r4
 800d0ac:	4649      	mov	r1, r9
 800d0ae:	4638      	mov	r0, r7
 800d0b0:	47c0      	blx	r8
 800d0b2:	3001      	adds	r0, #1
 800d0b4:	d0e6      	beq.n	800d084 <_printf_common+0xa4>
 800d0b6:	3601      	adds	r6, #1
 800d0b8:	e7d9      	b.n	800d06e <_printf_common+0x8e>
	...

0800d0bc <_printf_i>:
 800d0bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d0c0:	7e0f      	ldrb	r7, [r1, #24]
 800d0c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d0c4:	2f78      	cmp	r7, #120	; 0x78
 800d0c6:	4691      	mov	r9, r2
 800d0c8:	4680      	mov	r8, r0
 800d0ca:	460c      	mov	r4, r1
 800d0cc:	469a      	mov	sl, r3
 800d0ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d0d2:	d807      	bhi.n	800d0e4 <_printf_i+0x28>
 800d0d4:	2f62      	cmp	r7, #98	; 0x62
 800d0d6:	d80a      	bhi.n	800d0ee <_printf_i+0x32>
 800d0d8:	2f00      	cmp	r7, #0
 800d0da:	f000 80d8 	beq.w	800d28e <_printf_i+0x1d2>
 800d0de:	2f58      	cmp	r7, #88	; 0x58
 800d0e0:	f000 80a3 	beq.w	800d22a <_printf_i+0x16e>
 800d0e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d0e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d0ec:	e03a      	b.n	800d164 <_printf_i+0xa8>
 800d0ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d0f2:	2b15      	cmp	r3, #21
 800d0f4:	d8f6      	bhi.n	800d0e4 <_printf_i+0x28>
 800d0f6:	a101      	add	r1, pc, #4	; (adr r1, 800d0fc <_printf_i+0x40>)
 800d0f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0fc:	0800d155 	.word	0x0800d155
 800d100:	0800d169 	.word	0x0800d169
 800d104:	0800d0e5 	.word	0x0800d0e5
 800d108:	0800d0e5 	.word	0x0800d0e5
 800d10c:	0800d0e5 	.word	0x0800d0e5
 800d110:	0800d0e5 	.word	0x0800d0e5
 800d114:	0800d169 	.word	0x0800d169
 800d118:	0800d0e5 	.word	0x0800d0e5
 800d11c:	0800d0e5 	.word	0x0800d0e5
 800d120:	0800d0e5 	.word	0x0800d0e5
 800d124:	0800d0e5 	.word	0x0800d0e5
 800d128:	0800d275 	.word	0x0800d275
 800d12c:	0800d199 	.word	0x0800d199
 800d130:	0800d257 	.word	0x0800d257
 800d134:	0800d0e5 	.word	0x0800d0e5
 800d138:	0800d0e5 	.word	0x0800d0e5
 800d13c:	0800d297 	.word	0x0800d297
 800d140:	0800d0e5 	.word	0x0800d0e5
 800d144:	0800d199 	.word	0x0800d199
 800d148:	0800d0e5 	.word	0x0800d0e5
 800d14c:	0800d0e5 	.word	0x0800d0e5
 800d150:	0800d25f 	.word	0x0800d25f
 800d154:	682b      	ldr	r3, [r5, #0]
 800d156:	1d1a      	adds	r2, r3, #4
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	602a      	str	r2, [r5, #0]
 800d15c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d160:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d164:	2301      	movs	r3, #1
 800d166:	e0a3      	b.n	800d2b0 <_printf_i+0x1f4>
 800d168:	6820      	ldr	r0, [r4, #0]
 800d16a:	6829      	ldr	r1, [r5, #0]
 800d16c:	0606      	lsls	r6, r0, #24
 800d16e:	f101 0304 	add.w	r3, r1, #4
 800d172:	d50a      	bpl.n	800d18a <_printf_i+0xce>
 800d174:	680e      	ldr	r6, [r1, #0]
 800d176:	602b      	str	r3, [r5, #0]
 800d178:	2e00      	cmp	r6, #0
 800d17a:	da03      	bge.n	800d184 <_printf_i+0xc8>
 800d17c:	232d      	movs	r3, #45	; 0x2d
 800d17e:	4276      	negs	r6, r6
 800d180:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d184:	485e      	ldr	r0, [pc, #376]	; (800d300 <_printf_i+0x244>)
 800d186:	230a      	movs	r3, #10
 800d188:	e019      	b.n	800d1be <_printf_i+0x102>
 800d18a:	680e      	ldr	r6, [r1, #0]
 800d18c:	602b      	str	r3, [r5, #0]
 800d18e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d192:	bf18      	it	ne
 800d194:	b236      	sxthne	r6, r6
 800d196:	e7ef      	b.n	800d178 <_printf_i+0xbc>
 800d198:	682b      	ldr	r3, [r5, #0]
 800d19a:	6820      	ldr	r0, [r4, #0]
 800d19c:	1d19      	adds	r1, r3, #4
 800d19e:	6029      	str	r1, [r5, #0]
 800d1a0:	0601      	lsls	r1, r0, #24
 800d1a2:	d501      	bpl.n	800d1a8 <_printf_i+0xec>
 800d1a4:	681e      	ldr	r6, [r3, #0]
 800d1a6:	e002      	b.n	800d1ae <_printf_i+0xf2>
 800d1a8:	0646      	lsls	r6, r0, #25
 800d1aa:	d5fb      	bpl.n	800d1a4 <_printf_i+0xe8>
 800d1ac:	881e      	ldrh	r6, [r3, #0]
 800d1ae:	4854      	ldr	r0, [pc, #336]	; (800d300 <_printf_i+0x244>)
 800d1b0:	2f6f      	cmp	r7, #111	; 0x6f
 800d1b2:	bf0c      	ite	eq
 800d1b4:	2308      	moveq	r3, #8
 800d1b6:	230a      	movne	r3, #10
 800d1b8:	2100      	movs	r1, #0
 800d1ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d1be:	6865      	ldr	r5, [r4, #4]
 800d1c0:	60a5      	str	r5, [r4, #8]
 800d1c2:	2d00      	cmp	r5, #0
 800d1c4:	bfa2      	ittt	ge
 800d1c6:	6821      	ldrge	r1, [r4, #0]
 800d1c8:	f021 0104 	bicge.w	r1, r1, #4
 800d1cc:	6021      	strge	r1, [r4, #0]
 800d1ce:	b90e      	cbnz	r6, 800d1d4 <_printf_i+0x118>
 800d1d0:	2d00      	cmp	r5, #0
 800d1d2:	d04d      	beq.n	800d270 <_printf_i+0x1b4>
 800d1d4:	4615      	mov	r5, r2
 800d1d6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d1da:	fb03 6711 	mls	r7, r3, r1, r6
 800d1de:	5dc7      	ldrb	r7, [r0, r7]
 800d1e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d1e4:	4637      	mov	r7, r6
 800d1e6:	42bb      	cmp	r3, r7
 800d1e8:	460e      	mov	r6, r1
 800d1ea:	d9f4      	bls.n	800d1d6 <_printf_i+0x11a>
 800d1ec:	2b08      	cmp	r3, #8
 800d1ee:	d10b      	bne.n	800d208 <_printf_i+0x14c>
 800d1f0:	6823      	ldr	r3, [r4, #0]
 800d1f2:	07de      	lsls	r6, r3, #31
 800d1f4:	d508      	bpl.n	800d208 <_printf_i+0x14c>
 800d1f6:	6923      	ldr	r3, [r4, #16]
 800d1f8:	6861      	ldr	r1, [r4, #4]
 800d1fa:	4299      	cmp	r1, r3
 800d1fc:	bfde      	ittt	le
 800d1fe:	2330      	movle	r3, #48	; 0x30
 800d200:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d204:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d208:	1b52      	subs	r2, r2, r5
 800d20a:	6122      	str	r2, [r4, #16]
 800d20c:	f8cd a000 	str.w	sl, [sp]
 800d210:	464b      	mov	r3, r9
 800d212:	aa03      	add	r2, sp, #12
 800d214:	4621      	mov	r1, r4
 800d216:	4640      	mov	r0, r8
 800d218:	f7ff fee2 	bl	800cfe0 <_printf_common>
 800d21c:	3001      	adds	r0, #1
 800d21e:	d14c      	bne.n	800d2ba <_printf_i+0x1fe>
 800d220:	f04f 30ff 	mov.w	r0, #4294967295
 800d224:	b004      	add	sp, #16
 800d226:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d22a:	4835      	ldr	r0, [pc, #212]	; (800d300 <_printf_i+0x244>)
 800d22c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d230:	6829      	ldr	r1, [r5, #0]
 800d232:	6823      	ldr	r3, [r4, #0]
 800d234:	f851 6b04 	ldr.w	r6, [r1], #4
 800d238:	6029      	str	r1, [r5, #0]
 800d23a:	061d      	lsls	r5, r3, #24
 800d23c:	d514      	bpl.n	800d268 <_printf_i+0x1ac>
 800d23e:	07df      	lsls	r7, r3, #31
 800d240:	bf44      	itt	mi
 800d242:	f043 0320 	orrmi.w	r3, r3, #32
 800d246:	6023      	strmi	r3, [r4, #0]
 800d248:	b91e      	cbnz	r6, 800d252 <_printf_i+0x196>
 800d24a:	6823      	ldr	r3, [r4, #0]
 800d24c:	f023 0320 	bic.w	r3, r3, #32
 800d250:	6023      	str	r3, [r4, #0]
 800d252:	2310      	movs	r3, #16
 800d254:	e7b0      	b.n	800d1b8 <_printf_i+0xfc>
 800d256:	6823      	ldr	r3, [r4, #0]
 800d258:	f043 0320 	orr.w	r3, r3, #32
 800d25c:	6023      	str	r3, [r4, #0]
 800d25e:	2378      	movs	r3, #120	; 0x78
 800d260:	4828      	ldr	r0, [pc, #160]	; (800d304 <_printf_i+0x248>)
 800d262:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d266:	e7e3      	b.n	800d230 <_printf_i+0x174>
 800d268:	0659      	lsls	r1, r3, #25
 800d26a:	bf48      	it	mi
 800d26c:	b2b6      	uxthmi	r6, r6
 800d26e:	e7e6      	b.n	800d23e <_printf_i+0x182>
 800d270:	4615      	mov	r5, r2
 800d272:	e7bb      	b.n	800d1ec <_printf_i+0x130>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	6826      	ldr	r6, [r4, #0]
 800d278:	6961      	ldr	r1, [r4, #20]
 800d27a:	1d18      	adds	r0, r3, #4
 800d27c:	6028      	str	r0, [r5, #0]
 800d27e:	0635      	lsls	r5, r6, #24
 800d280:	681b      	ldr	r3, [r3, #0]
 800d282:	d501      	bpl.n	800d288 <_printf_i+0x1cc>
 800d284:	6019      	str	r1, [r3, #0]
 800d286:	e002      	b.n	800d28e <_printf_i+0x1d2>
 800d288:	0670      	lsls	r0, r6, #25
 800d28a:	d5fb      	bpl.n	800d284 <_printf_i+0x1c8>
 800d28c:	8019      	strh	r1, [r3, #0]
 800d28e:	2300      	movs	r3, #0
 800d290:	6123      	str	r3, [r4, #16]
 800d292:	4615      	mov	r5, r2
 800d294:	e7ba      	b.n	800d20c <_printf_i+0x150>
 800d296:	682b      	ldr	r3, [r5, #0]
 800d298:	1d1a      	adds	r2, r3, #4
 800d29a:	602a      	str	r2, [r5, #0]
 800d29c:	681d      	ldr	r5, [r3, #0]
 800d29e:	6862      	ldr	r2, [r4, #4]
 800d2a0:	2100      	movs	r1, #0
 800d2a2:	4628      	mov	r0, r5
 800d2a4:	f7f2 ffa4 	bl	80001f0 <memchr>
 800d2a8:	b108      	cbz	r0, 800d2ae <_printf_i+0x1f2>
 800d2aa:	1b40      	subs	r0, r0, r5
 800d2ac:	6060      	str	r0, [r4, #4]
 800d2ae:	6863      	ldr	r3, [r4, #4]
 800d2b0:	6123      	str	r3, [r4, #16]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d2b8:	e7a8      	b.n	800d20c <_printf_i+0x150>
 800d2ba:	6923      	ldr	r3, [r4, #16]
 800d2bc:	462a      	mov	r2, r5
 800d2be:	4649      	mov	r1, r9
 800d2c0:	4640      	mov	r0, r8
 800d2c2:	47d0      	blx	sl
 800d2c4:	3001      	adds	r0, #1
 800d2c6:	d0ab      	beq.n	800d220 <_printf_i+0x164>
 800d2c8:	6823      	ldr	r3, [r4, #0]
 800d2ca:	079b      	lsls	r3, r3, #30
 800d2cc:	d413      	bmi.n	800d2f6 <_printf_i+0x23a>
 800d2ce:	68e0      	ldr	r0, [r4, #12]
 800d2d0:	9b03      	ldr	r3, [sp, #12]
 800d2d2:	4298      	cmp	r0, r3
 800d2d4:	bfb8      	it	lt
 800d2d6:	4618      	movlt	r0, r3
 800d2d8:	e7a4      	b.n	800d224 <_printf_i+0x168>
 800d2da:	2301      	movs	r3, #1
 800d2dc:	4632      	mov	r2, r6
 800d2de:	4649      	mov	r1, r9
 800d2e0:	4640      	mov	r0, r8
 800d2e2:	47d0      	blx	sl
 800d2e4:	3001      	adds	r0, #1
 800d2e6:	d09b      	beq.n	800d220 <_printf_i+0x164>
 800d2e8:	3501      	adds	r5, #1
 800d2ea:	68e3      	ldr	r3, [r4, #12]
 800d2ec:	9903      	ldr	r1, [sp, #12]
 800d2ee:	1a5b      	subs	r3, r3, r1
 800d2f0:	42ab      	cmp	r3, r5
 800d2f2:	dcf2      	bgt.n	800d2da <_printf_i+0x21e>
 800d2f4:	e7eb      	b.n	800d2ce <_printf_i+0x212>
 800d2f6:	2500      	movs	r5, #0
 800d2f8:	f104 0619 	add.w	r6, r4, #25
 800d2fc:	e7f5      	b.n	800d2ea <_printf_i+0x22e>
 800d2fe:	bf00      	nop
 800d300:	080115f2 	.word	0x080115f2
 800d304:	08011603 	.word	0x08011603

0800d308 <_scanf_float>:
 800d308:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d30c:	b087      	sub	sp, #28
 800d30e:	4617      	mov	r7, r2
 800d310:	9303      	str	r3, [sp, #12]
 800d312:	688b      	ldr	r3, [r1, #8]
 800d314:	1e5a      	subs	r2, r3, #1
 800d316:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800d31a:	bf83      	ittte	hi
 800d31c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800d320:	195b      	addhi	r3, r3, r5
 800d322:	9302      	strhi	r3, [sp, #8]
 800d324:	2300      	movls	r3, #0
 800d326:	bf86      	itte	hi
 800d328:	f240 135d 	movwhi	r3, #349	; 0x15d
 800d32c:	608b      	strhi	r3, [r1, #8]
 800d32e:	9302      	strls	r3, [sp, #8]
 800d330:	680b      	ldr	r3, [r1, #0]
 800d332:	468b      	mov	fp, r1
 800d334:	2500      	movs	r5, #0
 800d336:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800d33a:	f84b 3b1c 	str.w	r3, [fp], #28
 800d33e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800d342:	4680      	mov	r8, r0
 800d344:	460c      	mov	r4, r1
 800d346:	465e      	mov	r6, fp
 800d348:	46aa      	mov	sl, r5
 800d34a:	46a9      	mov	r9, r5
 800d34c:	9501      	str	r5, [sp, #4]
 800d34e:	68a2      	ldr	r2, [r4, #8]
 800d350:	b152      	cbz	r2, 800d368 <_scanf_float+0x60>
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2b4e      	cmp	r3, #78	; 0x4e
 800d358:	d864      	bhi.n	800d424 <_scanf_float+0x11c>
 800d35a:	2b40      	cmp	r3, #64	; 0x40
 800d35c:	d83c      	bhi.n	800d3d8 <_scanf_float+0xd0>
 800d35e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800d362:	b2c8      	uxtb	r0, r1
 800d364:	280e      	cmp	r0, #14
 800d366:	d93a      	bls.n	800d3de <_scanf_float+0xd6>
 800d368:	f1b9 0f00 	cmp.w	r9, #0
 800d36c:	d003      	beq.n	800d376 <_scanf_float+0x6e>
 800d36e:	6823      	ldr	r3, [r4, #0]
 800d370:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d374:	6023      	str	r3, [r4, #0]
 800d376:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d37a:	f1ba 0f01 	cmp.w	sl, #1
 800d37e:	f200 8113 	bhi.w	800d5a8 <_scanf_float+0x2a0>
 800d382:	455e      	cmp	r6, fp
 800d384:	f200 8105 	bhi.w	800d592 <_scanf_float+0x28a>
 800d388:	2501      	movs	r5, #1
 800d38a:	4628      	mov	r0, r5
 800d38c:	b007      	add	sp, #28
 800d38e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d392:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800d396:	2a0d      	cmp	r2, #13
 800d398:	d8e6      	bhi.n	800d368 <_scanf_float+0x60>
 800d39a:	a101      	add	r1, pc, #4	; (adr r1, 800d3a0 <_scanf_float+0x98>)
 800d39c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d3a0:	0800d4df 	.word	0x0800d4df
 800d3a4:	0800d369 	.word	0x0800d369
 800d3a8:	0800d369 	.word	0x0800d369
 800d3ac:	0800d369 	.word	0x0800d369
 800d3b0:	0800d53f 	.word	0x0800d53f
 800d3b4:	0800d517 	.word	0x0800d517
 800d3b8:	0800d369 	.word	0x0800d369
 800d3bc:	0800d369 	.word	0x0800d369
 800d3c0:	0800d4ed 	.word	0x0800d4ed
 800d3c4:	0800d369 	.word	0x0800d369
 800d3c8:	0800d369 	.word	0x0800d369
 800d3cc:	0800d369 	.word	0x0800d369
 800d3d0:	0800d369 	.word	0x0800d369
 800d3d4:	0800d4a5 	.word	0x0800d4a5
 800d3d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800d3dc:	e7db      	b.n	800d396 <_scanf_float+0x8e>
 800d3de:	290e      	cmp	r1, #14
 800d3e0:	d8c2      	bhi.n	800d368 <_scanf_float+0x60>
 800d3e2:	a001      	add	r0, pc, #4	; (adr r0, 800d3e8 <_scanf_float+0xe0>)
 800d3e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800d3e8:	0800d497 	.word	0x0800d497
 800d3ec:	0800d369 	.word	0x0800d369
 800d3f0:	0800d497 	.word	0x0800d497
 800d3f4:	0800d52b 	.word	0x0800d52b
 800d3f8:	0800d369 	.word	0x0800d369
 800d3fc:	0800d445 	.word	0x0800d445
 800d400:	0800d481 	.word	0x0800d481
 800d404:	0800d481 	.word	0x0800d481
 800d408:	0800d481 	.word	0x0800d481
 800d40c:	0800d481 	.word	0x0800d481
 800d410:	0800d481 	.word	0x0800d481
 800d414:	0800d481 	.word	0x0800d481
 800d418:	0800d481 	.word	0x0800d481
 800d41c:	0800d481 	.word	0x0800d481
 800d420:	0800d481 	.word	0x0800d481
 800d424:	2b6e      	cmp	r3, #110	; 0x6e
 800d426:	d809      	bhi.n	800d43c <_scanf_float+0x134>
 800d428:	2b60      	cmp	r3, #96	; 0x60
 800d42a:	d8b2      	bhi.n	800d392 <_scanf_float+0x8a>
 800d42c:	2b54      	cmp	r3, #84	; 0x54
 800d42e:	d077      	beq.n	800d520 <_scanf_float+0x218>
 800d430:	2b59      	cmp	r3, #89	; 0x59
 800d432:	d199      	bne.n	800d368 <_scanf_float+0x60>
 800d434:	2d07      	cmp	r5, #7
 800d436:	d197      	bne.n	800d368 <_scanf_float+0x60>
 800d438:	2508      	movs	r5, #8
 800d43a:	e029      	b.n	800d490 <_scanf_float+0x188>
 800d43c:	2b74      	cmp	r3, #116	; 0x74
 800d43e:	d06f      	beq.n	800d520 <_scanf_float+0x218>
 800d440:	2b79      	cmp	r3, #121	; 0x79
 800d442:	e7f6      	b.n	800d432 <_scanf_float+0x12a>
 800d444:	6821      	ldr	r1, [r4, #0]
 800d446:	05c8      	lsls	r0, r1, #23
 800d448:	d51a      	bpl.n	800d480 <_scanf_float+0x178>
 800d44a:	9b02      	ldr	r3, [sp, #8]
 800d44c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d450:	6021      	str	r1, [r4, #0]
 800d452:	f109 0901 	add.w	r9, r9, #1
 800d456:	b11b      	cbz	r3, 800d460 <_scanf_float+0x158>
 800d458:	3b01      	subs	r3, #1
 800d45a:	3201      	adds	r2, #1
 800d45c:	9302      	str	r3, [sp, #8]
 800d45e:	60a2      	str	r2, [r4, #8]
 800d460:	68a3      	ldr	r3, [r4, #8]
 800d462:	3b01      	subs	r3, #1
 800d464:	60a3      	str	r3, [r4, #8]
 800d466:	6923      	ldr	r3, [r4, #16]
 800d468:	3301      	adds	r3, #1
 800d46a:	6123      	str	r3, [r4, #16]
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	3b01      	subs	r3, #1
 800d470:	2b00      	cmp	r3, #0
 800d472:	607b      	str	r3, [r7, #4]
 800d474:	f340 8084 	ble.w	800d580 <_scanf_float+0x278>
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	3301      	adds	r3, #1
 800d47c:	603b      	str	r3, [r7, #0]
 800d47e:	e766      	b.n	800d34e <_scanf_float+0x46>
 800d480:	eb1a 0f05 	cmn.w	sl, r5
 800d484:	f47f af70 	bne.w	800d368 <_scanf_float+0x60>
 800d488:	6822      	ldr	r2, [r4, #0]
 800d48a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d48e:	6022      	str	r2, [r4, #0]
 800d490:	f806 3b01 	strb.w	r3, [r6], #1
 800d494:	e7e4      	b.n	800d460 <_scanf_float+0x158>
 800d496:	6822      	ldr	r2, [r4, #0]
 800d498:	0610      	lsls	r0, r2, #24
 800d49a:	f57f af65 	bpl.w	800d368 <_scanf_float+0x60>
 800d49e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d4a2:	e7f4      	b.n	800d48e <_scanf_float+0x186>
 800d4a4:	f1ba 0f00 	cmp.w	sl, #0
 800d4a8:	d10e      	bne.n	800d4c8 <_scanf_float+0x1c0>
 800d4aa:	f1b9 0f00 	cmp.w	r9, #0
 800d4ae:	d10e      	bne.n	800d4ce <_scanf_float+0x1c6>
 800d4b0:	6822      	ldr	r2, [r4, #0]
 800d4b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d4b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d4ba:	d108      	bne.n	800d4ce <_scanf_float+0x1c6>
 800d4bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d4c0:	6022      	str	r2, [r4, #0]
 800d4c2:	f04f 0a01 	mov.w	sl, #1
 800d4c6:	e7e3      	b.n	800d490 <_scanf_float+0x188>
 800d4c8:	f1ba 0f02 	cmp.w	sl, #2
 800d4cc:	d055      	beq.n	800d57a <_scanf_float+0x272>
 800d4ce:	2d01      	cmp	r5, #1
 800d4d0:	d002      	beq.n	800d4d8 <_scanf_float+0x1d0>
 800d4d2:	2d04      	cmp	r5, #4
 800d4d4:	f47f af48 	bne.w	800d368 <_scanf_float+0x60>
 800d4d8:	3501      	adds	r5, #1
 800d4da:	b2ed      	uxtb	r5, r5
 800d4dc:	e7d8      	b.n	800d490 <_scanf_float+0x188>
 800d4de:	f1ba 0f01 	cmp.w	sl, #1
 800d4e2:	f47f af41 	bne.w	800d368 <_scanf_float+0x60>
 800d4e6:	f04f 0a02 	mov.w	sl, #2
 800d4ea:	e7d1      	b.n	800d490 <_scanf_float+0x188>
 800d4ec:	b97d      	cbnz	r5, 800d50e <_scanf_float+0x206>
 800d4ee:	f1b9 0f00 	cmp.w	r9, #0
 800d4f2:	f47f af3c 	bne.w	800d36e <_scanf_float+0x66>
 800d4f6:	6822      	ldr	r2, [r4, #0]
 800d4f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d4fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d500:	f47f af39 	bne.w	800d376 <_scanf_float+0x6e>
 800d504:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d508:	6022      	str	r2, [r4, #0]
 800d50a:	2501      	movs	r5, #1
 800d50c:	e7c0      	b.n	800d490 <_scanf_float+0x188>
 800d50e:	2d03      	cmp	r5, #3
 800d510:	d0e2      	beq.n	800d4d8 <_scanf_float+0x1d0>
 800d512:	2d05      	cmp	r5, #5
 800d514:	e7de      	b.n	800d4d4 <_scanf_float+0x1cc>
 800d516:	2d02      	cmp	r5, #2
 800d518:	f47f af26 	bne.w	800d368 <_scanf_float+0x60>
 800d51c:	2503      	movs	r5, #3
 800d51e:	e7b7      	b.n	800d490 <_scanf_float+0x188>
 800d520:	2d06      	cmp	r5, #6
 800d522:	f47f af21 	bne.w	800d368 <_scanf_float+0x60>
 800d526:	2507      	movs	r5, #7
 800d528:	e7b2      	b.n	800d490 <_scanf_float+0x188>
 800d52a:	6822      	ldr	r2, [r4, #0]
 800d52c:	0591      	lsls	r1, r2, #22
 800d52e:	f57f af1b 	bpl.w	800d368 <_scanf_float+0x60>
 800d532:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d536:	6022      	str	r2, [r4, #0]
 800d538:	f8cd 9004 	str.w	r9, [sp, #4]
 800d53c:	e7a8      	b.n	800d490 <_scanf_float+0x188>
 800d53e:	6822      	ldr	r2, [r4, #0]
 800d540:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d544:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d548:	d006      	beq.n	800d558 <_scanf_float+0x250>
 800d54a:	0550      	lsls	r0, r2, #21
 800d54c:	f57f af0c 	bpl.w	800d368 <_scanf_float+0x60>
 800d550:	f1b9 0f00 	cmp.w	r9, #0
 800d554:	f43f af0f 	beq.w	800d376 <_scanf_float+0x6e>
 800d558:	0591      	lsls	r1, r2, #22
 800d55a:	bf58      	it	pl
 800d55c:	9901      	ldrpl	r1, [sp, #4]
 800d55e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d562:	bf58      	it	pl
 800d564:	eba9 0101 	subpl.w	r1, r9, r1
 800d568:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d56c:	bf58      	it	pl
 800d56e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d572:	6022      	str	r2, [r4, #0]
 800d574:	f04f 0900 	mov.w	r9, #0
 800d578:	e78a      	b.n	800d490 <_scanf_float+0x188>
 800d57a:	f04f 0a03 	mov.w	sl, #3
 800d57e:	e787      	b.n	800d490 <_scanf_float+0x188>
 800d580:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d584:	4639      	mov	r1, r7
 800d586:	4640      	mov	r0, r8
 800d588:	4798      	blx	r3
 800d58a:	2800      	cmp	r0, #0
 800d58c:	f43f aedf 	beq.w	800d34e <_scanf_float+0x46>
 800d590:	e6ea      	b.n	800d368 <_scanf_float+0x60>
 800d592:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d596:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d59a:	463a      	mov	r2, r7
 800d59c:	4640      	mov	r0, r8
 800d59e:	4798      	blx	r3
 800d5a0:	6923      	ldr	r3, [r4, #16]
 800d5a2:	3b01      	subs	r3, #1
 800d5a4:	6123      	str	r3, [r4, #16]
 800d5a6:	e6ec      	b.n	800d382 <_scanf_float+0x7a>
 800d5a8:	1e6b      	subs	r3, r5, #1
 800d5aa:	2b06      	cmp	r3, #6
 800d5ac:	d825      	bhi.n	800d5fa <_scanf_float+0x2f2>
 800d5ae:	2d02      	cmp	r5, #2
 800d5b0:	d836      	bhi.n	800d620 <_scanf_float+0x318>
 800d5b2:	455e      	cmp	r6, fp
 800d5b4:	f67f aee8 	bls.w	800d388 <_scanf_float+0x80>
 800d5b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5bc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d5c0:	463a      	mov	r2, r7
 800d5c2:	4640      	mov	r0, r8
 800d5c4:	4798      	blx	r3
 800d5c6:	6923      	ldr	r3, [r4, #16]
 800d5c8:	3b01      	subs	r3, #1
 800d5ca:	6123      	str	r3, [r4, #16]
 800d5cc:	e7f1      	b.n	800d5b2 <_scanf_float+0x2aa>
 800d5ce:	9802      	ldr	r0, [sp, #8]
 800d5d0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d5d4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d5d8:	9002      	str	r0, [sp, #8]
 800d5da:	463a      	mov	r2, r7
 800d5dc:	4640      	mov	r0, r8
 800d5de:	4798      	blx	r3
 800d5e0:	6923      	ldr	r3, [r4, #16]
 800d5e2:	3b01      	subs	r3, #1
 800d5e4:	6123      	str	r3, [r4, #16]
 800d5e6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d5ea:	fa5f fa8a 	uxtb.w	sl, sl
 800d5ee:	f1ba 0f02 	cmp.w	sl, #2
 800d5f2:	d1ec      	bne.n	800d5ce <_scanf_float+0x2c6>
 800d5f4:	3d03      	subs	r5, #3
 800d5f6:	b2ed      	uxtb	r5, r5
 800d5f8:	1b76      	subs	r6, r6, r5
 800d5fa:	6823      	ldr	r3, [r4, #0]
 800d5fc:	05da      	lsls	r2, r3, #23
 800d5fe:	d52f      	bpl.n	800d660 <_scanf_float+0x358>
 800d600:	055b      	lsls	r3, r3, #21
 800d602:	d510      	bpl.n	800d626 <_scanf_float+0x31e>
 800d604:	455e      	cmp	r6, fp
 800d606:	f67f aebf 	bls.w	800d388 <_scanf_float+0x80>
 800d60a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d60e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d612:	463a      	mov	r2, r7
 800d614:	4640      	mov	r0, r8
 800d616:	4798      	blx	r3
 800d618:	6923      	ldr	r3, [r4, #16]
 800d61a:	3b01      	subs	r3, #1
 800d61c:	6123      	str	r3, [r4, #16]
 800d61e:	e7f1      	b.n	800d604 <_scanf_float+0x2fc>
 800d620:	46aa      	mov	sl, r5
 800d622:	9602      	str	r6, [sp, #8]
 800d624:	e7df      	b.n	800d5e6 <_scanf_float+0x2de>
 800d626:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d62a:	6923      	ldr	r3, [r4, #16]
 800d62c:	2965      	cmp	r1, #101	; 0x65
 800d62e:	f103 33ff 	add.w	r3, r3, #4294967295
 800d632:	f106 35ff 	add.w	r5, r6, #4294967295
 800d636:	6123      	str	r3, [r4, #16]
 800d638:	d00c      	beq.n	800d654 <_scanf_float+0x34c>
 800d63a:	2945      	cmp	r1, #69	; 0x45
 800d63c:	d00a      	beq.n	800d654 <_scanf_float+0x34c>
 800d63e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d642:	463a      	mov	r2, r7
 800d644:	4640      	mov	r0, r8
 800d646:	4798      	blx	r3
 800d648:	6923      	ldr	r3, [r4, #16]
 800d64a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d64e:	3b01      	subs	r3, #1
 800d650:	1eb5      	subs	r5, r6, #2
 800d652:	6123      	str	r3, [r4, #16]
 800d654:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d658:	463a      	mov	r2, r7
 800d65a:	4640      	mov	r0, r8
 800d65c:	4798      	blx	r3
 800d65e:	462e      	mov	r6, r5
 800d660:	6825      	ldr	r5, [r4, #0]
 800d662:	f015 0510 	ands.w	r5, r5, #16
 800d666:	d159      	bne.n	800d71c <_scanf_float+0x414>
 800d668:	7035      	strb	r5, [r6, #0]
 800d66a:	6823      	ldr	r3, [r4, #0]
 800d66c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d674:	d11b      	bne.n	800d6ae <_scanf_float+0x3a6>
 800d676:	9b01      	ldr	r3, [sp, #4]
 800d678:	454b      	cmp	r3, r9
 800d67a:	eba3 0209 	sub.w	r2, r3, r9
 800d67e:	d123      	bne.n	800d6c8 <_scanf_float+0x3c0>
 800d680:	2200      	movs	r2, #0
 800d682:	4659      	mov	r1, fp
 800d684:	4640      	mov	r0, r8
 800d686:	f000 fe99 	bl	800e3bc <_strtod_r>
 800d68a:	6822      	ldr	r2, [r4, #0]
 800d68c:	9b03      	ldr	r3, [sp, #12]
 800d68e:	f012 0f02 	tst.w	r2, #2
 800d692:	ec57 6b10 	vmov	r6, r7, d0
 800d696:	681b      	ldr	r3, [r3, #0]
 800d698:	d021      	beq.n	800d6de <_scanf_float+0x3d6>
 800d69a:	9903      	ldr	r1, [sp, #12]
 800d69c:	1d1a      	adds	r2, r3, #4
 800d69e:	600a      	str	r2, [r1, #0]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	e9c3 6700 	strd	r6, r7, [r3]
 800d6a6:	68e3      	ldr	r3, [r4, #12]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	60e3      	str	r3, [r4, #12]
 800d6ac:	e66d      	b.n	800d38a <_scanf_float+0x82>
 800d6ae:	9b04      	ldr	r3, [sp, #16]
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d0e5      	beq.n	800d680 <_scanf_float+0x378>
 800d6b4:	9905      	ldr	r1, [sp, #20]
 800d6b6:	230a      	movs	r3, #10
 800d6b8:	462a      	mov	r2, r5
 800d6ba:	3101      	adds	r1, #1
 800d6bc:	4640      	mov	r0, r8
 800d6be:	f000 ff05 	bl	800e4cc <_strtol_r>
 800d6c2:	9b04      	ldr	r3, [sp, #16]
 800d6c4:	9e05      	ldr	r6, [sp, #20]
 800d6c6:	1ac2      	subs	r2, r0, r3
 800d6c8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d6cc:	429e      	cmp	r6, r3
 800d6ce:	bf28      	it	cs
 800d6d0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d6d4:	4912      	ldr	r1, [pc, #72]	; (800d720 <_scanf_float+0x418>)
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 f82c 	bl	800d734 <siprintf>
 800d6dc:	e7d0      	b.n	800d680 <_scanf_float+0x378>
 800d6de:	9903      	ldr	r1, [sp, #12]
 800d6e0:	f012 0f04 	tst.w	r2, #4
 800d6e4:	f103 0204 	add.w	r2, r3, #4
 800d6e8:	600a      	str	r2, [r1, #0]
 800d6ea:	d1d9      	bne.n	800d6a0 <_scanf_float+0x398>
 800d6ec:	f8d3 8000 	ldr.w	r8, [r3]
 800d6f0:	ee10 2a10 	vmov	r2, s0
 800d6f4:	ee10 0a10 	vmov	r0, s0
 800d6f8:	463b      	mov	r3, r7
 800d6fa:	4639      	mov	r1, r7
 800d6fc:	f7f3 fa1e 	bl	8000b3c <__aeabi_dcmpun>
 800d700:	b128      	cbz	r0, 800d70e <_scanf_float+0x406>
 800d702:	4808      	ldr	r0, [pc, #32]	; (800d724 <_scanf_float+0x41c>)
 800d704:	f000 f810 	bl	800d728 <nanf>
 800d708:	ed88 0a00 	vstr	s0, [r8]
 800d70c:	e7cb      	b.n	800d6a6 <_scanf_float+0x39e>
 800d70e:	4630      	mov	r0, r6
 800d710:	4639      	mov	r1, r7
 800d712:	f7f3 fa71 	bl	8000bf8 <__aeabi_d2f>
 800d716:	f8c8 0000 	str.w	r0, [r8]
 800d71a:	e7c4      	b.n	800d6a6 <_scanf_float+0x39e>
 800d71c:	2500      	movs	r5, #0
 800d71e:	e634      	b.n	800d38a <_scanf_float+0x82>
 800d720:	08011614 	.word	0x08011614
 800d724:	08011a20 	.word	0x08011a20

0800d728 <nanf>:
 800d728:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d730 <nanf+0x8>
 800d72c:	4770      	bx	lr
 800d72e:	bf00      	nop
 800d730:	7fc00000 	.word	0x7fc00000

0800d734 <siprintf>:
 800d734:	b40e      	push	{r1, r2, r3}
 800d736:	b500      	push	{lr}
 800d738:	b09c      	sub	sp, #112	; 0x70
 800d73a:	ab1d      	add	r3, sp, #116	; 0x74
 800d73c:	9002      	str	r0, [sp, #8]
 800d73e:	9006      	str	r0, [sp, #24]
 800d740:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d744:	4809      	ldr	r0, [pc, #36]	; (800d76c <siprintf+0x38>)
 800d746:	9107      	str	r1, [sp, #28]
 800d748:	9104      	str	r1, [sp, #16]
 800d74a:	4909      	ldr	r1, [pc, #36]	; (800d770 <siprintf+0x3c>)
 800d74c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d750:	9105      	str	r1, [sp, #20]
 800d752:	6800      	ldr	r0, [r0, #0]
 800d754:	9301      	str	r3, [sp, #4]
 800d756:	a902      	add	r1, sp, #8
 800d758:	f002 fed6 	bl	8010508 <_svfiprintf_r>
 800d75c:	9b02      	ldr	r3, [sp, #8]
 800d75e:	2200      	movs	r2, #0
 800d760:	701a      	strb	r2, [r3, #0]
 800d762:	b01c      	add	sp, #112	; 0x70
 800d764:	f85d eb04 	ldr.w	lr, [sp], #4
 800d768:	b003      	add	sp, #12
 800d76a:	4770      	bx	lr
 800d76c:	20000264 	.word	0x20000264
 800d770:	ffff0208 	.word	0xffff0208

0800d774 <sulp>:
 800d774:	b570      	push	{r4, r5, r6, lr}
 800d776:	4604      	mov	r4, r0
 800d778:	460d      	mov	r5, r1
 800d77a:	ec45 4b10 	vmov	d0, r4, r5
 800d77e:	4616      	mov	r6, r2
 800d780:	f002 fc20 	bl	800ffc4 <__ulp>
 800d784:	ec51 0b10 	vmov	r0, r1, d0
 800d788:	b17e      	cbz	r6, 800d7aa <sulp+0x36>
 800d78a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d78e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d792:	2b00      	cmp	r3, #0
 800d794:	dd09      	ble.n	800d7aa <sulp+0x36>
 800d796:	051b      	lsls	r3, r3, #20
 800d798:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d79c:	2400      	movs	r4, #0
 800d79e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d7a2:	4622      	mov	r2, r4
 800d7a4:	462b      	mov	r3, r5
 800d7a6:	f7f2 ff2f 	bl	8000608 <__aeabi_dmul>
 800d7aa:	bd70      	pop	{r4, r5, r6, pc}
 800d7ac:	0000      	movs	r0, r0
	...

0800d7b0 <_strtod_l>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	ed2d 8b02 	vpush	{d8}
 800d7b8:	b09d      	sub	sp, #116	; 0x74
 800d7ba:	461f      	mov	r7, r3
 800d7bc:	2300      	movs	r3, #0
 800d7be:	9318      	str	r3, [sp, #96]	; 0x60
 800d7c0:	4ba2      	ldr	r3, [pc, #648]	; (800da4c <_strtod_l+0x29c>)
 800d7c2:	9213      	str	r2, [sp, #76]	; 0x4c
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	9305      	str	r3, [sp, #20]
 800d7c8:	4604      	mov	r4, r0
 800d7ca:	4618      	mov	r0, r3
 800d7cc:	4688      	mov	r8, r1
 800d7ce:	f7f2 fd07 	bl	80001e0 <strlen>
 800d7d2:	f04f 0a00 	mov.w	sl, #0
 800d7d6:	4605      	mov	r5, r0
 800d7d8:	f04f 0b00 	mov.w	fp, #0
 800d7dc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d7e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d7e2:	781a      	ldrb	r2, [r3, #0]
 800d7e4:	2a2b      	cmp	r2, #43	; 0x2b
 800d7e6:	d04e      	beq.n	800d886 <_strtod_l+0xd6>
 800d7e8:	d83b      	bhi.n	800d862 <_strtod_l+0xb2>
 800d7ea:	2a0d      	cmp	r2, #13
 800d7ec:	d834      	bhi.n	800d858 <_strtod_l+0xa8>
 800d7ee:	2a08      	cmp	r2, #8
 800d7f0:	d834      	bhi.n	800d85c <_strtod_l+0xac>
 800d7f2:	2a00      	cmp	r2, #0
 800d7f4:	d03e      	beq.n	800d874 <_strtod_l+0xc4>
 800d7f6:	2300      	movs	r3, #0
 800d7f8:	930a      	str	r3, [sp, #40]	; 0x28
 800d7fa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d7fc:	7833      	ldrb	r3, [r6, #0]
 800d7fe:	2b30      	cmp	r3, #48	; 0x30
 800d800:	f040 80b0 	bne.w	800d964 <_strtod_l+0x1b4>
 800d804:	7873      	ldrb	r3, [r6, #1]
 800d806:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d80a:	2b58      	cmp	r3, #88	; 0x58
 800d80c:	d168      	bne.n	800d8e0 <_strtod_l+0x130>
 800d80e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d810:	9301      	str	r3, [sp, #4]
 800d812:	ab18      	add	r3, sp, #96	; 0x60
 800d814:	9702      	str	r7, [sp, #8]
 800d816:	9300      	str	r3, [sp, #0]
 800d818:	4a8d      	ldr	r2, [pc, #564]	; (800da50 <_strtod_l+0x2a0>)
 800d81a:	ab19      	add	r3, sp, #100	; 0x64
 800d81c:	a917      	add	r1, sp, #92	; 0x5c
 800d81e:	4620      	mov	r0, r4
 800d820:	f001 fd38 	bl	800f294 <__gethex>
 800d824:	f010 0707 	ands.w	r7, r0, #7
 800d828:	4605      	mov	r5, r0
 800d82a:	d005      	beq.n	800d838 <_strtod_l+0x88>
 800d82c:	2f06      	cmp	r7, #6
 800d82e:	d12c      	bne.n	800d88a <_strtod_l+0xda>
 800d830:	3601      	adds	r6, #1
 800d832:	2300      	movs	r3, #0
 800d834:	9617      	str	r6, [sp, #92]	; 0x5c
 800d836:	930a      	str	r3, [sp, #40]	; 0x28
 800d838:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d83a:	2b00      	cmp	r3, #0
 800d83c:	f040 8590 	bne.w	800e360 <_strtod_l+0xbb0>
 800d840:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d842:	b1eb      	cbz	r3, 800d880 <_strtod_l+0xd0>
 800d844:	4652      	mov	r2, sl
 800d846:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d84a:	ec43 2b10 	vmov	d0, r2, r3
 800d84e:	b01d      	add	sp, #116	; 0x74
 800d850:	ecbd 8b02 	vpop	{d8}
 800d854:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d858:	2a20      	cmp	r2, #32
 800d85a:	d1cc      	bne.n	800d7f6 <_strtod_l+0x46>
 800d85c:	3301      	adds	r3, #1
 800d85e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d860:	e7be      	b.n	800d7e0 <_strtod_l+0x30>
 800d862:	2a2d      	cmp	r2, #45	; 0x2d
 800d864:	d1c7      	bne.n	800d7f6 <_strtod_l+0x46>
 800d866:	2201      	movs	r2, #1
 800d868:	920a      	str	r2, [sp, #40]	; 0x28
 800d86a:	1c5a      	adds	r2, r3, #1
 800d86c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d86e:	785b      	ldrb	r3, [r3, #1]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d1c2      	bne.n	800d7fa <_strtod_l+0x4a>
 800d874:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d876:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d87a:	2b00      	cmp	r3, #0
 800d87c:	f040 856e 	bne.w	800e35c <_strtod_l+0xbac>
 800d880:	4652      	mov	r2, sl
 800d882:	465b      	mov	r3, fp
 800d884:	e7e1      	b.n	800d84a <_strtod_l+0x9a>
 800d886:	2200      	movs	r2, #0
 800d888:	e7ee      	b.n	800d868 <_strtod_l+0xb8>
 800d88a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d88c:	b13a      	cbz	r2, 800d89e <_strtod_l+0xee>
 800d88e:	2135      	movs	r1, #53	; 0x35
 800d890:	a81a      	add	r0, sp, #104	; 0x68
 800d892:	f002 fca2 	bl	80101da <__copybits>
 800d896:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d898:	4620      	mov	r0, r4
 800d89a:	f002 f861 	bl	800f960 <_Bfree>
 800d89e:	3f01      	subs	r7, #1
 800d8a0:	2f04      	cmp	r7, #4
 800d8a2:	d806      	bhi.n	800d8b2 <_strtod_l+0x102>
 800d8a4:	e8df f007 	tbb	[pc, r7]
 800d8a8:	1714030a 	.word	0x1714030a
 800d8ac:	0a          	.byte	0x0a
 800d8ad:	00          	.byte	0x00
 800d8ae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d8b2:	0728      	lsls	r0, r5, #28
 800d8b4:	d5c0      	bpl.n	800d838 <_strtod_l+0x88>
 800d8b6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d8ba:	e7bd      	b.n	800d838 <_strtod_l+0x88>
 800d8bc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d8c0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d8c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d8c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d8ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d8ce:	e7f0      	b.n	800d8b2 <_strtod_l+0x102>
 800d8d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 800da54 <_strtod_l+0x2a4>
 800d8d4:	e7ed      	b.n	800d8b2 <_strtod_l+0x102>
 800d8d6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d8da:	f04f 3aff 	mov.w	sl, #4294967295
 800d8de:	e7e8      	b.n	800d8b2 <_strtod_l+0x102>
 800d8e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8e2:	1c5a      	adds	r2, r3, #1
 800d8e4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d8e6:	785b      	ldrb	r3, [r3, #1]
 800d8e8:	2b30      	cmp	r3, #48	; 0x30
 800d8ea:	d0f9      	beq.n	800d8e0 <_strtod_l+0x130>
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d0a3      	beq.n	800d838 <_strtod_l+0x88>
 800d8f0:	2301      	movs	r3, #1
 800d8f2:	f04f 0900 	mov.w	r9, #0
 800d8f6:	9304      	str	r3, [sp, #16]
 800d8f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d8fa:	9308      	str	r3, [sp, #32]
 800d8fc:	f8cd 901c 	str.w	r9, [sp, #28]
 800d900:	464f      	mov	r7, r9
 800d902:	220a      	movs	r2, #10
 800d904:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d906:	7806      	ldrb	r6, [r0, #0]
 800d908:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d90c:	b2d9      	uxtb	r1, r3
 800d90e:	2909      	cmp	r1, #9
 800d910:	d92a      	bls.n	800d968 <_strtod_l+0x1b8>
 800d912:	9905      	ldr	r1, [sp, #20]
 800d914:	462a      	mov	r2, r5
 800d916:	f002 ff0f 	bl	8010738 <strncmp>
 800d91a:	b398      	cbz	r0, 800d984 <_strtod_l+0x1d4>
 800d91c:	2000      	movs	r0, #0
 800d91e:	4632      	mov	r2, r6
 800d920:	463d      	mov	r5, r7
 800d922:	9005      	str	r0, [sp, #20]
 800d924:	4603      	mov	r3, r0
 800d926:	2a65      	cmp	r2, #101	; 0x65
 800d928:	d001      	beq.n	800d92e <_strtod_l+0x17e>
 800d92a:	2a45      	cmp	r2, #69	; 0x45
 800d92c:	d118      	bne.n	800d960 <_strtod_l+0x1b0>
 800d92e:	b91d      	cbnz	r5, 800d938 <_strtod_l+0x188>
 800d930:	9a04      	ldr	r2, [sp, #16]
 800d932:	4302      	orrs	r2, r0
 800d934:	d09e      	beq.n	800d874 <_strtod_l+0xc4>
 800d936:	2500      	movs	r5, #0
 800d938:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d93c:	f108 0201 	add.w	r2, r8, #1
 800d940:	9217      	str	r2, [sp, #92]	; 0x5c
 800d942:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d946:	2a2b      	cmp	r2, #43	; 0x2b
 800d948:	d075      	beq.n	800da36 <_strtod_l+0x286>
 800d94a:	2a2d      	cmp	r2, #45	; 0x2d
 800d94c:	d07b      	beq.n	800da46 <_strtod_l+0x296>
 800d94e:	f04f 0c00 	mov.w	ip, #0
 800d952:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d956:	2909      	cmp	r1, #9
 800d958:	f240 8082 	bls.w	800da60 <_strtod_l+0x2b0>
 800d95c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d960:	2600      	movs	r6, #0
 800d962:	e09d      	b.n	800daa0 <_strtod_l+0x2f0>
 800d964:	2300      	movs	r3, #0
 800d966:	e7c4      	b.n	800d8f2 <_strtod_l+0x142>
 800d968:	2f08      	cmp	r7, #8
 800d96a:	bfd8      	it	le
 800d96c:	9907      	ldrle	r1, [sp, #28]
 800d96e:	f100 0001 	add.w	r0, r0, #1
 800d972:	bfda      	itte	le
 800d974:	fb02 3301 	mlale	r3, r2, r1, r3
 800d978:	9307      	strle	r3, [sp, #28]
 800d97a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d97e:	3701      	adds	r7, #1
 800d980:	9017      	str	r0, [sp, #92]	; 0x5c
 800d982:	e7bf      	b.n	800d904 <_strtod_l+0x154>
 800d984:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d986:	195a      	adds	r2, r3, r5
 800d988:	9217      	str	r2, [sp, #92]	; 0x5c
 800d98a:	5d5a      	ldrb	r2, [r3, r5]
 800d98c:	2f00      	cmp	r7, #0
 800d98e:	d037      	beq.n	800da00 <_strtod_l+0x250>
 800d990:	9005      	str	r0, [sp, #20]
 800d992:	463d      	mov	r5, r7
 800d994:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d998:	2b09      	cmp	r3, #9
 800d99a:	d912      	bls.n	800d9c2 <_strtod_l+0x212>
 800d99c:	2301      	movs	r3, #1
 800d99e:	e7c2      	b.n	800d926 <_strtod_l+0x176>
 800d9a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9a2:	1c5a      	adds	r2, r3, #1
 800d9a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d9a6:	785a      	ldrb	r2, [r3, #1]
 800d9a8:	3001      	adds	r0, #1
 800d9aa:	2a30      	cmp	r2, #48	; 0x30
 800d9ac:	d0f8      	beq.n	800d9a0 <_strtod_l+0x1f0>
 800d9ae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d9b2:	2b08      	cmp	r3, #8
 800d9b4:	f200 84d9 	bhi.w	800e36a <_strtod_l+0xbba>
 800d9b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d9ba:	9005      	str	r0, [sp, #20]
 800d9bc:	2000      	movs	r0, #0
 800d9be:	9308      	str	r3, [sp, #32]
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	3a30      	subs	r2, #48	; 0x30
 800d9c4:	f100 0301 	add.w	r3, r0, #1
 800d9c8:	d014      	beq.n	800d9f4 <_strtod_l+0x244>
 800d9ca:	9905      	ldr	r1, [sp, #20]
 800d9cc:	4419      	add	r1, r3
 800d9ce:	9105      	str	r1, [sp, #20]
 800d9d0:	462b      	mov	r3, r5
 800d9d2:	eb00 0e05 	add.w	lr, r0, r5
 800d9d6:	210a      	movs	r1, #10
 800d9d8:	4573      	cmp	r3, lr
 800d9da:	d113      	bne.n	800da04 <_strtod_l+0x254>
 800d9dc:	182b      	adds	r3, r5, r0
 800d9de:	2b08      	cmp	r3, #8
 800d9e0:	f105 0501 	add.w	r5, r5, #1
 800d9e4:	4405      	add	r5, r0
 800d9e6:	dc1c      	bgt.n	800da22 <_strtod_l+0x272>
 800d9e8:	9907      	ldr	r1, [sp, #28]
 800d9ea:	230a      	movs	r3, #10
 800d9ec:	fb03 2301 	mla	r3, r3, r1, r2
 800d9f0:	9307      	str	r3, [sp, #28]
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d9f6:	1c51      	adds	r1, r2, #1
 800d9f8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d9fa:	7852      	ldrb	r2, [r2, #1]
 800d9fc:	4618      	mov	r0, r3
 800d9fe:	e7c9      	b.n	800d994 <_strtod_l+0x1e4>
 800da00:	4638      	mov	r0, r7
 800da02:	e7d2      	b.n	800d9aa <_strtod_l+0x1fa>
 800da04:	2b08      	cmp	r3, #8
 800da06:	dc04      	bgt.n	800da12 <_strtod_l+0x262>
 800da08:	9e07      	ldr	r6, [sp, #28]
 800da0a:	434e      	muls	r6, r1
 800da0c:	9607      	str	r6, [sp, #28]
 800da0e:	3301      	adds	r3, #1
 800da10:	e7e2      	b.n	800d9d8 <_strtod_l+0x228>
 800da12:	f103 0c01 	add.w	ip, r3, #1
 800da16:	f1bc 0f10 	cmp.w	ip, #16
 800da1a:	bfd8      	it	le
 800da1c:	fb01 f909 	mulle.w	r9, r1, r9
 800da20:	e7f5      	b.n	800da0e <_strtod_l+0x25e>
 800da22:	2d10      	cmp	r5, #16
 800da24:	bfdc      	itt	le
 800da26:	230a      	movle	r3, #10
 800da28:	fb03 2909 	mlale	r9, r3, r9, r2
 800da2c:	e7e1      	b.n	800d9f2 <_strtod_l+0x242>
 800da2e:	2300      	movs	r3, #0
 800da30:	9305      	str	r3, [sp, #20]
 800da32:	2301      	movs	r3, #1
 800da34:	e77c      	b.n	800d930 <_strtod_l+0x180>
 800da36:	f04f 0c00 	mov.w	ip, #0
 800da3a:	f108 0202 	add.w	r2, r8, #2
 800da3e:	9217      	str	r2, [sp, #92]	; 0x5c
 800da40:	f898 2002 	ldrb.w	r2, [r8, #2]
 800da44:	e785      	b.n	800d952 <_strtod_l+0x1a2>
 800da46:	f04f 0c01 	mov.w	ip, #1
 800da4a:	e7f6      	b.n	800da3a <_strtod_l+0x28a>
 800da4c:	08011868 	.word	0x08011868
 800da50:	0801161c 	.word	0x0801161c
 800da54:	7ff00000 	.word	0x7ff00000
 800da58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da5a:	1c51      	adds	r1, r2, #1
 800da5c:	9117      	str	r1, [sp, #92]	; 0x5c
 800da5e:	7852      	ldrb	r2, [r2, #1]
 800da60:	2a30      	cmp	r2, #48	; 0x30
 800da62:	d0f9      	beq.n	800da58 <_strtod_l+0x2a8>
 800da64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800da68:	2908      	cmp	r1, #8
 800da6a:	f63f af79 	bhi.w	800d960 <_strtod_l+0x1b0>
 800da6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800da72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da74:	9206      	str	r2, [sp, #24]
 800da76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800da78:	1c51      	adds	r1, r2, #1
 800da7a:	9117      	str	r1, [sp, #92]	; 0x5c
 800da7c:	7852      	ldrb	r2, [r2, #1]
 800da7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800da82:	2e09      	cmp	r6, #9
 800da84:	d937      	bls.n	800daf6 <_strtod_l+0x346>
 800da86:	9e06      	ldr	r6, [sp, #24]
 800da88:	1b89      	subs	r1, r1, r6
 800da8a:	2908      	cmp	r1, #8
 800da8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800da90:	dc02      	bgt.n	800da98 <_strtod_l+0x2e8>
 800da92:	4576      	cmp	r6, lr
 800da94:	bfa8      	it	ge
 800da96:	4676      	movge	r6, lr
 800da98:	f1bc 0f00 	cmp.w	ip, #0
 800da9c:	d000      	beq.n	800daa0 <_strtod_l+0x2f0>
 800da9e:	4276      	negs	r6, r6
 800daa0:	2d00      	cmp	r5, #0
 800daa2:	d14d      	bne.n	800db40 <_strtod_l+0x390>
 800daa4:	9904      	ldr	r1, [sp, #16]
 800daa6:	4301      	orrs	r1, r0
 800daa8:	f47f aec6 	bne.w	800d838 <_strtod_l+0x88>
 800daac:	2b00      	cmp	r3, #0
 800daae:	f47f aee1 	bne.w	800d874 <_strtod_l+0xc4>
 800dab2:	2a69      	cmp	r2, #105	; 0x69
 800dab4:	d027      	beq.n	800db06 <_strtod_l+0x356>
 800dab6:	dc24      	bgt.n	800db02 <_strtod_l+0x352>
 800dab8:	2a49      	cmp	r2, #73	; 0x49
 800daba:	d024      	beq.n	800db06 <_strtod_l+0x356>
 800dabc:	2a4e      	cmp	r2, #78	; 0x4e
 800dabe:	f47f aed9 	bne.w	800d874 <_strtod_l+0xc4>
 800dac2:	499f      	ldr	r1, [pc, #636]	; (800dd40 <_strtod_l+0x590>)
 800dac4:	a817      	add	r0, sp, #92	; 0x5c
 800dac6:	f001 fe3d 	bl	800f744 <__match>
 800daca:	2800      	cmp	r0, #0
 800dacc:	f43f aed2 	beq.w	800d874 <_strtod_l+0xc4>
 800dad0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800dad2:	781b      	ldrb	r3, [r3, #0]
 800dad4:	2b28      	cmp	r3, #40	; 0x28
 800dad6:	d12d      	bne.n	800db34 <_strtod_l+0x384>
 800dad8:	499a      	ldr	r1, [pc, #616]	; (800dd44 <_strtod_l+0x594>)
 800dada:	aa1a      	add	r2, sp, #104	; 0x68
 800dadc:	a817      	add	r0, sp, #92	; 0x5c
 800dade:	f001 fe45 	bl	800f76c <__hexnan>
 800dae2:	2805      	cmp	r0, #5
 800dae4:	d126      	bne.n	800db34 <_strtod_l+0x384>
 800dae6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800dae8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800daec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800daf0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800daf4:	e6a0      	b.n	800d838 <_strtod_l+0x88>
 800daf6:	210a      	movs	r1, #10
 800daf8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800dafc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800db00:	e7b9      	b.n	800da76 <_strtod_l+0x2c6>
 800db02:	2a6e      	cmp	r2, #110	; 0x6e
 800db04:	e7db      	b.n	800dabe <_strtod_l+0x30e>
 800db06:	4990      	ldr	r1, [pc, #576]	; (800dd48 <_strtod_l+0x598>)
 800db08:	a817      	add	r0, sp, #92	; 0x5c
 800db0a:	f001 fe1b 	bl	800f744 <__match>
 800db0e:	2800      	cmp	r0, #0
 800db10:	f43f aeb0 	beq.w	800d874 <_strtod_l+0xc4>
 800db14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db16:	498d      	ldr	r1, [pc, #564]	; (800dd4c <_strtod_l+0x59c>)
 800db18:	3b01      	subs	r3, #1
 800db1a:	a817      	add	r0, sp, #92	; 0x5c
 800db1c:	9317      	str	r3, [sp, #92]	; 0x5c
 800db1e:	f001 fe11 	bl	800f744 <__match>
 800db22:	b910      	cbnz	r0, 800db2a <_strtod_l+0x37a>
 800db24:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800db26:	3301      	adds	r3, #1
 800db28:	9317      	str	r3, [sp, #92]	; 0x5c
 800db2a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800dd5c <_strtod_l+0x5ac>
 800db2e:	f04f 0a00 	mov.w	sl, #0
 800db32:	e681      	b.n	800d838 <_strtod_l+0x88>
 800db34:	4886      	ldr	r0, [pc, #536]	; (800dd50 <_strtod_l+0x5a0>)
 800db36:	f002 fde7 	bl	8010708 <nan>
 800db3a:	ec5b ab10 	vmov	sl, fp, d0
 800db3e:	e67b      	b.n	800d838 <_strtod_l+0x88>
 800db40:	9b05      	ldr	r3, [sp, #20]
 800db42:	9807      	ldr	r0, [sp, #28]
 800db44:	1af3      	subs	r3, r6, r3
 800db46:	2f00      	cmp	r7, #0
 800db48:	bf08      	it	eq
 800db4a:	462f      	moveq	r7, r5
 800db4c:	2d10      	cmp	r5, #16
 800db4e:	9306      	str	r3, [sp, #24]
 800db50:	46a8      	mov	r8, r5
 800db52:	bfa8      	it	ge
 800db54:	f04f 0810 	movge.w	r8, #16
 800db58:	f7f2 fcdc 	bl	8000514 <__aeabi_ui2d>
 800db5c:	2d09      	cmp	r5, #9
 800db5e:	4682      	mov	sl, r0
 800db60:	468b      	mov	fp, r1
 800db62:	dd13      	ble.n	800db8c <_strtod_l+0x3dc>
 800db64:	4b7b      	ldr	r3, [pc, #492]	; (800dd54 <_strtod_l+0x5a4>)
 800db66:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800db6a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800db6e:	f7f2 fd4b 	bl	8000608 <__aeabi_dmul>
 800db72:	4682      	mov	sl, r0
 800db74:	4648      	mov	r0, r9
 800db76:	468b      	mov	fp, r1
 800db78:	f7f2 fccc 	bl	8000514 <__aeabi_ui2d>
 800db7c:	4602      	mov	r2, r0
 800db7e:	460b      	mov	r3, r1
 800db80:	4650      	mov	r0, sl
 800db82:	4659      	mov	r1, fp
 800db84:	f7f2 fb8a 	bl	800029c <__adddf3>
 800db88:	4682      	mov	sl, r0
 800db8a:	468b      	mov	fp, r1
 800db8c:	2d0f      	cmp	r5, #15
 800db8e:	dc38      	bgt.n	800dc02 <_strtod_l+0x452>
 800db90:	9b06      	ldr	r3, [sp, #24]
 800db92:	2b00      	cmp	r3, #0
 800db94:	f43f ae50 	beq.w	800d838 <_strtod_l+0x88>
 800db98:	dd24      	ble.n	800dbe4 <_strtod_l+0x434>
 800db9a:	2b16      	cmp	r3, #22
 800db9c:	dc0b      	bgt.n	800dbb6 <_strtod_l+0x406>
 800db9e:	496d      	ldr	r1, [pc, #436]	; (800dd54 <_strtod_l+0x5a4>)
 800dba0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dba4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dba8:	4652      	mov	r2, sl
 800dbaa:	465b      	mov	r3, fp
 800dbac:	f7f2 fd2c 	bl	8000608 <__aeabi_dmul>
 800dbb0:	4682      	mov	sl, r0
 800dbb2:	468b      	mov	fp, r1
 800dbb4:	e640      	b.n	800d838 <_strtod_l+0x88>
 800dbb6:	9a06      	ldr	r2, [sp, #24]
 800dbb8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800dbbc:	4293      	cmp	r3, r2
 800dbbe:	db20      	blt.n	800dc02 <_strtod_l+0x452>
 800dbc0:	4c64      	ldr	r4, [pc, #400]	; (800dd54 <_strtod_l+0x5a4>)
 800dbc2:	f1c5 050f 	rsb	r5, r5, #15
 800dbc6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800dbca:	4652      	mov	r2, sl
 800dbcc:	465b      	mov	r3, fp
 800dbce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dbd2:	f7f2 fd19 	bl	8000608 <__aeabi_dmul>
 800dbd6:	9b06      	ldr	r3, [sp, #24]
 800dbd8:	1b5d      	subs	r5, r3, r5
 800dbda:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800dbde:	e9d4 2300 	ldrd	r2, r3, [r4]
 800dbe2:	e7e3      	b.n	800dbac <_strtod_l+0x3fc>
 800dbe4:	9b06      	ldr	r3, [sp, #24]
 800dbe6:	3316      	adds	r3, #22
 800dbe8:	db0b      	blt.n	800dc02 <_strtod_l+0x452>
 800dbea:	9b05      	ldr	r3, [sp, #20]
 800dbec:	1b9e      	subs	r6, r3, r6
 800dbee:	4b59      	ldr	r3, [pc, #356]	; (800dd54 <_strtod_l+0x5a4>)
 800dbf0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800dbf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800dbf8:	4650      	mov	r0, sl
 800dbfa:	4659      	mov	r1, fp
 800dbfc:	f7f2 fe2e 	bl	800085c <__aeabi_ddiv>
 800dc00:	e7d6      	b.n	800dbb0 <_strtod_l+0x400>
 800dc02:	9b06      	ldr	r3, [sp, #24]
 800dc04:	eba5 0808 	sub.w	r8, r5, r8
 800dc08:	4498      	add	r8, r3
 800dc0a:	f1b8 0f00 	cmp.w	r8, #0
 800dc0e:	dd74      	ble.n	800dcfa <_strtod_l+0x54a>
 800dc10:	f018 030f 	ands.w	r3, r8, #15
 800dc14:	d00a      	beq.n	800dc2c <_strtod_l+0x47c>
 800dc16:	494f      	ldr	r1, [pc, #316]	; (800dd54 <_strtod_l+0x5a4>)
 800dc18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800dc1c:	4652      	mov	r2, sl
 800dc1e:	465b      	mov	r3, fp
 800dc20:	e9d1 0100 	ldrd	r0, r1, [r1]
 800dc24:	f7f2 fcf0 	bl	8000608 <__aeabi_dmul>
 800dc28:	4682      	mov	sl, r0
 800dc2a:	468b      	mov	fp, r1
 800dc2c:	f038 080f 	bics.w	r8, r8, #15
 800dc30:	d04f      	beq.n	800dcd2 <_strtod_l+0x522>
 800dc32:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800dc36:	dd22      	ble.n	800dc7e <_strtod_l+0x4ce>
 800dc38:	2500      	movs	r5, #0
 800dc3a:	462e      	mov	r6, r5
 800dc3c:	9507      	str	r5, [sp, #28]
 800dc3e:	9505      	str	r5, [sp, #20]
 800dc40:	2322      	movs	r3, #34	; 0x22
 800dc42:	f8df b118 	ldr.w	fp, [pc, #280]	; 800dd5c <_strtod_l+0x5ac>
 800dc46:	6023      	str	r3, [r4, #0]
 800dc48:	f04f 0a00 	mov.w	sl, #0
 800dc4c:	9b07      	ldr	r3, [sp, #28]
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	f43f adf2 	beq.w	800d838 <_strtod_l+0x88>
 800dc54:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dc56:	4620      	mov	r0, r4
 800dc58:	f001 fe82 	bl	800f960 <_Bfree>
 800dc5c:	9905      	ldr	r1, [sp, #20]
 800dc5e:	4620      	mov	r0, r4
 800dc60:	f001 fe7e 	bl	800f960 <_Bfree>
 800dc64:	4631      	mov	r1, r6
 800dc66:	4620      	mov	r0, r4
 800dc68:	f001 fe7a 	bl	800f960 <_Bfree>
 800dc6c:	9907      	ldr	r1, [sp, #28]
 800dc6e:	4620      	mov	r0, r4
 800dc70:	f001 fe76 	bl	800f960 <_Bfree>
 800dc74:	4629      	mov	r1, r5
 800dc76:	4620      	mov	r0, r4
 800dc78:	f001 fe72 	bl	800f960 <_Bfree>
 800dc7c:	e5dc      	b.n	800d838 <_strtod_l+0x88>
 800dc7e:	4b36      	ldr	r3, [pc, #216]	; (800dd58 <_strtod_l+0x5a8>)
 800dc80:	9304      	str	r3, [sp, #16]
 800dc82:	2300      	movs	r3, #0
 800dc84:	ea4f 1828 	mov.w	r8, r8, asr #4
 800dc88:	4650      	mov	r0, sl
 800dc8a:	4659      	mov	r1, fp
 800dc8c:	4699      	mov	r9, r3
 800dc8e:	f1b8 0f01 	cmp.w	r8, #1
 800dc92:	dc21      	bgt.n	800dcd8 <_strtod_l+0x528>
 800dc94:	b10b      	cbz	r3, 800dc9a <_strtod_l+0x4ea>
 800dc96:	4682      	mov	sl, r0
 800dc98:	468b      	mov	fp, r1
 800dc9a:	4b2f      	ldr	r3, [pc, #188]	; (800dd58 <_strtod_l+0x5a8>)
 800dc9c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800dca0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800dca4:	4652      	mov	r2, sl
 800dca6:	465b      	mov	r3, fp
 800dca8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800dcac:	f7f2 fcac 	bl	8000608 <__aeabi_dmul>
 800dcb0:	4b2a      	ldr	r3, [pc, #168]	; (800dd5c <_strtod_l+0x5ac>)
 800dcb2:	460a      	mov	r2, r1
 800dcb4:	400b      	ands	r3, r1
 800dcb6:	492a      	ldr	r1, [pc, #168]	; (800dd60 <_strtod_l+0x5b0>)
 800dcb8:	428b      	cmp	r3, r1
 800dcba:	4682      	mov	sl, r0
 800dcbc:	d8bc      	bhi.n	800dc38 <_strtod_l+0x488>
 800dcbe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800dcc2:	428b      	cmp	r3, r1
 800dcc4:	bf86      	itte	hi
 800dcc6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800dd64 <_strtod_l+0x5b4>
 800dcca:	f04f 3aff 	movhi.w	sl, #4294967295
 800dcce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	9304      	str	r3, [sp, #16]
 800dcd6:	e084      	b.n	800dde2 <_strtod_l+0x632>
 800dcd8:	f018 0f01 	tst.w	r8, #1
 800dcdc:	d005      	beq.n	800dcea <_strtod_l+0x53a>
 800dcde:	9b04      	ldr	r3, [sp, #16]
 800dce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dce4:	f7f2 fc90 	bl	8000608 <__aeabi_dmul>
 800dce8:	2301      	movs	r3, #1
 800dcea:	9a04      	ldr	r2, [sp, #16]
 800dcec:	3208      	adds	r2, #8
 800dcee:	f109 0901 	add.w	r9, r9, #1
 800dcf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800dcf6:	9204      	str	r2, [sp, #16]
 800dcf8:	e7c9      	b.n	800dc8e <_strtod_l+0x4de>
 800dcfa:	d0ea      	beq.n	800dcd2 <_strtod_l+0x522>
 800dcfc:	f1c8 0800 	rsb	r8, r8, #0
 800dd00:	f018 020f 	ands.w	r2, r8, #15
 800dd04:	d00a      	beq.n	800dd1c <_strtod_l+0x56c>
 800dd06:	4b13      	ldr	r3, [pc, #76]	; (800dd54 <_strtod_l+0x5a4>)
 800dd08:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800dd0c:	4650      	mov	r0, sl
 800dd0e:	4659      	mov	r1, fp
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f2 fda2 	bl	800085c <__aeabi_ddiv>
 800dd18:	4682      	mov	sl, r0
 800dd1a:	468b      	mov	fp, r1
 800dd1c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800dd20:	d0d7      	beq.n	800dcd2 <_strtod_l+0x522>
 800dd22:	f1b8 0f1f 	cmp.w	r8, #31
 800dd26:	dd1f      	ble.n	800dd68 <_strtod_l+0x5b8>
 800dd28:	2500      	movs	r5, #0
 800dd2a:	462e      	mov	r6, r5
 800dd2c:	9507      	str	r5, [sp, #28]
 800dd2e:	9505      	str	r5, [sp, #20]
 800dd30:	2322      	movs	r3, #34	; 0x22
 800dd32:	f04f 0a00 	mov.w	sl, #0
 800dd36:	f04f 0b00 	mov.w	fp, #0
 800dd3a:	6023      	str	r3, [r4, #0]
 800dd3c:	e786      	b.n	800dc4c <_strtod_l+0x49c>
 800dd3e:	bf00      	nop
 800dd40:	080115ed 	.word	0x080115ed
 800dd44:	08011630 	.word	0x08011630
 800dd48:	080115e5 	.word	0x080115e5
 800dd4c:	08011774 	.word	0x08011774
 800dd50:	08011a20 	.word	0x08011a20
 800dd54:	08011900 	.word	0x08011900
 800dd58:	080118d8 	.word	0x080118d8
 800dd5c:	7ff00000 	.word	0x7ff00000
 800dd60:	7ca00000 	.word	0x7ca00000
 800dd64:	7fefffff 	.word	0x7fefffff
 800dd68:	f018 0310 	ands.w	r3, r8, #16
 800dd6c:	bf18      	it	ne
 800dd6e:	236a      	movne	r3, #106	; 0x6a
 800dd70:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800e120 <_strtod_l+0x970>
 800dd74:	9304      	str	r3, [sp, #16]
 800dd76:	4650      	mov	r0, sl
 800dd78:	4659      	mov	r1, fp
 800dd7a:	2300      	movs	r3, #0
 800dd7c:	f018 0f01 	tst.w	r8, #1
 800dd80:	d004      	beq.n	800dd8c <_strtod_l+0x5dc>
 800dd82:	e9d9 2300 	ldrd	r2, r3, [r9]
 800dd86:	f7f2 fc3f 	bl	8000608 <__aeabi_dmul>
 800dd8a:	2301      	movs	r3, #1
 800dd8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800dd90:	f109 0908 	add.w	r9, r9, #8
 800dd94:	d1f2      	bne.n	800dd7c <_strtod_l+0x5cc>
 800dd96:	b10b      	cbz	r3, 800dd9c <_strtod_l+0x5ec>
 800dd98:	4682      	mov	sl, r0
 800dd9a:	468b      	mov	fp, r1
 800dd9c:	9b04      	ldr	r3, [sp, #16]
 800dd9e:	b1c3      	cbz	r3, 800ddd2 <_strtod_l+0x622>
 800dda0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800dda4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	4659      	mov	r1, fp
 800ddac:	dd11      	ble.n	800ddd2 <_strtod_l+0x622>
 800ddae:	2b1f      	cmp	r3, #31
 800ddb0:	f340 8124 	ble.w	800dffc <_strtod_l+0x84c>
 800ddb4:	2b34      	cmp	r3, #52	; 0x34
 800ddb6:	bfde      	ittt	le
 800ddb8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800ddbc:	f04f 33ff 	movle.w	r3, #4294967295
 800ddc0:	fa03 f202 	lslle.w	r2, r3, r2
 800ddc4:	f04f 0a00 	mov.w	sl, #0
 800ddc8:	bfcc      	ite	gt
 800ddca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ddce:	ea02 0b01 	andle.w	fp, r2, r1
 800ddd2:	2200      	movs	r2, #0
 800ddd4:	2300      	movs	r3, #0
 800ddd6:	4650      	mov	r0, sl
 800ddd8:	4659      	mov	r1, fp
 800ddda:	f7f2 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800ddde:	2800      	cmp	r0, #0
 800dde0:	d1a2      	bne.n	800dd28 <_strtod_l+0x578>
 800dde2:	9b07      	ldr	r3, [sp, #28]
 800dde4:	9300      	str	r3, [sp, #0]
 800dde6:	9908      	ldr	r1, [sp, #32]
 800dde8:	462b      	mov	r3, r5
 800ddea:	463a      	mov	r2, r7
 800ddec:	4620      	mov	r0, r4
 800ddee:	f001 fe1f 	bl	800fa30 <__s2b>
 800ddf2:	9007      	str	r0, [sp, #28]
 800ddf4:	2800      	cmp	r0, #0
 800ddf6:	f43f af1f 	beq.w	800dc38 <_strtod_l+0x488>
 800ddfa:	9b05      	ldr	r3, [sp, #20]
 800ddfc:	1b9e      	subs	r6, r3, r6
 800ddfe:	9b06      	ldr	r3, [sp, #24]
 800de00:	2b00      	cmp	r3, #0
 800de02:	bfb4      	ite	lt
 800de04:	4633      	movlt	r3, r6
 800de06:	2300      	movge	r3, #0
 800de08:	930c      	str	r3, [sp, #48]	; 0x30
 800de0a:	9b06      	ldr	r3, [sp, #24]
 800de0c:	2500      	movs	r5, #0
 800de0e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800de12:	9312      	str	r3, [sp, #72]	; 0x48
 800de14:	462e      	mov	r6, r5
 800de16:	9b07      	ldr	r3, [sp, #28]
 800de18:	4620      	mov	r0, r4
 800de1a:	6859      	ldr	r1, [r3, #4]
 800de1c:	f001 fd60 	bl	800f8e0 <_Balloc>
 800de20:	9005      	str	r0, [sp, #20]
 800de22:	2800      	cmp	r0, #0
 800de24:	f43f af0c 	beq.w	800dc40 <_strtod_l+0x490>
 800de28:	9b07      	ldr	r3, [sp, #28]
 800de2a:	691a      	ldr	r2, [r3, #16]
 800de2c:	3202      	adds	r2, #2
 800de2e:	f103 010c 	add.w	r1, r3, #12
 800de32:	0092      	lsls	r2, r2, #2
 800de34:	300c      	adds	r0, #12
 800de36:	f7fe fde7 	bl	800ca08 <memcpy>
 800de3a:	ec4b ab10 	vmov	d0, sl, fp
 800de3e:	aa1a      	add	r2, sp, #104	; 0x68
 800de40:	a919      	add	r1, sp, #100	; 0x64
 800de42:	4620      	mov	r0, r4
 800de44:	f002 f93a 	bl	80100bc <__d2b>
 800de48:	ec4b ab18 	vmov	d8, sl, fp
 800de4c:	9018      	str	r0, [sp, #96]	; 0x60
 800de4e:	2800      	cmp	r0, #0
 800de50:	f43f aef6 	beq.w	800dc40 <_strtod_l+0x490>
 800de54:	2101      	movs	r1, #1
 800de56:	4620      	mov	r0, r4
 800de58:	f001 fe84 	bl	800fb64 <__i2b>
 800de5c:	4606      	mov	r6, r0
 800de5e:	2800      	cmp	r0, #0
 800de60:	f43f aeee 	beq.w	800dc40 <_strtod_l+0x490>
 800de64:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800de66:	9904      	ldr	r1, [sp, #16]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	bfab      	itete	ge
 800de6c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800de6e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800de70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800de72:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800de76:	bfac      	ite	ge
 800de78:	eb03 0902 	addge.w	r9, r3, r2
 800de7c:	1ad7      	sublt	r7, r2, r3
 800de7e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800de80:	eba3 0801 	sub.w	r8, r3, r1
 800de84:	4490      	add	r8, r2
 800de86:	4ba1      	ldr	r3, [pc, #644]	; (800e10c <_strtod_l+0x95c>)
 800de88:	f108 38ff 	add.w	r8, r8, #4294967295
 800de8c:	4598      	cmp	r8, r3
 800de8e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800de92:	f280 80c7 	bge.w	800e024 <_strtod_l+0x874>
 800de96:	eba3 0308 	sub.w	r3, r3, r8
 800de9a:	2b1f      	cmp	r3, #31
 800de9c:	eba2 0203 	sub.w	r2, r2, r3
 800dea0:	f04f 0101 	mov.w	r1, #1
 800dea4:	f300 80b1 	bgt.w	800e00a <_strtod_l+0x85a>
 800dea8:	fa01 f303 	lsl.w	r3, r1, r3
 800deac:	930d      	str	r3, [sp, #52]	; 0x34
 800deae:	2300      	movs	r3, #0
 800deb0:	9308      	str	r3, [sp, #32]
 800deb2:	eb09 0802 	add.w	r8, r9, r2
 800deb6:	9b04      	ldr	r3, [sp, #16]
 800deb8:	45c1      	cmp	r9, r8
 800deba:	4417      	add	r7, r2
 800debc:	441f      	add	r7, r3
 800debe:	464b      	mov	r3, r9
 800dec0:	bfa8      	it	ge
 800dec2:	4643      	movge	r3, r8
 800dec4:	42bb      	cmp	r3, r7
 800dec6:	bfa8      	it	ge
 800dec8:	463b      	movge	r3, r7
 800deca:	2b00      	cmp	r3, #0
 800decc:	bfc2      	ittt	gt
 800dece:	eba8 0803 	subgt.w	r8, r8, r3
 800ded2:	1aff      	subgt	r7, r7, r3
 800ded4:	eba9 0903 	subgt.w	r9, r9, r3
 800ded8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800deda:	2b00      	cmp	r3, #0
 800dedc:	dd17      	ble.n	800df0e <_strtod_l+0x75e>
 800dede:	4631      	mov	r1, r6
 800dee0:	461a      	mov	r2, r3
 800dee2:	4620      	mov	r0, r4
 800dee4:	f001 fefe 	bl	800fce4 <__pow5mult>
 800dee8:	4606      	mov	r6, r0
 800deea:	2800      	cmp	r0, #0
 800deec:	f43f aea8 	beq.w	800dc40 <_strtod_l+0x490>
 800def0:	4601      	mov	r1, r0
 800def2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800def4:	4620      	mov	r0, r4
 800def6:	f001 fe4b 	bl	800fb90 <__multiply>
 800defa:	900b      	str	r0, [sp, #44]	; 0x2c
 800defc:	2800      	cmp	r0, #0
 800defe:	f43f ae9f 	beq.w	800dc40 <_strtod_l+0x490>
 800df02:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df04:	4620      	mov	r0, r4
 800df06:	f001 fd2b 	bl	800f960 <_Bfree>
 800df0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df0c:	9318      	str	r3, [sp, #96]	; 0x60
 800df0e:	f1b8 0f00 	cmp.w	r8, #0
 800df12:	f300 808c 	bgt.w	800e02e <_strtod_l+0x87e>
 800df16:	9b06      	ldr	r3, [sp, #24]
 800df18:	2b00      	cmp	r3, #0
 800df1a:	dd08      	ble.n	800df2e <_strtod_l+0x77e>
 800df1c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800df1e:	9905      	ldr	r1, [sp, #20]
 800df20:	4620      	mov	r0, r4
 800df22:	f001 fedf 	bl	800fce4 <__pow5mult>
 800df26:	9005      	str	r0, [sp, #20]
 800df28:	2800      	cmp	r0, #0
 800df2a:	f43f ae89 	beq.w	800dc40 <_strtod_l+0x490>
 800df2e:	2f00      	cmp	r7, #0
 800df30:	dd08      	ble.n	800df44 <_strtod_l+0x794>
 800df32:	9905      	ldr	r1, [sp, #20]
 800df34:	463a      	mov	r2, r7
 800df36:	4620      	mov	r0, r4
 800df38:	f001 ff2e 	bl	800fd98 <__lshift>
 800df3c:	9005      	str	r0, [sp, #20]
 800df3e:	2800      	cmp	r0, #0
 800df40:	f43f ae7e 	beq.w	800dc40 <_strtod_l+0x490>
 800df44:	f1b9 0f00 	cmp.w	r9, #0
 800df48:	dd08      	ble.n	800df5c <_strtod_l+0x7ac>
 800df4a:	4631      	mov	r1, r6
 800df4c:	464a      	mov	r2, r9
 800df4e:	4620      	mov	r0, r4
 800df50:	f001 ff22 	bl	800fd98 <__lshift>
 800df54:	4606      	mov	r6, r0
 800df56:	2800      	cmp	r0, #0
 800df58:	f43f ae72 	beq.w	800dc40 <_strtod_l+0x490>
 800df5c:	9a05      	ldr	r2, [sp, #20]
 800df5e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800df60:	4620      	mov	r0, r4
 800df62:	f001 ffa5 	bl	800feb0 <__mdiff>
 800df66:	4605      	mov	r5, r0
 800df68:	2800      	cmp	r0, #0
 800df6a:	f43f ae69 	beq.w	800dc40 <_strtod_l+0x490>
 800df6e:	68c3      	ldr	r3, [r0, #12]
 800df70:	930b      	str	r3, [sp, #44]	; 0x2c
 800df72:	2300      	movs	r3, #0
 800df74:	60c3      	str	r3, [r0, #12]
 800df76:	4631      	mov	r1, r6
 800df78:	f001 ff7e 	bl	800fe78 <__mcmp>
 800df7c:	2800      	cmp	r0, #0
 800df7e:	da60      	bge.n	800e042 <_strtod_l+0x892>
 800df80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800df82:	ea53 030a 	orrs.w	r3, r3, sl
 800df86:	f040 8082 	bne.w	800e08e <_strtod_l+0x8de>
 800df8a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d17d      	bne.n	800e08e <_strtod_l+0x8de>
 800df92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800df96:	0d1b      	lsrs	r3, r3, #20
 800df98:	051b      	lsls	r3, r3, #20
 800df9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800df9e:	d976      	bls.n	800e08e <_strtod_l+0x8de>
 800dfa0:	696b      	ldr	r3, [r5, #20]
 800dfa2:	b913      	cbnz	r3, 800dfaa <_strtod_l+0x7fa>
 800dfa4:	692b      	ldr	r3, [r5, #16]
 800dfa6:	2b01      	cmp	r3, #1
 800dfa8:	dd71      	ble.n	800e08e <_strtod_l+0x8de>
 800dfaa:	4629      	mov	r1, r5
 800dfac:	2201      	movs	r2, #1
 800dfae:	4620      	mov	r0, r4
 800dfb0:	f001 fef2 	bl	800fd98 <__lshift>
 800dfb4:	4631      	mov	r1, r6
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	f001 ff5e 	bl	800fe78 <__mcmp>
 800dfbc:	2800      	cmp	r0, #0
 800dfbe:	dd66      	ble.n	800e08e <_strtod_l+0x8de>
 800dfc0:	9904      	ldr	r1, [sp, #16]
 800dfc2:	4a53      	ldr	r2, [pc, #332]	; (800e110 <_strtod_l+0x960>)
 800dfc4:	465b      	mov	r3, fp
 800dfc6:	2900      	cmp	r1, #0
 800dfc8:	f000 8081 	beq.w	800e0ce <_strtod_l+0x91e>
 800dfcc:	ea02 010b 	and.w	r1, r2, fp
 800dfd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800dfd4:	dc7b      	bgt.n	800e0ce <_strtod_l+0x91e>
 800dfd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800dfda:	f77f aea9 	ble.w	800dd30 <_strtod_l+0x580>
 800dfde:	4b4d      	ldr	r3, [pc, #308]	; (800e114 <_strtod_l+0x964>)
 800dfe0:	4650      	mov	r0, sl
 800dfe2:	4659      	mov	r1, fp
 800dfe4:	2200      	movs	r2, #0
 800dfe6:	f7f2 fb0f 	bl	8000608 <__aeabi_dmul>
 800dfea:	460b      	mov	r3, r1
 800dfec:	4303      	orrs	r3, r0
 800dfee:	bf08      	it	eq
 800dff0:	2322      	moveq	r3, #34	; 0x22
 800dff2:	4682      	mov	sl, r0
 800dff4:	468b      	mov	fp, r1
 800dff6:	bf08      	it	eq
 800dff8:	6023      	streq	r3, [r4, #0]
 800dffa:	e62b      	b.n	800dc54 <_strtod_l+0x4a4>
 800dffc:	f04f 32ff 	mov.w	r2, #4294967295
 800e000:	fa02 f303 	lsl.w	r3, r2, r3
 800e004:	ea03 0a0a 	and.w	sl, r3, sl
 800e008:	e6e3      	b.n	800ddd2 <_strtod_l+0x622>
 800e00a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800e00e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800e012:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800e016:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800e01a:	fa01 f308 	lsl.w	r3, r1, r8
 800e01e:	9308      	str	r3, [sp, #32]
 800e020:	910d      	str	r1, [sp, #52]	; 0x34
 800e022:	e746      	b.n	800deb2 <_strtod_l+0x702>
 800e024:	2300      	movs	r3, #0
 800e026:	9308      	str	r3, [sp, #32]
 800e028:	2301      	movs	r3, #1
 800e02a:	930d      	str	r3, [sp, #52]	; 0x34
 800e02c:	e741      	b.n	800deb2 <_strtod_l+0x702>
 800e02e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e030:	4642      	mov	r2, r8
 800e032:	4620      	mov	r0, r4
 800e034:	f001 feb0 	bl	800fd98 <__lshift>
 800e038:	9018      	str	r0, [sp, #96]	; 0x60
 800e03a:	2800      	cmp	r0, #0
 800e03c:	f47f af6b 	bne.w	800df16 <_strtod_l+0x766>
 800e040:	e5fe      	b.n	800dc40 <_strtod_l+0x490>
 800e042:	465f      	mov	r7, fp
 800e044:	d16e      	bne.n	800e124 <_strtod_l+0x974>
 800e046:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e048:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e04c:	b342      	cbz	r2, 800e0a0 <_strtod_l+0x8f0>
 800e04e:	4a32      	ldr	r2, [pc, #200]	; (800e118 <_strtod_l+0x968>)
 800e050:	4293      	cmp	r3, r2
 800e052:	d128      	bne.n	800e0a6 <_strtod_l+0x8f6>
 800e054:	9b04      	ldr	r3, [sp, #16]
 800e056:	4651      	mov	r1, sl
 800e058:	b1eb      	cbz	r3, 800e096 <_strtod_l+0x8e6>
 800e05a:	4b2d      	ldr	r3, [pc, #180]	; (800e110 <_strtod_l+0x960>)
 800e05c:	403b      	ands	r3, r7
 800e05e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e062:	f04f 32ff 	mov.w	r2, #4294967295
 800e066:	d819      	bhi.n	800e09c <_strtod_l+0x8ec>
 800e068:	0d1b      	lsrs	r3, r3, #20
 800e06a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e06e:	fa02 f303 	lsl.w	r3, r2, r3
 800e072:	4299      	cmp	r1, r3
 800e074:	d117      	bne.n	800e0a6 <_strtod_l+0x8f6>
 800e076:	4b29      	ldr	r3, [pc, #164]	; (800e11c <_strtod_l+0x96c>)
 800e078:	429f      	cmp	r7, r3
 800e07a:	d102      	bne.n	800e082 <_strtod_l+0x8d2>
 800e07c:	3101      	adds	r1, #1
 800e07e:	f43f addf 	beq.w	800dc40 <_strtod_l+0x490>
 800e082:	4b23      	ldr	r3, [pc, #140]	; (800e110 <_strtod_l+0x960>)
 800e084:	403b      	ands	r3, r7
 800e086:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800e08a:	f04f 0a00 	mov.w	sl, #0
 800e08e:	9b04      	ldr	r3, [sp, #16]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d1a4      	bne.n	800dfde <_strtod_l+0x82e>
 800e094:	e5de      	b.n	800dc54 <_strtod_l+0x4a4>
 800e096:	f04f 33ff 	mov.w	r3, #4294967295
 800e09a:	e7ea      	b.n	800e072 <_strtod_l+0x8c2>
 800e09c:	4613      	mov	r3, r2
 800e09e:	e7e8      	b.n	800e072 <_strtod_l+0x8c2>
 800e0a0:	ea53 030a 	orrs.w	r3, r3, sl
 800e0a4:	d08c      	beq.n	800dfc0 <_strtod_l+0x810>
 800e0a6:	9b08      	ldr	r3, [sp, #32]
 800e0a8:	b1db      	cbz	r3, 800e0e2 <_strtod_l+0x932>
 800e0aa:	423b      	tst	r3, r7
 800e0ac:	d0ef      	beq.n	800e08e <_strtod_l+0x8de>
 800e0ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e0b0:	9a04      	ldr	r2, [sp, #16]
 800e0b2:	4650      	mov	r0, sl
 800e0b4:	4659      	mov	r1, fp
 800e0b6:	b1c3      	cbz	r3, 800e0ea <_strtod_l+0x93a>
 800e0b8:	f7ff fb5c 	bl	800d774 <sulp>
 800e0bc:	4602      	mov	r2, r0
 800e0be:	460b      	mov	r3, r1
 800e0c0:	ec51 0b18 	vmov	r0, r1, d8
 800e0c4:	f7f2 f8ea 	bl	800029c <__adddf3>
 800e0c8:	4682      	mov	sl, r0
 800e0ca:	468b      	mov	fp, r1
 800e0cc:	e7df      	b.n	800e08e <_strtod_l+0x8de>
 800e0ce:	4013      	ands	r3, r2
 800e0d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800e0d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800e0d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800e0dc:	f04f 3aff 	mov.w	sl, #4294967295
 800e0e0:	e7d5      	b.n	800e08e <_strtod_l+0x8de>
 800e0e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e0e4:	ea13 0f0a 	tst.w	r3, sl
 800e0e8:	e7e0      	b.n	800e0ac <_strtod_l+0x8fc>
 800e0ea:	f7ff fb43 	bl	800d774 <sulp>
 800e0ee:	4602      	mov	r2, r0
 800e0f0:	460b      	mov	r3, r1
 800e0f2:	ec51 0b18 	vmov	r0, r1, d8
 800e0f6:	f7f2 f8cf 	bl	8000298 <__aeabi_dsub>
 800e0fa:	2200      	movs	r2, #0
 800e0fc:	2300      	movs	r3, #0
 800e0fe:	4682      	mov	sl, r0
 800e100:	468b      	mov	fp, r1
 800e102:	f7f2 fce9 	bl	8000ad8 <__aeabi_dcmpeq>
 800e106:	2800      	cmp	r0, #0
 800e108:	d0c1      	beq.n	800e08e <_strtod_l+0x8de>
 800e10a:	e611      	b.n	800dd30 <_strtod_l+0x580>
 800e10c:	fffffc02 	.word	0xfffffc02
 800e110:	7ff00000 	.word	0x7ff00000
 800e114:	39500000 	.word	0x39500000
 800e118:	000fffff 	.word	0x000fffff
 800e11c:	7fefffff 	.word	0x7fefffff
 800e120:	08011648 	.word	0x08011648
 800e124:	4631      	mov	r1, r6
 800e126:	4628      	mov	r0, r5
 800e128:	f002 f824 	bl	8010174 <__ratio>
 800e12c:	ec59 8b10 	vmov	r8, r9, d0
 800e130:	ee10 0a10 	vmov	r0, s0
 800e134:	2200      	movs	r2, #0
 800e136:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800e13a:	4649      	mov	r1, r9
 800e13c:	f7f2 fce0 	bl	8000b00 <__aeabi_dcmple>
 800e140:	2800      	cmp	r0, #0
 800e142:	d07a      	beq.n	800e23a <_strtod_l+0xa8a>
 800e144:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e146:	2b00      	cmp	r3, #0
 800e148:	d04a      	beq.n	800e1e0 <_strtod_l+0xa30>
 800e14a:	4b95      	ldr	r3, [pc, #596]	; (800e3a0 <_strtod_l+0xbf0>)
 800e14c:	2200      	movs	r2, #0
 800e14e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e152:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800e3a0 <_strtod_l+0xbf0>
 800e156:	f04f 0800 	mov.w	r8, #0
 800e15a:	4b92      	ldr	r3, [pc, #584]	; (800e3a4 <_strtod_l+0xbf4>)
 800e15c:	403b      	ands	r3, r7
 800e15e:	930d      	str	r3, [sp, #52]	; 0x34
 800e160:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e162:	4b91      	ldr	r3, [pc, #580]	; (800e3a8 <_strtod_l+0xbf8>)
 800e164:	429a      	cmp	r2, r3
 800e166:	f040 80b0 	bne.w	800e2ca <_strtod_l+0xb1a>
 800e16a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e16e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800e172:	ec4b ab10 	vmov	d0, sl, fp
 800e176:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e17a:	f001 ff23 	bl	800ffc4 <__ulp>
 800e17e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e182:	ec53 2b10 	vmov	r2, r3, d0
 800e186:	f7f2 fa3f 	bl	8000608 <__aeabi_dmul>
 800e18a:	4652      	mov	r2, sl
 800e18c:	465b      	mov	r3, fp
 800e18e:	f7f2 f885 	bl	800029c <__adddf3>
 800e192:	460b      	mov	r3, r1
 800e194:	4983      	ldr	r1, [pc, #524]	; (800e3a4 <_strtod_l+0xbf4>)
 800e196:	4a85      	ldr	r2, [pc, #532]	; (800e3ac <_strtod_l+0xbfc>)
 800e198:	4019      	ands	r1, r3
 800e19a:	4291      	cmp	r1, r2
 800e19c:	4682      	mov	sl, r0
 800e19e:	d960      	bls.n	800e262 <_strtod_l+0xab2>
 800e1a0:	ee18 3a90 	vmov	r3, s17
 800e1a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800e1a8:	4293      	cmp	r3, r2
 800e1aa:	d104      	bne.n	800e1b6 <_strtod_l+0xa06>
 800e1ac:	ee18 3a10 	vmov	r3, s16
 800e1b0:	3301      	adds	r3, #1
 800e1b2:	f43f ad45 	beq.w	800dc40 <_strtod_l+0x490>
 800e1b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800e3b8 <_strtod_l+0xc08>
 800e1ba:	f04f 3aff 	mov.w	sl, #4294967295
 800e1be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800e1c0:	4620      	mov	r0, r4
 800e1c2:	f001 fbcd 	bl	800f960 <_Bfree>
 800e1c6:	9905      	ldr	r1, [sp, #20]
 800e1c8:	4620      	mov	r0, r4
 800e1ca:	f001 fbc9 	bl	800f960 <_Bfree>
 800e1ce:	4631      	mov	r1, r6
 800e1d0:	4620      	mov	r0, r4
 800e1d2:	f001 fbc5 	bl	800f960 <_Bfree>
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	4620      	mov	r0, r4
 800e1da:	f001 fbc1 	bl	800f960 <_Bfree>
 800e1de:	e61a      	b.n	800de16 <_strtod_l+0x666>
 800e1e0:	f1ba 0f00 	cmp.w	sl, #0
 800e1e4:	d11b      	bne.n	800e21e <_strtod_l+0xa6e>
 800e1e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e1ea:	b9f3      	cbnz	r3, 800e22a <_strtod_l+0xa7a>
 800e1ec:	4b6c      	ldr	r3, [pc, #432]	; (800e3a0 <_strtod_l+0xbf0>)
 800e1ee:	2200      	movs	r2, #0
 800e1f0:	4640      	mov	r0, r8
 800e1f2:	4649      	mov	r1, r9
 800e1f4:	f7f2 fc7a 	bl	8000aec <__aeabi_dcmplt>
 800e1f8:	b9d0      	cbnz	r0, 800e230 <_strtod_l+0xa80>
 800e1fa:	4640      	mov	r0, r8
 800e1fc:	4649      	mov	r1, r9
 800e1fe:	4b6c      	ldr	r3, [pc, #432]	; (800e3b0 <_strtod_l+0xc00>)
 800e200:	2200      	movs	r2, #0
 800e202:	f7f2 fa01 	bl	8000608 <__aeabi_dmul>
 800e206:	4680      	mov	r8, r0
 800e208:	4689      	mov	r9, r1
 800e20a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e20e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800e212:	9315      	str	r3, [sp, #84]	; 0x54
 800e214:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800e218:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e21c:	e79d      	b.n	800e15a <_strtod_l+0x9aa>
 800e21e:	f1ba 0f01 	cmp.w	sl, #1
 800e222:	d102      	bne.n	800e22a <_strtod_l+0xa7a>
 800e224:	2f00      	cmp	r7, #0
 800e226:	f43f ad83 	beq.w	800dd30 <_strtod_l+0x580>
 800e22a:	4b62      	ldr	r3, [pc, #392]	; (800e3b4 <_strtod_l+0xc04>)
 800e22c:	2200      	movs	r2, #0
 800e22e:	e78e      	b.n	800e14e <_strtod_l+0x99e>
 800e230:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800e3b0 <_strtod_l+0xc00>
 800e234:	f04f 0800 	mov.w	r8, #0
 800e238:	e7e7      	b.n	800e20a <_strtod_l+0xa5a>
 800e23a:	4b5d      	ldr	r3, [pc, #372]	; (800e3b0 <_strtod_l+0xc00>)
 800e23c:	4640      	mov	r0, r8
 800e23e:	4649      	mov	r1, r9
 800e240:	2200      	movs	r2, #0
 800e242:	f7f2 f9e1 	bl	8000608 <__aeabi_dmul>
 800e246:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e248:	4680      	mov	r8, r0
 800e24a:	4689      	mov	r9, r1
 800e24c:	b933      	cbnz	r3, 800e25c <_strtod_l+0xaac>
 800e24e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e252:	900e      	str	r0, [sp, #56]	; 0x38
 800e254:	930f      	str	r3, [sp, #60]	; 0x3c
 800e256:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800e25a:	e7dd      	b.n	800e218 <_strtod_l+0xa68>
 800e25c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800e260:	e7f9      	b.n	800e256 <_strtod_l+0xaa6>
 800e262:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800e266:	9b04      	ldr	r3, [sp, #16]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d1a8      	bne.n	800e1be <_strtod_l+0xa0e>
 800e26c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800e270:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e272:	0d1b      	lsrs	r3, r3, #20
 800e274:	051b      	lsls	r3, r3, #20
 800e276:	429a      	cmp	r2, r3
 800e278:	d1a1      	bne.n	800e1be <_strtod_l+0xa0e>
 800e27a:	4640      	mov	r0, r8
 800e27c:	4649      	mov	r1, r9
 800e27e:	f7f2 fd23 	bl	8000cc8 <__aeabi_d2lz>
 800e282:	f7f2 f993 	bl	80005ac <__aeabi_l2d>
 800e286:	4602      	mov	r2, r0
 800e288:	460b      	mov	r3, r1
 800e28a:	4640      	mov	r0, r8
 800e28c:	4649      	mov	r1, r9
 800e28e:	f7f2 f803 	bl	8000298 <__aeabi_dsub>
 800e292:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e294:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e298:	ea43 030a 	orr.w	r3, r3, sl
 800e29c:	4313      	orrs	r3, r2
 800e29e:	4680      	mov	r8, r0
 800e2a0:	4689      	mov	r9, r1
 800e2a2:	d055      	beq.n	800e350 <_strtod_l+0xba0>
 800e2a4:	a336      	add	r3, pc, #216	; (adr r3, 800e380 <_strtod_l+0xbd0>)
 800e2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2aa:	f7f2 fc1f 	bl	8000aec <__aeabi_dcmplt>
 800e2ae:	2800      	cmp	r0, #0
 800e2b0:	f47f acd0 	bne.w	800dc54 <_strtod_l+0x4a4>
 800e2b4:	a334      	add	r3, pc, #208	; (adr r3, 800e388 <_strtod_l+0xbd8>)
 800e2b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ba:	4640      	mov	r0, r8
 800e2bc:	4649      	mov	r1, r9
 800e2be:	f7f2 fc33 	bl	8000b28 <__aeabi_dcmpgt>
 800e2c2:	2800      	cmp	r0, #0
 800e2c4:	f43f af7b 	beq.w	800e1be <_strtod_l+0xa0e>
 800e2c8:	e4c4      	b.n	800dc54 <_strtod_l+0x4a4>
 800e2ca:	9b04      	ldr	r3, [sp, #16]
 800e2cc:	b333      	cbz	r3, 800e31c <_strtod_l+0xb6c>
 800e2ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e2d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800e2d4:	d822      	bhi.n	800e31c <_strtod_l+0xb6c>
 800e2d6:	a32e      	add	r3, pc, #184	; (adr r3, 800e390 <_strtod_l+0xbe0>)
 800e2d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2dc:	4640      	mov	r0, r8
 800e2de:	4649      	mov	r1, r9
 800e2e0:	f7f2 fc0e 	bl	8000b00 <__aeabi_dcmple>
 800e2e4:	b1a0      	cbz	r0, 800e310 <_strtod_l+0xb60>
 800e2e6:	4649      	mov	r1, r9
 800e2e8:	4640      	mov	r0, r8
 800e2ea:	f7f2 fc65 	bl	8000bb8 <__aeabi_d2uiz>
 800e2ee:	2801      	cmp	r0, #1
 800e2f0:	bf38      	it	cc
 800e2f2:	2001      	movcc	r0, #1
 800e2f4:	f7f2 f90e 	bl	8000514 <__aeabi_ui2d>
 800e2f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e2fa:	4680      	mov	r8, r0
 800e2fc:	4689      	mov	r9, r1
 800e2fe:	bb23      	cbnz	r3, 800e34a <_strtod_l+0xb9a>
 800e300:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e304:	9010      	str	r0, [sp, #64]	; 0x40
 800e306:	9311      	str	r3, [sp, #68]	; 0x44
 800e308:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800e30c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e310:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e312:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800e314:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800e318:	1a9b      	subs	r3, r3, r2
 800e31a:	9309      	str	r3, [sp, #36]	; 0x24
 800e31c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e320:	eeb0 0a48 	vmov.f32	s0, s16
 800e324:	eef0 0a68 	vmov.f32	s1, s17
 800e328:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e32c:	f001 fe4a 	bl	800ffc4 <__ulp>
 800e330:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e334:	ec53 2b10 	vmov	r2, r3, d0
 800e338:	f7f2 f966 	bl	8000608 <__aeabi_dmul>
 800e33c:	ec53 2b18 	vmov	r2, r3, d8
 800e340:	f7f1 ffac 	bl	800029c <__adddf3>
 800e344:	4682      	mov	sl, r0
 800e346:	468b      	mov	fp, r1
 800e348:	e78d      	b.n	800e266 <_strtod_l+0xab6>
 800e34a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800e34e:	e7db      	b.n	800e308 <_strtod_l+0xb58>
 800e350:	a311      	add	r3, pc, #68	; (adr r3, 800e398 <_strtod_l+0xbe8>)
 800e352:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e356:	f7f2 fbc9 	bl	8000aec <__aeabi_dcmplt>
 800e35a:	e7b2      	b.n	800e2c2 <_strtod_l+0xb12>
 800e35c:	2300      	movs	r3, #0
 800e35e:	930a      	str	r3, [sp, #40]	; 0x28
 800e360:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800e362:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e364:	6013      	str	r3, [r2, #0]
 800e366:	f7ff ba6b 	b.w	800d840 <_strtod_l+0x90>
 800e36a:	2a65      	cmp	r2, #101	; 0x65
 800e36c:	f43f ab5f 	beq.w	800da2e <_strtod_l+0x27e>
 800e370:	2a45      	cmp	r2, #69	; 0x45
 800e372:	f43f ab5c 	beq.w	800da2e <_strtod_l+0x27e>
 800e376:	2301      	movs	r3, #1
 800e378:	f7ff bb94 	b.w	800daa4 <_strtod_l+0x2f4>
 800e37c:	f3af 8000 	nop.w
 800e380:	94a03595 	.word	0x94a03595
 800e384:	3fdfffff 	.word	0x3fdfffff
 800e388:	35afe535 	.word	0x35afe535
 800e38c:	3fe00000 	.word	0x3fe00000
 800e390:	ffc00000 	.word	0xffc00000
 800e394:	41dfffff 	.word	0x41dfffff
 800e398:	94a03595 	.word	0x94a03595
 800e39c:	3fcfffff 	.word	0x3fcfffff
 800e3a0:	3ff00000 	.word	0x3ff00000
 800e3a4:	7ff00000 	.word	0x7ff00000
 800e3a8:	7fe00000 	.word	0x7fe00000
 800e3ac:	7c9fffff 	.word	0x7c9fffff
 800e3b0:	3fe00000 	.word	0x3fe00000
 800e3b4:	bff00000 	.word	0xbff00000
 800e3b8:	7fefffff 	.word	0x7fefffff

0800e3bc <_strtod_r>:
 800e3bc:	4b01      	ldr	r3, [pc, #4]	; (800e3c4 <_strtod_r+0x8>)
 800e3be:	f7ff b9f7 	b.w	800d7b0 <_strtod_l>
 800e3c2:	bf00      	nop
 800e3c4:	200002cc 	.word	0x200002cc

0800e3c8 <_strtol_l.constprop.0>:
 800e3c8:	2b01      	cmp	r3, #1
 800e3ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3ce:	d001      	beq.n	800e3d4 <_strtol_l.constprop.0+0xc>
 800e3d0:	2b24      	cmp	r3, #36	; 0x24
 800e3d2:	d906      	bls.n	800e3e2 <_strtol_l.constprop.0+0x1a>
 800e3d4:	f7fe faee 	bl	800c9b4 <__errno>
 800e3d8:	2316      	movs	r3, #22
 800e3da:	6003      	str	r3, [r0, #0]
 800e3dc:	2000      	movs	r0, #0
 800e3de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e3e2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e4c8 <_strtol_l.constprop.0+0x100>
 800e3e6:	460d      	mov	r5, r1
 800e3e8:	462e      	mov	r6, r5
 800e3ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e3ee:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e3f2:	f017 0708 	ands.w	r7, r7, #8
 800e3f6:	d1f7      	bne.n	800e3e8 <_strtol_l.constprop.0+0x20>
 800e3f8:	2c2d      	cmp	r4, #45	; 0x2d
 800e3fa:	d132      	bne.n	800e462 <_strtol_l.constprop.0+0x9a>
 800e3fc:	782c      	ldrb	r4, [r5, #0]
 800e3fe:	2701      	movs	r7, #1
 800e400:	1cb5      	adds	r5, r6, #2
 800e402:	2b00      	cmp	r3, #0
 800e404:	d05b      	beq.n	800e4be <_strtol_l.constprop.0+0xf6>
 800e406:	2b10      	cmp	r3, #16
 800e408:	d109      	bne.n	800e41e <_strtol_l.constprop.0+0x56>
 800e40a:	2c30      	cmp	r4, #48	; 0x30
 800e40c:	d107      	bne.n	800e41e <_strtol_l.constprop.0+0x56>
 800e40e:	782c      	ldrb	r4, [r5, #0]
 800e410:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e414:	2c58      	cmp	r4, #88	; 0x58
 800e416:	d14d      	bne.n	800e4b4 <_strtol_l.constprop.0+0xec>
 800e418:	786c      	ldrb	r4, [r5, #1]
 800e41a:	2310      	movs	r3, #16
 800e41c:	3502      	adds	r5, #2
 800e41e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e422:	f108 38ff 	add.w	r8, r8, #4294967295
 800e426:	f04f 0c00 	mov.w	ip, #0
 800e42a:	fbb8 f9f3 	udiv	r9, r8, r3
 800e42e:	4666      	mov	r6, ip
 800e430:	fb03 8a19 	mls	sl, r3, r9, r8
 800e434:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e438:	f1be 0f09 	cmp.w	lr, #9
 800e43c:	d816      	bhi.n	800e46c <_strtol_l.constprop.0+0xa4>
 800e43e:	4674      	mov	r4, lr
 800e440:	42a3      	cmp	r3, r4
 800e442:	dd24      	ble.n	800e48e <_strtol_l.constprop.0+0xc6>
 800e444:	f1bc 0f00 	cmp.w	ip, #0
 800e448:	db1e      	blt.n	800e488 <_strtol_l.constprop.0+0xc0>
 800e44a:	45b1      	cmp	r9, r6
 800e44c:	d31c      	bcc.n	800e488 <_strtol_l.constprop.0+0xc0>
 800e44e:	d101      	bne.n	800e454 <_strtol_l.constprop.0+0x8c>
 800e450:	45a2      	cmp	sl, r4
 800e452:	db19      	blt.n	800e488 <_strtol_l.constprop.0+0xc0>
 800e454:	fb06 4603 	mla	r6, r6, r3, r4
 800e458:	f04f 0c01 	mov.w	ip, #1
 800e45c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e460:	e7e8      	b.n	800e434 <_strtol_l.constprop.0+0x6c>
 800e462:	2c2b      	cmp	r4, #43	; 0x2b
 800e464:	bf04      	itt	eq
 800e466:	782c      	ldrbeq	r4, [r5, #0]
 800e468:	1cb5      	addeq	r5, r6, #2
 800e46a:	e7ca      	b.n	800e402 <_strtol_l.constprop.0+0x3a>
 800e46c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e470:	f1be 0f19 	cmp.w	lr, #25
 800e474:	d801      	bhi.n	800e47a <_strtol_l.constprop.0+0xb2>
 800e476:	3c37      	subs	r4, #55	; 0x37
 800e478:	e7e2      	b.n	800e440 <_strtol_l.constprop.0+0x78>
 800e47a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e47e:	f1be 0f19 	cmp.w	lr, #25
 800e482:	d804      	bhi.n	800e48e <_strtol_l.constprop.0+0xc6>
 800e484:	3c57      	subs	r4, #87	; 0x57
 800e486:	e7db      	b.n	800e440 <_strtol_l.constprop.0+0x78>
 800e488:	f04f 3cff 	mov.w	ip, #4294967295
 800e48c:	e7e6      	b.n	800e45c <_strtol_l.constprop.0+0x94>
 800e48e:	f1bc 0f00 	cmp.w	ip, #0
 800e492:	da05      	bge.n	800e4a0 <_strtol_l.constprop.0+0xd8>
 800e494:	2322      	movs	r3, #34	; 0x22
 800e496:	6003      	str	r3, [r0, #0]
 800e498:	4646      	mov	r6, r8
 800e49a:	b942      	cbnz	r2, 800e4ae <_strtol_l.constprop.0+0xe6>
 800e49c:	4630      	mov	r0, r6
 800e49e:	e79e      	b.n	800e3de <_strtol_l.constprop.0+0x16>
 800e4a0:	b107      	cbz	r7, 800e4a4 <_strtol_l.constprop.0+0xdc>
 800e4a2:	4276      	negs	r6, r6
 800e4a4:	2a00      	cmp	r2, #0
 800e4a6:	d0f9      	beq.n	800e49c <_strtol_l.constprop.0+0xd4>
 800e4a8:	f1bc 0f00 	cmp.w	ip, #0
 800e4ac:	d000      	beq.n	800e4b0 <_strtol_l.constprop.0+0xe8>
 800e4ae:	1e69      	subs	r1, r5, #1
 800e4b0:	6011      	str	r1, [r2, #0]
 800e4b2:	e7f3      	b.n	800e49c <_strtol_l.constprop.0+0xd4>
 800e4b4:	2430      	movs	r4, #48	; 0x30
 800e4b6:	2b00      	cmp	r3, #0
 800e4b8:	d1b1      	bne.n	800e41e <_strtol_l.constprop.0+0x56>
 800e4ba:	2308      	movs	r3, #8
 800e4bc:	e7af      	b.n	800e41e <_strtol_l.constprop.0+0x56>
 800e4be:	2c30      	cmp	r4, #48	; 0x30
 800e4c0:	d0a5      	beq.n	800e40e <_strtol_l.constprop.0+0x46>
 800e4c2:	230a      	movs	r3, #10
 800e4c4:	e7ab      	b.n	800e41e <_strtol_l.constprop.0+0x56>
 800e4c6:	bf00      	nop
 800e4c8:	08011671 	.word	0x08011671

0800e4cc <_strtol_r>:
 800e4cc:	f7ff bf7c 	b.w	800e3c8 <_strtol_l.constprop.0>

0800e4d0 <quorem>:
 800e4d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4d4:	6903      	ldr	r3, [r0, #16]
 800e4d6:	690c      	ldr	r4, [r1, #16]
 800e4d8:	42a3      	cmp	r3, r4
 800e4da:	4607      	mov	r7, r0
 800e4dc:	f2c0 8081 	blt.w	800e5e2 <quorem+0x112>
 800e4e0:	3c01      	subs	r4, #1
 800e4e2:	f101 0814 	add.w	r8, r1, #20
 800e4e6:	f100 0514 	add.w	r5, r0, #20
 800e4ea:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e4ee:	9301      	str	r3, [sp, #4]
 800e4f0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e4f4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e4f8:	3301      	adds	r3, #1
 800e4fa:	429a      	cmp	r2, r3
 800e4fc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e500:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e504:	fbb2 f6f3 	udiv	r6, r2, r3
 800e508:	d331      	bcc.n	800e56e <quorem+0x9e>
 800e50a:	f04f 0e00 	mov.w	lr, #0
 800e50e:	4640      	mov	r0, r8
 800e510:	46ac      	mov	ip, r5
 800e512:	46f2      	mov	sl, lr
 800e514:	f850 2b04 	ldr.w	r2, [r0], #4
 800e518:	b293      	uxth	r3, r2
 800e51a:	fb06 e303 	mla	r3, r6, r3, lr
 800e51e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e522:	b29b      	uxth	r3, r3
 800e524:	ebaa 0303 	sub.w	r3, sl, r3
 800e528:	f8dc a000 	ldr.w	sl, [ip]
 800e52c:	0c12      	lsrs	r2, r2, #16
 800e52e:	fa13 f38a 	uxtah	r3, r3, sl
 800e532:	fb06 e202 	mla	r2, r6, r2, lr
 800e536:	9300      	str	r3, [sp, #0]
 800e538:	9b00      	ldr	r3, [sp, #0]
 800e53a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e53e:	b292      	uxth	r2, r2
 800e540:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e544:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e548:	f8bd 3000 	ldrh.w	r3, [sp]
 800e54c:	4581      	cmp	r9, r0
 800e54e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e552:	f84c 3b04 	str.w	r3, [ip], #4
 800e556:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e55a:	d2db      	bcs.n	800e514 <quorem+0x44>
 800e55c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e560:	b92b      	cbnz	r3, 800e56e <quorem+0x9e>
 800e562:	9b01      	ldr	r3, [sp, #4]
 800e564:	3b04      	subs	r3, #4
 800e566:	429d      	cmp	r5, r3
 800e568:	461a      	mov	r2, r3
 800e56a:	d32e      	bcc.n	800e5ca <quorem+0xfa>
 800e56c:	613c      	str	r4, [r7, #16]
 800e56e:	4638      	mov	r0, r7
 800e570:	f001 fc82 	bl	800fe78 <__mcmp>
 800e574:	2800      	cmp	r0, #0
 800e576:	db24      	blt.n	800e5c2 <quorem+0xf2>
 800e578:	3601      	adds	r6, #1
 800e57a:	4628      	mov	r0, r5
 800e57c:	f04f 0c00 	mov.w	ip, #0
 800e580:	f858 2b04 	ldr.w	r2, [r8], #4
 800e584:	f8d0 e000 	ldr.w	lr, [r0]
 800e588:	b293      	uxth	r3, r2
 800e58a:	ebac 0303 	sub.w	r3, ip, r3
 800e58e:	0c12      	lsrs	r2, r2, #16
 800e590:	fa13 f38e 	uxtah	r3, r3, lr
 800e594:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e598:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e59c:	b29b      	uxth	r3, r3
 800e59e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5a2:	45c1      	cmp	r9, r8
 800e5a4:	f840 3b04 	str.w	r3, [r0], #4
 800e5a8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e5ac:	d2e8      	bcs.n	800e580 <quorem+0xb0>
 800e5ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e5b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e5b6:	b922      	cbnz	r2, 800e5c2 <quorem+0xf2>
 800e5b8:	3b04      	subs	r3, #4
 800e5ba:	429d      	cmp	r5, r3
 800e5bc:	461a      	mov	r2, r3
 800e5be:	d30a      	bcc.n	800e5d6 <quorem+0x106>
 800e5c0:	613c      	str	r4, [r7, #16]
 800e5c2:	4630      	mov	r0, r6
 800e5c4:	b003      	add	sp, #12
 800e5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e5ca:	6812      	ldr	r2, [r2, #0]
 800e5cc:	3b04      	subs	r3, #4
 800e5ce:	2a00      	cmp	r2, #0
 800e5d0:	d1cc      	bne.n	800e56c <quorem+0x9c>
 800e5d2:	3c01      	subs	r4, #1
 800e5d4:	e7c7      	b.n	800e566 <quorem+0x96>
 800e5d6:	6812      	ldr	r2, [r2, #0]
 800e5d8:	3b04      	subs	r3, #4
 800e5da:	2a00      	cmp	r2, #0
 800e5dc:	d1f0      	bne.n	800e5c0 <quorem+0xf0>
 800e5de:	3c01      	subs	r4, #1
 800e5e0:	e7eb      	b.n	800e5ba <quorem+0xea>
 800e5e2:	2000      	movs	r0, #0
 800e5e4:	e7ee      	b.n	800e5c4 <quorem+0xf4>
	...

0800e5e8 <_dtoa_r>:
 800e5e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5ec:	ed2d 8b04 	vpush	{d8-d9}
 800e5f0:	ec57 6b10 	vmov	r6, r7, d0
 800e5f4:	b093      	sub	sp, #76	; 0x4c
 800e5f6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e5f8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e5fc:	9106      	str	r1, [sp, #24]
 800e5fe:	ee10 aa10 	vmov	sl, s0
 800e602:	4604      	mov	r4, r0
 800e604:	9209      	str	r2, [sp, #36]	; 0x24
 800e606:	930c      	str	r3, [sp, #48]	; 0x30
 800e608:	46bb      	mov	fp, r7
 800e60a:	b975      	cbnz	r5, 800e62a <_dtoa_r+0x42>
 800e60c:	2010      	movs	r0, #16
 800e60e:	f001 f94d 	bl	800f8ac <malloc>
 800e612:	4602      	mov	r2, r0
 800e614:	6260      	str	r0, [r4, #36]	; 0x24
 800e616:	b920      	cbnz	r0, 800e622 <_dtoa_r+0x3a>
 800e618:	4ba7      	ldr	r3, [pc, #668]	; (800e8b8 <_dtoa_r+0x2d0>)
 800e61a:	21ea      	movs	r1, #234	; 0xea
 800e61c:	48a7      	ldr	r0, [pc, #668]	; (800e8bc <_dtoa_r+0x2d4>)
 800e61e:	f002 f8ad 	bl	801077c <__assert_func>
 800e622:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e626:	6005      	str	r5, [r0, #0]
 800e628:	60c5      	str	r5, [r0, #12]
 800e62a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e62c:	6819      	ldr	r1, [r3, #0]
 800e62e:	b151      	cbz	r1, 800e646 <_dtoa_r+0x5e>
 800e630:	685a      	ldr	r2, [r3, #4]
 800e632:	604a      	str	r2, [r1, #4]
 800e634:	2301      	movs	r3, #1
 800e636:	4093      	lsls	r3, r2
 800e638:	608b      	str	r3, [r1, #8]
 800e63a:	4620      	mov	r0, r4
 800e63c:	f001 f990 	bl	800f960 <_Bfree>
 800e640:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e642:	2200      	movs	r2, #0
 800e644:	601a      	str	r2, [r3, #0]
 800e646:	1e3b      	subs	r3, r7, #0
 800e648:	bfaa      	itet	ge
 800e64a:	2300      	movge	r3, #0
 800e64c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e650:	f8c8 3000 	strge.w	r3, [r8]
 800e654:	4b9a      	ldr	r3, [pc, #616]	; (800e8c0 <_dtoa_r+0x2d8>)
 800e656:	bfbc      	itt	lt
 800e658:	2201      	movlt	r2, #1
 800e65a:	f8c8 2000 	strlt.w	r2, [r8]
 800e65e:	ea33 030b 	bics.w	r3, r3, fp
 800e662:	d11b      	bne.n	800e69c <_dtoa_r+0xb4>
 800e664:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e666:	f242 730f 	movw	r3, #9999	; 0x270f
 800e66a:	6013      	str	r3, [r2, #0]
 800e66c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e670:	4333      	orrs	r3, r6
 800e672:	f000 8592 	beq.w	800f19a <_dtoa_r+0xbb2>
 800e676:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e678:	b963      	cbnz	r3, 800e694 <_dtoa_r+0xac>
 800e67a:	4b92      	ldr	r3, [pc, #584]	; (800e8c4 <_dtoa_r+0x2dc>)
 800e67c:	e022      	b.n	800e6c4 <_dtoa_r+0xdc>
 800e67e:	4b92      	ldr	r3, [pc, #584]	; (800e8c8 <_dtoa_r+0x2e0>)
 800e680:	9301      	str	r3, [sp, #4]
 800e682:	3308      	adds	r3, #8
 800e684:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e686:	6013      	str	r3, [r2, #0]
 800e688:	9801      	ldr	r0, [sp, #4]
 800e68a:	b013      	add	sp, #76	; 0x4c
 800e68c:	ecbd 8b04 	vpop	{d8-d9}
 800e690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e694:	4b8b      	ldr	r3, [pc, #556]	; (800e8c4 <_dtoa_r+0x2dc>)
 800e696:	9301      	str	r3, [sp, #4]
 800e698:	3303      	adds	r3, #3
 800e69a:	e7f3      	b.n	800e684 <_dtoa_r+0x9c>
 800e69c:	2200      	movs	r2, #0
 800e69e:	2300      	movs	r3, #0
 800e6a0:	4650      	mov	r0, sl
 800e6a2:	4659      	mov	r1, fp
 800e6a4:	f7f2 fa18 	bl	8000ad8 <__aeabi_dcmpeq>
 800e6a8:	ec4b ab19 	vmov	d9, sl, fp
 800e6ac:	4680      	mov	r8, r0
 800e6ae:	b158      	cbz	r0, 800e6c8 <_dtoa_r+0xe0>
 800e6b0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e6b2:	2301      	movs	r3, #1
 800e6b4:	6013      	str	r3, [r2, #0]
 800e6b6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	f000 856b 	beq.w	800f194 <_dtoa_r+0xbac>
 800e6be:	4883      	ldr	r0, [pc, #524]	; (800e8cc <_dtoa_r+0x2e4>)
 800e6c0:	6018      	str	r0, [r3, #0]
 800e6c2:	1e43      	subs	r3, r0, #1
 800e6c4:	9301      	str	r3, [sp, #4]
 800e6c6:	e7df      	b.n	800e688 <_dtoa_r+0xa0>
 800e6c8:	ec4b ab10 	vmov	d0, sl, fp
 800e6cc:	aa10      	add	r2, sp, #64	; 0x40
 800e6ce:	a911      	add	r1, sp, #68	; 0x44
 800e6d0:	4620      	mov	r0, r4
 800e6d2:	f001 fcf3 	bl	80100bc <__d2b>
 800e6d6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e6da:	ee08 0a10 	vmov	s16, r0
 800e6de:	2d00      	cmp	r5, #0
 800e6e0:	f000 8084 	beq.w	800e7ec <_dtoa_r+0x204>
 800e6e4:	ee19 3a90 	vmov	r3, s19
 800e6e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6ec:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e6f0:	4656      	mov	r6, sl
 800e6f2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e6f6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e6fa:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e6fe:	4b74      	ldr	r3, [pc, #464]	; (800e8d0 <_dtoa_r+0x2e8>)
 800e700:	2200      	movs	r2, #0
 800e702:	4630      	mov	r0, r6
 800e704:	4639      	mov	r1, r7
 800e706:	f7f1 fdc7 	bl	8000298 <__aeabi_dsub>
 800e70a:	a365      	add	r3, pc, #404	; (adr r3, 800e8a0 <_dtoa_r+0x2b8>)
 800e70c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e710:	f7f1 ff7a 	bl	8000608 <__aeabi_dmul>
 800e714:	a364      	add	r3, pc, #400	; (adr r3, 800e8a8 <_dtoa_r+0x2c0>)
 800e716:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e71a:	f7f1 fdbf 	bl	800029c <__adddf3>
 800e71e:	4606      	mov	r6, r0
 800e720:	4628      	mov	r0, r5
 800e722:	460f      	mov	r7, r1
 800e724:	f7f1 ff06 	bl	8000534 <__aeabi_i2d>
 800e728:	a361      	add	r3, pc, #388	; (adr r3, 800e8b0 <_dtoa_r+0x2c8>)
 800e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e72e:	f7f1 ff6b 	bl	8000608 <__aeabi_dmul>
 800e732:	4602      	mov	r2, r0
 800e734:	460b      	mov	r3, r1
 800e736:	4630      	mov	r0, r6
 800e738:	4639      	mov	r1, r7
 800e73a:	f7f1 fdaf 	bl	800029c <__adddf3>
 800e73e:	4606      	mov	r6, r0
 800e740:	460f      	mov	r7, r1
 800e742:	f7f2 fa11 	bl	8000b68 <__aeabi_d2iz>
 800e746:	2200      	movs	r2, #0
 800e748:	9000      	str	r0, [sp, #0]
 800e74a:	2300      	movs	r3, #0
 800e74c:	4630      	mov	r0, r6
 800e74e:	4639      	mov	r1, r7
 800e750:	f7f2 f9cc 	bl	8000aec <__aeabi_dcmplt>
 800e754:	b150      	cbz	r0, 800e76c <_dtoa_r+0x184>
 800e756:	9800      	ldr	r0, [sp, #0]
 800e758:	f7f1 feec 	bl	8000534 <__aeabi_i2d>
 800e75c:	4632      	mov	r2, r6
 800e75e:	463b      	mov	r3, r7
 800e760:	f7f2 f9ba 	bl	8000ad8 <__aeabi_dcmpeq>
 800e764:	b910      	cbnz	r0, 800e76c <_dtoa_r+0x184>
 800e766:	9b00      	ldr	r3, [sp, #0]
 800e768:	3b01      	subs	r3, #1
 800e76a:	9300      	str	r3, [sp, #0]
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	2b16      	cmp	r3, #22
 800e770:	d85a      	bhi.n	800e828 <_dtoa_r+0x240>
 800e772:	9a00      	ldr	r2, [sp, #0]
 800e774:	4b57      	ldr	r3, [pc, #348]	; (800e8d4 <_dtoa_r+0x2ec>)
 800e776:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e77a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e77e:	ec51 0b19 	vmov	r0, r1, d9
 800e782:	f7f2 f9b3 	bl	8000aec <__aeabi_dcmplt>
 800e786:	2800      	cmp	r0, #0
 800e788:	d050      	beq.n	800e82c <_dtoa_r+0x244>
 800e78a:	9b00      	ldr	r3, [sp, #0]
 800e78c:	3b01      	subs	r3, #1
 800e78e:	9300      	str	r3, [sp, #0]
 800e790:	2300      	movs	r3, #0
 800e792:	930b      	str	r3, [sp, #44]	; 0x2c
 800e794:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e796:	1b5d      	subs	r5, r3, r5
 800e798:	1e6b      	subs	r3, r5, #1
 800e79a:	9305      	str	r3, [sp, #20]
 800e79c:	bf45      	ittet	mi
 800e79e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e7a2:	9304      	strmi	r3, [sp, #16]
 800e7a4:	2300      	movpl	r3, #0
 800e7a6:	2300      	movmi	r3, #0
 800e7a8:	bf4c      	ite	mi
 800e7aa:	9305      	strmi	r3, [sp, #20]
 800e7ac:	9304      	strpl	r3, [sp, #16]
 800e7ae:	9b00      	ldr	r3, [sp, #0]
 800e7b0:	2b00      	cmp	r3, #0
 800e7b2:	db3d      	blt.n	800e830 <_dtoa_r+0x248>
 800e7b4:	9b05      	ldr	r3, [sp, #20]
 800e7b6:	9a00      	ldr	r2, [sp, #0]
 800e7b8:	920a      	str	r2, [sp, #40]	; 0x28
 800e7ba:	4413      	add	r3, r2
 800e7bc:	9305      	str	r3, [sp, #20]
 800e7be:	2300      	movs	r3, #0
 800e7c0:	9307      	str	r3, [sp, #28]
 800e7c2:	9b06      	ldr	r3, [sp, #24]
 800e7c4:	2b09      	cmp	r3, #9
 800e7c6:	f200 8089 	bhi.w	800e8dc <_dtoa_r+0x2f4>
 800e7ca:	2b05      	cmp	r3, #5
 800e7cc:	bfc4      	itt	gt
 800e7ce:	3b04      	subgt	r3, #4
 800e7d0:	9306      	strgt	r3, [sp, #24]
 800e7d2:	9b06      	ldr	r3, [sp, #24]
 800e7d4:	f1a3 0302 	sub.w	r3, r3, #2
 800e7d8:	bfcc      	ite	gt
 800e7da:	2500      	movgt	r5, #0
 800e7dc:	2501      	movle	r5, #1
 800e7de:	2b03      	cmp	r3, #3
 800e7e0:	f200 8087 	bhi.w	800e8f2 <_dtoa_r+0x30a>
 800e7e4:	e8df f003 	tbb	[pc, r3]
 800e7e8:	59383a2d 	.word	0x59383a2d
 800e7ec:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e7f0:	441d      	add	r5, r3
 800e7f2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e7f6:	2b20      	cmp	r3, #32
 800e7f8:	bfc1      	itttt	gt
 800e7fa:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e7fe:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e802:	fa0b f303 	lslgt.w	r3, fp, r3
 800e806:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e80a:	bfda      	itte	le
 800e80c:	f1c3 0320 	rsble	r3, r3, #32
 800e810:	fa06 f003 	lslle.w	r0, r6, r3
 800e814:	4318      	orrgt	r0, r3
 800e816:	f7f1 fe7d 	bl	8000514 <__aeabi_ui2d>
 800e81a:	2301      	movs	r3, #1
 800e81c:	4606      	mov	r6, r0
 800e81e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e822:	3d01      	subs	r5, #1
 800e824:	930e      	str	r3, [sp, #56]	; 0x38
 800e826:	e76a      	b.n	800e6fe <_dtoa_r+0x116>
 800e828:	2301      	movs	r3, #1
 800e82a:	e7b2      	b.n	800e792 <_dtoa_r+0x1aa>
 800e82c:	900b      	str	r0, [sp, #44]	; 0x2c
 800e82e:	e7b1      	b.n	800e794 <_dtoa_r+0x1ac>
 800e830:	9b04      	ldr	r3, [sp, #16]
 800e832:	9a00      	ldr	r2, [sp, #0]
 800e834:	1a9b      	subs	r3, r3, r2
 800e836:	9304      	str	r3, [sp, #16]
 800e838:	4253      	negs	r3, r2
 800e83a:	9307      	str	r3, [sp, #28]
 800e83c:	2300      	movs	r3, #0
 800e83e:	930a      	str	r3, [sp, #40]	; 0x28
 800e840:	e7bf      	b.n	800e7c2 <_dtoa_r+0x1da>
 800e842:	2300      	movs	r3, #0
 800e844:	9308      	str	r3, [sp, #32]
 800e846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e848:	2b00      	cmp	r3, #0
 800e84a:	dc55      	bgt.n	800e8f8 <_dtoa_r+0x310>
 800e84c:	2301      	movs	r3, #1
 800e84e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e852:	461a      	mov	r2, r3
 800e854:	9209      	str	r2, [sp, #36]	; 0x24
 800e856:	e00c      	b.n	800e872 <_dtoa_r+0x28a>
 800e858:	2301      	movs	r3, #1
 800e85a:	e7f3      	b.n	800e844 <_dtoa_r+0x25c>
 800e85c:	2300      	movs	r3, #0
 800e85e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e860:	9308      	str	r3, [sp, #32]
 800e862:	9b00      	ldr	r3, [sp, #0]
 800e864:	4413      	add	r3, r2
 800e866:	9302      	str	r3, [sp, #8]
 800e868:	3301      	adds	r3, #1
 800e86a:	2b01      	cmp	r3, #1
 800e86c:	9303      	str	r3, [sp, #12]
 800e86e:	bfb8      	it	lt
 800e870:	2301      	movlt	r3, #1
 800e872:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e874:	2200      	movs	r2, #0
 800e876:	6042      	str	r2, [r0, #4]
 800e878:	2204      	movs	r2, #4
 800e87a:	f102 0614 	add.w	r6, r2, #20
 800e87e:	429e      	cmp	r6, r3
 800e880:	6841      	ldr	r1, [r0, #4]
 800e882:	d93d      	bls.n	800e900 <_dtoa_r+0x318>
 800e884:	4620      	mov	r0, r4
 800e886:	f001 f82b 	bl	800f8e0 <_Balloc>
 800e88a:	9001      	str	r0, [sp, #4]
 800e88c:	2800      	cmp	r0, #0
 800e88e:	d13b      	bne.n	800e908 <_dtoa_r+0x320>
 800e890:	4b11      	ldr	r3, [pc, #68]	; (800e8d8 <_dtoa_r+0x2f0>)
 800e892:	4602      	mov	r2, r0
 800e894:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e898:	e6c0      	b.n	800e61c <_dtoa_r+0x34>
 800e89a:	2301      	movs	r3, #1
 800e89c:	e7df      	b.n	800e85e <_dtoa_r+0x276>
 800e89e:	bf00      	nop
 800e8a0:	636f4361 	.word	0x636f4361
 800e8a4:	3fd287a7 	.word	0x3fd287a7
 800e8a8:	8b60c8b3 	.word	0x8b60c8b3
 800e8ac:	3fc68a28 	.word	0x3fc68a28
 800e8b0:	509f79fb 	.word	0x509f79fb
 800e8b4:	3fd34413 	.word	0x3fd34413
 800e8b8:	0801177e 	.word	0x0801177e
 800e8bc:	08011795 	.word	0x08011795
 800e8c0:	7ff00000 	.word	0x7ff00000
 800e8c4:	0801177a 	.word	0x0801177a
 800e8c8:	08011771 	.word	0x08011771
 800e8cc:	080115f1 	.word	0x080115f1
 800e8d0:	3ff80000 	.word	0x3ff80000
 800e8d4:	08011900 	.word	0x08011900
 800e8d8:	080117f0 	.word	0x080117f0
 800e8dc:	2501      	movs	r5, #1
 800e8de:	2300      	movs	r3, #0
 800e8e0:	9306      	str	r3, [sp, #24]
 800e8e2:	9508      	str	r5, [sp, #32]
 800e8e4:	f04f 33ff 	mov.w	r3, #4294967295
 800e8e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e8ec:	2200      	movs	r2, #0
 800e8ee:	2312      	movs	r3, #18
 800e8f0:	e7b0      	b.n	800e854 <_dtoa_r+0x26c>
 800e8f2:	2301      	movs	r3, #1
 800e8f4:	9308      	str	r3, [sp, #32]
 800e8f6:	e7f5      	b.n	800e8e4 <_dtoa_r+0x2fc>
 800e8f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e8fa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e8fe:	e7b8      	b.n	800e872 <_dtoa_r+0x28a>
 800e900:	3101      	adds	r1, #1
 800e902:	6041      	str	r1, [r0, #4]
 800e904:	0052      	lsls	r2, r2, #1
 800e906:	e7b8      	b.n	800e87a <_dtoa_r+0x292>
 800e908:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e90a:	9a01      	ldr	r2, [sp, #4]
 800e90c:	601a      	str	r2, [r3, #0]
 800e90e:	9b03      	ldr	r3, [sp, #12]
 800e910:	2b0e      	cmp	r3, #14
 800e912:	f200 809d 	bhi.w	800ea50 <_dtoa_r+0x468>
 800e916:	2d00      	cmp	r5, #0
 800e918:	f000 809a 	beq.w	800ea50 <_dtoa_r+0x468>
 800e91c:	9b00      	ldr	r3, [sp, #0]
 800e91e:	2b00      	cmp	r3, #0
 800e920:	dd32      	ble.n	800e988 <_dtoa_r+0x3a0>
 800e922:	4ab7      	ldr	r2, [pc, #732]	; (800ec00 <_dtoa_r+0x618>)
 800e924:	f003 030f 	and.w	r3, r3, #15
 800e928:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e92c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e930:	9b00      	ldr	r3, [sp, #0]
 800e932:	05d8      	lsls	r0, r3, #23
 800e934:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e938:	d516      	bpl.n	800e968 <_dtoa_r+0x380>
 800e93a:	4bb2      	ldr	r3, [pc, #712]	; (800ec04 <_dtoa_r+0x61c>)
 800e93c:	ec51 0b19 	vmov	r0, r1, d9
 800e940:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e944:	f7f1 ff8a 	bl	800085c <__aeabi_ddiv>
 800e948:	f007 070f 	and.w	r7, r7, #15
 800e94c:	4682      	mov	sl, r0
 800e94e:	468b      	mov	fp, r1
 800e950:	2503      	movs	r5, #3
 800e952:	4eac      	ldr	r6, [pc, #688]	; (800ec04 <_dtoa_r+0x61c>)
 800e954:	b957      	cbnz	r7, 800e96c <_dtoa_r+0x384>
 800e956:	4642      	mov	r2, r8
 800e958:	464b      	mov	r3, r9
 800e95a:	4650      	mov	r0, sl
 800e95c:	4659      	mov	r1, fp
 800e95e:	f7f1 ff7d 	bl	800085c <__aeabi_ddiv>
 800e962:	4682      	mov	sl, r0
 800e964:	468b      	mov	fp, r1
 800e966:	e028      	b.n	800e9ba <_dtoa_r+0x3d2>
 800e968:	2502      	movs	r5, #2
 800e96a:	e7f2      	b.n	800e952 <_dtoa_r+0x36a>
 800e96c:	07f9      	lsls	r1, r7, #31
 800e96e:	d508      	bpl.n	800e982 <_dtoa_r+0x39a>
 800e970:	4640      	mov	r0, r8
 800e972:	4649      	mov	r1, r9
 800e974:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e978:	f7f1 fe46 	bl	8000608 <__aeabi_dmul>
 800e97c:	3501      	adds	r5, #1
 800e97e:	4680      	mov	r8, r0
 800e980:	4689      	mov	r9, r1
 800e982:	107f      	asrs	r7, r7, #1
 800e984:	3608      	adds	r6, #8
 800e986:	e7e5      	b.n	800e954 <_dtoa_r+0x36c>
 800e988:	f000 809b 	beq.w	800eac2 <_dtoa_r+0x4da>
 800e98c:	9b00      	ldr	r3, [sp, #0]
 800e98e:	4f9d      	ldr	r7, [pc, #628]	; (800ec04 <_dtoa_r+0x61c>)
 800e990:	425e      	negs	r6, r3
 800e992:	4b9b      	ldr	r3, [pc, #620]	; (800ec00 <_dtoa_r+0x618>)
 800e994:	f006 020f 	and.w	r2, r6, #15
 800e998:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a0:	ec51 0b19 	vmov	r0, r1, d9
 800e9a4:	f7f1 fe30 	bl	8000608 <__aeabi_dmul>
 800e9a8:	1136      	asrs	r6, r6, #4
 800e9aa:	4682      	mov	sl, r0
 800e9ac:	468b      	mov	fp, r1
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	2502      	movs	r5, #2
 800e9b2:	2e00      	cmp	r6, #0
 800e9b4:	d17a      	bne.n	800eaac <_dtoa_r+0x4c4>
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d1d3      	bne.n	800e962 <_dtoa_r+0x37a>
 800e9ba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9bc:	2b00      	cmp	r3, #0
 800e9be:	f000 8082 	beq.w	800eac6 <_dtoa_r+0x4de>
 800e9c2:	4b91      	ldr	r3, [pc, #580]	; (800ec08 <_dtoa_r+0x620>)
 800e9c4:	2200      	movs	r2, #0
 800e9c6:	4650      	mov	r0, sl
 800e9c8:	4659      	mov	r1, fp
 800e9ca:	f7f2 f88f 	bl	8000aec <__aeabi_dcmplt>
 800e9ce:	2800      	cmp	r0, #0
 800e9d0:	d079      	beq.n	800eac6 <_dtoa_r+0x4de>
 800e9d2:	9b03      	ldr	r3, [sp, #12]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d076      	beq.n	800eac6 <_dtoa_r+0x4de>
 800e9d8:	9b02      	ldr	r3, [sp, #8]
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	dd36      	ble.n	800ea4c <_dtoa_r+0x464>
 800e9de:	9b00      	ldr	r3, [sp, #0]
 800e9e0:	4650      	mov	r0, sl
 800e9e2:	4659      	mov	r1, fp
 800e9e4:	1e5f      	subs	r7, r3, #1
 800e9e6:	2200      	movs	r2, #0
 800e9e8:	4b88      	ldr	r3, [pc, #544]	; (800ec0c <_dtoa_r+0x624>)
 800e9ea:	f7f1 fe0d 	bl	8000608 <__aeabi_dmul>
 800e9ee:	9e02      	ldr	r6, [sp, #8]
 800e9f0:	4682      	mov	sl, r0
 800e9f2:	468b      	mov	fp, r1
 800e9f4:	3501      	adds	r5, #1
 800e9f6:	4628      	mov	r0, r5
 800e9f8:	f7f1 fd9c 	bl	8000534 <__aeabi_i2d>
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	465b      	mov	r3, fp
 800ea00:	f7f1 fe02 	bl	8000608 <__aeabi_dmul>
 800ea04:	4b82      	ldr	r3, [pc, #520]	; (800ec10 <_dtoa_r+0x628>)
 800ea06:	2200      	movs	r2, #0
 800ea08:	f7f1 fc48 	bl	800029c <__adddf3>
 800ea0c:	46d0      	mov	r8, sl
 800ea0e:	46d9      	mov	r9, fp
 800ea10:	4682      	mov	sl, r0
 800ea12:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ea16:	2e00      	cmp	r6, #0
 800ea18:	d158      	bne.n	800eacc <_dtoa_r+0x4e4>
 800ea1a:	4b7e      	ldr	r3, [pc, #504]	; (800ec14 <_dtoa_r+0x62c>)
 800ea1c:	2200      	movs	r2, #0
 800ea1e:	4640      	mov	r0, r8
 800ea20:	4649      	mov	r1, r9
 800ea22:	f7f1 fc39 	bl	8000298 <__aeabi_dsub>
 800ea26:	4652      	mov	r2, sl
 800ea28:	465b      	mov	r3, fp
 800ea2a:	4680      	mov	r8, r0
 800ea2c:	4689      	mov	r9, r1
 800ea2e:	f7f2 f87b 	bl	8000b28 <__aeabi_dcmpgt>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	f040 8295 	bne.w	800ef62 <_dtoa_r+0x97a>
 800ea38:	4652      	mov	r2, sl
 800ea3a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ea3e:	4640      	mov	r0, r8
 800ea40:	4649      	mov	r1, r9
 800ea42:	f7f2 f853 	bl	8000aec <__aeabi_dcmplt>
 800ea46:	2800      	cmp	r0, #0
 800ea48:	f040 8289 	bne.w	800ef5e <_dtoa_r+0x976>
 800ea4c:	ec5b ab19 	vmov	sl, fp, d9
 800ea50:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	f2c0 8148 	blt.w	800ece8 <_dtoa_r+0x700>
 800ea58:	9a00      	ldr	r2, [sp, #0]
 800ea5a:	2a0e      	cmp	r2, #14
 800ea5c:	f300 8144 	bgt.w	800ece8 <_dtoa_r+0x700>
 800ea60:	4b67      	ldr	r3, [pc, #412]	; (800ec00 <_dtoa_r+0x618>)
 800ea62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea66:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ea6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	f280 80d5 	bge.w	800ec1c <_dtoa_r+0x634>
 800ea72:	9b03      	ldr	r3, [sp, #12]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f300 80d1 	bgt.w	800ec1c <_dtoa_r+0x634>
 800ea7a:	f040 826f 	bne.w	800ef5c <_dtoa_r+0x974>
 800ea7e:	4b65      	ldr	r3, [pc, #404]	; (800ec14 <_dtoa_r+0x62c>)
 800ea80:	2200      	movs	r2, #0
 800ea82:	4640      	mov	r0, r8
 800ea84:	4649      	mov	r1, r9
 800ea86:	f7f1 fdbf 	bl	8000608 <__aeabi_dmul>
 800ea8a:	4652      	mov	r2, sl
 800ea8c:	465b      	mov	r3, fp
 800ea8e:	f7f2 f841 	bl	8000b14 <__aeabi_dcmpge>
 800ea92:	9e03      	ldr	r6, [sp, #12]
 800ea94:	4637      	mov	r7, r6
 800ea96:	2800      	cmp	r0, #0
 800ea98:	f040 8245 	bne.w	800ef26 <_dtoa_r+0x93e>
 800ea9c:	9d01      	ldr	r5, [sp, #4]
 800ea9e:	2331      	movs	r3, #49	; 0x31
 800eaa0:	f805 3b01 	strb.w	r3, [r5], #1
 800eaa4:	9b00      	ldr	r3, [sp, #0]
 800eaa6:	3301      	adds	r3, #1
 800eaa8:	9300      	str	r3, [sp, #0]
 800eaaa:	e240      	b.n	800ef2e <_dtoa_r+0x946>
 800eaac:	07f2      	lsls	r2, r6, #31
 800eaae:	d505      	bpl.n	800eabc <_dtoa_r+0x4d4>
 800eab0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800eab4:	f7f1 fda8 	bl	8000608 <__aeabi_dmul>
 800eab8:	3501      	adds	r5, #1
 800eaba:	2301      	movs	r3, #1
 800eabc:	1076      	asrs	r6, r6, #1
 800eabe:	3708      	adds	r7, #8
 800eac0:	e777      	b.n	800e9b2 <_dtoa_r+0x3ca>
 800eac2:	2502      	movs	r5, #2
 800eac4:	e779      	b.n	800e9ba <_dtoa_r+0x3d2>
 800eac6:	9f00      	ldr	r7, [sp, #0]
 800eac8:	9e03      	ldr	r6, [sp, #12]
 800eaca:	e794      	b.n	800e9f6 <_dtoa_r+0x40e>
 800eacc:	9901      	ldr	r1, [sp, #4]
 800eace:	4b4c      	ldr	r3, [pc, #304]	; (800ec00 <_dtoa_r+0x618>)
 800ead0:	4431      	add	r1, r6
 800ead2:	910d      	str	r1, [sp, #52]	; 0x34
 800ead4:	9908      	ldr	r1, [sp, #32]
 800ead6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800eada:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800eade:	2900      	cmp	r1, #0
 800eae0:	d043      	beq.n	800eb6a <_dtoa_r+0x582>
 800eae2:	494d      	ldr	r1, [pc, #308]	; (800ec18 <_dtoa_r+0x630>)
 800eae4:	2000      	movs	r0, #0
 800eae6:	f7f1 feb9 	bl	800085c <__aeabi_ddiv>
 800eaea:	4652      	mov	r2, sl
 800eaec:	465b      	mov	r3, fp
 800eaee:	f7f1 fbd3 	bl	8000298 <__aeabi_dsub>
 800eaf2:	9d01      	ldr	r5, [sp, #4]
 800eaf4:	4682      	mov	sl, r0
 800eaf6:	468b      	mov	fp, r1
 800eaf8:	4649      	mov	r1, r9
 800eafa:	4640      	mov	r0, r8
 800eafc:	f7f2 f834 	bl	8000b68 <__aeabi_d2iz>
 800eb00:	4606      	mov	r6, r0
 800eb02:	f7f1 fd17 	bl	8000534 <__aeabi_i2d>
 800eb06:	4602      	mov	r2, r0
 800eb08:	460b      	mov	r3, r1
 800eb0a:	4640      	mov	r0, r8
 800eb0c:	4649      	mov	r1, r9
 800eb0e:	f7f1 fbc3 	bl	8000298 <__aeabi_dsub>
 800eb12:	3630      	adds	r6, #48	; 0x30
 800eb14:	f805 6b01 	strb.w	r6, [r5], #1
 800eb18:	4652      	mov	r2, sl
 800eb1a:	465b      	mov	r3, fp
 800eb1c:	4680      	mov	r8, r0
 800eb1e:	4689      	mov	r9, r1
 800eb20:	f7f1 ffe4 	bl	8000aec <__aeabi_dcmplt>
 800eb24:	2800      	cmp	r0, #0
 800eb26:	d163      	bne.n	800ebf0 <_dtoa_r+0x608>
 800eb28:	4642      	mov	r2, r8
 800eb2a:	464b      	mov	r3, r9
 800eb2c:	4936      	ldr	r1, [pc, #216]	; (800ec08 <_dtoa_r+0x620>)
 800eb2e:	2000      	movs	r0, #0
 800eb30:	f7f1 fbb2 	bl	8000298 <__aeabi_dsub>
 800eb34:	4652      	mov	r2, sl
 800eb36:	465b      	mov	r3, fp
 800eb38:	f7f1 ffd8 	bl	8000aec <__aeabi_dcmplt>
 800eb3c:	2800      	cmp	r0, #0
 800eb3e:	f040 80b5 	bne.w	800ecac <_dtoa_r+0x6c4>
 800eb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb44:	429d      	cmp	r5, r3
 800eb46:	d081      	beq.n	800ea4c <_dtoa_r+0x464>
 800eb48:	4b30      	ldr	r3, [pc, #192]	; (800ec0c <_dtoa_r+0x624>)
 800eb4a:	2200      	movs	r2, #0
 800eb4c:	4650      	mov	r0, sl
 800eb4e:	4659      	mov	r1, fp
 800eb50:	f7f1 fd5a 	bl	8000608 <__aeabi_dmul>
 800eb54:	4b2d      	ldr	r3, [pc, #180]	; (800ec0c <_dtoa_r+0x624>)
 800eb56:	4682      	mov	sl, r0
 800eb58:	468b      	mov	fp, r1
 800eb5a:	4640      	mov	r0, r8
 800eb5c:	4649      	mov	r1, r9
 800eb5e:	2200      	movs	r2, #0
 800eb60:	f7f1 fd52 	bl	8000608 <__aeabi_dmul>
 800eb64:	4680      	mov	r8, r0
 800eb66:	4689      	mov	r9, r1
 800eb68:	e7c6      	b.n	800eaf8 <_dtoa_r+0x510>
 800eb6a:	4650      	mov	r0, sl
 800eb6c:	4659      	mov	r1, fp
 800eb6e:	f7f1 fd4b 	bl	8000608 <__aeabi_dmul>
 800eb72:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb74:	9d01      	ldr	r5, [sp, #4]
 800eb76:	930f      	str	r3, [sp, #60]	; 0x3c
 800eb78:	4682      	mov	sl, r0
 800eb7a:	468b      	mov	fp, r1
 800eb7c:	4649      	mov	r1, r9
 800eb7e:	4640      	mov	r0, r8
 800eb80:	f7f1 fff2 	bl	8000b68 <__aeabi_d2iz>
 800eb84:	4606      	mov	r6, r0
 800eb86:	f7f1 fcd5 	bl	8000534 <__aeabi_i2d>
 800eb8a:	3630      	adds	r6, #48	; 0x30
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	4640      	mov	r0, r8
 800eb92:	4649      	mov	r1, r9
 800eb94:	f7f1 fb80 	bl	8000298 <__aeabi_dsub>
 800eb98:	f805 6b01 	strb.w	r6, [r5], #1
 800eb9c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	4680      	mov	r8, r0
 800eba2:	4689      	mov	r9, r1
 800eba4:	f04f 0200 	mov.w	r2, #0
 800eba8:	d124      	bne.n	800ebf4 <_dtoa_r+0x60c>
 800ebaa:	4b1b      	ldr	r3, [pc, #108]	; (800ec18 <_dtoa_r+0x630>)
 800ebac:	4650      	mov	r0, sl
 800ebae:	4659      	mov	r1, fp
 800ebb0:	f7f1 fb74 	bl	800029c <__adddf3>
 800ebb4:	4602      	mov	r2, r0
 800ebb6:	460b      	mov	r3, r1
 800ebb8:	4640      	mov	r0, r8
 800ebba:	4649      	mov	r1, r9
 800ebbc:	f7f1 ffb4 	bl	8000b28 <__aeabi_dcmpgt>
 800ebc0:	2800      	cmp	r0, #0
 800ebc2:	d173      	bne.n	800ecac <_dtoa_r+0x6c4>
 800ebc4:	4652      	mov	r2, sl
 800ebc6:	465b      	mov	r3, fp
 800ebc8:	4913      	ldr	r1, [pc, #76]	; (800ec18 <_dtoa_r+0x630>)
 800ebca:	2000      	movs	r0, #0
 800ebcc:	f7f1 fb64 	bl	8000298 <__aeabi_dsub>
 800ebd0:	4602      	mov	r2, r0
 800ebd2:	460b      	mov	r3, r1
 800ebd4:	4640      	mov	r0, r8
 800ebd6:	4649      	mov	r1, r9
 800ebd8:	f7f1 ff88 	bl	8000aec <__aeabi_dcmplt>
 800ebdc:	2800      	cmp	r0, #0
 800ebde:	f43f af35 	beq.w	800ea4c <_dtoa_r+0x464>
 800ebe2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ebe4:	1e6b      	subs	r3, r5, #1
 800ebe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebe8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ebec:	2b30      	cmp	r3, #48	; 0x30
 800ebee:	d0f8      	beq.n	800ebe2 <_dtoa_r+0x5fa>
 800ebf0:	9700      	str	r7, [sp, #0]
 800ebf2:	e049      	b.n	800ec88 <_dtoa_r+0x6a0>
 800ebf4:	4b05      	ldr	r3, [pc, #20]	; (800ec0c <_dtoa_r+0x624>)
 800ebf6:	f7f1 fd07 	bl	8000608 <__aeabi_dmul>
 800ebfa:	4680      	mov	r8, r0
 800ebfc:	4689      	mov	r9, r1
 800ebfe:	e7bd      	b.n	800eb7c <_dtoa_r+0x594>
 800ec00:	08011900 	.word	0x08011900
 800ec04:	080118d8 	.word	0x080118d8
 800ec08:	3ff00000 	.word	0x3ff00000
 800ec0c:	40240000 	.word	0x40240000
 800ec10:	401c0000 	.word	0x401c0000
 800ec14:	40140000 	.word	0x40140000
 800ec18:	3fe00000 	.word	0x3fe00000
 800ec1c:	9d01      	ldr	r5, [sp, #4]
 800ec1e:	4656      	mov	r6, sl
 800ec20:	465f      	mov	r7, fp
 800ec22:	4642      	mov	r2, r8
 800ec24:	464b      	mov	r3, r9
 800ec26:	4630      	mov	r0, r6
 800ec28:	4639      	mov	r1, r7
 800ec2a:	f7f1 fe17 	bl	800085c <__aeabi_ddiv>
 800ec2e:	f7f1 ff9b 	bl	8000b68 <__aeabi_d2iz>
 800ec32:	4682      	mov	sl, r0
 800ec34:	f7f1 fc7e 	bl	8000534 <__aeabi_i2d>
 800ec38:	4642      	mov	r2, r8
 800ec3a:	464b      	mov	r3, r9
 800ec3c:	f7f1 fce4 	bl	8000608 <__aeabi_dmul>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	4630      	mov	r0, r6
 800ec46:	4639      	mov	r1, r7
 800ec48:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ec4c:	f7f1 fb24 	bl	8000298 <__aeabi_dsub>
 800ec50:	f805 6b01 	strb.w	r6, [r5], #1
 800ec54:	9e01      	ldr	r6, [sp, #4]
 800ec56:	9f03      	ldr	r7, [sp, #12]
 800ec58:	1bae      	subs	r6, r5, r6
 800ec5a:	42b7      	cmp	r7, r6
 800ec5c:	4602      	mov	r2, r0
 800ec5e:	460b      	mov	r3, r1
 800ec60:	d135      	bne.n	800ecce <_dtoa_r+0x6e6>
 800ec62:	f7f1 fb1b 	bl	800029c <__adddf3>
 800ec66:	4642      	mov	r2, r8
 800ec68:	464b      	mov	r3, r9
 800ec6a:	4606      	mov	r6, r0
 800ec6c:	460f      	mov	r7, r1
 800ec6e:	f7f1 ff5b 	bl	8000b28 <__aeabi_dcmpgt>
 800ec72:	b9d0      	cbnz	r0, 800ecaa <_dtoa_r+0x6c2>
 800ec74:	4642      	mov	r2, r8
 800ec76:	464b      	mov	r3, r9
 800ec78:	4630      	mov	r0, r6
 800ec7a:	4639      	mov	r1, r7
 800ec7c:	f7f1 ff2c 	bl	8000ad8 <__aeabi_dcmpeq>
 800ec80:	b110      	cbz	r0, 800ec88 <_dtoa_r+0x6a0>
 800ec82:	f01a 0f01 	tst.w	sl, #1
 800ec86:	d110      	bne.n	800ecaa <_dtoa_r+0x6c2>
 800ec88:	4620      	mov	r0, r4
 800ec8a:	ee18 1a10 	vmov	r1, s16
 800ec8e:	f000 fe67 	bl	800f960 <_Bfree>
 800ec92:	2300      	movs	r3, #0
 800ec94:	9800      	ldr	r0, [sp, #0]
 800ec96:	702b      	strb	r3, [r5, #0]
 800ec98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	6018      	str	r0, [r3, #0]
 800ec9e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800eca0:	2b00      	cmp	r3, #0
 800eca2:	f43f acf1 	beq.w	800e688 <_dtoa_r+0xa0>
 800eca6:	601d      	str	r5, [r3, #0]
 800eca8:	e4ee      	b.n	800e688 <_dtoa_r+0xa0>
 800ecaa:	9f00      	ldr	r7, [sp, #0]
 800ecac:	462b      	mov	r3, r5
 800ecae:	461d      	mov	r5, r3
 800ecb0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ecb4:	2a39      	cmp	r2, #57	; 0x39
 800ecb6:	d106      	bne.n	800ecc6 <_dtoa_r+0x6de>
 800ecb8:	9a01      	ldr	r2, [sp, #4]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d1f7      	bne.n	800ecae <_dtoa_r+0x6c6>
 800ecbe:	9901      	ldr	r1, [sp, #4]
 800ecc0:	2230      	movs	r2, #48	; 0x30
 800ecc2:	3701      	adds	r7, #1
 800ecc4:	700a      	strb	r2, [r1, #0]
 800ecc6:	781a      	ldrb	r2, [r3, #0]
 800ecc8:	3201      	adds	r2, #1
 800ecca:	701a      	strb	r2, [r3, #0]
 800eccc:	e790      	b.n	800ebf0 <_dtoa_r+0x608>
 800ecce:	4ba6      	ldr	r3, [pc, #664]	; (800ef68 <_dtoa_r+0x980>)
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	f7f1 fc99 	bl	8000608 <__aeabi_dmul>
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	2300      	movs	r3, #0
 800ecda:	4606      	mov	r6, r0
 800ecdc:	460f      	mov	r7, r1
 800ecde:	f7f1 fefb 	bl	8000ad8 <__aeabi_dcmpeq>
 800ece2:	2800      	cmp	r0, #0
 800ece4:	d09d      	beq.n	800ec22 <_dtoa_r+0x63a>
 800ece6:	e7cf      	b.n	800ec88 <_dtoa_r+0x6a0>
 800ece8:	9a08      	ldr	r2, [sp, #32]
 800ecea:	2a00      	cmp	r2, #0
 800ecec:	f000 80d7 	beq.w	800ee9e <_dtoa_r+0x8b6>
 800ecf0:	9a06      	ldr	r2, [sp, #24]
 800ecf2:	2a01      	cmp	r2, #1
 800ecf4:	f300 80ba 	bgt.w	800ee6c <_dtoa_r+0x884>
 800ecf8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ecfa:	2a00      	cmp	r2, #0
 800ecfc:	f000 80b2 	beq.w	800ee64 <_dtoa_r+0x87c>
 800ed00:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ed04:	9e07      	ldr	r6, [sp, #28]
 800ed06:	9d04      	ldr	r5, [sp, #16]
 800ed08:	9a04      	ldr	r2, [sp, #16]
 800ed0a:	441a      	add	r2, r3
 800ed0c:	9204      	str	r2, [sp, #16]
 800ed0e:	9a05      	ldr	r2, [sp, #20]
 800ed10:	2101      	movs	r1, #1
 800ed12:	441a      	add	r2, r3
 800ed14:	4620      	mov	r0, r4
 800ed16:	9205      	str	r2, [sp, #20]
 800ed18:	f000 ff24 	bl	800fb64 <__i2b>
 800ed1c:	4607      	mov	r7, r0
 800ed1e:	2d00      	cmp	r5, #0
 800ed20:	dd0c      	ble.n	800ed3c <_dtoa_r+0x754>
 800ed22:	9b05      	ldr	r3, [sp, #20]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	dd09      	ble.n	800ed3c <_dtoa_r+0x754>
 800ed28:	42ab      	cmp	r3, r5
 800ed2a:	9a04      	ldr	r2, [sp, #16]
 800ed2c:	bfa8      	it	ge
 800ed2e:	462b      	movge	r3, r5
 800ed30:	1ad2      	subs	r2, r2, r3
 800ed32:	9204      	str	r2, [sp, #16]
 800ed34:	9a05      	ldr	r2, [sp, #20]
 800ed36:	1aed      	subs	r5, r5, r3
 800ed38:	1ad3      	subs	r3, r2, r3
 800ed3a:	9305      	str	r3, [sp, #20]
 800ed3c:	9b07      	ldr	r3, [sp, #28]
 800ed3e:	b31b      	cbz	r3, 800ed88 <_dtoa_r+0x7a0>
 800ed40:	9b08      	ldr	r3, [sp, #32]
 800ed42:	2b00      	cmp	r3, #0
 800ed44:	f000 80af 	beq.w	800eea6 <_dtoa_r+0x8be>
 800ed48:	2e00      	cmp	r6, #0
 800ed4a:	dd13      	ble.n	800ed74 <_dtoa_r+0x78c>
 800ed4c:	4639      	mov	r1, r7
 800ed4e:	4632      	mov	r2, r6
 800ed50:	4620      	mov	r0, r4
 800ed52:	f000 ffc7 	bl	800fce4 <__pow5mult>
 800ed56:	ee18 2a10 	vmov	r2, s16
 800ed5a:	4601      	mov	r1, r0
 800ed5c:	4607      	mov	r7, r0
 800ed5e:	4620      	mov	r0, r4
 800ed60:	f000 ff16 	bl	800fb90 <__multiply>
 800ed64:	ee18 1a10 	vmov	r1, s16
 800ed68:	4680      	mov	r8, r0
 800ed6a:	4620      	mov	r0, r4
 800ed6c:	f000 fdf8 	bl	800f960 <_Bfree>
 800ed70:	ee08 8a10 	vmov	s16, r8
 800ed74:	9b07      	ldr	r3, [sp, #28]
 800ed76:	1b9a      	subs	r2, r3, r6
 800ed78:	d006      	beq.n	800ed88 <_dtoa_r+0x7a0>
 800ed7a:	ee18 1a10 	vmov	r1, s16
 800ed7e:	4620      	mov	r0, r4
 800ed80:	f000 ffb0 	bl	800fce4 <__pow5mult>
 800ed84:	ee08 0a10 	vmov	s16, r0
 800ed88:	2101      	movs	r1, #1
 800ed8a:	4620      	mov	r0, r4
 800ed8c:	f000 feea 	bl	800fb64 <__i2b>
 800ed90:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ed92:	2b00      	cmp	r3, #0
 800ed94:	4606      	mov	r6, r0
 800ed96:	f340 8088 	ble.w	800eeaa <_dtoa_r+0x8c2>
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	4601      	mov	r1, r0
 800ed9e:	4620      	mov	r0, r4
 800eda0:	f000 ffa0 	bl	800fce4 <__pow5mult>
 800eda4:	9b06      	ldr	r3, [sp, #24]
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	4606      	mov	r6, r0
 800edaa:	f340 8081 	ble.w	800eeb0 <_dtoa_r+0x8c8>
 800edae:	f04f 0800 	mov.w	r8, #0
 800edb2:	6933      	ldr	r3, [r6, #16]
 800edb4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800edb8:	6918      	ldr	r0, [r3, #16]
 800edba:	f000 fe83 	bl	800fac4 <__hi0bits>
 800edbe:	f1c0 0020 	rsb	r0, r0, #32
 800edc2:	9b05      	ldr	r3, [sp, #20]
 800edc4:	4418      	add	r0, r3
 800edc6:	f010 001f 	ands.w	r0, r0, #31
 800edca:	f000 8092 	beq.w	800eef2 <_dtoa_r+0x90a>
 800edce:	f1c0 0320 	rsb	r3, r0, #32
 800edd2:	2b04      	cmp	r3, #4
 800edd4:	f340 808a 	ble.w	800eeec <_dtoa_r+0x904>
 800edd8:	f1c0 001c 	rsb	r0, r0, #28
 800eddc:	9b04      	ldr	r3, [sp, #16]
 800edde:	4403      	add	r3, r0
 800ede0:	9304      	str	r3, [sp, #16]
 800ede2:	9b05      	ldr	r3, [sp, #20]
 800ede4:	4403      	add	r3, r0
 800ede6:	4405      	add	r5, r0
 800ede8:	9305      	str	r3, [sp, #20]
 800edea:	9b04      	ldr	r3, [sp, #16]
 800edec:	2b00      	cmp	r3, #0
 800edee:	dd07      	ble.n	800ee00 <_dtoa_r+0x818>
 800edf0:	ee18 1a10 	vmov	r1, s16
 800edf4:	461a      	mov	r2, r3
 800edf6:	4620      	mov	r0, r4
 800edf8:	f000 ffce 	bl	800fd98 <__lshift>
 800edfc:	ee08 0a10 	vmov	s16, r0
 800ee00:	9b05      	ldr	r3, [sp, #20]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	dd05      	ble.n	800ee12 <_dtoa_r+0x82a>
 800ee06:	4631      	mov	r1, r6
 800ee08:	461a      	mov	r2, r3
 800ee0a:	4620      	mov	r0, r4
 800ee0c:	f000 ffc4 	bl	800fd98 <__lshift>
 800ee10:	4606      	mov	r6, r0
 800ee12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d06e      	beq.n	800eef6 <_dtoa_r+0x90e>
 800ee18:	ee18 0a10 	vmov	r0, s16
 800ee1c:	4631      	mov	r1, r6
 800ee1e:	f001 f82b 	bl	800fe78 <__mcmp>
 800ee22:	2800      	cmp	r0, #0
 800ee24:	da67      	bge.n	800eef6 <_dtoa_r+0x90e>
 800ee26:	9b00      	ldr	r3, [sp, #0]
 800ee28:	3b01      	subs	r3, #1
 800ee2a:	ee18 1a10 	vmov	r1, s16
 800ee2e:	9300      	str	r3, [sp, #0]
 800ee30:	220a      	movs	r2, #10
 800ee32:	2300      	movs	r3, #0
 800ee34:	4620      	mov	r0, r4
 800ee36:	f000 fdb5 	bl	800f9a4 <__multadd>
 800ee3a:	9b08      	ldr	r3, [sp, #32]
 800ee3c:	ee08 0a10 	vmov	s16, r0
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	f000 81b1 	beq.w	800f1a8 <_dtoa_r+0xbc0>
 800ee46:	2300      	movs	r3, #0
 800ee48:	4639      	mov	r1, r7
 800ee4a:	220a      	movs	r2, #10
 800ee4c:	4620      	mov	r0, r4
 800ee4e:	f000 fda9 	bl	800f9a4 <__multadd>
 800ee52:	9b02      	ldr	r3, [sp, #8]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	4607      	mov	r7, r0
 800ee58:	f300 808e 	bgt.w	800ef78 <_dtoa_r+0x990>
 800ee5c:	9b06      	ldr	r3, [sp, #24]
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	dc51      	bgt.n	800ef06 <_dtoa_r+0x91e>
 800ee62:	e089      	b.n	800ef78 <_dtoa_r+0x990>
 800ee64:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ee66:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ee6a:	e74b      	b.n	800ed04 <_dtoa_r+0x71c>
 800ee6c:	9b03      	ldr	r3, [sp, #12]
 800ee6e:	1e5e      	subs	r6, r3, #1
 800ee70:	9b07      	ldr	r3, [sp, #28]
 800ee72:	42b3      	cmp	r3, r6
 800ee74:	bfbf      	itttt	lt
 800ee76:	9b07      	ldrlt	r3, [sp, #28]
 800ee78:	9607      	strlt	r6, [sp, #28]
 800ee7a:	1af2      	sublt	r2, r6, r3
 800ee7c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ee7e:	bfb6      	itet	lt
 800ee80:	189b      	addlt	r3, r3, r2
 800ee82:	1b9e      	subge	r6, r3, r6
 800ee84:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ee86:	9b03      	ldr	r3, [sp, #12]
 800ee88:	bfb8      	it	lt
 800ee8a:	2600      	movlt	r6, #0
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	bfb7      	itett	lt
 800ee90:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ee94:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ee98:	1a9d      	sublt	r5, r3, r2
 800ee9a:	2300      	movlt	r3, #0
 800ee9c:	e734      	b.n	800ed08 <_dtoa_r+0x720>
 800ee9e:	9e07      	ldr	r6, [sp, #28]
 800eea0:	9d04      	ldr	r5, [sp, #16]
 800eea2:	9f08      	ldr	r7, [sp, #32]
 800eea4:	e73b      	b.n	800ed1e <_dtoa_r+0x736>
 800eea6:	9a07      	ldr	r2, [sp, #28]
 800eea8:	e767      	b.n	800ed7a <_dtoa_r+0x792>
 800eeaa:	9b06      	ldr	r3, [sp, #24]
 800eeac:	2b01      	cmp	r3, #1
 800eeae:	dc18      	bgt.n	800eee2 <_dtoa_r+0x8fa>
 800eeb0:	f1ba 0f00 	cmp.w	sl, #0
 800eeb4:	d115      	bne.n	800eee2 <_dtoa_r+0x8fa>
 800eeb6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eeba:	b993      	cbnz	r3, 800eee2 <_dtoa_r+0x8fa>
 800eebc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eec0:	0d1b      	lsrs	r3, r3, #20
 800eec2:	051b      	lsls	r3, r3, #20
 800eec4:	b183      	cbz	r3, 800eee8 <_dtoa_r+0x900>
 800eec6:	9b04      	ldr	r3, [sp, #16]
 800eec8:	3301      	adds	r3, #1
 800eeca:	9304      	str	r3, [sp, #16]
 800eecc:	9b05      	ldr	r3, [sp, #20]
 800eece:	3301      	adds	r3, #1
 800eed0:	9305      	str	r3, [sp, #20]
 800eed2:	f04f 0801 	mov.w	r8, #1
 800eed6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eed8:	2b00      	cmp	r3, #0
 800eeda:	f47f af6a 	bne.w	800edb2 <_dtoa_r+0x7ca>
 800eede:	2001      	movs	r0, #1
 800eee0:	e76f      	b.n	800edc2 <_dtoa_r+0x7da>
 800eee2:	f04f 0800 	mov.w	r8, #0
 800eee6:	e7f6      	b.n	800eed6 <_dtoa_r+0x8ee>
 800eee8:	4698      	mov	r8, r3
 800eeea:	e7f4      	b.n	800eed6 <_dtoa_r+0x8ee>
 800eeec:	f43f af7d 	beq.w	800edea <_dtoa_r+0x802>
 800eef0:	4618      	mov	r0, r3
 800eef2:	301c      	adds	r0, #28
 800eef4:	e772      	b.n	800eddc <_dtoa_r+0x7f4>
 800eef6:	9b03      	ldr	r3, [sp, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	dc37      	bgt.n	800ef6c <_dtoa_r+0x984>
 800eefc:	9b06      	ldr	r3, [sp, #24]
 800eefe:	2b02      	cmp	r3, #2
 800ef00:	dd34      	ble.n	800ef6c <_dtoa_r+0x984>
 800ef02:	9b03      	ldr	r3, [sp, #12]
 800ef04:	9302      	str	r3, [sp, #8]
 800ef06:	9b02      	ldr	r3, [sp, #8]
 800ef08:	b96b      	cbnz	r3, 800ef26 <_dtoa_r+0x93e>
 800ef0a:	4631      	mov	r1, r6
 800ef0c:	2205      	movs	r2, #5
 800ef0e:	4620      	mov	r0, r4
 800ef10:	f000 fd48 	bl	800f9a4 <__multadd>
 800ef14:	4601      	mov	r1, r0
 800ef16:	4606      	mov	r6, r0
 800ef18:	ee18 0a10 	vmov	r0, s16
 800ef1c:	f000 ffac 	bl	800fe78 <__mcmp>
 800ef20:	2800      	cmp	r0, #0
 800ef22:	f73f adbb 	bgt.w	800ea9c <_dtoa_r+0x4b4>
 800ef26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ef28:	9d01      	ldr	r5, [sp, #4]
 800ef2a:	43db      	mvns	r3, r3
 800ef2c:	9300      	str	r3, [sp, #0]
 800ef2e:	f04f 0800 	mov.w	r8, #0
 800ef32:	4631      	mov	r1, r6
 800ef34:	4620      	mov	r0, r4
 800ef36:	f000 fd13 	bl	800f960 <_Bfree>
 800ef3a:	2f00      	cmp	r7, #0
 800ef3c:	f43f aea4 	beq.w	800ec88 <_dtoa_r+0x6a0>
 800ef40:	f1b8 0f00 	cmp.w	r8, #0
 800ef44:	d005      	beq.n	800ef52 <_dtoa_r+0x96a>
 800ef46:	45b8      	cmp	r8, r7
 800ef48:	d003      	beq.n	800ef52 <_dtoa_r+0x96a>
 800ef4a:	4641      	mov	r1, r8
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	f000 fd07 	bl	800f960 <_Bfree>
 800ef52:	4639      	mov	r1, r7
 800ef54:	4620      	mov	r0, r4
 800ef56:	f000 fd03 	bl	800f960 <_Bfree>
 800ef5a:	e695      	b.n	800ec88 <_dtoa_r+0x6a0>
 800ef5c:	2600      	movs	r6, #0
 800ef5e:	4637      	mov	r7, r6
 800ef60:	e7e1      	b.n	800ef26 <_dtoa_r+0x93e>
 800ef62:	9700      	str	r7, [sp, #0]
 800ef64:	4637      	mov	r7, r6
 800ef66:	e599      	b.n	800ea9c <_dtoa_r+0x4b4>
 800ef68:	40240000 	.word	0x40240000
 800ef6c:	9b08      	ldr	r3, [sp, #32]
 800ef6e:	2b00      	cmp	r3, #0
 800ef70:	f000 80ca 	beq.w	800f108 <_dtoa_r+0xb20>
 800ef74:	9b03      	ldr	r3, [sp, #12]
 800ef76:	9302      	str	r3, [sp, #8]
 800ef78:	2d00      	cmp	r5, #0
 800ef7a:	dd05      	ble.n	800ef88 <_dtoa_r+0x9a0>
 800ef7c:	4639      	mov	r1, r7
 800ef7e:	462a      	mov	r2, r5
 800ef80:	4620      	mov	r0, r4
 800ef82:	f000 ff09 	bl	800fd98 <__lshift>
 800ef86:	4607      	mov	r7, r0
 800ef88:	f1b8 0f00 	cmp.w	r8, #0
 800ef8c:	d05b      	beq.n	800f046 <_dtoa_r+0xa5e>
 800ef8e:	6879      	ldr	r1, [r7, #4]
 800ef90:	4620      	mov	r0, r4
 800ef92:	f000 fca5 	bl	800f8e0 <_Balloc>
 800ef96:	4605      	mov	r5, r0
 800ef98:	b928      	cbnz	r0, 800efa6 <_dtoa_r+0x9be>
 800ef9a:	4b87      	ldr	r3, [pc, #540]	; (800f1b8 <_dtoa_r+0xbd0>)
 800ef9c:	4602      	mov	r2, r0
 800ef9e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800efa2:	f7ff bb3b 	b.w	800e61c <_dtoa_r+0x34>
 800efa6:	693a      	ldr	r2, [r7, #16]
 800efa8:	3202      	adds	r2, #2
 800efaa:	0092      	lsls	r2, r2, #2
 800efac:	f107 010c 	add.w	r1, r7, #12
 800efb0:	300c      	adds	r0, #12
 800efb2:	f7fd fd29 	bl	800ca08 <memcpy>
 800efb6:	2201      	movs	r2, #1
 800efb8:	4629      	mov	r1, r5
 800efba:	4620      	mov	r0, r4
 800efbc:	f000 feec 	bl	800fd98 <__lshift>
 800efc0:	9b01      	ldr	r3, [sp, #4]
 800efc2:	f103 0901 	add.w	r9, r3, #1
 800efc6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800efca:	4413      	add	r3, r2
 800efcc:	9305      	str	r3, [sp, #20]
 800efce:	f00a 0301 	and.w	r3, sl, #1
 800efd2:	46b8      	mov	r8, r7
 800efd4:	9304      	str	r3, [sp, #16]
 800efd6:	4607      	mov	r7, r0
 800efd8:	4631      	mov	r1, r6
 800efda:	ee18 0a10 	vmov	r0, s16
 800efde:	f7ff fa77 	bl	800e4d0 <quorem>
 800efe2:	4641      	mov	r1, r8
 800efe4:	9002      	str	r0, [sp, #8]
 800efe6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800efea:	ee18 0a10 	vmov	r0, s16
 800efee:	f000 ff43 	bl	800fe78 <__mcmp>
 800eff2:	463a      	mov	r2, r7
 800eff4:	9003      	str	r0, [sp, #12]
 800eff6:	4631      	mov	r1, r6
 800eff8:	4620      	mov	r0, r4
 800effa:	f000 ff59 	bl	800feb0 <__mdiff>
 800effe:	68c2      	ldr	r2, [r0, #12]
 800f000:	f109 3bff 	add.w	fp, r9, #4294967295
 800f004:	4605      	mov	r5, r0
 800f006:	bb02      	cbnz	r2, 800f04a <_dtoa_r+0xa62>
 800f008:	4601      	mov	r1, r0
 800f00a:	ee18 0a10 	vmov	r0, s16
 800f00e:	f000 ff33 	bl	800fe78 <__mcmp>
 800f012:	4602      	mov	r2, r0
 800f014:	4629      	mov	r1, r5
 800f016:	4620      	mov	r0, r4
 800f018:	9207      	str	r2, [sp, #28]
 800f01a:	f000 fca1 	bl	800f960 <_Bfree>
 800f01e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800f022:	ea43 0102 	orr.w	r1, r3, r2
 800f026:	9b04      	ldr	r3, [sp, #16]
 800f028:	430b      	orrs	r3, r1
 800f02a:	464d      	mov	r5, r9
 800f02c:	d10f      	bne.n	800f04e <_dtoa_r+0xa66>
 800f02e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f032:	d02a      	beq.n	800f08a <_dtoa_r+0xaa2>
 800f034:	9b03      	ldr	r3, [sp, #12]
 800f036:	2b00      	cmp	r3, #0
 800f038:	dd02      	ble.n	800f040 <_dtoa_r+0xa58>
 800f03a:	9b02      	ldr	r3, [sp, #8]
 800f03c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800f040:	f88b a000 	strb.w	sl, [fp]
 800f044:	e775      	b.n	800ef32 <_dtoa_r+0x94a>
 800f046:	4638      	mov	r0, r7
 800f048:	e7ba      	b.n	800efc0 <_dtoa_r+0x9d8>
 800f04a:	2201      	movs	r2, #1
 800f04c:	e7e2      	b.n	800f014 <_dtoa_r+0xa2c>
 800f04e:	9b03      	ldr	r3, [sp, #12]
 800f050:	2b00      	cmp	r3, #0
 800f052:	db04      	blt.n	800f05e <_dtoa_r+0xa76>
 800f054:	9906      	ldr	r1, [sp, #24]
 800f056:	430b      	orrs	r3, r1
 800f058:	9904      	ldr	r1, [sp, #16]
 800f05a:	430b      	orrs	r3, r1
 800f05c:	d122      	bne.n	800f0a4 <_dtoa_r+0xabc>
 800f05e:	2a00      	cmp	r2, #0
 800f060:	ddee      	ble.n	800f040 <_dtoa_r+0xa58>
 800f062:	ee18 1a10 	vmov	r1, s16
 800f066:	2201      	movs	r2, #1
 800f068:	4620      	mov	r0, r4
 800f06a:	f000 fe95 	bl	800fd98 <__lshift>
 800f06e:	4631      	mov	r1, r6
 800f070:	ee08 0a10 	vmov	s16, r0
 800f074:	f000 ff00 	bl	800fe78 <__mcmp>
 800f078:	2800      	cmp	r0, #0
 800f07a:	dc03      	bgt.n	800f084 <_dtoa_r+0xa9c>
 800f07c:	d1e0      	bne.n	800f040 <_dtoa_r+0xa58>
 800f07e:	f01a 0f01 	tst.w	sl, #1
 800f082:	d0dd      	beq.n	800f040 <_dtoa_r+0xa58>
 800f084:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f088:	d1d7      	bne.n	800f03a <_dtoa_r+0xa52>
 800f08a:	2339      	movs	r3, #57	; 0x39
 800f08c:	f88b 3000 	strb.w	r3, [fp]
 800f090:	462b      	mov	r3, r5
 800f092:	461d      	mov	r5, r3
 800f094:	3b01      	subs	r3, #1
 800f096:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800f09a:	2a39      	cmp	r2, #57	; 0x39
 800f09c:	d071      	beq.n	800f182 <_dtoa_r+0xb9a>
 800f09e:	3201      	adds	r2, #1
 800f0a0:	701a      	strb	r2, [r3, #0]
 800f0a2:	e746      	b.n	800ef32 <_dtoa_r+0x94a>
 800f0a4:	2a00      	cmp	r2, #0
 800f0a6:	dd07      	ble.n	800f0b8 <_dtoa_r+0xad0>
 800f0a8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800f0ac:	d0ed      	beq.n	800f08a <_dtoa_r+0xaa2>
 800f0ae:	f10a 0301 	add.w	r3, sl, #1
 800f0b2:	f88b 3000 	strb.w	r3, [fp]
 800f0b6:	e73c      	b.n	800ef32 <_dtoa_r+0x94a>
 800f0b8:	9b05      	ldr	r3, [sp, #20]
 800f0ba:	f809 ac01 	strb.w	sl, [r9, #-1]
 800f0be:	4599      	cmp	r9, r3
 800f0c0:	d047      	beq.n	800f152 <_dtoa_r+0xb6a>
 800f0c2:	ee18 1a10 	vmov	r1, s16
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	220a      	movs	r2, #10
 800f0ca:	4620      	mov	r0, r4
 800f0cc:	f000 fc6a 	bl	800f9a4 <__multadd>
 800f0d0:	45b8      	cmp	r8, r7
 800f0d2:	ee08 0a10 	vmov	s16, r0
 800f0d6:	f04f 0300 	mov.w	r3, #0
 800f0da:	f04f 020a 	mov.w	r2, #10
 800f0de:	4641      	mov	r1, r8
 800f0e0:	4620      	mov	r0, r4
 800f0e2:	d106      	bne.n	800f0f2 <_dtoa_r+0xb0a>
 800f0e4:	f000 fc5e 	bl	800f9a4 <__multadd>
 800f0e8:	4680      	mov	r8, r0
 800f0ea:	4607      	mov	r7, r0
 800f0ec:	f109 0901 	add.w	r9, r9, #1
 800f0f0:	e772      	b.n	800efd8 <_dtoa_r+0x9f0>
 800f0f2:	f000 fc57 	bl	800f9a4 <__multadd>
 800f0f6:	4639      	mov	r1, r7
 800f0f8:	4680      	mov	r8, r0
 800f0fa:	2300      	movs	r3, #0
 800f0fc:	220a      	movs	r2, #10
 800f0fe:	4620      	mov	r0, r4
 800f100:	f000 fc50 	bl	800f9a4 <__multadd>
 800f104:	4607      	mov	r7, r0
 800f106:	e7f1      	b.n	800f0ec <_dtoa_r+0xb04>
 800f108:	9b03      	ldr	r3, [sp, #12]
 800f10a:	9302      	str	r3, [sp, #8]
 800f10c:	9d01      	ldr	r5, [sp, #4]
 800f10e:	ee18 0a10 	vmov	r0, s16
 800f112:	4631      	mov	r1, r6
 800f114:	f7ff f9dc 	bl	800e4d0 <quorem>
 800f118:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800f11c:	9b01      	ldr	r3, [sp, #4]
 800f11e:	f805 ab01 	strb.w	sl, [r5], #1
 800f122:	1aea      	subs	r2, r5, r3
 800f124:	9b02      	ldr	r3, [sp, #8]
 800f126:	4293      	cmp	r3, r2
 800f128:	dd09      	ble.n	800f13e <_dtoa_r+0xb56>
 800f12a:	ee18 1a10 	vmov	r1, s16
 800f12e:	2300      	movs	r3, #0
 800f130:	220a      	movs	r2, #10
 800f132:	4620      	mov	r0, r4
 800f134:	f000 fc36 	bl	800f9a4 <__multadd>
 800f138:	ee08 0a10 	vmov	s16, r0
 800f13c:	e7e7      	b.n	800f10e <_dtoa_r+0xb26>
 800f13e:	9b02      	ldr	r3, [sp, #8]
 800f140:	2b00      	cmp	r3, #0
 800f142:	bfc8      	it	gt
 800f144:	461d      	movgt	r5, r3
 800f146:	9b01      	ldr	r3, [sp, #4]
 800f148:	bfd8      	it	le
 800f14a:	2501      	movle	r5, #1
 800f14c:	441d      	add	r5, r3
 800f14e:	f04f 0800 	mov.w	r8, #0
 800f152:	ee18 1a10 	vmov	r1, s16
 800f156:	2201      	movs	r2, #1
 800f158:	4620      	mov	r0, r4
 800f15a:	f000 fe1d 	bl	800fd98 <__lshift>
 800f15e:	4631      	mov	r1, r6
 800f160:	ee08 0a10 	vmov	s16, r0
 800f164:	f000 fe88 	bl	800fe78 <__mcmp>
 800f168:	2800      	cmp	r0, #0
 800f16a:	dc91      	bgt.n	800f090 <_dtoa_r+0xaa8>
 800f16c:	d102      	bne.n	800f174 <_dtoa_r+0xb8c>
 800f16e:	f01a 0f01 	tst.w	sl, #1
 800f172:	d18d      	bne.n	800f090 <_dtoa_r+0xaa8>
 800f174:	462b      	mov	r3, r5
 800f176:	461d      	mov	r5, r3
 800f178:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f17c:	2a30      	cmp	r2, #48	; 0x30
 800f17e:	d0fa      	beq.n	800f176 <_dtoa_r+0xb8e>
 800f180:	e6d7      	b.n	800ef32 <_dtoa_r+0x94a>
 800f182:	9a01      	ldr	r2, [sp, #4]
 800f184:	429a      	cmp	r2, r3
 800f186:	d184      	bne.n	800f092 <_dtoa_r+0xaaa>
 800f188:	9b00      	ldr	r3, [sp, #0]
 800f18a:	3301      	adds	r3, #1
 800f18c:	9300      	str	r3, [sp, #0]
 800f18e:	2331      	movs	r3, #49	; 0x31
 800f190:	7013      	strb	r3, [r2, #0]
 800f192:	e6ce      	b.n	800ef32 <_dtoa_r+0x94a>
 800f194:	4b09      	ldr	r3, [pc, #36]	; (800f1bc <_dtoa_r+0xbd4>)
 800f196:	f7ff ba95 	b.w	800e6c4 <_dtoa_r+0xdc>
 800f19a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f19c:	2b00      	cmp	r3, #0
 800f19e:	f47f aa6e 	bne.w	800e67e <_dtoa_r+0x96>
 800f1a2:	4b07      	ldr	r3, [pc, #28]	; (800f1c0 <_dtoa_r+0xbd8>)
 800f1a4:	f7ff ba8e 	b.w	800e6c4 <_dtoa_r+0xdc>
 800f1a8:	9b02      	ldr	r3, [sp, #8]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	dcae      	bgt.n	800f10c <_dtoa_r+0xb24>
 800f1ae:	9b06      	ldr	r3, [sp, #24]
 800f1b0:	2b02      	cmp	r3, #2
 800f1b2:	f73f aea8 	bgt.w	800ef06 <_dtoa_r+0x91e>
 800f1b6:	e7a9      	b.n	800f10c <_dtoa_r+0xb24>
 800f1b8:	080117f0 	.word	0x080117f0
 800f1bc:	080115f0 	.word	0x080115f0
 800f1c0:	08011771 	.word	0x08011771

0800f1c4 <rshift>:
 800f1c4:	6903      	ldr	r3, [r0, #16]
 800f1c6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f1ca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f1ce:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f1d2:	f100 0414 	add.w	r4, r0, #20
 800f1d6:	dd45      	ble.n	800f264 <rshift+0xa0>
 800f1d8:	f011 011f 	ands.w	r1, r1, #31
 800f1dc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f1e0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f1e4:	d10c      	bne.n	800f200 <rshift+0x3c>
 800f1e6:	f100 0710 	add.w	r7, r0, #16
 800f1ea:	4629      	mov	r1, r5
 800f1ec:	42b1      	cmp	r1, r6
 800f1ee:	d334      	bcc.n	800f25a <rshift+0x96>
 800f1f0:	1a9b      	subs	r3, r3, r2
 800f1f2:	009b      	lsls	r3, r3, #2
 800f1f4:	1eea      	subs	r2, r5, #3
 800f1f6:	4296      	cmp	r6, r2
 800f1f8:	bf38      	it	cc
 800f1fa:	2300      	movcc	r3, #0
 800f1fc:	4423      	add	r3, r4
 800f1fe:	e015      	b.n	800f22c <rshift+0x68>
 800f200:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f204:	f1c1 0820 	rsb	r8, r1, #32
 800f208:	40cf      	lsrs	r7, r1
 800f20a:	f105 0e04 	add.w	lr, r5, #4
 800f20e:	46a1      	mov	r9, r4
 800f210:	4576      	cmp	r6, lr
 800f212:	46f4      	mov	ip, lr
 800f214:	d815      	bhi.n	800f242 <rshift+0x7e>
 800f216:	1a9a      	subs	r2, r3, r2
 800f218:	0092      	lsls	r2, r2, #2
 800f21a:	3a04      	subs	r2, #4
 800f21c:	3501      	adds	r5, #1
 800f21e:	42ae      	cmp	r6, r5
 800f220:	bf38      	it	cc
 800f222:	2200      	movcc	r2, #0
 800f224:	18a3      	adds	r3, r4, r2
 800f226:	50a7      	str	r7, [r4, r2]
 800f228:	b107      	cbz	r7, 800f22c <rshift+0x68>
 800f22a:	3304      	adds	r3, #4
 800f22c:	1b1a      	subs	r2, r3, r4
 800f22e:	42a3      	cmp	r3, r4
 800f230:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f234:	bf08      	it	eq
 800f236:	2300      	moveq	r3, #0
 800f238:	6102      	str	r2, [r0, #16]
 800f23a:	bf08      	it	eq
 800f23c:	6143      	streq	r3, [r0, #20]
 800f23e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f242:	f8dc c000 	ldr.w	ip, [ip]
 800f246:	fa0c fc08 	lsl.w	ip, ip, r8
 800f24a:	ea4c 0707 	orr.w	r7, ip, r7
 800f24e:	f849 7b04 	str.w	r7, [r9], #4
 800f252:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f256:	40cf      	lsrs	r7, r1
 800f258:	e7da      	b.n	800f210 <rshift+0x4c>
 800f25a:	f851 cb04 	ldr.w	ip, [r1], #4
 800f25e:	f847 cf04 	str.w	ip, [r7, #4]!
 800f262:	e7c3      	b.n	800f1ec <rshift+0x28>
 800f264:	4623      	mov	r3, r4
 800f266:	e7e1      	b.n	800f22c <rshift+0x68>

0800f268 <__hexdig_fun>:
 800f268:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f26c:	2b09      	cmp	r3, #9
 800f26e:	d802      	bhi.n	800f276 <__hexdig_fun+0xe>
 800f270:	3820      	subs	r0, #32
 800f272:	b2c0      	uxtb	r0, r0
 800f274:	4770      	bx	lr
 800f276:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f27a:	2b05      	cmp	r3, #5
 800f27c:	d801      	bhi.n	800f282 <__hexdig_fun+0x1a>
 800f27e:	3847      	subs	r0, #71	; 0x47
 800f280:	e7f7      	b.n	800f272 <__hexdig_fun+0xa>
 800f282:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f286:	2b05      	cmp	r3, #5
 800f288:	d801      	bhi.n	800f28e <__hexdig_fun+0x26>
 800f28a:	3827      	subs	r0, #39	; 0x27
 800f28c:	e7f1      	b.n	800f272 <__hexdig_fun+0xa>
 800f28e:	2000      	movs	r0, #0
 800f290:	4770      	bx	lr
	...

0800f294 <__gethex>:
 800f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f298:	ed2d 8b02 	vpush	{d8}
 800f29c:	b089      	sub	sp, #36	; 0x24
 800f29e:	ee08 0a10 	vmov	s16, r0
 800f2a2:	9304      	str	r3, [sp, #16]
 800f2a4:	4bb4      	ldr	r3, [pc, #720]	; (800f578 <__gethex+0x2e4>)
 800f2a6:	681b      	ldr	r3, [r3, #0]
 800f2a8:	9301      	str	r3, [sp, #4]
 800f2aa:	4618      	mov	r0, r3
 800f2ac:	468b      	mov	fp, r1
 800f2ae:	4690      	mov	r8, r2
 800f2b0:	f7f0 ff96 	bl	80001e0 <strlen>
 800f2b4:	9b01      	ldr	r3, [sp, #4]
 800f2b6:	f8db 2000 	ldr.w	r2, [fp]
 800f2ba:	4403      	add	r3, r0
 800f2bc:	4682      	mov	sl, r0
 800f2be:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f2c2:	9305      	str	r3, [sp, #20]
 800f2c4:	1c93      	adds	r3, r2, #2
 800f2c6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800f2ca:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800f2ce:	32fe      	adds	r2, #254	; 0xfe
 800f2d0:	18d1      	adds	r1, r2, r3
 800f2d2:	461f      	mov	r7, r3
 800f2d4:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f2d8:	9100      	str	r1, [sp, #0]
 800f2da:	2830      	cmp	r0, #48	; 0x30
 800f2dc:	d0f8      	beq.n	800f2d0 <__gethex+0x3c>
 800f2de:	f7ff ffc3 	bl	800f268 <__hexdig_fun>
 800f2e2:	4604      	mov	r4, r0
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d13a      	bne.n	800f35e <__gethex+0xca>
 800f2e8:	9901      	ldr	r1, [sp, #4]
 800f2ea:	4652      	mov	r2, sl
 800f2ec:	4638      	mov	r0, r7
 800f2ee:	f001 fa23 	bl	8010738 <strncmp>
 800f2f2:	4605      	mov	r5, r0
 800f2f4:	2800      	cmp	r0, #0
 800f2f6:	d168      	bne.n	800f3ca <__gethex+0x136>
 800f2f8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800f2fc:	eb07 060a 	add.w	r6, r7, sl
 800f300:	f7ff ffb2 	bl	800f268 <__hexdig_fun>
 800f304:	2800      	cmp	r0, #0
 800f306:	d062      	beq.n	800f3ce <__gethex+0x13a>
 800f308:	4633      	mov	r3, r6
 800f30a:	7818      	ldrb	r0, [r3, #0]
 800f30c:	2830      	cmp	r0, #48	; 0x30
 800f30e:	461f      	mov	r7, r3
 800f310:	f103 0301 	add.w	r3, r3, #1
 800f314:	d0f9      	beq.n	800f30a <__gethex+0x76>
 800f316:	f7ff ffa7 	bl	800f268 <__hexdig_fun>
 800f31a:	2301      	movs	r3, #1
 800f31c:	fab0 f480 	clz	r4, r0
 800f320:	0964      	lsrs	r4, r4, #5
 800f322:	4635      	mov	r5, r6
 800f324:	9300      	str	r3, [sp, #0]
 800f326:	463a      	mov	r2, r7
 800f328:	4616      	mov	r6, r2
 800f32a:	3201      	adds	r2, #1
 800f32c:	7830      	ldrb	r0, [r6, #0]
 800f32e:	f7ff ff9b 	bl	800f268 <__hexdig_fun>
 800f332:	2800      	cmp	r0, #0
 800f334:	d1f8      	bne.n	800f328 <__gethex+0x94>
 800f336:	9901      	ldr	r1, [sp, #4]
 800f338:	4652      	mov	r2, sl
 800f33a:	4630      	mov	r0, r6
 800f33c:	f001 f9fc 	bl	8010738 <strncmp>
 800f340:	b980      	cbnz	r0, 800f364 <__gethex+0xd0>
 800f342:	b94d      	cbnz	r5, 800f358 <__gethex+0xc4>
 800f344:	eb06 050a 	add.w	r5, r6, sl
 800f348:	462a      	mov	r2, r5
 800f34a:	4616      	mov	r6, r2
 800f34c:	3201      	adds	r2, #1
 800f34e:	7830      	ldrb	r0, [r6, #0]
 800f350:	f7ff ff8a 	bl	800f268 <__hexdig_fun>
 800f354:	2800      	cmp	r0, #0
 800f356:	d1f8      	bne.n	800f34a <__gethex+0xb6>
 800f358:	1bad      	subs	r5, r5, r6
 800f35a:	00ad      	lsls	r5, r5, #2
 800f35c:	e004      	b.n	800f368 <__gethex+0xd4>
 800f35e:	2400      	movs	r4, #0
 800f360:	4625      	mov	r5, r4
 800f362:	e7e0      	b.n	800f326 <__gethex+0x92>
 800f364:	2d00      	cmp	r5, #0
 800f366:	d1f7      	bne.n	800f358 <__gethex+0xc4>
 800f368:	7833      	ldrb	r3, [r6, #0]
 800f36a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800f36e:	2b50      	cmp	r3, #80	; 0x50
 800f370:	d13b      	bne.n	800f3ea <__gethex+0x156>
 800f372:	7873      	ldrb	r3, [r6, #1]
 800f374:	2b2b      	cmp	r3, #43	; 0x2b
 800f376:	d02c      	beq.n	800f3d2 <__gethex+0x13e>
 800f378:	2b2d      	cmp	r3, #45	; 0x2d
 800f37a:	d02e      	beq.n	800f3da <__gethex+0x146>
 800f37c:	1c71      	adds	r1, r6, #1
 800f37e:	f04f 0900 	mov.w	r9, #0
 800f382:	7808      	ldrb	r0, [r1, #0]
 800f384:	f7ff ff70 	bl	800f268 <__hexdig_fun>
 800f388:	1e43      	subs	r3, r0, #1
 800f38a:	b2db      	uxtb	r3, r3
 800f38c:	2b18      	cmp	r3, #24
 800f38e:	d82c      	bhi.n	800f3ea <__gethex+0x156>
 800f390:	f1a0 0210 	sub.w	r2, r0, #16
 800f394:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f398:	f7ff ff66 	bl	800f268 <__hexdig_fun>
 800f39c:	1e43      	subs	r3, r0, #1
 800f39e:	b2db      	uxtb	r3, r3
 800f3a0:	2b18      	cmp	r3, #24
 800f3a2:	d91d      	bls.n	800f3e0 <__gethex+0x14c>
 800f3a4:	f1b9 0f00 	cmp.w	r9, #0
 800f3a8:	d000      	beq.n	800f3ac <__gethex+0x118>
 800f3aa:	4252      	negs	r2, r2
 800f3ac:	4415      	add	r5, r2
 800f3ae:	f8cb 1000 	str.w	r1, [fp]
 800f3b2:	b1e4      	cbz	r4, 800f3ee <__gethex+0x15a>
 800f3b4:	9b00      	ldr	r3, [sp, #0]
 800f3b6:	2b00      	cmp	r3, #0
 800f3b8:	bf14      	ite	ne
 800f3ba:	2700      	movne	r7, #0
 800f3bc:	2706      	moveq	r7, #6
 800f3be:	4638      	mov	r0, r7
 800f3c0:	b009      	add	sp, #36	; 0x24
 800f3c2:	ecbd 8b02 	vpop	{d8}
 800f3c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3ca:	463e      	mov	r6, r7
 800f3cc:	4625      	mov	r5, r4
 800f3ce:	2401      	movs	r4, #1
 800f3d0:	e7ca      	b.n	800f368 <__gethex+0xd4>
 800f3d2:	f04f 0900 	mov.w	r9, #0
 800f3d6:	1cb1      	adds	r1, r6, #2
 800f3d8:	e7d3      	b.n	800f382 <__gethex+0xee>
 800f3da:	f04f 0901 	mov.w	r9, #1
 800f3de:	e7fa      	b.n	800f3d6 <__gethex+0x142>
 800f3e0:	230a      	movs	r3, #10
 800f3e2:	fb03 0202 	mla	r2, r3, r2, r0
 800f3e6:	3a10      	subs	r2, #16
 800f3e8:	e7d4      	b.n	800f394 <__gethex+0x100>
 800f3ea:	4631      	mov	r1, r6
 800f3ec:	e7df      	b.n	800f3ae <__gethex+0x11a>
 800f3ee:	1bf3      	subs	r3, r6, r7
 800f3f0:	3b01      	subs	r3, #1
 800f3f2:	4621      	mov	r1, r4
 800f3f4:	2b07      	cmp	r3, #7
 800f3f6:	dc0b      	bgt.n	800f410 <__gethex+0x17c>
 800f3f8:	ee18 0a10 	vmov	r0, s16
 800f3fc:	f000 fa70 	bl	800f8e0 <_Balloc>
 800f400:	4604      	mov	r4, r0
 800f402:	b940      	cbnz	r0, 800f416 <__gethex+0x182>
 800f404:	4b5d      	ldr	r3, [pc, #372]	; (800f57c <__gethex+0x2e8>)
 800f406:	4602      	mov	r2, r0
 800f408:	21de      	movs	r1, #222	; 0xde
 800f40a:	485d      	ldr	r0, [pc, #372]	; (800f580 <__gethex+0x2ec>)
 800f40c:	f001 f9b6 	bl	801077c <__assert_func>
 800f410:	3101      	adds	r1, #1
 800f412:	105b      	asrs	r3, r3, #1
 800f414:	e7ee      	b.n	800f3f4 <__gethex+0x160>
 800f416:	f100 0914 	add.w	r9, r0, #20
 800f41a:	f04f 0b00 	mov.w	fp, #0
 800f41e:	f1ca 0301 	rsb	r3, sl, #1
 800f422:	f8cd 9008 	str.w	r9, [sp, #8]
 800f426:	f8cd b000 	str.w	fp, [sp]
 800f42a:	9306      	str	r3, [sp, #24]
 800f42c:	42b7      	cmp	r7, r6
 800f42e:	d340      	bcc.n	800f4b2 <__gethex+0x21e>
 800f430:	9802      	ldr	r0, [sp, #8]
 800f432:	9b00      	ldr	r3, [sp, #0]
 800f434:	f840 3b04 	str.w	r3, [r0], #4
 800f438:	eba0 0009 	sub.w	r0, r0, r9
 800f43c:	1080      	asrs	r0, r0, #2
 800f43e:	0146      	lsls	r6, r0, #5
 800f440:	6120      	str	r0, [r4, #16]
 800f442:	4618      	mov	r0, r3
 800f444:	f000 fb3e 	bl	800fac4 <__hi0bits>
 800f448:	1a30      	subs	r0, r6, r0
 800f44a:	f8d8 6000 	ldr.w	r6, [r8]
 800f44e:	42b0      	cmp	r0, r6
 800f450:	dd63      	ble.n	800f51a <__gethex+0x286>
 800f452:	1b87      	subs	r7, r0, r6
 800f454:	4639      	mov	r1, r7
 800f456:	4620      	mov	r0, r4
 800f458:	f000 fee2 	bl	8010220 <__any_on>
 800f45c:	4682      	mov	sl, r0
 800f45e:	b1a8      	cbz	r0, 800f48c <__gethex+0x1f8>
 800f460:	1e7b      	subs	r3, r7, #1
 800f462:	1159      	asrs	r1, r3, #5
 800f464:	f003 021f 	and.w	r2, r3, #31
 800f468:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f46c:	f04f 0a01 	mov.w	sl, #1
 800f470:	fa0a f202 	lsl.w	r2, sl, r2
 800f474:	420a      	tst	r2, r1
 800f476:	d009      	beq.n	800f48c <__gethex+0x1f8>
 800f478:	4553      	cmp	r3, sl
 800f47a:	dd05      	ble.n	800f488 <__gethex+0x1f4>
 800f47c:	1eb9      	subs	r1, r7, #2
 800f47e:	4620      	mov	r0, r4
 800f480:	f000 fece 	bl	8010220 <__any_on>
 800f484:	2800      	cmp	r0, #0
 800f486:	d145      	bne.n	800f514 <__gethex+0x280>
 800f488:	f04f 0a02 	mov.w	sl, #2
 800f48c:	4639      	mov	r1, r7
 800f48e:	4620      	mov	r0, r4
 800f490:	f7ff fe98 	bl	800f1c4 <rshift>
 800f494:	443d      	add	r5, r7
 800f496:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f49a:	42ab      	cmp	r3, r5
 800f49c:	da4c      	bge.n	800f538 <__gethex+0x2a4>
 800f49e:	ee18 0a10 	vmov	r0, s16
 800f4a2:	4621      	mov	r1, r4
 800f4a4:	f000 fa5c 	bl	800f960 <_Bfree>
 800f4a8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f4aa:	2300      	movs	r3, #0
 800f4ac:	6013      	str	r3, [r2, #0]
 800f4ae:	27a3      	movs	r7, #163	; 0xa3
 800f4b0:	e785      	b.n	800f3be <__gethex+0x12a>
 800f4b2:	1e73      	subs	r3, r6, #1
 800f4b4:	9a05      	ldr	r2, [sp, #20]
 800f4b6:	9303      	str	r3, [sp, #12]
 800f4b8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d019      	beq.n	800f4f4 <__gethex+0x260>
 800f4c0:	f1bb 0f20 	cmp.w	fp, #32
 800f4c4:	d107      	bne.n	800f4d6 <__gethex+0x242>
 800f4c6:	9b02      	ldr	r3, [sp, #8]
 800f4c8:	9a00      	ldr	r2, [sp, #0]
 800f4ca:	f843 2b04 	str.w	r2, [r3], #4
 800f4ce:	9302      	str	r3, [sp, #8]
 800f4d0:	2300      	movs	r3, #0
 800f4d2:	9300      	str	r3, [sp, #0]
 800f4d4:	469b      	mov	fp, r3
 800f4d6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f4da:	f7ff fec5 	bl	800f268 <__hexdig_fun>
 800f4de:	9b00      	ldr	r3, [sp, #0]
 800f4e0:	f000 000f 	and.w	r0, r0, #15
 800f4e4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f4e8:	4303      	orrs	r3, r0
 800f4ea:	9300      	str	r3, [sp, #0]
 800f4ec:	f10b 0b04 	add.w	fp, fp, #4
 800f4f0:	9b03      	ldr	r3, [sp, #12]
 800f4f2:	e00d      	b.n	800f510 <__gethex+0x27c>
 800f4f4:	9b03      	ldr	r3, [sp, #12]
 800f4f6:	9a06      	ldr	r2, [sp, #24]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	42bb      	cmp	r3, r7
 800f4fc:	d3e0      	bcc.n	800f4c0 <__gethex+0x22c>
 800f4fe:	4618      	mov	r0, r3
 800f500:	9901      	ldr	r1, [sp, #4]
 800f502:	9307      	str	r3, [sp, #28]
 800f504:	4652      	mov	r2, sl
 800f506:	f001 f917 	bl	8010738 <strncmp>
 800f50a:	9b07      	ldr	r3, [sp, #28]
 800f50c:	2800      	cmp	r0, #0
 800f50e:	d1d7      	bne.n	800f4c0 <__gethex+0x22c>
 800f510:	461e      	mov	r6, r3
 800f512:	e78b      	b.n	800f42c <__gethex+0x198>
 800f514:	f04f 0a03 	mov.w	sl, #3
 800f518:	e7b8      	b.n	800f48c <__gethex+0x1f8>
 800f51a:	da0a      	bge.n	800f532 <__gethex+0x29e>
 800f51c:	1a37      	subs	r7, r6, r0
 800f51e:	4621      	mov	r1, r4
 800f520:	ee18 0a10 	vmov	r0, s16
 800f524:	463a      	mov	r2, r7
 800f526:	f000 fc37 	bl	800fd98 <__lshift>
 800f52a:	1bed      	subs	r5, r5, r7
 800f52c:	4604      	mov	r4, r0
 800f52e:	f100 0914 	add.w	r9, r0, #20
 800f532:	f04f 0a00 	mov.w	sl, #0
 800f536:	e7ae      	b.n	800f496 <__gethex+0x202>
 800f538:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f53c:	42a8      	cmp	r0, r5
 800f53e:	dd72      	ble.n	800f626 <__gethex+0x392>
 800f540:	1b45      	subs	r5, r0, r5
 800f542:	42ae      	cmp	r6, r5
 800f544:	dc36      	bgt.n	800f5b4 <__gethex+0x320>
 800f546:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f54a:	2b02      	cmp	r3, #2
 800f54c:	d02a      	beq.n	800f5a4 <__gethex+0x310>
 800f54e:	2b03      	cmp	r3, #3
 800f550:	d02c      	beq.n	800f5ac <__gethex+0x318>
 800f552:	2b01      	cmp	r3, #1
 800f554:	d11c      	bne.n	800f590 <__gethex+0x2fc>
 800f556:	42ae      	cmp	r6, r5
 800f558:	d11a      	bne.n	800f590 <__gethex+0x2fc>
 800f55a:	2e01      	cmp	r6, #1
 800f55c:	d112      	bne.n	800f584 <__gethex+0x2f0>
 800f55e:	9a04      	ldr	r2, [sp, #16]
 800f560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f564:	6013      	str	r3, [r2, #0]
 800f566:	2301      	movs	r3, #1
 800f568:	6123      	str	r3, [r4, #16]
 800f56a:	f8c9 3000 	str.w	r3, [r9]
 800f56e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f570:	2762      	movs	r7, #98	; 0x62
 800f572:	601c      	str	r4, [r3, #0]
 800f574:	e723      	b.n	800f3be <__gethex+0x12a>
 800f576:	bf00      	nop
 800f578:	08011868 	.word	0x08011868
 800f57c:	080117f0 	.word	0x080117f0
 800f580:	08011801 	.word	0x08011801
 800f584:	1e71      	subs	r1, r6, #1
 800f586:	4620      	mov	r0, r4
 800f588:	f000 fe4a 	bl	8010220 <__any_on>
 800f58c:	2800      	cmp	r0, #0
 800f58e:	d1e6      	bne.n	800f55e <__gethex+0x2ca>
 800f590:	ee18 0a10 	vmov	r0, s16
 800f594:	4621      	mov	r1, r4
 800f596:	f000 f9e3 	bl	800f960 <_Bfree>
 800f59a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f59c:	2300      	movs	r3, #0
 800f59e:	6013      	str	r3, [r2, #0]
 800f5a0:	2750      	movs	r7, #80	; 0x50
 800f5a2:	e70c      	b.n	800f3be <__gethex+0x12a>
 800f5a4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5a6:	2b00      	cmp	r3, #0
 800f5a8:	d1f2      	bne.n	800f590 <__gethex+0x2fc>
 800f5aa:	e7d8      	b.n	800f55e <__gethex+0x2ca>
 800f5ac:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f5ae:	2b00      	cmp	r3, #0
 800f5b0:	d1d5      	bne.n	800f55e <__gethex+0x2ca>
 800f5b2:	e7ed      	b.n	800f590 <__gethex+0x2fc>
 800f5b4:	1e6f      	subs	r7, r5, #1
 800f5b6:	f1ba 0f00 	cmp.w	sl, #0
 800f5ba:	d131      	bne.n	800f620 <__gethex+0x38c>
 800f5bc:	b127      	cbz	r7, 800f5c8 <__gethex+0x334>
 800f5be:	4639      	mov	r1, r7
 800f5c0:	4620      	mov	r0, r4
 800f5c2:	f000 fe2d 	bl	8010220 <__any_on>
 800f5c6:	4682      	mov	sl, r0
 800f5c8:	117b      	asrs	r3, r7, #5
 800f5ca:	2101      	movs	r1, #1
 800f5cc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f5d0:	f007 071f 	and.w	r7, r7, #31
 800f5d4:	fa01 f707 	lsl.w	r7, r1, r7
 800f5d8:	421f      	tst	r7, r3
 800f5da:	4629      	mov	r1, r5
 800f5dc:	4620      	mov	r0, r4
 800f5de:	bf18      	it	ne
 800f5e0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f5e4:	1b76      	subs	r6, r6, r5
 800f5e6:	f7ff fded 	bl	800f1c4 <rshift>
 800f5ea:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f5ee:	2702      	movs	r7, #2
 800f5f0:	f1ba 0f00 	cmp.w	sl, #0
 800f5f4:	d048      	beq.n	800f688 <__gethex+0x3f4>
 800f5f6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f5fa:	2b02      	cmp	r3, #2
 800f5fc:	d015      	beq.n	800f62a <__gethex+0x396>
 800f5fe:	2b03      	cmp	r3, #3
 800f600:	d017      	beq.n	800f632 <__gethex+0x39e>
 800f602:	2b01      	cmp	r3, #1
 800f604:	d109      	bne.n	800f61a <__gethex+0x386>
 800f606:	f01a 0f02 	tst.w	sl, #2
 800f60a:	d006      	beq.n	800f61a <__gethex+0x386>
 800f60c:	f8d9 0000 	ldr.w	r0, [r9]
 800f610:	ea4a 0a00 	orr.w	sl, sl, r0
 800f614:	f01a 0f01 	tst.w	sl, #1
 800f618:	d10e      	bne.n	800f638 <__gethex+0x3a4>
 800f61a:	f047 0710 	orr.w	r7, r7, #16
 800f61e:	e033      	b.n	800f688 <__gethex+0x3f4>
 800f620:	f04f 0a01 	mov.w	sl, #1
 800f624:	e7d0      	b.n	800f5c8 <__gethex+0x334>
 800f626:	2701      	movs	r7, #1
 800f628:	e7e2      	b.n	800f5f0 <__gethex+0x35c>
 800f62a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f62c:	f1c3 0301 	rsb	r3, r3, #1
 800f630:	9315      	str	r3, [sp, #84]	; 0x54
 800f632:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f634:	2b00      	cmp	r3, #0
 800f636:	d0f0      	beq.n	800f61a <__gethex+0x386>
 800f638:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f63c:	f104 0314 	add.w	r3, r4, #20
 800f640:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f644:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f648:	f04f 0c00 	mov.w	ip, #0
 800f64c:	4618      	mov	r0, r3
 800f64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f652:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f656:	d01c      	beq.n	800f692 <__gethex+0x3fe>
 800f658:	3201      	adds	r2, #1
 800f65a:	6002      	str	r2, [r0, #0]
 800f65c:	2f02      	cmp	r7, #2
 800f65e:	f104 0314 	add.w	r3, r4, #20
 800f662:	d13f      	bne.n	800f6e4 <__gethex+0x450>
 800f664:	f8d8 2000 	ldr.w	r2, [r8]
 800f668:	3a01      	subs	r2, #1
 800f66a:	42b2      	cmp	r2, r6
 800f66c:	d10a      	bne.n	800f684 <__gethex+0x3f0>
 800f66e:	1171      	asrs	r1, r6, #5
 800f670:	2201      	movs	r2, #1
 800f672:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f676:	f006 061f 	and.w	r6, r6, #31
 800f67a:	fa02 f606 	lsl.w	r6, r2, r6
 800f67e:	421e      	tst	r6, r3
 800f680:	bf18      	it	ne
 800f682:	4617      	movne	r7, r2
 800f684:	f047 0720 	orr.w	r7, r7, #32
 800f688:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f68a:	601c      	str	r4, [r3, #0]
 800f68c:	9b04      	ldr	r3, [sp, #16]
 800f68e:	601d      	str	r5, [r3, #0]
 800f690:	e695      	b.n	800f3be <__gethex+0x12a>
 800f692:	4299      	cmp	r1, r3
 800f694:	f843 cc04 	str.w	ip, [r3, #-4]
 800f698:	d8d8      	bhi.n	800f64c <__gethex+0x3b8>
 800f69a:	68a3      	ldr	r3, [r4, #8]
 800f69c:	459b      	cmp	fp, r3
 800f69e:	db19      	blt.n	800f6d4 <__gethex+0x440>
 800f6a0:	6861      	ldr	r1, [r4, #4]
 800f6a2:	ee18 0a10 	vmov	r0, s16
 800f6a6:	3101      	adds	r1, #1
 800f6a8:	f000 f91a 	bl	800f8e0 <_Balloc>
 800f6ac:	4681      	mov	r9, r0
 800f6ae:	b918      	cbnz	r0, 800f6b8 <__gethex+0x424>
 800f6b0:	4b1a      	ldr	r3, [pc, #104]	; (800f71c <__gethex+0x488>)
 800f6b2:	4602      	mov	r2, r0
 800f6b4:	2184      	movs	r1, #132	; 0x84
 800f6b6:	e6a8      	b.n	800f40a <__gethex+0x176>
 800f6b8:	6922      	ldr	r2, [r4, #16]
 800f6ba:	3202      	adds	r2, #2
 800f6bc:	f104 010c 	add.w	r1, r4, #12
 800f6c0:	0092      	lsls	r2, r2, #2
 800f6c2:	300c      	adds	r0, #12
 800f6c4:	f7fd f9a0 	bl	800ca08 <memcpy>
 800f6c8:	4621      	mov	r1, r4
 800f6ca:	ee18 0a10 	vmov	r0, s16
 800f6ce:	f000 f947 	bl	800f960 <_Bfree>
 800f6d2:	464c      	mov	r4, r9
 800f6d4:	6923      	ldr	r3, [r4, #16]
 800f6d6:	1c5a      	adds	r2, r3, #1
 800f6d8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f6dc:	6122      	str	r2, [r4, #16]
 800f6de:	2201      	movs	r2, #1
 800f6e0:	615a      	str	r2, [r3, #20]
 800f6e2:	e7bb      	b.n	800f65c <__gethex+0x3c8>
 800f6e4:	6922      	ldr	r2, [r4, #16]
 800f6e6:	455a      	cmp	r2, fp
 800f6e8:	dd0b      	ble.n	800f702 <__gethex+0x46e>
 800f6ea:	2101      	movs	r1, #1
 800f6ec:	4620      	mov	r0, r4
 800f6ee:	f7ff fd69 	bl	800f1c4 <rshift>
 800f6f2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f6f6:	3501      	adds	r5, #1
 800f6f8:	42ab      	cmp	r3, r5
 800f6fa:	f6ff aed0 	blt.w	800f49e <__gethex+0x20a>
 800f6fe:	2701      	movs	r7, #1
 800f700:	e7c0      	b.n	800f684 <__gethex+0x3f0>
 800f702:	f016 061f 	ands.w	r6, r6, #31
 800f706:	d0fa      	beq.n	800f6fe <__gethex+0x46a>
 800f708:	4453      	add	r3, sl
 800f70a:	f1c6 0620 	rsb	r6, r6, #32
 800f70e:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f712:	f000 f9d7 	bl	800fac4 <__hi0bits>
 800f716:	42b0      	cmp	r0, r6
 800f718:	dbe7      	blt.n	800f6ea <__gethex+0x456>
 800f71a:	e7f0      	b.n	800f6fe <__gethex+0x46a>
 800f71c:	080117f0 	.word	0x080117f0

0800f720 <L_shift>:
 800f720:	f1c2 0208 	rsb	r2, r2, #8
 800f724:	0092      	lsls	r2, r2, #2
 800f726:	b570      	push	{r4, r5, r6, lr}
 800f728:	f1c2 0620 	rsb	r6, r2, #32
 800f72c:	6843      	ldr	r3, [r0, #4]
 800f72e:	6804      	ldr	r4, [r0, #0]
 800f730:	fa03 f506 	lsl.w	r5, r3, r6
 800f734:	432c      	orrs	r4, r5
 800f736:	40d3      	lsrs	r3, r2
 800f738:	6004      	str	r4, [r0, #0]
 800f73a:	f840 3f04 	str.w	r3, [r0, #4]!
 800f73e:	4288      	cmp	r0, r1
 800f740:	d3f4      	bcc.n	800f72c <L_shift+0xc>
 800f742:	bd70      	pop	{r4, r5, r6, pc}

0800f744 <__match>:
 800f744:	b530      	push	{r4, r5, lr}
 800f746:	6803      	ldr	r3, [r0, #0]
 800f748:	3301      	adds	r3, #1
 800f74a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f74e:	b914      	cbnz	r4, 800f756 <__match+0x12>
 800f750:	6003      	str	r3, [r0, #0]
 800f752:	2001      	movs	r0, #1
 800f754:	bd30      	pop	{r4, r5, pc}
 800f756:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f75a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f75e:	2d19      	cmp	r5, #25
 800f760:	bf98      	it	ls
 800f762:	3220      	addls	r2, #32
 800f764:	42a2      	cmp	r2, r4
 800f766:	d0f0      	beq.n	800f74a <__match+0x6>
 800f768:	2000      	movs	r0, #0
 800f76a:	e7f3      	b.n	800f754 <__match+0x10>

0800f76c <__hexnan>:
 800f76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f770:	680b      	ldr	r3, [r1, #0]
 800f772:	115e      	asrs	r6, r3, #5
 800f774:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f778:	f013 031f 	ands.w	r3, r3, #31
 800f77c:	b087      	sub	sp, #28
 800f77e:	bf18      	it	ne
 800f780:	3604      	addne	r6, #4
 800f782:	2500      	movs	r5, #0
 800f784:	1f37      	subs	r7, r6, #4
 800f786:	4690      	mov	r8, r2
 800f788:	6802      	ldr	r2, [r0, #0]
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	4682      	mov	sl, r0
 800f78e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f792:	46b9      	mov	r9, r7
 800f794:	463c      	mov	r4, r7
 800f796:	9502      	str	r5, [sp, #8]
 800f798:	46ab      	mov	fp, r5
 800f79a:	7851      	ldrb	r1, [r2, #1]
 800f79c:	1c53      	adds	r3, r2, #1
 800f79e:	9303      	str	r3, [sp, #12]
 800f7a0:	b341      	cbz	r1, 800f7f4 <__hexnan+0x88>
 800f7a2:	4608      	mov	r0, r1
 800f7a4:	9205      	str	r2, [sp, #20]
 800f7a6:	9104      	str	r1, [sp, #16]
 800f7a8:	f7ff fd5e 	bl	800f268 <__hexdig_fun>
 800f7ac:	2800      	cmp	r0, #0
 800f7ae:	d14f      	bne.n	800f850 <__hexnan+0xe4>
 800f7b0:	9904      	ldr	r1, [sp, #16]
 800f7b2:	9a05      	ldr	r2, [sp, #20]
 800f7b4:	2920      	cmp	r1, #32
 800f7b6:	d818      	bhi.n	800f7ea <__hexnan+0x7e>
 800f7b8:	9b02      	ldr	r3, [sp, #8]
 800f7ba:	459b      	cmp	fp, r3
 800f7bc:	dd13      	ble.n	800f7e6 <__hexnan+0x7a>
 800f7be:	454c      	cmp	r4, r9
 800f7c0:	d206      	bcs.n	800f7d0 <__hexnan+0x64>
 800f7c2:	2d07      	cmp	r5, #7
 800f7c4:	dc04      	bgt.n	800f7d0 <__hexnan+0x64>
 800f7c6:	462a      	mov	r2, r5
 800f7c8:	4649      	mov	r1, r9
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	f7ff ffa8 	bl	800f720 <L_shift>
 800f7d0:	4544      	cmp	r4, r8
 800f7d2:	d950      	bls.n	800f876 <__hexnan+0x10a>
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	f1a4 0904 	sub.w	r9, r4, #4
 800f7da:	f844 3c04 	str.w	r3, [r4, #-4]
 800f7de:	f8cd b008 	str.w	fp, [sp, #8]
 800f7e2:	464c      	mov	r4, r9
 800f7e4:	461d      	mov	r5, r3
 800f7e6:	9a03      	ldr	r2, [sp, #12]
 800f7e8:	e7d7      	b.n	800f79a <__hexnan+0x2e>
 800f7ea:	2929      	cmp	r1, #41	; 0x29
 800f7ec:	d156      	bne.n	800f89c <__hexnan+0x130>
 800f7ee:	3202      	adds	r2, #2
 800f7f0:	f8ca 2000 	str.w	r2, [sl]
 800f7f4:	f1bb 0f00 	cmp.w	fp, #0
 800f7f8:	d050      	beq.n	800f89c <__hexnan+0x130>
 800f7fa:	454c      	cmp	r4, r9
 800f7fc:	d206      	bcs.n	800f80c <__hexnan+0xa0>
 800f7fe:	2d07      	cmp	r5, #7
 800f800:	dc04      	bgt.n	800f80c <__hexnan+0xa0>
 800f802:	462a      	mov	r2, r5
 800f804:	4649      	mov	r1, r9
 800f806:	4620      	mov	r0, r4
 800f808:	f7ff ff8a 	bl	800f720 <L_shift>
 800f80c:	4544      	cmp	r4, r8
 800f80e:	d934      	bls.n	800f87a <__hexnan+0x10e>
 800f810:	f1a8 0204 	sub.w	r2, r8, #4
 800f814:	4623      	mov	r3, r4
 800f816:	f853 1b04 	ldr.w	r1, [r3], #4
 800f81a:	f842 1f04 	str.w	r1, [r2, #4]!
 800f81e:	429f      	cmp	r7, r3
 800f820:	d2f9      	bcs.n	800f816 <__hexnan+0xaa>
 800f822:	1b3b      	subs	r3, r7, r4
 800f824:	f023 0303 	bic.w	r3, r3, #3
 800f828:	3304      	adds	r3, #4
 800f82a:	3401      	adds	r4, #1
 800f82c:	3e03      	subs	r6, #3
 800f82e:	42b4      	cmp	r4, r6
 800f830:	bf88      	it	hi
 800f832:	2304      	movhi	r3, #4
 800f834:	4443      	add	r3, r8
 800f836:	2200      	movs	r2, #0
 800f838:	f843 2b04 	str.w	r2, [r3], #4
 800f83c:	429f      	cmp	r7, r3
 800f83e:	d2fb      	bcs.n	800f838 <__hexnan+0xcc>
 800f840:	683b      	ldr	r3, [r7, #0]
 800f842:	b91b      	cbnz	r3, 800f84c <__hexnan+0xe0>
 800f844:	4547      	cmp	r7, r8
 800f846:	d127      	bne.n	800f898 <__hexnan+0x12c>
 800f848:	2301      	movs	r3, #1
 800f84a:	603b      	str	r3, [r7, #0]
 800f84c:	2005      	movs	r0, #5
 800f84e:	e026      	b.n	800f89e <__hexnan+0x132>
 800f850:	3501      	adds	r5, #1
 800f852:	2d08      	cmp	r5, #8
 800f854:	f10b 0b01 	add.w	fp, fp, #1
 800f858:	dd06      	ble.n	800f868 <__hexnan+0xfc>
 800f85a:	4544      	cmp	r4, r8
 800f85c:	d9c3      	bls.n	800f7e6 <__hexnan+0x7a>
 800f85e:	2300      	movs	r3, #0
 800f860:	f844 3c04 	str.w	r3, [r4, #-4]
 800f864:	2501      	movs	r5, #1
 800f866:	3c04      	subs	r4, #4
 800f868:	6822      	ldr	r2, [r4, #0]
 800f86a:	f000 000f 	and.w	r0, r0, #15
 800f86e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f872:	6022      	str	r2, [r4, #0]
 800f874:	e7b7      	b.n	800f7e6 <__hexnan+0x7a>
 800f876:	2508      	movs	r5, #8
 800f878:	e7b5      	b.n	800f7e6 <__hexnan+0x7a>
 800f87a:	9b01      	ldr	r3, [sp, #4]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d0df      	beq.n	800f840 <__hexnan+0xd4>
 800f880:	f04f 32ff 	mov.w	r2, #4294967295
 800f884:	f1c3 0320 	rsb	r3, r3, #32
 800f888:	fa22 f303 	lsr.w	r3, r2, r3
 800f88c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f890:	401a      	ands	r2, r3
 800f892:	f846 2c04 	str.w	r2, [r6, #-4]
 800f896:	e7d3      	b.n	800f840 <__hexnan+0xd4>
 800f898:	3f04      	subs	r7, #4
 800f89a:	e7d1      	b.n	800f840 <__hexnan+0xd4>
 800f89c:	2004      	movs	r0, #4
 800f89e:	b007      	add	sp, #28
 800f8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f8a4 <_localeconv_r>:
 800f8a4:	4800      	ldr	r0, [pc, #0]	; (800f8a8 <_localeconv_r+0x4>)
 800f8a6:	4770      	bx	lr
 800f8a8:	200003bc 	.word	0x200003bc

0800f8ac <malloc>:
 800f8ac:	4b02      	ldr	r3, [pc, #8]	; (800f8b8 <malloc+0xc>)
 800f8ae:	4601      	mov	r1, r0
 800f8b0:	6818      	ldr	r0, [r3, #0]
 800f8b2:	f000 bd59 	b.w	8010368 <_malloc_r>
 800f8b6:	bf00      	nop
 800f8b8:	20000264 	.word	0x20000264

0800f8bc <__ascii_mbtowc>:
 800f8bc:	b082      	sub	sp, #8
 800f8be:	b901      	cbnz	r1, 800f8c2 <__ascii_mbtowc+0x6>
 800f8c0:	a901      	add	r1, sp, #4
 800f8c2:	b142      	cbz	r2, 800f8d6 <__ascii_mbtowc+0x1a>
 800f8c4:	b14b      	cbz	r3, 800f8da <__ascii_mbtowc+0x1e>
 800f8c6:	7813      	ldrb	r3, [r2, #0]
 800f8c8:	600b      	str	r3, [r1, #0]
 800f8ca:	7812      	ldrb	r2, [r2, #0]
 800f8cc:	1e10      	subs	r0, r2, #0
 800f8ce:	bf18      	it	ne
 800f8d0:	2001      	movne	r0, #1
 800f8d2:	b002      	add	sp, #8
 800f8d4:	4770      	bx	lr
 800f8d6:	4610      	mov	r0, r2
 800f8d8:	e7fb      	b.n	800f8d2 <__ascii_mbtowc+0x16>
 800f8da:	f06f 0001 	mvn.w	r0, #1
 800f8de:	e7f8      	b.n	800f8d2 <__ascii_mbtowc+0x16>

0800f8e0 <_Balloc>:
 800f8e0:	b570      	push	{r4, r5, r6, lr}
 800f8e2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f8e4:	4604      	mov	r4, r0
 800f8e6:	460d      	mov	r5, r1
 800f8e8:	b976      	cbnz	r6, 800f908 <_Balloc+0x28>
 800f8ea:	2010      	movs	r0, #16
 800f8ec:	f7ff ffde 	bl	800f8ac <malloc>
 800f8f0:	4602      	mov	r2, r0
 800f8f2:	6260      	str	r0, [r4, #36]	; 0x24
 800f8f4:	b920      	cbnz	r0, 800f900 <_Balloc+0x20>
 800f8f6:	4b18      	ldr	r3, [pc, #96]	; (800f958 <_Balloc+0x78>)
 800f8f8:	4818      	ldr	r0, [pc, #96]	; (800f95c <_Balloc+0x7c>)
 800f8fa:	2166      	movs	r1, #102	; 0x66
 800f8fc:	f000 ff3e 	bl	801077c <__assert_func>
 800f900:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f904:	6006      	str	r6, [r0, #0]
 800f906:	60c6      	str	r6, [r0, #12]
 800f908:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f90a:	68f3      	ldr	r3, [r6, #12]
 800f90c:	b183      	cbz	r3, 800f930 <_Balloc+0x50>
 800f90e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f910:	68db      	ldr	r3, [r3, #12]
 800f912:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f916:	b9b8      	cbnz	r0, 800f948 <_Balloc+0x68>
 800f918:	2101      	movs	r1, #1
 800f91a:	fa01 f605 	lsl.w	r6, r1, r5
 800f91e:	1d72      	adds	r2, r6, #5
 800f920:	0092      	lsls	r2, r2, #2
 800f922:	4620      	mov	r0, r4
 800f924:	f000 fc9d 	bl	8010262 <_calloc_r>
 800f928:	b160      	cbz	r0, 800f944 <_Balloc+0x64>
 800f92a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f92e:	e00e      	b.n	800f94e <_Balloc+0x6e>
 800f930:	2221      	movs	r2, #33	; 0x21
 800f932:	2104      	movs	r1, #4
 800f934:	4620      	mov	r0, r4
 800f936:	f000 fc94 	bl	8010262 <_calloc_r>
 800f93a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f93c:	60f0      	str	r0, [r6, #12]
 800f93e:	68db      	ldr	r3, [r3, #12]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d1e4      	bne.n	800f90e <_Balloc+0x2e>
 800f944:	2000      	movs	r0, #0
 800f946:	bd70      	pop	{r4, r5, r6, pc}
 800f948:	6802      	ldr	r2, [r0, #0]
 800f94a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f94e:	2300      	movs	r3, #0
 800f950:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f954:	e7f7      	b.n	800f946 <_Balloc+0x66>
 800f956:	bf00      	nop
 800f958:	0801177e 	.word	0x0801177e
 800f95c:	0801187c 	.word	0x0801187c

0800f960 <_Bfree>:
 800f960:	b570      	push	{r4, r5, r6, lr}
 800f962:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f964:	4605      	mov	r5, r0
 800f966:	460c      	mov	r4, r1
 800f968:	b976      	cbnz	r6, 800f988 <_Bfree+0x28>
 800f96a:	2010      	movs	r0, #16
 800f96c:	f7ff ff9e 	bl	800f8ac <malloc>
 800f970:	4602      	mov	r2, r0
 800f972:	6268      	str	r0, [r5, #36]	; 0x24
 800f974:	b920      	cbnz	r0, 800f980 <_Bfree+0x20>
 800f976:	4b09      	ldr	r3, [pc, #36]	; (800f99c <_Bfree+0x3c>)
 800f978:	4809      	ldr	r0, [pc, #36]	; (800f9a0 <_Bfree+0x40>)
 800f97a:	218a      	movs	r1, #138	; 0x8a
 800f97c:	f000 fefe 	bl	801077c <__assert_func>
 800f980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f984:	6006      	str	r6, [r0, #0]
 800f986:	60c6      	str	r6, [r0, #12]
 800f988:	b13c      	cbz	r4, 800f99a <_Bfree+0x3a>
 800f98a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f98c:	6862      	ldr	r2, [r4, #4]
 800f98e:	68db      	ldr	r3, [r3, #12]
 800f990:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f994:	6021      	str	r1, [r4, #0]
 800f996:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f99a:	bd70      	pop	{r4, r5, r6, pc}
 800f99c:	0801177e 	.word	0x0801177e
 800f9a0:	0801187c 	.word	0x0801187c

0800f9a4 <__multadd>:
 800f9a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f9a8:	690d      	ldr	r5, [r1, #16]
 800f9aa:	4607      	mov	r7, r0
 800f9ac:	460c      	mov	r4, r1
 800f9ae:	461e      	mov	r6, r3
 800f9b0:	f101 0c14 	add.w	ip, r1, #20
 800f9b4:	2000      	movs	r0, #0
 800f9b6:	f8dc 3000 	ldr.w	r3, [ip]
 800f9ba:	b299      	uxth	r1, r3
 800f9bc:	fb02 6101 	mla	r1, r2, r1, r6
 800f9c0:	0c1e      	lsrs	r6, r3, #16
 800f9c2:	0c0b      	lsrs	r3, r1, #16
 800f9c4:	fb02 3306 	mla	r3, r2, r6, r3
 800f9c8:	b289      	uxth	r1, r1
 800f9ca:	3001      	adds	r0, #1
 800f9cc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f9d0:	4285      	cmp	r5, r0
 800f9d2:	f84c 1b04 	str.w	r1, [ip], #4
 800f9d6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f9da:	dcec      	bgt.n	800f9b6 <__multadd+0x12>
 800f9dc:	b30e      	cbz	r6, 800fa22 <__multadd+0x7e>
 800f9de:	68a3      	ldr	r3, [r4, #8]
 800f9e0:	42ab      	cmp	r3, r5
 800f9e2:	dc19      	bgt.n	800fa18 <__multadd+0x74>
 800f9e4:	6861      	ldr	r1, [r4, #4]
 800f9e6:	4638      	mov	r0, r7
 800f9e8:	3101      	adds	r1, #1
 800f9ea:	f7ff ff79 	bl	800f8e0 <_Balloc>
 800f9ee:	4680      	mov	r8, r0
 800f9f0:	b928      	cbnz	r0, 800f9fe <__multadd+0x5a>
 800f9f2:	4602      	mov	r2, r0
 800f9f4:	4b0c      	ldr	r3, [pc, #48]	; (800fa28 <__multadd+0x84>)
 800f9f6:	480d      	ldr	r0, [pc, #52]	; (800fa2c <__multadd+0x88>)
 800f9f8:	21b5      	movs	r1, #181	; 0xb5
 800f9fa:	f000 febf 	bl	801077c <__assert_func>
 800f9fe:	6922      	ldr	r2, [r4, #16]
 800fa00:	3202      	adds	r2, #2
 800fa02:	f104 010c 	add.w	r1, r4, #12
 800fa06:	0092      	lsls	r2, r2, #2
 800fa08:	300c      	adds	r0, #12
 800fa0a:	f7fc fffd 	bl	800ca08 <memcpy>
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4638      	mov	r0, r7
 800fa12:	f7ff ffa5 	bl	800f960 <_Bfree>
 800fa16:	4644      	mov	r4, r8
 800fa18:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fa1c:	3501      	adds	r5, #1
 800fa1e:	615e      	str	r6, [r3, #20]
 800fa20:	6125      	str	r5, [r4, #16]
 800fa22:	4620      	mov	r0, r4
 800fa24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa28:	080117f0 	.word	0x080117f0
 800fa2c:	0801187c 	.word	0x0801187c

0800fa30 <__s2b>:
 800fa30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa34:	460c      	mov	r4, r1
 800fa36:	4615      	mov	r5, r2
 800fa38:	461f      	mov	r7, r3
 800fa3a:	2209      	movs	r2, #9
 800fa3c:	3308      	adds	r3, #8
 800fa3e:	4606      	mov	r6, r0
 800fa40:	fb93 f3f2 	sdiv	r3, r3, r2
 800fa44:	2100      	movs	r1, #0
 800fa46:	2201      	movs	r2, #1
 800fa48:	429a      	cmp	r2, r3
 800fa4a:	db09      	blt.n	800fa60 <__s2b+0x30>
 800fa4c:	4630      	mov	r0, r6
 800fa4e:	f7ff ff47 	bl	800f8e0 <_Balloc>
 800fa52:	b940      	cbnz	r0, 800fa66 <__s2b+0x36>
 800fa54:	4602      	mov	r2, r0
 800fa56:	4b19      	ldr	r3, [pc, #100]	; (800fabc <__s2b+0x8c>)
 800fa58:	4819      	ldr	r0, [pc, #100]	; (800fac0 <__s2b+0x90>)
 800fa5a:	21ce      	movs	r1, #206	; 0xce
 800fa5c:	f000 fe8e 	bl	801077c <__assert_func>
 800fa60:	0052      	lsls	r2, r2, #1
 800fa62:	3101      	adds	r1, #1
 800fa64:	e7f0      	b.n	800fa48 <__s2b+0x18>
 800fa66:	9b08      	ldr	r3, [sp, #32]
 800fa68:	6143      	str	r3, [r0, #20]
 800fa6a:	2d09      	cmp	r5, #9
 800fa6c:	f04f 0301 	mov.w	r3, #1
 800fa70:	6103      	str	r3, [r0, #16]
 800fa72:	dd16      	ble.n	800faa2 <__s2b+0x72>
 800fa74:	f104 0909 	add.w	r9, r4, #9
 800fa78:	46c8      	mov	r8, r9
 800fa7a:	442c      	add	r4, r5
 800fa7c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fa80:	4601      	mov	r1, r0
 800fa82:	3b30      	subs	r3, #48	; 0x30
 800fa84:	220a      	movs	r2, #10
 800fa86:	4630      	mov	r0, r6
 800fa88:	f7ff ff8c 	bl	800f9a4 <__multadd>
 800fa8c:	45a0      	cmp	r8, r4
 800fa8e:	d1f5      	bne.n	800fa7c <__s2b+0x4c>
 800fa90:	f1a5 0408 	sub.w	r4, r5, #8
 800fa94:	444c      	add	r4, r9
 800fa96:	1b2d      	subs	r5, r5, r4
 800fa98:	1963      	adds	r3, r4, r5
 800fa9a:	42bb      	cmp	r3, r7
 800fa9c:	db04      	blt.n	800faa8 <__s2b+0x78>
 800fa9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800faa2:	340a      	adds	r4, #10
 800faa4:	2509      	movs	r5, #9
 800faa6:	e7f6      	b.n	800fa96 <__s2b+0x66>
 800faa8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800faac:	4601      	mov	r1, r0
 800faae:	3b30      	subs	r3, #48	; 0x30
 800fab0:	220a      	movs	r2, #10
 800fab2:	4630      	mov	r0, r6
 800fab4:	f7ff ff76 	bl	800f9a4 <__multadd>
 800fab8:	e7ee      	b.n	800fa98 <__s2b+0x68>
 800faba:	bf00      	nop
 800fabc:	080117f0 	.word	0x080117f0
 800fac0:	0801187c 	.word	0x0801187c

0800fac4 <__hi0bits>:
 800fac4:	0c03      	lsrs	r3, r0, #16
 800fac6:	041b      	lsls	r3, r3, #16
 800fac8:	b9d3      	cbnz	r3, 800fb00 <__hi0bits+0x3c>
 800faca:	0400      	lsls	r0, r0, #16
 800facc:	2310      	movs	r3, #16
 800face:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800fad2:	bf04      	itt	eq
 800fad4:	0200      	lsleq	r0, r0, #8
 800fad6:	3308      	addeq	r3, #8
 800fad8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800fadc:	bf04      	itt	eq
 800fade:	0100      	lsleq	r0, r0, #4
 800fae0:	3304      	addeq	r3, #4
 800fae2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800fae6:	bf04      	itt	eq
 800fae8:	0080      	lsleq	r0, r0, #2
 800faea:	3302      	addeq	r3, #2
 800faec:	2800      	cmp	r0, #0
 800faee:	db05      	blt.n	800fafc <__hi0bits+0x38>
 800faf0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800faf4:	f103 0301 	add.w	r3, r3, #1
 800faf8:	bf08      	it	eq
 800fafa:	2320      	moveq	r3, #32
 800fafc:	4618      	mov	r0, r3
 800fafe:	4770      	bx	lr
 800fb00:	2300      	movs	r3, #0
 800fb02:	e7e4      	b.n	800face <__hi0bits+0xa>

0800fb04 <__lo0bits>:
 800fb04:	6803      	ldr	r3, [r0, #0]
 800fb06:	f013 0207 	ands.w	r2, r3, #7
 800fb0a:	4601      	mov	r1, r0
 800fb0c:	d00b      	beq.n	800fb26 <__lo0bits+0x22>
 800fb0e:	07da      	lsls	r2, r3, #31
 800fb10:	d423      	bmi.n	800fb5a <__lo0bits+0x56>
 800fb12:	0798      	lsls	r0, r3, #30
 800fb14:	bf49      	itett	mi
 800fb16:	085b      	lsrmi	r3, r3, #1
 800fb18:	089b      	lsrpl	r3, r3, #2
 800fb1a:	2001      	movmi	r0, #1
 800fb1c:	600b      	strmi	r3, [r1, #0]
 800fb1e:	bf5c      	itt	pl
 800fb20:	600b      	strpl	r3, [r1, #0]
 800fb22:	2002      	movpl	r0, #2
 800fb24:	4770      	bx	lr
 800fb26:	b298      	uxth	r0, r3
 800fb28:	b9a8      	cbnz	r0, 800fb56 <__lo0bits+0x52>
 800fb2a:	0c1b      	lsrs	r3, r3, #16
 800fb2c:	2010      	movs	r0, #16
 800fb2e:	b2da      	uxtb	r2, r3
 800fb30:	b90a      	cbnz	r2, 800fb36 <__lo0bits+0x32>
 800fb32:	3008      	adds	r0, #8
 800fb34:	0a1b      	lsrs	r3, r3, #8
 800fb36:	071a      	lsls	r2, r3, #28
 800fb38:	bf04      	itt	eq
 800fb3a:	091b      	lsreq	r3, r3, #4
 800fb3c:	3004      	addeq	r0, #4
 800fb3e:	079a      	lsls	r2, r3, #30
 800fb40:	bf04      	itt	eq
 800fb42:	089b      	lsreq	r3, r3, #2
 800fb44:	3002      	addeq	r0, #2
 800fb46:	07da      	lsls	r2, r3, #31
 800fb48:	d403      	bmi.n	800fb52 <__lo0bits+0x4e>
 800fb4a:	085b      	lsrs	r3, r3, #1
 800fb4c:	f100 0001 	add.w	r0, r0, #1
 800fb50:	d005      	beq.n	800fb5e <__lo0bits+0x5a>
 800fb52:	600b      	str	r3, [r1, #0]
 800fb54:	4770      	bx	lr
 800fb56:	4610      	mov	r0, r2
 800fb58:	e7e9      	b.n	800fb2e <__lo0bits+0x2a>
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	4770      	bx	lr
 800fb5e:	2020      	movs	r0, #32
 800fb60:	4770      	bx	lr
	...

0800fb64 <__i2b>:
 800fb64:	b510      	push	{r4, lr}
 800fb66:	460c      	mov	r4, r1
 800fb68:	2101      	movs	r1, #1
 800fb6a:	f7ff feb9 	bl	800f8e0 <_Balloc>
 800fb6e:	4602      	mov	r2, r0
 800fb70:	b928      	cbnz	r0, 800fb7e <__i2b+0x1a>
 800fb72:	4b05      	ldr	r3, [pc, #20]	; (800fb88 <__i2b+0x24>)
 800fb74:	4805      	ldr	r0, [pc, #20]	; (800fb8c <__i2b+0x28>)
 800fb76:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800fb7a:	f000 fdff 	bl	801077c <__assert_func>
 800fb7e:	2301      	movs	r3, #1
 800fb80:	6144      	str	r4, [r0, #20]
 800fb82:	6103      	str	r3, [r0, #16]
 800fb84:	bd10      	pop	{r4, pc}
 800fb86:	bf00      	nop
 800fb88:	080117f0 	.word	0x080117f0
 800fb8c:	0801187c 	.word	0x0801187c

0800fb90 <__multiply>:
 800fb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb94:	4691      	mov	r9, r2
 800fb96:	690a      	ldr	r2, [r1, #16]
 800fb98:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fb9c:	429a      	cmp	r2, r3
 800fb9e:	bfb8      	it	lt
 800fba0:	460b      	movlt	r3, r1
 800fba2:	460c      	mov	r4, r1
 800fba4:	bfbc      	itt	lt
 800fba6:	464c      	movlt	r4, r9
 800fba8:	4699      	movlt	r9, r3
 800fbaa:	6927      	ldr	r7, [r4, #16]
 800fbac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fbb0:	68a3      	ldr	r3, [r4, #8]
 800fbb2:	6861      	ldr	r1, [r4, #4]
 800fbb4:	eb07 060a 	add.w	r6, r7, sl
 800fbb8:	42b3      	cmp	r3, r6
 800fbba:	b085      	sub	sp, #20
 800fbbc:	bfb8      	it	lt
 800fbbe:	3101      	addlt	r1, #1
 800fbc0:	f7ff fe8e 	bl	800f8e0 <_Balloc>
 800fbc4:	b930      	cbnz	r0, 800fbd4 <__multiply+0x44>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	4b44      	ldr	r3, [pc, #272]	; (800fcdc <__multiply+0x14c>)
 800fbca:	4845      	ldr	r0, [pc, #276]	; (800fce0 <__multiply+0x150>)
 800fbcc:	f240 115d 	movw	r1, #349	; 0x15d
 800fbd0:	f000 fdd4 	bl	801077c <__assert_func>
 800fbd4:	f100 0514 	add.w	r5, r0, #20
 800fbd8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800fbdc:	462b      	mov	r3, r5
 800fbde:	2200      	movs	r2, #0
 800fbe0:	4543      	cmp	r3, r8
 800fbe2:	d321      	bcc.n	800fc28 <__multiply+0x98>
 800fbe4:	f104 0314 	add.w	r3, r4, #20
 800fbe8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800fbec:	f109 0314 	add.w	r3, r9, #20
 800fbf0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800fbf4:	9202      	str	r2, [sp, #8]
 800fbf6:	1b3a      	subs	r2, r7, r4
 800fbf8:	3a15      	subs	r2, #21
 800fbfa:	f022 0203 	bic.w	r2, r2, #3
 800fbfe:	3204      	adds	r2, #4
 800fc00:	f104 0115 	add.w	r1, r4, #21
 800fc04:	428f      	cmp	r7, r1
 800fc06:	bf38      	it	cc
 800fc08:	2204      	movcc	r2, #4
 800fc0a:	9201      	str	r2, [sp, #4]
 800fc0c:	9a02      	ldr	r2, [sp, #8]
 800fc0e:	9303      	str	r3, [sp, #12]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d80c      	bhi.n	800fc2e <__multiply+0x9e>
 800fc14:	2e00      	cmp	r6, #0
 800fc16:	dd03      	ble.n	800fc20 <__multiply+0x90>
 800fc18:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d05a      	beq.n	800fcd6 <__multiply+0x146>
 800fc20:	6106      	str	r6, [r0, #16]
 800fc22:	b005      	add	sp, #20
 800fc24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc28:	f843 2b04 	str.w	r2, [r3], #4
 800fc2c:	e7d8      	b.n	800fbe0 <__multiply+0x50>
 800fc2e:	f8b3 a000 	ldrh.w	sl, [r3]
 800fc32:	f1ba 0f00 	cmp.w	sl, #0
 800fc36:	d024      	beq.n	800fc82 <__multiply+0xf2>
 800fc38:	f104 0e14 	add.w	lr, r4, #20
 800fc3c:	46a9      	mov	r9, r5
 800fc3e:	f04f 0c00 	mov.w	ip, #0
 800fc42:	f85e 2b04 	ldr.w	r2, [lr], #4
 800fc46:	f8d9 1000 	ldr.w	r1, [r9]
 800fc4a:	fa1f fb82 	uxth.w	fp, r2
 800fc4e:	b289      	uxth	r1, r1
 800fc50:	fb0a 110b 	mla	r1, sl, fp, r1
 800fc54:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800fc58:	f8d9 2000 	ldr.w	r2, [r9]
 800fc5c:	4461      	add	r1, ip
 800fc5e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc62:	fb0a c20b 	mla	r2, sl, fp, ip
 800fc66:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fc6a:	b289      	uxth	r1, r1
 800fc6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800fc70:	4577      	cmp	r7, lr
 800fc72:	f849 1b04 	str.w	r1, [r9], #4
 800fc76:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800fc7a:	d8e2      	bhi.n	800fc42 <__multiply+0xb2>
 800fc7c:	9a01      	ldr	r2, [sp, #4]
 800fc7e:	f845 c002 	str.w	ip, [r5, r2]
 800fc82:	9a03      	ldr	r2, [sp, #12]
 800fc84:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800fc88:	3304      	adds	r3, #4
 800fc8a:	f1b9 0f00 	cmp.w	r9, #0
 800fc8e:	d020      	beq.n	800fcd2 <__multiply+0x142>
 800fc90:	6829      	ldr	r1, [r5, #0]
 800fc92:	f104 0c14 	add.w	ip, r4, #20
 800fc96:	46ae      	mov	lr, r5
 800fc98:	f04f 0a00 	mov.w	sl, #0
 800fc9c:	f8bc b000 	ldrh.w	fp, [ip]
 800fca0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800fca4:	fb09 220b 	mla	r2, r9, fp, r2
 800fca8:	4492      	add	sl, r2
 800fcaa:	b289      	uxth	r1, r1
 800fcac:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800fcb0:	f84e 1b04 	str.w	r1, [lr], #4
 800fcb4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fcb8:	f8be 1000 	ldrh.w	r1, [lr]
 800fcbc:	0c12      	lsrs	r2, r2, #16
 800fcbe:	fb09 1102 	mla	r1, r9, r2, r1
 800fcc2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800fcc6:	4567      	cmp	r7, ip
 800fcc8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800fccc:	d8e6      	bhi.n	800fc9c <__multiply+0x10c>
 800fcce:	9a01      	ldr	r2, [sp, #4]
 800fcd0:	50a9      	str	r1, [r5, r2]
 800fcd2:	3504      	adds	r5, #4
 800fcd4:	e79a      	b.n	800fc0c <__multiply+0x7c>
 800fcd6:	3e01      	subs	r6, #1
 800fcd8:	e79c      	b.n	800fc14 <__multiply+0x84>
 800fcda:	bf00      	nop
 800fcdc:	080117f0 	.word	0x080117f0
 800fce0:	0801187c 	.word	0x0801187c

0800fce4 <__pow5mult>:
 800fce4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fce8:	4615      	mov	r5, r2
 800fcea:	f012 0203 	ands.w	r2, r2, #3
 800fcee:	4606      	mov	r6, r0
 800fcf0:	460f      	mov	r7, r1
 800fcf2:	d007      	beq.n	800fd04 <__pow5mult+0x20>
 800fcf4:	4c25      	ldr	r4, [pc, #148]	; (800fd8c <__pow5mult+0xa8>)
 800fcf6:	3a01      	subs	r2, #1
 800fcf8:	2300      	movs	r3, #0
 800fcfa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800fcfe:	f7ff fe51 	bl	800f9a4 <__multadd>
 800fd02:	4607      	mov	r7, r0
 800fd04:	10ad      	asrs	r5, r5, #2
 800fd06:	d03d      	beq.n	800fd84 <__pow5mult+0xa0>
 800fd08:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800fd0a:	b97c      	cbnz	r4, 800fd2c <__pow5mult+0x48>
 800fd0c:	2010      	movs	r0, #16
 800fd0e:	f7ff fdcd 	bl	800f8ac <malloc>
 800fd12:	4602      	mov	r2, r0
 800fd14:	6270      	str	r0, [r6, #36]	; 0x24
 800fd16:	b928      	cbnz	r0, 800fd24 <__pow5mult+0x40>
 800fd18:	4b1d      	ldr	r3, [pc, #116]	; (800fd90 <__pow5mult+0xac>)
 800fd1a:	481e      	ldr	r0, [pc, #120]	; (800fd94 <__pow5mult+0xb0>)
 800fd1c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800fd20:	f000 fd2c 	bl	801077c <__assert_func>
 800fd24:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800fd28:	6004      	str	r4, [r0, #0]
 800fd2a:	60c4      	str	r4, [r0, #12]
 800fd2c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800fd30:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800fd34:	b94c      	cbnz	r4, 800fd4a <__pow5mult+0x66>
 800fd36:	f240 2171 	movw	r1, #625	; 0x271
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	f7ff ff12 	bl	800fb64 <__i2b>
 800fd40:	2300      	movs	r3, #0
 800fd42:	f8c8 0008 	str.w	r0, [r8, #8]
 800fd46:	4604      	mov	r4, r0
 800fd48:	6003      	str	r3, [r0, #0]
 800fd4a:	f04f 0900 	mov.w	r9, #0
 800fd4e:	07eb      	lsls	r3, r5, #31
 800fd50:	d50a      	bpl.n	800fd68 <__pow5mult+0x84>
 800fd52:	4639      	mov	r1, r7
 800fd54:	4622      	mov	r2, r4
 800fd56:	4630      	mov	r0, r6
 800fd58:	f7ff ff1a 	bl	800fb90 <__multiply>
 800fd5c:	4639      	mov	r1, r7
 800fd5e:	4680      	mov	r8, r0
 800fd60:	4630      	mov	r0, r6
 800fd62:	f7ff fdfd 	bl	800f960 <_Bfree>
 800fd66:	4647      	mov	r7, r8
 800fd68:	106d      	asrs	r5, r5, #1
 800fd6a:	d00b      	beq.n	800fd84 <__pow5mult+0xa0>
 800fd6c:	6820      	ldr	r0, [r4, #0]
 800fd6e:	b938      	cbnz	r0, 800fd80 <__pow5mult+0x9c>
 800fd70:	4622      	mov	r2, r4
 800fd72:	4621      	mov	r1, r4
 800fd74:	4630      	mov	r0, r6
 800fd76:	f7ff ff0b 	bl	800fb90 <__multiply>
 800fd7a:	6020      	str	r0, [r4, #0]
 800fd7c:	f8c0 9000 	str.w	r9, [r0]
 800fd80:	4604      	mov	r4, r0
 800fd82:	e7e4      	b.n	800fd4e <__pow5mult+0x6a>
 800fd84:	4638      	mov	r0, r7
 800fd86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd8a:	bf00      	nop
 800fd8c:	080119c8 	.word	0x080119c8
 800fd90:	0801177e 	.word	0x0801177e
 800fd94:	0801187c 	.word	0x0801187c

0800fd98 <__lshift>:
 800fd98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd9c:	460c      	mov	r4, r1
 800fd9e:	6849      	ldr	r1, [r1, #4]
 800fda0:	6923      	ldr	r3, [r4, #16]
 800fda2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800fda6:	68a3      	ldr	r3, [r4, #8]
 800fda8:	4607      	mov	r7, r0
 800fdaa:	4691      	mov	r9, r2
 800fdac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fdb0:	f108 0601 	add.w	r6, r8, #1
 800fdb4:	42b3      	cmp	r3, r6
 800fdb6:	db0b      	blt.n	800fdd0 <__lshift+0x38>
 800fdb8:	4638      	mov	r0, r7
 800fdba:	f7ff fd91 	bl	800f8e0 <_Balloc>
 800fdbe:	4605      	mov	r5, r0
 800fdc0:	b948      	cbnz	r0, 800fdd6 <__lshift+0x3e>
 800fdc2:	4602      	mov	r2, r0
 800fdc4:	4b2a      	ldr	r3, [pc, #168]	; (800fe70 <__lshift+0xd8>)
 800fdc6:	482b      	ldr	r0, [pc, #172]	; (800fe74 <__lshift+0xdc>)
 800fdc8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800fdcc:	f000 fcd6 	bl	801077c <__assert_func>
 800fdd0:	3101      	adds	r1, #1
 800fdd2:	005b      	lsls	r3, r3, #1
 800fdd4:	e7ee      	b.n	800fdb4 <__lshift+0x1c>
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	f100 0114 	add.w	r1, r0, #20
 800fddc:	f100 0210 	add.w	r2, r0, #16
 800fde0:	4618      	mov	r0, r3
 800fde2:	4553      	cmp	r3, sl
 800fde4:	db37      	blt.n	800fe56 <__lshift+0xbe>
 800fde6:	6920      	ldr	r0, [r4, #16]
 800fde8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fdec:	f104 0314 	add.w	r3, r4, #20
 800fdf0:	f019 091f 	ands.w	r9, r9, #31
 800fdf4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fdf8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800fdfc:	d02f      	beq.n	800fe5e <__lshift+0xc6>
 800fdfe:	f1c9 0e20 	rsb	lr, r9, #32
 800fe02:	468a      	mov	sl, r1
 800fe04:	f04f 0c00 	mov.w	ip, #0
 800fe08:	681a      	ldr	r2, [r3, #0]
 800fe0a:	fa02 f209 	lsl.w	r2, r2, r9
 800fe0e:	ea42 020c 	orr.w	r2, r2, ip
 800fe12:	f84a 2b04 	str.w	r2, [sl], #4
 800fe16:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe1a:	4298      	cmp	r0, r3
 800fe1c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800fe20:	d8f2      	bhi.n	800fe08 <__lshift+0x70>
 800fe22:	1b03      	subs	r3, r0, r4
 800fe24:	3b15      	subs	r3, #21
 800fe26:	f023 0303 	bic.w	r3, r3, #3
 800fe2a:	3304      	adds	r3, #4
 800fe2c:	f104 0215 	add.w	r2, r4, #21
 800fe30:	4290      	cmp	r0, r2
 800fe32:	bf38      	it	cc
 800fe34:	2304      	movcc	r3, #4
 800fe36:	f841 c003 	str.w	ip, [r1, r3]
 800fe3a:	f1bc 0f00 	cmp.w	ip, #0
 800fe3e:	d001      	beq.n	800fe44 <__lshift+0xac>
 800fe40:	f108 0602 	add.w	r6, r8, #2
 800fe44:	3e01      	subs	r6, #1
 800fe46:	4638      	mov	r0, r7
 800fe48:	612e      	str	r6, [r5, #16]
 800fe4a:	4621      	mov	r1, r4
 800fe4c:	f7ff fd88 	bl	800f960 <_Bfree>
 800fe50:	4628      	mov	r0, r5
 800fe52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe56:	f842 0f04 	str.w	r0, [r2, #4]!
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	e7c1      	b.n	800fde2 <__lshift+0x4a>
 800fe5e:	3904      	subs	r1, #4
 800fe60:	f853 2b04 	ldr.w	r2, [r3], #4
 800fe64:	f841 2f04 	str.w	r2, [r1, #4]!
 800fe68:	4298      	cmp	r0, r3
 800fe6a:	d8f9      	bhi.n	800fe60 <__lshift+0xc8>
 800fe6c:	e7ea      	b.n	800fe44 <__lshift+0xac>
 800fe6e:	bf00      	nop
 800fe70:	080117f0 	.word	0x080117f0
 800fe74:	0801187c 	.word	0x0801187c

0800fe78 <__mcmp>:
 800fe78:	b530      	push	{r4, r5, lr}
 800fe7a:	6902      	ldr	r2, [r0, #16]
 800fe7c:	690c      	ldr	r4, [r1, #16]
 800fe7e:	1b12      	subs	r2, r2, r4
 800fe80:	d10e      	bne.n	800fea0 <__mcmp+0x28>
 800fe82:	f100 0314 	add.w	r3, r0, #20
 800fe86:	3114      	adds	r1, #20
 800fe88:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fe8c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fe90:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fe94:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fe98:	42a5      	cmp	r5, r4
 800fe9a:	d003      	beq.n	800fea4 <__mcmp+0x2c>
 800fe9c:	d305      	bcc.n	800feaa <__mcmp+0x32>
 800fe9e:	2201      	movs	r2, #1
 800fea0:	4610      	mov	r0, r2
 800fea2:	bd30      	pop	{r4, r5, pc}
 800fea4:	4283      	cmp	r3, r0
 800fea6:	d3f3      	bcc.n	800fe90 <__mcmp+0x18>
 800fea8:	e7fa      	b.n	800fea0 <__mcmp+0x28>
 800feaa:	f04f 32ff 	mov.w	r2, #4294967295
 800feae:	e7f7      	b.n	800fea0 <__mcmp+0x28>

0800feb0 <__mdiff>:
 800feb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800feb4:	460c      	mov	r4, r1
 800feb6:	4606      	mov	r6, r0
 800feb8:	4611      	mov	r1, r2
 800feba:	4620      	mov	r0, r4
 800febc:	4690      	mov	r8, r2
 800febe:	f7ff ffdb 	bl	800fe78 <__mcmp>
 800fec2:	1e05      	subs	r5, r0, #0
 800fec4:	d110      	bne.n	800fee8 <__mdiff+0x38>
 800fec6:	4629      	mov	r1, r5
 800fec8:	4630      	mov	r0, r6
 800feca:	f7ff fd09 	bl	800f8e0 <_Balloc>
 800fece:	b930      	cbnz	r0, 800fede <__mdiff+0x2e>
 800fed0:	4b3a      	ldr	r3, [pc, #232]	; (800ffbc <__mdiff+0x10c>)
 800fed2:	4602      	mov	r2, r0
 800fed4:	f240 2132 	movw	r1, #562	; 0x232
 800fed8:	4839      	ldr	r0, [pc, #228]	; (800ffc0 <__mdiff+0x110>)
 800feda:	f000 fc4f 	bl	801077c <__assert_func>
 800fede:	2301      	movs	r3, #1
 800fee0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800fee4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fee8:	bfa4      	itt	ge
 800feea:	4643      	movge	r3, r8
 800feec:	46a0      	movge	r8, r4
 800feee:	4630      	mov	r0, r6
 800fef0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fef4:	bfa6      	itte	ge
 800fef6:	461c      	movge	r4, r3
 800fef8:	2500      	movge	r5, #0
 800fefa:	2501      	movlt	r5, #1
 800fefc:	f7ff fcf0 	bl	800f8e0 <_Balloc>
 800ff00:	b920      	cbnz	r0, 800ff0c <__mdiff+0x5c>
 800ff02:	4b2e      	ldr	r3, [pc, #184]	; (800ffbc <__mdiff+0x10c>)
 800ff04:	4602      	mov	r2, r0
 800ff06:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ff0a:	e7e5      	b.n	800fed8 <__mdiff+0x28>
 800ff0c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ff10:	6926      	ldr	r6, [r4, #16]
 800ff12:	60c5      	str	r5, [r0, #12]
 800ff14:	f104 0914 	add.w	r9, r4, #20
 800ff18:	f108 0514 	add.w	r5, r8, #20
 800ff1c:	f100 0e14 	add.w	lr, r0, #20
 800ff20:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ff24:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ff28:	f108 0210 	add.w	r2, r8, #16
 800ff2c:	46f2      	mov	sl, lr
 800ff2e:	2100      	movs	r1, #0
 800ff30:	f859 3b04 	ldr.w	r3, [r9], #4
 800ff34:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800ff38:	fa1f f883 	uxth.w	r8, r3
 800ff3c:	fa11 f18b 	uxtah	r1, r1, fp
 800ff40:	0c1b      	lsrs	r3, r3, #16
 800ff42:	eba1 0808 	sub.w	r8, r1, r8
 800ff46:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ff4a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ff4e:	fa1f f888 	uxth.w	r8, r8
 800ff52:	1419      	asrs	r1, r3, #16
 800ff54:	454e      	cmp	r6, r9
 800ff56:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ff5a:	f84a 3b04 	str.w	r3, [sl], #4
 800ff5e:	d8e7      	bhi.n	800ff30 <__mdiff+0x80>
 800ff60:	1b33      	subs	r3, r6, r4
 800ff62:	3b15      	subs	r3, #21
 800ff64:	f023 0303 	bic.w	r3, r3, #3
 800ff68:	3304      	adds	r3, #4
 800ff6a:	3415      	adds	r4, #21
 800ff6c:	42a6      	cmp	r6, r4
 800ff6e:	bf38      	it	cc
 800ff70:	2304      	movcc	r3, #4
 800ff72:	441d      	add	r5, r3
 800ff74:	4473      	add	r3, lr
 800ff76:	469e      	mov	lr, r3
 800ff78:	462e      	mov	r6, r5
 800ff7a:	4566      	cmp	r6, ip
 800ff7c:	d30e      	bcc.n	800ff9c <__mdiff+0xec>
 800ff7e:	f10c 0203 	add.w	r2, ip, #3
 800ff82:	1b52      	subs	r2, r2, r5
 800ff84:	f022 0203 	bic.w	r2, r2, #3
 800ff88:	3d03      	subs	r5, #3
 800ff8a:	45ac      	cmp	ip, r5
 800ff8c:	bf38      	it	cc
 800ff8e:	2200      	movcc	r2, #0
 800ff90:	441a      	add	r2, r3
 800ff92:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ff96:	b17b      	cbz	r3, 800ffb8 <__mdiff+0x108>
 800ff98:	6107      	str	r7, [r0, #16]
 800ff9a:	e7a3      	b.n	800fee4 <__mdiff+0x34>
 800ff9c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ffa0:	fa11 f288 	uxtah	r2, r1, r8
 800ffa4:	1414      	asrs	r4, r2, #16
 800ffa6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ffaa:	b292      	uxth	r2, r2
 800ffac:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ffb0:	f84e 2b04 	str.w	r2, [lr], #4
 800ffb4:	1421      	asrs	r1, r4, #16
 800ffb6:	e7e0      	b.n	800ff7a <__mdiff+0xca>
 800ffb8:	3f01      	subs	r7, #1
 800ffba:	e7ea      	b.n	800ff92 <__mdiff+0xe2>
 800ffbc:	080117f0 	.word	0x080117f0
 800ffc0:	0801187c 	.word	0x0801187c

0800ffc4 <__ulp>:
 800ffc4:	b082      	sub	sp, #8
 800ffc6:	ed8d 0b00 	vstr	d0, [sp]
 800ffca:	9b01      	ldr	r3, [sp, #4]
 800ffcc:	4912      	ldr	r1, [pc, #72]	; (8010018 <__ulp+0x54>)
 800ffce:	4019      	ands	r1, r3
 800ffd0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ffd4:	2900      	cmp	r1, #0
 800ffd6:	dd05      	ble.n	800ffe4 <__ulp+0x20>
 800ffd8:	2200      	movs	r2, #0
 800ffda:	460b      	mov	r3, r1
 800ffdc:	ec43 2b10 	vmov	d0, r2, r3
 800ffe0:	b002      	add	sp, #8
 800ffe2:	4770      	bx	lr
 800ffe4:	4249      	negs	r1, r1
 800ffe6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ffea:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ffee:	f04f 0200 	mov.w	r2, #0
 800fff2:	f04f 0300 	mov.w	r3, #0
 800fff6:	da04      	bge.n	8010002 <__ulp+0x3e>
 800fff8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fffc:	fa41 f300 	asr.w	r3, r1, r0
 8010000:	e7ec      	b.n	800ffdc <__ulp+0x18>
 8010002:	f1a0 0114 	sub.w	r1, r0, #20
 8010006:	291e      	cmp	r1, #30
 8010008:	bfda      	itte	le
 801000a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 801000e:	fa20 f101 	lsrle.w	r1, r0, r1
 8010012:	2101      	movgt	r1, #1
 8010014:	460a      	mov	r2, r1
 8010016:	e7e1      	b.n	800ffdc <__ulp+0x18>
 8010018:	7ff00000 	.word	0x7ff00000

0801001c <__b2d>:
 801001c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801001e:	6905      	ldr	r5, [r0, #16]
 8010020:	f100 0714 	add.w	r7, r0, #20
 8010024:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 8010028:	1f2e      	subs	r6, r5, #4
 801002a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 801002e:	4620      	mov	r0, r4
 8010030:	f7ff fd48 	bl	800fac4 <__hi0bits>
 8010034:	f1c0 0320 	rsb	r3, r0, #32
 8010038:	280a      	cmp	r0, #10
 801003a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 80100b8 <__b2d+0x9c>
 801003e:	600b      	str	r3, [r1, #0]
 8010040:	dc14      	bgt.n	801006c <__b2d+0x50>
 8010042:	f1c0 0e0b 	rsb	lr, r0, #11
 8010046:	fa24 f10e 	lsr.w	r1, r4, lr
 801004a:	42b7      	cmp	r7, r6
 801004c:	ea41 030c 	orr.w	r3, r1, ip
 8010050:	bf34      	ite	cc
 8010052:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010056:	2100      	movcs	r1, #0
 8010058:	3015      	adds	r0, #21
 801005a:	fa04 f000 	lsl.w	r0, r4, r0
 801005e:	fa21 f10e 	lsr.w	r1, r1, lr
 8010062:	ea40 0201 	orr.w	r2, r0, r1
 8010066:	ec43 2b10 	vmov	d0, r2, r3
 801006a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801006c:	42b7      	cmp	r7, r6
 801006e:	bf3a      	itte	cc
 8010070:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8010074:	f1a5 0608 	subcc.w	r6, r5, #8
 8010078:	2100      	movcs	r1, #0
 801007a:	380b      	subs	r0, #11
 801007c:	d017      	beq.n	80100ae <__b2d+0x92>
 801007e:	f1c0 0c20 	rsb	ip, r0, #32
 8010082:	fa04 f500 	lsl.w	r5, r4, r0
 8010086:	42be      	cmp	r6, r7
 8010088:	fa21 f40c 	lsr.w	r4, r1, ip
 801008c:	ea45 0504 	orr.w	r5, r5, r4
 8010090:	bf8c      	ite	hi
 8010092:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8010096:	2400      	movls	r4, #0
 8010098:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 801009c:	fa01 f000 	lsl.w	r0, r1, r0
 80100a0:	fa24 f40c 	lsr.w	r4, r4, ip
 80100a4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80100a8:	ea40 0204 	orr.w	r2, r0, r4
 80100ac:	e7db      	b.n	8010066 <__b2d+0x4a>
 80100ae:	ea44 030c 	orr.w	r3, r4, ip
 80100b2:	460a      	mov	r2, r1
 80100b4:	e7d7      	b.n	8010066 <__b2d+0x4a>
 80100b6:	bf00      	nop
 80100b8:	3ff00000 	.word	0x3ff00000

080100bc <__d2b>:
 80100bc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80100c0:	4689      	mov	r9, r1
 80100c2:	2101      	movs	r1, #1
 80100c4:	ec57 6b10 	vmov	r6, r7, d0
 80100c8:	4690      	mov	r8, r2
 80100ca:	f7ff fc09 	bl	800f8e0 <_Balloc>
 80100ce:	4604      	mov	r4, r0
 80100d0:	b930      	cbnz	r0, 80100e0 <__d2b+0x24>
 80100d2:	4602      	mov	r2, r0
 80100d4:	4b25      	ldr	r3, [pc, #148]	; (801016c <__d2b+0xb0>)
 80100d6:	4826      	ldr	r0, [pc, #152]	; (8010170 <__d2b+0xb4>)
 80100d8:	f240 310a 	movw	r1, #778	; 0x30a
 80100dc:	f000 fb4e 	bl	801077c <__assert_func>
 80100e0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80100e4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80100e8:	bb35      	cbnz	r5, 8010138 <__d2b+0x7c>
 80100ea:	2e00      	cmp	r6, #0
 80100ec:	9301      	str	r3, [sp, #4]
 80100ee:	d028      	beq.n	8010142 <__d2b+0x86>
 80100f0:	4668      	mov	r0, sp
 80100f2:	9600      	str	r6, [sp, #0]
 80100f4:	f7ff fd06 	bl	800fb04 <__lo0bits>
 80100f8:	9900      	ldr	r1, [sp, #0]
 80100fa:	b300      	cbz	r0, 801013e <__d2b+0x82>
 80100fc:	9a01      	ldr	r2, [sp, #4]
 80100fe:	f1c0 0320 	rsb	r3, r0, #32
 8010102:	fa02 f303 	lsl.w	r3, r2, r3
 8010106:	430b      	orrs	r3, r1
 8010108:	40c2      	lsrs	r2, r0
 801010a:	6163      	str	r3, [r4, #20]
 801010c:	9201      	str	r2, [sp, #4]
 801010e:	9b01      	ldr	r3, [sp, #4]
 8010110:	61a3      	str	r3, [r4, #24]
 8010112:	2b00      	cmp	r3, #0
 8010114:	bf14      	ite	ne
 8010116:	2202      	movne	r2, #2
 8010118:	2201      	moveq	r2, #1
 801011a:	6122      	str	r2, [r4, #16]
 801011c:	b1d5      	cbz	r5, 8010154 <__d2b+0x98>
 801011e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8010122:	4405      	add	r5, r0
 8010124:	f8c9 5000 	str.w	r5, [r9]
 8010128:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801012c:	f8c8 0000 	str.w	r0, [r8]
 8010130:	4620      	mov	r0, r4
 8010132:	b003      	add	sp, #12
 8010134:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010138:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801013c:	e7d5      	b.n	80100ea <__d2b+0x2e>
 801013e:	6161      	str	r1, [r4, #20]
 8010140:	e7e5      	b.n	801010e <__d2b+0x52>
 8010142:	a801      	add	r0, sp, #4
 8010144:	f7ff fcde 	bl	800fb04 <__lo0bits>
 8010148:	9b01      	ldr	r3, [sp, #4]
 801014a:	6163      	str	r3, [r4, #20]
 801014c:	2201      	movs	r2, #1
 801014e:	6122      	str	r2, [r4, #16]
 8010150:	3020      	adds	r0, #32
 8010152:	e7e3      	b.n	801011c <__d2b+0x60>
 8010154:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010158:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801015c:	f8c9 0000 	str.w	r0, [r9]
 8010160:	6918      	ldr	r0, [r3, #16]
 8010162:	f7ff fcaf 	bl	800fac4 <__hi0bits>
 8010166:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801016a:	e7df      	b.n	801012c <__d2b+0x70>
 801016c:	080117f0 	.word	0x080117f0
 8010170:	0801187c 	.word	0x0801187c

08010174 <__ratio>:
 8010174:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010178:	4688      	mov	r8, r1
 801017a:	4669      	mov	r1, sp
 801017c:	4681      	mov	r9, r0
 801017e:	f7ff ff4d 	bl	801001c <__b2d>
 8010182:	a901      	add	r1, sp, #4
 8010184:	4640      	mov	r0, r8
 8010186:	ec55 4b10 	vmov	r4, r5, d0
 801018a:	f7ff ff47 	bl	801001c <__b2d>
 801018e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8010192:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8010196:	eba3 0c02 	sub.w	ip, r3, r2
 801019a:	e9dd 3200 	ldrd	r3, r2, [sp]
 801019e:	1a9b      	subs	r3, r3, r2
 80101a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 80101a4:	ec51 0b10 	vmov	r0, r1, d0
 80101a8:	2b00      	cmp	r3, #0
 80101aa:	bfd6      	itet	le
 80101ac:	460a      	movle	r2, r1
 80101ae:	462a      	movgt	r2, r5
 80101b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80101b4:	468b      	mov	fp, r1
 80101b6:	462f      	mov	r7, r5
 80101b8:	bfd4      	ite	le
 80101ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80101be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80101c2:	4620      	mov	r0, r4
 80101c4:	ee10 2a10 	vmov	r2, s0
 80101c8:	465b      	mov	r3, fp
 80101ca:	4639      	mov	r1, r7
 80101cc:	f7f0 fb46 	bl	800085c <__aeabi_ddiv>
 80101d0:	ec41 0b10 	vmov	d0, r0, r1
 80101d4:	b003      	add	sp, #12
 80101d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080101da <__copybits>:
 80101da:	3901      	subs	r1, #1
 80101dc:	b570      	push	{r4, r5, r6, lr}
 80101de:	1149      	asrs	r1, r1, #5
 80101e0:	6914      	ldr	r4, [r2, #16]
 80101e2:	3101      	adds	r1, #1
 80101e4:	f102 0314 	add.w	r3, r2, #20
 80101e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80101ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80101f0:	1f05      	subs	r5, r0, #4
 80101f2:	42a3      	cmp	r3, r4
 80101f4:	d30c      	bcc.n	8010210 <__copybits+0x36>
 80101f6:	1aa3      	subs	r3, r4, r2
 80101f8:	3b11      	subs	r3, #17
 80101fa:	f023 0303 	bic.w	r3, r3, #3
 80101fe:	3211      	adds	r2, #17
 8010200:	42a2      	cmp	r2, r4
 8010202:	bf88      	it	hi
 8010204:	2300      	movhi	r3, #0
 8010206:	4418      	add	r0, r3
 8010208:	2300      	movs	r3, #0
 801020a:	4288      	cmp	r0, r1
 801020c:	d305      	bcc.n	801021a <__copybits+0x40>
 801020e:	bd70      	pop	{r4, r5, r6, pc}
 8010210:	f853 6b04 	ldr.w	r6, [r3], #4
 8010214:	f845 6f04 	str.w	r6, [r5, #4]!
 8010218:	e7eb      	b.n	80101f2 <__copybits+0x18>
 801021a:	f840 3b04 	str.w	r3, [r0], #4
 801021e:	e7f4      	b.n	801020a <__copybits+0x30>

08010220 <__any_on>:
 8010220:	f100 0214 	add.w	r2, r0, #20
 8010224:	6900      	ldr	r0, [r0, #16]
 8010226:	114b      	asrs	r3, r1, #5
 8010228:	4298      	cmp	r0, r3
 801022a:	b510      	push	{r4, lr}
 801022c:	db11      	blt.n	8010252 <__any_on+0x32>
 801022e:	dd0a      	ble.n	8010246 <__any_on+0x26>
 8010230:	f011 011f 	ands.w	r1, r1, #31
 8010234:	d007      	beq.n	8010246 <__any_on+0x26>
 8010236:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 801023a:	fa24 f001 	lsr.w	r0, r4, r1
 801023e:	fa00 f101 	lsl.w	r1, r0, r1
 8010242:	428c      	cmp	r4, r1
 8010244:	d10b      	bne.n	801025e <__any_on+0x3e>
 8010246:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801024a:	4293      	cmp	r3, r2
 801024c:	d803      	bhi.n	8010256 <__any_on+0x36>
 801024e:	2000      	movs	r0, #0
 8010250:	bd10      	pop	{r4, pc}
 8010252:	4603      	mov	r3, r0
 8010254:	e7f7      	b.n	8010246 <__any_on+0x26>
 8010256:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801025a:	2900      	cmp	r1, #0
 801025c:	d0f5      	beq.n	801024a <__any_on+0x2a>
 801025e:	2001      	movs	r0, #1
 8010260:	e7f6      	b.n	8010250 <__any_on+0x30>

08010262 <_calloc_r>:
 8010262:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010264:	fba1 2402 	umull	r2, r4, r1, r2
 8010268:	b94c      	cbnz	r4, 801027e <_calloc_r+0x1c>
 801026a:	4611      	mov	r1, r2
 801026c:	9201      	str	r2, [sp, #4]
 801026e:	f000 f87b 	bl	8010368 <_malloc_r>
 8010272:	9a01      	ldr	r2, [sp, #4]
 8010274:	4605      	mov	r5, r0
 8010276:	b930      	cbnz	r0, 8010286 <_calloc_r+0x24>
 8010278:	4628      	mov	r0, r5
 801027a:	b003      	add	sp, #12
 801027c:	bd30      	pop	{r4, r5, pc}
 801027e:	220c      	movs	r2, #12
 8010280:	6002      	str	r2, [r0, #0]
 8010282:	2500      	movs	r5, #0
 8010284:	e7f8      	b.n	8010278 <_calloc_r+0x16>
 8010286:	4621      	mov	r1, r4
 8010288:	f7fc fbcc 	bl	800ca24 <memset>
 801028c:	e7f4      	b.n	8010278 <_calloc_r+0x16>
	...

08010290 <_free_r>:
 8010290:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010292:	2900      	cmp	r1, #0
 8010294:	d044      	beq.n	8010320 <_free_r+0x90>
 8010296:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801029a:	9001      	str	r0, [sp, #4]
 801029c:	2b00      	cmp	r3, #0
 801029e:	f1a1 0404 	sub.w	r4, r1, #4
 80102a2:	bfb8      	it	lt
 80102a4:	18e4      	addlt	r4, r4, r3
 80102a6:	f000 fab3 	bl	8010810 <__malloc_lock>
 80102aa:	4a1e      	ldr	r2, [pc, #120]	; (8010324 <_free_r+0x94>)
 80102ac:	9801      	ldr	r0, [sp, #4]
 80102ae:	6813      	ldr	r3, [r2, #0]
 80102b0:	b933      	cbnz	r3, 80102c0 <_free_r+0x30>
 80102b2:	6063      	str	r3, [r4, #4]
 80102b4:	6014      	str	r4, [r2, #0]
 80102b6:	b003      	add	sp, #12
 80102b8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80102bc:	f000 baae 	b.w	801081c <__malloc_unlock>
 80102c0:	42a3      	cmp	r3, r4
 80102c2:	d908      	bls.n	80102d6 <_free_r+0x46>
 80102c4:	6825      	ldr	r5, [r4, #0]
 80102c6:	1961      	adds	r1, r4, r5
 80102c8:	428b      	cmp	r3, r1
 80102ca:	bf01      	itttt	eq
 80102cc:	6819      	ldreq	r1, [r3, #0]
 80102ce:	685b      	ldreq	r3, [r3, #4]
 80102d0:	1949      	addeq	r1, r1, r5
 80102d2:	6021      	streq	r1, [r4, #0]
 80102d4:	e7ed      	b.n	80102b2 <_free_r+0x22>
 80102d6:	461a      	mov	r2, r3
 80102d8:	685b      	ldr	r3, [r3, #4]
 80102da:	b10b      	cbz	r3, 80102e0 <_free_r+0x50>
 80102dc:	42a3      	cmp	r3, r4
 80102de:	d9fa      	bls.n	80102d6 <_free_r+0x46>
 80102e0:	6811      	ldr	r1, [r2, #0]
 80102e2:	1855      	adds	r5, r2, r1
 80102e4:	42a5      	cmp	r5, r4
 80102e6:	d10b      	bne.n	8010300 <_free_r+0x70>
 80102e8:	6824      	ldr	r4, [r4, #0]
 80102ea:	4421      	add	r1, r4
 80102ec:	1854      	adds	r4, r2, r1
 80102ee:	42a3      	cmp	r3, r4
 80102f0:	6011      	str	r1, [r2, #0]
 80102f2:	d1e0      	bne.n	80102b6 <_free_r+0x26>
 80102f4:	681c      	ldr	r4, [r3, #0]
 80102f6:	685b      	ldr	r3, [r3, #4]
 80102f8:	6053      	str	r3, [r2, #4]
 80102fa:	4421      	add	r1, r4
 80102fc:	6011      	str	r1, [r2, #0]
 80102fe:	e7da      	b.n	80102b6 <_free_r+0x26>
 8010300:	d902      	bls.n	8010308 <_free_r+0x78>
 8010302:	230c      	movs	r3, #12
 8010304:	6003      	str	r3, [r0, #0]
 8010306:	e7d6      	b.n	80102b6 <_free_r+0x26>
 8010308:	6825      	ldr	r5, [r4, #0]
 801030a:	1961      	adds	r1, r4, r5
 801030c:	428b      	cmp	r3, r1
 801030e:	bf04      	itt	eq
 8010310:	6819      	ldreq	r1, [r3, #0]
 8010312:	685b      	ldreq	r3, [r3, #4]
 8010314:	6063      	str	r3, [r4, #4]
 8010316:	bf04      	itt	eq
 8010318:	1949      	addeq	r1, r1, r5
 801031a:	6021      	streq	r1, [r4, #0]
 801031c:	6054      	str	r4, [r2, #4]
 801031e:	e7ca      	b.n	80102b6 <_free_r+0x26>
 8010320:	b003      	add	sp, #12
 8010322:	bd30      	pop	{r4, r5, pc}
 8010324:	20001134 	.word	0x20001134

08010328 <sbrk_aligned>:
 8010328:	b570      	push	{r4, r5, r6, lr}
 801032a:	4e0e      	ldr	r6, [pc, #56]	; (8010364 <sbrk_aligned+0x3c>)
 801032c:	460c      	mov	r4, r1
 801032e:	6831      	ldr	r1, [r6, #0]
 8010330:	4605      	mov	r5, r0
 8010332:	b911      	cbnz	r1, 801033a <sbrk_aligned+0x12>
 8010334:	f000 f9f0 	bl	8010718 <_sbrk_r>
 8010338:	6030      	str	r0, [r6, #0]
 801033a:	4621      	mov	r1, r4
 801033c:	4628      	mov	r0, r5
 801033e:	f000 f9eb 	bl	8010718 <_sbrk_r>
 8010342:	1c43      	adds	r3, r0, #1
 8010344:	d00a      	beq.n	801035c <sbrk_aligned+0x34>
 8010346:	1cc4      	adds	r4, r0, #3
 8010348:	f024 0403 	bic.w	r4, r4, #3
 801034c:	42a0      	cmp	r0, r4
 801034e:	d007      	beq.n	8010360 <sbrk_aligned+0x38>
 8010350:	1a21      	subs	r1, r4, r0
 8010352:	4628      	mov	r0, r5
 8010354:	f000 f9e0 	bl	8010718 <_sbrk_r>
 8010358:	3001      	adds	r0, #1
 801035a:	d101      	bne.n	8010360 <sbrk_aligned+0x38>
 801035c:	f04f 34ff 	mov.w	r4, #4294967295
 8010360:	4620      	mov	r0, r4
 8010362:	bd70      	pop	{r4, r5, r6, pc}
 8010364:	20001138 	.word	0x20001138

08010368 <_malloc_r>:
 8010368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801036c:	1ccd      	adds	r5, r1, #3
 801036e:	f025 0503 	bic.w	r5, r5, #3
 8010372:	3508      	adds	r5, #8
 8010374:	2d0c      	cmp	r5, #12
 8010376:	bf38      	it	cc
 8010378:	250c      	movcc	r5, #12
 801037a:	2d00      	cmp	r5, #0
 801037c:	4607      	mov	r7, r0
 801037e:	db01      	blt.n	8010384 <_malloc_r+0x1c>
 8010380:	42a9      	cmp	r1, r5
 8010382:	d905      	bls.n	8010390 <_malloc_r+0x28>
 8010384:	230c      	movs	r3, #12
 8010386:	603b      	str	r3, [r7, #0]
 8010388:	2600      	movs	r6, #0
 801038a:	4630      	mov	r0, r6
 801038c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010390:	4e2e      	ldr	r6, [pc, #184]	; (801044c <_malloc_r+0xe4>)
 8010392:	f000 fa3d 	bl	8010810 <__malloc_lock>
 8010396:	6833      	ldr	r3, [r6, #0]
 8010398:	461c      	mov	r4, r3
 801039a:	bb34      	cbnz	r4, 80103ea <_malloc_r+0x82>
 801039c:	4629      	mov	r1, r5
 801039e:	4638      	mov	r0, r7
 80103a0:	f7ff ffc2 	bl	8010328 <sbrk_aligned>
 80103a4:	1c43      	adds	r3, r0, #1
 80103a6:	4604      	mov	r4, r0
 80103a8:	d14d      	bne.n	8010446 <_malloc_r+0xde>
 80103aa:	6834      	ldr	r4, [r6, #0]
 80103ac:	4626      	mov	r6, r4
 80103ae:	2e00      	cmp	r6, #0
 80103b0:	d140      	bne.n	8010434 <_malloc_r+0xcc>
 80103b2:	6823      	ldr	r3, [r4, #0]
 80103b4:	4631      	mov	r1, r6
 80103b6:	4638      	mov	r0, r7
 80103b8:	eb04 0803 	add.w	r8, r4, r3
 80103bc:	f000 f9ac 	bl	8010718 <_sbrk_r>
 80103c0:	4580      	cmp	r8, r0
 80103c2:	d13a      	bne.n	801043a <_malloc_r+0xd2>
 80103c4:	6821      	ldr	r1, [r4, #0]
 80103c6:	3503      	adds	r5, #3
 80103c8:	1a6d      	subs	r5, r5, r1
 80103ca:	f025 0503 	bic.w	r5, r5, #3
 80103ce:	3508      	adds	r5, #8
 80103d0:	2d0c      	cmp	r5, #12
 80103d2:	bf38      	it	cc
 80103d4:	250c      	movcc	r5, #12
 80103d6:	4629      	mov	r1, r5
 80103d8:	4638      	mov	r0, r7
 80103da:	f7ff ffa5 	bl	8010328 <sbrk_aligned>
 80103de:	3001      	adds	r0, #1
 80103e0:	d02b      	beq.n	801043a <_malloc_r+0xd2>
 80103e2:	6823      	ldr	r3, [r4, #0]
 80103e4:	442b      	add	r3, r5
 80103e6:	6023      	str	r3, [r4, #0]
 80103e8:	e00e      	b.n	8010408 <_malloc_r+0xa0>
 80103ea:	6822      	ldr	r2, [r4, #0]
 80103ec:	1b52      	subs	r2, r2, r5
 80103ee:	d41e      	bmi.n	801042e <_malloc_r+0xc6>
 80103f0:	2a0b      	cmp	r2, #11
 80103f2:	d916      	bls.n	8010422 <_malloc_r+0xba>
 80103f4:	1961      	adds	r1, r4, r5
 80103f6:	42a3      	cmp	r3, r4
 80103f8:	6025      	str	r5, [r4, #0]
 80103fa:	bf18      	it	ne
 80103fc:	6059      	strne	r1, [r3, #4]
 80103fe:	6863      	ldr	r3, [r4, #4]
 8010400:	bf08      	it	eq
 8010402:	6031      	streq	r1, [r6, #0]
 8010404:	5162      	str	r2, [r4, r5]
 8010406:	604b      	str	r3, [r1, #4]
 8010408:	4638      	mov	r0, r7
 801040a:	f104 060b 	add.w	r6, r4, #11
 801040e:	f000 fa05 	bl	801081c <__malloc_unlock>
 8010412:	f026 0607 	bic.w	r6, r6, #7
 8010416:	1d23      	adds	r3, r4, #4
 8010418:	1af2      	subs	r2, r6, r3
 801041a:	d0b6      	beq.n	801038a <_malloc_r+0x22>
 801041c:	1b9b      	subs	r3, r3, r6
 801041e:	50a3      	str	r3, [r4, r2]
 8010420:	e7b3      	b.n	801038a <_malloc_r+0x22>
 8010422:	6862      	ldr	r2, [r4, #4]
 8010424:	42a3      	cmp	r3, r4
 8010426:	bf0c      	ite	eq
 8010428:	6032      	streq	r2, [r6, #0]
 801042a:	605a      	strne	r2, [r3, #4]
 801042c:	e7ec      	b.n	8010408 <_malloc_r+0xa0>
 801042e:	4623      	mov	r3, r4
 8010430:	6864      	ldr	r4, [r4, #4]
 8010432:	e7b2      	b.n	801039a <_malloc_r+0x32>
 8010434:	4634      	mov	r4, r6
 8010436:	6876      	ldr	r6, [r6, #4]
 8010438:	e7b9      	b.n	80103ae <_malloc_r+0x46>
 801043a:	230c      	movs	r3, #12
 801043c:	603b      	str	r3, [r7, #0]
 801043e:	4638      	mov	r0, r7
 8010440:	f000 f9ec 	bl	801081c <__malloc_unlock>
 8010444:	e7a1      	b.n	801038a <_malloc_r+0x22>
 8010446:	6025      	str	r5, [r4, #0]
 8010448:	e7de      	b.n	8010408 <_malloc_r+0xa0>
 801044a:	bf00      	nop
 801044c:	20001134 	.word	0x20001134

08010450 <__ssputs_r>:
 8010450:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010454:	688e      	ldr	r6, [r1, #8]
 8010456:	429e      	cmp	r6, r3
 8010458:	4682      	mov	sl, r0
 801045a:	460c      	mov	r4, r1
 801045c:	4690      	mov	r8, r2
 801045e:	461f      	mov	r7, r3
 8010460:	d838      	bhi.n	80104d4 <__ssputs_r+0x84>
 8010462:	898a      	ldrh	r2, [r1, #12]
 8010464:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010468:	d032      	beq.n	80104d0 <__ssputs_r+0x80>
 801046a:	6825      	ldr	r5, [r4, #0]
 801046c:	6909      	ldr	r1, [r1, #16]
 801046e:	eba5 0901 	sub.w	r9, r5, r1
 8010472:	6965      	ldr	r5, [r4, #20]
 8010474:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010478:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801047c:	3301      	adds	r3, #1
 801047e:	444b      	add	r3, r9
 8010480:	106d      	asrs	r5, r5, #1
 8010482:	429d      	cmp	r5, r3
 8010484:	bf38      	it	cc
 8010486:	461d      	movcc	r5, r3
 8010488:	0553      	lsls	r3, r2, #21
 801048a:	d531      	bpl.n	80104f0 <__ssputs_r+0xa0>
 801048c:	4629      	mov	r1, r5
 801048e:	f7ff ff6b 	bl	8010368 <_malloc_r>
 8010492:	4606      	mov	r6, r0
 8010494:	b950      	cbnz	r0, 80104ac <__ssputs_r+0x5c>
 8010496:	230c      	movs	r3, #12
 8010498:	f8ca 3000 	str.w	r3, [sl]
 801049c:	89a3      	ldrh	r3, [r4, #12]
 801049e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80104a2:	81a3      	strh	r3, [r4, #12]
 80104a4:	f04f 30ff 	mov.w	r0, #4294967295
 80104a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80104ac:	6921      	ldr	r1, [r4, #16]
 80104ae:	464a      	mov	r2, r9
 80104b0:	f7fc faaa 	bl	800ca08 <memcpy>
 80104b4:	89a3      	ldrh	r3, [r4, #12]
 80104b6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80104ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80104be:	81a3      	strh	r3, [r4, #12]
 80104c0:	6126      	str	r6, [r4, #16]
 80104c2:	6165      	str	r5, [r4, #20]
 80104c4:	444e      	add	r6, r9
 80104c6:	eba5 0509 	sub.w	r5, r5, r9
 80104ca:	6026      	str	r6, [r4, #0]
 80104cc:	60a5      	str	r5, [r4, #8]
 80104ce:	463e      	mov	r6, r7
 80104d0:	42be      	cmp	r6, r7
 80104d2:	d900      	bls.n	80104d6 <__ssputs_r+0x86>
 80104d4:	463e      	mov	r6, r7
 80104d6:	6820      	ldr	r0, [r4, #0]
 80104d8:	4632      	mov	r2, r6
 80104da:	4641      	mov	r1, r8
 80104dc:	f000 f97e 	bl	80107dc <memmove>
 80104e0:	68a3      	ldr	r3, [r4, #8]
 80104e2:	1b9b      	subs	r3, r3, r6
 80104e4:	60a3      	str	r3, [r4, #8]
 80104e6:	6823      	ldr	r3, [r4, #0]
 80104e8:	4433      	add	r3, r6
 80104ea:	6023      	str	r3, [r4, #0]
 80104ec:	2000      	movs	r0, #0
 80104ee:	e7db      	b.n	80104a8 <__ssputs_r+0x58>
 80104f0:	462a      	mov	r2, r5
 80104f2:	f000 f999 	bl	8010828 <_realloc_r>
 80104f6:	4606      	mov	r6, r0
 80104f8:	2800      	cmp	r0, #0
 80104fa:	d1e1      	bne.n	80104c0 <__ssputs_r+0x70>
 80104fc:	6921      	ldr	r1, [r4, #16]
 80104fe:	4650      	mov	r0, sl
 8010500:	f7ff fec6 	bl	8010290 <_free_r>
 8010504:	e7c7      	b.n	8010496 <__ssputs_r+0x46>
	...

08010508 <_svfiprintf_r>:
 8010508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801050c:	4698      	mov	r8, r3
 801050e:	898b      	ldrh	r3, [r1, #12]
 8010510:	061b      	lsls	r3, r3, #24
 8010512:	b09d      	sub	sp, #116	; 0x74
 8010514:	4607      	mov	r7, r0
 8010516:	460d      	mov	r5, r1
 8010518:	4614      	mov	r4, r2
 801051a:	d50e      	bpl.n	801053a <_svfiprintf_r+0x32>
 801051c:	690b      	ldr	r3, [r1, #16]
 801051e:	b963      	cbnz	r3, 801053a <_svfiprintf_r+0x32>
 8010520:	2140      	movs	r1, #64	; 0x40
 8010522:	f7ff ff21 	bl	8010368 <_malloc_r>
 8010526:	6028      	str	r0, [r5, #0]
 8010528:	6128      	str	r0, [r5, #16]
 801052a:	b920      	cbnz	r0, 8010536 <_svfiprintf_r+0x2e>
 801052c:	230c      	movs	r3, #12
 801052e:	603b      	str	r3, [r7, #0]
 8010530:	f04f 30ff 	mov.w	r0, #4294967295
 8010534:	e0d1      	b.n	80106da <_svfiprintf_r+0x1d2>
 8010536:	2340      	movs	r3, #64	; 0x40
 8010538:	616b      	str	r3, [r5, #20]
 801053a:	2300      	movs	r3, #0
 801053c:	9309      	str	r3, [sp, #36]	; 0x24
 801053e:	2320      	movs	r3, #32
 8010540:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010544:	f8cd 800c 	str.w	r8, [sp, #12]
 8010548:	2330      	movs	r3, #48	; 0x30
 801054a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80106f4 <_svfiprintf_r+0x1ec>
 801054e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010552:	f04f 0901 	mov.w	r9, #1
 8010556:	4623      	mov	r3, r4
 8010558:	469a      	mov	sl, r3
 801055a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801055e:	b10a      	cbz	r2, 8010564 <_svfiprintf_r+0x5c>
 8010560:	2a25      	cmp	r2, #37	; 0x25
 8010562:	d1f9      	bne.n	8010558 <_svfiprintf_r+0x50>
 8010564:	ebba 0b04 	subs.w	fp, sl, r4
 8010568:	d00b      	beq.n	8010582 <_svfiprintf_r+0x7a>
 801056a:	465b      	mov	r3, fp
 801056c:	4622      	mov	r2, r4
 801056e:	4629      	mov	r1, r5
 8010570:	4638      	mov	r0, r7
 8010572:	f7ff ff6d 	bl	8010450 <__ssputs_r>
 8010576:	3001      	adds	r0, #1
 8010578:	f000 80aa 	beq.w	80106d0 <_svfiprintf_r+0x1c8>
 801057c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801057e:	445a      	add	r2, fp
 8010580:	9209      	str	r2, [sp, #36]	; 0x24
 8010582:	f89a 3000 	ldrb.w	r3, [sl]
 8010586:	2b00      	cmp	r3, #0
 8010588:	f000 80a2 	beq.w	80106d0 <_svfiprintf_r+0x1c8>
 801058c:	2300      	movs	r3, #0
 801058e:	f04f 32ff 	mov.w	r2, #4294967295
 8010592:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010596:	f10a 0a01 	add.w	sl, sl, #1
 801059a:	9304      	str	r3, [sp, #16]
 801059c:	9307      	str	r3, [sp, #28]
 801059e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80105a2:	931a      	str	r3, [sp, #104]	; 0x68
 80105a4:	4654      	mov	r4, sl
 80105a6:	2205      	movs	r2, #5
 80105a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105ac:	4851      	ldr	r0, [pc, #324]	; (80106f4 <_svfiprintf_r+0x1ec>)
 80105ae:	f7ef fe1f 	bl	80001f0 <memchr>
 80105b2:	9a04      	ldr	r2, [sp, #16]
 80105b4:	b9d8      	cbnz	r0, 80105ee <_svfiprintf_r+0xe6>
 80105b6:	06d0      	lsls	r0, r2, #27
 80105b8:	bf44      	itt	mi
 80105ba:	2320      	movmi	r3, #32
 80105bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105c0:	0711      	lsls	r1, r2, #28
 80105c2:	bf44      	itt	mi
 80105c4:	232b      	movmi	r3, #43	; 0x2b
 80105c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105ca:	f89a 3000 	ldrb.w	r3, [sl]
 80105ce:	2b2a      	cmp	r3, #42	; 0x2a
 80105d0:	d015      	beq.n	80105fe <_svfiprintf_r+0xf6>
 80105d2:	9a07      	ldr	r2, [sp, #28]
 80105d4:	4654      	mov	r4, sl
 80105d6:	2000      	movs	r0, #0
 80105d8:	f04f 0c0a 	mov.w	ip, #10
 80105dc:	4621      	mov	r1, r4
 80105de:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105e2:	3b30      	subs	r3, #48	; 0x30
 80105e4:	2b09      	cmp	r3, #9
 80105e6:	d94e      	bls.n	8010686 <_svfiprintf_r+0x17e>
 80105e8:	b1b0      	cbz	r0, 8010618 <_svfiprintf_r+0x110>
 80105ea:	9207      	str	r2, [sp, #28]
 80105ec:	e014      	b.n	8010618 <_svfiprintf_r+0x110>
 80105ee:	eba0 0308 	sub.w	r3, r0, r8
 80105f2:	fa09 f303 	lsl.w	r3, r9, r3
 80105f6:	4313      	orrs	r3, r2
 80105f8:	9304      	str	r3, [sp, #16]
 80105fa:	46a2      	mov	sl, r4
 80105fc:	e7d2      	b.n	80105a4 <_svfiprintf_r+0x9c>
 80105fe:	9b03      	ldr	r3, [sp, #12]
 8010600:	1d19      	adds	r1, r3, #4
 8010602:	681b      	ldr	r3, [r3, #0]
 8010604:	9103      	str	r1, [sp, #12]
 8010606:	2b00      	cmp	r3, #0
 8010608:	bfbb      	ittet	lt
 801060a:	425b      	neglt	r3, r3
 801060c:	f042 0202 	orrlt.w	r2, r2, #2
 8010610:	9307      	strge	r3, [sp, #28]
 8010612:	9307      	strlt	r3, [sp, #28]
 8010614:	bfb8      	it	lt
 8010616:	9204      	strlt	r2, [sp, #16]
 8010618:	7823      	ldrb	r3, [r4, #0]
 801061a:	2b2e      	cmp	r3, #46	; 0x2e
 801061c:	d10c      	bne.n	8010638 <_svfiprintf_r+0x130>
 801061e:	7863      	ldrb	r3, [r4, #1]
 8010620:	2b2a      	cmp	r3, #42	; 0x2a
 8010622:	d135      	bne.n	8010690 <_svfiprintf_r+0x188>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	1d1a      	adds	r2, r3, #4
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	9203      	str	r2, [sp, #12]
 801062c:	2b00      	cmp	r3, #0
 801062e:	bfb8      	it	lt
 8010630:	f04f 33ff 	movlt.w	r3, #4294967295
 8010634:	3402      	adds	r4, #2
 8010636:	9305      	str	r3, [sp, #20]
 8010638:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010704 <_svfiprintf_r+0x1fc>
 801063c:	7821      	ldrb	r1, [r4, #0]
 801063e:	2203      	movs	r2, #3
 8010640:	4650      	mov	r0, sl
 8010642:	f7ef fdd5 	bl	80001f0 <memchr>
 8010646:	b140      	cbz	r0, 801065a <_svfiprintf_r+0x152>
 8010648:	2340      	movs	r3, #64	; 0x40
 801064a:	eba0 000a 	sub.w	r0, r0, sl
 801064e:	fa03 f000 	lsl.w	r0, r3, r0
 8010652:	9b04      	ldr	r3, [sp, #16]
 8010654:	4303      	orrs	r3, r0
 8010656:	3401      	adds	r4, #1
 8010658:	9304      	str	r3, [sp, #16]
 801065a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801065e:	4826      	ldr	r0, [pc, #152]	; (80106f8 <_svfiprintf_r+0x1f0>)
 8010660:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010664:	2206      	movs	r2, #6
 8010666:	f7ef fdc3 	bl	80001f0 <memchr>
 801066a:	2800      	cmp	r0, #0
 801066c:	d038      	beq.n	80106e0 <_svfiprintf_r+0x1d8>
 801066e:	4b23      	ldr	r3, [pc, #140]	; (80106fc <_svfiprintf_r+0x1f4>)
 8010670:	bb1b      	cbnz	r3, 80106ba <_svfiprintf_r+0x1b2>
 8010672:	9b03      	ldr	r3, [sp, #12]
 8010674:	3307      	adds	r3, #7
 8010676:	f023 0307 	bic.w	r3, r3, #7
 801067a:	3308      	adds	r3, #8
 801067c:	9303      	str	r3, [sp, #12]
 801067e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010680:	4433      	add	r3, r6
 8010682:	9309      	str	r3, [sp, #36]	; 0x24
 8010684:	e767      	b.n	8010556 <_svfiprintf_r+0x4e>
 8010686:	fb0c 3202 	mla	r2, ip, r2, r3
 801068a:	460c      	mov	r4, r1
 801068c:	2001      	movs	r0, #1
 801068e:	e7a5      	b.n	80105dc <_svfiprintf_r+0xd4>
 8010690:	2300      	movs	r3, #0
 8010692:	3401      	adds	r4, #1
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	4619      	mov	r1, r3
 8010698:	f04f 0c0a 	mov.w	ip, #10
 801069c:	4620      	mov	r0, r4
 801069e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106a2:	3a30      	subs	r2, #48	; 0x30
 80106a4:	2a09      	cmp	r2, #9
 80106a6:	d903      	bls.n	80106b0 <_svfiprintf_r+0x1a8>
 80106a8:	2b00      	cmp	r3, #0
 80106aa:	d0c5      	beq.n	8010638 <_svfiprintf_r+0x130>
 80106ac:	9105      	str	r1, [sp, #20]
 80106ae:	e7c3      	b.n	8010638 <_svfiprintf_r+0x130>
 80106b0:	fb0c 2101 	mla	r1, ip, r1, r2
 80106b4:	4604      	mov	r4, r0
 80106b6:	2301      	movs	r3, #1
 80106b8:	e7f0      	b.n	801069c <_svfiprintf_r+0x194>
 80106ba:	ab03      	add	r3, sp, #12
 80106bc:	9300      	str	r3, [sp, #0]
 80106be:	462a      	mov	r2, r5
 80106c0:	4b0f      	ldr	r3, [pc, #60]	; (8010700 <_svfiprintf_r+0x1f8>)
 80106c2:	a904      	add	r1, sp, #16
 80106c4:	4638      	mov	r0, r7
 80106c6:	f7fc fa55 	bl	800cb74 <_printf_float>
 80106ca:	1c42      	adds	r2, r0, #1
 80106cc:	4606      	mov	r6, r0
 80106ce:	d1d6      	bne.n	801067e <_svfiprintf_r+0x176>
 80106d0:	89ab      	ldrh	r3, [r5, #12]
 80106d2:	065b      	lsls	r3, r3, #25
 80106d4:	f53f af2c 	bmi.w	8010530 <_svfiprintf_r+0x28>
 80106d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106da:	b01d      	add	sp, #116	; 0x74
 80106dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106e0:	ab03      	add	r3, sp, #12
 80106e2:	9300      	str	r3, [sp, #0]
 80106e4:	462a      	mov	r2, r5
 80106e6:	4b06      	ldr	r3, [pc, #24]	; (8010700 <_svfiprintf_r+0x1f8>)
 80106e8:	a904      	add	r1, sp, #16
 80106ea:	4638      	mov	r0, r7
 80106ec:	f7fc fce6 	bl	800d0bc <_printf_i>
 80106f0:	e7eb      	b.n	80106ca <_svfiprintf_r+0x1c2>
 80106f2:	bf00      	nop
 80106f4:	080119d4 	.word	0x080119d4
 80106f8:	080119de 	.word	0x080119de
 80106fc:	0800cb75 	.word	0x0800cb75
 8010700:	08010451 	.word	0x08010451
 8010704:	080119da 	.word	0x080119da

08010708 <nan>:
 8010708:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8010710 <nan+0x8>
 801070c:	4770      	bx	lr
 801070e:	bf00      	nop
 8010710:	00000000 	.word	0x00000000
 8010714:	7ff80000 	.word	0x7ff80000

08010718 <_sbrk_r>:
 8010718:	b538      	push	{r3, r4, r5, lr}
 801071a:	4d06      	ldr	r5, [pc, #24]	; (8010734 <_sbrk_r+0x1c>)
 801071c:	2300      	movs	r3, #0
 801071e:	4604      	mov	r4, r0
 8010720:	4608      	mov	r0, r1
 8010722:	602b      	str	r3, [r5, #0]
 8010724:	f7f4 fe76 	bl	8005414 <_sbrk>
 8010728:	1c43      	adds	r3, r0, #1
 801072a:	d102      	bne.n	8010732 <_sbrk_r+0x1a>
 801072c:	682b      	ldr	r3, [r5, #0]
 801072e:	b103      	cbz	r3, 8010732 <_sbrk_r+0x1a>
 8010730:	6023      	str	r3, [r4, #0]
 8010732:	bd38      	pop	{r3, r4, r5, pc}
 8010734:	2000113c 	.word	0x2000113c

08010738 <strncmp>:
 8010738:	b510      	push	{r4, lr}
 801073a:	b17a      	cbz	r2, 801075c <strncmp+0x24>
 801073c:	4603      	mov	r3, r0
 801073e:	3901      	subs	r1, #1
 8010740:	1884      	adds	r4, r0, r2
 8010742:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010746:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801074a:	4290      	cmp	r0, r2
 801074c:	d101      	bne.n	8010752 <strncmp+0x1a>
 801074e:	42a3      	cmp	r3, r4
 8010750:	d101      	bne.n	8010756 <strncmp+0x1e>
 8010752:	1a80      	subs	r0, r0, r2
 8010754:	bd10      	pop	{r4, pc}
 8010756:	2800      	cmp	r0, #0
 8010758:	d1f3      	bne.n	8010742 <strncmp+0xa>
 801075a:	e7fa      	b.n	8010752 <strncmp+0x1a>
 801075c:	4610      	mov	r0, r2
 801075e:	e7f9      	b.n	8010754 <strncmp+0x1c>

08010760 <__ascii_wctomb>:
 8010760:	b149      	cbz	r1, 8010776 <__ascii_wctomb+0x16>
 8010762:	2aff      	cmp	r2, #255	; 0xff
 8010764:	bf85      	ittet	hi
 8010766:	238a      	movhi	r3, #138	; 0x8a
 8010768:	6003      	strhi	r3, [r0, #0]
 801076a:	700a      	strbls	r2, [r1, #0]
 801076c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010770:	bf98      	it	ls
 8010772:	2001      	movls	r0, #1
 8010774:	4770      	bx	lr
 8010776:	4608      	mov	r0, r1
 8010778:	4770      	bx	lr
	...

0801077c <__assert_func>:
 801077c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801077e:	4614      	mov	r4, r2
 8010780:	461a      	mov	r2, r3
 8010782:	4b09      	ldr	r3, [pc, #36]	; (80107a8 <__assert_func+0x2c>)
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	4605      	mov	r5, r0
 8010788:	68d8      	ldr	r0, [r3, #12]
 801078a:	b14c      	cbz	r4, 80107a0 <__assert_func+0x24>
 801078c:	4b07      	ldr	r3, [pc, #28]	; (80107ac <__assert_func+0x30>)
 801078e:	9100      	str	r1, [sp, #0]
 8010790:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010794:	4906      	ldr	r1, [pc, #24]	; (80107b0 <__assert_func+0x34>)
 8010796:	462b      	mov	r3, r5
 8010798:	f000 f80e 	bl	80107b8 <fiprintf>
 801079c:	f000 fa8c 	bl	8010cb8 <abort>
 80107a0:	4b04      	ldr	r3, [pc, #16]	; (80107b4 <__assert_func+0x38>)
 80107a2:	461c      	mov	r4, r3
 80107a4:	e7f3      	b.n	801078e <__assert_func+0x12>
 80107a6:	bf00      	nop
 80107a8:	20000264 	.word	0x20000264
 80107ac:	080119e5 	.word	0x080119e5
 80107b0:	080119f2 	.word	0x080119f2
 80107b4:	08011a20 	.word	0x08011a20

080107b8 <fiprintf>:
 80107b8:	b40e      	push	{r1, r2, r3}
 80107ba:	b503      	push	{r0, r1, lr}
 80107bc:	4601      	mov	r1, r0
 80107be:	ab03      	add	r3, sp, #12
 80107c0:	4805      	ldr	r0, [pc, #20]	; (80107d8 <fiprintf+0x20>)
 80107c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80107c6:	6800      	ldr	r0, [r0, #0]
 80107c8:	9301      	str	r3, [sp, #4]
 80107ca:	f000 f885 	bl	80108d8 <_vfiprintf_r>
 80107ce:	b002      	add	sp, #8
 80107d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80107d4:	b003      	add	sp, #12
 80107d6:	4770      	bx	lr
 80107d8:	20000264 	.word	0x20000264

080107dc <memmove>:
 80107dc:	4288      	cmp	r0, r1
 80107de:	b510      	push	{r4, lr}
 80107e0:	eb01 0402 	add.w	r4, r1, r2
 80107e4:	d902      	bls.n	80107ec <memmove+0x10>
 80107e6:	4284      	cmp	r4, r0
 80107e8:	4623      	mov	r3, r4
 80107ea:	d807      	bhi.n	80107fc <memmove+0x20>
 80107ec:	1e43      	subs	r3, r0, #1
 80107ee:	42a1      	cmp	r1, r4
 80107f0:	d008      	beq.n	8010804 <memmove+0x28>
 80107f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80107f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80107fa:	e7f8      	b.n	80107ee <memmove+0x12>
 80107fc:	4402      	add	r2, r0
 80107fe:	4601      	mov	r1, r0
 8010800:	428a      	cmp	r2, r1
 8010802:	d100      	bne.n	8010806 <memmove+0x2a>
 8010804:	bd10      	pop	{r4, pc}
 8010806:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801080a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801080e:	e7f7      	b.n	8010800 <memmove+0x24>

08010810 <__malloc_lock>:
 8010810:	4801      	ldr	r0, [pc, #4]	; (8010818 <__malloc_lock+0x8>)
 8010812:	f000 bc11 	b.w	8011038 <__retarget_lock_acquire_recursive>
 8010816:	bf00      	nop
 8010818:	20001140 	.word	0x20001140

0801081c <__malloc_unlock>:
 801081c:	4801      	ldr	r0, [pc, #4]	; (8010824 <__malloc_unlock+0x8>)
 801081e:	f000 bc0c 	b.w	801103a <__retarget_lock_release_recursive>
 8010822:	bf00      	nop
 8010824:	20001140 	.word	0x20001140

08010828 <_realloc_r>:
 8010828:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801082c:	4680      	mov	r8, r0
 801082e:	4614      	mov	r4, r2
 8010830:	460e      	mov	r6, r1
 8010832:	b921      	cbnz	r1, 801083e <_realloc_r+0x16>
 8010834:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010838:	4611      	mov	r1, r2
 801083a:	f7ff bd95 	b.w	8010368 <_malloc_r>
 801083e:	b92a      	cbnz	r2, 801084c <_realloc_r+0x24>
 8010840:	f7ff fd26 	bl	8010290 <_free_r>
 8010844:	4625      	mov	r5, r4
 8010846:	4628      	mov	r0, r5
 8010848:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801084c:	f000 fc5c 	bl	8011108 <_malloc_usable_size_r>
 8010850:	4284      	cmp	r4, r0
 8010852:	4607      	mov	r7, r0
 8010854:	d802      	bhi.n	801085c <_realloc_r+0x34>
 8010856:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801085a:	d812      	bhi.n	8010882 <_realloc_r+0x5a>
 801085c:	4621      	mov	r1, r4
 801085e:	4640      	mov	r0, r8
 8010860:	f7ff fd82 	bl	8010368 <_malloc_r>
 8010864:	4605      	mov	r5, r0
 8010866:	2800      	cmp	r0, #0
 8010868:	d0ed      	beq.n	8010846 <_realloc_r+0x1e>
 801086a:	42bc      	cmp	r4, r7
 801086c:	4622      	mov	r2, r4
 801086e:	4631      	mov	r1, r6
 8010870:	bf28      	it	cs
 8010872:	463a      	movcs	r2, r7
 8010874:	f7fc f8c8 	bl	800ca08 <memcpy>
 8010878:	4631      	mov	r1, r6
 801087a:	4640      	mov	r0, r8
 801087c:	f7ff fd08 	bl	8010290 <_free_r>
 8010880:	e7e1      	b.n	8010846 <_realloc_r+0x1e>
 8010882:	4635      	mov	r5, r6
 8010884:	e7df      	b.n	8010846 <_realloc_r+0x1e>

08010886 <__sfputc_r>:
 8010886:	6893      	ldr	r3, [r2, #8]
 8010888:	3b01      	subs	r3, #1
 801088a:	2b00      	cmp	r3, #0
 801088c:	b410      	push	{r4}
 801088e:	6093      	str	r3, [r2, #8]
 8010890:	da08      	bge.n	80108a4 <__sfputc_r+0x1e>
 8010892:	6994      	ldr	r4, [r2, #24]
 8010894:	42a3      	cmp	r3, r4
 8010896:	db01      	blt.n	801089c <__sfputc_r+0x16>
 8010898:	290a      	cmp	r1, #10
 801089a:	d103      	bne.n	80108a4 <__sfputc_r+0x1e>
 801089c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108a0:	f000 b94a 	b.w	8010b38 <__swbuf_r>
 80108a4:	6813      	ldr	r3, [r2, #0]
 80108a6:	1c58      	adds	r0, r3, #1
 80108a8:	6010      	str	r0, [r2, #0]
 80108aa:	7019      	strb	r1, [r3, #0]
 80108ac:	4608      	mov	r0, r1
 80108ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80108b2:	4770      	bx	lr

080108b4 <__sfputs_r>:
 80108b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108b6:	4606      	mov	r6, r0
 80108b8:	460f      	mov	r7, r1
 80108ba:	4614      	mov	r4, r2
 80108bc:	18d5      	adds	r5, r2, r3
 80108be:	42ac      	cmp	r4, r5
 80108c0:	d101      	bne.n	80108c6 <__sfputs_r+0x12>
 80108c2:	2000      	movs	r0, #0
 80108c4:	e007      	b.n	80108d6 <__sfputs_r+0x22>
 80108c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80108ca:	463a      	mov	r2, r7
 80108cc:	4630      	mov	r0, r6
 80108ce:	f7ff ffda 	bl	8010886 <__sfputc_r>
 80108d2:	1c43      	adds	r3, r0, #1
 80108d4:	d1f3      	bne.n	80108be <__sfputs_r+0xa>
 80108d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080108d8 <_vfiprintf_r>:
 80108d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108dc:	460d      	mov	r5, r1
 80108de:	b09d      	sub	sp, #116	; 0x74
 80108e0:	4614      	mov	r4, r2
 80108e2:	4698      	mov	r8, r3
 80108e4:	4606      	mov	r6, r0
 80108e6:	b118      	cbz	r0, 80108f0 <_vfiprintf_r+0x18>
 80108e8:	6983      	ldr	r3, [r0, #24]
 80108ea:	b90b      	cbnz	r3, 80108f0 <_vfiprintf_r+0x18>
 80108ec:	f000 fb06 	bl	8010efc <__sinit>
 80108f0:	4b89      	ldr	r3, [pc, #548]	; (8010b18 <_vfiprintf_r+0x240>)
 80108f2:	429d      	cmp	r5, r3
 80108f4:	d11b      	bne.n	801092e <_vfiprintf_r+0x56>
 80108f6:	6875      	ldr	r5, [r6, #4]
 80108f8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80108fa:	07d9      	lsls	r1, r3, #31
 80108fc:	d405      	bmi.n	801090a <_vfiprintf_r+0x32>
 80108fe:	89ab      	ldrh	r3, [r5, #12]
 8010900:	059a      	lsls	r2, r3, #22
 8010902:	d402      	bmi.n	801090a <_vfiprintf_r+0x32>
 8010904:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010906:	f000 fb97 	bl	8011038 <__retarget_lock_acquire_recursive>
 801090a:	89ab      	ldrh	r3, [r5, #12]
 801090c:	071b      	lsls	r3, r3, #28
 801090e:	d501      	bpl.n	8010914 <_vfiprintf_r+0x3c>
 8010910:	692b      	ldr	r3, [r5, #16]
 8010912:	b9eb      	cbnz	r3, 8010950 <_vfiprintf_r+0x78>
 8010914:	4629      	mov	r1, r5
 8010916:	4630      	mov	r0, r6
 8010918:	f000 f960 	bl	8010bdc <__swsetup_r>
 801091c:	b1c0      	cbz	r0, 8010950 <_vfiprintf_r+0x78>
 801091e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010920:	07dc      	lsls	r4, r3, #31
 8010922:	d50e      	bpl.n	8010942 <_vfiprintf_r+0x6a>
 8010924:	f04f 30ff 	mov.w	r0, #4294967295
 8010928:	b01d      	add	sp, #116	; 0x74
 801092a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801092e:	4b7b      	ldr	r3, [pc, #492]	; (8010b1c <_vfiprintf_r+0x244>)
 8010930:	429d      	cmp	r5, r3
 8010932:	d101      	bne.n	8010938 <_vfiprintf_r+0x60>
 8010934:	68b5      	ldr	r5, [r6, #8]
 8010936:	e7df      	b.n	80108f8 <_vfiprintf_r+0x20>
 8010938:	4b79      	ldr	r3, [pc, #484]	; (8010b20 <_vfiprintf_r+0x248>)
 801093a:	429d      	cmp	r5, r3
 801093c:	bf08      	it	eq
 801093e:	68f5      	ldreq	r5, [r6, #12]
 8010940:	e7da      	b.n	80108f8 <_vfiprintf_r+0x20>
 8010942:	89ab      	ldrh	r3, [r5, #12]
 8010944:	0598      	lsls	r0, r3, #22
 8010946:	d4ed      	bmi.n	8010924 <_vfiprintf_r+0x4c>
 8010948:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801094a:	f000 fb76 	bl	801103a <__retarget_lock_release_recursive>
 801094e:	e7e9      	b.n	8010924 <_vfiprintf_r+0x4c>
 8010950:	2300      	movs	r3, #0
 8010952:	9309      	str	r3, [sp, #36]	; 0x24
 8010954:	2320      	movs	r3, #32
 8010956:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801095a:	f8cd 800c 	str.w	r8, [sp, #12]
 801095e:	2330      	movs	r3, #48	; 0x30
 8010960:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8010b24 <_vfiprintf_r+0x24c>
 8010964:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010968:	f04f 0901 	mov.w	r9, #1
 801096c:	4623      	mov	r3, r4
 801096e:	469a      	mov	sl, r3
 8010970:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010974:	b10a      	cbz	r2, 801097a <_vfiprintf_r+0xa2>
 8010976:	2a25      	cmp	r2, #37	; 0x25
 8010978:	d1f9      	bne.n	801096e <_vfiprintf_r+0x96>
 801097a:	ebba 0b04 	subs.w	fp, sl, r4
 801097e:	d00b      	beq.n	8010998 <_vfiprintf_r+0xc0>
 8010980:	465b      	mov	r3, fp
 8010982:	4622      	mov	r2, r4
 8010984:	4629      	mov	r1, r5
 8010986:	4630      	mov	r0, r6
 8010988:	f7ff ff94 	bl	80108b4 <__sfputs_r>
 801098c:	3001      	adds	r0, #1
 801098e:	f000 80aa 	beq.w	8010ae6 <_vfiprintf_r+0x20e>
 8010992:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010994:	445a      	add	r2, fp
 8010996:	9209      	str	r2, [sp, #36]	; 0x24
 8010998:	f89a 3000 	ldrb.w	r3, [sl]
 801099c:	2b00      	cmp	r3, #0
 801099e:	f000 80a2 	beq.w	8010ae6 <_vfiprintf_r+0x20e>
 80109a2:	2300      	movs	r3, #0
 80109a4:	f04f 32ff 	mov.w	r2, #4294967295
 80109a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80109ac:	f10a 0a01 	add.w	sl, sl, #1
 80109b0:	9304      	str	r3, [sp, #16]
 80109b2:	9307      	str	r3, [sp, #28]
 80109b4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80109b8:	931a      	str	r3, [sp, #104]	; 0x68
 80109ba:	4654      	mov	r4, sl
 80109bc:	2205      	movs	r2, #5
 80109be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80109c2:	4858      	ldr	r0, [pc, #352]	; (8010b24 <_vfiprintf_r+0x24c>)
 80109c4:	f7ef fc14 	bl	80001f0 <memchr>
 80109c8:	9a04      	ldr	r2, [sp, #16]
 80109ca:	b9d8      	cbnz	r0, 8010a04 <_vfiprintf_r+0x12c>
 80109cc:	06d1      	lsls	r1, r2, #27
 80109ce:	bf44      	itt	mi
 80109d0:	2320      	movmi	r3, #32
 80109d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109d6:	0713      	lsls	r3, r2, #28
 80109d8:	bf44      	itt	mi
 80109da:	232b      	movmi	r3, #43	; 0x2b
 80109dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80109e0:	f89a 3000 	ldrb.w	r3, [sl]
 80109e4:	2b2a      	cmp	r3, #42	; 0x2a
 80109e6:	d015      	beq.n	8010a14 <_vfiprintf_r+0x13c>
 80109e8:	9a07      	ldr	r2, [sp, #28]
 80109ea:	4654      	mov	r4, sl
 80109ec:	2000      	movs	r0, #0
 80109ee:	f04f 0c0a 	mov.w	ip, #10
 80109f2:	4621      	mov	r1, r4
 80109f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80109f8:	3b30      	subs	r3, #48	; 0x30
 80109fa:	2b09      	cmp	r3, #9
 80109fc:	d94e      	bls.n	8010a9c <_vfiprintf_r+0x1c4>
 80109fe:	b1b0      	cbz	r0, 8010a2e <_vfiprintf_r+0x156>
 8010a00:	9207      	str	r2, [sp, #28]
 8010a02:	e014      	b.n	8010a2e <_vfiprintf_r+0x156>
 8010a04:	eba0 0308 	sub.w	r3, r0, r8
 8010a08:	fa09 f303 	lsl.w	r3, r9, r3
 8010a0c:	4313      	orrs	r3, r2
 8010a0e:	9304      	str	r3, [sp, #16]
 8010a10:	46a2      	mov	sl, r4
 8010a12:	e7d2      	b.n	80109ba <_vfiprintf_r+0xe2>
 8010a14:	9b03      	ldr	r3, [sp, #12]
 8010a16:	1d19      	adds	r1, r3, #4
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	9103      	str	r1, [sp, #12]
 8010a1c:	2b00      	cmp	r3, #0
 8010a1e:	bfbb      	ittet	lt
 8010a20:	425b      	neglt	r3, r3
 8010a22:	f042 0202 	orrlt.w	r2, r2, #2
 8010a26:	9307      	strge	r3, [sp, #28]
 8010a28:	9307      	strlt	r3, [sp, #28]
 8010a2a:	bfb8      	it	lt
 8010a2c:	9204      	strlt	r2, [sp, #16]
 8010a2e:	7823      	ldrb	r3, [r4, #0]
 8010a30:	2b2e      	cmp	r3, #46	; 0x2e
 8010a32:	d10c      	bne.n	8010a4e <_vfiprintf_r+0x176>
 8010a34:	7863      	ldrb	r3, [r4, #1]
 8010a36:	2b2a      	cmp	r3, #42	; 0x2a
 8010a38:	d135      	bne.n	8010aa6 <_vfiprintf_r+0x1ce>
 8010a3a:	9b03      	ldr	r3, [sp, #12]
 8010a3c:	1d1a      	adds	r2, r3, #4
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	9203      	str	r2, [sp, #12]
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	bfb8      	it	lt
 8010a46:	f04f 33ff 	movlt.w	r3, #4294967295
 8010a4a:	3402      	adds	r4, #2
 8010a4c:	9305      	str	r3, [sp, #20]
 8010a4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8010b34 <_vfiprintf_r+0x25c>
 8010a52:	7821      	ldrb	r1, [r4, #0]
 8010a54:	2203      	movs	r2, #3
 8010a56:	4650      	mov	r0, sl
 8010a58:	f7ef fbca 	bl	80001f0 <memchr>
 8010a5c:	b140      	cbz	r0, 8010a70 <_vfiprintf_r+0x198>
 8010a5e:	2340      	movs	r3, #64	; 0x40
 8010a60:	eba0 000a 	sub.w	r0, r0, sl
 8010a64:	fa03 f000 	lsl.w	r0, r3, r0
 8010a68:	9b04      	ldr	r3, [sp, #16]
 8010a6a:	4303      	orrs	r3, r0
 8010a6c:	3401      	adds	r4, #1
 8010a6e:	9304      	str	r3, [sp, #16]
 8010a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010a74:	482c      	ldr	r0, [pc, #176]	; (8010b28 <_vfiprintf_r+0x250>)
 8010a76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010a7a:	2206      	movs	r2, #6
 8010a7c:	f7ef fbb8 	bl	80001f0 <memchr>
 8010a80:	2800      	cmp	r0, #0
 8010a82:	d03f      	beq.n	8010b04 <_vfiprintf_r+0x22c>
 8010a84:	4b29      	ldr	r3, [pc, #164]	; (8010b2c <_vfiprintf_r+0x254>)
 8010a86:	bb1b      	cbnz	r3, 8010ad0 <_vfiprintf_r+0x1f8>
 8010a88:	9b03      	ldr	r3, [sp, #12]
 8010a8a:	3307      	adds	r3, #7
 8010a8c:	f023 0307 	bic.w	r3, r3, #7
 8010a90:	3308      	adds	r3, #8
 8010a92:	9303      	str	r3, [sp, #12]
 8010a94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010a96:	443b      	add	r3, r7
 8010a98:	9309      	str	r3, [sp, #36]	; 0x24
 8010a9a:	e767      	b.n	801096c <_vfiprintf_r+0x94>
 8010a9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010aa0:	460c      	mov	r4, r1
 8010aa2:	2001      	movs	r0, #1
 8010aa4:	e7a5      	b.n	80109f2 <_vfiprintf_r+0x11a>
 8010aa6:	2300      	movs	r3, #0
 8010aa8:	3401      	adds	r4, #1
 8010aaa:	9305      	str	r3, [sp, #20]
 8010aac:	4619      	mov	r1, r3
 8010aae:	f04f 0c0a 	mov.w	ip, #10
 8010ab2:	4620      	mov	r0, r4
 8010ab4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010ab8:	3a30      	subs	r2, #48	; 0x30
 8010aba:	2a09      	cmp	r2, #9
 8010abc:	d903      	bls.n	8010ac6 <_vfiprintf_r+0x1ee>
 8010abe:	2b00      	cmp	r3, #0
 8010ac0:	d0c5      	beq.n	8010a4e <_vfiprintf_r+0x176>
 8010ac2:	9105      	str	r1, [sp, #20]
 8010ac4:	e7c3      	b.n	8010a4e <_vfiprintf_r+0x176>
 8010ac6:	fb0c 2101 	mla	r1, ip, r1, r2
 8010aca:	4604      	mov	r4, r0
 8010acc:	2301      	movs	r3, #1
 8010ace:	e7f0      	b.n	8010ab2 <_vfiprintf_r+0x1da>
 8010ad0:	ab03      	add	r3, sp, #12
 8010ad2:	9300      	str	r3, [sp, #0]
 8010ad4:	462a      	mov	r2, r5
 8010ad6:	4b16      	ldr	r3, [pc, #88]	; (8010b30 <_vfiprintf_r+0x258>)
 8010ad8:	a904      	add	r1, sp, #16
 8010ada:	4630      	mov	r0, r6
 8010adc:	f7fc f84a 	bl	800cb74 <_printf_float>
 8010ae0:	4607      	mov	r7, r0
 8010ae2:	1c78      	adds	r0, r7, #1
 8010ae4:	d1d6      	bne.n	8010a94 <_vfiprintf_r+0x1bc>
 8010ae6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8010ae8:	07d9      	lsls	r1, r3, #31
 8010aea:	d405      	bmi.n	8010af8 <_vfiprintf_r+0x220>
 8010aec:	89ab      	ldrh	r3, [r5, #12]
 8010aee:	059a      	lsls	r2, r3, #22
 8010af0:	d402      	bmi.n	8010af8 <_vfiprintf_r+0x220>
 8010af2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8010af4:	f000 faa1 	bl	801103a <__retarget_lock_release_recursive>
 8010af8:	89ab      	ldrh	r3, [r5, #12]
 8010afa:	065b      	lsls	r3, r3, #25
 8010afc:	f53f af12 	bmi.w	8010924 <_vfiprintf_r+0x4c>
 8010b00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010b02:	e711      	b.n	8010928 <_vfiprintf_r+0x50>
 8010b04:	ab03      	add	r3, sp, #12
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	462a      	mov	r2, r5
 8010b0a:	4b09      	ldr	r3, [pc, #36]	; (8010b30 <_vfiprintf_r+0x258>)
 8010b0c:	a904      	add	r1, sp, #16
 8010b0e:	4630      	mov	r0, r6
 8010b10:	f7fc fad4 	bl	800d0bc <_printf_i>
 8010b14:	e7e4      	b.n	8010ae0 <_vfiprintf_r+0x208>
 8010b16:	bf00      	nop
 8010b18:	08011a44 	.word	0x08011a44
 8010b1c:	08011a64 	.word	0x08011a64
 8010b20:	08011a24 	.word	0x08011a24
 8010b24:	080119d4 	.word	0x080119d4
 8010b28:	080119de 	.word	0x080119de
 8010b2c:	0800cb75 	.word	0x0800cb75
 8010b30:	080108b5 	.word	0x080108b5
 8010b34:	080119da 	.word	0x080119da

08010b38 <__swbuf_r>:
 8010b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b3a:	460e      	mov	r6, r1
 8010b3c:	4614      	mov	r4, r2
 8010b3e:	4605      	mov	r5, r0
 8010b40:	b118      	cbz	r0, 8010b4a <__swbuf_r+0x12>
 8010b42:	6983      	ldr	r3, [r0, #24]
 8010b44:	b90b      	cbnz	r3, 8010b4a <__swbuf_r+0x12>
 8010b46:	f000 f9d9 	bl	8010efc <__sinit>
 8010b4a:	4b21      	ldr	r3, [pc, #132]	; (8010bd0 <__swbuf_r+0x98>)
 8010b4c:	429c      	cmp	r4, r3
 8010b4e:	d12b      	bne.n	8010ba8 <__swbuf_r+0x70>
 8010b50:	686c      	ldr	r4, [r5, #4]
 8010b52:	69a3      	ldr	r3, [r4, #24]
 8010b54:	60a3      	str	r3, [r4, #8]
 8010b56:	89a3      	ldrh	r3, [r4, #12]
 8010b58:	071a      	lsls	r2, r3, #28
 8010b5a:	d52f      	bpl.n	8010bbc <__swbuf_r+0x84>
 8010b5c:	6923      	ldr	r3, [r4, #16]
 8010b5e:	b36b      	cbz	r3, 8010bbc <__swbuf_r+0x84>
 8010b60:	6923      	ldr	r3, [r4, #16]
 8010b62:	6820      	ldr	r0, [r4, #0]
 8010b64:	1ac0      	subs	r0, r0, r3
 8010b66:	6963      	ldr	r3, [r4, #20]
 8010b68:	b2f6      	uxtb	r6, r6
 8010b6a:	4283      	cmp	r3, r0
 8010b6c:	4637      	mov	r7, r6
 8010b6e:	dc04      	bgt.n	8010b7a <__swbuf_r+0x42>
 8010b70:	4621      	mov	r1, r4
 8010b72:	4628      	mov	r0, r5
 8010b74:	f000 f92e 	bl	8010dd4 <_fflush_r>
 8010b78:	bb30      	cbnz	r0, 8010bc8 <__swbuf_r+0x90>
 8010b7a:	68a3      	ldr	r3, [r4, #8]
 8010b7c:	3b01      	subs	r3, #1
 8010b7e:	60a3      	str	r3, [r4, #8]
 8010b80:	6823      	ldr	r3, [r4, #0]
 8010b82:	1c5a      	adds	r2, r3, #1
 8010b84:	6022      	str	r2, [r4, #0]
 8010b86:	701e      	strb	r6, [r3, #0]
 8010b88:	6963      	ldr	r3, [r4, #20]
 8010b8a:	3001      	adds	r0, #1
 8010b8c:	4283      	cmp	r3, r0
 8010b8e:	d004      	beq.n	8010b9a <__swbuf_r+0x62>
 8010b90:	89a3      	ldrh	r3, [r4, #12]
 8010b92:	07db      	lsls	r3, r3, #31
 8010b94:	d506      	bpl.n	8010ba4 <__swbuf_r+0x6c>
 8010b96:	2e0a      	cmp	r6, #10
 8010b98:	d104      	bne.n	8010ba4 <__swbuf_r+0x6c>
 8010b9a:	4621      	mov	r1, r4
 8010b9c:	4628      	mov	r0, r5
 8010b9e:	f000 f919 	bl	8010dd4 <_fflush_r>
 8010ba2:	b988      	cbnz	r0, 8010bc8 <__swbuf_r+0x90>
 8010ba4:	4638      	mov	r0, r7
 8010ba6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010ba8:	4b0a      	ldr	r3, [pc, #40]	; (8010bd4 <__swbuf_r+0x9c>)
 8010baa:	429c      	cmp	r4, r3
 8010bac:	d101      	bne.n	8010bb2 <__swbuf_r+0x7a>
 8010bae:	68ac      	ldr	r4, [r5, #8]
 8010bb0:	e7cf      	b.n	8010b52 <__swbuf_r+0x1a>
 8010bb2:	4b09      	ldr	r3, [pc, #36]	; (8010bd8 <__swbuf_r+0xa0>)
 8010bb4:	429c      	cmp	r4, r3
 8010bb6:	bf08      	it	eq
 8010bb8:	68ec      	ldreq	r4, [r5, #12]
 8010bba:	e7ca      	b.n	8010b52 <__swbuf_r+0x1a>
 8010bbc:	4621      	mov	r1, r4
 8010bbe:	4628      	mov	r0, r5
 8010bc0:	f000 f80c 	bl	8010bdc <__swsetup_r>
 8010bc4:	2800      	cmp	r0, #0
 8010bc6:	d0cb      	beq.n	8010b60 <__swbuf_r+0x28>
 8010bc8:	f04f 37ff 	mov.w	r7, #4294967295
 8010bcc:	e7ea      	b.n	8010ba4 <__swbuf_r+0x6c>
 8010bce:	bf00      	nop
 8010bd0:	08011a44 	.word	0x08011a44
 8010bd4:	08011a64 	.word	0x08011a64
 8010bd8:	08011a24 	.word	0x08011a24

08010bdc <__swsetup_r>:
 8010bdc:	4b32      	ldr	r3, [pc, #200]	; (8010ca8 <__swsetup_r+0xcc>)
 8010bde:	b570      	push	{r4, r5, r6, lr}
 8010be0:	681d      	ldr	r5, [r3, #0]
 8010be2:	4606      	mov	r6, r0
 8010be4:	460c      	mov	r4, r1
 8010be6:	b125      	cbz	r5, 8010bf2 <__swsetup_r+0x16>
 8010be8:	69ab      	ldr	r3, [r5, #24]
 8010bea:	b913      	cbnz	r3, 8010bf2 <__swsetup_r+0x16>
 8010bec:	4628      	mov	r0, r5
 8010bee:	f000 f985 	bl	8010efc <__sinit>
 8010bf2:	4b2e      	ldr	r3, [pc, #184]	; (8010cac <__swsetup_r+0xd0>)
 8010bf4:	429c      	cmp	r4, r3
 8010bf6:	d10f      	bne.n	8010c18 <__swsetup_r+0x3c>
 8010bf8:	686c      	ldr	r4, [r5, #4]
 8010bfa:	89a3      	ldrh	r3, [r4, #12]
 8010bfc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c00:	0719      	lsls	r1, r3, #28
 8010c02:	d42c      	bmi.n	8010c5e <__swsetup_r+0x82>
 8010c04:	06dd      	lsls	r5, r3, #27
 8010c06:	d411      	bmi.n	8010c2c <__swsetup_r+0x50>
 8010c08:	2309      	movs	r3, #9
 8010c0a:	6033      	str	r3, [r6, #0]
 8010c0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8010c10:	81a3      	strh	r3, [r4, #12]
 8010c12:	f04f 30ff 	mov.w	r0, #4294967295
 8010c16:	e03e      	b.n	8010c96 <__swsetup_r+0xba>
 8010c18:	4b25      	ldr	r3, [pc, #148]	; (8010cb0 <__swsetup_r+0xd4>)
 8010c1a:	429c      	cmp	r4, r3
 8010c1c:	d101      	bne.n	8010c22 <__swsetup_r+0x46>
 8010c1e:	68ac      	ldr	r4, [r5, #8]
 8010c20:	e7eb      	b.n	8010bfa <__swsetup_r+0x1e>
 8010c22:	4b24      	ldr	r3, [pc, #144]	; (8010cb4 <__swsetup_r+0xd8>)
 8010c24:	429c      	cmp	r4, r3
 8010c26:	bf08      	it	eq
 8010c28:	68ec      	ldreq	r4, [r5, #12]
 8010c2a:	e7e6      	b.n	8010bfa <__swsetup_r+0x1e>
 8010c2c:	0758      	lsls	r0, r3, #29
 8010c2e:	d512      	bpl.n	8010c56 <__swsetup_r+0x7a>
 8010c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010c32:	b141      	cbz	r1, 8010c46 <__swsetup_r+0x6a>
 8010c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010c38:	4299      	cmp	r1, r3
 8010c3a:	d002      	beq.n	8010c42 <__swsetup_r+0x66>
 8010c3c:	4630      	mov	r0, r6
 8010c3e:	f7ff fb27 	bl	8010290 <_free_r>
 8010c42:	2300      	movs	r3, #0
 8010c44:	6363      	str	r3, [r4, #52]	; 0x34
 8010c46:	89a3      	ldrh	r3, [r4, #12]
 8010c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8010c4c:	81a3      	strh	r3, [r4, #12]
 8010c4e:	2300      	movs	r3, #0
 8010c50:	6063      	str	r3, [r4, #4]
 8010c52:	6923      	ldr	r3, [r4, #16]
 8010c54:	6023      	str	r3, [r4, #0]
 8010c56:	89a3      	ldrh	r3, [r4, #12]
 8010c58:	f043 0308 	orr.w	r3, r3, #8
 8010c5c:	81a3      	strh	r3, [r4, #12]
 8010c5e:	6923      	ldr	r3, [r4, #16]
 8010c60:	b94b      	cbnz	r3, 8010c76 <__swsetup_r+0x9a>
 8010c62:	89a3      	ldrh	r3, [r4, #12]
 8010c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010c6c:	d003      	beq.n	8010c76 <__swsetup_r+0x9a>
 8010c6e:	4621      	mov	r1, r4
 8010c70:	4630      	mov	r0, r6
 8010c72:	f000 fa09 	bl	8011088 <__smakebuf_r>
 8010c76:	89a0      	ldrh	r0, [r4, #12]
 8010c78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8010c7c:	f010 0301 	ands.w	r3, r0, #1
 8010c80:	d00a      	beq.n	8010c98 <__swsetup_r+0xbc>
 8010c82:	2300      	movs	r3, #0
 8010c84:	60a3      	str	r3, [r4, #8]
 8010c86:	6963      	ldr	r3, [r4, #20]
 8010c88:	425b      	negs	r3, r3
 8010c8a:	61a3      	str	r3, [r4, #24]
 8010c8c:	6923      	ldr	r3, [r4, #16]
 8010c8e:	b943      	cbnz	r3, 8010ca2 <__swsetup_r+0xc6>
 8010c90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010c94:	d1ba      	bne.n	8010c0c <__swsetup_r+0x30>
 8010c96:	bd70      	pop	{r4, r5, r6, pc}
 8010c98:	0781      	lsls	r1, r0, #30
 8010c9a:	bf58      	it	pl
 8010c9c:	6963      	ldrpl	r3, [r4, #20]
 8010c9e:	60a3      	str	r3, [r4, #8]
 8010ca0:	e7f4      	b.n	8010c8c <__swsetup_r+0xb0>
 8010ca2:	2000      	movs	r0, #0
 8010ca4:	e7f7      	b.n	8010c96 <__swsetup_r+0xba>
 8010ca6:	bf00      	nop
 8010ca8:	20000264 	.word	0x20000264
 8010cac:	08011a44 	.word	0x08011a44
 8010cb0:	08011a64 	.word	0x08011a64
 8010cb4:	08011a24 	.word	0x08011a24

08010cb8 <abort>:
 8010cb8:	b508      	push	{r3, lr}
 8010cba:	2006      	movs	r0, #6
 8010cbc:	f000 fa54 	bl	8011168 <raise>
 8010cc0:	2001      	movs	r0, #1
 8010cc2:	f7f4 fb2f 	bl	8005324 <_exit>
	...

08010cc8 <__sflush_r>:
 8010cc8:	898a      	ldrh	r2, [r1, #12]
 8010cca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010cce:	4605      	mov	r5, r0
 8010cd0:	0710      	lsls	r0, r2, #28
 8010cd2:	460c      	mov	r4, r1
 8010cd4:	d458      	bmi.n	8010d88 <__sflush_r+0xc0>
 8010cd6:	684b      	ldr	r3, [r1, #4]
 8010cd8:	2b00      	cmp	r3, #0
 8010cda:	dc05      	bgt.n	8010ce8 <__sflush_r+0x20>
 8010cdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8010cde:	2b00      	cmp	r3, #0
 8010ce0:	dc02      	bgt.n	8010ce8 <__sflush_r+0x20>
 8010ce2:	2000      	movs	r0, #0
 8010ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010ce8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010cea:	2e00      	cmp	r6, #0
 8010cec:	d0f9      	beq.n	8010ce2 <__sflush_r+0x1a>
 8010cee:	2300      	movs	r3, #0
 8010cf0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8010cf4:	682f      	ldr	r7, [r5, #0]
 8010cf6:	602b      	str	r3, [r5, #0]
 8010cf8:	d032      	beq.n	8010d60 <__sflush_r+0x98>
 8010cfa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010cfc:	89a3      	ldrh	r3, [r4, #12]
 8010cfe:	075a      	lsls	r2, r3, #29
 8010d00:	d505      	bpl.n	8010d0e <__sflush_r+0x46>
 8010d02:	6863      	ldr	r3, [r4, #4]
 8010d04:	1ac0      	subs	r0, r0, r3
 8010d06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010d08:	b10b      	cbz	r3, 8010d0e <__sflush_r+0x46>
 8010d0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8010d0c:	1ac0      	subs	r0, r0, r3
 8010d0e:	2300      	movs	r3, #0
 8010d10:	4602      	mov	r2, r0
 8010d12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8010d14:	6a21      	ldr	r1, [r4, #32]
 8010d16:	4628      	mov	r0, r5
 8010d18:	47b0      	blx	r6
 8010d1a:	1c43      	adds	r3, r0, #1
 8010d1c:	89a3      	ldrh	r3, [r4, #12]
 8010d1e:	d106      	bne.n	8010d2e <__sflush_r+0x66>
 8010d20:	6829      	ldr	r1, [r5, #0]
 8010d22:	291d      	cmp	r1, #29
 8010d24:	d82c      	bhi.n	8010d80 <__sflush_r+0xb8>
 8010d26:	4a2a      	ldr	r2, [pc, #168]	; (8010dd0 <__sflush_r+0x108>)
 8010d28:	40ca      	lsrs	r2, r1
 8010d2a:	07d6      	lsls	r6, r2, #31
 8010d2c:	d528      	bpl.n	8010d80 <__sflush_r+0xb8>
 8010d2e:	2200      	movs	r2, #0
 8010d30:	6062      	str	r2, [r4, #4]
 8010d32:	04d9      	lsls	r1, r3, #19
 8010d34:	6922      	ldr	r2, [r4, #16]
 8010d36:	6022      	str	r2, [r4, #0]
 8010d38:	d504      	bpl.n	8010d44 <__sflush_r+0x7c>
 8010d3a:	1c42      	adds	r2, r0, #1
 8010d3c:	d101      	bne.n	8010d42 <__sflush_r+0x7a>
 8010d3e:	682b      	ldr	r3, [r5, #0]
 8010d40:	b903      	cbnz	r3, 8010d44 <__sflush_r+0x7c>
 8010d42:	6560      	str	r0, [r4, #84]	; 0x54
 8010d44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010d46:	602f      	str	r7, [r5, #0]
 8010d48:	2900      	cmp	r1, #0
 8010d4a:	d0ca      	beq.n	8010ce2 <__sflush_r+0x1a>
 8010d4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010d50:	4299      	cmp	r1, r3
 8010d52:	d002      	beq.n	8010d5a <__sflush_r+0x92>
 8010d54:	4628      	mov	r0, r5
 8010d56:	f7ff fa9b 	bl	8010290 <_free_r>
 8010d5a:	2000      	movs	r0, #0
 8010d5c:	6360      	str	r0, [r4, #52]	; 0x34
 8010d5e:	e7c1      	b.n	8010ce4 <__sflush_r+0x1c>
 8010d60:	6a21      	ldr	r1, [r4, #32]
 8010d62:	2301      	movs	r3, #1
 8010d64:	4628      	mov	r0, r5
 8010d66:	47b0      	blx	r6
 8010d68:	1c41      	adds	r1, r0, #1
 8010d6a:	d1c7      	bne.n	8010cfc <__sflush_r+0x34>
 8010d6c:	682b      	ldr	r3, [r5, #0]
 8010d6e:	2b00      	cmp	r3, #0
 8010d70:	d0c4      	beq.n	8010cfc <__sflush_r+0x34>
 8010d72:	2b1d      	cmp	r3, #29
 8010d74:	d001      	beq.n	8010d7a <__sflush_r+0xb2>
 8010d76:	2b16      	cmp	r3, #22
 8010d78:	d101      	bne.n	8010d7e <__sflush_r+0xb6>
 8010d7a:	602f      	str	r7, [r5, #0]
 8010d7c:	e7b1      	b.n	8010ce2 <__sflush_r+0x1a>
 8010d7e:	89a3      	ldrh	r3, [r4, #12]
 8010d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010d84:	81a3      	strh	r3, [r4, #12]
 8010d86:	e7ad      	b.n	8010ce4 <__sflush_r+0x1c>
 8010d88:	690f      	ldr	r7, [r1, #16]
 8010d8a:	2f00      	cmp	r7, #0
 8010d8c:	d0a9      	beq.n	8010ce2 <__sflush_r+0x1a>
 8010d8e:	0793      	lsls	r3, r2, #30
 8010d90:	680e      	ldr	r6, [r1, #0]
 8010d92:	bf08      	it	eq
 8010d94:	694b      	ldreq	r3, [r1, #20]
 8010d96:	600f      	str	r7, [r1, #0]
 8010d98:	bf18      	it	ne
 8010d9a:	2300      	movne	r3, #0
 8010d9c:	eba6 0807 	sub.w	r8, r6, r7
 8010da0:	608b      	str	r3, [r1, #8]
 8010da2:	f1b8 0f00 	cmp.w	r8, #0
 8010da6:	dd9c      	ble.n	8010ce2 <__sflush_r+0x1a>
 8010da8:	6a21      	ldr	r1, [r4, #32]
 8010daa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8010dac:	4643      	mov	r3, r8
 8010dae:	463a      	mov	r2, r7
 8010db0:	4628      	mov	r0, r5
 8010db2:	47b0      	blx	r6
 8010db4:	2800      	cmp	r0, #0
 8010db6:	dc06      	bgt.n	8010dc6 <__sflush_r+0xfe>
 8010db8:	89a3      	ldrh	r3, [r4, #12]
 8010dba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010dbe:	81a3      	strh	r3, [r4, #12]
 8010dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8010dc4:	e78e      	b.n	8010ce4 <__sflush_r+0x1c>
 8010dc6:	4407      	add	r7, r0
 8010dc8:	eba8 0800 	sub.w	r8, r8, r0
 8010dcc:	e7e9      	b.n	8010da2 <__sflush_r+0xda>
 8010dce:	bf00      	nop
 8010dd0:	20400001 	.word	0x20400001

08010dd4 <_fflush_r>:
 8010dd4:	b538      	push	{r3, r4, r5, lr}
 8010dd6:	690b      	ldr	r3, [r1, #16]
 8010dd8:	4605      	mov	r5, r0
 8010dda:	460c      	mov	r4, r1
 8010ddc:	b913      	cbnz	r3, 8010de4 <_fflush_r+0x10>
 8010dde:	2500      	movs	r5, #0
 8010de0:	4628      	mov	r0, r5
 8010de2:	bd38      	pop	{r3, r4, r5, pc}
 8010de4:	b118      	cbz	r0, 8010dee <_fflush_r+0x1a>
 8010de6:	6983      	ldr	r3, [r0, #24]
 8010de8:	b90b      	cbnz	r3, 8010dee <_fflush_r+0x1a>
 8010dea:	f000 f887 	bl	8010efc <__sinit>
 8010dee:	4b14      	ldr	r3, [pc, #80]	; (8010e40 <_fflush_r+0x6c>)
 8010df0:	429c      	cmp	r4, r3
 8010df2:	d11b      	bne.n	8010e2c <_fflush_r+0x58>
 8010df4:	686c      	ldr	r4, [r5, #4]
 8010df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d0ef      	beq.n	8010dde <_fflush_r+0xa>
 8010dfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010e00:	07d0      	lsls	r0, r2, #31
 8010e02:	d404      	bmi.n	8010e0e <_fflush_r+0x3a>
 8010e04:	0599      	lsls	r1, r3, #22
 8010e06:	d402      	bmi.n	8010e0e <_fflush_r+0x3a>
 8010e08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e0a:	f000 f915 	bl	8011038 <__retarget_lock_acquire_recursive>
 8010e0e:	4628      	mov	r0, r5
 8010e10:	4621      	mov	r1, r4
 8010e12:	f7ff ff59 	bl	8010cc8 <__sflush_r>
 8010e16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e18:	07da      	lsls	r2, r3, #31
 8010e1a:	4605      	mov	r5, r0
 8010e1c:	d4e0      	bmi.n	8010de0 <_fflush_r+0xc>
 8010e1e:	89a3      	ldrh	r3, [r4, #12]
 8010e20:	059b      	lsls	r3, r3, #22
 8010e22:	d4dd      	bmi.n	8010de0 <_fflush_r+0xc>
 8010e24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e26:	f000 f908 	bl	801103a <__retarget_lock_release_recursive>
 8010e2a:	e7d9      	b.n	8010de0 <_fflush_r+0xc>
 8010e2c:	4b05      	ldr	r3, [pc, #20]	; (8010e44 <_fflush_r+0x70>)
 8010e2e:	429c      	cmp	r4, r3
 8010e30:	d101      	bne.n	8010e36 <_fflush_r+0x62>
 8010e32:	68ac      	ldr	r4, [r5, #8]
 8010e34:	e7df      	b.n	8010df6 <_fflush_r+0x22>
 8010e36:	4b04      	ldr	r3, [pc, #16]	; (8010e48 <_fflush_r+0x74>)
 8010e38:	429c      	cmp	r4, r3
 8010e3a:	bf08      	it	eq
 8010e3c:	68ec      	ldreq	r4, [r5, #12]
 8010e3e:	e7da      	b.n	8010df6 <_fflush_r+0x22>
 8010e40:	08011a44 	.word	0x08011a44
 8010e44:	08011a64 	.word	0x08011a64
 8010e48:	08011a24 	.word	0x08011a24

08010e4c <std>:
 8010e4c:	2300      	movs	r3, #0
 8010e4e:	b510      	push	{r4, lr}
 8010e50:	4604      	mov	r4, r0
 8010e52:	e9c0 3300 	strd	r3, r3, [r0]
 8010e56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010e5a:	6083      	str	r3, [r0, #8]
 8010e5c:	8181      	strh	r1, [r0, #12]
 8010e5e:	6643      	str	r3, [r0, #100]	; 0x64
 8010e60:	81c2      	strh	r2, [r0, #14]
 8010e62:	6183      	str	r3, [r0, #24]
 8010e64:	4619      	mov	r1, r3
 8010e66:	2208      	movs	r2, #8
 8010e68:	305c      	adds	r0, #92	; 0x5c
 8010e6a:	f7fb fddb 	bl	800ca24 <memset>
 8010e6e:	4b05      	ldr	r3, [pc, #20]	; (8010e84 <std+0x38>)
 8010e70:	6263      	str	r3, [r4, #36]	; 0x24
 8010e72:	4b05      	ldr	r3, [pc, #20]	; (8010e88 <std+0x3c>)
 8010e74:	62a3      	str	r3, [r4, #40]	; 0x28
 8010e76:	4b05      	ldr	r3, [pc, #20]	; (8010e8c <std+0x40>)
 8010e78:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010e7a:	4b05      	ldr	r3, [pc, #20]	; (8010e90 <std+0x44>)
 8010e7c:	6224      	str	r4, [r4, #32]
 8010e7e:	6323      	str	r3, [r4, #48]	; 0x30
 8010e80:	bd10      	pop	{r4, pc}
 8010e82:	bf00      	nop
 8010e84:	080111a1 	.word	0x080111a1
 8010e88:	080111c3 	.word	0x080111c3
 8010e8c:	080111fb 	.word	0x080111fb
 8010e90:	0801121f 	.word	0x0801121f

08010e94 <_cleanup_r>:
 8010e94:	4901      	ldr	r1, [pc, #4]	; (8010e9c <_cleanup_r+0x8>)
 8010e96:	f000 b8af 	b.w	8010ff8 <_fwalk_reent>
 8010e9a:	bf00      	nop
 8010e9c:	08010dd5 	.word	0x08010dd5

08010ea0 <__sfmoreglue>:
 8010ea0:	b570      	push	{r4, r5, r6, lr}
 8010ea2:	2268      	movs	r2, #104	; 0x68
 8010ea4:	1e4d      	subs	r5, r1, #1
 8010ea6:	4355      	muls	r5, r2
 8010ea8:	460e      	mov	r6, r1
 8010eaa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010eae:	f7ff fa5b 	bl	8010368 <_malloc_r>
 8010eb2:	4604      	mov	r4, r0
 8010eb4:	b140      	cbz	r0, 8010ec8 <__sfmoreglue+0x28>
 8010eb6:	2100      	movs	r1, #0
 8010eb8:	e9c0 1600 	strd	r1, r6, [r0]
 8010ebc:	300c      	adds	r0, #12
 8010ebe:	60a0      	str	r0, [r4, #8]
 8010ec0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010ec4:	f7fb fdae 	bl	800ca24 <memset>
 8010ec8:	4620      	mov	r0, r4
 8010eca:	bd70      	pop	{r4, r5, r6, pc}

08010ecc <__sfp_lock_acquire>:
 8010ecc:	4801      	ldr	r0, [pc, #4]	; (8010ed4 <__sfp_lock_acquire+0x8>)
 8010ece:	f000 b8b3 	b.w	8011038 <__retarget_lock_acquire_recursive>
 8010ed2:	bf00      	nop
 8010ed4:	20001141 	.word	0x20001141

08010ed8 <__sfp_lock_release>:
 8010ed8:	4801      	ldr	r0, [pc, #4]	; (8010ee0 <__sfp_lock_release+0x8>)
 8010eda:	f000 b8ae 	b.w	801103a <__retarget_lock_release_recursive>
 8010ede:	bf00      	nop
 8010ee0:	20001141 	.word	0x20001141

08010ee4 <__sinit_lock_acquire>:
 8010ee4:	4801      	ldr	r0, [pc, #4]	; (8010eec <__sinit_lock_acquire+0x8>)
 8010ee6:	f000 b8a7 	b.w	8011038 <__retarget_lock_acquire_recursive>
 8010eea:	bf00      	nop
 8010eec:	20001142 	.word	0x20001142

08010ef0 <__sinit_lock_release>:
 8010ef0:	4801      	ldr	r0, [pc, #4]	; (8010ef8 <__sinit_lock_release+0x8>)
 8010ef2:	f000 b8a2 	b.w	801103a <__retarget_lock_release_recursive>
 8010ef6:	bf00      	nop
 8010ef8:	20001142 	.word	0x20001142

08010efc <__sinit>:
 8010efc:	b510      	push	{r4, lr}
 8010efe:	4604      	mov	r4, r0
 8010f00:	f7ff fff0 	bl	8010ee4 <__sinit_lock_acquire>
 8010f04:	69a3      	ldr	r3, [r4, #24]
 8010f06:	b11b      	cbz	r3, 8010f10 <__sinit+0x14>
 8010f08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010f0c:	f7ff bff0 	b.w	8010ef0 <__sinit_lock_release>
 8010f10:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010f14:	6523      	str	r3, [r4, #80]	; 0x50
 8010f16:	4b13      	ldr	r3, [pc, #76]	; (8010f64 <__sinit+0x68>)
 8010f18:	4a13      	ldr	r2, [pc, #76]	; (8010f68 <__sinit+0x6c>)
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	62a2      	str	r2, [r4, #40]	; 0x28
 8010f1e:	42a3      	cmp	r3, r4
 8010f20:	bf04      	itt	eq
 8010f22:	2301      	moveq	r3, #1
 8010f24:	61a3      	streq	r3, [r4, #24]
 8010f26:	4620      	mov	r0, r4
 8010f28:	f000 f820 	bl	8010f6c <__sfp>
 8010f2c:	6060      	str	r0, [r4, #4]
 8010f2e:	4620      	mov	r0, r4
 8010f30:	f000 f81c 	bl	8010f6c <__sfp>
 8010f34:	60a0      	str	r0, [r4, #8]
 8010f36:	4620      	mov	r0, r4
 8010f38:	f000 f818 	bl	8010f6c <__sfp>
 8010f3c:	2200      	movs	r2, #0
 8010f3e:	60e0      	str	r0, [r4, #12]
 8010f40:	2104      	movs	r1, #4
 8010f42:	6860      	ldr	r0, [r4, #4]
 8010f44:	f7ff ff82 	bl	8010e4c <std>
 8010f48:	68a0      	ldr	r0, [r4, #8]
 8010f4a:	2201      	movs	r2, #1
 8010f4c:	2109      	movs	r1, #9
 8010f4e:	f7ff ff7d 	bl	8010e4c <std>
 8010f52:	68e0      	ldr	r0, [r4, #12]
 8010f54:	2202      	movs	r2, #2
 8010f56:	2112      	movs	r1, #18
 8010f58:	f7ff ff78 	bl	8010e4c <std>
 8010f5c:	2301      	movs	r3, #1
 8010f5e:	61a3      	str	r3, [r4, #24]
 8010f60:	e7d2      	b.n	8010f08 <__sinit+0xc>
 8010f62:	bf00      	nop
 8010f64:	080115dc 	.word	0x080115dc
 8010f68:	08010e95 	.word	0x08010e95

08010f6c <__sfp>:
 8010f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010f6e:	4607      	mov	r7, r0
 8010f70:	f7ff ffac 	bl	8010ecc <__sfp_lock_acquire>
 8010f74:	4b1e      	ldr	r3, [pc, #120]	; (8010ff0 <__sfp+0x84>)
 8010f76:	681e      	ldr	r6, [r3, #0]
 8010f78:	69b3      	ldr	r3, [r6, #24]
 8010f7a:	b913      	cbnz	r3, 8010f82 <__sfp+0x16>
 8010f7c:	4630      	mov	r0, r6
 8010f7e:	f7ff ffbd 	bl	8010efc <__sinit>
 8010f82:	3648      	adds	r6, #72	; 0x48
 8010f84:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010f88:	3b01      	subs	r3, #1
 8010f8a:	d503      	bpl.n	8010f94 <__sfp+0x28>
 8010f8c:	6833      	ldr	r3, [r6, #0]
 8010f8e:	b30b      	cbz	r3, 8010fd4 <__sfp+0x68>
 8010f90:	6836      	ldr	r6, [r6, #0]
 8010f92:	e7f7      	b.n	8010f84 <__sfp+0x18>
 8010f94:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010f98:	b9d5      	cbnz	r5, 8010fd0 <__sfp+0x64>
 8010f9a:	4b16      	ldr	r3, [pc, #88]	; (8010ff4 <__sfp+0x88>)
 8010f9c:	60e3      	str	r3, [r4, #12]
 8010f9e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010fa2:	6665      	str	r5, [r4, #100]	; 0x64
 8010fa4:	f000 f847 	bl	8011036 <__retarget_lock_init_recursive>
 8010fa8:	f7ff ff96 	bl	8010ed8 <__sfp_lock_release>
 8010fac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010fb0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010fb4:	6025      	str	r5, [r4, #0]
 8010fb6:	61a5      	str	r5, [r4, #24]
 8010fb8:	2208      	movs	r2, #8
 8010fba:	4629      	mov	r1, r5
 8010fbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010fc0:	f7fb fd30 	bl	800ca24 <memset>
 8010fc4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010fc8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010fcc:	4620      	mov	r0, r4
 8010fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010fd0:	3468      	adds	r4, #104	; 0x68
 8010fd2:	e7d9      	b.n	8010f88 <__sfp+0x1c>
 8010fd4:	2104      	movs	r1, #4
 8010fd6:	4638      	mov	r0, r7
 8010fd8:	f7ff ff62 	bl	8010ea0 <__sfmoreglue>
 8010fdc:	4604      	mov	r4, r0
 8010fde:	6030      	str	r0, [r6, #0]
 8010fe0:	2800      	cmp	r0, #0
 8010fe2:	d1d5      	bne.n	8010f90 <__sfp+0x24>
 8010fe4:	f7ff ff78 	bl	8010ed8 <__sfp_lock_release>
 8010fe8:	230c      	movs	r3, #12
 8010fea:	603b      	str	r3, [r7, #0]
 8010fec:	e7ee      	b.n	8010fcc <__sfp+0x60>
 8010fee:	bf00      	nop
 8010ff0:	080115dc 	.word	0x080115dc
 8010ff4:	ffff0001 	.word	0xffff0001

08010ff8 <_fwalk_reent>:
 8010ff8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ffc:	4606      	mov	r6, r0
 8010ffe:	4688      	mov	r8, r1
 8011000:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011004:	2700      	movs	r7, #0
 8011006:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801100a:	f1b9 0901 	subs.w	r9, r9, #1
 801100e:	d505      	bpl.n	801101c <_fwalk_reent+0x24>
 8011010:	6824      	ldr	r4, [r4, #0]
 8011012:	2c00      	cmp	r4, #0
 8011014:	d1f7      	bne.n	8011006 <_fwalk_reent+0xe>
 8011016:	4638      	mov	r0, r7
 8011018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801101c:	89ab      	ldrh	r3, [r5, #12]
 801101e:	2b01      	cmp	r3, #1
 8011020:	d907      	bls.n	8011032 <_fwalk_reent+0x3a>
 8011022:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011026:	3301      	adds	r3, #1
 8011028:	d003      	beq.n	8011032 <_fwalk_reent+0x3a>
 801102a:	4629      	mov	r1, r5
 801102c:	4630      	mov	r0, r6
 801102e:	47c0      	blx	r8
 8011030:	4307      	orrs	r7, r0
 8011032:	3568      	adds	r5, #104	; 0x68
 8011034:	e7e9      	b.n	801100a <_fwalk_reent+0x12>

08011036 <__retarget_lock_init_recursive>:
 8011036:	4770      	bx	lr

08011038 <__retarget_lock_acquire_recursive>:
 8011038:	4770      	bx	lr

0801103a <__retarget_lock_release_recursive>:
 801103a:	4770      	bx	lr

0801103c <__swhatbuf_r>:
 801103c:	b570      	push	{r4, r5, r6, lr}
 801103e:	460e      	mov	r6, r1
 8011040:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011044:	2900      	cmp	r1, #0
 8011046:	b096      	sub	sp, #88	; 0x58
 8011048:	4614      	mov	r4, r2
 801104a:	461d      	mov	r5, r3
 801104c:	da08      	bge.n	8011060 <__swhatbuf_r+0x24>
 801104e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8011052:	2200      	movs	r2, #0
 8011054:	602a      	str	r2, [r5, #0]
 8011056:	061a      	lsls	r2, r3, #24
 8011058:	d410      	bmi.n	801107c <__swhatbuf_r+0x40>
 801105a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801105e:	e00e      	b.n	801107e <__swhatbuf_r+0x42>
 8011060:	466a      	mov	r2, sp
 8011062:	f000 f903 	bl	801126c <_fstat_r>
 8011066:	2800      	cmp	r0, #0
 8011068:	dbf1      	blt.n	801104e <__swhatbuf_r+0x12>
 801106a:	9a01      	ldr	r2, [sp, #4]
 801106c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8011070:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8011074:	425a      	negs	r2, r3
 8011076:	415a      	adcs	r2, r3
 8011078:	602a      	str	r2, [r5, #0]
 801107a:	e7ee      	b.n	801105a <__swhatbuf_r+0x1e>
 801107c:	2340      	movs	r3, #64	; 0x40
 801107e:	2000      	movs	r0, #0
 8011080:	6023      	str	r3, [r4, #0]
 8011082:	b016      	add	sp, #88	; 0x58
 8011084:	bd70      	pop	{r4, r5, r6, pc}
	...

08011088 <__smakebuf_r>:
 8011088:	898b      	ldrh	r3, [r1, #12]
 801108a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801108c:	079d      	lsls	r5, r3, #30
 801108e:	4606      	mov	r6, r0
 8011090:	460c      	mov	r4, r1
 8011092:	d507      	bpl.n	80110a4 <__smakebuf_r+0x1c>
 8011094:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011098:	6023      	str	r3, [r4, #0]
 801109a:	6123      	str	r3, [r4, #16]
 801109c:	2301      	movs	r3, #1
 801109e:	6163      	str	r3, [r4, #20]
 80110a0:	b002      	add	sp, #8
 80110a2:	bd70      	pop	{r4, r5, r6, pc}
 80110a4:	ab01      	add	r3, sp, #4
 80110a6:	466a      	mov	r2, sp
 80110a8:	f7ff ffc8 	bl	801103c <__swhatbuf_r>
 80110ac:	9900      	ldr	r1, [sp, #0]
 80110ae:	4605      	mov	r5, r0
 80110b0:	4630      	mov	r0, r6
 80110b2:	f7ff f959 	bl	8010368 <_malloc_r>
 80110b6:	b948      	cbnz	r0, 80110cc <__smakebuf_r+0x44>
 80110b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80110bc:	059a      	lsls	r2, r3, #22
 80110be:	d4ef      	bmi.n	80110a0 <__smakebuf_r+0x18>
 80110c0:	f023 0303 	bic.w	r3, r3, #3
 80110c4:	f043 0302 	orr.w	r3, r3, #2
 80110c8:	81a3      	strh	r3, [r4, #12]
 80110ca:	e7e3      	b.n	8011094 <__smakebuf_r+0xc>
 80110cc:	4b0d      	ldr	r3, [pc, #52]	; (8011104 <__smakebuf_r+0x7c>)
 80110ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80110d0:	89a3      	ldrh	r3, [r4, #12]
 80110d2:	6020      	str	r0, [r4, #0]
 80110d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80110d8:	81a3      	strh	r3, [r4, #12]
 80110da:	9b00      	ldr	r3, [sp, #0]
 80110dc:	6163      	str	r3, [r4, #20]
 80110de:	9b01      	ldr	r3, [sp, #4]
 80110e0:	6120      	str	r0, [r4, #16]
 80110e2:	b15b      	cbz	r3, 80110fc <__smakebuf_r+0x74>
 80110e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80110e8:	4630      	mov	r0, r6
 80110ea:	f000 f8d1 	bl	8011290 <_isatty_r>
 80110ee:	b128      	cbz	r0, 80110fc <__smakebuf_r+0x74>
 80110f0:	89a3      	ldrh	r3, [r4, #12]
 80110f2:	f023 0303 	bic.w	r3, r3, #3
 80110f6:	f043 0301 	orr.w	r3, r3, #1
 80110fa:	81a3      	strh	r3, [r4, #12]
 80110fc:	89a0      	ldrh	r0, [r4, #12]
 80110fe:	4305      	orrs	r5, r0
 8011100:	81a5      	strh	r5, [r4, #12]
 8011102:	e7cd      	b.n	80110a0 <__smakebuf_r+0x18>
 8011104:	08010e95 	.word	0x08010e95

08011108 <_malloc_usable_size_r>:
 8011108:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801110c:	1f18      	subs	r0, r3, #4
 801110e:	2b00      	cmp	r3, #0
 8011110:	bfbc      	itt	lt
 8011112:	580b      	ldrlt	r3, [r1, r0]
 8011114:	18c0      	addlt	r0, r0, r3
 8011116:	4770      	bx	lr

08011118 <_raise_r>:
 8011118:	291f      	cmp	r1, #31
 801111a:	b538      	push	{r3, r4, r5, lr}
 801111c:	4604      	mov	r4, r0
 801111e:	460d      	mov	r5, r1
 8011120:	d904      	bls.n	801112c <_raise_r+0x14>
 8011122:	2316      	movs	r3, #22
 8011124:	6003      	str	r3, [r0, #0]
 8011126:	f04f 30ff 	mov.w	r0, #4294967295
 801112a:	bd38      	pop	{r3, r4, r5, pc}
 801112c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801112e:	b112      	cbz	r2, 8011136 <_raise_r+0x1e>
 8011130:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011134:	b94b      	cbnz	r3, 801114a <_raise_r+0x32>
 8011136:	4620      	mov	r0, r4
 8011138:	f000 f830 	bl	801119c <_getpid_r>
 801113c:	462a      	mov	r2, r5
 801113e:	4601      	mov	r1, r0
 8011140:	4620      	mov	r0, r4
 8011142:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011146:	f000 b817 	b.w	8011178 <_kill_r>
 801114a:	2b01      	cmp	r3, #1
 801114c:	d00a      	beq.n	8011164 <_raise_r+0x4c>
 801114e:	1c59      	adds	r1, r3, #1
 8011150:	d103      	bne.n	801115a <_raise_r+0x42>
 8011152:	2316      	movs	r3, #22
 8011154:	6003      	str	r3, [r0, #0]
 8011156:	2001      	movs	r0, #1
 8011158:	e7e7      	b.n	801112a <_raise_r+0x12>
 801115a:	2400      	movs	r4, #0
 801115c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011160:	4628      	mov	r0, r5
 8011162:	4798      	blx	r3
 8011164:	2000      	movs	r0, #0
 8011166:	e7e0      	b.n	801112a <_raise_r+0x12>

08011168 <raise>:
 8011168:	4b02      	ldr	r3, [pc, #8]	; (8011174 <raise+0xc>)
 801116a:	4601      	mov	r1, r0
 801116c:	6818      	ldr	r0, [r3, #0]
 801116e:	f7ff bfd3 	b.w	8011118 <_raise_r>
 8011172:	bf00      	nop
 8011174:	20000264 	.word	0x20000264

08011178 <_kill_r>:
 8011178:	b538      	push	{r3, r4, r5, lr}
 801117a:	4d07      	ldr	r5, [pc, #28]	; (8011198 <_kill_r+0x20>)
 801117c:	2300      	movs	r3, #0
 801117e:	4604      	mov	r4, r0
 8011180:	4608      	mov	r0, r1
 8011182:	4611      	mov	r1, r2
 8011184:	602b      	str	r3, [r5, #0]
 8011186:	f7f4 f8bd 	bl	8005304 <_kill>
 801118a:	1c43      	adds	r3, r0, #1
 801118c:	d102      	bne.n	8011194 <_kill_r+0x1c>
 801118e:	682b      	ldr	r3, [r5, #0]
 8011190:	b103      	cbz	r3, 8011194 <_kill_r+0x1c>
 8011192:	6023      	str	r3, [r4, #0]
 8011194:	bd38      	pop	{r3, r4, r5, pc}
 8011196:	bf00      	nop
 8011198:	2000113c 	.word	0x2000113c

0801119c <_getpid_r>:
 801119c:	f7f4 b8aa 	b.w	80052f4 <_getpid>

080111a0 <__sread>:
 80111a0:	b510      	push	{r4, lr}
 80111a2:	460c      	mov	r4, r1
 80111a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111a8:	f000 f894 	bl	80112d4 <_read_r>
 80111ac:	2800      	cmp	r0, #0
 80111ae:	bfab      	itete	ge
 80111b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80111b2:	89a3      	ldrhlt	r3, [r4, #12]
 80111b4:	181b      	addge	r3, r3, r0
 80111b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80111ba:	bfac      	ite	ge
 80111bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80111be:	81a3      	strhlt	r3, [r4, #12]
 80111c0:	bd10      	pop	{r4, pc}

080111c2 <__swrite>:
 80111c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80111c6:	461f      	mov	r7, r3
 80111c8:	898b      	ldrh	r3, [r1, #12]
 80111ca:	05db      	lsls	r3, r3, #23
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	4616      	mov	r6, r2
 80111d2:	d505      	bpl.n	80111e0 <__swrite+0x1e>
 80111d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80111d8:	2302      	movs	r3, #2
 80111da:	2200      	movs	r2, #0
 80111dc:	f000 f868 	bl	80112b0 <_lseek_r>
 80111e0:	89a3      	ldrh	r3, [r4, #12]
 80111e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80111e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80111ea:	81a3      	strh	r3, [r4, #12]
 80111ec:	4632      	mov	r2, r6
 80111ee:	463b      	mov	r3, r7
 80111f0:	4628      	mov	r0, r5
 80111f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80111f6:	f000 b817 	b.w	8011228 <_write_r>

080111fa <__sseek>:
 80111fa:	b510      	push	{r4, lr}
 80111fc:	460c      	mov	r4, r1
 80111fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011202:	f000 f855 	bl	80112b0 <_lseek_r>
 8011206:	1c43      	adds	r3, r0, #1
 8011208:	89a3      	ldrh	r3, [r4, #12]
 801120a:	bf15      	itete	ne
 801120c:	6560      	strne	r0, [r4, #84]	; 0x54
 801120e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8011212:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8011216:	81a3      	strheq	r3, [r4, #12]
 8011218:	bf18      	it	ne
 801121a:	81a3      	strhne	r3, [r4, #12]
 801121c:	bd10      	pop	{r4, pc}

0801121e <__sclose>:
 801121e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011222:	f000 b813 	b.w	801124c <_close_r>
	...

08011228 <_write_r>:
 8011228:	b538      	push	{r3, r4, r5, lr}
 801122a:	4d07      	ldr	r5, [pc, #28]	; (8011248 <_write_r+0x20>)
 801122c:	4604      	mov	r4, r0
 801122e:	4608      	mov	r0, r1
 8011230:	4611      	mov	r1, r2
 8011232:	2200      	movs	r2, #0
 8011234:	602a      	str	r2, [r5, #0]
 8011236:	461a      	mov	r2, r3
 8011238:	f7f4 f89b 	bl	8005372 <_write>
 801123c:	1c43      	adds	r3, r0, #1
 801123e:	d102      	bne.n	8011246 <_write_r+0x1e>
 8011240:	682b      	ldr	r3, [r5, #0]
 8011242:	b103      	cbz	r3, 8011246 <_write_r+0x1e>
 8011244:	6023      	str	r3, [r4, #0]
 8011246:	bd38      	pop	{r3, r4, r5, pc}
 8011248:	2000113c 	.word	0x2000113c

0801124c <_close_r>:
 801124c:	b538      	push	{r3, r4, r5, lr}
 801124e:	4d06      	ldr	r5, [pc, #24]	; (8011268 <_close_r+0x1c>)
 8011250:	2300      	movs	r3, #0
 8011252:	4604      	mov	r4, r0
 8011254:	4608      	mov	r0, r1
 8011256:	602b      	str	r3, [r5, #0]
 8011258:	f7f4 f8a7 	bl	80053aa <_close>
 801125c:	1c43      	adds	r3, r0, #1
 801125e:	d102      	bne.n	8011266 <_close_r+0x1a>
 8011260:	682b      	ldr	r3, [r5, #0]
 8011262:	b103      	cbz	r3, 8011266 <_close_r+0x1a>
 8011264:	6023      	str	r3, [r4, #0]
 8011266:	bd38      	pop	{r3, r4, r5, pc}
 8011268:	2000113c 	.word	0x2000113c

0801126c <_fstat_r>:
 801126c:	b538      	push	{r3, r4, r5, lr}
 801126e:	4d07      	ldr	r5, [pc, #28]	; (801128c <_fstat_r+0x20>)
 8011270:	2300      	movs	r3, #0
 8011272:	4604      	mov	r4, r0
 8011274:	4608      	mov	r0, r1
 8011276:	4611      	mov	r1, r2
 8011278:	602b      	str	r3, [r5, #0]
 801127a:	f7f4 f8a2 	bl	80053c2 <_fstat>
 801127e:	1c43      	adds	r3, r0, #1
 8011280:	d102      	bne.n	8011288 <_fstat_r+0x1c>
 8011282:	682b      	ldr	r3, [r5, #0]
 8011284:	b103      	cbz	r3, 8011288 <_fstat_r+0x1c>
 8011286:	6023      	str	r3, [r4, #0]
 8011288:	bd38      	pop	{r3, r4, r5, pc}
 801128a:	bf00      	nop
 801128c:	2000113c 	.word	0x2000113c

08011290 <_isatty_r>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	4d06      	ldr	r5, [pc, #24]	; (80112ac <_isatty_r+0x1c>)
 8011294:	2300      	movs	r3, #0
 8011296:	4604      	mov	r4, r0
 8011298:	4608      	mov	r0, r1
 801129a:	602b      	str	r3, [r5, #0]
 801129c:	f7f4 f8a1 	bl	80053e2 <_isatty>
 80112a0:	1c43      	adds	r3, r0, #1
 80112a2:	d102      	bne.n	80112aa <_isatty_r+0x1a>
 80112a4:	682b      	ldr	r3, [r5, #0]
 80112a6:	b103      	cbz	r3, 80112aa <_isatty_r+0x1a>
 80112a8:	6023      	str	r3, [r4, #0]
 80112aa:	bd38      	pop	{r3, r4, r5, pc}
 80112ac:	2000113c 	.word	0x2000113c

080112b0 <_lseek_r>:
 80112b0:	b538      	push	{r3, r4, r5, lr}
 80112b2:	4d07      	ldr	r5, [pc, #28]	; (80112d0 <_lseek_r+0x20>)
 80112b4:	4604      	mov	r4, r0
 80112b6:	4608      	mov	r0, r1
 80112b8:	4611      	mov	r1, r2
 80112ba:	2200      	movs	r2, #0
 80112bc:	602a      	str	r2, [r5, #0]
 80112be:	461a      	mov	r2, r3
 80112c0:	f7f4 f89a 	bl	80053f8 <_lseek>
 80112c4:	1c43      	adds	r3, r0, #1
 80112c6:	d102      	bne.n	80112ce <_lseek_r+0x1e>
 80112c8:	682b      	ldr	r3, [r5, #0]
 80112ca:	b103      	cbz	r3, 80112ce <_lseek_r+0x1e>
 80112cc:	6023      	str	r3, [r4, #0]
 80112ce:	bd38      	pop	{r3, r4, r5, pc}
 80112d0:	2000113c 	.word	0x2000113c

080112d4 <_read_r>:
 80112d4:	b538      	push	{r3, r4, r5, lr}
 80112d6:	4d07      	ldr	r5, [pc, #28]	; (80112f4 <_read_r+0x20>)
 80112d8:	4604      	mov	r4, r0
 80112da:	4608      	mov	r0, r1
 80112dc:	4611      	mov	r1, r2
 80112de:	2200      	movs	r2, #0
 80112e0:	602a      	str	r2, [r5, #0]
 80112e2:	461a      	mov	r2, r3
 80112e4:	f7f4 f828 	bl	8005338 <_read>
 80112e8:	1c43      	adds	r3, r0, #1
 80112ea:	d102      	bne.n	80112f2 <_read_r+0x1e>
 80112ec:	682b      	ldr	r3, [r5, #0]
 80112ee:	b103      	cbz	r3, 80112f2 <_read_r+0x1e>
 80112f0:	6023      	str	r3, [r4, #0]
 80112f2:	bd38      	pop	{r3, r4, r5, pc}
 80112f4:	2000113c 	.word	0x2000113c

080112f8 <acosf>:
 80112f8:	b508      	push	{r3, lr}
 80112fa:	ed2d 8b02 	vpush	{d8}
 80112fe:	eeb0 8a40 	vmov.f32	s16, s0
 8011302:	f000 f843 	bl	801138c <__ieee754_acosf>
 8011306:	eeb4 8a48 	vcmp.f32	s16, s16
 801130a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801130e:	eef0 8a40 	vmov.f32	s17, s0
 8011312:	d615      	bvs.n	8011340 <acosf+0x48>
 8011314:	eeb0 0a48 	vmov.f32	s0, s16
 8011318:	f000 f933 	bl	8011582 <fabsf>
 801131c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011320:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8011324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011328:	dd0a      	ble.n	8011340 <acosf+0x48>
 801132a:	f7fb fb43 	bl	800c9b4 <__errno>
 801132e:	ecbd 8b02 	vpop	{d8}
 8011332:	2321      	movs	r3, #33	; 0x21
 8011334:	6003      	str	r3, [r0, #0]
 8011336:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 801133a:	4804      	ldr	r0, [pc, #16]	; (801134c <acosf+0x54>)
 801133c:	f7fc b9f4 	b.w	800d728 <nanf>
 8011340:	eeb0 0a68 	vmov.f32	s0, s17
 8011344:	ecbd 8b02 	vpop	{d8}
 8011348:	bd08      	pop	{r3, pc}
 801134a:	bf00      	nop
 801134c:	08011a20 	.word	0x08011a20

08011350 <sqrtf>:
 8011350:	b508      	push	{r3, lr}
 8011352:	ed2d 8b02 	vpush	{d8}
 8011356:	eeb0 8a40 	vmov.f32	s16, s0
 801135a:	f000 f90f 	bl	801157c <__ieee754_sqrtf>
 801135e:	eeb4 8a48 	vcmp.f32	s16, s16
 8011362:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011366:	d60c      	bvs.n	8011382 <sqrtf+0x32>
 8011368:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011388 <sqrtf+0x38>
 801136c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011370:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011374:	d505      	bpl.n	8011382 <sqrtf+0x32>
 8011376:	f7fb fb1d 	bl	800c9b4 <__errno>
 801137a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 801137e:	2321      	movs	r3, #33	; 0x21
 8011380:	6003      	str	r3, [r0, #0]
 8011382:	ecbd 8b02 	vpop	{d8}
 8011386:	bd08      	pop	{r3, pc}
 8011388:	00000000 	.word	0x00000000

0801138c <__ieee754_acosf>:
 801138c:	b508      	push	{r3, lr}
 801138e:	ee10 3a10 	vmov	r3, s0
 8011392:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8011396:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 801139a:	ed2d 8b0c 	vpush	{d8-d13}
 801139e:	d10a      	bne.n	80113b6 <__ieee754_acosf+0x2a>
 80113a0:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8011538 <__ieee754_acosf+0x1ac>
 80113a4:	ed9f 8a65 	vldr	s16, [pc, #404]	; 801153c <__ieee754_acosf+0x1b0>
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	bfd8      	it	le
 80113ac:	eeb0 0a48 	vmovle.f32	s0, s16
 80113b0:	ecbd 8b0c 	vpop	{d8-d13}
 80113b4:	bd08      	pop	{r3, pc}
 80113b6:	dd04      	ble.n	80113c2 <__ieee754_acosf+0x36>
 80113b8:	ee30 8a40 	vsub.f32	s16, s0, s0
 80113bc:	ee88 0a08 	vdiv.f32	s0, s16, s16
 80113c0:	e7f6      	b.n	80113b0 <__ieee754_acosf+0x24>
 80113c2:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80113c6:	da3c      	bge.n	8011442 <__ieee754_acosf+0xb6>
 80113c8:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 80113cc:	f340 80b1 	ble.w	8011532 <__ieee754_acosf+0x1a6>
 80113d0:	ee60 7a00 	vmul.f32	s15, s0, s0
 80113d4:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011540 <__ieee754_acosf+0x1b4>
 80113d8:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011544 <__ieee754_acosf+0x1b8>
 80113dc:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8011548 <__ieee754_acosf+0x1bc>
 80113e0:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801154c <__ieee754_acosf+0x1c0>
 80113e4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80113e8:	eddf 6a59 	vldr	s13, [pc, #356]	; 8011550 <__ieee754_acosf+0x1c4>
 80113ec:	eee7 6a27 	vfma.f32	s13, s14, s15
 80113f0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8011554 <__ieee754_acosf+0x1c8>
 80113f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80113f8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011558 <__ieee754_acosf+0x1cc>
 80113fc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8011400:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801155c <__ieee754_acosf+0x1d0>
 8011404:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8011408:	eddf 6a55 	vldr	s13, [pc, #340]	; 8011560 <__ieee754_acosf+0x1d4>
 801140c:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8011410:	eddf 6a54 	vldr	s13, [pc, #336]	; 8011564 <__ieee754_acosf+0x1d8>
 8011414:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011418:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8011568 <__ieee754_acosf+0x1dc>
 801141c:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8011420:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011424:	eee6 6a27 	vfma.f32	s13, s12, s15
 8011428:	ee27 7a27 	vmul.f32	s14, s14, s15
 801142c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8011430:	eea0 8a67 	vfms.f32	s16, s0, s15
 8011434:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801156c <__ieee754_acosf+0x1e0>
 8011438:	ee30 0a48 	vsub.f32	s0, s0, s16
 801143c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011440:	e7b6      	b.n	80113b0 <__ieee754_acosf+0x24>
 8011442:	2b00      	cmp	r3, #0
 8011444:	eddf da3e 	vldr	s27, [pc, #248]	; 8011540 <__ieee754_acosf+0x1b4>
 8011448:	eddf ca3e 	vldr	s25, [pc, #248]	; 8011544 <__ieee754_acosf+0x1b8>
 801144c:	ed9f ca40 	vldr	s24, [pc, #256]	; 8011550 <__ieee754_acosf+0x1c4>
 8011450:	eddf ba40 	vldr	s23, [pc, #256]	; 8011554 <__ieee754_acosf+0x1c8>
 8011454:	ed9f ba40 	vldr	s22, [pc, #256]	; 8011558 <__ieee754_acosf+0x1cc>
 8011458:	eddf 8a40 	vldr	s17, [pc, #256]	; 801155c <__ieee754_acosf+0x1d0>
 801145c:	ed9f da40 	vldr	s26, [pc, #256]	; 8011560 <__ieee754_acosf+0x1d4>
 8011460:	eddf aa39 	vldr	s21, [pc, #228]	; 8011548 <__ieee754_acosf+0x1bc>
 8011464:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8011564 <__ieee754_acosf+0x1d8>
 8011468:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8011568 <__ieee754_acosf+0x1dc>
 801146c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011470:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011474:	da28      	bge.n	80114c8 <__ieee754_acosf+0x13c>
 8011476:	ee30 0a09 	vadd.f32	s0, s0, s18
 801147a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801147e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011482:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8011486:	eeac ca80 	vfma.f32	s24, s25, s0
 801148a:	eeaa aa80 	vfma.f32	s20, s21, s0
 801148e:	eeec ba00 	vfma.f32	s23, s24, s0
 8011492:	eeea 9a00 	vfma.f32	s19, s20, s0
 8011496:	eeab ba80 	vfma.f32	s22, s23, s0
 801149a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801149e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 80114a2:	ee68 8a80 	vmul.f32	s17, s17, s0
 80114a6:	f000 f869 	bl	801157c <__ieee754_sqrtf>
 80114aa:	ee88 7a89 	vdiv.f32	s14, s17, s18
 80114ae:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011570 <__ieee754_acosf+0x1e4>
 80114b2:	eee0 7a07 	vfma.f32	s15, s0, s14
 80114b6:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80114ba:	ee77 7a80 	vadd.f32	s15, s15, s0
 80114be:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8011574 <__ieee754_acosf+0x1e8>
 80114c2:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80114c6:	e773      	b.n	80113b0 <__ieee754_acosf+0x24>
 80114c8:	ee39 8a40 	vsub.f32	s16, s18, s0
 80114cc:	ee28 8a27 	vmul.f32	s16, s16, s15
 80114d0:	eeb0 0a48 	vmov.f32	s0, s16
 80114d4:	f000 f852 	bl	801157c <__ieee754_sqrtf>
 80114d8:	eee8 ca2d 	vfma.f32	s25, s16, s27
 80114dc:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80114e0:	eeac ca88 	vfma.f32	s24, s25, s16
 80114e4:	eeaa aa88 	vfma.f32	s20, s21, s16
 80114e8:	eeec ba08 	vfma.f32	s23, s24, s16
 80114ec:	ee10 3a10 	vmov	r3, s0
 80114f0:	eeab ba88 	vfma.f32	s22, s23, s16
 80114f4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80114f8:	f023 030f 	bic.w	r3, r3, #15
 80114fc:	eeea 9a08 	vfma.f32	s19, s20, s16
 8011500:	ee07 3a90 	vmov	s15, r3
 8011504:	eeeb 8a08 	vfma.f32	s17, s22, s16
 8011508:	eeb0 6a48 	vmov.f32	s12, s16
 801150c:	eea7 6ae7 	vfms.f32	s12, s15, s15
 8011510:	eea9 9a88 	vfma.f32	s18, s19, s16
 8011514:	ee70 6a27 	vadd.f32	s13, s0, s15
 8011518:	ee68 8a88 	vmul.f32	s17, s17, s16
 801151c:	ee86 7a26 	vdiv.f32	s14, s12, s13
 8011520:	eec8 6a89 	vdiv.f32	s13, s17, s18
 8011524:	eea0 7a26 	vfma.f32	s14, s0, s13
 8011528:	ee37 0a87 	vadd.f32	s0, s15, s14
 801152c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8011530:	e73e      	b.n	80113b0 <__ieee754_acosf+0x24>
 8011532:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8011578 <__ieee754_acosf+0x1ec>
 8011536:	e73b      	b.n	80113b0 <__ieee754_acosf+0x24>
 8011538:	00000000 	.word	0x00000000
 801153c:	40490fdb 	.word	0x40490fdb
 8011540:	3811ef08 	.word	0x3811ef08
 8011544:	3a4f7f04 	.word	0x3a4f7f04
 8011548:	bf303361 	.word	0xbf303361
 801154c:	33a22168 	.word	0x33a22168
 8011550:	bd241146 	.word	0xbd241146
 8011554:	3e4e0aa8 	.word	0x3e4e0aa8
 8011558:	bea6b090 	.word	0xbea6b090
 801155c:	3e2aaaab 	.word	0x3e2aaaab
 8011560:	3d9dc62e 	.word	0x3d9dc62e
 8011564:	4001572d 	.word	0x4001572d
 8011568:	c019d139 	.word	0xc019d139
 801156c:	3fc90fda 	.word	0x3fc90fda
 8011570:	b3a22168 	.word	0xb3a22168
 8011574:	40490fda 	.word	0x40490fda
 8011578:	3fc90fdb 	.word	0x3fc90fdb

0801157c <__ieee754_sqrtf>:
 801157c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011580:	4770      	bx	lr

08011582 <fabsf>:
 8011582:	ee10 3a10 	vmov	r3, s0
 8011586:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801158a:	ee00 3a10 	vmov	s0, r3
 801158e:	4770      	bx	lr

08011590 <_init>:
 8011590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011592:	bf00      	nop
 8011594:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011596:	bc08      	pop	{r3}
 8011598:	469e      	mov	lr, r3
 801159a:	4770      	bx	lr

0801159c <_fini>:
 801159c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801159e:	bf00      	nop
 80115a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115a2:	bc08      	pop	{r3}
 80115a4:	469e      	mov	lr, r3
 80115a6:	4770      	bx	lr
