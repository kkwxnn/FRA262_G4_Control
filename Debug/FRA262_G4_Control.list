
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010fc8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004d4  08011168  08011168  00021168  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801163c  0801163c  00030430  2**0
                  CONTENTS
  4 .ARM          00000008  0801163c  0801163c  0002163c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011644  08011644  00030430  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011644  08011644  00021644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011648  08011648  00021648  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000430  20000000  0801164c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cc4  20000430  08011a7c  00030430  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200010f4  08011a7c  000310f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030430  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015609  00000000  00000000  00030460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002755  00000000  00000000  00045a69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001220  00000000  00000000  000481c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001150  00000000  00000000  000493e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000192eb  00000000  00000000  0004a530  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015beb  00000000  00000000  0006381b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a0261  00000000  00000000  00079406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00119667  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006478  00000000  00000000  001196b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000430 	.word	0x20000430
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011150 	.word	0x08011150

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000434 	.word	0x20000434
 80001dc:	08011150 	.word	0x08011150

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9aa 	b.w	8001004 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	; (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	; (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	468e      	mov	lr, r1
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d14d      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d42:	428a      	cmp	r2, r1
 8000d44:	4694      	mov	ip, r2
 8000d46:	d969      	bls.n	8000e1c <__udivmoddi4+0xe8>
 8000d48:	fab2 f282 	clz	r2, r2
 8000d4c:	b152      	cbz	r2, 8000d64 <__udivmoddi4+0x30>
 8000d4e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d52:	f1c2 0120 	rsb	r1, r2, #32
 8000d56:	fa20 f101 	lsr.w	r1, r0, r1
 8000d5a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d62:	4094      	lsls	r4, r2
 8000d64:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d68:	0c21      	lsrs	r1, r4, #16
 8000d6a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d6e:	fa1f f78c 	uxth.w	r7, ip
 8000d72:	fb08 e316 	mls	r3, r8, r6, lr
 8000d76:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d7a:	fb06 f107 	mul.w	r1, r6, r7
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d8a:	f080 811f 	bcs.w	8000fcc <__udivmoddi4+0x298>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 811c 	bls.w	8000fcc <__udivmoddi4+0x298>
 8000d94:	3e02      	subs	r6, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a5b      	subs	r3, r3, r1
 8000d9a:	b2a4      	uxth	r4, r4
 8000d9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000da0:	fb08 3310 	mls	r3, r8, r0, r3
 8000da4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000da8:	fb00 f707 	mul.w	r7, r0, r7
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x92>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000db8:	f080 810a 	bcs.w	8000fd0 <__udivmoddi4+0x29c>
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	f240 8107 	bls.w	8000fd0 <__udivmoddi4+0x29c>
 8000dc2:	4464      	add	r4, ip
 8000dc4:	3802      	subs	r0, #2
 8000dc6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dca:	1be4      	subs	r4, r4, r7
 8000dcc:	2600      	movs	r6, #0
 8000dce:	b11d      	cbz	r5, 8000dd8 <__udivmoddi4+0xa4>
 8000dd0:	40d4      	lsrs	r4, r2
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dd8:	4631      	mov	r1, r6
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d909      	bls.n	8000df6 <__udivmoddi4+0xc2>
 8000de2:	2d00      	cmp	r5, #0
 8000de4:	f000 80ef 	beq.w	8000fc6 <__udivmoddi4+0x292>
 8000de8:	2600      	movs	r6, #0
 8000dea:	e9c5 0100 	strd	r0, r1, [r5]
 8000dee:	4630      	mov	r0, r6
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	fab3 f683 	clz	r6, r3
 8000dfa:	2e00      	cmp	r6, #0
 8000dfc:	d14a      	bne.n	8000e94 <__udivmoddi4+0x160>
 8000dfe:	428b      	cmp	r3, r1
 8000e00:	d302      	bcc.n	8000e08 <__udivmoddi4+0xd4>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	f200 80f9 	bhi.w	8000ffa <__udivmoddi4+0x2c6>
 8000e08:	1a84      	subs	r4, r0, r2
 8000e0a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e0e:	2001      	movs	r0, #1
 8000e10:	469e      	mov	lr, r3
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d0e0      	beq.n	8000dd8 <__udivmoddi4+0xa4>
 8000e16:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e1a:	e7dd      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000e1c:	b902      	cbnz	r2, 8000e20 <__udivmoddi4+0xec>
 8000e1e:	deff      	udf	#255	; 0xff
 8000e20:	fab2 f282 	clz	r2, r2
 8000e24:	2a00      	cmp	r2, #0
 8000e26:	f040 8092 	bne.w	8000f4e <__udivmoddi4+0x21a>
 8000e2a:	eba1 010c 	sub.w	r1, r1, ip
 8000e2e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e32:	fa1f fe8c 	uxth.w	lr, ip
 8000e36:	2601      	movs	r6, #1
 8000e38:	0c20      	lsrs	r0, r4, #16
 8000e3a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e3e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e42:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e46:	fb0e f003 	mul.w	r0, lr, r3
 8000e4a:	4288      	cmp	r0, r1
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x12c>
 8000e4e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e52:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x12a>
 8000e58:	4288      	cmp	r0, r1
 8000e5a:	f200 80cb 	bhi.w	8000ff4 <__udivmoddi4+0x2c0>
 8000e5e:	4643      	mov	r3, r8
 8000e60:	1a09      	subs	r1, r1, r0
 8000e62:	b2a4      	uxth	r4, r4
 8000e64:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e68:	fb07 1110 	mls	r1, r7, r0, r1
 8000e6c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e70:	fb0e fe00 	mul.w	lr, lr, r0
 8000e74:	45a6      	cmp	lr, r4
 8000e76:	d908      	bls.n	8000e8a <__udivmoddi4+0x156>
 8000e78:	eb1c 0404 	adds.w	r4, ip, r4
 8000e7c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e80:	d202      	bcs.n	8000e88 <__udivmoddi4+0x154>
 8000e82:	45a6      	cmp	lr, r4
 8000e84:	f200 80bb 	bhi.w	8000ffe <__udivmoddi4+0x2ca>
 8000e88:	4608      	mov	r0, r1
 8000e8a:	eba4 040e 	sub.w	r4, r4, lr
 8000e8e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e92:	e79c      	b.n	8000dce <__udivmoddi4+0x9a>
 8000e94:	f1c6 0720 	rsb	r7, r6, #32
 8000e98:	40b3      	lsls	r3, r6
 8000e9a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e9e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ea2:	fa20 f407 	lsr.w	r4, r0, r7
 8000ea6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eaa:	431c      	orrs	r4, r3
 8000eac:	40f9      	lsrs	r1, r7
 8000eae:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000eb2:	fa00 f306 	lsl.w	r3, r0, r6
 8000eb6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eba:	0c20      	lsrs	r0, r4, #16
 8000ebc:	fa1f fe8c 	uxth.w	lr, ip
 8000ec0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ec4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ec8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ecc:	4288      	cmp	r0, r1
 8000ece:	fa02 f206 	lsl.w	r2, r2, r6
 8000ed2:	d90b      	bls.n	8000eec <__udivmoddi4+0x1b8>
 8000ed4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ed8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000edc:	f080 8088 	bcs.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee0:	4288      	cmp	r0, r1
 8000ee2:	f240 8085 	bls.w	8000ff0 <__udivmoddi4+0x2bc>
 8000ee6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eea:	4461      	add	r1, ip
 8000eec:	1a09      	subs	r1, r1, r0
 8000eee:	b2a4      	uxth	r4, r4
 8000ef0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ef4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ef8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000efc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f00:	458e      	cmp	lr, r1
 8000f02:	d908      	bls.n	8000f16 <__udivmoddi4+0x1e2>
 8000f04:	eb1c 0101 	adds.w	r1, ip, r1
 8000f08:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f0c:	d26c      	bcs.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f0e:	458e      	cmp	lr, r1
 8000f10:	d96a      	bls.n	8000fe8 <__udivmoddi4+0x2b4>
 8000f12:	3802      	subs	r0, #2
 8000f14:	4461      	add	r1, ip
 8000f16:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f1a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f1e:	eba1 010e 	sub.w	r1, r1, lr
 8000f22:	42a1      	cmp	r1, r4
 8000f24:	46c8      	mov	r8, r9
 8000f26:	46a6      	mov	lr, r4
 8000f28:	d356      	bcc.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f2a:	d053      	beq.n	8000fd4 <__udivmoddi4+0x2a0>
 8000f2c:	b15d      	cbz	r5, 8000f46 <__udivmoddi4+0x212>
 8000f2e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f32:	eb61 010e 	sbc.w	r1, r1, lr
 8000f36:	fa01 f707 	lsl.w	r7, r1, r7
 8000f3a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f3e:	40f1      	lsrs	r1, r6
 8000f40:	431f      	orrs	r7, r3
 8000f42:	e9c5 7100 	strd	r7, r1, [r5]
 8000f46:	2600      	movs	r6, #0
 8000f48:	4631      	mov	r1, r6
 8000f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f4e:	f1c2 0320 	rsb	r3, r2, #32
 8000f52:	40d8      	lsrs	r0, r3
 8000f54:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f58:	fa21 f303 	lsr.w	r3, r1, r3
 8000f5c:	4091      	lsls	r1, r2
 8000f5e:	4301      	orrs	r1, r0
 8000f60:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f64:	fa1f fe8c 	uxth.w	lr, ip
 8000f68:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f6c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f70:	0c0b      	lsrs	r3, r1, #16
 8000f72:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f76:	fb00 f60e 	mul.w	r6, r0, lr
 8000f7a:	429e      	cmp	r6, r3
 8000f7c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f80:	d908      	bls.n	8000f94 <__udivmoddi4+0x260>
 8000f82:	eb1c 0303 	adds.w	r3, ip, r3
 8000f86:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f8a:	d22f      	bcs.n	8000fec <__udivmoddi4+0x2b8>
 8000f8c:	429e      	cmp	r6, r3
 8000f8e:	d92d      	bls.n	8000fec <__udivmoddi4+0x2b8>
 8000f90:	3802      	subs	r0, #2
 8000f92:	4463      	add	r3, ip
 8000f94:	1b9b      	subs	r3, r3, r6
 8000f96:	b289      	uxth	r1, r1
 8000f98:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f9c:	fb07 3316 	mls	r3, r7, r6, r3
 8000fa0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fa4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fa8:	428b      	cmp	r3, r1
 8000faa:	d908      	bls.n	8000fbe <__udivmoddi4+0x28a>
 8000fac:	eb1c 0101 	adds.w	r1, ip, r1
 8000fb0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fb4:	d216      	bcs.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fb6:	428b      	cmp	r3, r1
 8000fb8:	d914      	bls.n	8000fe4 <__udivmoddi4+0x2b0>
 8000fba:	3e02      	subs	r6, #2
 8000fbc:	4461      	add	r1, ip
 8000fbe:	1ac9      	subs	r1, r1, r3
 8000fc0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fc4:	e738      	b.n	8000e38 <__udivmoddi4+0x104>
 8000fc6:	462e      	mov	r6, r5
 8000fc8:	4628      	mov	r0, r5
 8000fca:	e705      	b.n	8000dd8 <__udivmoddi4+0xa4>
 8000fcc:	4606      	mov	r6, r0
 8000fce:	e6e3      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	e6f8      	b.n	8000dc6 <__udivmoddi4+0x92>
 8000fd4:	454b      	cmp	r3, r9
 8000fd6:	d2a9      	bcs.n	8000f2c <__udivmoddi4+0x1f8>
 8000fd8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fdc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fe0:	3801      	subs	r0, #1
 8000fe2:	e7a3      	b.n	8000f2c <__udivmoddi4+0x1f8>
 8000fe4:	4646      	mov	r6, r8
 8000fe6:	e7ea      	b.n	8000fbe <__udivmoddi4+0x28a>
 8000fe8:	4620      	mov	r0, r4
 8000fea:	e794      	b.n	8000f16 <__udivmoddi4+0x1e2>
 8000fec:	4640      	mov	r0, r8
 8000fee:	e7d1      	b.n	8000f94 <__udivmoddi4+0x260>
 8000ff0:	46d0      	mov	r8, sl
 8000ff2:	e77b      	b.n	8000eec <__udivmoddi4+0x1b8>
 8000ff4:	3b02      	subs	r3, #2
 8000ff6:	4461      	add	r1, ip
 8000ff8:	e732      	b.n	8000e60 <__udivmoddi4+0x12c>
 8000ffa:	4630      	mov	r0, r6
 8000ffc:	e709      	b.n	8000e12 <__udivmoddi4+0xde>
 8000ffe:	4464      	add	r4, ip
 8001000:	3802      	subs	r0, #2
 8001002:	e742      	b.n	8000e8a <__udivmoddi4+0x156>

08001004 <__aeabi_idiv0>:
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop

08001008 <modbus_1t5_Timeout>:
void Modbus_frame_response();


// function for interrupt
void modbus_1t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
	//end of package flag set
	hModbus->Flag_T15TimeOut = 1;
 8001010:	4b04      	ldr	r3, [pc, #16]	; (8001024 <modbus_1t5_Timeout+0x1c>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2201      	movs	r2, #1
 8001016:	751a      	strb	r2, [r3, #20]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	2000044c 	.word	0x2000044c

08001028 <modbus_3t5_Timeout>:

void modbus_3t5_Timeout(TIM_HandleTypeDef *htim)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
	//return package flag set
	hModbus->Flag_T35TimeOut = 1;
 8001030:	4b04      	ldr	r3, [pc, #16]	; (8001044 <modbus_3t5_Timeout+0x1c>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2201      	movs	r2, #1
 8001036:	755a      	strb	r2, [r3, #21]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	2000044c 	.word	0x2000044c

08001048 <modbus_UART_Recived>:
void modbus_UART_Recived(UART_HandleTypeDef *huart,uint32_t pos)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]

	//restart timer / start timer of counting time with modbus RTU
	hModbus->Flag_URev =1;
 8001052:	4b15      	ldr	r3, [pc, #84]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	2201      	movs	r2, #1
 8001058:	759a      	strb	r2, [r3, #22]
	if(hModbus->modbusUartStructure.RxTail++<MODBUS_MESSAGEBUFFER_SIZE)
 800105a:	4b13      	ldr	r3, [pc, #76]	; (80010a8 <modbus_UART_Recived+0x60>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	f8b2 33a2 	ldrh.w	r3, [r2, #930]	; 0x3a2
 8001062:	1c59      	adds	r1, r3, #1
 8001064:	b289      	uxth	r1, r1
 8001066:	f8a2 13a2 	strh.w	r1, [r2, #930]	; 0x3a2
 800106a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800106e:	d210      	bcs.n	8001092 <modbus_UART_Recived+0x4a>
	{


	    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 8001070:	4b0d      	ldr	r3, [pc, #52]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	68d8      	ldr	r0, [r3, #12]
 8001076:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	4b0b      	ldr	r3, [pc, #44]	; (80010a8 <modbus_UART_Recived+0x60>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001082:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001086:	4413      	add	r3, r2
 8001088:	3302      	adds	r3, #2
 800108a:	2201      	movs	r2, #1
 800108c:	4619      	mov	r1, r3
 800108e:	f00a f8d8 	bl	800b242 <HAL_UART_Receive_IT>
	}
	__HAL_TIM_SET_COUNTER(hModbus->htim,0);
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <modbus_UART_Recived+0x60>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2200      	movs	r2, #0
 800109c:	625a      	str	r2, [r3, #36]	; 0x24

}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	2000044c 	.word	0x2000044c

080010ac <Modbus_init>:


void Modbus_init(ModbusHandleTypedef* hmodbus,u16u8_t* RegisterStartAddress)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
 80010b4:	6039      	str	r1, [r7, #0]
	hModbus = hmodbus;
 80010b6:	4a24      	ldr	r2, [pc, #144]	; (8001148 <Modbus_init+0x9c>)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	6013      	str	r3, [r2, #0]

	hModbus->RegisterAddress = RegisterStartAddress;
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <Modbus_init+0x9c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	605a      	str	r2, [r3, #4]

	//config timer interrupt
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_OC_DELAY_ELAPSED_CB_ID,(void*)modbus_1t5_Timeout);
 80010c4:	4b20      	ldr	r3, [pc, #128]	; (8001148 <Modbus_init+0x9c>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	691b      	ldr	r3, [r3, #16]
 80010ca:	4a20      	ldr	r2, [pc, #128]	; (800114c <Modbus_init+0xa0>)
 80010cc:	2114      	movs	r1, #20
 80010ce:	4618      	mov	r0, r3
 80010d0:	f009 fa24 	bl	800a51c <HAL_TIM_RegisterCallback>
	HAL_TIM_RegisterCallback(hModbus->htim,HAL_TIM_PERIOD_ELAPSED_CB_ID ,(void*)modbus_3t5_Timeout);
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <Modbus_init+0x9c>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	4a1d      	ldr	r2, [pc, #116]	; (8001150 <Modbus_init+0xa4>)
 80010dc:	210e      	movs	r1, #14
 80010de:	4618      	mov	r0, r3
 80010e0:	f009 fa1c 	bl	800a51c <HAL_TIM_RegisterCallback>

	//config UART interrupt
	HAL_UART_RegisterCallback(hModbus->huart,HAL_UART_RX_COMPLETE_CB_ID,(void*)modbus_UART_Recived);
 80010e4:	4b18      	ldr	r3, [pc, #96]	; (8001148 <Modbus_init+0x9c>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	68db      	ldr	r3, [r3, #12]
 80010ea:	4a1a      	ldr	r2, [pc, #104]	; (8001154 <Modbus_init+0xa8>)
 80010ec:	2103      	movs	r1, #3
 80010ee:	4618      	mov	r0, r3
 80010f0:	f009 ffba 	bl	800b068 <HAL_UART_RegisterCallback>
	//start Receive
    HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 80010f4:	4b14      	ldr	r3, [pc, #80]	; (8001148 <Modbus_init+0x9c>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	68d8      	ldr	r0, [r3, #12]
 80010fa:	4b13      	ldr	r3, [pc, #76]	; (8001148 <Modbus_init+0x9c>)
 80010fc:	681a      	ldr	r2, [r3, #0]
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <Modbus_init+0x9c>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001106:	f503 731c 	add.w	r3, r3, #624	; 0x270
 800110a:	4413      	add	r3, r2
 800110c:	3302      	adds	r3, #2
 800110e:	2201      	movs	r2, #1
 8001110:	4619      	mov	r1, r3
 8001112:	f00a f896 	bl	800b242 <HAL_UART_Receive_IT>


    if(hModbus->htim->State == HAL_TIM_STATE_READY)
 8001116:	4b0c      	ldr	r3, [pc, #48]	; (8001148 <Modbus_init+0x9c>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	691b      	ldr	r3, [r3, #16]
 800111c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d10c      	bne.n	8001140 <Modbus_init+0x94>
    	{
    		HAL_TIM_Base_Start_IT(hModbus->htim);
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <Modbus_init+0x9c>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	691b      	ldr	r3, [r3, #16]
 800112c:	4618      	mov	r0, r3
 800112e:	f008 fa79 	bl	8009624 <HAL_TIM_Base_Start_IT>
    		HAL_TIM_OnePulse_Start_IT(hModbus->htim, TIM_CHANNEL_1);
 8001132:	4b05      	ldr	r3, [pc, #20]	; (8001148 <Modbus_init+0x9c>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	691b      	ldr	r3, [r3, #16]
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f008 fcde 	bl	8009afc <HAL_TIM_OnePulse_Start_IT>
    	}

}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	2000044c 	.word	0x2000044c
 800114c:	08001009 	.word	0x08001009
 8001150:	08001029 	.word	0x08001029
 8001154:	08001049 	.word	0x08001049

08001158 <CRC16>:
} ;

unsigned short CRC16 ( puchMsg, usDataLen ) /* The function returns the CRC as a unsigned short type */
unsigned char *puchMsg ; /* message to calculate CRC upon */
unsigned short usDataLen ; /* quantity of bytes in message */
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	460b      	mov	r3, r1
 8001162:	803b      	strh	r3, [r7, #0]
	unsigned char uchCRCHi = 0xFF ; /* high byte of CRC initialized */
 8001164:	23ff      	movs	r3, #255	; 0xff
 8001166:	73fb      	strb	r3, [r7, #15]
	unsigned char uchCRCLo = 0xFF ; /* low byte of CRC initialized */
 8001168:	23ff      	movs	r3, #255	; 0xff
 800116a:	73bb      	strb	r3, [r7, #14]
	unsigned uIndex ; /* will index into CRC lookup table */
	while (usDataLen--) /* pass through message buffer */
 800116c:	e013      	b.n	8001196 <CRC16+0x3e>
	{
		uIndex = uchCRCLo ^ *puchMsg++ ; /* calculate the CRC */
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	607a      	str	r2, [r7, #4]
 8001174:	781a      	ldrb	r2, [r3, #0]
 8001176:	7bbb      	ldrb	r3, [r7, #14]
 8001178:	4053      	eors	r3, r2
 800117a:	b2db      	uxtb	r3, r3
 800117c:	60bb      	str	r3, [r7, #8]
		uchCRCLo = uchCRCHi ^ auchCRCHi[uIndex] ;
 800117e:	4a0f      	ldr	r2, [pc, #60]	; (80011bc <CRC16+0x64>)
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	4413      	add	r3, r2
 8001184:	781a      	ldrb	r2, [r3, #0]
 8001186:	7bfb      	ldrb	r3, [r7, #15]
 8001188:	4053      	eors	r3, r2
 800118a:	73bb      	strb	r3, [r7, #14]
		uchCRCHi = auchCRCLo[uIndex] ;
 800118c:	4a0c      	ldr	r2, [pc, #48]	; (80011c0 <CRC16+0x68>)
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	4413      	add	r3, r2
 8001192:	781b      	ldrb	r3, [r3, #0]
 8001194:	73fb      	strb	r3, [r7, #15]
	while (usDataLen--) /* pass through message buffer */
 8001196:	883b      	ldrh	r3, [r7, #0]
 8001198:	1e5a      	subs	r2, r3, #1
 800119a:	803a      	strh	r2, [r7, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d1e6      	bne.n	800116e <CRC16+0x16>
	}
	return (uchCRCHi << 8 | uchCRCLo) ;
 80011a0:	7bfb      	ldrb	r3, [r7, #15]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	b21b      	sxth	r3, r3
 80011aa:	4313      	orrs	r3, r2
 80011ac:	b21b      	sxth	r3, r3
 80011ae:	b29b      	uxth	r3, r3
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3714      	adds	r7, #20
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	20000100 	.word	0x20000100
 80011c0:	20000000 	.word	0x20000000

080011c4 <Modbus_Protocal_Worker>:



void Modbus_Protocal_Worker()
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
	switch(hModbus->Mstatus)
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	7e1b      	ldrb	r3, [r3, #24]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	2b03      	cmp	r3, #3
 80011d4:	d80a      	bhi.n	80011ec <Modbus_Protocal_Worker+0x28>
 80011d6:	a201      	add	r2, pc, #4	; (adr r2, 80011dc <Modbus_Protocal_Worker+0x18>)
 80011d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011dc:	080011f7 	.word	0x080011f7
 80011e0:	08001397 	.word	0x08001397
 80011e4:	08001283 	.word	0x08001283
 80011e8:	080012a9 	.word	0x080012a9
	{
	default:
	case Modbus_state_Init:
		/*init Modbus protocal*/

		hModbus->Mstatus = Modbus_state_Idle;
 80011ec:	4b78      	ldr	r3, [pc, #480]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	2201      	movs	r2, #1
 80011f2:	761a      	strb	r2, [r3, #24]
		break;
 80011f4:	e0e8      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
	case Modbus_state_Idle:
		/*Idle state*/

		//check that we have response message
		if(hModbus->TxCount)
 80011f6:	4b76      	ldr	r3, [pc, #472]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d002      	beq.n	8001208 <Modbus_Protocal_Worker+0x44>
		{
			Modbus_Emission();
 8001202:	f000 f9d7 	bl	80015b4 <Modbus_Emission>
 8001206:	e01c      	b.n	8001242 <Modbus_Protocal_Worker+0x7e>
		}

		// Received character
		else if(hModbus->Flag_URev)
 8001208:	4b71      	ldr	r3, [pc, #452]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	7d9b      	ldrb	r3, [r3, #22]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d017      	beq.n	8001242 <Modbus_Protocal_Worker+0x7e>
		{
			/*reset Timer flag*/
			hModbus->Flag_T15TimeOut = 0;
 8001212:	4b6f      	ldr	r3, [pc, #444]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2200      	movs	r2, #0
 8001218:	751a      	strb	r2, [r3, #20]
			hModbus->Flag_T35TimeOut = 0;
 800121a:	4b6d      	ldr	r3, [pc, #436]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2200      	movs	r2, #0
 8001220:	755a      	strb	r2, [r3, #21]
			__HAL_TIM_ENABLE(hModbus->htim);
 8001222:	4b6b      	ldr	r3, [pc, #428]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	691b      	ldr	r3, [r3, #16]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b68      	ldr	r3, [pc, #416]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	691b      	ldr	r3, [r3, #16]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f042 0201 	orr.w	r2, r2, #1
 8001238:	601a      	str	r2, [r3, #0]
			/*set state*/
			hModbus->Mstatus= Modbus_state_Reception;
 800123a:	4b65      	ldr	r3, [pc, #404]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2203      	movs	r2, #3
 8001240:	761a      	strb	r2, [r3, #24]
		}

		//check that if UART RX not start, start receiving
		if(hModbus->huart->RxState == HAL_UART_STATE_READY)
 8001242:	4b63      	ldr	r3, [pc, #396]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	68db      	ldr	r3, [r3, #12]
 8001248:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b20      	cmp	r3, #32
 8001250:	f040 80b3 	bne.w	80013ba <Modbus_Protocal_Worker+0x1f6>
		{
			hModbus->modbusUartStructure.RxTail =0;
 8001254:	4b5e      	ldr	r3, [pc, #376]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2200      	movs	r2, #0
 800125a:	f8a3 23a2 	strh.w	r2, [r3, #930]	; 0x3a2
			HAL_UART_Receive_IT(hModbus->huart, &(hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail]), 1);
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	68d8      	ldr	r0, [r3, #12]
 8001264:	4b5a      	ldr	r3, [pc, #360]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	4b59      	ldr	r3, [pc, #356]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001270:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8001274:	4413      	add	r3, r2
 8001276:	3302      	adds	r3, #2
 8001278:	2201      	movs	r2, #1
 800127a:	4619      	mov	r1, r3
 800127c:	f009 ffe1 	bl	800b242 <HAL_UART_Receive_IT>
		}
		break;
 8001280:	e09b      	b.n	80013ba <Modbus_Protocal_Worker+0x1f6>
	case Modbus_state_Reception:

		if(hModbus->Flag_T15TimeOut)
 8001282:	4b53      	ldr	r3, [pc, #332]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	7d1b      	ldrb	r3, [r3, #20]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f000 8098 	beq.w	80013be <Modbus_Protocal_Worker+0x1fa>
		{
			/*reset recived flag*/
			hModbus->Flag_URev =0;
 800128e:	4b50      	ldr	r3, [pc, #320]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	759a      	strb	r2, [r3, #22]
			hModbus->RecvStatus = Modbus_RecvFrame_Null;
 8001296:	4b4e      	ldr	r3, [pc, #312]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	22fe      	movs	r2, #254	; 0xfe
 800129c:	75da      	strb	r2, [r3, #23]

			/*compute CRC and Slave address*/



			hModbus->Mstatus = Modbus_state_ControlAndWaiting;
 800129e:	4b4c      	ldr	r3, [pc, #304]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	2204      	movs	r2, #4
 80012a4:	761a      	strb	r2, [r3, #24]
		}
		break;
 80012a6:	e08a      	b.n	80013be <Modbus_Protocal_Worker+0x1fa>
	case Modbus_state_ControlAndWaiting:
		/*Frame error , Not generate response , Clear buffer*/
		if(hModbus->Flag_URev)
 80012a8:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	7d9b      	ldrb	r3, [r3, #22]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d009      	beq.n	80012c6 <Modbus_Protocal_Worker+0x102>
		{

			if(!hModbus->RecvStatus)
 80012b2:	4b47      	ldr	r3, [pc, #284]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d103      	bne.n	80012c6 <Modbus_Protocal_Worker+0x102>
			{
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 80012be:	4b44      	ldr	r3, [pc, #272]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	22ff      	movs	r2, #255	; 0xff
 80012c4:	75da      	strb	r2, [r3, #23]
			}
		}

		/*Frame Calculation , calculate once*/
		if(hModbus->RecvStatus == Modbus_RecvFrame_Null)
 80012c6:	4b42      	ldr	r3, [pc, #264]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f993 3017 	ldrsb.w	r3, [r3, #23]
 80012ce:	f113 0f02 	cmn.w	r3, #2
 80012d2:	d150      	bne.n	8001376 <Modbus_Protocal_Worker+0x1b2>
		{
			hModbus->RecvStatus = Modbus_RecvFrame_Normal;
 80012d4:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2200      	movs	r2, #0
 80012da:	75da      	strb	r2, [r3, #23]
			// check CRC
			u16u8_t CalculateCRC;
			CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferRx,hModbus->modbusUartStructure.RxTail - 2);
 80012dc:	4b3c      	ldr	r3, [pc, #240]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f203 2272 	addw	r2, r3, #626	; 0x272
 80012e4:	4b3a      	ldr	r3, [pc, #232]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 80012ec:	3b02      	subs	r3, #2
 80012ee:	4619      	mov	r1, r3
 80012f0:	4610      	mov	r0, r2
 80012f2:	f7ff ff31 	bl	8001158 <CRC16>
 80012f6:	4603      	mov	r3, r0
 80012f8:	80bb      	strh	r3, [r7, #4]

			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 80012fa:	793a      	ldrb	r2, [r7, #4]
 80012fc:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80012fe:	6819      	ldr	r1, [r3, #0]
 8001300:	4b33      	ldr	r3, [pc, #204]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001308:	3b02      	subs	r3, #2
 800130a:	440b      	add	r3, r1
 800130c:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
 8001310:	429a      	cmp	r2, r3
 8001312:	d10c      	bne.n	800132e <Modbus_Protocal_Worker+0x16a>
			&& CalculateCRC.U8[1] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail -1]))
 8001314:	797a      	ldrb	r2, [r7, #5]
 8001316:	4b2e      	ldr	r3, [pc, #184]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001318:	6819      	ldr	r1, [r3, #0]
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001322:	3b01      	subs	r3, #1
 8001324:	440b      	add	r3, r1
 8001326:	f893 3272 	ldrb.w	r3, [r3, #626]	; 0x272
			if(!(CalculateCRC.U8[0] == hModbus->modbusUartStructure.MessageBufferRx[hModbus->modbusUartStructure.RxTail - 2]
 800132a:	429a      	cmp	r2, r3
 800132c:	d004      	beq.n	8001338 <Modbus_Protocal_Worker+0x174>
			{
				// communication unsuccessful
				hModbus->RecvStatus = Modbus_RecvFrame_FrameError;
 800132e:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	75da      	strb	r2, [r3, #23]
				break;
 8001336:	e047      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
			}

			//check Slave Address
			if(hModbus->modbusUartStructure.MessageBufferRx[0] != hModbus->slaveAddress)
 8001338:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f893 2272 	ldrb.w	r2, [r3, #626]	; 0x272
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	429a      	cmp	r2, r3
 8001348:	d113      	bne.n	8001372 <Modbus_Protocal_Worker+0x1ae>
				break;

			//copy recivced frame
			memcpy(hModbus->Rxframe,
 800134a:	4b21      	ldr	r3, [pc, #132]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f103 0019 	add.w	r0, r3, #25
					hModbus->modbusUartStructure.MessageBufferRx+1,
 8001352:	4b1f      	ldr	r3, [pc, #124]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f203 2372 	addw	r3, r3, #626	; 0x272
			memcpy(hModbus->Rxframe,
 800135a:	1c59      	adds	r1, r3, #1
					hModbus->modbusUartStructure.RxTail-3);
 800135c:	4b1c      	ldr	r3, [pc, #112]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8b3 33a2 	ldrh.w	r3, [r3, #930]	; 0x3a2
 8001364:	3b03      	subs	r3, #3
			memcpy(hModbus->Rxframe,
 8001366:	461a      	mov	r2, r3
 8001368:	f00b f92e 	bl	800c5c8 <memcpy>

			//execute command
			Modbus_frame_response();
 800136c:	f000 f90a 	bl	8001584 <Modbus_frame_response>
 8001370:	e001      	b.n	8001376 <Modbus_Protocal_Worker+0x1b2>
				break;
 8001372:	bf00      	nop
					}
		break;


	}
}
 8001374:	e028      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		if(hModbus->Flag_T35TimeOut)
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	7d5b      	ldrb	r3, [r3, #21]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d020      	beq.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
			hModbus->Mstatus = Modbus_state_Idle;
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	2201      	movs	r2, #1
 8001386:	761a      	strb	r2, [r3, #24]
			HAL_UART_AbortReceive(hModbus->huart);
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	4618      	mov	r0, r3
 8001390:	f00a f806 	bl	800b3a0 <HAL_UART_AbortReceive>
		break;
 8001394:	e015      	b.n	80013c2 <Modbus_Protocal_Worker+0x1fe>
		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80013a0:	b2db      	uxtb	r3, r3
 80013a2:	2b20      	cmp	r3, #32
 80013a4:	d10f      	bne.n	80013c6 <Modbus_Protocal_Worker+0x202>
			hModbus->TxCount=0;
 80013a6:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	2200      	movs	r2, #0
 80013ac:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
			hModbus->Mstatus = Modbus_state_Idle;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <Modbus_Protocal_Worker+0x20c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2201      	movs	r2, #1
 80013b6:	761a      	strb	r2, [r3, #24]
		break;
 80013b8:	e005      	b.n	80013c6 <Modbus_Protocal_Worker+0x202>
		break;
 80013ba:	bf00      	nop
 80013bc:	e004      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013be:	bf00      	nop
 80013c0:	e002      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c2:	bf00      	nop
 80013c4:	e000      	b.n	80013c8 <Modbus_Protocal_Worker+0x204>
		break;
 80013c6:	bf00      	nop
}
 80013c8:	bf00      	nop
 80013ca:	3708      	adds	r7, #8
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	2000044c 	.word	0x2000044c

080013d4 <modbusWrite1Register>:
void modbusWrite1Register() //function 06
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0

	//write data to register
	uint16_t startAddress = (hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]);
 80013da:	4b1e      	ldr	r3, [pc, #120]	; (8001454 <modbusWrite1Register+0x80>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	7e9b      	ldrb	r3, [r3, #26]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	4b1b      	ldr	r3, [pc, #108]	; (8001454 <modbusWrite1Register+0x80>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	7edb      	ldrb	r3, [r3, #27]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	80fb      	strh	r3, [r7, #6]

	if(startAddress > hModbus->RegisterSize)
 80013f2:	88fa      	ldrh	r2, [r7, #6]
 80013f4:	4b17      	ldr	r3, [pc, #92]	; (8001454 <modbusWrite1Register+0x80>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	429a      	cmp	r2, r3
 80013fc:	d903      	bls.n	8001406 <modbusWrite1Register+0x32>
		{
			 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80013fe:	2002      	movs	r0, #2
 8001400:	f000 f8a4 	bl	800154c <ModbusErrorReply>
			 return;
 8001404:	e023      	b.n	800144e <modbusWrite1Register+0x7a>
		}


	hModbus->RegisterAddress[startAddress].U8[1] = hModbus->Rxframe[3];
 8001406:	4b13      	ldr	r3, [pc, #76]	; (8001454 <modbusWrite1Register+0x80>)
 8001408:	681a      	ldr	r2, [r3, #0]
 800140a:	4b12      	ldr	r3, [pc, #72]	; (8001454 <modbusWrite1Register+0x80>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	6859      	ldr	r1, [r3, #4]
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	440b      	add	r3, r1
 8001416:	7f12      	ldrb	r2, [r2, #28]
 8001418:	705a      	strb	r2, [r3, #1]
	hModbus->RegisterAddress[startAddress].U8[0] = hModbus->Rxframe[4];
 800141a:	4b0e      	ldr	r3, [pc, #56]	; (8001454 <modbusWrite1Register+0x80>)
 800141c:	681a      	ldr	r2, [r3, #0]
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <modbusWrite1Register+0x80>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	6859      	ldr	r1, [r3, #4]
 8001424:	88fb      	ldrh	r3, [r7, #6]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	440b      	add	r3, r1
 800142a:	7f52      	ldrb	r2, [r2, #29]
 800142c:	701a      	strb	r2, [r3, #0]



	//generate response
	memcpy(hModbus->Txframe,
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <modbusWrite1Register+0x80>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f203 1045 	addw	r0, r3, #325	; 0x145
			hModbus->Rxframe,
 8001436:	4b07      	ldr	r3, [pc, #28]	; (8001454 <modbusWrite1Register+0x80>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	3319      	adds	r3, #25
	memcpy(hModbus->Txframe,
 800143c:	2208      	movs	r2, #8
 800143e:	4619      	mov	r1, r3
 8001440:	f00b f8c2 	bl	800c5c8 <memcpy>
			8);
	//set number of byte to sent
	hModbus->TxCount=5;
 8001444:	4b03      	ldr	r3, [pc, #12]	; (8001454 <modbusWrite1Register+0x80>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2205      	movs	r2, #5
 800144a:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271



}
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	2000044c 	.word	0x2000044c

08001458 <modbusRead1Register>:

void modbusRead1Register() // function 03
{
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0



	uint16_t numberOfDataToRead =((hModbus->Rxframe[3]<<8)+(hModbus->Rxframe[4]));
 800145e:	4b3a      	ldr	r3, [pc, #232]	; (8001548 <modbusRead1Register+0xf0>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	7f1b      	ldrb	r3, [r3, #28]
 8001464:	b29b      	uxth	r3, r3
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b37      	ldr	r3, [pc, #220]	; (8001548 <modbusRead1Register+0xf0>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	7f5b      	ldrb	r3, [r3, #29]
 8001470:	b29b      	uxth	r3, r3
 8001472:	4413      	add	r3, r2
 8001474:	80fb      	strh	r3, [r7, #6]
	uint16_t startAddress =((hModbus->Rxframe[1]<<8)+(hModbus->Rxframe[2]));
 8001476:	4b34      	ldr	r3, [pc, #208]	; (8001548 <modbusRead1Register+0xf0>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	7e9b      	ldrb	r3, [r3, #26]
 800147c:	b29b      	uxth	r3, r3
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b29a      	uxth	r2, r3
 8001482:	4b31      	ldr	r3, [pc, #196]	; (8001548 <modbusRead1Register+0xf0>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	7edb      	ldrb	r3, [r3, #27]
 8001488:	b29b      	uxth	r3, r3
 800148a:	4413      	add	r3, r2
 800148c:	80bb      	strh	r3, [r7, #4]

	//check quantity and address range

	if(numberOfDataToRead <1 ||numberOfDataToRead > 0x7D)
 800148e:	88fb      	ldrh	r3, [r7, #6]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d002      	beq.n	800149a <modbusRead1Register+0x42>
 8001494:	88fb      	ldrh	r3, [r7, #6]
 8001496:	2b7d      	cmp	r3, #125	; 0x7d
 8001498:	d903      	bls.n	80014a2 <modbusRead1Register+0x4a>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataValue);
 800149a:	2003      	movs	r0, #3
 800149c:	f000 f856 	bl	800154c <ModbusErrorReply>
		 return;
 80014a0:	e04e      	b.n	8001540 <modbusRead1Register+0xe8>
	}

	if(startAddress > hModbus->RegisterSize || (startAddress +  numberOfDataToRead) > hModbus->RegisterSize)
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	4b28      	ldr	r3, [pc, #160]	; (8001548 <modbusRead1Register+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d808      	bhi.n	80014c0 <modbusRead1Register+0x68>
 80014ae:	88ba      	ldrh	r2, [r7, #4]
 80014b0:	88fb      	ldrh	r3, [r7, #6]
 80014b2:	4413      	add	r3, r2
 80014b4:	461a      	mov	r2, r3
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <modbusRead1Register+0xf0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d903      	bls.n	80014c8 <modbusRead1Register+0x70>
	{
		 ModbusErrorReply(Modbus_RecvFrame_IllegalDataAddress);
 80014c0:	2002      	movs	r0, #2
 80014c2:	f000 f843 	bl	800154c <ModbusErrorReply>
		 return;
 80014c6:	e03b      	b.n	8001540 <modbusRead1Register+0xe8>
	}


	//generate response
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	; (8001548 <modbusRead1Register+0xf0>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2203      	movs	r2, #3
 80014ce:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = (2*numberOfDataToRead) & 0xFF;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	b2da      	uxtb	r2, r3
 80014d6:	4b1c      	ldr	r3, [pc, #112]	; (8001548 <modbusRead1Register+0xf0>)
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	0052      	lsls	r2, r2, #1
 80014dc:	b2d2      	uxtb	r2, r2
 80014de:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	register int i;
	for(i=0; i<numberOfDataToRead;i++)
 80014e2:	2400      	movs	r4, #0
 80014e4:	e020      	b.n	8001528 <modbusRead1Register+0xd0>
	{
		hModbus->Txframe[2*i+2]=hModbus->RegisterAddress[startAddress+i].U8[1];
 80014e6:	4b18      	ldr	r3, [pc, #96]	; (8001548 <modbusRead1Register+0xf0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	88bb      	ldrh	r3, [r7, #4]
 80014ee:	4423      	add	r3, r4
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	18d1      	adds	r1, r2, r3
 80014f4:	4b14      	ldr	r3, [pc, #80]	; (8001548 <modbusRead1Register+0xf0>)
 80014f6:	681a      	ldr	r2, [r3, #0]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	005b      	lsls	r3, r3, #1
 80014fc:	7849      	ldrb	r1, [r1, #1]
 80014fe:	4413      	add	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
		hModbus->Txframe[2*i+3]=hModbus->RegisterAddress[startAddress+i].U8[0];
 8001506:	4b10      	ldr	r3, [pc, #64]	; (8001548 <modbusRead1Register+0xf0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	685a      	ldr	r2, [r3, #4]
 800150c:	88bb      	ldrh	r3, [r7, #4]
 800150e:	4423      	add	r3, r4
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	18d1      	adds	r1, r2, r3
 8001514:	4b0c      	ldr	r3, [pc, #48]	; (8001548 <modbusRead1Register+0xf0>)
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	0063      	lsls	r3, r4, #1
 800151a:	3303      	adds	r3, #3
 800151c:	7809      	ldrb	r1, [r1, #0]
 800151e:	4413      	add	r3, r2
 8001520:	460a      	mov	r2, r1
 8001522:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	for(i=0; i<numberOfDataToRead;i++)
 8001526:	3401      	adds	r4, #1
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	429c      	cmp	r4, r3
 800152c:	dbdb      	blt.n	80014e6 <modbusRead1Register+0x8e>
	}
	hModbus->TxCount = 2+2*numberOfDataToRead;
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	3301      	adds	r3, #1
 8001532:	b2da      	uxtb	r2, r3
 8001534:	4b04      	ldr	r3, [pc, #16]	; (8001548 <modbusRead1Register+0xf0>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	0052      	lsls	r2, r2, #1
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271

}
 8001540:	370c      	adds	r7, #12
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	2000044c 	.word	0x2000044c

0800154c <ModbusErrorReply>:

void ModbusErrorReply(uint8_t Errorcode)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	4603      	mov	r3, r0
 8001554:	71fb      	strb	r3, [r7, #7]
	hModbus->Txframe[0] = Modbus_function_Read_Holding_Register | 0x80;
 8001556:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <ModbusErrorReply+0x34>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	2283      	movs	r2, #131	; 0x83
 800155c:	f883 2145 	strb.w	r2, [r3, #325]	; 0x145
	hModbus->Txframe[1] = Errorcode;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <ModbusErrorReply+0x34>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	79fa      	ldrb	r2, [r7, #7]
 8001566:	f883 2146 	strb.w	r2, [r3, #326]	; 0x146
	hModbus->TxCount = 2;
 800156a:	4b05      	ldr	r3, [pc, #20]	; (8001580 <ModbusErrorReply+0x34>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2202      	movs	r2, #2
 8001570:	f883 2271 	strb.w	r2, [r3, #625]	; 0x271
}
 8001574:	bf00      	nop
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr
 8001580:	2000044c 	.word	0x2000044c

08001584 <Modbus_frame_response>:

void Modbus_frame_response()
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	switch(hModbus->Rxframe[0]) //check funcion
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Modbus_frame_response+0x2c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	7e5b      	ldrb	r3, [r3, #25]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d004      	beq.n	800159c <Modbus_frame_response+0x18>
 8001592:	2b06      	cmp	r3, #6
 8001594:	d105      	bne.n	80015a2 <Modbus_frame_response+0x1e>
	{
	case Modbus_function_Write_SingleRegister:
		modbusWrite1Register();
 8001596:	f7ff ff1d 	bl	80013d4 <modbusWrite1Register>
		break;
 800159a:	e006      	b.n	80015aa <Modbus_frame_response+0x26>
	case Modbus_function_Read_Holding_Register:
		modbusRead1Register();
 800159c:	f7ff ff5c 	bl	8001458 <modbusRead1Register>
		break;
 80015a0:	e003      	b.n	80015aa <Modbus_frame_response+0x26>
	default:
		 ModbusErrorReply(Modbus_RecvFrame_IllegalFunction);
 80015a2:	2001      	movs	r0, #1
 80015a4:	f7ff ffd2 	bl	800154c <ModbusErrorReply>
		break;
 80015a8:	bf00      	nop

	}
}
 80015aa:	bf00      	nop
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	2000044c 	.word	0x2000044c

080015b4 <Modbus_Emission>:

void Modbus_Emission()
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
	if(hModbus->huart->gState==HAL_UART_STATE_READY)
 80015ba:	4b3d      	ldr	r3, [pc, #244]	; (80016b0 <Modbus_Emission+0xfc>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	68db      	ldr	r3, [r3, #12]
 80015c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015c4:	b2db      	uxtb	r3, r3
 80015c6:	2b20      	cmp	r3, #32
 80015c8:	d15e      	bne.n	8001688 <Modbus_Emission+0xd4>
	{
		//generate response package
		hModbus->modbusUartStructure.MessageBufferTx[0] = hModbus->slaveAddress;
 80015ca:	4b39      	ldr	r3, [pc, #228]	; (80016b0 <Modbus_Emission+0xfc>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	; (80016b0 <Modbus_Emission+0xfc>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		memcpy
		(
				hModbus->modbusUartStructure.MessageBufferTx+1,
 80015d8:	4b35      	ldr	r3, [pc, #212]	; (80016b0 <Modbus_Emission+0xfc>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f503 7369 	add.w	r3, r3, #932	; 0x3a4
		memcpy
 80015e0:	1c58      	adds	r0, r3, #1
				hModbus->Txframe,
 80015e2:	4b33      	ldr	r3, [pc, #204]	; (80016b0 <Modbus_Emission+0xfc>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f203 1145 	addw	r1, r3, #325	; 0x145
				hModbus->TxCount
 80015ea:	4b31      	ldr	r3, [pc, #196]	; (80016b0 <Modbus_Emission+0xfc>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
		memcpy
 80015f2:	461a      	mov	r2, r3
 80015f4:	f00a ffe8 	bl	800c5c8 <memcpy>
		);

		hModbus->modbusUartStructure.TxTail = hModbus->TxCount+3;
 80015f8:	4b2d      	ldr	r3, [pc, #180]	; (80016b0 <Modbus_Emission+0xfc>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f893 3271 	ldrb.w	r3, [r3, #625]	; 0x271
 8001600:	b29a      	uxth	r2, r3
 8001602:	4b2b      	ldr	r3, [pc, #172]	; (80016b0 <Modbus_Emission+0xfc>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	3203      	adds	r2, #3
 8001608:	b292      	uxth	r2, r2
 800160a:	f8a3 24d4 	strh.w	r2, [r3, #1236]	; 0x4d4

		u16u8_t CalculateCRC;
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800160e:	4b28      	ldr	r3, [pc, #160]	; (80016b0 <Modbus_Emission+0xfc>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	f503 7269 	add.w	r2, r3, #932	; 0x3a4
				hModbus->modbusUartStructure.TxTail - 2);
 8001616:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <Modbus_Emission+0xfc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
		CalculateCRC.U16 = CRC16(hModbus->modbusUartStructure.MessageBufferTx,
 800161e:	3b02      	subs	r3, #2
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff fd98 	bl	8001158 <CRC16>
 8001628:	4603      	mov	r3, r0
 800162a:	80bb      	strh	r3, [r7, #4]

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-2]
 800162c:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <Modbus_Emission+0xfc>)
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <Modbus_Emission+0xfc>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001638:	3b02      	subs	r3, #2
													 =CalculateCRC.U8[0];
 800163a:	7939      	ldrb	r1, [r7, #4]
 800163c:	4413      	add	r3, r2
 800163e:	460a      	mov	r2, r1
 8001640:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4

		hModbus->modbusUartStructure.MessageBufferTx[hModbus->modbusUartStructure.TxTail-1]
 8001644:	4b1a      	ldr	r3, [pc, #104]	; (80016b0 <Modbus_Emission+0xfc>)
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <Modbus_Emission+0xfc>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001650:	3b01      	subs	r3, #1
													 =CalculateCRC.U8[1];
 8001652:	7979      	ldrb	r1, [r7, #5]
 8001654:	4413      	add	r3, r2
 8001656:	460a      	mov	r2, r1
 8001658:	f883 23a4 	strb.w	r2, [r3, #932]	; 0x3a4


		//sent modbus

		if(hModbus->huart->gState==HAL_UART_STATE_READY)
 800165c:	4b14      	ldr	r3, [pc, #80]	; (80016b0 <Modbus_Emission+0xfc>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	68db      	ldr	r3, [r3, #12]
 8001662:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001666:	b2db      	uxtb	r3, r3
 8001668:	2b20      	cmp	r3, #32
 800166a:	d10d      	bne.n	8001688 <Modbus_Emission+0xd4>
		{
			HAL_UART_Transmit_DMA(hModbus->huart
 800166c:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <Modbus_Emission+0xfc>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	68d8      	ldr	r0, [r3, #12]
					,hModbus->modbusUartStructure.MessageBufferTx
 8001672:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <Modbus_Emission+0xfc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f503 7169 	add.w	r1, r3, #932	; 0x3a4
					,hModbus->modbusUartStructure.TxTail);
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <Modbus_Emission+0xfc>)
 800167c:	681b      	ldr	r3, [r3, #0]
			HAL_UART_Transmit_DMA(hModbus->huart
 800167e:	f8b3 34d4 	ldrh.w	r3, [r3, #1236]	; 0x4d4
 8001682:	461a      	mov	r2, r3
 8001684:	f009 fe0e 	bl	800b2a4 <HAL_UART_Transmit_DMA>



	}
	/*reset Timer flag*/
	hModbus->Flag_T15TimeOut = 0;
 8001688:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <Modbus_Emission+0xfc>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2200      	movs	r2, #0
 800168e:	751a      	strb	r2, [r3, #20]
	hModbus->Flag_T35TimeOut = 0;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <Modbus_Emission+0xfc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2200      	movs	r2, #0
 8001696:	755a      	strb	r2, [r3, #21]
	hModbus->Flag_URev =0;
 8001698:	4b05      	ldr	r3, [pc, #20]	; (80016b0 <Modbus_Emission+0xfc>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	2200      	movs	r2, #0
 800169e:	759a      	strb	r2, [r3, #22]
	/*set state*/
	hModbus->Mstatus= Modbus_state_Emission;
 80016a0:	4b03      	ldr	r3, [pc, #12]	; (80016b0 <Modbus_Emission+0xfc>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2202      	movs	r2, #2
 80016a6:	761a      	strb	r2, [r3, #24]
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	2000044c 	.word	0x2000044c
 80016b4:	00000000 	.word	0x00000000

080016b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ba:	b085      	sub	sp, #20
 80016bc:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80016be:	f003 fcfb 	bl	80050b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80016c2:	f000 fb47 	bl	8001d54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80016c6:	f000 fe39 	bl	800233c <MX_GPIO_Init>
  MX_DMA_Init();
 80016ca:	f000 fe01 	bl	80022d0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80016ce:	f000 fdd3 	bl	8002278 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 80016d2:	f000 fcc5 	bl	8002060 <MX_TIM3_Init>
  MX_TIM1_Init();
 80016d6:	f000 fc33 	bl	8001f40 <MX_TIM1_Init>
  MX_ADC1_Init();
 80016da:	f000 fba3 	bl	8001e24 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 80016de:	f000 fda1 	bl	8002224 <MX_USART1_UART_Init>
  MX_TIM11_Init();
 80016e2:	f000 fd4b 	bl	800217c <MX_TIM11_Init>
  MX_TIM9_Init();
 80016e6:	f000 fd0f 	bl	8002108 <MX_TIM9_Init>
  MX_I2C1_Init();
 80016ea:	f000 fbfb 	bl	8001ee4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  hmodbus.huart = &huart2;
 80016ee:	4ba8      	ldr	r3, [pc, #672]	; (8001990 <main+0x2d8>)
 80016f0:	4aa8      	ldr	r2, [pc, #672]	; (8001994 <main+0x2dc>)
 80016f2:	60da      	str	r2, [r3, #12]
  hmodbus.htim = &htim11;
 80016f4:	4ba6      	ldr	r3, [pc, #664]	; (8001990 <main+0x2d8>)
 80016f6:	4aa8      	ldr	r2, [pc, #672]	; (8001998 <main+0x2e0>)
 80016f8:	611a      	str	r2, [r3, #16]
  hmodbus.slaveAddress = 0x15;
 80016fa:	4ba5      	ldr	r3, [pc, #660]	; (8001990 <main+0x2d8>)
 80016fc:	2215      	movs	r2, #21
 80016fe:	701a      	strb	r2, [r3, #0]
  hmodbus.RegisterSize = 70;
 8001700:	4ba3      	ldr	r3, [pc, #652]	; (8001990 <main+0x2d8>)
 8001702:	2246      	movs	r2, #70	; 0x46
 8001704:	609a      	str	r2, [r3, #8]
  Modbus_init(&hmodbus, registerFrame);
 8001706:	49a5      	ldr	r1, [pc, #660]	; (800199c <main+0x2e4>)
 8001708:	48a1      	ldr	r0, [pc, #644]	; (8001990 <main+0x2d8>)
 800170a:	f7ff fccf 	bl	80010ac <Modbus_init>

  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 800170e:	2104      	movs	r1, #4
 8001710:	48a3      	ldr	r0, [pc, #652]	; (80019a0 <main+0x2e8>)
 8001712:	f008 fb0d 	bl	8009d30 <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 8001716:	48a3      	ldr	r0, [pc, #652]	; (80019a4 <main+0x2ec>)
 8001718:	f007 ff2a 	bl	8009570 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800171c:	2100      	movs	r1, #0
 800171e:	48a1      	ldr	r0, [pc, #644]	; (80019a4 <main+0x2ec>)
 8001720:	f008 f8d4 	bl	80098cc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001724:	2104      	movs	r1, #4
 8001726:	489f      	ldr	r0, [pc, #636]	; (80019a4 <main+0x2ec>)
 8001728:	f008 f8d0 	bl	80098cc <HAL_TIM_PWM_Start>

//  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
//  HAL_TIM_Base_Start_IT(&htim4); //Start IT Timer4

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 800172c:	4b9e      	ldr	r3, [pc, #632]	; (80019a8 <main+0x2f0>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	b2db      	uxtb	r3, r3
 8001732:	461a      	mov	r2, r3
 8001734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001738:	489c      	ldr	r0, [pc, #624]	; (80019ac <main+0x2f4>)
 800173a:	f005 f81f 	bl	800677c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800173e:	4b9c      	ldr	r3, [pc, #624]	; (80019b0 <main+0x2f8>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	b2db      	uxtb	r3, r3
 8001744:	461a      	mov	r2, r3
 8001746:	2110      	movs	r1, #16
 8001748:	4898      	ldr	r0, [pc, #608]	; (80019ac <main+0x2f4>)
 800174a:	f005 f817 	bl	800677c <HAL_GPIO_WritePin>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 800174e:	2202      	movs	r2, #2
 8001750:	4998      	ldr	r1, [pc, #608]	; (80019b4 <main+0x2fc>)
 8001752:	4899      	ldr	r0, [pc, #612]	; (80019b8 <main+0x300>)
 8001754:	f003 fd8a 	bl	800526c <HAL_ADC_Start_DMA>

  registerFrame[1].U16 = 0;
 8001758:	4b90      	ldr	r3, [pc, #576]	; (800199c <main+0x2e4>)
 800175a:	2200      	movs	r2, #0
 800175c:	805a      	strh	r2, [r3, #2]
  EndEffectorState = 0;	//SoftReset
 800175e:	4b97      	ldr	r3, [pc, #604]	; (80019bc <main+0x304>)
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
  EndEffectorWriteFlag = 1;
 8001764:	4b96      	ldr	r3, [pc, #600]	; (80019c0 <main+0x308>)
 8001766:	2201      	movs	r2, #1
 8001768:	701a      	strb	r2, [r3, #0]
  EndEffectorWrite();
 800176a:	f000 ff3f 	bl	80025ec <EndEffectorWrite>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  Modbus_Protocal_Worker();
 800176e:	f7ff fd29 	bl	80011c4 <Modbus_Protocal_Worker>
	  static uint32_t heartbeat = 0;
	  static uint32_t uart_time = 0;
	  if(heartbeat < HAL_GetTick())
 8001772:	f003 fd07 	bl	8005184 <HAL_GetTick>
 8001776:	4602      	mov	r2, r0
 8001778:	4b92      	ldr	r3, [pc, #584]	; (80019c4 <main+0x30c>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d909      	bls.n	8001794 <main+0xdc>
	  {
		  heartbeat = HAL_GetTick()+200;
 8001780:	f003 fd00 	bl	8005184 <HAL_GetTick>
 8001784:	4603      	mov	r3, r0
 8001786:	33c8      	adds	r3, #200	; 0xc8
 8001788:	4a8e      	ldr	r2, [pc, #568]	; (80019c4 <main+0x30c>)
 800178a:	6013      	str	r3, [r2, #0]
		  registerFrame[0].U16 = 22881;
 800178c:	4b83      	ldr	r3, [pc, #524]	; (800199c <main+0x2e4>)
 800178e:	f645 1261 	movw	r2, #22881	; 0x5961
 8001792:	801a      	strh	r2, [r3, #0]
	  }

	  if (huart1.gState == HAL_UART_STATE_READY && (HAL_GetTick() >= uart_time))
 8001794:	4b8c      	ldr	r3, [pc, #560]	; (80019c8 <main+0x310>)
 8001796:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b20      	cmp	r3, #32
 800179e:	d130      	bne.n	8001802 <main+0x14a>
 80017a0:	f003 fcf0 	bl	8005184 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	4b89      	ldr	r3, [pc, #548]	; (80019cc <main+0x314>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	429a      	cmp	r2, r3
 80017ac:	d329      	bcc.n	8001802 <main+0x14a>
	  {
		  sprintf(TxBuffer,"%d %.2f %.2f\r\n",position, setposition, setvelocity);
 80017ae:	4b88      	ldr	r3, [pc, #544]	; (80019d0 <main+0x318>)
 80017b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017b4:	461e      	mov	r6, r3
 80017b6:	4b87      	ldr	r3, [pc, #540]	; (80019d4 <main+0x31c>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fecc 	bl	8000558 <__aeabi_f2d>
 80017c0:	4604      	mov	r4, r0
 80017c2:	460d      	mov	r5, r1
 80017c4:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <main+0x320>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe fec5 	bl	8000558 <__aeabi_f2d>
 80017ce:	4602      	mov	r2, r0
 80017d0:	460b      	mov	r3, r1
 80017d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80017d6:	e9cd 4500 	strd	r4, r5, [sp]
 80017da:	4632      	mov	r2, r6
 80017dc:	497f      	ldr	r1, [pc, #508]	; (80019dc <main+0x324>)
 80017de:	4880      	ldr	r0, [pc, #512]	; (80019e0 <main+0x328>)
 80017e0:	f00b fd88 	bl	800d2f4 <siprintf>
		  HAL_UART_Transmit_IT(&huart1, (uint8_t *)TxBuffer, strlen(TxBuffer));
 80017e4:	487e      	ldr	r0, [pc, #504]	; (80019e0 <main+0x328>)
 80017e6:	f7fe fcfb 	bl	80001e0 <strlen>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b29b      	uxth	r3, r3
 80017ee:	461a      	mov	r2, r3
 80017f0:	497b      	ldr	r1, [pc, #492]	; (80019e0 <main+0x328>)
 80017f2:	4875      	ldr	r0, [pc, #468]	; (80019c8 <main+0x310>)
 80017f4:	f009 fce0 	bl	800b1b8 <HAL_UART_Transmit_IT>
		  uart_time += 20;
 80017f8:	4b74      	ldr	r3, [pc, #464]	; (80019cc <main+0x314>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3314      	adds	r3, #20
 80017fe:	4a73      	ldr	r2, [pc, #460]	; (80019cc <main+0x314>)
 8001800:	6013      	str	r3, [r2, #0]
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  VelocityApprox();
 8001802:	f001 f85d 	bl	80028c0 <VelocityApprox>
	  AccelerationApprox();
 8001806:	f001 f889 	bl	800291c <AccelerationApprox>
	  Routine(); //Sent Y Actual Position Velocity Acceleration to Base System
 800180a:	f001 f8a5 	bl	8002958 <Routine>

	  JoystickPinUpdate(); //Check Pin Flag
 800180e:	f001 f995 	bl	8002b3c <JoystickPinUpdate>

	  switch(scheduler)
 8001812:	4b74      	ldr	r3, [pc, #464]	; (80019e4 <main+0x32c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b07      	cmp	r3, #7
 8001818:	d8a9      	bhi.n	800176e <main+0xb6>
 800181a:	a201      	add	r2, pc, #4	; (adr r2, 8001820 <main+0x168>)
 800181c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001820:	08001841 	.word	0x08001841
 8001824:	08001867 	.word	0x08001867
 8001828:	080018f5 	.word	0x080018f5
 800182c:	08001a01 	.word	0x08001a01
 8001830:	08001b5b 	.word	0x08001b5b
 8001834:	08001ba3 	.word	0x08001ba3
 8001838:	08001ba9 	.word	0x08001ba9
 800183c:	08001beb 	.word	0x08001beb
	  {
	  //JoyStick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001840:	4b57      	ldr	r3, [pc, #348]	; (80019a0 <main+0x2e8>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001846:	b21a      	sxth	r2, r3
 8001848:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <main+0x318>)
 800184a:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form JoyStick
 800184c:	f001 fa12 	bl	8002c74 <JoystickControl>
		  JoystickLocationState();
 8001850:	f001 fade 	bl	8002e10 <JoystickLocationState>

		  if(registerFrame[1].U16 == 16) //Run Point Mode
 8001854:	4b51      	ldr	r3, [pc, #324]	; (800199c <main+0x2e4>)
 8001856:	885b      	ldrh	r3, [r3, #2]
 8001858:	2b10      	cmp	r3, #16
 800185a:	f040 8267 	bne.w	8001d2c <main+0x674>
		  {
			  scheduler = 7;
 800185e:	4b61      	ldr	r3, [pc, #388]	; (80019e4 <main+0x32c>)
 8001860:	2207      	movs	r2, #7
 8001862:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001864:	e262      	b.n	8001d2c <main+0x674>

	  //Go Pick
	  case 1 :
		  registerFrame[16].U16 = 8; //Y Moving Status: Go Pick
 8001866:	4b4d      	ldr	r3, [pc, #308]	; (800199c <main+0x2e4>)
 8001868:	2208      	movs	r2, #8
 800186a:	841a      	strh	r2, [r3, #32]
		  qf = (PickTray.hole_y[HoleSequence])/0.045;
 800186c:	4b5e      	ldr	r3, [pc, #376]	; (80019e8 <main+0x330>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a5e      	ldr	r2, [pc, #376]	; (80019ec <main+0x334>)
 8001872:	330c      	adds	r3, #12
 8001874:	009b      	lsls	r3, r3, #2
 8001876:	4413      	add	r3, r2
 8001878:	3304      	adds	r3, #4
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	4618      	mov	r0, r3
 800187e:	f7fe fe6b 	bl	8000558 <__aeabi_f2d>
 8001882:	a341      	add	r3, pc, #260	; (adr r3, 8001988 <main+0x2d0>)
 8001884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001888:	f7fe ffe8 	bl	800085c <__aeabi_ddiv>
 800188c:	4602      	mov	r2, r0
 800188e:	460b      	mov	r3, r1
 8001890:	4610      	mov	r0, r2
 8001892:	4619      	mov	r1, r3
 8001894:	f7ff f9b0 	bl	8000bf8 <__aeabi_d2f>
 8001898:	4603      	mov	r3, r0
 800189a:	4a55      	ldr	r2, [pc, #340]	; (80019f0 <main+0x338>)
 800189c:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PickTray.hole_x[HoleSequence]*10; //X-Axis Target Position Pick Tray
 800189e:	4b52      	ldr	r3, [pc, #328]	; (80019e8 <main+0x330>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a52      	ldr	r2, [pc, #328]	; (80019ec <main+0x334>)
 80018a4:	3304      	adds	r3, #4
 80018a6:	009b      	lsls	r3, r3, #2
 80018a8:	4413      	add	r3, r2
 80018aa:	edd3 7a00 	vldr	s15, [r3]
 80018ae:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80018b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	b29a      	uxth	r2, r3
 80018c0:	4b36      	ldr	r3, [pc, #216]	; (800199c <main+0x2e4>)
 80018c2:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 80018c6:	4b35      	ldr	r3, [pc, #212]	; (800199c <main+0x2e4>)
 80018c8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80018cc:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 80018d0:	4b32      	ldr	r3, [pc, #200]	; (800199c <main+0x2e4>)
 80018d2:	2203      	movs	r2, #3
 80018d4:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 80018d8:	4b30      	ldr	r3, [pc, #192]	; (800199c <main+0x2e4>)
 80018da:	2202      	movs	r2, #2
 80018dc:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 80018e0:	4b44      	ldr	r3, [pc, #272]	; (80019f4 <main+0x33c>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 80018e6:	4844      	ldr	r0, [pc, #272]	; (80019f8 <main+0x340>)
 80018e8:	f007 fe9c 	bl	8009624 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 80018ec:	4b3d      	ldr	r3, [pc, #244]	; (80019e4 <main+0x32c>)
 80018ee:	2203      	movs	r2, #3
 80018f0:	601a      	str	r2, [r3, #0]
		  break;
 80018f2:	e220      	b.n	8001d36 <main+0x67e>

	  //Go Place
	  case 2 :
		  registerFrame[16].U16 = 16; //Y Moving Status: Go Place
 80018f4:	4b29      	ldr	r3, [pc, #164]	; (800199c <main+0x2e4>)
 80018f6:	2210      	movs	r2, #16
 80018f8:	841a      	strh	r2, [r3, #32]
		  qf = (PlaceTray.hole_y[HoleSequence])/0.045;
 80018fa:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <main+0x330>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a3f      	ldr	r2, [pc, #252]	; (80019fc <main+0x344>)
 8001900:	330c      	adds	r3, #12
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	4413      	add	r3, r2
 8001906:	3304      	adds	r3, #4
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe fe24 	bl	8000558 <__aeabi_f2d>
 8001910:	a31d      	add	r3, pc, #116	; (adr r3, 8001988 <main+0x2d0>)
 8001912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001916:	f7fe ffa1 	bl	800085c <__aeabi_ddiv>
 800191a:	4602      	mov	r2, r0
 800191c:	460b      	mov	r3, r1
 800191e:	4610      	mov	r0, r2
 8001920:	4619      	mov	r1, r3
 8001922:	f7ff f969 	bl	8000bf8 <__aeabi_d2f>
 8001926:	4603      	mov	r3, r0
 8001928:	4a31      	ldr	r2, [pc, #196]	; (80019f0 <main+0x338>)
 800192a:	6013      	str	r3, [r2, #0]
		  registerFrame[65].U16 = PlaceTray.hole_x[HoleSequence]*10; //X-Axis Target Position Place Tray
 800192c:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <main+0x330>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a32      	ldr	r2, [pc, #200]	; (80019fc <main+0x344>)
 8001932:	3304      	adds	r3, #4
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	4413      	add	r3, r2
 8001938:	edd3 7a00 	vldr	s15, [r3]
 800193c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001940:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001944:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001948:	ee17 3a90 	vmov	r3, s15
 800194c:	b29a      	uxth	r2, r3
 800194e:	4b13      	ldr	r3, [pc, #76]	; (800199c <main+0x2e4>)
 8001950:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <main+0x2e4>)
 8001956:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800195a:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 3;
 800195e:	4b0f      	ldr	r3, [pc, #60]	; (800199c <main+0x2e4>)
 8001960:	2203      	movs	r2, #3
 8001962:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  registerFrame[64].U16 = 2; //X Moving Status: Run
 8001966:	4b0d      	ldr	r3, [pc, #52]	; (800199c <main+0x2e4>)
 8001968:	2202      	movs	r2, #2
 800196a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  Trajectstate = 0;
 800196e:	4b21      	ldr	r3, [pc, #132]	; (80019f4 <main+0x33c>)
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001974:	4820      	ldr	r0, [pc, #128]	; (80019f8 <main+0x340>)
 8001976:	f007 fe55 	bl	8009624 <HAL_TIM_Base_Start_IT>
		  scheduler = 3;
 800197a:	4b1a      	ldr	r3, [pc, #104]	; (80019e4 <main+0x32c>)
 800197c:	2203      	movs	r2, #3
 800197e:	601a      	str	r2, [r3, #0]
		  break;
 8001980:	e1d9      	b.n	8001d36 <main+0x67e>
 8001982:	bf00      	nop
 8001984:	f3af 8000 	nop.w
 8001988:	70a3d70a 	.word	0x70a3d70a
 800198c:	3fa70a3d 	.word	0x3fa70a3d
 8001990:	20000b08 	.word	0x20000b08
 8001994:	20000890 	.word	0x20000890
 8001998:	20000768 	.word	0x20000768
 800199c:	20000fe0 	.word	0x20000fe0
 80019a0:	20000600 	.word	0x20000600
 80019a4:	2000054c 	.word	0x2000054c
 80019a8:	2000020c 	.word	0x2000020c
 80019ac:	40020400 	.word	0x40020400
 80019b0:	20000208 	.word	0x20000208
 80019b4:	20000aec 	.word	0x20000aec
 80019b8:	20000450 	.word	0x20000450
 80019bc:	20000b00 	.word	0x20000b00
 80019c0:	20000af8 	.word	0x20000af8
 80019c4:	200010c4 	.word	0x200010c4
 80019c8:	2000081c 	.word	0x2000081c
 80019cc:	200010c8 	.word	0x200010c8
 80019d0:	200009ac 	.word	0x200009ac
 80019d4:	200009b8 	.word	0x200009b8
 80019d8:	200009d8 	.word	0x200009d8
 80019dc:	08011168 	.word	0x08011168
 80019e0:	2000106c 	.word	0x2000106c
 80019e4:	20000200 	.word	0x20000200
 80019e8:	20000964 	.word	0x20000964
 80019ec:	200009e0 	.word	0x200009e0
 80019f0:	20000974 	.word	0x20000974
 80019f4:	2000096c 	.word	0x2000096c
 80019f8:	200006b4 	.word	0x200006b4
 80019fc:	20000a44 	.word	0x20000a44

	  //Trajectory
	  case 3:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001a00:	4ba5      	ldr	r3, [pc, #660]	; (8001c98 <main+0x5e0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a06:	b21a      	sxth	r2, r3
 8001a08:	4ba4      	ldr	r3, [pc, #656]	; (8001c9c <main+0x5e4>)
 8001a0a:	801a      	strh	r2, [r3, #0]
		  static uint32_t timestamp0 = 0;
		  if(HAL_GetTick() > timestamp0)
 8001a0c:	f003 fbba 	bl	8005184 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	4ba3      	ldr	r3, [pc, #652]	; (8001ca0 <main+0x5e8>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	429a      	cmp	r2, r3
 8001a18:	d909      	bls.n	8001a2e <main+0x376>
		  {
			  timestamp0 = HAL_GetTick() + 1;
 8001a1a:	f003 fbb3 	bl	8005184 <HAL_GetTick>
 8001a1e:	4603      	mov	r3, r0
 8001a20:	3301      	adds	r3, #1
 8001a22:	4a9f      	ldr	r2, [pc, #636]	; (8001ca0 <main+0x5e8>)
 8001a24:	6013      	str	r3, [r2, #0]
			  VelocityApprox();
 8001a26:	f000 ff4b 	bl	80028c0 <VelocityApprox>
			  AccelerationApprox();
 8001a2a:	f000 ff77 	bl	800291c <AccelerationApprox>
		  }

		  //PWM & Motor drive & PID
		  static uint32_t timestamp2 = 0;
		  if (HAL_GetTick()>= timestamp2)
 8001a2e:	f003 fba9 	bl	8005184 <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	4b9b      	ldr	r3, [pc, #620]	; (8001ca4 <main+0x5ec>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d33b      	bcc.n	8001ab4 <main+0x3fc>
		  {
			  timestamp2 = HAL_GetTick() + 1;
 8001a3c:	f003 fba2 	bl	8005184 <HAL_GetTick>
 8001a40:	4603      	mov	r3, r0
 8001a42:	3301      	adds	r3, #1
 8001a44:	4a97      	ldr	r2, [pc, #604]	; (8001ca4 <main+0x5ec>)
 8001a46:	6013      	str	r3, [r2, #0]
			  duty = PIDcal();
 8001a48:	f000 ffe6 	bl	8002a18 <PIDcal>
 8001a4c:	eef0 7a40 	vmov.f32	s15, s0
 8001a50:	4b95      	ldr	r3, [pc, #596]	; (8001ca8 <main+0x5f0>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
			  if (duty >= 0)
 8001a56:	4b94      	ldr	r3, [pc, #592]	; (8001ca8 <main+0x5f0>)
 8001a58:	edd3 7a00 	vldr	s15, [r3]
 8001a5c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	db0e      	blt.n	8001a84 <main+0x3cc>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001a66:	4b91      	ldr	r3, [pc, #580]	; (8001cac <main+0x5f4>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	639a      	str	r2, [r3, #56]	; 0x38
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001a6e:	4b8e      	ldr	r3, [pc, #568]	; (8001ca8 <main+0x5f0>)
 8001a70:	edd3 7a00 	vldr	s15, [r3]
 8001a74:	4b8d      	ldr	r3, [pc, #564]	; (8001cac <main+0x5f4>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	635a      	str	r2, [r3, #52]	; 0x34
 8001a82:	e017      	b.n	8001ab4 <main+0x3fc>
			  }
			  else if (duty < 0)
 8001a84:	4b88      	ldr	r3, [pc, #544]	; (8001ca8 <main+0x5f0>)
 8001a86:	edd3 7a00 	vldr	s15, [r3]
 8001a8a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a92:	d50f      	bpl.n	8001ab4 <main+0x3fc>
			  {
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001a94:	4b85      	ldr	r3, [pc, #532]	; (8001cac <main+0x5f4>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	635a      	str	r2, [r3, #52]	; 0x34
				  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001a9c:	4b82      	ldr	r3, [pc, #520]	; (8001ca8 <main+0x5f0>)
 8001a9e:	edd3 7a00 	vldr	s15, [r3]
 8001aa2:	eef1 7a67 	vneg.f32	s15, s15
 8001aa6:	4b81      	ldr	r3, [pc, #516]	; (8001cac <main+0x5f4>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aae:	ee17 2a90 	vmov	r2, s15
 8001ab2:	639a      	str	r2, [r3, #56]	; 0x38
			  }
		  }

		  // Check Final Position
		  if(position >= qf - 4 && position <= qf + 4 && registerFrame[64].U16 == 0) //&& registerFrame[64].U16 == 0
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <main+0x5e4>)
 8001ab6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001aba:	ee07 3a90 	vmov	s15, r3
 8001abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ac2:	4b7b      	ldr	r3, [pc, #492]	; (8001cb0 <main+0x5f8>)
 8001ac4:	edd3 7a00 	vldr	s15, [r3]
 8001ac8:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001acc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001ad0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad8:	db33      	blt.n	8001b42 <main+0x48a>
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <main+0x5e4>)
 8001adc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ae0:	ee07 3a90 	vmov	s15, r3
 8001ae4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ae8:	4b71      	ldr	r3, [pc, #452]	; (8001cb0 <main+0x5f8>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8001af6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001afa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001afe:	d820      	bhi.n	8001b42 <main+0x48a>
 8001b00:	4b6c      	ldr	r3, [pc, #432]	; (8001cb4 <main+0x5fc>)
 8001b02:	f8b3 3080 	ldrh.w	r3, [r3, #128]	; 0x80
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d11b      	bne.n	8001b42 <main+0x48a>
		  {
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001b0a:	4b68      	ldr	r3, [pc, #416]	; (8001cac <main+0x5f4>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2200      	movs	r2, #0
 8001b10:	635a      	str	r2, [r3, #52]	; 0x34
			  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001b12:	4b66      	ldr	r3, [pc, #408]	; (8001cac <main+0x5f4>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	2200      	movs	r2, #0
 8001b18:	639a      	str	r2, [r3, #56]	; 0x38

			  HAL_TIM_Base_Stop_IT(&htim9); //Stop IT Timer9
 8001b1a:	4867      	ldr	r0, [pc, #412]	; (8001cb8 <main+0x600>)
 8001b1c:	f007 fde4 	bl	80096e8 <HAL_TIM_Base_Stop_IT>

			  if(PointModeflag == 1)
 8001b20:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <main+0x604>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	2b01      	cmp	r3, #1
 8001b26:	d106      	bne.n	8001b36 <main+0x47e>
			  {
				  registerFrame[16].U16 = 0;
 8001b28:	4b62      	ldr	r3, [pc, #392]	; (8001cb4 <main+0x5fc>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	841a      	strh	r2, [r3, #32]
				  scheduler = 0;
 8001b2e:	4b64      	ldr	r3, [pc, #400]	; (8001cc0 <main+0x608>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
 8001b34:	e005      	b.n	8001b42 <main+0x48a>
			  }
			  else
			  {
				  // End Effector
				  EndEffectorWriteFlag = 1;
 8001b36:	4b63      	ldr	r3, [pc, #396]	; (8001cc4 <main+0x60c>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
				  scheduler = 4;
 8001b3c:	4b60      	ldr	r3, [pc, #384]	; (8001cc0 <main+0x608>)
 8001b3e:	2204      	movs	r2, #4
 8001b40:	601a      	str	r2, [r3, #0]
			  }

		  }

		  // Reset Button
		  if (ResetButton.flag == 1)
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <main+0x610>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	f040 80f2 	bne.w	8001d30 <main+0x678>
		  {
			  ResetButton.flag = 0;
 8001b4c:	4b5e      	ldr	r3, [pc, #376]	; (8001cc8 <main+0x610>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	609a      	str	r2, [r3, #8]
			  scheduler = 0;
 8001b52:	4b5b      	ldr	r3, [pc, #364]	; (8001cc0 <main+0x608>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	601a      	str	r2, [r3, #0]
		  }
		  break;
 8001b58:	e0ea      	b.n	8001d30 <main+0x678>

	  //Proximity
	  case 4 :
		  if (HoleSequence < 9)
 8001b5a:	4b5c      	ldr	r3, [pc, #368]	; (8001ccc <main+0x614>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	dc13      	bgt.n	8001b8a <main+0x4d2>
		  {
			  if (TaskType == 1)
 8001b62:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <main+0x618>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d105      	bne.n	8001b76 <main+0x4be>
			  {
				  EndEffectorState = 4;			//Pick
 8001b6a:	4b5a      	ldr	r3, [pc, #360]	; (8001cd4 <main+0x61c>)
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001b70:	f000 fd3c 	bl	80025ec <EndEffectorWrite>
 8001b74:	e009      	b.n	8001b8a <main+0x4d2>
//				  TaskType = -1; 			// TestYesterday
//				  HAL_Delay(2000);		    // TestYesterday
//				  scheduler = 2; 			// TestYesterday
			  }
			  else if (TaskType == -1)
 8001b76:	4b56      	ldr	r3, [pc, #344]	; (8001cd0 <main+0x618>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b7e:	d104      	bne.n	8001b8a <main+0x4d2>
			  {
				  EndEffectorState = 5;			//Place
 8001b80:	4b54      	ldr	r3, [pc, #336]	; (8001cd4 <main+0x61c>)
 8001b82:	2205      	movs	r2, #5
 8001b84:	601a      	str	r2, [r3, #0]
				  EndEffectorWrite();
 8001b86:	f000 fd31 	bl	80025ec <EndEffectorWrite>
//				  {
//					  scheduler = 1; 		// TestYesterday
//				  }
			  }
		  }
		  if (ResetButton.flag == 1)
 8001b8a:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <main+0x610>)
 8001b8c:	689b      	ldr	r3, [r3, #8]
 8001b8e:	2b01      	cmp	r3, #1
 8001b90:	f040 80d0 	bne.w	8001d34 <main+0x67c>
			  {
				  ResetButton.flag = 0;
 8001b94:	4b4c      	ldr	r3, [pc, #304]	; (8001cc8 <main+0x610>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	609a      	str	r2, [r3, #8]
				  scheduler = 0;
 8001b9a:	4b49      	ldr	r3, [pc, #292]	; (8001cc0 <main+0x608>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
			  }

		  break;
 8001ba0:	e0c8      	b.n	8001d34 <main+0x67c>

	  //Homing
	  case 5:
		  Homing();
 8001ba2:	f000 fcc3 	bl	800252c <Homing>
		  break;
 8001ba6:	e0c6      	b.n	8001d36 <main+0x67e>

	  //Emergency
	  case 6:
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001ba8:	4b40      	ldr	r3, [pc, #256]	; (8001cac <main+0x5f4>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
		  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001bb0:	4b3e      	ldr	r3, [pc, #248]	; (8001cac <main+0x5f4>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == 1)
 8001bb8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001bbc:	4846      	ldr	r0, [pc, #280]	; (8001cd8 <main+0x620>)
 8001bbe:	f004 fdc5 	bl	800674c <HAL_GPIO_ReadPin>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d110      	bne.n	8001bea <main+0x532>
		  {
			  Emercount = 0;
 8001bc8:	4b44      	ldr	r3, [pc, #272]	; (8001cdc <main+0x624>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	601a      	str	r2, [r3, #0]
			  EndEffectorState = 8;		//Quit Emergency
 8001bce:	4b41      	ldr	r3, [pc, #260]	; (8001cd4 <main+0x61c>)
 8001bd0:	2208      	movs	r2, #8
 8001bd2:	601a      	str	r2, [r3, #0]
			  EndEffectorWriteFlag = 1;
 8001bd4:	4b3b      	ldr	r3, [pc, #236]	; (8001cc4 <main+0x60c>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	701a      	strb	r2, [r3, #0]
			  EndEffectorWrite();
 8001bda:	f000 fd07 	bl	80025ec <EndEffectorWrite>
			  Proximity = 3;
 8001bde:	4b40      	ldr	r3, [pc, #256]	; (8001ce0 <main+0x628>)
 8001be0:	2203      	movs	r2, #3
 8001be2:	601a      	str	r2, [r3, #0]
			  scheduler = 5;
 8001be4:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <main+0x608>)
 8001be6:	2205      	movs	r2, #5
 8001be8:	601a      	str	r2, [r3, #0]
		  }

	  //Go Point
	  case 7:
		  registerFrame[1].U16 = 0;
 8001bea:	4b32      	ldr	r3, [pc, #200]	; (8001cb4 <main+0x5fc>)
 8001bec:	2200      	movs	r2, #0
 8001bee:	805a      	strh	r2, [r3, #2]
		  registerFrame[16].U16 = 32;
 8001bf0:	4b30      	ldr	r3, [pc, #192]	; (8001cb4 <main+0x5fc>)
 8001bf2:	2220      	movs	r2, #32
 8001bf4:	841a      	strh	r2, [r3, #32]

		  //X Axis
		  GoalX = registerFrame[48].U16;  	// Use int16 to store -integer
 8001bf6:	4b2f      	ldr	r3, [pc, #188]	; (8001cb4 <main+0x5fc>)
 8001bf8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	4b39      	ldr	r3, [pc, #228]	; (8001ce4 <main+0x62c>)
 8001c00:	801a      	strh	r2, [r3, #0]
		  registerFrame[65].U16 = GoalX;  	// x-axis Target Position
 8001c02:	4b38      	ldr	r3, [pc, #224]	; (8001ce4 <main+0x62c>)
 8001c04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <main+0x5fc>)
 8001c0c:	f8a3 2082 	strh.w	r2, [r3, #130]	; 0x82
		  registerFrame[66].U16 = 3000;   	// Max Speed
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <main+0x5fc>)
 8001c12:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001c16:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
		  registerFrame[67].U16 = 2;        // 500 ms
 8001c1a:	4b26      	ldr	r3, [pc, #152]	; (8001cb4 <main+0x5fc>)
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f8a3 2086 	strh.w	r2, [r3, #134]	; 0x86
		  if(registerFrame[65].U16 != last_GoalX){
 8001c22:	4b24      	ldr	r3, [pc, #144]	; (8001cb4 <main+0x5fc>)
 8001c24:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001c28:	461a      	mov	r2, r3
 8001c2a:	4b2f      	ldr	r3, [pc, #188]	; (8001ce8 <main+0x630>)
 8001c2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d003      	beq.n	8001c3c <main+0x584>
			  registerFrame[64].U16 = 2;  	// RUN
 8001c34:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <main+0x5fc>)
 8001c36:	2202      	movs	r2, #2
 8001c38:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		  }
		  last_GoalX = registerFrame[65].U16; // press RUN in Base System
 8001c3c:	4b1d      	ldr	r3, [pc, #116]	; (8001cb4 <main+0x5fc>)
 8001c3e:	f8b3 3082 	ldrh.w	r3, [r3, #130]	; 0x82
 8001c42:	b21a      	sxth	r2, r3
 8001c44:	4b28      	ldr	r3, [pc, #160]	; (8001ce8 <main+0x630>)
 8001c46:	801a      	strh	r2, [r3, #0]
//		  registerFrame[64].U16 = 2;  	// RUN

		  //Y Axis
		  Trajectstate = 0;
 8001c48:	4b28      	ldr	r3, [pc, #160]	; (8001cec <main+0x634>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	601a      	str	r2, [r3, #0]
		  if(registerFrame[49].U16 >= 30000)
 8001c4e:	4b19      	ldr	r3, [pc, #100]	; (8001cb4 <main+0x5fc>)
 8001c50:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001c54:	f247 522f 	movw	r2, #29999	; 0x752f
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d949      	bls.n	8001cf0 <main+0x638>
		  {
			  qf = (registerFrame[49].U16-65536)/0.45; //pulse
 8001c5c:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <main+0x5fc>)
 8001c5e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001c62:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7fe fc64 	bl	8000534 <__aeabi_i2d>
 8001c6c:	a308      	add	r3, pc, #32	; (adr r3, 8001c90 <main+0x5d8>)
 8001c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c72:	f7fe fdf3 	bl	800085c <__aeabi_ddiv>
 8001c76:	4602      	mov	r2, r0
 8001c78:	460b      	mov	r3, r1
 8001c7a:	4610      	mov	r0, r2
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	f7fe ffbb 	bl	8000bf8 <__aeabi_d2f>
 8001c82:	4603      	mov	r3, r0
 8001c84:	4a0a      	ldr	r2, [pc, #40]	; (8001cb0 <main+0x5f8>)
 8001c86:	6013      	str	r3, [r2, #0]
 8001c88:	e046      	b.n	8001d18 <main+0x660>
 8001c8a:	bf00      	nop
 8001c8c:	f3af 8000 	nop.w
 8001c90:	cccccccd 	.word	0xcccccccd
 8001c94:	3fdccccc 	.word	0x3fdccccc
 8001c98:	20000600 	.word	0x20000600
 8001c9c:	200009ac 	.word	0x200009ac
 8001ca0:	200010cc 	.word	0x200010cc
 8001ca4:	200010d0 	.word	0x200010d0
 8001ca8:	20000968 	.word	0x20000968
 8001cac:	2000054c 	.word	0x2000054c
 8001cb0:	20000974 	.word	0x20000974
 8001cb4:	20000fe0 	.word	0x20000fe0
 8001cb8:	200006b4 	.word	0x200006b4
 8001cbc:	200010c0 	.word	0x200010c0
 8001cc0:	20000200 	.word	0x20000200
 8001cc4:	20000af8 	.word	0x20000af8
 8001cc8:	20000abc 	.word	0x20000abc
 8001ccc:	20000964 	.word	0x20000964
 8001cd0:	20000204 	.word	0x20000204
 8001cd4:	20000b00 	.word	0x20000b00
 8001cd8:	40020400 	.word	0x40020400
 8001cdc:	20000b04 	.word	0x20000b04
 8001ce0:	2000024c 	.word	0x2000024c
 8001ce4:	200010bc 	.word	0x200010bc
 8001ce8:	200010be 	.word	0x200010be
 8001cec:	2000096c 	.word	0x2000096c
		  }
		  else
		  {
			  qf = (registerFrame[49].U16)/0.45; //Pick Tray X Position 1 //pulse
 8001cf0:	4b13      	ldr	r3, [pc, #76]	; (8001d40 <main+0x688>)
 8001cf2:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f7fe fc1c 	bl	8000534 <__aeabi_i2d>
 8001cfc:	a30e      	add	r3, pc, #56	; (adr r3, 8001d38 <main+0x680>)
 8001cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d02:	f7fe fdab 	bl	800085c <__aeabi_ddiv>
 8001d06:	4602      	mov	r2, r0
 8001d08:	460b      	mov	r3, r1
 8001d0a:	4610      	mov	r0, r2
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	f7fe ff73 	bl	8000bf8 <__aeabi_d2f>
 8001d12:	4603      	mov	r3, r0
 8001d14:	4a0b      	ldr	r2, [pc, #44]	; (8001d44 <main+0x68c>)
 8001d16:	6013      	str	r3, [r2, #0]
		  }
		  HAL_TIM_Base_Start_IT(&htim9); //Start IT Timer9
 8001d18:	480b      	ldr	r0, [pc, #44]	; (8001d48 <main+0x690>)
 8001d1a:	f007 fc83 	bl	8009624 <HAL_TIM_Base_Start_IT>
		  PointModeflag = 1;
 8001d1e:	4b0b      	ldr	r3, [pc, #44]	; (8001d4c <main+0x694>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]
		  scheduler = 3;
 8001d24:	4b0a      	ldr	r3, [pc, #40]	; (8001d50 <main+0x698>)
 8001d26:	2203      	movs	r2, #3
 8001d28:	601a      	str	r2, [r3, #0]
		  break;
 8001d2a:	e004      	b.n	8001d36 <main+0x67e>
		  break;
 8001d2c:	bf00      	nop
 8001d2e:	e51e      	b.n	800176e <main+0xb6>
		  break;
 8001d30:	bf00      	nop
 8001d32:	e51c      	b.n	800176e <main+0xb6>
		  break;
 8001d34:	bf00      	nop
  {
 8001d36:	e51a      	b.n	800176e <main+0xb6>
 8001d38:	cccccccd 	.word	0xcccccccd
 8001d3c:	3fdccccc 	.word	0x3fdccccc
 8001d40:	20000fe0 	.word	0x20000fe0
 8001d44:	20000974 	.word	0x20000974
 8001d48:	200006b4 	.word	0x200006b4
 8001d4c:	200010c0 	.word	0x200010c0
 8001d50:	20000200 	.word	0x20000200

08001d54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b094      	sub	sp, #80	; 0x50
 8001d58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d5a:	f107 0320 	add.w	r3, r7, #32
 8001d5e:	2230      	movs	r2, #48	; 0x30
 8001d60:	2100      	movs	r1, #0
 8001d62:	4618      	mov	r0, r3
 8001d64:	f00a fc3e 	bl	800c5e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d68:	f107 030c 	add.w	r3, r7, #12
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d78:	2300      	movs	r3, #0
 8001d7a:	60bb      	str	r3, [r7, #8]
 8001d7c:	4b27      	ldr	r3, [pc, #156]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d80:	4a26      	ldr	r2, [pc, #152]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d86:	6413      	str	r3, [r2, #64]	; 0x40
 8001d88:	4b24      	ldr	r3, [pc, #144]	; (8001e1c <SystemClock_Config+0xc8>)
 8001d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d90:	60bb      	str	r3, [r7, #8]
 8001d92:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <SystemClock_Config+0xcc>)
 8001d9e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <SystemClock_Config+0xcc>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001db0:	2302      	movs	r3, #2
 8001db2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001db4:	2301      	movs	r3, #1
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001db8:	2310      	movs	r3, #16
 8001dba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dbc:	2302      	movs	r3, #2
 8001dbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001dc8:	2364      	movs	r3, #100	; 0x64
 8001dca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001dcc:	2302      	movs	r3, #2
 8001dce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001dd0:	2304      	movs	r3, #4
 8001dd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001dd4:	f107 0320 	add.w	r3, r7, #32
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f006 fed5 	bl	8008b88 <HAL_RCC_OscConfig>
 8001dde:	4603      	mov	r3, r0
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001de4:	f002 fcfa 	bl	80047dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001de8:	230f      	movs	r3, #15
 8001dea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001dec:	2302      	movs	r3, #2
 8001dee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001df0:	2300      	movs	r3, #0
 8001df2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001df8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001dfe:	f107 030c 	add.w	r3, r7, #12
 8001e02:	2103      	movs	r1, #3
 8001e04:	4618      	mov	r0, r3
 8001e06:	f007 f937 	bl	8009078 <HAL_RCC_ClockConfig>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001e10:	f002 fce4 	bl	80047dc <Error_Handler>
  }
}
 8001e14:	bf00      	nop
 8001e16:	3750      	adds	r7, #80	; 0x50
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bd80      	pop	{r7, pc}
 8001e1c:	40023800 	.word	0x40023800
 8001e20:	40007000 	.word	0x40007000

08001e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e2a:	463b      	mov	r3, r7
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e36:	4b28      	ldr	r3, [pc, #160]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e38:	4a28      	ldr	r2, [pc, #160]	; (8001edc <MX_ADC1_Init+0xb8>)
 8001e3a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e3c:	4b26      	ldr	r3, [pc, #152]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e3e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001e42:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e44:	4b24      	ldr	r3, [pc, #144]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001e50:	4b21      	ldr	r3, [pc, #132]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e52:	2201      	movs	r2, #1
 8001e54:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e56:	4b20      	ldr	r3, [pc, #128]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e64:	4b1c      	ldr	r3, [pc, #112]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <MX_ADC1_Init+0xbc>)
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e6a:	4b1b      	ldr	r3, [pc, #108]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8001e70:	4b19      	ldr	r3, [pc, #100]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e72:	2202      	movs	r2, #2
 8001e74:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8001e76:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e78:	2201      	movs	r2, #1
 8001e7a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e84:	4814      	ldr	r0, [pc, #80]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001e86:	f003 f9ad 	bl	80051e4 <HAL_ADC_Init>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d001      	beq.n	8001e94 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001e90:	f002 fca4 	bl	80047dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001e94:	2300      	movs	r3, #0
 8001e96:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ea0:	463b      	mov	r3, r7
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	480c      	ldr	r0, [pc, #48]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001ea6:	f003 faef 	bl	8005488 <HAL_ADC_ConfigChannel>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d001      	beq.n	8001eb4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001eb0:	f002 fc94 	bl	80047dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001eb8:	2302      	movs	r3, #2
 8001eba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ebc:	463b      	mov	r3, r7
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_ADC1_Init+0xb4>)
 8001ec2:	f003 fae1 	bl	8005488 <HAL_ADC_ConfigChannel>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001ecc:	f002 fc86 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ed0:	bf00      	nop
 8001ed2:	3710      	adds	r7, #16
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bd80      	pop	{r7, pc}
 8001ed8:	20000450 	.word	0x20000450
 8001edc:	40012000 	.word	0x40012000
 8001ee0:	0f000001 	.word	0x0f000001

08001ee4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ee8:	4b12      	ldr	r3, [pc, #72]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001eea:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <MX_I2C1_Init+0x54>)
 8001eec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001eee:	4b11      	ldr	r3, [pc, #68]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef0:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_I2C1_Init+0x58>)
 8001ef2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ef4:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001efa:	4b0e      	ldr	r3, [pc, #56]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001efc:	2200      	movs	r2, #0
 8001efe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f00:	4b0c      	ldr	r3, [pc, #48]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f02:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001f06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f0e:	4b09      	ldr	r3, [pc, #36]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f14:	4b07      	ldr	r3, [pc, #28]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f1a:	4b06      	ldr	r3, [pc, #24]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f20:	4804      	ldr	r0, [pc, #16]	; (8001f34 <MX_I2C1_Init+0x50>)
 8001f22:	f004 fc5d 	bl	80067e0 <HAL_I2C_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f2c:	f002 fc56 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f30:	bf00      	nop
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	200004f8 	.word	0x200004f8
 8001f38:	40005400 	.word	0x40005400
 8001f3c:	000186a0 	.word	0x000186a0

08001f40 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b092      	sub	sp, #72	; 0x48
 8001f44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f46:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	615a      	str	r2, [r3, #20]
 8001f62:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001f64:	1d3b      	adds	r3, r7, #4
 8001f66:	2220      	movs	r2, #32
 8001f68:	2100      	movs	r1, #0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f00a fb3a 	bl	800c5e4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001f70:	4b39      	ldr	r3, [pc, #228]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f72:	4a3a      	ldr	r2, [pc, #232]	; (800205c <MX_TIM1_Init+0x11c>)
 8001f74:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001f76:	4b38      	ldr	r3, [pc, #224]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 49999;
 8001f82:	4b35      	ldr	r3, [pc, #212]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f84:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001f88:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f8a:	4b33      	ldr	r3, [pc, #204]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001f90:	4b31      	ldr	r3, [pc, #196]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f96:	4b30      	ldr	r3, [pc, #192]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f98:	2200      	movs	r2, #0
 8001f9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001f9c:	482e      	ldr	r0, [pc, #184]	; (8002058 <MX_TIM1_Init+0x118>)
 8001f9e:	f007 fc39 	bl	8009814 <HAL_TIM_PWM_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 8001fa8:	f002 fc18 	bl	80047dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fac:	2300      	movs	r3, #0
 8001fae:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001fb4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001fb8:	4619      	mov	r1, r3
 8001fba:	4827      	ldr	r0, [pc, #156]	; (8002058 <MX_TIM1_Init+0x118>)
 8001fbc:	f008 ff1c 	bl	800adf8 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001fc6:	f002 fc09 	bl	80047dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001fca:	2360      	movs	r3, #96	; 0x60
 8001fcc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001fde:	2300      	movs	r3, #0
 8001fe0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001fe6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fea:	2200      	movs	r2, #0
 8001fec:	4619      	mov	r1, r3
 8001fee:	481a      	ldr	r0, [pc, #104]	; (8002058 <MX_TIM1_Init+0x118>)
 8001ff0:	f008 f8b0 	bl	800a154 <HAL_TIM_PWM_ConfigChannel>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d001      	beq.n	8001ffe <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001ffa:	f002 fbef 	bl	80047dc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002002:	2204      	movs	r2, #4
 8002004:	4619      	mov	r1, r3
 8002006:	4814      	ldr	r0, [pc, #80]	; (8002058 <MX_TIM1_Init+0x118>)
 8002008:	f008 f8a4 	bl	800a154 <HAL_TIM_PWM_ConfigChannel>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8002012:	f002 fbe3 	bl	80047dc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002016:	2300      	movs	r3, #0
 8002018:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800201a:	2300      	movs	r3, #0
 800201c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800201e:	2300      	movs	r3, #0
 8002020:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002026:	2300      	movs	r3, #0
 8002028:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800202a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800202e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002030:	2300      	movs	r3, #0
 8002032:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002034:	1d3b      	adds	r3, r7, #4
 8002036:	4619      	mov	r1, r3
 8002038:	4807      	ldr	r0, [pc, #28]	; (8002058 <MX_TIM1_Init+0x118>)
 800203a:	f008 ff4b 	bl	800aed4 <HAL_TIMEx_ConfigBreakDeadTime>
 800203e:	4603      	mov	r3, r0
 8002040:	2b00      	cmp	r3, #0
 8002042:	d001      	beq.n	8002048 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8002044:	f002 fbca 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002048:	4803      	ldr	r0, [pc, #12]	; (8002058 <MX_TIM1_Init+0x118>)
 800204a:	f002 fd83 	bl	8004b54 <HAL_TIM_MspPostInit>

}
 800204e:	bf00      	nop
 8002050:	3748      	adds	r7, #72	; 0x48
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	2000054c 	.word	0x2000054c
 800205c:	40010000 	.word	0x40010000

08002060 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08c      	sub	sp, #48	; 0x30
 8002064:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8002066:	f107 030c 	add.w	r3, r7, #12
 800206a:	2224      	movs	r2, #36	; 0x24
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f00a fab8 	bl	800c5e4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002074:	1d3b      	adds	r3, r7, #4
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800207c:	4b20      	ldr	r3, [pc, #128]	; (8002100 <MX_TIM3_Init+0xa0>)
 800207e:	4a21      	ldr	r2, [pc, #132]	; (8002104 <MX_TIM3_Init+0xa4>)
 8002080:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002082:	4b1f      	ldr	r3, [pc, #124]	; (8002100 <MX_TIM3_Init+0xa0>)
 8002084:	2200      	movs	r2, #0
 8002086:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002088:	4b1d      	ldr	r3, [pc, #116]	; (8002100 <MX_TIM3_Init+0xa0>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 800208e:	4b1c      	ldr	r3, [pc, #112]	; (8002100 <MX_TIM3_Init+0xa0>)
 8002090:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002094:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002096:	4b1a      	ldr	r3, [pc, #104]	; (8002100 <MX_TIM3_Init+0xa0>)
 8002098:	2200      	movs	r2, #0
 800209a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800209c:	4b18      	ldr	r3, [pc, #96]	; (8002100 <MX_TIM3_Init+0xa0>)
 800209e:	2200      	movs	r2, #0
 80020a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80020a2:	2303      	movs	r3, #3
 80020a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80020aa:	2301      	movs	r3, #1
 80020ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80020ae:	2300      	movs	r3, #0
 80020b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 80020b2:	230f      	movs	r3, #15
 80020b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80020ba:	2301      	movs	r3, #1
 80020bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80020be:	2300      	movs	r3, #0
 80020c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 15;
 80020c2:	230f      	movs	r3, #15
 80020c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80020c6:	f107 030c 	add.w	r3, r7, #12
 80020ca:	4619      	mov	r1, r3
 80020cc:	480c      	ldr	r0, [pc, #48]	; (8002100 <MX_TIM3_Init+0xa0>)
 80020ce:	f007 fd7b 	bl	8009bc8 <HAL_TIM_Encoder_Init>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80020d8:	f002 fb80 	bl	80047dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80020dc:	2300      	movs	r3, #0
 80020de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80020e0:	2300      	movs	r3, #0
 80020e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	4619      	mov	r1, r3
 80020e8:	4805      	ldr	r0, [pc, #20]	; (8002100 <MX_TIM3_Init+0xa0>)
 80020ea:	f008 fe85 	bl	800adf8 <HAL_TIMEx_MasterConfigSynchronization>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d001      	beq.n	80020f8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80020f4:	f002 fb72 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80020f8:	bf00      	nop
 80020fa:	3730      	adds	r7, #48	; 0x30
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}
 8002100:	20000600 	.word	0x20000600
 8002104:	40000400 	.word	0x40000400

08002108 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800210e:	463b      	mov	r3, r7
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_TIM9_Init+0x6c>)
 800211c:	4a16      	ldr	r2, [pc, #88]	; (8002178 <MX_TIM9_Init+0x70>)
 800211e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 99;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_TIM9_Init+0x6c>)
 8002122:	2263      	movs	r2, #99	; 0x63
 8002124:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_TIM9_Init+0x6c>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 999;
 800212c:	4b11      	ldr	r3, [pc, #68]	; (8002174 <MX_TIM9_Init+0x6c>)
 800212e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002132:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b0f      	ldr	r3, [pc, #60]	; (8002174 <MX_TIM9_Init+0x6c>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800213a:	4b0e      	ldr	r3, [pc, #56]	; (8002174 <MX_TIM9_Init+0x6c>)
 800213c:	2200      	movs	r2, #0
 800213e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8002140:	480c      	ldr	r0, [pc, #48]	; (8002174 <MX_TIM9_Init+0x6c>)
 8002142:	f007 f9b9 	bl	80094b8 <HAL_TIM_Base_Init>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 800214c:	f002 fb46 	bl	80047dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002154:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8002156:	463b      	mov	r3, r7
 8002158:	4619      	mov	r1, r3
 800215a:	4806      	ldr	r0, [pc, #24]	; (8002174 <MX_TIM9_Init+0x6c>)
 800215c:	f008 f8bc 	bl	800a2d8 <HAL_TIM_ConfigClockSource>
 8002160:	4603      	mov	r3, r0
 8002162:	2b00      	cmp	r3, #0
 8002164:	d001      	beq.n	800216a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8002166:	f002 fb39 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800216a:	bf00      	nop
 800216c:	3710      	adds	r7, #16
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop
 8002174:	200006b4 	.word	0x200006b4
 8002178:	40014000 	.word	0x40014000

0800217c <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM11_Init 0 */

  /* USER CODE END TIM11_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	2200      	movs	r2, #0
 8002186:	601a      	str	r2, [r3, #0]
 8002188:	605a      	str	r2, [r3, #4]
 800218a:	609a      	str	r2, [r3, #8]
 800218c:	60da      	str	r2, [r3, #12]
 800218e:	611a      	str	r2, [r3, #16]
 8002190:	615a      	str	r2, [r3, #20]
 8002192:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8002194:	4b21      	ldr	r3, [pc, #132]	; (800221c <MX_TIM11_Init+0xa0>)
 8002196:	4a22      	ldr	r2, [pc, #136]	; (8002220 <MX_TIM11_Init+0xa4>)
 8002198:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 99;
 800219a:	4b20      	ldr	r3, [pc, #128]	; (800221c <MX_TIM11_Init+0xa0>)
 800219c:	2263      	movs	r2, #99	; 0x63
 800219e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a0:	4b1e      	ldr	r3, [pc, #120]	; (800221c <MX_TIM11_Init+0xa0>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 2005;
 80021a6:	4b1d      	ldr	r3, [pc, #116]	; (800221c <MX_TIM11_Init+0xa0>)
 80021a8:	f240 72d5 	movw	r2, #2005	; 0x7d5
 80021ac:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021ae:	4b1b      	ldr	r3, [pc, #108]	; (800221c <MX_TIM11_Init+0xa0>)
 80021b0:	2200      	movs	r2, #0
 80021b2:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021b4:	4b19      	ldr	r3, [pc, #100]	; (800221c <MX_TIM11_Init+0xa0>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 80021ba:	4818      	ldr	r0, [pc, #96]	; (800221c <MX_TIM11_Init+0xa0>)
 80021bc:	f007 f97c 	bl	80094b8 <HAL_TIM_Base_Init>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <MX_TIM11_Init+0x4e>
  {
    Error_Handler();
 80021c6:	f002 fb09 	bl	80047dc <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim11) != HAL_OK)
 80021ca:	4814      	ldr	r0, [pc, #80]	; (800221c <MX_TIM11_Init+0xa0>)
 80021cc:	f007 fabc 	bl	8009748 <HAL_TIM_OC_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM11_Init+0x5e>
  {
    Error_Handler();
 80021d6:	f002 fb01 	bl	80047dc <Error_Handler>
  }
  if (HAL_TIM_OnePulse_Init(&htim11, TIM_OPMODE_SINGLE) != HAL_OK)
 80021da:	2108      	movs	r1, #8
 80021dc:	480f      	ldr	r0, [pc, #60]	; (800221c <MX_TIM11_Init+0xa0>)
 80021de:	f007 fc25 	bl	8009a2c <HAL_TIM_OnePulse_Init>
 80021e2:	4603      	mov	r3, r0
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <MX_TIM11_Init+0x70>
  {
    Error_Handler();
 80021e8:	f002 faf8 	bl	80047dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 80021ec:	2310      	movs	r3, #16
 80021ee:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1433;
 80021f0:	f240 5399 	movw	r3, #1433	; 0x599
 80021f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021f6:	2300      	movs	r3, #0
 80021f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021fa:	2300      	movs	r3, #0
 80021fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021fe:	1d3b      	adds	r3, r7, #4
 8002200:	2200      	movs	r2, #0
 8002202:	4619      	mov	r1, r3
 8002204:	4805      	ldr	r0, [pc, #20]	; (800221c <MX_TIM11_Init+0xa0>)
 8002206:	f007 ff49 	bl	800a09c <HAL_TIM_OC_ConfigChannel>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM11_Init+0x98>
  {
    Error_Handler();
 8002210:	f002 fae4 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8002214:	bf00      	nop
 8002216:	3720      	adds	r7, #32
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	20000768 	.word	0x20000768
 8002220:	40014800 	.word	0x40014800

08002224 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002228:	4b11      	ldr	r3, [pc, #68]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 800222a:	4a12      	ldr	r2, [pc, #72]	; (8002274 <MX_USART1_UART_Init+0x50>)
 800222c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800222e:	4b10      	ldr	r3, [pc, #64]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b0e      	ldr	r3, [pc, #56]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0b      	ldr	r3, [pc, #44]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b09      	ldr	r3, [pc, #36]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b08      	ldr	r3, [pc, #32]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b06      	ldr	r3, [pc, #24]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800225a:	4805      	ldr	r0, [pc, #20]	; (8002270 <MX_USART1_UART_Init+0x4c>)
 800225c:	f008 feaa 	bl	800afb4 <HAL_UART_Init>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d001      	beq.n	800226a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002266:	f002 fab9 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800226a:	bf00      	nop
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	2000081c 	.word	0x2000081c
 8002274:	40011000 	.word	0x40011000

08002278 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800227c:	4b12      	ldr	r3, [pc, #72]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <MX_USART2_UART_Init+0x54>)
 8002280:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 19200;
 8002282:	4b11      	ldr	r3, [pc, #68]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 8002284:	f44f 4296 	mov.w	r2, #19200	; 0x4b00
 8002288:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 800228a:	4b0f      	ldr	r3, [pc, #60]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 800228c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002290:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 8002294:	2200      	movs	r2, #0
 8002296:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 800229a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800229e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 80022a2:	220c      	movs	r2, #12
 80022a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022ac:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022b2:	4805      	ldr	r0, [pc, #20]	; (80022c8 <MX_USART2_UART_Init+0x50>)
 80022b4:	f008 fe7e 	bl	800afb4 <HAL_UART_Init>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80022be:	f002 fa8d 	bl	80047dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022c2:	bf00      	nop
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	20000890 	.word	0x20000890
 80022cc:	40004400 	.word	0x40004400

080022d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	607b      	str	r3, [r7, #4]
 80022da:	4b17      	ldr	r3, [pc, #92]	; (8002338 <MX_DMA_Init+0x68>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a16      	ldr	r2, [pc, #88]	; (8002338 <MX_DMA_Init+0x68>)
 80022e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b14      	ldr	r3, [pc, #80]	; (8002338 <MX_DMA_Init+0x68>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ee:	607b      	str	r3, [r7, #4]
 80022f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80022f2:	2300      	movs	r3, #0
 80022f4:	603b      	str	r3, [r7, #0]
 80022f6:	4b10      	ldr	r3, [pc, #64]	; (8002338 <MX_DMA_Init+0x68>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	4a0f      	ldr	r2, [pc, #60]	; (8002338 <MX_DMA_Init+0x68>)
 80022fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002300:	6313      	str	r3, [r2, #48]	; 0x30
 8002302:	4b0d      	ldr	r3, [pc, #52]	; (8002338 <MX_DMA_Init+0x68>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800230a:	603b      	str	r3, [r7, #0]
 800230c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800230e:	2200      	movs	r2, #0
 8002310:	2100      	movs	r1, #0
 8002312:	2011      	movs	r0, #17
 8002314:	f003 fc43 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002318:	2011      	movs	r0, #17
 800231a:	f003 fc5c 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800231e:	2200      	movs	r2, #0
 8002320:	2100      	movs	r1, #0
 8002322:	2038      	movs	r0, #56	; 0x38
 8002324:	f003 fc3b 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8002328:	2038      	movs	r0, #56	; 0x38
 800232a:	f003 fc54 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

}
 800232e:	bf00      	nop
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40023800 	.word	0x40023800

0800233c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b08a      	sub	sp, #40	; 0x28
 8002340:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002342:	f107 0314 	add.w	r3, r7, #20
 8002346:	2200      	movs	r2, #0
 8002348:	601a      	str	r2, [r3, #0]
 800234a:	605a      	str	r2, [r3, #4]
 800234c:	609a      	str	r2, [r3, #8]
 800234e:	60da      	str	r2, [r3, #12]
 8002350:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002352:	2300      	movs	r3, #0
 8002354:	613b      	str	r3, [r7, #16]
 8002356:	4b53      	ldr	r3, [pc, #332]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	4a52      	ldr	r2, [pc, #328]	; (80024a4 <MX_GPIO_Init+0x168>)
 800235c:	f043 0304 	orr.w	r3, r3, #4
 8002360:	6313      	str	r3, [r2, #48]	; 0x30
 8002362:	4b50      	ldr	r3, [pc, #320]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f003 0304 	and.w	r3, r3, #4
 800236a:	613b      	str	r3, [r7, #16]
 800236c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	60fb      	str	r3, [r7, #12]
 8002372:	4b4c      	ldr	r3, [pc, #304]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a4b      	ldr	r2, [pc, #300]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002378:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b49      	ldr	r3, [pc, #292]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002386:	60fb      	str	r3, [r7, #12]
 8002388:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800238a:	2300      	movs	r3, #0
 800238c:	60bb      	str	r3, [r7, #8]
 800238e:	4b45      	ldr	r3, [pc, #276]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	4a44      	ldr	r2, [pc, #272]	; (80024a4 <MX_GPIO_Init+0x168>)
 8002394:	f043 0301 	orr.w	r3, r3, #1
 8002398:	6313      	str	r3, [r2, #48]	; 0x30
 800239a:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <MX_GPIO_Init+0x168>)
 800239c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239e:	f003 0301 	and.w	r3, r3, #1
 80023a2:	60bb      	str	r3, [r7, #8]
 80023a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	607b      	str	r3, [r7, #4]
 80023aa:	4b3e      	ldr	r3, [pc, #248]	; (80024a4 <MX_GPIO_Init+0x168>)
 80023ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ae:	4a3d      	ldr	r2, [pc, #244]	; (80024a4 <MX_GPIO_Init+0x168>)
 80023b0:	f043 0302 	orr.w	r3, r3, #2
 80023b4:	6313      	str	r3, [r2, #48]	; 0x30
 80023b6:	4b3b      	ldr	r3, [pc, #236]	; (80024a4 <MX_GPIO_Init+0x168>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f003 0302 	and.w	r3, r3, #2
 80023be:	607b      	str	r3, [r7, #4]
 80023c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80023c2:	2200      	movs	r2, #0
 80023c4:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80023c8:	4837      	ldr	r0, [pc, #220]	; (80024a8 <MX_GPIO_Init+0x16c>)
 80023ca:	f004 f9d7 	bl	800677c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80023ce:	2302      	movs	r3, #2
 80023d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80023d2:	2300      	movs	r3, #0
 80023d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023da:	f107 0314 	add.w	r3, r7, #20
 80023de:	4619      	mov	r1, r3
 80023e0:	4832      	ldr	r0, [pc, #200]	; (80024ac <MX_GPIO_Init+0x170>)
 80023e2:	f004 f82f 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80023e6:	230c      	movs	r3, #12
 80023e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80023ea:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80023ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	4619      	mov	r1, r3
 80023fa:	482c      	ldr	r0, [pc, #176]	; (80024ac <MX_GPIO_Init+0x170>)
 80023fc:	f004 f822 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_10;
 8002400:	f44f 6384 	mov.w	r3, #1056	; 0x420
 8002404:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002406:	2300      	movs	r3, #0
 8002408:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800240a:	2300      	movs	r3, #0
 800240c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800240e:	f107 0314 	add.w	r3, r7, #20
 8002412:	4619      	mov	r1, r3
 8002414:	4826      	ldr	r0, [pc, #152]	; (80024b0 <MX_GPIO_Init+0x174>)
 8002416:	f004 f815 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 800241a:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800241e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002420:	2301      	movs	r3, #1
 8002422:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002424:	2300      	movs	r3, #0
 8002426:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002428:	2300      	movs	r3, #0
 800242a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800242c:	f107 0314 	add.w	r3, r7, #20
 8002430:	4619      	mov	r1, r3
 8002432:	481d      	ldr	r0, [pc, #116]	; (80024a8 <MX_GPIO_Init+0x16c>)
 8002434:	f004 f806 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002438:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800243c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800243e:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8002442:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002444:	2302      	movs	r3, #2
 8002446:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4816      	ldr	r0, [pc, #88]	; (80024a8 <MX_GPIO_Init+0x16c>)
 8002450:	f003 fff8 	bl	8006444 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002454:	2360      	movs	r3, #96	; 0x60
 8002456:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800245c:	2300      	movs	r3, #0
 800245e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4810      	ldr	r0, [pc, #64]	; (80024a8 <MX_GPIO_Init+0x16c>)
 8002468:	f003 ffec 	bl	8006444 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800246c:	2200      	movs	r2, #0
 800246e:	2100      	movs	r1, #0
 8002470:	2008      	movs	r0, #8
 8002472:	f003 fb94 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8002476:	2008      	movs	r0, #8
 8002478:	f003 fbad 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 800247c:	2200      	movs	r2, #0
 800247e:	2100      	movs	r1, #0
 8002480:	2009      	movs	r0, #9
 8002482:	f003 fb8c 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8002486:	2009      	movs	r0, #9
 8002488:	f003 fba5 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800248c:	2200      	movs	r2, #0
 800248e:	2100      	movs	r1, #0
 8002490:	2028      	movs	r0, #40	; 0x28
 8002492:	f003 fb84 	bl	8005b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002496:	2028      	movs	r0, #40	; 0x28
 8002498:	f003 fb9d 	bl	8005bd6 <HAL_NVIC_EnableIRQ>

}
 800249c:	bf00      	nop
 800249e:	3728      	adds	r7, #40	; 0x28
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40023800 	.word	0x40023800
 80024a8:	40020400 	.word	0x40020400
 80024ac:	40020800 	.word	0x40020800
 80024b0:	40020000 	.word	0x40020000

080024b4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_2)
 80024be:	88fb      	ldrh	r3, [r7, #6]
 80024c0:	2b04      	cmp	r3, #4
 80024c2:	d106      	bne.n	80024d2 <HAL_GPIO_EXTI_Callback+0x1e>
	{
		scheduler = 5;
 80024c4:	4b14      	ldr	r3, [pc, #80]	; (8002518 <HAL_GPIO_EXTI_Callback+0x64>)
 80024c6:	2205      	movs	r2, #5
 80024c8:	601a      	str	r2, [r3, #0]
		Proximity = 3;
 80024ca:	4b14      	ldr	r3, [pc, #80]	; (800251c <HAL_GPIO_EXTI_Callback+0x68>)
 80024cc:	2203      	movs	r2, #3
 80024ce:	601a      	str	r2, [r3, #0]
 80024d0:	e008      	b.n	80024e4 <HAL_GPIO_EXTI_Callback+0x30>
	}
	else if(GPIO_Pin == GPIO_PIN_3)
 80024d2:	88fb      	ldrh	r3, [r7, #6]
 80024d4:	2b08      	cmp	r3, #8
 80024d6:	d105      	bne.n	80024e4 <HAL_GPIO_EXTI_Callback+0x30>
	{
		scheduler = 5;
 80024d8:	4b0f      	ldr	r3, [pc, #60]	; (8002518 <HAL_GPIO_EXTI_Callback+0x64>)
 80024da:	2205      	movs	r2, #5
 80024dc:	601a      	str	r2, [r3, #0]
		Proximity = 2;
 80024de:	4b0f      	ldr	r3, [pc, #60]	; (800251c <HAL_GPIO_EXTI_Callback+0x68>)
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
	}
	if(GPIO_Pin == GPIO_PIN_15) //Push Emergency
 80024e4:	88fb      	ldrh	r3, [r7, #6]
 80024e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ea:	d111      	bne.n	8002510 <HAL_GPIO_EXTI_Callback+0x5c>
	{
		if(Emercount == 0)
 80024ec:	4b0c      	ldr	r3, [pc, #48]	; (8002520 <HAL_GPIO_EXTI_Callback+0x6c>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d10d      	bne.n	8002510 <HAL_GPIO_EXTI_Callback+0x5c>
		{
			EndEffectorState = 7;			//Emergency
 80024f4:	4b0b      	ldr	r3, [pc, #44]	; (8002524 <HAL_GPIO_EXTI_Callback+0x70>)
 80024f6:	2207      	movs	r2, #7
 80024f8:	601a      	str	r2, [r3, #0]
			EndEffectorWriteFlag = 1;
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <HAL_GPIO_EXTI_Callback+0x74>)
 80024fc:	2201      	movs	r2, #1
 80024fe:	701a      	strb	r2, [r3, #0]
			EndEffectorWrite();
 8002500:	f000 f874 	bl	80025ec <EndEffectorWrite>
			Emercount = 1;
 8002504:	4b06      	ldr	r3, [pc, #24]	; (8002520 <HAL_GPIO_EXTI_Callback+0x6c>)
 8002506:	2201      	movs	r2, #1
 8002508:	601a      	str	r2, [r3, #0]
			scheduler = 6;
 800250a:	4b03      	ldr	r3, [pc, #12]	; (8002518 <HAL_GPIO_EXTI_Callback+0x64>)
 800250c:	2206      	movs	r2, #6
 800250e:	601a      	str	r2, [r3, #0]
		}
	}
}
 8002510:	bf00      	nop
 8002512:	3708      	adds	r7, #8
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	20000200 	.word	0x20000200
 800251c:	2000024c 	.word	0x2000024c
 8002520:	20000b04 	.word	0x20000b04
 8002524:	20000b00 	.word	0x20000b00
 8002528:	20000af8 	.word	0x20000af8

0800252c <Homing>:

void Homing()
{
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
	registerFrame[1].U16 = 4;
 8002530:	4b27      	ldr	r3, [pc, #156]	; (80025d0 <Homing+0xa4>)
 8002532:	2204      	movs	r2, #4
 8002534:	805a      	strh	r2, [r3, #2]
	registerFrame[64].U16 = 1;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <Homing+0xa4>)
 8002538:	2201      	movs	r2, #1
 800253a:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
	registerFrame[16].U16 = 4;
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <Homing+0xa4>)
 8002540:	2204      	movs	r2, #4
 8002542:	841a      	strh	r2, [r3, #32]
	if (Proximity == 3)
 8002544:	4b23      	ldr	r3, [pc, #140]	; (80025d4 <Homing+0xa8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	2b03      	cmp	r3, #3
 800254a:	d109      	bne.n	8002560 <Homing+0x34>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 800254c:	4b22      	ldr	r3, [pc, #136]	; (80025d8 <Homing+0xac>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2200      	movs	r2, #0
 8002552:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002554:	4b20      	ldr	r3, [pc, #128]	; (80025d8 <Homing+0xac>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f643 2298 	movw	r2, #15000	; 0x3a98
 800255c:	635a      	str	r2, [r3, #52]	; 0x34
 800255e:	e00c      	b.n	800257a <Homing+0x4e>
	}

	else if (Proximity == 2)
 8002560:	4b1c      	ldr	r3, [pc, #112]	; (80025d4 <Homing+0xa8>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	2b02      	cmp	r3, #2
 8002566:	d108      	bne.n	800257a <Homing+0x4e>
	{
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002568:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <Homing+0xac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002570:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002572:	4b19      	ldr	r3, [pc, #100]	; (80025d8 <Homing+0xac>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	2200      	movs	r2, #0
 8002578:	635a      	str	r2, [r3, #52]	; 0x34
	}

	//Proximity Home
	if (HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_1) == 0)
 800257a:	2102      	movs	r1, #2
 800257c:	4817      	ldr	r0, [pc, #92]	; (80025dc <Homing+0xb0>)
 800257e:	f004 f8e5 	bl	800674c <HAL_GPIO_ReadPin>
 8002582:	4603      	mov	r3, r0
 8002584:	2b00      	cmp	r3, #0
 8002586:	d120      	bne.n	80025ca <Homing+0x9e>
	{
		Proximity = 0;
 8002588:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <Homing+0xa8>)
 800258a:	2200      	movs	r2, #0
 800258c:	601a      	str	r2, [r3, #0]
		Emercount = 0;
 800258e:	4b14      	ldr	r3, [pc, #80]	; (80025e0 <Homing+0xb4>)
 8002590:	2200      	movs	r2, #0
 8002592:	601a      	str	r2, [r3, #0]
		registerFrame[1].U16 = 0;
 8002594:	4b0e      	ldr	r3, [pc, #56]	; (80025d0 <Homing+0xa4>)
 8002596:	2200      	movs	r2, #0
 8002598:	805a      	strh	r2, [r3, #2]
		registerFrame[64].U16 = 0;
 800259a:	4b0d      	ldr	r3, [pc, #52]	; (80025d0 <Homing+0xa4>)
 800259c:	2200      	movs	r2, #0
 800259e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		registerFrame[16].U16 = 0;
 80025a2:	4b0b      	ldr	r3, [pc, #44]	; (80025d0 <Homing+0xa4>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	841a      	strh	r2, [r3, #32]

		HAL_Delay(10);
 80025a8:	200a      	movs	r0, #10
 80025aa:	f002 fdf7 	bl	800519c <HAL_Delay>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 80025ae:	4b0a      	ldr	r3, [pc, #40]	; (80025d8 <Homing+0xac>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	2200      	movs	r2, #0
 80025b4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 80025b6:	4b08      	ldr	r3, [pc, #32]	; (80025d8 <Homing+0xac>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2200      	movs	r2, #0
 80025bc:	635a      	str	r2, [r3, #52]	; 0x34
		JoySpeed = 0;
 80025be:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <Homing+0xb8>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	601a      	str	r2, [r3, #0]
		scheduler = 0;
 80025c4:	4b08      	ldr	r3, [pc, #32]	; (80025e8 <Homing+0xbc>)
 80025c6:	2200      	movs	r2, #0
 80025c8:	601a      	str	r2, [r3, #0]
	}
}
 80025ca:	bf00      	nop
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	20000fe0 	.word	0x20000fe0
 80025d4:	2000024c 	.word	0x2000024c
 80025d8:	2000054c 	.word	0x2000054c
 80025dc:	40020800 	.word	0x40020800
 80025e0:	20000b04 	.word	0x20000b04
 80025e4:	20000af4 	.word	0x20000af4
 80025e8:	20000200 	.word	0x20000200

080025ec <EndEffectorWrite>:

void EndEffectorWrite()
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b082      	sub	sp, #8
 80025f0:	af02      	add	r7, sp, #8
//	HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
	switch(EndEffectorState)
 80025f2:	4ba0      	ldr	r3, [pc, #640]	; (8002874 <EndEffectorWrite+0x288>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	f200 8139 	bhi.w	800286e <EndEffectorWrite+0x282>
 80025fc:	a201      	add	r2, pc, #4	; (adr r2, 8002604 <EndEffectorWrite+0x18>)
 80025fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002602:	bf00      	nop
 8002604:	08002629 	.word	0x08002629
 8002608:	0800264b 	.word	0x0800264b
 800260c:	08002673 	.word	0x08002673
 8002610:	0800269b 	.word	0x0800269b
 8002614:	080026c3 	.word	0x080026c3
 8002618:	08002737 	.word	0x08002737
 800261c:	080027db 	.word	0x080027db
 8002620:	08002801 	.word	0x08002801
 8002624:	08002827 	.word	0x08002827
	{
	case 0:
		if(EndEffectorWriteFlag == 1)
 8002628:	4b93      	ldr	r3, [pc, #588]	; (8002878 <EndEffectorWrite+0x28c>)
 800262a:	781b      	ldrb	r3, [r3, #0]
 800262c:	2b01      	cmp	r3, #1
 800262e:	f040 810d 	bne.w	800284c <EndEffectorWrite+0x260>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, SoftReset, 4, 100);
 8002632:	2364      	movs	r3, #100	; 0x64
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	2304      	movs	r3, #4
 8002638:	4a90      	ldr	r2, [pc, #576]	; (800287c <EndEffectorWrite+0x290>)
 800263a:	212a      	movs	r1, #42	; 0x2a
 800263c:	4890      	ldr	r0, [pc, #576]	; (8002880 <EndEffectorWrite+0x294>)
 800263e:	f004 fa13 	bl	8006a68 <HAL_I2C_Master_Transmit>
				EndEffectorWriteFlag = 0;
 8002642:	4b8d      	ldr	r3, [pc, #564]	; (8002878 <EndEffectorWrite+0x28c>)
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002648:	e100      	b.n	800284c <EndEffectorWrite+0x260>
	case 1:
		if(EndEffectorWriteFlag == 1)
 800264a:	4b8b      	ldr	r3, [pc, #556]	; (8002878 <EndEffectorWrite+0x28c>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b01      	cmp	r3, #1
 8002650:	f040 80fe 	bne.w	8002850 <EndEffectorWrite+0x264>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOn, 2, 100);
 8002654:	2364      	movs	r3, #100	; 0x64
 8002656:	9300      	str	r3, [sp, #0]
 8002658:	2302      	movs	r3, #2
 800265a:	4a8a      	ldr	r2, [pc, #552]	; (8002884 <EndEffectorWrite+0x298>)
 800265c:	212a      	movs	r1, #42	; 0x2a
 800265e:	4888      	ldr	r0, [pc, #544]	; (8002880 <EndEffectorWrite+0x294>)
 8002660:	f004 fa02 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 1; //End Effector Status: Laser On
 8002664:	4b88      	ldr	r3, [pc, #544]	; (8002888 <EndEffectorWrite+0x29c>)
 8002666:	2201      	movs	r2, #1
 8002668:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800266a:	4b83      	ldr	r3, [pc, #524]	; (8002878 <EndEffectorWrite+0x28c>)
 800266c:	2200      	movs	r2, #0
 800266e:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002670:	e0ee      	b.n	8002850 <EndEffectorWrite+0x264>
	case 2:
		if(EndEffectorWriteFlag == 1)
 8002672:	4b81      	ldr	r3, [pc, #516]	; (8002878 <EndEffectorWrite+0x28c>)
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b01      	cmp	r3, #1
 8002678:	f040 80ec 	bne.w	8002854 <EndEffectorWrite+0x268>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, TestModeOff, 2, 100);
 800267c:	2364      	movs	r3, #100	; 0x64
 800267e:	9300      	str	r3, [sp, #0]
 8002680:	2302      	movs	r3, #2
 8002682:	4a82      	ldr	r2, [pc, #520]	; (800288c <EndEffectorWrite+0x2a0>)
 8002684:	212a      	movs	r1, #42	; 0x2a
 8002686:	487e      	ldr	r0, [pc, #504]	; (8002880 <EndEffectorWrite+0x294>)
 8002688:	f004 f9ee 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Laser Off
 800268c:	4b7e      	ldr	r3, [pc, #504]	; (8002888 <EndEffectorWrite+0x29c>)
 800268e:	2200      	movs	r2, #0
 8002690:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002692:	4b79      	ldr	r3, [pc, #484]	; (8002878 <EndEffectorWrite+0x28c>)
 8002694:	2200      	movs	r2, #0
 8002696:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002698:	e0dc      	b.n	8002854 <EndEffectorWrite+0x268>
	case 3:
		if(EndEffectorWriteFlag == 1)
 800269a:	4b77      	ldr	r3, [pc, #476]	; (8002878 <EndEffectorWrite+0x28c>)
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	f040 80da 	bne.w	8002858 <EndEffectorWrite+0x26c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOn, 2, 100);
 80026a4:	2364      	movs	r3, #100	; 0x64
 80026a6:	9300      	str	r3, [sp, #0]
 80026a8:	2302      	movs	r3, #2
 80026aa:	4a79      	ldr	r2, [pc, #484]	; (8002890 <EndEffectorWrite+0x2a4>)
 80026ac:	212a      	movs	r1, #42	; 0x2a
 80026ae:	4874      	ldr	r0, [pc, #464]	; (8002880 <EndEffectorWrite+0x294>)
 80026b0:	f004 f9da 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 80026b4:	4b74      	ldr	r3, [pc, #464]	; (8002888 <EndEffectorWrite+0x29c>)
 80026b6:	2202      	movs	r2, #2
 80026b8:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80026ba:	4b6f      	ldr	r3, [pc, #444]	; (8002878 <EndEffectorWrite+0x28c>)
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]
			}
		break;
 80026c0:	e0ca      	b.n	8002858 <EndEffectorWrite+0x26c>
	case 4:
		if(EndEffectorWriteFlag == 1)
 80026c2:	4b6d      	ldr	r3, [pc, #436]	; (8002878 <EndEffectorWrite+0x28c>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d114      	bne.n	80026f4 <EndEffectorWrite+0x108>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PickData, 2, 100);
 80026ca:	2364      	movs	r3, #100	; 0x64
 80026cc:	9300      	str	r3, [sp, #0]
 80026ce:	2302      	movs	r3, #2
 80026d0:	4a70      	ldr	r2, [pc, #448]	; (8002894 <EndEffectorWrite+0x2a8>)
 80026d2:	212a      	movs	r1, #42	; 0x2a
 80026d4:	486a      	ldr	r0, [pc, #424]	; (8002880 <EndEffectorWrite+0x294>)
 80026d6:	f004 f9c7 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 6; //End Effector Status: Piking
 80026da:	4b6b      	ldr	r3, [pc, #428]	; (8002888 <EndEffectorWrite+0x29c>)
 80026dc:	2206      	movs	r2, #6
 80026de:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 80026e0:	2064      	movs	r0, #100	; 0x64
 80026e2:	f002 fd5b 	bl	800519c <HAL_Delay>
				EndEffectorReadFlag = 1;
 80026e6:	4b6c      	ldr	r3, [pc, #432]	; (8002898 <EndEffectorWrite+0x2ac>)
 80026e8:	2201      	movs	r2, #1
 80026ea:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 80026ec:	4b62      	ldr	r3, [pc, #392]	; (8002878 <EndEffectorWrite+0x28c>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
 80026f2:	e00f      	b.n	8002714 <EndEffectorWrite+0x128>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 80026f4:	4b68      	ldr	r3, [pc, #416]	; (8002898 <EndEffectorWrite+0x2ac>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d10b      	bne.n	8002714 <EndEffectorWrite+0x128>
 80026fc:	4b60      	ldr	r3, [pc, #384]	; (8002880 <EndEffectorWrite+0x294>)
 80026fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002702:	b2db      	uxtb	r3, r3
 8002704:	2b20      	cmp	r3, #32
 8002706:	d105      	bne.n	8002714 <EndEffectorWrite+0x128>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 8002708:	2301      	movs	r3, #1
 800270a:	4a64      	ldr	r2, [pc, #400]	; (800289c <EndEffectorWrite+0x2b0>)
 800270c:	212a      	movs	r1, #42	; 0x2a
 800270e:	485c      	ldr	r0, [pc, #368]	; (8002880 <EndEffectorWrite+0x294>)
 8002710:	f004 faa8 	bl	8006c64 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x07)	//Picked
 8002714:	4b61      	ldr	r3, [pc, #388]	; (800289c <EndEffectorWrite+0x2b0>)
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b07      	cmp	r3, #7
 800271a:	f040 809f 	bne.w	800285c <EndEffectorWrite+0x270>
			{
				TaskType *= -1;
 800271e:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <EndEffectorWrite+0x2b4>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	425b      	negs	r3, r3
 8002724:	4a5e      	ldr	r2, [pc, #376]	; (80028a0 <EndEffectorWrite+0x2b4>)
 8002726:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 8002728:	4b5b      	ldr	r3, [pc, #364]	; (8002898 <EndEffectorWrite+0x2ac>)
 800272a:	2200      	movs	r2, #0
 800272c:	701a      	strb	r2, [r3, #0]
				scheduler = 2;
 800272e:	4b5d      	ldr	r3, [pc, #372]	; (80028a4 <EndEffectorWrite+0x2b8>)
 8002730:	2202      	movs	r2, #2
 8002732:	601a      	str	r2, [r3, #0]
			}
		break;
 8002734:	e092      	b.n	800285c <EndEffectorWrite+0x270>
	case 5:
		if(EndEffectorWriteFlag == 1)
 8002736:	4b50      	ldr	r3, [pc, #320]	; (8002878 <EndEffectorWrite+0x28c>)
 8002738:	781b      	ldrb	r3, [r3, #0]
 800273a:	2b01      	cmp	r3, #1
 800273c:	d114      	bne.n	8002768 <EndEffectorWrite+0x17c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, PlaceData, 2, 100);
 800273e:	2364      	movs	r3, #100	; 0x64
 8002740:	9300      	str	r3, [sp, #0]
 8002742:	2302      	movs	r3, #2
 8002744:	4a58      	ldr	r2, [pc, #352]	; (80028a8 <EndEffectorWrite+0x2bc>)
 8002746:	212a      	movs	r1, #42	; 0x2a
 8002748:	484d      	ldr	r0, [pc, #308]	; (8002880 <EndEffectorWrite+0x294>)
 800274a:	f004 f98d 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 10; //End Effector Status: Placing
 800274e:	4b4e      	ldr	r3, [pc, #312]	; (8002888 <EndEffectorWrite+0x29c>)
 8002750:	220a      	movs	r2, #10
 8002752:	809a      	strh	r2, [r3, #4]
				HAL_Delay(100);
 8002754:	2064      	movs	r0, #100	; 0x64
 8002756:	f002 fd21 	bl	800519c <HAL_Delay>
				EndEffectorReadFlag = 1;
 800275a:	4b4f      	ldr	r3, [pc, #316]	; (8002898 <EndEffectorWrite+0x2ac>)
 800275c:	2201      	movs	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
				EndEffectorWriteFlag = 0;
 8002760:	4b45      	ldr	r3, [pc, #276]	; (8002878 <EndEffectorWrite+0x28c>)
 8002762:	2200      	movs	r2, #0
 8002764:	701a      	strb	r2, [r3, #0]
 8002766:	e00f      	b.n	8002788 <EndEffectorWrite+0x19c>
			}
		else if(EndEffectorReadFlag == 1 && hi2c1.State == HAL_I2C_STATE_READY)
 8002768:	4b4b      	ldr	r3, [pc, #300]	; (8002898 <EndEffectorWrite+0x2ac>)
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	2b01      	cmp	r3, #1
 800276e:	d10b      	bne.n	8002788 <EndEffectorWrite+0x19c>
 8002770:	4b43      	ldr	r3, [pc, #268]	; (8002880 <EndEffectorWrite+0x294>)
 8002772:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002776:	b2db      	uxtb	r3, r3
 8002778:	2b20      	cmp	r3, #32
 800277a:	d105      	bne.n	8002788 <EndEffectorWrite+0x19c>
			{
				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
 800277c:	2301      	movs	r3, #1
 800277e:	4a47      	ldr	r2, [pc, #284]	; (800289c <EndEffectorWrite+0x2b0>)
 8002780:	212a      	movs	r1, #42	; 0x2a
 8002782:	483f      	ldr	r0, [pc, #252]	; (8002880 <EndEffectorWrite+0x294>)
 8002784:	f004 fa6e 	bl	8006c64 <HAL_I2C_Master_Receive_IT>
			}
		if(EndEffectorDataReadBack[0] == 0x04)	//Placed
 8002788:	4b44      	ldr	r3, [pc, #272]	; (800289c <EndEffectorWrite+0x2b0>)
 800278a:	781b      	ldrb	r3, [r3, #0]
 800278c:	2b04      	cmp	r3, #4
 800278e:	d167      	bne.n	8002860 <EndEffectorWrite+0x274>
			{
				registerFrame[2].U16 = 2; //End Effector Status: Gripper Power
 8002790:	4b3d      	ldr	r3, [pc, #244]	; (8002888 <EndEffectorWrite+0x29c>)
 8002792:	2202      	movs	r2, #2
 8002794:	809a      	strh	r2, [r3, #4]
				TaskType *= -1;
 8002796:	4b42      	ldr	r3, [pc, #264]	; (80028a0 <EndEffectorWrite+0x2b4>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	425b      	negs	r3, r3
 800279c:	4a40      	ldr	r2, [pc, #256]	; (80028a0 <EndEffectorWrite+0x2b4>)
 800279e:	6013      	str	r3, [r2, #0]
				EndEffectorReadFlag = 0;
 80027a0:	4b3d      	ldr	r3, [pc, #244]	; (8002898 <EndEffectorWrite+0x2ac>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	701a      	strb	r2, [r3, #0]
				HoleSequence += 1;
 80027a6:	4b41      	ldr	r3, [pc, #260]	; (80028ac <EndEffectorWrite+0x2c0>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	3301      	adds	r3, #1
 80027ac:	4a3f      	ldr	r2, [pc, #252]	; (80028ac <EndEffectorWrite+0x2c0>)
 80027ae:	6013      	str	r3, [r2, #0]
				if (HoleSequence == 9)
 80027b0:	4b3e      	ldr	r3, [pc, #248]	; (80028ac <EndEffectorWrite+0x2c0>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b09      	cmp	r3, #9
 80027b6:	d10c      	bne.n	80027d2 <EndEffectorWrite+0x1e6>
				{
					HoleSequence = 0;
 80027b8:	4b3c      	ldr	r3, [pc, #240]	; (80028ac <EndEffectorWrite+0x2c0>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
					TaskType = 1;
 80027be:	4b38      	ldr	r3, [pc, #224]	; (80028a0 <EndEffectorWrite+0x2b4>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
					registerFrame[1].U16 = 0;
 80027c4:	4b30      	ldr	r3, [pc, #192]	; (8002888 <EndEffectorWrite+0x29c>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	805a      	strh	r2, [r3, #2]
					scheduler = 5;
 80027ca:	4b36      	ldr	r3, [pc, #216]	; (80028a4 <EndEffectorWrite+0x2b8>)
 80027cc:	2205      	movs	r2, #5
 80027ce:	601a      	str	r2, [r3, #0]
				else
				{
					scheduler = 1;
				}
			}
		break;
 80027d0:	e046      	b.n	8002860 <EndEffectorWrite+0x274>
					scheduler = 1;
 80027d2:	4b34      	ldr	r3, [pc, #208]	; (80028a4 <EndEffectorWrite+0x2b8>)
 80027d4:	2201      	movs	r2, #1
 80027d6:	601a      	str	r2, [r3, #0]
		break;
 80027d8:	e042      	b.n	8002860 <EndEffectorWrite+0x274>
	case 6:
		if(EndEffectorWriteFlag == 1)
 80027da:	4b27      	ldr	r3, [pc, #156]	; (8002878 <EndEffectorWrite+0x28c>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d140      	bne.n	8002864 <EndEffectorWrite+0x278>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, RunModeOff, 2, 100);
 80027e2:	2364      	movs	r3, #100	; 0x64
 80027e4:	9300      	str	r3, [sp, #0]
 80027e6:	2302      	movs	r3, #2
 80027e8:	4a31      	ldr	r2, [pc, #196]	; (80028b0 <EndEffectorWrite+0x2c4>)
 80027ea:	212a      	movs	r1, #42	; 0x2a
 80027ec:	4824      	ldr	r0, [pc, #144]	; (8002880 <EndEffectorWrite+0x294>)
 80027ee:	f004 f93b 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 80027f2:	4b25      	ldr	r3, [pc, #148]	; (8002888 <EndEffectorWrite+0x29c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 80027f8:	4b1f      	ldr	r3, [pc, #124]	; (8002878 <EndEffectorWrite+0x28c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
			}
		break;
 80027fe:	e031      	b.n	8002864 <EndEffectorWrite+0x278>
	case 7:
		if(EndEffectorWriteFlag == 1)
 8002800:	4b1d      	ldr	r3, [pc, #116]	; (8002878 <EndEffectorWrite+0x28c>)
 8002802:	781b      	ldrb	r3, [r3, #0]
 8002804:	2b01      	cmp	r3, #1
 8002806:	d12f      	bne.n	8002868 <EndEffectorWrite+0x27c>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, Emergency, 1, 100);
 8002808:	2364      	movs	r3, #100	; 0x64
 800280a:	9300      	str	r3, [sp, #0]
 800280c:	2301      	movs	r3, #1
 800280e:	4a29      	ldr	r2, [pc, #164]	; (80028b4 <EndEffectorWrite+0x2c8>)
 8002810:	212a      	movs	r1, #42	; 0x2a
 8002812:	481b      	ldr	r0, [pc, #108]	; (8002880 <EndEffectorWrite+0x294>)
 8002814:	f004 f928 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 8002818:	4b1b      	ldr	r3, [pc, #108]	; (8002888 <EndEffectorWrite+0x29c>)
 800281a:	2200      	movs	r2, #0
 800281c:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 800281e:	4b16      	ldr	r3, [pc, #88]	; (8002878 <EndEffectorWrite+0x28c>)
 8002820:	2200      	movs	r2, #0
 8002822:	701a      	strb	r2, [r3, #0]
			}
		break;
 8002824:	e020      	b.n	8002868 <EndEffectorWrite+0x27c>
	case 8:
		if(EndEffectorWriteFlag == 1)
 8002826:	4b14      	ldr	r3, [pc, #80]	; (8002878 <EndEffectorWrite+0x28c>)
 8002828:	781b      	ldrb	r3, [r3, #0]
 800282a:	2b01      	cmp	r3, #1
 800282c:	d11e      	bne.n	800286c <EndEffectorWrite+0x280>
			{
				HAL_I2C_Master_Transmit(&hi2c1, 0x15 << 1, QuitEmergency, 4, 100);
 800282e:	2364      	movs	r3, #100	; 0x64
 8002830:	9300      	str	r3, [sp, #0]
 8002832:	2304      	movs	r3, #4
 8002834:	4a20      	ldr	r2, [pc, #128]	; (80028b8 <EndEffectorWrite+0x2cc>)
 8002836:	212a      	movs	r1, #42	; 0x2a
 8002838:	4811      	ldr	r0, [pc, #68]	; (8002880 <EndEffectorWrite+0x294>)
 800283a:	f004 f915 	bl	8006a68 <HAL_I2C_Master_Transmit>
				registerFrame[2].U16 = 0; //End Effector Status: Off
 800283e:	4b12      	ldr	r3, [pc, #72]	; (8002888 <EndEffectorWrite+0x29c>)
 8002840:	2200      	movs	r2, #0
 8002842:	809a      	strh	r2, [r3, #4]
				EndEffectorWriteFlag = 0;
 8002844:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <EndEffectorWrite+0x28c>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
			}
		break;
 800284a:	e00f      	b.n	800286c <EndEffectorWrite+0x280>
		break;
 800284c:	bf00      	nop
 800284e:	e00e      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002850:	bf00      	nop
 8002852:	e00c      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002854:	bf00      	nop
 8002856:	e00a      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002858:	bf00      	nop
 800285a:	e008      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 800285c:	bf00      	nop
 800285e:	e006      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002860:	bf00      	nop
 8002862:	e004      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002864:	bf00      	nop
 8002866:	e002      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 8002868:	bf00      	nop
 800286a:	e000      	b.n	800286e <EndEffectorWrite+0x282>
		break;
 800286c:	bf00      	nop
	}
}
 800286e:	bf00      	nop
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}
 8002874:	20000b00 	.word	0x20000b00
 8002878:	20000af8 	.word	0x20000af8
 800287c:	20000228 	.word	0x20000228
 8002880:	200004f8 	.word	0x200004f8
 8002884:	20000234 	.word	0x20000234
 8002888:	20000fe0 	.word	0x20000fe0
 800288c:	20000238 	.word	0x20000238
 8002890:	2000023c 	.word	0x2000023c
 8002894:	20000244 	.word	0x20000244
 8002898:	20000af9 	.word	0x20000af9
 800289c:	20000afc 	.word	0x20000afc
 80028a0:	20000204 	.word	0x20000204
 80028a4:	20000200 	.word	0x20000200
 80028a8:	20000248 	.word	0x20000248
 80028ac:	20000964 	.word	0x20000964
 80028b0:	20000240 	.word	0x20000240
 80028b4:	2000022c 	.word	0x2000022c
 80028b8:	20000230 	.word	0x20000230
 80028bc:	00000000 	.word	0x00000000

080028c0 <VelocityApprox>:

void VelocityApprox()
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
	static int16_t lastposition = 0;
	velocity = (position - lastposition)/0.001; //pulse/s
 80028c4:	4b12      	ldr	r3, [pc, #72]	; (8002910 <VelocityApprox+0x50>)
 80028c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028ca:	461a      	mov	r2, r3
 80028cc:	4b11      	ldr	r3, [pc, #68]	; (8002914 <VelocityApprox+0x54>)
 80028ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d2:	1ad3      	subs	r3, r2, r3
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7fd fe2d 	bl	8000534 <__aeabi_i2d>
 80028da:	a30b      	add	r3, pc, #44	; (adr r3, 8002908 <VelocityApprox+0x48>)
 80028dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e0:	f7fd ffbc 	bl	800085c <__aeabi_ddiv>
 80028e4:	4602      	mov	r2, r0
 80028e6:	460b      	mov	r3, r1
 80028e8:	4610      	mov	r0, r2
 80028ea:	4619      	mov	r1, r3
 80028ec:	f7fe f984 	bl	8000bf8 <__aeabi_d2f>
 80028f0:	4603      	mov	r3, r0
 80028f2:	4a09      	ldr	r2, [pc, #36]	; (8002918 <VelocityApprox+0x58>)
 80028f4:	6013      	str	r3, [r2, #0]
	lastposition = position;
 80028f6:	4b06      	ldr	r3, [pc, #24]	; (8002910 <VelocityApprox+0x50>)
 80028f8:	f9b3 2000 	ldrsh.w	r2, [r3]
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <VelocityApprox+0x54>)
 80028fe:	801a      	strh	r2, [r3, #0]
}
 8002900:	bf00      	nop
 8002902:	bd80      	pop	{r7, pc}
 8002904:	f3af 8000 	nop.w
 8002908:	d2f1a9fc 	.word	0xd2f1a9fc
 800290c:	3f50624d 	.word	0x3f50624d
 8002910:	200009ac 	.word	0x200009ac
 8002914:	200010d4 	.word	0x200010d4
 8002918:	200009d0 	.word	0x200009d0

0800291c <AccelerationApprox>:

void AccelerationApprox()
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0
	static float LastVelo = 0;
	Accel = (velocity - LastVelo);	//pulse/s^2
 8002920:	4b09      	ldr	r3, [pc, #36]	; (8002948 <AccelerationApprox+0x2c>)
 8002922:	ed93 7a00 	vldr	s14, [r3]
 8002926:	4b09      	ldr	r3, [pc, #36]	; (800294c <AccelerationApprox+0x30>)
 8002928:	edd3 7a00 	vldr	s15, [r3]
 800292c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <AccelerationApprox+0x34>)
 8002932:	edc3 7a00 	vstr	s15, [r3]
	LastVelo = velocity;
 8002936:	4b04      	ldr	r3, [pc, #16]	; (8002948 <AccelerationApprox+0x2c>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a04      	ldr	r2, [pc, #16]	; (800294c <AccelerationApprox+0x30>)
 800293c:	6013      	str	r3, [r2, #0]

}
 800293e:	bf00      	nop
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	200009d0 	.word	0x200009d0
 800294c:	200010d8 	.word	0x200010d8
 8002950:	200009d4 	.word	0x200009d4
 8002954:	00000000 	.word	0x00000000

08002958 <Routine>:

void Routine()
{
 8002958:	b580      	push	{r7, lr}
 800295a:	af00      	add	r7, sp, #0
	position_f = position;
 800295c:	4b28      	ldr	r3, [pc, #160]	; (8002a00 <Routine+0xa8>)
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	ee07 3a90 	vmov	s15, r3
 8002966:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800296a:	4b26      	ldr	r3, [pc, #152]	; (8002a04 <Routine+0xac>)
 800296c:	edc3 7a00 	vstr	s15, [r3]
	Yactualposition = position_f*0.45;			//mm*10
 8002970:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <Routine+0xac>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4618      	mov	r0, r3
 8002976:	f7fd fdef 	bl	8000558 <__aeabi_f2d>
 800297a:	a31f      	add	r3, pc, #124	; (adr r3, 80029f8 <Routine+0xa0>)
 800297c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002980:	f7fd fe42 	bl	8000608 <__aeabi_dmul>
 8002984:	4602      	mov	r2, r0
 8002986:	460b      	mov	r3, r1
 8002988:	4610      	mov	r0, r2
 800298a:	4619      	mov	r1, r3
 800298c:	f7fe f8ec 	bl	8000b68 <__aeabi_d2iz>
 8002990:	4603      	mov	r3, r0
 8002992:	b21a      	sxth	r2, r3
 8002994:	4b1c      	ldr	r3, [pc, #112]	; (8002a08 <Routine+0xb0>)
 8002996:	801a      	strh	r2, [r3, #0]
	registerFrame[17].U16 = Yactualposition;	//mm*10			//Y Actual Position
 8002998:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <Routine+0xb0>)
 800299a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800299e:	b29a      	uxth	r2, r3
 80029a0:	4b1a      	ldr	r3, [pc, #104]	; (8002a0c <Routine+0xb4>)
 80029a2:	845a      	strh	r2, [r3, #34]	; 0x22
	registerFrame[18].U16 = velocity*0.45;		//mm/s*10		//Y Actual Speed
 80029a4:	4b1a      	ldr	r3, [pc, #104]	; (8002a10 <Routine+0xb8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdd5 	bl	8000558 <__aeabi_f2d>
 80029ae:	a312      	add	r3, pc, #72	; (adr r3, 80029f8 <Routine+0xa0>)
 80029b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029b4:	f7fd fe28 	bl	8000608 <__aeabi_dmul>
 80029b8:	4602      	mov	r2, r0
 80029ba:	460b      	mov	r3, r1
 80029bc:	4610      	mov	r0, r2
 80029be:	4619      	mov	r1, r3
 80029c0:	f7fe f8fa 	bl	8000bb8 <__aeabi_d2uiz>
 80029c4:	4603      	mov	r3, r0
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b10      	ldr	r3, [pc, #64]	; (8002a0c <Routine+0xb4>)
 80029ca:	849a      	strh	r2, [r3, #36]	; 0x24
	registerFrame[19].U16 = Accel*0.45; 		//mm/s^2*10		//Y Actual Acceleration
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <Routine+0xbc>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd fdc1 	bl	8000558 <__aeabi_f2d>
 80029d6:	a308      	add	r3, pc, #32	; (adr r3, 80029f8 <Routine+0xa0>)
 80029d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029dc:	f7fd fe14 	bl	8000608 <__aeabi_dmul>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4610      	mov	r0, r2
 80029e6:	4619      	mov	r1, r3
 80029e8:	f7fe f8e6 	bl	8000bb8 <__aeabi_d2uiz>
 80029ec:	4603      	mov	r3, r0
 80029ee:	b29a      	uxth	r2, r3
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <Routine+0xb4>)
 80029f2:	84da      	strh	r2, [r3, #38]	; 0x26
}
 80029f4:	bf00      	nop
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	cccccccd 	.word	0xcccccccd
 80029fc:	3fdccccc 	.word	0x3fdccccc
 8002a00:	200009ac 	.word	0x200009ac
 8002a04:	200009b0 	.word	0x200009b0
 8002a08:	200009b4 	.word	0x200009b4
 8002a0c:	20000fe0 	.word	0x20000fe0
 8002a10:	200009d0 	.word	0x200009d0
 8002a14:	200009d4 	.word	0x200009d4

08002a18 <PIDcal>:

float PIDcal()
{
 8002a18:	b480      	push	{r7}
 8002a1a:	af00      	add	r7, sp, #0
	//position control
	errorposition = setposition - position;
 8002a1c:	4b3d      	ldr	r3, [pc, #244]	; (8002b14 <PIDcal+0xfc>)
 8002a1e:	ed93 7a00 	vldr	s14, [r3]
 8002a22:	4b3d      	ldr	r3, [pc, #244]	; (8002b18 <PIDcal+0x100>)
 8002a24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a28:	ee07 3a90 	vmov	s15, r3
 8002a2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a30:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a34:	4b39      	ldr	r3, [pc, #228]	; (8002b1c <PIDcal+0x104>)
 8002a36:	edc3 7a00 	vstr	s15, [r3]

	if(errorposition >= 22)
 8002a3a:	4b38      	ldr	r3, [pc, #224]	; (8002b1c <PIDcal+0x104>)
 8002a3c:	edd3 7a00 	vldr	s15, [r3]
 8002a40:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002a44:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a4c:	db0a      	blt.n	8002a64 <PIDcal+0x4c>
	{
		errorposition += 22;
 8002a4e:	4b33      	ldr	r3, [pc, #204]	; (8002b1c <PIDcal+0x104>)
 8002a50:	edd3 7a00 	vldr	s15, [r3]
 8002a54:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002a58:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002a5c:	4b2f      	ldr	r3, [pc, #188]	; (8002b1c <PIDcal+0x104>)
 8002a5e:	edc3 7a00 	vstr	s15, [r3]
 8002a62:	e013      	b.n	8002a8c <PIDcal+0x74>
	}
	else if(errorposition <= -22)
 8002a64:	4b2d      	ldr	r3, [pc, #180]	; (8002b1c <PIDcal+0x104>)
 8002a66:	edd3 7a00 	vldr	s15, [r3]
 8002a6a:	eebb 7a06 	vmov.f32	s14, #182	; 0xc1b00000 -22.0
 8002a6e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002a72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a76:	d809      	bhi.n	8002a8c <PIDcal+0x74>
	{
		errorposition -= 22;
 8002a78:	4b28      	ldr	r3, [pc, #160]	; (8002b1c <PIDcal+0x104>)
 8002a7a:	edd3 7a00 	vldr	s15, [r3]
 8002a7e:	eeb3 7a06 	vmov.f32	s14, #54	; 0x41b00000  22.0
 8002a82:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002a86:	4b25      	ldr	r3, [pc, #148]	; (8002b1c <PIDcal+0x104>)
 8002a88:	edc3 7a00 	vstr	s15, [r3]
	}

	integral_p = integral_p + errorposition;
 8002a8c:	4b24      	ldr	r3, [pc, #144]	; (8002b20 <PIDcal+0x108>)
 8002a8e:	ed93 7a00 	vldr	s14, [r3]
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <PIDcal+0x104>)
 8002a94:	edd3 7a00 	vldr	s15, [r3]
 8002a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9c:	4b20      	ldr	r3, [pc, #128]	; (8002b20 <PIDcal+0x108>)
 8002a9e:	edc3 7a00 	vstr	s15, [r3]
	derivative_p = errorposition - pre_errorposition;
 8002aa2:	4b1e      	ldr	r3, [pc, #120]	; (8002b1c <PIDcal+0x104>)
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <PIDcal+0x10c>)
 8002aaa:	edd3 7a00 	vldr	s15, [r3]
 8002aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ab2:	4b1d      	ldr	r3, [pc, #116]	; (8002b28 <PIDcal+0x110>)
 8002ab4:	edc3 7a00 	vstr	s15, [r3]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 8002ab8:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <PIDcal+0x114>)
 8002aba:	ed93 7a00 	vldr	s14, [r3]
 8002abe:	4b17      	ldr	r3, [pc, #92]	; (8002b1c <PIDcal+0x104>)
 8002ac0:	edd3 7a00 	vldr	s15, [r3]
 8002ac4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ac8:	4b19      	ldr	r3, [pc, #100]	; (8002b30 <PIDcal+0x118>)
 8002aca:	edd3 6a00 	vldr	s13, [r3]
 8002ace:	4b14      	ldr	r3, [pc, #80]	; (8002b20 <PIDcal+0x108>)
 8002ad0:	edd3 7a00 	vldr	s15, [r3]
 8002ad4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002adc:	4b15      	ldr	r3, [pc, #84]	; (8002b34 <PIDcal+0x11c>)
 8002ade:	edd3 6a00 	vldr	s13, [r3]
 8002ae2:	4b11      	ldr	r3, [pc, #68]	; (8002b28 <PIDcal+0x110>)
 8002ae4:	edd3 7a00 	vldr	s15, [r3]
 8002ae8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aec:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002af0:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <PIDcal+0x120>)
 8002af2:	edc3 7a00 	vstr	s15, [r3]

	pre_errorposition = errorposition;
 8002af6:	4b09      	ldr	r3, [pc, #36]	; (8002b1c <PIDcal+0x104>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a0a      	ldr	r2, [pc, #40]	; (8002b24 <PIDcal+0x10c>)
 8002afc:	6013      	str	r3, [r2, #0]
//	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
//
//	pre_errorvelocity = errorvelocity;

//	return duty;
	return u_position;
 8002afe:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <PIDcal+0x120>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	ee07 3a90 	vmov	s15, r3
}
 8002b06:	eeb0 0a67 	vmov.f32	s0, s15
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200009b8 	.word	0x200009b8
 8002b18:	200009ac 	.word	0x200009ac
 8002b1c:	200009bc 	.word	0x200009bc
 8002b20:	200009c8 	.word	0x200009c8
 8002b24:	200009c4 	.word	0x200009c4
 8002b28:	200009cc 	.word	0x200009cc
 8002b2c:	20000218 	.word	0x20000218
 8002b30:	2000021c 	.word	0x2000021c
 8002b34:	20000220 	.word	0x20000220
 8002b38:	200009c0 	.word	0x200009c0

08002b3c <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8002b40:	2140      	movs	r1, #64	; 0x40
 8002b42:	4845      	ldr	r0, [pc, #276]	; (8002c58 <JoystickPinUpdate+0x11c>)
 8002b44:	f003 fe02 	bl	800674c <HAL_GPIO_ReadPin>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	4b43      	ldr	r3, [pc, #268]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b4e:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8002b50:	4b42      	ldr	r3, [pc, #264]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	2b01      	cmp	r3, #1
 8002b56:	d107      	bne.n	8002b68 <JoystickPinUpdate+0x2c>
 8002b58:	4b40      	ldr	r3, [pc, #256]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d103      	bne.n	8002b68 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8002b60:	4b3e      	ldr	r3, [pc, #248]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b62:	2201      	movs	r2, #1
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	e002      	b.n	8002b6e <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8002b68:	4b3c      	ldr	r3, [pc, #240]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8002b6e:	4b3b      	ldr	r3, [pc, #236]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a3a      	ldr	r2, [pc, #232]	; (8002c5c <JoystickPinUpdate+0x120>)
 8002b74:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8002b76:	2120      	movs	r1, #32
 8002b78:	4839      	ldr	r0, [pc, #228]	; (8002c60 <JoystickPinUpdate+0x124>)
 8002b7a:	f003 fde7 	bl	800674c <HAL_GPIO_ReadPin>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	461a      	mov	r2, r3
 8002b82:	4b38      	ldr	r3, [pc, #224]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002b84:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8002b86:	4b37      	ldr	r3, [pc, #220]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d107      	bne.n	8002b9e <JoystickPinUpdate+0x62>
 8002b8e:	4b35      	ldr	r3, [pc, #212]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d103      	bne.n	8002b9e <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8002b96:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002b98:	2201      	movs	r2, #1
 8002b9a:	609a      	str	r2, [r3, #8]
 8002b9c:	e002      	b.n	8002ba4 <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8002b9e:	4b31      	ldr	r3, [pc, #196]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8002ba4:	4b2f      	ldr	r3, [pc, #188]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	; (8002c64 <JoystickPinUpdate+0x128>)
 8002baa:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8002bac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002bb0:	482b      	ldr	r0, [pc, #172]	; (8002c60 <JoystickPinUpdate+0x124>)
 8002bb2:	f003 fdcb 	bl	800674c <HAL_GPIO_ReadPin>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4b2b      	ldr	r3, [pc, #172]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bbc:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8002bbe:	4b2a      	ldr	r3, [pc, #168]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d107      	bne.n	8002bd6 <JoystickPinUpdate+0x9a>
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d103      	bne.n	8002bd6 <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	609a      	str	r2, [r3, #8]
 8002bd4:	e002      	b.n	8002bdc <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8002bdc:	4b22      	ldr	r3, [pc, #136]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	4a21      	ldr	r2, [pc, #132]	; (8002c68 <JoystickPinUpdate+0x12c>)
 8002be2:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8002be4:	2120      	movs	r1, #32
 8002be6:	481c      	ldr	r0, [pc, #112]	; (8002c58 <JoystickPinUpdate+0x11c>)
 8002be8:	f003 fdb0 	bl	800674c <HAL_GPIO_ReadPin>
 8002bec:	4603      	mov	r3, r0
 8002bee:	461a      	mov	r2, r3
 8002bf0:	4b1e      	ldr	r3, [pc, #120]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002bf2:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8002bf4:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	d107      	bne.n	8002c0c <JoystickPinUpdate+0xd0>
 8002bfc:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d103      	bne.n	8002c0c <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8002c04:	4b19      	ldr	r3, [pc, #100]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	609a      	str	r2, [r3, #8]
 8002c0a:	e002      	b.n	8002c12 <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8002c0c:	4b17      	ldr	r3, [pc, #92]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8002c12:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	4a15      	ldr	r2, [pc, #84]	; (8002c6c <JoystickPinUpdate+0x130>)
 8002c18:	6013      	str	r3, [r2, #0]

	  HomingButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 8002c1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002c1e:	480e      	ldr	r0, [pc, #56]	; (8002c58 <JoystickPinUpdate+0x11c>)
 8002c20:	f003 fd94 	bl	800674c <HAL_GPIO_ReadPin>
 8002c24:	4603      	mov	r3, r0
 8002c26:	461a      	mov	r2, r3
 8002c28:	4b11      	ldr	r3, [pc, #68]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c2a:	605a      	str	r2, [r3, #4]
	  if (HomingButton.last == 1 && HomingButton.current == 0)
 8002c2c:	4b10      	ldr	r3, [pc, #64]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <JoystickPinUpdate+0x108>
 8002c34:	4b0e      	ldr	r3, [pc, #56]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d103      	bne.n	8002c44 <JoystickPinUpdate+0x108>
	  {
		  HomingButton.flag = 1;
 8002c3c:	4b0c      	ldr	r3, [pc, #48]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c3e:	2201      	movs	r2, #1
 8002c40:	609a      	str	r2, [r3, #8]
 8002c42:	e002      	b.n	8002c4a <JoystickPinUpdate+0x10e>
	  }
	  else
	  {
		  HomingButton.flag = 0;
 8002c44:	4b0a      	ldr	r3, [pc, #40]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c46:	2200      	movs	r2, #0
 8002c48:	609a      	str	r2, [r3, #8]
	  }
	  HomingButton.last = HomingButton.current;
 8002c4a:	4b09      	ldr	r3, [pc, #36]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	4a08      	ldr	r2, [pc, #32]	; (8002c70 <JoystickPinUpdate+0x134>)
 8002c50:	6013      	str	r3, [r2, #0]
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	40020400 	.word	0x40020400
 8002c5c:	20000ab0 	.word	0x20000ab0
 8002c60:	40020000 	.word	0x40020000
 8002c64:	20000abc 	.word	0x20000abc
 8002c68:	20000ac8 	.word	0x20000ac8
 8002c6c:	20000ad4 	.word	0x20000ad4
 8002c70:	20000ae0 	.word	0x20000ae0

08002c74 <JoystickControl>:

void JoystickControl()
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
	if(RoughButton.flag == 1)
 8002c78:	4b5e      	ldr	r3, [pc, #376]	; (8002df4 <JoystickControl+0x180>)
 8002c7a:	689b      	ldr	r3, [r3, #8]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d106      	bne.n	8002c8e <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8002c80:	4b5d      	ldr	r3, [pc, #372]	; (8002df8 <JoystickControl+0x184>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8002c86:	4b5b      	ldr	r3, [pc, #364]	; (8002df4 <JoystickControl+0x180>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	e014      	b.n	8002cb8 <JoystickControl+0x44>
	}
	else if(FineButton.flag == 1)
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <JoystickControl+0x188>)
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d106      	bne.n	8002ca4 <JoystickControl+0x30>
	{
		JoySpeed = 1;
 8002c96:	4b58      	ldr	r3, [pc, #352]	; (8002df8 <JoystickControl+0x184>)
 8002c98:	2201      	movs	r2, #1
 8002c9a:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8002c9c:	4b57      	ldr	r3, [pc, #348]	; (8002dfc <JoystickControl+0x188>)
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	609a      	str	r2, [r3, #8]
 8002ca2:	e009      	b.n	8002cb8 <JoystickControl+0x44>
	}
	else if(HomingButton.flag == 1)
 8002ca4:	4b56      	ldr	r3, [pc, #344]	; (8002e00 <JoystickControl+0x18c>)
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d105      	bne.n	8002cb8 <JoystickControl+0x44>
	{
		JoySpeed = 2;
 8002cac:	4b52      	ldr	r3, [pc, #328]	; (8002df8 <JoystickControl+0x184>)
 8002cae:	2202      	movs	r2, #2
 8002cb0:	601a      	str	r2, [r3, #0]
		HomingButton.flag = 0;
 8002cb2:	4b53      	ldr	r3, [pc, #332]	; (8002e00 <JoystickControl+0x18c>)
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8002cb8:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <JoystickControl+0x184>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	2b02      	cmp	r3, #2
 8002cbe:	f000 808a 	beq.w	8002dd6 <JoystickControl+0x162>
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	f300 8093 	bgt.w	8002dee <JoystickControl+0x17a>
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d002      	beq.n	8002cd2 <JoystickControl+0x5e>
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d041      	beq.n	8002d54 <JoystickControl+0xe0>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
		Homing();
		break;
	}
}
 8002cd0:	e08d      	b.n	8002dee <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002cd2:	4b4c      	ldr	r3, [pc, #304]	; (8002e04 <JoystickControl+0x190>)
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	dd09      	ble.n	8002cf2 <JoystickControl+0x7e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002cde:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <JoystickControl+0x194>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,15000);
 8002ce6:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <JoystickControl+0x194>)
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002cee:	635a      	str	r2, [r3, #52]	; 0x34
 8002cf0:	e016      	b.n	8002d20 <JoystickControl+0xac>
		else if(XYSwitch[1] < 1000)
 8002cf2:	4b44      	ldr	r3, [pc, #272]	; (8002e04 <JoystickControl+0x190>)
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfa:	da09      	bge.n	8002d10 <JoystickControl+0x9c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,15000);
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <JoystickControl+0x194>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f643 2298 	movw	r2, #15000	; 0x3a98
 8002d04:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d06:	4b40      	ldr	r3, [pc, #256]	; (8002e08 <JoystickControl+0x194>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
 8002d0e:	e007      	b.n	8002d20 <JoystickControl+0xac>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d10:	4b3d      	ldr	r3, [pc, #244]	; (8002e08 <JoystickControl+0x194>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2200      	movs	r2, #0
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d18:	4b3b      	ldr	r3, [pc, #236]	; (8002e08 <JoystickControl+0x194>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002d20:	4b38      	ldr	r3, [pc, #224]	; (8002e04 <JoystickControl+0x190>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	dd04      	ble.n	8002d36 <JoystickControl+0xc2>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002d2c:	4b37      	ldr	r3, [pc, #220]	; (8002e0c <JoystickControl+0x198>)
 8002d2e:	2204      	movs	r2, #4
 8002d30:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002d34:	e05b      	b.n	8002dee <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002d36:	4b33      	ldr	r3, [pc, #204]	; (8002e04 <JoystickControl+0x190>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d3e:	da04      	bge.n	8002d4a <JoystickControl+0xd6>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002d40:	4b32      	ldr	r3, [pc, #200]	; (8002e0c <JoystickControl+0x198>)
 8002d42:	2208      	movs	r2, #8
 8002d44:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002d48:	e051      	b.n	8002dee <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002d4a:	4b30      	ldr	r3, [pc, #192]	; (8002e0c <JoystickControl+0x198>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002d52:	e04c      	b.n	8002dee <JoystickControl+0x17a>
		if(XYSwitch[1] > 3000)
 8002d54:	4b2b      	ldr	r3, [pc, #172]	; (8002e04 <JoystickControl+0x190>)
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	dd09      	ble.n	8002d74 <JoystickControl+0x100>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d60:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <JoystickControl+0x194>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	2200      	movs	r2, #0
 8002d66:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <JoystickControl+0x194>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d70:	635a      	str	r2, [r3, #52]	; 0x34
 8002d72:	e016      	b.n	8002da2 <JoystickControl+0x12e>
		else if(XYSwitch[1] < 1000)
 8002d74:	4b23      	ldr	r3, [pc, #140]	; (8002e04 <JoystickControl+0x190>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d7c:	da09      	bge.n	8002d92 <JoystickControl+0x11e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,10000);
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <JoystickControl+0x194>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f242 7210 	movw	r2, #10000	; 0x2710
 8002d86:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d88:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <JoystickControl+0x194>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	635a      	str	r2, [r3, #52]	; 0x34
 8002d90:	e007      	b.n	8002da2 <JoystickControl+0x12e>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002d92:	4b1d      	ldr	r3, [pc, #116]	; (8002e08 <JoystickControl+0x194>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2200      	movs	r2, #0
 8002d98:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	; (8002e08 <JoystickControl+0x194>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	635a      	str	r2, [r3, #52]	; 0x34
		if(XYSwitch[0] > 3000)
 8002da2:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <JoystickControl+0x190>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002daa:	4293      	cmp	r3, r2
 8002dac:	dd04      	ble.n	8002db8 <JoystickControl+0x144>
			registerFrame[64].U16 = 4; //X Moving Status: Jog Left
 8002dae:	4b17      	ldr	r3, [pc, #92]	; (8002e0c <JoystickControl+0x198>)
 8002db0:	2204      	movs	r2, #4
 8002db2:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002db6:	e01a      	b.n	8002dee <JoystickControl+0x17a>
		else if(XYSwitch[0] < 1000)
 8002db8:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <JoystickControl+0x190>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dc0:	da04      	bge.n	8002dcc <JoystickControl+0x158>
			registerFrame[64].U16 = 8; //X Moving Status: Jog Right
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <JoystickControl+0x198>)
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dca:	e010      	b.n	8002dee <JoystickControl+0x17a>
			registerFrame[64].U16 = 0; //X Moving Status: Stop
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	; (8002e0c <JoystickControl+0x198>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
		break;
 8002dd4:	e00b      	b.n	8002dee <JoystickControl+0x17a>
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <JoystickControl+0x194>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,10000);
 8002dde:	4b0a      	ldr	r3, [pc, #40]	; (8002e08 <JoystickControl+0x194>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002de6:	635a      	str	r2, [r3, #52]	; 0x34
		Homing();
 8002de8:	f7ff fba0 	bl	800252c <Homing>
		break;
 8002dec:	bf00      	nop
}
 8002dee:	bf00      	nop
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	20000ad4 	.word	0x20000ad4
 8002df8:	20000af4 	.word	0x20000af4
 8002dfc:	20000ac8 	.word	0x20000ac8
 8002e00:	20000ae0 	.word	0x20000ae0
 8002e04:	20000aec 	.word	0x20000aec
 8002e08:	2000054c 	.word	0x2000054c
 8002e0c:	20000fe0 	.word	0x20000fe0

08002e10 <JoystickLocationState>:

void JoystickLocationState()
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	ed2d 8b02 	vpush	{d8}
 8002e16:	af00      	add	r7, sp, #0
	if(registerFrame[1].U16 == 1)	//Base System Status: Set Pick Tray
 8002e18:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e1a:	885b      	ldrh	r3, [r3, #2]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d114      	bne.n	8002e4a <JoystickLocationState+0x3a>
	{
		registerFrame[1].U16 = 0;
 8002e20:	4b5f      	ldr	r3, [pc, #380]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 1;	//Y Moving Status: Jog Pick
 8002e26:	4b5e      	ldr	r3, [pc, #376]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e28:	2201      	movs	r2, #1
 8002e2a:	841a      	strh	r2, [r3, #32]
		EndEffectorState = 1;		//TestModeOn
 8002e2c:	4b5d      	ldr	r3, [pc, #372]	; (8002fa4 <JoystickLocationState+0x194>)
 8002e2e:	2201      	movs	r2, #1
 8002e30:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 1;	//End Effector Status: Laser On
 8002e32:	4b5b      	ldr	r3, [pc, #364]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e34:	2201      	movs	r2, #1
 8002e36:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8002e38:	4b5b      	ldr	r3, [pc, #364]	; (8002fa8 <JoystickLocationState+0x198>)
 8002e3a:	2201      	movs	r2, #1
 8002e3c:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8002e3e:	f7ff fbd5 	bl	80025ec <EndEffectorWrite>
		state = 1;					//Go Pick state
 8002e42:	4b5a      	ldr	r3, [pc, #360]	; (8002fac <JoystickLocationState+0x19c>)
 8002e44:	2201      	movs	r2, #1
 8002e46:	601a      	str	r2, [r3, #0]
 8002e48:	e00f      	b.n	8002e6a <JoystickLocationState+0x5a>
	}
	else if(registerFrame[1].U16 == 2)	//Base System Status: Set Place Tray
 8002e4a:	4b55      	ldr	r3, [pc, #340]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e4c:	885b      	ldrh	r3, [r3, #2]
 8002e4e:	2b02      	cmp	r3, #2
 8002e50:	d10b      	bne.n	8002e6a <JoystickLocationState+0x5a>
	{
		registerFrame[1].U16 = 0;
 8002e52:	4b53      	ldr	r3, [pc, #332]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	805a      	strh	r2, [r3, #2]
		registerFrame[16].U16 = 2;	//Y Moving Status: Jog Place
 8002e58:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	841a      	strh	r2, [r3, #32]
		registerFrame[2].U16 = 1;	//Laser On
 8002e5e:	4b50      	ldr	r3, [pc, #320]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	809a      	strh	r2, [r3, #4]
		state = 3;					//Go Place state
 8002e64:	4b51      	ldr	r3, [pc, #324]	; (8002fac <JoystickLocationState+0x19c>)
 8002e66:	2203      	movs	r2, #3
 8002e68:	601a      	str	r2, [r3, #0]
	}
	if(registerFrame[1].U16 == 8)	//Run Tray Mode
 8002e6a:	4b4d      	ldr	r3, [pc, #308]	; (8002fa0 <JoystickLocationState+0x190>)
 8002e6c:	885b      	ldrh	r3, [r3, #2]
 8002e6e:	2b08      	cmp	r3, #8
 8002e70:	d102      	bne.n	8002e78 <JoystickLocationState+0x68>
	{
		state = 5;
 8002e72:	4b4e      	ldr	r3, [pc, #312]	; (8002fac <JoystickLocationState+0x19c>)
 8002e74:	2205      	movs	r2, #5
 8002e76:	601a      	str	r2, [r3, #0]
	}


	switch(state)
 8002e78:	4b4c      	ldr	r3, [pc, #304]	; (8002fac <JoystickLocationState+0x19c>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3b01      	subs	r3, #1
 8002e7e:	2b04      	cmp	r3, #4
 8002e80:	f200 8731 	bhi.w	8003ce6 <JoystickLocationState+0xed6>
 8002e84:	a201      	add	r2, pc, #4	; (adr r2, 8002e8c <JoystickLocationState+0x7c>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002ea1 	.word	0x08002ea1
 8002e90:	08002f55 	.word	0x08002f55
 8002e94:	0800356d 	.word	0x0800356d
 8002e98:	08003685 	.word	0x08003685
 8002e9c:	08003c7b 	.word	0x08003c7b
	{
	//Get Pick Tray 1st Point
	case 1:
		PickTray.L1[0] = 0;
 8002ea0:	4b43      	ldr	r3, [pc, #268]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002ea2:	f04f 0200 	mov.w	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]
		PickTray.L2[0] = 0;
 8002ea8:	4b41      	ldr	r3, [pc, #260]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	609a      	str	r2, [r3, #8]
		PickTray.L1[1] = 0;
 8002eb0:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002eb2:	f04f 0200 	mov.w	r2, #0
 8002eb6:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8002eb8:	4b3d      	ldr	r3, [pc, #244]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002eba:	f04f 0200 	mov.w	r2, #0
 8002ebe:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8002ec0:	4b3c      	ldr	r3, [pc, #240]	; (8002fb4 <JoystickLocationState+0x1a4>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	f040 8705 	bne.w	8003cd4 <JoystickLocationState+0xec4>
		{
			if(registerFrame[68].U16 >= 30000)
 8002eca:	4b35      	ldr	r3, [pc, #212]	; (8002fa0 <JoystickLocationState+0x190>)
 8002ecc:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ed0:	f247 522f 	movw	r2, #29999	; 0x752f
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d912      	bls.n	8002efe <JoystickLocationState+0xee>
			{
				PickTray.L1[0] = (registerFrame[68].U16-65536)/10;
 8002ed8:	4b31      	ldr	r3, [pc, #196]	; (8002fa0 <JoystickLocationState+0x190>)
 8002eda:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002ede:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002ee2:	4a35      	ldr	r2, [pc, #212]	; (8002fb8 <JoystickLocationState+0x1a8>)
 8002ee4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ee8:	1092      	asrs	r2, r2, #2
 8002eea:	17db      	asrs	r3, r3, #31
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ef6:	4b2e      	ldr	r3, [pc, #184]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002ef8:	edc3 7a00 	vstr	s15, [r3]
 8002efc:	e00e      	b.n	8002f1c <JoystickLocationState+0x10c>
			}
			else
			{
				PickTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002efe:	4b28      	ldr	r3, [pc, #160]	; (8002fa0 <JoystickLocationState+0x190>)
 8002f00:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f04:	4a2d      	ldr	r2, [pc, #180]	; (8002fbc <JoystickLocationState+0x1ac>)
 8002f06:	fba2 2303 	umull	r2, r3, r2, r3
 8002f0a:	08db      	lsrs	r3, r3, #3
 8002f0c:	b29b      	uxth	r3, r3
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f16:	4b26      	ldr	r3, [pc, #152]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002f18:	edc3 7a00 	vstr	s15, [r3]
			}
			PickTray.L1[1] = position*0.045; //Pick Tray Y Position 1 //mm
 8002f1c:	4b28      	ldr	r3, [pc, #160]	; (8002fc0 <JoystickLocationState+0x1b0>)
 8002f1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fb06 	bl	8000534 <__aeabi_i2d>
 8002f28:	a31b      	add	r3, pc, #108	; (adr r3, 8002f98 <JoystickLocationState+0x188>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd fb6b 	bl	8000608 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4610      	mov	r0, r2
 8002f38:	4619      	mov	r1, r3
 8002f3a:	f7fd fe5d 	bl	8000bf8 <__aeabi_d2f>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4a1b      	ldr	r2, [pc, #108]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002f42:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 8002f44:	4b1b      	ldr	r3, [pc, #108]	; (8002fb4 <JoystickLocationState+0x1a4>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
			state = 2;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <JoystickLocationState+0x19c>)
 8002f4c:	2202      	movs	r2, #2
 8002f4e:	601a      	str	r2, [r3, #0]
		}
		break;
 8002f50:	f000 bec0 	b.w	8003cd4 <JoystickLocationState+0xec4>

	//Get Pick Tray 2nd Point
	case 2:
		if (GetPositionButton.flag == 1)
 8002f54:	4b17      	ldr	r3, [pc, #92]	; (8002fb4 <JoystickLocationState+0x1a4>)
 8002f56:	689b      	ldr	r3, [r3, #8]
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	f040 82fb 	bne.w	8003554 <JoystickLocationState+0x744>
		{
			if(registerFrame[68].U16 >= 30000)
 8002f5e:	4b10      	ldr	r3, [pc, #64]	; (8002fa0 <JoystickLocationState+0x190>)
 8002f60:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f64:	f247 522f 	movw	r2, #29999	; 0x752f
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d92b      	bls.n	8002fc4 <JoystickLocationState+0x1b4>
			{
				PickTray.L2[0] = (registerFrame[68].U16-65536)/10;
 8002f6c:	4b0c      	ldr	r3, [pc, #48]	; (8002fa0 <JoystickLocationState+0x190>)
 8002f6e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002f72:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8002f76:	4a10      	ldr	r2, [pc, #64]	; (8002fb8 <JoystickLocationState+0x1a8>)
 8002f78:	fb82 1203 	smull	r1, r2, r2, r3
 8002f7c:	1092      	asrs	r2, r2, #2
 8002f7e:	17db      	asrs	r3, r3, #31
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	ee07 3a90 	vmov	s15, r3
 8002f86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f8a:	4b09      	ldr	r3, [pc, #36]	; (8002fb0 <JoystickLocationState+0x1a0>)
 8002f8c:	edc3 7a02 	vstr	s15, [r3, #8]
 8002f90:	e027      	b.n	8002fe2 <JoystickLocationState+0x1d2>
 8002f92:	bf00      	nop
 8002f94:	f3af 8000 	nop.w
 8002f98:	70a3d70a 	.word	0x70a3d70a
 8002f9c:	3fa70a3d 	.word	0x3fa70a3d
 8002fa0:	20000fe0 	.word	0x20000fe0
 8002fa4:	20000b00 	.word	0x20000b00
 8002fa8:	20000af8 	.word	0x20000af8
 8002fac:	20000224 	.word	0x20000224
 8002fb0:	200009e0 	.word	0x200009e0
 8002fb4:	20000ab0 	.word	0x20000ab0
 8002fb8:	66666667 	.word	0x66666667
 8002fbc:	cccccccd 	.word	0xcccccccd
 8002fc0:	200009ac 	.word	0x200009ac
			}
			else
			{
				PickTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 8002fc4:	4bd6      	ldr	r3, [pc, #856]	; (8003320 <JoystickLocationState+0x510>)
 8002fc6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8002fca:	4ad6      	ldr	r2, [pc, #856]	; (8003324 <JoystickLocationState+0x514>)
 8002fcc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	b29b      	uxth	r3, r3
 8002fd4:	ee07 3a90 	vmov	s15, r3
 8002fd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fdc:	4bd2      	ldr	r3, [pc, #840]	; (8003328 <JoystickLocationState+0x518>)
 8002fde:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PickTray.L2[1] = position*0.045; //Pick Tray Y Position 2 //mm
 8002fe2:	4bd2      	ldr	r3, [pc, #840]	; (800332c <JoystickLocationState+0x51c>)
 8002fe4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002fe8:	4618      	mov	r0, r3
 8002fea:	f7fd faa3 	bl	8000534 <__aeabi_i2d>
 8002fee:	a3ca      	add	r3, pc, #808	; (adr r3, 8003318 <JoystickLocationState+0x508>)
 8002ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff4:	f7fd fb08 	bl	8000608 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fdfa 	bl	8000bf8 <__aeabi_d2f>
 8003004:	4603      	mov	r3, r0
 8003006:	4ac8      	ldr	r2, [pc, #800]	; (8003328 <JoystickLocationState+0x518>)
 8003008:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800300a:	4bc9      	ldr	r3, [pc, #804]	; (8003330 <JoystickLocationState+0x520>)
 800300c:	2200      	movs	r2, #0
 800300e:	609a      	str	r2, [r3, #8]

			cos_Theta = (PickTray.L2[0]-PickTray.L1[0])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 8003010:	4bc5      	ldr	r3, [pc, #788]	; (8003328 <JoystickLocationState+0x518>)
 8003012:	ed93 7a02 	vldr	s14, [r3, #8]
 8003016:	4bc4      	ldr	r3, [pc, #784]	; (8003328 <JoystickLocationState+0x518>)
 8003018:	edd3 7a00 	vldr	s15, [r3]
 800301c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003020:	4bc1      	ldr	r3, [pc, #772]	; (8003328 <JoystickLocationState+0x518>)
 8003022:	ed93 7a02 	vldr	s14, [r3, #8]
 8003026:	4bc0      	ldr	r3, [pc, #768]	; (8003328 <JoystickLocationState+0x518>)
 8003028:	edd3 7a00 	vldr	s15, [r3]
 800302c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003030:	4bbd      	ldr	r3, [pc, #756]	; (8003328 <JoystickLocationState+0x518>)
 8003032:	edd3 6a02 	vldr	s13, [r3, #8]
 8003036:	4bbc      	ldr	r3, [pc, #752]	; (8003328 <JoystickLocationState+0x518>)
 8003038:	edd3 7a00 	vldr	s15, [r3]
 800303c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003040:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003044:	4bb8      	ldr	r3, [pc, #736]	; (8003328 <JoystickLocationState+0x518>)
 8003046:	edd3 6a03 	vldr	s13, [r3, #12]
 800304a:	4bb7      	ldr	r3, [pc, #732]	; (8003328 <JoystickLocationState+0x518>)
 800304c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003050:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003054:	4bb4      	ldr	r3, [pc, #720]	; (8003328 <JoystickLocationState+0x518>)
 8003056:	ed93 6a03 	vldr	s12, [r3, #12]
 800305a:	4bb3      	ldr	r3, [pc, #716]	; (8003328 <JoystickLocationState+0x518>)
 800305c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003060:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003064:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800306c:	eeb0 0a67 	vmov.f32	s0, s15
 8003070:	f00d ff4e 	bl	8010f10 <sqrtf>
 8003074:	eeb0 7a40 	vmov.f32	s14, s0
 8003078:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800307c:	4bad      	ldr	r3, [pc, #692]	; (8003334 <JoystickLocationState+0x524>)
 800307e:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PickTray.L2[1]-PickTray.L1[1])/sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1])));
 8003082:	4ba9      	ldr	r3, [pc, #676]	; (8003328 <JoystickLocationState+0x518>)
 8003084:	ed93 7a03 	vldr	s14, [r3, #12]
 8003088:	4ba7      	ldr	r3, [pc, #668]	; (8003328 <JoystickLocationState+0x518>)
 800308a:	edd3 7a01 	vldr	s15, [r3, #4]
 800308e:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003092:	4ba5      	ldr	r3, [pc, #660]	; (8003328 <JoystickLocationState+0x518>)
 8003094:	ed93 7a02 	vldr	s14, [r3, #8]
 8003098:	4ba3      	ldr	r3, [pc, #652]	; (8003328 <JoystickLocationState+0x518>)
 800309a:	edd3 7a00 	vldr	s15, [r3]
 800309e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a2:	4ba1      	ldr	r3, [pc, #644]	; (8003328 <JoystickLocationState+0x518>)
 80030a4:	edd3 6a02 	vldr	s13, [r3, #8]
 80030a8:	4b9f      	ldr	r3, [pc, #636]	; (8003328 <JoystickLocationState+0x518>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80030b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030b6:	4b9c      	ldr	r3, [pc, #624]	; (8003328 <JoystickLocationState+0x518>)
 80030b8:	edd3 6a03 	vldr	s13, [r3, #12]
 80030bc:	4b9a      	ldr	r3, [pc, #616]	; (8003328 <JoystickLocationState+0x518>)
 80030be:	edd3 7a01 	vldr	s15, [r3, #4]
 80030c2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80030c6:	4b98      	ldr	r3, [pc, #608]	; (8003328 <JoystickLocationState+0x518>)
 80030c8:	ed93 6a03 	vldr	s12, [r3, #12]
 80030cc:	4b96      	ldr	r3, [pc, #600]	; (8003328 <JoystickLocationState+0x518>)
 80030ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80030d2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80030d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80030da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	f00d ff15 	bl	8010f10 <sqrtf>
 80030e6:	eeb0 7a40 	vmov.f32	s14, s0
 80030ea:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80030ee:	4b92      	ldr	r3, [pc, #584]	; (8003338 <JoystickLocationState+0x528>)
 80030f0:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PickTray.L1[0];
 80030f4:	4b8f      	ldr	r3, [pc, #572]	; (8003334 <JoystickLocationState+0x524>)
 80030f6:	edd3 7a00 	vldr	s15, [r3]
 80030fa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80030fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003102:	4b8d      	ldr	r3, [pc, #564]	; (8003338 <JoystickLocationState+0x528>)
 8003104:	edd3 7a00 	vldr	s15, [r3]
 8003108:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800310c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003110:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003114:	4b84      	ldr	r3, [pc, #528]	; (8003328 <JoystickLocationState+0x518>)
 8003116:	edd3 7a00 	vldr	s15, [r3]
 800311a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800311e:	4b82      	ldr	r3, [pc, #520]	; (8003328 <JoystickLocationState+0x518>)
 8003120:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PickTray.L1[1];
 8003124:	4b84      	ldr	r3, [pc, #528]	; (8003338 <JoystickLocationState+0x528>)
 8003126:	edd3 7a00 	vldr	s15, [r3]
 800312a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800312e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003132:	4b80      	ldr	r3, [pc, #512]	; (8003334 <JoystickLocationState+0x524>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800313c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003140:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003144:	4b78      	ldr	r3, [pc, #480]	; (8003328 <JoystickLocationState+0x518>)
 8003146:	edd3 7a01 	vldr	s15, [r3, #4]
 800314a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800314e:	4b76      	ldr	r3, [pc, #472]	; (8003328 <JoystickLocationState+0x518>)
 8003150:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PickTray.L1[0];
 8003154:	4b77      	ldr	r3, [pc, #476]	; (8003334 <JoystickLocationState+0x524>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800315e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003162:	4b75      	ldr	r3, [pc, #468]	; (8003338 <JoystickLocationState+0x528>)
 8003164:	edd3 7a00 	vldr	s15, [r3]
 8003168:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800316c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003170:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003174:	4b6c      	ldr	r3, [pc, #432]	; (8003328 <JoystickLocationState+0x518>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800317e:	4b6a      	ldr	r3, [pc, #424]	; (8003328 <JoystickLocationState+0x518>)
 8003180:	edc3 7a05 	vstr	s15, [r3, #20]
			PickTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PickTray.L1[1];
 8003184:	4b6c      	ldr	r3, [pc, #432]	; (8003338 <JoystickLocationState+0x528>)
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800318e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003192:	4b68      	ldr	r3, [pc, #416]	; (8003334 <JoystickLocationState+0x524>)
 8003194:	edd3 7a00 	vldr	s15, [r3]
 8003198:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800319c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031a4:	4b60      	ldr	r3, [pc, #384]	; (8003328 <JoystickLocationState+0x518>)
 80031a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80031aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ae:	4b5e      	ldr	r3, [pc, #376]	; (8003328 <JoystickLocationState+0x518>)
 80031b0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PickTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PickTray.L1[0];
 80031b4:	4b5f      	ldr	r3, [pc, #380]	; (8003334 <JoystickLocationState+0x524>)
 80031b6:	edd3 7a00 	vldr	s15, [r3]
 80031ba:	ed9f 7a60 	vldr	s14, [pc, #384]	; 800333c <JoystickLocationState+0x52c>
 80031be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031c2:	4b5d      	ldr	r3, [pc, #372]	; (8003338 <JoystickLocationState+0x528>)
 80031c4:	edd3 7a00 	vldr	s15, [r3]
 80031c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80031cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80031d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031d4:	4b54      	ldr	r3, [pc, #336]	; (8003328 <JoystickLocationState+0x518>)
 80031d6:	edd3 7a00 	vldr	s15, [r3]
 80031da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031de:	4b52      	ldr	r3, [pc, #328]	; (8003328 <JoystickLocationState+0x518>)
 80031e0:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PickTray.L1[1];
 80031e4:	4b54      	ldr	r3, [pc, #336]	; (8003338 <JoystickLocationState+0x528>)
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800333c <JoystickLocationState+0x52c>
 80031ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031f2:	4b50      	ldr	r3, [pc, #320]	; (8003334 <JoystickLocationState+0x524>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80031fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003200:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003204:	4b48      	ldr	r3, [pc, #288]	; (8003328 <JoystickLocationState+0x518>)
 8003206:	edd3 7a01 	vldr	s15, [r3, #4]
 800320a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800320e:	4b46      	ldr	r3, [pc, #280]	; (8003328 <JoystickLocationState+0x518>)
 8003210:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PickTray.L1[0];
 8003214:	4b47      	ldr	r3, [pc, #284]	; (8003334 <JoystickLocationState+0x524>)
 8003216:	edd3 7a00 	vldr	s15, [r3]
 800321a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800321e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003222:	4b45      	ldr	r3, [pc, #276]	; (8003338 <JoystickLocationState+0x528>)
 8003224:	edd3 7a00 	vldr	s15, [r3]
 8003228:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800322c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003230:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003234:	4b3c      	ldr	r3, [pc, #240]	; (8003328 <JoystickLocationState+0x518>)
 8003236:	edd3 7a00 	vldr	s15, [r3]
 800323a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800323e:	4b3a      	ldr	r3, [pc, #232]	; (8003328 <JoystickLocationState+0x518>)
 8003240:	edc3 7a07 	vstr	s15, [r3, #28]
			PickTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PickTray.L1[1];
 8003244:	4b3c      	ldr	r3, [pc, #240]	; (8003338 <JoystickLocationState+0x528>)
 8003246:	edd3 7a00 	vldr	s15, [r3]
 800324a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800324e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <JoystickLocationState+0x524>)
 8003254:	edd3 7a00 	vldr	s15, [r3]
 8003258:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800325c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003260:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003264:	4b30      	ldr	r3, [pc, #192]	; (8003328 <JoystickLocationState+0x518>)
 8003266:	edd3 7a01 	vldr	s15, [r3, #4]
 800326a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <JoystickLocationState+0x518>)
 8003270:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PickTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PickTray.L1[0];
 8003274:	4b2f      	ldr	r3, [pc, #188]	; (8003334 <JoystickLocationState+0x524>)
 8003276:	edd3 7a00 	vldr	s15, [r3]
 800327a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800327e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003282:	4b2d      	ldr	r3, [pc, #180]	; (8003338 <JoystickLocationState+0x528>)
 8003284:	edd3 7a00 	vldr	s15, [r3]
 8003288:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800328c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003290:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003294:	4b24      	ldr	r3, [pc, #144]	; (8003328 <JoystickLocationState+0x518>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800329e:	4b22      	ldr	r3, [pc, #136]	; (8003328 <JoystickLocationState+0x518>)
 80032a0:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PickTray.L1[1];
 80032a4:	4b24      	ldr	r3, [pc, #144]	; (8003338 <JoystickLocationState+0x528>)
 80032a6:	edd3 7a00 	vldr	s15, [r3]
 80032aa:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80032ae:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032b2:	4b20      	ldr	r3, [pc, #128]	; (8003334 <JoystickLocationState+0x524>)
 80032b4:	edd3 7a00 	vldr	s15, [r3]
 80032b8:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80032bc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <JoystickLocationState+0x518>)
 80032c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80032ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032ce:	4b16      	ldr	r3, [pc, #88]	; (8003328 <JoystickLocationState+0x518>)
 80032d0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PickTray.L1[0];
 80032d4:	4b17      	ldr	r3, [pc, #92]	; (8003334 <JoystickLocationState+0x524>)
 80032d6:	edd3 7a00 	vldr	s15, [r3]
 80032da:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800333c <JoystickLocationState+0x52c>
 80032de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80032e2:	4b15      	ldr	r3, [pc, #84]	; (8003338 <JoystickLocationState+0x528>)
 80032e4:	edd3 7a00 	vldr	s15, [r3]
 80032e8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80032ec:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80032f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80032f4:	4b0c      	ldr	r3, [pc, #48]	; (8003328 <JoystickLocationState+0x518>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032fe:	4b0a      	ldr	r3, [pc, #40]	; (8003328 <JoystickLocationState+0x518>)
 8003300:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PickTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PickTray.L1[1];
 8003304:	4b0c      	ldr	r3, [pc, #48]	; (8003338 <JoystickLocationState+0x528>)
 8003306:	edd3 7a00 	vldr	s15, [r3]
 800330a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800333c <JoystickLocationState+0x52c>
 800330e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003312:	e015      	b.n	8003340 <JoystickLocationState+0x530>
 8003314:	f3af 8000 	nop.w
 8003318:	70a3d70a 	.word	0x70a3d70a
 800331c:	3fa70a3d 	.word	0x3fa70a3d
 8003320:	20000fe0 	.word	0x20000fe0
 8003324:	cccccccd 	.word	0xcccccccd
 8003328:	200009e0 	.word	0x200009e0
 800332c:	200009ac 	.word	0x200009ac
 8003330:	20000ab0 	.word	0x20000ab0
 8003334:	20000aa8 	.word	0x20000aa8
 8003338:	20000aac 	.word	0x20000aac
 800333c:	42480000 	.word	0x42480000
 8003340:	4bc1      	ldr	r3, [pc, #772]	; (8003648 <JoystickLocationState+0x838>)
 8003342:	edd3 7a00 	vldr	s15, [r3]
 8003346:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800334a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800334e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003352:	4bbe      	ldr	r3, [pc, #760]	; (800364c <JoystickLocationState+0x83c>)
 8003354:	edd3 7a01 	vldr	s15, [r3, #4]
 8003358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800335c:	4bbb      	ldr	r3, [pc, #748]	; (800364c <JoystickLocationState+0x83c>)
 800335e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PickTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PickTray.L1[0];
 8003362:	4bb9      	ldr	r3, [pc, #740]	; (8003648 <JoystickLocationState+0x838>)
 8003364:	edd3 7a00 	vldr	s15, [r3]
 8003368:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800336c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003370:	4bb7      	ldr	r3, [pc, #732]	; (8003650 <JoystickLocationState+0x840>)
 8003372:	edd3 7a00 	vldr	s15, [r3]
 8003376:	eddf 6ab7 	vldr	s13, [pc, #732]	; 8003654 <JoystickLocationState+0x844>
 800337a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800337e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003382:	4bb2      	ldr	r3, [pc, #712]	; (800364c <JoystickLocationState+0x83c>)
 8003384:	edd3 7a00 	vldr	s15, [r3]
 8003388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338c:	4baf      	ldr	r3, [pc, #700]	; (800364c <JoystickLocationState+0x83c>)
 800338e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PickTray.L1[1];
 8003392:	4baf      	ldr	r3, [pc, #700]	; (8003650 <JoystickLocationState+0x840>)
 8003394:	edd3 7a00 	vldr	s15, [r3]
 8003398:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800339c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033a0:	4ba9      	ldr	r3, [pc, #676]	; (8003648 <JoystickLocationState+0x838>)
 80033a2:	edd3 7a00 	vldr	s15, [r3]
 80033a6:	eddf 6aac 	vldr	s13, [pc, #688]	; 8003658 <JoystickLocationState+0x848>
 80033aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033b2:	4ba6      	ldr	r3, [pc, #664]	; (800364c <JoystickLocationState+0x83c>)
 80033b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80033b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033bc:	4ba3      	ldr	r3, [pc, #652]	; (800364c <JoystickLocationState+0x83c>)
 80033be:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PickTray.L1[0];
 80033c2:	4ba1      	ldr	r3, [pc, #644]	; (8003648 <JoystickLocationState+0x838>)
 80033c4:	edd3 7a00 	vldr	s15, [r3]
 80033c8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033cc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80033d0:	4b9f      	ldr	r3, [pc, #636]	; (8003650 <JoystickLocationState+0x840>)
 80033d2:	edd3 7a00 	vldr	s15, [r3]
 80033d6:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8003654 <JoystickLocationState+0x844>
 80033da:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80033de:	ee37 7a27 	vadd.f32	s14, s14, s15
 80033e2:	4b9a      	ldr	r3, [pc, #616]	; (800364c <JoystickLocationState+0x83c>)
 80033e4:	edd3 7a00 	vldr	s15, [r3]
 80033e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033ec:	4b97      	ldr	r3, [pc, #604]	; (800364c <JoystickLocationState+0x83c>)
 80033ee:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PickTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PickTray.L1[1];
 80033f2:	4b97      	ldr	r3, [pc, #604]	; (8003650 <JoystickLocationState+0x840>)
 80033f4:	edd3 7a00 	vldr	s15, [r3]
 80033f8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80033fc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003400:	4b91      	ldr	r3, [pc, #580]	; (8003648 <JoystickLocationState+0x838>)
 8003402:	edd3 7a00 	vldr	s15, [r3]
 8003406:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003658 <JoystickLocationState+0x848>
 800340a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800340e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003412:	4b8e      	ldr	r3, [pc, #568]	; (800364c <JoystickLocationState+0x83c>)
 8003414:	edd3 7a01 	vldr	s15, [r3, #4]
 8003418:	ee77 7a27 	vadd.f32	s15, s14, s15
 800341c:	4b8b      	ldr	r3, [pc, #556]	; (800364c <JoystickLocationState+0x83c>)
 800341e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PickTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PickTray.L1[0];
 8003422:	4b89      	ldr	r3, [pc, #548]	; (8003648 <JoystickLocationState+0x838>)
 8003424:	edd3 7a00 	vldr	s15, [r3]
 8003428:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 800365c <JoystickLocationState+0x84c>
 800342c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003430:	4b87      	ldr	r3, [pc, #540]	; (8003650 <JoystickLocationState+0x840>)
 8003432:	edd3 7a00 	vldr	s15, [r3]
 8003436:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003654 <JoystickLocationState+0x844>
 800343a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800343e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003442:	4b82      	ldr	r3, [pc, #520]	; (800364c <JoystickLocationState+0x83c>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800344c:	4b7f      	ldr	r3, [pc, #508]	; (800364c <JoystickLocationState+0x83c>)
 800344e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PickTray.L1[1];
 8003452:	4b7f      	ldr	r3, [pc, #508]	; (8003650 <JoystickLocationState+0x840>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800365c <JoystickLocationState+0x84c>
 800345c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003460:	4b79      	ldr	r3, [pc, #484]	; (8003648 <JoystickLocationState+0x838>)
 8003462:	edd3 7a00 	vldr	s15, [r3]
 8003466:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003658 <JoystickLocationState+0x848>
 800346a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800346e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003472:	4b76      	ldr	r3, [pc, #472]	; (800364c <JoystickLocationState+0x83c>)
 8003474:	edd3 7a01 	vldr	s15, [r3, #4]
 8003478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800347c:	4b73      	ldr	r3, [pc, #460]	; (800364c <JoystickLocationState+0x83c>)
 800347e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PickTray.origin_x = PickTray.L1[0]+(50*sin_Theta);
 8003482:	4b72      	ldr	r3, [pc, #456]	; (800364c <JoystickLocationState+0x83c>)
 8003484:	ed93 7a00 	vldr	s14, [r3]
 8003488:	4b71      	ldr	r3, [pc, #452]	; (8003650 <JoystickLocationState+0x840>)
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	eddf 6a73 	vldr	s13, [pc, #460]	; 800365c <JoystickLocationState+0x84c>
 8003492:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003496:	ee77 7a27 	vadd.f32	s15, s14, s15
 800349a:	4b6c      	ldr	r3, [pc, #432]	; (800364c <JoystickLocationState+0x83c>)
 800349c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PickTray.origin_y = PickTray.L1[1]-(50*cos_Theta);
 80034a0:	4b6a      	ldr	r3, [pc, #424]	; (800364c <JoystickLocationState+0x83c>)
 80034a2:	ed93 7a01 	vldr	s14, [r3, #4]
 80034a6:	4b68      	ldr	r3, [pc, #416]	; (8003648 <JoystickLocationState+0x838>)
 80034a8:	edd3 7a00 	vldr	s15, [r3]
 80034ac:	eddf 6a6b 	vldr	s13, [pc, #428]	; 800365c <JoystickLocationState+0x84c>
 80034b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034b8:	4b64      	ldr	r3, [pc, #400]	; (800364c <JoystickLocationState+0x83c>)
 80034ba:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PickTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 80034be:	4b62      	ldr	r3, [pc, #392]	; (8003648 <JoystickLocationState+0x838>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	eeb0 0a67 	vmov.f32	s0, s15
 80034c8:	f00d fcf6 	bl	8010eb8 <acosf>
 80034cc:	ee10 3a10 	vmov	r3, s0
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f841 	bl	8000558 <__aeabi_f2d>
 80034d6:	a358      	add	r3, pc, #352	; (adr r3, 8003638 <JoystickLocationState+0x828>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd f894 	bl	8000608 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4610      	mov	r0, r2
 80034e6:	4619      	mov	r1, r3
 80034e8:	f7fd fb86 	bl	8000bf8 <__aeabi_d2f>
 80034ec:	4603      	mov	r3, r0
 80034ee:	4a57      	ldr	r2, [pc, #348]	; (800364c <JoystickLocationState+0x83c>)
 80034f0:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[32].U16 = PickTray.origin_x * 10;
 80034f2:	4b56      	ldr	r3, [pc, #344]	; (800364c <JoystickLocationState+0x83c>)
 80034f4:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 80034f8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80034fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003504:	ee17 3a90 	vmov	r3, s15
 8003508:	b29a      	uxth	r2, r3
 800350a:	4b55      	ldr	r3, [pc, #340]	; (8003660 <JoystickLocationState+0x850>)
 800350c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
			registerFrame[33].U16 = PickTray.origin_y * 10;
 8003510:	4b4e      	ldr	r3, [pc, #312]	; (800364c <JoystickLocationState+0x83c>)
 8003512:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003516:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800351a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800351e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003522:	ee17 3a90 	vmov	r3, s15
 8003526:	b29a      	uxth	r2, r3
 8003528:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <JoystickLocationState+0x850>)
 800352a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			registerFrame[34].U16 = PickTray.orientation * 100;
 800352e:	4b47      	ldr	r3, [pc, #284]	; (800364c <JoystickLocationState+0x83c>)
 8003530:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003534:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8003664 <JoystickLocationState+0x854>
 8003538:	ee67 7a87 	vmul.f32	s15, s15, s14
 800353c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003540:	ee17 3a90 	vmov	r3, s15
 8003544:	b29a      	uxth	r2, r3
 8003546:	4b46      	ldr	r3, [pc, #280]	; (8003660 <JoystickLocationState+0x850>)
 8003548:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

			registerFrame[16].U16 = 0;
 800354c:	4b44      	ldr	r3, [pc, #272]	; (8003660 <JoystickLocationState+0x850>)
 800354e:	2200      	movs	r2, #0
 8003550:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003552:	e3c1      	b.n	8003cd8 <JoystickLocationState+0xec8>
		else if (ResetButton.flag == 1)
 8003554:	4b44      	ldr	r3, [pc, #272]	; (8003668 <JoystickLocationState+0x858>)
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	2b01      	cmp	r3, #1
 800355a:	f040 83bd 	bne.w	8003cd8 <JoystickLocationState+0xec8>
			ResetButton.flag = 0;
 800355e:	4b42      	ldr	r3, [pc, #264]	; (8003668 <JoystickLocationState+0x858>)
 8003560:	2200      	movs	r2, #0
 8003562:	609a      	str	r2, [r3, #8]
			state = 1;
 8003564:	4b41      	ldr	r3, [pc, #260]	; (800366c <JoystickLocationState+0x85c>)
 8003566:	2201      	movs	r2, #1
 8003568:	601a      	str	r2, [r3, #0]
		break;
 800356a:	e3b5      	b.n	8003cd8 <JoystickLocationState+0xec8>

	//Get Place Tray 1st Point
	case 3:
		PlaceTray.L1[0] = 0;
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <JoystickLocationState+0x860>)
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	601a      	str	r2, [r3, #0]
		PlaceTray.L2[0] = 0;
 8003574:	4b3e      	ldr	r3, [pc, #248]	; (8003670 <JoystickLocationState+0x860>)
 8003576:	f04f 0200 	mov.w	r2, #0
 800357a:	609a      	str	r2, [r3, #8]
		PlaceTray.L1[1] = 0;
 800357c:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <JoystickLocationState+0x860>)
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8003584:	4b3a      	ldr	r3, [pc, #232]	; (8003670 <JoystickLocationState+0x860>)
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 800358c:	4b39      	ldr	r3, [pc, #228]	; (8003674 <JoystickLocationState+0x864>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b01      	cmp	r3, #1
 8003592:	d143      	bne.n	800361c <JoystickLocationState+0x80c>
		{
			if(registerFrame[68].U16 >= 30000)
 8003594:	4b32      	ldr	r3, [pc, #200]	; (8003660 <JoystickLocationState+0x850>)
 8003596:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800359a:	f247 522f 	movw	r2, #29999	; 0x752f
 800359e:	4293      	cmp	r3, r2
 80035a0:	d912      	bls.n	80035c8 <JoystickLocationState+0x7b8>
			{
				PlaceTray.L1[0] = (registerFrame[68].U16-65536)/10;
 80035a2:	4b2f      	ldr	r3, [pc, #188]	; (8003660 <JoystickLocationState+0x850>)
 80035a4:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80035a8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80035ac:	4a32      	ldr	r2, [pc, #200]	; (8003678 <JoystickLocationState+0x868>)
 80035ae:	fb82 1203 	smull	r1, r2, r2, r3
 80035b2:	1092      	asrs	r2, r2, #2
 80035b4:	17db      	asrs	r3, r3, #31
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	ee07 3a90 	vmov	s15, r3
 80035bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035c0:	4b2b      	ldr	r3, [pc, #172]	; (8003670 <JoystickLocationState+0x860>)
 80035c2:	edc3 7a00 	vstr	s15, [r3]
 80035c6:	e00e      	b.n	80035e6 <JoystickLocationState+0x7d6>
			}
			else
			{
				PlaceTray.L1[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 80035c8:	4b25      	ldr	r3, [pc, #148]	; (8003660 <JoystickLocationState+0x850>)
 80035ca:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80035ce:	4a2b      	ldr	r2, [pc, #172]	; (800367c <JoystickLocationState+0x86c>)
 80035d0:	fba2 2303 	umull	r2, r3, r2, r3
 80035d4:	08db      	lsrs	r3, r3, #3
 80035d6:	b29b      	uxth	r3, r3
 80035d8:	ee07 3a90 	vmov	s15, r3
 80035dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80035e0:	4b23      	ldr	r3, [pc, #140]	; (8003670 <JoystickLocationState+0x860>)
 80035e2:	edc3 7a00 	vstr	s15, [r3]
			}
			PlaceTray.L1[1] = position*0.045; //Place Tray Y Position 1 //mm
 80035e6:	4b26      	ldr	r3, [pc, #152]	; (8003680 <JoystickLocationState+0x870>)
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	4618      	mov	r0, r3
 80035ee:	f7fc ffa1 	bl	8000534 <__aeabi_i2d>
 80035f2:	a313      	add	r3, pc, #76	; (adr r3, 8003640 <JoystickLocationState+0x830>)
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f7fd f806 	bl	8000608 <__aeabi_dmul>
 80035fc:	4602      	mov	r2, r0
 80035fe:	460b      	mov	r3, r1
 8003600:	4610      	mov	r0, r2
 8003602:	4619      	mov	r1, r3
 8003604:	f7fd faf8 	bl	8000bf8 <__aeabi_d2f>
 8003608:	4603      	mov	r3, r0
 800360a:	4a19      	ldr	r2, [pc, #100]	; (8003670 <JoystickLocationState+0x860>)
 800360c:	6053      	str	r3, [r2, #4]
			GetPositionButton.flag = 0;
 800360e:	4b19      	ldr	r3, [pc, #100]	; (8003674 <JoystickLocationState+0x864>)
 8003610:	2200      	movs	r2, #0
 8003612:	609a      	str	r2, [r3, #8]
			state = 4;
 8003614:	4b15      	ldr	r3, [pc, #84]	; (800366c <JoystickLocationState+0x85c>)
 8003616:	2204      	movs	r2, #4
 8003618:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 800361a:	e35f      	b.n	8003cdc <JoystickLocationState+0xecc>
		else if (ResetButton.flag == 1)
 800361c:	4b12      	ldr	r3, [pc, #72]	; (8003668 <JoystickLocationState+0x858>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 835b 	bne.w	8003cdc <JoystickLocationState+0xecc>
			ResetButton.flag = 0;
 8003626:	4b10      	ldr	r3, [pc, #64]	; (8003668 <JoystickLocationState+0x858>)
 8003628:	2200      	movs	r2, #0
 800362a:	609a      	str	r2, [r3, #8]
			state = 1;
 800362c:	4b0f      	ldr	r3, [pc, #60]	; (800366c <JoystickLocationState+0x85c>)
 800362e:	2201      	movs	r2, #1
 8003630:	601a      	str	r2, [r3, #0]
		break;
 8003632:	e353      	b.n	8003cdc <JoystickLocationState+0xecc>
 8003634:	f3af 8000 	nop.w
 8003638:	1a63c1f8 	.word	0x1a63c1f8
 800363c:	404ca5dc 	.word	0x404ca5dc
 8003640:	70a3d70a 	.word	0x70a3d70a
 8003644:	3fa70a3d 	.word	0x3fa70a3d
 8003648:	20000aa8 	.word	0x20000aa8
 800364c:	200009e0 	.word	0x200009e0
 8003650:	20000aac 	.word	0x20000aac
 8003654:	42200000 	.word	0x42200000
 8003658:	c2200000 	.word	0xc2200000
 800365c:	42480000 	.word	0x42480000
 8003660:	20000fe0 	.word	0x20000fe0
 8003664:	42c80000 	.word	0x42c80000
 8003668:	20000abc 	.word	0x20000abc
 800366c:	20000224 	.word	0x20000224
 8003670:	20000a44 	.word	0x20000a44
 8003674:	20000ab0 	.word	0x20000ab0
 8003678:	66666667 	.word	0x66666667
 800367c:	cccccccd 	.word	0xcccccccd
 8003680:	200009ac 	.word	0x200009ac

	//Get Place Tray 2nd Point
	case 4:
		if (GetPositionButton.flag == 1)
 8003684:	4b0f      	ldr	r3, [pc, #60]	; (80036c4 <JoystickLocationState+0x8b4>)
 8003686:	689b      	ldr	r3, [r3, #8]
 8003688:	2b01      	cmp	r3, #1
 800368a:	f040 82eb 	bne.w	8003c64 <JoystickLocationState+0xe54>
		{
			if(registerFrame[68].U16 >= 30000)
 800368e:	4b0e      	ldr	r3, [pc, #56]	; (80036c8 <JoystickLocationState+0x8b8>)
 8003690:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8003694:	f247 522f 	movw	r2, #29999	; 0x752f
 8003698:	4293      	cmp	r3, r2
 800369a:	d91b      	bls.n	80036d4 <JoystickLocationState+0x8c4>
			{
				PlaceTray.L2[0] = (registerFrame[68].U16-65536)/10;
 800369c:	4b0a      	ldr	r3, [pc, #40]	; (80036c8 <JoystickLocationState+0x8b8>)
 800369e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80036a2:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 80036a6:	4a09      	ldr	r2, [pc, #36]	; (80036cc <JoystickLocationState+0x8bc>)
 80036a8:	fb82 1203 	smull	r1, r2, r2, r3
 80036ac:	1092      	asrs	r2, r2, #2
 80036ae:	17db      	asrs	r3, r3, #31
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <JoystickLocationState+0x8c0>)
 80036bc:	edc3 7a02 	vstr	s15, [r3, #8]
 80036c0:	e017      	b.n	80036f2 <JoystickLocationState+0x8e2>
 80036c2:	bf00      	nop
 80036c4:	20000ab0 	.word	0x20000ab0
 80036c8:	20000fe0 	.word	0x20000fe0
 80036cc:	66666667 	.word	0x66666667
 80036d0:	20000a44 	.word	0x20000a44
			}
			else
			{
				PlaceTray.L2[0] = (registerFrame[68].U16)/10; //Pick Tray X Position 1 //mm
 80036d4:	4bd6      	ldr	r3, [pc, #856]	; (8003a30 <JoystickLocationState+0xc20>)
 80036d6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80036da:	4ad6      	ldr	r2, [pc, #856]	; (8003a34 <JoystickLocationState+0xc24>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	08db      	lsrs	r3, r3, #3
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	ee07 3a90 	vmov	s15, r3
 80036e8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80036ec:	4bd2      	ldr	r3, [pc, #840]	; (8003a38 <JoystickLocationState+0xc28>)
 80036ee:	edc3 7a02 	vstr	s15, [r3, #8]
			}
			PlaceTray.L2[1] = position*0.045; //Place Tray Y Position 2 //mm
 80036f2:	4bd2      	ldr	r3, [pc, #840]	; (8003a3c <JoystickLocationState+0xc2c>)
 80036f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fc ff1b 	bl	8000534 <__aeabi_i2d>
 80036fe:	a3ca      	add	r3, pc, #808	; (adr r3, 8003a28 <JoystickLocationState+0xc18>)
 8003700:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003704:	f7fc ff80 	bl	8000608 <__aeabi_dmul>
 8003708:	4602      	mov	r2, r0
 800370a:	460b      	mov	r3, r1
 800370c:	4610      	mov	r0, r2
 800370e:	4619      	mov	r1, r3
 8003710:	f7fd fa72 	bl	8000bf8 <__aeabi_d2f>
 8003714:	4603      	mov	r3, r0
 8003716:	4ac8      	ldr	r2, [pc, #800]	; (8003a38 <JoystickLocationState+0xc28>)
 8003718:	60d3      	str	r3, [r2, #12]
			GetPositionButton.flag = 0;
 800371a:	4bc9      	ldr	r3, [pc, #804]	; (8003a40 <JoystickLocationState+0xc30>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]

			cos_Theta = (PlaceTray.L2[0]-PlaceTray.L1[0])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003720:	4bc5      	ldr	r3, [pc, #788]	; (8003a38 <JoystickLocationState+0xc28>)
 8003722:	ed93 7a02 	vldr	s14, [r3, #8]
 8003726:	4bc4      	ldr	r3, [pc, #784]	; (8003a38 <JoystickLocationState+0xc28>)
 8003728:	edd3 7a00 	vldr	s15, [r3]
 800372c:	ee37 8a67 	vsub.f32	s16, s14, s15
 8003730:	4bc1      	ldr	r3, [pc, #772]	; (8003a38 <JoystickLocationState+0xc28>)
 8003732:	ed93 7a02 	vldr	s14, [r3, #8]
 8003736:	4bc0      	ldr	r3, [pc, #768]	; (8003a38 <JoystickLocationState+0xc28>)
 8003738:	edd3 7a00 	vldr	s15, [r3]
 800373c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003740:	4bbd      	ldr	r3, [pc, #756]	; (8003a38 <JoystickLocationState+0xc28>)
 8003742:	edd3 6a02 	vldr	s13, [r3, #8]
 8003746:	4bbc      	ldr	r3, [pc, #752]	; (8003a38 <JoystickLocationState+0xc28>)
 8003748:	edd3 7a00 	vldr	s15, [r3]
 800374c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003750:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003754:	4bb8      	ldr	r3, [pc, #736]	; (8003a38 <JoystickLocationState+0xc28>)
 8003756:	edd3 6a03 	vldr	s13, [r3, #12]
 800375a:	4bb7      	ldr	r3, [pc, #732]	; (8003a38 <JoystickLocationState+0xc28>)
 800375c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003760:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8003764:	4bb4      	ldr	r3, [pc, #720]	; (8003a38 <JoystickLocationState+0xc28>)
 8003766:	ed93 6a03 	vldr	s12, [r3, #12]
 800376a:	4bb3      	ldr	r3, [pc, #716]	; (8003a38 <JoystickLocationState+0xc28>)
 800376c:	edd3 7a01 	vldr	s15, [r3, #4]
 8003770:	ee76 7a67 	vsub.f32	s15, s12, s15
 8003774:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003778:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377c:	eeb0 0a67 	vmov.f32	s0, s15
 8003780:	f00d fbc6 	bl	8010f10 <sqrtf>
 8003784:	eeb0 7a40 	vmov.f32	s14, s0
 8003788:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800378c:	4bad      	ldr	r3, [pc, #692]	; (8003a44 <JoystickLocationState+0xc34>)
 800378e:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = (PlaceTray.L2[1]-PlaceTray.L1[1])/sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1])));
 8003792:	4ba9      	ldr	r3, [pc, #676]	; (8003a38 <JoystickLocationState+0xc28>)
 8003794:	ed93 7a03 	vldr	s14, [r3, #12]
 8003798:	4ba7      	ldr	r3, [pc, #668]	; (8003a38 <JoystickLocationState+0xc28>)
 800379a:	edd3 7a01 	vldr	s15, [r3, #4]
 800379e:	ee37 8a67 	vsub.f32	s16, s14, s15
 80037a2:	4ba5      	ldr	r3, [pc, #660]	; (8003a38 <JoystickLocationState+0xc28>)
 80037a4:	ed93 7a02 	vldr	s14, [r3, #8]
 80037a8:	4ba3      	ldr	r3, [pc, #652]	; (8003a38 <JoystickLocationState+0xc28>)
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80037b2:	4ba1      	ldr	r3, [pc, #644]	; (8003a38 <JoystickLocationState+0xc28>)
 80037b4:	edd3 6a02 	vldr	s13, [r3, #8]
 80037b8:	4b9f      	ldr	r3, [pc, #636]	; (8003a38 <JoystickLocationState+0xc28>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80037c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c6:	4b9c      	ldr	r3, [pc, #624]	; (8003a38 <JoystickLocationState+0xc28>)
 80037c8:	edd3 6a03 	vldr	s13, [r3, #12]
 80037cc:	4b9a      	ldr	r3, [pc, #616]	; (8003a38 <JoystickLocationState+0xc28>)
 80037ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80037d2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80037d6:	4b98      	ldr	r3, [pc, #608]	; (8003a38 <JoystickLocationState+0xc28>)
 80037d8:	ed93 6a03 	vldr	s12, [r3, #12]
 80037dc:	4b96      	ldr	r3, [pc, #600]	; (8003a38 <JoystickLocationState+0xc28>)
 80037de:	edd3 7a01 	vldr	s15, [r3, #4]
 80037e2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80037e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80037ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	f00d fb8d 	bl	8010f10 <sqrtf>
 80037f6:	eeb0 7a40 	vmov.f32	s14, s0
 80037fa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80037fe:	4b92      	ldr	r3, [pc, #584]	; (8003a48 <JoystickLocationState+0xc38>)
 8003800:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_x[0] = (cos_Theta*10)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003804:	4b8f      	ldr	r3, [pc, #572]	; (8003a44 <JoystickLocationState+0xc34>)
 8003806:	edd3 7a00 	vldr	s15, [r3]
 800380a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800380e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003812:	4b8d      	ldr	r3, [pc, #564]	; (8003a48 <JoystickLocationState+0xc38>)
 8003814:	edd3 7a00 	vldr	s15, [r3]
 8003818:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800381c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003820:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003824:	4b84      	ldr	r3, [pc, #528]	; (8003a38 <JoystickLocationState+0xc28>)
 8003826:	edd3 7a00 	vldr	s15, [r3]
 800382a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800382e:	4b82      	ldr	r3, [pc, #520]	; (8003a38 <JoystickLocationState+0xc28>)
 8003830:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_y[0] = (sin_Theta*10)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003834:	4b84      	ldr	r3, [pc, #528]	; (8003a48 <JoystickLocationState+0xc38>)
 8003836:	edd3 7a00 	vldr	s15, [r3]
 800383a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800383e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003842:	4b80      	ldr	r3, [pc, #512]	; (8003a44 <JoystickLocationState+0xc34>)
 8003844:	edd3 7a00 	vldr	s15, [r3]
 8003848:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800384c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003850:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003854:	4b78      	ldr	r3, [pc, #480]	; (8003a38 <JoystickLocationState+0xc28>)
 8003856:	edd3 7a01 	vldr	s15, [r3, #4]
 800385a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <JoystickLocationState+0xc28>)
 8003860:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_x[1] = (cos_Theta*30)+(-sin_Theta*-10)+PlaceTray.L1[0];
 8003864:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <JoystickLocationState+0xc34>)
 8003866:	edd3 7a00 	vldr	s15, [r3]
 800386a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800386e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003872:	4b75      	ldr	r3, [pc, #468]	; (8003a48 <JoystickLocationState+0xc38>)
 8003874:	edd3 7a00 	vldr	s15, [r3]
 8003878:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800387c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003880:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003884:	4b6c      	ldr	r3, [pc, #432]	; (8003a38 <JoystickLocationState+0xc28>)
 8003886:	edd3 7a00 	vldr	s15, [r3]
 800388a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800388e:	4b6a      	ldr	r3, [pc, #424]	; (8003a38 <JoystickLocationState+0xc28>)
 8003890:	edc3 7a05 	vstr	s15, [r3, #20]
			PlaceTray.hole_y[1] = (sin_Theta*30)+(cos_Theta*-10)+PlaceTray.L1[1];
 8003894:	4b6c      	ldr	r3, [pc, #432]	; (8003a48 <JoystickLocationState+0xc38>)
 8003896:	edd3 7a00 	vldr	s15, [r3]
 800389a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800389e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038a2:	4b68      	ldr	r3, [pc, #416]	; (8003a44 <JoystickLocationState+0xc34>)
 80038a4:	edd3 7a00 	vldr	s15, [r3]
 80038a8:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80038ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038b4:	4b60      	ldr	r3, [pc, #384]	; (8003a38 <JoystickLocationState+0xc28>)
 80038b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80038ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038be:	4b5e      	ldr	r3, [pc, #376]	; (8003a38 <JoystickLocationState+0xc28>)
 80038c0:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

			PlaceTray.hole_x[2] = (cos_Theta*50)+(-sin_Theta*-10)+PlaceTray.L1[0];
 80038c4:	4b5f      	ldr	r3, [pc, #380]	; (8003a44 <JoystickLocationState+0xc34>)
 80038c6:	edd3 7a00 	vldr	s15, [r3]
 80038ca:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8003a4c <JoystickLocationState+0xc3c>
 80038ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80038d2:	4b5d      	ldr	r3, [pc, #372]	; (8003a48 <JoystickLocationState+0xc38>)
 80038d4:	edd3 7a00 	vldr	s15, [r3]
 80038d8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80038dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80038e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80038e4:	4b54      	ldr	r3, [pc, #336]	; (8003a38 <JoystickLocationState+0xc28>)
 80038e6:	edd3 7a00 	vldr	s15, [r3]
 80038ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80038ee:	4b52      	ldr	r3, [pc, #328]	; (8003a38 <JoystickLocationState+0xc28>)
 80038f0:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_y[2] = (sin_Theta*50)+(cos_Theta*-10)+PlaceTray.L1[1];
 80038f4:	4b54      	ldr	r3, [pc, #336]	; (8003a48 <JoystickLocationState+0xc38>)
 80038f6:	edd3 7a00 	vldr	s15, [r3]
 80038fa:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8003a4c <JoystickLocationState+0xc3c>
 80038fe:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003902:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <JoystickLocationState+0xc34>)
 8003904:	edd3 7a00 	vldr	s15, [r3]
 8003908:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800390c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003910:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003914:	4b48      	ldr	r3, [pc, #288]	; (8003a38 <JoystickLocationState+0xc28>)
 8003916:	edd3 7a01 	vldr	s15, [r3, #4]
 800391a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800391e:	4b46      	ldr	r3, [pc, #280]	; (8003a38 <JoystickLocationState+0xc28>)
 8003920:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_x[3] = (cos_Theta*10)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003924:	4b47      	ldr	r3, [pc, #284]	; (8003a44 <JoystickLocationState+0xc34>)
 8003926:	edd3 7a00 	vldr	s15, [r3]
 800392a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800392e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003932:	4b45      	ldr	r3, [pc, #276]	; (8003a48 <JoystickLocationState+0xc38>)
 8003934:	edd3 7a00 	vldr	s15, [r3]
 8003938:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800393c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003940:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003944:	4b3c      	ldr	r3, [pc, #240]	; (8003a38 <JoystickLocationState+0xc28>)
 8003946:	edd3 7a00 	vldr	s15, [r3]
 800394a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800394e:	4b3a      	ldr	r3, [pc, #232]	; (8003a38 <JoystickLocationState+0xc28>)
 8003950:	edc3 7a07 	vstr	s15, [r3, #28]
			PlaceTray.hole_y[3] = (sin_Theta*10)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003954:	4b3c      	ldr	r3, [pc, #240]	; (8003a48 <JoystickLocationState+0xc38>)
 8003956:	edd3 7a00 	vldr	s15, [r3]
 800395a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800395e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003962:	4b38      	ldr	r3, [pc, #224]	; (8003a44 <JoystickLocationState+0xc34>)
 8003964:	edd3 7a00 	vldr	s15, [r3]
 8003968:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800396c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003970:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003974:	4b30      	ldr	r3, [pc, #192]	; (8003a38 <JoystickLocationState+0xc28>)
 8003976:	edd3 7a01 	vldr	s15, [r3, #4]
 800397a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800397e:	4b2e      	ldr	r3, [pc, #184]	; (8003a38 <JoystickLocationState+0xc28>)
 8003980:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

			PlaceTray.hole_x[4] = (cos_Theta*30)+(-sin_Theta*-25)+PlaceTray.L1[0];
 8003984:	4b2f      	ldr	r3, [pc, #188]	; (8003a44 <JoystickLocationState+0xc34>)
 8003986:	edd3 7a00 	vldr	s15, [r3]
 800398a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800398e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003992:	4b2d      	ldr	r3, [pc, #180]	; (8003a48 <JoystickLocationState+0xc38>)
 8003994:	edd3 7a00 	vldr	s15, [r3]
 8003998:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 800399c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039a4:	4b24      	ldr	r3, [pc, #144]	; (8003a38 <JoystickLocationState+0xc28>)
 80039a6:	edd3 7a00 	vldr	s15, [r3]
 80039aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039ae:	4b22      	ldr	r3, [pc, #136]	; (8003a38 <JoystickLocationState+0xc28>)
 80039b0:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_y[4] = (sin_Theta*30)+(cos_Theta*-25)+PlaceTray.L1[1];
 80039b4:	4b24      	ldr	r3, [pc, #144]	; (8003a48 <JoystickLocationState+0xc38>)
 80039b6:	edd3 7a00 	vldr	s15, [r3]
 80039ba:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80039be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039c2:	4b20      	ldr	r3, [pc, #128]	; (8003a44 <JoystickLocationState+0xc34>)
 80039c4:	edd3 7a00 	vldr	s15, [r3]
 80039c8:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80039cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80039d0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80039d4:	4b18      	ldr	r3, [pc, #96]	; (8003a38 <JoystickLocationState+0xc28>)
 80039d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80039da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80039de:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <JoystickLocationState+0xc28>)
 80039e0:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_x[5] = (cos_Theta*50)+(-sin_Theta*-25)+PlaceTray.L1[0];
 80039e4:	4b17      	ldr	r3, [pc, #92]	; (8003a44 <JoystickLocationState+0xc34>)
 80039e6:	edd3 7a00 	vldr	s15, [r3]
 80039ea:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003a4c <JoystickLocationState+0xc3c>
 80039ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80039f2:	4b15      	ldr	r3, [pc, #84]	; (8003a48 <JoystickLocationState+0xc38>)
 80039f4:	edd3 7a00 	vldr	s15, [r3]
 80039f8:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80039fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a00:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a04:	4b0c      	ldr	r3, [pc, #48]	; (8003a38 <JoystickLocationState+0xc28>)
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <JoystickLocationState+0xc28>)
 8003a10:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
			PlaceTray.hole_y[5] = (sin_Theta*50)+(cos_Theta*-25)+PlaceTray.L1[1];
 8003a14:	4b0c      	ldr	r3, [pc, #48]	; (8003a48 <JoystickLocationState+0xc38>)
 8003a16:	edd3 7a00 	vldr	s15, [r3]
 8003a1a:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8003a4c <JoystickLocationState+0xc3c>
 8003a1e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a22:	e015      	b.n	8003a50 <JoystickLocationState+0xc40>
 8003a24:	f3af 8000 	nop.w
 8003a28:	70a3d70a 	.word	0x70a3d70a
 8003a2c:	3fa70a3d 	.word	0x3fa70a3d
 8003a30:	20000fe0 	.word	0x20000fe0
 8003a34:	cccccccd 	.word	0xcccccccd
 8003a38:	20000a44 	.word	0x20000a44
 8003a3c:	200009ac 	.word	0x200009ac
 8003a40:	20000ab0 	.word	0x20000ab0
 8003a44:	20000aa8 	.word	0x20000aa8
 8003a48:	20000aac 	.word	0x20000aac
 8003a4c:	42480000 	.word	0x42480000
 8003a50:	4ba9      	ldr	r3, [pc, #676]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003a52:	edd3 7a00 	vldr	s15, [r3]
 8003a56:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8003a5a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a62:	4ba6      	ldr	r3, [pc, #664]	; (8003cfc <JoystickLocationState+0xeec>)
 8003a64:	edd3 7a01 	vldr	s15, [r3, #4]
 8003a68:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a6c:	4ba3      	ldr	r3, [pc, #652]	; (8003cfc <JoystickLocationState+0xeec>)
 8003a6e:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

			PlaceTray.hole_x[6] = (cos_Theta*10)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003a72:	4ba1      	ldr	r3, [pc, #644]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003a74:	edd3 7a00 	vldr	s15, [r3]
 8003a78:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003a7c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003a80:	4b9f      	ldr	r3, [pc, #636]	; (8003d00 <JoystickLocationState+0xef0>)
 8003a82:	edd3 7a00 	vldr	s15, [r3]
 8003a86:	eddf 6a9f 	vldr	s13, [pc, #636]	; 8003d04 <JoystickLocationState+0xef4>
 8003a8a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003a8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a92:	4b9a      	ldr	r3, [pc, #616]	; (8003cfc <JoystickLocationState+0xeec>)
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a9c:	4b97      	ldr	r3, [pc, #604]	; (8003cfc <JoystickLocationState+0xeec>)
 8003a9e:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_y[6] = (sin_Theta*10)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003aa2:	4b97      	ldr	r3, [pc, #604]	; (8003d00 <JoystickLocationState+0xef0>)
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003aac:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ab0:	4b91      	ldr	r3, [pc, #580]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003ab2:	edd3 7a00 	vldr	s15, [r3]
 8003ab6:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003d08 <JoystickLocationState+0xef8>
 8003aba:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003ac2:	4b8e      	ldr	r3, [pc, #568]	; (8003cfc <JoystickLocationState+0xeec>)
 8003ac4:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ac8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003acc:	4b8b      	ldr	r3, [pc, #556]	; (8003cfc <JoystickLocationState+0xeec>)
 8003ace:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_x[7] = (cos_Theta*30)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003ad2:	4b89      	ldr	r3, [pc, #548]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003ad4:	edd3 7a00 	vldr	s15, [r3]
 8003ad8:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003adc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003ae0:	4b87      	ldr	r3, [pc, #540]	; (8003d00 <JoystickLocationState+0xef0>)
 8003ae2:	edd3 7a00 	vldr	s15, [r3]
 8003ae6:	eddf 6a87 	vldr	s13, [pc, #540]	; 8003d04 <JoystickLocationState+0xef4>
 8003aea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003aee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003af2:	4b82      	ldr	r3, [pc, #520]	; (8003cfc <JoystickLocationState+0xeec>)
 8003af4:	edd3 7a00 	vldr	s15, [r3]
 8003af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003afc:	4b7f      	ldr	r3, [pc, #508]	; (8003cfc <JoystickLocationState+0xeec>)
 8003afe:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
			PlaceTray.hole_y[7] = (sin_Theta*30)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003b02:	4b7f      	ldr	r3, [pc, #508]	; (8003d00 <JoystickLocationState+0xef0>)
 8003b04:	edd3 7a00 	vldr	s15, [r3]
 8003b08:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8003b0c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b10:	4b79      	ldr	r3, [pc, #484]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003b12:	edd3 7a00 	vldr	s15, [r3]
 8003b16:	eddf 6a7c 	vldr	s13, [pc, #496]	; 8003d08 <JoystickLocationState+0xef8>
 8003b1a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b1e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b22:	4b76      	ldr	r3, [pc, #472]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b24:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b2c:	4b73      	ldr	r3, [pc, #460]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b2e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

			PlaceTray.hole_x[8] = (cos_Theta*50)+(-sin_Theta*-40)+PlaceTray.L1[0];
 8003b32:	4b71      	ldr	r3, [pc, #452]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003b34:	edd3 7a00 	vldr	s15, [r3]
 8003b38:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8003d0c <JoystickLocationState+0xefc>
 8003b3c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b40:	4b6f      	ldr	r3, [pc, #444]	; (8003d00 <JoystickLocationState+0xef0>)
 8003b42:	edd3 7a00 	vldr	s15, [r3]
 8003b46:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003d04 <JoystickLocationState+0xef4>
 8003b4a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b52:	4b6a      	ldr	r3, [pc, #424]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b54:	edd3 7a00 	vldr	s15, [r3]
 8003b58:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b5c:	4b67      	ldr	r3, [pc, #412]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b5e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_y[8] = (sin_Theta*50)+(cos_Theta*-40)+PlaceTray.L1[1];
 8003b62:	4b67      	ldr	r3, [pc, #412]	; (8003d00 <JoystickLocationState+0xef0>)
 8003b64:	edd3 7a00 	vldr	s15, [r3]
 8003b68:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8003d0c <JoystickLocationState+0xefc>
 8003b6c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003b70:	4b61      	ldr	r3, [pc, #388]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003b72:	edd3 7a00 	vldr	s15, [r3]
 8003b76:	eddf 6a64 	vldr	s13, [pc, #400]	; 8003d08 <JoystickLocationState+0xef8>
 8003b7a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b7e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003b82:	4b5e      	ldr	r3, [pc, #376]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b84:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b8c:	4b5b      	ldr	r3, [pc, #364]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b8e:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54

			PlaceTray.origin_x = PlaceTray.L1[0]+(50*sin_Theta);
 8003b92:	4b5a      	ldr	r3, [pc, #360]	; (8003cfc <JoystickLocationState+0xeec>)
 8003b94:	ed93 7a00 	vldr	s14, [r3]
 8003b98:	4b59      	ldr	r3, [pc, #356]	; (8003d00 <JoystickLocationState+0xef0>)
 8003b9a:	edd3 7a00 	vldr	s15, [r3]
 8003b9e:	eddf 6a5b 	vldr	s13, [pc, #364]	; 8003d0c <JoystickLocationState+0xefc>
 8003ba2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003ba6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003baa:	4b54      	ldr	r3, [pc, #336]	; (8003cfc <JoystickLocationState+0xeec>)
 8003bac:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			PlaceTray.origin_y = PlaceTray.L1[1]-(50*cos_Theta);
 8003bb0:	4b52      	ldr	r3, [pc, #328]	; (8003cfc <JoystickLocationState+0xeec>)
 8003bb2:	ed93 7a01 	vldr	s14, [r3, #4]
 8003bb6:	4b50      	ldr	r3, [pc, #320]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003bb8:	edd3 7a00 	vldr	s15, [r3]
 8003bbc:	eddf 6a53 	vldr	s13, [pc, #332]	; 8003d0c <JoystickLocationState+0xefc>
 8003bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003bc4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003bc8:	4b4c      	ldr	r3, [pc, #304]	; (8003cfc <JoystickLocationState+0xeec>)
 8003bca:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
			PlaceTray.orientation = acosf(cos_Theta)*(180/3.14159265358979323846264338328);
 8003bce:	4b4a      	ldr	r3, [pc, #296]	; (8003cf8 <JoystickLocationState+0xee8>)
 8003bd0:	edd3 7a00 	vldr	s15, [r3]
 8003bd4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bd8:	f00d f96e 	bl	8010eb8 <acosf>
 8003bdc:	ee10 3a10 	vmov	r3, s0
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7fc fcb9 	bl	8000558 <__aeabi_f2d>
 8003be6:	a342      	add	r3, pc, #264	; (adr r3, 8003cf0 <JoystickLocationState+0xee0>)
 8003be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bec:	f7fc fd0c 	bl	8000608 <__aeabi_dmul>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	460b      	mov	r3, r1
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	f7fc fffe 	bl	8000bf8 <__aeabi_d2f>
 8003bfc:	4603      	mov	r3, r0
 8003bfe:	4a3f      	ldr	r2, [pc, #252]	; (8003cfc <JoystickLocationState+0xeec>)
 8003c00:	6613      	str	r3, [r2, #96]	; 0x60

			registerFrame[35].U16 = PlaceTray.origin_x * 10;
 8003c02:	4b3e      	ldr	r3, [pc, #248]	; (8003cfc <JoystickLocationState+0xeec>)
 8003c04:	edd3 7a16 	vldr	s15, [r3, #88]	; 0x58
 8003c08:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c0c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c10:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c14:	ee17 3a90 	vmov	r3, s15
 8003c18:	b29a      	uxth	r2, r3
 8003c1a:	4b3d      	ldr	r3, [pc, #244]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c1c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
			registerFrame[36].U16 = PlaceTray.origin_y * 10;
 8003c20:	4b36      	ldr	r3, [pc, #216]	; (8003cfc <JoystickLocationState+0xeec>)
 8003c22:	edd3 7a17 	vldr	s15, [r3, #92]	; 0x5c
 8003c26:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003c2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c32:	ee17 3a90 	vmov	r3, s15
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	4b35      	ldr	r3, [pc, #212]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c3a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			registerFrame[37].U16 = PlaceTray.orientation * 100;
 8003c3e:	4b2f      	ldr	r3, [pc, #188]	; (8003cfc <JoystickLocationState+0xeec>)
 8003c40:	edd3 7a18 	vldr	s15, [r3, #96]	; 0x60
 8003c44:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003d14 <JoystickLocationState+0xf04>
 8003c48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003c4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c50:	ee17 3a90 	vmov	r3, s15
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	4b2e      	ldr	r3, [pc, #184]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c58:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

			registerFrame[16].U16 = 0;
 8003c5c:	4b2c      	ldr	r3, [pc, #176]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c5e:	2200      	movs	r2, #0
 8003c60:	841a      	strh	r2, [r3, #32]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 1;
		}
		break;
 8003c62:	e03d      	b.n	8003ce0 <JoystickLocationState+0xed0>
		else if (ResetButton.flag == 1)
 8003c64:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <JoystickLocationState+0xf08>)
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d139      	bne.n	8003ce0 <JoystickLocationState+0xed0>
			ResetButton.flag = 0;
 8003c6c:	4b2a      	ldr	r3, [pc, #168]	; (8003d18 <JoystickLocationState+0xf08>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	609a      	str	r2, [r3, #8]
			state = 1;
 8003c72:	4b2a      	ldr	r3, [pc, #168]	; (8003d1c <JoystickLocationState+0xf0c>)
 8003c74:	2201      	movs	r2, #1
 8003c76:	601a      	str	r2, [r3, #0]
		break;
 8003c78:	e032      	b.n	8003ce0 <JoystickLocationState+0xed0>
	case 5:
		EndEffectorState = 2;		//TestModeOff
 8003c7a:	4b29      	ldr	r3, [pc, #164]	; (8003d20 <JoystickLocationState+0xf10>)
 8003c7c:	2202      	movs	r2, #2
 8003c7e:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 0;	//End Effector Status: Laser Off
 8003c80:	4b23      	ldr	r3, [pc, #140]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c82:	2200      	movs	r2, #0
 8003c84:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003c86:	4b27      	ldr	r3, [pc, #156]	; (8003d24 <JoystickLocationState+0xf14>)
 8003c88:	2201      	movs	r2, #1
 8003c8a:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003c8c:	f7fe fcae 	bl	80025ec <EndEffectorWrite>

		HAL_Delay(100);
 8003c90:	2064      	movs	r0, #100	; 0x64
 8003c92:	f001 fa83 	bl	800519c <HAL_Delay>

		EndEffectorState = 3;		//RunModeOn
 8003c96:	4b22      	ldr	r3, [pc, #136]	; (8003d20 <JoystickLocationState+0xf10>)
 8003c98:	2203      	movs	r2, #3
 8003c9a:	601a      	str	r2, [r3, #0]
		registerFrame[2].U16 = 2;	//End Effector Status: Gripper Power
 8003c9c:	4b1c      	ldr	r3, [pc, #112]	; (8003d10 <JoystickLocationState+0xf00>)
 8003c9e:	2202      	movs	r2, #2
 8003ca0:	809a      	strh	r2, [r3, #4]
		EndEffectorWriteFlag = 1;
 8003ca2:	4b20      	ldr	r3, [pc, #128]	; (8003d24 <JoystickLocationState+0xf14>)
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	701a      	strb	r2, [r3, #0]
		EndEffectorWrite();
 8003ca8:	f7fe fca0 	bl	80025ec <EndEffectorWrite>

		HAL_Delay(100);
 8003cac:	2064      	movs	r0, #100	; 0x64
 8003cae:	f001 fa75 	bl	800519c <HAL_Delay>

		state = 1;
 8003cb2:	4b1a      	ldr	r3, [pc, #104]	; (8003d1c <JoystickLocationState+0xf0c>)
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	601a      	str	r2, [r3, #0]
		scheduler = 1;				//Go Pick
 8003cb8:	4b1b      	ldr	r3, [pc, #108]	; (8003d28 <JoystickLocationState+0xf18>)
 8003cba:	2201      	movs	r2, #1
 8003cbc:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 8003cbe:	4b16      	ldr	r3, [pc, #88]	; (8003d18 <JoystickLocationState+0xf08>)
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d10e      	bne.n	8003ce4 <JoystickLocationState+0xed4>
		{
			ResetButton.flag = 0;
 8003cc6:	4b14      	ldr	r3, [pc, #80]	; (8003d18 <JoystickLocationState+0xf08>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	609a      	str	r2, [r3, #8]
			state = 1;
 8003ccc:	4b13      	ldr	r3, [pc, #76]	; (8003d1c <JoystickLocationState+0xf0c>)
 8003cce:	2201      	movs	r2, #1
 8003cd0:	601a      	str	r2, [r3, #0]
		}
		break;
 8003cd2:	e007      	b.n	8003ce4 <JoystickLocationState+0xed4>
		break;
 8003cd4:	bf00      	nop
 8003cd6:	e006      	b.n	8003ce6 <JoystickLocationState+0xed6>
		break;
 8003cd8:	bf00      	nop
 8003cda:	e004      	b.n	8003ce6 <JoystickLocationState+0xed6>
		break;
 8003cdc:	bf00      	nop
 8003cde:	e002      	b.n	8003ce6 <JoystickLocationState+0xed6>
		break;
 8003ce0:	bf00      	nop
 8003ce2:	e000      	b.n	8003ce6 <JoystickLocationState+0xed6>
		break;
 8003ce4:	bf00      	nop
	}
}
 8003ce6:	bf00      	nop
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	ecbd 8b02 	vpop	{d8}
 8003cee:	bd80      	pop	{r7, pc}
 8003cf0:	1a63c1f8 	.word	0x1a63c1f8
 8003cf4:	404ca5dc 	.word	0x404ca5dc
 8003cf8:	20000aa8 	.word	0x20000aa8
 8003cfc:	20000a44 	.word	0x20000a44
 8003d00:	20000aac 	.word	0x20000aac
 8003d04:	42200000 	.word	0x42200000
 8003d08:	c2200000 	.word	0xc2200000
 8003d0c:	42480000 	.word	0x42480000
 8003d10:	20000fe0 	.word	0x20000fe0
 8003d14:	42c80000 	.word	0x42c80000
 8003d18:	20000abc 	.word	0x20000abc
 8003d1c:	20000224 	.word	0x20000224
 8003d20:	20000b00 	.word	0x20000b00
 8003d24:	20000af8 	.word	0x20000af8
 8003d28:	20000200 	.word	0x20000200

08003d2c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	if(htim == &htim9) //check call back from timer9
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	4a06      	ldr	r2, [pc, #24]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d105      	bne.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x1c>
	{
		if(scheduler == 3)
 8003d3c:	4b05      	ldr	r3, [pc, #20]	; (8003d54 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	2b03      	cmp	r3, #3
 8003d42:	d101      	bne.n	8003d48 <HAL_TIM_PeriodElapsedCallback+0x1c>
		{
			TrajectoryGenerator();
 8003d44:	f000 f808 	bl	8003d58 <TrajectoryGenerator>
//			if (hi2c1.State == HAL_I2C_STATE_READY) {
//				HAL_I2C_Master_Receive_IT(&hi2c1, 0x15 << 1, EndEffectorDataReadBack, 1);
//			}
//		}
//	}
}
 8003d48:	bf00      	nop
 8003d4a:	3708      	adds	r7, #8
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	200006b4 	.word	0x200006b4
 8003d54:	20000200 	.word	0x20000200

08003d58 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8003d58:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003d5c:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8003d5e:	4b93      	ldr	r3, [pc, #588]	; (8003fac <TrajectoryGenerator+0x254>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2b03      	cmp	r3, #3
 8003d64:	f200 8519 	bhi.w	800479a <TrajectoryGenerator+0xa42>
 8003d68:	a201      	add	r2, pc, #4	; (adr r2, 8003d70 <TrajectoryGenerator+0x18>)
 8003d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d6e:	bf00      	nop
 8003d70:	08003d81 	.word	0x08003d81
 8003d74:	08003ff5 	.word	0x08003ff5
 8003d78:	08004335 	.word	0x08004335
 8003d7c:	08004799 	.word	0x08004799
	{
	case 0: //initial Condition & Case Check
			qi = position;
 8003d80:	4b8b      	ldr	r3, [pc, #556]	; (8003fb0 <TrajectoryGenerator+0x258>)
 8003d82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003d86:	ee07 3a90 	vmov	s15, r3
 8003d8a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003d8e:	4b89      	ldr	r3, [pc, #548]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003d90:	edc3 7a00 	vstr	s15, [r3]
			qdi = 0;
 8003d94:	4b88      	ldr	r3, [pc, #544]	; (8003fb8 <TrajectoryGenerator+0x260>)
 8003d96:	f04f 0200 	mov.w	r2, #0
 8003d9a:	601a      	str	r2, [r3, #0]
			qd_max = 22222;  //1000 pulse/s
 8003d9c:	4b87      	ldr	r3, [pc, #540]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003d9e:	4a88      	ldr	r2, [pc, #544]	; (8003fc0 <TrajectoryGenerator+0x268>)
 8003da0:	601a      	str	r2, [r3, #0]
			qdd_max = 55555; //3000 pulse/s^2 /0.045
 8003da2:	4b88      	ldr	r3, [pc, #544]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003da4:	4a88      	ldr	r2, [pc, #544]	; (8003fc8 <TrajectoryGenerator+0x270>)
 8003da6:	601a      	str	r2, [r3, #0]

		  if(qf > qi)
 8003da8:	4b88      	ldr	r3, [pc, #544]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003daa:	ed93 7a00 	vldr	s14, [r3]
 8003dae:	4b81      	ldr	r3, [pc, #516]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003db0:	edd3 7a00 	vldr	s15, [r3]
 8003db4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003dbc:	dd16      	ble.n	8003dec <TrajectoryGenerator+0x94>
		  {
			  t_half = sqrtf((qf-qi)/qdd_max);
 8003dbe:	4b83      	ldr	r3, [pc, #524]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003dc0:	ed93 7a00 	vldr	s14, [r3]
 8003dc4:	4b7b      	ldr	r3, [pc, #492]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003dc6:	edd3 7a00 	vldr	s15, [r3]
 8003dca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003dce:	4b7d      	ldr	r3, [pc, #500]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003dd0:	edd3 7a00 	vldr	s15, [r3]
 8003dd4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003dd8:	eeb0 0a66 	vmov.f32	s0, s13
 8003ddc:	f00d f898 	bl	8010f10 <sqrtf>
 8003de0:	eef0 7a40 	vmov.f32	s15, s0
 8003de4:	4b7a      	ldr	r3, [pc, #488]	; (8003fd0 <TrajectoryGenerator+0x278>)
 8003de6:	edc3 7a00 	vstr	s15, [r3]
 8003dea:	e022      	b.n	8003e32 <TrajectoryGenerator+0xda>
		  }
		  else if(qf < qi)
 8003dec:	4b77      	ldr	r3, [pc, #476]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003dee:	ed93 7a00 	vldr	s14, [r3]
 8003df2:	4b70      	ldr	r3, [pc, #448]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003df4:	edd3 7a00 	vldr	s15, [r3]
 8003df8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e00:	d517      	bpl.n	8003e32 <TrajectoryGenerator+0xda>
		  {
			  t_half = sqrtf(-1*(qf-qi)/qdd_max);
 8003e02:	4b72      	ldr	r3, [pc, #456]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003e04:	ed93 7a00 	vldr	s14, [r3]
 8003e08:	4b6a      	ldr	r3, [pc, #424]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e12:	eeb1 7a67 	vneg.f32	s14, s15
 8003e16:	4b6b      	ldr	r3, [pc, #428]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003e18:	edd3 7a00 	vldr	s15, [r3]
 8003e1c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003e20:	eeb0 0a66 	vmov.f32	s0, s13
 8003e24:	f00d f874 	bl	8010f10 <sqrtf>
 8003e28:	eef0 7a40 	vmov.f32	s15, s0
 8003e2c:	4b68      	ldr	r3, [pc, #416]	; (8003fd0 <TrajectoryGenerator+0x278>)
 8003e2e:	edc3 7a00 	vstr	s15, [r3]
		  }

		  if(qf-qi < 0)
 8003e32:	4b66      	ldr	r3, [pc, #408]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003e34:	ed93 7a00 	vldr	s14, [r3]
 8003e38:	4b5e      	ldr	r3, [pc, #376]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003e3a:	edd3 7a00 	vldr	s15, [r3]
 8003e3e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003e42:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003e46:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e4a:	d50f      	bpl.n	8003e6c <TrajectoryGenerator+0x114>
		  {
			  qd_max = -1*qd_max;
 8003e4c:	4b5b      	ldr	r3, [pc, #364]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003e4e:	edd3 7a00 	vldr	s15, [r3]
 8003e52:	eef1 7a67 	vneg.f32	s15, s15
 8003e56:	4b59      	ldr	r3, [pc, #356]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003e58:	edc3 7a00 	vstr	s15, [r3]
			  qdd_max = -1*qdd_max;
 8003e5c:	4b59      	ldr	r3, [pc, #356]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003e5e:	edd3 7a00 	vldr	s15, [r3]
 8003e62:	eef1 7a67 	vneg.f32	s15, s15
 8003e66:	4b57      	ldr	r3, [pc, #348]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003e68:	edc3 7a00 	vstr	s15, [r3]
		  }

		  tacc = (qd_max-qdi)/qdd_max;
 8003e6c:	4b53      	ldr	r3, [pc, #332]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003e6e:	ed93 7a00 	vldr	s14, [r3]
 8003e72:	4b51      	ldr	r3, [pc, #324]	; (8003fb8 <TrajectoryGenerator+0x260>)
 8003e74:	edd3 7a00 	vldr	s15, [r3]
 8003e78:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003e7c:	4b51      	ldr	r3, [pc, #324]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003e7e:	ed93 7a00 	vldr	s14, [r3]
 8003e82:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e86:	4b53      	ldr	r3, [pc, #332]	; (8003fd4 <TrajectoryGenerator+0x27c>)
 8003e88:	edc3 7a00 	vstr	s15, [r3]
		  qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 8003e8c:	4b4a      	ldr	r3, [pc, #296]	; (8003fb8 <TrajectoryGenerator+0x260>)
 8003e8e:	ed93 7a00 	vldr	s14, [r3]
 8003e92:	4b50      	ldr	r3, [pc, #320]	; (8003fd4 <TrajectoryGenerator+0x27c>)
 8003e94:	edd3 7a00 	vldr	s15, [r3]
 8003e98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e9c:	ee17 0a90 	vmov	r0, s15
 8003ea0:	f7fc fb5a 	bl	8000558 <__aeabi_f2d>
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	4b46      	ldr	r3, [pc, #280]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb53 	bl	8000558 <__aeabi_f2d>
 8003eb2:	f04f 0200 	mov.w	r2, #0
 8003eb6:	4b48      	ldr	r3, [pc, #288]	; (8003fd8 <TrajectoryGenerator+0x280>)
 8003eb8:	f7fc fba6 	bl	8000608 <__aeabi_dmul>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4690      	mov	r8, r2
 8003ec2:	4699      	mov	r9, r3
 8003ec4:	4b43      	ldr	r3, [pc, #268]	; (8003fd4 <TrajectoryGenerator+0x27c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4618      	mov	r0, r3
 8003eca:	f7fc fb45 	bl	8000558 <__aeabi_f2d>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4640      	mov	r0, r8
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	f7fc fb97 	bl	8000608 <__aeabi_dmul>
 8003eda:	4602      	mov	r2, r0
 8003edc:	460b      	mov	r3, r1
 8003ede:	4690      	mov	r8, r2
 8003ee0:	4699      	mov	r9, r3
 8003ee2:	4b3c      	ldr	r3, [pc, #240]	; (8003fd4 <TrajectoryGenerator+0x27c>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7fc fb36 	bl	8000558 <__aeabi_f2d>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc fb88 	bl	8000608 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4620      	mov	r0, r4
 8003efe:	4629      	mov	r1, r5
 8003f00:	f7fc f9cc 	bl	800029c <__adddf3>
 8003f04:	4602      	mov	r2, r0
 8003f06:	460b      	mov	r3, r1
 8003f08:	4610      	mov	r0, r2
 8003f0a:	4619      	mov	r1, r3
 8003f0c:	f7fc fe74 	bl	8000bf8 <__aeabi_d2f>
 8003f10:	4603      	mov	r3, r0
 8003f12:	4a32      	ldr	r2, [pc, #200]	; (8003fdc <TrajectoryGenerator+0x284>)
 8003f14:	6013      	str	r3, [r2, #0]
		  qdec = qacc;
 8003f16:	4b31      	ldr	r3, [pc, #196]	; (8003fdc <TrajectoryGenerator+0x284>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a31      	ldr	r2, [pc, #196]	; (8003fe0 <TrajectoryGenerator+0x288>)
 8003f1c:	6013      	str	r3, [r2, #0]
		  tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8003f1e:	4b2b      	ldr	r3, [pc, #172]	; (8003fcc <TrajectoryGenerator+0x274>)
 8003f20:	ed93 7a00 	vldr	s14, [r3]
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <TrajectoryGenerator+0x25c>)
 8003f26:	edd3 7a00 	vldr	s15, [r3]
 8003f2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f2e:	4b2b      	ldr	r3, [pc, #172]	; (8003fdc <TrajectoryGenerator+0x284>)
 8003f30:	edd3 7a00 	vldr	s15, [r3]
 8003f34:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003f38:	4b29      	ldr	r3, [pc, #164]	; (8003fe0 <TrajectoryGenerator+0x288>)
 8003f3a:	edd3 7a00 	vldr	s15, [r3]
 8003f3e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003f42:	4b1e      	ldr	r3, [pc, #120]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003f44:	ed93 7a00 	vldr	s14, [r3]
 8003f48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f4c:	4b25      	ldr	r3, [pc, #148]	; (8003fe4 <TrajectoryGenerator+0x28c>)
 8003f4e:	edc3 7a00 	vstr	s15, [r3]
		  tdec = tacc;
 8003f52:	4b20      	ldr	r3, [pc, #128]	; (8003fd4 <TrajectoryGenerator+0x27c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4a24      	ldr	r2, [pc, #144]	; (8003fe8 <TrajectoryGenerator+0x290>)
 8003f58:	6013      	str	r3, [r2, #0]

		  if(fabs(qdi+qdd_max*t_half) >= fabs(qd_max))
 8003f5a:	4b1a      	ldr	r3, [pc, #104]	; (8003fc4 <TrajectoryGenerator+0x26c>)
 8003f5c:	ed93 7a00 	vldr	s14, [r3]
 8003f60:	4b1b      	ldr	r3, [pc, #108]	; (8003fd0 <TrajectoryGenerator+0x278>)
 8003f62:	edd3 7a00 	vldr	s15, [r3]
 8003f66:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003f6a:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <TrajectoryGenerator+0x260>)
 8003f6c:	edd3 7a00 	vldr	s15, [r3]
 8003f70:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003f74:	eeb0 7ae7 	vabs.f32	s14, s15
 8003f78:	4b10      	ldr	r3, [pc, #64]	; (8003fbc <TrajectoryGenerator+0x264>)
 8003f7a:	edd3 7a00 	vldr	s15, [r3]
 8003f7e:	eef0 7ae7 	vabs.f32	s15, s15
 8003f82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003f86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f8a:	db07      	blt.n	8003f9c <TrajectoryGenerator+0x244>
		  {
			  initime = time;
 8003f8c:	4b17      	ldr	r3, [pc, #92]	; (8003fec <TrajectoryGenerator+0x294>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a17      	ldr	r2, [pc, #92]	; (8003ff0 <TrajectoryGenerator+0x298>)
 8003f92:	6013      	str	r3, [r2, #0]
			  Trajectstate = 2;
 8003f94:	4b05      	ldr	r3, [pc, #20]	; (8003fac <TrajectoryGenerator+0x254>)
 8003f96:	2202      	movs	r2, #2
 8003f98:	601a      	str	r2, [r3, #0]
		  else
		  {
			  initime = time;
			  Trajectstate = 1;
		  }
		  break;
 8003f9a:	e3fe      	b.n	800479a <TrajectoryGenerator+0xa42>
			  initime = time;
 8003f9c:	4b13      	ldr	r3, [pc, #76]	; (8003fec <TrajectoryGenerator+0x294>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a13      	ldr	r2, [pc, #76]	; (8003ff0 <TrajectoryGenerator+0x298>)
 8003fa2:	6013      	str	r3, [r2, #0]
			  Trajectstate = 1;
 8003fa4:	4b01      	ldr	r3, [pc, #4]	; (8003fac <TrajectoryGenerator+0x254>)
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	601a      	str	r2, [r3, #0]
		  break;
 8003faa:	e3f6      	b.n	800479a <TrajectoryGenerator+0xa42>
 8003fac:	2000096c 	.word	0x2000096c
 8003fb0:	200009ac 	.word	0x200009ac
 8003fb4:	20000978 	.word	0x20000978
 8003fb8:	2000097c 	.word	0x2000097c
 8003fbc:	20000210 	.word	0x20000210
 8003fc0:	46ad9c00 	.word	0x46ad9c00
 8003fc4:	20000214 	.word	0x20000214
 8003fc8:	47590300 	.word	0x47590300
 8003fcc:	20000974 	.word	0x20000974
 8003fd0:	20000984 	.word	0x20000984
 8003fd4:	20000998 	.word	0x20000998
 8003fd8:	3fe00000 	.word	0x3fe00000
 8003fdc:	2000099c 	.word	0x2000099c
 8003fe0:	200009a0 	.word	0x200009a0
 8003fe4:	200009a4 	.word	0x200009a4
 8003fe8:	200009a8 	.word	0x200009a8
 8003fec:	20000970 	.word	0x20000970
 8003ff0:	20000980 	.word	0x20000980

	case 1:
		  if(time <= t_half + initime)
 8003ff4:	4bc2      	ldr	r3, [pc, #776]	; (8004300 <TrajectoryGenerator+0x5a8>)
 8003ff6:	ed93 7a00 	vldr	s14, [r3]
 8003ffa:	4bc2      	ldr	r3, [pc, #776]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004004:	4bc0      	ldr	r3, [pc, #768]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004006:	edd3 7a00 	vldr	s15, [r3]
 800400a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800400e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004012:	f2c0 8092 	blt.w	800413a <TrajectoryGenerator+0x3e2>
		  {
			  setacc = qdd_max;
 8004016:	4bbd      	ldr	r3, [pc, #756]	; (800430c <TrajectoryGenerator+0x5b4>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4abd      	ldr	r2, [pc, #756]	; (8004310 <TrajectoryGenerator+0x5b8>)
 800401c:	6013      	str	r3, [r2, #0]
			  setvelocity = qdi + setacc*(time-initime);
 800401e:	4bba      	ldr	r3, [pc, #744]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004020:	ed93 7a00 	vldr	s14, [r3]
 8004024:	4bb7      	ldr	r3, [pc, #732]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800402e:	4bb8      	ldr	r3, [pc, #736]	; (8004310 <TrajectoryGenerator+0x5b8>)
 8004030:	edd3 7a00 	vldr	s15, [r3]
 8004034:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004038:	4bb6      	ldr	r3, [pc, #728]	; (8004314 <TrajectoryGenerator+0x5bc>)
 800403a:	edd3 7a00 	vldr	s15, [r3]
 800403e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004042:	4bb5      	ldr	r3, [pc, #724]	; (8004318 <TrajectoryGenerator+0x5c0>)
 8004044:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004048:	4baf      	ldr	r3, [pc, #700]	; (8004308 <TrajectoryGenerator+0x5b0>)
 800404a:	ed93 7a00 	vldr	s14, [r3]
 800404e:	4bad      	ldr	r3, [pc, #692]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8004050:	edd3 7a00 	vldr	s15, [r3]
 8004054:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004058:	4bae      	ldr	r3, [pc, #696]	; (8004314 <TrajectoryGenerator+0x5bc>)
 800405a:	edd3 7a00 	vldr	s15, [r3]
 800405e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004062:	4bae      	ldr	r3, [pc, #696]	; (800431c <TrajectoryGenerator+0x5c4>)
 8004064:	edd3 7a00 	vldr	s15, [r3]
 8004068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800406c:	ee17 0a90 	vmov	r0, s15
 8004070:	f7fc fa72 	bl	8000558 <__aeabi_f2d>
 8004074:	4604      	mov	r4, r0
 8004076:	460d      	mov	r5, r1
 8004078:	4ba5      	ldr	r3, [pc, #660]	; (8004310 <TrajectoryGenerator+0x5b8>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4618      	mov	r0, r3
 800407e:	f7fc fa6b 	bl	8000558 <__aeabi_f2d>
 8004082:	f04f 0200 	mov.w	r2, #0
 8004086:	4ba6      	ldr	r3, [pc, #664]	; (8004320 <TrajectoryGenerator+0x5c8>)
 8004088:	f7fc fabe 	bl	8000608 <__aeabi_dmul>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4690      	mov	r8, r2
 8004092:	4699      	mov	r9, r3
 8004094:	4b9c      	ldr	r3, [pc, #624]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004096:	ed93 7a00 	vldr	s14, [r3]
 800409a:	4b9a      	ldr	r3, [pc, #616]	; (8004304 <TrajectoryGenerator+0x5ac>)
 800409c:	edd3 7a00 	vldr	s15, [r3]
 80040a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040a4:	ee17 0a90 	vmov	r0, s15
 80040a8:	f7fc fa56 	bl	8000558 <__aeabi_f2d>
 80040ac:	4602      	mov	r2, r0
 80040ae:	460b      	mov	r3, r1
 80040b0:	4640      	mov	r0, r8
 80040b2:	4649      	mov	r1, r9
 80040b4:	f7fc faa8 	bl	8000608 <__aeabi_dmul>
 80040b8:	4602      	mov	r2, r0
 80040ba:	460b      	mov	r3, r1
 80040bc:	4690      	mov	r8, r2
 80040be:	4699      	mov	r9, r3
 80040c0:	4b91      	ldr	r3, [pc, #580]	; (8004308 <TrajectoryGenerator+0x5b0>)
 80040c2:	ed93 7a00 	vldr	s14, [r3]
 80040c6:	4b8f      	ldr	r3, [pc, #572]	; (8004304 <TrajectoryGenerator+0x5ac>)
 80040c8:	edd3 7a00 	vldr	s15, [r3]
 80040cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80040d0:	ee17 0a90 	vmov	r0, s15
 80040d4:	f7fc fa40 	bl	8000558 <__aeabi_f2d>
 80040d8:	4602      	mov	r2, r0
 80040da:	460b      	mov	r3, r1
 80040dc:	4640      	mov	r0, r8
 80040de:	4649      	mov	r1, r9
 80040e0:	f7fc fa92 	bl	8000608 <__aeabi_dmul>
 80040e4:	4602      	mov	r2, r0
 80040e6:	460b      	mov	r3, r1
 80040e8:	4620      	mov	r0, r4
 80040ea:	4629      	mov	r1, r5
 80040ec:	f7fc f8d6 	bl	800029c <__adddf3>
 80040f0:	4602      	mov	r2, r0
 80040f2:	460b      	mov	r3, r1
 80040f4:	4610      	mov	r0, r2
 80040f6:	4619      	mov	r1, r3
 80040f8:	f7fc fd7e 	bl	8000bf8 <__aeabi_d2f>
 80040fc:	4603      	mov	r3, r0
 80040fe:	4a89      	ldr	r2, [pc, #548]	; (8004324 <TrajectoryGenerator+0x5cc>)
 8004100:	6013      	str	r3, [r2, #0]

			  qi_1 = setposition;
 8004102:	4b88      	ldr	r3, [pc, #544]	; (8004324 <TrajectoryGenerator+0x5cc>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a88      	ldr	r2, [pc, #544]	; (8004328 <TrajectoryGenerator+0x5d0>)
 8004108:	6013      	str	r3, [r2, #0]
			  qdi_1 = setvelocity;
 800410a:	4b83      	ldr	r3, [pc, #524]	; (8004318 <TrajectoryGenerator+0x5c0>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a87      	ldr	r2, [pc, #540]	; (800432c <TrajectoryGenerator+0x5d4>)
 8004110:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 8004112:	4b7d      	ldr	r3, [pc, #500]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f7fc fa1e 	bl	8000558 <__aeabi_f2d>
 800411c:	a376      	add	r3, pc, #472	; (adr r3, 80042f8 <TrajectoryGenerator+0x5a0>)
 800411e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004122:	f7fc f8bb 	bl	800029c <__adddf3>
 8004126:	4602      	mov	r2, r0
 8004128:	460b      	mov	r3, r1
 800412a:	4610      	mov	r0, r2
 800412c:	4619      	mov	r1, r3
 800412e:	f7fc fd63 	bl	8000bf8 <__aeabi_d2f>
 8004132:	4603      	mov	r3, r0
 8004134:	4a74      	ldr	r2, [pc, #464]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004136:	6013      	str	r3, [r2, #0]
			  time += 0.001;
		  }
		  else if(time > (2*t_half) + initime){
			  setposition = qf;
		  }
		break;
 8004138:	e32f      	b.n	800479a <TrajectoryGenerator+0xa42>
		  else if(t_half + initime < time && time <= (2*t_half) + initime)
 800413a:	4b71      	ldr	r3, [pc, #452]	; (8004300 <TrajectoryGenerator+0x5a8>)
 800413c:	ed93 7a00 	vldr	s14, [r3]
 8004140:	4b70      	ldr	r3, [pc, #448]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8004142:	edd3 7a00 	vldr	s15, [r3]
 8004146:	ee37 7a27 	vadd.f32	s14, s14, s15
 800414a:	4b6f      	ldr	r3, [pc, #444]	; (8004308 <TrajectoryGenerator+0x5b0>)
 800414c:	edd3 7a00 	vldr	s15, [r3]
 8004150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004158:	f140 80b5 	bpl.w	80042c6 <TrajectoryGenerator+0x56e>
 800415c:	4b68      	ldr	r3, [pc, #416]	; (8004300 <TrajectoryGenerator+0x5a8>)
 800415e:	edd3 7a00 	vldr	s15, [r3]
 8004162:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8004166:	4b67      	ldr	r3, [pc, #412]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8004168:	edd3 7a00 	vldr	s15, [r3]
 800416c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004170:	4b65      	ldr	r3, [pc, #404]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004172:	edd3 7a00 	vldr	s15, [r3]
 8004176:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800417a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800417e:	f2c0 80a2 	blt.w	80042c6 <TrajectoryGenerator+0x56e>
			  setacc = -qdd_max;
 8004182:	4b62      	ldr	r3, [pc, #392]	; (800430c <TrajectoryGenerator+0x5b4>)
 8004184:	edd3 7a00 	vldr	s15, [r3]
 8004188:	eef1 7a67 	vneg.f32	s15, s15
 800418c:	4b60      	ldr	r3, [pc, #384]	; (8004310 <TrajectoryGenerator+0x5b8>)
 800418e:	edc3 7a00 	vstr	s15, [r3]
			  setvelocity = qdi_1 + setacc*(time-initime-t_half);
 8004192:	4b5d      	ldr	r3, [pc, #372]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004194:	ed93 7a00 	vldr	s14, [r3]
 8004198:	4b5a      	ldr	r3, [pc, #360]	; (8004304 <TrajectoryGenerator+0x5ac>)
 800419a:	edd3 7a00 	vldr	s15, [r3]
 800419e:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041a2:	4b57      	ldr	r3, [pc, #348]	; (8004300 <TrajectoryGenerator+0x5a8>)
 80041a4:	edd3 7a00 	vldr	s15, [r3]
 80041a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041ac:	4b58      	ldr	r3, [pc, #352]	; (8004310 <TrajectoryGenerator+0x5b8>)
 80041ae:	edd3 7a00 	vldr	s15, [r3]
 80041b2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041b6:	4b5d      	ldr	r3, [pc, #372]	; (800432c <TrajectoryGenerator+0x5d4>)
 80041b8:	edd3 7a00 	vldr	s15, [r3]
 80041bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041c0:	4b55      	ldr	r3, [pc, #340]	; (8004318 <TrajectoryGenerator+0x5c0>)
 80041c2:	edc3 7a00 	vstr	s15, [r3]
			  setposition = qi_1 + qdi_1*(time-initime-t_half)+0.5*setacc*(time-initime-t_half)*(time-initime-t_half);
 80041c6:	4b50      	ldr	r3, [pc, #320]	; (8004308 <TrajectoryGenerator+0x5b0>)
 80041c8:	ed93 7a00 	vldr	s14, [r3]
 80041cc:	4b4d      	ldr	r3, [pc, #308]	; (8004304 <TrajectoryGenerator+0x5ac>)
 80041ce:	edd3 7a00 	vldr	s15, [r3]
 80041d2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041d6:	4b4a      	ldr	r3, [pc, #296]	; (8004300 <TrajectoryGenerator+0x5a8>)
 80041d8:	edd3 7a00 	vldr	s15, [r3]
 80041dc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80041e0:	4b52      	ldr	r3, [pc, #328]	; (800432c <TrajectoryGenerator+0x5d4>)
 80041e2:	edd3 7a00 	vldr	s15, [r3]
 80041e6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80041ea:	4b4f      	ldr	r3, [pc, #316]	; (8004328 <TrajectoryGenerator+0x5d0>)
 80041ec:	edd3 7a00 	vldr	s15, [r3]
 80041f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80041f4:	ee17 0a90 	vmov	r0, s15
 80041f8:	f7fc f9ae 	bl	8000558 <__aeabi_f2d>
 80041fc:	4604      	mov	r4, r0
 80041fe:	460d      	mov	r5, r1
 8004200:	4b43      	ldr	r3, [pc, #268]	; (8004310 <TrajectoryGenerator+0x5b8>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4618      	mov	r0, r3
 8004206:	f7fc f9a7 	bl	8000558 <__aeabi_f2d>
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	4b44      	ldr	r3, [pc, #272]	; (8004320 <TrajectoryGenerator+0x5c8>)
 8004210:	f7fc f9fa 	bl	8000608 <__aeabi_dmul>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4690      	mov	r8, r2
 800421a:	4699      	mov	r9, r3
 800421c:	4b3a      	ldr	r3, [pc, #232]	; (8004308 <TrajectoryGenerator+0x5b0>)
 800421e:	ed93 7a00 	vldr	s14, [r3]
 8004222:	4b38      	ldr	r3, [pc, #224]	; (8004304 <TrajectoryGenerator+0x5ac>)
 8004224:	edd3 7a00 	vldr	s15, [r3]
 8004228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <TrajectoryGenerator+0x5a8>)
 800422e:	edd3 7a00 	vldr	s15, [r3]
 8004232:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004236:	ee17 0a90 	vmov	r0, s15
 800423a:	f7fc f98d 	bl	8000558 <__aeabi_f2d>
 800423e:	4602      	mov	r2, r0
 8004240:	460b      	mov	r3, r1
 8004242:	4640      	mov	r0, r8
 8004244:	4649      	mov	r1, r9
 8004246:	f7fc f9df 	bl	8000608 <__aeabi_dmul>
 800424a:	4602      	mov	r2, r0
 800424c:	460b      	mov	r3, r1
 800424e:	4690      	mov	r8, r2
 8004250:	4699      	mov	r9, r3
 8004252:	4b2d      	ldr	r3, [pc, #180]	; (8004308 <TrajectoryGenerator+0x5b0>)
 8004254:	ed93 7a00 	vldr	s14, [r3]
 8004258:	4b2a      	ldr	r3, [pc, #168]	; (8004304 <TrajectoryGenerator+0x5ac>)
 800425a:	edd3 7a00 	vldr	s15, [r3]
 800425e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <TrajectoryGenerator+0x5a8>)
 8004264:	edd3 7a00 	vldr	s15, [r3]
 8004268:	ee77 7a67 	vsub.f32	s15, s14, s15
 800426c:	ee17 0a90 	vmov	r0, s15
 8004270:	f7fc f972 	bl	8000558 <__aeabi_f2d>
 8004274:	4602      	mov	r2, r0
 8004276:	460b      	mov	r3, r1
 8004278:	4640      	mov	r0, r8
 800427a:	4649      	mov	r1, r9
 800427c:	f7fc f9c4 	bl	8000608 <__aeabi_dmul>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4620      	mov	r0, r4
 8004286:	4629      	mov	r1, r5
 8004288:	f7fc f808 	bl	800029c <__adddf3>
 800428c:	4602      	mov	r2, r0
 800428e:	460b      	mov	r3, r1
 8004290:	4610      	mov	r0, r2
 8004292:	4619      	mov	r1, r3
 8004294:	f7fc fcb0 	bl	8000bf8 <__aeabi_d2f>
 8004298:	4603      	mov	r3, r0
 800429a:	4a22      	ldr	r2, [pc, #136]	; (8004324 <TrajectoryGenerator+0x5cc>)
 800429c:	6013      	str	r3, [r2, #0]
			  time += 0.001;
 800429e:	4b1a      	ldr	r3, [pc, #104]	; (8004308 <TrajectoryGenerator+0x5b0>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4618      	mov	r0, r3
 80042a4:	f7fc f958 	bl	8000558 <__aeabi_f2d>
 80042a8:	a313      	add	r3, pc, #76	; (adr r3, 80042f8 <TrajectoryGenerator+0x5a0>)
 80042aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ae:	f7fb fff5 	bl	800029c <__adddf3>
 80042b2:	4602      	mov	r2, r0
 80042b4:	460b      	mov	r3, r1
 80042b6:	4610      	mov	r0, r2
 80042b8:	4619      	mov	r1, r3
 80042ba:	f7fc fc9d 	bl	8000bf8 <__aeabi_d2f>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a11      	ldr	r2, [pc, #68]	; (8004308 <TrajectoryGenerator+0x5b0>)
 80042c2:	6013      	str	r3, [r2, #0]
		break;
 80042c4:	e269      	b.n	800479a <TrajectoryGenerator+0xa42>
		  else if(time > (2*t_half) + initime){
 80042c6:	4b0e      	ldr	r3, [pc, #56]	; (8004300 <TrajectoryGenerator+0x5a8>)
 80042c8:	edd3 7a00 	vldr	s15, [r3]
 80042cc:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <TrajectoryGenerator+0x5ac>)
 80042d2:	edd3 7a00 	vldr	s15, [r3]
 80042d6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80042da:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <TrajectoryGenerator+0x5b0>)
 80042dc:	edd3 7a00 	vldr	s15, [r3]
 80042e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80042e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042e8:	d400      	bmi.n	80042ec <TrajectoryGenerator+0x594>
		break;
 80042ea:	e256      	b.n	800479a <TrajectoryGenerator+0xa42>
			  setposition = qf;
 80042ec:	4b10      	ldr	r3, [pc, #64]	; (8004330 <TrajectoryGenerator+0x5d8>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a0c      	ldr	r2, [pc, #48]	; (8004324 <TrajectoryGenerator+0x5cc>)
 80042f2:	6013      	str	r3, [r2, #0]
		break;
 80042f4:	e251      	b.n	800479a <TrajectoryGenerator+0xa42>
 80042f6:	bf00      	nop
 80042f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80042fc:	3f50624d 	.word	0x3f50624d
 8004300:	20000984 	.word	0x20000984
 8004304:	20000980 	.word	0x20000980
 8004308:	20000970 	.word	0x20000970
 800430c:	20000214 	.word	0x20000214
 8004310:	200009dc 	.word	0x200009dc
 8004314:	2000097c 	.word	0x2000097c
 8004318:	200009d8 	.word	0x200009d8
 800431c:	20000978 	.word	0x20000978
 8004320:	3fe00000 	.word	0x3fe00000
 8004324:	200009b8 	.word	0x200009b8
 8004328:	20000990 	.word	0x20000990
 800432c:	20000988 	.word	0x20000988
 8004330:	20000974 	.word	0x20000974

	case 2:
		 if(time <= tacc + initime)
 8004334:	4b84      	ldr	r3, [pc, #528]	; (8004548 <TrajectoryGenerator+0x7f0>)
 8004336:	ed93 7a00 	vldr	s14, [r3]
 800433a:	4b84      	ldr	r3, [pc, #528]	; (800454c <TrajectoryGenerator+0x7f4>)
 800433c:	edd3 7a00 	vldr	s15, [r3]
 8004340:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004344:	4b82      	ldr	r3, [pc, #520]	; (8004550 <TrajectoryGenerator+0x7f8>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	f2c0 8092 	blt.w	800447a <TrajectoryGenerator+0x722>
		 {
			 setacc = qdd_max;
 8004356:	4b7f      	ldr	r3, [pc, #508]	; (8004554 <TrajectoryGenerator+0x7fc>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a7f      	ldr	r2, [pc, #508]	; (8004558 <TrajectoryGenerator+0x800>)
 800435c:	6013      	str	r3, [r2, #0]
			 setvelocity = qdi + setacc*(time-initime);
 800435e:	4b7c      	ldr	r3, [pc, #496]	; (8004550 <TrajectoryGenerator+0x7f8>)
 8004360:	ed93 7a00 	vldr	s14, [r3]
 8004364:	4b79      	ldr	r3, [pc, #484]	; (800454c <TrajectoryGenerator+0x7f4>)
 8004366:	edd3 7a00 	vldr	s15, [r3]
 800436a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800436e:	4b7a      	ldr	r3, [pc, #488]	; (8004558 <TrajectoryGenerator+0x800>)
 8004370:	edd3 7a00 	vldr	s15, [r3]
 8004374:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004378:	4b78      	ldr	r3, [pc, #480]	; (800455c <TrajectoryGenerator+0x804>)
 800437a:	edd3 7a00 	vldr	s15, [r3]
 800437e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004382:	4b77      	ldr	r3, [pc, #476]	; (8004560 <TrajectoryGenerator+0x808>)
 8004384:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi + qdi*(time-initime)+0.5*setacc*(time-initime)*(time-initime);
 8004388:	4b71      	ldr	r3, [pc, #452]	; (8004550 <TrajectoryGenerator+0x7f8>)
 800438a:	ed93 7a00 	vldr	s14, [r3]
 800438e:	4b6f      	ldr	r3, [pc, #444]	; (800454c <TrajectoryGenerator+0x7f4>)
 8004390:	edd3 7a00 	vldr	s15, [r3]
 8004394:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004398:	4b70      	ldr	r3, [pc, #448]	; (800455c <TrajectoryGenerator+0x804>)
 800439a:	edd3 7a00 	vldr	s15, [r3]
 800439e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <TrajectoryGenerator+0x80c>)
 80043a4:	edd3 7a00 	vldr	s15, [r3]
 80043a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80043ac:	ee17 0a90 	vmov	r0, s15
 80043b0:	f7fc f8d2 	bl	8000558 <__aeabi_f2d>
 80043b4:	4604      	mov	r4, r0
 80043b6:	460d      	mov	r5, r1
 80043b8:	4b67      	ldr	r3, [pc, #412]	; (8004558 <TrajectoryGenerator+0x800>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fc f8cb 	bl	8000558 <__aeabi_f2d>
 80043c2:	f04f 0200 	mov.w	r2, #0
 80043c6:	4b68      	ldr	r3, [pc, #416]	; (8004568 <TrajectoryGenerator+0x810>)
 80043c8:	f7fc f91e 	bl	8000608 <__aeabi_dmul>
 80043cc:	4602      	mov	r2, r0
 80043ce:	460b      	mov	r3, r1
 80043d0:	4690      	mov	r8, r2
 80043d2:	4699      	mov	r9, r3
 80043d4:	4b5e      	ldr	r3, [pc, #376]	; (8004550 <TrajectoryGenerator+0x7f8>)
 80043d6:	ed93 7a00 	vldr	s14, [r3]
 80043da:	4b5c      	ldr	r3, [pc, #368]	; (800454c <TrajectoryGenerator+0x7f4>)
 80043dc:	edd3 7a00 	vldr	s15, [r3]
 80043e0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80043e4:	ee17 0a90 	vmov	r0, s15
 80043e8:	f7fc f8b6 	bl	8000558 <__aeabi_f2d>
 80043ec:	4602      	mov	r2, r0
 80043ee:	460b      	mov	r3, r1
 80043f0:	4640      	mov	r0, r8
 80043f2:	4649      	mov	r1, r9
 80043f4:	f7fc f908 	bl	8000608 <__aeabi_dmul>
 80043f8:	4602      	mov	r2, r0
 80043fa:	460b      	mov	r3, r1
 80043fc:	4690      	mov	r8, r2
 80043fe:	4699      	mov	r9, r3
 8004400:	4b53      	ldr	r3, [pc, #332]	; (8004550 <TrajectoryGenerator+0x7f8>)
 8004402:	ed93 7a00 	vldr	s14, [r3]
 8004406:	4b51      	ldr	r3, [pc, #324]	; (800454c <TrajectoryGenerator+0x7f4>)
 8004408:	edd3 7a00 	vldr	s15, [r3]
 800440c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004410:	ee17 0a90 	vmov	r0, s15
 8004414:	f7fc f8a0 	bl	8000558 <__aeabi_f2d>
 8004418:	4602      	mov	r2, r0
 800441a:	460b      	mov	r3, r1
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	f7fc f8f2 	bl	8000608 <__aeabi_dmul>
 8004424:	4602      	mov	r2, r0
 8004426:	460b      	mov	r3, r1
 8004428:	4620      	mov	r0, r4
 800442a:	4629      	mov	r1, r5
 800442c:	f7fb ff36 	bl	800029c <__adddf3>
 8004430:	4602      	mov	r2, r0
 8004432:	460b      	mov	r3, r1
 8004434:	4610      	mov	r0, r2
 8004436:	4619      	mov	r1, r3
 8004438:	f7fc fbde 	bl	8000bf8 <__aeabi_d2f>
 800443c:	4603      	mov	r3, r0
 800443e:	4a4b      	ldr	r2, [pc, #300]	; (800456c <TrajectoryGenerator+0x814>)
 8004440:	6013      	str	r3, [r2, #0]

			 qi_1 = setposition;
 8004442:	4b4a      	ldr	r3, [pc, #296]	; (800456c <TrajectoryGenerator+0x814>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	4a4a      	ldr	r2, [pc, #296]	; (8004570 <TrajectoryGenerator+0x818>)
 8004448:	6013      	str	r3, [r2, #0]
			 qdi_1 = setvelocity;
 800444a:	4b45      	ldr	r3, [pc, #276]	; (8004560 <TrajectoryGenerator+0x808>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a49      	ldr	r2, [pc, #292]	; (8004574 <TrajectoryGenerator+0x81c>)
 8004450:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004452:	4b3f      	ldr	r3, [pc, #252]	; (8004550 <TrajectoryGenerator+0x7f8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc f87e 	bl	8000558 <__aeabi_f2d>
 800445c:	a338      	add	r3, pc, #224	; (adr r3, 8004540 <TrajectoryGenerator+0x7e8>)
 800445e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004462:	f7fb ff1b 	bl	800029c <__adddf3>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4610      	mov	r0, r2
 800446c:	4619      	mov	r1, r3
 800446e:	f7fc fbc3 	bl	8000bf8 <__aeabi_d2f>
 8004472:	4603      	mov	r3, r0
 8004474:	4a36      	ldr	r2, [pc, #216]	; (8004550 <TrajectoryGenerator+0x7f8>)
 8004476:	6013      	str	r3, [r2, #0]
			 time += 0.001;
		 }
		 else if(time > tacc+tconst+tdec+initime){
			 setposition = qf;
		 }
		 break;
 8004478:	e18f      	b.n	800479a <TrajectoryGenerator+0xa42>
		 else if(tacc+initime < time && time <= initime+tacc+tconst)
 800447a:	4b33      	ldr	r3, [pc, #204]	; (8004548 <TrajectoryGenerator+0x7f0>)
 800447c:	ed93 7a00 	vldr	s14, [r3]
 8004480:	4b32      	ldr	r3, [pc, #200]	; (800454c <TrajectoryGenerator+0x7f4>)
 8004482:	edd3 7a00 	vldr	s15, [r3]
 8004486:	ee37 7a27 	vadd.f32	s14, s14, s15
 800448a:	4b31      	ldr	r3, [pc, #196]	; (8004550 <TrajectoryGenerator+0x7f8>)
 800448c:	edd3 7a00 	vldr	s15, [r3]
 8004490:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004498:	d576      	bpl.n	8004588 <TrajectoryGenerator+0x830>
 800449a:	4b2c      	ldr	r3, [pc, #176]	; (800454c <TrajectoryGenerator+0x7f4>)
 800449c:	ed93 7a00 	vldr	s14, [r3]
 80044a0:	4b29      	ldr	r3, [pc, #164]	; (8004548 <TrajectoryGenerator+0x7f0>)
 80044a2:	edd3 7a00 	vldr	s15, [r3]
 80044a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044aa:	4b33      	ldr	r3, [pc, #204]	; (8004578 <TrajectoryGenerator+0x820>)
 80044ac:	edd3 7a00 	vldr	s15, [r3]
 80044b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80044b4:	4b26      	ldr	r3, [pc, #152]	; (8004550 <TrajectoryGenerator+0x7f8>)
 80044b6:	edd3 7a00 	vldr	s15, [r3]
 80044ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80044be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044c2:	db61      	blt.n	8004588 <TrajectoryGenerator+0x830>
			 setacc = 0;
 80044c4:	4b24      	ldr	r3, [pc, #144]	; (8004558 <TrajectoryGenerator+0x800>)
 80044c6:	f04f 0200 	mov.w	r2, #0
 80044ca:	601a      	str	r2, [r3, #0]
			 setvelocity = qd_max;
 80044cc:	4b2b      	ldr	r3, [pc, #172]	; (800457c <TrajectoryGenerator+0x824>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a23      	ldr	r2, [pc, #140]	; (8004560 <TrajectoryGenerator+0x808>)
 80044d2:	6013      	str	r3, [r2, #0]
			 setposition = qi_1 + qd_max*(time-initime-tacc);
 80044d4:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <TrajectoryGenerator+0x7f8>)
 80044d6:	ed93 7a00 	vldr	s14, [r3]
 80044da:	4b1c      	ldr	r3, [pc, #112]	; (800454c <TrajectoryGenerator+0x7f4>)
 80044dc:	edd3 7a00 	vldr	s15, [r3]
 80044e0:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044e4:	4b18      	ldr	r3, [pc, #96]	; (8004548 <TrajectoryGenerator+0x7f0>)
 80044e6:	edd3 7a00 	vldr	s15, [r3]
 80044ea:	ee37 7a67 	vsub.f32	s14, s14, s15
 80044ee:	4b23      	ldr	r3, [pc, #140]	; (800457c <TrajectoryGenerator+0x824>)
 80044f0:	edd3 7a00 	vldr	s15, [r3]
 80044f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80044f8:	4b1d      	ldr	r3, [pc, #116]	; (8004570 <TrajectoryGenerator+0x818>)
 80044fa:	edd3 7a00 	vldr	s15, [r3]
 80044fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004502:	4b1a      	ldr	r3, [pc, #104]	; (800456c <TrajectoryGenerator+0x814>)
 8004504:	edc3 7a00 	vstr	s15, [r3]
			 qi_2 = setposition;
 8004508:	4b18      	ldr	r3, [pc, #96]	; (800456c <TrajectoryGenerator+0x814>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1c      	ldr	r2, [pc, #112]	; (8004580 <TrajectoryGenerator+0x828>)
 800450e:	6013      	str	r3, [r2, #0]
			 qdi_2 = setvelocity;
 8004510:	4b13      	ldr	r3, [pc, #76]	; (8004560 <TrajectoryGenerator+0x808>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a1b      	ldr	r2, [pc, #108]	; (8004584 <TrajectoryGenerator+0x82c>)
 8004516:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 8004518:	4b0d      	ldr	r3, [pc, #52]	; (8004550 <TrajectoryGenerator+0x7f8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4618      	mov	r0, r3
 800451e:	f7fc f81b 	bl	8000558 <__aeabi_f2d>
 8004522:	a307      	add	r3, pc, #28	; (adr r3, 8004540 <TrajectoryGenerator+0x7e8>)
 8004524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004528:	f7fb feb8 	bl	800029c <__adddf3>
 800452c:	4602      	mov	r2, r0
 800452e:	460b      	mov	r3, r1
 8004530:	4610      	mov	r0, r2
 8004532:	4619      	mov	r1, r3
 8004534:	f7fc fb60 	bl	8000bf8 <__aeabi_d2f>
 8004538:	4603      	mov	r3, r0
 800453a:	4a05      	ldr	r2, [pc, #20]	; (8004550 <TrajectoryGenerator+0x7f8>)
 800453c:	6013      	str	r3, [r2, #0]
 800453e:	e12a      	b.n	8004796 <TrajectoryGenerator+0xa3e>
 8004540:	d2f1a9fc 	.word	0xd2f1a9fc
 8004544:	3f50624d 	.word	0x3f50624d
 8004548:	20000998 	.word	0x20000998
 800454c:	20000980 	.word	0x20000980
 8004550:	20000970 	.word	0x20000970
 8004554:	20000214 	.word	0x20000214
 8004558:	200009dc 	.word	0x200009dc
 800455c:	2000097c 	.word	0x2000097c
 8004560:	200009d8 	.word	0x200009d8
 8004564:	20000978 	.word	0x20000978
 8004568:	3fe00000 	.word	0x3fe00000
 800456c:	200009b8 	.word	0x200009b8
 8004570:	20000990 	.word	0x20000990
 8004574:	20000988 	.word	0x20000988
 8004578:	200009a4 	.word	0x200009a4
 800457c:	20000210 	.word	0x20000210
 8004580:	20000994 	.word	0x20000994
 8004584:	2000098c 	.word	0x2000098c
		 else if(tacc+tconst+initime < time && time <= tacc+tconst+tdec+initime)
 8004588:	4b87      	ldr	r3, [pc, #540]	; (80047a8 <TrajectoryGenerator+0xa50>)
 800458a:	ed93 7a00 	vldr	s14, [r3]
 800458e:	4b87      	ldr	r3, [pc, #540]	; (80047ac <TrajectoryGenerator+0xa54>)
 8004590:	edd3 7a00 	vldr	s15, [r3]
 8004594:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004598:	4b85      	ldr	r3, [pc, #532]	; (80047b0 <TrajectoryGenerator+0xa58>)
 800459a:	edd3 7a00 	vldr	s15, [r3]
 800459e:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045a2:	4b84      	ldr	r3, [pc, #528]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 80045a4:	edd3 7a00 	vldr	s15, [r3]
 80045a8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045b0:	f140 80d1 	bpl.w	8004756 <TrajectoryGenerator+0x9fe>
 80045b4:	4b7c      	ldr	r3, [pc, #496]	; (80047a8 <TrajectoryGenerator+0xa50>)
 80045b6:	ed93 7a00 	vldr	s14, [r3]
 80045ba:	4b7c      	ldr	r3, [pc, #496]	; (80047ac <TrajectoryGenerator+0xa54>)
 80045bc:	edd3 7a00 	vldr	s15, [r3]
 80045c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045c4:	4b7c      	ldr	r3, [pc, #496]	; (80047b8 <TrajectoryGenerator+0xa60>)
 80045c6:	edd3 7a00 	vldr	s15, [r3]
 80045ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045ce:	4b78      	ldr	r3, [pc, #480]	; (80047b0 <TrajectoryGenerator+0xa58>)
 80045d0:	edd3 7a00 	vldr	s15, [r3]
 80045d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80045d8:	4b76      	ldr	r3, [pc, #472]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 80045da:	edd3 7a00 	vldr	s15, [r3]
 80045de:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80045e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80045e6:	f2c0 80b6 	blt.w	8004756 <TrajectoryGenerator+0x9fe>
			 setacc = -qdd_max;
 80045ea:	4b74      	ldr	r3, [pc, #464]	; (80047bc <TrajectoryGenerator+0xa64>)
 80045ec:	edd3 7a00 	vldr	s15, [r3]
 80045f0:	eef1 7a67 	vneg.f32	s15, s15
 80045f4:	4b72      	ldr	r3, [pc, #456]	; (80047c0 <TrajectoryGenerator+0xa68>)
 80045f6:	edc3 7a00 	vstr	s15, [r3]
			 setvelocity = qdi_2 + setacc*(time-initime-tacc-tconst);
 80045fa:	4b6e      	ldr	r3, [pc, #440]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 80045fc:	ed93 7a00 	vldr	s14, [r3]
 8004600:	4b6b      	ldr	r3, [pc, #428]	; (80047b0 <TrajectoryGenerator+0xa58>)
 8004602:	edd3 7a00 	vldr	s15, [r3]
 8004606:	ee37 7a67 	vsub.f32	s14, s14, s15
 800460a:	4b67      	ldr	r3, [pc, #412]	; (80047a8 <TrajectoryGenerator+0xa50>)
 800460c:	edd3 7a00 	vldr	s15, [r3]
 8004610:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004614:	4b65      	ldr	r3, [pc, #404]	; (80047ac <TrajectoryGenerator+0xa54>)
 8004616:	edd3 7a00 	vldr	s15, [r3]
 800461a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800461e:	4b68      	ldr	r3, [pc, #416]	; (80047c0 <TrajectoryGenerator+0xa68>)
 8004620:	edd3 7a00 	vldr	s15, [r3]
 8004624:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004628:	4b66      	ldr	r3, [pc, #408]	; (80047c4 <TrajectoryGenerator+0xa6c>)
 800462a:	edd3 7a00 	vldr	s15, [r3]
 800462e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004632:	4b65      	ldr	r3, [pc, #404]	; (80047c8 <TrajectoryGenerator+0xa70>)
 8004634:	edc3 7a00 	vstr	s15, [r3]
			 setposition = qi_2 + qdi_2*(time-initime-tacc-tconst)+0.5*setacc*(time-initime-tacc-tconst)*(time-initime-tacc-tconst);
 8004638:	4b5e      	ldr	r3, [pc, #376]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 800463a:	ed93 7a00 	vldr	s14, [r3]
 800463e:	4b5c      	ldr	r3, [pc, #368]	; (80047b0 <TrajectoryGenerator+0xa58>)
 8004640:	edd3 7a00 	vldr	s15, [r3]
 8004644:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004648:	4b57      	ldr	r3, [pc, #348]	; (80047a8 <TrajectoryGenerator+0xa50>)
 800464a:	edd3 7a00 	vldr	s15, [r3]
 800464e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004652:	4b56      	ldr	r3, [pc, #344]	; (80047ac <TrajectoryGenerator+0xa54>)
 8004654:	edd3 7a00 	vldr	s15, [r3]
 8004658:	ee37 7a67 	vsub.f32	s14, s14, s15
 800465c:	4b59      	ldr	r3, [pc, #356]	; (80047c4 <TrajectoryGenerator+0xa6c>)
 800465e:	edd3 7a00 	vldr	s15, [r3]
 8004662:	ee27 7a27 	vmul.f32	s14, s14, s15
 8004666:	4b59      	ldr	r3, [pc, #356]	; (80047cc <TrajectoryGenerator+0xa74>)
 8004668:	edd3 7a00 	vldr	s15, [r3]
 800466c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004670:	ee17 0a90 	vmov	r0, s15
 8004674:	f7fb ff70 	bl	8000558 <__aeabi_f2d>
 8004678:	4604      	mov	r4, r0
 800467a:	460d      	mov	r5, r1
 800467c:	4b50      	ldr	r3, [pc, #320]	; (80047c0 <TrajectoryGenerator+0xa68>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	f7fb ff69 	bl	8000558 <__aeabi_f2d>
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	4b51      	ldr	r3, [pc, #324]	; (80047d0 <TrajectoryGenerator+0xa78>)
 800468c:	f7fb ffbc 	bl	8000608 <__aeabi_dmul>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4690      	mov	r8, r2
 8004696:	4699      	mov	r9, r3
 8004698:	4b46      	ldr	r3, [pc, #280]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 800469a:	ed93 7a00 	vldr	s14, [r3]
 800469e:	4b44      	ldr	r3, [pc, #272]	; (80047b0 <TrajectoryGenerator+0xa58>)
 80046a0:	edd3 7a00 	vldr	s15, [r3]
 80046a4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046a8:	4b3f      	ldr	r3, [pc, #252]	; (80047a8 <TrajectoryGenerator+0xa50>)
 80046aa:	edd3 7a00 	vldr	s15, [r3]
 80046ae:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046b2:	4b3e      	ldr	r3, [pc, #248]	; (80047ac <TrajectoryGenerator+0xa54>)
 80046b4:	edd3 7a00 	vldr	s15, [r3]
 80046b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046bc:	ee17 0a90 	vmov	r0, s15
 80046c0:	f7fb ff4a 	bl	8000558 <__aeabi_f2d>
 80046c4:	4602      	mov	r2, r0
 80046c6:	460b      	mov	r3, r1
 80046c8:	4640      	mov	r0, r8
 80046ca:	4649      	mov	r1, r9
 80046cc:	f7fb ff9c 	bl	8000608 <__aeabi_dmul>
 80046d0:	4602      	mov	r2, r0
 80046d2:	460b      	mov	r3, r1
 80046d4:	4690      	mov	r8, r2
 80046d6:	4699      	mov	r9, r3
 80046d8:	4b36      	ldr	r3, [pc, #216]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 80046da:	ed93 7a00 	vldr	s14, [r3]
 80046de:	4b34      	ldr	r3, [pc, #208]	; (80047b0 <TrajectoryGenerator+0xa58>)
 80046e0:	edd3 7a00 	vldr	s15, [r3]
 80046e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046e8:	4b2f      	ldr	r3, [pc, #188]	; (80047a8 <TrajectoryGenerator+0xa50>)
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee37 7a67 	vsub.f32	s14, s14, s15
 80046f2:	4b2e      	ldr	r3, [pc, #184]	; (80047ac <TrajectoryGenerator+0xa54>)
 80046f4:	edd3 7a00 	vldr	s15, [r3]
 80046f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046fc:	ee17 0a90 	vmov	r0, s15
 8004700:	f7fb ff2a 	bl	8000558 <__aeabi_f2d>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4640      	mov	r0, r8
 800470a:	4649      	mov	r1, r9
 800470c:	f7fb ff7c 	bl	8000608 <__aeabi_dmul>
 8004710:	4602      	mov	r2, r0
 8004712:	460b      	mov	r3, r1
 8004714:	4620      	mov	r0, r4
 8004716:	4629      	mov	r1, r5
 8004718:	f7fb fdc0 	bl	800029c <__adddf3>
 800471c:	4602      	mov	r2, r0
 800471e:	460b      	mov	r3, r1
 8004720:	4610      	mov	r0, r2
 8004722:	4619      	mov	r1, r3
 8004724:	f7fc fa68 	bl	8000bf8 <__aeabi_d2f>
 8004728:	4603      	mov	r3, r0
 800472a:	4a2a      	ldr	r2, [pc, #168]	; (80047d4 <TrajectoryGenerator+0xa7c>)
 800472c:	6013      	str	r3, [r2, #0]
			 time += 0.001;
 800472e:	4b21      	ldr	r3, [pc, #132]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4618      	mov	r0, r3
 8004734:	f7fb ff10 	bl	8000558 <__aeabi_f2d>
 8004738:	a319      	add	r3, pc, #100	; (adr r3, 80047a0 <TrajectoryGenerator+0xa48>)
 800473a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473e:	f7fb fdad 	bl	800029c <__adddf3>
 8004742:	4602      	mov	r2, r0
 8004744:	460b      	mov	r3, r1
 8004746:	4610      	mov	r0, r2
 8004748:	4619      	mov	r1, r3
 800474a:	f7fc fa55 	bl	8000bf8 <__aeabi_d2f>
 800474e:	4603      	mov	r3, r0
 8004750:	4a18      	ldr	r2, [pc, #96]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	e01f      	b.n	8004796 <TrajectoryGenerator+0xa3e>
		 else if(time > tacc+tconst+tdec+initime){
 8004756:	4b14      	ldr	r3, [pc, #80]	; (80047a8 <TrajectoryGenerator+0xa50>)
 8004758:	ed93 7a00 	vldr	s14, [r3]
 800475c:	4b13      	ldr	r3, [pc, #76]	; (80047ac <TrajectoryGenerator+0xa54>)
 800475e:	edd3 7a00 	vldr	s15, [r3]
 8004762:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004766:	4b14      	ldr	r3, [pc, #80]	; (80047b8 <TrajectoryGenerator+0xa60>)
 8004768:	edd3 7a00 	vldr	s15, [r3]
 800476c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8004770:	4b0f      	ldr	r3, [pc, #60]	; (80047b0 <TrajectoryGenerator+0xa58>)
 8004772:	edd3 7a00 	vldr	s15, [r3]
 8004776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800477a:	4b0e      	ldr	r3, [pc, #56]	; (80047b4 <TrajectoryGenerator+0xa5c>)
 800477c:	edd3 7a00 	vldr	s15, [r3]
 8004780:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004784:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004788:	d400      	bmi.n	800478c <TrajectoryGenerator+0xa34>
		 break;
 800478a:	e006      	b.n	800479a <TrajectoryGenerator+0xa42>
			 setposition = qf;
 800478c:	4b12      	ldr	r3, [pc, #72]	; (80047d8 <TrajectoryGenerator+0xa80>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a10      	ldr	r2, [pc, #64]	; (80047d4 <TrajectoryGenerator+0xa7c>)
 8004792:	6013      	str	r3, [r2, #0]
		 break;
 8004794:	e001      	b.n	800479a <TrajectoryGenerator+0xa42>
 8004796:	e000      	b.n	800479a <TrajectoryGenerator+0xa42>
	case 3: // wait state
//		setposition = position;
		break;
 8004798:	bf00      	nop
	}

}
 800479a:	bf00      	nop
 800479c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80047a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80047a4:	3f50624d 	.word	0x3f50624d
 80047a8:	20000998 	.word	0x20000998
 80047ac:	200009a4 	.word	0x200009a4
 80047b0:	20000980 	.word	0x20000980
 80047b4:	20000970 	.word	0x20000970
 80047b8:	200009a8 	.word	0x200009a8
 80047bc:	20000214 	.word	0x20000214
 80047c0:	200009dc 	.word	0x200009dc
 80047c4:	2000098c 	.word	0x2000098c
 80047c8:	200009d8 	.word	0x200009d8
 80047cc:	20000994 	.word	0x20000994
 80047d0:	3fe00000 	.word	0x3fe00000
 80047d4:	200009b8 	.word	0x200009b8
 80047d8:	20000974 	.word	0x20000974

080047dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80047e0:	b672      	cpsid	i
}
 80047e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80047e4:	e7fe      	b.n	80047e4 <Error_Handler+0x8>
	...

080047e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047ee:	2300      	movs	r3, #0
 80047f0:	607b      	str	r3, [r7, #4]
 80047f2:	4b10      	ldr	r3, [pc, #64]	; (8004834 <HAL_MspInit+0x4c>)
 80047f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047f6:	4a0f      	ldr	r2, [pc, #60]	; (8004834 <HAL_MspInit+0x4c>)
 80047f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047fc:	6453      	str	r3, [r2, #68]	; 0x44
 80047fe:	4b0d      	ldr	r3, [pc, #52]	; (8004834 <HAL_MspInit+0x4c>)
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004806:	607b      	str	r3, [r7, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800480a:	2300      	movs	r3, #0
 800480c:	603b      	str	r3, [r7, #0]
 800480e:	4b09      	ldr	r3, [pc, #36]	; (8004834 <HAL_MspInit+0x4c>)
 8004810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004812:	4a08      	ldr	r2, [pc, #32]	; (8004834 <HAL_MspInit+0x4c>)
 8004814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004818:	6413      	str	r3, [r2, #64]	; 0x40
 800481a:	4b06      	ldr	r3, [pc, #24]	; (8004834 <HAL_MspInit+0x4c>)
 800481c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004822:	603b      	str	r3, [r7, #0]
 8004824:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8004826:	2007      	movs	r0, #7
 8004828:	f001 f9ae 	bl	8005b88 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800482c:	bf00      	nop
 800482e:	3708      	adds	r7, #8
 8004830:	46bd      	mov	sp, r7
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800

08004838 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b08a      	sub	sp, #40	; 0x28
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004840:	f107 0314 	add.w	r3, r7, #20
 8004844:	2200      	movs	r2, #0
 8004846:	601a      	str	r2, [r3, #0]
 8004848:	605a      	str	r2, [r3, #4]
 800484a:	609a      	str	r2, [r3, #8]
 800484c:	60da      	str	r2, [r3, #12]
 800484e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	4a2f      	ldr	r2, [pc, #188]	; (8004914 <HAL_ADC_MspInit+0xdc>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d157      	bne.n	800490a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800485a:	2300      	movs	r3, #0
 800485c:	613b      	str	r3, [r7, #16]
 800485e:	4b2e      	ldr	r3, [pc, #184]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 8004860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004862:	4a2d      	ldr	r2, [pc, #180]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 8004864:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004868:	6453      	str	r3, [r2, #68]	; 0x44
 800486a:	4b2b      	ldr	r3, [pc, #172]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 800486c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800486e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004872:	613b      	str	r3, [r7, #16]
 8004874:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004876:	2300      	movs	r3, #0
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	4b27      	ldr	r3, [pc, #156]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800487e:	4a26      	ldr	r2, [pc, #152]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 8004880:	f043 0301 	orr.w	r3, r3, #1
 8004884:	6313      	str	r3, [r2, #48]	; 0x30
 8004886:	4b24      	ldr	r3, [pc, #144]	; (8004918 <HAL_ADC_MspInit+0xe0>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488a:	f003 0301 	and.w	r3, r3, #1
 800488e:	60fb      	str	r3, [r7, #12]
 8004890:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8004892:	2303      	movs	r3, #3
 8004894:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004896:	2303      	movs	r3, #3
 8004898:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800489a:	2300      	movs	r3, #0
 800489c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800489e:	f107 0314 	add.w	r3, r7, #20
 80048a2:	4619      	mov	r1, r3
 80048a4:	481d      	ldr	r0, [pc, #116]	; (800491c <HAL_ADC_MspInit+0xe4>)
 80048a6:	f001 fdcd 	bl	8006444 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80048aa:	4b1d      	ldr	r3, [pc, #116]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048ac:	4a1d      	ldr	r2, [pc, #116]	; (8004924 <HAL_ADC_MspInit+0xec>)
 80048ae:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80048b0:	4b1b      	ldr	r3, [pc, #108]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048b2:	2200      	movs	r2, #0
 80048b4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80048b6:	4b1a      	ldr	r3, [pc, #104]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048b8:	2200      	movs	r2, #0
 80048ba:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80048bc:	4b18      	ldr	r3, [pc, #96]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048be:	2200      	movs	r2, #0
 80048c0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80048c2:	4b17      	ldr	r3, [pc, #92]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80048c8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048ca:	4b15      	ldr	r3, [pc, #84]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048cc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80048d0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80048d2:	4b13      	ldr	r3, [pc, #76]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048d4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80048d8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80048da:	4b11      	ldr	r3, [pc, #68]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048e0:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80048e2:	4b0f      	ldr	r3, [pc, #60]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048e4:	2200      	movs	r2, #0
 80048e6:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80048e8:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048ea:	2200      	movs	r2, #0
 80048ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80048ee:	480c      	ldr	r0, [pc, #48]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 80048f0:	f001 f98c 	bl	8005c0c <HAL_DMA_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80048fa:	f7ff ff6f 	bl	80047dc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	4a07      	ldr	r2, [pc, #28]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 8004902:	639a      	str	r2, [r3, #56]	; 0x38
 8004904:	4a06      	ldr	r2, [pc, #24]	; (8004920 <HAL_ADC_MspInit+0xe8>)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800490a:	bf00      	nop
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	40012000 	.word	0x40012000
 8004918:	40023800 	.word	0x40023800
 800491c:	40020000 	.word	0x40020000
 8004920:	20000498 	.word	0x20000498
 8004924:	40026410 	.word	0x40026410

08004928 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b08a      	sub	sp, #40	; 0x28
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004930:	f107 0314 	add.w	r3, r7, #20
 8004934:	2200      	movs	r2, #0
 8004936:	601a      	str	r2, [r3, #0]
 8004938:	605a      	str	r2, [r3, #4]
 800493a:	609a      	str	r2, [r3, #8]
 800493c:	60da      	str	r2, [r3, #12]
 800493e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a21      	ldr	r2, [pc, #132]	; (80049cc <HAL_I2C_MspInit+0xa4>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d13c      	bne.n	80049c4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800494a:	2300      	movs	r3, #0
 800494c:	613b      	str	r3, [r7, #16]
 800494e:	4b20      	ldr	r3, [pc, #128]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 8004950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004952:	4a1f      	ldr	r2, [pc, #124]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	6313      	str	r3, [r2, #48]	; 0x30
 800495a:	4b1d      	ldr	r3, [pc, #116]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 800495c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800495e:	f003 0302 	and.w	r3, r3, #2
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004966:	f44f 7340 	mov.w	r3, #768	; 0x300
 800496a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800496c:	2312      	movs	r3, #18
 800496e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004970:	2300      	movs	r3, #0
 8004972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004974:	2303      	movs	r3, #3
 8004976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004978:	2304      	movs	r3, #4
 800497a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800497c:	f107 0314 	add.w	r3, r7, #20
 8004980:	4619      	mov	r1, r3
 8004982:	4814      	ldr	r0, [pc, #80]	; (80049d4 <HAL_I2C_MspInit+0xac>)
 8004984:	f001 fd5e 	bl	8006444 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
 800498c:	4b10      	ldr	r3, [pc, #64]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	4a0f      	ldr	r2, [pc, #60]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 8004992:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004996:	6413      	str	r3, [r2, #64]	; 0x40
 8004998:	4b0d      	ldr	r3, [pc, #52]	; (80049d0 <HAL_I2C_MspInit+0xa8>)
 800499a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800499c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049a0:	60fb      	str	r3, [r7, #12]
 80049a2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80049a4:	2200      	movs	r2, #0
 80049a6:	2100      	movs	r1, #0
 80049a8:	201f      	movs	r0, #31
 80049aa:	f001 f8f8 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80049ae:	201f      	movs	r0, #31
 80049b0:	f001 f911 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80049b4:	2200      	movs	r2, #0
 80049b6:	2100      	movs	r1, #0
 80049b8:	2020      	movs	r0, #32
 80049ba:	f001 f8f0 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80049be:	2020      	movs	r0, #32
 80049c0:	f001 f909 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80049c4:	bf00      	nop
 80049c6:	3728      	adds	r7, #40	; 0x28
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	40005400 	.word	0x40005400
 80049d0:	40023800 	.word	0x40023800
 80049d4:	40020400 	.word	0x40020400

080049d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	b084      	sub	sp, #16
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a12      	ldr	r2, [pc, #72]	; (8004a30 <HAL_TIM_PWM_MspInit+0x58>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d11d      	bne.n	8004a26 <HAL_TIM_PWM_MspInit+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80049ea:	2300      	movs	r3, #0
 80049ec:	60fb      	str	r3, [r7, #12]
 80049ee:	4b11      	ldr	r3, [pc, #68]	; (8004a34 <HAL_TIM_PWM_MspInit+0x5c>)
 80049f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049f2:	4a10      	ldr	r2, [pc, #64]	; (8004a34 <HAL_TIM_PWM_MspInit+0x5c>)
 80049f4:	f043 0301 	orr.w	r3, r3, #1
 80049f8:	6453      	str	r3, [r2, #68]	; 0x44
 80049fa:	4b0e      	ldr	r3, [pc, #56]	; (8004a34 <HAL_TIM_PWM_MspInit+0x5c>)
 80049fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049fe:	f003 0301 	and.w	r3, r3, #1
 8004a02:	60fb      	str	r3, [r7, #12]
 8004a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004a06:	2205      	movs	r2, #5
 8004a08:	2100      	movs	r1, #0
 8004a0a:	2018      	movs	r0, #24
 8004a0c:	f001 f8c7 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004a10:	2018      	movs	r0, #24
 8004a12:	f001 f8e0 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004a16:	2200      	movs	r2, #0
 8004a18:	2100      	movs	r1, #0
 8004a1a:	201a      	movs	r0, #26
 8004a1c:	f001 f8bf 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004a20:	201a      	movs	r0, #26
 8004a22:	f001 f8d8 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	40010000 	.word	0x40010000
 8004a34:	40023800 	.word	0x40023800

08004a38 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b08a      	sub	sp, #40	; 0x28
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a40:	f107 0314 	add.w	r3, r7, #20
 8004a44:	2200      	movs	r2, #0
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	605a      	str	r2, [r3, #4]
 8004a4a:	609a      	str	r2, [r3, #8]
 8004a4c:	60da      	str	r2, [r3, #12]
 8004a4e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a19      	ldr	r2, [pc, #100]	; (8004abc <HAL_TIM_Encoder_MspInit+0x84>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d12b      	bne.n	8004ab2 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	613b      	str	r3, [r7, #16]
 8004a5e:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	4a17      	ldr	r2, [pc, #92]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a64:	f043 0302 	orr.w	r3, r3, #2
 8004a68:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6a:	4b15      	ldr	r3, [pc, #84]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6e:	f003 0302 	and.w	r3, r3, #2
 8004a72:	613b      	str	r3, [r7, #16]
 8004a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a76:	2300      	movs	r3, #0
 8004a78:	60fb      	str	r3, [r7, #12]
 8004a7a:	4b11      	ldr	r3, [pc, #68]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a7e:	4a10      	ldr	r2, [pc, #64]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a80:	f043 0301 	orr.w	r3, r3, #1
 8004a84:	6313      	str	r3, [r2, #48]	; 0x30
 8004a86:	4b0e      	ldr	r3, [pc, #56]	; (8004ac0 <HAL_TIM_Encoder_MspInit+0x88>)
 8004a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004a92:	23c0      	movs	r3, #192	; 0xc0
 8004a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a96:	2302      	movs	r3, #2
 8004a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004aa6:	f107 0314 	add.w	r3, r7, #20
 8004aaa:	4619      	mov	r1, r3
 8004aac:	4805      	ldr	r0, [pc, #20]	; (8004ac4 <HAL_TIM_Encoder_MspInit+0x8c>)
 8004aae:	f001 fcc9 	bl	8006444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8004ab2:	bf00      	nop
 8004ab4:	3728      	adds	r7, #40	; 0x28
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	bd80      	pop	{r7, pc}
 8004aba:	bf00      	nop
 8004abc:	40000400 	.word	0x40000400
 8004ac0:	40023800 	.word	0x40023800
 8004ac4:	40020000 	.word	0x40020000

08004ac8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM9)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4a1c      	ldr	r2, [pc, #112]	; (8004b48 <HAL_TIM_Base_MspInit+0x80>)
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	d116      	bne.n	8004b08 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM9_MspInit 0 */

  /* USER CODE END TIM9_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]
 8004ade:	4b1b      	ldr	r3, [pc, #108]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ae2:	4a1a      	ldr	r2, [pc, #104]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ae8:	6453      	str	r3, [r2, #68]	; 0x44
 8004aea:	4b18      	ldr	r3, [pc, #96]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004aec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af2:	60fb      	str	r3, [r7, #12]
 8004af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM9 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 5);
 8004af6:	2205      	movs	r2, #5
 8004af8:	2100      	movs	r1, #0
 8004afa:	2018      	movs	r0, #24
 8004afc:	f001 f84f 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8004b00:	2018      	movs	r0, #24
 8004b02:	f001 f868 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004b06:	e01a      	b.n	8004b3e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM11)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a10      	ldr	r2, [pc, #64]	; (8004b50 <HAL_TIM_Base_MspInit+0x88>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d115      	bne.n	8004b3e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8004b12:	2300      	movs	r3, #0
 8004b14:	60bb      	str	r3, [r7, #8]
 8004b16:	4b0d      	ldr	r3, [pc, #52]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b1a:	4a0c      	ldr	r2, [pc, #48]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b20:	6453      	str	r3, [r2, #68]	; 0x44
 8004b22:	4b0a      	ldr	r3, [pc, #40]	; (8004b4c <HAL_TIM_Base_MspInit+0x84>)
 8004b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8004b2e:	2200      	movs	r2, #0
 8004b30:	2100      	movs	r1, #0
 8004b32:	201a      	movs	r0, #26
 8004b34:	f001 f833 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8004b38:	201a      	movs	r0, #26
 8004b3a:	f001 f84c 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
}
 8004b3e:	bf00      	nop
 8004b40:	3710      	adds	r7, #16
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	40014800 	.word	0x40014800

08004b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004b54:	b580      	push	{r7, lr}
 8004b56:	b088      	sub	sp, #32
 8004b58:	af00      	add	r7, sp, #0
 8004b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004b5c:	f107 030c 	add.w	r3, r7, #12
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]
 8004b64:	605a      	str	r2, [r3, #4]
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	60da      	str	r2, [r3, #12]
 8004b6a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a12      	ldr	r2, [pc, #72]	; (8004bbc <HAL_TIM_MspPostInit+0x68>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d11e      	bne.n	8004bb4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b76:	2300      	movs	r3, #0
 8004b78:	60bb      	str	r3, [r7, #8]
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	4a10      	ldr	r2, [pc, #64]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b80:	f043 0301 	orr.w	r3, r3, #1
 8004b84:	6313      	str	r3, [r2, #48]	; 0x30
 8004b86:	4b0e      	ldr	r3, [pc, #56]	; (8004bc0 <HAL_TIM_MspPostInit+0x6c>)
 8004b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b8a:	f003 0301 	and.w	r3, r3, #1
 8004b8e:	60bb      	str	r3, [r7, #8]
 8004b90:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004b96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b98:	2302      	movs	r3, #2
 8004b9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ba8:	f107 030c 	add.w	r3, r7, #12
 8004bac:	4619      	mov	r1, r3
 8004bae:	4805      	ldr	r0, [pc, #20]	; (8004bc4 <HAL_TIM_MspPostInit+0x70>)
 8004bb0:	f001 fc48 	bl	8006444 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004bb4:	bf00      	nop
 8004bb6:	3720      	adds	r7, #32
 8004bb8:	46bd      	mov	sp, r7
 8004bba:	bd80      	pop	{r7, pc}
 8004bbc:	40010000 	.word	0x40010000
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40020000 	.word	0x40020000

08004bc8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08c      	sub	sp, #48	; 0x30
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bd0:	f107 031c 	add.w	r3, r7, #28
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	605a      	str	r2, [r3, #4]
 8004bda:	609a      	str	r2, [r3, #8]
 8004bdc:	60da      	str	r2, [r3, #12]
 8004bde:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a60      	ldr	r2, [pc, #384]	; (8004d68 <HAL_UART_MspInit+0x1a0>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d153      	bne.n	8004c92 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004bea:	2300      	movs	r3, #0
 8004bec:	61bb      	str	r3, [r7, #24]
 8004bee:	4b5f      	ldr	r3, [pc, #380]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bf2:	4a5e      	ldr	r2, [pc, #376]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004bf4:	f043 0310 	orr.w	r3, r3, #16
 8004bf8:	6453      	str	r3, [r2, #68]	; 0x44
 8004bfa:	4b5c      	ldr	r3, [pc, #368]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfe:	f003 0310 	and.w	r3, r3, #16
 8004c02:	61bb      	str	r3, [r7, #24]
 8004c04:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	617b      	str	r3, [r7, #20]
 8004c0a:	4b58      	ldr	r3, [pc, #352]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0e:	4a57      	ldr	r2, [pc, #348]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c10:	f043 0301 	orr.w	r3, r3, #1
 8004c14:	6313      	str	r3, [r2, #48]	; 0x30
 8004c16:	4b55      	ldr	r3, [pc, #340]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1a:	f003 0301 	and.w	r3, r3, #1
 8004c1e:	617b      	str	r3, [r7, #20]
 8004c20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	4b51      	ldr	r3, [pc, #324]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2a:	4a50      	ldr	r2, [pc, #320]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c2c:	f043 0302 	orr.w	r3, r3, #2
 8004c30:	6313      	str	r3, [r2, #48]	; 0x30
 8004c32:	4b4e      	ldr	r3, [pc, #312]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c36:	f003 0302 	and.w	r3, r3, #2
 8004c3a:	613b      	str	r3, [r7, #16]
 8004c3c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004c3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c44:	2302      	movs	r3, #2
 8004c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c50:	2307      	movs	r3, #7
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c54:	f107 031c 	add.w	r3, r7, #28
 8004c58:	4619      	mov	r1, r3
 8004c5a:	4845      	ldr	r0, [pc, #276]	; (8004d70 <HAL_UART_MspInit+0x1a8>)
 8004c5c:	f001 fbf2 	bl	8006444 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8004c60:	2380      	movs	r3, #128	; 0x80
 8004c62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c64:	2302      	movs	r3, #2
 8004c66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004c6c:	2303      	movs	r3, #3
 8004c6e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004c70:	2307      	movs	r3, #7
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004c74:	f107 031c 	add.w	r3, r7, #28
 8004c78:	4619      	mov	r1, r3
 8004c7a:	483e      	ldr	r0, [pc, #248]	; (8004d74 <HAL_UART_MspInit+0x1ac>)
 8004c7c:	f001 fbe2 	bl	8006444 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8004c80:	2200      	movs	r2, #0
 8004c82:	2100      	movs	r1, #0
 8004c84:	2025      	movs	r0, #37	; 0x25
 8004c86:	f000 ff8a 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004c8a:	2025      	movs	r0, #37	; 0x25
 8004c8c:	f000 ffa3 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004c90:	e066      	b.n	8004d60 <HAL_UART_MspInit+0x198>
  else if(huart->Instance==USART2)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a38      	ldr	r2, [pc, #224]	; (8004d78 <HAL_UART_MspInit+0x1b0>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d161      	bne.n	8004d60 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	4b32      	ldr	r3, [pc, #200]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca4:	4a31      	ldr	r2, [pc, #196]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004caa:	6413      	str	r3, [r2, #64]	; 0x40
 8004cac:	4b2f      	ldr	r3, [pc, #188]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004cae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cb0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cb4:	60fb      	str	r3, [r7, #12]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	2300      	movs	r3, #0
 8004cba:	60bb      	str	r3, [r7, #8]
 8004cbc:	4b2b      	ldr	r3, [pc, #172]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	4a2a      	ldr	r2, [pc, #168]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004cc2:	f043 0301 	orr.w	r3, r3, #1
 8004cc6:	6313      	str	r3, [r2, #48]	; 0x30
 8004cc8:	4b28      	ldr	r3, [pc, #160]	; (8004d6c <HAL_UART_MspInit+0x1a4>)
 8004cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ccc:	f003 0301 	and.w	r3, r3, #1
 8004cd0:	60bb      	str	r3, [r7, #8]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004cd4:	230c      	movs	r3, #12
 8004cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004cd8:	2302      	movs	r3, #2
 8004cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cdc:	2300      	movs	r3, #0
 8004cde:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ce0:	2303      	movs	r3, #3
 8004ce2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004ce4:	2307      	movs	r3, #7
 8004ce6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ce8:	f107 031c 	add.w	r3, r7, #28
 8004cec:	4619      	mov	r1, r3
 8004cee:	4820      	ldr	r0, [pc, #128]	; (8004d70 <HAL_UART_MspInit+0x1a8>)
 8004cf0:	f001 fba8 	bl	8006444 <HAL_GPIO_Init>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8004cf4:	4b21      	ldr	r3, [pc, #132]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004cf6:	4a22      	ldr	r2, [pc, #136]	; (8004d80 <HAL_UART_MspInit+0x1b8>)
 8004cf8:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004cfa:	4b20      	ldr	r3, [pc, #128]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004d00:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d02:	4b1e      	ldr	r3, [pc, #120]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d04:	2240      	movs	r2, #64	; 0x40
 8004d06:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d08:	4b1c      	ldr	r3, [pc, #112]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004d0e:	4b1b      	ldr	r3, [pc, #108]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d10:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d14:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004d16:	4b19      	ldr	r3, [pc, #100]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004d1c:	4b17      	ldr	r3, [pc, #92]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d1e:	2200      	movs	r2, #0
 8004d20:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8004d22:	4b16      	ldr	r3, [pc, #88]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d24:	2200      	movs	r2, #0
 8004d26:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004d28:	4b14      	ldr	r3, [pc, #80]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004d2e:	4b13      	ldr	r3, [pc, #76]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d30:	2200      	movs	r2, #0
 8004d32:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004d34:	4811      	ldr	r0, [pc, #68]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d36:	f000 ff69 	bl	8005c0c <HAL_DMA_Init>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d001      	beq.n	8004d44 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8004d40:	f7ff fd4c 	bl	80047dc <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	4a0d      	ldr	r2, [pc, #52]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d48:	635a      	str	r2, [r3, #52]	; 0x34
 8004d4a:	4a0c      	ldr	r2, [pc, #48]	; (8004d7c <HAL_UART_MspInit+0x1b4>)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8004d50:	2200      	movs	r2, #0
 8004d52:	2100      	movs	r1, #0
 8004d54:	2026      	movs	r0, #38	; 0x26
 8004d56:	f000 ff22 	bl	8005b9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004d5a:	2026      	movs	r0, #38	; 0x26
 8004d5c:	f000 ff3b 	bl	8005bd6 <HAL_NVIC_EnableIRQ>
}
 8004d60:	bf00      	nop
 8004d62:	3730      	adds	r7, #48	; 0x30
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	40011000 	.word	0x40011000
 8004d6c:	40023800 	.word	0x40023800
 8004d70:	40020000 	.word	0x40020000
 8004d74:	40020400 	.word	0x40020400
 8004d78:	40004400 	.word	0x40004400
 8004d7c:	20000904 	.word	0x20000904
 8004d80:	400260a0 	.word	0x400260a0

08004d84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004d84:	b480      	push	{r7}
 8004d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004d88:	e7fe      	b.n	8004d88 <NMI_Handler+0x4>

08004d8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004d8e:	e7fe      	b.n	8004d8e <HardFault_Handler+0x4>

08004d90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004d90:	b480      	push	{r7}
 8004d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004d94:	e7fe      	b.n	8004d94 <MemManage_Handler+0x4>

08004d96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004d96:	b480      	push	{r7}
 8004d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004d9a:	e7fe      	b.n	8004d9a <BusFault_Handler+0x4>

08004d9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004da0:	e7fe      	b.n	8004da0 <UsageFault_Handler+0x4>

08004da2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004da2:	b480      	push	{r7}
 8004da4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004da6:	bf00      	nop
 8004da8:	46bd      	mov	sp, r7
 8004daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dae:	4770      	bx	lr

08004db0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004db0:	b480      	push	{r7}
 8004db2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004db4:	bf00      	nop
 8004db6:	46bd      	mov	sp, r7
 8004db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbc:	4770      	bx	lr

08004dbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004dc2:	bf00      	nop
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004dd0:	f000 f9c4 	bl	800515c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004dd4:	bf00      	nop
 8004dd6:	bd80      	pop	{r7, pc}

08004dd8 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8004dd8:	b580      	push	{r7, lr}
 8004dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8004ddc:	2004      	movs	r0, #4
 8004dde:	f001 fce7 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8004de2:	bf00      	nop
 8004de4:	bd80      	pop	{r7, pc}

08004de6 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8004de6:	b580      	push	{r7, lr}
 8004de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8004dea:	2008      	movs	r0, #8
 8004dec:	f001 fce0 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8004df0:	bf00      	nop
 8004df2:	bd80      	pop	{r7, pc}

08004df4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8004df8:	4802      	ldr	r0, [pc, #8]	; (8004e04 <DMA1_Stream6_IRQHandler+0x10>)
 8004dfa:	f001 f89f 	bl	8005f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8004dfe:	bf00      	nop
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	20000904 	.word	0x20000904

08004e08 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e0c:	4803      	ldr	r0, [pc, #12]	; (8004e1c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8004e0e:	f005 f81d 	bl	8009e4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8004e12:	4803      	ldr	r0, [pc, #12]	; (8004e20 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8004e14:	f005 f81a 	bl	8009e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8004e18:	bf00      	nop
 8004e1a:	bd80      	pop	{r7, pc}
 8004e1c:	2000054c 	.word	0x2000054c
 8004e20:	200006b4 	.word	0x200006b4

08004e24 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004e28:	4803      	ldr	r0, [pc, #12]	; (8004e38 <TIM1_TRG_COM_TIM11_IRQHandler+0x14>)
 8004e2a:	f005 f80f 	bl	8009e4c <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim11);
 8004e2e:	4803      	ldr	r0, [pc, #12]	; (8004e3c <TIM1_TRG_COM_TIM11_IRQHandler+0x18>)
 8004e30:	f005 f80c 	bl	8009e4c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8004e34:	bf00      	nop
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	2000054c 	.word	0x2000054c
 8004e3c:	20000768 	.word	0x20000768

08004e40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8004e44:	4802      	ldr	r0, [pc, #8]	; (8004e50 <I2C1_EV_IRQHandler+0x10>)
 8004e46:	f001 ffbb 	bl	8006dc0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8004e4a:	bf00      	nop
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	bf00      	nop
 8004e50:	200004f8 	.word	0x200004f8

08004e54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8004e58:	4802      	ldr	r0, [pc, #8]	; (8004e64 <I2C1_ER_IRQHandler+0x10>)
 8004e5a:	f002 f922 	bl	80070a2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8004e5e:	bf00      	nop
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200004f8 	.word	0x200004f8

08004e68 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004e6c:	4802      	ldr	r0, [pc, #8]	; (8004e78 <USART1_IRQHandler+0x10>)
 8004e6e:	f006 fb3b 	bl	800b4e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004e72:	bf00      	nop
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	bf00      	nop
 8004e78:	2000081c 	.word	0x2000081c

08004e7c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004e80:	4802      	ldr	r0, [pc, #8]	; (8004e8c <USART2_IRQHandler+0x10>)
 8004e82:	f006 fb31 	bl	800b4e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004e86:	bf00      	nop
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	20000890 	.word	0x20000890

08004e90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 8004e94:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8004e98:	f001 fc8a 	bl	80067b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8004e9c:	bf00      	nop
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8004ea4:	4802      	ldr	r0, [pc, #8]	; (8004eb0 <DMA2_Stream0_IRQHandler+0x10>)
 8004ea6:	f001 f849 	bl	8005f3c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8004eaa:	bf00      	nop
 8004eac:	bd80      	pop	{r7, pc}
 8004eae:	bf00      	nop
 8004eb0:	20000498 	.word	0x20000498

08004eb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	af00      	add	r7, sp, #0
  return 1;
 8004eb8:	2301      	movs	r3, #1
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec2:	4770      	bx	lr

08004ec4 <_kill>:

int _kill(int pid, int sig)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b082      	sub	sp, #8
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004ece:	f007 fb51 	bl	800c574 <__errno>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2216      	movs	r2, #22
 8004ed6:	601a      	str	r2, [r3, #0]
  return -1;
 8004ed8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3708      	adds	r7, #8
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	bd80      	pop	{r7, pc}

08004ee4 <_exit>:

void _exit (int status)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b082      	sub	sp, #8
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004eec:	f04f 31ff 	mov.w	r1, #4294967295
 8004ef0:	6878      	ldr	r0, [r7, #4]
 8004ef2:	f7ff ffe7 	bl	8004ec4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004ef6:	e7fe      	b.n	8004ef6 <_exit+0x12>

08004ef8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b086      	sub	sp, #24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	60f8      	str	r0, [r7, #12]
 8004f00:	60b9      	str	r1, [r7, #8]
 8004f02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f04:	2300      	movs	r3, #0
 8004f06:	617b      	str	r3, [r7, #20]
 8004f08:	e00a      	b.n	8004f20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004f0a:	f3af 8000 	nop.w
 8004f0e:	4601      	mov	r1, r0
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	1c5a      	adds	r2, r3, #1
 8004f14:	60ba      	str	r2, [r7, #8]
 8004f16:	b2ca      	uxtb	r2, r1
 8004f18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	3301      	adds	r3, #1
 8004f1e:	617b      	str	r3, [r7, #20]
 8004f20:	697a      	ldr	r2, [r7, #20]
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	429a      	cmp	r2, r3
 8004f26:	dbf0      	blt.n	8004f0a <_read+0x12>
  }

  return len;
 8004f28:	687b      	ldr	r3, [r7, #4]
}
 8004f2a:	4618      	mov	r0, r3
 8004f2c:	3718      	adds	r7, #24
 8004f2e:	46bd      	mov	sp, r7
 8004f30:	bd80      	pop	{r7, pc}

08004f32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004f32:	b580      	push	{r7, lr}
 8004f34:	b086      	sub	sp, #24
 8004f36:	af00      	add	r7, sp, #0
 8004f38:	60f8      	str	r0, [r7, #12]
 8004f3a:	60b9      	str	r1, [r7, #8]
 8004f3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f3e:	2300      	movs	r3, #0
 8004f40:	617b      	str	r3, [r7, #20]
 8004f42:	e009      	b.n	8004f58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	1c5a      	adds	r2, r3, #1
 8004f48:	60ba      	str	r2, [r7, #8]
 8004f4a:	781b      	ldrb	r3, [r3, #0]
 8004f4c:	4618      	mov	r0, r3
 8004f4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	3301      	adds	r3, #1
 8004f56:	617b      	str	r3, [r7, #20]
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	429a      	cmp	r2, r3
 8004f5e:	dbf1      	blt.n	8004f44 <_write+0x12>
  }
  return len;
 8004f60:	687b      	ldr	r3, [r7, #4]
}
 8004f62:	4618      	mov	r0, r3
 8004f64:	3718      	adds	r7, #24
 8004f66:	46bd      	mov	sp, r7
 8004f68:	bd80      	pop	{r7, pc}

08004f6a <_close>:

int _close(int file)
{
 8004f6a:	b480      	push	{r7}
 8004f6c:	b083      	sub	sp, #12
 8004f6e:	af00      	add	r7, sp, #0
 8004f70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004f72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b083      	sub	sp, #12
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
 8004f8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004f92:	605a      	str	r2, [r3, #4]
  return 0;
 8004f94:	2300      	movs	r3, #0
}
 8004f96:	4618      	mov	r0, r3
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr

08004fa2 <_isatty>:

int _isatty(int file)
{
 8004fa2:	b480      	push	{r7}
 8004fa4:	b083      	sub	sp, #12
 8004fa6:	af00      	add	r7, sp, #0
 8004fa8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004faa:	2301      	movs	r3, #1
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	370c      	adds	r7, #12
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb6:	4770      	bx	lr

08004fb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b085      	sub	sp, #20
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	60f8      	str	r0, [r7, #12]
 8004fc0:	60b9      	str	r1, [r7, #8]
 8004fc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3714      	adds	r7, #20
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd0:	4770      	bx	lr
	...

08004fd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b086      	sub	sp, #24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004fdc:	4a14      	ldr	r2, [pc, #80]	; (8005030 <_sbrk+0x5c>)
 8004fde:	4b15      	ldr	r3, [pc, #84]	; (8005034 <_sbrk+0x60>)
 8004fe0:	1ad3      	subs	r3, r2, r3
 8004fe2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004fe8:	4b13      	ldr	r3, [pc, #76]	; (8005038 <_sbrk+0x64>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d102      	bne.n	8004ff6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004ff0:	4b11      	ldr	r3, [pc, #68]	; (8005038 <_sbrk+0x64>)
 8004ff2:	4a12      	ldr	r2, [pc, #72]	; (800503c <_sbrk+0x68>)
 8004ff4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004ff6:	4b10      	ldr	r3, [pc, #64]	; (8005038 <_sbrk+0x64>)
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4413      	add	r3, r2
 8004ffe:	693a      	ldr	r2, [r7, #16]
 8005000:	429a      	cmp	r2, r3
 8005002:	d207      	bcs.n	8005014 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005004:	f007 fab6 	bl	800c574 <__errno>
 8005008:	4603      	mov	r3, r0
 800500a:	220c      	movs	r2, #12
 800500c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800500e:	f04f 33ff 	mov.w	r3, #4294967295
 8005012:	e009      	b.n	8005028 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005014:	4b08      	ldr	r3, [pc, #32]	; (8005038 <_sbrk+0x64>)
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800501a:	4b07      	ldr	r3, [pc, #28]	; (8005038 <_sbrk+0x64>)
 800501c:	681a      	ldr	r2, [r3, #0]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	4a05      	ldr	r2, [pc, #20]	; (8005038 <_sbrk+0x64>)
 8005024:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005026:	68fb      	ldr	r3, [r7, #12]
}
 8005028:	4618      	mov	r0, r3
 800502a:	3718      	adds	r7, #24
 800502c:	46bd      	mov	sp, r7
 800502e:	bd80      	pop	{r7, pc}
 8005030:	20020000 	.word	0x20020000
 8005034:	00000400 	.word	0x00000400
 8005038:	200010dc 	.word	0x200010dc
 800503c:	200010f8 	.word	0x200010f8

08005040 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005040:	b480      	push	{r7}
 8005042:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005044:	4b06      	ldr	r3, [pc, #24]	; (8005060 <SystemInit+0x20>)
 8005046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800504a:	4a05      	ldr	r2, [pc, #20]	; (8005060 <SystemInit+0x20>)
 800504c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005050:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005054:	bf00      	nop
 8005056:	46bd      	mov	sp, r7
 8005058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800505c:	4770      	bx	lr
 800505e:	bf00      	nop
 8005060:	e000ed00 	.word	0xe000ed00

08005064 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   sp, =_estack    		 /* set stack pointer */
 8005064:	f8df d034 	ldr.w	sp, [pc, #52]	; 800509c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8005068:	480d      	ldr	r0, [pc, #52]	; (80050a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800506a:	490e      	ldr	r1, [pc, #56]	; (80050a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800506c:	4a0e      	ldr	r2, [pc, #56]	; (80050a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800506e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005070:	e002      	b.n	8005078 <LoopCopyDataInit>

08005072 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005072:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005074:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005076:	3304      	adds	r3, #4

08005078 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005078:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800507a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800507c:	d3f9      	bcc.n	8005072 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800507e:	4a0b      	ldr	r2, [pc, #44]	; (80050ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005080:	4c0b      	ldr	r4, [pc, #44]	; (80050b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005082:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005084:	e001      	b.n	800508a <LoopFillZerobss>

08005086 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005086:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005088:	3204      	adds	r2, #4

0800508a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800508a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800508c:	d3fb      	bcc.n	8005086 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800508e:	f7ff ffd7 	bl	8005040 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005092:	f007 fa75 	bl	800c580 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005096:	f7fc fb0f 	bl	80016b8 <main>
  bx  lr    
 800509a:	4770      	bx	lr
   ldr   sp, =_estack    		 /* set stack pointer */
 800509c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80050a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80050a4:	20000430 	.word	0x20000430
  ldr r2, =_sidata
 80050a8:	0801164c 	.word	0x0801164c
  ldr r2, =_sbss
 80050ac:	20000430 	.word	0x20000430
  ldr r4, =_ebss
 80050b0:	200010f4 	.word	0x200010f4

080050b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80050b4:	e7fe      	b.n	80050b4 <ADC_IRQHandler>
	...

080050b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80050b8:	b580      	push	{r7, lr}
 80050ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80050bc:	4b0e      	ldr	r3, [pc, #56]	; (80050f8 <HAL_Init+0x40>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a0d      	ldr	r2, [pc, #52]	; (80050f8 <HAL_Init+0x40>)
 80050c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80050c8:	4b0b      	ldr	r3, [pc, #44]	; (80050f8 <HAL_Init+0x40>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a0a      	ldr	r2, [pc, #40]	; (80050f8 <HAL_Init+0x40>)
 80050ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80050d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80050d4:	4b08      	ldr	r3, [pc, #32]	; (80050f8 <HAL_Init+0x40>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a07      	ldr	r2, [pc, #28]	; (80050f8 <HAL_Init+0x40>)
 80050da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80050e0:	2003      	movs	r0, #3
 80050e2:	f000 fd51 	bl	8005b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80050e6:	2000      	movs	r0, #0
 80050e8:	f000 f808 	bl	80050fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80050ec:	f7ff fb7c 	bl	80047e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40023c00 	.word	0x40023c00

080050fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005104:	4b12      	ldr	r3, [pc, #72]	; (8005150 <HAL_InitTick+0x54>)
 8005106:	681a      	ldr	r2, [r3, #0]
 8005108:	4b12      	ldr	r3, [pc, #72]	; (8005154 <HAL_InitTick+0x58>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	4619      	mov	r1, r3
 800510e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005112:	fbb3 f3f1 	udiv	r3, r3, r1
 8005116:	fbb2 f3f3 	udiv	r3, r2, r3
 800511a:	4618      	mov	r0, r3
 800511c:	f000 fd69 	bl	8005bf2 <HAL_SYSTICK_Config>
 8005120:	4603      	mov	r3, r0
 8005122:	2b00      	cmp	r3, #0
 8005124:	d001      	beq.n	800512a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8005126:	2301      	movs	r3, #1
 8005128:	e00e      	b.n	8005148 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2b0f      	cmp	r3, #15
 800512e:	d80a      	bhi.n	8005146 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005130:	2200      	movs	r2, #0
 8005132:	6879      	ldr	r1, [r7, #4]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	f000 fd31 	bl	8005b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800513c:	4a06      	ldr	r2, [pc, #24]	; (8005158 <HAL_InitTick+0x5c>)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005142:	2300      	movs	r3, #0
 8005144:	e000      	b.n	8005148 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8005146:	2301      	movs	r3, #1
}
 8005148:	4618      	mov	r0, r3
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}
 8005150:	20000250 	.word	0x20000250
 8005154:	20000258 	.word	0x20000258
 8005158:	20000254 	.word	0x20000254

0800515c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800515c:	b480      	push	{r7}
 800515e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005160:	4b06      	ldr	r3, [pc, #24]	; (800517c <HAL_IncTick+0x20>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_IncTick+0x24>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	4413      	add	r3, r2
 800516c:	4a04      	ldr	r2, [pc, #16]	; (8005180 <HAL_IncTick+0x24>)
 800516e:	6013      	str	r3, [r2, #0]
}
 8005170:	bf00      	nop
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	20000258 	.word	0x20000258
 8005180:	200010e0 	.word	0x200010e0

08005184 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005184:	b480      	push	{r7}
 8005186:	af00      	add	r7, sp, #0
  return uwTick;
 8005188:	4b03      	ldr	r3, [pc, #12]	; (8005198 <HAL_GetTick+0x14>)
 800518a:	681b      	ldr	r3, [r3, #0]
}
 800518c:	4618      	mov	r0, r3
 800518e:	46bd      	mov	sp, r7
 8005190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005194:	4770      	bx	lr
 8005196:	bf00      	nop
 8005198:	200010e0 	.word	0x200010e0

0800519c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800519c:	b580      	push	{r7, lr}
 800519e:	b084      	sub	sp, #16
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80051a4:	f7ff ffee 	bl	8005184 <HAL_GetTick>
 80051a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051b4:	d005      	beq.n	80051c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80051b6:	4b0a      	ldr	r3, [pc, #40]	; (80051e0 <HAL_Delay+0x44>)
 80051b8:	781b      	ldrb	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	4413      	add	r3, r2
 80051c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80051c2:	bf00      	nop
 80051c4:	f7ff ffde 	bl	8005184 <HAL_GetTick>
 80051c8:	4602      	mov	r2, r0
 80051ca:	68bb      	ldr	r3, [r7, #8]
 80051cc:	1ad3      	subs	r3, r2, r3
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	429a      	cmp	r2, r3
 80051d2:	d8f7      	bhi.n	80051c4 <HAL_Delay+0x28>
  {
  }
}
 80051d4:	bf00      	nop
 80051d6:	bf00      	nop
 80051d8:	3710      	adds	r7, #16
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	20000258 	.word	0x20000258

080051e4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80051ec:	2300      	movs	r3, #0
 80051ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d101      	bne.n	80051fa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80051f6:	2301      	movs	r3, #1
 80051f8:	e033      	b.n	8005262 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d109      	bne.n	8005216 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f7ff fb18 	bl	8004838 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2200      	movs	r2, #0
 800520c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2200      	movs	r2, #0
 8005212:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521a:	f003 0310 	and.w	r3, r3, #16
 800521e:	2b00      	cmp	r3, #0
 8005220:	d118      	bne.n	8005254 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005226:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800522a:	f023 0302 	bic.w	r3, r3, #2
 800522e:	f043 0202 	orr.w	r2, r3, #2
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f000 fa58 	bl	80056ec <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	f023 0303 	bic.w	r3, r3, #3
 800524a:	f043 0201 	orr.w	r2, r3, #1
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	641a      	str	r2, [r3, #64]	; 0x40
 8005252:	e001      	b.n	8005258 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005254:	2301      	movs	r3, #1
 8005256:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005260:	7bfb      	ldrb	r3, [r7, #15]
}
 8005262:	4618      	mov	r0, r3
 8005264:	3710      	adds	r7, #16
 8005266:	46bd      	mov	sp, r7
 8005268:	bd80      	pop	{r7, pc}
	...

0800526c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b086      	sub	sp, #24
 8005270:	af00      	add	r7, sp, #0
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	60b9      	str	r1, [r7, #8]
 8005276:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8005278:	2300      	movs	r3, #0
 800527a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005282:	2b01      	cmp	r3, #1
 8005284:	d101      	bne.n	800528a <HAL_ADC_Start_DMA+0x1e>
 8005286:	2302      	movs	r3, #2
 8005288:	e0ce      	b.n	8005428 <HAL_ADC_Start_DMA+0x1bc>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	2201      	movs	r2, #1
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	689b      	ldr	r3, [r3, #8]
 8005298:	f003 0301 	and.w	r3, r3, #1
 800529c:	2b01      	cmp	r3, #1
 800529e:	d018      	beq.n	80052d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	689a      	ldr	r2, [r3, #8]
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f042 0201 	orr.w	r2, r2, #1
 80052ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80052b0:	4b5f      	ldr	r3, [pc, #380]	; (8005430 <HAL_ADC_Start_DMA+0x1c4>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a5f      	ldr	r2, [pc, #380]	; (8005434 <HAL_ADC_Start_DMA+0x1c8>)
 80052b6:	fba2 2303 	umull	r2, r3, r2, r3
 80052ba:	0c9a      	lsrs	r2, r3, #18
 80052bc:	4613      	mov	r3, r2
 80052be:	005b      	lsls	r3, r3, #1
 80052c0:	4413      	add	r3, r2
 80052c2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052c4:	e002      	b.n	80052cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	3b01      	subs	r3, #1
 80052ca:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d1f9      	bne.n	80052c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052e0:	d107      	bne.n	80052f2 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689a      	ldr	r2, [r3, #8]
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 0301 	and.w	r3, r3, #1
 80052fc:	2b01      	cmp	r3, #1
 80052fe:	f040 8086 	bne.w	800540e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	685b      	ldr	r3, [r3, #4]
 800531c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005320:	2b00      	cmp	r3, #0
 8005322:	d007      	beq.n	8005334 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005328:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800532c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800533c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005340:	d106      	bne.n	8005350 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005346:	f023 0206 	bic.w	r2, r3, #6
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	645a      	str	r2, [r3, #68]	; 0x44
 800534e:	e002      	b.n	8005356 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	2200      	movs	r2, #0
 8005354:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	2200      	movs	r2, #0
 800535a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800535e:	4b36      	ldr	r3, [pc, #216]	; (8005438 <HAL_ADC_Start_DMA+0x1cc>)
 8005360:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	4a35      	ldr	r2, [pc, #212]	; (800543c <HAL_ADC_Start_DMA+0x1d0>)
 8005368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536e:	4a34      	ldr	r2, [pc, #208]	; (8005440 <HAL_ADC_Start_DMA+0x1d4>)
 8005370:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	4a33      	ldr	r2, [pc, #204]	; (8005444 <HAL_ADC_Start_DMA+0x1d8>)
 8005378:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005382:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	685a      	ldr	r2, [r3, #4]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8005392:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80053a2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	334c      	adds	r3, #76	; 0x4c
 80053ae:	4619      	mov	r1, r3
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f000 fcd8 	bl	8005d68 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	685b      	ldr	r3, [r3, #4]
 80053bc:	f003 031f 	and.w	r3, r3, #31
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10f      	bne.n	80053e4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d129      	bne.n	8005426 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	689a      	ldr	r2, [r3, #8]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80053e0:	609a      	str	r2, [r3, #8]
 80053e2:	e020      	b.n	8005426 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a17      	ldr	r2, [pc, #92]	; (8005448 <HAL_ADC_Start_DMA+0x1dc>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d11b      	bne.n	8005426 <HAL_ADC_Start_DMA+0x1ba>
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d114      	bne.n	8005426 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	689a      	ldr	r2, [r3, #8]
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800540a:	609a      	str	r2, [r3, #8]
 800540c:	e00b      	b.n	8005426 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005412:	f043 0210 	orr.w	r2, r3, #16
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800541e:	f043 0201 	orr.w	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8005426:	2300      	movs	r3, #0
}
 8005428:	4618      	mov	r0, r3
 800542a:	3718      	adds	r7, #24
 800542c:	46bd      	mov	sp, r7
 800542e:	bd80      	pop	{r7, pc}
 8005430:	20000250 	.word	0x20000250
 8005434:	431bde83 	.word	0x431bde83
 8005438:	40012300 	.word	0x40012300
 800543c:	080058e5 	.word	0x080058e5
 8005440:	0800599f 	.word	0x0800599f
 8005444:	080059bb 	.word	0x080059bb
 8005448:	40012000 	.word	0x40012000

0800544c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800544c:	b480      	push	{r7}
 800544e:	b083      	sub	sp, #12
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8005454:	bf00      	nop
 8005456:	370c      	adds	r7, #12
 8005458:	46bd      	mov	sp, r7
 800545a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545e:	4770      	bx	lr

08005460 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8005492:	2300      	movs	r3, #0
 8005494:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800549c:	2b01      	cmp	r3, #1
 800549e:	d101      	bne.n	80054a4 <HAL_ADC_ConfigChannel+0x1c>
 80054a0:	2302      	movs	r3, #2
 80054a2:	e113      	b.n	80056cc <HAL_ADC_ConfigChannel+0x244>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2201      	movs	r2, #1
 80054a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b09      	cmp	r3, #9
 80054b2:	d925      	bls.n	8005500 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	68d9      	ldr	r1, [r3, #12]
 80054ba:	683b      	ldr	r3, [r7, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	b29b      	uxth	r3, r3
 80054c0:	461a      	mov	r2, r3
 80054c2:	4613      	mov	r3, r2
 80054c4:	005b      	lsls	r3, r3, #1
 80054c6:	4413      	add	r3, r2
 80054c8:	3b1e      	subs	r3, #30
 80054ca:	2207      	movs	r2, #7
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43da      	mvns	r2, r3
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	400a      	ands	r2, r1
 80054d8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68d9      	ldr	r1, [r3, #12]
 80054e0:	683b      	ldr	r3, [r7, #0]
 80054e2:	689a      	ldr	r2, [r3, #8]
 80054e4:	683b      	ldr	r3, [r7, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	4618      	mov	r0, r3
 80054ec:	4603      	mov	r3, r0
 80054ee:	005b      	lsls	r3, r3, #1
 80054f0:	4403      	add	r3, r0
 80054f2:	3b1e      	subs	r3, #30
 80054f4:	409a      	lsls	r2, r3
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	430a      	orrs	r2, r1
 80054fc:	60da      	str	r2, [r3, #12]
 80054fe:	e022      	b.n	8005546 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6919      	ldr	r1, [r3, #16]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	b29b      	uxth	r3, r3
 800550c:	461a      	mov	r2, r3
 800550e:	4613      	mov	r3, r2
 8005510:	005b      	lsls	r3, r3, #1
 8005512:	4413      	add	r3, r2
 8005514:	2207      	movs	r2, #7
 8005516:	fa02 f303 	lsl.w	r3, r2, r3
 800551a:	43da      	mvns	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	400a      	ands	r2, r1
 8005522:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	6919      	ldr	r1, [r3, #16]
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	689a      	ldr	r2, [r3, #8]
 800552e:	683b      	ldr	r3, [r7, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	b29b      	uxth	r3, r3
 8005534:	4618      	mov	r0, r3
 8005536:	4603      	mov	r3, r0
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	4403      	add	r3, r0
 800553c:	409a      	lsls	r2, r3
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	430a      	orrs	r2, r1
 8005544:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	685b      	ldr	r3, [r3, #4]
 800554a:	2b06      	cmp	r3, #6
 800554c:	d824      	bhi.n	8005598 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
 8005558:	4613      	mov	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4413      	add	r3, r2
 800555e:	3b05      	subs	r3, #5
 8005560:	221f      	movs	r2, #31
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	400a      	ands	r2, r1
 800556e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	b29b      	uxth	r3, r3
 800557c:	4618      	mov	r0, r3
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	685a      	ldr	r2, [r3, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	009b      	lsls	r3, r3, #2
 8005586:	4413      	add	r3, r2
 8005588:	3b05      	subs	r3, #5
 800558a:	fa00 f203 	lsl.w	r2, r0, r3
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	635a      	str	r2, [r3, #52]	; 0x34
 8005596:	e04c      	b.n	8005632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	685b      	ldr	r3, [r3, #4]
 800559c:	2b0c      	cmp	r3, #12
 800559e:	d824      	bhi.n	80055ea <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	685a      	ldr	r2, [r3, #4]
 80055aa:	4613      	mov	r3, r2
 80055ac:	009b      	lsls	r3, r3, #2
 80055ae:	4413      	add	r3, r2
 80055b0:	3b23      	subs	r3, #35	; 0x23
 80055b2:	221f      	movs	r2, #31
 80055b4:	fa02 f303 	lsl.w	r3, r2, r3
 80055b8:	43da      	mvns	r2, r3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	400a      	ands	r2, r1
 80055c0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	4618      	mov	r0, r3
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	685a      	ldr	r2, [r3, #4]
 80055d4:	4613      	mov	r3, r2
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	4413      	add	r3, r2
 80055da:	3b23      	subs	r3, #35	; 0x23
 80055dc:	fa00 f203 	lsl.w	r2, r0, r3
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	430a      	orrs	r2, r1
 80055e6:	631a      	str	r2, [r3, #48]	; 0x30
 80055e8:	e023      	b.n	8005632 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	685a      	ldr	r2, [r3, #4]
 80055f4:	4613      	mov	r3, r2
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	4413      	add	r3, r2
 80055fa:	3b41      	subs	r3, #65	; 0x41
 80055fc:	221f      	movs	r2, #31
 80055fe:	fa02 f303 	lsl.w	r3, r2, r3
 8005602:	43da      	mvns	r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	400a      	ands	r2, r1
 800560a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	b29b      	uxth	r3, r3
 8005618:	4618      	mov	r0, r3
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	685a      	ldr	r2, [r3, #4]
 800561e:	4613      	mov	r3, r2
 8005620:	009b      	lsls	r3, r3, #2
 8005622:	4413      	add	r3, r2
 8005624:	3b41      	subs	r3, #65	; 0x41
 8005626:	fa00 f203 	lsl.w	r2, r0, r3
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8005632:	4b29      	ldr	r3, [pc, #164]	; (80056d8 <HAL_ADC_ConfigChannel+0x250>)
 8005634:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	4a28      	ldr	r2, [pc, #160]	; (80056dc <HAL_ADC_ConfigChannel+0x254>)
 800563c:	4293      	cmp	r3, r2
 800563e:	d10f      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x1d8>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	2b12      	cmp	r3, #18
 8005646:	d10b      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	4a1d      	ldr	r2, [pc, #116]	; (80056dc <HAL_ADC_ConfigChannel+0x254>)
 8005666:	4293      	cmp	r3, r2
 8005668:	d12b      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x23a>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	4a1c      	ldr	r2, [pc, #112]	; (80056e0 <HAL_ADC_ConfigChannel+0x258>)
 8005670:	4293      	cmp	r3, r2
 8005672:	d003      	beq.n	800567c <HAL_ADC_ConfigChannel+0x1f4>
 8005674:	683b      	ldr	r3, [r7, #0]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2b11      	cmp	r3, #17
 800567a:	d122      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a11      	ldr	r2, [pc, #68]	; (80056e0 <HAL_ADC_ConfigChannel+0x258>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d111      	bne.n	80056c2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800569e:	4b11      	ldr	r3, [pc, #68]	; (80056e4 <HAL_ADC_ConfigChannel+0x25c>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a11      	ldr	r2, [pc, #68]	; (80056e8 <HAL_ADC_ConfigChannel+0x260>)
 80056a4:	fba2 2303 	umull	r2, r3, r2, r3
 80056a8:	0c9a      	lsrs	r2, r3, #18
 80056aa:	4613      	mov	r3, r2
 80056ac:	009b      	lsls	r3, r3, #2
 80056ae:	4413      	add	r3, r2
 80056b0:	005b      	lsls	r3, r3, #1
 80056b2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056b4:	e002      	b.n	80056bc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80056b6:	68bb      	ldr	r3, [r7, #8]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80056bc:	68bb      	ldr	r3, [r7, #8]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d1f9      	bne.n	80056b6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr
 80056d8:	40012300 	.word	0x40012300
 80056dc:	40012000 	.word	0x40012000
 80056e0:	10000012 	.word	0x10000012
 80056e4:	20000250 	.word	0x20000250
 80056e8:	431bde83 	.word	0x431bde83

080056ec <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80056f4:	4b79      	ldr	r3, [pc, #484]	; (80058dc <ADC_Init+0x1f0>)
 80056f6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	685b      	ldr	r3, [r3, #4]
 800570c:	431a      	orrs	r2, r3
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	685a      	ldr	r2, [r3, #4]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005720:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	6859      	ldr	r1, [r3, #4]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691b      	ldr	r3, [r3, #16]
 800572c:	021a      	lsls	r2, r3, #8
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	430a      	orrs	r2, r1
 8005734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	685a      	ldr	r2, [r3, #4]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	6859      	ldr	r1, [r3, #4]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	689a      	ldr	r2, [r3, #8]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005766:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	6899      	ldr	r1, [r3, #8]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	68da      	ldr	r2, [r3, #12]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	430a      	orrs	r2, r1
 8005778:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	4a58      	ldr	r2, [pc, #352]	; (80058e0 <ADC_Init+0x1f4>)
 8005780:	4293      	cmp	r3, r2
 8005782:	d022      	beq.n	80057ca <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005792:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	6899      	ldr	r1, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	430a      	orrs	r2, r1
 80057a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	6899      	ldr	r1, [r3, #8]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	430a      	orrs	r2, r1
 80057c6:	609a      	str	r2, [r3, #8]
 80057c8:	e00f      	b.n	80057ea <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80057d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	689a      	ldr	r2, [r3, #8]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80057e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	689a      	ldr	r2, [r3, #8]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f022 0202 	bic.w	r2, r2, #2
 80057f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	6899      	ldr	r1, [r3, #8]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	7e1b      	ldrb	r3, [r3, #24]
 8005804:	005a      	lsls	r2, r3, #1
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	430a      	orrs	r2, r1
 800580c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d01b      	beq.n	8005850 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005826:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	685a      	ldr	r2, [r3, #4]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005836:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6859      	ldr	r1, [r3, #4]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005842:	3b01      	subs	r3, #1
 8005844:	035a      	lsls	r2, r3, #13
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	430a      	orrs	r2, r1
 800584c:	605a      	str	r2, [r3, #4]
 800584e:	e007      	b.n	8005860 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	685a      	ldr	r2, [r3, #4]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800585e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800586e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	69db      	ldr	r3, [r3, #28]
 800587a:	3b01      	subs	r3, #1
 800587c:	051a      	lsls	r2, r3, #20
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	430a      	orrs	r2, r1
 8005884:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	689a      	ldr	r2, [r3, #8]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	6899      	ldr	r1, [r3, #8]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80058a2:	025a      	lsls	r2, r3, #9
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	430a      	orrs	r2, r1
 80058aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	689a      	ldr	r2, [r3, #8]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	6899      	ldr	r1, [r3, #8]
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	695b      	ldr	r3, [r3, #20]
 80058c6:	029a      	lsls	r2, r3, #10
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	430a      	orrs	r2, r1
 80058ce:	609a      	str	r2, [r3, #8]
}
 80058d0:	bf00      	nop
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	40012300 	.word	0x40012300
 80058e0:	0f000001 	.word	0x0f000001

080058e4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b084      	sub	sp, #16
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058f0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058f6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d13c      	bne.n	8005978 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005902:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	689b      	ldr	r3, [r3, #8]
 8005910:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005914:	2b00      	cmp	r3, #0
 8005916:	d12b      	bne.n	8005970 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800591c:	2b00      	cmp	r3, #0
 800591e:	d127      	bne.n	8005970 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005926:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005938:	2b00      	cmp	r3, #0
 800593a:	d119      	bne.n	8005970 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	685a      	ldr	r2, [r3, #4]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f022 0220 	bic.w	r2, r2, #32
 800594a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005950:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005968:	f043 0201 	orr.w	r2, r3, #1
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8005970:	68f8      	ldr	r0, [r7, #12]
 8005972:	f7ff fd6b 	bl	800544c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8005976:	e00e      	b.n	8005996 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597c:	f003 0310 	and.w	r3, r3, #16
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8005984:	68f8      	ldr	r0, [r7, #12]
 8005986:	f7ff fd75 	bl	8005474 <HAL_ADC_ErrorCallback>
}
 800598a:	e004      	b.n	8005996 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	4798      	blx	r3
}
 8005996:	bf00      	nop
 8005998:	3710      	adds	r7, #16
 800599a:	46bd      	mov	sp, r7
 800599c:	bd80      	pop	{r7, pc}

0800599e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800599e:	b580      	push	{r7, lr}
 80059a0:	b084      	sub	sp, #16
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f7ff fd57 	bl	8005460 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059b2:	bf00      	nop
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059c6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2240      	movs	r2, #64	; 0x40
 80059cc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	f043 0204 	orr.w	r2, r3, #4
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059da:	68f8      	ldr	r0, [r7, #12]
 80059dc:	f7ff fd4a 	bl	8005474 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059e0:	bf00      	nop
 80059e2:	3710      	adds	r7, #16
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f003 0307 	and.w	r3, r3, #7
 80059f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80059f8:	4b0c      	ldr	r3, [pc, #48]	; (8005a2c <__NVIC_SetPriorityGrouping+0x44>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a04:	4013      	ands	r3, r2
 8005a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a1a:	4a04      	ldr	r2, [pc, #16]	; (8005a2c <__NVIC_SetPriorityGrouping+0x44>)
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	60d3      	str	r3, [r2, #12]
}
 8005a20:	bf00      	nop
 8005a22:	3714      	adds	r7, #20
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr
 8005a2c:	e000ed00 	.word	0xe000ed00

08005a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a30:	b480      	push	{r7}
 8005a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a34:	4b04      	ldr	r3, [pc, #16]	; (8005a48 <__NVIC_GetPriorityGrouping+0x18>)
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	0a1b      	lsrs	r3, r3, #8
 8005a3a:	f003 0307 	and.w	r3, r3, #7
}
 8005a3e:	4618      	mov	r0, r3
 8005a40:	46bd      	mov	sp, r7
 8005a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a46:	4770      	bx	lr
 8005a48:	e000ed00 	.word	0xe000ed00

08005a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	db0b      	blt.n	8005a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a5e:	79fb      	ldrb	r3, [r7, #7]
 8005a60:	f003 021f 	and.w	r2, r3, #31
 8005a64:	4907      	ldr	r1, [pc, #28]	; (8005a84 <__NVIC_EnableIRQ+0x38>)
 8005a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	2001      	movs	r0, #1
 8005a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8005a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005a76:	bf00      	nop
 8005a78:	370c      	adds	r7, #12
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr
 8005a82:	bf00      	nop
 8005a84:	e000e100 	.word	0xe000e100

08005a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b083      	sub	sp, #12
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	4603      	mov	r3, r0
 8005a90:	6039      	str	r1, [r7, #0]
 8005a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	db0a      	blt.n	8005ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	b2da      	uxtb	r2, r3
 8005aa0:	490c      	ldr	r1, [pc, #48]	; (8005ad4 <__NVIC_SetPriority+0x4c>)
 8005aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa6:	0112      	lsls	r2, r2, #4
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	440b      	add	r3, r1
 8005aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ab0:	e00a      	b.n	8005ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	b2da      	uxtb	r2, r3
 8005ab6:	4908      	ldr	r1, [pc, #32]	; (8005ad8 <__NVIC_SetPriority+0x50>)
 8005ab8:	79fb      	ldrb	r3, [r7, #7]
 8005aba:	f003 030f 	and.w	r3, r3, #15
 8005abe:	3b04      	subs	r3, #4
 8005ac0:	0112      	lsls	r2, r2, #4
 8005ac2:	b2d2      	uxtb	r2, r2
 8005ac4:	440b      	add	r3, r1
 8005ac6:	761a      	strb	r2, [r3, #24]
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr
 8005ad4:	e000e100 	.word	0xe000e100
 8005ad8:	e000ed00 	.word	0xe000ed00

08005adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b089      	sub	sp, #36	; 0x24
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	60f8      	str	r0, [r7, #12]
 8005ae4:	60b9      	str	r1, [r7, #8]
 8005ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f003 0307 	and.w	r3, r3, #7
 8005aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	f1c3 0307 	rsb	r3, r3, #7
 8005af6:	2b04      	cmp	r3, #4
 8005af8:	bf28      	it	cs
 8005afa:	2304      	movcs	r3, #4
 8005afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	3304      	adds	r3, #4
 8005b02:	2b06      	cmp	r3, #6
 8005b04:	d902      	bls.n	8005b0c <NVIC_EncodePriority+0x30>
 8005b06:	69fb      	ldr	r3, [r7, #28]
 8005b08:	3b03      	subs	r3, #3
 8005b0a:	e000      	b.n	8005b0e <NVIC_EncodePriority+0x32>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b10:	f04f 32ff 	mov.w	r2, #4294967295
 8005b14:	69bb      	ldr	r3, [r7, #24]
 8005b16:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1a:	43da      	mvns	r2, r3
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	401a      	ands	r2, r3
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b24:	f04f 31ff 	mov.w	r1, #4294967295
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8005b2e:	43d9      	mvns	r1, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b34:	4313      	orrs	r3, r2
         );
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3724      	adds	r7, #36	; 0x24
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr
	...

08005b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005b54:	d301      	bcc.n	8005b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005b56:	2301      	movs	r3, #1
 8005b58:	e00f      	b.n	8005b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <SysTick_Config+0x40>)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	3b01      	subs	r3, #1
 8005b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005b62:	210f      	movs	r1, #15
 8005b64:	f04f 30ff 	mov.w	r0, #4294967295
 8005b68:	f7ff ff8e 	bl	8005a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005b6c:	4b05      	ldr	r3, [pc, #20]	; (8005b84 <SysTick_Config+0x40>)
 8005b6e:	2200      	movs	r2, #0
 8005b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005b72:	4b04      	ldr	r3, [pc, #16]	; (8005b84 <SysTick_Config+0x40>)
 8005b74:	2207      	movs	r2, #7
 8005b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}
 8005b82:	bf00      	nop
 8005b84:	e000e010 	.word	0xe000e010

08005b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b90:	6878      	ldr	r0, [r7, #4]
 8005b92:	f7ff ff29 	bl	80059e8 <__NVIC_SetPriorityGrouping>
}
 8005b96:	bf00      	nop
 8005b98:	3708      	adds	r7, #8
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b086      	sub	sp, #24
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	60b9      	str	r1, [r7, #8]
 8005ba8:	607a      	str	r2, [r7, #4]
 8005baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8005bac:	2300      	movs	r3, #0
 8005bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8005bb0:	f7ff ff3e 	bl	8005a30 <__NVIC_GetPriorityGrouping>
 8005bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005bb6:	687a      	ldr	r2, [r7, #4]
 8005bb8:	68b9      	ldr	r1, [r7, #8]
 8005bba:	6978      	ldr	r0, [r7, #20]
 8005bbc:	f7ff ff8e 	bl	8005adc <NVIC_EncodePriority>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bc6:	4611      	mov	r1, r2
 8005bc8:	4618      	mov	r0, r3
 8005bca:	f7ff ff5d 	bl	8005a88 <__NVIC_SetPriority>
}
 8005bce:	bf00      	nop
 8005bd0:	3718      	adds	r7, #24
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b082      	sub	sp, #8
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	4603      	mov	r3, r0
 8005bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f7ff ff31 	bl	8005a4c <__NVIC_EnableIRQ>
}
 8005bea:	bf00      	nop
 8005bec:	3708      	adds	r7, #8
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}

08005bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005bf2:	b580      	push	{r7, lr}
 8005bf4:	b082      	sub	sp, #8
 8005bf6:	af00      	add	r7, sp, #0
 8005bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005bfa:	6878      	ldr	r0, [r7, #4]
 8005bfc:	f7ff ffa2 	bl	8005b44 <SysTick_Config>
 8005c00:	4603      	mov	r3, r0
}
 8005c02:	4618      	mov	r0, r3
 8005c04:	3708      	adds	r7, #8
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
	...

08005c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b086      	sub	sp, #24
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005c14:	2300      	movs	r3, #0
 8005c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005c18:	f7ff fab4 	bl	8005184 <HAL_GetTick>
 8005c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d101      	bne.n	8005c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e099      	b.n	8005d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2202      	movs	r2, #2
 8005c2c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c48:	e00f      	b.n	8005c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005c4a:	f7ff fa9b 	bl	8005184 <HAL_GetTick>
 8005c4e:	4602      	mov	r2, r0
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	1ad3      	subs	r3, r2, r3
 8005c54:	2b05      	cmp	r3, #5
 8005c56:	d908      	bls.n	8005c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2220      	movs	r2, #32
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	2203      	movs	r2, #3
 8005c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e078      	b.n	8005d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f003 0301 	and.w	r3, r3, #1
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1e8      	bne.n	8005c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005c80:	697a      	ldr	r2, [r7, #20]
 8005c82:	4b38      	ldr	r3, [pc, #224]	; (8005d64 <HAL_DMA_Init+0x158>)
 8005c84:	4013      	ands	r3, r2
 8005c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	685a      	ldr	r2, [r3, #4]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	691b      	ldr	r3, [r3, #16]
 8005c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005cb6:	697a      	ldr	r2, [r7, #20]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc0:	2b04      	cmp	r3, #4
 8005cc2:	d107      	bne.n	8005cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ccc:	4313      	orrs	r3, r2
 8005cce:	697a      	ldr	r2, [r7, #20]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	695b      	ldr	r3, [r3, #20]
 8005ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f023 0307 	bic.w	r3, r3, #7
 8005cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cf0:	697a      	ldr	r2, [r7, #20]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cfa:	2b04      	cmp	r3, #4
 8005cfc:	d117      	bne.n	8005d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d02:	697a      	ldr	r2, [r7, #20]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d00e      	beq.n	8005d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 fb1b 	bl	800634c <DMA_CheckFifoParam>
 8005d16:	4603      	mov	r3, r0
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d008      	beq.n	8005d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2240      	movs	r2, #64	; 0x40
 8005d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2201      	movs	r2, #1
 8005d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	e016      	b.n	8005d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	697a      	ldr	r2, [r7, #20]
 8005d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fad2 	bl	80062e0 <DMA_CalcBaseAndBitshift>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d44:	223f      	movs	r2, #63	; 0x3f
 8005d46:	409a      	lsls	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2201      	movs	r2, #1
 8005d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8005d5a:	2300      	movs	r3, #0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3718      	adds	r7, #24
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	f010803f 	.word	0xf010803f

08005d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b086      	sub	sp, #24
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	60f8      	str	r0, [r7, #12]
 8005d70:	60b9      	str	r1, [r7, #8]
 8005d72:	607a      	str	r2, [r7, #4]
 8005d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d101      	bne.n	8005d8e <HAL_DMA_Start_IT+0x26>
 8005d8a:	2302      	movs	r3, #2
 8005d8c:	e040      	b.n	8005e10 <HAL_DMA_Start_IT+0xa8>
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005d9c:	b2db      	uxtb	r3, r3
 8005d9e:	2b01      	cmp	r3, #1
 8005da0:	d12f      	bne.n	8005e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2202      	movs	r2, #2
 8005da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	2200      	movs	r2, #0
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	68b9      	ldr	r1, [r7, #8]
 8005db6:	68f8      	ldr	r0, [r7, #12]
 8005db8:	f000 fa64 	bl	8006284 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005dc0:	223f      	movs	r2, #63	; 0x3f
 8005dc2:	409a      	lsls	r2, r3
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0216 	orr.w	r2, r2, #22
 8005dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d007      	beq.n	8005df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f042 0208 	orr.w	r2, r2, #8
 8005dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	681a      	ldr	r2, [r3, #0]
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	f042 0201 	orr.w	r2, r2, #1
 8005dfe:	601a      	str	r2, [r3, #0]
 8005e00:	e005      	b.n	8005e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8005e0a:	2302      	movs	r3, #2
 8005e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8005e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3718      	adds	r7, #24
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e24:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005e26:	f7ff f9ad 	bl	8005184 <HAL_GetTick>
 8005e2a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005e32:	b2db      	uxtb	r3, r3
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d008      	beq.n	8005e4a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2280      	movs	r2, #128	; 0x80
 8005e3c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005e46:	2301      	movs	r3, #1
 8005e48:	e052      	b.n	8005ef0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	681a      	ldr	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f022 0216 	bic.w	r2, r2, #22
 8005e58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	695a      	ldr	r2, [r3, #20]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005e68:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d103      	bne.n	8005e7a <HAL_DMA_Abort+0x62>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d007      	beq.n	8005e8a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f022 0208 	bic.w	r2, r2, #8
 8005e88:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f022 0201 	bic.w	r2, r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005e9a:	e013      	b.n	8005ec4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005e9c:	f7ff f972 	bl	8005184 <HAL_GetTick>
 8005ea0:	4602      	mov	r2, r0
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	1ad3      	subs	r3, r2, r3
 8005ea6:	2b05      	cmp	r3, #5
 8005ea8:	d90c      	bls.n	8005ec4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2220      	movs	r2, #32
 8005eae:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2200      	movs	r2, #0
 8005ebc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8005ec0:	2303      	movs	r3, #3
 8005ec2:	e015      	b.n	8005ef0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1e4      	bne.n	8005e9c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ed6:	223f      	movs	r2, #63	; 0x3f
 8005ed8:	409a      	lsls	r2, r3
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3710      	adds	r7, #16
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b083      	sub	sp, #12
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005f06:	b2db      	uxtb	r3, r3
 8005f08:	2b02      	cmp	r3, #2
 8005f0a:	d004      	beq.n	8005f16 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2280      	movs	r2, #128	; 0x80
 8005f10:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e00c      	b.n	8005f30 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2205      	movs	r2, #5
 8005f1a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	681a      	ldr	r2, [r3, #0]
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f022 0201 	bic.w	r2, r2, #1
 8005f2c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005f2e:	2300      	movs	r3, #0
}
 8005f30:	4618      	mov	r0, r3
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr

08005f3c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005f48:	4b8e      	ldr	r3, [pc, #568]	; (8006184 <HAL_DMA_IRQHandler+0x248>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	4a8e      	ldr	r2, [pc, #568]	; (8006188 <HAL_DMA_IRQHandler+0x24c>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	0a9b      	lsrs	r3, r3, #10
 8005f54:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f5a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f66:	2208      	movs	r2, #8
 8005f68:	409a      	lsls	r2, r3
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01a      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	f003 0304 	and.w	r3, r3, #4
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d013      	beq.n	8005fa8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681a      	ldr	r2, [r3, #0]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f022 0204 	bic.w	r2, r2, #4
 8005f8e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005f94:	2208      	movs	r2, #8
 8005f96:	409a      	lsls	r2, r3
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa0:	f043 0201 	orr.w	r2, r3, #1
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fac:	2201      	movs	r2, #1
 8005fae:	409a      	lsls	r2, r3
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d012      	beq.n	8005fde <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	695b      	ldr	r3, [r3, #20]
 8005fbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00b      	beq.n	8005fde <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fca:	2201      	movs	r2, #1
 8005fcc:	409a      	lsls	r2, r3
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fd6:	f043 0202 	orr.w	r2, r3, #2
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	409a      	lsls	r2, r3
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	4013      	ands	r3, r2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d012      	beq.n	8006014 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 0302 	and.w	r3, r3, #2
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00b      	beq.n	8006014 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006000:	2204      	movs	r2, #4
 8006002:	409a      	lsls	r2, r3
 8006004:	693b      	ldr	r3, [r7, #16]
 8006006:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600c:	f043 0204 	orr.w	r2, r3, #4
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006018:	2210      	movs	r2, #16
 800601a:	409a      	lsls	r2, r3
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	4013      	ands	r3, r2
 8006020:	2b00      	cmp	r3, #0
 8006022:	d043      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f003 0308 	and.w	r3, r3, #8
 800602e:	2b00      	cmp	r3, #0
 8006030:	d03c      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006036:	2210      	movs	r2, #16
 8006038:	409a      	lsls	r2, r3
 800603a:	693b      	ldr	r3, [r7, #16]
 800603c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006048:	2b00      	cmp	r3, #0
 800604a:	d018      	beq.n	800607e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006056:	2b00      	cmp	r3, #0
 8006058:	d108      	bne.n	800606c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800605e:	2b00      	cmp	r3, #0
 8006060:	d024      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	4798      	blx	r3
 800606a:	e01f      	b.n	80060ac <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006070:	2b00      	cmp	r3, #0
 8006072:	d01b      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	4798      	blx	r3
 800607c:	e016      	b.n	80060ac <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006088:	2b00      	cmp	r3, #0
 800608a:	d107      	bne.n	800609c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f022 0208 	bic.w	r2, r2, #8
 800609a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d003      	beq.n	80060ac <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060a8:	6878      	ldr	r0, [r7, #4]
 80060aa:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060b0:	2220      	movs	r2, #32
 80060b2:	409a      	lsls	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	4013      	ands	r3, r2
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	f000 808f 	beq.w	80061dc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 0310 	and.w	r3, r3, #16
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	f000 8087 	beq.w	80061dc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80060d2:	2220      	movs	r2, #32
 80060d4:	409a      	lsls	r2, r3
 80060d6:	693b      	ldr	r3, [r7, #16]
 80060d8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d136      	bne.n	8006154 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f022 0216 	bic.w	r2, r2, #22
 80060f4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	695a      	ldr	r2, [r3, #20]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006104:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610a:	2b00      	cmp	r3, #0
 800610c:	d103      	bne.n	8006116 <HAL_DMA_IRQHandler+0x1da>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006112:	2b00      	cmp	r3, #0
 8006114:	d007      	beq.n	8006126 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0208 	bic.w	r2, r2, #8
 8006124:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800612a:	223f      	movs	r2, #63	; 0x3f
 800612c:	409a      	lsls	r2, r3
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2201      	movs	r2, #1
 8006136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006146:	2b00      	cmp	r3, #0
 8006148:	d07e      	beq.n	8006248 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	4798      	blx	r3
        }
        return;
 8006152:	e079      	b.n	8006248 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800615e:	2b00      	cmp	r3, #0
 8006160:	d01d      	beq.n	800619e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10d      	bne.n	800618c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006174:	2b00      	cmp	r3, #0
 8006176:	d031      	beq.n	80061dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
 8006180:	e02c      	b.n	80061dc <HAL_DMA_IRQHandler+0x2a0>
 8006182:	bf00      	nop
 8006184:	20000250 	.word	0x20000250
 8006188:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006190:	2b00      	cmp	r3, #0
 8006192:	d023      	beq.n	80061dc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006198:	6878      	ldr	r0, [r7, #4]
 800619a:	4798      	blx	r3
 800619c:	e01e      	b.n	80061dc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10f      	bne.n	80061cc <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681a      	ldr	r2, [r3, #0]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f022 0210 	bic.w	r2, r2, #16
 80061ba:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d032      	beq.n	800624a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	f003 0301 	and.w	r3, r3, #1
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d022      	beq.n	8006236 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2205      	movs	r2, #5
 80061f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	681a      	ldr	r2, [r3, #0]
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f022 0201 	bic.w	r2, r2, #1
 8006206:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	3301      	adds	r3, #1
 800620c:	60bb      	str	r3, [r7, #8]
 800620e:	697a      	ldr	r2, [r7, #20]
 8006210:	429a      	cmp	r2, r3
 8006212:	d307      	bcc.n	8006224 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 0301 	and.w	r3, r3, #1
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1f2      	bne.n	8006208 <HAL_DMA_IRQHandler+0x2cc>
 8006222:	e000      	b.n	8006226 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8006224:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	2200      	movs	r2, #0
 8006232:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800623a:	2b00      	cmp	r3, #0
 800623c:	d005      	beq.n	800624a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006242:	6878      	ldr	r0, [r7, #4]
 8006244:	4798      	blx	r3
 8006246:	e000      	b.n	800624a <HAL_DMA_IRQHandler+0x30e>
        return;
 8006248:	bf00      	nop
    }
  }
}
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006250:	b480      	push	{r7}
 8006252:	b083      	sub	sp, #12
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800625e:	b2db      	uxtb	r3, r3
}
 8006260:	4618      	mov	r0, r3
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800626c:	b480      	push	{r7}
 800626e:	b083      	sub	sp, #12
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8006278:	4618      	mov	r0, r3
 800627a:	370c      	adds	r7, #12
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	60f8      	str	r0, [r7, #12]
 800628c:	60b9      	str	r1, [r7, #8]
 800628e:	607a      	str	r2, [r7, #4]
 8006290:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80062a0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	683a      	ldr	r2, [r7, #0]
 80062a8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	689b      	ldr	r3, [r3, #8]
 80062ae:	2b40      	cmp	r3, #64	; 0x40
 80062b0:	d108      	bne.n	80062c4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	68ba      	ldr	r2, [r7, #8]
 80062c0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80062c2:	e007      	b.n	80062d4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68ba      	ldr	r2, [r7, #8]
 80062ca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	60da      	str	r2, [r3, #12]
}
 80062d4:	bf00      	nop
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b085      	sub	sp, #20
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	b2db      	uxtb	r3, r3
 80062ee:	3b10      	subs	r3, #16
 80062f0:	4a14      	ldr	r2, [pc, #80]	; (8006344 <DMA_CalcBaseAndBitshift+0x64>)
 80062f2:	fba2 2303 	umull	r2, r3, r2, r3
 80062f6:	091b      	lsrs	r3, r3, #4
 80062f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80062fa:	4a13      	ldr	r2, [pc, #76]	; (8006348 <DMA_CalcBaseAndBitshift+0x68>)
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	4413      	add	r3, r2
 8006300:	781b      	ldrb	r3, [r3, #0]
 8006302:	461a      	mov	r2, r3
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	2b03      	cmp	r3, #3
 800630c:	d909      	bls.n	8006322 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8006316:	f023 0303 	bic.w	r3, r3, #3
 800631a:	1d1a      	adds	r2, r3, #4
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	659a      	str	r2, [r3, #88]	; 0x58
 8006320:	e007      	b.n	8006332 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800632a:	f023 0303 	bic.w	r3, r3, #3
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006336:	4618      	mov	r0, r3
 8006338:	3714      	adds	r7, #20
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr
 8006342:	bf00      	nop
 8006344:	aaaaaaab 	.word	0xaaaaaaab
 8006348:	08011190 	.word	0x08011190

0800634c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d11f      	bne.n	80063a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d856      	bhi.n	800641a <DMA_CheckFifoParam+0xce>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <DMA_CheckFifoParam+0x28>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	08006397 	.word	0x08006397
 800637c:	08006385 	.word	0x08006385
 8006380:	0800641b 	.word	0x0800641b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006388:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800638c:	2b00      	cmp	r3, #0
 800638e:	d046      	beq.n	800641e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006390:	2301      	movs	r3, #1
 8006392:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006394:	e043      	b.n	800641e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800639a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800639e:	d140      	bne.n	8006422 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063a4:	e03d      	b.n	8006422 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	699b      	ldr	r3, [r3, #24]
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	d121      	bne.n	80063f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d837      	bhi.n	8006426 <DMA_CheckFifoParam+0xda>
 80063b6:	a201      	add	r2, pc, #4	; (adr r2, 80063bc <DMA_CheckFifoParam+0x70>)
 80063b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063bc:	080063cd 	.word	0x080063cd
 80063c0:	080063d3 	.word	0x080063d3
 80063c4:	080063cd 	.word	0x080063cd
 80063c8:	080063e5 	.word	0x080063e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80063cc:	2301      	movs	r3, #1
 80063ce:	73fb      	strb	r3, [r7, #15]
      break;
 80063d0:	e030      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d025      	beq.n	800642a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80063e2:	e022      	b.n	800642a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80063ec:	d11f      	bne.n	800642e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80063ee:	2301      	movs	r3, #1
 80063f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80063f2:	e01c      	b.n	800642e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80063f4:	68bb      	ldr	r3, [r7, #8]
 80063f6:	2b02      	cmp	r3, #2
 80063f8:	d903      	bls.n	8006402 <DMA_CheckFifoParam+0xb6>
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	2b03      	cmp	r3, #3
 80063fe:	d003      	beq.n	8006408 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006400:	e018      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006402:	2301      	movs	r3, #1
 8006404:	73fb      	strb	r3, [r7, #15]
      break;
 8006406:	e015      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006410:	2b00      	cmp	r3, #0
 8006412:	d00e      	beq.n	8006432 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006414:	2301      	movs	r3, #1
 8006416:	73fb      	strb	r3, [r7, #15]
      break;
 8006418:	e00b      	b.n	8006432 <DMA_CheckFifoParam+0xe6>
      break;
 800641a:	bf00      	nop
 800641c:	e00a      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;
 800641e:	bf00      	nop
 8006420:	e008      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;
 8006422:	bf00      	nop
 8006424:	e006      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;
 8006426:	bf00      	nop
 8006428:	e004      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;
 800642a:	bf00      	nop
 800642c:	e002      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;   
 800642e:	bf00      	nop
 8006430:	e000      	b.n	8006434 <DMA_CheckFifoParam+0xe8>
      break;
 8006432:	bf00      	nop
    }
  } 
  
  return status; 
 8006434:	7bfb      	ldrb	r3, [r7, #15]
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop

08006444 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006444:	b480      	push	{r7}
 8006446:	b089      	sub	sp, #36	; 0x24
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
 800644c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800644e:	2300      	movs	r3, #0
 8006450:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006452:	2300      	movs	r3, #0
 8006454:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800645a:	2300      	movs	r3, #0
 800645c:	61fb      	str	r3, [r7, #28]
 800645e:	e159      	b.n	8006714 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006460:	2201      	movs	r2, #1
 8006462:	69fb      	ldr	r3, [r7, #28]
 8006464:	fa02 f303 	lsl.w	r3, r2, r3
 8006468:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	697a      	ldr	r2, [r7, #20]
 8006470:	4013      	ands	r3, r2
 8006472:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	697b      	ldr	r3, [r7, #20]
 8006478:	429a      	cmp	r2, r3
 800647a:	f040 8148 	bne.w	800670e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800647e:	683b      	ldr	r3, [r7, #0]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b01      	cmp	r3, #1
 8006488:	d005      	beq.n	8006496 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006492:	2b02      	cmp	r3, #2
 8006494:	d130      	bne.n	80064f8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	689b      	ldr	r3, [r3, #8]
 800649a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	005b      	lsls	r3, r3, #1
 80064a0:	2203      	movs	r2, #3
 80064a2:	fa02 f303 	lsl.w	r3, r2, r3
 80064a6:	43db      	mvns	r3, r3
 80064a8:	69ba      	ldr	r2, [r7, #24]
 80064aa:	4013      	ands	r3, r2
 80064ac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68da      	ldr	r2, [r3, #12]
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	005b      	lsls	r3, r3, #1
 80064b6:	fa02 f303 	lsl.w	r3, r2, r3
 80064ba:	69ba      	ldr	r2, [r7, #24]
 80064bc:	4313      	orrs	r3, r2
 80064be:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	69ba      	ldr	r2, [r7, #24]
 80064c4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80064cc:	2201      	movs	r2, #1
 80064ce:	69fb      	ldr	r3, [r7, #28]
 80064d0:	fa02 f303 	lsl.w	r3, r2, r3
 80064d4:	43db      	mvns	r3, r3
 80064d6:	69ba      	ldr	r2, [r7, #24]
 80064d8:	4013      	ands	r3, r2
 80064da:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	091b      	lsrs	r3, r3, #4
 80064e2:	f003 0201 	and.w	r2, r3, #1
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	fa02 f303 	lsl.w	r3, r2, r3
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	69ba      	ldr	r2, [r7, #24]
 80064f6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80064f8:	683b      	ldr	r3, [r7, #0]
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	f003 0303 	and.w	r3, r3, #3
 8006500:	2b03      	cmp	r3, #3
 8006502:	d017      	beq.n	8006534 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	005b      	lsls	r3, r3, #1
 800650e:	2203      	movs	r2, #3
 8006510:	fa02 f303 	lsl.w	r3, r2, r3
 8006514:	43db      	mvns	r3, r3
 8006516:	69ba      	ldr	r2, [r7, #24]
 8006518:	4013      	ands	r3, r2
 800651a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	689a      	ldr	r2, [r3, #8]
 8006520:	69fb      	ldr	r3, [r7, #28]
 8006522:	005b      	lsls	r3, r3, #1
 8006524:	fa02 f303 	lsl.w	r3, r2, r3
 8006528:	69ba      	ldr	r2, [r7, #24]
 800652a:	4313      	orrs	r3, r2
 800652c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	69ba      	ldr	r2, [r7, #24]
 8006532:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685b      	ldr	r3, [r3, #4]
 8006538:	f003 0303 	and.w	r3, r3, #3
 800653c:	2b02      	cmp	r3, #2
 800653e:	d123      	bne.n	8006588 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	08da      	lsrs	r2, r3, #3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	3208      	adds	r2, #8
 8006548:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800654e:	69fb      	ldr	r3, [r7, #28]
 8006550:	f003 0307 	and.w	r3, r3, #7
 8006554:	009b      	lsls	r3, r3, #2
 8006556:	220f      	movs	r2, #15
 8006558:	fa02 f303 	lsl.w	r3, r2, r3
 800655c:	43db      	mvns	r3, r3
 800655e:	69ba      	ldr	r2, [r7, #24]
 8006560:	4013      	ands	r3, r2
 8006562:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006564:	683b      	ldr	r3, [r7, #0]
 8006566:	691a      	ldr	r2, [r3, #16]
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	009b      	lsls	r3, r3, #2
 8006570:	fa02 f303 	lsl.w	r3, r2, r3
 8006574:	69ba      	ldr	r2, [r7, #24]
 8006576:	4313      	orrs	r3, r2
 8006578:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	08da      	lsrs	r2, r3, #3
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	3208      	adds	r2, #8
 8006582:	69b9      	ldr	r1, [r7, #24]
 8006584:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800658e:	69fb      	ldr	r3, [r7, #28]
 8006590:	005b      	lsls	r3, r3, #1
 8006592:	2203      	movs	r2, #3
 8006594:	fa02 f303 	lsl.w	r3, r2, r3
 8006598:	43db      	mvns	r3, r3
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	4013      	ands	r3, r2
 800659e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	f003 0203 	and.w	r2, r3, #3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	005b      	lsls	r3, r3, #1
 80065ac:	fa02 f303 	lsl.w	r3, r2, r3
 80065b0:	69ba      	ldr	r2, [r7, #24]
 80065b2:	4313      	orrs	r3, r2
 80065b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	69ba      	ldr	r2, [r7, #24]
 80065ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	685b      	ldr	r3, [r3, #4]
 80065c0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 80a2 	beq.w	800670e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
 80065ce:	4b57      	ldr	r3, [pc, #348]	; (800672c <HAL_GPIO_Init+0x2e8>)
 80065d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065d2:	4a56      	ldr	r2, [pc, #344]	; (800672c <HAL_GPIO_Init+0x2e8>)
 80065d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d8:	6453      	str	r3, [r2, #68]	; 0x44
 80065da:	4b54      	ldr	r3, [pc, #336]	; (800672c <HAL_GPIO_Init+0x2e8>)
 80065dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065e2:	60fb      	str	r3, [r7, #12]
 80065e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80065e6:	4a52      	ldr	r2, [pc, #328]	; (8006730 <HAL_GPIO_Init+0x2ec>)
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	089b      	lsrs	r3, r3, #2
 80065ec:	3302      	adds	r3, #2
 80065ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80065f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80065f4:	69fb      	ldr	r3, [r7, #28]
 80065f6:	f003 0303 	and.w	r3, r3, #3
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	220f      	movs	r2, #15
 80065fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006602:	43db      	mvns	r3, r3
 8006604:	69ba      	ldr	r2, [r7, #24]
 8006606:	4013      	ands	r3, r2
 8006608:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a49      	ldr	r2, [pc, #292]	; (8006734 <HAL_GPIO_Init+0x2f0>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d019      	beq.n	8006646 <HAL_GPIO_Init+0x202>
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	4a48      	ldr	r2, [pc, #288]	; (8006738 <HAL_GPIO_Init+0x2f4>)
 8006616:	4293      	cmp	r3, r2
 8006618:	d013      	beq.n	8006642 <HAL_GPIO_Init+0x1fe>
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	4a47      	ldr	r2, [pc, #284]	; (800673c <HAL_GPIO_Init+0x2f8>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d00d      	beq.n	800663e <HAL_GPIO_Init+0x1fa>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	4a46      	ldr	r2, [pc, #280]	; (8006740 <HAL_GPIO_Init+0x2fc>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d007      	beq.n	800663a <HAL_GPIO_Init+0x1f6>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	4a45      	ldr	r2, [pc, #276]	; (8006744 <HAL_GPIO_Init+0x300>)
 800662e:	4293      	cmp	r3, r2
 8006630:	d101      	bne.n	8006636 <HAL_GPIO_Init+0x1f2>
 8006632:	2304      	movs	r3, #4
 8006634:	e008      	b.n	8006648 <HAL_GPIO_Init+0x204>
 8006636:	2307      	movs	r3, #7
 8006638:	e006      	b.n	8006648 <HAL_GPIO_Init+0x204>
 800663a:	2303      	movs	r3, #3
 800663c:	e004      	b.n	8006648 <HAL_GPIO_Init+0x204>
 800663e:	2302      	movs	r3, #2
 8006640:	e002      	b.n	8006648 <HAL_GPIO_Init+0x204>
 8006642:	2301      	movs	r3, #1
 8006644:	e000      	b.n	8006648 <HAL_GPIO_Init+0x204>
 8006646:	2300      	movs	r3, #0
 8006648:	69fa      	ldr	r2, [r7, #28]
 800664a:	f002 0203 	and.w	r2, r2, #3
 800664e:	0092      	lsls	r2, r2, #2
 8006650:	4093      	lsls	r3, r2
 8006652:	69ba      	ldr	r2, [r7, #24]
 8006654:	4313      	orrs	r3, r2
 8006656:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006658:	4935      	ldr	r1, [pc, #212]	; (8006730 <HAL_GPIO_Init+0x2ec>)
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	089b      	lsrs	r3, r3, #2
 800665e:	3302      	adds	r3, #2
 8006660:	69ba      	ldr	r2, [r7, #24]
 8006662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006666:	4b38      	ldr	r3, [pc, #224]	; (8006748 <HAL_GPIO_Init+0x304>)
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800666c:	693b      	ldr	r3, [r7, #16]
 800666e:	43db      	mvns	r3, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4013      	ands	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800667e:	2b00      	cmp	r3, #0
 8006680:	d003      	beq.n	800668a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8006682:	69ba      	ldr	r2, [r7, #24]
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	4313      	orrs	r3, r2
 8006688:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800668a:	4a2f      	ldr	r2, [pc, #188]	; (8006748 <HAL_GPIO_Init+0x304>)
 800668c:	69bb      	ldr	r3, [r7, #24]
 800668e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006690:	4b2d      	ldr	r3, [pc, #180]	; (8006748 <HAL_GPIO_Init+0x304>)
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	43db      	mvns	r3, r3
 800669a:	69ba      	ldr	r2, [r7, #24]
 800669c:	4013      	ands	r3, r2
 800669e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80066a0:	683b      	ldr	r3, [r7, #0]
 80066a2:	685b      	ldr	r3, [r3, #4]
 80066a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80066ac:	69ba      	ldr	r2, [r7, #24]
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	4313      	orrs	r3, r2
 80066b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80066b4:	4a24      	ldr	r2, [pc, #144]	; (8006748 <HAL_GPIO_Init+0x304>)
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80066ba:	4b23      	ldr	r3, [pc, #140]	; (8006748 <HAL_GPIO_Init+0x304>)
 80066bc:	685b      	ldr	r3, [r3, #4]
 80066be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066c0:	693b      	ldr	r3, [r7, #16]
 80066c2:	43db      	mvns	r3, r3
 80066c4:	69ba      	ldr	r2, [r7, #24]
 80066c6:	4013      	ands	r3, r2
 80066c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80066d6:	69ba      	ldr	r2, [r7, #24]
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	4313      	orrs	r3, r2
 80066dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80066de:	4a1a      	ldr	r2, [pc, #104]	; (8006748 <HAL_GPIO_Init+0x304>)
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80066e4:	4b18      	ldr	r3, [pc, #96]	; (8006748 <HAL_GPIO_Init+0x304>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	43db      	mvns	r3, r3
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	4013      	ands	r3, r2
 80066f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8006700:	69ba      	ldr	r2, [r7, #24]
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	4313      	orrs	r3, r2
 8006706:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006708:	4a0f      	ldr	r2, [pc, #60]	; (8006748 <HAL_GPIO_Init+0x304>)
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800670e:	69fb      	ldr	r3, [r7, #28]
 8006710:	3301      	adds	r3, #1
 8006712:	61fb      	str	r3, [r7, #28]
 8006714:	69fb      	ldr	r3, [r7, #28]
 8006716:	2b0f      	cmp	r3, #15
 8006718:	f67f aea2 	bls.w	8006460 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800671c:	bf00      	nop
 800671e:	bf00      	nop
 8006720:	3724      	adds	r7, #36	; 0x24
 8006722:	46bd      	mov	sp, r7
 8006724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006728:	4770      	bx	lr
 800672a:	bf00      	nop
 800672c:	40023800 	.word	0x40023800
 8006730:	40013800 	.word	0x40013800
 8006734:	40020000 	.word	0x40020000
 8006738:	40020400 	.word	0x40020400
 800673c:	40020800 	.word	0x40020800
 8006740:	40020c00 	.word	0x40020c00
 8006744:	40021000 	.word	0x40021000
 8006748:	40013c00 	.word	0x40013c00

0800674c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800674c:	b480      	push	{r7}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
 8006754:	460b      	mov	r3, r1
 8006756:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	691a      	ldr	r2, [r3, #16]
 800675c:	887b      	ldrh	r3, [r7, #2]
 800675e:	4013      	ands	r3, r2
 8006760:	2b00      	cmp	r3, #0
 8006762:	d002      	beq.n	800676a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006764:	2301      	movs	r3, #1
 8006766:	73fb      	strb	r3, [r7, #15]
 8006768:	e001      	b.n	800676e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800676a:	2300      	movs	r3, #0
 800676c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800676e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3714      	adds	r7, #20
 8006774:	46bd      	mov	sp, r7
 8006776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800677a:	4770      	bx	lr

0800677c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800677c:	b480      	push	{r7}
 800677e:	b083      	sub	sp, #12
 8006780:	af00      	add	r7, sp, #0
 8006782:	6078      	str	r0, [r7, #4]
 8006784:	460b      	mov	r3, r1
 8006786:	807b      	strh	r3, [r7, #2]
 8006788:	4613      	mov	r3, r2
 800678a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800678c:	787b      	ldrb	r3, [r7, #1]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d003      	beq.n	800679a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006792:	887a      	ldrh	r2, [r7, #2]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006798:	e003      	b.n	80067a2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800679a:	887b      	ldrh	r3, [r7, #2]
 800679c:	041a      	lsls	r2, r3, #16
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	619a      	str	r2, [r3, #24]
}
 80067a2:	bf00      	nop
 80067a4:	370c      	adds	r7, #12
 80067a6:	46bd      	mov	sp, r7
 80067a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ac:	4770      	bx	lr
	...

080067b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	4603      	mov	r3, r0
 80067b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80067ba:	4b08      	ldr	r3, [pc, #32]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067bc:	695a      	ldr	r2, [r3, #20]
 80067be:	88fb      	ldrh	r3, [r7, #6]
 80067c0:	4013      	ands	r3, r2
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d006      	beq.n	80067d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80067c6:	4a05      	ldr	r2, [pc, #20]	; (80067dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	4618      	mov	r0, r3
 80067d0:	f7fb fe70 	bl	80024b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80067d4:	bf00      	nop
 80067d6:	3708      	adds	r7, #8
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40013c00 	.word	0x40013c00

080067e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d101      	bne.n	80067f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80067ee:	2301      	movs	r3, #1
 80067f0:	e12b      	b.n	8006a4a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067f8:	b2db      	uxtb	r3, r3
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d106      	bne.n	800680c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	2200      	movs	r2, #0
 8006802:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7fe f88e 	bl	8004928 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2224      	movs	r2, #36	; 0x24
 8006810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f022 0201 	bic.w	r2, r2, #1
 8006822:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	681a      	ldr	r2, [r3, #0]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006832:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006842:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006844:	f002 fe10 	bl	8009468 <HAL_RCC_GetPCLK1Freq>
 8006848:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	4a81      	ldr	r2, [pc, #516]	; (8006a54 <HAL_I2C_Init+0x274>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d807      	bhi.n	8006864 <HAL_I2C_Init+0x84>
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	4a80      	ldr	r2, [pc, #512]	; (8006a58 <HAL_I2C_Init+0x278>)
 8006858:	4293      	cmp	r3, r2
 800685a:	bf94      	ite	ls
 800685c:	2301      	movls	r3, #1
 800685e:	2300      	movhi	r3, #0
 8006860:	b2db      	uxtb	r3, r3
 8006862:	e006      	b.n	8006872 <HAL_I2C_Init+0x92>
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	4a7d      	ldr	r2, [pc, #500]	; (8006a5c <HAL_I2C_Init+0x27c>)
 8006868:	4293      	cmp	r3, r2
 800686a:	bf94      	ite	ls
 800686c:	2301      	movls	r3, #1
 800686e:	2300      	movhi	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e0e7      	b.n	8006a4a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a78      	ldr	r2, [pc, #480]	; (8006a60 <HAL_I2C_Init+0x280>)
 800687e:	fba2 2303 	umull	r2, r3, r2, r3
 8006882:	0c9b      	lsrs	r3, r3, #18
 8006884:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	430a      	orrs	r2, r1
 8006898:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	6a1b      	ldr	r3, [r3, #32]
 80068a0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	685b      	ldr	r3, [r3, #4]
 80068a8:	4a6a      	ldr	r2, [pc, #424]	; (8006a54 <HAL_I2C_Init+0x274>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d802      	bhi.n	80068b4 <HAL_I2C_Init+0xd4>
 80068ae:	68bb      	ldr	r3, [r7, #8]
 80068b0:	3301      	adds	r3, #1
 80068b2:	e009      	b.n	80068c8 <HAL_I2C_Init+0xe8>
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80068ba:	fb02 f303 	mul.w	r3, r2, r3
 80068be:	4a69      	ldr	r2, [pc, #420]	; (8006a64 <HAL_I2C_Init+0x284>)
 80068c0:	fba2 2303 	umull	r2, r3, r2, r3
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	3301      	adds	r3, #1
 80068c8:	687a      	ldr	r2, [r7, #4]
 80068ca:	6812      	ldr	r2, [r2, #0]
 80068cc:	430b      	orrs	r3, r1
 80068ce:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	69db      	ldr	r3, [r3, #28]
 80068d6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80068da:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	685b      	ldr	r3, [r3, #4]
 80068e2:	495c      	ldr	r1, [pc, #368]	; (8006a54 <HAL_I2C_Init+0x274>)
 80068e4:	428b      	cmp	r3, r1
 80068e6:	d819      	bhi.n	800691c <HAL_I2C_Init+0x13c>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	1e59      	subs	r1, r3, #1
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	005b      	lsls	r3, r3, #1
 80068f2:	fbb1 f3f3 	udiv	r3, r1, r3
 80068f6:	1c59      	adds	r1, r3, #1
 80068f8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80068fc:	400b      	ands	r3, r1
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d00a      	beq.n	8006918 <HAL_I2C_Init+0x138>
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	1e59      	subs	r1, r3, #1
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	005b      	lsls	r3, r3, #1
 800690c:	fbb1 f3f3 	udiv	r3, r1, r3
 8006910:	3301      	adds	r3, #1
 8006912:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006916:	e051      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 8006918:	2304      	movs	r3, #4
 800691a:	e04f      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d111      	bne.n	8006948 <HAL_I2C_Init+0x168>
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	1e58      	subs	r0, r3, #1
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6859      	ldr	r1, [r3, #4]
 800692c:	460b      	mov	r3, r1
 800692e:	005b      	lsls	r3, r3, #1
 8006930:	440b      	add	r3, r1
 8006932:	fbb0 f3f3 	udiv	r3, r0, r3
 8006936:	3301      	adds	r3, #1
 8006938:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693c:	2b00      	cmp	r3, #0
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	e012      	b.n	800696e <HAL_I2C_Init+0x18e>
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	1e58      	subs	r0, r3, #1
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6859      	ldr	r1, [r3, #4]
 8006950:	460b      	mov	r3, r1
 8006952:	009b      	lsls	r3, r3, #2
 8006954:	440b      	add	r3, r1
 8006956:	0099      	lsls	r1, r3, #2
 8006958:	440b      	add	r3, r1
 800695a:	fbb0 f3f3 	udiv	r3, r0, r3
 800695e:	3301      	adds	r3, #1
 8006960:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006964:	2b00      	cmp	r3, #0
 8006966:	bf0c      	ite	eq
 8006968:	2301      	moveq	r3, #1
 800696a:	2300      	movne	r3, #0
 800696c:	b2db      	uxtb	r3, r3
 800696e:	2b00      	cmp	r3, #0
 8006970:	d001      	beq.n	8006976 <HAL_I2C_Init+0x196>
 8006972:	2301      	movs	r3, #1
 8006974:	e022      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	689b      	ldr	r3, [r3, #8]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d10e      	bne.n	800699c <HAL_I2C_Init+0x1bc>
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	1e58      	subs	r0, r3, #1
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	6859      	ldr	r1, [r3, #4]
 8006986:	460b      	mov	r3, r1
 8006988:	005b      	lsls	r3, r3, #1
 800698a:	440b      	add	r3, r1
 800698c:	fbb0 f3f3 	udiv	r3, r0, r3
 8006990:	3301      	adds	r3, #1
 8006992:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006996:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800699a:	e00f      	b.n	80069bc <HAL_I2C_Init+0x1dc>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1e58      	subs	r0, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	6859      	ldr	r1, [r3, #4]
 80069a4:	460b      	mov	r3, r1
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	440b      	add	r3, r1
 80069aa:	0099      	lsls	r1, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80069b2:	3301      	adds	r3, #1
 80069b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80069b8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80069bc:	6879      	ldr	r1, [r7, #4]
 80069be:	6809      	ldr	r1, [r1, #0]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69da      	ldr	r2, [r3, #28]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	431a      	orrs	r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80069ea:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	6911      	ldr	r1, [r2, #16]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	68d2      	ldr	r2, [r2, #12]
 80069f6:	4311      	orrs	r1, r2
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	6812      	ldr	r2, [r2, #0]
 80069fc:	430b      	orrs	r3, r1
 80069fe:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	68db      	ldr	r3, [r3, #12]
 8006a06:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	695a      	ldr	r2, [r3, #20]
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	431a      	orrs	r2, r3
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	430a      	orrs	r2, r1
 8006a1a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	681a      	ldr	r2, [r3, #0]
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	f042 0201 	orr.w	r2, r2, #1
 8006a2a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2200      	movs	r2, #0
 8006a30:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2220      	movs	r2, #32
 8006a36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006a48:	2300      	movs	r3, #0
}
 8006a4a:	4618      	mov	r0, r3
 8006a4c:	3710      	adds	r7, #16
 8006a4e:	46bd      	mov	sp, r7
 8006a50:	bd80      	pop	{r7, pc}
 8006a52:	bf00      	nop
 8006a54:	000186a0 	.word	0x000186a0
 8006a58:	001e847f 	.word	0x001e847f
 8006a5c:	003d08ff 	.word	0x003d08ff
 8006a60:	431bde83 	.word	0x431bde83
 8006a64:	10624dd3 	.word	0x10624dd3

08006a68 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	b088      	sub	sp, #32
 8006a6c:	af02      	add	r7, sp, #8
 8006a6e:	60f8      	str	r0, [r7, #12]
 8006a70:	607a      	str	r2, [r7, #4]
 8006a72:	461a      	mov	r2, r3
 8006a74:	460b      	mov	r3, r1
 8006a76:	817b      	strh	r3, [r7, #10]
 8006a78:	4613      	mov	r3, r2
 8006a7a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7fe fb82 	bl	8005184 <HAL_GetTick>
 8006a80:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006a88:	b2db      	uxtb	r3, r3
 8006a8a:	2b20      	cmp	r3, #32
 8006a8c:	f040 80e0 	bne.w	8006c50 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8006a90:	697b      	ldr	r3, [r7, #20]
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2319      	movs	r3, #25
 8006a96:	2201      	movs	r2, #1
 8006a98:	4970      	ldr	r1, [pc, #448]	; (8006c5c <HAL_I2C_Master_Transmit+0x1f4>)
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f001 fea0 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006aa6:	2302      	movs	r3, #2
 8006aa8:	e0d3      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d101      	bne.n	8006ab8 <HAL_I2C_Master_Transmit+0x50>
 8006ab4:	2302      	movs	r3, #2
 8006ab6:	e0cc      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	2201      	movs	r2, #1
 8006abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	f003 0301 	and.w	r3, r3, #1
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	d007      	beq.n	8006ade <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f042 0201 	orr.w	r2, r2, #1
 8006adc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	681a      	ldr	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006aec:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2221      	movs	r2, #33	; 0x21
 8006af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	2210      	movs	r2, #16
 8006afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	2200      	movs	r2, #0
 8006b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	687a      	ldr	r2, [r7, #4]
 8006b08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	893a      	ldrh	r2, [r7, #8]
 8006b0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b14:	b29a      	uxth	r2, r3
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	4a50      	ldr	r2, [pc, #320]	; (8006c60 <HAL_I2C_Master_Transmit+0x1f8>)
 8006b1e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8006b20:	8979      	ldrh	r1, [r7, #10]
 8006b22:	697b      	ldr	r3, [r7, #20]
 8006b24:	6a3a      	ldr	r2, [r7, #32]
 8006b26:	68f8      	ldr	r0, [r7, #12]
 8006b28:	f001 fd30 	bl	800858c <I2C_MasterRequestWrite>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d001      	beq.n	8006b36 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8006b32:	2301      	movs	r3, #1
 8006b34:	e08d      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006b36:	2300      	movs	r3, #0
 8006b38:	613b      	str	r3, [r7, #16]
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	695b      	ldr	r3, [r3, #20]
 8006b40:	613b      	str	r3, [r7, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	613b      	str	r3, [r7, #16]
 8006b4a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8006b4c:	e066      	b.n	8006c1c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006b4e:	697a      	ldr	r2, [r7, #20]
 8006b50:	6a39      	ldr	r1, [r7, #32]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f001 ff1a 	bl	800898c <I2C_WaitOnTXEFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00d      	beq.n	8006b7a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b62:	2b04      	cmp	r3, #4
 8006b64:	d107      	bne.n	8006b76 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b74:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006b76:	2301      	movs	r3, #1
 8006b78:	e06b      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	781a      	ldrb	r2, [r3, #0]
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba2:	3b01      	subs	r3, #1
 8006ba4:	b29a      	uxth	r2, r3
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	f003 0304 	and.w	r3, r3, #4
 8006bb4:	2b04      	cmp	r3, #4
 8006bb6:	d11b      	bne.n	8006bf0 <HAL_I2C_Master_Transmit+0x188>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d017      	beq.n	8006bf0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd0:	1c5a      	adds	r2, r3, #1
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bda:	b29b      	uxth	r3, r3
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	b29a      	uxth	r2, r3
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006be8:	3b01      	subs	r3, #1
 8006bea:	b29a      	uxth	r2, r3
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bf0:	697a      	ldr	r2, [r7, #20]
 8006bf2:	6a39      	ldr	r1, [r7, #32]
 8006bf4:	68f8      	ldr	r0, [r7, #12]
 8006bf6:	f001 ff0a 	bl	8008a0e <I2C_WaitOnBTFFlagUntilTimeout>
 8006bfa:	4603      	mov	r3, r0
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00d      	beq.n	8006c1c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c04:	2b04      	cmp	r3, #4
 8006c06:	d107      	bne.n	8006c18 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	681a      	ldr	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c16:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e01a      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d194      	bne.n	8006b4e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006c32:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	2220      	movs	r2, #32
 8006c38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2200      	movs	r2, #0
 8006c48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c4c:	2300      	movs	r3, #0
 8006c4e:	e000      	b.n	8006c52 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8006c50:	2302      	movs	r3, #2
  }
}
 8006c52:	4618      	mov	r0, r3
 8006c54:	3718      	adds	r7, #24
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	00100002 	.word	0x00100002
 8006c60:	ffff0000 	.word	0xffff0000

08006c64 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8006c64:	b480      	push	{r7}
 8006c66:	b087      	sub	sp, #28
 8006c68:	af00      	add	r7, sp, #0
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	607a      	str	r2, [r7, #4]
 8006c6e:	461a      	mov	r2, r3
 8006c70:	460b      	mov	r3, r1
 8006c72:	817b      	strh	r3, [r7, #10]
 8006c74:	4613      	mov	r3, r2
 8006c76:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c82:	b2db      	uxtb	r3, r3
 8006c84:	2b20      	cmp	r3, #32
 8006c86:	f040 808d 	bne.w	8006da4 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8006c8a:	4b4a      	ldr	r3, [pc, #296]	; (8006db4 <HAL_I2C_Master_Receive_IT+0x150>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	08db      	lsrs	r3, r3, #3
 8006c90:	4a49      	ldr	r2, [pc, #292]	; (8006db8 <HAL_I2C_Master_Receive_IT+0x154>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	0a1a      	lsrs	r2, r3, #8
 8006c98:	4613      	mov	r3, r2
 8006c9a:	009b      	lsls	r3, r3, #2
 8006c9c:	4413      	add	r3, r2
 8006c9e:	009a      	lsls	r2, r3, #2
 8006ca0:	4413      	add	r3, r2
 8006ca2:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	3b01      	subs	r3, #1
 8006ca8:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8006caa:	697b      	ldr	r3, [r7, #20]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d116      	bne.n	8006cde <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cca:	f043 0220 	orr.w	r2, r3, #32
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e063      	b.n	8006da6 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	699b      	ldr	r3, [r3, #24]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	d0db      	beq.n	8006ca4 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	d101      	bne.n	8006cfa <HAL_I2C_Master_Receive_IT+0x96>
 8006cf6:	2302      	movs	r3, #2
 8006cf8:	e055      	b.n	8006da6 <HAL_I2C_Master_Receive_IT+0x142>
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0301 	and.w	r3, r3, #1
 8006d0c:	2b01      	cmp	r3, #1
 8006d0e:	d007      	beq.n	8006d20 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f042 0201 	orr.w	r2, r2, #1
 8006d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	681a      	ldr	r2, [r3, #0]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2222      	movs	r2, #34	; 0x22
 8006d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	2210      	movs	r2, #16
 8006d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2200      	movs	r2, #0
 8006d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	893a      	ldrh	r2, [r7, #8]
 8006d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d56:	b29a      	uxth	r2, r3
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	4a17      	ldr	r2, [pc, #92]	; (8006dbc <HAL_I2C_Master_Receive_IT+0x158>)
 8006d60:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8006d62:	897a      	ldrh	r2, [r7, #10]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	645a      	str	r2, [r3, #68]	; 0x44


    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8006d7e:	605a      	str	r2, [r3, #4]

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	681a      	ldr	r2, [r3, #0]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d8e:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8006da0:	2300      	movs	r3, #0
 8006da2:	e000      	b.n	8006da6 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8006da4:	2302      	movs	r3, #2
  }
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	371c      	adds	r7, #28
 8006daa:	46bd      	mov	sp, r7
 8006dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000250 	.word	0x20000250
 8006db8:	14f8b589 	.word	0x14f8b589
 8006dbc:	ffff0000 	.word	0xffff0000

08006dc0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b088      	sub	sp, #32
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006de0:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006de8:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8006dea:	7bfb      	ldrb	r3, [r7, #15]
 8006dec:	2b10      	cmp	r3, #16
 8006dee:	d003      	beq.n	8006df8 <HAL_I2C_EV_IRQHandler+0x38>
 8006df0:	7bfb      	ldrb	r3, [r7, #15]
 8006df2:	2b40      	cmp	r3, #64	; 0x40
 8006df4:	f040 80c1 	bne.w	8006f7a <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	699b      	ldr	r3, [r3, #24]
 8006dfe:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	695b      	ldr	r3, [r3, #20]
 8006e06:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d10d      	bne.n	8006e2e <HAL_I2C_EV_IRQHandler+0x6e>
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006e18:	d003      	beq.n	8006e22 <HAL_I2C_EV_IRQHandler+0x62>
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006e20:	d101      	bne.n	8006e26 <HAL_I2C_EV_IRQHandler+0x66>
 8006e22:	2301      	movs	r3, #1
 8006e24:	e000      	b.n	8006e28 <HAL_I2C_EV_IRQHandler+0x68>
 8006e26:	2300      	movs	r3, #0
 8006e28:	2b01      	cmp	r3, #1
 8006e2a:	f000 8132 	beq.w	8007092 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e2e:	69fb      	ldr	r3, [r7, #28]
 8006e30:	f003 0301 	and.w	r3, r3, #1
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d00c      	beq.n	8006e52 <HAL_I2C_EV_IRQHandler+0x92>
 8006e38:	697b      	ldr	r3, [r7, #20]
 8006e3a:	0a5b      	lsrs	r3, r3, #9
 8006e3c:	f003 0301 	and.w	r3, r3, #1
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d006      	beq.n	8006e52 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f001 fe84 	bl	8008b52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fd83 	bl	8007956 <I2C_Master_SB>
 8006e50:	e092      	b.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	08db      	lsrs	r3, r3, #3
 8006e56:	f003 0301 	and.w	r3, r3, #1
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d009      	beq.n	8006e72 <HAL_I2C_EV_IRQHandler+0xb2>
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	0a5b      	lsrs	r3, r3, #9
 8006e62:	f003 0301 	and.w	r3, r3, #1
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d003      	beq.n	8006e72 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fdf9 	bl	8007a62 <I2C_Master_ADD10>
 8006e70:	e082      	b.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006e72:	69fb      	ldr	r3, [r7, #28]
 8006e74:	085b      	lsrs	r3, r3, #1
 8006e76:	f003 0301 	and.w	r3, r3, #1
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d009      	beq.n	8006e92 <HAL_I2C_EV_IRQHandler+0xd2>
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	0a5b      	lsrs	r3, r3, #9
 8006e82:	f003 0301 	and.w	r3, r3, #1
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 fe13 	bl	8007ab6 <I2C_Master_ADDR>
 8006e90:	e072      	b.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8006e92:	69bb      	ldr	r3, [r7, #24]
 8006e94:	089b      	lsrs	r3, r3, #2
 8006e96:	f003 0301 	and.w	r3, r3, #1
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d03b      	beq.n	8006f16 <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006eac:	f000 80f3 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006eb0:	69fb      	ldr	r3, [r7, #28]
 8006eb2:	09db      	lsrs	r3, r3, #7
 8006eb4:	f003 0301 	and.w	r3, r3, #1
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d00f      	beq.n	8006edc <HAL_I2C_EV_IRQHandler+0x11c>
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	0a9b      	lsrs	r3, r3, #10
 8006ec0:	f003 0301 	and.w	r3, r3, #1
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d009      	beq.n	8006edc <HAL_I2C_EV_IRQHandler+0x11c>
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	089b      	lsrs	r3, r3, #2
 8006ecc:	f003 0301 	and.w	r3, r3, #1
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d103      	bne.n	8006edc <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8006ed4:	6878      	ldr	r0, [r7, #4]
 8006ed6:	f000 f9f3 	bl	80072c0 <I2C_MasterTransmit_TXE>
 8006eda:	e04d      	b.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	089b      	lsrs	r3, r3, #2
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f000 80d6 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006eea:	697b      	ldr	r3, [r7, #20]
 8006eec:	0a5b      	lsrs	r3, r3, #9
 8006eee:	f003 0301 	and.w	r3, r3, #1
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	f000 80cf 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006ef8:	7bbb      	ldrb	r3, [r7, #14]
 8006efa:	2b21      	cmp	r3, #33	; 0x21
 8006efc:	d103      	bne.n	8006f06 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa7a 	bl	80073f8 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f04:	e0c7      	b.n	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8006f06:	7bfb      	ldrb	r3, [r7, #15]
 8006f08:	2b40      	cmp	r3, #64	; 0x40
 8006f0a:	f040 80c4 	bne.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8006f0e:	6878      	ldr	r0, [r7, #4]
 8006f10:	f000 fae8 	bl	80074e4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f14:	e0bf      	b.n	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006f24:	f000 80b7 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006f28:	69fb      	ldr	r3, [r7, #28]
 8006f2a:	099b      	lsrs	r3, r3, #6
 8006f2c:	f003 0301 	and.w	r3, r3, #1
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d00f      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x194>
 8006f34:	697b      	ldr	r3, [r7, #20]
 8006f36:	0a9b      	lsrs	r3, r3, #10
 8006f38:	f003 0301 	and.w	r3, r3, #1
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d009      	beq.n	8006f54 <HAL_I2C_EV_IRQHandler+0x194>
 8006f40:	69fb      	ldr	r3, [r7, #28]
 8006f42:	089b      	lsrs	r3, r3, #2
 8006f44:	f003 0301 	and.w	r3, r3, #1
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d103      	bne.n	8006f54 <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8006f4c:	6878      	ldr	r0, [r7, #4]
 8006f4e:	f000 fb5d 	bl	800760c <I2C_MasterReceive_RXNE>
 8006f52:	e011      	b.n	8006f78 <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f54:	69fb      	ldr	r3, [r7, #28]
 8006f56:	089b      	lsrs	r3, r3, #2
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	f000 809a 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	0a5b      	lsrs	r3, r3, #9
 8006f66:	f003 0301 	and.w	r3, r3, #1
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	f000 8093 	beq.w	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 8006f70:	6878      	ldr	r0, [r7, #4]
 8006f72:	f000 fc06 	bl	8007782 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f76:	e08e      	b.n	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
 8006f78:	e08d      	b.n	8007096 <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d004      	beq.n	8006f8c <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	695b      	ldr	r3, [r3, #20]
 8006f88:	61fb      	str	r3, [r7, #28]
 8006f8a:	e007      	b.n	8006f9c <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	699b      	ldr	r3, [r3, #24]
 8006f92:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	695b      	ldr	r3, [r3, #20]
 8006f9a:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	085b      	lsrs	r3, r3, #1
 8006fa0:	f003 0301 	and.w	r3, r3, #1
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d012      	beq.n	8006fce <HAL_I2C_EV_IRQHandler+0x20e>
 8006fa8:	697b      	ldr	r3, [r7, #20]
 8006faa:	0a5b      	lsrs	r3, r3, #9
 8006fac:	f003 0301 	and.w	r3, r3, #1
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d00c      	beq.n	8006fce <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d003      	beq.n	8006fc4 <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	699b      	ldr	r3, [r3, #24]
 8006fc2:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8006fc4:	69b9      	ldr	r1, [r7, #24]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 ffc4 	bl	8007f54 <I2C_Slave_ADDR>
 8006fcc:	e066      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	091b      	lsrs	r3, r3, #4
 8006fd2:	f003 0301 	and.w	r3, r3, #1
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d009      	beq.n	8006fee <HAL_I2C_EV_IRQHandler+0x22e>
 8006fda:	697b      	ldr	r3, [r7, #20]
 8006fdc:	0a5b      	lsrs	r3, r3, #9
 8006fde:	f003 0301 	and.w	r3, r3, #1
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d003      	beq.n	8006fee <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8006fe6:	6878      	ldr	r0, [r7, #4]
 8006fe8:	f000 fffe 	bl	8007fe8 <I2C_Slave_STOPF>
 8006fec:	e056      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006fee:	7bbb      	ldrb	r3, [r7, #14]
 8006ff0:	2b21      	cmp	r3, #33	; 0x21
 8006ff2:	d002      	beq.n	8006ffa <HAL_I2C_EV_IRQHandler+0x23a>
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	2b29      	cmp	r3, #41	; 0x29
 8006ff8:	d125      	bne.n	8007046 <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8006ffa:	69fb      	ldr	r3, [r7, #28]
 8006ffc:	09db      	lsrs	r3, r3, #7
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d00f      	beq.n	8007026 <HAL_I2C_EV_IRQHandler+0x266>
 8007006:	697b      	ldr	r3, [r7, #20]
 8007008:	0a9b      	lsrs	r3, r3, #10
 800700a:	f003 0301 	and.w	r3, r3, #1
 800700e:	2b00      	cmp	r3, #0
 8007010:	d009      	beq.n	8007026 <HAL_I2C_EV_IRQHandler+0x266>
 8007012:	69fb      	ldr	r3, [r7, #28]
 8007014:	089b      	lsrs	r3, r3, #2
 8007016:	f003 0301 	and.w	r3, r3, #1
 800701a:	2b00      	cmp	r3, #0
 800701c:	d103      	bne.n	8007026 <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 feda 	bl	8007dd8 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007024:	e039      	b.n	800709a <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007026:	69fb      	ldr	r3, [r7, #28]
 8007028:	089b      	lsrs	r3, r3, #2
 800702a:	f003 0301 	and.w	r3, r3, #1
 800702e:	2b00      	cmp	r3, #0
 8007030:	d033      	beq.n	800709a <HAL_I2C_EV_IRQHandler+0x2da>
 8007032:	697b      	ldr	r3, [r7, #20]
 8007034:	0a5b      	lsrs	r3, r3, #9
 8007036:	f003 0301 	and.w	r3, r3, #1
 800703a:	2b00      	cmp	r3, #0
 800703c:	d02d      	beq.n	800709a <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 ff07 	bl	8007e52 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007044:	e029      	b.n	800709a <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8007046:	69fb      	ldr	r3, [r7, #28]
 8007048:	099b      	lsrs	r3, r3, #6
 800704a:	f003 0301 	and.w	r3, r3, #1
 800704e:	2b00      	cmp	r3, #0
 8007050:	d00f      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x2b2>
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	0a9b      	lsrs	r3, r3, #10
 8007056:	f003 0301 	and.w	r3, r3, #1
 800705a:	2b00      	cmp	r3, #0
 800705c:	d009      	beq.n	8007072 <HAL_I2C_EV_IRQHandler+0x2b2>
 800705e:	69fb      	ldr	r3, [r7, #28]
 8007060:	089b      	lsrs	r3, r3, #2
 8007062:	f003 0301 	and.w	r3, r3, #1
 8007066:	2b00      	cmp	r3, #0
 8007068:	d103      	bne.n	8007072 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 ff12 	bl	8007e94 <I2C_SlaveReceive_RXNE>
 8007070:	e014      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	089b      	lsrs	r3, r3, #2
 8007076:	f003 0301 	and.w	r3, r3, #1
 800707a:	2b00      	cmp	r3, #0
 800707c:	d00e      	beq.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	0a5b      	lsrs	r3, r3, #9
 8007082:	f003 0301 	and.w	r3, r3, #1
 8007086:	2b00      	cmp	r3, #0
 8007088:	d008      	beq.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f000 ff40 	bl	8007f10 <I2C_SlaveReceive_BTF>
 8007090:	e004      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8007092:	bf00      	nop
 8007094:	e002      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8007096:	bf00      	nop
 8007098:	e000      	b.n	800709c <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800709a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800709c:	3720      	adds	r7, #32
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b08a      	sub	sp, #40	; 0x28
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	695b      	ldr	r3, [r3, #20]
 80070b0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80070c4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070c6:	6a3b      	ldr	r3, [r7, #32]
 80070c8:	0a1b      	lsrs	r3, r3, #8
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00e      	beq.n	80070f0 <HAL_I2C_ER_IRQHandler+0x4e>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	0a1b      	lsrs	r3, r3, #8
 80070d6:	f003 0301 	and.w	r3, r3, #1
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d008      	beq.n	80070f0 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	f043 0301 	orr.w	r3, r3, #1
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80070ee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80070f0:	6a3b      	ldr	r3, [r7, #32]
 80070f2:	0a5b      	lsrs	r3, r3, #9
 80070f4:	f003 0301 	and.w	r3, r3, #1
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00e      	beq.n	800711a <HAL_I2C_ER_IRQHandler+0x78>
 80070fc:	69fb      	ldr	r3, [r7, #28]
 80070fe:	0a1b      	lsrs	r3, r3, #8
 8007100:	f003 0301 	and.w	r3, r3, #1
 8007104:	2b00      	cmp	r3, #0
 8007106:	d008      	beq.n	800711a <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8007108:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800710a:	f043 0302 	orr.w	r3, r3, #2
 800710e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8007118:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	0a9b      	lsrs	r3, r3, #10
 800711e:	f003 0301 	and.w	r3, r3, #1
 8007122:	2b00      	cmp	r3, #0
 8007124:	d03f      	beq.n	80071a6 <HAL_I2C_ER_IRQHandler+0x104>
 8007126:	69fb      	ldr	r3, [r7, #28]
 8007128:	0a1b      	lsrs	r3, r3, #8
 800712a:	f003 0301 	and.w	r3, r3, #1
 800712e:	2b00      	cmp	r3, #0
 8007130:	d039      	beq.n	80071a6 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8007132:	7efb      	ldrb	r3, [r7, #27]
 8007134:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800713a:	b29b      	uxth	r3, r3
 800713c:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007144:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800714a:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800714c:	7ebb      	ldrb	r3, [r7, #26]
 800714e:	2b20      	cmp	r3, #32
 8007150:	d112      	bne.n	8007178 <HAL_I2C_ER_IRQHandler+0xd6>
 8007152:	697b      	ldr	r3, [r7, #20]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d10f      	bne.n	8007178 <HAL_I2C_ER_IRQHandler+0xd6>
 8007158:	7cfb      	ldrb	r3, [r7, #19]
 800715a:	2b21      	cmp	r3, #33	; 0x21
 800715c:	d008      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800715e:	7cfb      	ldrb	r3, [r7, #19]
 8007160:	2b29      	cmp	r3, #41	; 0x29
 8007162:	d005      	beq.n	8007170 <HAL_I2C_ER_IRQHandler+0xce>
 8007164:	7cfb      	ldrb	r3, [r7, #19]
 8007166:	2b28      	cmp	r3, #40	; 0x28
 8007168:	d106      	bne.n	8007178 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2b21      	cmp	r3, #33	; 0x21
 800716e:	d103      	bne.n	8007178 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f001 f869 	bl	8008248 <I2C_Slave_AF>
 8007176:	e016      	b.n	80071a6 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007180:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8007182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007184:	f043 0304 	orr.w	r3, r3, #4
 8007188:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800718a:	7efb      	ldrb	r3, [r7, #27]
 800718c:	2b10      	cmp	r3, #16
 800718e:	d002      	beq.n	8007196 <HAL_I2C_ER_IRQHandler+0xf4>
 8007190:	7efb      	ldrb	r3, [r7, #27]
 8007192:	2b40      	cmp	r3, #64	; 0x40
 8007194:	d107      	bne.n	80071a6 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80071a4:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	0adb      	lsrs	r3, r3, #11
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00e      	beq.n	80071d0 <HAL_I2C_ER_IRQHandler+0x12e>
 80071b2:	69fb      	ldr	r3, [r7, #28]
 80071b4:	0a1b      	lsrs	r3, r3, #8
 80071b6:	f003 0301 	and.w	r3, r3, #1
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d008      	beq.n	80071d0 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 80071be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c0:	f043 0308 	orr.w	r3, r3, #8
 80071c4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 80071ce:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	431a      	orrs	r2, r3
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f001 f8a0 	bl	8008328 <I2C_ITError>
  }
}
 80071e8:	bf00      	nop
 80071ea:	3728      	adds	r7, #40	; 0x28
 80071ec:	46bd      	mov	sp, r7
 80071ee:	bd80      	pop	{r7, pc}

080071f0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007204:	b480      	push	{r7}
 8007206:	b083      	sub	sp, #12
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800720c:	bf00      	nop
 800720e:	370c      	adds	r7, #12
 8007210:	46bd      	mov	sp, r7
 8007212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007216:	4770      	bx	lr

08007218 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007218:	b480      	push	{r7}
 800721a:	b083      	sub	sp, #12
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007220:	bf00      	nop
 8007222:	370c      	adds	r7, #12
 8007224:	46bd      	mov	sp, r7
 8007226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800722a:	4770      	bx	lr

0800722c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800722c:	b480      	push	{r7}
 800722e:	b083      	sub	sp, #12
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007234:	bf00      	nop
 8007236:	370c      	adds	r7, #12
 8007238:	46bd      	mov	sp, r7
 800723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800723e:	4770      	bx	lr

08007240 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007240:	b480      	push	{r7}
 8007242:	b083      	sub	sp, #12
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	460b      	mov	r3, r1
 800724a:	70fb      	strb	r3, [r7, #3]
 800724c:	4613      	mov	r3, r2
 800724e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007250:	bf00      	nop
 8007252:	370c      	adds	r7, #12
 8007254:	46bd      	mov	sp, r7
 8007256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725a:	4770      	bx	lr

0800725c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800725c:	b480      	push	{r7}
 800725e:	b083      	sub	sp, #12
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8007264:	bf00      	nop
 8007266:	370c      	adds	r7, #12
 8007268:	46bd      	mov	sp, r7
 800726a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726e:	4770      	bx	lr

08007270 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007270:	b480      	push	{r7}
 8007272:	b083      	sub	sp, #12
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8007278:	bf00      	nop
 800727a:	370c      	adds	r7, #12
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800728c:	bf00      	nop
 800728e:	370c      	adds	r7, #12
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007298:	b480      	push	{r7}
 800729a:	b083      	sub	sp, #12
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80072a0:	bf00      	nop
 80072a2:	370c      	adds	r7, #12
 80072a4:	46bd      	mov	sp, r7
 80072a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072aa:	4770      	bx	lr

080072ac <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80072b4:	bf00      	nop
 80072b6:	370c      	adds	r7, #12
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b084      	sub	sp, #16
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ce:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072d6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072dc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d150      	bne.n	8007388 <I2C_MasterTransmit_TXE+0xc8>
 80072e6:	7bfb      	ldrb	r3, [r7, #15]
 80072e8:	2b21      	cmp	r3, #33	; 0x21
 80072ea:	d14d      	bne.n	8007388 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b08      	cmp	r3, #8
 80072f0:	d01d      	beq.n	800732e <I2C_MasterTransmit_TXE+0x6e>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b20      	cmp	r3, #32
 80072f6:	d01a      	beq.n	800732e <I2C_MasterTransmit_TXE+0x6e>
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80072fe:	d016      	beq.n	800732e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	685a      	ldr	r2, [r3, #4]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800730e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2211      	movs	r2, #17
 8007314:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	2200      	movs	r2, #0
 800731a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2220      	movs	r2, #32
 8007322:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f7ff ff62 	bl	80071f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800732c:	e060      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	685a      	ldr	r2, [r3, #4]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800733c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	681a      	ldr	r2, [r3, #0]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800734c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2200      	movs	r2, #0
 8007352:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2220      	movs	r2, #32
 8007358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	d107      	bne.n	8007378 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	2200      	movs	r2, #0
 800736c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8007370:	6878      	ldr	r0, [r7, #4]
 8007372:	f7ff ff7d 	bl	8007270 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007376:	e03b      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8007380:	6878      	ldr	r0, [r7, #4]
 8007382:	f7ff ff35 	bl	80071f0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007386:	e033      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8007388:	7bfb      	ldrb	r3, [r7, #15]
 800738a:	2b21      	cmp	r3, #33	; 0x21
 800738c:	d005      	beq.n	800739a <I2C_MasterTransmit_TXE+0xda>
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	2b40      	cmp	r3, #64	; 0x40
 8007392:	d12d      	bne.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8007394:	7bfb      	ldrb	r3, [r7, #15]
 8007396:	2b22      	cmp	r3, #34	; 0x22
 8007398:	d12a      	bne.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800739e:	b29b      	uxth	r3, r3
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d108      	bne.n	80073b6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	685a      	ldr	r2, [r3, #4]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80073b2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80073b4:	e01c      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80073bc:	b2db      	uxtb	r3, r3
 80073be:	2b40      	cmp	r3, #64	; 0x40
 80073c0:	d103      	bne.n	80073ca <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	f000 f88e 	bl	80074e4 <I2C_MemoryTransmit_TXE_BTF>
}
 80073c8:	e012      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073ce:	781a      	ldrb	r2, [r3, #0]
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	1c5a      	adds	r2, r3, #1
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073e4:	b29b      	uxth	r3, r3
 80073e6:	3b01      	subs	r3, #1
 80073e8:	b29a      	uxth	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80073ee:	e7ff      	b.n	80073f0 <I2C_MasterTransmit_TXE+0x130>
 80073f0:	bf00      	nop
 80073f2:	3710      	adds	r7, #16
 80073f4:	46bd      	mov	sp, r7
 80073f6:	bd80      	pop	{r7, pc}

080073f8 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007404:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800740c:	b2db      	uxtb	r3, r3
 800740e:	2b21      	cmp	r3, #33	; 0x21
 8007410:	d164      	bne.n	80074dc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007416:	b29b      	uxth	r3, r3
 8007418:	2b00      	cmp	r3, #0
 800741a:	d012      	beq.n	8007442 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007420:	781a      	ldrb	r2, [r3, #0]
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800742c:	1c5a      	adds	r2, r3, #1
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007436:	b29b      	uxth	r3, r3
 8007438:	3b01      	subs	r3, #1
 800743a:	b29a      	uxth	r2, r3
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8007440:	e04c      	b.n	80074dc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8007442:	68fb      	ldr	r3, [r7, #12]
 8007444:	2b08      	cmp	r3, #8
 8007446:	d01d      	beq.n	8007484 <I2C_MasterTransmit_BTF+0x8c>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	2b20      	cmp	r3, #32
 800744c:	d01a      	beq.n	8007484 <I2C_MasterTransmit_BTF+0x8c>
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007454:	d016      	beq.n	8007484 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007464:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2211      	movs	r2, #17
 800746a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2200      	movs	r2, #0
 8007470:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2220      	movs	r2, #32
 8007478:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7ff feb7 	bl	80071f0 <HAL_I2C_MasterTxCpltCallback>
}
 8007482:	e02b      	b.n	80074dc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	685a      	ldr	r2, [r3, #4]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007492:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	681a      	ldr	r2, [r3, #0]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80074a2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2200      	movs	r2, #0
 80074a8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2220      	movs	r2, #32
 80074ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80074b8:	b2db      	uxtb	r3, r3
 80074ba:	2b40      	cmp	r3, #64	; 0x40
 80074bc:	d107      	bne.n	80074ce <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f7ff fed2 	bl	8007270 <HAL_I2C_MemTxCpltCallback>
}
 80074cc:	e006      	b.n	80074dc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff fe8a 	bl	80071f0 <HAL_I2C_MasterTxCpltCallback>
}
 80074dc:	bf00      	nop
 80074de:	3710      	adds	r7, #16
 80074e0:	46bd      	mov	sp, r7
 80074e2:	bd80      	pop	{r7, pc}

080074e4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074f2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d11d      	bne.n	8007538 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007500:	2b01      	cmp	r3, #1
 8007502:	d10b      	bne.n	800751c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007508:	b2da      	uxtb	r2, r3
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007514:	1c9a      	adds	r2, r3, #2
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800751a:	e073      	b.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007520:	b29b      	uxth	r3, r3
 8007522:	121b      	asrs	r3, r3, #8
 8007524:	b2da      	uxtb	r2, r3
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007530:	1c5a      	adds	r2, r3, #1
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007536:	e065      	b.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10b      	bne.n	8007558 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007544:	b2da      	uxtb	r2, r3
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007550:	1c5a      	adds	r2, r3, #1
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007556:	e055      	b.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800755c:	2b02      	cmp	r3, #2
 800755e:	d151      	bne.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	2b22      	cmp	r3, #34	; 0x22
 8007564:	d10d      	bne.n	8007582 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007574:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800757a:	1c5a      	adds	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8007580:	e040      	b.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007586:	b29b      	uxth	r3, r3
 8007588:	2b00      	cmp	r3, #0
 800758a:	d015      	beq.n	80075b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800758c:	7bfb      	ldrb	r3, [r7, #15]
 800758e:	2b21      	cmp	r3, #33	; 0x21
 8007590:	d112      	bne.n	80075b8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007596:	781a      	ldrb	r2, [r3, #0]
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a2:	1c5a      	adds	r2, r3, #1
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	3b01      	subs	r3, #1
 80075b0:	b29a      	uxth	r2, r3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80075b6:	e025      	b.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80075bc:	b29b      	uxth	r3, r3
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d120      	bne.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80075c2:	7bfb      	ldrb	r3, [r7, #15]
 80075c4:	2b21      	cmp	r3, #33	; 0x21
 80075c6:	d11d      	bne.n	8007604 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80075d6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80075e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2200      	movs	r2, #0
 80075ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2220      	movs	r2, #32
 80075f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	2200      	movs	r2, #0
 80075fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f7ff fe36 	bl	8007270 <HAL_I2C_MemTxCpltCallback>
}
 8007604:	bf00      	nop
 8007606:	3710      	adds	r7, #16
 8007608:	46bd      	mov	sp, r7
 800760a:	bd80      	pop	{r7, pc}

0800760c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800760c:	b580      	push	{r7, lr}
 800760e:	b084      	sub	sp, #16
 8007610:	af00      	add	r7, sp, #0
 8007612:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800761a:	b2db      	uxtb	r3, r3
 800761c:	2b22      	cmp	r3, #34	; 0x22
 800761e:	f040 80ac 	bne.w	800777a <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007626:	b29b      	uxth	r3, r3
 8007628:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2b03      	cmp	r3, #3
 800762e:	d921      	bls.n	8007674 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	691a      	ldr	r2, [r3, #16]
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	b2d2      	uxtb	r2, r2
 800763c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800765a:	b29b      	uxth	r3, r3
 800765c:	2b03      	cmp	r3, #3
 800765e:	f040 808c 	bne.w	800777a <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	685a      	ldr	r2, [r3, #4]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007670:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8007672:	e082      	b.n	800777a <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007678:	2b02      	cmp	r3, #2
 800767a:	d075      	beq.n	8007768 <I2C_MasterReceive_RXNE+0x15c>
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d002      	beq.n	8007688 <I2C_MasterReceive_RXNE+0x7c>
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	2b00      	cmp	r3, #0
 8007686:	d16f      	bne.n	8007768 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f001 fa01 	bl	8008a90 <I2C_WaitOnSTOPRequestThroughIT>
 800768e:	4603      	mov	r3, r0
 8007690:	2b00      	cmp	r3, #0
 8007692:	d142      	bne.n	800771a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	681a      	ldr	r2, [r3, #0]
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80076a2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	685a      	ldr	r2, [r3, #4]
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80076b2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	691a      	ldr	r2, [r3, #16]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076be:	b2d2      	uxtb	r2, r2
 80076c0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076c6:	1c5a      	adds	r2, r3, #1
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076d0:	b29b      	uxth	r3, r3
 80076d2:	3b01      	subs	r3, #1
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2220      	movs	r2, #32
 80076de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80076e8:	b2db      	uxtb	r3, r3
 80076ea:	2b40      	cmp	r3, #64	; 0x40
 80076ec:	d10a      	bne.n	8007704 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2200      	movs	r2, #0
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80076fc:	6878      	ldr	r0, [r7, #4]
 80076fe:	f7ff fdc1 	bl	8007284 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007702:	e03a      	b.n	800777a <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2200      	movs	r2, #0
 8007708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2212      	movs	r2, #18
 8007710:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f7ff fd76 	bl	8007204 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007718:	e02f      	b.n	800777a <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	685a      	ldr	r2, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8007728:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	691a      	ldr	r2, [r3, #16]
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007734:	b2d2      	uxtb	r2, r2
 8007736:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773c:	1c5a      	adds	r2, r3, #1
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007746:	b29b      	uxth	r3, r3
 8007748:	3b01      	subs	r3, #1
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2220      	movs	r2, #32
 8007754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	2200      	movs	r2, #0
 800775c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8007760:	6878      	ldr	r0, [r7, #4]
 8007762:	f7ff fd99 	bl	8007298 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8007766:	e008      	b.n	800777a <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	685a      	ldr	r2, [r3, #4]
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007776:	605a      	str	r2, [r3, #4]
}
 8007778:	e7ff      	b.n	800777a <I2C_MasterReceive_RXNE+0x16e>
 800777a:	bf00      	nop
 800777c:	3710      	adds	r7, #16
 800777e:	46bd      	mov	sp, r7
 8007780:	bd80      	pop	{r7, pc}

08007782 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007782:	b580      	push	{r7, lr}
 8007784:	b084      	sub	sp, #16
 8007786:	af00      	add	r7, sp, #0
 8007788:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007794:	b29b      	uxth	r3, r3
 8007796:	2b04      	cmp	r3, #4
 8007798:	d11b      	bne.n	80077d2 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	685a      	ldr	r2, [r3, #4]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077a8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	691a      	ldr	r2, [r3, #16]
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b4:	b2d2      	uxtb	r2, r2
 80077b6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077bc:	1c5a      	adds	r2, r3, #1
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077c6:	b29b      	uxth	r3, r3
 80077c8:	3b01      	subs	r3, #1
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80077d0:	e0bd      	b.n	800794e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	2b03      	cmp	r3, #3
 80077da:	d129      	bne.n	8007830 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	685a      	ldr	r2, [r3, #4]
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077ea:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2b04      	cmp	r3, #4
 80077f0:	d00a      	beq.n	8007808 <I2C_MasterReceive_BTF+0x86>
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2b02      	cmp	r3, #2
 80077f6:	d007      	beq.n	8007808 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	681a      	ldr	r2, [r3, #0]
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007806:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	691a      	ldr	r2, [r3, #16]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007812:	b2d2      	uxtb	r2, r2
 8007814:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781a:	1c5a      	adds	r2, r3, #1
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007824:	b29b      	uxth	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	b29a      	uxth	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800782e:	e08e      	b.n	800794e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007834:	b29b      	uxth	r3, r3
 8007836:	2b02      	cmp	r3, #2
 8007838:	d176      	bne.n	8007928 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	2b01      	cmp	r3, #1
 800783e:	d002      	beq.n	8007846 <I2C_MasterReceive_BTF+0xc4>
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	2b10      	cmp	r3, #16
 8007844:	d108      	bne.n	8007858 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	681a      	ldr	r2, [r3, #0]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	681b      	ldr	r3, [r3, #0]
 8007850:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007854:	601a      	str	r2, [r3, #0]
 8007856:	e019      	b.n	800788c <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2b04      	cmp	r3, #4
 800785c:	d002      	beq.n	8007864 <I2C_MasterReceive_BTF+0xe2>
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	2b02      	cmp	r3, #2
 8007862:	d108      	bne.n	8007876 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	681b      	ldr	r3, [r3, #0]
 8007868:	681a      	ldr	r2, [r3, #0]
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007872:	601a      	str	r2, [r3, #0]
 8007874:	e00a      	b.n	800788c <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	2b10      	cmp	r3, #16
 800787a:	d007      	beq.n	800788c <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800788a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691a      	ldr	r2, [r3, #16]
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007896:	b2d2      	uxtb	r2, r2
 8007898:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800789e:	1c5a      	adds	r2, r3, #1
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a8:	b29b      	uxth	r3, r3
 80078aa:	3b01      	subs	r3, #1
 80078ac:	b29a      	uxth	r2, r3
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	691a      	ldr	r2, [r3, #16]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078bc:	b2d2      	uxtb	r2, r2
 80078be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3b01      	subs	r3, #1
 80078d2:	b29a      	uxth	r2, r3
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80078e6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2220      	movs	r2, #32
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b40      	cmp	r3, #64	; 0x40
 80078fa:	d10a      	bne.n	8007912 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2200      	movs	r2, #0
 8007900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7ff fcba 	bl	8007284 <HAL_I2C_MemRxCpltCallback>
}
 8007910:	e01d      	b.n	800794e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2200      	movs	r2, #0
 8007916:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2212      	movs	r2, #18
 800791e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007920:	6878      	ldr	r0, [r7, #4]
 8007922:	f7ff fc6f 	bl	8007204 <HAL_I2C_MasterRxCpltCallback>
}
 8007926:	e012      	b.n	800794e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691a      	ldr	r2, [r3, #16]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007932:	b2d2      	uxtb	r2, r2
 8007934:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800793a:	1c5a      	adds	r2, r3, #1
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007944:	b29b      	uxth	r3, r3
 8007946:	3b01      	subs	r3, #1
 8007948:	b29a      	uxth	r2, r3
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800794e:	bf00      	nop
 8007950:	3710      	adds	r7, #16
 8007952:	46bd      	mov	sp, r7
 8007954:	bd80      	pop	{r7, pc}

08007956 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8007956:	b480      	push	{r7}
 8007958:	b083      	sub	sp, #12
 800795a:	af00      	add	r7, sp, #0
 800795c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b40      	cmp	r3, #64	; 0x40
 8007968:	d117      	bne.n	800799a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800796e:	2b00      	cmp	r3, #0
 8007970:	d109      	bne.n	8007986 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007976:	b2db      	uxtb	r3, r3
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8007982:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8007984:	e067      	b.n	8007a56 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800798a:	b2db      	uxtb	r3, r3
 800798c:	f043 0301 	orr.w	r3, r3, #1
 8007990:	b2da      	uxtb	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	611a      	str	r2, [r3, #16]
}
 8007998:	e05d      	b.n	8007a56 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	691b      	ldr	r3, [r3, #16]
 800799e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80079a2:	d133      	bne.n	8007a0c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079aa:	b2db      	uxtb	r3, r3
 80079ac:	2b21      	cmp	r3, #33	; 0x21
 80079ae:	d109      	bne.n	80079c4 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	461a      	mov	r2, r3
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80079c0:	611a      	str	r2, [r3, #16]
 80079c2:	e008      	b.n	80079d6 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	f043 0301 	orr.w	r3, r3, #1
 80079ce:	b2da      	uxtb	r2, r3
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d004      	beq.n	80079e8 <I2C_Master_SB+0x92>
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d108      	bne.n	80079fa <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d032      	beq.n	8007a56 <I2C_Master_SB+0x100>
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d02d      	beq.n	8007a56 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	685a      	ldr	r2, [r3, #4]
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a08:	605a      	str	r2, [r3, #4]
}
 8007a0a:	e024      	b.n	8007a56 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d10e      	bne.n	8007a32 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a18:	b29b      	uxth	r3, r3
 8007a1a:	11db      	asrs	r3, r3, #7
 8007a1c:	b2db      	uxtb	r3, r3
 8007a1e:	f003 0306 	and.w	r3, r3, #6
 8007a22:	b2db      	uxtb	r3, r3
 8007a24:	f063 030f 	orn	r3, r3, #15
 8007a28:	b2da      	uxtb	r2, r3
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	611a      	str	r2, [r3, #16]
}
 8007a30:	e011      	b.n	8007a56 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a36:	2b01      	cmp	r3, #1
 8007a38:	d10d      	bne.n	8007a56 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3e:	b29b      	uxth	r3, r3
 8007a40:	11db      	asrs	r3, r3, #7
 8007a42:	b2db      	uxtb	r3, r3
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	b2db      	uxtb	r3, r3
 8007a4a:	f063 030e 	orn	r3, r3, #14
 8007a4e:	b2da      	uxtb	r2, r3
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	611a      	str	r2, [r3, #16]
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8007a62:	b480      	push	{r7}
 8007a64:	b083      	sub	sp, #12
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a6e:	b2da      	uxtb	r2, r3
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d004      	beq.n	8007a88 <I2C_Master_ADD10+0x26>
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d108      	bne.n	8007a9a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d00c      	beq.n	8007aaa <I2C_Master_ADD10+0x48>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007aa8:	605a      	str	r2, [r3, #4]
  }
}
 8007aaa:	bf00      	nop
 8007aac:	370c      	adds	r7, #12
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab4:	4770      	bx	lr

08007ab6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8007ab6:	b480      	push	{r7}
 8007ab8:	b091      	sub	sp, #68	; 0x44
 8007aba:	af00      	add	r7, sp, #0
 8007abc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007ac4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007acc:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ad2:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	2b22      	cmp	r3, #34	; 0x22
 8007ade:	f040 8169 	bne.w	8007db4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10f      	bne.n	8007b0a <I2C_Master_ADDR+0x54>
 8007aea:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8007aee:	2b40      	cmp	r3, #64	; 0x40
 8007af0:	d10b      	bne.n	8007b0a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007af2:	2300      	movs	r3, #0
 8007af4:	633b      	str	r3, [r7, #48]	; 0x30
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	695b      	ldr	r3, [r3, #20]
 8007afc:	633b      	str	r3, [r7, #48]	; 0x30
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	699b      	ldr	r3, [r3, #24]
 8007b04:	633b      	str	r3, [r7, #48]	; 0x30
 8007b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b08:	e160      	b.n	8007dcc <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d11d      	bne.n	8007b4e <I2C_Master_ADDR+0x98>
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	691b      	ldr	r3, [r3, #16]
 8007b16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b1a:	d118      	bne.n	8007b4e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	695b      	ldr	r3, [r3, #20]
 8007b26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b30:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681a      	ldr	r2, [r3, #0]
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007b40:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b46:	1c5a      	adds	r2, r3, #1
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	651a      	str	r2, [r3, #80]	; 0x50
 8007b4c:	e13e      	b.n	8007dcc <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b52:	b29b      	uxth	r3, r3
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d113      	bne.n	8007b80 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007b58:	2300      	movs	r3, #0
 8007b5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	695b      	ldr	r3, [r3, #20]
 8007b62:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699b      	ldr	r3, [r3, #24]
 8007b6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	681a      	ldr	r2, [r3, #0]
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007b7c:	601a      	str	r2, [r3, #0]
 8007b7e:	e115      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	f040 808a 	bne.w	8007ca0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8007b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b92:	d137      	bne.n	8007c04 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ba2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	685b      	ldr	r3, [r3, #4]
 8007baa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bb2:	d113      	bne.n	8007bdc <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007bc2:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bc4:	2300      	movs	r3, #0
 8007bc6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	695b      	ldr	r3, [r3, #20]
 8007bce:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	699b      	ldr	r3, [r3, #24]
 8007bd6:	627b      	str	r3, [r7, #36]	; 0x24
 8007bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bda:	e0e7      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007bdc:	2300      	movs	r3, #0
 8007bde:	623b      	str	r3, [r7, #32]
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	695b      	ldr	r3, [r3, #20]
 8007be6:	623b      	str	r3, [r7, #32]
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	699b      	ldr	r3, [r3, #24]
 8007bee:	623b      	str	r3, [r7, #32]
 8007bf0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c00:	601a      	str	r2, [r3, #0]
 8007c02:	e0d3      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b08      	cmp	r3, #8
 8007c08:	d02e      	beq.n	8007c68 <I2C_Master_ADDR+0x1b2>
 8007c0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d02b      	beq.n	8007c68 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8007c10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c12:	2b12      	cmp	r3, #18
 8007c14:	d102      	bne.n	8007c1c <I2C_Master_ADDR+0x166>
 8007c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c18:	2b01      	cmp	r3, #1
 8007c1a:	d125      	bne.n	8007c68 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	2b04      	cmp	r3, #4
 8007c20:	d00e      	beq.n	8007c40 <I2C_Master_ADDR+0x18a>
 8007c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c24:	2b02      	cmp	r3, #2
 8007c26:	d00b      	beq.n	8007c40 <I2C_Master_ADDR+0x18a>
 8007c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c2a:	2b10      	cmp	r3, #16
 8007c2c:	d008      	beq.n	8007c40 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	681a      	ldr	r2, [r3, #0]
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3c:	601a      	str	r2, [r3, #0]
 8007c3e:	e007      	b.n	8007c50 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	681a      	ldr	r2, [r3, #0]
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007c4e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c50:	2300      	movs	r3, #0
 8007c52:	61fb      	str	r3, [r7, #28]
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	695b      	ldr	r3, [r3, #20]
 8007c5a:	61fb      	str	r3, [r7, #28]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	699b      	ldr	r3, [r3, #24]
 8007c62:	61fb      	str	r3, [r7, #28]
 8007c64:	69fb      	ldr	r3, [r7, #28]
 8007c66:	e0a1      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	681a      	ldr	r2, [r3, #0]
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c76:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007c78:	2300      	movs	r3, #0
 8007c7a:	61bb      	str	r3, [r7, #24]
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	695b      	ldr	r3, [r3, #20]
 8007c82:	61bb      	str	r3, [r7, #24]
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	681b      	ldr	r3, [r3, #0]
 8007c88:	699b      	ldr	r3, [r3, #24]
 8007c8a:	61bb      	str	r3, [r7, #24]
 8007c8c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681a      	ldr	r2, [r3, #0]
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007c9c:	601a      	str	r2, [r3, #0]
 8007c9e:	e085      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ca4:	b29b      	uxth	r3, r3
 8007ca6:	2b02      	cmp	r3, #2
 8007ca8:	d14d      	bne.n	8007d46 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8007caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cac:	2b04      	cmp	r3, #4
 8007cae:	d016      	beq.n	8007cde <I2C_Master_ADDR+0x228>
 8007cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb2:	2b02      	cmp	r3, #2
 8007cb4:	d013      	beq.n	8007cde <I2C_Master_ADDR+0x228>
 8007cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007cb8:	2b10      	cmp	r3, #16
 8007cba:	d010      	beq.n	8007cde <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	681a      	ldr	r2, [r3, #0]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cca:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cda:	601a      	str	r2, [r3, #0]
 8007cdc:	e007      	b.n	8007cee <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007cec:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007cf8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007cfc:	d117      	bne.n	8007d2e <I2C_Master_ADDR+0x278>
 8007cfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d00:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d04:	d00b      	beq.n	8007d1e <I2C_Master_ADDR+0x268>
 8007d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d008      	beq.n	8007d1e <I2C_Master_ADDR+0x268>
 8007d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d0e:	2b08      	cmp	r3, #8
 8007d10:	d005      	beq.n	8007d1e <I2C_Master_ADDR+0x268>
 8007d12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d14:	2b10      	cmp	r3, #16
 8007d16:	d002      	beq.n	8007d1e <I2C_Master_ADDR+0x268>
 8007d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d1a:	2b20      	cmp	r3, #32
 8007d1c:	d107      	bne.n	8007d2e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d2c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d2e:	2300      	movs	r3, #0
 8007d30:	617b      	str	r3, [r7, #20]
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	617b      	str	r3, [r7, #20]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	699b      	ldr	r3, [r3, #24]
 8007d40:	617b      	str	r3, [r7, #20]
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	e032      	b.n	8007dac <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8007d54:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	685b      	ldr	r3, [r3, #4]
 8007d5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d64:	d117      	bne.n	8007d96 <I2C_Master_ADDR+0x2e0>
 8007d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d6c:	d00b      	beq.n	8007d86 <I2C_Master_ADDR+0x2d0>
 8007d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d008      	beq.n	8007d86 <I2C_Master_ADDR+0x2d0>
 8007d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d76:	2b08      	cmp	r3, #8
 8007d78:	d005      	beq.n	8007d86 <I2C_Master_ADDR+0x2d0>
 8007d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d7c:	2b10      	cmp	r3, #16
 8007d7e:	d002      	beq.n	8007d86 <I2C_Master_ADDR+0x2d0>
 8007d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d82:	2b20      	cmp	r3, #32
 8007d84:	d107      	bne.n	8007d96 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	685a      	ldr	r2, [r3, #4]
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007d94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007d96:	2300      	movs	r3, #0
 8007d98:	613b      	str	r3, [r7, #16]
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	613b      	str	r3, [r7, #16]
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	699b      	ldr	r3, [r3, #24]
 8007da8:	613b      	str	r3, [r7, #16]
 8007daa:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	2200      	movs	r2, #0
 8007db0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8007db2:	e00b      	b.n	8007dcc <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007db4:	2300      	movs	r3, #0
 8007db6:	60fb      	str	r3, [r7, #12]
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	695b      	ldr	r3, [r3, #20]
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	699b      	ldr	r3, [r3, #24]
 8007dc6:	60fb      	str	r3, [r7, #12]
 8007dc8:	68fb      	ldr	r3, [r7, #12]
}
 8007dca:	e7ff      	b.n	8007dcc <I2C_Master_ADDR+0x316>
 8007dcc:	bf00      	nop
 8007dce:	3744      	adds	r7, #68	; 0x44
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd6:	4770      	bx	lr

08007dd8 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b084      	sub	sp, #16
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007de6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d02b      	beq.n	8007e4a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df6:	781a      	ldrb	r2, [r3, #0]
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e02:	1c5a      	adds	r2, r3, #1
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e0c:	b29b      	uxth	r3, r3
 8007e0e:	3b01      	subs	r3, #1
 8007e10:	b29a      	uxth	r2, r3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e1a:	b29b      	uxth	r3, r3
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	d114      	bne.n	8007e4a <I2C_SlaveTransmit_TXE+0x72>
 8007e20:	7bfb      	ldrb	r3, [r7, #15]
 8007e22:	2b29      	cmp	r3, #41	; 0x29
 8007e24:	d111      	bne.n	8007e4a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e34:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2221      	movs	r2, #33	; 0x21
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2228      	movs	r2, #40	; 0x28
 8007e40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007e44:	6878      	ldr	r0, [r7, #4]
 8007e46:	f7ff f9e7 	bl	8007218 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007e4a:	bf00      	nop
 8007e4c:	3710      	adds	r7, #16
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	bd80      	pop	{r7, pc}

08007e52 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8007e52:	b480      	push	{r7}
 8007e54:	b083      	sub	sp, #12
 8007e56:	af00      	add	r7, sp, #0
 8007e58:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e5e:	b29b      	uxth	r3, r3
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d011      	beq.n	8007e88 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e68:	781a      	ldrb	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	1c5a      	adds	r2, r3, #1
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	3b01      	subs	r3, #1
 8007e82:	b29a      	uxth	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007e88:	bf00      	nop
 8007e8a:	370c      	adds	r7, #12
 8007e8c:	46bd      	mov	sp, r7
 8007e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e92:	4770      	bx	lr

08007e94 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b084      	sub	sp, #16
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ea2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ea8:	b29b      	uxth	r3, r3
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d02c      	beq.n	8007f08 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	691a      	ldr	r2, [r3, #16]
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb8:	b2d2      	uxtb	r2, r2
 8007eba:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ec0:	1c5a      	adds	r2, r3, #1
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007eca:	b29b      	uxth	r3, r3
 8007ecc:	3b01      	subs	r3, #1
 8007ece:	b29a      	uxth	r2, r3
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ed8:	b29b      	uxth	r3, r3
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d114      	bne.n	8007f08 <I2C_SlaveReceive_RXNE+0x74>
 8007ede:	7bfb      	ldrb	r3, [r7, #15]
 8007ee0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ee2:	d111      	bne.n	8007f08 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	685a      	ldr	r2, [r3, #4]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ef2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	2222      	movs	r2, #34	; 0x22
 8007ef8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2228      	movs	r2, #40	; 0x28
 8007efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007f02:	6878      	ldr	r0, [r7, #4]
 8007f04:	f7ff f992 	bl	800722c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8007f08:	bf00      	nop
 8007f0a:	3710      	adds	r7, #16
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	bd80      	pop	{r7, pc}

08007f10 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b083      	sub	sp, #12
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f1c:	b29b      	uxth	r3, r3
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d012      	beq.n	8007f48 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	691a      	ldr	r2, [r3, #16]
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f2c:	b2d2      	uxtb	r2, r2
 8007f2e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f34:	1c5a      	adds	r2, r3, #1
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3b01      	subs	r3, #1
 8007f42:	b29a      	uxth	r2, r3
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8007f48:	bf00      	nop
 8007f4a:	370c      	adds	r7, #12
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f52:	4770      	bx	lr

08007f54 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b084      	sub	sp, #16
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
 8007f5c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007f6e:	2b28      	cmp	r3, #40	; 0x28
 8007f70:	d127      	bne.n	8007fc2 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	685a      	ldr	r2, [r3, #4]
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f80:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	089b      	lsrs	r3, r3, #2
 8007f86:	f003 0301 	and.w	r3, r3, #1
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d101      	bne.n	8007f92 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	09db      	lsrs	r3, r3, #7
 8007f96:	f003 0301 	and.w	r3, r3, #1
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d103      	bne.n	8007fa6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	68db      	ldr	r3, [r3, #12]
 8007fa2:	81bb      	strh	r3, [r7, #12]
 8007fa4:	e002      	b.n	8007fac <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	699b      	ldr	r3, [r3, #24]
 8007faa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8007fb4:	89ba      	ldrh	r2, [r7, #12]
 8007fb6:	7bfb      	ldrb	r3, [r7, #15]
 8007fb8:	4619      	mov	r1, r3
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f7ff f940 	bl	8007240 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007fc0:	e00e      	b.n	8007fe0 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007fc2:	2300      	movs	r3, #0
 8007fc4:	60bb      	str	r3, [r7, #8]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	60bb      	str	r3, [r7, #8]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	699b      	ldr	r3, [r3, #24]
 8007fd4:	60bb      	str	r3, [r7, #8]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8007fe0:	bf00      	nop
 8007fe2:	3710      	adds	r7, #16
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b084      	sub	sp, #16
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ff6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	685a      	ldr	r2, [r3, #4]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008006:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8008008:	2300      	movs	r3, #0
 800800a:	60bb      	str	r3, [r7, #8]
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	695b      	ldr	r3, [r3, #20]
 8008012:	60bb      	str	r3, [r7, #8]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	f042 0201 	orr.w	r2, r2, #1
 8008022:	601a      	str	r2, [r3, #0]
 8008024:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	681a      	ldr	r2, [r3, #0]
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008034:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	685b      	ldr	r3, [r3, #4]
 800803c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008044:	d172      	bne.n	800812c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008046:	7bfb      	ldrb	r3, [r7, #15]
 8008048:	2b22      	cmp	r3, #34	; 0x22
 800804a:	d002      	beq.n	8008052 <I2C_Slave_STOPF+0x6a>
 800804c:	7bfb      	ldrb	r3, [r7, #15]
 800804e:	2b2a      	cmp	r3, #42	; 0x2a
 8008050:	d135      	bne.n	80080be <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	685b      	ldr	r3, [r3, #4]
 800805a:	b29a      	uxth	r2, r3
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008064:	b29b      	uxth	r3, r3
 8008066:	2b00      	cmp	r3, #0
 8008068:	d005      	beq.n	8008076 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800806e:	f043 0204 	orr.w	r2, r3, #4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008084:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800808a:	4618      	mov	r0, r3
 800808c:	f7fe f8e0 	bl	8006250 <HAL_DMA_GetState>
 8008090:	4603      	mov	r3, r0
 8008092:	2b01      	cmp	r3, #1
 8008094:	d049      	beq.n	800812a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800809a:	4a69      	ldr	r2, [pc, #420]	; (8008240 <I2C_Slave_STOPF+0x258>)
 800809c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	4618      	mov	r0, r3
 80080a4:	f7fd ff28 	bl	8005ef8 <HAL_DMA_Abort_IT>
 80080a8:	4603      	mov	r3, r0
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d03d      	beq.n	800812a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80080b8:	4610      	mov	r0, r2
 80080ba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80080bc:	e035      	b.n	800812a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	b29a      	uxth	r2, r3
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080d0:	b29b      	uxth	r3, r3
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d005      	beq.n	80080e2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080da:	f043 0204 	orr.w	r2, r3, #4
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	685a      	ldr	r2, [r3, #4]
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80080f0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe f8aa 	bl	8006250 <HAL_DMA_GetState>
 80080fc:	4603      	mov	r3, r0
 80080fe:	2b01      	cmp	r3, #1
 8008100:	d014      	beq.n	800812c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	4a4e      	ldr	r2, [pc, #312]	; (8008240 <I2C_Slave_STOPF+0x258>)
 8008108:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800810e:	4618      	mov	r0, r3
 8008110:	f7fd fef2 	bl	8005ef8 <HAL_DMA_Abort_IT>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d008      	beq.n	800812c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800811e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008124:	4610      	mov	r0, r2
 8008126:	4798      	blx	r3
 8008128:	e000      	b.n	800812c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800812a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008130:	b29b      	uxth	r3, r3
 8008132:	2b00      	cmp	r3, #0
 8008134:	d03e      	beq.n	80081b4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	681b      	ldr	r3, [r3, #0]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f003 0304 	and.w	r3, r3, #4
 8008140:	2b04      	cmp	r3, #4
 8008142:	d112      	bne.n	800816a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	681b      	ldr	r3, [r3, #0]
 8008148:	691a      	ldr	r2, [r3, #16]
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800814e:	b2d2      	uxtb	r2, r2
 8008150:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008156:	1c5a      	adds	r2, r3, #1
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008160:	b29b      	uxth	r3, r3
 8008162:	3b01      	subs	r3, #1
 8008164:	b29a      	uxth	r2, r3
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	695b      	ldr	r3, [r3, #20]
 8008170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008174:	2b40      	cmp	r3, #64	; 0x40
 8008176:	d112      	bne.n	800819e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	691a      	ldr	r2, [r3, #16]
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008182:	b2d2      	uxtb	r2, r2
 8008184:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800818a:	1c5a      	adds	r2, r3, #1
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008194:	b29b      	uxth	r3, r3
 8008196:	3b01      	subs	r3, #1
 8008198:	b29a      	uxth	r2, r3
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80081a2:	b29b      	uxth	r3, r3
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d005      	beq.n	80081b4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081ac:	f043 0204 	orr.w	r2, r3, #4
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d003      	beq.n	80081c4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f8b3 	bl	8008328 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80081c2:	e039      	b.n	8008238 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80081c4:	7bfb      	ldrb	r3, [r7, #15]
 80081c6:	2b2a      	cmp	r3, #42	; 0x2a
 80081c8:	d109      	bne.n	80081de <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2200      	movs	r2, #0
 80081ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	2228      	movs	r2, #40	; 0x28
 80081d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff f827 	bl	800722c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081e4:	b2db      	uxtb	r3, r3
 80081e6:	2b28      	cmp	r3, #40	; 0x28
 80081e8:	d111      	bne.n	800820e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	4a15      	ldr	r2, [pc, #84]	; (8008244 <I2C_Slave_STOPF+0x25c>)
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	2200      	movs	r2, #0
 80081f4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2220      	movs	r2, #32
 80081fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	2200      	movs	r2, #0
 8008202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8008206:	6878      	ldr	r0, [r7, #4]
 8008208:	f7ff f828 	bl	800725c <HAL_I2C_ListenCpltCallback>
}
 800820c:	e014      	b.n	8008238 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008212:	2b22      	cmp	r3, #34	; 0x22
 8008214:	d002      	beq.n	800821c <I2C_Slave_STOPF+0x234>
 8008216:	7bfb      	ldrb	r3, [r7, #15]
 8008218:	2b22      	cmp	r3, #34	; 0x22
 800821a:	d10d      	bne.n	8008238 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2200      	movs	r2, #0
 8008220:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2220      	movs	r2, #32
 8008226:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2200      	movs	r2, #0
 800822e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008232:	6878      	ldr	r0, [r7, #4]
 8008234:	f7fe fffa 	bl	800722c <HAL_I2C_SlaveRxCpltCallback>
}
 8008238:	bf00      	nop
 800823a:	3710      	adds	r7, #16
 800823c:	46bd      	mov	sp, r7
 800823e:	bd80      	pop	{r7, pc}
 8008240:	08008691 	.word	0x08008691
 8008244:	ffff0000 	.word	0xffff0000

08008248 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008256:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800825c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	2b08      	cmp	r3, #8
 8008262:	d002      	beq.n	800826a <I2C_Slave_AF+0x22>
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2b20      	cmp	r3, #32
 8008268:	d129      	bne.n	80082be <I2C_Slave_AF+0x76>
 800826a:	7bfb      	ldrb	r3, [r7, #15]
 800826c:	2b28      	cmp	r3, #40	; 0x28
 800826e:	d126      	bne.n	80082be <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	4a2c      	ldr	r2, [pc, #176]	; (8008324 <I2C_Slave_AF+0xdc>)
 8008274:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8008284:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800828e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	681b      	ldr	r3, [r3, #0]
 800829a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800829e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2200      	movs	r2, #0
 80082a4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	2220      	movs	r2, #32
 80082aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	2200      	movs	r2, #0
 80082b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f7fe ffd0 	bl	800725c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80082bc:	e02e      	b.n	800831c <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80082be:	7bfb      	ldrb	r3, [r7, #15]
 80082c0:	2b21      	cmp	r3, #33	; 0x21
 80082c2:	d126      	bne.n	8008312 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	4a17      	ldr	r2, [pc, #92]	; (8008324 <I2C_Slave_AF+0xdc>)
 80082c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2221      	movs	r2, #33	; 0x21
 80082ce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	685a      	ldr	r2, [r3, #4]
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80082ee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80082f8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008308:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f7fe ff84 	bl	8007218 <HAL_I2C_SlaveTxCpltCallback>
}
 8008310:	e004      	b.n	800831c <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800831a:	615a      	str	r2, [r3, #20]
}
 800831c:	bf00      	nop
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}
 8008324:	ffff0000 	.word	0xffff0000

08008328 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008336:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800833e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8008340:	7bbb      	ldrb	r3, [r7, #14]
 8008342:	2b10      	cmp	r3, #16
 8008344:	d002      	beq.n	800834c <I2C_ITError+0x24>
 8008346:	7bbb      	ldrb	r3, [r7, #14]
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	d10a      	bne.n	8008362 <I2C_ITError+0x3a>
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	2b22      	cmp	r3, #34	; 0x22
 8008350:	d107      	bne.n	8008362 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	681a      	ldr	r2, [r3, #0]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8008360:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008368:	2b28      	cmp	r3, #40	; 0x28
 800836a:	d107      	bne.n	800837c <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	2200      	movs	r2, #0
 8008370:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	2228      	movs	r2, #40	; 0x28
 8008376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800837a:	e015      	b.n	80083a8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008386:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800838a:	d00a      	beq.n	80083a2 <I2C_ITError+0x7a>
 800838c:	7bfb      	ldrb	r3, [r7, #15]
 800838e:	2b60      	cmp	r3, #96	; 0x60
 8008390:	d007      	beq.n	80083a2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2220      	movs	r2, #32
 8008396:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	685b      	ldr	r3, [r3, #4]
 80083ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80083b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80083b6:	d162      	bne.n	800847e <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	685a      	ldr	r2, [r3, #4]
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80083c6:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083cc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80083d0:	b2db      	uxtb	r3, r3
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d020      	beq.n	8008418 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083da:	4a6a      	ldr	r2, [pc, #424]	; (8008584 <I2C_ITError+0x25c>)
 80083dc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083e2:	4618      	mov	r0, r3
 80083e4:	f7fd fd88 	bl	8005ef8 <HAL_DMA_Abort_IT>
 80083e8:	4603      	mov	r3, r0
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	f000 8089 	beq.w	8008502 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	681a      	ldr	r2, [r3, #0]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f022 0201 	bic.w	r2, r2, #1
 80083fe:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	2220      	movs	r2, #32
 8008404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800840c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800840e:	687a      	ldr	r2, [r7, #4]
 8008410:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008412:	4610      	mov	r0, r2
 8008414:	4798      	blx	r3
 8008416:	e074      	b.n	8008502 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800841c:	4a59      	ldr	r2, [pc, #356]	; (8008584 <I2C_ITError+0x25c>)
 800841e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008424:	4618      	mov	r0, r3
 8008426:	f7fd fd67 	bl	8005ef8 <HAL_DMA_Abort_IT>
 800842a:	4603      	mov	r3, r0
 800842c:	2b00      	cmp	r3, #0
 800842e:	d068      	beq.n	8008502 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	695b      	ldr	r3, [r3, #20]
 8008436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800843a:	2b40      	cmp	r3, #64	; 0x40
 800843c:	d10b      	bne.n	8008456 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	691a      	ldr	r2, [r3, #16]
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008448:	b2d2      	uxtb	r2, r2
 800844a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	681a      	ldr	r2, [r3, #0]
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f022 0201 	bic.w	r2, r2, #1
 8008464:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008472:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008474:	687a      	ldr	r2, [r7, #4]
 8008476:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008478:	4610      	mov	r0, r2
 800847a:	4798      	blx	r3
 800847c:	e041      	b.n	8008502 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b60      	cmp	r3, #96	; 0x60
 8008488:	d125      	bne.n	80084d6 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	2220      	movs	r2, #32
 800848e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	2200      	movs	r2, #0
 8008496:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084a2:	2b40      	cmp	r3, #64	; 0x40
 80084a4:	d10b      	bne.n	80084be <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	691a      	ldr	r2, [r3, #16]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b0:	b2d2      	uxtb	r2, r2
 80084b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084b8:	1c5a      	adds	r2, r3, #1
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	681a      	ldr	r2, [r3, #0]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f022 0201 	bic.w	r2, r2, #1
 80084cc:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f7fe feec 	bl	80072ac <HAL_I2C_AbortCpltCallback>
 80084d4:	e015      	b.n	8008502 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	695b      	ldr	r3, [r3, #20]
 80084dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084e0:	2b40      	cmp	r3, #64	; 0x40
 80084e2:	d10b      	bne.n	80084fc <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	691a      	ldr	r2, [r3, #16]
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084ee:	b2d2      	uxtb	r2, r2
 80084f0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80084fc:	6878      	ldr	r0, [r7, #4]
 80084fe:	f7fe fecb 	bl	8007298 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008506:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	f003 0301 	and.w	r3, r3, #1
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10e      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8008518:	2b00      	cmp	r3, #0
 800851a:	d109      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800851c:	68bb      	ldr	r3, [r7, #8]
 800851e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8008522:	2b00      	cmp	r3, #0
 8008524:	d104      	bne.n	8008530 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8008526:	68bb      	ldr	r3, [r7, #8]
 8008528:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800852c:	2b00      	cmp	r3, #0
 800852e:	d007      	beq.n	8008540 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	685a      	ldr	r2, [r3, #4]
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800853e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008546:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800854c:	f003 0304 	and.w	r3, r3, #4
 8008550:	2b04      	cmp	r3, #4
 8008552:	d113      	bne.n	800857c <I2C_ITError+0x254>
 8008554:	7bfb      	ldrb	r3, [r7, #15]
 8008556:	2b28      	cmp	r3, #40	; 0x28
 8008558:	d110      	bne.n	800857c <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a0a      	ldr	r2, [pc, #40]	; (8008588 <I2C_ITError+0x260>)
 800855e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2200      	movs	r2, #0
 8008564:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2220      	movs	r2, #32
 800856a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	2200      	movs	r2, #0
 8008572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8008576:	6878      	ldr	r0, [r7, #4]
 8008578:	f7fe fe70 	bl	800725c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800857c:	bf00      	nop
 800857e:	3710      	adds	r7, #16
 8008580:	46bd      	mov	sp, r7
 8008582:	bd80      	pop	{r7, pc}
 8008584:	08008691 	.word	0x08008691
 8008588:	ffff0000 	.word	0xffff0000

0800858c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b088      	sub	sp, #32
 8008590:	af02      	add	r7, sp, #8
 8008592:	60f8      	str	r0, [r7, #12]
 8008594:	607a      	str	r2, [r7, #4]
 8008596:	603b      	str	r3, [r7, #0]
 8008598:	460b      	mov	r3, r1
 800859a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085a0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80085a2:	697b      	ldr	r3, [r7, #20]
 80085a4:	2b08      	cmp	r3, #8
 80085a6:	d006      	beq.n	80085b6 <I2C_MasterRequestWrite+0x2a>
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	2b01      	cmp	r3, #1
 80085ac:	d003      	beq.n	80085b6 <I2C_MasterRequestWrite+0x2a>
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80085b4:	d108      	bne.n	80085c8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085b6:	68fb      	ldr	r3, [r7, #12]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	681a      	ldr	r2, [r3, #0]
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085c4:	601a      	str	r2, [r3, #0]
 80085c6:	e00b      	b.n	80085e0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	2b12      	cmp	r3, #18
 80085ce:	d107      	bne.n	80085e0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	681a      	ldr	r2, [r3, #0]
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80085de:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	9300      	str	r3, [sp, #0]
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2200      	movs	r2, #0
 80085e8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80085ec:	68f8      	ldr	r0, [r7, #12]
 80085ee:	f000 f8f7 	bl	80087e0 <I2C_WaitOnFlagUntilTimeout>
 80085f2:	4603      	mov	r3, r0
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00d      	beq.n	8008614 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008606:	d103      	bne.n	8008610 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800860e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8008610:	2303      	movs	r3, #3
 8008612:	e035      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800861c:	d108      	bne.n	8008630 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800861e:	897b      	ldrh	r3, [r7, #10]
 8008620:	b2db      	uxtb	r3, r3
 8008622:	461a      	mov	r2, r3
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800862c:	611a      	str	r2, [r3, #16]
 800862e:	e01b      	b.n	8008668 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8008630:	897b      	ldrh	r3, [r7, #10]
 8008632:	11db      	asrs	r3, r3, #7
 8008634:	b2db      	uxtb	r3, r3
 8008636:	f003 0306 	and.w	r3, r3, #6
 800863a:	b2db      	uxtb	r3, r3
 800863c:	f063 030f 	orn	r3, r3, #15
 8008640:	b2da      	uxtb	r2, r3
 8008642:	68fb      	ldr	r3, [r7, #12]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	687a      	ldr	r2, [r7, #4]
 800864c:	490e      	ldr	r1, [pc, #56]	; (8008688 <I2C_MasterRequestWrite+0xfc>)
 800864e:	68f8      	ldr	r0, [r7, #12]
 8008650:	f000 f91d 	bl	800888e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008654:	4603      	mov	r3, r0
 8008656:	2b00      	cmp	r3, #0
 8008658:	d001      	beq.n	800865e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800865a:	2301      	movs	r3, #1
 800865c:	e010      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800865e:	897b      	ldrh	r3, [r7, #10]
 8008660:	b2da      	uxtb	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	687a      	ldr	r2, [r7, #4]
 800866c:	4907      	ldr	r1, [pc, #28]	; (800868c <I2C_MasterRequestWrite+0x100>)
 800866e:	68f8      	ldr	r0, [r7, #12]
 8008670:	f000 f90d 	bl	800888e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8008674:	4603      	mov	r3, r0
 8008676:	2b00      	cmp	r3, #0
 8008678:	d001      	beq.n	800867e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800867a:	2301      	movs	r3, #1
 800867c:	e000      	b.n	8008680 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800867e:	2300      	movs	r3, #0
}
 8008680:	4618      	mov	r0, r3
 8008682:	3718      	adds	r7, #24
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}
 8008688:	00010008 	.word	0x00010008
 800868c:	00010002 	.word	0x00010002

08008690 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008690:	b580      	push	{r7, lr}
 8008692:	b086      	sub	sp, #24
 8008694:	af00      	add	r7, sp, #0
 8008696:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008698:	2300      	movs	r3, #0
 800869a:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086a0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086a8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80086aa:	4b4b      	ldr	r3, [pc, #300]	; (80087d8 <I2C_DMAAbort+0x148>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	08db      	lsrs	r3, r3, #3
 80086b0:	4a4a      	ldr	r2, [pc, #296]	; (80087dc <I2C_DMAAbort+0x14c>)
 80086b2:	fba2 2303 	umull	r2, r3, r2, r3
 80086b6:	0a1a      	lsrs	r2, r3, #8
 80086b8:	4613      	mov	r3, r2
 80086ba:	009b      	lsls	r3, r3, #2
 80086bc:	4413      	add	r3, r2
 80086be:	00da      	lsls	r2, r3, #3
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d106      	bne.n	80086d8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80086ca:	697b      	ldr	r3, [r7, #20]
 80086cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ce:	f043 0220 	orr.w	r2, r3, #32
 80086d2:	697b      	ldr	r3, [r7, #20]
 80086d4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80086d6:	e00a      	b.n	80086ee <I2C_DMAAbort+0x5e>
    }
    count--;
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	3b01      	subs	r3, #1
 80086dc:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80086e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80086ec:	d0ea      	beq.n	80086c4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80086ee:	697b      	ldr	r3, [r7, #20]
 80086f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d003      	beq.n	80086fe <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80086fa:	2200      	movs	r2, #0
 80086fc:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008702:	2b00      	cmp	r3, #0
 8008704:	d003      	beq.n	800870e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8008706:	697b      	ldr	r3, [r7, #20]
 8008708:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800870a:	2200      	movs	r2, #0
 800870c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800870e:	697b      	ldr	r3, [r7, #20]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	681a      	ldr	r2, [r3, #0]
 8008714:	697b      	ldr	r3, [r7, #20]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800871c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2200      	movs	r2, #0
 8008722:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8008724:	697b      	ldr	r3, [r7, #20]
 8008726:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800872c:	697b      	ldr	r3, [r7, #20]
 800872e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008730:	2200      	movs	r2, #0
 8008732:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8008734:	697b      	ldr	r3, [r7, #20]
 8008736:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008738:	2b00      	cmp	r3, #0
 800873a:	d003      	beq.n	8008744 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800873c:	697b      	ldr	r3, [r7, #20]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	2200      	movs	r2, #0
 8008742:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	697b      	ldr	r3, [r7, #20]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 0201 	bic.w	r2, r2, #1
 8008752:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b60      	cmp	r3, #96	; 0x60
 800875e:	d10e      	bne.n	800877e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	2220      	movs	r2, #32
 8008764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8008768:	697b      	ldr	r3, [r7, #20]
 800876a:	2200      	movs	r2, #0
 800876c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8008770:	697b      	ldr	r3, [r7, #20]
 8008772:	2200      	movs	r2, #0
 8008774:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008776:	6978      	ldr	r0, [r7, #20]
 8008778:	f7fe fd98 	bl	80072ac <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800877c:	e027      	b.n	80087ce <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800877e:	7cfb      	ldrb	r3, [r7, #19]
 8008780:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008784:	2b28      	cmp	r3, #40	; 0x28
 8008786:	d117      	bne.n	80087b8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8008788:	697b      	ldr	r3, [r7, #20]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	697b      	ldr	r3, [r7, #20]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f042 0201 	orr.w	r2, r2, #1
 8008796:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8008798:	697b      	ldr	r3, [r7, #20]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80087a6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	2200      	movs	r2, #0
 80087ac:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2228      	movs	r2, #40	; 0x28
 80087b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80087b6:	e007      	b.n	80087c8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80087b8:	697b      	ldr	r3, [r7, #20]
 80087ba:	2220      	movs	r2, #32
 80087bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80087c0:	697b      	ldr	r3, [r7, #20]
 80087c2:	2200      	movs	r2, #0
 80087c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80087c8:	6978      	ldr	r0, [r7, #20]
 80087ca:	f7fe fd65 	bl	8007298 <HAL_I2C_ErrorCallback>
}
 80087ce:	bf00      	nop
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000250 	.word	0x20000250
 80087dc:	14f8b589 	.word	0x14f8b589

080087e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	60f8      	str	r0, [r7, #12]
 80087e8:	60b9      	str	r1, [r7, #8]
 80087ea:	603b      	str	r3, [r7, #0]
 80087ec:	4613      	mov	r3, r2
 80087ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80087f0:	e025      	b.n	800883e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087f8:	d021      	beq.n	800883e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80087fa:	f7fc fcc3 	bl	8005184 <HAL_GetTick>
 80087fe:	4602      	mov	r2, r0
 8008800:	69bb      	ldr	r3, [r7, #24]
 8008802:	1ad3      	subs	r3, r2, r3
 8008804:	683a      	ldr	r2, [r7, #0]
 8008806:	429a      	cmp	r2, r3
 8008808:	d302      	bcc.n	8008810 <I2C_WaitOnFlagUntilTimeout+0x30>
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d116      	bne.n	800883e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8008810:	68fb      	ldr	r3, [r7, #12]
 8008812:	2200      	movs	r2, #0
 8008814:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	2220      	movs	r2, #32
 800881a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	2200      	movs	r2, #0
 8008822:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800882a:	f043 0220 	orr.w	r2, r3, #32
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	2200      	movs	r2, #0
 8008836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800883a:	2301      	movs	r3, #1
 800883c:	e023      	b.n	8008886 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	0c1b      	lsrs	r3, r3, #16
 8008842:	b2db      	uxtb	r3, r3
 8008844:	2b01      	cmp	r3, #1
 8008846:	d10d      	bne.n	8008864 <I2C_WaitOnFlagUntilTimeout+0x84>
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	695b      	ldr	r3, [r3, #20]
 800884e:	43da      	mvns	r2, r3
 8008850:	68bb      	ldr	r3, [r7, #8]
 8008852:	4013      	ands	r3, r2
 8008854:	b29b      	uxth	r3, r3
 8008856:	2b00      	cmp	r3, #0
 8008858:	bf0c      	ite	eq
 800885a:	2301      	moveq	r3, #1
 800885c:	2300      	movne	r3, #0
 800885e:	b2db      	uxtb	r3, r3
 8008860:	461a      	mov	r2, r3
 8008862:	e00c      	b.n	800887e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8008864:	68fb      	ldr	r3, [r7, #12]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	699b      	ldr	r3, [r3, #24]
 800886a:	43da      	mvns	r2, r3
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	4013      	ands	r3, r2
 8008870:	b29b      	uxth	r3, r3
 8008872:	2b00      	cmp	r3, #0
 8008874:	bf0c      	ite	eq
 8008876:	2301      	moveq	r3, #1
 8008878:	2300      	movne	r3, #0
 800887a:	b2db      	uxtb	r3, r3
 800887c:	461a      	mov	r2, r3
 800887e:	79fb      	ldrb	r3, [r7, #7]
 8008880:	429a      	cmp	r2, r3
 8008882:	d0b6      	beq.n	80087f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}

0800888e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800888e:	b580      	push	{r7, lr}
 8008890:	b084      	sub	sp, #16
 8008892:	af00      	add	r7, sp, #0
 8008894:	60f8      	str	r0, [r7, #12]
 8008896:	60b9      	str	r1, [r7, #8]
 8008898:	607a      	str	r2, [r7, #4]
 800889a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800889c:	e051      	b.n	8008942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	695b      	ldr	r3, [r3, #20]
 80088a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80088ac:	d123      	bne.n	80088f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	681a      	ldr	r2, [r3, #0]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80088bc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80088c6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	2200      	movs	r2, #0
 80088cc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2220      	movs	r2, #32
 80088d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	2200      	movs	r2, #0
 80088da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088e2:	f043 0204 	orr.w	r2, r3, #4
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	2200      	movs	r2, #0
 80088ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80088f2:	2301      	movs	r3, #1
 80088f4:	e046      	b.n	8008984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088fc:	d021      	beq.n	8008942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80088fe:	f7fc fc41 	bl	8005184 <HAL_GetTick>
 8008902:	4602      	mov	r2, r0
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	1ad3      	subs	r3, r2, r3
 8008908:	687a      	ldr	r2, [r7, #4]
 800890a:	429a      	cmp	r2, r3
 800890c:	d302      	bcc.n	8008914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d116      	bne.n	8008942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2200      	movs	r2, #0
 8008918:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	2220      	movs	r2, #32
 800891e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800892e:	f043 0220 	orr.w	r2, r3, #32
 8008932:	68fb      	ldr	r3, [r7, #12]
 8008934:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	2200      	movs	r2, #0
 800893a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	e020      	b.n	8008984 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	0c1b      	lsrs	r3, r3, #16
 8008946:	b2db      	uxtb	r3, r3
 8008948:	2b01      	cmp	r3, #1
 800894a:	d10c      	bne.n	8008966 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	695b      	ldr	r3, [r3, #20]
 8008952:	43da      	mvns	r2, r3
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	4013      	ands	r3, r2
 8008958:	b29b      	uxth	r3, r3
 800895a:	2b00      	cmp	r3, #0
 800895c:	bf14      	ite	ne
 800895e:	2301      	movne	r3, #1
 8008960:	2300      	moveq	r3, #0
 8008962:	b2db      	uxtb	r3, r3
 8008964:	e00b      	b.n	800897e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	699b      	ldr	r3, [r3, #24]
 800896c:	43da      	mvns	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	4013      	ands	r3, r2
 8008972:	b29b      	uxth	r3, r3
 8008974:	2b00      	cmp	r3, #0
 8008976:	bf14      	ite	ne
 8008978:	2301      	movne	r3, #1
 800897a:	2300      	moveq	r3, #0
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b00      	cmp	r3, #0
 8008980:	d18d      	bne.n	800889e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8008982:	2300      	movs	r3, #0
}
 8008984:	4618      	mov	r0, r3
 8008986:	3710      	adds	r7, #16
 8008988:	46bd      	mov	sp, r7
 800898a:	bd80      	pop	{r7, pc}

0800898c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	60f8      	str	r0, [r7, #12]
 8008994:	60b9      	str	r1, [r7, #8]
 8008996:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008998:	e02d      	b.n	80089f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800899a:	68f8      	ldr	r0, [r7, #12]
 800899c:	f000 f8aa 	bl	8008af4 <I2C_IsAcknowledgeFailed>
 80089a0:	4603      	mov	r3, r0
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d001      	beq.n	80089aa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80089a6:	2301      	movs	r3, #1
 80089a8:	e02d      	b.n	8008a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b0:	d021      	beq.n	80089f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089b2:	f7fc fbe7 	bl	8005184 <HAL_GetTick>
 80089b6:	4602      	mov	r2, r0
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	1ad3      	subs	r3, r2, r3
 80089bc:	68ba      	ldr	r2, [r7, #8]
 80089be:	429a      	cmp	r2, r3
 80089c0:	d302      	bcc.n	80089c8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d116      	bne.n	80089f6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	2200      	movs	r2, #0
 80089cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	2220      	movs	r2, #32
 80089d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f043 0220 	orr.w	r2, r3, #32
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	2200      	movs	r2, #0
 80089ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e007      	b.n	8008a06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	681b      	ldr	r3, [r3, #0]
 80089fa:	695b      	ldr	r3, [r3, #20]
 80089fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a00:	2b80      	cmp	r3, #128	; 0x80
 8008a02:	d1ca      	bne.n	800899a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a04:	2300      	movs	r3, #0
}
 8008a06:	4618      	mov	r0, r3
 8008a08:	3710      	adds	r7, #16
 8008a0a:	46bd      	mov	sp, r7
 8008a0c:	bd80      	pop	{r7, pc}

08008a0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008a0e:	b580      	push	{r7, lr}
 8008a10:	b084      	sub	sp, #16
 8008a12:	af00      	add	r7, sp, #0
 8008a14:	60f8      	str	r0, [r7, #12]
 8008a16:	60b9      	str	r1, [r7, #8]
 8008a18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a1a:	e02d      	b.n	8008a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f000 f869 	bl	8008af4 <I2C_IsAcknowledgeFailed>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8008a28:	2301      	movs	r3, #1
 8008a2a:	e02d      	b.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008a2c:	68bb      	ldr	r3, [r7, #8]
 8008a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008a32:	d021      	beq.n	8008a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008a34:	f7fc fba6 	bl	8005184 <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d116      	bne.n	8008a78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	2220      	movs	r2, #32
 8008a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a64:	f043 0220 	orr.w	r2, r3, #32
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	2200      	movs	r2, #0
 8008a70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8008a74:	2301      	movs	r3, #1
 8008a76:	e007      	b.n	8008a88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	695b      	ldr	r3, [r3, #20]
 8008a7e:	f003 0304 	and.w	r3, r3, #4
 8008a82:	2b04      	cmp	r3, #4
 8008a84:	d1ca      	bne.n	8008a1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8008a86:	2300      	movs	r3, #0
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008a98:	2300      	movs	r3, #0
 8008a9a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8008a9c:	4b13      	ldr	r3, [pc, #76]	; (8008aec <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	08db      	lsrs	r3, r3, #3
 8008aa2:	4a13      	ldr	r2, [pc, #76]	; (8008af0 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8008aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8008aa8:	0a1a      	lsrs	r2, r3, #8
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	3b01      	subs	r3, #1
 8008ab6:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d107      	bne.n	8008ace <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ac2:	f043 0220 	orr.w	r2, r3, #32
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8008aca:	2301      	movs	r3, #1
 8008acc:	e008      	b.n	8008ae0 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008adc:	d0e9      	beq.n	8008ab2 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8008ade:	2300      	movs	r3, #0
}
 8008ae0:	4618      	mov	r0, r3
 8008ae2:	3714      	adds	r7, #20
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr
 8008aec:	20000250 	.word	0x20000250
 8008af0:	14f8b589 	.word	0x14f8b589

08008af4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8008af4:	b480      	push	{r7}
 8008af6:	b083      	sub	sp, #12
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	695b      	ldr	r3, [r3, #20]
 8008b02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b0a:	d11b      	bne.n	8008b44 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8008b14:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2220      	movs	r2, #32
 8008b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	2200      	movs	r2, #0
 8008b28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b30:	f043 0204 	orr.w	r2, r3, #4
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8008b40:	2301      	movs	r3, #1
 8008b42:	e000      	b.n	8008b46 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8008b44:	2300      	movs	r3, #0
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	370c      	adds	r7, #12
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b50:	4770      	bx	lr

08008b52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8008b52:	b480      	push	{r7}
 8008b54:	b083      	sub	sp, #12
 8008b56:	af00      	add	r7, sp, #0
 8008b58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b5e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8008b62:	d103      	bne.n	8008b6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2201      	movs	r2, #1
 8008b68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8008b6a:	e007      	b.n	8008b7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8008b74:	d102      	bne.n	8008b7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	2208      	movs	r2, #8
 8008b7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8008b7c:	bf00      	nop
 8008b7e:	370c      	adds	r7, #12
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008b88:	b580      	push	{r7, lr}
 8008b8a:	b086      	sub	sp, #24
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d101      	bne.n	8008b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008b96:	2301      	movs	r3, #1
 8008b98:	e267      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f003 0301 	and.w	r3, r3, #1
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d075      	beq.n	8008c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008ba6:	4b88      	ldr	r3, [pc, #544]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	f003 030c 	and.w	r3, r3, #12
 8008bae:	2b04      	cmp	r3, #4
 8008bb0:	d00c      	beq.n	8008bcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bb2:	4b85      	ldr	r3, [pc, #532]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008bba:	2b08      	cmp	r3, #8
 8008bbc:	d112      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008bbe:	4b82      	ldr	r3, [pc, #520]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008bc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bca:	d10b      	bne.n	8008be4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008bcc:	4b7e      	ldr	r3, [pc, #504]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d05b      	beq.n	8008c90 <HAL_RCC_OscConfig+0x108>
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d157      	bne.n	8008c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008be0:	2301      	movs	r3, #1
 8008be2:	e242      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	685b      	ldr	r3, [r3, #4]
 8008be8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008bec:	d106      	bne.n	8008bfc <HAL_RCC_OscConfig+0x74>
 8008bee:	4b76      	ldr	r3, [pc, #472]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	4a75      	ldr	r2, [pc, #468]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008bf8:	6013      	str	r3, [r2, #0]
 8008bfa:	e01d      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008c04:	d10c      	bne.n	8008c20 <HAL_RCC_OscConfig+0x98>
 8008c06:	4b70      	ldr	r3, [pc, #448]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	4a6f      	ldr	r2, [pc, #444]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008c10:	6013      	str	r3, [r2, #0]
 8008c12:	4b6d      	ldr	r3, [pc, #436]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	4a6c      	ldr	r2, [pc, #432]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c1c:	6013      	str	r3, [r2, #0]
 8008c1e:	e00b      	b.n	8008c38 <HAL_RCC_OscConfig+0xb0>
 8008c20:	4b69      	ldr	r3, [pc, #420]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	4a68      	ldr	r2, [pc, #416]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008c2a:	6013      	str	r3, [r2, #0]
 8008c2c:	4b66      	ldr	r3, [pc, #408]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	4a65      	ldr	r2, [pc, #404]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	685b      	ldr	r3, [r3, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d013      	beq.n	8008c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c40:	f7fc faa0 	bl	8005184 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c48:	f7fc fa9c 	bl	8005184 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b64      	cmp	r3, #100	; 0x64
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e207      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008c5a:	4b5b      	ldr	r3, [pc, #364]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0xc0>
 8008c66:	e014      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008c68:	f7fc fa8c 	bl	8005184 <HAL_GetTick>
 8008c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c6e:	e008      	b.n	8008c82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008c70:	f7fc fa88 	bl	8005184 <HAL_GetTick>
 8008c74:	4602      	mov	r2, r0
 8008c76:	693b      	ldr	r3, [r7, #16]
 8008c78:	1ad3      	subs	r3, r2, r3
 8008c7a:	2b64      	cmp	r3, #100	; 0x64
 8008c7c:	d901      	bls.n	8008c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008c7e:	2303      	movs	r3, #3
 8008c80:	e1f3      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008c82:	4b51      	ldr	r3, [pc, #324]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d1f0      	bne.n	8008c70 <HAL_RCC_OscConfig+0xe8>
 8008c8e:	e000      	b.n	8008c92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	f003 0302 	and.w	r3, r3, #2
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d063      	beq.n	8008d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008c9e:	4b4a      	ldr	r3, [pc, #296]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	f003 030c 	and.w	r3, r3, #12
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d00b      	beq.n	8008cc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008caa:	4b47      	ldr	r3, [pc, #284]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008cb2:	2b08      	cmp	r3, #8
 8008cb4:	d11c      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008cb6:	4b44      	ldr	r3, [pc, #272]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cb8:	685b      	ldr	r3, [r3, #4]
 8008cba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d116      	bne.n	8008cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cc2:	4b41      	ldr	r3, [pc, #260]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	f003 0302 	and.w	r3, r3, #2
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	2b01      	cmp	r3, #1
 8008cd4:	d001      	beq.n	8008cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008cd6:	2301      	movs	r3, #1
 8008cd8:	e1c7      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008cda:	4b3b      	ldr	r3, [pc, #236]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	691b      	ldr	r3, [r3, #16]
 8008ce6:	00db      	lsls	r3, r3, #3
 8008ce8:	4937      	ldr	r1, [pc, #220]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008cea:	4313      	orrs	r3, r2
 8008cec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008cee:	e03a      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d020      	beq.n	8008d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008cf8:	4b34      	ldr	r3, [pc, #208]	; (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008cfa:	2201      	movs	r2, #1
 8008cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cfe:	f7fc fa41 	bl	8005184 <HAL_GetTick>
 8008d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d04:	e008      	b.n	8008d18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d06:	f7fc fa3d 	bl	8005184 <HAL_GetTick>
 8008d0a:	4602      	mov	r2, r0
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	1ad3      	subs	r3, r2, r3
 8008d10:	2b02      	cmp	r3, #2
 8008d12:	d901      	bls.n	8008d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008d14:	2303      	movs	r3, #3
 8008d16:	e1a8      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d18:	4b2b      	ldr	r3, [pc, #172]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	f003 0302 	and.w	r3, r3, #2
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	d0f0      	beq.n	8008d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008d24:	4b28      	ldr	r3, [pc, #160]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	691b      	ldr	r3, [r3, #16]
 8008d30:	00db      	lsls	r3, r3, #3
 8008d32:	4925      	ldr	r1, [pc, #148]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d34:	4313      	orrs	r3, r2
 8008d36:	600b      	str	r3, [r1, #0]
 8008d38:	e015      	b.n	8008d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008d3a:	4b24      	ldr	r3, [pc, #144]	; (8008dcc <HAL_RCC_OscConfig+0x244>)
 8008d3c:	2200      	movs	r2, #0
 8008d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d40:	f7fc fa20 	bl	8005184 <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d46:	e008      	b.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008d48:	f7fc fa1c 	bl	8005184 <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	2b02      	cmp	r3, #2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e187      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008d5a:	4b1b      	ldr	r3, [pc, #108]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f003 0302 	and.w	r3, r3, #2
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d1f0      	bne.n	8008d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f003 0308 	and.w	r3, r3, #8
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d036      	beq.n	8008de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	695b      	ldr	r3, [r3, #20]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d016      	beq.n	8008da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008d7a:	4b15      	ldr	r3, [pc, #84]	; (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008d7c:	2201      	movs	r2, #1
 8008d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d80:	f7fc fa00 	bl	8005184 <HAL_GetTick>
 8008d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d86:	e008      	b.n	8008d9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008d88:	f7fc f9fc 	bl	8005184 <HAL_GetTick>
 8008d8c:	4602      	mov	r2, r0
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	1ad3      	subs	r3, r2, r3
 8008d92:	2b02      	cmp	r3, #2
 8008d94:	d901      	bls.n	8008d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008d96:	2303      	movs	r3, #3
 8008d98:	e167      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008d9a:	4b0b      	ldr	r3, [pc, #44]	; (8008dc8 <HAL_RCC_OscConfig+0x240>)
 8008d9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008d9e:	f003 0302 	and.w	r3, r3, #2
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d0f0      	beq.n	8008d88 <HAL_RCC_OscConfig+0x200>
 8008da6:	e01b      	b.n	8008de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008da8:	4b09      	ldr	r3, [pc, #36]	; (8008dd0 <HAL_RCC_OscConfig+0x248>)
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008dae:	f7fc f9e9 	bl	8005184 <HAL_GetTick>
 8008db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008db4:	e00e      	b.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008db6:	f7fc f9e5 	bl	8005184 <HAL_GetTick>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	1ad3      	subs	r3, r2, r3
 8008dc0:	2b02      	cmp	r3, #2
 8008dc2:	d907      	bls.n	8008dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008dc4:	2303      	movs	r3, #3
 8008dc6:	e150      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008dc8:	40023800 	.word	0x40023800
 8008dcc:	42470000 	.word	0x42470000
 8008dd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008dd4:	4b88      	ldr	r3, [pc, #544]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008dd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d1ea      	bne.n	8008db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 0304 	and.w	r3, r3, #4
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	f000 8097 	beq.w	8008f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008dee:	2300      	movs	r3, #0
 8008df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008df2:	4b81      	ldr	r3, [pc, #516]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008df6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d10f      	bne.n	8008e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	60bb      	str	r3, [r7, #8]
 8008e02:	4b7d      	ldr	r3, [pc, #500]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e06:	4a7c      	ldr	r2, [pc, #496]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008e0c:	6413      	str	r3, [r2, #64]	; 0x40
 8008e0e:	4b7a      	ldr	r3, [pc, #488]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e16:	60bb      	str	r3, [r7, #8]
 8008e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e1e:	4b77      	ldr	r3, [pc, #476]	; (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d118      	bne.n	8008e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008e2a:	4b74      	ldr	r3, [pc, #464]	; (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	4a73      	ldr	r2, [pc, #460]	; (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008e36:	f7fc f9a5 	bl	8005184 <HAL_GetTick>
 8008e3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e3c:	e008      	b.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008e3e:	f7fc f9a1 	bl	8005184 <HAL_GetTick>
 8008e42:	4602      	mov	r2, r0
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	1ad3      	subs	r3, r2, r3
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	d901      	bls.n	8008e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008e4c:	2303      	movs	r3, #3
 8008e4e:	e10c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008e50:	4b6a      	ldr	r3, [pc, #424]	; (8008ffc <HAL_RCC_OscConfig+0x474>)
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d0f0      	beq.n	8008e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d106      	bne.n	8008e72 <HAL_RCC_OscConfig+0x2ea>
 8008e64:	4b64      	ldr	r3, [pc, #400]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e68:	4a63      	ldr	r2, [pc, #396]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e6a:	f043 0301 	orr.w	r3, r3, #1
 8008e6e:	6713      	str	r3, [r2, #112]	; 0x70
 8008e70:	e01c      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	2b05      	cmp	r3, #5
 8008e78:	d10c      	bne.n	8008e94 <HAL_RCC_OscConfig+0x30c>
 8008e7a:	4b5f      	ldr	r3, [pc, #380]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e7e:	4a5e      	ldr	r2, [pc, #376]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e80:	f043 0304 	orr.w	r3, r3, #4
 8008e84:	6713      	str	r3, [r2, #112]	; 0x70
 8008e86:	4b5c      	ldr	r3, [pc, #368]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e8a:	4a5b      	ldr	r2, [pc, #364]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e8c:	f043 0301 	orr.w	r3, r3, #1
 8008e90:	6713      	str	r3, [r2, #112]	; 0x70
 8008e92:	e00b      	b.n	8008eac <HAL_RCC_OscConfig+0x324>
 8008e94:	4b58      	ldr	r3, [pc, #352]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e98:	4a57      	ldr	r2, [pc, #348]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008e9a:	f023 0301 	bic.w	r3, r3, #1
 8008e9e:	6713      	str	r3, [r2, #112]	; 0x70
 8008ea0:	4b55      	ldr	r3, [pc, #340]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ea4:	4a54      	ldr	r2, [pc, #336]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ea6:	f023 0304 	bic.w	r3, r3, #4
 8008eaa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	689b      	ldr	r3, [r3, #8]
 8008eb0:	2b00      	cmp	r3, #0
 8008eb2:	d015      	beq.n	8008ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008eb4:	f7fc f966 	bl	8005184 <HAL_GetTick>
 8008eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008eba:	e00a      	b.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ebc:	f7fc f962 	bl	8005184 <HAL_GetTick>
 8008ec0:	4602      	mov	r2, r0
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	1ad3      	subs	r3, r2, r3
 8008ec6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	d901      	bls.n	8008ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008ece:	2303      	movs	r3, #3
 8008ed0:	e0cb      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ed2:	4b49      	ldr	r3, [pc, #292]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008ed4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ed6:	f003 0302 	and.w	r3, r3, #2
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d0ee      	beq.n	8008ebc <HAL_RCC_OscConfig+0x334>
 8008ede:	e014      	b.n	8008f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ee0:	f7fc f950 	bl	8005184 <HAL_GetTick>
 8008ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ee6:	e00a      	b.n	8008efe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ee8:	f7fc f94c 	bl	8005184 <HAL_GetTick>
 8008eec:	4602      	mov	r2, r0
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	1ad3      	subs	r3, r2, r3
 8008ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ef6:	4293      	cmp	r3, r2
 8008ef8:	d901      	bls.n	8008efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008efa:	2303      	movs	r3, #3
 8008efc:	e0b5      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008efe:	4b3e      	ldr	r3, [pc, #248]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008f02:	f003 0302 	and.w	r3, r3, #2
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d1ee      	bne.n	8008ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008f0a:	7dfb      	ldrb	r3, [r7, #23]
 8008f0c:	2b01      	cmp	r3, #1
 8008f0e:	d105      	bne.n	8008f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008f10:	4b39      	ldr	r3, [pc, #228]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f14:	4a38      	ldr	r2, [pc, #224]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f16:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008f1a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	f000 80a1 	beq.w	8009068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008f26:	4b34      	ldr	r3, [pc, #208]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	f003 030c 	and.w	r3, r3, #12
 8008f2e:	2b08      	cmp	r3, #8
 8008f30:	d05c      	beq.n	8008fec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	2b02      	cmp	r3, #2
 8008f38:	d141      	bne.n	8008fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f3a:	4b31      	ldr	r3, [pc, #196]	; (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f3c:	2200      	movs	r2, #0
 8008f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f40:	f7fc f920 	bl	8005184 <HAL_GetTick>
 8008f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f46:	e008      	b.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f48:	f7fc f91c 	bl	8005184 <HAL_GetTick>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	1ad3      	subs	r3, r2, r3
 8008f52:	2b02      	cmp	r3, #2
 8008f54:	d901      	bls.n	8008f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008f56:	2303      	movs	r3, #3
 8008f58:	e087      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008f5a:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d1f0      	bne.n	8008f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69da      	ldr	r2, [r3, #28]
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	6a1b      	ldr	r3, [r3, #32]
 8008f6e:	431a      	orrs	r2, r3
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f74:	019b      	lsls	r3, r3, #6
 8008f76:	431a      	orrs	r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f7c:	085b      	lsrs	r3, r3, #1
 8008f7e:	3b01      	subs	r3, #1
 8008f80:	041b      	lsls	r3, r3, #16
 8008f82:	431a      	orrs	r2, r3
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	061b      	lsls	r3, r3, #24
 8008f8a:	491b      	ldr	r1, [pc, #108]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008f8c:	4313      	orrs	r3, r2
 8008f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f90:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <HAL_RCC_OscConfig+0x478>)
 8008f92:	2201      	movs	r2, #1
 8008f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008f96:	f7fc f8f5 	bl	8005184 <HAL_GetTick>
 8008f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f9c:	e008      	b.n	8008fb0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008f9e:	f7fc f8f1 	bl	8005184 <HAL_GetTick>
 8008fa2:	4602      	mov	r2, r0
 8008fa4:	693b      	ldr	r3, [r7, #16]
 8008fa6:	1ad3      	subs	r3, r2, r3
 8008fa8:	2b02      	cmp	r3, #2
 8008faa:	d901      	bls.n	8008fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008fac:	2303      	movs	r3, #3
 8008fae:	e05c      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008fb0:	4b11      	ldr	r3, [pc, #68]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d0f0      	beq.n	8008f9e <HAL_RCC_OscConfig+0x416>
 8008fbc:	e054      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fbe:	4b10      	ldr	r3, [pc, #64]	; (8009000 <HAL_RCC_OscConfig+0x478>)
 8008fc0:	2200      	movs	r2, #0
 8008fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008fc4:	f7fc f8de 	bl	8005184 <HAL_GetTick>
 8008fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fca:	e008      	b.n	8008fde <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008fcc:	f7fc f8da 	bl	8005184 <HAL_GetTick>
 8008fd0:	4602      	mov	r2, r0
 8008fd2:	693b      	ldr	r3, [r7, #16]
 8008fd4:	1ad3      	subs	r3, r2, r3
 8008fd6:	2b02      	cmp	r3, #2
 8008fd8:	d901      	bls.n	8008fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008fda:	2303      	movs	r3, #3
 8008fdc:	e045      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008fde:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <HAL_RCC_OscConfig+0x470>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d1f0      	bne.n	8008fcc <HAL_RCC_OscConfig+0x444>
 8008fea:	e03d      	b.n	8009068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	699b      	ldr	r3, [r3, #24]
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d107      	bne.n	8009004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008ff4:	2301      	movs	r3, #1
 8008ff6:	e038      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
 8008ff8:	40023800 	.word	0x40023800
 8008ffc:	40007000 	.word	0x40007000
 8009000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8009004:	4b1b      	ldr	r3, [pc, #108]	; (8009074 <HAL_RCC_OscConfig+0x4ec>)
 8009006:	685b      	ldr	r3, [r3, #4]
 8009008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	2b01      	cmp	r3, #1
 8009010:	d028      	beq.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800901c:	429a      	cmp	r2, r3
 800901e:	d121      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800902a:	429a      	cmp	r2, r3
 800902c:	d11a      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800902e:	68fa      	ldr	r2, [r7, #12]
 8009030:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8009034:	4013      	ands	r3, r2
 8009036:	687a      	ldr	r2, [r7, #4]
 8009038:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800903a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800903c:	4293      	cmp	r3, r2
 800903e:	d111      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800904a:	085b      	lsrs	r3, r3, #1
 800904c:	3b01      	subs	r3, #1
 800904e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8009050:	429a      	cmp	r2, r3
 8009052:	d107      	bne.n	8009064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800905e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8009060:	429a      	cmp	r2, r3
 8009062:	d001      	beq.n	8009068 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8009064:	2301      	movs	r3, #1
 8009066:	e000      	b.n	800906a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8009068:	2300      	movs	r3, #0
}
 800906a:	4618      	mov	r0, r3
 800906c:	3718      	adds	r7, #24
 800906e:	46bd      	mov	sp, r7
 8009070:	bd80      	pop	{r7, pc}
 8009072:	bf00      	nop
 8009074:	40023800 	.word	0x40023800

08009078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009078:	b580      	push	{r7, lr}
 800907a:	b084      	sub	sp, #16
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
 8009080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2b00      	cmp	r3, #0
 8009086:	d101      	bne.n	800908c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009088:	2301      	movs	r3, #1
 800908a:	e0cc      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800908c:	4b68      	ldr	r3, [pc, #416]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f003 0307 	and.w	r3, r3, #7
 8009094:	683a      	ldr	r2, [r7, #0]
 8009096:	429a      	cmp	r2, r3
 8009098:	d90c      	bls.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800909a:	4b65      	ldr	r3, [pc, #404]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800909c:	683a      	ldr	r2, [r7, #0]
 800909e:	b2d2      	uxtb	r2, r2
 80090a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80090a2:	4b63      	ldr	r3, [pc, #396]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	f003 0307 	and.w	r3, r3, #7
 80090aa:	683a      	ldr	r2, [r7, #0]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	d001      	beq.n	80090b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80090b0:	2301      	movs	r3, #1
 80090b2:	e0b8      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d020      	beq.n	8009102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f003 0304 	and.w	r3, r3, #4
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d005      	beq.n	80090d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80090cc:	4b59      	ldr	r3, [pc, #356]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ce:	689b      	ldr	r3, [r3, #8]
 80090d0:	4a58      	ldr	r2, [pc, #352]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80090d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	f003 0308 	and.w	r3, r3, #8
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d005      	beq.n	80090f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80090e4:	4b53      	ldr	r3, [pc, #332]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	4a52      	ldr	r2, [pc, #328]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80090ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80090f0:	4b50      	ldr	r3, [pc, #320]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090f2:	689b      	ldr	r3, [r3, #8]
 80090f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	689b      	ldr	r3, [r3, #8]
 80090fc:	494d      	ldr	r1, [pc, #308]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	f003 0301 	and.w	r3, r3, #1
 800910a:	2b00      	cmp	r3, #0
 800910c:	d044      	beq.n	8009198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	685b      	ldr	r3, [r3, #4]
 8009112:	2b01      	cmp	r3, #1
 8009114:	d107      	bne.n	8009126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8009116:	4b47      	ldr	r3, [pc, #284]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d119      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009122:	2301      	movs	r3, #1
 8009124:	e07f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	685b      	ldr	r3, [r3, #4]
 800912a:	2b02      	cmp	r3, #2
 800912c:	d003      	beq.n	8009136 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8009132:	2b03      	cmp	r3, #3
 8009134:	d107      	bne.n	8009146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009136:	4b3f      	ldr	r3, [pc, #252]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800913e:	2b00      	cmp	r3, #0
 8009140:	d109      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009142:	2301      	movs	r3, #1
 8009144:	e06f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009146:	4b3b      	ldr	r3, [pc, #236]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	f003 0302 	and.w	r3, r3, #2
 800914e:	2b00      	cmp	r3, #0
 8009150:	d101      	bne.n	8009156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8009152:	2301      	movs	r3, #1
 8009154:	e067      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009156:	4b37      	ldr	r3, [pc, #220]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	f023 0203 	bic.w	r2, r3, #3
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	4934      	ldr	r1, [pc, #208]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009164:	4313      	orrs	r3, r2
 8009166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009168:	f7fc f80c 	bl	8005184 <HAL_GetTick>
 800916c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800916e:	e00a      	b.n	8009186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009170:	f7fc f808 	bl	8005184 <HAL_GetTick>
 8009174:	4602      	mov	r2, r0
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	1ad3      	subs	r3, r2, r3
 800917a:	f241 3288 	movw	r2, #5000	; 0x1388
 800917e:	4293      	cmp	r3, r2
 8009180:	d901      	bls.n	8009186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8009182:	2303      	movs	r3, #3
 8009184:	e04f      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009186:	4b2b      	ldr	r3, [pc, #172]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009188:	689b      	ldr	r3, [r3, #8]
 800918a:	f003 020c 	and.w	r2, r3, #12
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	685b      	ldr	r3, [r3, #4]
 8009192:	009b      	lsls	r3, r3, #2
 8009194:	429a      	cmp	r2, r3
 8009196:	d1eb      	bne.n	8009170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009198:	4b25      	ldr	r3, [pc, #148]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d20c      	bcs.n	80091c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80091a6:	4b22      	ldr	r3, [pc, #136]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091a8:	683a      	ldr	r2, [r7, #0]
 80091aa:	b2d2      	uxtb	r2, r2
 80091ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80091ae:	4b20      	ldr	r3, [pc, #128]	; (8009230 <HAL_RCC_ClockConfig+0x1b8>)
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	f003 0307 	and.w	r3, r3, #7
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	429a      	cmp	r2, r3
 80091ba:	d001      	beq.n	80091c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80091bc:	2301      	movs	r3, #1
 80091be:	e032      	b.n	8009226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	f003 0304 	and.w	r3, r3, #4
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d008      	beq.n	80091de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091cc:	4b19      	ldr	r3, [pc, #100]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ce:	689b      	ldr	r3, [r3, #8]
 80091d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4916      	ldr	r1, [pc, #88]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0308 	and.w	r3, r3, #8
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d009      	beq.n	80091fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091ea:	4b12      	ldr	r3, [pc, #72]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	691b      	ldr	r3, [r3, #16]
 80091f6:	00db      	lsls	r3, r3, #3
 80091f8:	490e      	ldr	r1, [pc, #56]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 80091fa:	4313      	orrs	r3, r2
 80091fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80091fe:	f000 f821 	bl	8009244 <HAL_RCC_GetSysClockFreq>
 8009202:	4602      	mov	r2, r0
 8009204:	4b0b      	ldr	r3, [pc, #44]	; (8009234 <HAL_RCC_ClockConfig+0x1bc>)
 8009206:	689b      	ldr	r3, [r3, #8]
 8009208:	091b      	lsrs	r3, r3, #4
 800920a:	f003 030f 	and.w	r3, r3, #15
 800920e:	490a      	ldr	r1, [pc, #40]	; (8009238 <HAL_RCC_ClockConfig+0x1c0>)
 8009210:	5ccb      	ldrb	r3, [r1, r3]
 8009212:	fa22 f303 	lsr.w	r3, r2, r3
 8009216:	4a09      	ldr	r2, [pc, #36]	; (800923c <HAL_RCC_ClockConfig+0x1c4>)
 8009218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800921a:	4b09      	ldr	r3, [pc, #36]	; (8009240 <HAL_RCC_ClockConfig+0x1c8>)
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	4618      	mov	r0, r3
 8009220:	f7fb ff6c 	bl	80050fc <HAL_InitTick>

  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3710      	adds	r7, #16
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023c00 	.word	0x40023c00
 8009234:	40023800 	.word	0x40023800
 8009238:	08011178 	.word	0x08011178
 800923c:	20000250 	.word	0x20000250
 8009240:	20000254 	.word	0x20000254

08009244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009248:	b094      	sub	sp, #80	; 0x50
 800924a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800924c:	2300      	movs	r3, #0
 800924e:	647b      	str	r3, [r7, #68]	; 0x44
 8009250:	2300      	movs	r3, #0
 8009252:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009254:	2300      	movs	r3, #0
 8009256:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8009258:	2300      	movs	r3, #0
 800925a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800925c:	4b79      	ldr	r3, [pc, #484]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 800925e:	689b      	ldr	r3, [r3, #8]
 8009260:	f003 030c 	and.w	r3, r3, #12
 8009264:	2b08      	cmp	r3, #8
 8009266:	d00d      	beq.n	8009284 <HAL_RCC_GetSysClockFreq+0x40>
 8009268:	2b08      	cmp	r3, #8
 800926a:	f200 80e1 	bhi.w	8009430 <HAL_RCC_GetSysClockFreq+0x1ec>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d002      	beq.n	8009278 <HAL_RCC_GetSysClockFreq+0x34>
 8009272:	2b04      	cmp	r3, #4
 8009274:	d003      	beq.n	800927e <HAL_RCC_GetSysClockFreq+0x3a>
 8009276:	e0db      	b.n	8009430 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009278:	4b73      	ldr	r3, [pc, #460]	; (8009448 <HAL_RCC_GetSysClockFreq+0x204>)
 800927a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800927c:	e0db      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800927e:	4b73      	ldr	r3, [pc, #460]	; (800944c <HAL_RCC_GetSysClockFreq+0x208>)
 8009280:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009282:	e0d8      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009284:	4b6f      	ldr	r3, [pc, #444]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009286:	685b      	ldr	r3, [r3, #4]
 8009288:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800928c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800928e:	4b6d      	ldr	r3, [pc, #436]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009290:	685b      	ldr	r3, [r3, #4]
 8009292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009296:	2b00      	cmp	r3, #0
 8009298:	d063      	beq.n	8009362 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800929a:	4b6a      	ldr	r3, [pc, #424]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 800929c:	685b      	ldr	r3, [r3, #4]
 800929e:	099b      	lsrs	r3, r3, #6
 80092a0:	2200      	movs	r2, #0
 80092a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80092a4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80092a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80092ac:	633b      	str	r3, [r7, #48]	; 0x30
 80092ae:	2300      	movs	r3, #0
 80092b0:	637b      	str	r3, [r7, #52]	; 0x34
 80092b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80092b6:	4622      	mov	r2, r4
 80092b8:	462b      	mov	r3, r5
 80092ba:	f04f 0000 	mov.w	r0, #0
 80092be:	f04f 0100 	mov.w	r1, #0
 80092c2:	0159      	lsls	r1, r3, #5
 80092c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092c8:	0150      	lsls	r0, r2, #5
 80092ca:	4602      	mov	r2, r0
 80092cc:	460b      	mov	r3, r1
 80092ce:	4621      	mov	r1, r4
 80092d0:	1a51      	subs	r1, r2, r1
 80092d2:	6139      	str	r1, [r7, #16]
 80092d4:	4629      	mov	r1, r5
 80092d6:	eb63 0301 	sbc.w	r3, r3, r1
 80092da:	617b      	str	r3, [r7, #20]
 80092dc:	f04f 0200 	mov.w	r2, #0
 80092e0:	f04f 0300 	mov.w	r3, #0
 80092e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80092e8:	4659      	mov	r1, fp
 80092ea:	018b      	lsls	r3, r1, #6
 80092ec:	4651      	mov	r1, sl
 80092ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80092f2:	4651      	mov	r1, sl
 80092f4:	018a      	lsls	r2, r1, #6
 80092f6:	4651      	mov	r1, sl
 80092f8:	ebb2 0801 	subs.w	r8, r2, r1
 80092fc:	4659      	mov	r1, fp
 80092fe:	eb63 0901 	sbc.w	r9, r3, r1
 8009302:	f04f 0200 	mov.w	r2, #0
 8009306:	f04f 0300 	mov.w	r3, #0
 800930a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800930e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009312:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009316:	4690      	mov	r8, r2
 8009318:	4699      	mov	r9, r3
 800931a:	4623      	mov	r3, r4
 800931c:	eb18 0303 	adds.w	r3, r8, r3
 8009320:	60bb      	str	r3, [r7, #8]
 8009322:	462b      	mov	r3, r5
 8009324:	eb49 0303 	adc.w	r3, r9, r3
 8009328:	60fb      	str	r3, [r7, #12]
 800932a:	f04f 0200 	mov.w	r2, #0
 800932e:	f04f 0300 	mov.w	r3, #0
 8009332:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8009336:	4629      	mov	r1, r5
 8009338:	024b      	lsls	r3, r1, #9
 800933a:	4621      	mov	r1, r4
 800933c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009340:	4621      	mov	r1, r4
 8009342:	024a      	lsls	r2, r1, #9
 8009344:	4610      	mov	r0, r2
 8009346:	4619      	mov	r1, r3
 8009348:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800934a:	2200      	movs	r2, #0
 800934c:	62bb      	str	r3, [r7, #40]	; 0x28
 800934e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009350:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009354:	f7f7 fca0 	bl	8000c98 <__aeabi_uldivmod>
 8009358:	4602      	mov	r2, r0
 800935a:	460b      	mov	r3, r1
 800935c:	4613      	mov	r3, r2
 800935e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009360:	e058      	b.n	8009414 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009362:	4b38      	ldr	r3, [pc, #224]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009364:	685b      	ldr	r3, [r3, #4]
 8009366:	099b      	lsrs	r3, r3, #6
 8009368:	2200      	movs	r2, #0
 800936a:	4618      	mov	r0, r3
 800936c:	4611      	mov	r1, r2
 800936e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009372:	623b      	str	r3, [r7, #32]
 8009374:	2300      	movs	r3, #0
 8009376:	627b      	str	r3, [r7, #36]	; 0x24
 8009378:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800937c:	4642      	mov	r2, r8
 800937e:	464b      	mov	r3, r9
 8009380:	f04f 0000 	mov.w	r0, #0
 8009384:	f04f 0100 	mov.w	r1, #0
 8009388:	0159      	lsls	r1, r3, #5
 800938a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800938e:	0150      	lsls	r0, r2, #5
 8009390:	4602      	mov	r2, r0
 8009392:	460b      	mov	r3, r1
 8009394:	4641      	mov	r1, r8
 8009396:	ebb2 0a01 	subs.w	sl, r2, r1
 800939a:	4649      	mov	r1, r9
 800939c:	eb63 0b01 	sbc.w	fp, r3, r1
 80093a0:	f04f 0200 	mov.w	r2, #0
 80093a4:	f04f 0300 	mov.w	r3, #0
 80093a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80093ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80093b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80093b4:	ebb2 040a 	subs.w	r4, r2, sl
 80093b8:	eb63 050b 	sbc.w	r5, r3, fp
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	00eb      	lsls	r3, r5, #3
 80093c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80093ca:	00e2      	lsls	r2, r4, #3
 80093cc:	4614      	mov	r4, r2
 80093ce:	461d      	mov	r5, r3
 80093d0:	4643      	mov	r3, r8
 80093d2:	18e3      	adds	r3, r4, r3
 80093d4:	603b      	str	r3, [r7, #0]
 80093d6:	464b      	mov	r3, r9
 80093d8:	eb45 0303 	adc.w	r3, r5, r3
 80093dc:	607b      	str	r3, [r7, #4]
 80093de:	f04f 0200 	mov.w	r2, #0
 80093e2:	f04f 0300 	mov.w	r3, #0
 80093e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80093ea:	4629      	mov	r1, r5
 80093ec:	028b      	lsls	r3, r1, #10
 80093ee:	4621      	mov	r1, r4
 80093f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80093f4:	4621      	mov	r1, r4
 80093f6:	028a      	lsls	r2, r1, #10
 80093f8:	4610      	mov	r0, r2
 80093fa:	4619      	mov	r1, r3
 80093fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093fe:	2200      	movs	r2, #0
 8009400:	61bb      	str	r3, [r7, #24]
 8009402:	61fa      	str	r2, [r7, #28]
 8009404:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009408:	f7f7 fc46 	bl	8000c98 <__aeabi_uldivmod>
 800940c:	4602      	mov	r2, r0
 800940e:	460b      	mov	r3, r1
 8009410:	4613      	mov	r3, r2
 8009412:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8009414:	4b0b      	ldr	r3, [pc, #44]	; (8009444 <HAL_RCC_GetSysClockFreq+0x200>)
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	0c1b      	lsrs	r3, r3, #16
 800941a:	f003 0303 	and.w	r3, r3, #3
 800941e:	3301      	adds	r3, #1
 8009420:	005b      	lsls	r3, r3, #1
 8009422:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8009424:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009426:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009428:	fbb2 f3f3 	udiv	r3, r2, r3
 800942c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800942e:	e002      	b.n	8009436 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009430:	4b05      	ldr	r3, [pc, #20]	; (8009448 <HAL_RCC_GetSysClockFreq+0x204>)
 8009432:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009434:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009436:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8009438:	4618      	mov	r0, r3
 800943a:	3750      	adds	r7, #80	; 0x50
 800943c:	46bd      	mov	sp, r7
 800943e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009442:	bf00      	nop
 8009444:	40023800 	.word	0x40023800
 8009448:	00f42400 	.word	0x00f42400
 800944c:	007a1200 	.word	0x007a1200

08009450 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009450:	b480      	push	{r7}
 8009452:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009454:	4b03      	ldr	r3, [pc, #12]	; (8009464 <HAL_RCC_GetHCLKFreq+0x14>)
 8009456:	681b      	ldr	r3, [r3, #0]
}
 8009458:	4618      	mov	r0, r3
 800945a:	46bd      	mov	sp, r7
 800945c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009460:	4770      	bx	lr
 8009462:	bf00      	nop
 8009464:	20000250 	.word	0x20000250

08009468 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800946c:	f7ff fff0 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8009470:	4602      	mov	r2, r0
 8009472:	4b05      	ldr	r3, [pc, #20]	; (8009488 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009474:	689b      	ldr	r3, [r3, #8]
 8009476:	0a9b      	lsrs	r3, r3, #10
 8009478:	f003 0307 	and.w	r3, r3, #7
 800947c:	4903      	ldr	r1, [pc, #12]	; (800948c <HAL_RCC_GetPCLK1Freq+0x24>)
 800947e:	5ccb      	ldrb	r3, [r1, r3]
 8009480:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009484:	4618      	mov	r0, r3
 8009486:	bd80      	pop	{r7, pc}
 8009488:	40023800 	.word	0x40023800
 800948c:	08011188 	.word	0x08011188

08009490 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009490:	b580      	push	{r7, lr}
 8009492:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8009494:	f7ff ffdc 	bl	8009450 <HAL_RCC_GetHCLKFreq>
 8009498:	4602      	mov	r2, r0
 800949a:	4b05      	ldr	r3, [pc, #20]	; (80094b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800949c:	689b      	ldr	r3, [r3, #8]
 800949e:	0b5b      	lsrs	r3, r3, #13
 80094a0:	f003 0307 	and.w	r3, r3, #7
 80094a4:	4903      	ldr	r1, [pc, #12]	; (80094b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80094a6:	5ccb      	ldrb	r3, [r1, r3]
 80094a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80094ac:	4618      	mov	r0, r3
 80094ae:	bd80      	pop	{r7, pc}
 80094b0:	40023800 	.word	0x40023800
 80094b4:	08011188 	.word	0x08011188

080094b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b082      	sub	sp, #8
 80094bc:	af00      	add	r7, sp, #0
 80094be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094c6:	2301      	movs	r3, #1
 80094c8:	e04c      	b.n	8009564 <HAL_TIM_Base_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094d0:	b2db      	uxtb	r3, r3
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d111      	bne.n	80094fa <HAL_TIM_Base_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2200      	movs	r2, #0
 80094da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f001 fc32 	bl	800ad48 <TIM_ResetCallback>

    if (htim->Base_MspInitCallback == NULL)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d102      	bne.n	80094f2 <HAL_TIM_Base_Init+0x3a>
    {
      htim->Base_MspInitCallback = HAL_TIM_Base_MspInit;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	4a1f      	ldr	r2, [pc, #124]	; (800956c <HAL_TIM_Base_Init+0xb4>)
 80094f0:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094f6:	6878      	ldr	r0, [r7, #4]
 80094f8:	4798      	blx	r3
    HAL_TIM_Base_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	2202      	movs	r2, #2
 80094fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	3304      	adds	r3, #4
 800950a:	4619      	mov	r1, r3
 800950c:	4610      	mov	r0, r2
 800950e:	f001 f94f 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	2201      	movs	r2, #1
 8009516:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	2201      	movs	r2, #1
 800951e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	2201      	movs	r2, #1
 8009526:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2201      	movs	r2, #1
 800952e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2201      	movs	r2, #1
 8009536:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	2201      	movs	r2, #1
 800953e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	2201      	movs	r2, #1
 8009546:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	2201      	movs	r2, #1
 800955e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009562:	2300      	movs	r3, #0
}
 8009564:	4618      	mov	r0, r3
 8009566:	3708      	adds	r7, #8
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	08004ac9 	.word	0x08004ac9

08009570 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009570:	b480      	push	{r7}
 8009572:	b085      	sub	sp, #20
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800957e:	b2db      	uxtb	r3, r3
 8009580:	2b01      	cmp	r3, #1
 8009582:	d001      	beq.n	8009588 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e03c      	b.n	8009602 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2202      	movs	r2, #2
 800958c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a1e      	ldr	r2, [pc, #120]	; (8009610 <HAL_TIM_Base_Start+0xa0>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d018      	beq.n	80095cc <HAL_TIM_Base_Start+0x5c>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095a2:	d013      	beq.n	80095cc <HAL_TIM_Base_Start+0x5c>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a1a      	ldr	r2, [pc, #104]	; (8009614 <HAL_TIM_Base_Start+0xa4>)
 80095aa:	4293      	cmp	r3, r2
 80095ac:	d00e      	beq.n	80095cc <HAL_TIM_Base_Start+0x5c>
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a19      	ldr	r2, [pc, #100]	; (8009618 <HAL_TIM_Base_Start+0xa8>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d009      	beq.n	80095cc <HAL_TIM_Base_Start+0x5c>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4a17      	ldr	r2, [pc, #92]	; (800961c <HAL_TIM_Base_Start+0xac>)
 80095be:	4293      	cmp	r3, r2
 80095c0:	d004      	beq.n	80095cc <HAL_TIM_Base_Start+0x5c>
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	4a16      	ldr	r2, [pc, #88]	; (8009620 <HAL_TIM_Base_Start+0xb0>)
 80095c8:	4293      	cmp	r3, r2
 80095ca:	d111      	bne.n	80095f0 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	689b      	ldr	r3, [r3, #8]
 80095d2:	f003 0307 	and.w	r3, r3, #7
 80095d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	2b06      	cmp	r3, #6
 80095dc:	d010      	beq.n	8009600 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	f042 0201 	orr.w	r2, r2, #1
 80095ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80095ee:	e007      	b.n	8009600 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681a      	ldr	r2, [r3, #0]
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	f042 0201 	orr.w	r2, r2, #1
 80095fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009600:	2300      	movs	r3, #0
}
 8009602:	4618      	mov	r0, r3
 8009604:	3714      	adds	r7, #20
 8009606:	46bd      	mov	sp, r7
 8009608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960c:	4770      	bx	lr
 800960e:	bf00      	nop
 8009610:	40010000 	.word	0x40010000
 8009614:	40000400 	.word	0x40000400
 8009618:	40000800 	.word	0x40000800
 800961c:	40000c00 	.word	0x40000c00
 8009620:	40014000 	.word	0x40014000

08009624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009624:	b480      	push	{r7}
 8009626:	b085      	sub	sp, #20
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009632:	b2db      	uxtb	r3, r3
 8009634:	2b01      	cmp	r3, #1
 8009636:	d001      	beq.n	800963c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009638:	2301      	movs	r3, #1
 800963a:	e044      	b.n	80096c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	2202      	movs	r2, #2
 8009640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	4a1e      	ldr	r2, [pc, #120]	; (80096d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800965a:	4293      	cmp	r3, r2
 800965c:	d018      	beq.n	8009690 <HAL_TIM_Base_Start_IT+0x6c>
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009666:	d013      	beq.n	8009690 <HAL_TIM_Base_Start_IT+0x6c>
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	4a1a      	ldr	r2, [pc, #104]	; (80096d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d00e      	beq.n	8009690 <HAL_TIM_Base_Start_IT+0x6c>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	4a19      	ldr	r2, [pc, #100]	; (80096dc <HAL_TIM_Base_Start_IT+0xb8>)
 8009678:	4293      	cmp	r3, r2
 800967a:	d009      	beq.n	8009690 <HAL_TIM_Base_Start_IT+0x6c>
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	4a17      	ldr	r2, [pc, #92]	; (80096e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8009682:	4293      	cmp	r3, r2
 8009684:	d004      	beq.n	8009690 <HAL_TIM_Base_Start_IT+0x6c>
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	4a16      	ldr	r2, [pc, #88]	; (80096e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800968c:	4293      	cmp	r3, r2
 800968e:	d111      	bne.n	80096b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	689b      	ldr	r3, [r3, #8]
 8009696:	f003 0307 	and.w	r3, r3, #7
 800969a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2b06      	cmp	r3, #6
 80096a0:	d010      	beq.n	80096c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	681a      	ldr	r2, [r3, #0]
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	f042 0201 	orr.w	r2, r2, #1
 80096b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80096b2:	e007      	b.n	80096c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f042 0201 	orr.w	r2, r2, #1
 80096c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80096c4:	2300      	movs	r3, #0
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	3714      	adds	r7, #20
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr
 80096d2:	bf00      	nop
 80096d4:	40010000 	.word	0x40010000
 80096d8:	40000400 	.word	0x40000400
 80096dc:	40000800 	.word	0x40000800
 80096e0:	40000c00 	.word	0x40000c00
 80096e4:	40014000 	.word	0x40014000

080096e8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b083      	sub	sp, #12
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	681b      	ldr	r3, [r3, #0]
 80096f4:	68da      	ldr	r2, [r3, #12]
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	f022 0201 	bic.w	r2, r2, #1
 80096fe:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	6a1a      	ldr	r2, [r3, #32]
 8009706:	f241 1311 	movw	r3, #4369	; 0x1111
 800970a:	4013      	ands	r3, r2
 800970c:	2b00      	cmp	r3, #0
 800970e:	d10f      	bne.n	8009730 <HAL_TIM_Base_Stop_IT+0x48>
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	6a1a      	ldr	r2, [r3, #32]
 8009716:	f240 4344 	movw	r3, #1092	; 0x444
 800971a:	4013      	ands	r3, r2
 800971c:	2b00      	cmp	r3, #0
 800971e:	d107      	bne.n	8009730 <HAL_TIM_Base_Stop_IT+0x48>
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	f022 0201 	bic.w	r2, r2, #1
 800972e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2201      	movs	r2, #1
 8009734:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009738:	2300      	movs	r3, #0
}
 800973a:	4618      	mov	r0, r3
 800973c:	370c      	adds	r7, #12
 800973e:	46bd      	mov	sp, r7
 8009740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009744:	4770      	bx	lr
	...

08009748 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b082      	sub	sp, #8
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2b00      	cmp	r3, #0
 8009754:	d101      	bne.n	800975a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8009756:	2301      	movs	r3, #1
 8009758:	e04c      	b.n	80097f4 <HAL_TIM_OC_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b00      	cmp	r3, #0
 8009764:	d111      	bne.n	800978a <HAL_TIM_OC_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800976e:	6878      	ldr	r0, [r7, #4]
 8009770:	f001 faea 	bl	800ad48 <TIM_ResetCallback>

    if (htim->OC_MspInitCallback == NULL)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009778:	2b00      	cmp	r3, #0
 800977a:	d102      	bne.n	8009782 <HAL_TIM_OC_Init+0x3a>
    {
      htim->OC_MspInitCallback = HAL_TIM_OC_MspInit;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	4a1f      	ldr	r2, [pc, #124]	; (80097fc <HAL_TIM_OC_Init+0xb4>)
 8009780:	659a      	str	r2, [r3, #88]	; 0x58
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009786:	6878      	ldr	r0, [r7, #4]
 8009788:	4798      	blx	r3
    HAL_TIM_OC_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2202      	movs	r2, #2
 800978e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681a      	ldr	r2, [r3, #0]
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	3304      	adds	r3, #4
 800979a:	4619      	mov	r1, r3
 800979c:	4610      	mov	r0, r2
 800979e:	f001 f807 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	2201      	movs	r2, #1
 80097a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	2201      	movs	r2, #1
 80097ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	2201      	movs	r2, #1
 80097b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	2201      	movs	r2, #1
 80097be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2201      	movs	r2, #1
 80097ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2201      	movs	r2, #1
 80097de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2201      	movs	r2, #1
 80097e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	2201      	movs	r2, #1
 80097ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80097f2:	2300      	movs	r3, #0
}
 80097f4:	4618      	mov	r0, r3
 80097f6:	3708      	adds	r7, #8
 80097f8:	46bd      	mov	sp, r7
 80097fa:	bd80      	pop	{r7, pc}
 80097fc:	08009801 	.word	0x08009801

08009800 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8009800:	b480      	push	{r7}
 8009802:	b083      	sub	sp, #12
 8009804:	af00      	add	r7, sp, #0
 8009806:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8009808:	bf00      	nop
 800980a:	370c      	adds	r7, #12
 800980c:	46bd      	mov	sp, r7
 800980e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009812:	4770      	bx	lr

08009814 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b082      	sub	sp, #8
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	2b00      	cmp	r3, #0
 8009820:	d101      	bne.n	8009826 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009822:	2301      	movs	r3, #1
 8009824:	e04c      	b.n	80098c0 <HAL_TIM_PWM_Init+0xac>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800982c:	b2db      	uxtb	r3, r3
 800982e:	2b00      	cmp	r3, #0
 8009830:	d111      	bne.n	8009856 <HAL_TIM_PWM_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 800983a:	6878      	ldr	r0, [r7, #4]
 800983c:	f001 fa84 	bl	800ad48 <TIM_ResetCallback>

    if (htim->PWM_MspInitCallback == NULL)
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009844:	2b00      	cmp	r3, #0
 8009846:	d102      	bne.n	800984e <HAL_TIM_PWM_Init+0x3a>
    {
      htim->PWM_MspInitCallback = HAL_TIM_PWM_MspInit;
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	4a1f      	ldr	r2, [pc, #124]	; (80098c8 <HAL_TIM_PWM_Init+0xb4>)
 800984c:	661a      	str	r2, [r3, #96]	; 0x60
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	4798      	blx	r3
    HAL_TIM_PWM_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	2202      	movs	r2, #2
 800985a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	3304      	adds	r3, #4
 8009866:	4619      	mov	r1, r3
 8009868:	4610      	mov	r0, r2
 800986a:	f000 ffa1 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2201      	movs	r2, #1
 8009872:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	2201      	movs	r2, #1
 800987a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	2201      	movs	r2, #1
 8009882:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2201      	movs	r2, #1
 800988a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	2201      	movs	r2, #1
 8009892:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2201      	movs	r2, #1
 80098a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2201      	movs	r2, #1
 80098aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2201      	movs	r2, #1
 80098b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2201      	movs	r2, #1
 80098ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80098be:	2300      	movs	r3, #0
}
 80098c0:	4618      	mov	r0, r3
 80098c2:	3708      	adds	r7, #8
 80098c4:	46bd      	mov	sp, r7
 80098c6:	bd80      	pop	{r7, pc}
 80098c8:	080049d9 	.word	0x080049d9

080098cc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b084      	sub	sp, #16
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
 80098d4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80098d6:	683b      	ldr	r3, [r7, #0]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d109      	bne.n	80098f0 <HAL_TIM_PWM_Start+0x24>
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098e2:	b2db      	uxtb	r3, r3
 80098e4:	2b01      	cmp	r3, #1
 80098e6:	bf14      	ite	ne
 80098e8:	2301      	movne	r3, #1
 80098ea:	2300      	moveq	r3, #0
 80098ec:	b2db      	uxtb	r3, r3
 80098ee:	e022      	b.n	8009936 <HAL_TIM_PWM_Start+0x6a>
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	2b04      	cmp	r3, #4
 80098f4:	d109      	bne.n	800990a <HAL_TIM_PWM_Start+0x3e>
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80098fc:	b2db      	uxtb	r3, r3
 80098fe:	2b01      	cmp	r3, #1
 8009900:	bf14      	ite	ne
 8009902:	2301      	movne	r3, #1
 8009904:	2300      	moveq	r3, #0
 8009906:	b2db      	uxtb	r3, r3
 8009908:	e015      	b.n	8009936 <HAL_TIM_PWM_Start+0x6a>
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	2b08      	cmp	r3, #8
 800990e:	d109      	bne.n	8009924 <HAL_TIM_PWM_Start+0x58>
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009916:	b2db      	uxtb	r3, r3
 8009918:	2b01      	cmp	r3, #1
 800991a:	bf14      	ite	ne
 800991c:	2301      	movne	r3, #1
 800991e:	2300      	moveq	r3, #0
 8009920:	b2db      	uxtb	r3, r3
 8009922:	e008      	b.n	8009936 <HAL_TIM_PWM_Start+0x6a>
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b01      	cmp	r3, #1
 800992e:	bf14      	ite	ne
 8009930:	2301      	movne	r3, #1
 8009932:	2300      	moveq	r3, #0
 8009934:	b2db      	uxtb	r3, r3
 8009936:	2b00      	cmp	r3, #0
 8009938:	d001      	beq.n	800993e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800993a:	2301      	movs	r3, #1
 800993c:	e068      	b.n	8009a10 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800993e:	683b      	ldr	r3, [r7, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d104      	bne.n	800994e <HAL_TIM_PWM_Start+0x82>
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	2202      	movs	r2, #2
 8009948:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800994c:	e013      	b.n	8009976 <HAL_TIM_PWM_Start+0xaa>
 800994e:	683b      	ldr	r3, [r7, #0]
 8009950:	2b04      	cmp	r3, #4
 8009952:	d104      	bne.n	800995e <HAL_TIM_PWM_Start+0x92>
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2202      	movs	r2, #2
 8009958:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800995c:	e00b      	b.n	8009976 <HAL_TIM_PWM_Start+0xaa>
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	2b08      	cmp	r3, #8
 8009962:	d104      	bne.n	800996e <HAL_TIM_PWM_Start+0xa2>
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	2202      	movs	r2, #2
 8009968:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800996c:	e003      	b.n	8009976 <HAL_TIM_PWM_Start+0xaa>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	2202      	movs	r2, #2
 8009972:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	2201      	movs	r2, #1
 800997c:	6839      	ldr	r1, [r7, #0]
 800997e:	4618      	mov	r0, r3
 8009980:	f001 f9bc 	bl	800acfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	4a23      	ldr	r2, [pc, #140]	; (8009a18 <HAL_TIM_PWM_Start+0x14c>)
 800998a:	4293      	cmp	r3, r2
 800998c:	d107      	bne.n	800999e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800999c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	4a1d      	ldr	r2, [pc, #116]	; (8009a18 <HAL_TIM_PWM_Start+0x14c>)
 80099a4:	4293      	cmp	r3, r2
 80099a6:	d018      	beq.n	80099da <HAL_TIM_PWM_Start+0x10e>
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80099b0:	d013      	beq.n	80099da <HAL_TIM_PWM_Start+0x10e>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	4a19      	ldr	r2, [pc, #100]	; (8009a1c <HAL_TIM_PWM_Start+0x150>)
 80099b8:	4293      	cmp	r3, r2
 80099ba:	d00e      	beq.n	80099da <HAL_TIM_PWM_Start+0x10e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	4a17      	ldr	r2, [pc, #92]	; (8009a20 <HAL_TIM_PWM_Start+0x154>)
 80099c2:	4293      	cmp	r3, r2
 80099c4:	d009      	beq.n	80099da <HAL_TIM_PWM_Start+0x10e>
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	4a16      	ldr	r2, [pc, #88]	; (8009a24 <HAL_TIM_PWM_Start+0x158>)
 80099cc:	4293      	cmp	r3, r2
 80099ce:	d004      	beq.n	80099da <HAL_TIM_PWM_Start+0x10e>
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a14      	ldr	r2, [pc, #80]	; (8009a28 <HAL_TIM_PWM_Start+0x15c>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d111      	bne.n	80099fe <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	f003 0307 	and.w	r3, r3, #7
 80099e4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	2b06      	cmp	r3, #6
 80099ea:	d010      	beq.n	8009a0e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	681a      	ldr	r2, [r3, #0]
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f042 0201 	orr.w	r2, r2, #1
 80099fa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80099fc:	e007      	b.n	8009a0e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	681a      	ldr	r2, [r3, #0]
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	f042 0201 	orr.w	r2, r2, #1
 8009a0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
}
 8009a10:	4618      	mov	r0, r3
 8009a12:	3710      	adds	r7, #16
 8009a14:	46bd      	mov	sp, r7
 8009a16:	bd80      	pop	{r7, pc}
 8009a18:	40010000 	.word	0x40010000
 8009a1c:	40000400 	.word	0x40000400
 8009a20:	40000800 	.word	0x40000800
 8009a24:	40000c00 	.word	0x40000c00
 8009a28:	40014000 	.word	0x40014000

08009a2c <HAL_TIM_OnePulse_Init>:
  *            @arg TIM_OPMODE_SINGLE: Only one pulse will be generated.
  *            @arg TIM_OPMODE_REPETITIVE: Repetitive pulses will be generated.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Init(TIM_HandleTypeDef *htim, uint32_t OnePulseMode)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b082      	sub	sp, #8
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <HAL_TIM_OnePulse_Init+0x14>
  {
    return HAL_ERROR;
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e04c      	b.n	8009ada <HAL_TIM_OnePulse_Init+0xae>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_OPM_MODE(OnePulseMode));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009a46:	b2db      	uxtb	r3, r3
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d111      	bne.n	8009a70 <HAL_TIM_OnePulse_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	2200      	movs	r2, #0
 8009a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009a54:	6878      	ldr	r0, [r7, #4]
 8009a56:	f001 f977 	bl	800ad48 <TIM_ResetCallback>

    if (htim->OnePulse_MspInitCallback == NULL)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d102      	bne.n	8009a68 <HAL_TIM_OnePulse_Init+0x3c>
    {
      htim->OnePulse_MspInitCallback = HAL_TIM_OnePulse_MspInit;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	4a1f      	ldr	r2, [pc, #124]	; (8009ae4 <HAL_TIM_OnePulse_Init+0xb8>)
 8009a66:	669a      	str	r2, [r3, #104]	; 0x68
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OnePulse_MspInitCallback(htim);
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	4798      	blx	r3
    HAL_TIM_OnePulse_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2202      	movs	r2, #2
 8009a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the One Pulse Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	3304      	adds	r3, #4
 8009a80:	4619      	mov	r1, r3
 8009a82:	4610      	mov	r0, r2
 8009a84:	f000 fe94 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Reset the OPM Bit */
  htim->Instance->CR1 &= ~TIM_CR1_OPM;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f022 0208 	bic.w	r2, r2, #8
 8009a96:	601a      	str	r2, [r3, #0]

  /* Configure the OPM Mode */
  htim->Instance->CR1 |= OnePulseMode;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	6819      	ldr	r1, [r3, #0]
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	683a      	ldr	r2, [r7, #0]
 8009aa4:	430a      	orrs	r2, r1
 8009aa6:	601a      	str	r2, [r3, #0]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2201      	movs	r2, #1
 8009ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2201      	movs	r2, #1
 8009abc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	2201      	movs	r2, #1
 8009ac4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2201      	movs	r2, #1
 8009ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009ad8:	2300      	movs	r3, #0
}
 8009ada:	4618      	mov	r0, r3
 8009adc:	3708      	adds	r7, #8
 8009ade:	46bd      	mov	sp, r7
 8009ae0:	bd80      	pop	{r7, pc}
 8009ae2:	bf00      	nop
 8009ae4:	08009ae9 	.word	0x08009ae9

08009ae8 <HAL_TIM_OnePulse_MspInit>:
  * @brief  Initializes the TIM One Pulse MSP.
  * @param  htim TIM One Pulse handle
  * @retval None
  */
__weak void HAL_TIM_OnePulse_MspInit(TIM_HandleTypeDef *htim)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OnePulse_MspInit could be implemented in the user file
   */
}
 8009af0:	bf00      	nop
 8009af2:	370c      	adds	r7, #12
 8009af4:	46bd      	mov	sp, r7
 8009af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afa:	4770      	bx	lr

08009afc <HAL_TIM_OnePulse_Start_IT>:
  * @param  htim TIM One Pulse handle
  * @param  OutputChannel See note above
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OnePulse_Start_IT(TIM_HandleTypeDef *htim, uint32_t OutputChannel)
{
 8009afc:	b580      	push	{r7, lr}
 8009afe:	b084      	sub	sp, #16
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	6078      	str	r0, [r7, #4]
 8009b04:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009b0c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009b14:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009b1c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009b24:	733b      	strb	r3, [r7, #12]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(OutputChannel);

  /* Check the TIM channels state */
  if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b26:	7bfb      	ldrb	r3, [r7, #15]
 8009b28:	2b01      	cmp	r3, #1
 8009b2a:	d108      	bne.n	8009b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b2c:	7bbb      	ldrb	r3, [r7, #14]
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d105      	bne.n	8009b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009b32:	7b7b      	ldrb	r3, [r7, #13]
 8009b34:	2b01      	cmp	r3, #1
 8009b36:	d102      	bne.n	8009b3e <HAL_TIM_OnePulse_Start_IT+0x42>
      || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009b38:	7b3b      	ldrb	r3, [r7, #12]
 8009b3a:	2b01      	cmp	r3, #1
 8009b3c:	d001      	beq.n	8009b42 <HAL_TIM_OnePulse_Start_IT+0x46>
  {
    return HAL_ERROR;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	e03b      	b.n	8009bba <HAL_TIM_OnePulse_Start_IT+0xbe>
  }

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2202      	movs	r2, #2
 8009b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	2202      	movs	r2, #2
 8009b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2202      	movs	r2, #2
 8009b56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2202      	movs	r2, #2
 8009b5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

    No need to enable the counter, it's enabled automatically by hardware
    (the counter starts in response to a stimulus and generate a pulse */

  /* Enable the TIM Capture/Compare 1 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	68da      	ldr	r2, [r3, #12]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	f042 0202 	orr.w	r2, r2, #2
 8009b70:	60da      	str	r2, [r3, #12]

  /* Enable the TIM Capture/Compare 2 interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	68da      	ldr	r2, [r3, #12]
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f042 0204 	orr.w	r2, r2, #4
 8009b80:	60da      	str	r2, [r3, #12]

  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	681b      	ldr	r3, [r3, #0]
 8009b86:	2201      	movs	r2, #1
 8009b88:	2100      	movs	r1, #0
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	f001 f8b6 	bl	800acfc <TIM_CCxChannelCmd>
  TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	2201      	movs	r2, #1
 8009b96:	2104      	movs	r1, #4
 8009b98:	4618      	mov	r0, r3
 8009b9a:	f001 f8af 	bl	800acfc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	4a08      	ldr	r2, [pc, #32]	; (8009bc4 <HAL_TIM_OnePulse_Start_IT+0xc8>)
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	d107      	bne.n	8009bb8 <HAL_TIM_OnePulse_Start_IT+0xbc>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009bb6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8009bb8:	2300      	movs	r3, #0
}
 8009bba:	4618      	mov	r0, r3
 8009bbc:	3710      	adds	r7, #16
 8009bbe:	46bd      	mov	sp, r7
 8009bc0:	bd80      	pop	{r7, pc}
 8009bc2:	bf00      	nop
 8009bc4:	40010000 	.word	0x40010000

08009bc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8009bc8:	b580      	push	{r7, lr}
 8009bca:	b086      	sub	sp, #24
 8009bcc:	af00      	add	r7, sp, #0
 8009bce:	6078      	str	r0, [r7, #4]
 8009bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d101      	bne.n	8009bdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8009bd8:	2301      	movs	r3, #1
 8009bda:	e0a2      	b.n	8009d22 <HAL_TIM_Encoder_Init+0x15a>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009be2:	b2db      	uxtb	r3, r3
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d111      	bne.n	8009c0c <HAL_TIM_Encoder_Init+0x44>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
    /* Reset interrupt callbacks to legacy weak callbacks */
    TIM_ResetCallback(htim);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f001 f8a9 	bl	800ad48 <TIM_ResetCallback>

    if (htim->Encoder_MspInitCallback == NULL)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d102      	bne.n	8009c04 <HAL_TIM_Encoder_Init+0x3c>
    {
      htim->Encoder_MspInitCallback = HAL_TIM_Encoder_MspInit;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	4a4a      	ldr	r2, [pc, #296]	; (8009d2c <HAL_TIM_Encoder_Init+0x164>)
 8009c02:	671a      	str	r2, [r3, #112]	; 0x70
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	4798      	blx	r3
    HAL_TIM_Encoder_MspInit(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	2202      	movs	r2, #2
 8009c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	687a      	ldr	r2, [r7, #4]
 8009c1c:	6812      	ldr	r2, [r2, #0]
 8009c1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009c22:	f023 0307 	bic.w	r3, r3, #7
 8009c26:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681a      	ldr	r2, [r3, #0]
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	3304      	adds	r3, #4
 8009c30:	4619      	mov	r1, r3
 8009c32:	4610      	mov	r0, r2
 8009c34:	f000 fdbc 	bl	800a7b0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	689b      	ldr	r3, [r3, #8]
 8009c3e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	699b      	ldr	r3, [r3, #24]
 8009c46:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	6a1b      	ldr	r3, [r3, #32]
 8009c4e:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	697a      	ldr	r2, [r7, #20]
 8009c56:	4313      	orrs	r3, r2
 8009c58:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8009c5a:	693b      	ldr	r3, [r7, #16]
 8009c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009c60:	f023 0303 	bic.w	r3, r3, #3
 8009c64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8009c66:	683b      	ldr	r3, [r7, #0]
 8009c68:	689a      	ldr	r2, [r3, #8]
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	699b      	ldr	r3, [r3, #24]
 8009c6e:	021b      	lsls	r3, r3, #8
 8009c70:	4313      	orrs	r3, r2
 8009c72:	693a      	ldr	r2, [r7, #16]
 8009c74:	4313      	orrs	r3, r2
 8009c76:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8009c7e:	f023 030c 	bic.w	r3, r3, #12
 8009c82:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8009c84:	693b      	ldr	r3, [r7, #16]
 8009c86:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009c8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68da      	ldr	r2, [r3, #12]
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	69db      	ldr	r3, [r3, #28]
 8009c98:	021b      	lsls	r3, r3, #8
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	693a      	ldr	r2, [r7, #16]
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8009ca2:	683b      	ldr	r3, [r7, #0]
 8009ca4:	691b      	ldr	r3, [r3, #16]
 8009ca6:	011a      	lsls	r2, r3, #4
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	6a1b      	ldr	r3, [r3, #32]
 8009cac:	031b      	lsls	r3, r3, #12
 8009cae:	4313      	orrs	r3, r2
 8009cb0:	693a      	ldr	r2, [r7, #16]
 8009cb2:	4313      	orrs	r3, r2
 8009cb4:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8009cbc:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8009cc4:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	695b      	ldr	r3, [r3, #20]
 8009cce:	011b      	lsls	r3, r3, #4
 8009cd0:	4313      	orrs	r3, r2
 8009cd2:	68fa      	ldr	r2, [r7, #12]
 8009cd4:	4313      	orrs	r3, r2
 8009cd6:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	681b      	ldr	r3, [r3, #0]
 8009cdc:	697a      	ldr	r2, [r7, #20]
 8009cde:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8009ce0:	687b      	ldr	r3, [r7, #4]
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	68fa      	ldr	r2, [r7, #12]
 8009cee:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2201      	movs	r2, #1
 8009cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2201      	movs	r2, #1
 8009d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8009d10:	687b      	ldr	r3, [r7, #4]
 8009d12:	2201      	movs	r2, #1
 8009d14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	2201      	movs	r2, #1
 8009d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009d20:	2300      	movs	r3, #0
}
 8009d22:	4618      	mov	r0, r3
 8009d24:	3718      	adds	r7, #24
 8009d26:	46bd      	mov	sp, r7
 8009d28:	bd80      	pop	{r7, pc}
 8009d2a:	bf00      	nop
 8009d2c:	08004a39 	.word	0x08004a39

08009d30 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009d30:	b580      	push	{r7, lr}
 8009d32:	b084      	sub	sp, #16
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	6078      	str	r0, [r7, #4]
 8009d38:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d40:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8009d48:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009d50:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8009d58:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8009d5a:	683b      	ldr	r3, [r7, #0]
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	d110      	bne.n	8009d82 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d60:	7bfb      	ldrb	r3, [r7, #15]
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d102      	bne.n	8009d6c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d66:	7b7b      	ldrb	r3, [r7, #13]
 8009d68:	2b01      	cmp	r3, #1
 8009d6a:	d001      	beq.n	8009d70 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8009d6c:	2301      	movs	r3, #1
 8009d6e:	e069      	b.n	8009e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2202      	movs	r2, #2
 8009d74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2202      	movs	r2, #2
 8009d7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009d80:	e031      	b.n	8009de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8009d82:	683b      	ldr	r3, [r7, #0]
 8009d84:	2b04      	cmp	r3, #4
 8009d86:	d110      	bne.n	8009daa <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009d88:	7bbb      	ldrb	r3, [r7, #14]
 8009d8a:	2b01      	cmp	r3, #1
 8009d8c:	d102      	bne.n	8009d94 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009d8e:	7b3b      	ldrb	r3, [r7, #12]
 8009d90:	2b01      	cmp	r3, #1
 8009d92:	d001      	beq.n	8009d98 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8009d94:	2301      	movs	r3, #1
 8009d96:	e055      	b.n	8009e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	2202      	movs	r2, #2
 8009d9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	2202      	movs	r2, #2
 8009da4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009da8:	e01d      	b.n	8009de6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009daa:	7bfb      	ldrb	r3, [r7, #15]
 8009dac:	2b01      	cmp	r3, #1
 8009dae:	d108      	bne.n	8009dc2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8009db0:	7bbb      	ldrb	r3, [r7, #14]
 8009db2:	2b01      	cmp	r3, #1
 8009db4:	d105      	bne.n	8009dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8009db6:	7b7b      	ldrb	r3, [r7, #13]
 8009db8:	2b01      	cmp	r3, #1
 8009dba:	d102      	bne.n	8009dc2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8009dbc:	7b3b      	ldrb	r3, [r7, #12]
 8009dbe:	2b01      	cmp	r3, #1
 8009dc0:	d001      	beq.n	8009dc6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8009dc2:	2301      	movs	r3, #1
 8009dc4:	e03e      	b.n	8009e44 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2202      	movs	r2, #2
 8009dca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2202      	movs	r2, #2
 8009dd2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	2202      	movs	r2, #2
 8009dda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	2202      	movs	r2, #2
 8009de2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d003      	beq.n	8009df4 <HAL_TIM_Encoder_Start+0xc4>
 8009dec:	683b      	ldr	r3, [r7, #0]
 8009dee:	2b04      	cmp	r3, #4
 8009df0:	d008      	beq.n	8009e04 <HAL_TIM_Encoder_Start+0xd4>
 8009df2:	e00f      	b.n	8009e14 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	2201      	movs	r2, #1
 8009dfa:	2100      	movs	r1, #0
 8009dfc:	4618      	mov	r0, r3
 8009dfe:	f000 ff7d 	bl	800acfc <TIM_CCxChannelCmd>
      break;
 8009e02:	e016      	b.n	8009e32 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	2201      	movs	r2, #1
 8009e0a:	2104      	movs	r1, #4
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f000 ff75 	bl	800acfc <TIM_CCxChannelCmd>
      break;
 8009e12:	e00e      	b.n	8009e32 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	2100      	movs	r1, #0
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	f000 ff6d 	bl	800acfc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	2201      	movs	r2, #1
 8009e28:	2104      	movs	r1, #4
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	f000 ff66 	bl	800acfc <TIM_CCxChannelCmd>
      break;
 8009e30:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	681a      	ldr	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	f042 0201 	orr.w	r2, r2, #1
 8009e40:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8009e42:	2300      	movs	r3, #0
}
 8009e44:	4618      	mov	r0, r3
 8009e46:	3710      	adds	r7, #16
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	bd80      	pop	{r7, pc}

08009e4c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009e4c:	b580      	push	{r7, lr}
 8009e4e:	b082      	sub	sp, #8
 8009e50:	af00      	add	r7, sp, #0
 8009e52:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	681b      	ldr	r3, [r3, #0]
 8009e58:	691b      	ldr	r3, [r3, #16]
 8009e5a:	f003 0302 	and.w	r3, r3, #2
 8009e5e:	2b02      	cmp	r3, #2
 8009e60:	d128      	bne.n	8009eb4 <HAL_TIM_IRQHandler+0x68>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009e62:	687b      	ldr	r3, [r7, #4]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	68db      	ldr	r3, [r3, #12]
 8009e68:	f003 0302 	and.w	r3, r3, #2
 8009e6c:	2b02      	cmp	r3, #2
 8009e6e:	d121      	bne.n	8009eb4 <HAL_TIM_IRQHandler+0x68>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	f06f 0202 	mvn.w	r2, #2
 8009e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	2201      	movs	r2, #1
 8009e7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	699b      	ldr	r3, [r3, #24]
 8009e86:	f003 0303 	and.w	r3, r3, #3
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d005      	beq.n	8009e9a <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009e94:	6878      	ldr	r0, [r7, #4]
 8009e96:	4798      	blx	r3
 8009e98:	e009      	b.n	8009eae <HAL_TIM_IRQHandler+0x62>
        }
        /* Output compare event */
        else
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	4798      	blx	r3
          htim->PWM_PulseFinishedCallback(htim);
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009eaa:	6878      	ldr	r0, [r7, #4]
 8009eac:	4798      	blx	r3
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	681b      	ldr	r3, [r3, #0]
 8009eb8:	691b      	ldr	r3, [r3, #16]
 8009eba:	f003 0304 	and.w	r3, r3, #4
 8009ebe:	2b04      	cmp	r3, #4
 8009ec0:	d128      	bne.n	8009f14 <HAL_TIM_IRQHandler+0xc8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	68db      	ldr	r3, [r3, #12]
 8009ec8:	f003 0304 	and.w	r3, r3, #4
 8009ecc:	2b04      	cmp	r3, #4
 8009ece:	d121      	bne.n	8009f14 <HAL_TIM_IRQHandler+0xc8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f06f 0204 	mvn.w	r2, #4
 8009ed8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	2202      	movs	r2, #2
 8009ede:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	699b      	ldr	r3, [r3, #24]
 8009ee6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	d005      	beq.n	8009efa <HAL_TIM_IRQHandler+0xae>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	4798      	blx	r3
 8009ef8:	e009      	b.n	8009f0e <HAL_TIM_IRQHandler+0xc2>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f0a:	6878      	ldr	r0, [r7, #4]
 8009f0c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	2200      	movs	r2, #0
 8009f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	691b      	ldr	r3, [r3, #16]
 8009f1a:	f003 0308 	and.w	r3, r3, #8
 8009f1e:	2b08      	cmp	r3, #8
 8009f20:	d128      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x128>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	68db      	ldr	r3, [r3, #12]
 8009f28:	f003 0308 	and.w	r3, r3, #8
 8009f2c:	2b08      	cmp	r3, #8
 8009f2e:	d121      	bne.n	8009f74 <HAL_TIM_IRQHandler+0x128>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	f06f 0208 	mvn.w	r2, #8
 8009f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2204      	movs	r2, #4
 8009f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	69db      	ldr	r3, [r3, #28]
 8009f46:	f003 0303 	and.w	r3, r3, #3
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d005      	beq.n	8009f5a <HAL_TIM_IRQHandler+0x10e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	4798      	blx	r3
 8009f58:	e009      	b.n	8009f6e <HAL_TIM_IRQHandler+0x122>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009f6a:	6878      	ldr	r0, [r7, #4]
 8009f6c:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	2200      	movs	r2, #0
 8009f72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	691b      	ldr	r3, [r3, #16]
 8009f7a:	f003 0310 	and.w	r3, r3, #16
 8009f7e:	2b10      	cmp	r3, #16
 8009f80:	d128      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x188>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	68db      	ldr	r3, [r3, #12]
 8009f88:	f003 0310 	and.w	r3, r3, #16
 8009f8c:	2b10      	cmp	r3, #16
 8009f8e:	d121      	bne.n	8009fd4 <HAL_TIM_IRQHandler+0x188>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	f06f 0210 	mvn.w	r2, #16
 8009f98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2208      	movs	r2, #8
 8009f9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d005      	beq.n	8009fba <HAL_TIM_IRQHandler+0x16e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009fb4:	6878      	ldr	r0, [r7, #4]
 8009fb6:	4798      	blx	r3
 8009fb8:	e009      	b.n	8009fce <HAL_TIM_IRQHandler+0x182>
      }
      /* Output compare event */
      else
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009fc0:	6878      	ldr	r0, [r7, #4]
 8009fc2:	4798      	blx	r3
        htim->PWM_PulseFinishedCallback(htim);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	4798      	blx	r3
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	2200      	movs	r2, #0
 8009fd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0301 	and.w	r3, r3, #1
 8009fde:	2b01      	cmp	r3, #1
 8009fe0:	d110      	bne.n	800a004 <HAL_TIM_IRQHandler+0x1b8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0301 	and.w	r3, r3, #1
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d109      	bne.n	800a004 <HAL_TIM_IRQHandler+0x1b8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0201 	mvn.w	r2, #1
 8009ff8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a000:	6878      	ldr	r0, [r7, #4]
 800a002:	4798      	blx	r3
      HAL_TIM_PeriodElapsedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a00e:	2b80      	cmp	r3, #128	; 0x80
 800a010:	d110      	bne.n	800a034 <HAL_TIM_IRQHandler+0x1e8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a01c:	2b80      	cmp	r3, #128	; 0x80
 800a01e:	d109      	bne.n	800a034 <HAL_TIM_IRQHandler+0x1e8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a028:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a030:	6878      	ldr	r0, [r7, #4]
 800a032:	4798      	blx	r3
      HAL_TIMEx_BreakCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	691b      	ldr	r3, [r3, #16]
 800a03a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a03e:	2b40      	cmp	r3, #64	; 0x40
 800a040:	d110      	bne.n	800a064 <HAL_TIM_IRQHandler+0x218>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	681b      	ldr	r3, [r3, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a04c:	2b40      	cmp	r3, #64	; 0x40
 800a04e:	d109      	bne.n	800a064 <HAL_TIM_IRQHandler+0x218>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a058:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a060:	6878      	ldr	r0, [r7, #4]
 800a062:	4798      	blx	r3
      HAL_TIM_TriggerCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	691b      	ldr	r3, [r3, #16]
 800a06a:	f003 0320 	and.w	r3, r3, #32
 800a06e:	2b20      	cmp	r3, #32
 800a070:	d110      	bne.n	800a094 <HAL_TIM_IRQHandler+0x248>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	68db      	ldr	r3, [r3, #12]
 800a078:	f003 0320 	and.w	r3, r3, #32
 800a07c:	2b20      	cmp	r3, #32
 800a07e:	d109      	bne.n	800a094 <HAL_TIM_IRQHandler+0x248>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	f06f 0220 	mvn.w	r2, #32
 800a088:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800a090:	6878      	ldr	r0, [r7, #4]
 800a092:	4798      	blx	r3
#else
      HAL_TIMEx_CommutCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a094:	bf00      	nop
 800a096:	3708      	adds	r7, #8
 800a098:	46bd      	mov	sp, r7
 800a09a:	bd80      	pop	{r7, pc}

0800a09c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800a09c:	b580      	push	{r7, lr}
 800a09e:	b086      	sub	sp, #24
 800a0a0:	af00      	add	r7, sp, #0
 800a0a2:	60f8      	str	r0, [r7, #12]
 800a0a4:	60b9      	str	r1, [r7, #8]
 800a0a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a0b2:	2b01      	cmp	r3, #1
 800a0b4:	d101      	bne.n	800a0ba <HAL_TIM_OC_ConfigChannel+0x1e>
 800a0b6:	2302      	movs	r3, #2
 800a0b8:	e048      	b.n	800a14c <HAL_TIM_OC_ConfigChannel+0xb0>
 800a0ba:	68fb      	ldr	r3, [r7, #12]
 800a0bc:	2201      	movs	r2, #1
 800a0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	2b0c      	cmp	r3, #12
 800a0c6:	d839      	bhi.n	800a13c <HAL_TIM_OC_ConfigChannel+0xa0>
 800a0c8:	a201      	add	r2, pc, #4	; (adr r2, 800a0d0 <HAL_TIM_OC_ConfigChannel+0x34>)
 800a0ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ce:	bf00      	nop
 800a0d0:	0800a105 	.word	0x0800a105
 800a0d4:	0800a13d 	.word	0x0800a13d
 800a0d8:	0800a13d 	.word	0x0800a13d
 800a0dc:	0800a13d 	.word	0x0800a13d
 800a0e0:	0800a113 	.word	0x0800a113
 800a0e4:	0800a13d 	.word	0x0800a13d
 800a0e8:	0800a13d 	.word	0x0800a13d
 800a0ec:	0800a13d 	.word	0x0800a13d
 800a0f0:	0800a121 	.word	0x0800a121
 800a0f4:	0800a13d 	.word	0x0800a13d
 800a0f8:	0800a13d 	.word	0x0800a13d
 800a0fc:	0800a13d 	.word	0x0800a13d
 800a100:	0800a12f 	.word	0x0800a12f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	68b9      	ldr	r1, [r7, #8]
 800a10a:	4618      	mov	r0, r3
 800a10c:	f000 fbd0 	bl	800a8b0 <TIM_OC1_SetConfig>
      break;
 800a110:	e017      	b.n	800a142 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	68b9      	ldr	r1, [r7, #8]
 800a118:	4618      	mov	r0, r3
 800a11a:	f000 fc2f 	bl	800a97c <TIM_OC2_SetConfig>
      break;
 800a11e:	e010      	b.n	800a142 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a120:	68fb      	ldr	r3, [r7, #12]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	68b9      	ldr	r1, [r7, #8]
 800a126:	4618      	mov	r0, r3
 800a128:	f000 fc94 	bl	800aa54 <TIM_OC3_SetConfig>
      break;
 800a12c:	e009      	b.n	800a142 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	681b      	ldr	r3, [r3, #0]
 800a132:	68b9      	ldr	r1, [r7, #8]
 800a134:	4618      	mov	r0, r3
 800a136:	f000 fcf7 	bl	800ab28 <TIM_OC4_SetConfig>
      break;
 800a13a:	e002      	b.n	800a142 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 800a13c:	2301      	movs	r3, #1
 800a13e:	75fb      	strb	r3, [r7, #23]
      break;
 800a140:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	2200      	movs	r2, #0
 800a146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a14a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3718      	adds	r7, #24
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a160:	2300      	movs	r3, #0
 800a162:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a16a:	2b01      	cmp	r3, #1
 800a16c:	d101      	bne.n	800a172 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800a16e:	2302      	movs	r3, #2
 800a170:	e0ae      	b.n	800a2d0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	2201      	movs	r2, #1
 800a176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	2b0c      	cmp	r3, #12
 800a17e:	f200 809f 	bhi.w	800a2c0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800a182:	a201      	add	r2, pc, #4	; (adr r2, 800a188 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800a184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a188:	0800a1bd 	.word	0x0800a1bd
 800a18c:	0800a2c1 	.word	0x0800a2c1
 800a190:	0800a2c1 	.word	0x0800a2c1
 800a194:	0800a2c1 	.word	0x0800a2c1
 800a198:	0800a1fd 	.word	0x0800a1fd
 800a19c:	0800a2c1 	.word	0x0800a2c1
 800a1a0:	0800a2c1 	.word	0x0800a2c1
 800a1a4:	0800a2c1 	.word	0x0800a2c1
 800a1a8:	0800a23f 	.word	0x0800a23f
 800a1ac:	0800a2c1 	.word	0x0800a2c1
 800a1b0:	0800a2c1 	.word	0x0800a2c1
 800a1b4:	0800a2c1 	.word	0x0800a2c1
 800a1b8:	0800a27f 	.word	0x0800a27f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	681b      	ldr	r3, [r3, #0]
 800a1c0:	68b9      	ldr	r1, [r7, #8]
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	f000 fb74 	bl	800a8b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	699a      	ldr	r2, [r3, #24]
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	681b      	ldr	r3, [r3, #0]
 800a1d2:	f042 0208 	orr.w	r2, r2, #8
 800a1d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	699a      	ldr	r2, [r3, #24]
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	f022 0204 	bic.w	r2, r2, #4
 800a1e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	6999      	ldr	r1, [r3, #24]
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	691a      	ldr	r2, [r3, #16]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	430a      	orrs	r2, r1
 800a1f8:	619a      	str	r2, [r3, #24]
      break;
 800a1fa:	e064      	b.n	800a2c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	68b9      	ldr	r1, [r7, #8]
 800a202:	4618      	mov	r0, r3
 800a204:	f000 fbba 	bl	800a97c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	699a      	ldr	r2, [r3, #24]
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a216:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	681b      	ldr	r3, [r3, #0]
 800a21c:	699a      	ldr	r2, [r3, #24]
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a226:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	6999      	ldr	r1, [r3, #24]
 800a22e:	68bb      	ldr	r3, [r7, #8]
 800a230:	691b      	ldr	r3, [r3, #16]
 800a232:	021a      	lsls	r2, r3, #8
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	430a      	orrs	r2, r1
 800a23a:	619a      	str	r2, [r3, #24]
      break;
 800a23c:	e043      	b.n	800a2c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	681b      	ldr	r3, [r3, #0]
 800a242:	68b9      	ldr	r1, [r7, #8]
 800a244:	4618      	mov	r0, r3
 800a246:	f000 fc05 	bl	800aa54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	69da      	ldr	r2, [r3, #28]
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	f042 0208 	orr.w	r2, r2, #8
 800a258:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	69da      	ldr	r2, [r3, #28]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f022 0204 	bic.w	r2, r2, #4
 800a268:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	69d9      	ldr	r1, [r3, #28]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	691a      	ldr	r2, [r3, #16]
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	430a      	orrs	r2, r1
 800a27a:	61da      	str	r2, [r3, #28]
      break;
 800a27c:	e023      	b.n	800a2c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	68b9      	ldr	r1, [r7, #8]
 800a284:	4618      	mov	r0, r3
 800a286:	f000 fc4f 	bl	800ab28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	69da      	ldr	r2, [r3, #28]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a298:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	69da      	ldr	r2, [r3, #28]
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	69d9      	ldr	r1, [r3, #28]
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	691b      	ldr	r3, [r3, #16]
 800a2b4:	021a      	lsls	r2, r3, #8
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	681b      	ldr	r3, [r3, #0]
 800a2ba:	430a      	orrs	r2, r1
 800a2bc:	61da      	str	r2, [r3, #28]
      break;
 800a2be:	e002      	b.n	800a2c6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800a2c0:	2301      	movs	r3, #1
 800a2c2:	75fb      	strb	r3, [r7, #23]
      break;
 800a2c4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a2ce:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	3718      	adds	r7, #24
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	bd80      	pop	{r7, pc}

0800a2d8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a2d8:	b580      	push	{r7, lr}
 800a2da:	b084      	sub	sp, #16
 800a2dc:	af00      	add	r7, sp, #0
 800a2de:	6078      	str	r0, [r7, #4]
 800a2e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a2e2:	2300      	movs	r3, #0
 800a2e4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d101      	bne.n	800a2f4 <HAL_TIM_ConfigClockSource+0x1c>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e0b4      	b.n	800a45e <HAL_TIM_ConfigClockSource+0x186>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	689b      	ldr	r3, [r3, #8]
 800a30a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a312:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a31a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a324:	683b      	ldr	r3, [r7, #0]
 800a326:	681b      	ldr	r3, [r3, #0]
 800a328:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a32c:	d03e      	beq.n	800a3ac <HAL_TIM_ConfigClockSource+0xd4>
 800a32e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a332:	f200 8087 	bhi.w	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a33a:	f000 8086 	beq.w	800a44a <HAL_TIM_ConfigClockSource+0x172>
 800a33e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a342:	d87f      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a344:	2b70      	cmp	r3, #112	; 0x70
 800a346:	d01a      	beq.n	800a37e <HAL_TIM_ConfigClockSource+0xa6>
 800a348:	2b70      	cmp	r3, #112	; 0x70
 800a34a:	d87b      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a34c:	2b60      	cmp	r3, #96	; 0x60
 800a34e:	d050      	beq.n	800a3f2 <HAL_TIM_ConfigClockSource+0x11a>
 800a350:	2b60      	cmp	r3, #96	; 0x60
 800a352:	d877      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a354:	2b50      	cmp	r3, #80	; 0x50
 800a356:	d03c      	beq.n	800a3d2 <HAL_TIM_ConfigClockSource+0xfa>
 800a358:	2b50      	cmp	r3, #80	; 0x50
 800a35a:	d873      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a35c:	2b40      	cmp	r3, #64	; 0x40
 800a35e:	d058      	beq.n	800a412 <HAL_TIM_ConfigClockSource+0x13a>
 800a360:	2b40      	cmp	r3, #64	; 0x40
 800a362:	d86f      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a364:	2b30      	cmp	r3, #48	; 0x30
 800a366:	d064      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0x15a>
 800a368:	2b30      	cmp	r3, #48	; 0x30
 800a36a:	d86b      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a36c:	2b20      	cmp	r3, #32
 800a36e:	d060      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0x15a>
 800a370:	2b20      	cmp	r3, #32
 800a372:	d867      	bhi.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
 800a374:	2b00      	cmp	r3, #0
 800a376:	d05c      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0x15a>
 800a378:	2b10      	cmp	r3, #16
 800a37a:	d05a      	beq.n	800a432 <HAL_TIM_ConfigClockSource+0x15a>
 800a37c:	e062      	b.n	800a444 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	6818      	ldr	r0, [r3, #0]
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	6899      	ldr	r1, [r3, #8]
 800a386:	683b      	ldr	r3, [r7, #0]
 800a388:	685a      	ldr	r2, [r3, #4]
 800a38a:	683b      	ldr	r3, [r7, #0]
 800a38c:	68db      	ldr	r3, [r3, #12]
 800a38e:	f000 fc95 	bl	800acbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	681b      	ldr	r3, [r3, #0]
 800a396:	689b      	ldr	r3, [r3, #8]
 800a398:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a39a:	68bb      	ldr	r3, [r7, #8]
 800a39c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a3a0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	68ba      	ldr	r2, [r7, #8]
 800a3a8:	609a      	str	r2, [r3, #8]
      break;
 800a3aa:	e04f      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	6818      	ldr	r0, [r3, #0]
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	6899      	ldr	r1, [r3, #8]
 800a3b4:	683b      	ldr	r3, [r7, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	683b      	ldr	r3, [r7, #0]
 800a3ba:	68db      	ldr	r3, [r3, #12]
 800a3bc:	f000 fc7e 	bl	800acbc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	689a      	ldr	r2, [r3, #8]
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a3ce:	609a      	str	r2, [r3, #8]
      break;
 800a3d0:	e03c      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	6818      	ldr	r0, [r3, #0]
 800a3d6:	683b      	ldr	r3, [r7, #0]
 800a3d8:	6859      	ldr	r1, [r3, #4]
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	68db      	ldr	r3, [r3, #12]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	f000 fbf2 	bl	800abc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	2150      	movs	r1, #80	; 0x50
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f000 fc4b 	bl	800ac86 <TIM_ITRx_SetConfig>
      break;
 800a3f0:	e02c      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6818      	ldr	r0, [r3, #0]
 800a3f6:	683b      	ldr	r3, [r7, #0]
 800a3f8:	6859      	ldr	r1, [r3, #4]
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	68db      	ldr	r3, [r3, #12]
 800a3fe:	461a      	mov	r2, r3
 800a400:	f000 fc11 	bl	800ac26 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a404:	687b      	ldr	r3, [r7, #4]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2160      	movs	r1, #96	; 0x60
 800a40a:	4618      	mov	r0, r3
 800a40c:	f000 fc3b 	bl	800ac86 <TIM_ITRx_SetConfig>
      break;
 800a410:	e01c      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	6818      	ldr	r0, [r3, #0]
 800a416:	683b      	ldr	r3, [r7, #0]
 800a418:	6859      	ldr	r1, [r3, #4]
 800a41a:	683b      	ldr	r3, [r7, #0]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	461a      	mov	r2, r3
 800a420:	f000 fbd2 	bl	800abc8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	2140      	movs	r1, #64	; 0x40
 800a42a:	4618      	mov	r0, r3
 800a42c:	f000 fc2b 	bl	800ac86 <TIM_ITRx_SetConfig>
      break;
 800a430:	e00c      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681a      	ldr	r2, [r3, #0]
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	4619      	mov	r1, r3
 800a43c:	4610      	mov	r0, r2
 800a43e:	f000 fc22 	bl	800ac86 <TIM_ITRx_SetConfig>
      break;
 800a442:	e003      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800a444:	2301      	movs	r3, #1
 800a446:	73fb      	strb	r3, [r7, #15]
      break;
 800a448:	e000      	b.n	800a44c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800a44a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2201      	movs	r2, #1
 800a450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	2200      	movs	r2, #0
 800a458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800a45e:	4618      	mov	r0, r3
 800a460:	3710      	adds	r7, #16
 800a462:	46bd      	mov	sp, r7
 800a464:	bd80      	pop	{r7, pc}

0800a466 <HAL_TIM_PeriodElapsedHalfCpltCallback>:
  * @brief  Period elapsed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a466:	b480      	push	{r7}
 800a468:	b083      	sub	sp, #12
 800a46a:	af00      	add	r7, sp, #0
 800a46c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedHalfCpltCallback could be implemented in the user file
   */
}
 800a46e:	bf00      	nop
 800a470:	370c      	adds	r7, #12
 800a472:	46bd      	mov	sp, r7
 800a474:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a478:	4770      	bx	lr

0800a47a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a47a:	b480      	push	{r7}
 800a47c:	b083      	sub	sp, #12
 800a47e:	af00      	add	r7, sp, #0
 800a480:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a482:	bf00      	nop
 800a484:	370c      	adds	r7, #12
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a48e:	b480      	push	{r7}
 800a490:	b083      	sub	sp, #12
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a496:	bf00      	nop
 800a498:	370c      	adds	r7, #12
 800a49a:	46bd      	mov	sp, r7
 800a49c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a0:	4770      	bx	lr

0800a4a2 <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4a2:	b480      	push	{r7}
 800a4a4:	b083      	sub	sp, #12
 800a4a6:	af00      	add	r7, sp, #0
 800a4a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 800a4aa:	bf00      	nop
 800a4ac:	370c      	adds	r7, #12
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b4:	4770      	bx	lr

0800a4b6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4b6:	b480      	push	{r7}
 800a4b8:	b083      	sub	sp, #12
 800a4ba:	af00      	add	r7, sp, #0
 800a4bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a4be:	bf00      	nop
 800a4c0:	370c      	adds	r7, #12
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c8:	4770      	bx	lr

0800a4ca <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4ca:	b480      	push	{r7}
 800a4cc:	b083      	sub	sp, #12
 800a4ce:	af00      	add	r7, sp, #0
 800a4d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 800a4d2:	bf00      	nop
 800a4d4:	370c      	adds	r7, #12
 800a4d6:	46bd      	mov	sp, r7
 800a4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4dc:	4770      	bx	lr

0800a4de <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a4de:	b480      	push	{r7}
 800a4e0:	b083      	sub	sp, #12
 800a4e2:	af00      	add	r7, sp, #0
 800a4e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr

0800a4f2 <HAL_TIM_TriggerHalfCpltCallback>:
  * @brief  Hall Trigger detection half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800a4f2:	b480      	push	{r7}
 800a4f4:	b083      	sub	sp, #12
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerHalfCpltCallback could be implemented in the user file
   */
}
 800a4fa:	bf00      	nop
 800a4fc:	370c      	adds	r7, #12
 800a4fe:	46bd      	mov	sp, r7
 800a500:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a504:	4770      	bx	lr

0800a506 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 800a506:	b480      	push	{r7}
 800a508:	b083      	sub	sp, #12
 800a50a:	af00      	add	r7, sp, #0
 800a50c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 800a50e:	bf00      	nop
 800a510:	370c      	adds	r7, #12
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr
	...

0800a51c <HAL_TIM_RegisterCallback>:
  *          @param pCallback pointer to the callback function
  *          @retval status
  */
HAL_StatusTypeDef HAL_TIM_RegisterCallback(TIM_HandleTypeDef *htim, HAL_TIM_CallbackIDTypeDef CallbackID,
                                           pTIM_CallbackTypeDef pCallback)
{
 800a51c:	b480      	push	{r7}
 800a51e:	b087      	sub	sp, #28
 800a520:	af00      	add	r7, sp, #0
 800a522:	60f8      	str	r0, [r7, #12]
 800a524:	460b      	mov	r3, r1
 800a526:	607a      	str	r2, [r7, #4]
 800a528:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800a52a:	2300      	movs	r3, #0
 800a52c:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d101      	bne.n	800a538 <HAL_TIM_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e135      	b.n	800a7a4 <HAL_TIM_RegisterCallback+0x288>
  }
  /* Process locked */
  __HAL_LOCK(htim);
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a53e:	2b01      	cmp	r3, #1
 800a540:	d101      	bne.n	800a546 <HAL_TIM_RegisterCallback+0x2a>
 800a542:	2302      	movs	r3, #2
 800a544:	e12e      	b.n	800a7a4 <HAL_TIM_RegisterCallback+0x288>
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	2201      	movs	r2, #1
 800a54a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (htim->State == HAL_TIM_STATE_READY)
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a554:	b2db      	uxtb	r3, r3
 800a556:	2b01      	cmp	r3, #1
 800a558:	f040 80ba 	bne.w	800a6d0 <HAL_TIM_RegisterCallback+0x1b4>
  {
    switch (CallbackID)
 800a55c:	7afb      	ldrb	r3, [r7, #11]
 800a55e:	2b1a      	cmp	r3, #26
 800a560:	f200 80b3 	bhi.w	800a6ca <HAL_TIM_RegisterCallback+0x1ae>
 800a564:	a201      	add	r2, pc, #4	; (adr r2, 800a56c <HAL_TIM_RegisterCallback+0x50>)
 800a566:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a56a:	bf00      	nop
 800a56c:	0800a5d9 	.word	0x0800a5d9
 800a570:	0800a5e1 	.word	0x0800a5e1
 800a574:	0800a5e9 	.word	0x0800a5e9
 800a578:	0800a5f1 	.word	0x0800a5f1
 800a57c:	0800a5f9 	.word	0x0800a5f9
 800a580:	0800a601 	.word	0x0800a601
 800a584:	0800a609 	.word	0x0800a609
 800a588:	0800a611 	.word	0x0800a611
 800a58c:	0800a619 	.word	0x0800a619
 800a590:	0800a621 	.word	0x0800a621
 800a594:	0800a629 	.word	0x0800a629
 800a598:	0800a631 	.word	0x0800a631
 800a59c:	0800a639 	.word	0x0800a639
 800a5a0:	0800a641 	.word	0x0800a641
 800a5a4:	0800a649 	.word	0x0800a649
 800a5a8:	0800a653 	.word	0x0800a653
 800a5ac:	0800a65d 	.word	0x0800a65d
 800a5b0:	0800a667 	.word	0x0800a667
 800a5b4:	0800a671 	.word	0x0800a671
 800a5b8:	0800a67b 	.word	0x0800a67b
 800a5bc:	0800a685 	.word	0x0800a685
 800a5c0:	0800a68f 	.word	0x0800a68f
 800a5c4:	0800a699 	.word	0x0800a699
 800a5c8:	0800a6a3 	.word	0x0800a6a3
 800a5cc:	0800a6ad 	.word	0x0800a6ad
 800a5d0:	0800a6b7 	.word	0x0800a6b7
 800a5d4:	0800a6c1 	.word	0x0800a6c1
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback                 = pCallback;
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	687a      	ldr	r2, [r7, #4]
 800a5dc:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a5de:	e0dc      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback               = pCallback;
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	687a      	ldr	r2, [r7, #4]
 800a5e4:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a5e6:	e0d8      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback                   = pCallback;
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	687a      	ldr	r2, [r7, #4]
 800a5ec:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a5ee:	e0d4      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback                 = pCallback;
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	687a      	ldr	r2, [r7, #4]
 800a5f4:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a5f6:	e0d0      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback                   = pCallback;
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	687a      	ldr	r2, [r7, #4]
 800a5fc:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a5fe:	e0cc      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback                 = pCallback;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	687a      	ldr	r2, [r7, #4]
 800a604:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a606:	e0c8      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback                  = pCallback;
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a60e:	e0c4      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback                = pCallback;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	687a      	ldr	r2, [r7, #4]
 800a614:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a616:	e0c0      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback             = pCallback;
 800a618:	68fb      	ldr	r3, [r7, #12]
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a61e:	e0bc      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback           = pCallback;
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	687a      	ldr	r2, [r7, #4]
 800a624:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a626:	e0b8      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback              = pCallback;
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	687a      	ldr	r2, [r7, #4]
 800a62c:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a62e:	e0b4      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback            = pCallback;
 800a630:	68fb      	ldr	r3, [r7, #12]
 800a632:	687a      	ldr	r2, [r7, #4]
 800a634:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a636:	e0b0      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback           = pCallback;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	687a      	ldr	r2, [r7, #4]
 800a63c:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a63e:	e0ac      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback         = pCallback;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	687a      	ldr	r2, [r7, #4]
 800a644:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a646:	e0a8      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_CB_ID :
        htim->PeriodElapsedCallback                = pCallback;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	687a      	ldr	r2, [r7, #4]
 800a64c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        break;
 800a650:	e0a3      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PERIOD_ELAPSED_HALF_CB_ID :
        htim->PeriodElapsedHalfCpltCallback        = pCallback;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	687a      	ldr	r2, [r7, #4]
 800a656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        break;
 800a65a:	e09e      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_CB_ID :
        htim->TriggerCallback                      = pCallback;
 800a65c:	68fb      	ldr	r3, [r7, #12]
 800a65e:	687a      	ldr	r2, [r7, #4]
 800a660:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        break;
 800a664:	e099      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_TRIGGER_HALF_CB_ID :
        htim->TriggerHalfCpltCallback              = pCallback;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	687a      	ldr	r2, [r7, #4]
 800a66a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        break;
 800a66e:	e094      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_CB_ID :
        htim->IC_CaptureCallback                   = pCallback;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	687a      	ldr	r2, [r7, #4]
 800a674:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        break;
 800a678:	e08f      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_CAPTURE_HALF_CB_ID :
        htim->IC_CaptureHalfCpltCallback           = pCallback;
 800a67a:	68fb      	ldr	r3, [r7, #12]
 800a67c:	687a      	ldr	r2, [r7, #4]
 800a67e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
        break;
 800a682:	e08a      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_DELAY_ELAPSED_CB_ID :
        htim->OC_DelayElapsedCallback              = pCallback;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	687a      	ldr	r2, [r7, #4]
 800a688:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
        break;
 800a68c:	e085      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_CB_ID :
        htim->PWM_PulseFinishedCallback            = pCallback;
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	687a      	ldr	r2, [r7, #4]
 800a692:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
        break;
 800a696:	e080      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_PULSE_FINISHED_HALF_CB_ID :
        htim->PWM_PulseFinishedHalfCpltCallback    = pCallback;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	687a      	ldr	r2, [r7, #4]
 800a69c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        break;
 800a6a0:	e07b      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ERROR_CB_ID :
        htim->ErrorCallback                        = pCallback;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	687a      	ldr	r2, [r7, #4]
 800a6a6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        break;
 800a6aa:	e076      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_CB_ID :
        htim->CommutationCallback                  = pCallback;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	687a      	ldr	r2, [r7, #4]
 800a6b0:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
        break;
 800a6b4:	e071      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_COMMUTATION_HALF_CB_ID :
        htim->CommutationHalfCpltCallback          = pCallback;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	687a      	ldr	r2, [r7, #4]
 800a6ba:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
        break;
 800a6be:	e06c      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BREAK_CB_ID :
        htim->BreakCallback                        = pCallback;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	687a      	ldr	r2, [r7, #4]
 800a6c4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
        break;
 800a6c8:	e067      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]
        break;
 800a6ce:	e064      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else if (htim->State == HAL_TIM_STATE_RESET)
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b00      	cmp	r3, #0
 800a6da:	d15c      	bne.n	800a796 <HAL_TIM_RegisterCallback+0x27a>
  {
    switch (CallbackID)
 800a6dc:	7afb      	ldrb	r3, [r7, #11]
 800a6de:	2b0d      	cmp	r3, #13
 800a6e0:	d856      	bhi.n	800a790 <HAL_TIM_RegisterCallback+0x274>
 800a6e2:	a201      	add	r2, pc, #4	; (adr r2, 800a6e8 <HAL_TIM_RegisterCallback+0x1cc>)
 800a6e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6e8:	0800a721 	.word	0x0800a721
 800a6ec:	0800a729 	.word	0x0800a729
 800a6f0:	0800a731 	.word	0x0800a731
 800a6f4:	0800a739 	.word	0x0800a739
 800a6f8:	0800a741 	.word	0x0800a741
 800a6fc:	0800a749 	.word	0x0800a749
 800a700:	0800a751 	.word	0x0800a751
 800a704:	0800a759 	.word	0x0800a759
 800a708:	0800a761 	.word	0x0800a761
 800a70c:	0800a769 	.word	0x0800a769
 800a710:	0800a771 	.word	0x0800a771
 800a714:	0800a779 	.word	0x0800a779
 800a718:	0800a781 	.word	0x0800a781
 800a71c:	0800a789 	.word	0x0800a789
    {
      case HAL_TIM_BASE_MSPINIT_CB_ID :
        htim->Base_MspInitCallback         = pCallback;
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	687a      	ldr	r2, [r7, #4]
 800a724:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800a726:	e038      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_BASE_MSPDEINIT_CB_ID :
        htim->Base_MspDeInitCallback       = pCallback;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	687a      	ldr	r2, [r7, #4]
 800a72c:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800a72e:	e034      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPINIT_CB_ID :
        htim->IC_MspInitCallback           = pCallback;
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	687a      	ldr	r2, [r7, #4]
 800a734:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800a736:	e030      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_IC_MSPDEINIT_CB_ID :
        htim->IC_MspDeInitCallback         = pCallback;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	687a      	ldr	r2, [r7, #4]
 800a73c:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800a73e:	e02c      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPINIT_CB_ID :
        htim->OC_MspInitCallback           = pCallback;
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	687a      	ldr	r2, [r7, #4]
 800a744:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800a746:	e028      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_OC_MSPDEINIT_CB_ID :
        htim->OC_MspDeInitCallback         = pCallback;
 800a748:	68fb      	ldr	r3, [r7, #12]
 800a74a:	687a      	ldr	r2, [r7, #4]
 800a74c:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800a74e:	e024      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPINIT_CB_ID :
        htim->PWM_MspInitCallback          = pCallback;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	687a      	ldr	r2, [r7, #4]
 800a754:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a756:	e020      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_PWM_MSPDEINIT_CB_ID :
        htim->PWM_MspDeInitCallback        = pCallback;
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	687a      	ldr	r2, [r7, #4]
 800a75c:	665a      	str	r2, [r3, #100]	; 0x64
        break;
 800a75e:	e01c      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPINIT_CB_ID :
        htim->OnePulse_MspInitCallback     = pCallback;
 800a760:	68fb      	ldr	r3, [r7, #12]
 800a762:	687a      	ldr	r2, [r7, #4]
 800a764:	669a      	str	r2, [r3, #104]	; 0x68
        break;
 800a766:	e018      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ONE_PULSE_MSPDEINIT_CB_ID :
        htim->OnePulse_MspDeInitCallback   = pCallback;
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800a76e:	e014      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPINIT_CB_ID :
        htim->Encoder_MspInitCallback      = pCallback;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800a776:	e010      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_ENCODER_MSPDEINIT_CB_ID :
        htim->Encoder_MspDeInitCallback    = pCallback;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	675a      	str	r2, [r3, #116]	; 0x74
        break;
 800a77e:	e00c      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPINIT_CB_ID :
        htim->HallSensor_MspInitCallback   = pCallback;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	679a      	str	r2, [r3, #120]	; 0x78
        break;
 800a786:	e008      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      case HAL_TIM_HALL_SENSOR_MSPDEINIT_CB_ID :
        htim->HallSensor_MspDeInitCallback = pCallback;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	687a      	ldr	r2, [r7, #4]
 800a78c:	67da      	str	r2, [r3, #124]	; 0x7c
        break;
 800a78e:	e004      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>

      default :
        /* Return error status */
        status = HAL_ERROR;
 800a790:	2301      	movs	r3, #1
 800a792:	75fb      	strb	r3, [r7, #23]
        break;
 800a794:	e001      	b.n	800a79a <HAL_TIM_RegisterCallback+0x27e>
    }
  }
  else
  {
    /* Return error status */
    status = HAL_ERROR;
 800a796:	2301      	movs	r3, #1
 800a798:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a7a2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	371c      	adds	r7, #28
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ae:	4770      	bx	lr

0800a7b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a7b0:	b480      	push	{r7}
 800a7b2:	b085      	sub	sp, #20
 800a7b4:	af00      	add	r7, sp, #0
 800a7b6:	6078      	str	r0, [r7, #4]
 800a7b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	4a34      	ldr	r2, [pc, #208]	; (800a894 <TIM_Base_SetConfig+0xe4>)
 800a7c4:	4293      	cmp	r3, r2
 800a7c6:	d00f      	beq.n	800a7e8 <TIM_Base_SetConfig+0x38>
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a7ce:	d00b      	beq.n	800a7e8 <TIM_Base_SetConfig+0x38>
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	4a31      	ldr	r2, [pc, #196]	; (800a898 <TIM_Base_SetConfig+0xe8>)
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d007      	beq.n	800a7e8 <TIM_Base_SetConfig+0x38>
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	4a30      	ldr	r2, [pc, #192]	; (800a89c <TIM_Base_SetConfig+0xec>)
 800a7dc:	4293      	cmp	r3, r2
 800a7de:	d003      	beq.n	800a7e8 <TIM_Base_SetConfig+0x38>
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	4a2f      	ldr	r2, [pc, #188]	; (800a8a0 <TIM_Base_SetConfig+0xf0>)
 800a7e4:	4293      	cmp	r3, r2
 800a7e6:	d108      	bne.n	800a7fa <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a7ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a7f0:	683b      	ldr	r3, [r7, #0]
 800a7f2:	685b      	ldr	r3, [r3, #4]
 800a7f4:	68fa      	ldr	r2, [r7, #12]
 800a7f6:	4313      	orrs	r3, r2
 800a7f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	4a25      	ldr	r2, [pc, #148]	; (800a894 <TIM_Base_SetConfig+0xe4>)
 800a7fe:	4293      	cmp	r3, r2
 800a800:	d01b      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a808:	d017      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a22      	ldr	r2, [pc, #136]	; (800a898 <TIM_Base_SetConfig+0xe8>)
 800a80e:	4293      	cmp	r3, r2
 800a810:	d013      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	4a21      	ldr	r2, [pc, #132]	; (800a89c <TIM_Base_SetConfig+0xec>)
 800a816:	4293      	cmp	r3, r2
 800a818:	d00f      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	4a20      	ldr	r2, [pc, #128]	; (800a8a0 <TIM_Base_SetConfig+0xf0>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d00b      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	4a1f      	ldr	r2, [pc, #124]	; (800a8a4 <TIM_Base_SetConfig+0xf4>)
 800a826:	4293      	cmp	r3, r2
 800a828:	d007      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	4a1e      	ldr	r2, [pc, #120]	; (800a8a8 <TIM_Base_SetConfig+0xf8>)
 800a82e:	4293      	cmp	r3, r2
 800a830:	d003      	beq.n	800a83a <TIM_Base_SetConfig+0x8a>
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	4a1d      	ldr	r2, [pc, #116]	; (800a8ac <TIM_Base_SetConfig+0xfc>)
 800a836:	4293      	cmp	r3, r2
 800a838:	d108      	bne.n	800a84c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	68db      	ldr	r3, [r3, #12]
 800a846:	68fa      	ldr	r2, [r7, #12]
 800a848:	4313      	orrs	r3, r2
 800a84a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a852:	683b      	ldr	r3, [r7, #0]
 800a854:	695b      	ldr	r3, [r3, #20]
 800a856:	4313      	orrs	r3, r2
 800a858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	68fa      	ldr	r2, [r7, #12]
 800a85e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a860:	683b      	ldr	r3, [r7, #0]
 800a862:	689a      	ldr	r2, [r3, #8]
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a868:	683b      	ldr	r3, [r7, #0]
 800a86a:	681a      	ldr	r2, [r3, #0]
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	4a08      	ldr	r2, [pc, #32]	; (800a894 <TIM_Base_SetConfig+0xe4>)
 800a874:	4293      	cmp	r3, r2
 800a876:	d103      	bne.n	800a880 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	691a      	ldr	r2, [r3, #16]
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	2201      	movs	r2, #1
 800a884:	615a      	str	r2, [r3, #20]
}
 800a886:	bf00      	nop
 800a888:	3714      	adds	r7, #20
 800a88a:	46bd      	mov	sp, r7
 800a88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a890:	4770      	bx	lr
 800a892:	bf00      	nop
 800a894:	40010000 	.word	0x40010000
 800a898:	40000400 	.word	0x40000400
 800a89c:	40000800 	.word	0x40000800
 800a8a0:	40000c00 	.word	0x40000c00
 800a8a4:	40014000 	.word	0x40014000
 800a8a8:	40014400 	.word	0x40014400
 800a8ac:	40014800 	.word	0x40014800

0800a8b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b087      	sub	sp, #28
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
 800a8b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6a1b      	ldr	r3, [r3, #32]
 800a8be:	f023 0201 	bic.w	r2, r3, #1
 800a8c2:	687b      	ldr	r3, [r7, #4]
 800a8c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	6a1b      	ldr	r3, [r3, #32]
 800a8ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	685b      	ldr	r3, [r3, #4]
 800a8d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	699b      	ldr	r3, [r3, #24]
 800a8d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	f023 0303 	bic.w	r3, r3, #3
 800a8e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a8e8:	683b      	ldr	r3, [r7, #0]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	68fa      	ldr	r2, [r7, #12]
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a8f2:	697b      	ldr	r3, [r7, #20]
 800a8f4:	f023 0302 	bic.w	r3, r3, #2
 800a8f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	697a      	ldr	r2, [r7, #20]
 800a900:	4313      	orrs	r3, r2
 800a902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	4a1c      	ldr	r2, [pc, #112]	; (800a978 <TIM_OC1_SetConfig+0xc8>)
 800a908:	4293      	cmp	r3, r2
 800a90a:	d10c      	bne.n	800a926 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a90c:	697b      	ldr	r3, [r7, #20]
 800a90e:	f023 0308 	bic.w	r3, r3, #8
 800a912:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	68db      	ldr	r3, [r3, #12]
 800a918:	697a      	ldr	r2, [r7, #20]
 800a91a:	4313      	orrs	r3, r2
 800a91c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a91e:	697b      	ldr	r3, [r7, #20]
 800a920:	f023 0304 	bic.w	r3, r3, #4
 800a924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	4a13      	ldr	r2, [pc, #76]	; (800a978 <TIM_OC1_SetConfig+0xc8>)
 800a92a:	4293      	cmp	r3, r2
 800a92c:	d111      	bne.n	800a952 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a92e:	693b      	ldr	r3, [r7, #16]
 800a930:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a934:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a936:	693b      	ldr	r3, [r7, #16]
 800a938:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a93c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	695b      	ldr	r3, [r3, #20]
 800a942:	693a      	ldr	r2, [r7, #16]
 800a944:	4313      	orrs	r3, r2
 800a946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a948:	683b      	ldr	r3, [r7, #0]
 800a94a:	699b      	ldr	r3, [r3, #24]
 800a94c:	693a      	ldr	r2, [r7, #16]
 800a94e:	4313      	orrs	r3, r2
 800a950:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	693a      	ldr	r2, [r7, #16]
 800a956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	685a      	ldr	r2, [r3, #4]
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a966:	687b      	ldr	r3, [r7, #4]
 800a968:	697a      	ldr	r2, [r7, #20]
 800a96a:	621a      	str	r2, [r3, #32]
}
 800a96c:	bf00      	nop
 800a96e:	371c      	adds	r7, #28
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	40010000 	.word	0x40010000

0800a97c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
 800a984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a1b      	ldr	r3, [r3, #32]
 800a98a:	f023 0210 	bic.w	r2, r3, #16
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	6a1b      	ldr	r3, [r3, #32]
 800a996:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a9b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a9b4:	683b      	ldr	r3, [r7, #0]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	021b      	lsls	r3, r3, #8
 800a9ba:	68fa      	ldr	r2, [r7, #12]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	f023 0320 	bic.w	r3, r3, #32
 800a9c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	689b      	ldr	r3, [r3, #8]
 800a9cc:	011b      	lsls	r3, r3, #4
 800a9ce:	697a      	ldr	r2, [r7, #20]
 800a9d0:	4313      	orrs	r3, r2
 800a9d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	4a1e      	ldr	r2, [pc, #120]	; (800aa50 <TIM_OC2_SetConfig+0xd4>)
 800a9d8:	4293      	cmp	r3, r2
 800a9da:	d10d      	bne.n	800a9f8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a9dc:	697b      	ldr	r3, [r7, #20]
 800a9de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a9e2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a9e4:	683b      	ldr	r3, [r7, #0]
 800a9e6:	68db      	ldr	r3, [r3, #12]
 800a9e8:	011b      	lsls	r3, r3, #4
 800a9ea:	697a      	ldr	r2, [r7, #20]
 800a9ec:	4313      	orrs	r3, r2
 800a9ee:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a9f0:	697b      	ldr	r3, [r7, #20]
 800a9f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a9f6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	4a15      	ldr	r2, [pc, #84]	; (800aa50 <TIM_OC2_SetConfig+0xd4>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d113      	bne.n	800aa28 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800aa00:	693b      	ldr	r3, [r7, #16]
 800aa02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aa06:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aa0e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800aa10:	683b      	ldr	r3, [r7, #0]
 800aa12:	695b      	ldr	r3, [r3, #20]
 800aa14:	009b      	lsls	r3, r3, #2
 800aa16:	693a      	ldr	r2, [r7, #16]
 800aa18:	4313      	orrs	r3, r2
 800aa1a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800aa1c:	683b      	ldr	r3, [r7, #0]
 800aa1e:	699b      	ldr	r3, [r3, #24]
 800aa20:	009b      	lsls	r3, r3, #2
 800aa22:	693a      	ldr	r2, [r7, #16]
 800aa24:	4313      	orrs	r3, r2
 800aa26:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	693a      	ldr	r2, [r7, #16]
 800aa2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	68fa      	ldr	r2, [r7, #12]
 800aa32:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800aa34:	683b      	ldr	r3, [r7, #0]
 800aa36:	685a      	ldr	r2, [r3, #4]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	697a      	ldr	r2, [r7, #20]
 800aa40:	621a      	str	r2, [r3, #32]
}
 800aa42:	bf00      	nop
 800aa44:	371c      	adds	r7, #28
 800aa46:	46bd      	mov	sp, r7
 800aa48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa4c:	4770      	bx	lr
 800aa4e:	bf00      	nop
 800aa50:	40010000 	.word	0x40010000

0800aa54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aa54:	b480      	push	{r7}
 800aa56:	b087      	sub	sp, #28
 800aa58:	af00      	add	r7, sp, #0
 800aa5a:	6078      	str	r0, [r7, #4]
 800aa5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	6a1b      	ldr	r3, [r3, #32]
 800aa62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	6a1b      	ldr	r3, [r3, #32]
 800aa6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	685b      	ldr	r3, [r3, #4]
 800aa74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	69db      	ldr	r3, [r3, #28]
 800aa7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	f023 0303 	bic.w	r3, r3, #3
 800aa8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aa8c:	683b      	ldr	r3, [r7, #0]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	68fa      	ldr	r2, [r7, #12]
 800aa92:	4313      	orrs	r3, r2
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aa9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aa9e:	683b      	ldr	r3, [r7, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	021b      	lsls	r3, r3, #8
 800aaa4:	697a      	ldr	r2, [r7, #20]
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	4a1d      	ldr	r2, [pc, #116]	; (800ab24 <TIM_OC3_SetConfig+0xd0>)
 800aaae:	4293      	cmp	r3, r2
 800aab0:	d10d      	bne.n	800aace <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aab2:	697b      	ldr	r3, [r7, #20]
 800aab4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aab8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	68db      	ldr	r3, [r3, #12]
 800aabe:	021b      	lsls	r3, r3, #8
 800aac0:	697a      	ldr	r2, [r7, #20]
 800aac2:	4313      	orrs	r3, r2
 800aac4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aac6:	697b      	ldr	r3, [r7, #20]
 800aac8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aacc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	4a14      	ldr	r2, [pc, #80]	; (800ab24 <TIM_OC3_SetConfig+0xd0>)
 800aad2:	4293      	cmp	r3, r2
 800aad4:	d113      	bne.n	800aafe <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aad6:	693b      	ldr	r3, [r7, #16]
 800aad8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800aadc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800aade:	693b      	ldr	r3, [r7, #16]
 800aae0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800aae4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800aae6:	683b      	ldr	r3, [r7, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	011b      	lsls	r3, r3, #4
 800aaec:	693a      	ldr	r2, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800aaf2:	683b      	ldr	r3, [r7, #0]
 800aaf4:	699b      	ldr	r3, [r3, #24]
 800aaf6:	011b      	lsls	r3, r3, #4
 800aaf8:	693a      	ldr	r2, [r7, #16]
 800aafa:	4313      	orrs	r3, r2
 800aafc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	693a      	ldr	r2, [r7, #16]
 800ab02:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800ab04:	687b      	ldr	r3, [r7, #4]
 800ab06:	68fa      	ldr	r2, [r7, #12]
 800ab08:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800ab0a:	683b      	ldr	r3, [r7, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	697a      	ldr	r2, [r7, #20]
 800ab16:	621a      	str	r2, [r3, #32]
}
 800ab18:	bf00      	nop
 800ab1a:	371c      	adds	r7, #28
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab22:	4770      	bx	lr
 800ab24:	40010000 	.word	0x40010000

0800ab28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b087      	sub	sp, #28
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
 800ab30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	6a1b      	ldr	r3, [r3, #32]
 800ab42:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	69db      	ldr	r3, [r3, #28]
 800ab4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ab56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ab5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ab60:	683b      	ldr	r3, [r7, #0]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	021b      	lsls	r3, r3, #8
 800ab66:	68fa      	ldr	r2, [r7, #12]
 800ab68:	4313      	orrs	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ab72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800ab74:	683b      	ldr	r3, [r7, #0]
 800ab76:	689b      	ldr	r3, [r3, #8]
 800ab78:	031b      	lsls	r3, r3, #12
 800ab7a:	693a      	ldr	r2, [r7, #16]
 800ab7c:	4313      	orrs	r3, r2
 800ab7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	4a10      	ldr	r2, [pc, #64]	; (800abc4 <TIM_OC4_SetConfig+0x9c>)
 800ab84:	4293      	cmp	r3, r2
 800ab86:	d109      	bne.n	800ab9c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800ab88:	697b      	ldr	r3, [r7, #20]
 800ab8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800ab8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800ab90:	683b      	ldr	r3, [r7, #0]
 800ab92:	695b      	ldr	r3, [r3, #20]
 800ab94:	019b      	lsls	r3, r3, #6
 800ab96:	697a      	ldr	r2, [r7, #20]
 800ab98:	4313      	orrs	r3, r2
 800ab9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	697a      	ldr	r2, [r7, #20]
 800aba0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	68fa      	ldr	r2, [r7, #12]
 800aba6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685a      	ldr	r2, [r3, #4]
 800abac:	687b      	ldr	r3, [r7, #4]
 800abae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	693a      	ldr	r2, [r7, #16]
 800abb4:	621a      	str	r2, [r3, #32]
}
 800abb6:	bf00      	nop
 800abb8:	371c      	adds	r7, #28
 800abba:	46bd      	mov	sp, r7
 800abbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abc0:	4770      	bx	lr
 800abc2:	bf00      	nop
 800abc4:	40010000 	.word	0x40010000

0800abc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800abc8:	b480      	push	{r7}
 800abca:	b087      	sub	sp, #28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	6a1b      	ldr	r3, [r3, #32]
 800abd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	6a1b      	ldr	r3, [r3, #32]
 800abde:	f023 0201 	bic.w	r2, r3, #1
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800abe6:	68fb      	ldr	r3, [r7, #12]
 800abe8:	699b      	ldr	r3, [r3, #24]
 800abea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800abf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	011b      	lsls	r3, r3, #4
 800abf8:	693a      	ldr	r2, [r7, #16]
 800abfa:	4313      	orrs	r3, r2
 800abfc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800abfe:	697b      	ldr	r3, [r7, #20]
 800ac00:	f023 030a 	bic.w	r3, r3, #10
 800ac04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800ac06:	697a      	ldr	r2, [r7, #20]
 800ac08:	68bb      	ldr	r3, [r7, #8]
 800ac0a:	4313      	orrs	r3, r2
 800ac0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	693a      	ldr	r2, [r7, #16]
 800ac12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	697a      	ldr	r2, [r7, #20]
 800ac18:	621a      	str	r2, [r3, #32]
}
 800ac1a:	bf00      	nop
 800ac1c:	371c      	adds	r7, #28
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac24:	4770      	bx	lr

0800ac26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800ac26:	b480      	push	{r7}
 800ac28:	b087      	sub	sp, #28
 800ac2a:	af00      	add	r7, sp, #0
 800ac2c:	60f8      	str	r0, [r7, #12]
 800ac2e:	60b9      	str	r1, [r7, #8]
 800ac30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6a1b      	ldr	r3, [r3, #32]
 800ac36:	f023 0210 	bic.w	r2, r3, #16
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	699b      	ldr	r3, [r3, #24]
 800ac42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800ac44:	68fb      	ldr	r3, [r7, #12]
 800ac46:	6a1b      	ldr	r3, [r3, #32]
 800ac48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800ac50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	031b      	lsls	r3, r3, #12
 800ac56:	697a      	ldr	r2, [r7, #20]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800ac5c:	693b      	ldr	r3, [r7, #16]
 800ac5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800ac62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800ac64:	68bb      	ldr	r3, [r7, #8]
 800ac66:	011b      	lsls	r3, r3, #4
 800ac68:	693a      	ldr	r2, [r7, #16]
 800ac6a:	4313      	orrs	r3, r2
 800ac6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	697a      	ldr	r2, [r7, #20]
 800ac72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	693a      	ldr	r2, [r7, #16]
 800ac78:	621a      	str	r2, [r3, #32]
}
 800ac7a:	bf00      	nop
 800ac7c:	371c      	adds	r7, #28
 800ac7e:	46bd      	mov	sp, r7
 800ac80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac84:	4770      	bx	lr

0800ac86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ac86:	b480      	push	{r7}
 800ac88:	b085      	sub	sp, #20
 800ac8a:	af00      	add	r7, sp, #0
 800ac8c:	6078      	str	r0, [r7, #4]
 800ac8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	689b      	ldr	r3, [r3, #8]
 800ac94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800ac96:	68fb      	ldr	r3, [r7, #12]
 800ac98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800ac9e:	683a      	ldr	r2, [r7, #0]
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	4313      	orrs	r3, r2
 800aca4:	f043 0307 	orr.w	r3, r3, #7
 800aca8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	68fa      	ldr	r2, [r7, #12]
 800acae:	609a      	str	r2, [r3, #8]
}
 800acb0:	bf00      	nop
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b087      	sub	sp, #28
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	60f8      	str	r0, [r7, #12]
 800acc4:	60b9      	str	r1, [r7, #8]
 800acc6:	607a      	str	r2, [r7, #4]
 800acc8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	689b      	ldr	r3, [r3, #8]
 800acce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800acd0:	697b      	ldr	r3, [r7, #20]
 800acd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800acd6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800acd8:	683b      	ldr	r3, [r7, #0]
 800acda:	021a      	lsls	r2, r3, #8
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	431a      	orrs	r2, r3
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	4313      	orrs	r3, r2
 800ace4:	697a      	ldr	r2, [r7, #20]
 800ace6:	4313      	orrs	r3, r2
 800ace8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	697a      	ldr	r2, [r7, #20]
 800acee:	609a      	str	r2, [r3, #8]
}
 800acf0:	bf00      	nop
 800acf2:	371c      	adds	r7, #28
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr

0800acfc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800acfc:	b480      	push	{r7}
 800acfe:	b087      	sub	sp, #28
 800ad00:	af00      	add	r7, sp, #0
 800ad02:	60f8      	str	r0, [r7, #12]
 800ad04:	60b9      	str	r1, [r7, #8]
 800ad06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f003 031f 	and.w	r3, r3, #31
 800ad0e:	2201      	movs	r2, #1
 800ad10:	fa02 f303 	lsl.w	r3, r2, r3
 800ad14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	6a1a      	ldr	r2, [r3, #32]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	43db      	mvns	r3, r3
 800ad1e:	401a      	ands	r2, r3
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	6a1a      	ldr	r2, [r3, #32]
 800ad28:	68bb      	ldr	r3, [r7, #8]
 800ad2a:	f003 031f 	and.w	r3, r3, #31
 800ad2e:	6879      	ldr	r1, [r7, #4]
 800ad30:	fa01 f303 	lsl.w	r3, r1, r3
 800ad34:	431a      	orrs	r2, r3
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	621a      	str	r2, [r3, #32]
}
 800ad3a:	bf00      	nop
 800ad3c:	371c      	adds	r7, #28
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
	...

0800ad48 <TIM_ResetCallback>:
  * @param  htim pointer to a TIM_HandleTypeDef structure that contains
  *                the configuration information for TIM module.
  * @retval None
  */
void TIM_ResetCallback(TIM_HandleTypeDef *htim)
{
 800ad48:	b480      	push	{r7}
 800ad4a:	b083      	sub	sp, #12
 800ad4c:	af00      	add	r7, sp, #0
 800ad4e:	6078      	str	r0, [r7, #4]
  /* Reset the TIM callback to the legacy weak callbacks */
  htim->PeriodElapsedCallback             = HAL_TIM_PeriodElapsedCallback;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	4a1c      	ldr	r2, [pc, #112]	; (800adc4 <TIM_ResetCallback+0x7c>)
 800ad54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  htim->PeriodElapsedHalfCpltCallback     = HAL_TIM_PeriodElapsedHalfCpltCallback;
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	4a1b      	ldr	r2, [pc, #108]	; (800adc8 <TIM_ResetCallback+0x80>)
 800ad5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  htim->TriggerCallback                   = HAL_TIM_TriggerCallback;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	4a1a      	ldr	r2, [pc, #104]	; (800adcc <TIM_ResetCallback+0x84>)
 800ad64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  htim->TriggerHalfCpltCallback           = HAL_TIM_TriggerHalfCpltCallback;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	4a19      	ldr	r2, [pc, #100]	; (800add0 <TIM_ResetCallback+0x88>)
 800ad6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  htim->IC_CaptureCallback                = HAL_TIM_IC_CaptureCallback;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	4a18      	ldr	r2, [pc, #96]	; (800add4 <TIM_ResetCallback+0x8c>)
 800ad74:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  htim->IC_CaptureHalfCpltCallback        = HAL_TIM_IC_CaptureHalfCpltCallback;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	4a17      	ldr	r2, [pc, #92]	; (800add8 <TIM_ResetCallback+0x90>)
 800ad7c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  htim->OC_DelayElapsedCallback           = HAL_TIM_OC_DelayElapsedCallback;
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	4a16      	ldr	r2, [pc, #88]	; (800addc <TIM_ResetCallback+0x94>)
 800ad84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
  htim->PWM_PulseFinishedCallback         = HAL_TIM_PWM_PulseFinishedCallback;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	4a15      	ldr	r2, [pc, #84]	; (800ade0 <TIM_ResetCallback+0x98>)
 800ad8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  htim->PWM_PulseFinishedHalfCpltCallback = HAL_TIM_PWM_PulseFinishedHalfCpltCallback;
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	4a14      	ldr	r2, [pc, #80]	; (800ade4 <TIM_ResetCallback+0x9c>)
 800ad94:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
  htim->ErrorCallback                     = HAL_TIM_ErrorCallback;
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	4a13      	ldr	r2, [pc, #76]	; (800ade8 <TIM_ResetCallback+0xa0>)
 800ad9c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
  htim->CommutationCallback               = HAL_TIMEx_CommutCallback;
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	4a12      	ldr	r2, [pc, #72]	; (800adec <TIM_ResetCallback+0xa4>)
 800ada4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
  htim->CommutationHalfCpltCallback       = HAL_TIMEx_CommutHalfCpltCallback;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	4a11      	ldr	r2, [pc, #68]	; (800adf0 <TIM_ResetCallback+0xa8>)
 800adac:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
  htim->BreakCallback                     = HAL_TIMEx_BreakCallback;
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	4a10      	ldr	r2, [pc, #64]	; (800adf4 <TIM_ResetCallback+0xac>)
 800adb4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 800adb8:	bf00      	nop
 800adba:	370c      	adds	r7, #12
 800adbc:	46bd      	mov	sp, r7
 800adbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adc2:	4770      	bx	lr
 800adc4:	08003d2d 	.word	0x08003d2d
 800adc8:	0800a467 	.word	0x0800a467
 800adcc:	0800a4df 	.word	0x0800a4df
 800add0:	0800a4f3 	.word	0x0800a4f3
 800add4:	0800a48f 	.word	0x0800a48f
 800add8:	0800a4a3 	.word	0x0800a4a3
 800addc:	0800a47b 	.word	0x0800a47b
 800ade0:	0800a4b7 	.word	0x0800a4b7
 800ade4:	0800a4cb 	.word	0x0800a4cb
 800ade8:	0800a507 	.word	0x0800a507
 800adec:	0800af79 	.word	0x0800af79
 800adf0:	0800af8d 	.word	0x0800af8d
 800adf4:	0800afa1 	.word	0x0800afa1

0800adf8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800adf8:	b480      	push	{r7}
 800adfa:	b085      	sub	sp, #20
 800adfc:	af00      	add	r7, sp, #0
 800adfe:	6078      	str	r0, [r7, #4]
 800ae00:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ae08:	2b01      	cmp	r3, #1
 800ae0a:	d101      	bne.n	800ae10 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ae0c:	2302      	movs	r3, #2
 800ae0e:	e050      	b.n	800aeb2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2201      	movs	r2, #1
 800ae14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2202      	movs	r2, #2
 800ae1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	685b      	ldr	r3, [r3, #4]
 800ae26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	689b      	ldr	r3, [r3, #8]
 800ae2e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ae36:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ae38:	683b      	ldr	r3, [r7, #0]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4313      	orrs	r3, r2
 800ae40:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	4a1c      	ldr	r2, [pc, #112]	; (800aec0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d018      	beq.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ae5c:	d013      	beq.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	4a18      	ldr	r2, [pc, #96]	; (800aec4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800ae64:	4293      	cmp	r3, r2
 800ae66:	d00e      	beq.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	4a16      	ldr	r2, [pc, #88]	; (800aec8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800ae6e:	4293      	cmp	r3, r2
 800ae70:	d009      	beq.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4a15      	ldr	r2, [pc, #84]	; (800aecc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800ae78:	4293      	cmp	r3, r2
 800ae7a:	d004      	beq.n	800ae86 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	681b      	ldr	r3, [r3, #0]
 800ae80:	4a13      	ldr	r2, [pc, #76]	; (800aed0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800ae82:	4293      	cmp	r3, r2
 800ae84:	d10c      	bne.n	800aea0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ae86:	68bb      	ldr	r3, [r7, #8]
 800ae88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ae8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ae8e:	683b      	ldr	r3, [r7, #0]
 800ae90:	685b      	ldr	r3, [r3, #4]
 800ae92:	68ba      	ldr	r2, [r7, #8]
 800ae94:	4313      	orrs	r3, r2
 800ae96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	68ba      	ldr	r2, [r7, #8]
 800ae9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	2201      	movs	r2, #1
 800aea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aea8:	687b      	ldr	r3, [r7, #4]
 800aeaa:	2200      	movs	r2, #0
 800aeac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aeb0:	2300      	movs	r3, #0
}
 800aeb2:	4618      	mov	r0, r3
 800aeb4:	3714      	adds	r7, #20
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aebc:	4770      	bx	lr
 800aebe:	bf00      	nop
 800aec0:	40010000 	.word	0x40010000
 800aec4:	40000400 	.word	0x40000400
 800aec8:	40000800 	.word	0x40000800
 800aecc:	40000c00 	.word	0x40000c00
 800aed0:	40014000 	.word	0x40014000

0800aed4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800aed4:	b480      	push	{r7}
 800aed6:	b085      	sub	sp, #20
 800aed8:	af00      	add	r7, sp, #0
 800aeda:	6078      	str	r0, [r7, #4]
 800aedc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aee8:	2b01      	cmp	r3, #1
 800aeea:	d101      	bne.n	800aef0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800aeec:	2302      	movs	r3, #2
 800aeee:	e03d      	b.n	800af6c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2201      	movs	r2, #1
 800aef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800aefe:	683b      	ldr	r3, [r7, #0]
 800af00:	68db      	ldr	r3, [r3, #12]
 800af02:	4313      	orrs	r3, r2
 800af04:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800af06:	68fb      	ldr	r3, [r7, #12]
 800af08:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800af0c:	683b      	ldr	r3, [r7, #0]
 800af0e:	689b      	ldr	r3, [r3, #8]
 800af10:	4313      	orrs	r3, r2
 800af12:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800af1a:	683b      	ldr	r3, [r7, #0]
 800af1c:	685b      	ldr	r3, [r3, #4]
 800af1e:	4313      	orrs	r3, r2
 800af20:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800af22:	68fb      	ldr	r3, [r7, #12]
 800af24:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800af28:	683b      	ldr	r3, [r7, #0]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4313      	orrs	r3, r2
 800af2e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800af30:	68fb      	ldr	r3, [r7, #12]
 800af32:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af36:	683b      	ldr	r3, [r7, #0]
 800af38:	691b      	ldr	r3, [r3, #16]
 800af3a:	4313      	orrs	r3, r2
 800af3c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800af3e:	68fb      	ldr	r3, [r7, #12]
 800af40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	695b      	ldr	r3, [r3, #20]
 800af48:	4313      	orrs	r3, r2
 800af4a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	69db      	ldr	r3, [r3, #28]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	2200      	movs	r2, #0
 800af66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800af6a:	2300      	movs	r3, #0
}
 800af6c:	4618      	mov	r0, r3
 800af6e:	3714      	adds	r7, #20
 800af70:	46bd      	mov	sp, r7
 800af72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af76:	4770      	bx	lr

0800af78 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800af78:	b480      	push	{r7}
 800af7a:	b083      	sub	sp, #12
 800af7c:	af00      	add	r7, sp, #0
 800af7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800af80:	bf00      	nop
 800af82:	370c      	adds	r7, #12
 800af84:	46bd      	mov	sp, r7
 800af86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af8a:	4770      	bx	lr

0800af8c <HAL_TIMEx_CommutHalfCpltCallback>:
  * @brief  Hall commutation changed half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 800af8c:	b480      	push	{r7}
 800af8e:	b083      	sub	sp, #12
 800af90:	af00      	add	r7, sp, #0
 800af92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutHalfCpltCallback could be implemented in the user file
   */
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr

0800afa0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800afa0:	b480      	push	{r7}
 800afa2:	b083      	sub	sp, #12
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800afa8:	bf00      	nop
 800afaa:	370c      	adds	r7, #12
 800afac:	46bd      	mov	sp, r7
 800afae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afb2:	4770      	bx	lr

0800afb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d101      	bne.n	800afc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800afc2:	2301      	movs	r3, #1
 800afc4:	e04a      	b.n	800b05c <HAL_UART_Init+0xa8>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afcc:	b2db      	uxtb	r3, r3
 800afce:	2b00      	cmp	r3, #0
 800afd0:	d111      	bne.n	800aff6 <HAL_UART_Init+0x42>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2200      	movs	r2, #0
 800afd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800afda:	6878      	ldr	r0, [r7, #4]
 800afdc:	f000 fd72 	bl	800bac4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	d102      	bne.n	800afee <HAL_UART_Init+0x3a>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	4a1e      	ldr	r2, [pc, #120]	; (800b064 <HAL_UART_Init+0xb0>)
 800afec:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aff2:	6878      	ldr	r0, [r7, #4]
 800aff4:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2224      	movs	r2, #36	; 0x24
 800affa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	68da      	ldr	r2, [r3, #12]
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b00c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f001 f83c 	bl	800c08c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	691a      	ldr	r2, [r3, #16]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b022:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	681b      	ldr	r3, [r3, #0]
 800b028:	695a      	ldr	r2, [r3, #20]
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	681b      	ldr	r3, [r3, #0]
 800b02e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b032:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68da      	ldr	r2, [r3, #12]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b042:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	2200      	movs	r2, #0
 800b048:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	2220      	movs	r2, #32
 800b04e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	2220      	movs	r2, #32
 800b056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3708      	adds	r7, #8
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}
 800b064:	08004bc9 	.word	0x08004bc9

0800b068 <HAL_UART_RegisterCallback>:
  * @param  pCallback pointer to the Callback function
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_RegisterCallback(UART_HandleTypeDef *huart, HAL_UART_CallbackIDTypeDef CallbackID,
                                            pUART_CallbackTypeDef pCallback)
{
 800b068:	b480      	push	{r7}
 800b06a:	b087      	sub	sp, #28
 800b06c:	af00      	add	r7, sp, #0
 800b06e:	60f8      	str	r0, [r7, #12]
 800b070:	460b      	mov	r3, r1
 800b072:	607a      	str	r2, [r7, #4]
 800b074:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800b076:	2300      	movs	r3, #0
 800b078:	75fb      	strb	r3, [r7, #23]

  if (pCallback == NULL)
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d107      	bne.n	800b090 <HAL_UART_RegisterCallback+0x28>
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b084:	f043 0220 	orr.w	r2, r3, #32
 800b088:	68fb      	ldr	r3, [r7, #12]
 800b08a:	641a      	str	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800b08c:	2301      	movs	r3, #1
 800b08e:	e08c      	b.n	800b1aa <HAL_UART_RegisterCallback+0x142>
  }
  /* Process locked */
  __HAL_LOCK(huart);
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b096:	2b01      	cmp	r3, #1
 800b098:	d101      	bne.n	800b09e <HAL_UART_RegisterCallback+0x36>
 800b09a:	2302      	movs	r3, #2
 800b09c:	e085      	b.n	800b1aa <HAL_UART_RegisterCallback+0x142>
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->gState == HAL_UART_STATE_READY)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b0ac:	b2db      	uxtb	r3, r3
 800b0ae:	2b20      	cmp	r3, #32
 800b0b0:	d151      	bne.n	800b156 <HAL_UART_RegisterCallback+0xee>
  {
    switch (CallbackID)
 800b0b2:	7afb      	ldrb	r3, [r7, #11]
 800b0b4:	2b0c      	cmp	r3, #12
 800b0b6:	d845      	bhi.n	800b144 <HAL_UART_RegisterCallback+0xdc>
 800b0b8:	a201      	add	r2, pc, #4	; (adr r2, 800b0c0 <HAL_UART_RegisterCallback+0x58>)
 800b0ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0be:	bf00      	nop
 800b0c0:	0800b0f5 	.word	0x0800b0f5
 800b0c4:	0800b0fd 	.word	0x0800b0fd
 800b0c8:	0800b105 	.word	0x0800b105
 800b0cc:	0800b10d 	.word	0x0800b10d
 800b0d0:	0800b115 	.word	0x0800b115
 800b0d4:	0800b11d 	.word	0x0800b11d
 800b0d8:	0800b125 	.word	0x0800b125
 800b0dc:	0800b12d 	.word	0x0800b12d
 800b0e0:	0800b145 	.word	0x0800b145
 800b0e4:	0800b145 	.word	0x0800b145
 800b0e8:	0800b145 	.word	0x0800b145
 800b0ec:	0800b135 	.word	0x0800b135
 800b0f0:	0800b13d 	.word	0x0800b13d
    {
      case HAL_UART_TX_HALFCOMPLETE_CB_ID :
        huart->TxHalfCpltCallback = pCallback;
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	687a      	ldr	r2, [r7, #4]
 800b0f8:	645a      	str	r2, [r3, #68]	; 0x44
        break;
 800b0fa:	e051      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_TX_COMPLETE_CB_ID :
        huart->TxCpltCallback = pCallback;
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	687a      	ldr	r2, [r7, #4]
 800b100:	649a      	str	r2, [r3, #72]	; 0x48
        break;
 800b102:	e04d      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_HALFCOMPLETE_CB_ID :
        huart->RxHalfCpltCallback = pCallback;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	687a      	ldr	r2, [r7, #4]
 800b108:	64da      	str	r2, [r3, #76]	; 0x4c
        break;
 800b10a:	e049      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_RX_COMPLETE_CB_ID :
        huart->RxCpltCallback = pCallback;
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	687a      	ldr	r2, [r7, #4]
 800b110:	651a      	str	r2, [r3, #80]	; 0x50
        break;
 800b112:	e045      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ERROR_CB_ID :
        huart->ErrorCallback = pCallback;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	687a      	ldr	r2, [r7, #4]
 800b118:	655a      	str	r2, [r3, #84]	; 0x54
        break;
 800b11a:	e041      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_COMPLETE_CB_ID :
        huart->AbortCpltCallback = pCallback;
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	687a      	ldr	r2, [r7, #4]
 800b120:	659a      	str	r2, [r3, #88]	; 0x58
        break;
 800b122:	e03d      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_TRANSMIT_COMPLETE_CB_ID :
        huart->AbortTransmitCpltCallback = pCallback;
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	65da      	str	r2, [r3, #92]	; 0x5c
        break;
 800b12a:	e039      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_ABORT_RECEIVE_COMPLETE_CB_ID :
        huart->AbortReceiveCpltCallback = pCallback;
 800b12c:	68fb      	ldr	r3, [r7, #12]
 800b12e:	687a      	ldr	r2, [r7, #4]
 800b130:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b132:	e035      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	687a      	ldr	r2, [r7, #4]
 800b138:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b13a:	e031      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	687a      	ldr	r2, [r7, #4]
 800b140:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b142:	e02d      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b148:	f043 0220 	orr.w	r2, r3, #32
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b150:	2301      	movs	r3, #1
 800b152:	75fb      	strb	r3, [r7, #23]
        break;
 800b154:	e024      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else if (huart->gState == HAL_UART_STATE_RESET)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b15c:	b2db      	uxtb	r3, r3
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d116      	bne.n	800b190 <HAL_UART_RegisterCallback+0x128>
  {
    switch (CallbackID)
 800b162:	7afb      	ldrb	r3, [r7, #11]
 800b164:	2b0b      	cmp	r3, #11
 800b166:	d002      	beq.n	800b16e <HAL_UART_RegisterCallback+0x106>
 800b168:	2b0c      	cmp	r3, #12
 800b16a:	d004      	beq.n	800b176 <HAL_UART_RegisterCallback+0x10e>
 800b16c:	e007      	b.n	800b17e <HAL_UART_RegisterCallback+0x116>
    {
      case HAL_UART_MSPINIT_CB_ID :
        huart->MspInitCallback = pCallback;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	66da      	str	r2, [r3, #108]	; 0x6c
        break;
 800b174:	e014      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      case HAL_UART_MSPDEINIT_CB_ID :
        huart->MspDeInitCallback = pCallback;
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	671a      	str	r2, [r3, #112]	; 0x70
        break;
 800b17c:	e010      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>

      default :
        /* Update the error code */
        huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b182:	f043 0220 	orr.w	r2, r3, #32
 800b186:	68fb      	ldr	r3, [r7, #12]
 800b188:	641a      	str	r2, [r3, #64]	; 0x40

        /* Return error status */
        status =  HAL_ERROR;
 800b18a:	2301      	movs	r3, #1
 800b18c:	75fb      	strb	r3, [r7, #23]
        break;
 800b18e:	e007      	b.n	800b1a0 <HAL_UART_RegisterCallback+0x138>
    }
  }
  else
  {
    /* Update the error code */
    huart->ErrorCode |= HAL_UART_ERROR_INVALID_CALLBACK;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b194:	f043 0220 	orr.w	r2, r3, #32
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Return error status */
    status =  HAL_ERROR;
 800b19c:	2301      	movs	r3, #1
 800b19e:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(huart);
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	2200      	movs	r2, #0
 800b1a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1aa:	4618      	mov	r0, r3
 800b1ac:	371c      	adds	r7, #28
 800b1ae:	46bd      	mov	sp, r7
 800b1b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1b4:	4770      	bx	lr
 800b1b6:	bf00      	nop

0800b1b8 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b1b8:	b480      	push	{r7}
 800b1ba:	b085      	sub	sp, #20
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	60f8      	str	r0, [r7, #12]
 800b1c0:	60b9      	str	r1, [r7, #8]
 800b1c2:	4613      	mov	r3, r2
 800b1c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b1cc:	b2db      	uxtb	r3, r3
 800b1ce:	2b20      	cmp	r3, #32
 800b1d0:	d130      	bne.n	800b234 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b1d2:	68bb      	ldr	r3, [r7, #8]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d002      	beq.n	800b1de <HAL_UART_Transmit_IT+0x26>
 800b1d8:	88fb      	ldrh	r3, [r7, #6]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d101      	bne.n	800b1e2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800b1de:	2301      	movs	r3, #1
 800b1e0:	e029      	b.n	800b236 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d101      	bne.n	800b1f0 <HAL_UART_Transmit_IT+0x38>
 800b1ec:	2302      	movs	r3, #2
 800b1ee:	e022      	b.n	800b236 <HAL_UART_Transmit_IT+0x7e>
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	2201      	movs	r2, #1
 800b1f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b1f8:	68fb      	ldr	r3, [r7, #12]
 800b1fa:	68ba      	ldr	r2, [r7, #8]
 800b1fc:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b1fe:	68fb      	ldr	r3, [r7, #12]
 800b200:	88fa      	ldrh	r2, [r7, #6]
 800b202:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b204:	68fb      	ldr	r3, [r7, #12]
 800b206:	88fa      	ldrh	r2, [r7, #6]
 800b208:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	2221      	movs	r2, #33	; 0x21
 800b214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	2200      	movs	r2, #0
 800b21c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	68da      	ldr	r2, [r3, #12]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b22e:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	e000      	b.n	800b236 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800b234:	2302      	movs	r3, #2
  }
}
 800b236:	4618      	mov	r0, r3
 800b238:	3714      	adds	r7, #20
 800b23a:	46bd      	mov	sp, r7
 800b23c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b240:	4770      	bx	lr

0800b242 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b242:	b580      	push	{r7, lr}
 800b244:	b084      	sub	sp, #16
 800b246:	af00      	add	r7, sp, #0
 800b248:	60f8      	str	r0, [r7, #12]
 800b24a:	60b9      	str	r1, [r7, #8]
 800b24c:	4613      	mov	r3, r2
 800b24e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b20      	cmp	r3, #32
 800b25a:	d11d      	bne.n	800b298 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800b25c:	68bb      	ldr	r3, [r7, #8]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d002      	beq.n	800b268 <HAL_UART_Receive_IT+0x26>
 800b262:	88fb      	ldrh	r3, [r7, #6]
 800b264:	2b00      	cmp	r3, #0
 800b266:	d101      	bne.n	800b26c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800b268:	2301      	movs	r3, #1
 800b26a:	e016      	b.n	800b29a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b272:	2b01      	cmp	r3, #1
 800b274:	d101      	bne.n	800b27a <HAL_UART_Receive_IT+0x38>
 800b276:	2302      	movs	r3, #2
 800b278:	e00f      	b.n	800b29a <HAL_UART_Receive_IT+0x58>
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	2201      	movs	r2, #1
 800b27e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	2200      	movs	r2, #0
 800b286:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800b288:	88fb      	ldrh	r3, [r7, #6]
 800b28a:	461a      	mov	r2, r3
 800b28c:	68b9      	ldr	r1, [r7, #8]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fcf8 	bl	800bc84 <UART_Start_Receive_IT>
 800b294:	4603      	mov	r3, r0
 800b296:	e000      	b.n	800b29a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800b298:	2302      	movs	r3, #2
  }
}
 800b29a:	4618      	mov	r0, r3
 800b29c:	3710      	adds	r7, #16
 800b29e:	46bd      	mov	sp, r7
 800b2a0:	bd80      	pop	{r7, pc}
	...

0800b2a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08c      	sub	sp, #48	; 0x30
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	4613      	mov	r3, r2
 800b2b0:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2b8:	b2db      	uxtb	r3, r3
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d165      	bne.n	800b38a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_UART_Transmit_DMA+0x26>
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e05e      	b.n	800b38c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b2d4:	2b01      	cmp	r3, #1
 800b2d6:	d101      	bne.n	800b2dc <HAL_UART_Transmit_DMA+0x38>
 800b2d8:	2302      	movs	r3, #2
 800b2da:	e057      	b.n	800b38c <HAL_UART_Transmit_DMA+0xe8>
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2201      	movs	r2, #1
 800b2e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	88fa      	ldrh	r2, [r7, #6]
 800b2ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	88fa      	ldrh	r2, [r7, #6]
 800b2f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	2221      	movs	r2, #33	; 0x21
 800b300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b308:	4a22      	ldr	r2, [pc, #136]	; (800b394 <HAL_UART_Transmit_DMA+0xf0>)
 800b30a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b310:	4a21      	ldr	r2, [pc, #132]	; (800b398 <HAL_UART_Transmit_DMA+0xf4>)
 800b312:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800b314:	68fb      	ldr	r3, [r7, #12]
 800b316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b318:	4a20      	ldr	r2, [pc, #128]	; (800b39c <HAL_UART_Transmit_DMA+0xf8>)
 800b31a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b320:	2200      	movs	r2, #0
 800b322:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800b324:	f107 0308 	add.w	r3, r7, #8
 800b328:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800b32a:	68fb      	ldr	r3, [r7, #12]
 800b32c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800b32e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b330:	6819      	ldr	r1, [r3, #0]
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3304      	adds	r3, #4
 800b338:	461a      	mov	r2, r3
 800b33a:	88fb      	ldrh	r3, [r7, #6]
 800b33c:	f7fa fd14 	bl	8005d68 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b348:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	2200      	movs	r2, #0
 800b34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	681b      	ldr	r3, [r3, #0]
 800b356:	3314      	adds	r3, #20
 800b358:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b35a:	69bb      	ldr	r3, [r7, #24]
 800b35c:	e853 3f00 	ldrex	r3, [r3]
 800b360:	617b      	str	r3, [r7, #20]
   return(result);
 800b362:	697b      	ldr	r3, [r7, #20]
 800b364:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b368:	62bb      	str	r3, [r7, #40]	; 0x28
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	3314      	adds	r3, #20
 800b370:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b372:	627a      	str	r2, [r7, #36]	; 0x24
 800b374:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b376:	6a39      	ldr	r1, [r7, #32]
 800b378:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b37a:	e841 2300 	strex	r3, r2, [r1]
 800b37e:	61fb      	str	r3, [r7, #28]
   return(result);
 800b380:	69fb      	ldr	r3, [r7, #28]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d1e5      	bne.n	800b352 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800b386:	2300      	movs	r3, #0
 800b388:	e000      	b.n	800b38c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800b38a:	2302      	movs	r3, #2
  }
}
 800b38c:	4618      	mov	r0, r3
 800b38e:	3730      	adds	r7, #48	; 0x30
 800b390:	46bd      	mov	sp, r7
 800b392:	bd80      	pop	{r7, pc}
 800b394:	0800bb35 	.word	0x0800bb35
 800b398:	0800bbd1 	.word	0x0800bbd1
 800b39c:	0800bbef 	.word	0x0800bbef

0800b3a0 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b09a      	sub	sp, #104	; 0x68
 800b3a4:	af00      	add	r7, sp, #0
 800b3a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	330c      	adds	r3, #12
 800b3ae:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b3b2:	e853 3f00 	ldrex	r3, [r3]
 800b3b6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800b3b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b3ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b3be:	667b      	str	r3, [r7, #100]	; 0x64
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	330c      	adds	r3, #12
 800b3c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800b3c8:	657a      	str	r2, [r7, #84]	; 0x54
 800b3ca:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b3cc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800b3ce:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800b3d0:	e841 2300 	strex	r3, r2, [r1]
 800b3d4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800b3d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b3d8:	2b00      	cmp	r3, #0
 800b3da:	d1e5      	bne.n	800b3a8 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	3314      	adds	r3, #20
 800b3e2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b3e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b3e6:	e853 3f00 	ldrex	r3, [r3]
 800b3ea:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ee:	f023 0301 	bic.w	r3, r3, #1
 800b3f2:	663b      	str	r3, [r7, #96]	; 0x60
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	3314      	adds	r3, #20
 800b3fa:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800b3fc:	643a      	str	r2, [r7, #64]	; 0x40
 800b3fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b400:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b402:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b404:	e841 2300 	strex	r3, r2, [r1]
 800b408:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d1e5      	bne.n	800b3dc <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b414:	2b01      	cmp	r3, #1
 800b416:	d119      	bne.n	800b44c <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	330c      	adds	r3, #12
 800b41e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b420:	6a3b      	ldr	r3, [r7, #32]
 800b422:	e853 3f00 	ldrex	r3, [r3]
 800b426:	61fb      	str	r3, [r7, #28]
   return(result);
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	f023 0310 	bic.w	r3, r3, #16
 800b42e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	330c      	adds	r3, #12
 800b436:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800b438:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b43a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b43c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b43e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b440:	e841 2300 	strex	r3, r2, [r1]
 800b444:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d1e5      	bne.n	800b418 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	695b      	ldr	r3, [r3, #20]
 800b452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b456:	2b40      	cmp	r3, #64	; 0x40
 800b458:	d136      	bne.n	800b4c8 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	3314      	adds	r3, #20
 800b460:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	e853 3f00 	ldrex	r3, [r3]
 800b468:	60bb      	str	r3, [r7, #8]
   return(result);
 800b46a:	68bb      	ldr	r3, [r7, #8]
 800b46c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b470:	65bb      	str	r3, [r7, #88]	; 0x58
 800b472:	687b      	ldr	r3, [r7, #4]
 800b474:	681b      	ldr	r3, [r3, #0]
 800b476:	3314      	adds	r3, #20
 800b478:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b47a:	61ba      	str	r2, [r7, #24]
 800b47c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b47e:	6979      	ldr	r1, [r7, #20]
 800b480:	69ba      	ldr	r2, [r7, #24]
 800b482:	e841 2300 	strex	r3, r2, [r1]
 800b486:	613b      	str	r3, [r7, #16]
   return(result);
 800b488:	693b      	ldr	r3, [r7, #16]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d1e5      	bne.n	800b45a <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b492:	2b00      	cmp	r3, #0
 800b494:	d018      	beq.n	800b4c8 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b49a:	2200      	movs	r2, #0
 800b49c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fa fcb8 	bl	8005e18 <HAL_DMA_Abort>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d00c      	beq.n	800b4c8 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	4618      	mov	r0, r3
 800b4b4:	f7fa feda 	bl	800626c <HAL_DMA_GetError>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	2b20      	cmp	r3, #32
 800b4bc:	d104      	bne.n	800b4c8 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800b4c4:	2303      	movs	r3, #3
 800b4c6:	e00a      	b.n	800b4de <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2200      	movs	r2, #0
 800b4cc:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	2220      	movs	r2, #32
 800b4d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b4d6:	687b      	ldr	r3, [r7, #4]
 800b4d8:	2200      	movs	r2, #0
 800b4da:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800b4dc:	2300      	movs	r3, #0
}
 800b4de:	4618      	mov	r0, r3
 800b4e0:	3768      	adds	r7, #104	; 0x68
 800b4e2:	46bd      	mov	sp, r7
 800b4e4:	bd80      	pop	{r7, pc}
	...

0800b4e8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b4e8:	b580      	push	{r7, lr}
 800b4ea:	b0ba      	sub	sp, #232	; 0xe8
 800b4ec:	af00      	add	r7, sp, #0
 800b4ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800b4f0:	687b      	ldr	r3, [r7, #4]
 800b4f2:	681b      	ldr	r3, [r3, #0]
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68db      	ldr	r3, [r3, #12]
 800b500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	695b      	ldr	r3, [r3, #20]
 800b50a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800b50e:	2300      	movs	r3, #0
 800b510:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800b514:	2300      	movs	r3, #0
 800b516:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800b51a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b51e:	f003 030f 	and.w	r3, r3, #15
 800b522:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800b526:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d10f      	bne.n	800b54e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b52e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b532:	f003 0320 	and.w	r3, r3, #32
 800b536:	2b00      	cmp	r3, #0
 800b538:	d009      	beq.n	800b54e <HAL_UART_IRQHandler+0x66>
 800b53a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b53e:	f003 0320 	and.w	r3, r3, #32
 800b542:	2b00      	cmp	r3, #0
 800b544:	d003      	beq.n	800b54e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800b546:	6878      	ldr	r0, [r7, #4]
 800b548:	f000 fce3 	bl	800bf12 <UART_Receive_IT>
      return;
 800b54c:	e25b      	b.n	800ba06 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800b54e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b552:	2b00      	cmp	r3, #0
 800b554:	f000 80e1 	beq.w	800b71a <HAL_UART_IRQHandler+0x232>
 800b558:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b55c:	f003 0301 	and.w	r3, r3, #1
 800b560:	2b00      	cmp	r3, #0
 800b562:	d106      	bne.n	800b572 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800b564:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b568:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	f000 80d4 	beq.w	800b71a <HAL_UART_IRQHandler+0x232>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800b572:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b576:	f003 0301 	and.w	r3, r3, #1
 800b57a:	2b00      	cmp	r3, #0
 800b57c:	d00b      	beq.n	800b596 <HAL_UART_IRQHandler+0xae>
 800b57e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b586:	2b00      	cmp	r3, #0
 800b588:	d005      	beq.n	800b596 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b58e:	f043 0201 	orr.w	r2, r3, #1
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b596:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b59a:	f003 0304 	and.w	r3, r3, #4
 800b59e:	2b00      	cmp	r3, #0
 800b5a0:	d00b      	beq.n	800b5ba <HAL_UART_IRQHandler+0xd2>
 800b5a2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5a6:	f003 0301 	and.w	r3, r3, #1
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d005      	beq.n	800b5ba <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5b2:	f043 0202 	orr.w	r2, r3, #2
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800b5ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5be:	f003 0302 	and.w	r3, r3, #2
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d00b      	beq.n	800b5de <HAL_UART_IRQHandler+0xf6>
 800b5c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5ca:	f003 0301 	and.w	r3, r3, #1
 800b5ce:	2b00      	cmp	r3, #0
 800b5d0:	d005      	beq.n	800b5de <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5d6:	f043 0204 	orr.w	r2, r3, #4
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800b5de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b5e2:	f003 0308 	and.w	r3, r3, #8
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	d011      	beq.n	800b60e <HAL_UART_IRQHandler+0x126>
 800b5ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b5ee:	f003 0320 	and.w	r3, r3, #32
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d105      	bne.n	800b602 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800b5f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b5fa:	f003 0301 	and.w	r3, r3, #1
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d005      	beq.n	800b60e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b606:	f043 0208 	orr.w	r2, r3, #8
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b612:	2b00      	cmp	r3, #0
 800b614:	f000 81f2 	beq.w	800b9fc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800b618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b61c:	f003 0320 	and.w	r3, r3, #32
 800b620:	2b00      	cmp	r3, #0
 800b622:	d008      	beq.n	800b636 <HAL_UART_IRQHandler+0x14e>
 800b624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b628:	f003 0320 	and.w	r3, r3, #32
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d002      	beq.n	800b636 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	f000 fc6e 	bl	800bf12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	681b      	ldr	r3, [r3, #0]
 800b63a:	695b      	ldr	r3, [r3, #20]
 800b63c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b640:	2b40      	cmp	r3, #64	; 0x40
 800b642:	bf0c      	ite	eq
 800b644:	2301      	moveq	r3, #1
 800b646:	2300      	movne	r3, #0
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b652:	f003 0308 	and.w	r3, r3, #8
 800b656:	2b00      	cmp	r3, #0
 800b658:	d103      	bne.n	800b662 <HAL_UART_IRQHandler+0x17a>
 800b65a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d051      	beq.n	800b706 <HAL_UART_IRQHandler+0x21e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b662:	6878      	ldr	r0, [r7, #4]
 800b664:	f000 fb74 	bl	800bd50 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	695b      	ldr	r3, [r3, #20]
 800b66e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b672:	2b40      	cmp	r3, #64	; 0x40
 800b674:	d142      	bne.n	800b6fc <HAL_UART_IRQHandler+0x214>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	3314      	adds	r3, #20
 800b67c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b680:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b684:	e853 3f00 	ldrex	r3, [r3]
 800b688:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800b68c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b690:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b694:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	3314      	adds	r3, #20
 800b69e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b6a2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800b6a6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b6aa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800b6ae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800b6b2:	e841 2300 	strex	r3, r2, [r1]
 800b6b6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800b6ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b6be:	2b00      	cmp	r3, #0
 800b6c0:	d1d9      	bne.n	800b676 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d013      	beq.n	800b6f2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b6ca:	687b      	ldr	r3, [r7, #4]
 800b6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ce:	4a7f      	ldr	r2, [pc, #508]	; (800b8cc <HAL_UART_IRQHandler+0x3e4>)
 800b6d0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f7fa fc0e 	bl	8005ef8 <HAL_DMA_Abort_IT>
 800b6dc:	4603      	mov	r3, r0
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d019      	beq.n	800b716 <HAL_UART_IRQHandler+0x22e>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6e8:	687a      	ldr	r2, [r7, #4]
 800b6ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b6ec:	4610      	mov	r0, r2
 800b6ee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6f0:	e011      	b.n	800b716 <HAL_UART_IRQHandler+0x22e>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6fa:	e00c      	b.n	800b716 <HAL_UART_IRQHandler+0x22e>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b700:	6878      	ldr	r0, [r7, #4]
 800b702:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b704:	e007      	b.n	800b716 <HAL_UART_IRQHandler+0x22e>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	2200      	movs	r2, #0
 800b712:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800b714:	e172      	b.n	800b9fc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b716:	bf00      	nop
    return;
 800b718:	e170      	b.n	800b9fc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b71e:	2b01      	cmp	r3, #1
 800b720:	f040 814c 	bne.w	800b9bc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800b724:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b728:	f003 0310 	and.w	r3, r3, #16
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	f000 8145 	beq.w	800b9bc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800b732:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b736:	f003 0310 	and.w	r3, r3, #16
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	f000 813e 	beq.w	800b9bc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800b740:	2300      	movs	r3, #0
 800b742:	60bb      	str	r3, [r7, #8]
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	60bb      	str	r3, [r7, #8]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	685b      	ldr	r3, [r3, #4]
 800b752:	60bb      	str	r3, [r7, #8]
 800b754:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	695b      	ldr	r3, [r3, #20]
 800b75c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b760:	2b40      	cmp	r3, #64	; 0x40
 800b762:	f040 80b5 	bne.w	800b8d0 <HAL_UART_IRQHandler+0x3e8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	685b      	ldr	r3, [r3, #4]
 800b76e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b772:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800b776:	2b00      	cmp	r3, #0
 800b778:	f000 8142 	beq.w	800ba00 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800b780:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b784:	429a      	cmp	r2, r3
 800b786:	f080 813b 	bcs.w	800ba00 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800b790:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b796:	69db      	ldr	r3, [r3, #28]
 800b798:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b79c:	f000 8088 	beq.w	800b8b0 <HAL_UART_IRQHandler+0x3c8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	330c      	adds	r3, #12
 800b7a6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7aa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b7ae:	e853 3f00 	ldrex	r3, [r3]
 800b7b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800b7b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b7ba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b7be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	330c      	adds	r3, #12
 800b7c8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800b7cc:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800b7d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7d4:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800b7d8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800b7dc:	e841 2300 	strex	r3, r2, [r1]
 800b7e0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800b7e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b7e8:	2b00      	cmp	r3, #0
 800b7ea:	d1d9      	bne.n	800b7a0 <HAL_UART_IRQHandler+0x2b8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681b      	ldr	r3, [r3, #0]
 800b7f0:	3314      	adds	r3, #20
 800b7f2:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800b7f6:	e853 3f00 	ldrex	r3, [r3]
 800b7fa:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800b7fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800b7fe:	f023 0301 	bic.w	r3, r3, #1
 800b802:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	3314      	adds	r3, #20
 800b80c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800b810:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800b814:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b816:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800b818:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800b81c:	e841 2300 	strex	r3, r2, [r1]
 800b820:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800b822:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800b824:	2b00      	cmp	r3, #0
 800b826:	d1e1      	bne.n	800b7ec <HAL_UART_IRQHandler+0x304>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	3314      	adds	r3, #20
 800b82e:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b830:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800b832:	e853 3f00 	ldrex	r3, [r3]
 800b836:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800b838:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b83a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b83e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	3314      	adds	r3, #20
 800b848:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800b84c:	66fa      	str	r2, [r7, #108]	; 0x6c
 800b84e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b850:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800b852:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800b854:	e841 2300 	strex	r3, r2, [r1]
 800b858:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800b85a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800b85c:	2b00      	cmp	r3, #0
 800b85e:	d1e3      	bne.n	800b828 <HAL_UART_IRQHandler+0x340>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2220      	movs	r2, #32
 800b864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2200      	movs	r2, #0
 800b86c:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	330c      	adds	r3, #12
 800b874:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b876:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b878:	e853 3f00 	ldrex	r3, [r3]
 800b87c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800b87e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b880:	f023 0310 	bic.w	r3, r3, #16
 800b884:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	681b      	ldr	r3, [r3, #0]
 800b88c:	330c      	adds	r3, #12
 800b88e:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800b892:	65ba      	str	r2, [r7, #88]	; 0x58
 800b894:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b896:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800b898:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800b89a:	e841 2300 	strex	r3, r2, [r1]
 800b89e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800b8a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d1e3      	bne.n	800b86e <HAL_UART_IRQHandler+0x386>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8aa:	4618      	mov	r0, r3
 800b8ac:	f7fa fab4 	bl	8005e18 <HAL_DMA_Abort>
        }
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b8b4:	687a      	ldr	r2, [r7, #4]
 800b8b6:	8d91      	ldrh	r1, [r2, #44]	; 0x2c
 800b8b8:	687a      	ldr	r2, [r7, #4]
 800b8ba:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
 800b8bc:	b292      	uxth	r2, r2
 800b8be:	1a8a      	subs	r2, r1, r2
 800b8c0:	b292      	uxth	r2, r2
 800b8c2:	4611      	mov	r1, r2
 800b8c4:	6878      	ldr	r0, [r7, #4]
 800b8c6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b8c8:	e09a      	b.n	800ba00 <HAL_UART_IRQHandler+0x518>
 800b8ca:	bf00      	nop
 800b8cc:	0800be17 	.word	0x0800be17
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8d8:	b29b      	uxth	r3, r3
 800b8da:	1ad3      	subs	r3, r2, r3
 800b8dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f000 808c 	beq.w	800ba04 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800b8ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800b8f0:	2b00      	cmp	r3, #0
 800b8f2:	f000 8087 	beq.w	800ba04 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	330c      	adds	r3, #12
 800b8fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b900:	e853 3f00 	ldrex	r3, [r3]
 800b904:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800b906:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b908:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b90c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	330c      	adds	r3, #12
 800b916:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b91a:	647a      	str	r2, [r7, #68]	; 0x44
 800b91c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b91e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800b920:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b922:	e841 2300 	strex	r3, r2, [r1]
 800b926:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800b928:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d1e3      	bne.n	800b8f6 <HAL_UART_IRQHandler+0x40e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	3314      	adds	r3, #20
 800b934:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	623b      	str	r3, [r7, #32]
   return(result);
 800b93e:	6a3b      	ldr	r3, [r7, #32]
 800b940:	f023 0301 	bic.w	r3, r3, #1
 800b944:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	3314      	adds	r3, #20
 800b94e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b952:	633a      	str	r2, [r7, #48]	; 0x30
 800b954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b95a:	e841 2300 	strex	r3, r2, [r1]
 800b95e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b962:	2b00      	cmp	r3, #0
 800b964:	d1e3      	bne.n	800b92e <HAL_UART_IRQHandler+0x446>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2220      	movs	r2, #32
 800b96a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	2200      	movs	r2, #0
 800b972:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	330c      	adds	r3, #12
 800b97a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b97c:	693b      	ldr	r3, [r7, #16]
 800b97e:	e853 3f00 	ldrex	r3, [r3]
 800b982:	60fb      	str	r3, [r7, #12]
   return(result);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	f023 0310 	bic.w	r3, r3, #16
 800b98a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	330c      	adds	r3, #12
 800b994:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b998:	61fa      	str	r2, [r7, #28]
 800b99a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b99c:	69b9      	ldr	r1, [r7, #24]
 800b99e:	69fa      	ldr	r2, [r7, #28]
 800b9a0:	e841 2300 	strex	r3, r2, [r1]
 800b9a4:	617b      	str	r3, [r7, #20]
   return(result);
 800b9a6:	697b      	ldr	r3, [r7, #20]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d1e3      	bne.n	800b974 <HAL_UART_IRQHandler+0x48c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b9b0:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 800b9b4:	4611      	mov	r1, r2
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800b9ba:	e023      	b.n	800ba04 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800b9bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d009      	beq.n	800b9dc <HAL_UART_IRQHandler+0x4f4>
 800b9c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d003      	beq.n	800b9dc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800b9d4:	6878      	ldr	r0, [r7, #4]
 800b9d6:	f000 fa33 	bl	800be40 <UART_Transmit_IT>
    return;
 800b9da:	e014      	b.n	800ba06 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800b9dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b9e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d00e      	beq.n	800ba06 <HAL_UART_IRQHandler+0x51e>
 800b9e8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800b9ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f0:	2b00      	cmp	r3, #0
 800b9f2:	d008      	beq.n	800ba06 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800b9f4:	6878      	ldr	r0, [r7, #4]
 800b9f6:	f000 fa73 	bl	800bee0 <UART_EndTransmit_IT>
    return;
 800b9fa:	e004      	b.n	800ba06 <HAL_UART_IRQHandler+0x51e>
    return;
 800b9fc:	bf00      	nop
 800b9fe:	e002      	b.n	800ba06 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba00:	bf00      	nop
 800ba02:	e000      	b.n	800ba06 <HAL_UART_IRQHandler+0x51e>
      return;
 800ba04:	bf00      	nop
  }
}
 800ba06:	37e8      	adds	r7, #232	; 0xe8
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	bd80      	pop	{r7, pc}

0800ba0c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b083      	sub	sp, #12
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800ba14:	bf00      	nop
 800ba16:	370c      	adds	r7, #12
 800ba18:	46bd      	mov	sp, r7
 800ba1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1e:	4770      	bx	lr

0800ba20 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba20:	b480      	push	{r7}
 800ba22:	b083      	sub	sp, #12
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 800ba28:	bf00      	nop
 800ba2a:	370c      	adds	r7, #12
 800ba2c:	46bd      	mov	sp, r7
 800ba2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba32:	4770      	bx	lr

0800ba34 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800ba34:	b480      	push	{r7}
 800ba36:	b083      	sub	sp, #12
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800ba3c:	bf00      	nop
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr

0800ba5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ba5c:	b480      	push	{r7}
 800ba5e:	b083      	sub	sp, #12
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800ba64:	bf00      	nop
 800ba66:	370c      	adds	r7, #12
 800ba68:	46bd      	mov	sp, r7
 800ba6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6e:	4770      	bx	lr

0800ba70 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800ba70:	b480      	push	{r7}
 800ba72:	b083      	sub	sp, #12
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800ba78:	bf00      	nop
 800ba7a:	370c      	adds	r7, #12
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr

0800ba84 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b083      	sub	sp, #12
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800ba8c:	bf00      	nop
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr

0800ba98 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800ba98:	b480      	push	{r7}
 800ba9a:	b083      	sub	sp, #12
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800baa0:	bf00      	nop
 800baa2:	370c      	adds	r7, #12
 800baa4:	46bd      	mov	sp, r7
 800baa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baaa:	4770      	bx	lr

0800baac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800baac:	b480      	push	{r7}
 800baae:	b083      	sub	sp, #12
 800bab0:	af00      	add	r7, sp, #0
 800bab2:	6078      	str	r0, [r7, #4]
 800bab4:	460b      	mov	r3, r1
 800bab6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800bab8:	bf00      	nop
 800baba:	370c      	adds	r7, #12
 800babc:	46bd      	mov	sp, r7
 800babe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bac2:	4770      	bx	lr

0800bac4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b083      	sub	sp, #12
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	4a10      	ldr	r2, [pc, #64]	; (800bb10 <UART_InitCallbacksToDefault+0x4c>)
 800bad0:	645a      	str	r2, [r3, #68]	; 0x44
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	4a0f      	ldr	r2, [pc, #60]	; (800bb14 <UART_InitCallbacksToDefault+0x50>)
 800bad6:	649a      	str	r2, [r3, #72]	; 0x48
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	4a0f      	ldr	r2, [pc, #60]	; (800bb18 <UART_InitCallbacksToDefault+0x54>)
 800badc:	64da      	str	r2, [r3, #76]	; 0x4c
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	4a0e      	ldr	r2, [pc, #56]	; (800bb1c <UART_InitCallbacksToDefault+0x58>)
 800bae2:	651a      	str	r2, [r3, #80]	; 0x50
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	4a0e      	ldr	r2, [pc, #56]	; (800bb20 <UART_InitCallbacksToDefault+0x5c>)
 800bae8:	655a      	str	r2, [r3, #84]	; 0x54
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	4a0d      	ldr	r2, [pc, #52]	; (800bb24 <UART_InitCallbacksToDefault+0x60>)
 800baee:	659a      	str	r2, [r3, #88]	; 0x58
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800baf0:	687b      	ldr	r3, [r7, #4]
 800baf2:	4a0d      	ldr	r2, [pc, #52]	; (800bb28 <UART_InitCallbacksToDefault+0x64>)
 800baf4:	65da      	str	r2, [r3, #92]	; 0x5c
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a0c      	ldr	r2, [pc, #48]	; (800bb2c <UART_InitCallbacksToDefault+0x68>)
 800bafa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	4a0c      	ldr	r2, [pc, #48]	; (800bb30 <UART_InitCallbacksToDefault+0x6c>)
 800bb00:	669a      	str	r2, [r3, #104]	; 0x68

}
 800bb02:	bf00      	nop
 800bb04:	370c      	adds	r7, #12
 800bb06:	46bd      	mov	sp, r7
 800bb08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb0c:	4770      	bx	lr
 800bb0e:	bf00      	nop
 800bb10:	0800ba21 	.word	0x0800ba21
 800bb14:	0800ba0d 	.word	0x0800ba0d
 800bb18:	0800ba49 	.word	0x0800ba49
 800bb1c:	0800ba35 	.word	0x0800ba35
 800bb20:	0800ba5d 	.word	0x0800ba5d
 800bb24:	0800ba71 	.word	0x0800ba71
 800bb28:	0800ba85 	.word	0x0800ba85
 800bb2c:	0800ba99 	.word	0x0800ba99
 800bb30:	0800baad 	.word	0x0800baad

0800bb34 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b090      	sub	sp, #64	; 0x40
 800bb38:	af00      	add	r7, sp, #0
 800bb3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bb40:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d137      	bne.n	800bbc0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800bb50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb52:	2200      	movs	r2, #0
 800bb54:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bb56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	3314      	adds	r3, #20
 800bb5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb60:	e853 3f00 	ldrex	r3, [r3]
 800bb64:	623b      	str	r3, [r7, #32]
   return(result);
 800bb66:	6a3b      	ldr	r3, [r7, #32]
 800bb68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bb6c:	63bb      	str	r3, [r7, #56]	; 0x38
 800bb6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	3314      	adds	r3, #20
 800bb74:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800bb76:	633a      	str	r2, [r7, #48]	; 0x30
 800bb78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bb7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb7e:	e841 2300 	strex	r3, r2, [r1]
 800bb82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800bb84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d1e5      	bne.n	800bb56 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	330c      	adds	r3, #12
 800bb90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb92:	693b      	ldr	r3, [r7, #16]
 800bb94:	e853 3f00 	ldrex	r3, [r3]
 800bb98:	60fb      	str	r3, [r7, #12]
   return(result);
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bba0:	637b      	str	r3, [r7, #52]	; 0x34
 800bba2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	330c      	adds	r3, #12
 800bba8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbaa:	61fa      	str	r2, [r7, #28]
 800bbac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbae:	69b9      	ldr	r1, [r7, #24]
 800bbb0:	69fa      	ldr	r2, [r7, #28]
 800bbb2:	e841 2300 	strex	r3, r2, [r1]
 800bbb6:	617b      	str	r3, [r7, #20]
   return(result);
 800bbb8:	697b      	ldr	r3, [r7, #20]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	d1e5      	bne.n	800bb8a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bbbe:	e003      	b.n	800bbc8 <UART_DMATransmitCplt+0x94>
    huart->TxCpltCallback(huart);
 800bbc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bbc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bbc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800bbc6:	4798      	blx	r3
}
 800bbc8:	bf00      	nop
 800bbca:	3740      	adds	r7, #64	; 0x40
 800bbcc:	46bd      	mov	sp, r7
 800bbce:	bd80      	pop	{r7, pc}

0800bbd0 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	b084      	sub	sp, #16
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbdc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bbde:	68fb      	ldr	r3, [r7, #12]
 800bbe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bbe2:	68f8      	ldr	r0, [r7, #12]
 800bbe4:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbe6:	bf00      	nop
 800bbe8:	3710      	adds	r7, #16
 800bbea:	46bd      	mov	sp, r7
 800bbec:	bd80      	pop	{r7, pc}

0800bbee <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800bbee:	b580      	push	{r7, lr}
 800bbf0:	b084      	sub	sp, #16
 800bbf2:	af00      	add	r7, sp, #0
 800bbf4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800bbf6:	2300      	movs	r3, #0
 800bbf8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bbfe:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800bc00:	68bb      	ldr	r3, [r7, #8]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	695b      	ldr	r3, [r3, #20]
 800bc06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc0a:	2b80      	cmp	r3, #128	; 0x80
 800bc0c:	bf0c      	ite	eq
 800bc0e:	2301      	moveq	r3, #1
 800bc10:	2300      	movne	r3, #0
 800bc12:	b2db      	uxtb	r3, r3
 800bc14:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800bc16:	68bb      	ldr	r3, [r7, #8]
 800bc18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bc1c:	b2db      	uxtb	r3, r3
 800bc1e:	2b21      	cmp	r3, #33	; 0x21
 800bc20:	d108      	bne.n	800bc34 <UART_DMAError+0x46>
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d005      	beq.n	800bc34 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800bc28:	68bb      	ldr	r3, [r7, #8]
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800bc2e:	68b8      	ldr	r0, [r7, #8]
 800bc30:	f000 f866 	bl	800bd00 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800bc34:	68bb      	ldr	r3, [r7, #8]
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	695b      	ldr	r3, [r3, #20]
 800bc3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc3e:	2b40      	cmp	r3, #64	; 0x40
 800bc40:	bf0c      	ite	eq
 800bc42:	2301      	moveq	r3, #1
 800bc44:	2300      	movne	r3, #0
 800bc46:	b2db      	uxtb	r3, r3
 800bc48:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800bc4a:	68bb      	ldr	r3, [r7, #8]
 800bc4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bc50:	b2db      	uxtb	r3, r3
 800bc52:	2b22      	cmp	r3, #34	; 0x22
 800bc54:	d108      	bne.n	800bc68 <UART_DMAError+0x7a>
 800bc56:	68fb      	ldr	r3, [r7, #12]
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	d005      	beq.n	800bc68 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800bc5c:	68bb      	ldr	r3, [r7, #8]
 800bc5e:	2200      	movs	r2, #0
 800bc60:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800bc62:	68b8      	ldr	r0, [r7, #8]
 800bc64:	f000 f874 	bl	800bd50 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800bc68:	68bb      	ldr	r3, [r7, #8]
 800bc6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc6c:	f043 0210 	orr.w	r2, r3, #16
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800bc74:	68bb      	ldr	r3, [r7, #8]
 800bc76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bc78:	68b8      	ldr	r0, [r7, #8]
 800bc7a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bc7c:	bf00      	nop
 800bc7e:	3710      	adds	r7, #16
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	60f8      	str	r0, [r7, #12]
 800bc8c:	60b9      	str	r1, [r7, #8]
 800bc8e:	4613      	mov	r3, r2
 800bc90:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	68ba      	ldr	r2, [r7, #8]
 800bc96:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	88fa      	ldrh	r2, [r7, #6]
 800bc9c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	88fa      	ldrh	r2, [r7, #6]
 800bca2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	2200      	movs	r2, #0
 800bca8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	2222      	movs	r2, #34	; 0x22
 800bcae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	691b      	ldr	r3, [r3, #16]
 800bcbe:	2b00      	cmp	r3, #0
 800bcc0:	d007      	beq.n	800bcd2 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	68da      	ldr	r2, [r3, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800bcd0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	681b      	ldr	r3, [r3, #0]
 800bcd6:	695a      	ldr	r2, [r3, #20]
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	f042 0201 	orr.w	r2, r2, #1
 800bce0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68da      	ldr	r2, [r3, #12]
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f042 0220 	orr.w	r2, r2, #32
 800bcf0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800bcf2:	2300      	movs	r3, #0
}
 800bcf4:	4618      	mov	r0, r3
 800bcf6:	3714      	adds	r7, #20
 800bcf8:	46bd      	mov	sp, r7
 800bcfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfe:	4770      	bx	lr

0800bd00 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bd00:	b480      	push	{r7}
 800bd02:	b089      	sub	sp, #36	; 0x24
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bd08:	687b      	ldr	r3, [r7, #4]
 800bd0a:	681b      	ldr	r3, [r3, #0]
 800bd0c:	330c      	adds	r3, #12
 800bd0e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	e853 3f00 	ldrex	r3, [r3]
 800bd16:	60bb      	str	r3, [r7, #8]
   return(result);
 800bd18:	68bb      	ldr	r3, [r7, #8]
 800bd1a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800bd1e:	61fb      	str	r3, [r7, #28]
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	330c      	adds	r3, #12
 800bd26:	69fa      	ldr	r2, [r7, #28]
 800bd28:	61ba      	str	r2, [r7, #24]
 800bd2a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd2c:	6979      	ldr	r1, [r7, #20]
 800bd2e:	69ba      	ldr	r2, [r7, #24]
 800bd30:	e841 2300 	strex	r3, r2, [r1]
 800bd34:	613b      	str	r3, [r7, #16]
   return(result);
 800bd36:	693b      	ldr	r3, [r7, #16]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d1e5      	bne.n	800bd08 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2220      	movs	r2, #32
 800bd40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800bd44:	bf00      	nop
 800bd46:	3724      	adds	r7, #36	; 0x24
 800bd48:	46bd      	mov	sp, r7
 800bd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4e:	4770      	bx	lr

0800bd50 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b095      	sub	sp, #84	; 0x54
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	330c      	adds	r3, #12
 800bd5e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd62:	e853 3f00 	ldrex	r3, [r3]
 800bd66:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800bd6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	330c      	adds	r3, #12
 800bd76:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800bd78:	643a      	str	r2, [r7, #64]	; 0x40
 800bd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd7c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800bd7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bd80:	e841 2300 	strex	r3, r2, [r1]
 800bd84:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800bd86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d1e5      	bne.n	800bd58 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd8c:	687b      	ldr	r3, [r7, #4]
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	3314      	adds	r3, #20
 800bd92:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	e853 3f00 	ldrex	r3, [r3]
 800bd9a:	61fb      	str	r3, [r7, #28]
   return(result);
 800bd9c:	69fb      	ldr	r3, [r7, #28]
 800bd9e:	f023 0301 	bic.w	r3, r3, #1
 800bda2:	64bb      	str	r3, [r7, #72]	; 0x48
 800bda4:	687b      	ldr	r3, [r7, #4]
 800bda6:	681b      	ldr	r3, [r3, #0]
 800bda8:	3314      	adds	r3, #20
 800bdaa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800bdac:	62fa      	str	r2, [r7, #44]	; 0x2c
 800bdae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdb0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800bdb2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdb4:	e841 2300 	strex	r3, r2, [r1]
 800bdb8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bdba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbc:	2b00      	cmp	r3, #0
 800bdbe:	d1e5      	bne.n	800bd8c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bdc4:	2b01      	cmp	r3, #1
 800bdc6:	d119      	bne.n	800bdfc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	330c      	adds	r3, #12
 800bdce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd0:	68fb      	ldr	r3, [r7, #12]
 800bdd2:	e853 3f00 	ldrex	r3, [r3]
 800bdd6:	60bb      	str	r3, [r7, #8]
   return(result);
 800bdd8:	68bb      	ldr	r3, [r7, #8]
 800bdda:	f023 0310 	bic.w	r3, r3, #16
 800bdde:	647b      	str	r3, [r7, #68]	; 0x44
 800bde0:	687b      	ldr	r3, [r7, #4]
 800bde2:	681b      	ldr	r3, [r3, #0]
 800bde4:	330c      	adds	r3, #12
 800bde6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bde8:	61ba      	str	r2, [r7, #24]
 800bdea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdec:	6979      	ldr	r1, [r7, #20]
 800bdee:	69ba      	ldr	r2, [r7, #24]
 800bdf0:	e841 2300 	strex	r3, r2, [r1]
 800bdf4:	613b      	str	r3, [r7, #16]
   return(result);
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d1e5      	bne.n	800bdc8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2220      	movs	r2, #32
 800be00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	2200      	movs	r2, #0
 800be08:	631a      	str	r2, [r3, #48]	; 0x30
}
 800be0a:	bf00      	nop
 800be0c:	3754      	adds	r7, #84	; 0x54
 800be0e:	46bd      	mov	sp, r7
 800be10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be14:	4770      	bx	lr

0800be16 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800be16:	b580      	push	{r7, lr}
 800be18:	b084      	sub	sp, #16
 800be1a:	af00      	add	r7, sp, #0
 800be1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	2200      	movs	r2, #0
 800be28:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	2200      	movs	r2, #0
 800be2e:	84da      	strh	r2, [r3, #38]	; 0x26

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be34:	68f8      	ldr	r0, [r7, #12]
 800be36:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800be38:	bf00      	nop
 800be3a:	3710      	adds	r7, #16
 800be3c:	46bd      	mov	sp, r7
 800be3e:	bd80      	pop	{r7, pc}

0800be40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800be40:	b480      	push	{r7}
 800be42:	b085      	sub	sp, #20
 800be44:	af00      	add	r7, sp, #0
 800be46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800be4e:	b2db      	uxtb	r3, r3
 800be50:	2b21      	cmp	r3, #33	; 0x21
 800be52:	d13e      	bne.n	800bed2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	689b      	ldr	r3, [r3, #8]
 800be58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800be5c:	d114      	bne.n	800be88 <UART_Transmit_IT+0x48>
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	691b      	ldr	r3, [r3, #16]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d110      	bne.n	800be88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	6a1b      	ldr	r3, [r3, #32]
 800be6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	461a      	mov	r2, r3
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800be7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	6a1b      	ldr	r3, [r3, #32]
 800be80:	1c9a      	adds	r2, r3, #2
 800be82:	687b      	ldr	r3, [r7, #4]
 800be84:	621a      	str	r2, [r3, #32]
 800be86:	e008      	b.n	800be9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	1c59      	adds	r1, r3, #1
 800be8e:	687a      	ldr	r2, [r7, #4]
 800be90:	6211      	str	r1, [r2, #32]
 800be92:	781a      	ldrb	r2, [r3, #0]
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	681b      	ldr	r3, [r3, #0]
 800be98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	3b01      	subs	r3, #1
 800bea2:	b29b      	uxth	r3, r3
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	4619      	mov	r1, r3
 800bea8:	84d1      	strh	r1, [r2, #38]	; 0x26
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d10f      	bne.n	800bece <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	68da      	ldr	r2, [r3, #12]
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bebc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	68da      	ldr	r2, [r3, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800becc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800bece:	2300      	movs	r3, #0
 800bed0:	e000      	b.n	800bed4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800bed2:	2302      	movs	r3, #2
  }
}
 800bed4:	4618      	mov	r0, r3
 800bed6:	3714      	adds	r7, #20
 800bed8:	46bd      	mov	sp, r7
 800beda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bede:	4770      	bx	lr

0800bee0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b082      	sub	sp, #8
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	681b      	ldr	r3, [r3, #0]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bef6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2220      	movs	r2, #32
 800befc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800bf08:	2300      	movs	r3, #0
}
 800bf0a:	4618      	mov	r0, r3
 800bf0c:	3708      	adds	r7, #8
 800bf0e:	46bd      	mov	sp, r7
 800bf10:	bd80      	pop	{r7, pc}

0800bf12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800bf12:	b580      	push	{r7, lr}
 800bf14:	b08c      	sub	sp, #48	; 0x30
 800bf16:	af00      	add	r7, sp, #0
 800bf18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800bf20:	b2db      	uxtb	r3, r3
 800bf22:	2b22      	cmp	r3, #34	; 0x22
 800bf24:	f040 80ad 	bne.w	800c082 <UART_Receive_IT+0x170>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	689b      	ldr	r3, [r3, #8]
 800bf2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf30:	d117      	bne.n	800bf62 <UART_Receive_IT+0x50>
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	691b      	ldr	r3, [r3, #16]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d113      	bne.n	800bf62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800bf44:	687b      	ldr	r3, [r7, #4]
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	685b      	ldr	r3, [r3, #4]
 800bf4a:	b29b      	uxth	r3, r3
 800bf4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf5a:	1c9a      	adds	r2, r3, #2
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	629a      	str	r2, [r3, #40]	; 0x28
 800bf60:	e026      	b.n	800bfb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800bf68:	2300      	movs	r3, #0
 800bf6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	689b      	ldr	r3, [r3, #8]
 800bf70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf74:	d007      	beq.n	800bf86 <UART_Receive_IT+0x74>
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	689b      	ldr	r3, [r3, #8]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d10a      	bne.n	800bf94 <UART_Receive_IT+0x82>
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	691b      	ldr	r3, [r3, #16]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d106      	bne.n	800bf94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	685b      	ldr	r3, [r3, #4]
 800bf8c:	b2da      	uxtb	r2, r3
 800bf8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf90:	701a      	strb	r2, [r3, #0]
 800bf92:	e008      	b.n	800bfa6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	685b      	ldr	r3, [r3, #4]
 800bf9a:	b2db      	uxtb	r3, r3
 800bf9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bfa0:	b2da      	uxtb	r2, r3
 800bfa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfaa:	1c5a      	adds	r2, r3, #1
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800bfb4:	b29b      	uxth	r3, r3
 800bfb6:	3b01      	subs	r3, #1
 800bfb8:	b29b      	uxth	r3, r3
 800bfba:	687a      	ldr	r2, [r7, #4]
 800bfbc:	4619      	mov	r1, r3
 800bfbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d15c      	bne.n	800c07e <UART_Receive_IT+0x16c>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	68da      	ldr	r2, [r3, #12]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f022 0220 	bic.w	r2, r2, #32
 800bfd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	68da      	ldr	r2, [r3, #12]
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800bfe2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	681b      	ldr	r3, [r3, #0]
 800bfe8:	695a      	ldr	r2, [r3, #20]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	f022 0201 	bic.w	r2, r2, #1
 800bff2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	2220      	movs	r2, #32
 800bff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c000:	2b01      	cmp	r3, #1
 800c002:	d136      	bne.n	800c072 <UART_Receive_IT+0x160>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	330c      	adds	r3, #12
 800c010:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c012:	697b      	ldr	r3, [r7, #20]
 800c014:	e853 3f00 	ldrex	r3, [r3]
 800c018:	613b      	str	r3, [r7, #16]
   return(result);
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	f023 0310 	bic.w	r3, r3, #16
 800c020:	627b      	str	r3, [r7, #36]	; 0x24
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	330c      	adds	r3, #12
 800c028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c02a:	623a      	str	r2, [r7, #32]
 800c02c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c02e:	69f9      	ldr	r1, [r7, #28]
 800c030:	6a3a      	ldr	r2, [r7, #32]
 800c032:	e841 2300 	strex	r3, r2, [r1]
 800c036:	61bb      	str	r3, [r7, #24]
   return(result);
 800c038:	69bb      	ldr	r3, [r7, #24]
 800c03a:	2b00      	cmp	r3, #0
 800c03c:	d1e5      	bne.n	800c00a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	681b      	ldr	r3, [r3, #0]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	f003 0310 	and.w	r3, r3, #16
 800c048:	2b10      	cmp	r3, #16
 800c04a:	d10a      	bne.n	800c062 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800c04c:	2300      	movs	r3, #0
 800c04e:	60fb      	str	r3, [r7, #12]
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	60fb      	str	r3, [r7, #12]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	685b      	ldr	r3, [r3, #4]
 800c05e:	60fb      	str	r3, [r7, #12]
 800c060:	68fb      	ldr	r3, [r7, #12]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c06a:	4611      	mov	r1, r2
 800c06c:	6878      	ldr	r0, [r7, #4]
 800c06e:	4798      	blx	r3
 800c070:	e003      	b.n	800c07a <UART_Receive_IT+0x168>
      else
      {
        /* Standard reception API called */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c076:	6878      	ldr	r0, [r7, #4]
 800c078:	4798      	blx	r3
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800c07a:	2300      	movs	r3, #0
 800c07c:	e002      	b.n	800c084 <UART_Receive_IT+0x172>
    }
    return HAL_OK;
 800c07e:	2300      	movs	r3, #0
 800c080:	e000      	b.n	800c084 <UART_Receive_IT+0x172>
  }
  else
  {
    return HAL_BUSY;
 800c082:	2302      	movs	r3, #2
  }
}
 800c084:	4618      	mov	r0, r3
 800c086:	3730      	adds	r7, #48	; 0x30
 800c088:	46bd      	mov	sp, r7
 800c08a:	bd80      	pop	{r7, pc}

0800c08c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c08c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c090:	b0c0      	sub	sp, #256	; 0x100
 800c092:	af00      	add	r7, sp, #0
 800c094:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c098:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	691b      	ldr	r3, [r3, #16]
 800c0a0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800c0a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0a8:	68d9      	ldr	r1, [r3, #12]
 800c0aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ae:	681a      	ldr	r2, [r3, #0]
 800c0b0:	ea40 0301 	orr.w	r3, r0, r1
 800c0b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c0b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ba:	689a      	ldr	r2, [r3, #8]
 800c0bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c0:	691b      	ldr	r3, [r3, #16]
 800c0c2:	431a      	orrs	r2, r3
 800c0c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0c8:	695b      	ldr	r3, [r3, #20]
 800c0ca:	431a      	orrs	r2, r3
 800c0cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0d0:	69db      	ldr	r3, [r3, #28]
 800c0d2:	4313      	orrs	r3, r2
 800c0d4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800c0d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0dc:	681b      	ldr	r3, [r3, #0]
 800c0de:	68db      	ldr	r3, [r3, #12]
 800c0e0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800c0e4:	f021 010c 	bic.w	r1, r1, #12
 800c0e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800c0f2:	430b      	orrs	r3, r1
 800c0f4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c0f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	695b      	ldr	r3, [r3, #20]
 800c0fe:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800c102:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c106:	6999      	ldr	r1, [r3, #24]
 800c108:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c10c:	681a      	ldr	r2, [r3, #0]
 800c10e:	ea40 0301 	orr.w	r3, r0, r1
 800c112:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c114:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c118:	681a      	ldr	r2, [r3, #0]
 800c11a:	4b8f      	ldr	r3, [pc, #572]	; (800c358 <UART_SetConfig+0x2cc>)
 800c11c:	429a      	cmp	r2, r3
 800c11e:	d005      	beq.n	800c12c <UART_SetConfig+0xa0>
 800c120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c124:	681a      	ldr	r2, [r3, #0]
 800c126:	4b8d      	ldr	r3, [pc, #564]	; (800c35c <UART_SetConfig+0x2d0>)
 800c128:	429a      	cmp	r2, r3
 800c12a:	d104      	bne.n	800c136 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c12c:	f7fd f9b0 	bl	8009490 <HAL_RCC_GetPCLK2Freq>
 800c130:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800c134:	e003      	b.n	800c13e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c136:	f7fd f997 	bl	8009468 <HAL_RCC_GetPCLK1Freq>
 800c13a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c13e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c142:	69db      	ldr	r3, [r3, #28]
 800c144:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c148:	f040 810c 	bne.w	800c364 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c14c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c150:	2200      	movs	r2, #0
 800c152:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800c156:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800c15a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800c15e:	4622      	mov	r2, r4
 800c160:	462b      	mov	r3, r5
 800c162:	1891      	adds	r1, r2, r2
 800c164:	65b9      	str	r1, [r7, #88]	; 0x58
 800c166:	415b      	adcs	r3, r3
 800c168:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c16a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c16e:	4621      	mov	r1, r4
 800c170:	eb12 0801 	adds.w	r8, r2, r1
 800c174:	4629      	mov	r1, r5
 800c176:	eb43 0901 	adc.w	r9, r3, r1
 800c17a:	f04f 0200 	mov.w	r2, #0
 800c17e:	f04f 0300 	mov.w	r3, #0
 800c182:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c186:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c18a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c18e:	4690      	mov	r8, r2
 800c190:	4699      	mov	r9, r3
 800c192:	4623      	mov	r3, r4
 800c194:	eb18 0303 	adds.w	r3, r8, r3
 800c198:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800c19c:	462b      	mov	r3, r5
 800c19e:	eb49 0303 	adc.w	r3, r9, r3
 800c1a2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800c1a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c1aa:	685b      	ldr	r3, [r3, #4]
 800c1ac:	2200      	movs	r2, #0
 800c1ae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800c1b2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800c1b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800c1ba:	460b      	mov	r3, r1
 800c1bc:	18db      	adds	r3, r3, r3
 800c1be:	653b      	str	r3, [r7, #80]	; 0x50
 800c1c0:	4613      	mov	r3, r2
 800c1c2:	eb42 0303 	adc.w	r3, r2, r3
 800c1c6:	657b      	str	r3, [r7, #84]	; 0x54
 800c1c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800c1cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800c1d0:	f7f4 fd62 	bl	8000c98 <__aeabi_uldivmod>
 800c1d4:	4602      	mov	r2, r0
 800c1d6:	460b      	mov	r3, r1
 800c1d8:	4b61      	ldr	r3, [pc, #388]	; (800c360 <UART_SetConfig+0x2d4>)
 800c1da:	fba3 2302 	umull	r2, r3, r3, r2
 800c1de:	095b      	lsrs	r3, r3, #5
 800c1e0:	011c      	lsls	r4, r3, #4
 800c1e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c1ec:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800c1f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800c1f4:	4642      	mov	r2, r8
 800c1f6:	464b      	mov	r3, r9
 800c1f8:	1891      	adds	r1, r2, r2
 800c1fa:	64b9      	str	r1, [r7, #72]	; 0x48
 800c1fc:	415b      	adcs	r3, r3
 800c1fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c200:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c204:	4641      	mov	r1, r8
 800c206:	eb12 0a01 	adds.w	sl, r2, r1
 800c20a:	4649      	mov	r1, r9
 800c20c:	eb43 0b01 	adc.w	fp, r3, r1
 800c210:	f04f 0200 	mov.w	r2, #0
 800c214:	f04f 0300 	mov.w	r3, #0
 800c218:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c21c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c220:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c224:	4692      	mov	sl, r2
 800c226:	469b      	mov	fp, r3
 800c228:	4643      	mov	r3, r8
 800c22a:	eb1a 0303 	adds.w	r3, sl, r3
 800c22e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c232:	464b      	mov	r3, r9
 800c234:	eb4b 0303 	adc.w	r3, fp, r3
 800c238:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800c23c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c240:	685b      	ldr	r3, [r3, #4]
 800c242:	2200      	movs	r2, #0
 800c244:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c248:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800c24c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800c250:	460b      	mov	r3, r1
 800c252:	18db      	adds	r3, r3, r3
 800c254:	643b      	str	r3, [r7, #64]	; 0x40
 800c256:	4613      	mov	r3, r2
 800c258:	eb42 0303 	adc.w	r3, r2, r3
 800c25c:	647b      	str	r3, [r7, #68]	; 0x44
 800c25e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800c262:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800c266:	f7f4 fd17 	bl	8000c98 <__aeabi_uldivmod>
 800c26a:	4602      	mov	r2, r0
 800c26c:	460b      	mov	r3, r1
 800c26e:	4611      	mov	r1, r2
 800c270:	4b3b      	ldr	r3, [pc, #236]	; (800c360 <UART_SetConfig+0x2d4>)
 800c272:	fba3 2301 	umull	r2, r3, r3, r1
 800c276:	095b      	lsrs	r3, r3, #5
 800c278:	2264      	movs	r2, #100	; 0x64
 800c27a:	fb02 f303 	mul.w	r3, r2, r3
 800c27e:	1acb      	subs	r3, r1, r3
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800c286:	4b36      	ldr	r3, [pc, #216]	; (800c360 <UART_SetConfig+0x2d4>)
 800c288:	fba3 2302 	umull	r2, r3, r3, r2
 800c28c:	095b      	lsrs	r3, r3, #5
 800c28e:	005b      	lsls	r3, r3, #1
 800c290:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c294:	441c      	add	r4, r3
 800c296:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c29a:	2200      	movs	r2, #0
 800c29c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c2a0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800c2a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	464b      	mov	r3, r9
 800c2ac:	1891      	adds	r1, r2, r2
 800c2ae:	63b9      	str	r1, [r7, #56]	; 0x38
 800c2b0:	415b      	adcs	r3, r3
 800c2b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c2b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800c2b8:	4641      	mov	r1, r8
 800c2ba:	1851      	adds	r1, r2, r1
 800c2bc:	6339      	str	r1, [r7, #48]	; 0x30
 800c2be:	4649      	mov	r1, r9
 800c2c0:	414b      	adcs	r3, r1
 800c2c2:	637b      	str	r3, [r7, #52]	; 0x34
 800c2c4:	f04f 0200 	mov.w	r2, #0
 800c2c8:	f04f 0300 	mov.w	r3, #0
 800c2cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800c2d0:	4659      	mov	r1, fp
 800c2d2:	00cb      	lsls	r3, r1, #3
 800c2d4:	4651      	mov	r1, sl
 800c2d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c2da:	4651      	mov	r1, sl
 800c2dc:	00ca      	lsls	r2, r1, #3
 800c2de:	4610      	mov	r0, r2
 800c2e0:	4619      	mov	r1, r3
 800c2e2:	4603      	mov	r3, r0
 800c2e4:	4642      	mov	r2, r8
 800c2e6:	189b      	adds	r3, r3, r2
 800c2e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c2ec:	464b      	mov	r3, r9
 800c2ee:	460a      	mov	r2, r1
 800c2f0:	eb42 0303 	adc.w	r3, r2, r3
 800c2f4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c2f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c2fc:	685b      	ldr	r3, [r3, #4]
 800c2fe:	2200      	movs	r2, #0
 800c300:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800c304:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800c308:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800c30c:	460b      	mov	r3, r1
 800c30e:	18db      	adds	r3, r3, r3
 800c310:	62bb      	str	r3, [r7, #40]	; 0x28
 800c312:	4613      	mov	r3, r2
 800c314:	eb42 0303 	adc.w	r3, r2, r3
 800c318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c31a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800c31e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800c322:	f7f4 fcb9 	bl	8000c98 <__aeabi_uldivmod>
 800c326:	4602      	mov	r2, r0
 800c328:	460b      	mov	r3, r1
 800c32a:	4b0d      	ldr	r3, [pc, #52]	; (800c360 <UART_SetConfig+0x2d4>)
 800c32c:	fba3 1302 	umull	r1, r3, r3, r2
 800c330:	095b      	lsrs	r3, r3, #5
 800c332:	2164      	movs	r1, #100	; 0x64
 800c334:	fb01 f303 	mul.w	r3, r1, r3
 800c338:	1ad3      	subs	r3, r2, r3
 800c33a:	00db      	lsls	r3, r3, #3
 800c33c:	3332      	adds	r3, #50	; 0x32
 800c33e:	4a08      	ldr	r2, [pc, #32]	; (800c360 <UART_SetConfig+0x2d4>)
 800c340:	fba2 2303 	umull	r2, r3, r2, r3
 800c344:	095b      	lsrs	r3, r3, #5
 800c346:	f003 0207 	and.w	r2, r3, #7
 800c34a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	4422      	add	r2, r4
 800c352:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800c354:	e105      	b.n	800c562 <UART_SetConfig+0x4d6>
 800c356:	bf00      	nop
 800c358:	40011000 	.word	0x40011000
 800c35c:	40011400 	.word	0x40011400
 800c360:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800c364:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c368:	2200      	movs	r2, #0
 800c36a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800c36e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800c372:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800c376:	4642      	mov	r2, r8
 800c378:	464b      	mov	r3, r9
 800c37a:	1891      	adds	r1, r2, r2
 800c37c:	6239      	str	r1, [r7, #32]
 800c37e:	415b      	adcs	r3, r3
 800c380:	627b      	str	r3, [r7, #36]	; 0x24
 800c382:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800c386:	4641      	mov	r1, r8
 800c388:	1854      	adds	r4, r2, r1
 800c38a:	4649      	mov	r1, r9
 800c38c:	eb43 0501 	adc.w	r5, r3, r1
 800c390:	f04f 0200 	mov.w	r2, #0
 800c394:	f04f 0300 	mov.w	r3, #0
 800c398:	00eb      	lsls	r3, r5, #3
 800c39a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c39e:	00e2      	lsls	r2, r4, #3
 800c3a0:	4614      	mov	r4, r2
 800c3a2:	461d      	mov	r5, r3
 800c3a4:	4643      	mov	r3, r8
 800c3a6:	18e3      	adds	r3, r4, r3
 800c3a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c3ac:	464b      	mov	r3, r9
 800c3ae:	eb45 0303 	adc.w	r3, r5, r3
 800c3b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800c3b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	2200      	movs	r2, #0
 800c3be:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c3c2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800c3c6:	f04f 0200 	mov.w	r2, #0
 800c3ca:	f04f 0300 	mov.w	r3, #0
 800c3ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c3d2:	4629      	mov	r1, r5
 800c3d4:	008b      	lsls	r3, r1, #2
 800c3d6:	4621      	mov	r1, r4
 800c3d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c3dc:	4621      	mov	r1, r4
 800c3de:	008a      	lsls	r2, r1, #2
 800c3e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800c3e4:	f7f4 fc58 	bl	8000c98 <__aeabi_uldivmod>
 800c3e8:	4602      	mov	r2, r0
 800c3ea:	460b      	mov	r3, r1
 800c3ec:	4b60      	ldr	r3, [pc, #384]	; (800c570 <UART_SetConfig+0x4e4>)
 800c3ee:	fba3 2302 	umull	r2, r3, r3, r2
 800c3f2:	095b      	lsrs	r3, r3, #5
 800c3f4:	011c      	lsls	r4, r3, #4
 800c3f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c400:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c404:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800c408:	4642      	mov	r2, r8
 800c40a:	464b      	mov	r3, r9
 800c40c:	1891      	adds	r1, r2, r2
 800c40e:	61b9      	str	r1, [r7, #24]
 800c410:	415b      	adcs	r3, r3
 800c412:	61fb      	str	r3, [r7, #28]
 800c414:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800c418:	4641      	mov	r1, r8
 800c41a:	1851      	adds	r1, r2, r1
 800c41c:	6139      	str	r1, [r7, #16]
 800c41e:	4649      	mov	r1, r9
 800c420:	414b      	adcs	r3, r1
 800c422:	617b      	str	r3, [r7, #20]
 800c424:	f04f 0200 	mov.w	r2, #0
 800c428:	f04f 0300 	mov.w	r3, #0
 800c42c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800c430:	4659      	mov	r1, fp
 800c432:	00cb      	lsls	r3, r1, #3
 800c434:	4651      	mov	r1, sl
 800c436:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c43a:	4651      	mov	r1, sl
 800c43c:	00ca      	lsls	r2, r1, #3
 800c43e:	4610      	mov	r0, r2
 800c440:	4619      	mov	r1, r3
 800c442:	4603      	mov	r3, r0
 800c444:	4642      	mov	r2, r8
 800c446:	189b      	adds	r3, r3, r2
 800c448:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c44c:	464b      	mov	r3, r9
 800c44e:	460a      	mov	r2, r1
 800c450:	eb42 0303 	adc.w	r3, r2, r3
 800c454:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c45c:	685b      	ldr	r3, [r3, #4]
 800c45e:	2200      	movs	r2, #0
 800c460:	67bb      	str	r3, [r7, #120]	; 0x78
 800c462:	67fa      	str	r2, [r7, #124]	; 0x7c
 800c464:	f04f 0200 	mov.w	r2, #0
 800c468:	f04f 0300 	mov.w	r3, #0
 800c46c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800c470:	4649      	mov	r1, r9
 800c472:	008b      	lsls	r3, r1, #2
 800c474:	4641      	mov	r1, r8
 800c476:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c47a:	4641      	mov	r1, r8
 800c47c:	008a      	lsls	r2, r1, #2
 800c47e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800c482:	f7f4 fc09 	bl	8000c98 <__aeabi_uldivmod>
 800c486:	4602      	mov	r2, r0
 800c488:	460b      	mov	r3, r1
 800c48a:	4b39      	ldr	r3, [pc, #228]	; (800c570 <UART_SetConfig+0x4e4>)
 800c48c:	fba3 1302 	umull	r1, r3, r3, r2
 800c490:	095b      	lsrs	r3, r3, #5
 800c492:	2164      	movs	r1, #100	; 0x64
 800c494:	fb01 f303 	mul.w	r3, r1, r3
 800c498:	1ad3      	subs	r3, r2, r3
 800c49a:	011b      	lsls	r3, r3, #4
 800c49c:	3332      	adds	r3, #50	; 0x32
 800c49e:	4a34      	ldr	r2, [pc, #208]	; (800c570 <UART_SetConfig+0x4e4>)
 800c4a0:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a4:	095b      	lsrs	r3, r3, #5
 800c4a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800c4aa:	441c      	add	r4, r3
 800c4ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	673b      	str	r3, [r7, #112]	; 0x70
 800c4b4:	677a      	str	r2, [r7, #116]	; 0x74
 800c4b6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800c4ba:	4642      	mov	r2, r8
 800c4bc:	464b      	mov	r3, r9
 800c4be:	1891      	adds	r1, r2, r2
 800c4c0:	60b9      	str	r1, [r7, #8]
 800c4c2:	415b      	adcs	r3, r3
 800c4c4:	60fb      	str	r3, [r7, #12]
 800c4c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800c4ca:	4641      	mov	r1, r8
 800c4cc:	1851      	adds	r1, r2, r1
 800c4ce:	6039      	str	r1, [r7, #0]
 800c4d0:	4649      	mov	r1, r9
 800c4d2:	414b      	adcs	r3, r1
 800c4d4:	607b      	str	r3, [r7, #4]
 800c4d6:	f04f 0200 	mov.w	r2, #0
 800c4da:	f04f 0300 	mov.w	r3, #0
 800c4de:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800c4e2:	4659      	mov	r1, fp
 800c4e4:	00cb      	lsls	r3, r1, #3
 800c4e6:	4651      	mov	r1, sl
 800c4e8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c4ec:	4651      	mov	r1, sl
 800c4ee:	00ca      	lsls	r2, r1, #3
 800c4f0:	4610      	mov	r0, r2
 800c4f2:	4619      	mov	r1, r3
 800c4f4:	4603      	mov	r3, r0
 800c4f6:	4642      	mov	r2, r8
 800c4f8:	189b      	adds	r3, r3, r2
 800c4fa:	66bb      	str	r3, [r7, #104]	; 0x68
 800c4fc:	464b      	mov	r3, r9
 800c4fe:	460a      	mov	r2, r1
 800c500:	eb42 0303 	adc.w	r3, r2, r3
 800c504:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c50a:	685b      	ldr	r3, [r3, #4]
 800c50c:	2200      	movs	r2, #0
 800c50e:	663b      	str	r3, [r7, #96]	; 0x60
 800c510:	667a      	str	r2, [r7, #100]	; 0x64
 800c512:	f04f 0200 	mov.w	r2, #0
 800c516:	f04f 0300 	mov.w	r3, #0
 800c51a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800c51e:	4649      	mov	r1, r9
 800c520:	008b      	lsls	r3, r1, #2
 800c522:	4641      	mov	r1, r8
 800c524:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800c528:	4641      	mov	r1, r8
 800c52a:	008a      	lsls	r2, r1, #2
 800c52c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800c530:	f7f4 fbb2 	bl	8000c98 <__aeabi_uldivmod>
 800c534:	4602      	mov	r2, r0
 800c536:	460b      	mov	r3, r1
 800c538:	4b0d      	ldr	r3, [pc, #52]	; (800c570 <UART_SetConfig+0x4e4>)
 800c53a:	fba3 1302 	umull	r1, r3, r3, r2
 800c53e:	095b      	lsrs	r3, r3, #5
 800c540:	2164      	movs	r1, #100	; 0x64
 800c542:	fb01 f303 	mul.w	r3, r1, r3
 800c546:	1ad3      	subs	r3, r2, r3
 800c548:	011b      	lsls	r3, r3, #4
 800c54a:	3332      	adds	r3, #50	; 0x32
 800c54c:	4a08      	ldr	r2, [pc, #32]	; (800c570 <UART_SetConfig+0x4e4>)
 800c54e:	fba2 2303 	umull	r2, r3, r2, r3
 800c552:	095b      	lsrs	r3, r3, #5
 800c554:	f003 020f 	and.w	r2, r3, #15
 800c558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4422      	add	r2, r4
 800c560:	609a      	str	r2, [r3, #8]
}
 800c562:	bf00      	nop
 800c564:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800c568:	46bd      	mov	sp, r7
 800c56a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c56e:	bf00      	nop
 800c570:	51eb851f 	.word	0x51eb851f

0800c574 <__errno>:
 800c574:	4b01      	ldr	r3, [pc, #4]	; (800c57c <__errno+0x8>)
 800c576:	6818      	ldr	r0, [r3, #0]
 800c578:	4770      	bx	lr
 800c57a:	bf00      	nop
 800c57c:	2000025c 	.word	0x2000025c

0800c580 <__libc_init_array>:
 800c580:	b570      	push	{r4, r5, r6, lr}
 800c582:	4d0d      	ldr	r5, [pc, #52]	; (800c5b8 <__libc_init_array+0x38>)
 800c584:	4c0d      	ldr	r4, [pc, #52]	; (800c5bc <__libc_init_array+0x3c>)
 800c586:	1b64      	subs	r4, r4, r5
 800c588:	10a4      	asrs	r4, r4, #2
 800c58a:	2600      	movs	r6, #0
 800c58c:	42a6      	cmp	r6, r4
 800c58e:	d109      	bne.n	800c5a4 <__libc_init_array+0x24>
 800c590:	4d0b      	ldr	r5, [pc, #44]	; (800c5c0 <__libc_init_array+0x40>)
 800c592:	4c0c      	ldr	r4, [pc, #48]	; (800c5c4 <__libc_init_array+0x44>)
 800c594:	f004 fddc 	bl	8011150 <_init>
 800c598:	1b64      	subs	r4, r4, r5
 800c59a:	10a4      	asrs	r4, r4, #2
 800c59c:	2600      	movs	r6, #0
 800c59e:	42a6      	cmp	r6, r4
 800c5a0:	d105      	bne.n	800c5ae <__libc_init_array+0x2e>
 800c5a2:	bd70      	pop	{r4, r5, r6, pc}
 800c5a4:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5a8:	4798      	blx	r3
 800c5aa:	3601      	adds	r6, #1
 800c5ac:	e7ee      	b.n	800c58c <__libc_init_array+0xc>
 800c5ae:	f855 3b04 	ldr.w	r3, [r5], #4
 800c5b2:	4798      	blx	r3
 800c5b4:	3601      	adds	r6, #1
 800c5b6:	e7f2      	b.n	800c59e <__libc_init_array+0x1e>
 800c5b8:	08011644 	.word	0x08011644
 800c5bc:	08011644 	.word	0x08011644
 800c5c0:	08011644 	.word	0x08011644
 800c5c4:	08011648 	.word	0x08011648

0800c5c8 <memcpy>:
 800c5c8:	440a      	add	r2, r1
 800c5ca:	4291      	cmp	r1, r2
 800c5cc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c5d0:	d100      	bne.n	800c5d4 <memcpy+0xc>
 800c5d2:	4770      	bx	lr
 800c5d4:	b510      	push	{r4, lr}
 800c5d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c5da:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c5de:	4291      	cmp	r1, r2
 800c5e0:	d1f9      	bne.n	800c5d6 <memcpy+0xe>
 800c5e2:	bd10      	pop	{r4, pc}

0800c5e4 <memset>:
 800c5e4:	4402      	add	r2, r0
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	4293      	cmp	r3, r2
 800c5ea:	d100      	bne.n	800c5ee <memset+0xa>
 800c5ec:	4770      	bx	lr
 800c5ee:	f803 1b01 	strb.w	r1, [r3], #1
 800c5f2:	e7f9      	b.n	800c5e8 <memset+0x4>

0800c5f4 <__cvt>:
 800c5f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c5f8:	ec55 4b10 	vmov	r4, r5, d0
 800c5fc:	2d00      	cmp	r5, #0
 800c5fe:	460e      	mov	r6, r1
 800c600:	4619      	mov	r1, r3
 800c602:	462b      	mov	r3, r5
 800c604:	bfbb      	ittet	lt
 800c606:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c60a:	461d      	movlt	r5, r3
 800c60c:	2300      	movge	r3, #0
 800c60e:	232d      	movlt	r3, #45	; 0x2d
 800c610:	700b      	strb	r3, [r1, #0]
 800c612:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c614:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c618:	4691      	mov	r9, r2
 800c61a:	f023 0820 	bic.w	r8, r3, #32
 800c61e:	bfbc      	itt	lt
 800c620:	4622      	movlt	r2, r4
 800c622:	4614      	movlt	r4, r2
 800c624:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c628:	d005      	beq.n	800c636 <__cvt+0x42>
 800c62a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c62e:	d100      	bne.n	800c632 <__cvt+0x3e>
 800c630:	3601      	adds	r6, #1
 800c632:	2102      	movs	r1, #2
 800c634:	e000      	b.n	800c638 <__cvt+0x44>
 800c636:	2103      	movs	r1, #3
 800c638:	ab03      	add	r3, sp, #12
 800c63a:	9301      	str	r3, [sp, #4]
 800c63c:	ab02      	add	r3, sp, #8
 800c63e:	9300      	str	r3, [sp, #0]
 800c640:	ec45 4b10 	vmov	d0, r4, r5
 800c644:	4653      	mov	r3, sl
 800c646:	4632      	mov	r2, r6
 800c648:	f001 fdae 	bl	800e1a8 <_dtoa_r>
 800c64c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c650:	4607      	mov	r7, r0
 800c652:	d102      	bne.n	800c65a <__cvt+0x66>
 800c654:	f019 0f01 	tst.w	r9, #1
 800c658:	d022      	beq.n	800c6a0 <__cvt+0xac>
 800c65a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c65e:	eb07 0906 	add.w	r9, r7, r6
 800c662:	d110      	bne.n	800c686 <__cvt+0x92>
 800c664:	783b      	ldrb	r3, [r7, #0]
 800c666:	2b30      	cmp	r3, #48	; 0x30
 800c668:	d10a      	bne.n	800c680 <__cvt+0x8c>
 800c66a:	2200      	movs	r2, #0
 800c66c:	2300      	movs	r3, #0
 800c66e:	4620      	mov	r0, r4
 800c670:	4629      	mov	r1, r5
 800c672:	f7f4 fa31 	bl	8000ad8 <__aeabi_dcmpeq>
 800c676:	b918      	cbnz	r0, 800c680 <__cvt+0x8c>
 800c678:	f1c6 0601 	rsb	r6, r6, #1
 800c67c:	f8ca 6000 	str.w	r6, [sl]
 800c680:	f8da 3000 	ldr.w	r3, [sl]
 800c684:	4499      	add	r9, r3
 800c686:	2200      	movs	r2, #0
 800c688:	2300      	movs	r3, #0
 800c68a:	4620      	mov	r0, r4
 800c68c:	4629      	mov	r1, r5
 800c68e:	f7f4 fa23 	bl	8000ad8 <__aeabi_dcmpeq>
 800c692:	b108      	cbz	r0, 800c698 <__cvt+0xa4>
 800c694:	f8cd 900c 	str.w	r9, [sp, #12]
 800c698:	2230      	movs	r2, #48	; 0x30
 800c69a:	9b03      	ldr	r3, [sp, #12]
 800c69c:	454b      	cmp	r3, r9
 800c69e:	d307      	bcc.n	800c6b0 <__cvt+0xbc>
 800c6a0:	9b03      	ldr	r3, [sp, #12]
 800c6a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6a4:	1bdb      	subs	r3, r3, r7
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	6013      	str	r3, [r2, #0]
 800c6aa:	b004      	add	sp, #16
 800c6ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c6b0:	1c59      	adds	r1, r3, #1
 800c6b2:	9103      	str	r1, [sp, #12]
 800c6b4:	701a      	strb	r2, [r3, #0]
 800c6b6:	e7f0      	b.n	800c69a <__cvt+0xa6>

0800c6b8 <__exponent>:
 800c6b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c6ba:	4603      	mov	r3, r0
 800c6bc:	2900      	cmp	r1, #0
 800c6be:	bfb8      	it	lt
 800c6c0:	4249      	neglt	r1, r1
 800c6c2:	f803 2b02 	strb.w	r2, [r3], #2
 800c6c6:	bfb4      	ite	lt
 800c6c8:	222d      	movlt	r2, #45	; 0x2d
 800c6ca:	222b      	movge	r2, #43	; 0x2b
 800c6cc:	2909      	cmp	r1, #9
 800c6ce:	7042      	strb	r2, [r0, #1]
 800c6d0:	dd2a      	ble.n	800c728 <__exponent+0x70>
 800c6d2:	f10d 0407 	add.w	r4, sp, #7
 800c6d6:	46a4      	mov	ip, r4
 800c6d8:	270a      	movs	r7, #10
 800c6da:	46a6      	mov	lr, r4
 800c6dc:	460a      	mov	r2, r1
 800c6de:	fb91 f6f7 	sdiv	r6, r1, r7
 800c6e2:	fb07 1516 	mls	r5, r7, r6, r1
 800c6e6:	3530      	adds	r5, #48	; 0x30
 800c6e8:	2a63      	cmp	r2, #99	; 0x63
 800c6ea:	f104 34ff 	add.w	r4, r4, #4294967295
 800c6ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c6f2:	4631      	mov	r1, r6
 800c6f4:	dcf1      	bgt.n	800c6da <__exponent+0x22>
 800c6f6:	3130      	adds	r1, #48	; 0x30
 800c6f8:	f1ae 0502 	sub.w	r5, lr, #2
 800c6fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c700:	1c44      	adds	r4, r0, #1
 800c702:	4629      	mov	r1, r5
 800c704:	4561      	cmp	r1, ip
 800c706:	d30a      	bcc.n	800c71e <__exponent+0x66>
 800c708:	f10d 0209 	add.w	r2, sp, #9
 800c70c:	eba2 020e 	sub.w	r2, r2, lr
 800c710:	4565      	cmp	r5, ip
 800c712:	bf88      	it	hi
 800c714:	2200      	movhi	r2, #0
 800c716:	4413      	add	r3, r2
 800c718:	1a18      	subs	r0, r3, r0
 800c71a:	b003      	add	sp, #12
 800c71c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c71e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c722:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c726:	e7ed      	b.n	800c704 <__exponent+0x4c>
 800c728:	2330      	movs	r3, #48	; 0x30
 800c72a:	3130      	adds	r1, #48	; 0x30
 800c72c:	7083      	strb	r3, [r0, #2]
 800c72e:	70c1      	strb	r1, [r0, #3]
 800c730:	1d03      	adds	r3, r0, #4
 800c732:	e7f1      	b.n	800c718 <__exponent+0x60>

0800c734 <_printf_float>:
 800c734:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c738:	ed2d 8b02 	vpush	{d8}
 800c73c:	b08d      	sub	sp, #52	; 0x34
 800c73e:	460c      	mov	r4, r1
 800c740:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c744:	4616      	mov	r6, r2
 800c746:	461f      	mov	r7, r3
 800c748:	4605      	mov	r5, r0
 800c74a:	f002 fe8b 	bl	800f464 <_localeconv_r>
 800c74e:	f8d0 a000 	ldr.w	sl, [r0]
 800c752:	4650      	mov	r0, sl
 800c754:	f7f3 fd44 	bl	80001e0 <strlen>
 800c758:	2300      	movs	r3, #0
 800c75a:	930a      	str	r3, [sp, #40]	; 0x28
 800c75c:	6823      	ldr	r3, [r4, #0]
 800c75e:	9305      	str	r3, [sp, #20]
 800c760:	f8d8 3000 	ldr.w	r3, [r8]
 800c764:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c768:	3307      	adds	r3, #7
 800c76a:	f023 0307 	bic.w	r3, r3, #7
 800c76e:	f103 0208 	add.w	r2, r3, #8
 800c772:	f8c8 2000 	str.w	r2, [r8]
 800c776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c77a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c77e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c782:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c786:	9307      	str	r3, [sp, #28]
 800c788:	f8cd 8018 	str.w	r8, [sp, #24]
 800c78c:	ee08 0a10 	vmov	s16, r0
 800c790:	4b9f      	ldr	r3, [pc, #636]	; (800ca10 <_printf_float+0x2dc>)
 800c792:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c796:	f04f 32ff 	mov.w	r2, #4294967295
 800c79a:	f7f4 f9cf 	bl	8000b3c <__aeabi_dcmpun>
 800c79e:	bb88      	cbnz	r0, 800c804 <_printf_float+0xd0>
 800c7a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c7a4:	4b9a      	ldr	r3, [pc, #616]	; (800ca10 <_printf_float+0x2dc>)
 800c7a6:	f04f 32ff 	mov.w	r2, #4294967295
 800c7aa:	f7f4 f9a9 	bl	8000b00 <__aeabi_dcmple>
 800c7ae:	bb48      	cbnz	r0, 800c804 <_printf_float+0xd0>
 800c7b0:	2200      	movs	r2, #0
 800c7b2:	2300      	movs	r3, #0
 800c7b4:	4640      	mov	r0, r8
 800c7b6:	4649      	mov	r1, r9
 800c7b8:	f7f4 f998 	bl	8000aec <__aeabi_dcmplt>
 800c7bc:	b110      	cbz	r0, 800c7c4 <_printf_float+0x90>
 800c7be:	232d      	movs	r3, #45	; 0x2d
 800c7c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c7c4:	4b93      	ldr	r3, [pc, #588]	; (800ca14 <_printf_float+0x2e0>)
 800c7c6:	4894      	ldr	r0, [pc, #592]	; (800ca18 <_printf_float+0x2e4>)
 800c7c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c7cc:	bf94      	ite	ls
 800c7ce:	4698      	movls	r8, r3
 800c7d0:	4680      	movhi	r8, r0
 800c7d2:	2303      	movs	r3, #3
 800c7d4:	6123      	str	r3, [r4, #16]
 800c7d6:	9b05      	ldr	r3, [sp, #20]
 800c7d8:	f023 0204 	bic.w	r2, r3, #4
 800c7dc:	6022      	str	r2, [r4, #0]
 800c7de:	f04f 0900 	mov.w	r9, #0
 800c7e2:	9700      	str	r7, [sp, #0]
 800c7e4:	4633      	mov	r3, r6
 800c7e6:	aa0b      	add	r2, sp, #44	; 0x2c
 800c7e8:	4621      	mov	r1, r4
 800c7ea:	4628      	mov	r0, r5
 800c7ec:	f000 f9d8 	bl	800cba0 <_printf_common>
 800c7f0:	3001      	adds	r0, #1
 800c7f2:	f040 8090 	bne.w	800c916 <_printf_float+0x1e2>
 800c7f6:	f04f 30ff 	mov.w	r0, #4294967295
 800c7fa:	b00d      	add	sp, #52	; 0x34
 800c7fc:	ecbd 8b02 	vpop	{d8}
 800c800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c804:	4642      	mov	r2, r8
 800c806:	464b      	mov	r3, r9
 800c808:	4640      	mov	r0, r8
 800c80a:	4649      	mov	r1, r9
 800c80c:	f7f4 f996 	bl	8000b3c <__aeabi_dcmpun>
 800c810:	b140      	cbz	r0, 800c824 <_printf_float+0xf0>
 800c812:	464b      	mov	r3, r9
 800c814:	2b00      	cmp	r3, #0
 800c816:	bfbc      	itt	lt
 800c818:	232d      	movlt	r3, #45	; 0x2d
 800c81a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c81e:	487f      	ldr	r0, [pc, #508]	; (800ca1c <_printf_float+0x2e8>)
 800c820:	4b7f      	ldr	r3, [pc, #508]	; (800ca20 <_printf_float+0x2ec>)
 800c822:	e7d1      	b.n	800c7c8 <_printf_float+0x94>
 800c824:	6863      	ldr	r3, [r4, #4]
 800c826:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c82a:	9206      	str	r2, [sp, #24]
 800c82c:	1c5a      	adds	r2, r3, #1
 800c82e:	d13f      	bne.n	800c8b0 <_printf_float+0x17c>
 800c830:	2306      	movs	r3, #6
 800c832:	6063      	str	r3, [r4, #4]
 800c834:	9b05      	ldr	r3, [sp, #20]
 800c836:	6861      	ldr	r1, [r4, #4]
 800c838:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c83c:	2300      	movs	r3, #0
 800c83e:	9303      	str	r3, [sp, #12]
 800c840:	ab0a      	add	r3, sp, #40	; 0x28
 800c842:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c846:	ab09      	add	r3, sp, #36	; 0x24
 800c848:	ec49 8b10 	vmov	d0, r8, r9
 800c84c:	9300      	str	r3, [sp, #0]
 800c84e:	6022      	str	r2, [r4, #0]
 800c850:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c854:	4628      	mov	r0, r5
 800c856:	f7ff fecd 	bl	800c5f4 <__cvt>
 800c85a:	9b06      	ldr	r3, [sp, #24]
 800c85c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c85e:	2b47      	cmp	r3, #71	; 0x47
 800c860:	4680      	mov	r8, r0
 800c862:	d108      	bne.n	800c876 <_printf_float+0x142>
 800c864:	1cc8      	adds	r0, r1, #3
 800c866:	db02      	blt.n	800c86e <_printf_float+0x13a>
 800c868:	6863      	ldr	r3, [r4, #4]
 800c86a:	4299      	cmp	r1, r3
 800c86c:	dd41      	ble.n	800c8f2 <_printf_float+0x1be>
 800c86e:	f1ab 0b02 	sub.w	fp, fp, #2
 800c872:	fa5f fb8b 	uxtb.w	fp, fp
 800c876:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c87a:	d820      	bhi.n	800c8be <_printf_float+0x18a>
 800c87c:	3901      	subs	r1, #1
 800c87e:	465a      	mov	r2, fp
 800c880:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c884:	9109      	str	r1, [sp, #36]	; 0x24
 800c886:	f7ff ff17 	bl	800c6b8 <__exponent>
 800c88a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c88c:	1813      	adds	r3, r2, r0
 800c88e:	2a01      	cmp	r2, #1
 800c890:	4681      	mov	r9, r0
 800c892:	6123      	str	r3, [r4, #16]
 800c894:	dc02      	bgt.n	800c89c <_printf_float+0x168>
 800c896:	6822      	ldr	r2, [r4, #0]
 800c898:	07d2      	lsls	r2, r2, #31
 800c89a:	d501      	bpl.n	800c8a0 <_printf_float+0x16c>
 800c89c:	3301      	adds	r3, #1
 800c89e:	6123      	str	r3, [r4, #16]
 800c8a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d09c      	beq.n	800c7e2 <_printf_float+0xae>
 800c8a8:	232d      	movs	r3, #45	; 0x2d
 800c8aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c8ae:	e798      	b.n	800c7e2 <_printf_float+0xae>
 800c8b0:	9a06      	ldr	r2, [sp, #24]
 800c8b2:	2a47      	cmp	r2, #71	; 0x47
 800c8b4:	d1be      	bne.n	800c834 <_printf_float+0x100>
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d1bc      	bne.n	800c834 <_printf_float+0x100>
 800c8ba:	2301      	movs	r3, #1
 800c8bc:	e7b9      	b.n	800c832 <_printf_float+0xfe>
 800c8be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c8c2:	d118      	bne.n	800c8f6 <_printf_float+0x1c2>
 800c8c4:	2900      	cmp	r1, #0
 800c8c6:	6863      	ldr	r3, [r4, #4]
 800c8c8:	dd0b      	ble.n	800c8e2 <_printf_float+0x1ae>
 800c8ca:	6121      	str	r1, [r4, #16]
 800c8cc:	b913      	cbnz	r3, 800c8d4 <_printf_float+0x1a0>
 800c8ce:	6822      	ldr	r2, [r4, #0]
 800c8d0:	07d0      	lsls	r0, r2, #31
 800c8d2:	d502      	bpl.n	800c8da <_printf_float+0x1a6>
 800c8d4:	3301      	adds	r3, #1
 800c8d6:	440b      	add	r3, r1
 800c8d8:	6123      	str	r3, [r4, #16]
 800c8da:	65a1      	str	r1, [r4, #88]	; 0x58
 800c8dc:	f04f 0900 	mov.w	r9, #0
 800c8e0:	e7de      	b.n	800c8a0 <_printf_float+0x16c>
 800c8e2:	b913      	cbnz	r3, 800c8ea <_printf_float+0x1b6>
 800c8e4:	6822      	ldr	r2, [r4, #0]
 800c8e6:	07d2      	lsls	r2, r2, #31
 800c8e8:	d501      	bpl.n	800c8ee <_printf_float+0x1ba>
 800c8ea:	3302      	adds	r3, #2
 800c8ec:	e7f4      	b.n	800c8d8 <_printf_float+0x1a4>
 800c8ee:	2301      	movs	r3, #1
 800c8f0:	e7f2      	b.n	800c8d8 <_printf_float+0x1a4>
 800c8f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c8f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c8f8:	4299      	cmp	r1, r3
 800c8fa:	db05      	blt.n	800c908 <_printf_float+0x1d4>
 800c8fc:	6823      	ldr	r3, [r4, #0]
 800c8fe:	6121      	str	r1, [r4, #16]
 800c900:	07d8      	lsls	r0, r3, #31
 800c902:	d5ea      	bpl.n	800c8da <_printf_float+0x1a6>
 800c904:	1c4b      	adds	r3, r1, #1
 800c906:	e7e7      	b.n	800c8d8 <_printf_float+0x1a4>
 800c908:	2900      	cmp	r1, #0
 800c90a:	bfd4      	ite	le
 800c90c:	f1c1 0202 	rsble	r2, r1, #2
 800c910:	2201      	movgt	r2, #1
 800c912:	4413      	add	r3, r2
 800c914:	e7e0      	b.n	800c8d8 <_printf_float+0x1a4>
 800c916:	6823      	ldr	r3, [r4, #0]
 800c918:	055a      	lsls	r2, r3, #21
 800c91a:	d407      	bmi.n	800c92c <_printf_float+0x1f8>
 800c91c:	6923      	ldr	r3, [r4, #16]
 800c91e:	4642      	mov	r2, r8
 800c920:	4631      	mov	r1, r6
 800c922:	4628      	mov	r0, r5
 800c924:	47b8      	blx	r7
 800c926:	3001      	adds	r0, #1
 800c928:	d12c      	bne.n	800c984 <_printf_float+0x250>
 800c92a:	e764      	b.n	800c7f6 <_printf_float+0xc2>
 800c92c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c930:	f240 80e0 	bls.w	800caf4 <_printf_float+0x3c0>
 800c934:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c938:	2200      	movs	r2, #0
 800c93a:	2300      	movs	r3, #0
 800c93c:	f7f4 f8cc 	bl	8000ad8 <__aeabi_dcmpeq>
 800c940:	2800      	cmp	r0, #0
 800c942:	d034      	beq.n	800c9ae <_printf_float+0x27a>
 800c944:	4a37      	ldr	r2, [pc, #220]	; (800ca24 <_printf_float+0x2f0>)
 800c946:	2301      	movs	r3, #1
 800c948:	4631      	mov	r1, r6
 800c94a:	4628      	mov	r0, r5
 800c94c:	47b8      	blx	r7
 800c94e:	3001      	adds	r0, #1
 800c950:	f43f af51 	beq.w	800c7f6 <_printf_float+0xc2>
 800c954:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c958:	429a      	cmp	r2, r3
 800c95a:	db02      	blt.n	800c962 <_printf_float+0x22e>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	07d8      	lsls	r0, r3, #31
 800c960:	d510      	bpl.n	800c984 <_printf_float+0x250>
 800c962:	ee18 3a10 	vmov	r3, s16
 800c966:	4652      	mov	r2, sl
 800c968:	4631      	mov	r1, r6
 800c96a:	4628      	mov	r0, r5
 800c96c:	47b8      	blx	r7
 800c96e:	3001      	adds	r0, #1
 800c970:	f43f af41 	beq.w	800c7f6 <_printf_float+0xc2>
 800c974:	f04f 0800 	mov.w	r8, #0
 800c978:	f104 091a 	add.w	r9, r4, #26
 800c97c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c97e:	3b01      	subs	r3, #1
 800c980:	4543      	cmp	r3, r8
 800c982:	dc09      	bgt.n	800c998 <_printf_float+0x264>
 800c984:	6823      	ldr	r3, [r4, #0]
 800c986:	079b      	lsls	r3, r3, #30
 800c988:	f100 8105 	bmi.w	800cb96 <_printf_float+0x462>
 800c98c:	68e0      	ldr	r0, [r4, #12]
 800c98e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c990:	4298      	cmp	r0, r3
 800c992:	bfb8      	it	lt
 800c994:	4618      	movlt	r0, r3
 800c996:	e730      	b.n	800c7fa <_printf_float+0xc6>
 800c998:	2301      	movs	r3, #1
 800c99a:	464a      	mov	r2, r9
 800c99c:	4631      	mov	r1, r6
 800c99e:	4628      	mov	r0, r5
 800c9a0:	47b8      	blx	r7
 800c9a2:	3001      	adds	r0, #1
 800c9a4:	f43f af27 	beq.w	800c7f6 <_printf_float+0xc2>
 800c9a8:	f108 0801 	add.w	r8, r8, #1
 800c9ac:	e7e6      	b.n	800c97c <_printf_float+0x248>
 800c9ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	dc39      	bgt.n	800ca28 <_printf_float+0x2f4>
 800c9b4:	4a1b      	ldr	r2, [pc, #108]	; (800ca24 <_printf_float+0x2f0>)
 800c9b6:	2301      	movs	r3, #1
 800c9b8:	4631      	mov	r1, r6
 800c9ba:	4628      	mov	r0, r5
 800c9bc:	47b8      	blx	r7
 800c9be:	3001      	adds	r0, #1
 800c9c0:	f43f af19 	beq.w	800c7f6 <_printf_float+0xc2>
 800c9c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c9c8:	4313      	orrs	r3, r2
 800c9ca:	d102      	bne.n	800c9d2 <_printf_float+0x29e>
 800c9cc:	6823      	ldr	r3, [r4, #0]
 800c9ce:	07d9      	lsls	r1, r3, #31
 800c9d0:	d5d8      	bpl.n	800c984 <_printf_float+0x250>
 800c9d2:	ee18 3a10 	vmov	r3, s16
 800c9d6:	4652      	mov	r2, sl
 800c9d8:	4631      	mov	r1, r6
 800c9da:	4628      	mov	r0, r5
 800c9dc:	47b8      	blx	r7
 800c9de:	3001      	adds	r0, #1
 800c9e0:	f43f af09 	beq.w	800c7f6 <_printf_float+0xc2>
 800c9e4:	f04f 0900 	mov.w	r9, #0
 800c9e8:	f104 0a1a 	add.w	sl, r4, #26
 800c9ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ee:	425b      	negs	r3, r3
 800c9f0:	454b      	cmp	r3, r9
 800c9f2:	dc01      	bgt.n	800c9f8 <_printf_float+0x2c4>
 800c9f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c9f6:	e792      	b.n	800c91e <_printf_float+0x1ea>
 800c9f8:	2301      	movs	r3, #1
 800c9fa:	4652      	mov	r2, sl
 800c9fc:	4631      	mov	r1, r6
 800c9fe:	4628      	mov	r0, r5
 800ca00:	47b8      	blx	r7
 800ca02:	3001      	adds	r0, #1
 800ca04:	f43f aef7 	beq.w	800c7f6 <_printf_float+0xc2>
 800ca08:	f109 0901 	add.w	r9, r9, #1
 800ca0c:	e7ee      	b.n	800c9ec <_printf_float+0x2b8>
 800ca0e:	bf00      	nop
 800ca10:	7fefffff 	.word	0x7fefffff
 800ca14:	0801119c 	.word	0x0801119c
 800ca18:	080111a0 	.word	0x080111a0
 800ca1c:	080111a8 	.word	0x080111a8
 800ca20:	080111a4 	.word	0x080111a4
 800ca24:	080111ac 	.word	0x080111ac
 800ca28:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ca2a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	bfa8      	it	ge
 800ca30:	461a      	movge	r2, r3
 800ca32:	2a00      	cmp	r2, #0
 800ca34:	4691      	mov	r9, r2
 800ca36:	dc37      	bgt.n	800caa8 <_printf_float+0x374>
 800ca38:	f04f 0b00 	mov.w	fp, #0
 800ca3c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca40:	f104 021a 	add.w	r2, r4, #26
 800ca44:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800ca46:	9305      	str	r3, [sp, #20]
 800ca48:	eba3 0309 	sub.w	r3, r3, r9
 800ca4c:	455b      	cmp	r3, fp
 800ca4e:	dc33      	bgt.n	800cab8 <_printf_float+0x384>
 800ca50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca54:	429a      	cmp	r2, r3
 800ca56:	db3b      	blt.n	800cad0 <_printf_float+0x39c>
 800ca58:	6823      	ldr	r3, [r4, #0]
 800ca5a:	07da      	lsls	r2, r3, #31
 800ca5c:	d438      	bmi.n	800cad0 <_printf_float+0x39c>
 800ca5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca60:	9a05      	ldr	r2, [sp, #20]
 800ca62:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ca64:	1a9a      	subs	r2, r3, r2
 800ca66:	eba3 0901 	sub.w	r9, r3, r1
 800ca6a:	4591      	cmp	r9, r2
 800ca6c:	bfa8      	it	ge
 800ca6e:	4691      	movge	r9, r2
 800ca70:	f1b9 0f00 	cmp.w	r9, #0
 800ca74:	dc35      	bgt.n	800cae2 <_printf_float+0x3ae>
 800ca76:	f04f 0800 	mov.w	r8, #0
 800ca7a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800ca7e:	f104 0a1a 	add.w	sl, r4, #26
 800ca82:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800ca86:	1a9b      	subs	r3, r3, r2
 800ca88:	eba3 0309 	sub.w	r3, r3, r9
 800ca8c:	4543      	cmp	r3, r8
 800ca8e:	f77f af79 	ble.w	800c984 <_printf_float+0x250>
 800ca92:	2301      	movs	r3, #1
 800ca94:	4652      	mov	r2, sl
 800ca96:	4631      	mov	r1, r6
 800ca98:	4628      	mov	r0, r5
 800ca9a:	47b8      	blx	r7
 800ca9c:	3001      	adds	r0, #1
 800ca9e:	f43f aeaa 	beq.w	800c7f6 <_printf_float+0xc2>
 800caa2:	f108 0801 	add.w	r8, r8, #1
 800caa6:	e7ec      	b.n	800ca82 <_printf_float+0x34e>
 800caa8:	4613      	mov	r3, r2
 800caaa:	4631      	mov	r1, r6
 800caac:	4642      	mov	r2, r8
 800caae:	4628      	mov	r0, r5
 800cab0:	47b8      	blx	r7
 800cab2:	3001      	adds	r0, #1
 800cab4:	d1c0      	bne.n	800ca38 <_printf_float+0x304>
 800cab6:	e69e      	b.n	800c7f6 <_printf_float+0xc2>
 800cab8:	2301      	movs	r3, #1
 800caba:	4631      	mov	r1, r6
 800cabc:	4628      	mov	r0, r5
 800cabe:	9205      	str	r2, [sp, #20]
 800cac0:	47b8      	blx	r7
 800cac2:	3001      	adds	r0, #1
 800cac4:	f43f ae97 	beq.w	800c7f6 <_printf_float+0xc2>
 800cac8:	9a05      	ldr	r2, [sp, #20]
 800caca:	f10b 0b01 	add.w	fp, fp, #1
 800cace:	e7b9      	b.n	800ca44 <_printf_float+0x310>
 800cad0:	ee18 3a10 	vmov	r3, s16
 800cad4:	4652      	mov	r2, sl
 800cad6:	4631      	mov	r1, r6
 800cad8:	4628      	mov	r0, r5
 800cada:	47b8      	blx	r7
 800cadc:	3001      	adds	r0, #1
 800cade:	d1be      	bne.n	800ca5e <_printf_float+0x32a>
 800cae0:	e689      	b.n	800c7f6 <_printf_float+0xc2>
 800cae2:	9a05      	ldr	r2, [sp, #20]
 800cae4:	464b      	mov	r3, r9
 800cae6:	4442      	add	r2, r8
 800cae8:	4631      	mov	r1, r6
 800caea:	4628      	mov	r0, r5
 800caec:	47b8      	blx	r7
 800caee:	3001      	adds	r0, #1
 800caf0:	d1c1      	bne.n	800ca76 <_printf_float+0x342>
 800caf2:	e680      	b.n	800c7f6 <_printf_float+0xc2>
 800caf4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800caf6:	2a01      	cmp	r2, #1
 800caf8:	dc01      	bgt.n	800cafe <_printf_float+0x3ca>
 800cafa:	07db      	lsls	r3, r3, #31
 800cafc:	d538      	bpl.n	800cb70 <_printf_float+0x43c>
 800cafe:	2301      	movs	r3, #1
 800cb00:	4642      	mov	r2, r8
 800cb02:	4631      	mov	r1, r6
 800cb04:	4628      	mov	r0, r5
 800cb06:	47b8      	blx	r7
 800cb08:	3001      	adds	r0, #1
 800cb0a:	f43f ae74 	beq.w	800c7f6 <_printf_float+0xc2>
 800cb0e:	ee18 3a10 	vmov	r3, s16
 800cb12:	4652      	mov	r2, sl
 800cb14:	4631      	mov	r1, r6
 800cb16:	4628      	mov	r0, r5
 800cb18:	47b8      	blx	r7
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	f43f ae6b 	beq.w	800c7f6 <_printf_float+0xc2>
 800cb20:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cb24:	2200      	movs	r2, #0
 800cb26:	2300      	movs	r3, #0
 800cb28:	f7f3 ffd6 	bl	8000ad8 <__aeabi_dcmpeq>
 800cb2c:	b9d8      	cbnz	r0, 800cb66 <_printf_float+0x432>
 800cb2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb30:	f108 0201 	add.w	r2, r8, #1
 800cb34:	3b01      	subs	r3, #1
 800cb36:	4631      	mov	r1, r6
 800cb38:	4628      	mov	r0, r5
 800cb3a:	47b8      	blx	r7
 800cb3c:	3001      	adds	r0, #1
 800cb3e:	d10e      	bne.n	800cb5e <_printf_float+0x42a>
 800cb40:	e659      	b.n	800c7f6 <_printf_float+0xc2>
 800cb42:	2301      	movs	r3, #1
 800cb44:	4652      	mov	r2, sl
 800cb46:	4631      	mov	r1, r6
 800cb48:	4628      	mov	r0, r5
 800cb4a:	47b8      	blx	r7
 800cb4c:	3001      	adds	r0, #1
 800cb4e:	f43f ae52 	beq.w	800c7f6 <_printf_float+0xc2>
 800cb52:	f108 0801 	add.w	r8, r8, #1
 800cb56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	4543      	cmp	r3, r8
 800cb5c:	dcf1      	bgt.n	800cb42 <_printf_float+0x40e>
 800cb5e:	464b      	mov	r3, r9
 800cb60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800cb64:	e6dc      	b.n	800c920 <_printf_float+0x1ec>
 800cb66:	f04f 0800 	mov.w	r8, #0
 800cb6a:	f104 0a1a 	add.w	sl, r4, #26
 800cb6e:	e7f2      	b.n	800cb56 <_printf_float+0x422>
 800cb70:	2301      	movs	r3, #1
 800cb72:	4642      	mov	r2, r8
 800cb74:	e7df      	b.n	800cb36 <_printf_float+0x402>
 800cb76:	2301      	movs	r3, #1
 800cb78:	464a      	mov	r2, r9
 800cb7a:	4631      	mov	r1, r6
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	47b8      	blx	r7
 800cb80:	3001      	adds	r0, #1
 800cb82:	f43f ae38 	beq.w	800c7f6 <_printf_float+0xc2>
 800cb86:	f108 0801 	add.w	r8, r8, #1
 800cb8a:	68e3      	ldr	r3, [r4, #12]
 800cb8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800cb8e:	1a5b      	subs	r3, r3, r1
 800cb90:	4543      	cmp	r3, r8
 800cb92:	dcf0      	bgt.n	800cb76 <_printf_float+0x442>
 800cb94:	e6fa      	b.n	800c98c <_printf_float+0x258>
 800cb96:	f04f 0800 	mov.w	r8, #0
 800cb9a:	f104 0919 	add.w	r9, r4, #25
 800cb9e:	e7f4      	b.n	800cb8a <_printf_float+0x456>

0800cba0 <_printf_common>:
 800cba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cba4:	4616      	mov	r6, r2
 800cba6:	4699      	mov	r9, r3
 800cba8:	688a      	ldr	r2, [r1, #8]
 800cbaa:	690b      	ldr	r3, [r1, #16]
 800cbac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cbb0:	4293      	cmp	r3, r2
 800cbb2:	bfb8      	it	lt
 800cbb4:	4613      	movlt	r3, r2
 800cbb6:	6033      	str	r3, [r6, #0]
 800cbb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cbbc:	4607      	mov	r7, r0
 800cbbe:	460c      	mov	r4, r1
 800cbc0:	b10a      	cbz	r2, 800cbc6 <_printf_common+0x26>
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	6033      	str	r3, [r6, #0]
 800cbc6:	6823      	ldr	r3, [r4, #0]
 800cbc8:	0699      	lsls	r1, r3, #26
 800cbca:	bf42      	ittt	mi
 800cbcc:	6833      	ldrmi	r3, [r6, #0]
 800cbce:	3302      	addmi	r3, #2
 800cbd0:	6033      	strmi	r3, [r6, #0]
 800cbd2:	6825      	ldr	r5, [r4, #0]
 800cbd4:	f015 0506 	ands.w	r5, r5, #6
 800cbd8:	d106      	bne.n	800cbe8 <_printf_common+0x48>
 800cbda:	f104 0a19 	add.w	sl, r4, #25
 800cbde:	68e3      	ldr	r3, [r4, #12]
 800cbe0:	6832      	ldr	r2, [r6, #0]
 800cbe2:	1a9b      	subs	r3, r3, r2
 800cbe4:	42ab      	cmp	r3, r5
 800cbe6:	dc26      	bgt.n	800cc36 <_printf_common+0x96>
 800cbe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cbec:	1e13      	subs	r3, r2, #0
 800cbee:	6822      	ldr	r2, [r4, #0]
 800cbf0:	bf18      	it	ne
 800cbf2:	2301      	movne	r3, #1
 800cbf4:	0692      	lsls	r2, r2, #26
 800cbf6:	d42b      	bmi.n	800cc50 <_printf_common+0xb0>
 800cbf8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cbfc:	4649      	mov	r1, r9
 800cbfe:	4638      	mov	r0, r7
 800cc00:	47c0      	blx	r8
 800cc02:	3001      	adds	r0, #1
 800cc04:	d01e      	beq.n	800cc44 <_printf_common+0xa4>
 800cc06:	6823      	ldr	r3, [r4, #0]
 800cc08:	68e5      	ldr	r5, [r4, #12]
 800cc0a:	6832      	ldr	r2, [r6, #0]
 800cc0c:	f003 0306 	and.w	r3, r3, #6
 800cc10:	2b04      	cmp	r3, #4
 800cc12:	bf08      	it	eq
 800cc14:	1aad      	subeq	r5, r5, r2
 800cc16:	68a3      	ldr	r3, [r4, #8]
 800cc18:	6922      	ldr	r2, [r4, #16]
 800cc1a:	bf0c      	ite	eq
 800cc1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cc20:	2500      	movne	r5, #0
 800cc22:	4293      	cmp	r3, r2
 800cc24:	bfc4      	itt	gt
 800cc26:	1a9b      	subgt	r3, r3, r2
 800cc28:	18ed      	addgt	r5, r5, r3
 800cc2a:	2600      	movs	r6, #0
 800cc2c:	341a      	adds	r4, #26
 800cc2e:	42b5      	cmp	r5, r6
 800cc30:	d11a      	bne.n	800cc68 <_printf_common+0xc8>
 800cc32:	2000      	movs	r0, #0
 800cc34:	e008      	b.n	800cc48 <_printf_common+0xa8>
 800cc36:	2301      	movs	r3, #1
 800cc38:	4652      	mov	r2, sl
 800cc3a:	4649      	mov	r1, r9
 800cc3c:	4638      	mov	r0, r7
 800cc3e:	47c0      	blx	r8
 800cc40:	3001      	adds	r0, #1
 800cc42:	d103      	bne.n	800cc4c <_printf_common+0xac>
 800cc44:	f04f 30ff 	mov.w	r0, #4294967295
 800cc48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc4c:	3501      	adds	r5, #1
 800cc4e:	e7c6      	b.n	800cbde <_printf_common+0x3e>
 800cc50:	18e1      	adds	r1, r4, r3
 800cc52:	1c5a      	adds	r2, r3, #1
 800cc54:	2030      	movs	r0, #48	; 0x30
 800cc56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cc5a:	4422      	add	r2, r4
 800cc5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cc60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cc64:	3302      	adds	r3, #2
 800cc66:	e7c7      	b.n	800cbf8 <_printf_common+0x58>
 800cc68:	2301      	movs	r3, #1
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	4649      	mov	r1, r9
 800cc6e:	4638      	mov	r0, r7
 800cc70:	47c0      	blx	r8
 800cc72:	3001      	adds	r0, #1
 800cc74:	d0e6      	beq.n	800cc44 <_printf_common+0xa4>
 800cc76:	3601      	adds	r6, #1
 800cc78:	e7d9      	b.n	800cc2e <_printf_common+0x8e>
	...

0800cc7c <_printf_i>:
 800cc7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc80:	7e0f      	ldrb	r7, [r1, #24]
 800cc82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cc84:	2f78      	cmp	r7, #120	; 0x78
 800cc86:	4691      	mov	r9, r2
 800cc88:	4680      	mov	r8, r0
 800cc8a:	460c      	mov	r4, r1
 800cc8c:	469a      	mov	sl, r3
 800cc8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800cc92:	d807      	bhi.n	800cca4 <_printf_i+0x28>
 800cc94:	2f62      	cmp	r7, #98	; 0x62
 800cc96:	d80a      	bhi.n	800ccae <_printf_i+0x32>
 800cc98:	2f00      	cmp	r7, #0
 800cc9a:	f000 80d8 	beq.w	800ce4e <_printf_i+0x1d2>
 800cc9e:	2f58      	cmp	r7, #88	; 0x58
 800cca0:	f000 80a3 	beq.w	800cdea <_printf_i+0x16e>
 800cca4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cca8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ccac:	e03a      	b.n	800cd24 <_printf_i+0xa8>
 800ccae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ccb2:	2b15      	cmp	r3, #21
 800ccb4:	d8f6      	bhi.n	800cca4 <_printf_i+0x28>
 800ccb6:	a101      	add	r1, pc, #4	; (adr r1, 800ccbc <_printf_i+0x40>)
 800ccb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ccbc:	0800cd15 	.word	0x0800cd15
 800ccc0:	0800cd29 	.word	0x0800cd29
 800ccc4:	0800cca5 	.word	0x0800cca5
 800ccc8:	0800cca5 	.word	0x0800cca5
 800cccc:	0800cca5 	.word	0x0800cca5
 800ccd0:	0800cca5 	.word	0x0800cca5
 800ccd4:	0800cd29 	.word	0x0800cd29
 800ccd8:	0800cca5 	.word	0x0800cca5
 800ccdc:	0800cca5 	.word	0x0800cca5
 800cce0:	0800cca5 	.word	0x0800cca5
 800cce4:	0800cca5 	.word	0x0800cca5
 800cce8:	0800ce35 	.word	0x0800ce35
 800ccec:	0800cd59 	.word	0x0800cd59
 800ccf0:	0800ce17 	.word	0x0800ce17
 800ccf4:	0800cca5 	.word	0x0800cca5
 800ccf8:	0800cca5 	.word	0x0800cca5
 800ccfc:	0800ce57 	.word	0x0800ce57
 800cd00:	0800cca5 	.word	0x0800cca5
 800cd04:	0800cd59 	.word	0x0800cd59
 800cd08:	0800cca5 	.word	0x0800cca5
 800cd0c:	0800cca5 	.word	0x0800cca5
 800cd10:	0800ce1f 	.word	0x0800ce1f
 800cd14:	682b      	ldr	r3, [r5, #0]
 800cd16:	1d1a      	adds	r2, r3, #4
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	602a      	str	r2, [r5, #0]
 800cd1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cd20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cd24:	2301      	movs	r3, #1
 800cd26:	e0a3      	b.n	800ce70 <_printf_i+0x1f4>
 800cd28:	6820      	ldr	r0, [r4, #0]
 800cd2a:	6829      	ldr	r1, [r5, #0]
 800cd2c:	0606      	lsls	r6, r0, #24
 800cd2e:	f101 0304 	add.w	r3, r1, #4
 800cd32:	d50a      	bpl.n	800cd4a <_printf_i+0xce>
 800cd34:	680e      	ldr	r6, [r1, #0]
 800cd36:	602b      	str	r3, [r5, #0]
 800cd38:	2e00      	cmp	r6, #0
 800cd3a:	da03      	bge.n	800cd44 <_printf_i+0xc8>
 800cd3c:	232d      	movs	r3, #45	; 0x2d
 800cd3e:	4276      	negs	r6, r6
 800cd40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cd44:	485e      	ldr	r0, [pc, #376]	; (800cec0 <_printf_i+0x244>)
 800cd46:	230a      	movs	r3, #10
 800cd48:	e019      	b.n	800cd7e <_printf_i+0x102>
 800cd4a:	680e      	ldr	r6, [r1, #0]
 800cd4c:	602b      	str	r3, [r5, #0]
 800cd4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cd52:	bf18      	it	ne
 800cd54:	b236      	sxthne	r6, r6
 800cd56:	e7ef      	b.n	800cd38 <_printf_i+0xbc>
 800cd58:	682b      	ldr	r3, [r5, #0]
 800cd5a:	6820      	ldr	r0, [r4, #0]
 800cd5c:	1d19      	adds	r1, r3, #4
 800cd5e:	6029      	str	r1, [r5, #0]
 800cd60:	0601      	lsls	r1, r0, #24
 800cd62:	d501      	bpl.n	800cd68 <_printf_i+0xec>
 800cd64:	681e      	ldr	r6, [r3, #0]
 800cd66:	e002      	b.n	800cd6e <_printf_i+0xf2>
 800cd68:	0646      	lsls	r6, r0, #25
 800cd6a:	d5fb      	bpl.n	800cd64 <_printf_i+0xe8>
 800cd6c:	881e      	ldrh	r6, [r3, #0]
 800cd6e:	4854      	ldr	r0, [pc, #336]	; (800cec0 <_printf_i+0x244>)
 800cd70:	2f6f      	cmp	r7, #111	; 0x6f
 800cd72:	bf0c      	ite	eq
 800cd74:	2308      	moveq	r3, #8
 800cd76:	230a      	movne	r3, #10
 800cd78:	2100      	movs	r1, #0
 800cd7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800cd7e:	6865      	ldr	r5, [r4, #4]
 800cd80:	60a5      	str	r5, [r4, #8]
 800cd82:	2d00      	cmp	r5, #0
 800cd84:	bfa2      	ittt	ge
 800cd86:	6821      	ldrge	r1, [r4, #0]
 800cd88:	f021 0104 	bicge.w	r1, r1, #4
 800cd8c:	6021      	strge	r1, [r4, #0]
 800cd8e:	b90e      	cbnz	r6, 800cd94 <_printf_i+0x118>
 800cd90:	2d00      	cmp	r5, #0
 800cd92:	d04d      	beq.n	800ce30 <_printf_i+0x1b4>
 800cd94:	4615      	mov	r5, r2
 800cd96:	fbb6 f1f3 	udiv	r1, r6, r3
 800cd9a:	fb03 6711 	mls	r7, r3, r1, r6
 800cd9e:	5dc7      	ldrb	r7, [r0, r7]
 800cda0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cda4:	4637      	mov	r7, r6
 800cda6:	42bb      	cmp	r3, r7
 800cda8:	460e      	mov	r6, r1
 800cdaa:	d9f4      	bls.n	800cd96 <_printf_i+0x11a>
 800cdac:	2b08      	cmp	r3, #8
 800cdae:	d10b      	bne.n	800cdc8 <_printf_i+0x14c>
 800cdb0:	6823      	ldr	r3, [r4, #0]
 800cdb2:	07de      	lsls	r6, r3, #31
 800cdb4:	d508      	bpl.n	800cdc8 <_printf_i+0x14c>
 800cdb6:	6923      	ldr	r3, [r4, #16]
 800cdb8:	6861      	ldr	r1, [r4, #4]
 800cdba:	4299      	cmp	r1, r3
 800cdbc:	bfde      	ittt	le
 800cdbe:	2330      	movle	r3, #48	; 0x30
 800cdc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cdc4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cdc8:	1b52      	subs	r2, r2, r5
 800cdca:	6122      	str	r2, [r4, #16]
 800cdcc:	f8cd a000 	str.w	sl, [sp]
 800cdd0:	464b      	mov	r3, r9
 800cdd2:	aa03      	add	r2, sp, #12
 800cdd4:	4621      	mov	r1, r4
 800cdd6:	4640      	mov	r0, r8
 800cdd8:	f7ff fee2 	bl	800cba0 <_printf_common>
 800cddc:	3001      	adds	r0, #1
 800cdde:	d14c      	bne.n	800ce7a <_printf_i+0x1fe>
 800cde0:	f04f 30ff 	mov.w	r0, #4294967295
 800cde4:	b004      	add	sp, #16
 800cde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdea:	4835      	ldr	r0, [pc, #212]	; (800cec0 <_printf_i+0x244>)
 800cdec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cdf0:	6829      	ldr	r1, [r5, #0]
 800cdf2:	6823      	ldr	r3, [r4, #0]
 800cdf4:	f851 6b04 	ldr.w	r6, [r1], #4
 800cdf8:	6029      	str	r1, [r5, #0]
 800cdfa:	061d      	lsls	r5, r3, #24
 800cdfc:	d514      	bpl.n	800ce28 <_printf_i+0x1ac>
 800cdfe:	07df      	lsls	r7, r3, #31
 800ce00:	bf44      	itt	mi
 800ce02:	f043 0320 	orrmi.w	r3, r3, #32
 800ce06:	6023      	strmi	r3, [r4, #0]
 800ce08:	b91e      	cbnz	r6, 800ce12 <_printf_i+0x196>
 800ce0a:	6823      	ldr	r3, [r4, #0]
 800ce0c:	f023 0320 	bic.w	r3, r3, #32
 800ce10:	6023      	str	r3, [r4, #0]
 800ce12:	2310      	movs	r3, #16
 800ce14:	e7b0      	b.n	800cd78 <_printf_i+0xfc>
 800ce16:	6823      	ldr	r3, [r4, #0]
 800ce18:	f043 0320 	orr.w	r3, r3, #32
 800ce1c:	6023      	str	r3, [r4, #0]
 800ce1e:	2378      	movs	r3, #120	; 0x78
 800ce20:	4828      	ldr	r0, [pc, #160]	; (800cec4 <_printf_i+0x248>)
 800ce22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ce26:	e7e3      	b.n	800cdf0 <_printf_i+0x174>
 800ce28:	0659      	lsls	r1, r3, #25
 800ce2a:	bf48      	it	mi
 800ce2c:	b2b6      	uxthmi	r6, r6
 800ce2e:	e7e6      	b.n	800cdfe <_printf_i+0x182>
 800ce30:	4615      	mov	r5, r2
 800ce32:	e7bb      	b.n	800cdac <_printf_i+0x130>
 800ce34:	682b      	ldr	r3, [r5, #0]
 800ce36:	6826      	ldr	r6, [r4, #0]
 800ce38:	6961      	ldr	r1, [r4, #20]
 800ce3a:	1d18      	adds	r0, r3, #4
 800ce3c:	6028      	str	r0, [r5, #0]
 800ce3e:	0635      	lsls	r5, r6, #24
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	d501      	bpl.n	800ce48 <_printf_i+0x1cc>
 800ce44:	6019      	str	r1, [r3, #0]
 800ce46:	e002      	b.n	800ce4e <_printf_i+0x1d2>
 800ce48:	0670      	lsls	r0, r6, #25
 800ce4a:	d5fb      	bpl.n	800ce44 <_printf_i+0x1c8>
 800ce4c:	8019      	strh	r1, [r3, #0]
 800ce4e:	2300      	movs	r3, #0
 800ce50:	6123      	str	r3, [r4, #16]
 800ce52:	4615      	mov	r5, r2
 800ce54:	e7ba      	b.n	800cdcc <_printf_i+0x150>
 800ce56:	682b      	ldr	r3, [r5, #0]
 800ce58:	1d1a      	adds	r2, r3, #4
 800ce5a:	602a      	str	r2, [r5, #0]
 800ce5c:	681d      	ldr	r5, [r3, #0]
 800ce5e:	6862      	ldr	r2, [r4, #4]
 800ce60:	2100      	movs	r1, #0
 800ce62:	4628      	mov	r0, r5
 800ce64:	f7f3 f9c4 	bl	80001f0 <memchr>
 800ce68:	b108      	cbz	r0, 800ce6e <_printf_i+0x1f2>
 800ce6a:	1b40      	subs	r0, r0, r5
 800ce6c:	6060      	str	r0, [r4, #4]
 800ce6e:	6863      	ldr	r3, [r4, #4]
 800ce70:	6123      	str	r3, [r4, #16]
 800ce72:	2300      	movs	r3, #0
 800ce74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ce78:	e7a8      	b.n	800cdcc <_printf_i+0x150>
 800ce7a:	6923      	ldr	r3, [r4, #16]
 800ce7c:	462a      	mov	r2, r5
 800ce7e:	4649      	mov	r1, r9
 800ce80:	4640      	mov	r0, r8
 800ce82:	47d0      	blx	sl
 800ce84:	3001      	adds	r0, #1
 800ce86:	d0ab      	beq.n	800cde0 <_printf_i+0x164>
 800ce88:	6823      	ldr	r3, [r4, #0]
 800ce8a:	079b      	lsls	r3, r3, #30
 800ce8c:	d413      	bmi.n	800ceb6 <_printf_i+0x23a>
 800ce8e:	68e0      	ldr	r0, [r4, #12]
 800ce90:	9b03      	ldr	r3, [sp, #12]
 800ce92:	4298      	cmp	r0, r3
 800ce94:	bfb8      	it	lt
 800ce96:	4618      	movlt	r0, r3
 800ce98:	e7a4      	b.n	800cde4 <_printf_i+0x168>
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	4632      	mov	r2, r6
 800ce9e:	4649      	mov	r1, r9
 800cea0:	4640      	mov	r0, r8
 800cea2:	47d0      	blx	sl
 800cea4:	3001      	adds	r0, #1
 800cea6:	d09b      	beq.n	800cde0 <_printf_i+0x164>
 800cea8:	3501      	adds	r5, #1
 800ceaa:	68e3      	ldr	r3, [r4, #12]
 800ceac:	9903      	ldr	r1, [sp, #12]
 800ceae:	1a5b      	subs	r3, r3, r1
 800ceb0:	42ab      	cmp	r3, r5
 800ceb2:	dcf2      	bgt.n	800ce9a <_printf_i+0x21e>
 800ceb4:	e7eb      	b.n	800ce8e <_printf_i+0x212>
 800ceb6:	2500      	movs	r5, #0
 800ceb8:	f104 0619 	add.w	r6, r4, #25
 800cebc:	e7f5      	b.n	800ceaa <_printf_i+0x22e>
 800cebe:	bf00      	nop
 800cec0:	080111ae 	.word	0x080111ae
 800cec4:	080111bf 	.word	0x080111bf

0800cec8 <_scanf_float>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	b087      	sub	sp, #28
 800cece:	4617      	mov	r7, r2
 800ced0:	9303      	str	r3, [sp, #12]
 800ced2:	688b      	ldr	r3, [r1, #8]
 800ced4:	1e5a      	subs	r2, r3, #1
 800ced6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ceda:	bf83      	ittte	hi
 800cedc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800cee0:	195b      	addhi	r3, r3, r5
 800cee2:	9302      	strhi	r3, [sp, #8]
 800cee4:	2300      	movls	r3, #0
 800cee6:	bf86      	itte	hi
 800cee8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ceec:	608b      	strhi	r3, [r1, #8]
 800ceee:	9302      	strls	r3, [sp, #8]
 800cef0:	680b      	ldr	r3, [r1, #0]
 800cef2:	468b      	mov	fp, r1
 800cef4:	2500      	movs	r5, #0
 800cef6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800cefa:	f84b 3b1c 	str.w	r3, [fp], #28
 800cefe:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800cf02:	4680      	mov	r8, r0
 800cf04:	460c      	mov	r4, r1
 800cf06:	465e      	mov	r6, fp
 800cf08:	46aa      	mov	sl, r5
 800cf0a:	46a9      	mov	r9, r5
 800cf0c:	9501      	str	r5, [sp, #4]
 800cf0e:	68a2      	ldr	r2, [r4, #8]
 800cf10:	b152      	cbz	r2, 800cf28 <_scanf_float+0x60>
 800cf12:	683b      	ldr	r3, [r7, #0]
 800cf14:	781b      	ldrb	r3, [r3, #0]
 800cf16:	2b4e      	cmp	r3, #78	; 0x4e
 800cf18:	d864      	bhi.n	800cfe4 <_scanf_float+0x11c>
 800cf1a:	2b40      	cmp	r3, #64	; 0x40
 800cf1c:	d83c      	bhi.n	800cf98 <_scanf_float+0xd0>
 800cf1e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800cf22:	b2c8      	uxtb	r0, r1
 800cf24:	280e      	cmp	r0, #14
 800cf26:	d93a      	bls.n	800cf9e <_scanf_float+0xd6>
 800cf28:	f1b9 0f00 	cmp.w	r9, #0
 800cf2c:	d003      	beq.n	800cf36 <_scanf_float+0x6e>
 800cf2e:	6823      	ldr	r3, [r4, #0]
 800cf30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cf3a:	f1ba 0f01 	cmp.w	sl, #1
 800cf3e:	f200 8113 	bhi.w	800d168 <_scanf_float+0x2a0>
 800cf42:	455e      	cmp	r6, fp
 800cf44:	f200 8105 	bhi.w	800d152 <_scanf_float+0x28a>
 800cf48:	2501      	movs	r5, #1
 800cf4a:	4628      	mov	r0, r5
 800cf4c:	b007      	add	sp, #28
 800cf4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf52:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800cf56:	2a0d      	cmp	r2, #13
 800cf58:	d8e6      	bhi.n	800cf28 <_scanf_float+0x60>
 800cf5a:	a101      	add	r1, pc, #4	; (adr r1, 800cf60 <_scanf_float+0x98>)
 800cf5c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800cf60:	0800d09f 	.word	0x0800d09f
 800cf64:	0800cf29 	.word	0x0800cf29
 800cf68:	0800cf29 	.word	0x0800cf29
 800cf6c:	0800cf29 	.word	0x0800cf29
 800cf70:	0800d0ff 	.word	0x0800d0ff
 800cf74:	0800d0d7 	.word	0x0800d0d7
 800cf78:	0800cf29 	.word	0x0800cf29
 800cf7c:	0800cf29 	.word	0x0800cf29
 800cf80:	0800d0ad 	.word	0x0800d0ad
 800cf84:	0800cf29 	.word	0x0800cf29
 800cf88:	0800cf29 	.word	0x0800cf29
 800cf8c:	0800cf29 	.word	0x0800cf29
 800cf90:	0800cf29 	.word	0x0800cf29
 800cf94:	0800d065 	.word	0x0800d065
 800cf98:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800cf9c:	e7db      	b.n	800cf56 <_scanf_float+0x8e>
 800cf9e:	290e      	cmp	r1, #14
 800cfa0:	d8c2      	bhi.n	800cf28 <_scanf_float+0x60>
 800cfa2:	a001      	add	r0, pc, #4	; (adr r0, 800cfa8 <_scanf_float+0xe0>)
 800cfa4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800cfa8:	0800d057 	.word	0x0800d057
 800cfac:	0800cf29 	.word	0x0800cf29
 800cfb0:	0800d057 	.word	0x0800d057
 800cfb4:	0800d0eb 	.word	0x0800d0eb
 800cfb8:	0800cf29 	.word	0x0800cf29
 800cfbc:	0800d005 	.word	0x0800d005
 800cfc0:	0800d041 	.word	0x0800d041
 800cfc4:	0800d041 	.word	0x0800d041
 800cfc8:	0800d041 	.word	0x0800d041
 800cfcc:	0800d041 	.word	0x0800d041
 800cfd0:	0800d041 	.word	0x0800d041
 800cfd4:	0800d041 	.word	0x0800d041
 800cfd8:	0800d041 	.word	0x0800d041
 800cfdc:	0800d041 	.word	0x0800d041
 800cfe0:	0800d041 	.word	0x0800d041
 800cfe4:	2b6e      	cmp	r3, #110	; 0x6e
 800cfe6:	d809      	bhi.n	800cffc <_scanf_float+0x134>
 800cfe8:	2b60      	cmp	r3, #96	; 0x60
 800cfea:	d8b2      	bhi.n	800cf52 <_scanf_float+0x8a>
 800cfec:	2b54      	cmp	r3, #84	; 0x54
 800cfee:	d077      	beq.n	800d0e0 <_scanf_float+0x218>
 800cff0:	2b59      	cmp	r3, #89	; 0x59
 800cff2:	d199      	bne.n	800cf28 <_scanf_float+0x60>
 800cff4:	2d07      	cmp	r5, #7
 800cff6:	d197      	bne.n	800cf28 <_scanf_float+0x60>
 800cff8:	2508      	movs	r5, #8
 800cffa:	e029      	b.n	800d050 <_scanf_float+0x188>
 800cffc:	2b74      	cmp	r3, #116	; 0x74
 800cffe:	d06f      	beq.n	800d0e0 <_scanf_float+0x218>
 800d000:	2b79      	cmp	r3, #121	; 0x79
 800d002:	e7f6      	b.n	800cff2 <_scanf_float+0x12a>
 800d004:	6821      	ldr	r1, [r4, #0]
 800d006:	05c8      	lsls	r0, r1, #23
 800d008:	d51a      	bpl.n	800d040 <_scanf_float+0x178>
 800d00a:	9b02      	ldr	r3, [sp, #8]
 800d00c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800d010:	6021      	str	r1, [r4, #0]
 800d012:	f109 0901 	add.w	r9, r9, #1
 800d016:	b11b      	cbz	r3, 800d020 <_scanf_float+0x158>
 800d018:	3b01      	subs	r3, #1
 800d01a:	3201      	adds	r2, #1
 800d01c:	9302      	str	r3, [sp, #8]
 800d01e:	60a2      	str	r2, [r4, #8]
 800d020:	68a3      	ldr	r3, [r4, #8]
 800d022:	3b01      	subs	r3, #1
 800d024:	60a3      	str	r3, [r4, #8]
 800d026:	6923      	ldr	r3, [r4, #16]
 800d028:	3301      	adds	r3, #1
 800d02a:	6123      	str	r3, [r4, #16]
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	3b01      	subs	r3, #1
 800d030:	2b00      	cmp	r3, #0
 800d032:	607b      	str	r3, [r7, #4]
 800d034:	f340 8084 	ble.w	800d140 <_scanf_float+0x278>
 800d038:	683b      	ldr	r3, [r7, #0]
 800d03a:	3301      	adds	r3, #1
 800d03c:	603b      	str	r3, [r7, #0]
 800d03e:	e766      	b.n	800cf0e <_scanf_float+0x46>
 800d040:	eb1a 0f05 	cmn.w	sl, r5
 800d044:	f47f af70 	bne.w	800cf28 <_scanf_float+0x60>
 800d048:	6822      	ldr	r2, [r4, #0]
 800d04a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800d04e:	6022      	str	r2, [r4, #0]
 800d050:	f806 3b01 	strb.w	r3, [r6], #1
 800d054:	e7e4      	b.n	800d020 <_scanf_float+0x158>
 800d056:	6822      	ldr	r2, [r4, #0]
 800d058:	0610      	lsls	r0, r2, #24
 800d05a:	f57f af65 	bpl.w	800cf28 <_scanf_float+0x60>
 800d05e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d062:	e7f4      	b.n	800d04e <_scanf_float+0x186>
 800d064:	f1ba 0f00 	cmp.w	sl, #0
 800d068:	d10e      	bne.n	800d088 <_scanf_float+0x1c0>
 800d06a:	f1b9 0f00 	cmp.w	r9, #0
 800d06e:	d10e      	bne.n	800d08e <_scanf_float+0x1c6>
 800d070:	6822      	ldr	r2, [r4, #0]
 800d072:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d076:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d07a:	d108      	bne.n	800d08e <_scanf_float+0x1c6>
 800d07c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d080:	6022      	str	r2, [r4, #0]
 800d082:	f04f 0a01 	mov.w	sl, #1
 800d086:	e7e3      	b.n	800d050 <_scanf_float+0x188>
 800d088:	f1ba 0f02 	cmp.w	sl, #2
 800d08c:	d055      	beq.n	800d13a <_scanf_float+0x272>
 800d08e:	2d01      	cmp	r5, #1
 800d090:	d002      	beq.n	800d098 <_scanf_float+0x1d0>
 800d092:	2d04      	cmp	r5, #4
 800d094:	f47f af48 	bne.w	800cf28 <_scanf_float+0x60>
 800d098:	3501      	adds	r5, #1
 800d09a:	b2ed      	uxtb	r5, r5
 800d09c:	e7d8      	b.n	800d050 <_scanf_float+0x188>
 800d09e:	f1ba 0f01 	cmp.w	sl, #1
 800d0a2:	f47f af41 	bne.w	800cf28 <_scanf_float+0x60>
 800d0a6:	f04f 0a02 	mov.w	sl, #2
 800d0aa:	e7d1      	b.n	800d050 <_scanf_float+0x188>
 800d0ac:	b97d      	cbnz	r5, 800d0ce <_scanf_float+0x206>
 800d0ae:	f1b9 0f00 	cmp.w	r9, #0
 800d0b2:	f47f af3c 	bne.w	800cf2e <_scanf_float+0x66>
 800d0b6:	6822      	ldr	r2, [r4, #0]
 800d0b8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800d0bc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800d0c0:	f47f af39 	bne.w	800cf36 <_scanf_float+0x6e>
 800d0c4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d0c8:	6022      	str	r2, [r4, #0]
 800d0ca:	2501      	movs	r5, #1
 800d0cc:	e7c0      	b.n	800d050 <_scanf_float+0x188>
 800d0ce:	2d03      	cmp	r5, #3
 800d0d0:	d0e2      	beq.n	800d098 <_scanf_float+0x1d0>
 800d0d2:	2d05      	cmp	r5, #5
 800d0d4:	e7de      	b.n	800d094 <_scanf_float+0x1cc>
 800d0d6:	2d02      	cmp	r5, #2
 800d0d8:	f47f af26 	bne.w	800cf28 <_scanf_float+0x60>
 800d0dc:	2503      	movs	r5, #3
 800d0de:	e7b7      	b.n	800d050 <_scanf_float+0x188>
 800d0e0:	2d06      	cmp	r5, #6
 800d0e2:	f47f af21 	bne.w	800cf28 <_scanf_float+0x60>
 800d0e6:	2507      	movs	r5, #7
 800d0e8:	e7b2      	b.n	800d050 <_scanf_float+0x188>
 800d0ea:	6822      	ldr	r2, [r4, #0]
 800d0ec:	0591      	lsls	r1, r2, #22
 800d0ee:	f57f af1b 	bpl.w	800cf28 <_scanf_float+0x60>
 800d0f2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800d0f6:	6022      	str	r2, [r4, #0]
 800d0f8:	f8cd 9004 	str.w	r9, [sp, #4]
 800d0fc:	e7a8      	b.n	800d050 <_scanf_float+0x188>
 800d0fe:	6822      	ldr	r2, [r4, #0]
 800d100:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800d104:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800d108:	d006      	beq.n	800d118 <_scanf_float+0x250>
 800d10a:	0550      	lsls	r0, r2, #21
 800d10c:	f57f af0c 	bpl.w	800cf28 <_scanf_float+0x60>
 800d110:	f1b9 0f00 	cmp.w	r9, #0
 800d114:	f43f af0f 	beq.w	800cf36 <_scanf_float+0x6e>
 800d118:	0591      	lsls	r1, r2, #22
 800d11a:	bf58      	it	pl
 800d11c:	9901      	ldrpl	r1, [sp, #4]
 800d11e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800d122:	bf58      	it	pl
 800d124:	eba9 0101 	subpl.w	r1, r9, r1
 800d128:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800d12c:	bf58      	it	pl
 800d12e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800d132:	6022      	str	r2, [r4, #0]
 800d134:	f04f 0900 	mov.w	r9, #0
 800d138:	e78a      	b.n	800d050 <_scanf_float+0x188>
 800d13a:	f04f 0a03 	mov.w	sl, #3
 800d13e:	e787      	b.n	800d050 <_scanf_float+0x188>
 800d140:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800d144:	4639      	mov	r1, r7
 800d146:	4640      	mov	r0, r8
 800d148:	4798      	blx	r3
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f43f aedf 	beq.w	800cf0e <_scanf_float+0x46>
 800d150:	e6ea      	b.n	800cf28 <_scanf_float+0x60>
 800d152:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d15a:	463a      	mov	r2, r7
 800d15c:	4640      	mov	r0, r8
 800d15e:	4798      	blx	r3
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	3b01      	subs	r3, #1
 800d164:	6123      	str	r3, [r4, #16]
 800d166:	e6ec      	b.n	800cf42 <_scanf_float+0x7a>
 800d168:	1e6b      	subs	r3, r5, #1
 800d16a:	2b06      	cmp	r3, #6
 800d16c:	d825      	bhi.n	800d1ba <_scanf_float+0x2f2>
 800d16e:	2d02      	cmp	r5, #2
 800d170:	d836      	bhi.n	800d1e0 <_scanf_float+0x318>
 800d172:	455e      	cmp	r6, fp
 800d174:	f67f aee8 	bls.w	800cf48 <_scanf_float+0x80>
 800d178:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d17c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d180:	463a      	mov	r2, r7
 800d182:	4640      	mov	r0, r8
 800d184:	4798      	blx	r3
 800d186:	6923      	ldr	r3, [r4, #16]
 800d188:	3b01      	subs	r3, #1
 800d18a:	6123      	str	r3, [r4, #16]
 800d18c:	e7f1      	b.n	800d172 <_scanf_float+0x2aa>
 800d18e:	9802      	ldr	r0, [sp, #8]
 800d190:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d194:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800d198:	9002      	str	r0, [sp, #8]
 800d19a:	463a      	mov	r2, r7
 800d19c:	4640      	mov	r0, r8
 800d19e:	4798      	blx	r3
 800d1a0:	6923      	ldr	r3, [r4, #16]
 800d1a2:	3b01      	subs	r3, #1
 800d1a4:	6123      	str	r3, [r4, #16]
 800d1a6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d1aa:	fa5f fa8a 	uxtb.w	sl, sl
 800d1ae:	f1ba 0f02 	cmp.w	sl, #2
 800d1b2:	d1ec      	bne.n	800d18e <_scanf_float+0x2c6>
 800d1b4:	3d03      	subs	r5, #3
 800d1b6:	b2ed      	uxtb	r5, r5
 800d1b8:	1b76      	subs	r6, r6, r5
 800d1ba:	6823      	ldr	r3, [r4, #0]
 800d1bc:	05da      	lsls	r2, r3, #23
 800d1be:	d52f      	bpl.n	800d220 <_scanf_float+0x358>
 800d1c0:	055b      	lsls	r3, r3, #21
 800d1c2:	d510      	bpl.n	800d1e6 <_scanf_float+0x31e>
 800d1c4:	455e      	cmp	r6, fp
 800d1c6:	f67f aebf 	bls.w	800cf48 <_scanf_float+0x80>
 800d1ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d1ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800d1d2:	463a      	mov	r2, r7
 800d1d4:	4640      	mov	r0, r8
 800d1d6:	4798      	blx	r3
 800d1d8:	6923      	ldr	r3, [r4, #16]
 800d1da:	3b01      	subs	r3, #1
 800d1dc:	6123      	str	r3, [r4, #16]
 800d1de:	e7f1      	b.n	800d1c4 <_scanf_float+0x2fc>
 800d1e0:	46aa      	mov	sl, r5
 800d1e2:	9602      	str	r6, [sp, #8]
 800d1e4:	e7df      	b.n	800d1a6 <_scanf_float+0x2de>
 800d1e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800d1ea:	6923      	ldr	r3, [r4, #16]
 800d1ec:	2965      	cmp	r1, #101	; 0x65
 800d1ee:	f103 33ff 	add.w	r3, r3, #4294967295
 800d1f2:	f106 35ff 	add.w	r5, r6, #4294967295
 800d1f6:	6123      	str	r3, [r4, #16]
 800d1f8:	d00c      	beq.n	800d214 <_scanf_float+0x34c>
 800d1fa:	2945      	cmp	r1, #69	; 0x45
 800d1fc:	d00a      	beq.n	800d214 <_scanf_float+0x34c>
 800d1fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d202:	463a      	mov	r2, r7
 800d204:	4640      	mov	r0, r8
 800d206:	4798      	blx	r3
 800d208:	6923      	ldr	r3, [r4, #16]
 800d20a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800d20e:	3b01      	subs	r3, #1
 800d210:	1eb5      	subs	r5, r6, #2
 800d212:	6123      	str	r3, [r4, #16]
 800d214:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800d218:	463a      	mov	r2, r7
 800d21a:	4640      	mov	r0, r8
 800d21c:	4798      	blx	r3
 800d21e:	462e      	mov	r6, r5
 800d220:	6825      	ldr	r5, [r4, #0]
 800d222:	f015 0510 	ands.w	r5, r5, #16
 800d226:	d159      	bne.n	800d2dc <_scanf_float+0x414>
 800d228:	7035      	strb	r5, [r6, #0]
 800d22a:	6823      	ldr	r3, [r4, #0]
 800d22c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800d230:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d234:	d11b      	bne.n	800d26e <_scanf_float+0x3a6>
 800d236:	9b01      	ldr	r3, [sp, #4]
 800d238:	454b      	cmp	r3, r9
 800d23a:	eba3 0209 	sub.w	r2, r3, r9
 800d23e:	d123      	bne.n	800d288 <_scanf_float+0x3c0>
 800d240:	2200      	movs	r2, #0
 800d242:	4659      	mov	r1, fp
 800d244:	4640      	mov	r0, r8
 800d246:	f000 fe99 	bl	800df7c <_strtod_r>
 800d24a:	6822      	ldr	r2, [r4, #0]
 800d24c:	9b03      	ldr	r3, [sp, #12]
 800d24e:	f012 0f02 	tst.w	r2, #2
 800d252:	ec57 6b10 	vmov	r6, r7, d0
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	d021      	beq.n	800d29e <_scanf_float+0x3d6>
 800d25a:	9903      	ldr	r1, [sp, #12]
 800d25c:	1d1a      	adds	r2, r3, #4
 800d25e:	600a      	str	r2, [r1, #0]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	e9c3 6700 	strd	r6, r7, [r3]
 800d266:	68e3      	ldr	r3, [r4, #12]
 800d268:	3301      	adds	r3, #1
 800d26a:	60e3      	str	r3, [r4, #12]
 800d26c:	e66d      	b.n	800cf4a <_scanf_float+0x82>
 800d26e:	9b04      	ldr	r3, [sp, #16]
 800d270:	2b00      	cmp	r3, #0
 800d272:	d0e5      	beq.n	800d240 <_scanf_float+0x378>
 800d274:	9905      	ldr	r1, [sp, #20]
 800d276:	230a      	movs	r3, #10
 800d278:	462a      	mov	r2, r5
 800d27a:	3101      	adds	r1, #1
 800d27c:	4640      	mov	r0, r8
 800d27e:	f000 ff05 	bl	800e08c <_strtol_r>
 800d282:	9b04      	ldr	r3, [sp, #16]
 800d284:	9e05      	ldr	r6, [sp, #20]
 800d286:	1ac2      	subs	r2, r0, r3
 800d288:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800d28c:	429e      	cmp	r6, r3
 800d28e:	bf28      	it	cs
 800d290:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800d294:	4912      	ldr	r1, [pc, #72]	; (800d2e0 <_scanf_float+0x418>)
 800d296:	4630      	mov	r0, r6
 800d298:	f000 f82c 	bl	800d2f4 <siprintf>
 800d29c:	e7d0      	b.n	800d240 <_scanf_float+0x378>
 800d29e:	9903      	ldr	r1, [sp, #12]
 800d2a0:	f012 0f04 	tst.w	r2, #4
 800d2a4:	f103 0204 	add.w	r2, r3, #4
 800d2a8:	600a      	str	r2, [r1, #0]
 800d2aa:	d1d9      	bne.n	800d260 <_scanf_float+0x398>
 800d2ac:	f8d3 8000 	ldr.w	r8, [r3]
 800d2b0:	ee10 2a10 	vmov	r2, s0
 800d2b4:	ee10 0a10 	vmov	r0, s0
 800d2b8:	463b      	mov	r3, r7
 800d2ba:	4639      	mov	r1, r7
 800d2bc:	f7f3 fc3e 	bl	8000b3c <__aeabi_dcmpun>
 800d2c0:	b128      	cbz	r0, 800d2ce <_scanf_float+0x406>
 800d2c2:	4808      	ldr	r0, [pc, #32]	; (800d2e4 <_scanf_float+0x41c>)
 800d2c4:	f000 f810 	bl	800d2e8 <nanf>
 800d2c8:	ed88 0a00 	vstr	s0, [r8]
 800d2cc:	e7cb      	b.n	800d266 <_scanf_float+0x39e>
 800d2ce:	4630      	mov	r0, r6
 800d2d0:	4639      	mov	r1, r7
 800d2d2:	f7f3 fc91 	bl	8000bf8 <__aeabi_d2f>
 800d2d6:	f8c8 0000 	str.w	r0, [r8]
 800d2da:	e7c4      	b.n	800d266 <_scanf_float+0x39e>
 800d2dc:	2500      	movs	r5, #0
 800d2de:	e634      	b.n	800cf4a <_scanf_float+0x82>
 800d2e0:	080111d0 	.word	0x080111d0
 800d2e4:	080115d8 	.word	0x080115d8

0800d2e8 <nanf>:
 800d2e8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800d2f0 <nanf+0x8>
 800d2ec:	4770      	bx	lr
 800d2ee:	bf00      	nop
 800d2f0:	7fc00000 	.word	0x7fc00000

0800d2f4 <siprintf>:
 800d2f4:	b40e      	push	{r1, r2, r3}
 800d2f6:	b500      	push	{lr}
 800d2f8:	b09c      	sub	sp, #112	; 0x70
 800d2fa:	ab1d      	add	r3, sp, #116	; 0x74
 800d2fc:	9002      	str	r0, [sp, #8]
 800d2fe:	9006      	str	r0, [sp, #24]
 800d300:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d304:	4809      	ldr	r0, [pc, #36]	; (800d32c <siprintf+0x38>)
 800d306:	9107      	str	r1, [sp, #28]
 800d308:	9104      	str	r1, [sp, #16]
 800d30a:	4909      	ldr	r1, [pc, #36]	; (800d330 <siprintf+0x3c>)
 800d30c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d310:	9105      	str	r1, [sp, #20]
 800d312:	6800      	ldr	r0, [r0, #0]
 800d314:	9301      	str	r3, [sp, #4]
 800d316:	a902      	add	r1, sp, #8
 800d318:	f002 fed6 	bl	80100c8 <_svfiprintf_r>
 800d31c:	9b02      	ldr	r3, [sp, #8]
 800d31e:	2200      	movs	r2, #0
 800d320:	701a      	strb	r2, [r3, #0]
 800d322:	b01c      	add	sp, #112	; 0x70
 800d324:	f85d eb04 	ldr.w	lr, [sp], #4
 800d328:	b003      	add	sp, #12
 800d32a:	4770      	bx	lr
 800d32c:	2000025c 	.word	0x2000025c
 800d330:	ffff0208 	.word	0xffff0208

0800d334 <sulp>:
 800d334:	b570      	push	{r4, r5, r6, lr}
 800d336:	4604      	mov	r4, r0
 800d338:	460d      	mov	r5, r1
 800d33a:	ec45 4b10 	vmov	d0, r4, r5
 800d33e:	4616      	mov	r6, r2
 800d340:	f002 fc20 	bl	800fb84 <__ulp>
 800d344:	ec51 0b10 	vmov	r0, r1, d0
 800d348:	b17e      	cbz	r6, 800d36a <sulp+0x36>
 800d34a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800d34e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800d352:	2b00      	cmp	r3, #0
 800d354:	dd09      	ble.n	800d36a <sulp+0x36>
 800d356:	051b      	lsls	r3, r3, #20
 800d358:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800d35c:	2400      	movs	r4, #0
 800d35e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800d362:	4622      	mov	r2, r4
 800d364:	462b      	mov	r3, r5
 800d366:	f7f3 f94f 	bl	8000608 <__aeabi_dmul>
 800d36a:	bd70      	pop	{r4, r5, r6, pc}
 800d36c:	0000      	movs	r0, r0
	...

0800d370 <_strtod_l>:
 800d370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d374:	ed2d 8b02 	vpush	{d8}
 800d378:	b09d      	sub	sp, #116	; 0x74
 800d37a:	461f      	mov	r7, r3
 800d37c:	2300      	movs	r3, #0
 800d37e:	9318      	str	r3, [sp, #96]	; 0x60
 800d380:	4ba2      	ldr	r3, [pc, #648]	; (800d60c <_strtod_l+0x29c>)
 800d382:	9213      	str	r2, [sp, #76]	; 0x4c
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	9305      	str	r3, [sp, #20]
 800d388:	4604      	mov	r4, r0
 800d38a:	4618      	mov	r0, r3
 800d38c:	4688      	mov	r8, r1
 800d38e:	f7f2 ff27 	bl	80001e0 <strlen>
 800d392:	f04f 0a00 	mov.w	sl, #0
 800d396:	4605      	mov	r5, r0
 800d398:	f04f 0b00 	mov.w	fp, #0
 800d39c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d3a2:	781a      	ldrb	r2, [r3, #0]
 800d3a4:	2a2b      	cmp	r2, #43	; 0x2b
 800d3a6:	d04e      	beq.n	800d446 <_strtod_l+0xd6>
 800d3a8:	d83b      	bhi.n	800d422 <_strtod_l+0xb2>
 800d3aa:	2a0d      	cmp	r2, #13
 800d3ac:	d834      	bhi.n	800d418 <_strtod_l+0xa8>
 800d3ae:	2a08      	cmp	r2, #8
 800d3b0:	d834      	bhi.n	800d41c <_strtod_l+0xac>
 800d3b2:	2a00      	cmp	r2, #0
 800d3b4:	d03e      	beq.n	800d434 <_strtod_l+0xc4>
 800d3b6:	2300      	movs	r3, #0
 800d3b8:	930a      	str	r3, [sp, #40]	; 0x28
 800d3ba:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800d3bc:	7833      	ldrb	r3, [r6, #0]
 800d3be:	2b30      	cmp	r3, #48	; 0x30
 800d3c0:	f040 80b0 	bne.w	800d524 <_strtod_l+0x1b4>
 800d3c4:	7873      	ldrb	r3, [r6, #1]
 800d3c6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d3ca:	2b58      	cmp	r3, #88	; 0x58
 800d3cc:	d168      	bne.n	800d4a0 <_strtod_l+0x130>
 800d3ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d3d0:	9301      	str	r3, [sp, #4]
 800d3d2:	ab18      	add	r3, sp, #96	; 0x60
 800d3d4:	9702      	str	r7, [sp, #8]
 800d3d6:	9300      	str	r3, [sp, #0]
 800d3d8:	4a8d      	ldr	r2, [pc, #564]	; (800d610 <_strtod_l+0x2a0>)
 800d3da:	ab19      	add	r3, sp, #100	; 0x64
 800d3dc:	a917      	add	r1, sp, #92	; 0x5c
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f001 fd38 	bl	800ee54 <__gethex>
 800d3e4:	f010 0707 	ands.w	r7, r0, #7
 800d3e8:	4605      	mov	r5, r0
 800d3ea:	d005      	beq.n	800d3f8 <_strtod_l+0x88>
 800d3ec:	2f06      	cmp	r7, #6
 800d3ee:	d12c      	bne.n	800d44a <_strtod_l+0xda>
 800d3f0:	3601      	adds	r6, #1
 800d3f2:	2300      	movs	r3, #0
 800d3f4:	9617      	str	r6, [sp, #92]	; 0x5c
 800d3f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d3f8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	f040 8590 	bne.w	800df20 <_strtod_l+0xbb0>
 800d400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d402:	b1eb      	cbz	r3, 800d440 <_strtod_l+0xd0>
 800d404:	4652      	mov	r2, sl
 800d406:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d40a:	ec43 2b10 	vmov	d0, r2, r3
 800d40e:	b01d      	add	sp, #116	; 0x74
 800d410:	ecbd 8b02 	vpop	{d8}
 800d414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d418:	2a20      	cmp	r2, #32
 800d41a:	d1cc      	bne.n	800d3b6 <_strtod_l+0x46>
 800d41c:	3301      	adds	r3, #1
 800d41e:	9317      	str	r3, [sp, #92]	; 0x5c
 800d420:	e7be      	b.n	800d3a0 <_strtod_l+0x30>
 800d422:	2a2d      	cmp	r2, #45	; 0x2d
 800d424:	d1c7      	bne.n	800d3b6 <_strtod_l+0x46>
 800d426:	2201      	movs	r2, #1
 800d428:	920a      	str	r2, [sp, #40]	; 0x28
 800d42a:	1c5a      	adds	r2, r3, #1
 800d42c:	9217      	str	r2, [sp, #92]	; 0x5c
 800d42e:	785b      	ldrb	r3, [r3, #1]
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1c2      	bne.n	800d3ba <_strtod_l+0x4a>
 800d434:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d436:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	f040 856e 	bne.w	800df1c <_strtod_l+0xbac>
 800d440:	4652      	mov	r2, sl
 800d442:	465b      	mov	r3, fp
 800d444:	e7e1      	b.n	800d40a <_strtod_l+0x9a>
 800d446:	2200      	movs	r2, #0
 800d448:	e7ee      	b.n	800d428 <_strtod_l+0xb8>
 800d44a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800d44c:	b13a      	cbz	r2, 800d45e <_strtod_l+0xee>
 800d44e:	2135      	movs	r1, #53	; 0x35
 800d450:	a81a      	add	r0, sp, #104	; 0x68
 800d452:	f002 fca2 	bl	800fd9a <__copybits>
 800d456:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d458:	4620      	mov	r0, r4
 800d45a:	f002 f861 	bl	800f520 <_Bfree>
 800d45e:	3f01      	subs	r7, #1
 800d460:	2f04      	cmp	r7, #4
 800d462:	d806      	bhi.n	800d472 <_strtod_l+0x102>
 800d464:	e8df f007 	tbb	[pc, r7]
 800d468:	1714030a 	.word	0x1714030a
 800d46c:	0a          	.byte	0x0a
 800d46d:	00          	.byte	0x00
 800d46e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800d472:	0728      	lsls	r0, r5, #28
 800d474:	d5c0      	bpl.n	800d3f8 <_strtod_l+0x88>
 800d476:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800d47a:	e7bd      	b.n	800d3f8 <_strtod_l+0x88>
 800d47c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800d480:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800d482:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800d486:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800d48a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800d48e:	e7f0      	b.n	800d472 <_strtod_l+0x102>
 800d490:	f8df b180 	ldr.w	fp, [pc, #384]	; 800d614 <_strtod_l+0x2a4>
 800d494:	e7ed      	b.n	800d472 <_strtod_l+0x102>
 800d496:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800d49a:	f04f 3aff 	mov.w	sl, #4294967295
 800d49e:	e7e8      	b.n	800d472 <_strtod_l+0x102>
 800d4a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4a2:	1c5a      	adds	r2, r3, #1
 800d4a4:	9217      	str	r2, [sp, #92]	; 0x5c
 800d4a6:	785b      	ldrb	r3, [r3, #1]
 800d4a8:	2b30      	cmp	r3, #48	; 0x30
 800d4aa:	d0f9      	beq.n	800d4a0 <_strtod_l+0x130>
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d0a3      	beq.n	800d3f8 <_strtod_l+0x88>
 800d4b0:	2301      	movs	r3, #1
 800d4b2:	f04f 0900 	mov.w	r9, #0
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d4ba:	9308      	str	r3, [sp, #32]
 800d4bc:	f8cd 901c 	str.w	r9, [sp, #28]
 800d4c0:	464f      	mov	r7, r9
 800d4c2:	220a      	movs	r2, #10
 800d4c4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800d4c6:	7806      	ldrb	r6, [r0, #0]
 800d4c8:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800d4cc:	b2d9      	uxtb	r1, r3
 800d4ce:	2909      	cmp	r1, #9
 800d4d0:	d92a      	bls.n	800d528 <_strtod_l+0x1b8>
 800d4d2:	9905      	ldr	r1, [sp, #20]
 800d4d4:	462a      	mov	r2, r5
 800d4d6:	f002 ff0f 	bl	80102f8 <strncmp>
 800d4da:	b398      	cbz	r0, 800d544 <_strtod_l+0x1d4>
 800d4dc:	2000      	movs	r0, #0
 800d4de:	4632      	mov	r2, r6
 800d4e0:	463d      	mov	r5, r7
 800d4e2:	9005      	str	r0, [sp, #20]
 800d4e4:	4603      	mov	r3, r0
 800d4e6:	2a65      	cmp	r2, #101	; 0x65
 800d4e8:	d001      	beq.n	800d4ee <_strtod_l+0x17e>
 800d4ea:	2a45      	cmp	r2, #69	; 0x45
 800d4ec:	d118      	bne.n	800d520 <_strtod_l+0x1b0>
 800d4ee:	b91d      	cbnz	r5, 800d4f8 <_strtod_l+0x188>
 800d4f0:	9a04      	ldr	r2, [sp, #16]
 800d4f2:	4302      	orrs	r2, r0
 800d4f4:	d09e      	beq.n	800d434 <_strtod_l+0xc4>
 800d4f6:	2500      	movs	r5, #0
 800d4f8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800d4fc:	f108 0201 	add.w	r2, r8, #1
 800d500:	9217      	str	r2, [sp, #92]	; 0x5c
 800d502:	f898 2001 	ldrb.w	r2, [r8, #1]
 800d506:	2a2b      	cmp	r2, #43	; 0x2b
 800d508:	d075      	beq.n	800d5f6 <_strtod_l+0x286>
 800d50a:	2a2d      	cmp	r2, #45	; 0x2d
 800d50c:	d07b      	beq.n	800d606 <_strtod_l+0x296>
 800d50e:	f04f 0c00 	mov.w	ip, #0
 800d512:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800d516:	2909      	cmp	r1, #9
 800d518:	f240 8082 	bls.w	800d620 <_strtod_l+0x2b0>
 800d51c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800d520:	2600      	movs	r6, #0
 800d522:	e09d      	b.n	800d660 <_strtod_l+0x2f0>
 800d524:	2300      	movs	r3, #0
 800d526:	e7c4      	b.n	800d4b2 <_strtod_l+0x142>
 800d528:	2f08      	cmp	r7, #8
 800d52a:	bfd8      	it	le
 800d52c:	9907      	ldrle	r1, [sp, #28]
 800d52e:	f100 0001 	add.w	r0, r0, #1
 800d532:	bfda      	itte	le
 800d534:	fb02 3301 	mlale	r3, r2, r1, r3
 800d538:	9307      	strle	r3, [sp, #28]
 800d53a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800d53e:	3701      	adds	r7, #1
 800d540:	9017      	str	r0, [sp, #92]	; 0x5c
 800d542:	e7bf      	b.n	800d4c4 <_strtod_l+0x154>
 800d544:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d546:	195a      	adds	r2, r3, r5
 800d548:	9217      	str	r2, [sp, #92]	; 0x5c
 800d54a:	5d5a      	ldrb	r2, [r3, r5]
 800d54c:	2f00      	cmp	r7, #0
 800d54e:	d037      	beq.n	800d5c0 <_strtod_l+0x250>
 800d550:	9005      	str	r0, [sp, #20]
 800d552:	463d      	mov	r5, r7
 800d554:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800d558:	2b09      	cmp	r3, #9
 800d55a:	d912      	bls.n	800d582 <_strtod_l+0x212>
 800d55c:	2301      	movs	r3, #1
 800d55e:	e7c2      	b.n	800d4e6 <_strtod_l+0x176>
 800d560:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d562:	1c5a      	adds	r2, r3, #1
 800d564:	9217      	str	r2, [sp, #92]	; 0x5c
 800d566:	785a      	ldrb	r2, [r3, #1]
 800d568:	3001      	adds	r0, #1
 800d56a:	2a30      	cmp	r2, #48	; 0x30
 800d56c:	d0f8      	beq.n	800d560 <_strtod_l+0x1f0>
 800d56e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800d572:	2b08      	cmp	r3, #8
 800d574:	f200 84d9 	bhi.w	800df2a <_strtod_l+0xbba>
 800d578:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d57a:	9005      	str	r0, [sp, #20]
 800d57c:	2000      	movs	r0, #0
 800d57e:	9308      	str	r3, [sp, #32]
 800d580:	4605      	mov	r5, r0
 800d582:	3a30      	subs	r2, #48	; 0x30
 800d584:	f100 0301 	add.w	r3, r0, #1
 800d588:	d014      	beq.n	800d5b4 <_strtod_l+0x244>
 800d58a:	9905      	ldr	r1, [sp, #20]
 800d58c:	4419      	add	r1, r3
 800d58e:	9105      	str	r1, [sp, #20]
 800d590:	462b      	mov	r3, r5
 800d592:	eb00 0e05 	add.w	lr, r0, r5
 800d596:	210a      	movs	r1, #10
 800d598:	4573      	cmp	r3, lr
 800d59a:	d113      	bne.n	800d5c4 <_strtod_l+0x254>
 800d59c:	182b      	adds	r3, r5, r0
 800d59e:	2b08      	cmp	r3, #8
 800d5a0:	f105 0501 	add.w	r5, r5, #1
 800d5a4:	4405      	add	r5, r0
 800d5a6:	dc1c      	bgt.n	800d5e2 <_strtod_l+0x272>
 800d5a8:	9907      	ldr	r1, [sp, #28]
 800d5aa:	230a      	movs	r3, #10
 800d5ac:	fb03 2301 	mla	r3, r3, r1, r2
 800d5b0:	9307      	str	r3, [sp, #28]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d5b6:	1c51      	adds	r1, r2, #1
 800d5b8:	9117      	str	r1, [sp, #92]	; 0x5c
 800d5ba:	7852      	ldrb	r2, [r2, #1]
 800d5bc:	4618      	mov	r0, r3
 800d5be:	e7c9      	b.n	800d554 <_strtod_l+0x1e4>
 800d5c0:	4638      	mov	r0, r7
 800d5c2:	e7d2      	b.n	800d56a <_strtod_l+0x1fa>
 800d5c4:	2b08      	cmp	r3, #8
 800d5c6:	dc04      	bgt.n	800d5d2 <_strtod_l+0x262>
 800d5c8:	9e07      	ldr	r6, [sp, #28]
 800d5ca:	434e      	muls	r6, r1
 800d5cc:	9607      	str	r6, [sp, #28]
 800d5ce:	3301      	adds	r3, #1
 800d5d0:	e7e2      	b.n	800d598 <_strtod_l+0x228>
 800d5d2:	f103 0c01 	add.w	ip, r3, #1
 800d5d6:	f1bc 0f10 	cmp.w	ip, #16
 800d5da:	bfd8      	it	le
 800d5dc:	fb01 f909 	mulle.w	r9, r1, r9
 800d5e0:	e7f5      	b.n	800d5ce <_strtod_l+0x25e>
 800d5e2:	2d10      	cmp	r5, #16
 800d5e4:	bfdc      	itt	le
 800d5e6:	230a      	movle	r3, #10
 800d5e8:	fb03 2909 	mlale	r9, r3, r9, r2
 800d5ec:	e7e1      	b.n	800d5b2 <_strtod_l+0x242>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	9305      	str	r3, [sp, #20]
 800d5f2:	2301      	movs	r3, #1
 800d5f4:	e77c      	b.n	800d4f0 <_strtod_l+0x180>
 800d5f6:	f04f 0c00 	mov.w	ip, #0
 800d5fa:	f108 0202 	add.w	r2, r8, #2
 800d5fe:	9217      	str	r2, [sp, #92]	; 0x5c
 800d600:	f898 2002 	ldrb.w	r2, [r8, #2]
 800d604:	e785      	b.n	800d512 <_strtod_l+0x1a2>
 800d606:	f04f 0c01 	mov.w	ip, #1
 800d60a:	e7f6      	b.n	800d5fa <_strtod_l+0x28a>
 800d60c:	08011420 	.word	0x08011420
 800d610:	080111d8 	.word	0x080111d8
 800d614:	7ff00000 	.word	0x7ff00000
 800d618:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d61a:	1c51      	adds	r1, r2, #1
 800d61c:	9117      	str	r1, [sp, #92]	; 0x5c
 800d61e:	7852      	ldrb	r2, [r2, #1]
 800d620:	2a30      	cmp	r2, #48	; 0x30
 800d622:	d0f9      	beq.n	800d618 <_strtod_l+0x2a8>
 800d624:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800d628:	2908      	cmp	r1, #8
 800d62a:	f63f af79 	bhi.w	800d520 <_strtod_l+0x1b0>
 800d62e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800d632:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d634:	9206      	str	r2, [sp, #24]
 800d636:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800d638:	1c51      	adds	r1, r2, #1
 800d63a:	9117      	str	r1, [sp, #92]	; 0x5c
 800d63c:	7852      	ldrb	r2, [r2, #1]
 800d63e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800d642:	2e09      	cmp	r6, #9
 800d644:	d937      	bls.n	800d6b6 <_strtod_l+0x346>
 800d646:	9e06      	ldr	r6, [sp, #24]
 800d648:	1b89      	subs	r1, r1, r6
 800d64a:	2908      	cmp	r1, #8
 800d64c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800d650:	dc02      	bgt.n	800d658 <_strtod_l+0x2e8>
 800d652:	4576      	cmp	r6, lr
 800d654:	bfa8      	it	ge
 800d656:	4676      	movge	r6, lr
 800d658:	f1bc 0f00 	cmp.w	ip, #0
 800d65c:	d000      	beq.n	800d660 <_strtod_l+0x2f0>
 800d65e:	4276      	negs	r6, r6
 800d660:	2d00      	cmp	r5, #0
 800d662:	d14d      	bne.n	800d700 <_strtod_l+0x390>
 800d664:	9904      	ldr	r1, [sp, #16]
 800d666:	4301      	orrs	r1, r0
 800d668:	f47f aec6 	bne.w	800d3f8 <_strtod_l+0x88>
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	f47f aee1 	bne.w	800d434 <_strtod_l+0xc4>
 800d672:	2a69      	cmp	r2, #105	; 0x69
 800d674:	d027      	beq.n	800d6c6 <_strtod_l+0x356>
 800d676:	dc24      	bgt.n	800d6c2 <_strtod_l+0x352>
 800d678:	2a49      	cmp	r2, #73	; 0x49
 800d67a:	d024      	beq.n	800d6c6 <_strtod_l+0x356>
 800d67c:	2a4e      	cmp	r2, #78	; 0x4e
 800d67e:	f47f aed9 	bne.w	800d434 <_strtod_l+0xc4>
 800d682:	499f      	ldr	r1, [pc, #636]	; (800d900 <_strtod_l+0x590>)
 800d684:	a817      	add	r0, sp, #92	; 0x5c
 800d686:	f001 fe3d 	bl	800f304 <__match>
 800d68a:	2800      	cmp	r0, #0
 800d68c:	f43f aed2 	beq.w	800d434 <_strtod_l+0xc4>
 800d690:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d692:	781b      	ldrb	r3, [r3, #0]
 800d694:	2b28      	cmp	r3, #40	; 0x28
 800d696:	d12d      	bne.n	800d6f4 <_strtod_l+0x384>
 800d698:	499a      	ldr	r1, [pc, #616]	; (800d904 <_strtod_l+0x594>)
 800d69a:	aa1a      	add	r2, sp, #104	; 0x68
 800d69c:	a817      	add	r0, sp, #92	; 0x5c
 800d69e:	f001 fe45 	bl	800f32c <__hexnan>
 800d6a2:	2805      	cmp	r0, #5
 800d6a4:	d126      	bne.n	800d6f4 <_strtod_l+0x384>
 800d6a6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d6a8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800d6ac:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800d6b0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800d6b4:	e6a0      	b.n	800d3f8 <_strtod_l+0x88>
 800d6b6:	210a      	movs	r1, #10
 800d6b8:	fb01 2e0e 	mla	lr, r1, lr, r2
 800d6bc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800d6c0:	e7b9      	b.n	800d636 <_strtod_l+0x2c6>
 800d6c2:	2a6e      	cmp	r2, #110	; 0x6e
 800d6c4:	e7db      	b.n	800d67e <_strtod_l+0x30e>
 800d6c6:	4990      	ldr	r1, [pc, #576]	; (800d908 <_strtod_l+0x598>)
 800d6c8:	a817      	add	r0, sp, #92	; 0x5c
 800d6ca:	f001 fe1b 	bl	800f304 <__match>
 800d6ce:	2800      	cmp	r0, #0
 800d6d0:	f43f aeb0 	beq.w	800d434 <_strtod_l+0xc4>
 800d6d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6d6:	498d      	ldr	r1, [pc, #564]	; (800d90c <_strtod_l+0x59c>)
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	a817      	add	r0, sp, #92	; 0x5c
 800d6dc:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6de:	f001 fe11 	bl	800f304 <__match>
 800d6e2:	b910      	cbnz	r0, 800d6ea <_strtod_l+0x37a>
 800d6e4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d6e6:	3301      	adds	r3, #1
 800d6e8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d6ea:	f8df b230 	ldr.w	fp, [pc, #560]	; 800d91c <_strtod_l+0x5ac>
 800d6ee:	f04f 0a00 	mov.w	sl, #0
 800d6f2:	e681      	b.n	800d3f8 <_strtod_l+0x88>
 800d6f4:	4886      	ldr	r0, [pc, #536]	; (800d910 <_strtod_l+0x5a0>)
 800d6f6:	f002 fde7 	bl	80102c8 <nan>
 800d6fa:	ec5b ab10 	vmov	sl, fp, d0
 800d6fe:	e67b      	b.n	800d3f8 <_strtod_l+0x88>
 800d700:	9b05      	ldr	r3, [sp, #20]
 800d702:	9807      	ldr	r0, [sp, #28]
 800d704:	1af3      	subs	r3, r6, r3
 800d706:	2f00      	cmp	r7, #0
 800d708:	bf08      	it	eq
 800d70a:	462f      	moveq	r7, r5
 800d70c:	2d10      	cmp	r5, #16
 800d70e:	9306      	str	r3, [sp, #24]
 800d710:	46a8      	mov	r8, r5
 800d712:	bfa8      	it	ge
 800d714:	f04f 0810 	movge.w	r8, #16
 800d718:	f7f2 fefc 	bl	8000514 <__aeabi_ui2d>
 800d71c:	2d09      	cmp	r5, #9
 800d71e:	4682      	mov	sl, r0
 800d720:	468b      	mov	fp, r1
 800d722:	dd13      	ble.n	800d74c <_strtod_l+0x3dc>
 800d724:	4b7b      	ldr	r3, [pc, #492]	; (800d914 <_strtod_l+0x5a4>)
 800d726:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800d72a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800d72e:	f7f2 ff6b 	bl	8000608 <__aeabi_dmul>
 800d732:	4682      	mov	sl, r0
 800d734:	4648      	mov	r0, r9
 800d736:	468b      	mov	fp, r1
 800d738:	f7f2 feec 	bl	8000514 <__aeabi_ui2d>
 800d73c:	4602      	mov	r2, r0
 800d73e:	460b      	mov	r3, r1
 800d740:	4650      	mov	r0, sl
 800d742:	4659      	mov	r1, fp
 800d744:	f7f2 fdaa 	bl	800029c <__adddf3>
 800d748:	4682      	mov	sl, r0
 800d74a:	468b      	mov	fp, r1
 800d74c:	2d0f      	cmp	r5, #15
 800d74e:	dc38      	bgt.n	800d7c2 <_strtod_l+0x452>
 800d750:	9b06      	ldr	r3, [sp, #24]
 800d752:	2b00      	cmp	r3, #0
 800d754:	f43f ae50 	beq.w	800d3f8 <_strtod_l+0x88>
 800d758:	dd24      	ble.n	800d7a4 <_strtod_l+0x434>
 800d75a:	2b16      	cmp	r3, #22
 800d75c:	dc0b      	bgt.n	800d776 <_strtod_l+0x406>
 800d75e:	496d      	ldr	r1, [pc, #436]	; (800d914 <_strtod_l+0x5a4>)
 800d760:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d764:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d768:	4652      	mov	r2, sl
 800d76a:	465b      	mov	r3, fp
 800d76c:	f7f2 ff4c 	bl	8000608 <__aeabi_dmul>
 800d770:	4682      	mov	sl, r0
 800d772:	468b      	mov	fp, r1
 800d774:	e640      	b.n	800d3f8 <_strtod_l+0x88>
 800d776:	9a06      	ldr	r2, [sp, #24]
 800d778:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800d77c:	4293      	cmp	r3, r2
 800d77e:	db20      	blt.n	800d7c2 <_strtod_l+0x452>
 800d780:	4c64      	ldr	r4, [pc, #400]	; (800d914 <_strtod_l+0x5a4>)
 800d782:	f1c5 050f 	rsb	r5, r5, #15
 800d786:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800d78a:	4652      	mov	r2, sl
 800d78c:	465b      	mov	r3, fp
 800d78e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d792:	f7f2 ff39 	bl	8000608 <__aeabi_dmul>
 800d796:	9b06      	ldr	r3, [sp, #24]
 800d798:	1b5d      	subs	r5, r3, r5
 800d79a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800d79e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800d7a2:	e7e3      	b.n	800d76c <_strtod_l+0x3fc>
 800d7a4:	9b06      	ldr	r3, [sp, #24]
 800d7a6:	3316      	adds	r3, #22
 800d7a8:	db0b      	blt.n	800d7c2 <_strtod_l+0x452>
 800d7aa:	9b05      	ldr	r3, [sp, #20]
 800d7ac:	1b9e      	subs	r6, r3, r6
 800d7ae:	4b59      	ldr	r3, [pc, #356]	; (800d914 <_strtod_l+0x5a4>)
 800d7b0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800d7b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d7b8:	4650      	mov	r0, sl
 800d7ba:	4659      	mov	r1, fp
 800d7bc:	f7f3 f84e 	bl	800085c <__aeabi_ddiv>
 800d7c0:	e7d6      	b.n	800d770 <_strtod_l+0x400>
 800d7c2:	9b06      	ldr	r3, [sp, #24]
 800d7c4:	eba5 0808 	sub.w	r8, r5, r8
 800d7c8:	4498      	add	r8, r3
 800d7ca:	f1b8 0f00 	cmp.w	r8, #0
 800d7ce:	dd74      	ble.n	800d8ba <_strtod_l+0x54a>
 800d7d0:	f018 030f 	ands.w	r3, r8, #15
 800d7d4:	d00a      	beq.n	800d7ec <_strtod_l+0x47c>
 800d7d6:	494f      	ldr	r1, [pc, #316]	; (800d914 <_strtod_l+0x5a4>)
 800d7d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800d7dc:	4652      	mov	r2, sl
 800d7de:	465b      	mov	r3, fp
 800d7e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d7e4:	f7f2 ff10 	bl	8000608 <__aeabi_dmul>
 800d7e8:	4682      	mov	sl, r0
 800d7ea:	468b      	mov	fp, r1
 800d7ec:	f038 080f 	bics.w	r8, r8, #15
 800d7f0:	d04f      	beq.n	800d892 <_strtod_l+0x522>
 800d7f2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800d7f6:	dd22      	ble.n	800d83e <_strtod_l+0x4ce>
 800d7f8:	2500      	movs	r5, #0
 800d7fa:	462e      	mov	r6, r5
 800d7fc:	9507      	str	r5, [sp, #28]
 800d7fe:	9505      	str	r5, [sp, #20]
 800d800:	2322      	movs	r3, #34	; 0x22
 800d802:	f8df b118 	ldr.w	fp, [pc, #280]	; 800d91c <_strtod_l+0x5ac>
 800d806:	6023      	str	r3, [r4, #0]
 800d808:	f04f 0a00 	mov.w	sl, #0
 800d80c:	9b07      	ldr	r3, [sp, #28]
 800d80e:	2b00      	cmp	r3, #0
 800d810:	f43f adf2 	beq.w	800d3f8 <_strtod_l+0x88>
 800d814:	9918      	ldr	r1, [sp, #96]	; 0x60
 800d816:	4620      	mov	r0, r4
 800d818:	f001 fe82 	bl	800f520 <_Bfree>
 800d81c:	9905      	ldr	r1, [sp, #20]
 800d81e:	4620      	mov	r0, r4
 800d820:	f001 fe7e 	bl	800f520 <_Bfree>
 800d824:	4631      	mov	r1, r6
 800d826:	4620      	mov	r0, r4
 800d828:	f001 fe7a 	bl	800f520 <_Bfree>
 800d82c:	9907      	ldr	r1, [sp, #28]
 800d82e:	4620      	mov	r0, r4
 800d830:	f001 fe76 	bl	800f520 <_Bfree>
 800d834:	4629      	mov	r1, r5
 800d836:	4620      	mov	r0, r4
 800d838:	f001 fe72 	bl	800f520 <_Bfree>
 800d83c:	e5dc      	b.n	800d3f8 <_strtod_l+0x88>
 800d83e:	4b36      	ldr	r3, [pc, #216]	; (800d918 <_strtod_l+0x5a8>)
 800d840:	9304      	str	r3, [sp, #16]
 800d842:	2300      	movs	r3, #0
 800d844:	ea4f 1828 	mov.w	r8, r8, asr #4
 800d848:	4650      	mov	r0, sl
 800d84a:	4659      	mov	r1, fp
 800d84c:	4699      	mov	r9, r3
 800d84e:	f1b8 0f01 	cmp.w	r8, #1
 800d852:	dc21      	bgt.n	800d898 <_strtod_l+0x528>
 800d854:	b10b      	cbz	r3, 800d85a <_strtod_l+0x4ea>
 800d856:	4682      	mov	sl, r0
 800d858:	468b      	mov	fp, r1
 800d85a:	4b2f      	ldr	r3, [pc, #188]	; (800d918 <_strtod_l+0x5a8>)
 800d85c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800d860:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800d864:	4652      	mov	r2, sl
 800d866:	465b      	mov	r3, fp
 800d868:	e9d9 0100 	ldrd	r0, r1, [r9]
 800d86c:	f7f2 fecc 	bl	8000608 <__aeabi_dmul>
 800d870:	4b2a      	ldr	r3, [pc, #168]	; (800d91c <_strtod_l+0x5ac>)
 800d872:	460a      	mov	r2, r1
 800d874:	400b      	ands	r3, r1
 800d876:	492a      	ldr	r1, [pc, #168]	; (800d920 <_strtod_l+0x5b0>)
 800d878:	428b      	cmp	r3, r1
 800d87a:	4682      	mov	sl, r0
 800d87c:	d8bc      	bhi.n	800d7f8 <_strtod_l+0x488>
 800d87e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800d882:	428b      	cmp	r3, r1
 800d884:	bf86      	itte	hi
 800d886:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800d924 <_strtod_l+0x5b4>
 800d88a:	f04f 3aff 	movhi.w	sl, #4294967295
 800d88e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800d892:	2300      	movs	r3, #0
 800d894:	9304      	str	r3, [sp, #16]
 800d896:	e084      	b.n	800d9a2 <_strtod_l+0x632>
 800d898:	f018 0f01 	tst.w	r8, #1
 800d89c:	d005      	beq.n	800d8aa <_strtod_l+0x53a>
 800d89e:	9b04      	ldr	r3, [sp, #16]
 800d8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8a4:	f7f2 feb0 	bl	8000608 <__aeabi_dmul>
 800d8a8:	2301      	movs	r3, #1
 800d8aa:	9a04      	ldr	r2, [sp, #16]
 800d8ac:	3208      	adds	r2, #8
 800d8ae:	f109 0901 	add.w	r9, r9, #1
 800d8b2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800d8b6:	9204      	str	r2, [sp, #16]
 800d8b8:	e7c9      	b.n	800d84e <_strtod_l+0x4de>
 800d8ba:	d0ea      	beq.n	800d892 <_strtod_l+0x522>
 800d8bc:	f1c8 0800 	rsb	r8, r8, #0
 800d8c0:	f018 020f 	ands.w	r2, r8, #15
 800d8c4:	d00a      	beq.n	800d8dc <_strtod_l+0x56c>
 800d8c6:	4b13      	ldr	r3, [pc, #76]	; (800d914 <_strtod_l+0x5a4>)
 800d8c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d8cc:	4650      	mov	r0, sl
 800d8ce:	4659      	mov	r1, fp
 800d8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8d4:	f7f2 ffc2 	bl	800085c <__aeabi_ddiv>
 800d8d8:	4682      	mov	sl, r0
 800d8da:	468b      	mov	fp, r1
 800d8dc:	ea5f 1828 	movs.w	r8, r8, asr #4
 800d8e0:	d0d7      	beq.n	800d892 <_strtod_l+0x522>
 800d8e2:	f1b8 0f1f 	cmp.w	r8, #31
 800d8e6:	dd1f      	ble.n	800d928 <_strtod_l+0x5b8>
 800d8e8:	2500      	movs	r5, #0
 800d8ea:	462e      	mov	r6, r5
 800d8ec:	9507      	str	r5, [sp, #28]
 800d8ee:	9505      	str	r5, [sp, #20]
 800d8f0:	2322      	movs	r3, #34	; 0x22
 800d8f2:	f04f 0a00 	mov.w	sl, #0
 800d8f6:	f04f 0b00 	mov.w	fp, #0
 800d8fa:	6023      	str	r3, [r4, #0]
 800d8fc:	e786      	b.n	800d80c <_strtod_l+0x49c>
 800d8fe:	bf00      	nop
 800d900:	080111a9 	.word	0x080111a9
 800d904:	080111ec 	.word	0x080111ec
 800d908:	080111a1 	.word	0x080111a1
 800d90c:	0801132c 	.word	0x0801132c
 800d910:	080115d8 	.word	0x080115d8
 800d914:	080114b8 	.word	0x080114b8
 800d918:	08011490 	.word	0x08011490
 800d91c:	7ff00000 	.word	0x7ff00000
 800d920:	7ca00000 	.word	0x7ca00000
 800d924:	7fefffff 	.word	0x7fefffff
 800d928:	f018 0310 	ands.w	r3, r8, #16
 800d92c:	bf18      	it	ne
 800d92e:	236a      	movne	r3, #106	; 0x6a
 800d930:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800dce0 <_strtod_l+0x970>
 800d934:	9304      	str	r3, [sp, #16]
 800d936:	4650      	mov	r0, sl
 800d938:	4659      	mov	r1, fp
 800d93a:	2300      	movs	r3, #0
 800d93c:	f018 0f01 	tst.w	r8, #1
 800d940:	d004      	beq.n	800d94c <_strtod_l+0x5dc>
 800d942:	e9d9 2300 	ldrd	r2, r3, [r9]
 800d946:	f7f2 fe5f 	bl	8000608 <__aeabi_dmul>
 800d94a:	2301      	movs	r3, #1
 800d94c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800d950:	f109 0908 	add.w	r9, r9, #8
 800d954:	d1f2      	bne.n	800d93c <_strtod_l+0x5cc>
 800d956:	b10b      	cbz	r3, 800d95c <_strtod_l+0x5ec>
 800d958:	4682      	mov	sl, r0
 800d95a:	468b      	mov	fp, r1
 800d95c:	9b04      	ldr	r3, [sp, #16]
 800d95e:	b1c3      	cbz	r3, 800d992 <_strtod_l+0x622>
 800d960:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d964:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800d968:	2b00      	cmp	r3, #0
 800d96a:	4659      	mov	r1, fp
 800d96c:	dd11      	ble.n	800d992 <_strtod_l+0x622>
 800d96e:	2b1f      	cmp	r3, #31
 800d970:	f340 8124 	ble.w	800dbbc <_strtod_l+0x84c>
 800d974:	2b34      	cmp	r3, #52	; 0x34
 800d976:	bfde      	ittt	le
 800d978:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800d97c:	f04f 33ff 	movle.w	r3, #4294967295
 800d980:	fa03 f202 	lslle.w	r2, r3, r2
 800d984:	f04f 0a00 	mov.w	sl, #0
 800d988:	bfcc      	ite	gt
 800d98a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800d98e:	ea02 0b01 	andle.w	fp, r2, r1
 800d992:	2200      	movs	r2, #0
 800d994:	2300      	movs	r3, #0
 800d996:	4650      	mov	r0, sl
 800d998:	4659      	mov	r1, fp
 800d99a:	f7f3 f89d 	bl	8000ad8 <__aeabi_dcmpeq>
 800d99e:	2800      	cmp	r0, #0
 800d9a0:	d1a2      	bne.n	800d8e8 <_strtod_l+0x578>
 800d9a2:	9b07      	ldr	r3, [sp, #28]
 800d9a4:	9300      	str	r3, [sp, #0]
 800d9a6:	9908      	ldr	r1, [sp, #32]
 800d9a8:	462b      	mov	r3, r5
 800d9aa:	463a      	mov	r2, r7
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f001 fe1f 	bl	800f5f0 <__s2b>
 800d9b2:	9007      	str	r0, [sp, #28]
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	f43f af1f 	beq.w	800d7f8 <_strtod_l+0x488>
 800d9ba:	9b05      	ldr	r3, [sp, #20]
 800d9bc:	1b9e      	subs	r6, r3, r6
 800d9be:	9b06      	ldr	r3, [sp, #24]
 800d9c0:	2b00      	cmp	r3, #0
 800d9c2:	bfb4      	ite	lt
 800d9c4:	4633      	movlt	r3, r6
 800d9c6:	2300      	movge	r3, #0
 800d9c8:	930c      	str	r3, [sp, #48]	; 0x30
 800d9ca:	9b06      	ldr	r3, [sp, #24]
 800d9cc:	2500      	movs	r5, #0
 800d9ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800d9d2:	9312      	str	r3, [sp, #72]	; 0x48
 800d9d4:	462e      	mov	r6, r5
 800d9d6:	9b07      	ldr	r3, [sp, #28]
 800d9d8:	4620      	mov	r0, r4
 800d9da:	6859      	ldr	r1, [r3, #4]
 800d9dc:	f001 fd60 	bl	800f4a0 <_Balloc>
 800d9e0:	9005      	str	r0, [sp, #20]
 800d9e2:	2800      	cmp	r0, #0
 800d9e4:	f43f af0c 	beq.w	800d800 <_strtod_l+0x490>
 800d9e8:	9b07      	ldr	r3, [sp, #28]
 800d9ea:	691a      	ldr	r2, [r3, #16]
 800d9ec:	3202      	adds	r2, #2
 800d9ee:	f103 010c 	add.w	r1, r3, #12
 800d9f2:	0092      	lsls	r2, r2, #2
 800d9f4:	300c      	adds	r0, #12
 800d9f6:	f7fe fde7 	bl	800c5c8 <memcpy>
 800d9fa:	ec4b ab10 	vmov	d0, sl, fp
 800d9fe:	aa1a      	add	r2, sp, #104	; 0x68
 800da00:	a919      	add	r1, sp, #100	; 0x64
 800da02:	4620      	mov	r0, r4
 800da04:	f002 f93a 	bl	800fc7c <__d2b>
 800da08:	ec4b ab18 	vmov	d8, sl, fp
 800da0c:	9018      	str	r0, [sp, #96]	; 0x60
 800da0e:	2800      	cmp	r0, #0
 800da10:	f43f aef6 	beq.w	800d800 <_strtod_l+0x490>
 800da14:	2101      	movs	r1, #1
 800da16:	4620      	mov	r0, r4
 800da18:	f001 fe84 	bl	800f724 <__i2b>
 800da1c:	4606      	mov	r6, r0
 800da1e:	2800      	cmp	r0, #0
 800da20:	f43f aeee 	beq.w	800d800 <_strtod_l+0x490>
 800da24:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800da26:	9904      	ldr	r1, [sp, #16]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	bfab      	itete	ge
 800da2c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800da2e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800da30:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800da32:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800da36:	bfac      	ite	ge
 800da38:	eb03 0902 	addge.w	r9, r3, r2
 800da3c:	1ad7      	sublt	r7, r2, r3
 800da3e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800da40:	eba3 0801 	sub.w	r8, r3, r1
 800da44:	4490      	add	r8, r2
 800da46:	4ba1      	ldr	r3, [pc, #644]	; (800dccc <_strtod_l+0x95c>)
 800da48:	f108 38ff 	add.w	r8, r8, #4294967295
 800da4c:	4598      	cmp	r8, r3
 800da4e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800da52:	f280 80c7 	bge.w	800dbe4 <_strtod_l+0x874>
 800da56:	eba3 0308 	sub.w	r3, r3, r8
 800da5a:	2b1f      	cmp	r3, #31
 800da5c:	eba2 0203 	sub.w	r2, r2, r3
 800da60:	f04f 0101 	mov.w	r1, #1
 800da64:	f300 80b1 	bgt.w	800dbca <_strtod_l+0x85a>
 800da68:	fa01 f303 	lsl.w	r3, r1, r3
 800da6c:	930d      	str	r3, [sp, #52]	; 0x34
 800da6e:	2300      	movs	r3, #0
 800da70:	9308      	str	r3, [sp, #32]
 800da72:	eb09 0802 	add.w	r8, r9, r2
 800da76:	9b04      	ldr	r3, [sp, #16]
 800da78:	45c1      	cmp	r9, r8
 800da7a:	4417      	add	r7, r2
 800da7c:	441f      	add	r7, r3
 800da7e:	464b      	mov	r3, r9
 800da80:	bfa8      	it	ge
 800da82:	4643      	movge	r3, r8
 800da84:	42bb      	cmp	r3, r7
 800da86:	bfa8      	it	ge
 800da88:	463b      	movge	r3, r7
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	bfc2      	ittt	gt
 800da8e:	eba8 0803 	subgt.w	r8, r8, r3
 800da92:	1aff      	subgt	r7, r7, r3
 800da94:	eba9 0903 	subgt.w	r9, r9, r3
 800da98:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da9a:	2b00      	cmp	r3, #0
 800da9c:	dd17      	ble.n	800dace <_strtod_l+0x75e>
 800da9e:	4631      	mov	r1, r6
 800daa0:	461a      	mov	r2, r3
 800daa2:	4620      	mov	r0, r4
 800daa4:	f001 fefe 	bl	800f8a4 <__pow5mult>
 800daa8:	4606      	mov	r6, r0
 800daaa:	2800      	cmp	r0, #0
 800daac:	f43f aea8 	beq.w	800d800 <_strtod_l+0x490>
 800dab0:	4601      	mov	r1, r0
 800dab2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800dab4:	4620      	mov	r0, r4
 800dab6:	f001 fe4b 	bl	800f750 <__multiply>
 800daba:	900b      	str	r0, [sp, #44]	; 0x2c
 800dabc:	2800      	cmp	r0, #0
 800dabe:	f43f ae9f 	beq.w	800d800 <_strtod_l+0x490>
 800dac2:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dac4:	4620      	mov	r0, r4
 800dac6:	f001 fd2b 	bl	800f520 <_Bfree>
 800daca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dacc:	9318      	str	r3, [sp, #96]	; 0x60
 800dace:	f1b8 0f00 	cmp.w	r8, #0
 800dad2:	f300 808c 	bgt.w	800dbee <_strtod_l+0x87e>
 800dad6:	9b06      	ldr	r3, [sp, #24]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	dd08      	ble.n	800daee <_strtod_l+0x77e>
 800dadc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800dade:	9905      	ldr	r1, [sp, #20]
 800dae0:	4620      	mov	r0, r4
 800dae2:	f001 fedf 	bl	800f8a4 <__pow5mult>
 800dae6:	9005      	str	r0, [sp, #20]
 800dae8:	2800      	cmp	r0, #0
 800daea:	f43f ae89 	beq.w	800d800 <_strtod_l+0x490>
 800daee:	2f00      	cmp	r7, #0
 800daf0:	dd08      	ble.n	800db04 <_strtod_l+0x794>
 800daf2:	9905      	ldr	r1, [sp, #20]
 800daf4:	463a      	mov	r2, r7
 800daf6:	4620      	mov	r0, r4
 800daf8:	f001 ff2e 	bl	800f958 <__lshift>
 800dafc:	9005      	str	r0, [sp, #20]
 800dafe:	2800      	cmp	r0, #0
 800db00:	f43f ae7e 	beq.w	800d800 <_strtod_l+0x490>
 800db04:	f1b9 0f00 	cmp.w	r9, #0
 800db08:	dd08      	ble.n	800db1c <_strtod_l+0x7ac>
 800db0a:	4631      	mov	r1, r6
 800db0c:	464a      	mov	r2, r9
 800db0e:	4620      	mov	r0, r4
 800db10:	f001 ff22 	bl	800f958 <__lshift>
 800db14:	4606      	mov	r6, r0
 800db16:	2800      	cmp	r0, #0
 800db18:	f43f ae72 	beq.w	800d800 <_strtod_l+0x490>
 800db1c:	9a05      	ldr	r2, [sp, #20]
 800db1e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800db20:	4620      	mov	r0, r4
 800db22:	f001 ffa5 	bl	800fa70 <__mdiff>
 800db26:	4605      	mov	r5, r0
 800db28:	2800      	cmp	r0, #0
 800db2a:	f43f ae69 	beq.w	800d800 <_strtod_l+0x490>
 800db2e:	68c3      	ldr	r3, [r0, #12]
 800db30:	930b      	str	r3, [sp, #44]	; 0x2c
 800db32:	2300      	movs	r3, #0
 800db34:	60c3      	str	r3, [r0, #12]
 800db36:	4631      	mov	r1, r6
 800db38:	f001 ff7e 	bl	800fa38 <__mcmp>
 800db3c:	2800      	cmp	r0, #0
 800db3e:	da60      	bge.n	800dc02 <_strtod_l+0x892>
 800db40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800db42:	ea53 030a 	orrs.w	r3, r3, sl
 800db46:	f040 8082 	bne.w	800dc4e <_strtod_l+0x8de>
 800db4a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d17d      	bne.n	800dc4e <_strtod_l+0x8de>
 800db52:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db56:	0d1b      	lsrs	r3, r3, #20
 800db58:	051b      	lsls	r3, r3, #20
 800db5a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800db5e:	d976      	bls.n	800dc4e <_strtod_l+0x8de>
 800db60:	696b      	ldr	r3, [r5, #20]
 800db62:	b913      	cbnz	r3, 800db6a <_strtod_l+0x7fa>
 800db64:	692b      	ldr	r3, [r5, #16]
 800db66:	2b01      	cmp	r3, #1
 800db68:	dd71      	ble.n	800dc4e <_strtod_l+0x8de>
 800db6a:	4629      	mov	r1, r5
 800db6c:	2201      	movs	r2, #1
 800db6e:	4620      	mov	r0, r4
 800db70:	f001 fef2 	bl	800f958 <__lshift>
 800db74:	4631      	mov	r1, r6
 800db76:	4605      	mov	r5, r0
 800db78:	f001 ff5e 	bl	800fa38 <__mcmp>
 800db7c:	2800      	cmp	r0, #0
 800db7e:	dd66      	ble.n	800dc4e <_strtod_l+0x8de>
 800db80:	9904      	ldr	r1, [sp, #16]
 800db82:	4a53      	ldr	r2, [pc, #332]	; (800dcd0 <_strtod_l+0x960>)
 800db84:	465b      	mov	r3, fp
 800db86:	2900      	cmp	r1, #0
 800db88:	f000 8081 	beq.w	800dc8e <_strtod_l+0x91e>
 800db8c:	ea02 010b 	and.w	r1, r2, fp
 800db90:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800db94:	dc7b      	bgt.n	800dc8e <_strtod_l+0x91e>
 800db96:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800db9a:	f77f aea9 	ble.w	800d8f0 <_strtod_l+0x580>
 800db9e:	4b4d      	ldr	r3, [pc, #308]	; (800dcd4 <_strtod_l+0x964>)
 800dba0:	4650      	mov	r0, sl
 800dba2:	4659      	mov	r1, fp
 800dba4:	2200      	movs	r2, #0
 800dba6:	f7f2 fd2f 	bl	8000608 <__aeabi_dmul>
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4303      	orrs	r3, r0
 800dbae:	bf08      	it	eq
 800dbb0:	2322      	moveq	r3, #34	; 0x22
 800dbb2:	4682      	mov	sl, r0
 800dbb4:	468b      	mov	fp, r1
 800dbb6:	bf08      	it	eq
 800dbb8:	6023      	streq	r3, [r4, #0]
 800dbba:	e62b      	b.n	800d814 <_strtod_l+0x4a4>
 800dbbc:	f04f 32ff 	mov.w	r2, #4294967295
 800dbc0:	fa02 f303 	lsl.w	r3, r2, r3
 800dbc4:	ea03 0a0a 	and.w	sl, r3, sl
 800dbc8:	e6e3      	b.n	800d992 <_strtod_l+0x622>
 800dbca:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800dbce:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800dbd2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800dbd6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800dbda:	fa01 f308 	lsl.w	r3, r1, r8
 800dbde:	9308      	str	r3, [sp, #32]
 800dbe0:	910d      	str	r1, [sp, #52]	; 0x34
 800dbe2:	e746      	b.n	800da72 <_strtod_l+0x702>
 800dbe4:	2300      	movs	r3, #0
 800dbe6:	9308      	str	r3, [sp, #32]
 800dbe8:	2301      	movs	r3, #1
 800dbea:	930d      	str	r3, [sp, #52]	; 0x34
 800dbec:	e741      	b.n	800da72 <_strtod_l+0x702>
 800dbee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dbf0:	4642      	mov	r2, r8
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f001 feb0 	bl	800f958 <__lshift>
 800dbf8:	9018      	str	r0, [sp, #96]	; 0x60
 800dbfa:	2800      	cmp	r0, #0
 800dbfc:	f47f af6b 	bne.w	800dad6 <_strtod_l+0x766>
 800dc00:	e5fe      	b.n	800d800 <_strtod_l+0x490>
 800dc02:	465f      	mov	r7, fp
 800dc04:	d16e      	bne.n	800dce4 <_strtod_l+0x974>
 800dc06:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800dc08:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc0c:	b342      	cbz	r2, 800dc60 <_strtod_l+0x8f0>
 800dc0e:	4a32      	ldr	r2, [pc, #200]	; (800dcd8 <_strtod_l+0x968>)
 800dc10:	4293      	cmp	r3, r2
 800dc12:	d128      	bne.n	800dc66 <_strtod_l+0x8f6>
 800dc14:	9b04      	ldr	r3, [sp, #16]
 800dc16:	4651      	mov	r1, sl
 800dc18:	b1eb      	cbz	r3, 800dc56 <_strtod_l+0x8e6>
 800dc1a:	4b2d      	ldr	r3, [pc, #180]	; (800dcd0 <_strtod_l+0x960>)
 800dc1c:	403b      	ands	r3, r7
 800dc1e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800dc22:	f04f 32ff 	mov.w	r2, #4294967295
 800dc26:	d819      	bhi.n	800dc5c <_strtod_l+0x8ec>
 800dc28:	0d1b      	lsrs	r3, r3, #20
 800dc2a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800dc2e:	fa02 f303 	lsl.w	r3, r2, r3
 800dc32:	4299      	cmp	r1, r3
 800dc34:	d117      	bne.n	800dc66 <_strtod_l+0x8f6>
 800dc36:	4b29      	ldr	r3, [pc, #164]	; (800dcdc <_strtod_l+0x96c>)
 800dc38:	429f      	cmp	r7, r3
 800dc3a:	d102      	bne.n	800dc42 <_strtod_l+0x8d2>
 800dc3c:	3101      	adds	r1, #1
 800dc3e:	f43f addf 	beq.w	800d800 <_strtod_l+0x490>
 800dc42:	4b23      	ldr	r3, [pc, #140]	; (800dcd0 <_strtod_l+0x960>)
 800dc44:	403b      	ands	r3, r7
 800dc46:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800dc4a:	f04f 0a00 	mov.w	sl, #0
 800dc4e:	9b04      	ldr	r3, [sp, #16]
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d1a4      	bne.n	800db9e <_strtod_l+0x82e>
 800dc54:	e5de      	b.n	800d814 <_strtod_l+0x4a4>
 800dc56:	f04f 33ff 	mov.w	r3, #4294967295
 800dc5a:	e7ea      	b.n	800dc32 <_strtod_l+0x8c2>
 800dc5c:	4613      	mov	r3, r2
 800dc5e:	e7e8      	b.n	800dc32 <_strtod_l+0x8c2>
 800dc60:	ea53 030a 	orrs.w	r3, r3, sl
 800dc64:	d08c      	beq.n	800db80 <_strtod_l+0x810>
 800dc66:	9b08      	ldr	r3, [sp, #32]
 800dc68:	b1db      	cbz	r3, 800dca2 <_strtod_l+0x932>
 800dc6a:	423b      	tst	r3, r7
 800dc6c:	d0ef      	beq.n	800dc4e <_strtod_l+0x8de>
 800dc6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dc70:	9a04      	ldr	r2, [sp, #16]
 800dc72:	4650      	mov	r0, sl
 800dc74:	4659      	mov	r1, fp
 800dc76:	b1c3      	cbz	r3, 800dcaa <_strtod_l+0x93a>
 800dc78:	f7ff fb5c 	bl	800d334 <sulp>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	ec51 0b18 	vmov	r0, r1, d8
 800dc84:	f7f2 fb0a 	bl	800029c <__adddf3>
 800dc88:	4682      	mov	sl, r0
 800dc8a:	468b      	mov	fp, r1
 800dc8c:	e7df      	b.n	800dc4e <_strtod_l+0x8de>
 800dc8e:	4013      	ands	r3, r2
 800dc90:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800dc94:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800dc98:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800dc9c:	f04f 3aff 	mov.w	sl, #4294967295
 800dca0:	e7d5      	b.n	800dc4e <_strtod_l+0x8de>
 800dca2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800dca4:	ea13 0f0a 	tst.w	r3, sl
 800dca8:	e7e0      	b.n	800dc6c <_strtod_l+0x8fc>
 800dcaa:	f7ff fb43 	bl	800d334 <sulp>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	460b      	mov	r3, r1
 800dcb2:	ec51 0b18 	vmov	r0, r1, d8
 800dcb6:	f7f2 faef 	bl	8000298 <__aeabi_dsub>
 800dcba:	2200      	movs	r2, #0
 800dcbc:	2300      	movs	r3, #0
 800dcbe:	4682      	mov	sl, r0
 800dcc0:	468b      	mov	fp, r1
 800dcc2:	f7f2 ff09 	bl	8000ad8 <__aeabi_dcmpeq>
 800dcc6:	2800      	cmp	r0, #0
 800dcc8:	d0c1      	beq.n	800dc4e <_strtod_l+0x8de>
 800dcca:	e611      	b.n	800d8f0 <_strtod_l+0x580>
 800dccc:	fffffc02 	.word	0xfffffc02
 800dcd0:	7ff00000 	.word	0x7ff00000
 800dcd4:	39500000 	.word	0x39500000
 800dcd8:	000fffff 	.word	0x000fffff
 800dcdc:	7fefffff 	.word	0x7fefffff
 800dce0:	08011200 	.word	0x08011200
 800dce4:	4631      	mov	r1, r6
 800dce6:	4628      	mov	r0, r5
 800dce8:	f002 f824 	bl	800fd34 <__ratio>
 800dcec:	ec59 8b10 	vmov	r8, r9, d0
 800dcf0:	ee10 0a10 	vmov	r0, s0
 800dcf4:	2200      	movs	r2, #0
 800dcf6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dcfa:	4649      	mov	r1, r9
 800dcfc:	f7f2 ff00 	bl	8000b00 <__aeabi_dcmple>
 800dd00:	2800      	cmp	r0, #0
 800dd02:	d07a      	beq.n	800ddfa <_strtod_l+0xa8a>
 800dd04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d04a      	beq.n	800dda0 <_strtod_l+0xa30>
 800dd0a:	4b95      	ldr	r3, [pc, #596]	; (800df60 <_strtod_l+0xbf0>)
 800dd0c:	2200      	movs	r2, #0
 800dd0e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dd12:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800df60 <_strtod_l+0xbf0>
 800dd16:	f04f 0800 	mov.w	r8, #0
 800dd1a:	4b92      	ldr	r3, [pc, #584]	; (800df64 <_strtod_l+0xbf4>)
 800dd1c:	403b      	ands	r3, r7
 800dd1e:	930d      	str	r3, [sp, #52]	; 0x34
 800dd20:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dd22:	4b91      	ldr	r3, [pc, #580]	; (800df68 <_strtod_l+0xbf8>)
 800dd24:	429a      	cmp	r2, r3
 800dd26:	f040 80b0 	bne.w	800de8a <_strtod_l+0xb1a>
 800dd2a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd2e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800dd32:	ec4b ab10 	vmov	d0, sl, fp
 800dd36:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800dd3a:	f001 ff23 	bl	800fb84 <__ulp>
 800dd3e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dd42:	ec53 2b10 	vmov	r2, r3, d0
 800dd46:	f7f2 fc5f 	bl	8000608 <__aeabi_dmul>
 800dd4a:	4652      	mov	r2, sl
 800dd4c:	465b      	mov	r3, fp
 800dd4e:	f7f2 faa5 	bl	800029c <__adddf3>
 800dd52:	460b      	mov	r3, r1
 800dd54:	4983      	ldr	r1, [pc, #524]	; (800df64 <_strtod_l+0xbf4>)
 800dd56:	4a85      	ldr	r2, [pc, #532]	; (800df6c <_strtod_l+0xbfc>)
 800dd58:	4019      	ands	r1, r3
 800dd5a:	4291      	cmp	r1, r2
 800dd5c:	4682      	mov	sl, r0
 800dd5e:	d960      	bls.n	800de22 <_strtod_l+0xab2>
 800dd60:	ee18 3a90 	vmov	r3, s17
 800dd64:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800dd68:	4293      	cmp	r3, r2
 800dd6a:	d104      	bne.n	800dd76 <_strtod_l+0xa06>
 800dd6c:	ee18 3a10 	vmov	r3, s16
 800dd70:	3301      	adds	r3, #1
 800dd72:	f43f ad45 	beq.w	800d800 <_strtod_l+0x490>
 800dd76:	f8df b200 	ldr.w	fp, [pc, #512]	; 800df78 <_strtod_l+0xc08>
 800dd7a:	f04f 3aff 	mov.w	sl, #4294967295
 800dd7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800dd80:	4620      	mov	r0, r4
 800dd82:	f001 fbcd 	bl	800f520 <_Bfree>
 800dd86:	9905      	ldr	r1, [sp, #20]
 800dd88:	4620      	mov	r0, r4
 800dd8a:	f001 fbc9 	bl	800f520 <_Bfree>
 800dd8e:	4631      	mov	r1, r6
 800dd90:	4620      	mov	r0, r4
 800dd92:	f001 fbc5 	bl	800f520 <_Bfree>
 800dd96:	4629      	mov	r1, r5
 800dd98:	4620      	mov	r0, r4
 800dd9a:	f001 fbc1 	bl	800f520 <_Bfree>
 800dd9e:	e61a      	b.n	800d9d6 <_strtod_l+0x666>
 800dda0:	f1ba 0f00 	cmp.w	sl, #0
 800dda4:	d11b      	bne.n	800ddde <_strtod_l+0xa6e>
 800dda6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ddaa:	b9f3      	cbnz	r3, 800ddea <_strtod_l+0xa7a>
 800ddac:	4b6c      	ldr	r3, [pc, #432]	; (800df60 <_strtod_l+0xbf0>)
 800ddae:	2200      	movs	r2, #0
 800ddb0:	4640      	mov	r0, r8
 800ddb2:	4649      	mov	r1, r9
 800ddb4:	f7f2 fe9a 	bl	8000aec <__aeabi_dcmplt>
 800ddb8:	b9d0      	cbnz	r0, 800ddf0 <_strtod_l+0xa80>
 800ddba:	4640      	mov	r0, r8
 800ddbc:	4649      	mov	r1, r9
 800ddbe:	4b6c      	ldr	r3, [pc, #432]	; (800df70 <_strtod_l+0xc00>)
 800ddc0:	2200      	movs	r2, #0
 800ddc2:	f7f2 fc21 	bl	8000608 <__aeabi_dmul>
 800ddc6:	4680      	mov	r8, r0
 800ddc8:	4689      	mov	r9, r1
 800ddca:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ddce:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ddd2:	9315      	str	r3, [sp, #84]	; 0x54
 800ddd4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ddd8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800dddc:	e79d      	b.n	800dd1a <_strtod_l+0x9aa>
 800ddde:	f1ba 0f01 	cmp.w	sl, #1
 800dde2:	d102      	bne.n	800ddea <_strtod_l+0xa7a>
 800dde4:	2f00      	cmp	r7, #0
 800dde6:	f43f ad83 	beq.w	800d8f0 <_strtod_l+0x580>
 800ddea:	4b62      	ldr	r3, [pc, #392]	; (800df74 <_strtod_l+0xc04>)
 800ddec:	2200      	movs	r2, #0
 800ddee:	e78e      	b.n	800dd0e <_strtod_l+0x99e>
 800ddf0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800df70 <_strtod_l+0xc00>
 800ddf4:	f04f 0800 	mov.w	r8, #0
 800ddf8:	e7e7      	b.n	800ddca <_strtod_l+0xa5a>
 800ddfa:	4b5d      	ldr	r3, [pc, #372]	; (800df70 <_strtod_l+0xc00>)
 800ddfc:	4640      	mov	r0, r8
 800ddfe:	4649      	mov	r1, r9
 800de00:	2200      	movs	r2, #0
 800de02:	f7f2 fc01 	bl	8000608 <__aeabi_dmul>
 800de06:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800de08:	4680      	mov	r8, r0
 800de0a:	4689      	mov	r9, r1
 800de0c:	b933      	cbnz	r3, 800de1c <_strtod_l+0xaac>
 800de0e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800de12:	900e      	str	r0, [sp, #56]	; 0x38
 800de14:	930f      	str	r3, [sp, #60]	; 0x3c
 800de16:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800de1a:	e7dd      	b.n	800ddd8 <_strtod_l+0xa68>
 800de1c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800de20:	e7f9      	b.n	800de16 <_strtod_l+0xaa6>
 800de22:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800de26:	9b04      	ldr	r3, [sp, #16]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d1a8      	bne.n	800dd7e <_strtod_l+0xa0e>
 800de2c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800de30:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800de32:	0d1b      	lsrs	r3, r3, #20
 800de34:	051b      	lsls	r3, r3, #20
 800de36:	429a      	cmp	r2, r3
 800de38:	d1a1      	bne.n	800dd7e <_strtod_l+0xa0e>
 800de3a:	4640      	mov	r0, r8
 800de3c:	4649      	mov	r1, r9
 800de3e:	f7f2 ff43 	bl	8000cc8 <__aeabi_d2lz>
 800de42:	f7f2 fbb3 	bl	80005ac <__aeabi_l2d>
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	4640      	mov	r0, r8
 800de4c:	4649      	mov	r1, r9
 800de4e:	f7f2 fa23 	bl	8000298 <__aeabi_dsub>
 800de52:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800de54:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800de58:	ea43 030a 	orr.w	r3, r3, sl
 800de5c:	4313      	orrs	r3, r2
 800de5e:	4680      	mov	r8, r0
 800de60:	4689      	mov	r9, r1
 800de62:	d055      	beq.n	800df10 <_strtod_l+0xba0>
 800de64:	a336      	add	r3, pc, #216	; (adr r3, 800df40 <_strtod_l+0xbd0>)
 800de66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de6a:	f7f2 fe3f 	bl	8000aec <__aeabi_dcmplt>
 800de6e:	2800      	cmp	r0, #0
 800de70:	f47f acd0 	bne.w	800d814 <_strtod_l+0x4a4>
 800de74:	a334      	add	r3, pc, #208	; (adr r3, 800df48 <_strtod_l+0xbd8>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	4640      	mov	r0, r8
 800de7c:	4649      	mov	r1, r9
 800de7e:	f7f2 fe53 	bl	8000b28 <__aeabi_dcmpgt>
 800de82:	2800      	cmp	r0, #0
 800de84:	f43f af7b 	beq.w	800dd7e <_strtod_l+0xa0e>
 800de88:	e4c4      	b.n	800d814 <_strtod_l+0x4a4>
 800de8a:	9b04      	ldr	r3, [sp, #16]
 800de8c:	b333      	cbz	r3, 800dedc <_strtod_l+0xb6c>
 800de8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800de90:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800de94:	d822      	bhi.n	800dedc <_strtod_l+0xb6c>
 800de96:	a32e      	add	r3, pc, #184	; (adr r3, 800df50 <_strtod_l+0xbe0>)
 800de98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de9c:	4640      	mov	r0, r8
 800de9e:	4649      	mov	r1, r9
 800dea0:	f7f2 fe2e 	bl	8000b00 <__aeabi_dcmple>
 800dea4:	b1a0      	cbz	r0, 800ded0 <_strtod_l+0xb60>
 800dea6:	4649      	mov	r1, r9
 800dea8:	4640      	mov	r0, r8
 800deaa:	f7f2 fe85 	bl	8000bb8 <__aeabi_d2uiz>
 800deae:	2801      	cmp	r0, #1
 800deb0:	bf38      	it	cc
 800deb2:	2001      	movcc	r0, #1
 800deb4:	f7f2 fb2e 	bl	8000514 <__aeabi_ui2d>
 800deb8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800deba:	4680      	mov	r8, r0
 800debc:	4689      	mov	r9, r1
 800debe:	bb23      	cbnz	r3, 800df0a <_strtod_l+0xb9a>
 800dec0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dec4:	9010      	str	r0, [sp, #64]	; 0x40
 800dec6:	9311      	str	r3, [sp, #68]	; 0x44
 800dec8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800decc:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ded0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ded2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ded4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ded8:	1a9b      	subs	r3, r3, r2
 800deda:	9309      	str	r3, [sp, #36]	; 0x24
 800dedc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800dee0:	eeb0 0a48 	vmov.f32	s0, s16
 800dee4:	eef0 0a68 	vmov.f32	s1, s17
 800dee8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800deec:	f001 fe4a 	bl	800fb84 <__ulp>
 800def0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800def4:	ec53 2b10 	vmov	r2, r3, d0
 800def8:	f7f2 fb86 	bl	8000608 <__aeabi_dmul>
 800defc:	ec53 2b18 	vmov	r2, r3, d8
 800df00:	f7f2 f9cc 	bl	800029c <__adddf3>
 800df04:	4682      	mov	sl, r0
 800df06:	468b      	mov	fp, r1
 800df08:	e78d      	b.n	800de26 <_strtod_l+0xab6>
 800df0a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800df0e:	e7db      	b.n	800dec8 <_strtod_l+0xb58>
 800df10:	a311      	add	r3, pc, #68	; (adr r3, 800df58 <_strtod_l+0xbe8>)
 800df12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df16:	f7f2 fde9 	bl	8000aec <__aeabi_dcmplt>
 800df1a:	e7b2      	b.n	800de82 <_strtod_l+0xb12>
 800df1c:	2300      	movs	r3, #0
 800df1e:	930a      	str	r3, [sp, #40]	; 0x28
 800df20:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800df22:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800df24:	6013      	str	r3, [r2, #0]
 800df26:	f7ff ba6b 	b.w	800d400 <_strtod_l+0x90>
 800df2a:	2a65      	cmp	r2, #101	; 0x65
 800df2c:	f43f ab5f 	beq.w	800d5ee <_strtod_l+0x27e>
 800df30:	2a45      	cmp	r2, #69	; 0x45
 800df32:	f43f ab5c 	beq.w	800d5ee <_strtod_l+0x27e>
 800df36:	2301      	movs	r3, #1
 800df38:	f7ff bb94 	b.w	800d664 <_strtod_l+0x2f4>
 800df3c:	f3af 8000 	nop.w
 800df40:	94a03595 	.word	0x94a03595
 800df44:	3fdfffff 	.word	0x3fdfffff
 800df48:	35afe535 	.word	0x35afe535
 800df4c:	3fe00000 	.word	0x3fe00000
 800df50:	ffc00000 	.word	0xffc00000
 800df54:	41dfffff 	.word	0x41dfffff
 800df58:	94a03595 	.word	0x94a03595
 800df5c:	3fcfffff 	.word	0x3fcfffff
 800df60:	3ff00000 	.word	0x3ff00000
 800df64:	7ff00000 	.word	0x7ff00000
 800df68:	7fe00000 	.word	0x7fe00000
 800df6c:	7c9fffff 	.word	0x7c9fffff
 800df70:	3fe00000 	.word	0x3fe00000
 800df74:	bff00000 	.word	0xbff00000
 800df78:	7fefffff 	.word	0x7fefffff

0800df7c <_strtod_r>:
 800df7c:	4b01      	ldr	r3, [pc, #4]	; (800df84 <_strtod_r+0x8>)
 800df7e:	f7ff b9f7 	b.w	800d370 <_strtod_l>
 800df82:	bf00      	nop
 800df84:	200002c4 	.word	0x200002c4

0800df88 <_strtol_l.constprop.0>:
 800df88:	2b01      	cmp	r3, #1
 800df8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800df8e:	d001      	beq.n	800df94 <_strtol_l.constprop.0+0xc>
 800df90:	2b24      	cmp	r3, #36	; 0x24
 800df92:	d906      	bls.n	800dfa2 <_strtol_l.constprop.0+0x1a>
 800df94:	f7fe faee 	bl	800c574 <__errno>
 800df98:	2316      	movs	r3, #22
 800df9a:	6003      	str	r3, [r0, #0]
 800df9c:	2000      	movs	r0, #0
 800df9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfa2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800e088 <_strtol_l.constprop.0+0x100>
 800dfa6:	460d      	mov	r5, r1
 800dfa8:	462e      	mov	r6, r5
 800dfaa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800dfae:	f814 700c 	ldrb.w	r7, [r4, ip]
 800dfb2:	f017 0708 	ands.w	r7, r7, #8
 800dfb6:	d1f7      	bne.n	800dfa8 <_strtol_l.constprop.0+0x20>
 800dfb8:	2c2d      	cmp	r4, #45	; 0x2d
 800dfba:	d132      	bne.n	800e022 <_strtol_l.constprop.0+0x9a>
 800dfbc:	782c      	ldrb	r4, [r5, #0]
 800dfbe:	2701      	movs	r7, #1
 800dfc0:	1cb5      	adds	r5, r6, #2
 800dfc2:	2b00      	cmp	r3, #0
 800dfc4:	d05b      	beq.n	800e07e <_strtol_l.constprop.0+0xf6>
 800dfc6:	2b10      	cmp	r3, #16
 800dfc8:	d109      	bne.n	800dfde <_strtol_l.constprop.0+0x56>
 800dfca:	2c30      	cmp	r4, #48	; 0x30
 800dfcc:	d107      	bne.n	800dfde <_strtol_l.constprop.0+0x56>
 800dfce:	782c      	ldrb	r4, [r5, #0]
 800dfd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800dfd4:	2c58      	cmp	r4, #88	; 0x58
 800dfd6:	d14d      	bne.n	800e074 <_strtol_l.constprop.0+0xec>
 800dfd8:	786c      	ldrb	r4, [r5, #1]
 800dfda:	2310      	movs	r3, #16
 800dfdc:	3502      	adds	r5, #2
 800dfde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800dfe2:	f108 38ff 	add.w	r8, r8, #4294967295
 800dfe6:	f04f 0c00 	mov.w	ip, #0
 800dfea:	fbb8 f9f3 	udiv	r9, r8, r3
 800dfee:	4666      	mov	r6, ip
 800dff0:	fb03 8a19 	mls	sl, r3, r9, r8
 800dff4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800dff8:	f1be 0f09 	cmp.w	lr, #9
 800dffc:	d816      	bhi.n	800e02c <_strtol_l.constprop.0+0xa4>
 800dffe:	4674      	mov	r4, lr
 800e000:	42a3      	cmp	r3, r4
 800e002:	dd24      	ble.n	800e04e <_strtol_l.constprop.0+0xc6>
 800e004:	f1bc 0f00 	cmp.w	ip, #0
 800e008:	db1e      	blt.n	800e048 <_strtol_l.constprop.0+0xc0>
 800e00a:	45b1      	cmp	r9, r6
 800e00c:	d31c      	bcc.n	800e048 <_strtol_l.constprop.0+0xc0>
 800e00e:	d101      	bne.n	800e014 <_strtol_l.constprop.0+0x8c>
 800e010:	45a2      	cmp	sl, r4
 800e012:	db19      	blt.n	800e048 <_strtol_l.constprop.0+0xc0>
 800e014:	fb06 4603 	mla	r6, r6, r3, r4
 800e018:	f04f 0c01 	mov.w	ip, #1
 800e01c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e020:	e7e8      	b.n	800dff4 <_strtol_l.constprop.0+0x6c>
 800e022:	2c2b      	cmp	r4, #43	; 0x2b
 800e024:	bf04      	itt	eq
 800e026:	782c      	ldrbeq	r4, [r5, #0]
 800e028:	1cb5      	addeq	r5, r6, #2
 800e02a:	e7ca      	b.n	800dfc2 <_strtol_l.constprop.0+0x3a>
 800e02c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e030:	f1be 0f19 	cmp.w	lr, #25
 800e034:	d801      	bhi.n	800e03a <_strtol_l.constprop.0+0xb2>
 800e036:	3c37      	subs	r4, #55	; 0x37
 800e038:	e7e2      	b.n	800e000 <_strtol_l.constprop.0+0x78>
 800e03a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e03e:	f1be 0f19 	cmp.w	lr, #25
 800e042:	d804      	bhi.n	800e04e <_strtol_l.constprop.0+0xc6>
 800e044:	3c57      	subs	r4, #87	; 0x57
 800e046:	e7db      	b.n	800e000 <_strtol_l.constprop.0+0x78>
 800e048:	f04f 3cff 	mov.w	ip, #4294967295
 800e04c:	e7e6      	b.n	800e01c <_strtol_l.constprop.0+0x94>
 800e04e:	f1bc 0f00 	cmp.w	ip, #0
 800e052:	da05      	bge.n	800e060 <_strtol_l.constprop.0+0xd8>
 800e054:	2322      	movs	r3, #34	; 0x22
 800e056:	6003      	str	r3, [r0, #0]
 800e058:	4646      	mov	r6, r8
 800e05a:	b942      	cbnz	r2, 800e06e <_strtol_l.constprop.0+0xe6>
 800e05c:	4630      	mov	r0, r6
 800e05e:	e79e      	b.n	800df9e <_strtol_l.constprop.0+0x16>
 800e060:	b107      	cbz	r7, 800e064 <_strtol_l.constprop.0+0xdc>
 800e062:	4276      	negs	r6, r6
 800e064:	2a00      	cmp	r2, #0
 800e066:	d0f9      	beq.n	800e05c <_strtol_l.constprop.0+0xd4>
 800e068:	f1bc 0f00 	cmp.w	ip, #0
 800e06c:	d000      	beq.n	800e070 <_strtol_l.constprop.0+0xe8>
 800e06e:	1e69      	subs	r1, r5, #1
 800e070:	6011      	str	r1, [r2, #0]
 800e072:	e7f3      	b.n	800e05c <_strtol_l.constprop.0+0xd4>
 800e074:	2430      	movs	r4, #48	; 0x30
 800e076:	2b00      	cmp	r3, #0
 800e078:	d1b1      	bne.n	800dfde <_strtol_l.constprop.0+0x56>
 800e07a:	2308      	movs	r3, #8
 800e07c:	e7af      	b.n	800dfde <_strtol_l.constprop.0+0x56>
 800e07e:	2c30      	cmp	r4, #48	; 0x30
 800e080:	d0a5      	beq.n	800dfce <_strtol_l.constprop.0+0x46>
 800e082:	230a      	movs	r3, #10
 800e084:	e7ab      	b.n	800dfde <_strtol_l.constprop.0+0x56>
 800e086:	bf00      	nop
 800e088:	08011229 	.word	0x08011229

0800e08c <_strtol_r>:
 800e08c:	f7ff bf7c 	b.w	800df88 <_strtol_l.constprop.0>

0800e090 <quorem>:
 800e090:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e094:	6903      	ldr	r3, [r0, #16]
 800e096:	690c      	ldr	r4, [r1, #16]
 800e098:	42a3      	cmp	r3, r4
 800e09a:	4607      	mov	r7, r0
 800e09c:	f2c0 8081 	blt.w	800e1a2 <quorem+0x112>
 800e0a0:	3c01      	subs	r4, #1
 800e0a2:	f101 0814 	add.w	r8, r1, #20
 800e0a6:	f100 0514 	add.w	r5, r0, #20
 800e0aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e0b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e0b8:	3301      	adds	r3, #1
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800e0c0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e0c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800e0c8:	d331      	bcc.n	800e12e <quorem+0x9e>
 800e0ca:	f04f 0e00 	mov.w	lr, #0
 800e0ce:	4640      	mov	r0, r8
 800e0d0:	46ac      	mov	ip, r5
 800e0d2:	46f2      	mov	sl, lr
 800e0d4:	f850 2b04 	ldr.w	r2, [r0], #4
 800e0d8:	b293      	uxth	r3, r2
 800e0da:	fb06 e303 	mla	r3, r6, r3, lr
 800e0de:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800e0e2:	b29b      	uxth	r3, r3
 800e0e4:	ebaa 0303 	sub.w	r3, sl, r3
 800e0e8:	f8dc a000 	ldr.w	sl, [ip]
 800e0ec:	0c12      	lsrs	r2, r2, #16
 800e0ee:	fa13 f38a 	uxtah	r3, r3, sl
 800e0f2:	fb06 e202 	mla	r2, r6, r2, lr
 800e0f6:	9300      	str	r3, [sp, #0]
 800e0f8:	9b00      	ldr	r3, [sp, #0]
 800e0fa:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800e0fe:	b292      	uxth	r2, r2
 800e100:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800e104:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e108:	f8bd 3000 	ldrh.w	r3, [sp]
 800e10c:	4581      	cmp	r9, r0
 800e10e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e112:	f84c 3b04 	str.w	r3, [ip], #4
 800e116:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800e11a:	d2db      	bcs.n	800e0d4 <quorem+0x44>
 800e11c:	f855 300b 	ldr.w	r3, [r5, fp]
 800e120:	b92b      	cbnz	r3, 800e12e <quorem+0x9e>
 800e122:	9b01      	ldr	r3, [sp, #4]
 800e124:	3b04      	subs	r3, #4
 800e126:	429d      	cmp	r5, r3
 800e128:	461a      	mov	r2, r3
 800e12a:	d32e      	bcc.n	800e18a <quorem+0xfa>
 800e12c:	613c      	str	r4, [r7, #16]
 800e12e:	4638      	mov	r0, r7
 800e130:	f001 fc82 	bl	800fa38 <__mcmp>
 800e134:	2800      	cmp	r0, #0
 800e136:	db24      	blt.n	800e182 <quorem+0xf2>
 800e138:	3601      	adds	r6, #1
 800e13a:	4628      	mov	r0, r5
 800e13c:	f04f 0c00 	mov.w	ip, #0
 800e140:	f858 2b04 	ldr.w	r2, [r8], #4
 800e144:	f8d0 e000 	ldr.w	lr, [r0]
 800e148:	b293      	uxth	r3, r2
 800e14a:	ebac 0303 	sub.w	r3, ip, r3
 800e14e:	0c12      	lsrs	r2, r2, #16
 800e150:	fa13 f38e 	uxtah	r3, r3, lr
 800e154:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800e158:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800e15c:	b29b      	uxth	r3, r3
 800e15e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e162:	45c1      	cmp	r9, r8
 800e164:	f840 3b04 	str.w	r3, [r0], #4
 800e168:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800e16c:	d2e8      	bcs.n	800e140 <quorem+0xb0>
 800e16e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e172:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e176:	b922      	cbnz	r2, 800e182 <quorem+0xf2>
 800e178:	3b04      	subs	r3, #4
 800e17a:	429d      	cmp	r5, r3
 800e17c:	461a      	mov	r2, r3
 800e17e:	d30a      	bcc.n	800e196 <quorem+0x106>
 800e180:	613c      	str	r4, [r7, #16]
 800e182:	4630      	mov	r0, r6
 800e184:	b003      	add	sp, #12
 800e186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e18a:	6812      	ldr	r2, [r2, #0]
 800e18c:	3b04      	subs	r3, #4
 800e18e:	2a00      	cmp	r2, #0
 800e190:	d1cc      	bne.n	800e12c <quorem+0x9c>
 800e192:	3c01      	subs	r4, #1
 800e194:	e7c7      	b.n	800e126 <quorem+0x96>
 800e196:	6812      	ldr	r2, [r2, #0]
 800e198:	3b04      	subs	r3, #4
 800e19a:	2a00      	cmp	r2, #0
 800e19c:	d1f0      	bne.n	800e180 <quorem+0xf0>
 800e19e:	3c01      	subs	r4, #1
 800e1a0:	e7eb      	b.n	800e17a <quorem+0xea>
 800e1a2:	2000      	movs	r0, #0
 800e1a4:	e7ee      	b.n	800e184 <quorem+0xf4>
	...

0800e1a8 <_dtoa_r>:
 800e1a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1ac:	ed2d 8b04 	vpush	{d8-d9}
 800e1b0:	ec57 6b10 	vmov	r6, r7, d0
 800e1b4:	b093      	sub	sp, #76	; 0x4c
 800e1b6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800e1b8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800e1bc:	9106      	str	r1, [sp, #24]
 800e1be:	ee10 aa10 	vmov	sl, s0
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	9209      	str	r2, [sp, #36]	; 0x24
 800e1c6:	930c      	str	r3, [sp, #48]	; 0x30
 800e1c8:	46bb      	mov	fp, r7
 800e1ca:	b975      	cbnz	r5, 800e1ea <_dtoa_r+0x42>
 800e1cc:	2010      	movs	r0, #16
 800e1ce:	f001 f94d 	bl	800f46c <malloc>
 800e1d2:	4602      	mov	r2, r0
 800e1d4:	6260      	str	r0, [r4, #36]	; 0x24
 800e1d6:	b920      	cbnz	r0, 800e1e2 <_dtoa_r+0x3a>
 800e1d8:	4ba7      	ldr	r3, [pc, #668]	; (800e478 <_dtoa_r+0x2d0>)
 800e1da:	21ea      	movs	r1, #234	; 0xea
 800e1dc:	48a7      	ldr	r0, [pc, #668]	; (800e47c <_dtoa_r+0x2d4>)
 800e1de:	f002 f8ad 	bl	801033c <__assert_func>
 800e1e2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800e1e6:	6005      	str	r5, [r0, #0]
 800e1e8:	60c5      	str	r5, [r0, #12]
 800e1ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e1ec:	6819      	ldr	r1, [r3, #0]
 800e1ee:	b151      	cbz	r1, 800e206 <_dtoa_r+0x5e>
 800e1f0:	685a      	ldr	r2, [r3, #4]
 800e1f2:	604a      	str	r2, [r1, #4]
 800e1f4:	2301      	movs	r3, #1
 800e1f6:	4093      	lsls	r3, r2
 800e1f8:	608b      	str	r3, [r1, #8]
 800e1fa:	4620      	mov	r0, r4
 800e1fc:	f001 f990 	bl	800f520 <_Bfree>
 800e200:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e202:	2200      	movs	r2, #0
 800e204:	601a      	str	r2, [r3, #0]
 800e206:	1e3b      	subs	r3, r7, #0
 800e208:	bfaa      	itet	ge
 800e20a:	2300      	movge	r3, #0
 800e20c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800e210:	f8c8 3000 	strge.w	r3, [r8]
 800e214:	4b9a      	ldr	r3, [pc, #616]	; (800e480 <_dtoa_r+0x2d8>)
 800e216:	bfbc      	itt	lt
 800e218:	2201      	movlt	r2, #1
 800e21a:	f8c8 2000 	strlt.w	r2, [r8]
 800e21e:	ea33 030b 	bics.w	r3, r3, fp
 800e222:	d11b      	bne.n	800e25c <_dtoa_r+0xb4>
 800e224:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e226:	f242 730f 	movw	r3, #9999	; 0x270f
 800e22a:	6013      	str	r3, [r2, #0]
 800e22c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800e230:	4333      	orrs	r3, r6
 800e232:	f000 8592 	beq.w	800ed5a <_dtoa_r+0xbb2>
 800e236:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e238:	b963      	cbnz	r3, 800e254 <_dtoa_r+0xac>
 800e23a:	4b92      	ldr	r3, [pc, #584]	; (800e484 <_dtoa_r+0x2dc>)
 800e23c:	e022      	b.n	800e284 <_dtoa_r+0xdc>
 800e23e:	4b92      	ldr	r3, [pc, #584]	; (800e488 <_dtoa_r+0x2e0>)
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	3308      	adds	r3, #8
 800e244:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800e246:	6013      	str	r3, [r2, #0]
 800e248:	9801      	ldr	r0, [sp, #4]
 800e24a:	b013      	add	sp, #76	; 0x4c
 800e24c:	ecbd 8b04 	vpop	{d8-d9}
 800e250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e254:	4b8b      	ldr	r3, [pc, #556]	; (800e484 <_dtoa_r+0x2dc>)
 800e256:	9301      	str	r3, [sp, #4]
 800e258:	3303      	adds	r3, #3
 800e25a:	e7f3      	b.n	800e244 <_dtoa_r+0x9c>
 800e25c:	2200      	movs	r2, #0
 800e25e:	2300      	movs	r3, #0
 800e260:	4650      	mov	r0, sl
 800e262:	4659      	mov	r1, fp
 800e264:	f7f2 fc38 	bl	8000ad8 <__aeabi_dcmpeq>
 800e268:	ec4b ab19 	vmov	d9, sl, fp
 800e26c:	4680      	mov	r8, r0
 800e26e:	b158      	cbz	r0, 800e288 <_dtoa_r+0xe0>
 800e270:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e272:	2301      	movs	r3, #1
 800e274:	6013      	str	r3, [r2, #0]
 800e276:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e278:	2b00      	cmp	r3, #0
 800e27a:	f000 856b 	beq.w	800ed54 <_dtoa_r+0xbac>
 800e27e:	4883      	ldr	r0, [pc, #524]	; (800e48c <_dtoa_r+0x2e4>)
 800e280:	6018      	str	r0, [r3, #0]
 800e282:	1e43      	subs	r3, r0, #1
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	e7df      	b.n	800e248 <_dtoa_r+0xa0>
 800e288:	ec4b ab10 	vmov	d0, sl, fp
 800e28c:	aa10      	add	r2, sp, #64	; 0x40
 800e28e:	a911      	add	r1, sp, #68	; 0x44
 800e290:	4620      	mov	r0, r4
 800e292:	f001 fcf3 	bl	800fc7c <__d2b>
 800e296:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800e29a:	ee08 0a10 	vmov	s16, r0
 800e29e:	2d00      	cmp	r5, #0
 800e2a0:	f000 8084 	beq.w	800e3ac <_dtoa_r+0x204>
 800e2a4:	ee19 3a90 	vmov	r3, s19
 800e2a8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e2ac:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800e2b0:	4656      	mov	r6, sl
 800e2b2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800e2b6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800e2ba:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800e2be:	4b74      	ldr	r3, [pc, #464]	; (800e490 <_dtoa_r+0x2e8>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	4630      	mov	r0, r6
 800e2c4:	4639      	mov	r1, r7
 800e2c6:	f7f1 ffe7 	bl	8000298 <__aeabi_dsub>
 800e2ca:	a365      	add	r3, pc, #404	; (adr r3, 800e460 <_dtoa_r+0x2b8>)
 800e2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d0:	f7f2 f99a 	bl	8000608 <__aeabi_dmul>
 800e2d4:	a364      	add	r3, pc, #400	; (adr r3, 800e468 <_dtoa_r+0x2c0>)
 800e2d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2da:	f7f1 ffdf 	bl	800029c <__adddf3>
 800e2de:	4606      	mov	r6, r0
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	460f      	mov	r7, r1
 800e2e4:	f7f2 f926 	bl	8000534 <__aeabi_i2d>
 800e2e8:	a361      	add	r3, pc, #388	; (adr r3, 800e470 <_dtoa_r+0x2c8>)
 800e2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ee:	f7f2 f98b 	bl	8000608 <__aeabi_dmul>
 800e2f2:	4602      	mov	r2, r0
 800e2f4:	460b      	mov	r3, r1
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	4639      	mov	r1, r7
 800e2fa:	f7f1 ffcf 	bl	800029c <__adddf3>
 800e2fe:	4606      	mov	r6, r0
 800e300:	460f      	mov	r7, r1
 800e302:	f7f2 fc31 	bl	8000b68 <__aeabi_d2iz>
 800e306:	2200      	movs	r2, #0
 800e308:	9000      	str	r0, [sp, #0]
 800e30a:	2300      	movs	r3, #0
 800e30c:	4630      	mov	r0, r6
 800e30e:	4639      	mov	r1, r7
 800e310:	f7f2 fbec 	bl	8000aec <__aeabi_dcmplt>
 800e314:	b150      	cbz	r0, 800e32c <_dtoa_r+0x184>
 800e316:	9800      	ldr	r0, [sp, #0]
 800e318:	f7f2 f90c 	bl	8000534 <__aeabi_i2d>
 800e31c:	4632      	mov	r2, r6
 800e31e:	463b      	mov	r3, r7
 800e320:	f7f2 fbda 	bl	8000ad8 <__aeabi_dcmpeq>
 800e324:	b910      	cbnz	r0, 800e32c <_dtoa_r+0x184>
 800e326:	9b00      	ldr	r3, [sp, #0]
 800e328:	3b01      	subs	r3, #1
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	9b00      	ldr	r3, [sp, #0]
 800e32e:	2b16      	cmp	r3, #22
 800e330:	d85a      	bhi.n	800e3e8 <_dtoa_r+0x240>
 800e332:	9a00      	ldr	r2, [sp, #0]
 800e334:	4b57      	ldr	r3, [pc, #348]	; (800e494 <_dtoa_r+0x2ec>)
 800e336:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33e:	ec51 0b19 	vmov	r0, r1, d9
 800e342:	f7f2 fbd3 	bl	8000aec <__aeabi_dcmplt>
 800e346:	2800      	cmp	r0, #0
 800e348:	d050      	beq.n	800e3ec <_dtoa_r+0x244>
 800e34a:	9b00      	ldr	r3, [sp, #0]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	9300      	str	r3, [sp, #0]
 800e350:	2300      	movs	r3, #0
 800e352:	930b      	str	r3, [sp, #44]	; 0x2c
 800e354:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e356:	1b5d      	subs	r5, r3, r5
 800e358:	1e6b      	subs	r3, r5, #1
 800e35a:	9305      	str	r3, [sp, #20]
 800e35c:	bf45      	ittet	mi
 800e35e:	f1c5 0301 	rsbmi	r3, r5, #1
 800e362:	9304      	strmi	r3, [sp, #16]
 800e364:	2300      	movpl	r3, #0
 800e366:	2300      	movmi	r3, #0
 800e368:	bf4c      	ite	mi
 800e36a:	9305      	strmi	r3, [sp, #20]
 800e36c:	9304      	strpl	r3, [sp, #16]
 800e36e:	9b00      	ldr	r3, [sp, #0]
 800e370:	2b00      	cmp	r3, #0
 800e372:	db3d      	blt.n	800e3f0 <_dtoa_r+0x248>
 800e374:	9b05      	ldr	r3, [sp, #20]
 800e376:	9a00      	ldr	r2, [sp, #0]
 800e378:	920a      	str	r2, [sp, #40]	; 0x28
 800e37a:	4413      	add	r3, r2
 800e37c:	9305      	str	r3, [sp, #20]
 800e37e:	2300      	movs	r3, #0
 800e380:	9307      	str	r3, [sp, #28]
 800e382:	9b06      	ldr	r3, [sp, #24]
 800e384:	2b09      	cmp	r3, #9
 800e386:	f200 8089 	bhi.w	800e49c <_dtoa_r+0x2f4>
 800e38a:	2b05      	cmp	r3, #5
 800e38c:	bfc4      	itt	gt
 800e38e:	3b04      	subgt	r3, #4
 800e390:	9306      	strgt	r3, [sp, #24]
 800e392:	9b06      	ldr	r3, [sp, #24]
 800e394:	f1a3 0302 	sub.w	r3, r3, #2
 800e398:	bfcc      	ite	gt
 800e39a:	2500      	movgt	r5, #0
 800e39c:	2501      	movle	r5, #1
 800e39e:	2b03      	cmp	r3, #3
 800e3a0:	f200 8087 	bhi.w	800e4b2 <_dtoa_r+0x30a>
 800e3a4:	e8df f003 	tbb	[pc, r3]
 800e3a8:	59383a2d 	.word	0x59383a2d
 800e3ac:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800e3b0:	441d      	add	r5, r3
 800e3b2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800e3b6:	2b20      	cmp	r3, #32
 800e3b8:	bfc1      	itttt	gt
 800e3ba:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800e3be:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800e3c2:	fa0b f303 	lslgt.w	r3, fp, r3
 800e3c6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800e3ca:	bfda      	itte	le
 800e3cc:	f1c3 0320 	rsble	r3, r3, #32
 800e3d0:	fa06 f003 	lslle.w	r0, r6, r3
 800e3d4:	4318      	orrgt	r0, r3
 800e3d6:	f7f2 f89d 	bl	8000514 <__aeabi_ui2d>
 800e3da:	2301      	movs	r3, #1
 800e3dc:	4606      	mov	r6, r0
 800e3de:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800e3e2:	3d01      	subs	r5, #1
 800e3e4:	930e      	str	r3, [sp, #56]	; 0x38
 800e3e6:	e76a      	b.n	800e2be <_dtoa_r+0x116>
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	e7b2      	b.n	800e352 <_dtoa_r+0x1aa>
 800e3ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800e3ee:	e7b1      	b.n	800e354 <_dtoa_r+0x1ac>
 800e3f0:	9b04      	ldr	r3, [sp, #16]
 800e3f2:	9a00      	ldr	r2, [sp, #0]
 800e3f4:	1a9b      	subs	r3, r3, r2
 800e3f6:	9304      	str	r3, [sp, #16]
 800e3f8:	4253      	negs	r3, r2
 800e3fa:	9307      	str	r3, [sp, #28]
 800e3fc:	2300      	movs	r3, #0
 800e3fe:	930a      	str	r3, [sp, #40]	; 0x28
 800e400:	e7bf      	b.n	800e382 <_dtoa_r+0x1da>
 800e402:	2300      	movs	r3, #0
 800e404:	9308      	str	r3, [sp, #32]
 800e406:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e408:	2b00      	cmp	r3, #0
 800e40a:	dc55      	bgt.n	800e4b8 <_dtoa_r+0x310>
 800e40c:	2301      	movs	r3, #1
 800e40e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e412:	461a      	mov	r2, r3
 800e414:	9209      	str	r2, [sp, #36]	; 0x24
 800e416:	e00c      	b.n	800e432 <_dtoa_r+0x28a>
 800e418:	2301      	movs	r3, #1
 800e41a:	e7f3      	b.n	800e404 <_dtoa_r+0x25c>
 800e41c:	2300      	movs	r3, #0
 800e41e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e420:	9308      	str	r3, [sp, #32]
 800e422:	9b00      	ldr	r3, [sp, #0]
 800e424:	4413      	add	r3, r2
 800e426:	9302      	str	r3, [sp, #8]
 800e428:	3301      	adds	r3, #1
 800e42a:	2b01      	cmp	r3, #1
 800e42c:	9303      	str	r3, [sp, #12]
 800e42e:	bfb8      	it	lt
 800e430:	2301      	movlt	r3, #1
 800e432:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800e434:	2200      	movs	r2, #0
 800e436:	6042      	str	r2, [r0, #4]
 800e438:	2204      	movs	r2, #4
 800e43a:	f102 0614 	add.w	r6, r2, #20
 800e43e:	429e      	cmp	r6, r3
 800e440:	6841      	ldr	r1, [r0, #4]
 800e442:	d93d      	bls.n	800e4c0 <_dtoa_r+0x318>
 800e444:	4620      	mov	r0, r4
 800e446:	f001 f82b 	bl	800f4a0 <_Balloc>
 800e44a:	9001      	str	r0, [sp, #4]
 800e44c:	2800      	cmp	r0, #0
 800e44e:	d13b      	bne.n	800e4c8 <_dtoa_r+0x320>
 800e450:	4b11      	ldr	r3, [pc, #68]	; (800e498 <_dtoa_r+0x2f0>)
 800e452:	4602      	mov	r2, r0
 800e454:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800e458:	e6c0      	b.n	800e1dc <_dtoa_r+0x34>
 800e45a:	2301      	movs	r3, #1
 800e45c:	e7df      	b.n	800e41e <_dtoa_r+0x276>
 800e45e:	bf00      	nop
 800e460:	636f4361 	.word	0x636f4361
 800e464:	3fd287a7 	.word	0x3fd287a7
 800e468:	8b60c8b3 	.word	0x8b60c8b3
 800e46c:	3fc68a28 	.word	0x3fc68a28
 800e470:	509f79fb 	.word	0x509f79fb
 800e474:	3fd34413 	.word	0x3fd34413
 800e478:	08011336 	.word	0x08011336
 800e47c:	0801134d 	.word	0x0801134d
 800e480:	7ff00000 	.word	0x7ff00000
 800e484:	08011332 	.word	0x08011332
 800e488:	08011329 	.word	0x08011329
 800e48c:	080111ad 	.word	0x080111ad
 800e490:	3ff80000 	.word	0x3ff80000
 800e494:	080114b8 	.word	0x080114b8
 800e498:	080113a8 	.word	0x080113a8
 800e49c:	2501      	movs	r5, #1
 800e49e:	2300      	movs	r3, #0
 800e4a0:	9306      	str	r3, [sp, #24]
 800e4a2:	9508      	str	r5, [sp, #32]
 800e4a4:	f04f 33ff 	mov.w	r3, #4294967295
 800e4a8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4ac:	2200      	movs	r2, #0
 800e4ae:	2312      	movs	r3, #18
 800e4b0:	e7b0      	b.n	800e414 <_dtoa_r+0x26c>
 800e4b2:	2301      	movs	r3, #1
 800e4b4:	9308      	str	r3, [sp, #32]
 800e4b6:	e7f5      	b.n	800e4a4 <_dtoa_r+0x2fc>
 800e4b8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4ba:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800e4be:	e7b8      	b.n	800e432 <_dtoa_r+0x28a>
 800e4c0:	3101      	adds	r1, #1
 800e4c2:	6041      	str	r1, [r0, #4]
 800e4c4:	0052      	lsls	r2, r2, #1
 800e4c6:	e7b8      	b.n	800e43a <_dtoa_r+0x292>
 800e4c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e4ca:	9a01      	ldr	r2, [sp, #4]
 800e4cc:	601a      	str	r2, [r3, #0]
 800e4ce:	9b03      	ldr	r3, [sp, #12]
 800e4d0:	2b0e      	cmp	r3, #14
 800e4d2:	f200 809d 	bhi.w	800e610 <_dtoa_r+0x468>
 800e4d6:	2d00      	cmp	r5, #0
 800e4d8:	f000 809a 	beq.w	800e610 <_dtoa_r+0x468>
 800e4dc:	9b00      	ldr	r3, [sp, #0]
 800e4de:	2b00      	cmp	r3, #0
 800e4e0:	dd32      	ble.n	800e548 <_dtoa_r+0x3a0>
 800e4e2:	4ab7      	ldr	r2, [pc, #732]	; (800e7c0 <_dtoa_r+0x618>)
 800e4e4:	f003 030f 	and.w	r3, r3, #15
 800e4e8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800e4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e4f0:	9b00      	ldr	r3, [sp, #0]
 800e4f2:	05d8      	lsls	r0, r3, #23
 800e4f4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800e4f8:	d516      	bpl.n	800e528 <_dtoa_r+0x380>
 800e4fa:	4bb2      	ldr	r3, [pc, #712]	; (800e7c4 <_dtoa_r+0x61c>)
 800e4fc:	ec51 0b19 	vmov	r0, r1, d9
 800e500:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e504:	f7f2 f9aa 	bl	800085c <__aeabi_ddiv>
 800e508:	f007 070f 	and.w	r7, r7, #15
 800e50c:	4682      	mov	sl, r0
 800e50e:	468b      	mov	fp, r1
 800e510:	2503      	movs	r5, #3
 800e512:	4eac      	ldr	r6, [pc, #688]	; (800e7c4 <_dtoa_r+0x61c>)
 800e514:	b957      	cbnz	r7, 800e52c <_dtoa_r+0x384>
 800e516:	4642      	mov	r2, r8
 800e518:	464b      	mov	r3, r9
 800e51a:	4650      	mov	r0, sl
 800e51c:	4659      	mov	r1, fp
 800e51e:	f7f2 f99d 	bl	800085c <__aeabi_ddiv>
 800e522:	4682      	mov	sl, r0
 800e524:	468b      	mov	fp, r1
 800e526:	e028      	b.n	800e57a <_dtoa_r+0x3d2>
 800e528:	2502      	movs	r5, #2
 800e52a:	e7f2      	b.n	800e512 <_dtoa_r+0x36a>
 800e52c:	07f9      	lsls	r1, r7, #31
 800e52e:	d508      	bpl.n	800e542 <_dtoa_r+0x39a>
 800e530:	4640      	mov	r0, r8
 800e532:	4649      	mov	r1, r9
 800e534:	e9d6 2300 	ldrd	r2, r3, [r6]
 800e538:	f7f2 f866 	bl	8000608 <__aeabi_dmul>
 800e53c:	3501      	adds	r5, #1
 800e53e:	4680      	mov	r8, r0
 800e540:	4689      	mov	r9, r1
 800e542:	107f      	asrs	r7, r7, #1
 800e544:	3608      	adds	r6, #8
 800e546:	e7e5      	b.n	800e514 <_dtoa_r+0x36c>
 800e548:	f000 809b 	beq.w	800e682 <_dtoa_r+0x4da>
 800e54c:	9b00      	ldr	r3, [sp, #0]
 800e54e:	4f9d      	ldr	r7, [pc, #628]	; (800e7c4 <_dtoa_r+0x61c>)
 800e550:	425e      	negs	r6, r3
 800e552:	4b9b      	ldr	r3, [pc, #620]	; (800e7c0 <_dtoa_r+0x618>)
 800e554:	f006 020f 	and.w	r2, r6, #15
 800e558:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e55c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e560:	ec51 0b19 	vmov	r0, r1, d9
 800e564:	f7f2 f850 	bl	8000608 <__aeabi_dmul>
 800e568:	1136      	asrs	r6, r6, #4
 800e56a:	4682      	mov	sl, r0
 800e56c:	468b      	mov	fp, r1
 800e56e:	2300      	movs	r3, #0
 800e570:	2502      	movs	r5, #2
 800e572:	2e00      	cmp	r6, #0
 800e574:	d17a      	bne.n	800e66c <_dtoa_r+0x4c4>
 800e576:	2b00      	cmp	r3, #0
 800e578:	d1d3      	bne.n	800e522 <_dtoa_r+0x37a>
 800e57a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e57c:	2b00      	cmp	r3, #0
 800e57e:	f000 8082 	beq.w	800e686 <_dtoa_r+0x4de>
 800e582:	4b91      	ldr	r3, [pc, #580]	; (800e7c8 <_dtoa_r+0x620>)
 800e584:	2200      	movs	r2, #0
 800e586:	4650      	mov	r0, sl
 800e588:	4659      	mov	r1, fp
 800e58a:	f7f2 faaf 	bl	8000aec <__aeabi_dcmplt>
 800e58e:	2800      	cmp	r0, #0
 800e590:	d079      	beq.n	800e686 <_dtoa_r+0x4de>
 800e592:	9b03      	ldr	r3, [sp, #12]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d076      	beq.n	800e686 <_dtoa_r+0x4de>
 800e598:	9b02      	ldr	r3, [sp, #8]
 800e59a:	2b00      	cmp	r3, #0
 800e59c:	dd36      	ble.n	800e60c <_dtoa_r+0x464>
 800e59e:	9b00      	ldr	r3, [sp, #0]
 800e5a0:	4650      	mov	r0, sl
 800e5a2:	4659      	mov	r1, fp
 800e5a4:	1e5f      	subs	r7, r3, #1
 800e5a6:	2200      	movs	r2, #0
 800e5a8:	4b88      	ldr	r3, [pc, #544]	; (800e7cc <_dtoa_r+0x624>)
 800e5aa:	f7f2 f82d 	bl	8000608 <__aeabi_dmul>
 800e5ae:	9e02      	ldr	r6, [sp, #8]
 800e5b0:	4682      	mov	sl, r0
 800e5b2:	468b      	mov	fp, r1
 800e5b4:	3501      	adds	r5, #1
 800e5b6:	4628      	mov	r0, r5
 800e5b8:	f7f1 ffbc 	bl	8000534 <__aeabi_i2d>
 800e5bc:	4652      	mov	r2, sl
 800e5be:	465b      	mov	r3, fp
 800e5c0:	f7f2 f822 	bl	8000608 <__aeabi_dmul>
 800e5c4:	4b82      	ldr	r3, [pc, #520]	; (800e7d0 <_dtoa_r+0x628>)
 800e5c6:	2200      	movs	r2, #0
 800e5c8:	f7f1 fe68 	bl	800029c <__adddf3>
 800e5cc:	46d0      	mov	r8, sl
 800e5ce:	46d9      	mov	r9, fp
 800e5d0:	4682      	mov	sl, r0
 800e5d2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800e5d6:	2e00      	cmp	r6, #0
 800e5d8:	d158      	bne.n	800e68c <_dtoa_r+0x4e4>
 800e5da:	4b7e      	ldr	r3, [pc, #504]	; (800e7d4 <_dtoa_r+0x62c>)
 800e5dc:	2200      	movs	r2, #0
 800e5de:	4640      	mov	r0, r8
 800e5e0:	4649      	mov	r1, r9
 800e5e2:	f7f1 fe59 	bl	8000298 <__aeabi_dsub>
 800e5e6:	4652      	mov	r2, sl
 800e5e8:	465b      	mov	r3, fp
 800e5ea:	4680      	mov	r8, r0
 800e5ec:	4689      	mov	r9, r1
 800e5ee:	f7f2 fa9b 	bl	8000b28 <__aeabi_dcmpgt>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	f040 8295 	bne.w	800eb22 <_dtoa_r+0x97a>
 800e5f8:	4652      	mov	r2, sl
 800e5fa:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e5fe:	4640      	mov	r0, r8
 800e600:	4649      	mov	r1, r9
 800e602:	f7f2 fa73 	bl	8000aec <__aeabi_dcmplt>
 800e606:	2800      	cmp	r0, #0
 800e608:	f040 8289 	bne.w	800eb1e <_dtoa_r+0x976>
 800e60c:	ec5b ab19 	vmov	sl, fp, d9
 800e610:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e612:	2b00      	cmp	r3, #0
 800e614:	f2c0 8148 	blt.w	800e8a8 <_dtoa_r+0x700>
 800e618:	9a00      	ldr	r2, [sp, #0]
 800e61a:	2a0e      	cmp	r2, #14
 800e61c:	f300 8144 	bgt.w	800e8a8 <_dtoa_r+0x700>
 800e620:	4b67      	ldr	r3, [pc, #412]	; (800e7c0 <_dtoa_r+0x618>)
 800e622:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e626:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e62a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e62c:	2b00      	cmp	r3, #0
 800e62e:	f280 80d5 	bge.w	800e7dc <_dtoa_r+0x634>
 800e632:	9b03      	ldr	r3, [sp, #12]
 800e634:	2b00      	cmp	r3, #0
 800e636:	f300 80d1 	bgt.w	800e7dc <_dtoa_r+0x634>
 800e63a:	f040 826f 	bne.w	800eb1c <_dtoa_r+0x974>
 800e63e:	4b65      	ldr	r3, [pc, #404]	; (800e7d4 <_dtoa_r+0x62c>)
 800e640:	2200      	movs	r2, #0
 800e642:	4640      	mov	r0, r8
 800e644:	4649      	mov	r1, r9
 800e646:	f7f1 ffdf 	bl	8000608 <__aeabi_dmul>
 800e64a:	4652      	mov	r2, sl
 800e64c:	465b      	mov	r3, fp
 800e64e:	f7f2 fa61 	bl	8000b14 <__aeabi_dcmpge>
 800e652:	9e03      	ldr	r6, [sp, #12]
 800e654:	4637      	mov	r7, r6
 800e656:	2800      	cmp	r0, #0
 800e658:	f040 8245 	bne.w	800eae6 <_dtoa_r+0x93e>
 800e65c:	9d01      	ldr	r5, [sp, #4]
 800e65e:	2331      	movs	r3, #49	; 0x31
 800e660:	f805 3b01 	strb.w	r3, [r5], #1
 800e664:	9b00      	ldr	r3, [sp, #0]
 800e666:	3301      	adds	r3, #1
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	e240      	b.n	800eaee <_dtoa_r+0x946>
 800e66c:	07f2      	lsls	r2, r6, #31
 800e66e:	d505      	bpl.n	800e67c <_dtoa_r+0x4d4>
 800e670:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e674:	f7f1 ffc8 	bl	8000608 <__aeabi_dmul>
 800e678:	3501      	adds	r5, #1
 800e67a:	2301      	movs	r3, #1
 800e67c:	1076      	asrs	r6, r6, #1
 800e67e:	3708      	adds	r7, #8
 800e680:	e777      	b.n	800e572 <_dtoa_r+0x3ca>
 800e682:	2502      	movs	r5, #2
 800e684:	e779      	b.n	800e57a <_dtoa_r+0x3d2>
 800e686:	9f00      	ldr	r7, [sp, #0]
 800e688:	9e03      	ldr	r6, [sp, #12]
 800e68a:	e794      	b.n	800e5b6 <_dtoa_r+0x40e>
 800e68c:	9901      	ldr	r1, [sp, #4]
 800e68e:	4b4c      	ldr	r3, [pc, #304]	; (800e7c0 <_dtoa_r+0x618>)
 800e690:	4431      	add	r1, r6
 800e692:	910d      	str	r1, [sp, #52]	; 0x34
 800e694:	9908      	ldr	r1, [sp, #32]
 800e696:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800e69a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e69e:	2900      	cmp	r1, #0
 800e6a0:	d043      	beq.n	800e72a <_dtoa_r+0x582>
 800e6a2:	494d      	ldr	r1, [pc, #308]	; (800e7d8 <_dtoa_r+0x630>)
 800e6a4:	2000      	movs	r0, #0
 800e6a6:	f7f2 f8d9 	bl	800085c <__aeabi_ddiv>
 800e6aa:	4652      	mov	r2, sl
 800e6ac:	465b      	mov	r3, fp
 800e6ae:	f7f1 fdf3 	bl	8000298 <__aeabi_dsub>
 800e6b2:	9d01      	ldr	r5, [sp, #4]
 800e6b4:	4682      	mov	sl, r0
 800e6b6:	468b      	mov	fp, r1
 800e6b8:	4649      	mov	r1, r9
 800e6ba:	4640      	mov	r0, r8
 800e6bc:	f7f2 fa54 	bl	8000b68 <__aeabi_d2iz>
 800e6c0:	4606      	mov	r6, r0
 800e6c2:	f7f1 ff37 	bl	8000534 <__aeabi_i2d>
 800e6c6:	4602      	mov	r2, r0
 800e6c8:	460b      	mov	r3, r1
 800e6ca:	4640      	mov	r0, r8
 800e6cc:	4649      	mov	r1, r9
 800e6ce:	f7f1 fde3 	bl	8000298 <__aeabi_dsub>
 800e6d2:	3630      	adds	r6, #48	; 0x30
 800e6d4:	f805 6b01 	strb.w	r6, [r5], #1
 800e6d8:	4652      	mov	r2, sl
 800e6da:	465b      	mov	r3, fp
 800e6dc:	4680      	mov	r8, r0
 800e6de:	4689      	mov	r9, r1
 800e6e0:	f7f2 fa04 	bl	8000aec <__aeabi_dcmplt>
 800e6e4:	2800      	cmp	r0, #0
 800e6e6:	d163      	bne.n	800e7b0 <_dtoa_r+0x608>
 800e6e8:	4642      	mov	r2, r8
 800e6ea:	464b      	mov	r3, r9
 800e6ec:	4936      	ldr	r1, [pc, #216]	; (800e7c8 <_dtoa_r+0x620>)
 800e6ee:	2000      	movs	r0, #0
 800e6f0:	f7f1 fdd2 	bl	8000298 <__aeabi_dsub>
 800e6f4:	4652      	mov	r2, sl
 800e6f6:	465b      	mov	r3, fp
 800e6f8:	f7f2 f9f8 	bl	8000aec <__aeabi_dcmplt>
 800e6fc:	2800      	cmp	r0, #0
 800e6fe:	f040 80b5 	bne.w	800e86c <_dtoa_r+0x6c4>
 800e702:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e704:	429d      	cmp	r5, r3
 800e706:	d081      	beq.n	800e60c <_dtoa_r+0x464>
 800e708:	4b30      	ldr	r3, [pc, #192]	; (800e7cc <_dtoa_r+0x624>)
 800e70a:	2200      	movs	r2, #0
 800e70c:	4650      	mov	r0, sl
 800e70e:	4659      	mov	r1, fp
 800e710:	f7f1 ff7a 	bl	8000608 <__aeabi_dmul>
 800e714:	4b2d      	ldr	r3, [pc, #180]	; (800e7cc <_dtoa_r+0x624>)
 800e716:	4682      	mov	sl, r0
 800e718:	468b      	mov	fp, r1
 800e71a:	4640      	mov	r0, r8
 800e71c:	4649      	mov	r1, r9
 800e71e:	2200      	movs	r2, #0
 800e720:	f7f1 ff72 	bl	8000608 <__aeabi_dmul>
 800e724:	4680      	mov	r8, r0
 800e726:	4689      	mov	r9, r1
 800e728:	e7c6      	b.n	800e6b8 <_dtoa_r+0x510>
 800e72a:	4650      	mov	r0, sl
 800e72c:	4659      	mov	r1, fp
 800e72e:	f7f1 ff6b 	bl	8000608 <__aeabi_dmul>
 800e732:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e734:	9d01      	ldr	r5, [sp, #4]
 800e736:	930f      	str	r3, [sp, #60]	; 0x3c
 800e738:	4682      	mov	sl, r0
 800e73a:	468b      	mov	fp, r1
 800e73c:	4649      	mov	r1, r9
 800e73e:	4640      	mov	r0, r8
 800e740:	f7f2 fa12 	bl	8000b68 <__aeabi_d2iz>
 800e744:	4606      	mov	r6, r0
 800e746:	f7f1 fef5 	bl	8000534 <__aeabi_i2d>
 800e74a:	3630      	adds	r6, #48	; 0x30
 800e74c:	4602      	mov	r2, r0
 800e74e:	460b      	mov	r3, r1
 800e750:	4640      	mov	r0, r8
 800e752:	4649      	mov	r1, r9
 800e754:	f7f1 fda0 	bl	8000298 <__aeabi_dsub>
 800e758:	f805 6b01 	strb.w	r6, [r5], #1
 800e75c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e75e:	429d      	cmp	r5, r3
 800e760:	4680      	mov	r8, r0
 800e762:	4689      	mov	r9, r1
 800e764:	f04f 0200 	mov.w	r2, #0
 800e768:	d124      	bne.n	800e7b4 <_dtoa_r+0x60c>
 800e76a:	4b1b      	ldr	r3, [pc, #108]	; (800e7d8 <_dtoa_r+0x630>)
 800e76c:	4650      	mov	r0, sl
 800e76e:	4659      	mov	r1, fp
 800e770:	f7f1 fd94 	bl	800029c <__adddf3>
 800e774:	4602      	mov	r2, r0
 800e776:	460b      	mov	r3, r1
 800e778:	4640      	mov	r0, r8
 800e77a:	4649      	mov	r1, r9
 800e77c:	f7f2 f9d4 	bl	8000b28 <__aeabi_dcmpgt>
 800e780:	2800      	cmp	r0, #0
 800e782:	d173      	bne.n	800e86c <_dtoa_r+0x6c4>
 800e784:	4652      	mov	r2, sl
 800e786:	465b      	mov	r3, fp
 800e788:	4913      	ldr	r1, [pc, #76]	; (800e7d8 <_dtoa_r+0x630>)
 800e78a:	2000      	movs	r0, #0
 800e78c:	f7f1 fd84 	bl	8000298 <__aeabi_dsub>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4640      	mov	r0, r8
 800e796:	4649      	mov	r1, r9
 800e798:	f7f2 f9a8 	bl	8000aec <__aeabi_dcmplt>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	f43f af35 	beq.w	800e60c <_dtoa_r+0x464>
 800e7a2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800e7a4:	1e6b      	subs	r3, r5, #1
 800e7a6:	930f      	str	r3, [sp, #60]	; 0x3c
 800e7a8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800e7ac:	2b30      	cmp	r3, #48	; 0x30
 800e7ae:	d0f8      	beq.n	800e7a2 <_dtoa_r+0x5fa>
 800e7b0:	9700      	str	r7, [sp, #0]
 800e7b2:	e049      	b.n	800e848 <_dtoa_r+0x6a0>
 800e7b4:	4b05      	ldr	r3, [pc, #20]	; (800e7cc <_dtoa_r+0x624>)
 800e7b6:	f7f1 ff27 	bl	8000608 <__aeabi_dmul>
 800e7ba:	4680      	mov	r8, r0
 800e7bc:	4689      	mov	r9, r1
 800e7be:	e7bd      	b.n	800e73c <_dtoa_r+0x594>
 800e7c0:	080114b8 	.word	0x080114b8
 800e7c4:	08011490 	.word	0x08011490
 800e7c8:	3ff00000 	.word	0x3ff00000
 800e7cc:	40240000 	.word	0x40240000
 800e7d0:	401c0000 	.word	0x401c0000
 800e7d4:	40140000 	.word	0x40140000
 800e7d8:	3fe00000 	.word	0x3fe00000
 800e7dc:	9d01      	ldr	r5, [sp, #4]
 800e7de:	4656      	mov	r6, sl
 800e7e0:	465f      	mov	r7, fp
 800e7e2:	4642      	mov	r2, r8
 800e7e4:	464b      	mov	r3, r9
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	f7f2 f837 	bl	800085c <__aeabi_ddiv>
 800e7ee:	f7f2 f9bb 	bl	8000b68 <__aeabi_d2iz>
 800e7f2:	4682      	mov	sl, r0
 800e7f4:	f7f1 fe9e 	bl	8000534 <__aeabi_i2d>
 800e7f8:	4642      	mov	r2, r8
 800e7fa:	464b      	mov	r3, r9
 800e7fc:	f7f1 ff04 	bl	8000608 <__aeabi_dmul>
 800e800:	4602      	mov	r2, r0
 800e802:	460b      	mov	r3, r1
 800e804:	4630      	mov	r0, r6
 800e806:	4639      	mov	r1, r7
 800e808:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800e80c:	f7f1 fd44 	bl	8000298 <__aeabi_dsub>
 800e810:	f805 6b01 	strb.w	r6, [r5], #1
 800e814:	9e01      	ldr	r6, [sp, #4]
 800e816:	9f03      	ldr	r7, [sp, #12]
 800e818:	1bae      	subs	r6, r5, r6
 800e81a:	42b7      	cmp	r7, r6
 800e81c:	4602      	mov	r2, r0
 800e81e:	460b      	mov	r3, r1
 800e820:	d135      	bne.n	800e88e <_dtoa_r+0x6e6>
 800e822:	f7f1 fd3b 	bl	800029c <__adddf3>
 800e826:	4642      	mov	r2, r8
 800e828:	464b      	mov	r3, r9
 800e82a:	4606      	mov	r6, r0
 800e82c:	460f      	mov	r7, r1
 800e82e:	f7f2 f97b 	bl	8000b28 <__aeabi_dcmpgt>
 800e832:	b9d0      	cbnz	r0, 800e86a <_dtoa_r+0x6c2>
 800e834:	4642      	mov	r2, r8
 800e836:	464b      	mov	r3, r9
 800e838:	4630      	mov	r0, r6
 800e83a:	4639      	mov	r1, r7
 800e83c:	f7f2 f94c 	bl	8000ad8 <__aeabi_dcmpeq>
 800e840:	b110      	cbz	r0, 800e848 <_dtoa_r+0x6a0>
 800e842:	f01a 0f01 	tst.w	sl, #1
 800e846:	d110      	bne.n	800e86a <_dtoa_r+0x6c2>
 800e848:	4620      	mov	r0, r4
 800e84a:	ee18 1a10 	vmov	r1, s16
 800e84e:	f000 fe67 	bl	800f520 <_Bfree>
 800e852:	2300      	movs	r3, #0
 800e854:	9800      	ldr	r0, [sp, #0]
 800e856:	702b      	strb	r3, [r5, #0]
 800e858:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e85a:	3001      	adds	r0, #1
 800e85c:	6018      	str	r0, [r3, #0]
 800e85e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800e860:	2b00      	cmp	r3, #0
 800e862:	f43f acf1 	beq.w	800e248 <_dtoa_r+0xa0>
 800e866:	601d      	str	r5, [r3, #0]
 800e868:	e4ee      	b.n	800e248 <_dtoa_r+0xa0>
 800e86a:	9f00      	ldr	r7, [sp, #0]
 800e86c:	462b      	mov	r3, r5
 800e86e:	461d      	mov	r5, r3
 800e870:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e874:	2a39      	cmp	r2, #57	; 0x39
 800e876:	d106      	bne.n	800e886 <_dtoa_r+0x6de>
 800e878:	9a01      	ldr	r2, [sp, #4]
 800e87a:	429a      	cmp	r2, r3
 800e87c:	d1f7      	bne.n	800e86e <_dtoa_r+0x6c6>
 800e87e:	9901      	ldr	r1, [sp, #4]
 800e880:	2230      	movs	r2, #48	; 0x30
 800e882:	3701      	adds	r7, #1
 800e884:	700a      	strb	r2, [r1, #0]
 800e886:	781a      	ldrb	r2, [r3, #0]
 800e888:	3201      	adds	r2, #1
 800e88a:	701a      	strb	r2, [r3, #0]
 800e88c:	e790      	b.n	800e7b0 <_dtoa_r+0x608>
 800e88e:	4ba6      	ldr	r3, [pc, #664]	; (800eb28 <_dtoa_r+0x980>)
 800e890:	2200      	movs	r2, #0
 800e892:	f7f1 feb9 	bl	8000608 <__aeabi_dmul>
 800e896:	2200      	movs	r2, #0
 800e898:	2300      	movs	r3, #0
 800e89a:	4606      	mov	r6, r0
 800e89c:	460f      	mov	r7, r1
 800e89e:	f7f2 f91b 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8a2:	2800      	cmp	r0, #0
 800e8a4:	d09d      	beq.n	800e7e2 <_dtoa_r+0x63a>
 800e8a6:	e7cf      	b.n	800e848 <_dtoa_r+0x6a0>
 800e8a8:	9a08      	ldr	r2, [sp, #32]
 800e8aa:	2a00      	cmp	r2, #0
 800e8ac:	f000 80d7 	beq.w	800ea5e <_dtoa_r+0x8b6>
 800e8b0:	9a06      	ldr	r2, [sp, #24]
 800e8b2:	2a01      	cmp	r2, #1
 800e8b4:	f300 80ba 	bgt.w	800ea2c <_dtoa_r+0x884>
 800e8b8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e8ba:	2a00      	cmp	r2, #0
 800e8bc:	f000 80b2 	beq.w	800ea24 <_dtoa_r+0x87c>
 800e8c0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800e8c4:	9e07      	ldr	r6, [sp, #28]
 800e8c6:	9d04      	ldr	r5, [sp, #16]
 800e8c8:	9a04      	ldr	r2, [sp, #16]
 800e8ca:	441a      	add	r2, r3
 800e8cc:	9204      	str	r2, [sp, #16]
 800e8ce:	9a05      	ldr	r2, [sp, #20]
 800e8d0:	2101      	movs	r1, #1
 800e8d2:	441a      	add	r2, r3
 800e8d4:	4620      	mov	r0, r4
 800e8d6:	9205      	str	r2, [sp, #20]
 800e8d8:	f000 ff24 	bl	800f724 <__i2b>
 800e8dc:	4607      	mov	r7, r0
 800e8de:	2d00      	cmp	r5, #0
 800e8e0:	dd0c      	ble.n	800e8fc <_dtoa_r+0x754>
 800e8e2:	9b05      	ldr	r3, [sp, #20]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	dd09      	ble.n	800e8fc <_dtoa_r+0x754>
 800e8e8:	42ab      	cmp	r3, r5
 800e8ea:	9a04      	ldr	r2, [sp, #16]
 800e8ec:	bfa8      	it	ge
 800e8ee:	462b      	movge	r3, r5
 800e8f0:	1ad2      	subs	r2, r2, r3
 800e8f2:	9204      	str	r2, [sp, #16]
 800e8f4:	9a05      	ldr	r2, [sp, #20]
 800e8f6:	1aed      	subs	r5, r5, r3
 800e8f8:	1ad3      	subs	r3, r2, r3
 800e8fa:	9305      	str	r3, [sp, #20]
 800e8fc:	9b07      	ldr	r3, [sp, #28]
 800e8fe:	b31b      	cbz	r3, 800e948 <_dtoa_r+0x7a0>
 800e900:	9b08      	ldr	r3, [sp, #32]
 800e902:	2b00      	cmp	r3, #0
 800e904:	f000 80af 	beq.w	800ea66 <_dtoa_r+0x8be>
 800e908:	2e00      	cmp	r6, #0
 800e90a:	dd13      	ble.n	800e934 <_dtoa_r+0x78c>
 800e90c:	4639      	mov	r1, r7
 800e90e:	4632      	mov	r2, r6
 800e910:	4620      	mov	r0, r4
 800e912:	f000 ffc7 	bl	800f8a4 <__pow5mult>
 800e916:	ee18 2a10 	vmov	r2, s16
 800e91a:	4601      	mov	r1, r0
 800e91c:	4607      	mov	r7, r0
 800e91e:	4620      	mov	r0, r4
 800e920:	f000 ff16 	bl	800f750 <__multiply>
 800e924:	ee18 1a10 	vmov	r1, s16
 800e928:	4680      	mov	r8, r0
 800e92a:	4620      	mov	r0, r4
 800e92c:	f000 fdf8 	bl	800f520 <_Bfree>
 800e930:	ee08 8a10 	vmov	s16, r8
 800e934:	9b07      	ldr	r3, [sp, #28]
 800e936:	1b9a      	subs	r2, r3, r6
 800e938:	d006      	beq.n	800e948 <_dtoa_r+0x7a0>
 800e93a:	ee18 1a10 	vmov	r1, s16
 800e93e:	4620      	mov	r0, r4
 800e940:	f000 ffb0 	bl	800f8a4 <__pow5mult>
 800e944:	ee08 0a10 	vmov	s16, r0
 800e948:	2101      	movs	r1, #1
 800e94a:	4620      	mov	r0, r4
 800e94c:	f000 feea 	bl	800f724 <__i2b>
 800e950:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e952:	2b00      	cmp	r3, #0
 800e954:	4606      	mov	r6, r0
 800e956:	f340 8088 	ble.w	800ea6a <_dtoa_r+0x8c2>
 800e95a:	461a      	mov	r2, r3
 800e95c:	4601      	mov	r1, r0
 800e95e:	4620      	mov	r0, r4
 800e960:	f000 ffa0 	bl	800f8a4 <__pow5mult>
 800e964:	9b06      	ldr	r3, [sp, #24]
 800e966:	2b01      	cmp	r3, #1
 800e968:	4606      	mov	r6, r0
 800e96a:	f340 8081 	ble.w	800ea70 <_dtoa_r+0x8c8>
 800e96e:	f04f 0800 	mov.w	r8, #0
 800e972:	6933      	ldr	r3, [r6, #16]
 800e974:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e978:	6918      	ldr	r0, [r3, #16]
 800e97a:	f000 fe83 	bl	800f684 <__hi0bits>
 800e97e:	f1c0 0020 	rsb	r0, r0, #32
 800e982:	9b05      	ldr	r3, [sp, #20]
 800e984:	4418      	add	r0, r3
 800e986:	f010 001f 	ands.w	r0, r0, #31
 800e98a:	f000 8092 	beq.w	800eab2 <_dtoa_r+0x90a>
 800e98e:	f1c0 0320 	rsb	r3, r0, #32
 800e992:	2b04      	cmp	r3, #4
 800e994:	f340 808a 	ble.w	800eaac <_dtoa_r+0x904>
 800e998:	f1c0 001c 	rsb	r0, r0, #28
 800e99c:	9b04      	ldr	r3, [sp, #16]
 800e99e:	4403      	add	r3, r0
 800e9a0:	9304      	str	r3, [sp, #16]
 800e9a2:	9b05      	ldr	r3, [sp, #20]
 800e9a4:	4403      	add	r3, r0
 800e9a6:	4405      	add	r5, r0
 800e9a8:	9305      	str	r3, [sp, #20]
 800e9aa:	9b04      	ldr	r3, [sp, #16]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	dd07      	ble.n	800e9c0 <_dtoa_r+0x818>
 800e9b0:	ee18 1a10 	vmov	r1, s16
 800e9b4:	461a      	mov	r2, r3
 800e9b6:	4620      	mov	r0, r4
 800e9b8:	f000 ffce 	bl	800f958 <__lshift>
 800e9bc:	ee08 0a10 	vmov	s16, r0
 800e9c0:	9b05      	ldr	r3, [sp, #20]
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	dd05      	ble.n	800e9d2 <_dtoa_r+0x82a>
 800e9c6:	4631      	mov	r1, r6
 800e9c8:	461a      	mov	r2, r3
 800e9ca:	4620      	mov	r0, r4
 800e9cc:	f000 ffc4 	bl	800f958 <__lshift>
 800e9d0:	4606      	mov	r6, r0
 800e9d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	d06e      	beq.n	800eab6 <_dtoa_r+0x90e>
 800e9d8:	ee18 0a10 	vmov	r0, s16
 800e9dc:	4631      	mov	r1, r6
 800e9de:	f001 f82b 	bl	800fa38 <__mcmp>
 800e9e2:	2800      	cmp	r0, #0
 800e9e4:	da67      	bge.n	800eab6 <_dtoa_r+0x90e>
 800e9e6:	9b00      	ldr	r3, [sp, #0]
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	ee18 1a10 	vmov	r1, s16
 800e9ee:	9300      	str	r3, [sp, #0]
 800e9f0:	220a      	movs	r2, #10
 800e9f2:	2300      	movs	r3, #0
 800e9f4:	4620      	mov	r0, r4
 800e9f6:	f000 fdb5 	bl	800f564 <__multadd>
 800e9fa:	9b08      	ldr	r3, [sp, #32]
 800e9fc:	ee08 0a10 	vmov	s16, r0
 800ea00:	2b00      	cmp	r3, #0
 800ea02:	f000 81b1 	beq.w	800ed68 <_dtoa_r+0xbc0>
 800ea06:	2300      	movs	r3, #0
 800ea08:	4639      	mov	r1, r7
 800ea0a:	220a      	movs	r2, #10
 800ea0c:	4620      	mov	r0, r4
 800ea0e:	f000 fda9 	bl	800f564 <__multadd>
 800ea12:	9b02      	ldr	r3, [sp, #8]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	4607      	mov	r7, r0
 800ea18:	f300 808e 	bgt.w	800eb38 <_dtoa_r+0x990>
 800ea1c:	9b06      	ldr	r3, [sp, #24]
 800ea1e:	2b02      	cmp	r3, #2
 800ea20:	dc51      	bgt.n	800eac6 <_dtoa_r+0x91e>
 800ea22:	e089      	b.n	800eb38 <_dtoa_r+0x990>
 800ea24:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ea26:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ea2a:	e74b      	b.n	800e8c4 <_dtoa_r+0x71c>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	1e5e      	subs	r6, r3, #1
 800ea30:	9b07      	ldr	r3, [sp, #28]
 800ea32:	42b3      	cmp	r3, r6
 800ea34:	bfbf      	itttt	lt
 800ea36:	9b07      	ldrlt	r3, [sp, #28]
 800ea38:	9607      	strlt	r6, [sp, #28]
 800ea3a:	1af2      	sublt	r2, r6, r3
 800ea3c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ea3e:	bfb6      	itet	lt
 800ea40:	189b      	addlt	r3, r3, r2
 800ea42:	1b9e      	subge	r6, r3, r6
 800ea44:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ea46:	9b03      	ldr	r3, [sp, #12]
 800ea48:	bfb8      	it	lt
 800ea4a:	2600      	movlt	r6, #0
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	bfb7      	itett	lt
 800ea50:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ea54:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ea58:	1a9d      	sublt	r5, r3, r2
 800ea5a:	2300      	movlt	r3, #0
 800ea5c:	e734      	b.n	800e8c8 <_dtoa_r+0x720>
 800ea5e:	9e07      	ldr	r6, [sp, #28]
 800ea60:	9d04      	ldr	r5, [sp, #16]
 800ea62:	9f08      	ldr	r7, [sp, #32]
 800ea64:	e73b      	b.n	800e8de <_dtoa_r+0x736>
 800ea66:	9a07      	ldr	r2, [sp, #28]
 800ea68:	e767      	b.n	800e93a <_dtoa_r+0x792>
 800ea6a:	9b06      	ldr	r3, [sp, #24]
 800ea6c:	2b01      	cmp	r3, #1
 800ea6e:	dc18      	bgt.n	800eaa2 <_dtoa_r+0x8fa>
 800ea70:	f1ba 0f00 	cmp.w	sl, #0
 800ea74:	d115      	bne.n	800eaa2 <_dtoa_r+0x8fa>
 800ea76:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ea7a:	b993      	cbnz	r3, 800eaa2 <_dtoa_r+0x8fa>
 800ea7c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ea80:	0d1b      	lsrs	r3, r3, #20
 800ea82:	051b      	lsls	r3, r3, #20
 800ea84:	b183      	cbz	r3, 800eaa8 <_dtoa_r+0x900>
 800ea86:	9b04      	ldr	r3, [sp, #16]
 800ea88:	3301      	adds	r3, #1
 800ea8a:	9304      	str	r3, [sp, #16]
 800ea8c:	9b05      	ldr	r3, [sp, #20]
 800ea8e:	3301      	adds	r3, #1
 800ea90:	9305      	str	r3, [sp, #20]
 800ea92:	f04f 0801 	mov.w	r8, #1
 800ea96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	f47f af6a 	bne.w	800e972 <_dtoa_r+0x7ca>
 800ea9e:	2001      	movs	r0, #1
 800eaa0:	e76f      	b.n	800e982 <_dtoa_r+0x7da>
 800eaa2:	f04f 0800 	mov.w	r8, #0
 800eaa6:	e7f6      	b.n	800ea96 <_dtoa_r+0x8ee>
 800eaa8:	4698      	mov	r8, r3
 800eaaa:	e7f4      	b.n	800ea96 <_dtoa_r+0x8ee>
 800eaac:	f43f af7d 	beq.w	800e9aa <_dtoa_r+0x802>
 800eab0:	4618      	mov	r0, r3
 800eab2:	301c      	adds	r0, #28
 800eab4:	e772      	b.n	800e99c <_dtoa_r+0x7f4>
 800eab6:	9b03      	ldr	r3, [sp, #12]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	dc37      	bgt.n	800eb2c <_dtoa_r+0x984>
 800eabc:	9b06      	ldr	r3, [sp, #24]
 800eabe:	2b02      	cmp	r3, #2
 800eac0:	dd34      	ble.n	800eb2c <_dtoa_r+0x984>
 800eac2:	9b03      	ldr	r3, [sp, #12]
 800eac4:	9302      	str	r3, [sp, #8]
 800eac6:	9b02      	ldr	r3, [sp, #8]
 800eac8:	b96b      	cbnz	r3, 800eae6 <_dtoa_r+0x93e>
 800eaca:	4631      	mov	r1, r6
 800eacc:	2205      	movs	r2, #5
 800eace:	4620      	mov	r0, r4
 800ead0:	f000 fd48 	bl	800f564 <__multadd>
 800ead4:	4601      	mov	r1, r0
 800ead6:	4606      	mov	r6, r0
 800ead8:	ee18 0a10 	vmov	r0, s16
 800eadc:	f000 ffac 	bl	800fa38 <__mcmp>
 800eae0:	2800      	cmp	r0, #0
 800eae2:	f73f adbb 	bgt.w	800e65c <_dtoa_r+0x4b4>
 800eae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eae8:	9d01      	ldr	r5, [sp, #4]
 800eaea:	43db      	mvns	r3, r3
 800eaec:	9300      	str	r3, [sp, #0]
 800eaee:	f04f 0800 	mov.w	r8, #0
 800eaf2:	4631      	mov	r1, r6
 800eaf4:	4620      	mov	r0, r4
 800eaf6:	f000 fd13 	bl	800f520 <_Bfree>
 800eafa:	2f00      	cmp	r7, #0
 800eafc:	f43f aea4 	beq.w	800e848 <_dtoa_r+0x6a0>
 800eb00:	f1b8 0f00 	cmp.w	r8, #0
 800eb04:	d005      	beq.n	800eb12 <_dtoa_r+0x96a>
 800eb06:	45b8      	cmp	r8, r7
 800eb08:	d003      	beq.n	800eb12 <_dtoa_r+0x96a>
 800eb0a:	4641      	mov	r1, r8
 800eb0c:	4620      	mov	r0, r4
 800eb0e:	f000 fd07 	bl	800f520 <_Bfree>
 800eb12:	4639      	mov	r1, r7
 800eb14:	4620      	mov	r0, r4
 800eb16:	f000 fd03 	bl	800f520 <_Bfree>
 800eb1a:	e695      	b.n	800e848 <_dtoa_r+0x6a0>
 800eb1c:	2600      	movs	r6, #0
 800eb1e:	4637      	mov	r7, r6
 800eb20:	e7e1      	b.n	800eae6 <_dtoa_r+0x93e>
 800eb22:	9700      	str	r7, [sp, #0]
 800eb24:	4637      	mov	r7, r6
 800eb26:	e599      	b.n	800e65c <_dtoa_r+0x4b4>
 800eb28:	40240000 	.word	0x40240000
 800eb2c:	9b08      	ldr	r3, [sp, #32]
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	f000 80ca 	beq.w	800ecc8 <_dtoa_r+0xb20>
 800eb34:	9b03      	ldr	r3, [sp, #12]
 800eb36:	9302      	str	r3, [sp, #8]
 800eb38:	2d00      	cmp	r5, #0
 800eb3a:	dd05      	ble.n	800eb48 <_dtoa_r+0x9a0>
 800eb3c:	4639      	mov	r1, r7
 800eb3e:	462a      	mov	r2, r5
 800eb40:	4620      	mov	r0, r4
 800eb42:	f000 ff09 	bl	800f958 <__lshift>
 800eb46:	4607      	mov	r7, r0
 800eb48:	f1b8 0f00 	cmp.w	r8, #0
 800eb4c:	d05b      	beq.n	800ec06 <_dtoa_r+0xa5e>
 800eb4e:	6879      	ldr	r1, [r7, #4]
 800eb50:	4620      	mov	r0, r4
 800eb52:	f000 fca5 	bl	800f4a0 <_Balloc>
 800eb56:	4605      	mov	r5, r0
 800eb58:	b928      	cbnz	r0, 800eb66 <_dtoa_r+0x9be>
 800eb5a:	4b87      	ldr	r3, [pc, #540]	; (800ed78 <_dtoa_r+0xbd0>)
 800eb5c:	4602      	mov	r2, r0
 800eb5e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800eb62:	f7ff bb3b 	b.w	800e1dc <_dtoa_r+0x34>
 800eb66:	693a      	ldr	r2, [r7, #16]
 800eb68:	3202      	adds	r2, #2
 800eb6a:	0092      	lsls	r2, r2, #2
 800eb6c:	f107 010c 	add.w	r1, r7, #12
 800eb70:	300c      	adds	r0, #12
 800eb72:	f7fd fd29 	bl	800c5c8 <memcpy>
 800eb76:	2201      	movs	r2, #1
 800eb78:	4629      	mov	r1, r5
 800eb7a:	4620      	mov	r0, r4
 800eb7c:	f000 feec 	bl	800f958 <__lshift>
 800eb80:	9b01      	ldr	r3, [sp, #4]
 800eb82:	f103 0901 	add.w	r9, r3, #1
 800eb86:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800eb8a:	4413      	add	r3, r2
 800eb8c:	9305      	str	r3, [sp, #20]
 800eb8e:	f00a 0301 	and.w	r3, sl, #1
 800eb92:	46b8      	mov	r8, r7
 800eb94:	9304      	str	r3, [sp, #16]
 800eb96:	4607      	mov	r7, r0
 800eb98:	4631      	mov	r1, r6
 800eb9a:	ee18 0a10 	vmov	r0, s16
 800eb9e:	f7ff fa77 	bl	800e090 <quorem>
 800eba2:	4641      	mov	r1, r8
 800eba4:	9002      	str	r0, [sp, #8]
 800eba6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ebaa:	ee18 0a10 	vmov	r0, s16
 800ebae:	f000 ff43 	bl	800fa38 <__mcmp>
 800ebb2:	463a      	mov	r2, r7
 800ebb4:	9003      	str	r0, [sp, #12]
 800ebb6:	4631      	mov	r1, r6
 800ebb8:	4620      	mov	r0, r4
 800ebba:	f000 ff59 	bl	800fa70 <__mdiff>
 800ebbe:	68c2      	ldr	r2, [r0, #12]
 800ebc0:	f109 3bff 	add.w	fp, r9, #4294967295
 800ebc4:	4605      	mov	r5, r0
 800ebc6:	bb02      	cbnz	r2, 800ec0a <_dtoa_r+0xa62>
 800ebc8:	4601      	mov	r1, r0
 800ebca:	ee18 0a10 	vmov	r0, s16
 800ebce:	f000 ff33 	bl	800fa38 <__mcmp>
 800ebd2:	4602      	mov	r2, r0
 800ebd4:	4629      	mov	r1, r5
 800ebd6:	4620      	mov	r0, r4
 800ebd8:	9207      	str	r2, [sp, #28]
 800ebda:	f000 fca1 	bl	800f520 <_Bfree>
 800ebde:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ebe2:	ea43 0102 	orr.w	r1, r3, r2
 800ebe6:	9b04      	ldr	r3, [sp, #16]
 800ebe8:	430b      	orrs	r3, r1
 800ebea:	464d      	mov	r5, r9
 800ebec:	d10f      	bne.n	800ec0e <_dtoa_r+0xa66>
 800ebee:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ebf2:	d02a      	beq.n	800ec4a <_dtoa_r+0xaa2>
 800ebf4:	9b03      	ldr	r3, [sp, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	dd02      	ble.n	800ec00 <_dtoa_r+0xa58>
 800ebfa:	9b02      	ldr	r3, [sp, #8]
 800ebfc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ec00:	f88b a000 	strb.w	sl, [fp]
 800ec04:	e775      	b.n	800eaf2 <_dtoa_r+0x94a>
 800ec06:	4638      	mov	r0, r7
 800ec08:	e7ba      	b.n	800eb80 <_dtoa_r+0x9d8>
 800ec0a:	2201      	movs	r2, #1
 800ec0c:	e7e2      	b.n	800ebd4 <_dtoa_r+0xa2c>
 800ec0e:	9b03      	ldr	r3, [sp, #12]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	db04      	blt.n	800ec1e <_dtoa_r+0xa76>
 800ec14:	9906      	ldr	r1, [sp, #24]
 800ec16:	430b      	orrs	r3, r1
 800ec18:	9904      	ldr	r1, [sp, #16]
 800ec1a:	430b      	orrs	r3, r1
 800ec1c:	d122      	bne.n	800ec64 <_dtoa_r+0xabc>
 800ec1e:	2a00      	cmp	r2, #0
 800ec20:	ddee      	ble.n	800ec00 <_dtoa_r+0xa58>
 800ec22:	ee18 1a10 	vmov	r1, s16
 800ec26:	2201      	movs	r2, #1
 800ec28:	4620      	mov	r0, r4
 800ec2a:	f000 fe95 	bl	800f958 <__lshift>
 800ec2e:	4631      	mov	r1, r6
 800ec30:	ee08 0a10 	vmov	s16, r0
 800ec34:	f000 ff00 	bl	800fa38 <__mcmp>
 800ec38:	2800      	cmp	r0, #0
 800ec3a:	dc03      	bgt.n	800ec44 <_dtoa_r+0xa9c>
 800ec3c:	d1e0      	bne.n	800ec00 <_dtoa_r+0xa58>
 800ec3e:	f01a 0f01 	tst.w	sl, #1
 800ec42:	d0dd      	beq.n	800ec00 <_dtoa_r+0xa58>
 800ec44:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec48:	d1d7      	bne.n	800ebfa <_dtoa_r+0xa52>
 800ec4a:	2339      	movs	r3, #57	; 0x39
 800ec4c:	f88b 3000 	strb.w	r3, [fp]
 800ec50:	462b      	mov	r3, r5
 800ec52:	461d      	mov	r5, r3
 800ec54:	3b01      	subs	r3, #1
 800ec56:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ec5a:	2a39      	cmp	r2, #57	; 0x39
 800ec5c:	d071      	beq.n	800ed42 <_dtoa_r+0xb9a>
 800ec5e:	3201      	adds	r2, #1
 800ec60:	701a      	strb	r2, [r3, #0]
 800ec62:	e746      	b.n	800eaf2 <_dtoa_r+0x94a>
 800ec64:	2a00      	cmp	r2, #0
 800ec66:	dd07      	ble.n	800ec78 <_dtoa_r+0xad0>
 800ec68:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ec6c:	d0ed      	beq.n	800ec4a <_dtoa_r+0xaa2>
 800ec6e:	f10a 0301 	add.w	r3, sl, #1
 800ec72:	f88b 3000 	strb.w	r3, [fp]
 800ec76:	e73c      	b.n	800eaf2 <_dtoa_r+0x94a>
 800ec78:	9b05      	ldr	r3, [sp, #20]
 800ec7a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ec7e:	4599      	cmp	r9, r3
 800ec80:	d047      	beq.n	800ed12 <_dtoa_r+0xb6a>
 800ec82:	ee18 1a10 	vmov	r1, s16
 800ec86:	2300      	movs	r3, #0
 800ec88:	220a      	movs	r2, #10
 800ec8a:	4620      	mov	r0, r4
 800ec8c:	f000 fc6a 	bl	800f564 <__multadd>
 800ec90:	45b8      	cmp	r8, r7
 800ec92:	ee08 0a10 	vmov	s16, r0
 800ec96:	f04f 0300 	mov.w	r3, #0
 800ec9a:	f04f 020a 	mov.w	r2, #10
 800ec9e:	4641      	mov	r1, r8
 800eca0:	4620      	mov	r0, r4
 800eca2:	d106      	bne.n	800ecb2 <_dtoa_r+0xb0a>
 800eca4:	f000 fc5e 	bl	800f564 <__multadd>
 800eca8:	4680      	mov	r8, r0
 800ecaa:	4607      	mov	r7, r0
 800ecac:	f109 0901 	add.w	r9, r9, #1
 800ecb0:	e772      	b.n	800eb98 <_dtoa_r+0x9f0>
 800ecb2:	f000 fc57 	bl	800f564 <__multadd>
 800ecb6:	4639      	mov	r1, r7
 800ecb8:	4680      	mov	r8, r0
 800ecba:	2300      	movs	r3, #0
 800ecbc:	220a      	movs	r2, #10
 800ecbe:	4620      	mov	r0, r4
 800ecc0:	f000 fc50 	bl	800f564 <__multadd>
 800ecc4:	4607      	mov	r7, r0
 800ecc6:	e7f1      	b.n	800ecac <_dtoa_r+0xb04>
 800ecc8:	9b03      	ldr	r3, [sp, #12]
 800ecca:	9302      	str	r3, [sp, #8]
 800eccc:	9d01      	ldr	r5, [sp, #4]
 800ecce:	ee18 0a10 	vmov	r0, s16
 800ecd2:	4631      	mov	r1, r6
 800ecd4:	f7ff f9dc 	bl	800e090 <quorem>
 800ecd8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ecdc:	9b01      	ldr	r3, [sp, #4]
 800ecde:	f805 ab01 	strb.w	sl, [r5], #1
 800ece2:	1aea      	subs	r2, r5, r3
 800ece4:	9b02      	ldr	r3, [sp, #8]
 800ece6:	4293      	cmp	r3, r2
 800ece8:	dd09      	ble.n	800ecfe <_dtoa_r+0xb56>
 800ecea:	ee18 1a10 	vmov	r1, s16
 800ecee:	2300      	movs	r3, #0
 800ecf0:	220a      	movs	r2, #10
 800ecf2:	4620      	mov	r0, r4
 800ecf4:	f000 fc36 	bl	800f564 <__multadd>
 800ecf8:	ee08 0a10 	vmov	s16, r0
 800ecfc:	e7e7      	b.n	800ecce <_dtoa_r+0xb26>
 800ecfe:	9b02      	ldr	r3, [sp, #8]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	bfc8      	it	gt
 800ed04:	461d      	movgt	r5, r3
 800ed06:	9b01      	ldr	r3, [sp, #4]
 800ed08:	bfd8      	it	le
 800ed0a:	2501      	movle	r5, #1
 800ed0c:	441d      	add	r5, r3
 800ed0e:	f04f 0800 	mov.w	r8, #0
 800ed12:	ee18 1a10 	vmov	r1, s16
 800ed16:	2201      	movs	r2, #1
 800ed18:	4620      	mov	r0, r4
 800ed1a:	f000 fe1d 	bl	800f958 <__lshift>
 800ed1e:	4631      	mov	r1, r6
 800ed20:	ee08 0a10 	vmov	s16, r0
 800ed24:	f000 fe88 	bl	800fa38 <__mcmp>
 800ed28:	2800      	cmp	r0, #0
 800ed2a:	dc91      	bgt.n	800ec50 <_dtoa_r+0xaa8>
 800ed2c:	d102      	bne.n	800ed34 <_dtoa_r+0xb8c>
 800ed2e:	f01a 0f01 	tst.w	sl, #1
 800ed32:	d18d      	bne.n	800ec50 <_dtoa_r+0xaa8>
 800ed34:	462b      	mov	r3, r5
 800ed36:	461d      	mov	r5, r3
 800ed38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ed3c:	2a30      	cmp	r2, #48	; 0x30
 800ed3e:	d0fa      	beq.n	800ed36 <_dtoa_r+0xb8e>
 800ed40:	e6d7      	b.n	800eaf2 <_dtoa_r+0x94a>
 800ed42:	9a01      	ldr	r2, [sp, #4]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d184      	bne.n	800ec52 <_dtoa_r+0xaaa>
 800ed48:	9b00      	ldr	r3, [sp, #0]
 800ed4a:	3301      	adds	r3, #1
 800ed4c:	9300      	str	r3, [sp, #0]
 800ed4e:	2331      	movs	r3, #49	; 0x31
 800ed50:	7013      	strb	r3, [r2, #0]
 800ed52:	e6ce      	b.n	800eaf2 <_dtoa_r+0x94a>
 800ed54:	4b09      	ldr	r3, [pc, #36]	; (800ed7c <_dtoa_r+0xbd4>)
 800ed56:	f7ff ba95 	b.w	800e284 <_dtoa_r+0xdc>
 800ed5a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ed5c:	2b00      	cmp	r3, #0
 800ed5e:	f47f aa6e 	bne.w	800e23e <_dtoa_r+0x96>
 800ed62:	4b07      	ldr	r3, [pc, #28]	; (800ed80 <_dtoa_r+0xbd8>)
 800ed64:	f7ff ba8e 	b.w	800e284 <_dtoa_r+0xdc>
 800ed68:	9b02      	ldr	r3, [sp, #8]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	dcae      	bgt.n	800eccc <_dtoa_r+0xb24>
 800ed6e:	9b06      	ldr	r3, [sp, #24]
 800ed70:	2b02      	cmp	r3, #2
 800ed72:	f73f aea8 	bgt.w	800eac6 <_dtoa_r+0x91e>
 800ed76:	e7a9      	b.n	800eccc <_dtoa_r+0xb24>
 800ed78:	080113a8 	.word	0x080113a8
 800ed7c:	080111ac 	.word	0x080111ac
 800ed80:	08011329 	.word	0x08011329

0800ed84 <rshift>:
 800ed84:	6903      	ldr	r3, [r0, #16]
 800ed86:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ed8a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ed8e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ed92:	f100 0414 	add.w	r4, r0, #20
 800ed96:	dd45      	ble.n	800ee24 <rshift+0xa0>
 800ed98:	f011 011f 	ands.w	r1, r1, #31
 800ed9c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800eda0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800eda4:	d10c      	bne.n	800edc0 <rshift+0x3c>
 800eda6:	f100 0710 	add.w	r7, r0, #16
 800edaa:	4629      	mov	r1, r5
 800edac:	42b1      	cmp	r1, r6
 800edae:	d334      	bcc.n	800ee1a <rshift+0x96>
 800edb0:	1a9b      	subs	r3, r3, r2
 800edb2:	009b      	lsls	r3, r3, #2
 800edb4:	1eea      	subs	r2, r5, #3
 800edb6:	4296      	cmp	r6, r2
 800edb8:	bf38      	it	cc
 800edba:	2300      	movcc	r3, #0
 800edbc:	4423      	add	r3, r4
 800edbe:	e015      	b.n	800edec <rshift+0x68>
 800edc0:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800edc4:	f1c1 0820 	rsb	r8, r1, #32
 800edc8:	40cf      	lsrs	r7, r1
 800edca:	f105 0e04 	add.w	lr, r5, #4
 800edce:	46a1      	mov	r9, r4
 800edd0:	4576      	cmp	r6, lr
 800edd2:	46f4      	mov	ip, lr
 800edd4:	d815      	bhi.n	800ee02 <rshift+0x7e>
 800edd6:	1a9a      	subs	r2, r3, r2
 800edd8:	0092      	lsls	r2, r2, #2
 800edda:	3a04      	subs	r2, #4
 800eddc:	3501      	adds	r5, #1
 800edde:	42ae      	cmp	r6, r5
 800ede0:	bf38      	it	cc
 800ede2:	2200      	movcc	r2, #0
 800ede4:	18a3      	adds	r3, r4, r2
 800ede6:	50a7      	str	r7, [r4, r2]
 800ede8:	b107      	cbz	r7, 800edec <rshift+0x68>
 800edea:	3304      	adds	r3, #4
 800edec:	1b1a      	subs	r2, r3, r4
 800edee:	42a3      	cmp	r3, r4
 800edf0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800edf4:	bf08      	it	eq
 800edf6:	2300      	moveq	r3, #0
 800edf8:	6102      	str	r2, [r0, #16]
 800edfa:	bf08      	it	eq
 800edfc:	6143      	streq	r3, [r0, #20]
 800edfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ee02:	f8dc c000 	ldr.w	ip, [ip]
 800ee06:	fa0c fc08 	lsl.w	ip, ip, r8
 800ee0a:	ea4c 0707 	orr.w	r7, ip, r7
 800ee0e:	f849 7b04 	str.w	r7, [r9], #4
 800ee12:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ee16:	40cf      	lsrs	r7, r1
 800ee18:	e7da      	b.n	800edd0 <rshift+0x4c>
 800ee1a:	f851 cb04 	ldr.w	ip, [r1], #4
 800ee1e:	f847 cf04 	str.w	ip, [r7, #4]!
 800ee22:	e7c3      	b.n	800edac <rshift+0x28>
 800ee24:	4623      	mov	r3, r4
 800ee26:	e7e1      	b.n	800edec <rshift+0x68>

0800ee28 <__hexdig_fun>:
 800ee28:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ee2c:	2b09      	cmp	r3, #9
 800ee2e:	d802      	bhi.n	800ee36 <__hexdig_fun+0xe>
 800ee30:	3820      	subs	r0, #32
 800ee32:	b2c0      	uxtb	r0, r0
 800ee34:	4770      	bx	lr
 800ee36:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ee3a:	2b05      	cmp	r3, #5
 800ee3c:	d801      	bhi.n	800ee42 <__hexdig_fun+0x1a>
 800ee3e:	3847      	subs	r0, #71	; 0x47
 800ee40:	e7f7      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee42:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800ee46:	2b05      	cmp	r3, #5
 800ee48:	d801      	bhi.n	800ee4e <__hexdig_fun+0x26>
 800ee4a:	3827      	subs	r0, #39	; 0x27
 800ee4c:	e7f1      	b.n	800ee32 <__hexdig_fun+0xa>
 800ee4e:	2000      	movs	r0, #0
 800ee50:	4770      	bx	lr
	...

0800ee54 <__gethex>:
 800ee54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee58:	ed2d 8b02 	vpush	{d8}
 800ee5c:	b089      	sub	sp, #36	; 0x24
 800ee5e:	ee08 0a10 	vmov	s16, r0
 800ee62:	9304      	str	r3, [sp, #16]
 800ee64:	4bb4      	ldr	r3, [pc, #720]	; (800f138 <__gethex+0x2e4>)
 800ee66:	681b      	ldr	r3, [r3, #0]
 800ee68:	9301      	str	r3, [sp, #4]
 800ee6a:	4618      	mov	r0, r3
 800ee6c:	468b      	mov	fp, r1
 800ee6e:	4690      	mov	r8, r2
 800ee70:	f7f1 f9b6 	bl	80001e0 <strlen>
 800ee74:	9b01      	ldr	r3, [sp, #4]
 800ee76:	f8db 2000 	ldr.w	r2, [fp]
 800ee7a:	4403      	add	r3, r0
 800ee7c:	4682      	mov	sl, r0
 800ee7e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ee82:	9305      	str	r3, [sp, #20]
 800ee84:	1c93      	adds	r3, r2, #2
 800ee86:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ee8a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ee8e:	32fe      	adds	r2, #254	; 0xfe
 800ee90:	18d1      	adds	r1, r2, r3
 800ee92:	461f      	mov	r7, r3
 800ee94:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee98:	9100      	str	r1, [sp, #0]
 800ee9a:	2830      	cmp	r0, #48	; 0x30
 800ee9c:	d0f8      	beq.n	800ee90 <__gethex+0x3c>
 800ee9e:	f7ff ffc3 	bl	800ee28 <__hexdig_fun>
 800eea2:	4604      	mov	r4, r0
 800eea4:	2800      	cmp	r0, #0
 800eea6:	d13a      	bne.n	800ef1e <__gethex+0xca>
 800eea8:	9901      	ldr	r1, [sp, #4]
 800eeaa:	4652      	mov	r2, sl
 800eeac:	4638      	mov	r0, r7
 800eeae:	f001 fa23 	bl	80102f8 <strncmp>
 800eeb2:	4605      	mov	r5, r0
 800eeb4:	2800      	cmp	r0, #0
 800eeb6:	d168      	bne.n	800ef8a <__gethex+0x136>
 800eeb8:	f817 000a 	ldrb.w	r0, [r7, sl]
 800eebc:	eb07 060a 	add.w	r6, r7, sl
 800eec0:	f7ff ffb2 	bl	800ee28 <__hexdig_fun>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	d062      	beq.n	800ef8e <__gethex+0x13a>
 800eec8:	4633      	mov	r3, r6
 800eeca:	7818      	ldrb	r0, [r3, #0]
 800eecc:	2830      	cmp	r0, #48	; 0x30
 800eece:	461f      	mov	r7, r3
 800eed0:	f103 0301 	add.w	r3, r3, #1
 800eed4:	d0f9      	beq.n	800eeca <__gethex+0x76>
 800eed6:	f7ff ffa7 	bl	800ee28 <__hexdig_fun>
 800eeda:	2301      	movs	r3, #1
 800eedc:	fab0 f480 	clz	r4, r0
 800eee0:	0964      	lsrs	r4, r4, #5
 800eee2:	4635      	mov	r5, r6
 800eee4:	9300      	str	r3, [sp, #0]
 800eee6:	463a      	mov	r2, r7
 800eee8:	4616      	mov	r6, r2
 800eeea:	3201      	adds	r2, #1
 800eeec:	7830      	ldrb	r0, [r6, #0]
 800eeee:	f7ff ff9b 	bl	800ee28 <__hexdig_fun>
 800eef2:	2800      	cmp	r0, #0
 800eef4:	d1f8      	bne.n	800eee8 <__gethex+0x94>
 800eef6:	9901      	ldr	r1, [sp, #4]
 800eef8:	4652      	mov	r2, sl
 800eefa:	4630      	mov	r0, r6
 800eefc:	f001 f9fc 	bl	80102f8 <strncmp>
 800ef00:	b980      	cbnz	r0, 800ef24 <__gethex+0xd0>
 800ef02:	b94d      	cbnz	r5, 800ef18 <__gethex+0xc4>
 800ef04:	eb06 050a 	add.w	r5, r6, sl
 800ef08:	462a      	mov	r2, r5
 800ef0a:	4616      	mov	r6, r2
 800ef0c:	3201      	adds	r2, #1
 800ef0e:	7830      	ldrb	r0, [r6, #0]
 800ef10:	f7ff ff8a 	bl	800ee28 <__hexdig_fun>
 800ef14:	2800      	cmp	r0, #0
 800ef16:	d1f8      	bne.n	800ef0a <__gethex+0xb6>
 800ef18:	1bad      	subs	r5, r5, r6
 800ef1a:	00ad      	lsls	r5, r5, #2
 800ef1c:	e004      	b.n	800ef28 <__gethex+0xd4>
 800ef1e:	2400      	movs	r4, #0
 800ef20:	4625      	mov	r5, r4
 800ef22:	e7e0      	b.n	800eee6 <__gethex+0x92>
 800ef24:	2d00      	cmp	r5, #0
 800ef26:	d1f7      	bne.n	800ef18 <__gethex+0xc4>
 800ef28:	7833      	ldrb	r3, [r6, #0]
 800ef2a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ef2e:	2b50      	cmp	r3, #80	; 0x50
 800ef30:	d13b      	bne.n	800efaa <__gethex+0x156>
 800ef32:	7873      	ldrb	r3, [r6, #1]
 800ef34:	2b2b      	cmp	r3, #43	; 0x2b
 800ef36:	d02c      	beq.n	800ef92 <__gethex+0x13e>
 800ef38:	2b2d      	cmp	r3, #45	; 0x2d
 800ef3a:	d02e      	beq.n	800ef9a <__gethex+0x146>
 800ef3c:	1c71      	adds	r1, r6, #1
 800ef3e:	f04f 0900 	mov.w	r9, #0
 800ef42:	7808      	ldrb	r0, [r1, #0]
 800ef44:	f7ff ff70 	bl	800ee28 <__hexdig_fun>
 800ef48:	1e43      	subs	r3, r0, #1
 800ef4a:	b2db      	uxtb	r3, r3
 800ef4c:	2b18      	cmp	r3, #24
 800ef4e:	d82c      	bhi.n	800efaa <__gethex+0x156>
 800ef50:	f1a0 0210 	sub.w	r2, r0, #16
 800ef54:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ef58:	f7ff ff66 	bl	800ee28 <__hexdig_fun>
 800ef5c:	1e43      	subs	r3, r0, #1
 800ef5e:	b2db      	uxtb	r3, r3
 800ef60:	2b18      	cmp	r3, #24
 800ef62:	d91d      	bls.n	800efa0 <__gethex+0x14c>
 800ef64:	f1b9 0f00 	cmp.w	r9, #0
 800ef68:	d000      	beq.n	800ef6c <__gethex+0x118>
 800ef6a:	4252      	negs	r2, r2
 800ef6c:	4415      	add	r5, r2
 800ef6e:	f8cb 1000 	str.w	r1, [fp]
 800ef72:	b1e4      	cbz	r4, 800efae <__gethex+0x15a>
 800ef74:	9b00      	ldr	r3, [sp, #0]
 800ef76:	2b00      	cmp	r3, #0
 800ef78:	bf14      	ite	ne
 800ef7a:	2700      	movne	r7, #0
 800ef7c:	2706      	moveq	r7, #6
 800ef7e:	4638      	mov	r0, r7
 800ef80:	b009      	add	sp, #36	; 0x24
 800ef82:	ecbd 8b02 	vpop	{d8}
 800ef86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef8a:	463e      	mov	r6, r7
 800ef8c:	4625      	mov	r5, r4
 800ef8e:	2401      	movs	r4, #1
 800ef90:	e7ca      	b.n	800ef28 <__gethex+0xd4>
 800ef92:	f04f 0900 	mov.w	r9, #0
 800ef96:	1cb1      	adds	r1, r6, #2
 800ef98:	e7d3      	b.n	800ef42 <__gethex+0xee>
 800ef9a:	f04f 0901 	mov.w	r9, #1
 800ef9e:	e7fa      	b.n	800ef96 <__gethex+0x142>
 800efa0:	230a      	movs	r3, #10
 800efa2:	fb03 0202 	mla	r2, r3, r2, r0
 800efa6:	3a10      	subs	r2, #16
 800efa8:	e7d4      	b.n	800ef54 <__gethex+0x100>
 800efaa:	4631      	mov	r1, r6
 800efac:	e7df      	b.n	800ef6e <__gethex+0x11a>
 800efae:	1bf3      	subs	r3, r6, r7
 800efb0:	3b01      	subs	r3, #1
 800efb2:	4621      	mov	r1, r4
 800efb4:	2b07      	cmp	r3, #7
 800efb6:	dc0b      	bgt.n	800efd0 <__gethex+0x17c>
 800efb8:	ee18 0a10 	vmov	r0, s16
 800efbc:	f000 fa70 	bl	800f4a0 <_Balloc>
 800efc0:	4604      	mov	r4, r0
 800efc2:	b940      	cbnz	r0, 800efd6 <__gethex+0x182>
 800efc4:	4b5d      	ldr	r3, [pc, #372]	; (800f13c <__gethex+0x2e8>)
 800efc6:	4602      	mov	r2, r0
 800efc8:	21de      	movs	r1, #222	; 0xde
 800efca:	485d      	ldr	r0, [pc, #372]	; (800f140 <__gethex+0x2ec>)
 800efcc:	f001 f9b6 	bl	801033c <__assert_func>
 800efd0:	3101      	adds	r1, #1
 800efd2:	105b      	asrs	r3, r3, #1
 800efd4:	e7ee      	b.n	800efb4 <__gethex+0x160>
 800efd6:	f100 0914 	add.w	r9, r0, #20
 800efda:	f04f 0b00 	mov.w	fp, #0
 800efde:	f1ca 0301 	rsb	r3, sl, #1
 800efe2:	f8cd 9008 	str.w	r9, [sp, #8]
 800efe6:	f8cd b000 	str.w	fp, [sp]
 800efea:	9306      	str	r3, [sp, #24]
 800efec:	42b7      	cmp	r7, r6
 800efee:	d340      	bcc.n	800f072 <__gethex+0x21e>
 800eff0:	9802      	ldr	r0, [sp, #8]
 800eff2:	9b00      	ldr	r3, [sp, #0]
 800eff4:	f840 3b04 	str.w	r3, [r0], #4
 800eff8:	eba0 0009 	sub.w	r0, r0, r9
 800effc:	1080      	asrs	r0, r0, #2
 800effe:	0146      	lsls	r6, r0, #5
 800f000:	6120      	str	r0, [r4, #16]
 800f002:	4618      	mov	r0, r3
 800f004:	f000 fb3e 	bl	800f684 <__hi0bits>
 800f008:	1a30      	subs	r0, r6, r0
 800f00a:	f8d8 6000 	ldr.w	r6, [r8]
 800f00e:	42b0      	cmp	r0, r6
 800f010:	dd63      	ble.n	800f0da <__gethex+0x286>
 800f012:	1b87      	subs	r7, r0, r6
 800f014:	4639      	mov	r1, r7
 800f016:	4620      	mov	r0, r4
 800f018:	f000 fee2 	bl	800fde0 <__any_on>
 800f01c:	4682      	mov	sl, r0
 800f01e:	b1a8      	cbz	r0, 800f04c <__gethex+0x1f8>
 800f020:	1e7b      	subs	r3, r7, #1
 800f022:	1159      	asrs	r1, r3, #5
 800f024:	f003 021f 	and.w	r2, r3, #31
 800f028:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f02c:	f04f 0a01 	mov.w	sl, #1
 800f030:	fa0a f202 	lsl.w	r2, sl, r2
 800f034:	420a      	tst	r2, r1
 800f036:	d009      	beq.n	800f04c <__gethex+0x1f8>
 800f038:	4553      	cmp	r3, sl
 800f03a:	dd05      	ble.n	800f048 <__gethex+0x1f4>
 800f03c:	1eb9      	subs	r1, r7, #2
 800f03e:	4620      	mov	r0, r4
 800f040:	f000 fece 	bl	800fde0 <__any_on>
 800f044:	2800      	cmp	r0, #0
 800f046:	d145      	bne.n	800f0d4 <__gethex+0x280>
 800f048:	f04f 0a02 	mov.w	sl, #2
 800f04c:	4639      	mov	r1, r7
 800f04e:	4620      	mov	r0, r4
 800f050:	f7ff fe98 	bl	800ed84 <rshift>
 800f054:	443d      	add	r5, r7
 800f056:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f05a:	42ab      	cmp	r3, r5
 800f05c:	da4c      	bge.n	800f0f8 <__gethex+0x2a4>
 800f05e:	ee18 0a10 	vmov	r0, s16
 800f062:	4621      	mov	r1, r4
 800f064:	f000 fa5c 	bl	800f520 <_Bfree>
 800f068:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f06a:	2300      	movs	r3, #0
 800f06c:	6013      	str	r3, [r2, #0]
 800f06e:	27a3      	movs	r7, #163	; 0xa3
 800f070:	e785      	b.n	800ef7e <__gethex+0x12a>
 800f072:	1e73      	subs	r3, r6, #1
 800f074:	9a05      	ldr	r2, [sp, #20]
 800f076:	9303      	str	r3, [sp, #12]
 800f078:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f07c:	4293      	cmp	r3, r2
 800f07e:	d019      	beq.n	800f0b4 <__gethex+0x260>
 800f080:	f1bb 0f20 	cmp.w	fp, #32
 800f084:	d107      	bne.n	800f096 <__gethex+0x242>
 800f086:	9b02      	ldr	r3, [sp, #8]
 800f088:	9a00      	ldr	r2, [sp, #0]
 800f08a:	f843 2b04 	str.w	r2, [r3], #4
 800f08e:	9302      	str	r3, [sp, #8]
 800f090:	2300      	movs	r3, #0
 800f092:	9300      	str	r3, [sp, #0]
 800f094:	469b      	mov	fp, r3
 800f096:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f09a:	f7ff fec5 	bl	800ee28 <__hexdig_fun>
 800f09e:	9b00      	ldr	r3, [sp, #0]
 800f0a0:	f000 000f 	and.w	r0, r0, #15
 800f0a4:	fa00 f00b 	lsl.w	r0, r0, fp
 800f0a8:	4303      	orrs	r3, r0
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	f10b 0b04 	add.w	fp, fp, #4
 800f0b0:	9b03      	ldr	r3, [sp, #12]
 800f0b2:	e00d      	b.n	800f0d0 <__gethex+0x27c>
 800f0b4:	9b03      	ldr	r3, [sp, #12]
 800f0b6:	9a06      	ldr	r2, [sp, #24]
 800f0b8:	4413      	add	r3, r2
 800f0ba:	42bb      	cmp	r3, r7
 800f0bc:	d3e0      	bcc.n	800f080 <__gethex+0x22c>
 800f0be:	4618      	mov	r0, r3
 800f0c0:	9901      	ldr	r1, [sp, #4]
 800f0c2:	9307      	str	r3, [sp, #28]
 800f0c4:	4652      	mov	r2, sl
 800f0c6:	f001 f917 	bl	80102f8 <strncmp>
 800f0ca:	9b07      	ldr	r3, [sp, #28]
 800f0cc:	2800      	cmp	r0, #0
 800f0ce:	d1d7      	bne.n	800f080 <__gethex+0x22c>
 800f0d0:	461e      	mov	r6, r3
 800f0d2:	e78b      	b.n	800efec <__gethex+0x198>
 800f0d4:	f04f 0a03 	mov.w	sl, #3
 800f0d8:	e7b8      	b.n	800f04c <__gethex+0x1f8>
 800f0da:	da0a      	bge.n	800f0f2 <__gethex+0x29e>
 800f0dc:	1a37      	subs	r7, r6, r0
 800f0de:	4621      	mov	r1, r4
 800f0e0:	ee18 0a10 	vmov	r0, s16
 800f0e4:	463a      	mov	r2, r7
 800f0e6:	f000 fc37 	bl	800f958 <__lshift>
 800f0ea:	1bed      	subs	r5, r5, r7
 800f0ec:	4604      	mov	r4, r0
 800f0ee:	f100 0914 	add.w	r9, r0, #20
 800f0f2:	f04f 0a00 	mov.w	sl, #0
 800f0f6:	e7ae      	b.n	800f056 <__gethex+0x202>
 800f0f8:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f0fc:	42a8      	cmp	r0, r5
 800f0fe:	dd72      	ble.n	800f1e6 <__gethex+0x392>
 800f100:	1b45      	subs	r5, r0, r5
 800f102:	42ae      	cmp	r6, r5
 800f104:	dc36      	bgt.n	800f174 <__gethex+0x320>
 800f106:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f10a:	2b02      	cmp	r3, #2
 800f10c:	d02a      	beq.n	800f164 <__gethex+0x310>
 800f10e:	2b03      	cmp	r3, #3
 800f110:	d02c      	beq.n	800f16c <__gethex+0x318>
 800f112:	2b01      	cmp	r3, #1
 800f114:	d11c      	bne.n	800f150 <__gethex+0x2fc>
 800f116:	42ae      	cmp	r6, r5
 800f118:	d11a      	bne.n	800f150 <__gethex+0x2fc>
 800f11a:	2e01      	cmp	r6, #1
 800f11c:	d112      	bne.n	800f144 <__gethex+0x2f0>
 800f11e:	9a04      	ldr	r2, [sp, #16]
 800f120:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f124:	6013      	str	r3, [r2, #0]
 800f126:	2301      	movs	r3, #1
 800f128:	6123      	str	r3, [r4, #16]
 800f12a:	f8c9 3000 	str.w	r3, [r9]
 800f12e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f130:	2762      	movs	r7, #98	; 0x62
 800f132:	601c      	str	r4, [r3, #0]
 800f134:	e723      	b.n	800ef7e <__gethex+0x12a>
 800f136:	bf00      	nop
 800f138:	08011420 	.word	0x08011420
 800f13c:	080113a8 	.word	0x080113a8
 800f140:	080113b9 	.word	0x080113b9
 800f144:	1e71      	subs	r1, r6, #1
 800f146:	4620      	mov	r0, r4
 800f148:	f000 fe4a 	bl	800fde0 <__any_on>
 800f14c:	2800      	cmp	r0, #0
 800f14e:	d1e6      	bne.n	800f11e <__gethex+0x2ca>
 800f150:	ee18 0a10 	vmov	r0, s16
 800f154:	4621      	mov	r1, r4
 800f156:	f000 f9e3 	bl	800f520 <_Bfree>
 800f15a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f15c:	2300      	movs	r3, #0
 800f15e:	6013      	str	r3, [r2, #0]
 800f160:	2750      	movs	r7, #80	; 0x50
 800f162:	e70c      	b.n	800ef7e <__gethex+0x12a>
 800f164:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f166:	2b00      	cmp	r3, #0
 800f168:	d1f2      	bne.n	800f150 <__gethex+0x2fc>
 800f16a:	e7d8      	b.n	800f11e <__gethex+0x2ca>
 800f16c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f16e:	2b00      	cmp	r3, #0
 800f170:	d1d5      	bne.n	800f11e <__gethex+0x2ca>
 800f172:	e7ed      	b.n	800f150 <__gethex+0x2fc>
 800f174:	1e6f      	subs	r7, r5, #1
 800f176:	f1ba 0f00 	cmp.w	sl, #0
 800f17a:	d131      	bne.n	800f1e0 <__gethex+0x38c>
 800f17c:	b127      	cbz	r7, 800f188 <__gethex+0x334>
 800f17e:	4639      	mov	r1, r7
 800f180:	4620      	mov	r0, r4
 800f182:	f000 fe2d 	bl	800fde0 <__any_on>
 800f186:	4682      	mov	sl, r0
 800f188:	117b      	asrs	r3, r7, #5
 800f18a:	2101      	movs	r1, #1
 800f18c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800f190:	f007 071f 	and.w	r7, r7, #31
 800f194:	fa01 f707 	lsl.w	r7, r1, r7
 800f198:	421f      	tst	r7, r3
 800f19a:	4629      	mov	r1, r5
 800f19c:	4620      	mov	r0, r4
 800f19e:	bf18      	it	ne
 800f1a0:	f04a 0a02 	orrne.w	sl, sl, #2
 800f1a4:	1b76      	subs	r6, r6, r5
 800f1a6:	f7ff fded 	bl	800ed84 <rshift>
 800f1aa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f1ae:	2702      	movs	r7, #2
 800f1b0:	f1ba 0f00 	cmp.w	sl, #0
 800f1b4:	d048      	beq.n	800f248 <__gethex+0x3f4>
 800f1b6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f1ba:	2b02      	cmp	r3, #2
 800f1bc:	d015      	beq.n	800f1ea <__gethex+0x396>
 800f1be:	2b03      	cmp	r3, #3
 800f1c0:	d017      	beq.n	800f1f2 <__gethex+0x39e>
 800f1c2:	2b01      	cmp	r3, #1
 800f1c4:	d109      	bne.n	800f1da <__gethex+0x386>
 800f1c6:	f01a 0f02 	tst.w	sl, #2
 800f1ca:	d006      	beq.n	800f1da <__gethex+0x386>
 800f1cc:	f8d9 0000 	ldr.w	r0, [r9]
 800f1d0:	ea4a 0a00 	orr.w	sl, sl, r0
 800f1d4:	f01a 0f01 	tst.w	sl, #1
 800f1d8:	d10e      	bne.n	800f1f8 <__gethex+0x3a4>
 800f1da:	f047 0710 	orr.w	r7, r7, #16
 800f1de:	e033      	b.n	800f248 <__gethex+0x3f4>
 800f1e0:	f04f 0a01 	mov.w	sl, #1
 800f1e4:	e7d0      	b.n	800f188 <__gethex+0x334>
 800f1e6:	2701      	movs	r7, #1
 800f1e8:	e7e2      	b.n	800f1b0 <__gethex+0x35c>
 800f1ea:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1ec:	f1c3 0301 	rsb	r3, r3, #1
 800f1f0:	9315      	str	r3, [sp, #84]	; 0x54
 800f1f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f1f4:	2b00      	cmp	r3, #0
 800f1f6:	d0f0      	beq.n	800f1da <__gethex+0x386>
 800f1f8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f1fc:	f104 0314 	add.w	r3, r4, #20
 800f200:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f204:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f208:	f04f 0c00 	mov.w	ip, #0
 800f20c:	4618      	mov	r0, r3
 800f20e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f212:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f216:	d01c      	beq.n	800f252 <__gethex+0x3fe>
 800f218:	3201      	adds	r2, #1
 800f21a:	6002      	str	r2, [r0, #0]
 800f21c:	2f02      	cmp	r7, #2
 800f21e:	f104 0314 	add.w	r3, r4, #20
 800f222:	d13f      	bne.n	800f2a4 <__gethex+0x450>
 800f224:	f8d8 2000 	ldr.w	r2, [r8]
 800f228:	3a01      	subs	r2, #1
 800f22a:	42b2      	cmp	r2, r6
 800f22c:	d10a      	bne.n	800f244 <__gethex+0x3f0>
 800f22e:	1171      	asrs	r1, r6, #5
 800f230:	2201      	movs	r2, #1
 800f232:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f236:	f006 061f 	and.w	r6, r6, #31
 800f23a:	fa02 f606 	lsl.w	r6, r2, r6
 800f23e:	421e      	tst	r6, r3
 800f240:	bf18      	it	ne
 800f242:	4617      	movne	r7, r2
 800f244:	f047 0720 	orr.w	r7, r7, #32
 800f248:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f24a:	601c      	str	r4, [r3, #0]
 800f24c:	9b04      	ldr	r3, [sp, #16]
 800f24e:	601d      	str	r5, [r3, #0]
 800f250:	e695      	b.n	800ef7e <__gethex+0x12a>
 800f252:	4299      	cmp	r1, r3
 800f254:	f843 cc04 	str.w	ip, [r3, #-4]
 800f258:	d8d8      	bhi.n	800f20c <__gethex+0x3b8>
 800f25a:	68a3      	ldr	r3, [r4, #8]
 800f25c:	459b      	cmp	fp, r3
 800f25e:	db19      	blt.n	800f294 <__gethex+0x440>
 800f260:	6861      	ldr	r1, [r4, #4]
 800f262:	ee18 0a10 	vmov	r0, s16
 800f266:	3101      	adds	r1, #1
 800f268:	f000 f91a 	bl	800f4a0 <_Balloc>
 800f26c:	4681      	mov	r9, r0
 800f26e:	b918      	cbnz	r0, 800f278 <__gethex+0x424>
 800f270:	4b1a      	ldr	r3, [pc, #104]	; (800f2dc <__gethex+0x488>)
 800f272:	4602      	mov	r2, r0
 800f274:	2184      	movs	r1, #132	; 0x84
 800f276:	e6a8      	b.n	800efca <__gethex+0x176>
 800f278:	6922      	ldr	r2, [r4, #16]
 800f27a:	3202      	adds	r2, #2
 800f27c:	f104 010c 	add.w	r1, r4, #12
 800f280:	0092      	lsls	r2, r2, #2
 800f282:	300c      	adds	r0, #12
 800f284:	f7fd f9a0 	bl	800c5c8 <memcpy>
 800f288:	4621      	mov	r1, r4
 800f28a:	ee18 0a10 	vmov	r0, s16
 800f28e:	f000 f947 	bl	800f520 <_Bfree>
 800f292:	464c      	mov	r4, r9
 800f294:	6923      	ldr	r3, [r4, #16]
 800f296:	1c5a      	adds	r2, r3, #1
 800f298:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f29c:	6122      	str	r2, [r4, #16]
 800f29e:	2201      	movs	r2, #1
 800f2a0:	615a      	str	r2, [r3, #20]
 800f2a2:	e7bb      	b.n	800f21c <__gethex+0x3c8>
 800f2a4:	6922      	ldr	r2, [r4, #16]
 800f2a6:	455a      	cmp	r2, fp
 800f2a8:	dd0b      	ble.n	800f2c2 <__gethex+0x46e>
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	4620      	mov	r0, r4
 800f2ae:	f7ff fd69 	bl	800ed84 <rshift>
 800f2b2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f2b6:	3501      	adds	r5, #1
 800f2b8:	42ab      	cmp	r3, r5
 800f2ba:	f6ff aed0 	blt.w	800f05e <__gethex+0x20a>
 800f2be:	2701      	movs	r7, #1
 800f2c0:	e7c0      	b.n	800f244 <__gethex+0x3f0>
 800f2c2:	f016 061f 	ands.w	r6, r6, #31
 800f2c6:	d0fa      	beq.n	800f2be <__gethex+0x46a>
 800f2c8:	4453      	add	r3, sl
 800f2ca:	f1c6 0620 	rsb	r6, r6, #32
 800f2ce:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f2d2:	f000 f9d7 	bl	800f684 <__hi0bits>
 800f2d6:	42b0      	cmp	r0, r6
 800f2d8:	dbe7      	blt.n	800f2aa <__gethex+0x456>
 800f2da:	e7f0      	b.n	800f2be <__gethex+0x46a>
 800f2dc:	080113a8 	.word	0x080113a8

0800f2e0 <L_shift>:
 800f2e0:	f1c2 0208 	rsb	r2, r2, #8
 800f2e4:	0092      	lsls	r2, r2, #2
 800f2e6:	b570      	push	{r4, r5, r6, lr}
 800f2e8:	f1c2 0620 	rsb	r6, r2, #32
 800f2ec:	6843      	ldr	r3, [r0, #4]
 800f2ee:	6804      	ldr	r4, [r0, #0]
 800f2f0:	fa03 f506 	lsl.w	r5, r3, r6
 800f2f4:	432c      	orrs	r4, r5
 800f2f6:	40d3      	lsrs	r3, r2
 800f2f8:	6004      	str	r4, [r0, #0]
 800f2fa:	f840 3f04 	str.w	r3, [r0, #4]!
 800f2fe:	4288      	cmp	r0, r1
 800f300:	d3f4      	bcc.n	800f2ec <L_shift+0xc>
 800f302:	bd70      	pop	{r4, r5, r6, pc}

0800f304 <__match>:
 800f304:	b530      	push	{r4, r5, lr}
 800f306:	6803      	ldr	r3, [r0, #0]
 800f308:	3301      	adds	r3, #1
 800f30a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f30e:	b914      	cbnz	r4, 800f316 <__match+0x12>
 800f310:	6003      	str	r3, [r0, #0]
 800f312:	2001      	movs	r0, #1
 800f314:	bd30      	pop	{r4, r5, pc}
 800f316:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f31a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f31e:	2d19      	cmp	r5, #25
 800f320:	bf98      	it	ls
 800f322:	3220      	addls	r2, #32
 800f324:	42a2      	cmp	r2, r4
 800f326:	d0f0      	beq.n	800f30a <__match+0x6>
 800f328:	2000      	movs	r0, #0
 800f32a:	e7f3      	b.n	800f314 <__match+0x10>

0800f32c <__hexnan>:
 800f32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f330:	680b      	ldr	r3, [r1, #0]
 800f332:	115e      	asrs	r6, r3, #5
 800f334:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f338:	f013 031f 	ands.w	r3, r3, #31
 800f33c:	b087      	sub	sp, #28
 800f33e:	bf18      	it	ne
 800f340:	3604      	addne	r6, #4
 800f342:	2500      	movs	r5, #0
 800f344:	1f37      	subs	r7, r6, #4
 800f346:	4690      	mov	r8, r2
 800f348:	6802      	ldr	r2, [r0, #0]
 800f34a:	9301      	str	r3, [sp, #4]
 800f34c:	4682      	mov	sl, r0
 800f34e:	f846 5c04 	str.w	r5, [r6, #-4]
 800f352:	46b9      	mov	r9, r7
 800f354:	463c      	mov	r4, r7
 800f356:	9502      	str	r5, [sp, #8]
 800f358:	46ab      	mov	fp, r5
 800f35a:	7851      	ldrb	r1, [r2, #1]
 800f35c:	1c53      	adds	r3, r2, #1
 800f35e:	9303      	str	r3, [sp, #12]
 800f360:	b341      	cbz	r1, 800f3b4 <__hexnan+0x88>
 800f362:	4608      	mov	r0, r1
 800f364:	9205      	str	r2, [sp, #20]
 800f366:	9104      	str	r1, [sp, #16]
 800f368:	f7ff fd5e 	bl	800ee28 <__hexdig_fun>
 800f36c:	2800      	cmp	r0, #0
 800f36e:	d14f      	bne.n	800f410 <__hexnan+0xe4>
 800f370:	9904      	ldr	r1, [sp, #16]
 800f372:	9a05      	ldr	r2, [sp, #20]
 800f374:	2920      	cmp	r1, #32
 800f376:	d818      	bhi.n	800f3aa <__hexnan+0x7e>
 800f378:	9b02      	ldr	r3, [sp, #8]
 800f37a:	459b      	cmp	fp, r3
 800f37c:	dd13      	ble.n	800f3a6 <__hexnan+0x7a>
 800f37e:	454c      	cmp	r4, r9
 800f380:	d206      	bcs.n	800f390 <__hexnan+0x64>
 800f382:	2d07      	cmp	r5, #7
 800f384:	dc04      	bgt.n	800f390 <__hexnan+0x64>
 800f386:	462a      	mov	r2, r5
 800f388:	4649      	mov	r1, r9
 800f38a:	4620      	mov	r0, r4
 800f38c:	f7ff ffa8 	bl	800f2e0 <L_shift>
 800f390:	4544      	cmp	r4, r8
 800f392:	d950      	bls.n	800f436 <__hexnan+0x10a>
 800f394:	2300      	movs	r3, #0
 800f396:	f1a4 0904 	sub.w	r9, r4, #4
 800f39a:	f844 3c04 	str.w	r3, [r4, #-4]
 800f39e:	f8cd b008 	str.w	fp, [sp, #8]
 800f3a2:	464c      	mov	r4, r9
 800f3a4:	461d      	mov	r5, r3
 800f3a6:	9a03      	ldr	r2, [sp, #12]
 800f3a8:	e7d7      	b.n	800f35a <__hexnan+0x2e>
 800f3aa:	2929      	cmp	r1, #41	; 0x29
 800f3ac:	d156      	bne.n	800f45c <__hexnan+0x130>
 800f3ae:	3202      	adds	r2, #2
 800f3b0:	f8ca 2000 	str.w	r2, [sl]
 800f3b4:	f1bb 0f00 	cmp.w	fp, #0
 800f3b8:	d050      	beq.n	800f45c <__hexnan+0x130>
 800f3ba:	454c      	cmp	r4, r9
 800f3bc:	d206      	bcs.n	800f3cc <__hexnan+0xa0>
 800f3be:	2d07      	cmp	r5, #7
 800f3c0:	dc04      	bgt.n	800f3cc <__hexnan+0xa0>
 800f3c2:	462a      	mov	r2, r5
 800f3c4:	4649      	mov	r1, r9
 800f3c6:	4620      	mov	r0, r4
 800f3c8:	f7ff ff8a 	bl	800f2e0 <L_shift>
 800f3cc:	4544      	cmp	r4, r8
 800f3ce:	d934      	bls.n	800f43a <__hexnan+0x10e>
 800f3d0:	f1a8 0204 	sub.w	r2, r8, #4
 800f3d4:	4623      	mov	r3, r4
 800f3d6:	f853 1b04 	ldr.w	r1, [r3], #4
 800f3da:	f842 1f04 	str.w	r1, [r2, #4]!
 800f3de:	429f      	cmp	r7, r3
 800f3e0:	d2f9      	bcs.n	800f3d6 <__hexnan+0xaa>
 800f3e2:	1b3b      	subs	r3, r7, r4
 800f3e4:	f023 0303 	bic.w	r3, r3, #3
 800f3e8:	3304      	adds	r3, #4
 800f3ea:	3401      	adds	r4, #1
 800f3ec:	3e03      	subs	r6, #3
 800f3ee:	42b4      	cmp	r4, r6
 800f3f0:	bf88      	it	hi
 800f3f2:	2304      	movhi	r3, #4
 800f3f4:	4443      	add	r3, r8
 800f3f6:	2200      	movs	r2, #0
 800f3f8:	f843 2b04 	str.w	r2, [r3], #4
 800f3fc:	429f      	cmp	r7, r3
 800f3fe:	d2fb      	bcs.n	800f3f8 <__hexnan+0xcc>
 800f400:	683b      	ldr	r3, [r7, #0]
 800f402:	b91b      	cbnz	r3, 800f40c <__hexnan+0xe0>
 800f404:	4547      	cmp	r7, r8
 800f406:	d127      	bne.n	800f458 <__hexnan+0x12c>
 800f408:	2301      	movs	r3, #1
 800f40a:	603b      	str	r3, [r7, #0]
 800f40c:	2005      	movs	r0, #5
 800f40e:	e026      	b.n	800f45e <__hexnan+0x132>
 800f410:	3501      	adds	r5, #1
 800f412:	2d08      	cmp	r5, #8
 800f414:	f10b 0b01 	add.w	fp, fp, #1
 800f418:	dd06      	ble.n	800f428 <__hexnan+0xfc>
 800f41a:	4544      	cmp	r4, r8
 800f41c:	d9c3      	bls.n	800f3a6 <__hexnan+0x7a>
 800f41e:	2300      	movs	r3, #0
 800f420:	f844 3c04 	str.w	r3, [r4, #-4]
 800f424:	2501      	movs	r5, #1
 800f426:	3c04      	subs	r4, #4
 800f428:	6822      	ldr	r2, [r4, #0]
 800f42a:	f000 000f 	and.w	r0, r0, #15
 800f42e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800f432:	6022      	str	r2, [r4, #0]
 800f434:	e7b7      	b.n	800f3a6 <__hexnan+0x7a>
 800f436:	2508      	movs	r5, #8
 800f438:	e7b5      	b.n	800f3a6 <__hexnan+0x7a>
 800f43a:	9b01      	ldr	r3, [sp, #4]
 800f43c:	2b00      	cmp	r3, #0
 800f43e:	d0df      	beq.n	800f400 <__hexnan+0xd4>
 800f440:	f04f 32ff 	mov.w	r2, #4294967295
 800f444:	f1c3 0320 	rsb	r3, r3, #32
 800f448:	fa22 f303 	lsr.w	r3, r2, r3
 800f44c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800f450:	401a      	ands	r2, r3
 800f452:	f846 2c04 	str.w	r2, [r6, #-4]
 800f456:	e7d3      	b.n	800f400 <__hexnan+0xd4>
 800f458:	3f04      	subs	r7, #4
 800f45a:	e7d1      	b.n	800f400 <__hexnan+0xd4>
 800f45c:	2004      	movs	r0, #4
 800f45e:	b007      	add	sp, #28
 800f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f464 <_localeconv_r>:
 800f464:	4800      	ldr	r0, [pc, #0]	; (800f468 <_localeconv_r+0x4>)
 800f466:	4770      	bx	lr
 800f468:	200003b4 	.word	0x200003b4

0800f46c <malloc>:
 800f46c:	4b02      	ldr	r3, [pc, #8]	; (800f478 <malloc+0xc>)
 800f46e:	4601      	mov	r1, r0
 800f470:	6818      	ldr	r0, [r3, #0]
 800f472:	f000 bd59 	b.w	800ff28 <_malloc_r>
 800f476:	bf00      	nop
 800f478:	2000025c 	.word	0x2000025c

0800f47c <__ascii_mbtowc>:
 800f47c:	b082      	sub	sp, #8
 800f47e:	b901      	cbnz	r1, 800f482 <__ascii_mbtowc+0x6>
 800f480:	a901      	add	r1, sp, #4
 800f482:	b142      	cbz	r2, 800f496 <__ascii_mbtowc+0x1a>
 800f484:	b14b      	cbz	r3, 800f49a <__ascii_mbtowc+0x1e>
 800f486:	7813      	ldrb	r3, [r2, #0]
 800f488:	600b      	str	r3, [r1, #0]
 800f48a:	7812      	ldrb	r2, [r2, #0]
 800f48c:	1e10      	subs	r0, r2, #0
 800f48e:	bf18      	it	ne
 800f490:	2001      	movne	r0, #1
 800f492:	b002      	add	sp, #8
 800f494:	4770      	bx	lr
 800f496:	4610      	mov	r0, r2
 800f498:	e7fb      	b.n	800f492 <__ascii_mbtowc+0x16>
 800f49a:	f06f 0001 	mvn.w	r0, #1
 800f49e:	e7f8      	b.n	800f492 <__ascii_mbtowc+0x16>

0800f4a0 <_Balloc>:
 800f4a0:	b570      	push	{r4, r5, r6, lr}
 800f4a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f4a4:	4604      	mov	r4, r0
 800f4a6:	460d      	mov	r5, r1
 800f4a8:	b976      	cbnz	r6, 800f4c8 <_Balloc+0x28>
 800f4aa:	2010      	movs	r0, #16
 800f4ac:	f7ff ffde 	bl	800f46c <malloc>
 800f4b0:	4602      	mov	r2, r0
 800f4b2:	6260      	str	r0, [r4, #36]	; 0x24
 800f4b4:	b920      	cbnz	r0, 800f4c0 <_Balloc+0x20>
 800f4b6:	4b18      	ldr	r3, [pc, #96]	; (800f518 <_Balloc+0x78>)
 800f4b8:	4818      	ldr	r0, [pc, #96]	; (800f51c <_Balloc+0x7c>)
 800f4ba:	2166      	movs	r1, #102	; 0x66
 800f4bc:	f000 ff3e 	bl	801033c <__assert_func>
 800f4c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f4c4:	6006      	str	r6, [r0, #0]
 800f4c6:	60c6      	str	r6, [r0, #12]
 800f4c8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800f4ca:	68f3      	ldr	r3, [r6, #12]
 800f4cc:	b183      	cbz	r3, 800f4f0 <_Balloc+0x50>
 800f4ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800f4d6:	b9b8      	cbnz	r0, 800f508 <_Balloc+0x68>
 800f4d8:	2101      	movs	r1, #1
 800f4da:	fa01 f605 	lsl.w	r6, r1, r5
 800f4de:	1d72      	adds	r2, r6, #5
 800f4e0:	0092      	lsls	r2, r2, #2
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 fc9d 	bl	800fe22 <_calloc_r>
 800f4e8:	b160      	cbz	r0, 800f504 <_Balloc+0x64>
 800f4ea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800f4ee:	e00e      	b.n	800f50e <_Balloc+0x6e>
 800f4f0:	2221      	movs	r2, #33	; 0x21
 800f4f2:	2104      	movs	r1, #4
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 fc94 	bl	800fe22 <_calloc_r>
 800f4fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f4fc:	60f0      	str	r0, [r6, #12]
 800f4fe:	68db      	ldr	r3, [r3, #12]
 800f500:	2b00      	cmp	r3, #0
 800f502:	d1e4      	bne.n	800f4ce <_Balloc+0x2e>
 800f504:	2000      	movs	r0, #0
 800f506:	bd70      	pop	{r4, r5, r6, pc}
 800f508:	6802      	ldr	r2, [r0, #0]
 800f50a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800f50e:	2300      	movs	r3, #0
 800f510:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f514:	e7f7      	b.n	800f506 <_Balloc+0x66>
 800f516:	bf00      	nop
 800f518:	08011336 	.word	0x08011336
 800f51c:	08011434 	.word	0x08011434

0800f520 <_Bfree>:
 800f520:	b570      	push	{r4, r5, r6, lr}
 800f522:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800f524:	4605      	mov	r5, r0
 800f526:	460c      	mov	r4, r1
 800f528:	b976      	cbnz	r6, 800f548 <_Bfree+0x28>
 800f52a:	2010      	movs	r0, #16
 800f52c:	f7ff ff9e 	bl	800f46c <malloc>
 800f530:	4602      	mov	r2, r0
 800f532:	6268      	str	r0, [r5, #36]	; 0x24
 800f534:	b920      	cbnz	r0, 800f540 <_Bfree+0x20>
 800f536:	4b09      	ldr	r3, [pc, #36]	; (800f55c <_Bfree+0x3c>)
 800f538:	4809      	ldr	r0, [pc, #36]	; (800f560 <_Bfree+0x40>)
 800f53a:	218a      	movs	r1, #138	; 0x8a
 800f53c:	f000 fefe 	bl	801033c <__assert_func>
 800f540:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800f544:	6006      	str	r6, [r0, #0]
 800f546:	60c6      	str	r6, [r0, #12]
 800f548:	b13c      	cbz	r4, 800f55a <_Bfree+0x3a>
 800f54a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800f54c:	6862      	ldr	r2, [r4, #4]
 800f54e:	68db      	ldr	r3, [r3, #12]
 800f550:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f554:	6021      	str	r1, [r4, #0]
 800f556:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800f55a:	bd70      	pop	{r4, r5, r6, pc}
 800f55c:	08011336 	.word	0x08011336
 800f560:	08011434 	.word	0x08011434

0800f564 <__multadd>:
 800f564:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f568:	690d      	ldr	r5, [r1, #16]
 800f56a:	4607      	mov	r7, r0
 800f56c:	460c      	mov	r4, r1
 800f56e:	461e      	mov	r6, r3
 800f570:	f101 0c14 	add.w	ip, r1, #20
 800f574:	2000      	movs	r0, #0
 800f576:	f8dc 3000 	ldr.w	r3, [ip]
 800f57a:	b299      	uxth	r1, r3
 800f57c:	fb02 6101 	mla	r1, r2, r1, r6
 800f580:	0c1e      	lsrs	r6, r3, #16
 800f582:	0c0b      	lsrs	r3, r1, #16
 800f584:	fb02 3306 	mla	r3, r2, r6, r3
 800f588:	b289      	uxth	r1, r1
 800f58a:	3001      	adds	r0, #1
 800f58c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800f590:	4285      	cmp	r5, r0
 800f592:	f84c 1b04 	str.w	r1, [ip], #4
 800f596:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800f59a:	dcec      	bgt.n	800f576 <__multadd+0x12>
 800f59c:	b30e      	cbz	r6, 800f5e2 <__multadd+0x7e>
 800f59e:	68a3      	ldr	r3, [r4, #8]
 800f5a0:	42ab      	cmp	r3, r5
 800f5a2:	dc19      	bgt.n	800f5d8 <__multadd+0x74>
 800f5a4:	6861      	ldr	r1, [r4, #4]
 800f5a6:	4638      	mov	r0, r7
 800f5a8:	3101      	adds	r1, #1
 800f5aa:	f7ff ff79 	bl	800f4a0 <_Balloc>
 800f5ae:	4680      	mov	r8, r0
 800f5b0:	b928      	cbnz	r0, 800f5be <__multadd+0x5a>
 800f5b2:	4602      	mov	r2, r0
 800f5b4:	4b0c      	ldr	r3, [pc, #48]	; (800f5e8 <__multadd+0x84>)
 800f5b6:	480d      	ldr	r0, [pc, #52]	; (800f5ec <__multadd+0x88>)
 800f5b8:	21b5      	movs	r1, #181	; 0xb5
 800f5ba:	f000 febf 	bl	801033c <__assert_func>
 800f5be:	6922      	ldr	r2, [r4, #16]
 800f5c0:	3202      	adds	r2, #2
 800f5c2:	f104 010c 	add.w	r1, r4, #12
 800f5c6:	0092      	lsls	r2, r2, #2
 800f5c8:	300c      	adds	r0, #12
 800f5ca:	f7fc fffd 	bl	800c5c8 <memcpy>
 800f5ce:	4621      	mov	r1, r4
 800f5d0:	4638      	mov	r0, r7
 800f5d2:	f7ff ffa5 	bl	800f520 <_Bfree>
 800f5d6:	4644      	mov	r4, r8
 800f5d8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f5dc:	3501      	adds	r5, #1
 800f5de:	615e      	str	r6, [r3, #20]
 800f5e0:	6125      	str	r5, [r4, #16]
 800f5e2:	4620      	mov	r0, r4
 800f5e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f5e8:	080113a8 	.word	0x080113a8
 800f5ec:	08011434 	.word	0x08011434

0800f5f0 <__s2b>:
 800f5f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5f4:	460c      	mov	r4, r1
 800f5f6:	4615      	mov	r5, r2
 800f5f8:	461f      	mov	r7, r3
 800f5fa:	2209      	movs	r2, #9
 800f5fc:	3308      	adds	r3, #8
 800f5fe:	4606      	mov	r6, r0
 800f600:	fb93 f3f2 	sdiv	r3, r3, r2
 800f604:	2100      	movs	r1, #0
 800f606:	2201      	movs	r2, #1
 800f608:	429a      	cmp	r2, r3
 800f60a:	db09      	blt.n	800f620 <__s2b+0x30>
 800f60c:	4630      	mov	r0, r6
 800f60e:	f7ff ff47 	bl	800f4a0 <_Balloc>
 800f612:	b940      	cbnz	r0, 800f626 <__s2b+0x36>
 800f614:	4602      	mov	r2, r0
 800f616:	4b19      	ldr	r3, [pc, #100]	; (800f67c <__s2b+0x8c>)
 800f618:	4819      	ldr	r0, [pc, #100]	; (800f680 <__s2b+0x90>)
 800f61a:	21ce      	movs	r1, #206	; 0xce
 800f61c:	f000 fe8e 	bl	801033c <__assert_func>
 800f620:	0052      	lsls	r2, r2, #1
 800f622:	3101      	adds	r1, #1
 800f624:	e7f0      	b.n	800f608 <__s2b+0x18>
 800f626:	9b08      	ldr	r3, [sp, #32]
 800f628:	6143      	str	r3, [r0, #20]
 800f62a:	2d09      	cmp	r5, #9
 800f62c:	f04f 0301 	mov.w	r3, #1
 800f630:	6103      	str	r3, [r0, #16]
 800f632:	dd16      	ble.n	800f662 <__s2b+0x72>
 800f634:	f104 0909 	add.w	r9, r4, #9
 800f638:	46c8      	mov	r8, r9
 800f63a:	442c      	add	r4, r5
 800f63c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800f640:	4601      	mov	r1, r0
 800f642:	3b30      	subs	r3, #48	; 0x30
 800f644:	220a      	movs	r2, #10
 800f646:	4630      	mov	r0, r6
 800f648:	f7ff ff8c 	bl	800f564 <__multadd>
 800f64c:	45a0      	cmp	r8, r4
 800f64e:	d1f5      	bne.n	800f63c <__s2b+0x4c>
 800f650:	f1a5 0408 	sub.w	r4, r5, #8
 800f654:	444c      	add	r4, r9
 800f656:	1b2d      	subs	r5, r5, r4
 800f658:	1963      	adds	r3, r4, r5
 800f65a:	42bb      	cmp	r3, r7
 800f65c:	db04      	blt.n	800f668 <__s2b+0x78>
 800f65e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f662:	340a      	adds	r4, #10
 800f664:	2509      	movs	r5, #9
 800f666:	e7f6      	b.n	800f656 <__s2b+0x66>
 800f668:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f66c:	4601      	mov	r1, r0
 800f66e:	3b30      	subs	r3, #48	; 0x30
 800f670:	220a      	movs	r2, #10
 800f672:	4630      	mov	r0, r6
 800f674:	f7ff ff76 	bl	800f564 <__multadd>
 800f678:	e7ee      	b.n	800f658 <__s2b+0x68>
 800f67a:	bf00      	nop
 800f67c:	080113a8 	.word	0x080113a8
 800f680:	08011434 	.word	0x08011434

0800f684 <__hi0bits>:
 800f684:	0c03      	lsrs	r3, r0, #16
 800f686:	041b      	lsls	r3, r3, #16
 800f688:	b9d3      	cbnz	r3, 800f6c0 <__hi0bits+0x3c>
 800f68a:	0400      	lsls	r0, r0, #16
 800f68c:	2310      	movs	r3, #16
 800f68e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800f692:	bf04      	itt	eq
 800f694:	0200      	lsleq	r0, r0, #8
 800f696:	3308      	addeq	r3, #8
 800f698:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800f69c:	bf04      	itt	eq
 800f69e:	0100      	lsleq	r0, r0, #4
 800f6a0:	3304      	addeq	r3, #4
 800f6a2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800f6a6:	bf04      	itt	eq
 800f6a8:	0080      	lsleq	r0, r0, #2
 800f6aa:	3302      	addeq	r3, #2
 800f6ac:	2800      	cmp	r0, #0
 800f6ae:	db05      	blt.n	800f6bc <__hi0bits+0x38>
 800f6b0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800f6b4:	f103 0301 	add.w	r3, r3, #1
 800f6b8:	bf08      	it	eq
 800f6ba:	2320      	moveq	r3, #32
 800f6bc:	4618      	mov	r0, r3
 800f6be:	4770      	bx	lr
 800f6c0:	2300      	movs	r3, #0
 800f6c2:	e7e4      	b.n	800f68e <__hi0bits+0xa>

0800f6c4 <__lo0bits>:
 800f6c4:	6803      	ldr	r3, [r0, #0]
 800f6c6:	f013 0207 	ands.w	r2, r3, #7
 800f6ca:	4601      	mov	r1, r0
 800f6cc:	d00b      	beq.n	800f6e6 <__lo0bits+0x22>
 800f6ce:	07da      	lsls	r2, r3, #31
 800f6d0:	d423      	bmi.n	800f71a <__lo0bits+0x56>
 800f6d2:	0798      	lsls	r0, r3, #30
 800f6d4:	bf49      	itett	mi
 800f6d6:	085b      	lsrmi	r3, r3, #1
 800f6d8:	089b      	lsrpl	r3, r3, #2
 800f6da:	2001      	movmi	r0, #1
 800f6dc:	600b      	strmi	r3, [r1, #0]
 800f6de:	bf5c      	itt	pl
 800f6e0:	600b      	strpl	r3, [r1, #0]
 800f6e2:	2002      	movpl	r0, #2
 800f6e4:	4770      	bx	lr
 800f6e6:	b298      	uxth	r0, r3
 800f6e8:	b9a8      	cbnz	r0, 800f716 <__lo0bits+0x52>
 800f6ea:	0c1b      	lsrs	r3, r3, #16
 800f6ec:	2010      	movs	r0, #16
 800f6ee:	b2da      	uxtb	r2, r3
 800f6f0:	b90a      	cbnz	r2, 800f6f6 <__lo0bits+0x32>
 800f6f2:	3008      	adds	r0, #8
 800f6f4:	0a1b      	lsrs	r3, r3, #8
 800f6f6:	071a      	lsls	r2, r3, #28
 800f6f8:	bf04      	itt	eq
 800f6fa:	091b      	lsreq	r3, r3, #4
 800f6fc:	3004      	addeq	r0, #4
 800f6fe:	079a      	lsls	r2, r3, #30
 800f700:	bf04      	itt	eq
 800f702:	089b      	lsreq	r3, r3, #2
 800f704:	3002      	addeq	r0, #2
 800f706:	07da      	lsls	r2, r3, #31
 800f708:	d403      	bmi.n	800f712 <__lo0bits+0x4e>
 800f70a:	085b      	lsrs	r3, r3, #1
 800f70c:	f100 0001 	add.w	r0, r0, #1
 800f710:	d005      	beq.n	800f71e <__lo0bits+0x5a>
 800f712:	600b      	str	r3, [r1, #0]
 800f714:	4770      	bx	lr
 800f716:	4610      	mov	r0, r2
 800f718:	e7e9      	b.n	800f6ee <__lo0bits+0x2a>
 800f71a:	2000      	movs	r0, #0
 800f71c:	4770      	bx	lr
 800f71e:	2020      	movs	r0, #32
 800f720:	4770      	bx	lr
	...

0800f724 <__i2b>:
 800f724:	b510      	push	{r4, lr}
 800f726:	460c      	mov	r4, r1
 800f728:	2101      	movs	r1, #1
 800f72a:	f7ff feb9 	bl	800f4a0 <_Balloc>
 800f72e:	4602      	mov	r2, r0
 800f730:	b928      	cbnz	r0, 800f73e <__i2b+0x1a>
 800f732:	4b05      	ldr	r3, [pc, #20]	; (800f748 <__i2b+0x24>)
 800f734:	4805      	ldr	r0, [pc, #20]	; (800f74c <__i2b+0x28>)
 800f736:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800f73a:	f000 fdff 	bl	801033c <__assert_func>
 800f73e:	2301      	movs	r3, #1
 800f740:	6144      	str	r4, [r0, #20]
 800f742:	6103      	str	r3, [r0, #16]
 800f744:	bd10      	pop	{r4, pc}
 800f746:	bf00      	nop
 800f748:	080113a8 	.word	0x080113a8
 800f74c:	08011434 	.word	0x08011434

0800f750 <__multiply>:
 800f750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f754:	4691      	mov	r9, r2
 800f756:	690a      	ldr	r2, [r1, #16]
 800f758:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800f75c:	429a      	cmp	r2, r3
 800f75e:	bfb8      	it	lt
 800f760:	460b      	movlt	r3, r1
 800f762:	460c      	mov	r4, r1
 800f764:	bfbc      	itt	lt
 800f766:	464c      	movlt	r4, r9
 800f768:	4699      	movlt	r9, r3
 800f76a:	6927      	ldr	r7, [r4, #16]
 800f76c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800f770:	68a3      	ldr	r3, [r4, #8]
 800f772:	6861      	ldr	r1, [r4, #4]
 800f774:	eb07 060a 	add.w	r6, r7, sl
 800f778:	42b3      	cmp	r3, r6
 800f77a:	b085      	sub	sp, #20
 800f77c:	bfb8      	it	lt
 800f77e:	3101      	addlt	r1, #1
 800f780:	f7ff fe8e 	bl	800f4a0 <_Balloc>
 800f784:	b930      	cbnz	r0, 800f794 <__multiply+0x44>
 800f786:	4602      	mov	r2, r0
 800f788:	4b44      	ldr	r3, [pc, #272]	; (800f89c <__multiply+0x14c>)
 800f78a:	4845      	ldr	r0, [pc, #276]	; (800f8a0 <__multiply+0x150>)
 800f78c:	f240 115d 	movw	r1, #349	; 0x15d
 800f790:	f000 fdd4 	bl	801033c <__assert_func>
 800f794:	f100 0514 	add.w	r5, r0, #20
 800f798:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800f79c:	462b      	mov	r3, r5
 800f79e:	2200      	movs	r2, #0
 800f7a0:	4543      	cmp	r3, r8
 800f7a2:	d321      	bcc.n	800f7e8 <__multiply+0x98>
 800f7a4:	f104 0314 	add.w	r3, r4, #20
 800f7a8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800f7ac:	f109 0314 	add.w	r3, r9, #20
 800f7b0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800f7b4:	9202      	str	r2, [sp, #8]
 800f7b6:	1b3a      	subs	r2, r7, r4
 800f7b8:	3a15      	subs	r2, #21
 800f7ba:	f022 0203 	bic.w	r2, r2, #3
 800f7be:	3204      	adds	r2, #4
 800f7c0:	f104 0115 	add.w	r1, r4, #21
 800f7c4:	428f      	cmp	r7, r1
 800f7c6:	bf38      	it	cc
 800f7c8:	2204      	movcc	r2, #4
 800f7ca:	9201      	str	r2, [sp, #4]
 800f7cc:	9a02      	ldr	r2, [sp, #8]
 800f7ce:	9303      	str	r3, [sp, #12]
 800f7d0:	429a      	cmp	r2, r3
 800f7d2:	d80c      	bhi.n	800f7ee <__multiply+0x9e>
 800f7d4:	2e00      	cmp	r6, #0
 800f7d6:	dd03      	ble.n	800f7e0 <__multiply+0x90>
 800f7d8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800f7dc:	2b00      	cmp	r3, #0
 800f7de:	d05a      	beq.n	800f896 <__multiply+0x146>
 800f7e0:	6106      	str	r6, [r0, #16]
 800f7e2:	b005      	add	sp, #20
 800f7e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f7e8:	f843 2b04 	str.w	r2, [r3], #4
 800f7ec:	e7d8      	b.n	800f7a0 <__multiply+0x50>
 800f7ee:	f8b3 a000 	ldrh.w	sl, [r3]
 800f7f2:	f1ba 0f00 	cmp.w	sl, #0
 800f7f6:	d024      	beq.n	800f842 <__multiply+0xf2>
 800f7f8:	f104 0e14 	add.w	lr, r4, #20
 800f7fc:	46a9      	mov	r9, r5
 800f7fe:	f04f 0c00 	mov.w	ip, #0
 800f802:	f85e 2b04 	ldr.w	r2, [lr], #4
 800f806:	f8d9 1000 	ldr.w	r1, [r9]
 800f80a:	fa1f fb82 	uxth.w	fp, r2
 800f80e:	b289      	uxth	r1, r1
 800f810:	fb0a 110b 	mla	r1, sl, fp, r1
 800f814:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800f818:	f8d9 2000 	ldr.w	r2, [r9]
 800f81c:	4461      	add	r1, ip
 800f81e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f822:	fb0a c20b 	mla	r2, sl, fp, ip
 800f826:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800f82a:	b289      	uxth	r1, r1
 800f82c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800f830:	4577      	cmp	r7, lr
 800f832:	f849 1b04 	str.w	r1, [r9], #4
 800f836:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800f83a:	d8e2      	bhi.n	800f802 <__multiply+0xb2>
 800f83c:	9a01      	ldr	r2, [sp, #4]
 800f83e:	f845 c002 	str.w	ip, [r5, r2]
 800f842:	9a03      	ldr	r2, [sp, #12]
 800f844:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800f848:	3304      	adds	r3, #4
 800f84a:	f1b9 0f00 	cmp.w	r9, #0
 800f84e:	d020      	beq.n	800f892 <__multiply+0x142>
 800f850:	6829      	ldr	r1, [r5, #0]
 800f852:	f104 0c14 	add.w	ip, r4, #20
 800f856:	46ae      	mov	lr, r5
 800f858:	f04f 0a00 	mov.w	sl, #0
 800f85c:	f8bc b000 	ldrh.w	fp, [ip]
 800f860:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800f864:	fb09 220b 	mla	r2, r9, fp, r2
 800f868:	4492      	add	sl, r2
 800f86a:	b289      	uxth	r1, r1
 800f86c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800f870:	f84e 1b04 	str.w	r1, [lr], #4
 800f874:	f85c 2b04 	ldr.w	r2, [ip], #4
 800f878:	f8be 1000 	ldrh.w	r1, [lr]
 800f87c:	0c12      	lsrs	r2, r2, #16
 800f87e:	fb09 1102 	mla	r1, r9, r2, r1
 800f882:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800f886:	4567      	cmp	r7, ip
 800f888:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800f88c:	d8e6      	bhi.n	800f85c <__multiply+0x10c>
 800f88e:	9a01      	ldr	r2, [sp, #4]
 800f890:	50a9      	str	r1, [r5, r2]
 800f892:	3504      	adds	r5, #4
 800f894:	e79a      	b.n	800f7cc <__multiply+0x7c>
 800f896:	3e01      	subs	r6, #1
 800f898:	e79c      	b.n	800f7d4 <__multiply+0x84>
 800f89a:	bf00      	nop
 800f89c:	080113a8 	.word	0x080113a8
 800f8a0:	08011434 	.word	0x08011434

0800f8a4 <__pow5mult>:
 800f8a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8a8:	4615      	mov	r5, r2
 800f8aa:	f012 0203 	ands.w	r2, r2, #3
 800f8ae:	4606      	mov	r6, r0
 800f8b0:	460f      	mov	r7, r1
 800f8b2:	d007      	beq.n	800f8c4 <__pow5mult+0x20>
 800f8b4:	4c25      	ldr	r4, [pc, #148]	; (800f94c <__pow5mult+0xa8>)
 800f8b6:	3a01      	subs	r2, #1
 800f8b8:	2300      	movs	r3, #0
 800f8ba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f8be:	f7ff fe51 	bl	800f564 <__multadd>
 800f8c2:	4607      	mov	r7, r0
 800f8c4:	10ad      	asrs	r5, r5, #2
 800f8c6:	d03d      	beq.n	800f944 <__pow5mult+0xa0>
 800f8c8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f8ca:	b97c      	cbnz	r4, 800f8ec <__pow5mult+0x48>
 800f8cc:	2010      	movs	r0, #16
 800f8ce:	f7ff fdcd 	bl	800f46c <malloc>
 800f8d2:	4602      	mov	r2, r0
 800f8d4:	6270      	str	r0, [r6, #36]	; 0x24
 800f8d6:	b928      	cbnz	r0, 800f8e4 <__pow5mult+0x40>
 800f8d8:	4b1d      	ldr	r3, [pc, #116]	; (800f950 <__pow5mult+0xac>)
 800f8da:	481e      	ldr	r0, [pc, #120]	; (800f954 <__pow5mult+0xb0>)
 800f8dc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800f8e0:	f000 fd2c 	bl	801033c <__assert_func>
 800f8e4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f8e8:	6004      	str	r4, [r0, #0]
 800f8ea:	60c4      	str	r4, [r0, #12]
 800f8ec:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f8f0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f8f4:	b94c      	cbnz	r4, 800f90a <__pow5mult+0x66>
 800f8f6:	f240 2171 	movw	r1, #625	; 0x271
 800f8fa:	4630      	mov	r0, r6
 800f8fc:	f7ff ff12 	bl	800f724 <__i2b>
 800f900:	2300      	movs	r3, #0
 800f902:	f8c8 0008 	str.w	r0, [r8, #8]
 800f906:	4604      	mov	r4, r0
 800f908:	6003      	str	r3, [r0, #0]
 800f90a:	f04f 0900 	mov.w	r9, #0
 800f90e:	07eb      	lsls	r3, r5, #31
 800f910:	d50a      	bpl.n	800f928 <__pow5mult+0x84>
 800f912:	4639      	mov	r1, r7
 800f914:	4622      	mov	r2, r4
 800f916:	4630      	mov	r0, r6
 800f918:	f7ff ff1a 	bl	800f750 <__multiply>
 800f91c:	4639      	mov	r1, r7
 800f91e:	4680      	mov	r8, r0
 800f920:	4630      	mov	r0, r6
 800f922:	f7ff fdfd 	bl	800f520 <_Bfree>
 800f926:	4647      	mov	r7, r8
 800f928:	106d      	asrs	r5, r5, #1
 800f92a:	d00b      	beq.n	800f944 <__pow5mult+0xa0>
 800f92c:	6820      	ldr	r0, [r4, #0]
 800f92e:	b938      	cbnz	r0, 800f940 <__pow5mult+0x9c>
 800f930:	4622      	mov	r2, r4
 800f932:	4621      	mov	r1, r4
 800f934:	4630      	mov	r0, r6
 800f936:	f7ff ff0b 	bl	800f750 <__multiply>
 800f93a:	6020      	str	r0, [r4, #0]
 800f93c:	f8c0 9000 	str.w	r9, [r0]
 800f940:	4604      	mov	r4, r0
 800f942:	e7e4      	b.n	800f90e <__pow5mult+0x6a>
 800f944:	4638      	mov	r0, r7
 800f946:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f94a:	bf00      	nop
 800f94c:	08011580 	.word	0x08011580
 800f950:	08011336 	.word	0x08011336
 800f954:	08011434 	.word	0x08011434

0800f958 <__lshift>:
 800f958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f95c:	460c      	mov	r4, r1
 800f95e:	6849      	ldr	r1, [r1, #4]
 800f960:	6923      	ldr	r3, [r4, #16]
 800f962:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800f966:	68a3      	ldr	r3, [r4, #8]
 800f968:	4607      	mov	r7, r0
 800f96a:	4691      	mov	r9, r2
 800f96c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800f970:	f108 0601 	add.w	r6, r8, #1
 800f974:	42b3      	cmp	r3, r6
 800f976:	db0b      	blt.n	800f990 <__lshift+0x38>
 800f978:	4638      	mov	r0, r7
 800f97a:	f7ff fd91 	bl	800f4a0 <_Balloc>
 800f97e:	4605      	mov	r5, r0
 800f980:	b948      	cbnz	r0, 800f996 <__lshift+0x3e>
 800f982:	4602      	mov	r2, r0
 800f984:	4b2a      	ldr	r3, [pc, #168]	; (800fa30 <__lshift+0xd8>)
 800f986:	482b      	ldr	r0, [pc, #172]	; (800fa34 <__lshift+0xdc>)
 800f988:	f240 11d9 	movw	r1, #473	; 0x1d9
 800f98c:	f000 fcd6 	bl	801033c <__assert_func>
 800f990:	3101      	adds	r1, #1
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	e7ee      	b.n	800f974 <__lshift+0x1c>
 800f996:	2300      	movs	r3, #0
 800f998:	f100 0114 	add.w	r1, r0, #20
 800f99c:	f100 0210 	add.w	r2, r0, #16
 800f9a0:	4618      	mov	r0, r3
 800f9a2:	4553      	cmp	r3, sl
 800f9a4:	db37      	blt.n	800fa16 <__lshift+0xbe>
 800f9a6:	6920      	ldr	r0, [r4, #16]
 800f9a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800f9ac:	f104 0314 	add.w	r3, r4, #20
 800f9b0:	f019 091f 	ands.w	r9, r9, #31
 800f9b4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800f9b8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800f9bc:	d02f      	beq.n	800fa1e <__lshift+0xc6>
 800f9be:	f1c9 0e20 	rsb	lr, r9, #32
 800f9c2:	468a      	mov	sl, r1
 800f9c4:	f04f 0c00 	mov.w	ip, #0
 800f9c8:	681a      	ldr	r2, [r3, #0]
 800f9ca:	fa02 f209 	lsl.w	r2, r2, r9
 800f9ce:	ea42 020c 	orr.w	r2, r2, ip
 800f9d2:	f84a 2b04 	str.w	r2, [sl], #4
 800f9d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9da:	4298      	cmp	r0, r3
 800f9dc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800f9e0:	d8f2      	bhi.n	800f9c8 <__lshift+0x70>
 800f9e2:	1b03      	subs	r3, r0, r4
 800f9e4:	3b15      	subs	r3, #21
 800f9e6:	f023 0303 	bic.w	r3, r3, #3
 800f9ea:	3304      	adds	r3, #4
 800f9ec:	f104 0215 	add.w	r2, r4, #21
 800f9f0:	4290      	cmp	r0, r2
 800f9f2:	bf38      	it	cc
 800f9f4:	2304      	movcc	r3, #4
 800f9f6:	f841 c003 	str.w	ip, [r1, r3]
 800f9fa:	f1bc 0f00 	cmp.w	ip, #0
 800f9fe:	d001      	beq.n	800fa04 <__lshift+0xac>
 800fa00:	f108 0602 	add.w	r6, r8, #2
 800fa04:	3e01      	subs	r6, #1
 800fa06:	4638      	mov	r0, r7
 800fa08:	612e      	str	r6, [r5, #16]
 800fa0a:	4621      	mov	r1, r4
 800fa0c:	f7ff fd88 	bl	800f520 <_Bfree>
 800fa10:	4628      	mov	r0, r5
 800fa12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fa16:	f842 0f04 	str.w	r0, [r2, #4]!
 800fa1a:	3301      	adds	r3, #1
 800fa1c:	e7c1      	b.n	800f9a2 <__lshift+0x4a>
 800fa1e:	3904      	subs	r1, #4
 800fa20:	f853 2b04 	ldr.w	r2, [r3], #4
 800fa24:	f841 2f04 	str.w	r2, [r1, #4]!
 800fa28:	4298      	cmp	r0, r3
 800fa2a:	d8f9      	bhi.n	800fa20 <__lshift+0xc8>
 800fa2c:	e7ea      	b.n	800fa04 <__lshift+0xac>
 800fa2e:	bf00      	nop
 800fa30:	080113a8 	.word	0x080113a8
 800fa34:	08011434 	.word	0x08011434

0800fa38 <__mcmp>:
 800fa38:	b530      	push	{r4, r5, lr}
 800fa3a:	6902      	ldr	r2, [r0, #16]
 800fa3c:	690c      	ldr	r4, [r1, #16]
 800fa3e:	1b12      	subs	r2, r2, r4
 800fa40:	d10e      	bne.n	800fa60 <__mcmp+0x28>
 800fa42:	f100 0314 	add.w	r3, r0, #20
 800fa46:	3114      	adds	r1, #20
 800fa48:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800fa4c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800fa50:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800fa54:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800fa58:	42a5      	cmp	r5, r4
 800fa5a:	d003      	beq.n	800fa64 <__mcmp+0x2c>
 800fa5c:	d305      	bcc.n	800fa6a <__mcmp+0x32>
 800fa5e:	2201      	movs	r2, #1
 800fa60:	4610      	mov	r0, r2
 800fa62:	bd30      	pop	{r4, r5, pc}
 800fa64:	4283      	cmp	r3, r0
 800fa66:	d3f3      	bcc.n	800fa50 <__mcmp+0x18>
 800fa68:	e7fa      	b.n	800fa60 <__mcmp+0x28>
 800fa6a:	f04f 32ff 	mov.w	r2, #4294967295
 800fa6e:	e7f7      	b.n	800fa60 <__mcmp+0x28>

0800fa70 <__mdiff>:
 800fa70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa74:	460c      	mov	r4, r1
 800fa76:	4606      	mov	r6, r0
 800fa78:	4611      	mov	r1, r2
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	4690      	mov	r8, r2
 800fa7e:	f7ff ffdb 	bl	800fa38 <__mcmp>
 800fa82:	1e05      	subs	r5, r0, #0
 800fa84:	d110      	bne.n	800faa8 <__mdiff+0x38>
 800fa86:	4629      	mov	r1, r5
 800fa88:	4630      	mov	r0, r6
 800fa8a:	f7ff fd09 	bl	800f4a0 <_Balloc>
 800fa8e:	b930      	cbnz	r0, 800fa9e <__mdiff+0x2e>
 800fa90:	4b3a      	ldr	r3, [pc, #232]	; (800fb7c <__mdiff+0x10c>)
 800fa92:	4602      	mov	r2, r0
 800fa94:	f240 2132 	movw	r1, #562	; 0x232
 800fa98:	4839      	ldr	r0, [pc, #228]	; (800fb80 <__mdiff+0x110>)
 800fa9a:	f000 fc4f 	bl	801033c <__assert_func>
 800fa9e:	2301      	movs	r3, #1
 800faa0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800faa4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800faa8:	bfa4      	itt	ge
 800faaa:	4643      	movge	r3, r8
 800faac:	46a0      	movge	r8, r4
 800faae:	4630      	mov	r0, r6
 800fab0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800fab4:	bfa6      	itte	ge
 800fab6:	461c      	movge	r4, r3
 800fab8:	2500      	movge	r5, #0
 800faba:	2501      	movlt	r5, #1
 800fabc:	f7ff fcf0 	bl	800f4a0 <_Balloc>
 800fac0:	b920      	cbnz	r0, 800facc <__mdiff+0x5c>
 800fac2:	4b2e      	ldr	r3, [pc, #184]	; (800fb7c <__mdiff+0x10c>)
 800fac4:	4602      	mov	r2, r0
 800fac6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800faca:	e7e5      	b.n	800fa98 <__mdiff+0x28>
 800facc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800fad0:	6926      	ldr	r6, [r4, #16]
 800fad2:	60c5      	str	r5, [r0, #12]
 800fad4:	f104 0914 	add.w	r9, r4, #20
 800fad8:	f108 0514 	add.w	r5, r8, #20
 800fadc:	f100 0e14 	add.w	lr, r0, #20
 800fae0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800fae4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800fae8:	f108 0210 	add.w	r2, r8, #16
 800faec:	46f2      	mov	sl, lr
 800faee:	2100      	movs	r1, #0
 800faf0:	f859 3b04 	ldr.w	r3, [r9], #4
 800faf4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800faf8:	fa1f f883 	uxth.w	r8, r3
 800fafc:	fa11 f18b 	uxtah	r1, r1, fp
 800fb00:	0c1b      	lsrs	r3, r3, #16
 800fb02:	eba1 0808 	sub.w	r8, r1, r8
 800fb06:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800fb0a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800fb0e:	fa1f f888 	uxth.w	r8, r8
 800fb12:	1419      	asrs	r1, r3, #16
 800fb14:	454e      	cmp	r6, r9
 800fb16:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800fb1a:	f84a 3b04 	str.w	r3, [sl], #4
 800fb1e:	d8e7      	bhi.n	800faf0 <__mdiff+0x80>
 800fb20:	1b33      	subs	r3, r6, r4
 800fb22:	3b15      	subs	r3, #21
 800fb24:	f023 0303 	bic.w	r3, r3, #3
 800fb28:	3304      	adds	r3, #4
 800fb2a:	3415      	adds	r4, #21
 800fb2c:	42a6      	cmp	r6, r4
 800fb2e:	bf38      	it	cc
 800fb30:	2304      	movcc	r3, #4
 800fb32:	441d      	add	r5, r3
 800fb34:	4473      	add	r3, lr
 800fb36:	469e      	mov	lr, r3
 800fb38:	462e      	mov	r6, r5
 800fb3a:	4566      	cmp	r6, ip
 800fb3c:	d30e      	bcc.n	800fb5c <__mdiff+0xec>
 800fb3e:	f10c 0203 	add.w	r2, ip, #3
 800fb42:	1b52      	subs	r2, r2, r5
 800fb44:	f022 0203 	bic.w	r2, r2, #3
 800fb48:	3d03      	subs	r5, #3
 800fb4a:	45ac      	cmp	ip, r5
 800fb4c:	bf38      	it	cc
 800fb4e:	2200      	movcc	r2, #0
 800fb50:	441a      	add	r2, r3
 800fb52:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800fb56:	b17b      	cbz	r3, 800fb78 <__mdiff+0x108>
 800fb58:	6107      	str	r7, [r0, #16]
 800fb5a:	e7a3      	b.n	800faa4 <__mdiff+0x34>
 800fb5c:	f856 8b04 	ldr.w	r8, [r6], #4
 800fb60:	fa11 f288 	uxtah	r2, r1, r8
 800fb64:	1414      	asrs	r4, r2, #16
 800fb66:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800fb6a:	b292      	uxth	r2, r2
 800fb6c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800fb70:	f84e 2b04 	str.w	r2, [lr], #4
 800fb74:	1421      	asrs	r1, r4, #16
 800fb76:	e7e0      	b.n	800fb3a <__mdiff+0xca>
 800fb78:	3f01      	subs	r7, #1
 800fb7a:	e7ea      	b.n	800fb52 <__mdiff+0xe2>
 800fb7c:	080113a8 	.word	0x080113a8
 800fb80:	08011434 	.word	0x08011434

0800fb84 <__ulp>:
 800fb84:	b082      	sub	sp, #8
 800fb86:	ed8d 0b00 	vstr	d0, [sp]
 800fb8a:	9b01      	ldr	r3, [sp, #4]
 800fb8c:	4912      	ldr	r1, [pc, #72]	; (800fbd8 <__ulp+0x54>)
 800fb8e:	4019      	ands	r1, r3
 800fb90:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800fb94:	2900      	cmp	r1, #0
 800fb96:	dd05      	ble.n	800fba4 <__ulp+0x20>
 800fb98:	2200      	movs	r2, #0
 800fb9a:	460b      	mov	r3, r1
 800fb9c:	ec43 2b10 	vmov	d0, r2, r3
 800fba0:	b002      	add	sp, #8
 800fba2:	4770      	bx	lr
 800fba4:	4249      	negs	r1, r1
 800fba6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800fbaa:	ea4f 5021 	mov.w	r0, r1, asr #20
 800fbae:	f04f 0200 	mov.w	r2, #0
 800fbb2:	f04f 0300 	mov.w	r3, #0
 800fbb6:	da04      	bge.n	800fbc2 <__ulp+0x3e>
 800fbb8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800fbbc:	fa41 f300 	asr.w	r3, r1, r0
 800fbc0:	e7ec      	b.n	800fb9c <__ulp+0x18>
 800fbc2:	f1a0 0114 	sub.w	r1, r0, #20
 800fbc6:	291e      	cmp	r1, #30
 800fbc8:	bfda      	itte	le
 800fbca:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800fbce:	fa20 f101 	lsrle.w	r1, r0, r1
 800fbd2:	2101      	movgt	r1, #1
 800fbd4:	460a      	mov	r2, r1
 800fbd6:	e7e1      	b.n	800fb9c <__ulp+0x18>
 800fbd8:	7ff00000 	.word	0x7ff00000

0800fbdc <__b2d>:
 800fbdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbde:	6905      	ldr	r5, [r0, #16]
 800fbe0:	f100 0714 	add.w	r7, r0, #20
 800fbe4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fbe8:	1f2e      	subs	r6, r5, #4
 800fbea:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fbee:	4620      	mov	r0, r4
 800fbf0:	f7ff fd48 	bl	800f684 <__hi0bits>
 800fbf4:	f1c0 0320 	rsb	r3, r0, #32
 800fbf8:	280a      	cmp	r0, #10
 800fbfa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800fc78 <__b2d+0x9c>
 800fbfe:	600b      	str	r3, [r1, #0]
 800fc00:	dc14      	bgt.n	800fc2c <__b2d+0x50>
 800fc02:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc06:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc0a:	42b7      	cmp	r7, r6
 800fc0c:	ea41 030c 	orr.w	r3, r1, ip
 800fc10:	bf34      	ite	cc
 800fc12:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc16:	2100      	movcs	r1, #0
 800fc18:	3015      	adds	r0, #21
 800fc1a:	fa04 f000 	lsl.w	r0, r4, r0
 800fc1e:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc22:	ea40 0201 	orr.w	r2, r0, r1
 800fc26:	ec43 2b10 	vmov	d0, r2, r3
 800fc2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc2c:	42b7      	cmp	r7, r6
 800fc2e:	bf3a      	itte	cc
 800fc30:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc34:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc38:	2100      	movcs	r1, #0
 800fc3a:	380b      	subs	r0, #11
 800fc3c:	d017      	beq.n	800fc6e <__b2d+0x92>
 800fc3e:	f1c0 0c20 	rsb	ip, r0, #32
 800fc42:	fa04 f500 	lsl.w	r5, r4, r0
 800fc46:	42be      	cmp	r6, r7
 800fc48:	fa21 f40c 	lsr.w	r4, r1, ip
 800fc4c:	ea45 0504 	orr.w	r5, r5, r4
 800fc50:	bf8c      	ite	hi
 800fc52:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc56:	2400      	movls	r4, #0
 800fc58:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800fc5c:	fa01 f000 	lsl.w	r0, r1, r0
 800fc60:	fa24 f40c 	lsr.w	r4, r4, ip
 800fc64:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800fc68:	ea40 0204 	orr.w	r2, r0, r4
 800fc6c:	e7db      	b.n	800fc26 <__b2d+0x4a>
 800fc6e:	ea44 030c 	orr.w	r3, r4, ip
 800fc72:	460a      	mov	r2, r1
 800fc74:	e7d7      	b.n	800fc26 <__b2d+0x4a>
 800fc76:	bf00      	nop
 800fc78:	3ff00000 	.word	0x3ff00000

0800fc7c <__d2b>:
 800fc7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fc80:	4689      	mov	r9, r1
 800fc82:	2101      	movs	r1, #1
 800fc84:	ec57 6b10 	vmov	r6, r7, d0
 800fc88:	4690      	mov	r8, r2
 800fc8a:	f7ff fc09 	bl	800f4a0 <_Balloc>
 800fc8e:	4604      	mov	r4, r0
 800fc90:	b930      	cbnz	r0, 800fca0 <__d2b+0x24>
 800fc92:	4602      	mov	r2, r0
 800fc94:	4b25      	ldr	r3, [pc, #148]	; (800fd2c <__d2b+0xb0>)
 800fc96:	4826      	ldr	r0, [pc, #152]	; (800fd30 <__d2b+0xb4>)
 800fc98:	f240 310a 	movw	r1, #778	; 0x30a
 800fc9c:	f000 fb4e 	bl	801033c <__assert_func>
 800fca0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800fca4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800fca8:	bb35      	cbnz	r5, 800fcf8 <__d2b+0x7c>
 800fcaa:	2e00      	cmp	r6, #0
 800fcac:	9301      	str	r3, [sp, #4]
 800fcae:	d028      	beq.n	800fd02 <__d2b+0x86>
 800fcb0:	4668      	mov	r0, sp
 800fcb2:	9600      	str	r6, [sp, #0]
 800fcb4:	f7ff fd06 	bl	800f6c4 <__lo0bits>
 800fcb8:	9900      	ldr	r1, [sp, #0]
 800fcba:	b300      	cbz	r0, 800fcfe <__d2b+0x82>
 800fcbc:	9a01      	ldr	r2, [sp, #4]
 800fcbe:	f1c0 0320 	rsb	r3, r0, #32
 800fcc2:	fa02 f303 	lsl.w	r3, r2, r3
 800fcc6:	430b      	orrs	r3, r1
 800fcc8:	40c2      	lsrs	r2, r0
 800fcca:	6163      	str	r3, [r4, #20]
 800fccc:	9201      	str	r2, [sp, #4]
 800fcce:	9b01      	ldr	r3, [sp, #4]
 800fcd0:	61a3      	str	r3, [r4, #24]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	bf14      	ite	ne
 800fcd6:	2202      	movne	r2, #2
 800fcd8:	2201      	moveq	r2, #1
 800fcda:	6122      	str	r2, [r4, #16]
 800fcdc:	b1d5      	cbz	r5, 800fd14 <__d2b+0x98>
 800fcde:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800fce2:	4405      	add	r5, r0
 800fce4:	f8c9 5000 	str.w	r5, [r9]
 800fce8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fcec:	f8c8 0000 	str.w	r0, [r8]
 800fcf0:	4620      	mov	r0, r4
 800fcf2:	b003      	add	sp, #12
 800fcf4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fcf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fcfc:	e7d5      	b.n	800fcaa <__d2b+0x2e>
 800fcfe:	6161      	str	r1, [r4, #20]
 800fd00:	e7e5      	b.n	800fcce <__d2b+0x52>
 800fd02:	a801      	add	r0, sp, #4
 800fd04:	f7ff fcde 	bl	800f6c4 <__lo0bits>
 800fd08:	9b01      	ldr	r3, [sp, #4]
 800fd0a:	6163      	str	r3, [r4, #20]
 800fd0c:	2201      	movs	r2, #1
 800fd0e:	6122      	str	r2, [r4, #16]
 800fd10:	3020      	adds	r0, #32
 800fd12:	e7e3      	b.n	800fcdc <__d2b+0x60>
 800fd14:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800fd18:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd1c:	f8c9 0000 	str.w	r0, [r9]
 800fd20:	6918      	ldr	r0, [r3, #16]
 800fd22:	f7ff fcaf 	bl	800f684 <__hi0bits>
 800fd26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800fd2a:	e7df      	b.n	800fcec <__d2b+0x70>
 800fd2c:	080113a8 	.word	0x080113a8
 800fd30:	08011434 	.word	0x08011434

0800fd34 <__ratio>:
 800fd34:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd38:	4688      	mov	r8, r1
 800fd3a:	4669      	mov	r1, sp
 800fd3c:	4681      	mov	r9, r0
 800fd3e:	f7ff ff4d 	bl	800fbdc <__b2d>
 800fd42:	a901      	add	r1, sp, #4
 800fd44:	4640      	mov	r0, r8
 800fd46:	ec55 4b10 	vmov	r4, r5, d0
 800fd4a:	f7ff ff47 	bl	800fbdc <__b2d>
 800fd4e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd52:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd56:	eba3 0c02 	sub.w	ip, r3, r2
 800fd5a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd5e:	1a9b      	subs	r3, r3, r2
 800fd60:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd64:	ec51 0b10 	vmov	r0, r1, d0
 800fd68:	2b00      	cmp	r3, #0
 800fd6a:	bfd6      	itet	le
 800fd6c:	460a      	movle	r2, r1
 800fd6e:	462a      	movgt	r2, r5
 800fd70:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd74:	468b      	mov	fp, r1
 800fd76:	462f      	mov	r7, r5
 800fd78:	bfd4      	ite	le
 800fd7a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800fd7e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800fd82:	4620      	mov	r0, r4
 800fd84:	ee10 2a10 	vmov	r2, s0
 800fd88:	465b      	mov	r3, fp
 800fd8a:	4639      	mov	r1, r7
 800fd8c:	f7f0 fd66 	bl	800085c <__aeabi_ddiv>
 800fd90:	ec41 0b10 	vmov	d0, r0, r1
 800fd94:	b003      	add	sp, #12
 800fd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fd9a <__copybits>:
 800fd9a:	3901      	subs	r1, #1
 800fd9c:	b570      	push	{r4, r5, r6, lr}
 800fd9e:	1149      	asrs	r1, r1, #5
 800fda0:	6914      	ldr	r4, [r2, #16]
 800fda2:	3101      	adds	r1, #1
 800fda4:	f102 0314 	add.w	r3, r2, #20
 800fda8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdac:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdb0:	1f05      	subs	r5, r0, #4
 800fdb2:	42a3      	cmp	r3, r4
 800fdb4:	d30c      	bcc.n	800fdd0 <__copybits+0x36>
 800fdb6:	1aa3      	subs	r3, r4, r2
 800fdb8:	3b11      	subs	r3, #17
 800fdba:	f023 0303 	bic.w	r3, r3, #3
 800fdbe:	3211      	adds	r2, #17
 800fdc0:	42a2      	cmp	r2, r4
 800fdc2:	bf88      	it	hi
 800fdc4:	2300      	movhi	r3, #0
 800fdc6:	4418      	add	r0, r3
 800fdc8:	2300      	movs	r3, #0
 800fdca:	4288      	cmp	r0, r1
 800fdcc:	d305      	bcc.n	800fdda <__copybits+0x40>
 800fdce:	bd70      	pop	{r4, r5, r6, pc}
 800fdd0:	f853 6b04 	ldr.w	r6, [r3], #4
 800fdd4:	f845 6f04 	str.w	r6, [r5, #4]!
 800fdd8:	e7eb      	b.n	800fdb2 <__copybits+0x18>
 800fdda:	f840 3b04 	str.w	r3, [r0], #4
 800fdde:	e7f4      	b.n	800fdca <__copybits+0x30>

0800fde0 <__any_on>:
 800fde0:	f100 0214 	add.w	r2, r0, #20
 800fde4:	6900      	ldr	r0, [r0, #16]
 800fde6:	114b      	asrs	r3, r1, #5
 800fde8:	4298      	cmp	r0, r3
 800fdea:	b510      	push	{r4, lr}
 800fdec:	db11      	blt.n	800fe12 <__any_on+0x32>
 800fdee:	dd0a      	ble.n	800fe06 <__any_on+0x26>
 800fdf0:	f011 011f 	ands.w	r1, r1, #31
 800fdf4:	d007      	beq.n	800fe06 <__any_on+0x26>
 800fdf6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fdfa:	fa24 f001 	lsr.w	r0, r4, r1
 800fdfe:	fa00 f101 	lsl.w	r1, r0, r1
 800fe02:	428c      	cmp	r4, r1
 800fe04:	d10b      	bne.n	800fe1e <__any_on+0x3e>
 800fe06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe0a:	4293      	cmp	r3, r2
 800fe0c:	d803      	bhi.n	800fe16 <__any_on+0x36>
 800fe0e:	2000      	movs	r0, #0
 800fe10:	bd10      	pop	{r4, pc}
 800fe12:	4603      	mov	r3, r0
 800fe14:	e7f7      	b.n	800fe06 <__any_on+0x26>
 800fe16:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe1a:	2900      	cmp	r1, #0
 800fe1c:	d0f5      	beq.n	800fe0a <__any_on+0x2a>
 800fe1e:	2001      	movs	r0, #1
 800fe20:	e7f6      	b.n	800fe10 <__any_on+0x30>

0800fe22 <_calloc_r>:
 800fe22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe24:	fba1 2402 	umull	r2, r4, r1, r2
 800fe28:	b94c      	cbnz	r4, 800fe3e <_calloc_r+0x1c>
 800fe2a:	4611      	mov	r1, r2
 800fe2c:	9201      	str	r2, [sp, #4]
 800fe2e:	f000 f87b 	bl	800ff28 <_malloc_r>
 800fe32:	9a01      	ldr	r2, [sp, #4]
 800fe34:	4605      	mov	r5, r0
 800fe36:	b930      	cbnz	r0, 800fe46 <_calloc_r+0x24>
 800fe38:	4628      	mov	r0, r5
 800fe3a:	b003      	add	sp, #12
 800fe3c:	bd30      	pop	{r4, r5, pc}
 800fe3e:	220c      	movs	r2, #12
 800fe40:	6002      	str	r2, [r0, #0]
 800fe42:	2500      	movs	r5, #0
 800fe44:	e7f8      	b.n	800fe38 <_calloc_r+0x16>
 800fe46:	4621      	mov	r1, r4
 800fe48:	f7fc fbcc 	bl	800c5e4 <memset>
 800fe4c:	e7f4      	b.n	800fe38 <_calloc_r+0x16>
	...

0800fe50 <_free_r>:
 800fe50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fe52:	2900      	cmp	r1, #0
 800fe54:	d044      	beq.n	800fee0 <_free_r+0x90>
 800fe56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fe5a:	9001      	str	r0, [sp, #4]
 800fe5c:	2b00      	cmp	r3, #0
 800fe5e:	f1a1 0404 	sub.w	r4, r1, #4
 800fe62:	bfb8      	it	lt
 800fe64:	18e4      	addlt	r4, r4, r3
 800fe66:	f000 fab3 	bl	80103d0 <__malloc_lock>
 800fe6a:	4a1e      	ldr	r2, [pc, #120]	; (800fee4 <_free_r+0x94>)
 800fe6c:	9801      	ldr	r0, [sp, #4]
 800fe6e:	6813      	ldr	r3, [r2, #0]
 800fe70:	b933      	cbnz	r3, 800fe80 <_free_r+0x30>
 800fe72:	6063      	str	r3, [r4, #4]
 800fe74:	6014      	str	r4, [r2, #0]
 800fe76:	b003      	add	sp, #12
 800fe78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800fe7c:	f000 baae 	b.w	80103dc <__malloc_unlock>
 800fe80:	42a3      	cmp	r3, r4
 800fe82:	d908      	bls.n	800fe96 <_free_r+0x46>
 800fe84:	6825      	ldr	r5, [r4, #0]
 800fe86:	1961      	adds	r1, r4, r5
 800fe88:	428b      	cmp	r3, r1
 800fe8a:	bf01      	itttt	eq
 800fe8c:	6819      	ldreq	r1, [r3, #0]
 800fe8e:	685b      	ldreq	r3, [r3, #4]
 800fe90:	1949      	addeq	r1, r1, r5
 800fe92:	6021      	streq	r1, [r4, #0]
 800fe94:	e7ed      	b.n	800fe72 <_free_r+0x22>
 800fe96:	461a      	mov	r2, r3
 800fe98:	685b      	ldr	r3, [r3, #4]
 800fe9a:	b10b      	cbz	r3, 800fea0 <_free_r+0x50>
 800fe9c:	42a3      	cmp	r3, r4
 800fe9e:	d9fa      	bls.n	800fe96 <_free_r+0x46>
 800fea0:	6811      	ldr	r1, [r2, #0]
 800fea2:	1855      	adds	r5, r2, r1
 800fea4:	42a5      	cmp	r5, r4
 800fea6:	d10b      	bne.n	800fec0 <_free_r+0x70>
 800fea8:	6824      	ldr	r4, [r4, #0]
 800feaa:	4421      	add	r1, r4
 800feac:	1854      	adds	r4, r2, r1
 800feae:	42a3      	cmp	r3, r4
 800feb0:	6011      	str	r1, [r2, #0]
 800feb2:	d1e0      	bne.n	800fe76 <_free_r+0x26>
 800feb4:	681c      	ldr	r4, [r3, #0]
 800feb6:	685b      	ldr	r3, [r3, #4]
 800feb8:	6053      	str	r3, [r2, #4]
 800feba:	4421      	add	r1, r4
 800febc:	6011      	str	r1, [r2, #0]
 800febe:	e7da      	b.n	800fe76 <_free_r+0x26>
 800fec0:	d902      	bls.n	800fec8 <_free_r+0x78>
 800fec2:	230c      	movs	r3, #12
 800fec4:	6003      	str	r3, [r0, #0]
 800fec6:	e7d6      	b.n	800fe76 <_free_r+0x26>
 800fec8:	6825      	ldr	r5, [r4, #0]
 800feca:	1961      	adds	r1, r4, r5
 800fecc:	428b      	cmp	r3, r1
 800fece:	bf04      	itt	eq
 800fed0:	6819      	ldreq	r1, [r3, #0]
 800fed2:	685b      	ldreq	r3, [r3, #4]
 800fed4:	6063      	str	r3, [r4, #4]
 800fed6:	bf04      	itt	eq
 800fed8:	1949      	addeq	r1, r1, r5
 800feda:	6021      	streq	r1, [r4, #0]
 800fedc:	6054      	str	r4, [r2, #4]
 800fede:	e7ca      	b.n	800fe76 <_free_r+0x26>
 800fee0:	b003      	add	sp, #12
 800fee2:	bd30      	pop	{r4, r5, pc}
 800fee4:	200010e4 	.word	0x200010e4

0800fee8 <sbrk_aligned>:
 800fee8:	b570      	push	{r4, r5, r6, lr}
 800feea:	4e0e      	ldr	r6, [pc, #56]	; (800ff24 <sbrk_aligned+0x3c>)
 800feec:	460c      	mov	r4, r1
 800feee:	6831      	ldr	r1, [r6, #0]
 800fef0:	4605      	mov	r5, r0
 800fef2:	b911      	cbnz	r1, 800fefa <sbrk_aligned+0x12>
 800fef4:	f000 f9f0 	bl	80102d8 <_sbrk_r>
 800fef8:	6030      	str	r0, [r6, #0]
 800fefa:	4621      	mov	r1, r4
 800fefc:	4628      	mov	r0, r5
 800fefe:	f000 f9eb 	bl	80102d8 <_sbrk_r>
 800ff02:	1c43      	adds	r3, r0, #1
 800ff04:	d00a      	beq.n	800ff1c <sbrk_aligned+0x34>
 800ff06:	1cc4      	adds	r4, r0, #3
 800ff08:	f024 0403 	bic.w	r4, r4, #3
 800ff0c:	42a0      	cmp	r0, r4
 800ff0e:	d007      	beq.n	800ff20 <sbrk_aligned+0x38>
 800ff10:	1a21      	subs	r1, r4, r0
 800ff12:	4628      	mov	r0, r5
 800ff14:	f000 f9e0 	bl	80102d8 <_sbrk_r>
 800ff18:	3001      	adds	r0, #1
 800ff1a:	d101      	bne.n	800ff20 <sbrk_aligned+0x38>
 800ff1c:	f04f 34ff 	mov.w	r4, #4294967295
 800ff20:	4620      	mov	r0, r4
 800ff22:	bd70      	pop	{r4, r5, r6, pc}
 800ff24:	200010e8 	.word	0x200010e8

0800ff28 <_malloc_r>:
 800ff28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff2c:	1ccd      	adds	r5, r1, #3
 800ff2e:	f025 0503 	bic.w	r5, r5, #3
 800ff32:	3508      	adds	r5, #8
 800ff34:	2d0c      	cmp	r5, #12
 800ff36:	bf38      	it	cc
 800ff38:	250c      	movcc	r5, #12
 800ff3a:	2d00      	cmp	r5, #0
 800ff3c:	4607      	mov	r7, r0
 800ff3e:	db01      	blt.n	800ff44 <_malloc_r+0x1c>
 800ff40:	42a9      	cmp	r1, r5
 800ff42:	d905      	bls.n	800ff50 <_malloc_r+0x28>
 800ff44:	230c      	movs	r3, #12
 800ff46:	603b      	str	r3, [r7, #0]
 800ff48:	2600      	movs	r6, #0
 800ff4a:	4630      	mov	r0, r6
 800ff4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ff50:	4e2e      	ldr	r6, [pc, #184]	; (801000c <_malloc_r+0xe4>)
 800ff52:	f000 fa3d 	bl	80103d0 <__malloc_lock>
 800ff56:	6833      	ldr	r3, [r6, #0]
 800ff58:	461c      	mov	r4, r3
 800ff5a:	bb34      	cbnz	r4, 800ffaa <_malloc_r+0x82>
 800ff5c:	4629      	mov	r1, r5
 800ff5e:	4638      	mov	r0, r7
 800ff60:	f7ff ffc2 	bl	800fee8 <sbrk_aligned>
 800ff64:	1c43      	adds	r3, r0, #1
 800ff66:	4604      	mov	r4, r0
 800ff68:	d14d      	bne.n	8010006 <_malloc_r+0xde>
 800ff6a:	6834      	ldr	r4, [r6, #0]
 800ff6c:	4626      	mov	r6, r4
 800ff6e:	2e00      	cmp	r6, #0
 800ff70:	d140      	bne.n	800fff4 <_malloc_r+0xcc>
 800ff72:	6823      	ldr	r3, [r4, #0]
 800ff74:	4631      	mov	r1, r6
 800ff76:	4638      	mov	r0, r7
 800ff78:	eb04 0803 	add.w	r8, r4, r3
 800ff7c:	f000 f9ac 	bl	80102d8 <_sbrk_r>
 800ff80:	4580      	cmp	r8, r0
 800ff82:	d13a      	bne.n	800fffa <_malloc_r+0xd2>
 800ff84:	6821      	ldr	r1, [r4, #0]
 800ff86:	3503      	adds	r5, #3
 800ff88:	1a6d      	subs	r5, r5, r1
 800ff8a:	f025 0503 	bic.w	r5, r5, #3
 800ff8e:	3508      	adds	r5, #8
 800ff90:	2d0c      	cmp	r5, #12
 800ff92:	bf38      	it	cc
 800ff94:	250c      	movcc	r5, #12
 800ff96:	4629      	mov	r1, r5
 800ff98:	4638      	mov	r0, r7
 800ff9a:	f7ff ffa5 	bl	800fee8 <sbrk_aligned>
 800ff9e:	3001      	adds	r0, #1
 800ffa0:	d02b      	beq.n	800fffa <_malloc_r+0xd2>
 800ffa2:	6823      	ldr	r3, [r4, #0]
 800ffa4:	442b      	add	r3, r5
 800ffa6:	6023      	str	r3, [r4, #0]
 800ffa8:	e00e      	b.n	800ffc8 <_malloc_r+0xa0>
 800ffaa:	6822      	ldr	r2, [r4, #0]
 800ffac:	1b52      	subs	r2, r2, r5
 800ffae:	d41e      	bmi.n	800ffee <_malloc_r+0xc6>
 800ffb0:	2a0b      	cmp	r2, #11
 800ffb2:	d916      	bls.n	800ffe2 <_malloc_r+0xba>
 800ffb4:	1961      	adds	r1, r4, r5
 800ffb6:	42a3      	cmp	r3, r4
 800ffb8:	6025      	str	r5, [r4, #0]
 800ffba:	bf18      	it	ne
 800ffbc:	6059      	strne	r1, [r3, #4]
 800ffbe:	6863      	ldr	r3, [r4, #4]
 800ffc0:	bf08      	it	eq
 800ffc2:	6031      	streq	r1, [r6, #0]
 800ffc4:	5162      	str	r2, [r4, r5]
 800ffc6:	604b      	str	r3, [r1, #4]
 800ffc8:	4638      	mov	r0, r7
 800ffca:	f104 060b 	add.w	r6, r4, #11
 800ffce:	f000 fa05 	bl	80103dc <__malloc_unlock>
 800ffd2:	f026 0607 	bic.w	r6, r6, #7
 800ffd6:	1d23      	adds	r3, r4, #4
 800ffd8:	1af2      	subs	r2, r6, r3
 800ffda:	d0b6      	beq.n	800ff4a <_malloc_r+0x22>
 800ffdc:	1b9b      	subs	r3, r3, r6
 800ffde:	50a3      	str	r3, [r4, r2]
 800ffe0:	e7b3      	b.n	800ff4a <_malloc_r+0x22>
 800ffe2:	6862      	ldr	r2, [r4, #4]
 800ffe4:	42a3      	cmp	r3, r4
 800ffe6:	bf0c      	ite	eq
 800ffe8:	6032      	streq	r2, [r6, #0]
 800ffea:	605a      	strne	r2, [r3, #4]
 800ffec:	e7ec      	b.n	800ffc8 <_malloc_r+0xa0>
 800ffee:	4623      	mov	r3, r4
 800fff0:	6864      	ldr	r4, [r4, #4]
 800fff2:	e7b2      	b.n	800ff5a <_malloc_r+0x32>
 800fff4:	4634      	mov	r4, r6
 800fff6:	6876      	ldr	r6, [r6, #4]
 800fff8:	e7b9      	b.n	800ff6e <_malloc_r+0x46>
 800fffa:	230c      	movs	r3, #12
 800fffc:	603b      	str	r3, [r7, #0]
 800fffe:	4638      	mov	r0, r7
 8010000:	f000 f9ec 	bl	80103dc <__malloc_unlock>
 8010004:	e7a1      	b.n	800ff4a <_malloc_r+0x22>
 8010006:	6025      	str	r5, [r4, #0]
 8010008:	e7de      	b.n	800ffc8 <_malloc_r+0xa0>
 801000a:	bf00      	nop
 801000c:	200010e4 	.word	0x200010e4

08010010 <__ssputs_r>:
 8010010:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010014:	688e      	ldr	r6, [r1, #8]
 8010016:	429e      	cmp	r6, r3
 8010018:	4682      	mov	sl, r0
 801001a:	460c      	mov	r4, r1
 801001c:	4690      	mov	r8, r2
 801001e:	461f      	mov	r7, r3
 8010020:	d838      	bhi.n	8010094 <__ssputs_r+0x84>
 8010022:	898a      	ldrh	r2, [r1, #12]
 8010024:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8010028:	d032      	beq.n	8010090 <__ssputs_r+0x80>
 801002a:	6825      	ldr	r5, [r4, #0]
 801002c:	6909      	ldr	r1, [r1, #16]
 801002e:	eba5 0901 	sub.w	r9, r5, r1
 8010032:	6965      	ldr	r5, [r4, #20]
 8010034:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8010038:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801003c:	3301      	adds	r3, #1
 801003e:	444b      	add	r3, r9
 8010040:	106d      	asrs	r5, r5, #1
 8010042:	429d      	cmp	r5, r3
 8010044:	bf38      	it	cc
 8010046:	461d      	movcc	r5, r3
 8010048:	0553      	lsls	r3, r2, #21
 801004a:	d531      	bpl.n	80100b0 <__ssputs_r+0xa0>
 801004c:	4629      	mov	r1, r5
 801004e:	f7ff ff6b 	bl	800ff28 <_malloc_r>
 8010052:	4606      	mov	r6, r0
 8010054:	b950      	cbnz	r0, 801006c <__ssputs_r+0x5c>
 8010056:	230c      	movs	r3, #12
 8010058:	f8ca 3000 	str.w	r3, [sl]
 801005c:	89a3      	ldrh	r3, [r4, #12]
 801005e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010062:	81a3      	strh	r3, [r4, #12]
 8010064:	f04f 30ff 	mov.w	r0, #4294967295
 8010068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801006c:	6921      	ldr	r1, [r4, #16]
 801006e:	464a      	mov	r2, r9
 8010070:	f7fc faaa 	bl	800c5c8 <memcpy>
 8010074:	89a3      	ldrh	r3, [r4, #12]
 8010076:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801007a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801007e:	81a3      	strh	r3, [r4, #12]
 8010080:	6126      	str	r6, [r4, #16]
 8010082:	6165      	str	r5, [r4, #20]
 8010084:	444e      	add	r6, r9
 8010086:	eba5 0509 	sub.w	r5, r5, r9
 801008a:	6026      	str	r6, [r4, #0]
 801008c:	60a5      	str	r5, [r4, #8]
 801008e:	463e      	mov	r6, r7
 8010090:	42be      	cmp	r6, r7
 8010092:	d900      	bls.n	8010096 <__ssputs_r+0x86>
 8010094:	463e      	mov	r6, r7
 8010096:	6820      	ldr	r0, [r4, #0]
 8010098:	4632      	mov	r2, r6
 801009a:	4641      	mov	r1, r8
 801009c:	f000 f97e 	bl	801039c <memmove>
 80100a0:	68a3      	ldr	r3, [r4, #8]
 80100a2:	1b9b      	subs	r3, r3, r6
 80100a4:	60a3      	str	r3, [r4, #8]
 80100a6:	6823      	ldr	r3, [r4, #0]
 80100a8:	4433      	add	r3, r6
 80100aa:	6023      	str	r3, [r4, #0]
 80100ac:	2000      	movs	r0, #0
 80100ae:	e7db      	b.n	8010068 <__ssputs_r+0x58>
 80100b0:	462a      	mov	r2, r5
 80100b2:	f000 f999 	bl	80103e8 <_realloc_r>
 80100b6:	4606      	mov	r6, r0
 80100b8:	2800      	cmp	r0, #0
 80100ba:	d1e1      	bne.n	8010080 <__ssputs_r+0x70>
 80100bc:	6921      	ldr	r1, [r4, #16]
 80100be:	4650      	mov	r0, sl
 80100c0:	f7ff fec6 	bl	800fe50 <_free_r>
 80100c4:	e7c7      	b.n	8010056 <__ssputs_r+0x46>
	...

080100c8 <_svfiprintf_r>:
 80100c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80100cc:	4698      	mov	r8, r3
 80100ce:	898b      	ldrh	r3, [r1, #12]
 80100d0:	061b      	lsls	r3, r3, #24
 80100d2:	b09d      	sub	sp, #116	; 0x74
 80100d4:	4607      	mov	r7, r0
 80100d6:	460d      	mov	r5, r1
 80100d8:	4614      	mov	r4, r2
 80100da:	d50e      	bpl.n	80100fa <_svfiprintf_r+0x32>
 80100dc:	690b      	ldr	r3, [r1, #16]
 80100de:	b963      	cbnz	r3, 80100fa <_svfiprintf_r+0x32>
 80100e0:	2140      	movs	r1, #64	; 0x40
 80100e2:	f7ff ff21 	bl	800ff28 <_malloc_r>
 80100e6:	6028      	str	r0, [r5, #0]
 80100e8:	6128      	str	r0, [r5, #16]
 80100ea:	b920      	cbnz	r0, 80100f6 <_svfiprintf_r+0x2e>
 80100ec:	230c      	movs	r3, #12
 80100ee:	603b      	str	r3, [r7, #0]
 80100f0:	f04f 30ff 	mov.w	r0, #4294967295
 80100f4:	e0d1      	b.n	801029a <_svfiprintf_r+0x1d2>
 80100f6:	2340      	movs	r3, #64	; 0x40
 80100f8:	616b      	str	r3, [r5, #20]
 80100fa:	2300      	movs	r3, #0
 80100fc:	9309      	str	r3, [sp, #36]	; 0x24
 80100fe:	2320      	movs	r3, #32
 8010100:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010104:	f8cd 800c 	str.w	r8, [sp, #12]
 8010108:	2330      	movs	r3, #48	; 0x30
 801010a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80102b4 <_svfiprintf_r+0x1ec>
 801010e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010112:	f04f 0901 	mov.w	r9, #1
 8010116:	4623      	mov	r3, r4
 8010118:	469a      	mov	sl, r3
 801011a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801011e:	b10a      	cbz	r2, 8010124 <_svfiprintf_r+0x5c>
 8010120:	2a25      	cmp	r2, #37	; 0x25
 8010122:	d1f9      	bne.n	8010118 <_svfiprintf_r+0x50>
 8010124:	ebba 0b04 	subs.w	fp, sl, r4
 8010128:	d00b      	beq.n	8010142 <_svfiprintf_r+0x7a>
 801012a:	465b      	mov	r3, fp
 801012c:	4622      	mov	r2, r4
 801012e:	4629      	mov	r1, r5
 8010130:	4638      	mov	r0, r7
 8010132:	f7ff ff6d 	bl	8010010 <__ssputs_r>
 8010136:	3001      	adds	r0, #1
 8010138:	f000 80aa 	beq.w	8010290 <_svfiprintf_r+0x1c8>
 801013c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801013e:	445a      	add	r2, fp
 8010140:	9209      	str	r2, [sp, #36]	; 0x24
 8010142:	f89a 3000 	ldrb.w	r3, [sl]
 8010146:	2b00      	cmp	r3, #0
 8010148:	f000 80a2 	beq.w	8010290 <_svfiprintf_r+0x1c8>
 801014c:	2300      	movs	r3, #0
 801014e:	f04f 32ff 	mov.w	r2, #4294967295
 8010152:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010156:	f10a 0a01 	add.w	sl, sl, #1
 801015a:	9304      	str	r3, [sp, #16]
 801015c:	9307      	str	r3, [sp, #28]
 801015e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010162:	931a      	str	r3, [sp, #104]	; 0x68
 8010164:	4654      	mov	r4, sl
 8010166:	2205      	movs	r2, #5
 8010168:	f814 1b01 	ldrb.w	r1, [r4], #1
 801016c:	4851      	ldr	r0, [pc, #324]	; (80102b4 <_svfiprintf_r+0x1ec>)
 801016e:	f7f0 f83f 	bl	80001f0 <memchr>
 8010172:	9a04      	ldr	r2, [sp, #16]
 8010174:	b9d8      	cbnz	r0, 80101ae <_svfiprintf_r+0xe6>
 8010176:	06d0      	lsls	r0, r2, #27
 8010178:	bf44      	itt	mi
 801017a:	2320      	movmi	r3, #32
 801017c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010180:	0711      	lsls	r1, r2, #28
 8010182:	bf44      	itt	mi
 8010184:	232b      	movmi	r3, #43	; 0x2b
 8010186:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801018a:	f89a 3000 	ldrb.w	r3, [sl]
 801018e:	2b2a      	cmp	r3, #42	; 0x2a
 8010190:	d015      	beq.n	80101be <_svfiprintf_r+0xf6>
 8010192:	9a07      	ldr	r2, [sp, #28]
 8010194:	4654      	mov	r4, sl
 8010196:	2000      	movs	r0, #0
 8010198:	f04f 0c0a 	mov.w	ip, #10
 801019c:	4621      	mov	r1, r4
 801019e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80101a2:	3b30      	subs	r3, #48	; 0x30
 80101a4:	2b09      	cmp	r3, #9
 80101a6:	d94e      	bls.n	8010246 <_svfiprintf_r+0x17e>
 80101a8:	b1b0      	cbz	r0, 80101d8 <_svfiprintf_r+0x110>
 80101aa:	9207      	str	r2, [sp, #28]
 80101ac:	e014      	b.n	80101d8 <_svfiprintf_r+0x110>
 80101ae:	eba0 0308 	sub.w	r3, r0, r8
 80101b2:	fa09 f303 	lsl.w	r3, r9, r3
 80101b6:	4313      	orrs	r3, r2
 80101b8:	9304      	str	r3, [sp, #16]
 80101ba:	46a2      	mov	sl, r4
 80101bc:	e7d2      	b.n	8010164 <_svfiprintf_r+0x9c>
 80101be:	9b03      	ldr	r3, [sp, #12]
 80101c0:	1d19      	adds	r1, r3, #4
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	9103      	str	r1, [sp, #12]
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	bfbb      	ittet	lt
 80101ca:	425b      	neglt	r3, r3
 80101cc:	f042 0202 	orrlt.w	r2, r2, #2
 80101d0:	9307      	strge	r3, [sp, #28]
 80101d2:	9307      	strlt	r3, [sp, #28]
 80101d4:	bfb8      	it	lt
 80101d6:	9204      	strlt	r2, [sp, #16]
 80101d8:	7823      	ldrb	r3, [r4, #0]
 80101da:	2b2e      	cmp	r3, #46	; 0x2e
 80101dc:	d10c      	bne.n	80101f8 <_svfiprintf_r+0x130>
 80101de:	7863      	ldrb	r3, [r4, #1]
 80101e0:	2b2a      	cmp	r3, #42	; 0x2a
 80101e2:	d135      	bne.n	8010250 <_svfiprintf_r+0x188>
 80101e4:	9b03      	ldr	r3, [sp, #12]
 80101e6:	1d1a      	adds	r2, r3, #4
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	9203      	str	r2, [sp, #12]
 80101ec:	2b00      	cmp	r3, #0
 80101ee:	bfb8      	it	lt
 80101f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80101f4:	3402      	adds	r4, #2
 80101f6:	9305      	str	r3, [sp, #20]
 80101f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80102c4 <_svfiprintf_r+0x1fc>
 80101fc:	7821      	ldrb	r1, [r4, #0]
 80101fe:	2203      	movs	r2, #3
 8010200:	4650      	mov	r0, sl
 8010202:	f7ef fff5 	bl	80001f0 <memchr>
 8010206:	b140      	cbz	r0, 801021a <_svfiprintf_r+0x152>
 8010208:	2340      	movs	r3, #64	; 0x40
 801020a:	eba0 000a 	sub.w	r0, r0, sl
 801020e:	fa03 f000 	lsl.w	r0, r3, r0
 8010212:	9b04      	ldr	r3, [sp, #16]
 8010214:	4303      	orrs	r3, r0
 8010216:	3401      	adds	r4, #1
 8010218:	9304      	str	r3, [sp, #16]
 801021a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801021e:	4826      	ldr	r0, [pc, #152]	; (80102b8 <_svfiprintf_r+0x1f0>)
 8010220:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8010224:	2206      	movs	r2, #6
 8010226:	f7ef ffe3 	bl	80001f0 <memchr>
 801022a:	2800      	cmp	r0, #0
 801022c:	d038      	beq.n	80102a0 <_svfiprintf_r+0x1d8>
 801022e:	4b23      	ldr	r3, [pc, #140]	; (80102bc <_svfiprintf_r+0x1f4>)
 8010230:	bb1b      	cbnz	r3, 801027a <_svfiprintf_r+0x1b2>
 8010232:	9b03      	ldr	r3, [sp, #12]
 8010234:	3307      	adds	r3, #7
 8010236:	f023 0307 	bic.w	r3, r3, #7
 801023a:	3308      	adds	r3, #8
 801023c:	9303      	str	r3, [sp, #12]
 801023e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010240:	4433      	add	r3, r6
 8010242:	9309      	str	r3, [sp, #36]	; 0x24
 8010244:	e767      	b.n	8010116 <_svfiprintf_r+0x4e>
 8010246:	fb0c 3202 	mla	r2, ip, r2, r3
 801024a:	460c      	mov	r4, r1
 801024c:	2001      	movs	r0, #1
 801024e:	e7a5      	b.n	801019c <_svfiprintf_r+0xd4>
 8010250:	2300      	movs	r3, #0
 8010252:	3401      	adds	r4, #1
 8010254:	9305      	str	r3, [sp, #20]
 8010256:	4619      	mov	r1, r3
 8010258:	f04f 0c0a 	mov.w	ip, #10
 801025c:	4620      	mov	r0, r4
 801025e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010262:	3a30      	subs	r2, #48	; 0x30
 8010264:	2a09      	cmp	r2, #9
 8010266:	d903      	bls.n	8010270 <_svfiprintf_r+0x1a8>
 8010268:	2b00      	cmp	r3, #0
 801026a:	d0c5      	beq.n	80101f8 <_svfiprintf_r+0x130>
 801026c:	9105      	str	r1, [sp, #20]
 801026e:	e7c3      	b.n	80101f8 <_svfiprintf_r+0x130>
 8010270:	fb0c 2101 	mla	r1, ip, r1, r2
 8010274:	4604      	mov	r4, r0
 8010276:	2301      	movs	r3, #1
 8010278:	e7f0      	b.n	801025c <_svfiprintf_r+0x194>
 801027a:	ab03      	add	r3, sp, #12
 801027c:	9300      	str	r3, [sp, #0]
 801027e:	462a      	mov	r2, r5
 8010280:	4b0f      	ldr	r3, [pc, #60]	; (80102c0 <_svfiprintf_r+0x1f8>)
 8010282:	a904      	add	r1, sp, #16
 8010284:	4638      	mov	r0, r7
 8010286:	f7fc fa55 	bl	800c734 <_printf_float>
 801028a:	1c42      	adds	r2, r0, #1
 801028c:	4606      	mov	r6, r0
 801028e:	d1d6      	bne.n	801023e <_svfiprintf_r+0x176>
 8010290:	89ab      	ldrh	r3, [r5, #12]
 8010292:	065b      	lsls	r3, r3, #25
 8010294:	f53f af2c 	bmi.w	80100f0 <_svfiprintf_r+0x28>
 8010298:	9809      	ldr	r0, [sp, #36]	; 0x24
 801029a:	b01d      	add	sp, #116	; 0x74
 801029c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80102a0:	ab03      	add	r3, sp, #12
 80102a2:	9300      	str	r3, [sp, #0]
 80102a4:	462a      	mov	r2, r5
 80102a6:	4b06      	ldr	r3, [pc, #24]	; (80102c0 <_svfiprintf_r+0x1f8>)
 80102a8:	a904      	add	r1, sp, #16
 80102aa:	4638      	mov	r0, r7
 80102ac:	f7fc fce6 	bl	800cc7c <_printf_i>
 80102b0:	e7eb      	b.n	801028a <_svfiprintf_r+0x1c2>
 80102b2:	bf00      	nop
 80102b4:	0801158c 	.word	0x0801158c
 80102b8:	08011596 	.word	0x08011596
 80102bc:	0800c735 	.word	0x0800c735
 80102c0:	08010011 	.word	0x08010011
 80102c4:	08011592 	.word	0x08011592

080102c8 <nan>:
 80102c8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80102d0 <nan+0x8>
 80102cc:	4770      	bx	lr
 80102ce:	bf00      	nop
 80102d0:	00000000 	.word	0x00000000
 80102d4:	7ff80000 	.word	0x7ff80000

080102d8 <_sbrk_r>:
 80102d8:	b538      	push	{r3, r4, r5, lr}
 80102da:	4d06      	ldr	r5, [pc, #24]	; (80102f4 <_sbrk_r+0x1c>)
 80102dc:	2300      	movs	r3, #0
 80102de:	4604      	mov	r4, r0
 80102e0:	4608      	mov	r0, r1
 80102e2:	602b      	str	r3, [r5, #0]
 80102e4:	f7f4 fe76 	bl	8004fd4 <_sbrk>
 80102e8:	1c43      	adds	r3, r0, #1
 80102ea:	d102      	bne.n	80102f2 <_sbrk_r+0x1a>
 80102ec:	682b      	ldr	r3, [r5, #0]
 80102ee:	b103      	cbz	r3, 80102f2 <_sbrk_r+0x1a>
 80102f0:	6023      	str	r3, [r4, #0]
 80102f2:	bd38      	pop	{r3, r4, r5, pc}
 80102f4:	200010ec 	.word	0x200010ec

080102f8 <strncmp>:
 80102f8:	b510      	push	{r4, lr}
 80102fa:	b17a      	cbz	r2, 801031c <strncmp+0x24>
 80102fc:	4603      	mov	r3, r0
 80102fe:	3901      	subs	r1, #1
 8010300:	1884      	adds	r4, r0, r2
 8010302:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010306:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801030a:	4290      	cmp	r0, r2
 801030c:	d101      	bne.n	8010312 <strncmp+0x1a>
 801030e:	42a3      	cmp	r3, r4
 8010310:	d101      	bne.n	8010316 <strncmp+0x1e>
 8010312:	1a80      	subs	r0, r0, r2
 8010314:	bd10      	pop	{r4, pc}
 8010316:	2800      	cmp	r0, #0
 8010318:	d1f3      	bne.n	8010302 <strncmp+0xa>
 801031a:	e7fa      	b.n	8010312 <strncmp+0x1a>
 801031c:	4610      	mov	r0, r2
 801031e:	e7f9      	b.n	8010314 <strncmp+0x1c>

08010320 <__ascii_wctomb>:
 8010320:	b149      	cbz	r1, 8010336 <__ascii_wctomb+0x16>
 8010322:	2aff      	cmp	r2, #255	; 0xff
 8010324:	bf85      	ittet	hi
 8010326:	238a      	movhi	r3, #138	; 0x8a
 8010328:	6003      	strhi	r3, [r0, #0]
 801032a:	700a      	strbls	r2, [r1, #0]
 801032c:	f04f 30ff 	movhi.w	r0, #4294967295
 8010330:	bf98      	it	ls
 8010332:	2001      	movls	r0, #1
 8010334:	4770      	bx	lr
 8010336:	4608      	mov	r0, r1
 8010338:	4770      	bx	lr
	...

0801033c <__assert_func>:
 801033c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801033e:	4614      	mov	r4, r2
 8010340:	461a      	mov	r2, r3
 8010342:	4b09      	ldr	r3, [pc, #36]	; (8010368 <__assert_func+0x2c>)
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	4605      	mov	r5, r0
 8010348:	68d8      	ldr	r0, [r3, #12]
 801034a:	b14c      	cbz	r4, 8010360 <__assert_func+0x24>
 801034c:	4b07      	ldr	r3, [pc, #28]	; (801036c <__assert_func+0x30>)
 801034e:	9100      	str	r1, [sp, #0]
 8010350:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010354:	4906      	ldr	r1, [pc, #24]	; (8010370 <__assert_func+0x34>)
 8010356:	462b      	mov	r3, r5
 8010358:	f000 f80e 	bl	8010378 <fiprintf>
 801035c:	f000 fa8c 	bl	8010878 <abort>
 8010360:	4b04      	ldr	r3, [pc, #16]	; (8010374 <__assert_func+0x38>)
 8010362:	461c      	mov	r4, r3
 8010364:	e7f3      	b.n	801034e <__assert_func+0x12>
 8010366:	bf00      	nop
 8010368:	2000025c 	.word	0x2000025c
 801036c:	0801159d 	.word	0x0801159d
 8010370:	080115aa 	.word	0x080115aa
 8010374:	080115d8 	.word	0x080115d8

08010378 <fiprintf>:
 8010378:	b40e      	push	{r1, r2, r3}
 801037a:	b503      	push	{r0, r1, lr}
 801037c:	4601      	mov	r1, r0
 801037e:	ab03      	add	r3, sp, #12
 8010380:	4805      	ldr	r0, [pc, #20]	; (8010398 <fiprintf+0x20>)
 8010382:	f853 2b04 	ldr.w	r2, [r3], #4
 8010386:	6800      	ldr	r0, [r0, #0]
 8010388:	9301      	str	r3, [sp, #4]
 801038a:	f000 f885 	bl	8010498 <_vfiprintf_r>
 801038e:	b002      	add	sp, #8
 8010390:	f85d eb04 	ldr.w	lr, [sp], #4
 8010394:	b003      	add	sp, #12
 8010396:	4770      	bx	lr
 8010398:	2000025c 	.word	0x2000025c

0801039c <memmove>:
 801039c:	4288      	cmp	r0, r1
 801039e:	b510      	push	{r4, lr}
 80103a0:	eb01 0402 	add.w	r4, r1, r2
 80103a4:	d902      	bls.n	80103ac <memmove+0x10>
 80103a6:	4284      	cmp	r4, r0
 80103a8:	4623      	mov	r3, r4
 80103aa:	d807      	bhi.n	80103bc <memmove+0x20>
 80103ac:	1e43      	subs	r3, r0, #1
 80103ae:	42a1      	cmp	r1, r4
 80103b0:	d008      	beq.n	80103c4 <memmove+0x28>
 80103b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80103b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80103ba:	e7f8      	b.n	80103ae <memmove+0x12>
 80103bc:	4402      	add	r2, r0
 80103be:	4601      	mov	r1, r0
 80103c0:	428a      	cmp	r2, r1
 80103c2:	d100      	bne.n	80103c6 <memmove+0x2a>
 80103c4:	bd10      	pop	{r4, pc}
 80103c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80103ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80103ce:	e7f7      	b.n	80103c0 <memmove+0x24>

080103d0 <__malloc_lock>:
 80103d0:	4801      	ldr	r0, [pc, #4]	; (80103d8 <__malloc_lock+0x8>)
 80103d2:	f000 bc11 	b.w	8010bf8 <__retarget_lock_acquire_recursive>
 80103d6:	bf00      	nop
 80103d8:	200010f0 	.word	0x200010f0

080103dc <__malloc_unlock>:
 80103dc:	4801      	ldr	r0, [pc, #4]	; (80103e4 <__malloc_unlock+0x8>)
 80103de:	f000 bc0c 	b.w	8010bfa <__retarget_lock_release_recursive>
 80103e2:	bf00      	nop
 80103e4:	200010f0 	.word	0x200010f0

080103e8 <_realloc_r>:
 80103e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103ec:	4680      	mov	r8, r0
 80103ee:	4614      	mov	r4, r2
 80103f0:	460e      	mov	r6, r1
 80103f2:	b921      	cbnz	r1, 80103fe <_realloc_r+0x16>
 80103f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80103f8:	4611      	mov	r1, r2
 80103fa:	f7ff bd95 	b.w	800ff28 <_malloc_r>
 80103fe:	b92a      	cbnz	r2, 801040c <_realloc_r+0x24>
 8010400:	f7ff fd26 	bl	800fe50 <_free_r>
 8010404:	4625      	mov	r5, r4
 8010406:	4628      	mov	r0, r5
 8010408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801040c:	f000 fc5c 	bl	8010cc8 <_malloc_usable_size_r>
 8010410:	4284      	cmp	r4, r0
 8010412:	4607      	mov	r7, r0
 8010414:	d802      	bhi.n	801041c <_realloc_r+0x34>
 8010416:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801041a:	d812      	bhi.n	8010442 <_realloc_r+0x5a>
 801041c:	4621      	mov	r1, r4
 801041e:	4640      	mov	r0, r8
 8010420:	f7ff fd82 	bl	800ff28 <_malloc_r>
 8010424:	4605      	mov	r5, r0
 8010426:	2800      	cmp	r0, #0
 8010428:	d0ed      	beq.n	8010406 <_realloc_r+0x1e>
 801042a:	42bc      	cmp	r4, r7
 801042c:	4622      	mov	r2, r4
 801042e:	4631      	mov	r1, r6
 8010430:	bf28      	it	cs
 8010432:	463a      	movcs	r2, r7
 8010434:	f7fc f8c8 	bl	800c5c8 <memcpy>
 8010438:	4631      	mov	r1, r6
 801043a:	4640      	mov	r0, r8
 801043c:	f7ff fd08 	bl	800fe50 <_free_r>
 8010440:	e7e1      	b.n	8010406 <_realloc_r+0x1e>
 8010442:	4635      	mov	r5, r6
 8010444:	e7df      	b.n	8010406 <_realloc_r+0x1e>

08010446 <__sfputc_r>:
 8010446:	6893      	ldr	r3, [r2, #8]
 8010448:	3b01      	subs	r3, #1
 801044a:	2b00      	cmp	r3, #0
 801044c:	b410      	push	{r4}
 801044e:	6093      	str	r3, [r2, #8]
 8010450:	da08      	bge.n	8010464 <__sfputc_r+0x1e>
 8010452:	6994      	ldr	r4, [r2, #24]
 8010454:	42a3      	cmp	r3, r4
 8010456:	db01      	blt.n	801045c <__sfputc_r+0x16>
 8010458:	290a      	cmp	r1, #10
 801045a:	d103      	bne.n	8010464 <__sfputc_r+0x1e>
 801045c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010460:	f000 b94a 	b.w	80106f8 <__swbuf_r>
 8010464:	6813      	ldr	r3, [r2, #0]
 8010466:	1c58      	adds	r0, r3, #1
 8010468:	6010      	str	r0, [r2, #0]
 801046a:	7019      	strb	r1, [r3, #0]
 801046c:	4608      	mov	r0, r1
 801046e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010472:	4770      	bx	lr

08010474 <__sfputs_r>:
 8010474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010476:	4606      	mov	r6, r0
 8010478:	460f      	mov	r7, r1
 801047a:	4614      	mov	r4, r2
 801047c:	18d5      	adds	r5, r2, r3
 801047e:	42ac      	cmp	r4, r5
 8010480:	d101      	bne.n	8010486 <__sfputs_r+0x12>
 8010482:	2000      	movs	r0, #0
 8010484:	e007      	b.n	8010496 <__sfputs_r+0x22>
 8010486:	f814 1b01 	ldrb.w	r1, [r4], #1
 801048a:	463a      	mov	r2, r7
 801048c:	4630      	mov	r0, r6
 801048e:	f7ff ffda 	bl	8010446 <__sfputc_r>
 8010492:	1c43      	adds	r3, r0, #1
 8010494:	d1f3      	bne.n	801047e <__sfputs_r+0xa>
 8010496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010498 <_vfiprintf_r>:
 8010498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801049c:	460d      	mov	r5, r1
 801049e:	b09d      	sub	sp, #116	; 0x74
 80104a0:	4614      	mov	r4, r2
 80104a2:	4698      	mov	r8, r3
 80104a4:	4606      	mov	r6, r0
 80104a6:	b118      	cbz	r0, 80104b0 <_vfiprintf_r+0x18>
 80104a8:	6983      	ldr	r3, [r0, #24]
 80104aa:	b90b      	cbnz	r3, 80104b0 <_vfiprintf_r+0x18>
 80104ac:	f000 fb06 	bl	8010abc <__sinit>
 80104b0:	4b89      	ldr	r3, [pc, #548]	; (80106d8 <_vfiprintf_r+0x240>)
 80104b2:	429d      	cmp	r5, r3
 80104b4:	d11b      	bne.n	80104ee <_vfiprintf_r+0x56>
 80104b6:	6875      	ldr	r5, [r6, #4]
 80104b8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104ba:	07d9      	lsls	r1, r3, #31
 80104bc:	d405      	bmi.n	80104ca <_vfiprintf_r+0x32>
 80104be:	89ab      	ldrh	r3, [r5, #12]
 80104c0:	059a      	lsls	r2, r3, #22
 80104c2:	d402      	bmi.n	80104ca <_vfiprintf_r+0x32>
 80104c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80104c6:	f000 fb97 	bl	8010bf8 <__retarget_lock_acquire_recursive>
 80104ca:	89ab      	ldrh	r3, [r5, #12]
 80104cc:	071b      	lsls	r3, r3, #28
 80104ce:	d501      	bpl.n	80104d4 <_vfiprintf_r+0x3c>
 80104d0:	692b      	ldr	r3, [r5, #16]
 80104d2:	b9eb      	cbnz	r3, 8010510 <_vfiprintf_r+0x78>
 80104d4:	4629      	mov	r1, r5
 80104d6:	4630      	mov	r0, r6
 80104d8:	f000 f960 	bl	801079c <__swsetup_r>
 80104dc:	b1c0      	cbz	r0, 8010510 <_vfiprintf_r+0x78>
 80104de:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80104e0:	07dc      	lsls	r4, r3, #31
 80104e2:	d50e      	bpl.n	8010502 <_vfiprintf_r+0x6a>
 80104e4:	f04f 30ff 	mov.w	r0, #4294967295
 80104e8:	b01d      	add	sp, #116	; 0x74
 80104ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104ee:	4b7b      	ldr	r3, [pc, #492]	; (80106dc <_vfiprintf_r+0x244>)
 80104f0:	429d      	cmp	r5, r3
 80104f2:	d101      	bne.n	80104f8 <_vfiprintf_r+0x60>
 80104f4:	68b5      	ldr	r5, [r6, #8]
 80104f6:	e7df      	b.n	80104b8 <_vfiprintf_r+0x20>
 80104f8:	4b79      	ldr	r3, [pc, #484]	; (80106e0 <_vfiprintf_r+0x248>)
 80104fa:	429d      	cmp	r5, r3
 80104fc:	bf08      	it	eq
 80104fe:	68f5      	ldreq	r5, [r6, #12]
 8010500:	e7da      	b.n	80104b8 <_vfiprintf_r+0x20>
 8010502:	89ab      	ldrh	r3, [r5, #12]
 8010504:	0598      	lsls	r0, r3, #22
 8010506:	d4ed      	bmi.n	80104e4 <_vfiprintf_r+0x4c>
 8010508:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801050a:	f000 fb76 	bl	8010bfa <__retarget_lock_release_recursive>
 801050e:	e7e9      	b.n	80104e4 <_vfiprintf_r+0x4c>
 8010510:	2300      	movs	r3, #0
 8010512:	9309      	str	r3, [sp, #36]	; 0x24
 8010514:	2320      	movs	r3, #32
 8010516:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801051a:	f8cd 800c 	str.w	r8, [sp, #12]
 801051e:	2330      	movs	r3, #48	; 0x30
 8010520:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80106e4 <_vfiprintf_r+0x24c>
 8010524:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8010528:	f04f 0901 	mov.w	r9, #1
 801052c:	4623      	mov	r3, r4
 801052e:	469a      	mov	sl, r3
 8010530:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010534:	b10a      	cbz	r2, 801053a <_vfiprintf_r+0xa2>
 8010536:	2a25      	cmp	r2, #37	; 0x25
 8010538:	d1f9      	bne.n	801052e <_vfiprintf_r+0x96>
 801053a:	ebba 0b04 	subs.w	fp, sl, r4
 801053e:	d00b      	beq.n	8010558 <_vfiprintf_r+0xc0>
 8010540:	465b      	mov	r3, fp
 8010542:	4622      	mov	r2, r4
 8010544:	4629      	mov	r1, r5
 8010546:	4630      	mov	r0, r6
 8010548:	f7ff ff94 	bl	8010474 <__sfputs_r>
 801054c:	3001      	adds	r0, #1
 801054e:	f000 80aa 	beq.w	80106a6 <_vfiprintf_r+0x20e>
 8010552:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8010554:	445a      	add	r2, fp
 8010556:	9209      	str	r2, [sp, #36]	; 0x24
 8010558:	f89a 3000 	ldrb.w	r3, [sl]
 801055c:	2b00      	cmp	r3, #0
 801055e:	f000 80a2 	beq.w	80106a6 <_vfiprintf_r+0x20e>
 8010562:	2300      	movs	r3, #0
 8010564:	f04f 32ff 	mov.w	r2, #4294967295
 8010568:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801056c:	f10a 0a01 	add.w	sl, sl, #1
 8010570:	9304      	str	r3, [sp, #16]
 8010572:	9307      	str	r3, [sp, #28]
 8010574:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8010578:	931a      	str	r3, [sp, #104]	; 0x68
 801057a:	4654      	mov	r4, sl
 801057c:	2205      	movs	r2, #5
 801057e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010582:	4858      	ldr	r0, [pc, #352]	; (80106e4 <_vfiprintf_r+0x24c>)
 8010584:	f7ef fe34 	bl	80001f0 <memchr>
 8010588:	9a04      	ldr	r2, [sp, #16]
 801058a:	b9d8      	cbnz	r0, 80105c4 <_vfiprintf_r+0x12c>
 801058c:	06d1      	lsls	r1, r2, #27
 801058e:	bf44      	itt	mi
 8010590:	2320      	movmi	r3, #32
 8010592:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010596:	0713      	lsls	r3, r2, #28
 8010598:	bf44      	itt	mi
 801059a:	232b      	movmi	r3, #43	; 0x2b
 801059c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80105a0:	f89a 3000 	ldrb.w	r3, [sl]
 80105a4:	2b2a      	cmp	r3, #42	; 0x2a
 80105a6:	d015      	beq.n	80105d4 <_vfiprintf_r+0x13c>
 80105a8:	9a07      	ldr	r2, [sp, #28]
 80105aa:	4654      	mov	r4, sl
 80105ac:	2000      	movs	r0, #0
 80105ae:	f04f 0c0a 	mov.w	ip, #10
 80105b2:	4621      	mov	r1, r4
 80105b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80105b8:	3b30      	subs	r3, #48	; 0x30
 80105ba:	2b09      	cmp	r3, #9
 80105bc:	d94e      	bls.n	801065c <_vfiprintf_r+0x1c4>
 80105be:	b1b0      	cbz	r0, 80105ee <_vfiprintf_r+0x156>
 80105c0:	9207      	str	r2, [sp, #28]
 80105c2:	e014      	b.n	80105ee <_vfiprintf_r+0x156>
 80105c4:	eba0 0308 	sub.w	r3, r0, r8
 80105c8:	fa09 f303 	lsl.w	r3, r9, r3
 80105cc:	4313      	orrs	r3, r2
 80105ce:	9304      	str	r3, [sp, #16]
 80105d0:	46a2      	mov	sl, r4
 80105d2:	e7d2      	b.n	801057a <_vfiprintf_r+0xe2>
 80105d4:	9b03      	ldr	r3, [sp, #12]
 80105d6:	1d19      	adds	r1, r3, #4
 80105d8:	681b      	ldr	r3, [r3, #0]
 80105da:	9103      	str	r1, [sp, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	bfbb      	ittet	lt
 80105e0:	425b      	neglt	r3, r3
 80105e2:	f042 0202 	orrlt.w	r2, r2, #2
 80105e6:	9307      	strge	r3, [sp, #28]
 80105e8:	9307      	strlt	r3, [sp, #28]
 80105ea:	bfb8      	it	lt
 80105ec:	9204      	strlt	r2, [sp, #16]
 80105ee:	7823      	ldrb	r3, [r4, #0]
 80105f0:	2b2e      	cmp	r3, #46	; 0x2e
 80105f2:	d10c      	bne.n	801060e <_vfiprintf_r+0x176>
 80105f4:	7863      	ldrb	r3, [r4, #1]
 80105f6:	2b2a      	cmp	r3, #42	; 0x2a
 80105f8:	d135      	bne.n	8010666 <_vfiprintf_r+0x1ce>
 80105fa:	9b03      	ldr	r3, [sp, #12]
 80105fc:	1d1a      	adds	r2, r3, #4
 80105fe:	681b      	ldr	r3, [r3, #0]
 8010600:	9203      	str	r2, [sp, #12]
 8010602:	2b00      	cmp	r3, #0
 8010604:	bfb8      	it	lt
 8010606:	f04f 33ff 	movlt.w	r3, #4294967295
 801060a:	3402      	adds	r4, #2
 801060c:	9305      	str	r3, [sp, #20]
 801060e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80106f4 <_vfiprintf_r+0x25c>
 8010612:	7821      	ldrb	r1, [r4, #0]
 8010614:	2203      	movs	r2, #3
 8010616:	4650      	mov	r0, sl
 8010618:	f7ef fdea 	bl	80001f0 <memchr>
 801061c:	b140      	cbz	r0, 8010630 <_vfiprintf_r+0x198>
 801061e:	2340      	movs	r3, #64	; 0x40
 8010620:	eba0 000a 	sub.w	r0, r0, sl
 8010624:	fa03 f000 	lsl.w	r0, r3, r0
 8010628:	9b04      	ldr	r3, [sp, #16]
 801062a:	4303      	orrs	r3, r0
 801062c:	3401      	adds	r4, #1
 801062e:	9304      	str	r3, [sp, #16]
 8010630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010634:	482c      	ldr	r0, [pc, #176]	; (80106e8 <_vfiprintf_r+0x250>)
 8010636:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801063a:	2206      	movs	r2, #6
 801063c:	f7ef fdd8 	bl	80001f0 <memchr>
 8010640:	2800      	cmp	r0, #0
 8010642:	d03f      	beq.n	80106c4 <_vfiprintf_r+0x22c>
 8010644:	4b29      	ldr	r3, [pc, #164]	; (80106ec <_vfiprintf_r+0x254>)
 8010646:	bb1b      	cbnz	r3, 8010690 <_vfiprintf_r+0x1f8>
 8010648:	9b03      	ldr	r3, [sp, #12]
 801064a:	3307      	adds	r3, #7
 801064c:	f023 0307 	bic.w	r3, r3, #7
 8010650:	3308      	adds	r3, #8
 8010652:	9303      	str	r3, [sp, #12]
 8010654:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010656:	443b      	add	r3, r7
 8010658:	9309      	str	r3, [sp, #36]	; 0x24
 801065a:	e767      	b.n	801052c <_vfiprintf_r+0x94>
 801065c:	fb0c 3202 	mla	r2, ip, r2, r3
 8010660:	460c      	mov	r4, r1
 8010662:	2001      	movs	r0, #1
 8010664:	e7a5      	b.n	80105b2 <_vfiprintf_r+0x11a>
 8010666:	2300      	movs	r3, #0
 8010668:	3401      	adds	r4, #1
 801066a:	9305      	str	r3, [sp, #20]
 801066c:	4619      	mov	r1, r3
 801066e:	f04f 0c0a 	mov.w	ip, #10
 8010672:	4620      	mov	r0, r4
 8010674:	f810 2b01 	ldrb.w	r2, [r0], #1
 8010678:	3a30      	subs	r2, #48	; 0x30
 801067a:	2a09      	cmp	r2, #9
 801067c:	d903      	bls.n	8010686 <_vfiprintf_r+0x1ee>
 801067e:	2b00      	cmp	r3, #0
 8010680:	d0c5      	beq.n	801060e <_vfiprintf_r+0x176>
 8010682:	9105      	str	r1, [sp, #20]
 8010684:	e7c3      	b.n	801060e <_vfiprintf_r+0x176>
 8010686:	fb0c 2101 	mla	r1, ip, r1, r2
 801068a:	4604      	mov	r4, r0
 801068c:	2301      	movs	r3, #1
 801068e:	e7f0      	b.n	8010672 <_vfiprintf_r+0x1da>
 8010690:	ab03      	add	r3, sp, #12
 8010692:	9300      	str	r3, [sp, #0]
 8010694:	462a      	mov	r2, r5
 8010696:	4b16      	ldr	r3, [pc, #88]	; (80106f0 <_vfiprintf_r+0x258>)
 8010698:	a904      	add	r1, sp, #16
 801069a:	4630      	mov	r0, r6
 801069c:	f7fc f84a 	bl	800c734 <_printf_float>
 80106a0:	4607      	mov	r7, r0
 80106a2:	1c78      	adds	r0, r7, #1
 80106a4:	d1d6      	bne.n	8010654 <_vfiprintf_r+0x1bc>
 80106a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80106a8:	07d9      	lsls	r1, r3, #31
 80106aa:	d405      	bmi.n	80106b8 <_vfiprintf_r+0x220>
 80106ac:	89ab      	ldrh	r3, [r5, #12]
 80106ae:	059a      	lsls	r2, r3, #22
 80106b0:	d402      	bmi.n	80106b8 <_vfiprintf_r+0x220>
 80106b2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80106b4:	f000 faa1 	bl	8010bfa <__retarget_lock_release_recursive>
 80106b8:	89ab      	ldrh	r3, [r5, #12]
 80106ba:	065b      	lsls	r3, r3, #25
 80106bc:	f53f af12 	bmi.w	80104e4 <_vfiprintf_r+0x4c>
 80106c0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80106c2:	e711      	b.n	80104e8 <_vfiprintf_r+0x50>
 80106c4:	ab03      	add	r3, sp, #12
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	462a      	mov	r2, r5
 80106ca:	4b09      	ldr	r3, [pc, #36]	; (80106f0 <_vfiprintf_r+0x258>)
 80106cc:	a904      	add	r1, sp, #16
 80106ce:	4630      	mov	r0, r6
 80106d0:	f7fc fad4 	bl	800cc7c <_printf_i>
 80106d4:	e7e4      	b.n	80106a0 <_vfiprintf_r+0x208>
 80106d6:	bf00      	nop
 80106d8:	080115fc 	.word	0x080115fc
 80106dc:	0801161c 	.word	0x0801161c
 80106e0:	080115dc 	.word	0x080115dc
 80106e4:	0801158c 	.word	0x0801158c
 80106e8:	08011596 	.word	0x08011596
 80106ec:	0800c735 	.word	0x0800c735
 80106f0:	08010475 	.word	0x08010475
 80106f4:	08011592 	.word	0x08011592

080106f8 <__swbuf_r>:
 80106f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80106fa:	460e      	mov	r6, r1
 80106fc:	4614      	mov	r4, r2
 80106fe:	4605      	mov	r5, r0
 8010700:	b118      	cbz	r0, 801070a <__swbuf_r+0x12>
 8010702:	6983      	ldr	r3, [r0, #24]
 8010704:	b90b      	cbnz	r3, 801070a <__swbuf_r+0x12>
 8010706:	f000 f9d9 	bl	8010abc <__sinit>
 801070a:	4b21      	ldr	r3, [pc, #132]	; (8010790 <__swbuf_r+0x98>)
 801070c:	429c      	cmp	r4, r3
 801070e:	d12b      	bne.n	8010768 <__swbuf_r+0x70>
 8010710:	686c      	ldr	r4, [r5, #4]
 8010712:	69a3      	ldr	r3, [r4, #24]
 8010714:	60a3      	str	r3, [r4, #8]
 8010716:	89a3      	ldrh	r3, [r4, #12]
 8010718:	071a      	lsls	r2, r3, #28
 801071a:	d52f      	bpl.n	801077c <__swbuf_r+0x84>
 801071c:	6923      	ldr	r3, [r4, #16]
 801071e:	b36b      	cbz	r3, 801077c <__swbuf_r+0x84>
 8010720:	6923      	ldr	r3, [r4, #16]
 8010722:	6820      	ldr	r0, [r4, #0]
 8010724:	1ac0      	subs	r0, r0, r3
 8010726:	6963      	ldr	r3, [r4, #20]
 8010728:	b2f6      	uxtb	r6, r6
 801072a:	4283      	cmp	r3, r0
 801072c:	4637      	mov	r7, r6
 801072e:	dc04      	bgt.n	801073a <__swbuf_r+0x42>
 8010730:	4621      	mov	r1, r4
 8010732:	4628      	mov	r0, r5
 8010734:	f000 f92e 	bl	8010994 <_fflush_r>
 8010738:	bb30      	cbnz	r0, 8010788 <__swbuf_r+0x90>
 801073a:	68a3      	ldr	r3, [r4, #8]
 801073c:	3b01      	subs	r3, #1
 801073e:	60a3      	str	r3, [r4, #8]
 8010740:	6823      	ldr	r3, [r4, #0]
 8010742:	1c5a      	adds	r2, r3, #1
 8010744:	6022      	str	r2, [r4, #0]
 8010746:	701e      	strb	r6, [r3, #0]
 8010748:	6963      	ldr	r3, [r4, #20]
 801074a:	3001      	adds	r0, #1
 801074c:	4283      	cmp	r3, r0
 801074e:	d004      	beq.n	801075a <__swbuf_r+0x62>
 8010750:	89a3      	ldrh	r3, [r4, #12]
 8010752:	07db      	lsls	r3, r3, #31
 8010754:	d506      	bpl.n	8010764 <__swbuf_r+0x6c>
 8010756:	2e0a      	cmp	r6, #10
 8010758:	d104      	bne.n	8010764 <__swbuf_r+0x6c>
 801075a:	4621      	mov	r1, r4
 801075c:	4628      	mov	r0, r5
 801075e:	f000 f919 	bl	8010994 <_fflush_r>
 8010762:	b988      	cbnz	r0, 8010788 <__swbuf_r+0x90>
 8010764:	4638      	mov	r0, r7
 8010766:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010768:	4b0a      	ldr	r3, [pc, #40]	; (8010794 <__swbuf_r+0x9c>)
 801076a:	429c      	cmp	r4, r3
 801076c:	d101      	bne.n	8010772 <__swbuf_r+0x7a>
 801076e:	68ac      	ldr	r4, [r5, #8]
 8010770:	e7cf      	b.n	8010712 <__swbuf_r+0x1a>
 8010772:	4b09      	ldr	r3, [pc, #36]	; (8010798 <__swbuf_r+0xa0>)
 8010774:	429c      	cmp	r4, r3
 8010776:	bf08      	it	eq
 8010778:	68ec      	ldreq	r4, [r5, #12]
 801077a:	e7ca      	b.n	8010712 <__swbuf_r+0x1a>
 801077c:	4621      	mov	r1, r4
 801077e:	4628      	mov	r0, r5
 8010780:	f000 f80c 	bl	801079c <__swsetup_r>
 8010784:	2800      	cmp	r0, #0
 8010786:	d0cb      	beq.n	8010720 <__swbuf_r+0x28>
 8010788:	f04f 37ff 	mov.w	r7, #4294967295
 801078c:	e7ea      	b.n	8010764 <__swbuf_r+0x6c>
 801078e:	bf00      	nop
 8010790:	080115fc 	.word	0x080115fc
 8010794:	0801161c 	.word	0x0801161c
 8010798:	080115dc 	.word	0x080115dc

0801079c <__swsetup_r>:
 801079c:	4b32      	ldr	r3, [pc, #200]	; (8010868 <__swsetup_r+0xcc>)
 801079e:	b570      	push	{r4, r5, r6, lr}
 80107a0:	681d      	ldr	r5, [r3, #0]
 80107a2:	4606      	mov	r6, r0
 80107a4:	460c      	mov	r4, r1
 80107a6:	b125      	cbz	r5, 80107b2 <__swsetup_r+0x16>
 80107a8:	69ab      	ldr	r3, [r5, #24]
 80107aa:	b913      	cbnz	r3, 80107b2 <__swsetup_r+0x16>
 80107ac:	4628      	mov	r0, r5
 80107ae:	f000 f985 	bl	8010abc <__sinit>
 80107b2:	4b2e      	ldr	r3, [pc, #184]	; (801086c <__swsetup_r+0xd0>)
 80107b4:	429c      	cmp	r4, r3
 80107b6:	d10f      	bne.n	80107d8 <__swsetup_r+0x3c>
 80107b8:	686c      	ldr	r4, [r5, #4]
 80107ba:	89a3      	ldrh	r3, [r4, #12]
 80107bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80107c0:	0719      	lsls	r1, r3, #28
 80107c2:	d42c      	bmi.n	801081e <__swsetup_r+0x82>
 80107c4:	06dd      	lsls	r5, r3, #27
 80107c6:	d411      	bmi.n	80107ec <__swsetup_r+0x50>
 80107c8:	2309      	movs	r3, #9
 80107ca:	6033      	str	r3, [r6, #0]
 80107cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80107d0:	81a3      	strh	r3, [r4, #12]
 80107d2:	f04f 30ff 	mov.w	r0, #4294967295
 80107d6:	e03e      	b.n	8010856 <__swsetup_r+0xba>
 80107d8:	4b25      	ldr	r3, [pc, #148]	; (8010870 <__swsetup_r+0xd4>)
 80107da:	429c      	cmp	r4, r3
 80107dc:	d101      	bne.n	80107e2 <__swsetup_r+0x46>
 80107de:	68ac      	ldr	r4, [r5, #8]
 80107e0:	e7eb      	b.n	80107ba <__swsetup_r+0x1e>
 80107e2:	4b24      	ldr	r3, [pc, #144]	; (8010874 <__swsetup_r+0xd8>)
 80107e4:	429c      	cmp	r4, r3
 80107e6:	bf08      	it	eq
 80107e8:	68ec      	ldreq	r4, [r5, #12]
 80107ea:	e7e6      	b.n	80107ba <__swsetup_r+0x1e>
 80107ec:	0758      	lsls	r0, r3, #29
 80107ee:	d512      	bpl.n	8010816 <__swsetup_r+0x7a>
 80107f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80107f2:	b141      	cbz	r1, 8010806 <__swsetup_r+0x6a>
 80107f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80107f8:	4299      	cmp	r1, r3
 80107fa:	d002      	beq.n	8010802 <__swsetup_r+0x66>
 80107fc:	4630      	mov	r0, r6
 80107fe:	f7ff fb27 	bl	800fe50 <_free_r>
 8010802:	2300      	movs	r3, #0
 8010804:	6363      	str	r3, [r4, #52]	; 0x34
 8010806:	89a3      	ldrh	r3, [r4, #12]
 8010808:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801080c:	81a3      	strh	r3, [r4, #12]
 801080e:	2300      	movs	r3, #0
 8010810:	6063      	str	r3, [r4, #4]
 8010812:	6923      	ldr	r3, [r4, #16]
 8010814:	6023      	str	r3, [r4, #0]
 8010816:	89a3      	ldrh	r3, [r4, #12]
 8010818:	f043 0308 	orr.w	r3, r3, #8
 801081c:	81a3      	strh	r3, [r4, #12]
 801081e:	6923      	ldr	r3, [r4, #16]
 8010820:	b94b      	cbnz	r3, 8010836 <__swsetup_r+0x9a>
 8010822:	89a3      	ldrh	r3, [r4, #12]
 8010824:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8010828:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801082c:	d003      	beq.n	8010836 <__swsetup_r+0x9a>
 801082e:	4621      	mov	r1, r4
 8010830:	4630      	mov	r0, r6
 8010832:	f000 fa09 	bl	8010c48 <__smakebuf_r>
 8010836:	89a0      	ldrh	r0, [r4, #12]
 8010838:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801083c:	f010 0301 	ands.w	r3, r0, #1
 8010840:	d00a      	beq.n	8010858 <__swsetup_r+0xbc>
 8010842:	2300      	movs	r3, #0
 8010844:	60a3      	str	r3, [r4, #8]
 8010846:	6963      	ldr	r3, [r4, #20]
 8010848:	425b      	negs	r3, r3
 801084a:	61a3      	str	r3, [r4, #24]
 801084c:	6923      	ldr	r3, [r4, #16]
 801084e:	b943      	cbnz	r3, 8010862 <__swsetup_r+0xc6>
 8010850:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8010854:	d1ba      	bne.n	80107cc <__swsetup_r+0x30>
 8010856:	bd70      	pop	{r4, r5, r6, pc}
 8010858:	0781      	lsls	r1, r0, #30
 801085a:	bf58      	it	pl
 801085c:	6963      	ldrpl	r3, [r4, #20]
 801085e:	60a3      	str	r3, [r4, #8]
 8010860:	e7f4      	b.n	801084c <__swsetup_r+0xb0>
 8010862:	2000      	movs	r0, #0
 8010864:	e7f7      	b.n	8010856 <__swsetup_r+0xba>
 8010866:	bf00      	nop
 8010868:	2000025c 	.word	0x2000025c
 801086c:	080115fc 	.word	0x080115fc
 8010870:	0801161c 	.word	0x0801161c
 8010874:	080115dc 	.word	0x080115dc

08010878 <abort>:
 8010878:	b508      	push	{r3, lr}
 801087a:	2006      	movs	r0, #6
 801087c:	f000 fa54 	bl	8010d28 <raise>
 8010880:	2001      	movs	r0, #1
 8010882:	f7f4 fb2f 	bl	8004ee4 <_exit>
	...

08010888 <__sflush_r>:
 8010888:	898a      	ldrh	r2, [r1, #12]
 801088a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801088e:	4605      	mov	r5, r0
 8010890:	0710      	lsls	r0, r2, #28
 8010892:	460c      	mov	r4, r1
 8010894:	d458      	bmi.n	8010948 <__sflush_r+0xc0>
 8010896:	684b      	ldr	r3, [r1, #4]
 8010898:	2b00      	cmp	r3, #0
 801089a:	dc05      	bgt.n	80108a8 <__sflush_r+0x20>
 801089c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801089e:	2b00      	cmp	r3, #0
 80108a0:	dc02      	bgt.n	80108a8 <__sflush_r+0x20>
 80108a2:	2000      	movs	r0, #0
 80108a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108aa:	2e00      	cmp	r6, #0
 80108ac:	d0f9      	beq.n	80108a2 <__sflush_r+0x1a>
 80108ae:	2300      	movs	r3, #0
 80108b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80108b4:	682f      	ldr	r7, [r5, #0]
 80108b6:	602b      	str	r3, [r5, #0]
 80108b8:	d032      	beq.n	8010920 <__sflush_r+0x98>
 80108ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80108bc:	89a3      	ldrh	r3, [r4, #12]
 80108be:	075a      	lsls	r2, r3, #29
 80108c0:	d505      	bpl.n	80108ce <__sflush_r+0x46>
 80108c2:	6863      	ldr	r3, [r4, #4]
 80108c4:	1ac0      	subs	r0, r0, r3
 80108c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80108c8:	b10b      	cbz	r3, 80108ce <__sflush_r+0x46>
 80108ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80108cc:	1ac0      	subs	r0, r0, r3
 80108ce:	2300      	movs	r3, #0
 80108d0:	4602      	mov	r2, r0
 80108d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80108d4:	6a21      	ldr	r1, [r4, #32]
 80108d6:	4628      	mov	r0, r5
 80108d8:	47b0      	blx	r6
 80108da:	1c43      	adds	r3, r0, #1
 80108dc:	89a3      	ldrh	r3, [r4, #12]
 80108de:	d106      	bne.n	80108ee <__sflush_r+0x66>
 80108e0:	6829      	ldr	r1, [r5, #0]
 80108e2:	291d      	cmp	r1, #29
 80108e4:	d82c      	bhi.n	8010940 <__sflush_r+0xb8>
 80108e6:	4a2a      	ldr	r2, [pc, #168]	; (8010990 <__sflush_r+0x108>)
 80108e8:	40ca      	lsrs	r2, r1
 80108ea:	07d6      	lsls	r6, r2, #31
 80108ec:	d528      	bpl.n	8010940 <__sflush_r+0xb8>
 80108ee:	2200      	movs	r2, #0
 80108f0:	6062      	str	r2, [r4, #4]
 80108f2:	04d9      	lsls	r1, r3, #19
 80108f4:	6922      	ldr	r2, [r4, #16]
 80108f6:	6022      	str	r2, [r4, #0]
 80108f8:	d504      	bpl.n	8010904 <__sflush_r+0x7c>
 80108fa:	1c42      	adds	r2, r0, #1
 80108fc:	d101      	bne.n	8010902 <__sflush_r+0x7a>
 80108fe:	682b      	ldr	r3, [r5, #0]
 8010900:	b903      	cbnz	r3, 8010904 <__sflush_r+0x7c>
 8010902:	6560      	str	r0, [r4, #84]	; 0x54
 8010904:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8010906:	602f      	str	r7, [r5, #0]
 8010908:	2900      	cmp	r1, #0
 801090a:	d0ca      	beq.n	80108a2 <__sflush_r+0x1a>
 801090c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8010910:	4299      	cmp	r1, r3
 8010912:	d002      	beq.n	801091a <__sflush_r+0x92>
 8010914:	4628      	mov	r0, r5
 8010916:	f7ff fa9b 	bl	800fe50 <_free_r>
 801091a:	2000      	movs	r0, #0
 801091c:	6360      	str	r0, [r4, #52]	; 0x34
 801091e:	e7c1      	b.n	80108a4 <__sflush_r+0x1c>
 8010920:	6a21      	ldr	r1, [r4, #32]
 8010922:	2301      	movs	r3, #1
 8010924:	4628      	mov	r0, r5
 8010926:	47b0      	blx	r6
 8010928:	1c41      	adds	r1, r0, #1
 801092a:	d1c7      	bne.n	80108bc <__sflush_r+0x34>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d0c4      	beq.n	80108bc <__sflush_r+0x34>
 8010932:	2b1d      	cmp	r3, #29
 8010934:	d001      	beq.n	801093a <__sflush_r+0xb2>
 8010936:	2b16      	cmp	r3, #22
 8010938:	d101      	bne.n	801093e <__sflush_r+0xb6>
 801093a:	602f      	str	r7, [r5, #0]
 801093c:	e7b1      	b.n	80108a2 <__sflush_r+0x1a>
 801093e:	89a3      	ldrh	r3, [r4, #12]
 8010940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010944:	81a3      	strh	r3, [r4, #12]
 8010946:	e7ad      	b.n	80108a4 <__sflush_r+0x1c>
 8010948:	690f      	ldr	r7, [r1, #16]
 801094a:	2f00      	cmp	r7, #0
 801094c:	d0a9      	beq.n	80108a2 <__sflush_r+0x1a>
 801094e:	0793      	lsls	r3, r2, #30
 8010950:	680e      	ldr	r6, [r1, #0]
 8010952:	bf08      	it	eq
 8010954:	694b      	ldreq	r3, [r1, #20]
 8010956:	600f      	str	r7, [r1, #0]
 8010958:	bf18      	it	ne
 801095a:	2300      	movne	r3, #0
 801095c:	eba6 0807 	sub.w	r8, r6, r7
 8010960:	608b      	str	r3, [r1, #8]
 8010962:	f1b8 0f00 	cmp.w	r8, #0
 8010966:	dd9c      	ble.n	80108a2 <__sflush_r+0x1a>
 8010968:	6a21      	ldr	r1, [r4, #32]
 801096a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801096c:	4643      	mov	r3, r8
 801096e:	463a      	mov	r2, r7
 8010970:	4628      	mov	r0, r5
 8010972:	47b0      	blx	r6
 8010974:	2800      	cmp	r0, #0
 8010976:	dc06      	bgt.n	8010986 <__sflush_r+0xfe>
 8010978:	89a3      	ldrh	r3, [r4, #12]
 801097a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801097e:	81a3      	strh	r3, [r4, #12]
 8010980:	f04f 30ff 	mov.w	r0, #4294967295
 8010984:	e78e      	b.n	80108a4 <__sflush_r+0x1c>
 8010986:	4407      	add	r7, r0
 8010988:	eba8 0800 	sub.w	r8, r8, r0
 801098c:	e7e9      	b.n	8010962 <__sflush_r+0xda>
 801098e:	bf00      	nop
 8010990:	20400001 	.word	0x20400001

08010994 <_fflush_r>:
 8010994:	b538      	push	{r3, r4, r5, lr}
 8010996:	690b      	ldr	r3, [r1, #16]
 8010998:	4605      	mov	r5, r0
 801099a:	460c      	mov	r4, r1
 801099c:	b913      	cbnz	r3, 80109a4 <_fflush_r+0x10>
 801099e:	2500      	movs	r5, #0
 80109a0:	4628      	mov	r0, r5
 80109a2:	bd38      	pop	{r3, r4, r5, pc}
 80109a4:	b118      	cbz	r0, 80109ae <_fflush_r+0x1a>
 80109a6:	6983      	ldr	r3, [r0, #24]
 80109a8:	b90b      	cbnz	r3, 80109ae <_fflush_r+0x1a>
 80109aa:	f000 f887 	bl	8010abc <__sinit>
 80109ae:	4b14      	ldr	r3, [pc, #80]	; (8010a00 <_fflush_r+0x6c>)
 80109b0:	429c      	cmp	r4, r3
 80109b2:	d11b      	bne.n	80109ec <_fflush_r+0x58>
 80109b4:	686c      	ldr	r4, [r5, #4]
 80109b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80109ba:	2b00      	cmp	r3, #0
 80109bc:	d0ef      	beq.n	801099e <_fflush_r+0xa>
 80109be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80109c0:	07d0      	lsls	r0, r2, #31
 80109c2:	d404      	bmi.n	80109ce <_fflush_r+0x3a>
 80109c4:	0599      	lsls	r1, r3, #22
 80109c6:	d402      	bmi.n	80109ce <_fflush_r+0x3a>
 80109c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109ca:	f000 f915 	bl	8010bf8 <__retarget_lock_acquire_recursive>
 80109ce:	4628      	mov	r0, r5
 80109d0:	4621      	mov	r1, r4
 80109d2:	f7ff ff59 	bl	8010888 <__sflush_r>
 80109d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80109d8:	07da      	lsls	r2, r3, #31
 80109da:	4605      	mov	r5, r0
 80109dc:	d4e0      	bmi.n	80109a0 <_fflush_r+0xc>
 80109de:	89a3      	ldrh	r3, [r4, #12]
 80109e0:	059b      	lsls	r3, r3, #22
 80109e2:	d4dd      	bmi.n	80109a0 <_fflush_r+0xc>
 80109e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80109e6:	f000 f908 	bl	8010bfa <__retarget_lock_release_recursive>
 80109ea:	e7d9      	b.n	80109a0 <_fflush_r+0xc>
 80109ec:	4b05      	ldr	r3, [pc, #20]	; (8010a04 <_fflush_r+0x70>)
 80109ee:	429c      	cmp	r4, r3
 80109f0:	d101      	bne.n	80109f6 <_fflush_r+0x62>
 80109f2:	68ac      	ldr	r4, [r5, #8]
 80109f4:	e7df      	b.n	80109b6 <_fflush_r+0x22>
 80109f6:	4b04      	ldr	r3, [pc, #16]	; (8010a08 <_fflush_r+0x74>)
 80109f8:	429c      	cmp	r4, r3
 80109fa:	bf08      	it	eq
 80109fc:	68ec      	ldreq	r4, [r5, #12]
 80109fe:	e7da      	b.n	80109b6 <_fflush_r+0x22>
 8010a00:	080115fc 	.word	0x080115fc
 8010a04:	0801161c 	.word	0x0801161c
 8010a08:	080115dc 	.word	0x080115dc

08010a0c <std>:
 8010a0c:	2300      	movs	r3, #0
 8010a0e:	b510      	push	{r4, lr}
 8010a10:	4604      	mov	r4, r0
 8010a12:	e9c0 3300 	strd	r3, r3, [r0]
 8010a16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010a1a:	6083      	str	r3, [r0, #8]
 8010a1c:	8181      	strh	r1, [r0, #12]
 8010a1e:	6643      	str	r3, [r0, #100]	; 0x64
 8010a20:	81c2      	strh	r2, [r0, #14]
 8010a22:	6183      	str	r3, [r0, #24]
 8010a24:	4619      	mov	r1, r3
 8010a26:	2208      	movs	r2, #8
 8010a28:	305c      	adds	r0, #92	; 0x5c
 8010a2a:	f7fb fddb 	bl	800c5e4 <memset>
 8010a2e:	4b05      	ldr	r3, [pc, #20]	; (8010a44 <std+0x38>)
 8010a30:	6263      	str	r3, [r4, #36]	; 0x24
 8010a32:	4b05      	ldr	r3, [pc, #20]	; (8010a48 <std+0x3c>)
 8010a34:	62a3      	str	r3, [r4, #40]	; 0x28
 8010a36:	4b05      	ldr	r3, [pc, #20]	; (8010a4c <std+0x40>)
 8010a38:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010a3a:	4b05      	ldr	r3, [pc, #20]	; (8010a50 <std+0x44>)
 8010a3c:	6224      	str	r4, [r4, #32]
 8010a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8010a40:	bd10      	pop	{r4, pc}
 8010a42:	bf00      	nop
 8010a44:	08010d61 	.word	0x08010d61
 8010a48:	08010d83 	.word	0x08010d83
 8010a4c:	08010dbb 	.word	0x08010dbb
 8010a50:	08010ddf 	.word	0x08010ddf

08010a54 <_cleanup_r>:
 8010a54:	4901      	ldr	r1, [pc, #4]	; (8010a5c <_cleanup_r+0x8>)
 8010a56:	f000 b8af 	b.w	8010bb8 <_fwalk_reent>
 8010a5a:	bf00      	nop
 8010a5c:	08010995 	.word	0x08010995

08010a60 <__sfmoreglue>:
 8010a60:	b570      	push	{r4, r5, r6, lr}
 8010a62:	2268      	movs	r2, #104	; 0x68
 8010a64:	1e4d      	subs	r5, r1, #1
 8010a66:	4355      	muls	r5, r2
 8010a68:	460e      	mov	r6, r1
 8010a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8010a6e:	f7ff fa5b 	bl	800ff28 <_malloc_r>
 8010a72:	4604      	mov	r4, r0
 8010a74:	b140      	cbz	r0, 8010a88 <__sfmoreglue+0x28>
 8010a76:	2100      	movs	r1, #0
 8010a78:	e9c0 1600 	strd	r1, r6, [r0]
 8010a7c:	300c      	adds	r0, #12
 8010a7e:	60a0      	str	r0, [r4, #8]
 8010a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8010a84:	f7fb fdae 	bl	800c5e4 <memset>
 8010a88:	4620      	mov	r0, r4
 8010a8a:	bd70      	pop	{r4, r5, r6, pc}

08010a8c <__sfp_lock_acquire>:
 8010a8c:	4801      	ldr	r0, [pc, #4]	; (8010a94 <__sfp_lock_acquire+0x8>)
 8010a8e:	f000 b8b3 	b.w	8010bf8 <__retarget_lock_acquire_recursive>
 8010a92:	bf00      	nop
 8010a94:	200010f1 	.word	0x200010f1

08010a98 <__sfp_lock_release>:
 8010a98:	4801      	ldr	r0, [pc, #4]	; (8010aa0 <__sfp_lock_release+0x8>)
 8010a9a:	f000 b8ae 	b.w	8010bfa <__retarget_lock_release_recursive>
 8010a9e:	bf00      	nop
 8010aa0:	200010f1 	.word	0x200010f1

08010aa4 <__sinit_lock_acquire>:
 8010aa4:	4801      	ldr	r0, [pc, #4]	; (8010aac <__sinit_lock_acquire+0x8>)
 8010aa6:	f000 b8a7 	b.w	8010bf8 <__retarget_lock_acquire_recursive>
 8010aaa:	bf00      	nop
 8010aac:	200010f2 	.word	0x200010f2

08010ab0 <__sinit_lock_release>:
 8010ab0:	4801      	ldr	r0, [pc, #4]	; (8010ab8 <__sinit_lock_release+0x8>)
 8010ab2:	f000 b8a2 	b.w	8010bfa <__retarget_lock_release_recursive>
 8010ab6:	bf00      	nop
 8010ab8:	200010f2 	.word	0x200010f2

08010abc <__sinit>:
 8010abc:	b510      	push	{r4, lr}
 8010abe:	4604      	mov	r4, r0
 8010ac0:	f7ff fff0 	bl	8010aa4 <__sinit_lock_acquire>
 8010ac4:	69a3      	ldr	r3, [r4, #24]
 8010ac6:	b11b      	cbz	r3, 8010ad0 <__sinit+0x14>
 8010ac8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010acc:	f7ff bff0 	b.w	8010ab0 <__sinit_lock_release>
 8010ad0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8010ad4:	6523      	str	r3, [r4, #80]	; 0x50
 8010ad6:	4b13      	ldr	r3, [pc, #76]	; (8010b24 <__sinit+0x68>)
 8010ad8:	4a13      	ldr	r2, [pc, #76]	; (8010b28 <__sinit+0x6c>)
 8010ada:	681b      	ldr	r3, [r3, #0]
 8010adc:	62a2      	str	r2, [r4, #40]	; 0x28
 8010ade:	42a3      	cmp	r3, r4
 8010ae0:	bf04      	itt	eq
 8010ae2:	2301      	moveq	r3, #1
 8010ae4:	61a3      	streq	r3, [r4, #24]
 8010ae6:	4620      	mov	r0, r4
 8010ae8:	f000 f820 	bl	8010b2c <__sfp>
 8010aec:	6060      	str	r0, [r4, #4]
 8010aee:	4620      	mov	r0, r4
 8010af0:	f000 f81c 	bl	8010b2c <__sfp>
 8010af4:	60a0      	str	r0, [r4, #8]
 8010af6:	4620      	mov	r0, r4
 8010af8:	f000 f818 	bl	8010b2c <__sfp>
 8010afc:	2200      	movs	r2, #0
 8010afe:	60e0      	str	r0, [r4, #12]
 8010b00:	2104      	movs	r1, #4
 8010b02:	6860      	ldr	r0, [r4, #4]
 8010b04:	f7ff ff82 	bl	8010a0c <std>
 8010b08:	68a0      	ldr	r0, [r4, #8]
 8010b0a:	2201      	movs	r2, #1
 8010b0c:	2109      	movs	r1, #9
 8010b0e:	f7ff ff7d 	bl	8010a0c <std>
 8010b12:	68e0      	ldr	r0, [r4, #12]
 8010b14:	2202      	movs	r2, #2
 8010b16:	2112      	movs	r1, #18
 8010b18:	f7ff ff78 	bl	8010a0c <std>
 8010b1c:	2301      	movs	r3, #1
 8010b1e:	61a3      	str	r3, [r4, #24]
 8010b20:	e7d2      	b.n	8010ac8 <__sinit+0xc>
 8010b22:	bf00      	nop
 8010b24:	08011198 	.word	0x08011198
 8010b28:	08010a55 	.word	0x08010a55

08010b2c <__sfp>:
 8010b2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010b2e:	4607      	mov	r7, r0
 8010b30:	f7ff ffac 	bl	8010a8c <__sfp_lock_acquire>
 8010b34:	4b1e      	ldr	r3, [pc, #120]	; (8010bb0 <__sfp+0x84>)
 8010b36:	681e      	ldr	r6, [r3, #0]
 8010b38:	69b3      	ldr	r3, [r6, #24]
 8010b3a:	b913      	cbnz	r3, 8010b42 <__sfp+0x16>
 8010b3c:	4630      	mov	r0, r6
 8010b3e:	f7ff ffbd 	bl	8010abc <__sinit>
 8010b42:	3648      	adds	r6, #72	; 0x48
 8010b44:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8010b48:	3b01      	subs	r3, #1
 8010b4a:	d503      	bpl.n	8010b54 <__sfp+0x28>
 8010b4c:	6833      	ldr	r3, [r6, #0]
 8010b4e:	b30b      	cbz	r3, 8010b94 <__sfp+0x68>
 8010b50:	6836      	ldr	r6, [r6, #0]
 8010b52:	e7f7      	b.n	8010b44 <__sfp+0x18>
 8010b54:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8010b58:	b9d5      	cbnz	r5, 8010b90 <__sfp+0x64>
 8010b5a:	4b16      	ldr	r3, [pc, #88]	; (8010bb4 <__sfp+0x88>)
 8010b5c:	60e3      	str	r3, [r4, #12]
 8010b5e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8010b62:	6665      	str	r5, [r4, #100]	; 0x64
 8010b64:	f000 f847 	bl	8010bf6 <__retarget_lock_init_recursive>
 8010b68:	f7ff ff96 	bl	8010a98 <__sfp_lock_release>
 8010b6c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8010b70:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8010b74:	6025      	str	r5, [r4, #0]
 8010b76:	61a5      	str	r5, [r4, #24]
 8010b78:	2208      	movs	r2, #8
 8010b7a:	4629      	mov	r1, r5
 8010b7c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8010b80:	f7fb fd30 	bl	800c5e4 <memset>
 8010b84:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8010b88:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8010b8c:	4620      	mov	r0, r4
 8010b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b90:	3468      	adds	r4, #104	; 0x68
 8010b92:	e7d9      	b.n	8010b48 <__sfp+0x1c>
 8010b94:	2104      	movs	r1, #4
 8010b96:	4638      	mov	r0, r7
 8010b98:	f7ff ff62 	bl	8010a60 <__sfmoreglue>
 8010b9c:	4604      	mov	r4, r0
 8010b9e:	6030      	str	r0, [r6, #0]
 8010ba0:	2800      	cmp	r0, #0
 8010ba2:	d1d5      	bne.n	8010b50 <__sfp+0x24>
 8010ba4:	f7ff ff78 	bl	8010a98 <__sfp_lock_release>
 8010ba8:	230c      	movs	r3, #12
 8010baa:	603b      	str	r3, [r7, #0]
 8010bac:	e7ee      	b.n	8010b8c <__sfp+0x60>
 8010bae:	bf00      	nop
 8010bb0:	08011198 	.word	0x08011198
 8010bb4:	ffff0001 	.word	0xffff0001

08010bb8 <_fwalk_reent>:
 8010bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010bbc:	4606      	mov	r6, r0
 8010bbe:	4688      	mov	r8, r1
 8010bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8010bc4:	2700      	movs	r7, #0
 8010bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010bca:	f1b9 0901 	subs.w	r9, r9, #1
 8010bce:	d505      	bpl.n	8010bdc <_fwalk_reent+0x24>
 8010bd0:	6824      	ldr	r4, [r4, #0]
 8010bd2:	2c00      	cmp	r4, #0
 8010bd4:	d1f7      	bne.n	8010bc6 <_fwalk_reent+0xe>
 8010bd6:	4638      	mov	r0, r7
 8010bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010bdc:	89ab      	ldrh	r3, [r5, #12]
 8010bde:	2b01      	cmp	r3, #1
 8010be0:	d907      	bls.n	8010bf2 <_fwalk_reent+0x3a>
 8010be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010be6:	3301      	adds	r3, #1
 8010be8:	d003      	beq.n	8010bf2 <_fwalk_reent+0x3a>
 8010bea:	4629      	mov	r1, r5
 8010bec:	4630      	mov	r0, r6
 8010bee:	47c0      	blx	r8
 8010bf0:	4307      	orrs	r7, r0
 8010bf2:	3568      	adds	r5, #104	; 0x68
 8010bf4:	e7e9      	b.n	8010bca <_fwalk_reent+0x12>

08010bf6 <__retarget_lock_init_recursive>:
 8010bf6:	4770      	bx	lr

08010bf8 <__retarget_lock_acquire_recursive>:
 8010bf8:	4770      	bx	lr

08010bfa <__retarget_lock_release_recursive>:
 8010bfa:	4770      	bx	lr

08010bfc <__swhatbuf_r>:
 8010bfc:	b570      	push	{r4, r5, r6, lr}
 8010bfe:	460e      	mov	r6, r1
 8010c00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010c04:	2900      	cmp	r1, #0
 8010c06:	b096      	sub	sp, #88	; 0x58
 8010c08:	4614      	mov	r4, r2
 8010c0a:	461d      	mov	r5, r3
 8010c0c:	da08      	bge.n	8010c20 <__swhatbuf_r+0x24>
 8010c0e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8010c12:	2200      	movs	r2, #0
 8010c14:	602a      	str	r2, [r5, #0]
 8010c16:	061a      	lsls	r2, r3, #24
 8010c18:	d410      	bmi.n	8010c3c <__swhatbuf_r+0x40>
 8010c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8010c1e:	e00e      	b.n	8010c3e <__swhatbuf_r+0x42>
 8010c20:	466a      	mov	r2, sp
 8010c22:	f000 f903 	bl	8010e2c <_fstat_r>
 8010c26:	2800      	cmp	r0, #0
 8010c28:	dbf1      	blt.n	8010c0e <__swhatbuf_r+0x12>
 8010c2a:	9a01      	ldr	r2, [sp, #4]
 8010c2c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8010c30:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8010c34:	425a      	negs	r2, r3
 8010c36:	415a      	adcs	r2, r3
 8010c38:	602a      	str	r2, [r5, #0]
 8010c3a:	e7ee      	b.n	8010c1a <__swhatbuf_r+0x1e>
 8010c3c:	2340      	movs	r3, #64	; 0x40
 8010c3e:	2000      	movs	r0, #0
 8010c40:	6023      	str	r3, [r4, #0]
 8010c42:	b016      	add	sp, #88	; 0x58
 8010c44:	bd70      	pop	{r4, r5, r6, pc}
	...

08010c48 <__smakebuf_r>:
 8010c48:	898b      	ldrh	r3, [r1, #12]
 8010c4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8010c4c:	079d      	lsls	r5, r3, #30
 8010c4e:	4606      	mov	r6, r0
 8010c50:	460c      	mov	r4, r1
 8010c52:	d507      	bpl.n	8010c64 <__smakebuf_r+0x1c>
 8010c54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8010c58:	6023      	str	r3, [r4, #0]
 8010c5a:	6123      	str	r3, [r4, #16]
 8010c5c:	2301      	movs	r3, #1
 8010c5e:	6163      	str	r3, [r4, #20]
 8010c60:	b002      	add	sp, #8
 8010c62:	bd70      	pop	{r4, r5, r6, pc}
 8010c64:	ab01      	add	r3, sp, #4
 8010c66:	466a      	mov	r2, sp
 8010c68:	f7ff ffc8 	bl	8010bfc <__swhatbuf_r>
 8010c6c:	9900      	ldr	r1, [sp, #0]
 8010c6e:	4605      	mov	r5, r0
 8010c70:	4630      	mov	r0, r6
 8010c72:	f7ff f959 	bl	800ff28 <_malloc_r>
 8010c76:	b948      	cbnz	r0, 8010c8c <__smakebuf_r+0x44>
 8010c78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010c7c:	059a      	lsls	r2, r3, #22
 8010c7e:	d4ef      	bmi.n	8010c60 <__smakebuf_r+0x18>
 8010c80:	f023 0303 	bic.w	r3, r3, #3
 8010c84:	f043 0302 	orr.w	r3, r3, #2
 8010c88:	81a3      	strh	r3, [r4, #12]
 8010c8a:	e7e3      	b.n	8010c54 <__smakebuf_r+0xc>
 8010c8c:	4b0d      	ldr	r3, [pc, #52]	; (8010cc4 <__smakebuf_r+0x7c>)
 8010c8e:	62b3      	str	r3, [r6, #40]	; 0x28
 8010c90:	89a3      	ldrh	r3, [r4, #12]
 8010c92:	6020      	str	r0, [r4, #0]
 8010c94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010c98:	81a3      	strh	r3, [r4, #12]
 8010c9a:	9b00      	ldr	r3, [sp, #0]
 8010c9c:	6163      	str	r3, [r4, #20]
 8010c9e:	9b01      	ldr	r3, [sp, #4]
 8010ca0:	6120      	str	r0, [r4, #16]
 8010ca2:	b15b      	cbz	r3, 8010cbc <__smakebuf_r+0x74>
 8010ca4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010ca8:	4630      	mov	r0, r6
 8010caa:	f000 f8d1 	bl	8010e50 <_isatty_r>
 8010cae:	b128      	cbz	r0, 8010cbc <__smakebuf_r+0x74>
 8010cb0:	89a3      	ldrh	r3, [r4, #12]
 8010cb2:	f023 0303 	bic.w	r3, r3, #3
 8010cb6:	f043 0301 	orr.w	r3, r3, #1
 8010cba:	81a3      	strh	r3, [r4, #12]
 8010cbc:	89a0      	ldrh	r0, [r4, #12]
 8010cbe:	4305      	orrs	r5, r0
 8010cc0:	81a5      	strh	r5, [r4, #12]
 8010cc2:	e7cd      	b.n	8010c60 <__smakebuf_r+0x18>
 8010cc4:	08010a55 	.word	0x08010a55

08010cc8 <_malloc_usable_size_r>:
 8010cc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010ccc:	1f18      	subs	r0, r3, #4
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	bfbc      	itt	lt
 8010cd2:	580b      	ldrlt	r3, [r1, r0]
 8010cd4:	18c0      	addlt	r0, r0, r3
 8010cd6:	4770      	bx	lr

08010cd8 <_raise_r>:
 8010cd8:	291f      	cmp	r1, #31
 8010cda:	b538      	push	{r3, r4, r5, lr}
 8010cdc:	4604      	mov	r4, r0
 8010cde:	460d      	mov	r5, r1
 8010ce0:	d904      	bls.n	8010cec <_raise_r+0x14>
 8010ce2:	2316      	movs	r3, #22
 8010ce4:	6003      	str	r3, [r0, #0]
 8010ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8010cea:	bd38      	pop	{r3, r4, r5, pc}
 8010cec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8010cee:	b112      	cbz	r2, 8010cf6 <_raise_r+0x1e>
 8010cf0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010cf4:	b94b      	cbnz	r3, 8010d0a <_raise_r+0x32>
 8010cf6:	4620      	mov	r0, r4
 8010cf8:	f000 f830 	bl	8010d5c <_getpid_r>
 8010cfc:	462a      	mov	r2, r5
 8010cfe:	4601      	mov	r1, r0
 8010d00:	4620      	mov	r0, r4
 8010d02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010d06:	f000 b817 	b.w	8010d38 <_kill_r>
 8010d0a:	2b01      	cmp	r3, #1
 8010d0c:	d00a      	beq.n	8010d24 <_raise_r+0x4c>
 8010d0e:	1c59      	adds	r1, r3, #1
 8010d10:	d103      	bne.n	8010d1a <_raise_r+0x42>
 8010d12:	2316      	movs	r3, #22
 8010d14:	6003      	str	r3, [r0, #0]
 8010d16:	2001      	movs	r0, #1
 8010d18:	e7e7      	b.n	8010cea <_raise_r+0x12>
 8010d1a:	2400      	movs	r4, #0
 8010d1c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8010d20:	4628      	mov	r0, r5
 8010d22:	4798      	blx	r3
 8010d24:	2000      	movs	r0, #0
 8010d26:	e7e0      	b.n	8010cea <_raise_r+0x12>

08010d28 <raise>:
 8010d28:	4b02      	ldr	r3, [pc, #8]	; (8010d34 <raise+0xc>)
 8010d2a:	4601      	mov	r1, r0
 8010d2c:	6818      	ldr	r0, [r3, #0]
 8010d2e:	f7ff bfd3 	b.w	8010cd8 <_raise_r>
 8010d32:	bf00      	nop
 8010d34:	2000025c 	.word	0x2000025c

08010d38 <_kill_r>:
 8010d38:	b538      	push	{r3, r4, r5, lr}
 8010d3a:	4d07      	ldr	r5, [pc, #28]	; (8010d58 <_kill_r+0x20>)
 8010d3c:	2300      	movs	r3, #0
 8010d3e:	4604      	mov	r4, r0
 8010d40:	4608      	mov	r0, r1
 8010d42:	4611      	mov	r1, r2
 8010d44:	602b      	str	r3, [r5, #0]
 8010d46:	f7f4 f8bd 	bl	8004ec4 <_kill>
 8010d4a:	1c43      	adds	r3, r0, #1
 8010d4c:	d102      	bne.n	8010d54 <_kill_r+0x1c>
 8010d4e:	682b      	ldr	r3, [r5, #0]
 8010d50:	b103      	cbz	r3, 8010d54 <_kill_r+0x1c>
 8010d52:	6023      	str	r3, [r4, #0]
 8010d54:	bd38      	pop	{r3, r4, r5, pc}
 8010d56:	bf00      	nop
 8010d58:	200010ec 	.word	0x200010ec

08010d5c <_getpid_r>:
 8010d5c:	f7f4 b8aa 	b.w	8004eb4 <_getpid>

08010d60 <__sread>:
 8010d60:	b510      	push	{r4, lr}
 8010d62:	460c      	mov	r4, r1
 8010d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d68:	f000 f894 	bl	8010e94 <_read_r>
 8010d6c:	2800      	cmp	r0, #0
 8010d6e:	bfab      	itete	ge
 8010d70:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010d72:	89a3      	ldrhlt	r3, [r4, #12]
 8010d74:	181b      	addge	r3, r3, r0
 8010d76:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010d7a:	bfac      	ite	ge
 8010d7c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010d7e:	81a3      	strhlt	r3, [r4, #12]
 8010d80:	bd10      	pop	{r4, pc}

08010d82 <__swrite>:
 8010d82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010d86:	461f      	mov	r7, r3
 8010d88:	898b      	ldrh	r3, [r1, #12]
 8010d8a:	05db      	lsls	r3, r3, #23
 8010d8c:	4605      	mov	r5, r0
 8010d8e:	460c      	mov	r4, r1
 8010d90:	4616      	mov	r6, r2
 8010d92:	d505      	bpl.n	8010da0 <__swrite+0x1e>
 8010d94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010d98:	2302      	movs	r3, #2
 8010d9a:	2200      	movs	r2, #0
 8010d9c:	f000 f868 	bl	8010e70 <_lseek_r>
 8010da0:	89a3      	ldrh	r3, [r4, #12]
 8010da2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010da6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010daa:	81a3      	strh	r3, [r4, #12]
 8010dac:	4632      	mov	r2, r6
 8010dae:	463b      	mov	r3, r7
 8010db0:	4628      	mov	r0, r5
 8010db2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010db6:	f000 b817 	b.w	8010de8 <_write_r>

08010dba <__sseek>:
 8010dba:	b510      	push	{r4, lr}
 8010dbc:	460c      	mov	r4, r1
 8010dbe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010dc2:	f000 f855 	bl	8010e70 <_lseek_r>
 8010dc6:	1c43      	adds	r3, r0, #1
 8010dc8:	89a3      	ldrh	r3, [r4, #12]
 8010dca:	bf15      	itete	ne
 8010dcc:	6560      	strne	r0, [r4, #84]	; 0x54
 8010dce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010dd2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010dd6:	81a3      	strheq	r3, [r4, #12]
 8010dd8:	bf18      	it	ne
 8010dda:	81a3      	strhne	r3, [r4, #12]
 8010ddc:	bd10      	pop	{r4, pc}

08010dde <__sclose>:
 8010dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010de2:	f000 b813 	b.w	8010e0c <_close_r>
	...

08010de8 <_write_r>:
 8010de8:	b538      	push	{r3, r4, r5, lr}
 8010dea:	4d07      	ldr	r5, [pc, #28]	; (8010e08 <_write_r+0x20>)
 8010dec:	4604      	mov	r4, r0
 8010dee:	4608      	mov	r0, r1
 8010df0:	4611      	mov	r1, r2
 8010df2:	2200      	movs	r2, #0
 8010df4:	602a      	str	r2, [r5, #0]
 8010df6:	461a      	mov	r2, r3
 8010df8:	f7f4 f89b 	bl	8004f32 <_write>
 8010dfc:	1c43      	adds	r3, r0, #1
 8010dfe:	d102      	bne.n	8010e06 <_write_r+0x1e>
 8010e00:	682b      	ldr	r3, [r5, #0]
 8010e02:	b103      	cbz	r3, 8010e06 <_write_r+0x1e>
 8010e04:	6023      	str	r3, [r4, #0]
 8010e06:	bd38      	pop	{r3, r4, r5, pc}
 8010e08:	200010ec 	.word	0x200010ec

08010e0c <_close_r>:
 8010e0c:	b538      	push	{r3, r4, r5, lr}
 8010e0e:	4d06      	ldr	r5, [pc, #24]	; (8010e28 <_close_r+0x1c>)
 8010e10:	2300      	movs	r3, #0
 8010e12:	4604      	mov	r4, r0
 8010e14:	4608      	mov	r0, r1
 8010e16:	602b      	str	r3, [r5, #0]
 8010e18:	f7f4 f8a7 	bl	8004f6a <_close>
 8010e1c:	1c43      	adds	r3, r0, #1
 8010e1e:	d102      	bne.n	8010e26 <_close_r+0x1a>
 8010e20:	682b      	ldr	r3, [r5, #0]
 8010e22:	b103      	cbz	r3, 8010e26 <_close_r+0x1a>
 8010e24:	6023      	str	r3, [r4, #0]
 8010e26:	bd38      	pop	{r3, r4, r5, pc}
 8010e28:	200010ec 	.word	0x200010ec

08010e2c <_fstat_r>:
 8010e2c:	b538      	push	{r3, r4, r5, lr}
 8010e2e:	4d07      	ldr	r5, [pc, #28]	; (8010e4c <_fstat_r+0x20>)
 8010e30:	2300      	movs	r3, #0
 8010e32:	4604      	mov	r4, r0
 8010e34:	4608      	mov	r0, r1
 8010e36:	4611      	mov	r1, r2
 8010e38:	602b      	str	r3, [r5, #0]
 8010e3a:	f7f4 f8a2 	bl	8004f82 <_fstat>
 8010e3e:	1c43      	adds	r3, r0, #1
 8010e40:	d102      	bne.n	8010e48 <_fstat_r+0x1c>
 8010e42:	682b      	ldr	r3, [r5, #0]
 8010e44:	b103      	cbz	r3, 8010e48 <_fstat_r+0x1c>
 8010e46:	6023      	str	r3, [r4, #0]
 8010e48:	bd38      	pop	{r3, r4, r5, pc}
 8010e4a:	bf00      	nop
 8010e4c:	200010ec 	.word	0x200010ec

08010e50 <_isatty_r>:
 8010e50:	b538      	push	{r3, r4, r5, lr}
 8010e52:	4d06      	ldr	r5, [pc, #24]	; (8010e6c <_isatty_r+0x1c>)
 8010e54:	2300      	movs	r3, #0
 8010e56:	4604      	mov	r4, r0
 8010e58:	4608      	mov	r0, r1
 8010e5a:	602b      	str	r3, [r5, #0]
 8010e5c:	f7f4 f8a1 	bl	8004fa2 <_isatty>
 8010e60:	1c43      	adds	r3, r0, #1
 8010e62:	d102      	bne.n	8010e6a <_isatty_r+0x1a>
 8010e64:	682b      	ldr	r3, [r5, #0]
 8010e66:	b103      	cbz	r3, 8010e6a <_isatty_r+0x1a>
 8010e68:	6023      	str	r3, [r4, #0]
 8010e6a:	bd38      	pop	{r3, r4, r5, pc}
 8010e6c:	200010ec 	.word	0x200010ec

08010e70 <_lseek_r>:
 8010e70:	b538      	push	{r3, r4, r5, lr}
 8010e72:	4d07      	ldr	r5, [pc, #28]	; (8010e90 <_lseek_r+0x20>)
 8010e74:	4604      	mov	r4, r0
 8010e76:	4608      	mov	r0, r1
 8010e78:	4611      	mov	r1, r2
 8010e7a:	2200      	movs	r2, #0
 8010e7c:	602a      	str	r2, [r5, #0]
 8010e7e:	461a      	mov	r2, r3
 8010e80:	f7f4 f89a 	bl	8004fb8 <_lseek>
 8010e84:	1c43      	adds	r3, r0, #1
 8010e86:	d102      	bne.n	8010e8e <_lseek_r+0x1e>
 8010e88:	682b      	ldr	r3, [r5, #0]
 8010e8a:	b103      	cbz	r3, 8010e8e <_lseek_r+0x1e>
 8010e8c:	6023      	str	r3, [r4, #0]
 8010e8e:	bd38      	pop	{r3, r4, r5, pc}
 8010e90:	200010ec 	.word	0x200010ec

08010e94 <_read_r>:
 8010e94:	b538      	push	{r3, r4, r5, lr}
 8010e96:	4d07      	ldr	r5, [pc, #28]	; (8010eb4 <_read_r+0x20>)
 8010e98:	4604      	mov	r4, r0
 8010e9a:	4608      	mov	r0, r1
 8010e9c:	4611      	mov	r1, r2
 8010e9e:	2200      	movs	r2, #0
 8010ea0:	602a      	str	r2, [r5, #0]
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	f7f4 f828 	bl	8004ef8 <_read>
 8010ea8:	1c43      	adds	r3, r0, #1
 8010eaa:	d102      	bne.n	8010eb2 <_read_r+0x1e>
 8010eac:	682b      	ldr	r3, [r5, #0]
 8010eae:	b103      	cbz	r3, 8010eb2 <_read_r+0x1e>
 8010eb0:	6023      	str	r3, [r4, #0]
 8010eb2:	bd38      	pop	{r3, r4, r5, pc}
 8010eb4:	200010ec 	.word	0x200010ec

08010eb8 <acosf>:
 8010eb8:	b508      	push	{r3, lr}
 8010eba:	ed2d 8b02 	vpush	{d8}
 8010ebe:	eeb0 8a40 	vmov.f32	s16, s0
 8010ec2:	f000 f843 	bl	8010f4c <__ieee754_acosf>
 8010ec6:	eeb4 8a48 	vcmp.f32	s16, s16
 8010eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ece:	eef0 8a40 	vmov.f32	s17, s0
 8010ed2:	d615      	bvs.n	8010f00 <acosf+0x48>
 8010ed4:	eeb0 0a48 	vmov.f32	s0, s16
 8010ed8:	f000 f933 	bl	8011142 <fabsf>
 8010edc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8010ee0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8010ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010ee8:	dd0a      	ble.n	8010f00 <acosf+0x48>
 8010eea:	f7fb fb43 	bl	800c574 <__errno>
 8010eee:	ecbd 8b02 	vpop	{d8}
 8010ef2:	2321      	movs	r3, #33	; 0x21
 8010ef4:	6003      	str	r3, [r0, #0]
 8010ef6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010efa:	4804      	ldr	r0, [pc, #16]	; (8010f0c <acosf+0x54>)
 8010efc:	f7fc b9f4 	b.w	800d2e8 <nanf>
 8010f00:	eeb0 0a68 	vmov.f32	s0, s17
 8010f04:	ecbd 8b02 	vpop	{d8}
 8010f08:	bd08      	pop	{r3, pc}
 8010f0a:	bf00      	nop
 8010f0c:	080115d8 	.word	0x080115d8

08010f10 <sqrtf>:
 8010f10:	b508      	push	{r3, lr}
 8010f12:	ed2d 8b02 	vpush	{d8}
 8010f16:	eeb0 8a40 	vmov.f32	s16, s0
 8010f1a:	f000 f90f 	bl	801113c <__ieee754_sqrtf>
 8010f1e:	eeb4 8a48 	vcmp.f32	s16, s16
 8010f22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f26:	d60c      	bvs.n	8010f42 <sqrtf+0x32>
 8010f28:	eddf 8a07 	vldr	s17, [pc, #28]	; 8010f48 <sqrtf+0x38>
 8010f2c:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010f30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f34:	d505      	bpl.n	8010f42 <sqrtf+0x32>
 8010f36:	f7fb fb1d 	bl	800c574 <__errno>
 8010f3a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010f3e:	2321      	movs	r3, #33	; 0x21
 8010f40:	6003      	str	r3, [r0, #0]
 8010f42:	ecbd 8b02 	vpop	{d8}
 8010f46:	bd08      	pop	{r3, pc}
 8010f48:	00000000 	.word	0x00000000

08010f4c <__ieee754_acosf>:
 8010f4c:	b508      	push	{r3, lr}
 8010f4e:	ee10 3a10 	vmov	r3, s0
 8010f52:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8010f56:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 8010f5a:	ed2d 8b0c 	vpush	{d8-d13}
 8010f5e:	d10a      	bne.n	8010f76 <__ieee754_acosf+0x2a>
 8010f60:	ed9f 0a65 	vldr	s0, [pc, #404]	; 80110f8 <__ieee754_acosf+0x1ac>
 8010f64:	ed9f 8a65 	vldr	s16, [pc, #404]	; 80110fc <__ieee754_acosf+0x1b0>
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	bfd8      	it	le
 8010f6c:	eeb0 0a48 	vmovle.f32	s0, s16
 8010f70:	ecbd 8b0c 	vpop	{d8-d13}
 8010f74:	bd08      	pop	{r3, pc}
 8010f76:	dd04      	ble.n	8010f82 <__ieee754_acosf+0x36>
 8010f78:	ee30 8a40 	vsub.f32	s16, s0, s0
 8010f7c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010f80:	e7f6      	b.n	8010f70 <__ieee754_acosf+0x24>
 8010f82:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8010f86:	da3c      	bge.n	8011002 <__ieee754_acosf+0xb6>
 8010f88:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 8010f8c:	f340 80b1 	ble.w	80110f2 <__ieee754_acosf+0x1a6>
 8010f90:	ee60 7a00 	vmul.f32	s15, s0, s0
 8010f94:	eddf 6a5a 	vldr	s13, [pc, #360]	; 8011100 <__ieee754_acosf+0x1b4>
 8010f98:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8011104 <__ieee754_acosf+0x1b8>
 8010f9c:	ed9f 6a5a 	vldr	s12, [pc, #360]	; 8011108 <__ieee754_acosf+0x1bc>
 8010fa0:	ed9f 8a5a 	vldr	s16, [pc, #360]	; 801110c <__ieee754_acosf+0x1c0>
 8010fa4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 8010fa8:	eddf 6a59 	vldr	s13, [pc, #356]	; 8011110 <__ieee754_acosf+0x1c4>
 8010fac:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fb0:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8011114 <__ieee754_acosf+0x1c8>
 8010fb4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010fb8:	eddf 6a57 	vldr	s13, [pc, #348]	; 8011118 <__ieee754_acosf+0x1cc>
 8010fbc:	eee7 6a27 	vfma.f32	s13, s14, s15
 8010fc0:	ed9f 7a56 	vldr	s14, [pc, #344]	; 801111c <__ieee754_acosf+0x1d0>
 8010fc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8010fc8:	eddf 6a55 	vldr	s13, [pc, #340]	; 8011120 <__ieee754_acosf+0x1d4>
 8010fcc:	eea7 6aa6 	vfma.f32	s12, s15, s13
 8010fd0:	eddf 6a54 	vldr	s13, [pc, #336]	; 8011124 <__ieee754_acosf+0x1d8>
 8010fd4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010fd8:	ed9f 6a53 	vldr	s12, [pc, #332]	; 8011128 <__ieee754_acosf+0x1dc>
 8010fdc:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8010fe0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010fe4:	eee6 6a27 	vfma.f32	s13, s12, s15
 8010fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010fec:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8010ff0:	eea0 8a67 	vfms.f32	s16, s0, s15
 8010ff4:	eddf 7a4d 	vldr	s15, [pc, #308]	; 801112c <__ieee754_acosf+0x1e0>
 8010ff8:	ee30 0a48 	vsub.f32	s0, s0, s16
 8010ffc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8011000:	e7b6      	b.n	8010f70 <__ieee754_acosf+0x24>
 8011002:	2b00      	cmp	r3, #0
 8011004:	eddf da3e 	vldr	s27, [pc, #248]	; 8011100 <__ieee754_acosf+0x1b4>
 8011008:	eddf ca3e 	vldr	s25, [pc, #248]	; 8011104 <__ieee754_acosf+0x1b8>
 801100c:	ed9f ca40 	vldr	s24, [pc, #256]	; 8011110 <__ieee754_acosf+0x1c4>
 8011010:	eddf ba40 	vldr	s23, [pc, #256]	; 8011114 <__ieee754_acosf+0x1c8>
 8011014:	ed9f ba40 	vldr	s22, [pc, #256]	; 8011118 <__ieee754_acosf+0x1cc>
 8011018:	eddf 8a40 	vldr	s17, [pc, #256]	; 801111c <__ieee754_acosf+0x1d0>
 801101c:	ed9f da40 	vldr	s26, [pc, #256]	; 8011120 <__ieee754_acosf+0x1d4>
 8011020:	eddf aa39 	vldr	s21, [pc, #228]	; 8011108 <__ieee754_acosf+0x1bc>
 8011024:	ed9f aa3f 	vldr	s20, [pc, #252]	; 8011124 <__ieee754_acosf+0x1d8>
 8011028:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8011128 <__ieee754_acosf+0x1dc>
 801102c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8011030:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8011034:	da28      	bge.n	8011088 <__ieee754_acosf+0x13c>
 8011036:	ee30 0a09 	vadd.f32	s0, s0, s18
 801103a:	ee20 0a27 	vmul.f32	s0, s0, s15
 801103e:	eee0 ca2d 	vfma.f32	s25, s0, s27
 8011042:	eee0 aa0d 	vfma.f32	s21, s0, s26
 8011046:	eeac ca80 	vfma.f32	s24, s25, s0
 801104a:	eeaa aa80 	vfma.f32	s20, s21, s0
 801104e:	eeec ba00 	vfma.f32	s23, s24, s0
 8011052:	eeea 9a00 	vfma.f32	s19, s20, s0
 8011056:	eeab ba80 	vfma.f32	s22, s23, s0
 801105a:	eea9 9a80 	vfma.f32	s18, s19, s0
 801105e:	eeeb 8a00 	vfma.f32	s17, s22, s0
 8011062:	ee68 8a80 	vmul.f32	s17, s17, s0
 8011066:	f000 f869 	bl	801113c <__ieee754_sqrtf>
 801106a:	ee88 7a89 	vdiv.f32	s14, s17, s18
 801106e:	eddf 7a30 	vldr	s15, [pc, #192]	; 8011130 <__ieee754_acosf+0x1e4>
 8011072:	eee0 7a07 	vfma.f32	s15, s0, s14
 8011076:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 801107a:	ee77 7a80 	vadd.f32	s15, s15, s0
 801107e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8011134 <__ieee754_acosf+0x1e8>
 8011082:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8011086:	e773      	b.n	8010f70 <__ieee754_acosf+0x24>
 8011088:	ee39 8a40 	vsub.f32	s16, s18, s0
 801108c:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011090:	eeb0 0a48 	vmov.f32	s0, s16
 8011094:	f000 f852 	bl	801113c <__ieee754_sqrtf>
 8011098:	eee8 ca2d 	vfma.f32	s25, s16, s27
 801109c:	eee8 aa0d 	vfma.f32	s21, s16, s26
 80110a0:	eeac ca88 	vfma.f32	s24, s25, s16
 80110a4:	eeaa aa88 	vfma.f32	s20, s21, s16
 80110a8:	eeec ba08 	vfma.f32	s23, s24, s16
 80110ac:	ee10 3a10 	vmov	r3, s0
 80110b0:	eeab ba88 	vfma.f32	s22, s23, s16
 80110b4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80110b8:	f023 030f 	bic.w	r3, r3, #15
 80110bc:	eeea 9a08 	vfma.f32	s19, s20, s16
 80110c0:	ee07 3a90 	vmov	s15, r3
 80110c4:	eeeb 8a08 	vfma.f32	s17, s22, s16
 80110c8:	eeb0 6a48 	vmov.f32	s12, s16
 80110cc:	eea7 6ae7 	vfms.f32	s12, s15, s15
 80110d0:	eea9 9a88 	vfma.f32	s18, s19, s16
 80110d4:	ee70 6a27 	vadd.f32	s13, s0, s15
 80110d8:	ee68 8a88 	vmul.f32	s17, s17, s16
 80110dc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 80110e0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 80110e4:	eea0 7a26 	vfma.f32	s14, s0, s13
 80110e8:	ee37 0a87 	vadd.f32	s0, s15, s14
 80110ec:	ee30 0a00 	vadd.f32	s0, s0, s0
 80110f0:	e73e      	b.n	8010f70 <__ieee754_acosf+0x24>
 80110f2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 8011138 <__ieee754_acosf+0x1ec>
 80110f6:	e73b      	b.n	8010f70 <__ieee754_acosf+0x24>
 80110f8:	00000000 	.word	0x00000000
 80110fc:	40490fdb 	.word	0x40490fdb
 8011100:	3811ef08 	.word	0x3811ef08
 8011104:	3a4f7f04 	.word	0x3a4f7f04
 8011108:	bf303361 	.word	0xbf303361
 801110c:	33a22168 	.word	0x33a22168
 8011110:	bd241146 	.word	0xbd241146
 8011114:	3e4e0aa8 	.word	0x3e4e0aa8
 8011118:	bea6b090 	.word	0xbea6b090
 801111c:	3e2aaaab 	.word	0x3e2aaaab
 8011120:	3d9dc62e 	.word	0x3d9dc62e
 8011124:	4001572d 	.word	0x4001572d
 8011128:	c019d139 	.word	0xc019d139
 801112c:	3fc90fda 	.word	0x3fc90fda
 8011130:	b3a22168 	.word	0xb3a22168
 8011134:	40490fda 	.word	0x40490fda
 8011138:	3fc90fdb 	.word	0x3fc90fdb

0801113c <__ieee754_sqrtf>:
 801113c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8011140:	4770      	bx	lr

08011142 <fabsf>:
 8011142:	ee10 3a10 	vmov	r3, s0
 8011146:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801114a:	ee00 3a10 	vmov	s0, r3
 801114e:	4770      	bx	lr

08011150 <_init>:
 8011150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011152:	bf00      	nop
 8011154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011156:	bc08      	pop	{r3}
 8011158:	469e      	mov	lr, r3
 801115a:	4770      	bx	lr

0801115c <_fini>:
 801115c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801115e:	bf00      	nop
 8011160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011162:	bc08      	pop	{r3}
 8011164:	469e      	mov	lr, r3
 8011166:	4770      	bx	lr
