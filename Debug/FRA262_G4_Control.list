
FRA262_G4_Control.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08006f70  08006f70  00016f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f90  08006f90  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08006f90  08006f90  00016f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f98  08006f98  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f98  08006f98  00016f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f9c  08006f9c  00016f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08006fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000037c  20000080  08007020  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200003fc  08007020  000203fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f31c  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e44  00000000  00000000  0002f3cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d78  00000000  00000000  00031210  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000cd0  00000000  00000000  00031f88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001779e  00000000  00000000  00032c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f638  00000000  00000000  0004a3f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a226  00000000  00000000  00059a2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3c54  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ccc  00000000  00000000  000f3ca4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08006f58 	.word	0x08006f58

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08006f58 	.word	0x08006f58

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_frsub>:
 8000ba0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000ba4:	e002      	b.n	8000bac <__addsf3>
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_fsub>:
 8000ba8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bac <__addsf3>:
 8000bac:	0042      	lsls	r2, r0, #1
 8000bae:	bf1f      	itttt	ne
 8000bb0:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bb4:	ea92 0f03 	teqne	r2, r3
 8000bb8:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bbc:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bc0:	d06a      	beq.n	8000c98 <__addsf3+0xec>
 8000bc2:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bc6:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bca:	bfc1      	itttt	gt
 8000bcc:	18d2      	addgt	r2, r2, r3
 8000bce:	4041      	eorgt	r1, r0
 8000bd0:	4048      	eorgt	r0, r1
 8000bd2:	4041      	eorgt	r1, r0
 8000bd4:	bfb8      	it	lt
 8000bd6:	425b      	neglt	r3, r3
 8000bd8:	2b19      	cmp	r3, #25
 8000bda:	bf88      	it	hi
 8000bdc:	4770      	bxhi	lr
 8000bde:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bea:	bf18      	it	ne
 8000bec:	4240      	negne	r0, r0
 8000bee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bf2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bf6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bfa:	bf18      	it	ne
 8000bfc:	4249      	negne	r1, r1
 8000bfe:	ea92 0f03 	teq	r2, r3
 8000c02:	d03f      	beq.n	8000c84 <__addsf3+0xd8>
 8000c04:	f1a2 0201 	sub.w	r2, r2, #1
 8000c08:	fa41 fc03 	asr.w	ip, r1, r3
 8000c0c:	eb10 000c 	adds.w	r0, r0, ip
 8000c10:	f1c3 0320 	rsb	r3, r3, #32
 8000c14:	fa01 f103 	lsl.w	r1, r1, r3
 8000c18:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1c:	d502      	bpl.n	8000c24 <__addsf3+0x78>
 8000c1e:	4249      	negs	r1, r1
 8000c20:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c24:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c28:	d313      	bcc.n	8000c52 <__addsf3+0xa6>
 8000c2a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c2e:	d306      	bcc.n	8000c3e <__addsf3+0x92>
 8000c30:	0840      	lsrs	r0, r0, #1
 8000c32:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c36:	f102 0201 	add.w	r2, r2, #1
 8000c3a:	2afe      	cmp	r2, #254	; 0xfe
 8000c3c:	d251      	bcs.n	8000ce2 <__addsf3+0x136>
 8000c3e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c46:	bf08      	it	eq
 8000c48:	f020 0001 	biceq.w	r0, r0, #1
 8000c4c:	ea40 0003 	orr.w	r0, r0, r3
 8000c50:	4770      	bx	lr
 8000c52:	0049      	lsls	r1, r1, #1
 8000c54:	eb40 0000 	adc.w	r0, r0, r0
 8000c58:	3a01      	subs	r2, #1
 8000c5a:	bf28      	it	cs
 8000c5c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c60:	d2ed      	bcs.n	8000c3e <__addsf3+0x92>
 8000c62:	fab0 fc80 	clz	ip, r0
 8000c66:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c6a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c6e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c72:	bfaa      	itet	ge
 8000c74:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c78:	4252      	neglt	r2, r2
 8000c7a:	4318      	orrge	r0, r3
 8000c7c:	bfbc      	itt	lt
 8000c7e:	40d0      	lsrlt	r0, r2
 8000c80:	4318      	orrlt	r0, r3
 8000c82:	4770      	bx	lr
 8000c84:	f092 0f00 	teq	r2, #0
 8000c88:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c8c:	bf06      	itte	eq
 8000c8e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c92:	3201      	addeq	r2, #1
 8000c94:	3b01      	subne	r3, #1
 8000c96:	e7b5      	b.n	8000c04 <__addsf3+0x58>
 8000c98:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c9c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ca0:	bf18      	it	ne
 8000ca2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ca6:	d021      	beq.n	8000cec <__addsf3+0x140>
 8000ca8:	ea92 0f03 	teq	r2, r3
 8000cac:	d004      	beq.n	8000cb8 <__addsf3+0x10c>
 8000cae:	f092 0f00 	teq	r2, #0
 8000cb2:	bf08      	it	eq
 8000cb4:	4608      	moveq	r0, r1
 8000cb6:	4770      	bx	lr
 8000cb8:	ea90 0f01 	teq	r0, r1
 8000cbc:	bf1c      	itt	ne
 8000cbe:	2000      	movne	r0, #0
 8000cc0:	4770      	bxne	lr
 8000cc2:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cc6:	d104      	bne.n	8000cd2 <__addsf3+0x126>
 8000cc8:	0040      	lsls	r0, r0, #1
 8000cca:	bf28      	it	cs
 8000ccc:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cd0:	4770      	bx	lr
 8000cd2:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cd6:	bf3c      	itt	cc
 8000cd8:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cdc:	4770      	bxcc	lr
 8000cde:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000ce2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ce6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cea:	4770      	bx	lr
 8000cec:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cf0:	bf16      	itet	ne
 8000cf2:	4608      	movne	r0, r1
 8000cf4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf8:	4601      	movne	r1, r0
 8000cfa:	0242      	lsls	r2, r0, #9
 8000cfc:	bf06      	itte	eq
 8000cfe:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d02:	ea90 0f01 	teqeq	r0, r1
 8000d06:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d0a:	4770      	bx	lr

08000d0c <__aeabi_ui2f>:
 8000d0c:	f04f 0300 	mov.w	r3, #0
 8000d10:	e004      	b.n	8000d1c <__aeabi_i2f+0x8>
 8000d12:	bf00      	nop

08000d14 <__aeabi_i2f>:
 8000d14:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d18:	bf48      	it	mi
 8000d1a:	4240      	negmi	r0, r0
 8000d1c:	ea5f 0c00 	movs.w	ip, r0
 8000d20:	bf08      	it	eq
 8000d22:	4770      	bxeq	lr
 8000d24:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d28:	4601      	mov	r1, r0
 8000d2a:	f04f 0000 	mov.w	r0, #0
 8000d2e:	e01c      	b.n	8000d6a <__aeabi_l2f+0x2a>

08000d30 <__aeabi_ul2f>:
 8000d30:	ea50 0201 	orrs.w	r2, r0, r1
 8000d34:	bf08      	it	eq
 8000d36:	4770      	bxeq	lr
 8000d38:	f04f 0300 	mov.w	r3, #0
 8000d3c:	e00a      	b.n	8000d54 <__aeabi_l2f+0x14>
 8000d3e:	bf00      	nop

08000d40 <__aeabi_l2f>:
 8000d40:	ea50 0201 	orrs.w	r2, r0, r1
 8000d44:	bf08      	it	eq
 8000d46:	4770      	bxeq	lr
 8000d48:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d4c:	d502      	bpl.n	8000d54 <__aeabi_l2f+0x14>
 8000d4e:	4240      	negs	r0, r0
 8000d50:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d54:	ea5f 0c01 	movs.w	ip, r1
 8000d58:	bf02      	ittt	eq
 8000d5a:	4684      	moveq	ip, r0
 8000d5c:	4601      	moveq	r1, r0
 8000d5e:	2000      	moveq	r0, #0
 8000d60:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d64:	bf08      	it	eq
 8000d66:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d6a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d6e:	fabc f28c 	clz	r2, ip
 8000d72:	3a08      	subs	r2, #8
 8000d74:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d78:	db10      	blt.n	8000d9c <__aeabi_l2f+0x5c>
 8000d7a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d7e:	4463      	add	r3, ip
 8000d80:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d84:	f1c2 0220 	rsb	r2, r2, #32
 8000d88:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d8c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d90:	eb43 0002 	adc.w	r0, r3, r2
 8000d94:	bf08      	it	eq
 8000d96:	f020 0001 	biceq.w	r0, r0, #1
 8000d9a:	4770      	bx	lr
 8000d9c:	f102 0220 	add.w	r2, r2, #32
 8000da0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000da4:	f1c2 0220 	rsb	r2, r2, #32
 8000da8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dac:	fa21 f202 	lsr.w	r2, r1, r2
 8000db0:	eb43 0002 	adc.w	r0, r3, r2
 8000db4:	bf08      	it	eq
 8000db6:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dba:	4770      	bx	lr

08000dbc <__aeabi_uldivmod>:
 8000dbc:	b953      	cbnz	r3, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dbe:	b94a      	cbnz	r2, 8000dd4 <__aeabi_uldivmod+0x18>
 8000dc0:	2900      	cmp	r1, #0
 8000dc2:	bf08      	it	eq
 8000dc4:	2800      	cmpeq	r0, #0
 8000dc6:	bf1c      	itt	ne
 8000dc8:	f04f 31ff 	movne.w	r1, #4294967295
 8000dcc:	f04f 30ff 	movne.w	r0, #4294967295
 8000dd0:	f000 b974 	b.w	80010bc <__aeabi_idiv0>
 8000dd4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000dd8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ddc:	f000 f806 	bl	8000dec <__udivmoddi4>
 8000de0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000de4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000de8:	b004      	add	sp, #16
 8000dea:	4770      	bx	lr

08000dec <__udivmoddi4>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	9d08      	ldr	r5, [sp, #32]
 8000df2:	4604      	mov	r4, r0
 8000df4:	468e      	mov	lr, r1
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d14d      	bne.n	8000e96 <__udivmoddi4+0xaa>
 8000dfa:	428a      	cmp	r2, r1
 8000dfc:	4694      	mov	ip, r2
 8000dfe:	d969      	bls.n	8000ed4 <__udivmoddi4+0xe8>
 8000e00:	fab2 f282 	clz	r2, r2
 8000e04:	b152      	cbz	r2, 8000e1c <__udivmoddi4+0x30>
 8000e06:	fa01 f302 	lsl.w	r3, r1, r2
 8000e0a:	f1c2 0120 	rsb	r1, r2, #32
 8000e0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000e12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e16:	ea41 0e03 	orr.w	lr, r1, r3
 8000e1a:	4094      	lsls	r4, r2
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	0c21      	lsrs	r1, r4, #16
 8000e22:	fbbe f6f8 	udiv	r6, lr, r8
 8000e26:	fa1f f78c 	uxth.w	r7, ip
 8000e2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000e2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000e32:	fb06 f107 	mul.w	r1, r6, r7
 8000e36:	4299      	cmp	r1, r3
 8000e38:	d90a      	bls.n	8000e50 <__udivmoddi4+0x64>
 8000e3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000e42:	f080 811f 	bcs.w	8001084 <__udivmoddi4+0x298>
 8000e46:	4299      	cmp	r1, r3
 8000e48:	f240 811c 	bls.w	8001084 <__udivmoddi4+0x298>
 8000e4c:	3e02      	subs	r6, #2
 8000e4e:	4463      	add	r3, ip
 8000e50:	1a5b      	subs	r3, r3, r1
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e58:	fb08 3310 	mls	r3, r8, r0, r3
 8000e5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e60:	fb00 f707 	mul.w	r7, r0, r7
 8000e64:	42a7      	cmp	r7, r4
 8000e66:	d90a      	bls.n	8000e7e <__udivmoddi4+0x92>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e70:	f080 810a 	bcs.w	8001088 <__udivmoddi4+0x29c>
 8000e74:	42a7      	cmp	r7, r4
 8000e76:	f240 8107 	bls.w	8001088 <__udivmoddi4+0x29c>
 8000e7a:	4464      	add	r4, ip
 8000e7c:	3802      	subs	r0, #2
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	1be4      	subs	r4, r4, r7
 8000e84:	2600      	movs	r6, #0
 8000e86:	b11d      	cbz	r5, 8000e90 <__udivmoddi4+0xa4>
 8000e88:	40d4      	lsrs	r4, r2
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000e90:	4631      	mov	r1, r6
 8000e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d909      	bls.n	8000eae <__udivmoddi4+0xc2>
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	f000 80ef 	beq.w	800107e <__udivmoddi4+0x292>
 8000ea0:	2600      	movs	r6, #0
 8000ea2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ea6:	4630      	mov	r0, r6
 8000ea8:	4631      	mov	r1, r6
 8000eaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eae:	fab3 f683 	clz	r6, r3
 8000eb2:	2e00      	cmp	r6, #0
 8000eb4:	d14a      	bne.n	8000f4c <__udivmoddi4+0x160>
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	d302      	bcc.n	8000ec0 <__udivmoddi4+0xd4>
 8000eba:	4282      	cmp	r2, r0
 8000ebc:	f200 80f9 	bhi.w	80010b2 <__udivmoddi4+0x2c6>
 8000ec0:	1a84      	subs	r4, r0, r2
 8000ec2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ec6:	2001      	movs	r0, #1
 8000ec8:	469e      	mov	lr, r3
 8000eca:	2d00      	cmp	r5, #0
 8000ecc:	d0e0      	beq.n	8000e90 <__udivmoddi4+0xa4>
 8000ece:	e9c5 4e00 	strd	r4, lr, [r5]
 8000ed2:	e7dd      	b.n	8000e90 <__udivmoddi4+0xa4>
 8000ed4:	b902      	cbnz	r2, 8000ed8 <__udivmoddi4+0xec>
 8000ed6:	deff      	udf	#255	; 0xff
 8000ed8:	fab2 f282 	clz	r2, r2
 8000edc:	2a00      	cmp	r2, #0
 8000ede:	f040 8092 	bne.w	8001006 <__udivmoddi4+0x21a>
 8000ee2:	eba1 010c 	sub.w	r1, r1, ip
 8000ee6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eea:	fa1f fe8c 	uxth.w	lr, ip
 8000eee:	2601      	movs	r6, #1
 8000ef0:	0c20      	lsrs	r0, r4, #16
 8000ef2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ef6:	fb07 1113 	mls	r1, r7, r3, r1
 8000efa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000efe:	fb0e f003 	mul.w	r0, lr, r3
 8000f02:	4288      	cmp	r0, r1
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x12c>
 8000f06:	eb1c 0101 	adds.w	r1, ip, r1
 8000f0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x12a>
 8000f10:	4288      	cmp	r0, r1
 8000f12:	f200 80cb 	bhi.w	80010ac <__udivmoddi4+0x2c0>
 8000f16:	4643      	mov	r3, r8
 8000f18:	1a09      	subs	r1, r1, r0
 8000f1a:	b2a4      	uxth	r4, r4
 8000f1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f20:	fb07 1110 	mls	r1, r7, r0, r1
 8000f24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f28:	fb0e fe00 	mul.w	lr, lr, r0
 8000f2c:	45a6      	cmp	lr, r4
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x156>
 8000f30:	eb1c 0404 	adds.w	r4, ip, r4
 8000f34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f38:	d202      	bcs.n	8000f40 <__udivmoddi4+0x154>
 8000f3a:	45a6      	cmp	lr, r4
 8000f3c:	f200 80bb 	bhi.w	80010b6 <__udivmoddi4+0x2ca>
 8000f40:	4608      	mov	r0, r1
 8000f42:	eba4 040e 	sub.w	r4, r4, lr
 8000f46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000f4a:	e79c      	b.n	8000e86 <__udivmoddi4+0x9a>
 8000f4c:	f1c6 0720 	rsb	r7, r6, #32
 8000f50:	40b3      	lsls	r3, r6
 8000f52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000f56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000f5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000f5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000f62:	431c      	orrs	r4, r3
 8000f64:	40f9      	lsrs	r1, r7
 8000f66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000f6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000f6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000f72:	0c20      	lsrs	r0, r4, #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fb09 1118 	mls	r1, r9, r8, r1
 8000f7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f80:	fb08 f00e 	mul.w	r0, r8, lr
 8000f84:	4288      	cmp	r0, r1
 8000f86:	fa02 f206 	lsl.w	r2, r2, r6
 8000f8a:	d90b      	bls.n	8000fa4 <__udivmoddi4+0x1b8>
 8000f8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000f90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f94:	f080 8088 	bcs.w	80010a8 <__udivmoddi4+0x2bc>
 8000f98:	4288      	cmp	r0, r1
 8000f9a:	f240 8085 	bls.w	80010a8 <__udivmoddi4+0x2bc>
 8000f9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000fa2:	4461      	add	r1, ip
 8000fa4:	1a09      	subs	r1, r1, r0
 8000fa6:	b2a4      	uxth	r4, r4
 8000fa8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000fac:	fb09 1110 	mls	r1, r9, r0, r1
 8000fb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000fb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000fb8:	458e      	cmp	lr, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x1e2>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fc4:	d26c      	bcs.n	80010a0 <__udivmoddi4+0x2b4>
 8000fc6:	458e      	cmp	lr, r1
 8000fc8:	d96a      	bls.n	80010a0 <__udivmoddi4+0x2b4>
 8000fca:	3802      	subs	r0, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000fd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000fd6:	eba1 010e 	sub.w	r1, r1, lr
 8000fda:	42a1      	cmp	r1, r4
 8000fdc:	46c8      	mov	r8, r9
 8000fde:	46a6      	mov	lr, r4
 8000fe0:	d356      	bcc.n	8001090 <__udivmoddi4+0x2a4>
 8000fe2:	d053      	beq.n	800108c <__udivmoddi4+0x2a0>
 8000fe4:	b15d      	cbz	r5, 8000ffe <__udivmoddi4+0x212>
 8000fe6:	ebb3 0208 	subs.w	r2, r3, r8
 8000fea:	eb61 010e 	sbc.w	r1, r1, lr
 8000fee:	fa01 f707 	lsl.w	r7, r1, r7
 8000ff2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ff6:	40f1      	lsrs	r1, r6
 8000ff8:	431f      	orrs	r7, r3
 8000ffa:	e9c5 7100 	strd	r7, r1, [r5]
 8000ffe:	2600      	movs	r6, #0
 8001000:	4631      	mov	r1, r6
 8001002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001006:	f1c2 0320 	rsb	r3, r2, #32
 800100a:	40d8      	lsrs	r0, r3
 800100c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001010:	fa21 f303 	lsr.w	r3, r1, r3
 8001014:	4091      	lsls	r1, r2
 8001016:	4301      	orrs	r1, r0
 8001018:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800101c:	fa1f fe8c 	uxth.w	lr, ip
 8001020:	fbb3 f0f7 	udiv	r0, r3, r7
 8001024:	fb07 3610 	mls	r6, r7, r0, r3
 8001028:	0c0b      	lsrs	r3, r1, #16
 800102a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800102e:	fb00 f60e 	mul.w	r6, r0, lr
 8001032:	429e      	cmp	r6, r3
 8001034:	fa04 f402 	lsl.w	r4, r4, r2
 8001038:	d908      	bls.n	800104c <__udivmoddi4+0x260>
 800103a:	eb1c 0303 	adds.w	r3, ip, r3
 800103e:	f100 38ff 	add.w	r8, r0, #4294967295
 8001042:	d22f      	bcs.n	80010a4 <__udivmoddi4+0x2b8>
 8001044:	429e      	cmp	r6, r3
 8001046:	d92d      	bls.n	80010a4 <__udivmoddi4+0x2b8>
 8001048:	3802      	subs	r0, #2
 800104a:	4463      	add	r3, ip
 800104c:	1b9b      	subs	r3, r3, r6
 800104e:	b289      	uxth	r1, r1
 8001050:	fbb3 f6f7 	udiv	r6, r3, r7
 8001054:	fb07 3316 	mls	r3, r7, r6, r3
 8001058:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800105c:	fb06 f30e 	mul.w	r3, r6, lr
 8001060:	428b      	cmp	r3, r1
 8001062:	d908      	bls.n	8001076 <__udivmoddi4+0x28a>
 8001064:	eb1c 0101 	adds.w	r1, ip, r1
 8001068:	f106 38ff 	add.w	r8, r6, #4294967295
 800106c:	d216      	bcs.n	800109c <__udivmoddi4+0x2b0>
 800106e:	428b      	cmp	r3, r1
 8001070:	d914      	bls.n	800109c <__udivmoddi4+0x2b0>
 8001072:	3e02      	subs	r6, #2
 8001074:	4461      	add	r1, ip
 8001076:	1ac9      	subs	r1, r1, r3
 8001078:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800107c:	e738      	b.n	8000ef0 <__udivmoddi4+0x104>
 800107e:	462e      	mov	r6, r5
 8001080:	4628      	mov	r0, r5
 8001082:	e705      	b.n	8000e90 <__udivmoddi4+0xa4>
 8001084:	4606      	mov	r6, r0
 8001086:	e6e3      	b.n	8000e50 <__udivmoddi4+0x64>
 8001088:	4618      	mov	r0, r3
 800108a:	e6f8      	b.n	8000e7e <__udivmoddi4+0x92>
 800108c:	454b      	cmp	r3, r9
 800108e:	d2a9      	bcs.n	8000fe4 <__udivmoddi4+0x1f8>
 8001090:	ebb9 0802 	subs.w	r8, r9, r2
 8001094:	eb64 0e0c 	sbc.w	lr, r4, ip
 8001098:	3801      	subs	r0, #1
 800109a:	e7a3      	b.n	8000fe4 <__udivmoddi4+0x1f8>
 800109c:	4646      	mov	r6, r8
 800109e:	e7ea      	b.n	8001076 <__udivmoddi4+0x28a>
 80010a0:	4620      	mov	r0, r4
 80010a2:	e794      	b.n	8000fce <__udivmoddi4+0x1e2>
 80010a4:	4640      	mov	r0, r8
 80010a6:	e7d1      	b.n	800104c <__udivmoddi4+0x260>
 80010a8:	46d0      	mov	r8, sl
 80010aa:	e77b      	b.n	8000fa4 <__udivmoddi4+0x1b8>
 80010ac:	3b02      	subs	r3, #2
 80010ae:	4461      	add	r1, ip
 80010b0:	e732      	b.n	8000f18 <__udivmoddi4+0x12c>
 80010b2:	4630      	mov	r0, r6
 80010b4:	e709      	b.n	8000eca <__udivmoddi4+0xde>
 80010b6:	4464      	add	r4, ip
 80010b8:	3802      	subs	r0, #2
 80010ba:	e742      	b.n	8000f42 <__udivmoddi4+0x156>

080010bc <__aeabi_idiv0>:
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop

080010c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010c0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80010c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010c6:	f002 facd 	bl	8003664 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010ca:	f000 f8f7 	bl	80012bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010ce:	f000 fb3b 	bl	8001748 <MX_GPIO_Init>
  MX_DMA_Init();
 80010d2:	f000 fb19 	bl	8001708 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80010d6:	f000 faed 	bl	80016b4 <MX_USART2_UART_Init>
  MX_TIM5_Init();
 80010da:	f000 fa9d 	bl	8001618 <MX_TIM5_Init>
  MX_TIM3_Init();
 80010de:	f000 fa47 	bl	8001570 <MX_TIM3_Init>
  MX_TIM1_Init();
 80010e2:	f000 f9b5 	bl	8001450 <MX_TIM1_Init>
  MX_ADC1_Init();
 80010e6:	f000 f953 	bl	8001390 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1|TIM_CHANNEL_2);
 80010ea:	2104      	movs	r1, #4
 80010ec:	4861      	ldr	r0, [pc, #388]	; (8001274 <main+0x1b4>)
 80010ee:	f004 fc4d 	bl	800598c <HAL_TIM_Encoder_Start>

  HAL_TIM_Base_Start(&htim1); //Start Timer1
 80010f2:	4861      	ldr	r0, [pc, #388]	; (8001278 <main+0x1b8>)
 80010f4:	f004 fa4a 	bl	800558c <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 80010f8:	2100      	movs	r1, #0
 80010fa:	485f      	ldr	r0, [pc, #380]	; (8001278 <main+0x1b8>)
 80010fc:	f004 faf0 	bl	80056e0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001100:	2104      	movs	r1, #4
 8001102:	485d      	ldr	r0, [pc, #372]	; (8001278 <main+0x1b8>)
 8001104:	f004 faec 	bl	80056e0 <HAL_TIM_PWM_Start>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, L_EN);
 8001108:	4b5c      	ldr	r3, [pc, #368]	; (800127c <main+0x1bc>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	b2db      	uxtb	r3, r3
 800110e:	461a      	mov	r2, r3
 8001110:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001114:	485a      	ldr	r0, [pc, #360]	; (8001280 <main+0x1c0>)
 8001116:	f003 fd37 	bl	8004b88 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, R_EN);
 800111a:	4b5a      	ldr	r3, [pc, #360]	; (8001284 <main+0x1c4>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	b2db      	uxtb	r3, r3
 8001120:	461a      	mov	r2, r3
 8001122:	2110      	movs	r1, #16
 8001124:	4856      	ldr	r0, [pc, #344]	; (8001280 <main+0x1c0>)
 8001126:	f003 fd2f 	bl	8004b88 <HAL_GPIO_WritePin>

  HAL_TIM_Base_Start(&htim5); //Start Timer5
 800112a:	4857      	ldr	r0, [pc, #348]	; (8001288 <main+0x1c8>)
 800112c:	f004 fa2e 	bl	800558c <HAL_TIM_Base_Start>

  HAL_ADC_Start_DMA(&hadc1, XYSwitch, 2);
 8001130:	2202      	movs	r2, #2
 8001132:	4956      	ldr	r1, [pc, #344]	; (800128c <main+0x1cc>)
 8001134:	4856      	ldr	r0, [pc, #344]	; (8001290 <main+0x1d0>)
 8001136:	f002 fb4b 	bl	80037d0 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  switch(scheduler)
 800113a:	4b56      	ldr	r3, [pc, #344]	; (8001294 <main+0x1d4>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d002      	beq.n	8001148 <main+0x88>
 8001142:	2b01      	cmp	r3, #1
 8001144:	d00d      	beq.n	8001162 <main+0xa2>
 8001146:	e7f8      	b.n	800113a <main+0x7a>
	  {
	  //Joystick
	  case 0:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001148:	4b4a      	ldr	r3, [pc, #296]	; (8001274 <main+0x1b4>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114e:	b21a      	sxth	r2, r3
 8001150:	4b51      	ldr	r3, [pc, #324]	; (8001298 <main+0x1d8>)
 8001152:	801a      	strh	r2, [r3, #0]
		  JoystickControl(); //Read Pin form Joystick
 8001154:	f000 fd7c 	bl	8001c50 <JoystickControl>
		  JoystickPinUpdate(); //Check Pin Flag
 8001158:	f000 fcfc 	bl	8001b54 <JoystickPinUpdate>
		  JoystickLocationState();
 800115c:	f000 fdf4 	bl	8001d48 <JoystickLocationState>
		  break;
 8001160:	e087      	b.n	8001272 <main+0x1b2>
	  //Trajectory
	  case 1:
		  //QEI
		  position = __HAL_TIM_GET_COUNTER(&htim3);
 8001162:	4b44      	ldr	r3, [pc, #272]	; (8001274 <main+0x1b4>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001168:	b21a      	sxth	r2, r3
 800116a:	4b4b      	ldr	r3, [pc, #300]	; (8001298 <main+0x1d8>)
 800116c:	801a      	strh	r2, [r3, #0]
		  static uint64_t timestamp1 = 0;
		  currentTime = micros();
 800116e:	f000 fb77 	bl	8001860 <micros>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4949      	ldr	r1, [pc, #292]	; (800129c <main+0x1dc>)
 8001178:	e9c1 2300 	strd	r2, r3, [r1]
		  if(currentTime > timestamp1)
 800117c:	4b47      	ldr	r3, [pc, #284]	; (800129c <main+0x1dc>)
 800117e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001182:	4610      	mov	r0, r2
 8001184:	4619      	mov	r1, r3
 8001186:	4b46      	ldr	r3, [pc, #280]	; (80012a0 <main+0x1e0>)
 8001188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800118c:	4282      	cmp	r2, r0
 800118e:	418b      	sbcs	r3, r1
 8001190:	d217      	bcs.n	80011c2 <main+0x102>
		  {
			  timestamp1 = currentTime + 1000;
 8001192:	4b42      	ldr	r3, [pc, #264]	; (800129c <main+0x1dc>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f512 787a 	adds.w	r8, r2, #1000	; 0x3e8
 800119c:	f143 0900 	adc.w	r9, r3, #0
 80011a0:	4642      	mov	r2, r8
 80011a2:	464b      	mov	r3, r9
 80011a4:	493e      	ldr	r1, [pc, #248]	; (80012a0 <main+0x1e0>)
 80011a6:	e9c1 2300 	strd	r2, r3, [r1]
			  QEIEncoderPositionVelocity_Update();
 80011aa:	f000 fb73 	bl	8001894 <QEIEncoderPositionVelocity_Update>
			  velocity = QEIData.QEIVelocity;
 80011ae:	4b3d      	ldr	r3, [pc, #244]	; (80012a4 <main+0x1e4>)
 80011b0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011b8:	ee17 3a90 	vmov	r3, s15
 80011bc:	b21a      	sxth	r2, r3
 80011be:	4b3a      	ldr	r3, [pc, #232]	; (80012a8 <main+0x1e8>)
 80011c0:	801a      	strh	r2, [r3, #0]
		  }

		  //Trajectory
		  TrajectoryGenerator();
 80011c2:	f001 fa4f 	bl	8002664 <TrajectoryGenerator>

		  //PWM & Motor drive & PID
		  static uint64_t timestamp2 = 0;
			  if (micros()>= timestamp2)
 80011c6:	f000 fb4b 	bl	8001860 <micros>
 80011ca:	4b38      	ldr	r3, [pc, #224]	; (80012ac <main+0x1ec>)
 80011cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d0:	4290      	cmp	r0, r2
 80011d2:	eb71 0303 	sbcs.w	r3, r1, r3
 80011d6:	d34b      	bcc.n	8001270 <main+0x1b0>
			  {
				  timestamp2 = micros()+10;
 80011d8:	f000 fb42 	bl	8001860 <micros>
 80011dc:	4602      	mov	r2, r0
 80011de:	460b      	mov	r3, r1
 80011e0:	f112 040a 	adds.w	r4, r2, #10
 80011e4:	f143 0500 	adc.w	r5, r3, #0
 80011e8:	4b30      	ldr	r3, [pc, #192]	; (80012ac <main+0x1ec>)
 80011ea:	e9c3 4500 	strd	r4, r5, [r3]
				  duty = PIDcal(setposition, position, setvelocity);
 80011ee:	4b30      	ldr	r3, [pc, #192]	; (80012b0 <main+0x1f0>)
 80011f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80011f4:	4a28      	ldr	r2, [pc, #160]	; (8001298 <main+0x1d8>)
 80011f6:	f9b2 1000 	ldrsh.w	r1, [r2]
 80011fa:	4a2e      	ldr	r2, [pc, #184]	; (80012b4 <main+0x1f4>)
 80011fc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001200:	4618      	mov	r0, r3
 8001202:	f000 fbb3 	bl	800196c <PIDcal>
 8001206:	eef0 7a40 	vmov.f32	s15, s0
 800120a:	4b2b      	ldr	r3, [pc, #172]	; (80012b8 <main+0x1f8>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
				  if (duty >= 0)
 8001210:	4b29      	ldr	r3, [pc, #164]	; (80012b8 <main+0x1f8>)
 8001212:	edd3 7a00 	vldr	s15, [r3]
 8001216:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800121a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800121e:	db0e      	blt.n	800123e <main+0x17e>
				  {
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001220:	4b15      	ldr	r3, [pc, #84]	; (8001278 <main+0x1b8>)
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	2200      	movs	r2, #0
 8001226:	639a      	str	r2, [r3, #56]	; 0x38
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,duty);
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <main+0x1f8>)
 800122a:	edd3 7a00 	vldr	s15, [r3]
 800122e:	4b12      	ldr	r3, [pc, #72]	; (8001278 <main+0x1b8>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001236:	ee17 2a90 	vmov	r2, s15
 800123a:	635a      	str	r2, [r3, #52]	; 0x34
				  {
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
				  }
			  }
			  break;
 800123c:	e018      	b.n	8001270 <main+0x1b0>
				  else if (duty < 0)
 800123e:	4b1e      	ldr	r3, [pc, #120]	; (80012b8 <main+0x1f8>)
 8001240:	edd3 7a00 	vldr	s15, [r3]
 8001244:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800124c:	d400      	bmi.n	8001250 <main+0x190>
			  break;
 800124e:	e00f      	b.n	8001270 <main+0x1b0>
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <main+0x1b8>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	2200      	movs	r2, #0
 8001256:	635a      	str	r2, [r3, #52]	; 0x34
					  __HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,-1*duty);
 8001258:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <main+0x1f8>)
 800125a:	edd3 7a00 	vldr	s15, [r3]
 800125e:	eef1 7a67 	vneg.f32	s15, s15
 8001262:	4b05      	ldr	r3, [pc, #20]	; (8001278 <main+0x1b8>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800126a:	ee17 2a90 	vmov	r2, s15
 800126e:	639a      	str	r2, [r3, #56]	; 0x38
			  break;
 8001270:	bf00      	nop
	  switch(scheduler)
 8001272:	e762      	b.n	800113a <main+0x7a>
 8001274:	2000018c 	.word	0x2000018c
 8001278:	20000144 	.word	0x20000144
 800127c:	20000004 	.word	0x20000004
 8001280:	40020400 	.word	0x40020400
 8001284:	20000000 	.word	0x20000000
 8001288:	200001d4 	.word	0x200001d4
 800128c:	200003d4 	.word	0x200003d4
 8001290:	2000009c 	.word	0x2000009c
 8001294:	20000260 	.word	0x20000260
 8001298:	200002b4 	.word	0x200002b4
 800129c:	20000270 	.word	0x20000270
 80012a0:	200003e0 	.word	0x200003e0
 80012a4:	20000278 	.word	0x20000278
 80012a8:	200002c8 	.word	0x200002c8
 80012ac:	200003e8 	.word	0x200003e8
 80012b0:	200002b6 	.word	0x200002b6
 80012b4:	200002ca 	.word	0x200002ca
 80012b8:	20000298 	.word	0x20000298

080012bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b094      	sub	sp, #80	; 0x50
 80012c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c2:	f107 0320 	add.w	r3, r7, #32
 80012c6:	2230      	movs	r2, #48	; 0x30
 80012c8:	2100      	movs	r1, #0
 80012ca:	4618      	mov	r0, r3
 80012cc:	f005 fd3c 	bl	8006d48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d0:	f107 030c 	add.w	r3, r7, #12
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80012e0:	2300      	movs	r3, #0
 80012e2:	60bb      	str	r3, [r7, #8]
 80012e4:	4b28      	ldr	r3, [pc, #160]	; (8001388 <SystemClock_Config+0xcc>)
 80012e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e8:	4a27      	ldr	r2, [pc, #156]	; (8001388 <SystemClock_Config+0xcc>)
 80012ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012ee:	6413      	str	r3, [r2, #64]	; 0x40
 80012f0:	4b25      	ldr	r3, [pc, #148]	; (8001388 <SystemClock_Config+0xcc>)
 80012f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012f8:	60bb      	str	r3, [r7, #8]
 80012fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012fc:	2300      	movs	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
 8001300:	4b22      	ldr	r3, [pc, #136]	; (800138c <SystemClock_Config+0xd0>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	4a21      	ldr	r2, [pc, #132]	; (800138c <SystemClock_Config+0xd0>)
 8001306:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4b1f      	ldr	r3, [pc, #124]	; (800138c <SystemClock_Config+0xd0>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001314:	607b      	str	r3, [r7, #4]
 8001316:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001318:	2302      	movs	r3, #2
 800131a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800131c:	2301      	movs	r3, #1
 800131e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001320:	2310      	movs	r3, #16
 8001322:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001324:	2302      	movs	r3, #2
 8001326:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001328:	2300      	movs	r3, #0
 800132a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800132c:	2310      	movs	r3, #16
 800132e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001330:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001334:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001336:	2304      	movs	r3, #4
 8001338:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800133a:	2304      	movs	r3, #4
 800133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	4618      	mov	r0, r3
 8001344:	f003 fc3a 	bl	8004bbc <HAL_RCC_OscConfig>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800134e:	f001 ff55 	bl	80031fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001352:	230f      	movs	r3, #15
 8001354:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001356:	2302      	movs	r3, #2
 8001358:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800135a:	2300      	movs	r3, #0
 800135c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800135e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001362:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001364:	2300      	movs	r3, #0
 8001366:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001368:	f107 030c 	add.w	r3, r7, #12
 800136c:	2102      	movs	r1, #2
 800136e:	4618      	mov	r0, r3
 8001370:	f003 fe9c 	bl	80050ac <HAL_RCC_ClockConfig>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800137a:	f001 ff3f 	bl	80031fc <Error_Handler>
  }
}
 800137e:	bf00      	nop
 8001380:	3750      	adds	r7, #80	; 0x50
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	40023800 	.word	0x40023800
 800138c:	40007000 	.word	0x40007000

08001390 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001396:	463b      	mov	r3, r7
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]
 800139c:	605a      	str	r2, [r3, #4]
 800139e:	609a      	str	r2, [r3, #8]
 80013a0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013a2:	4b28      	ldr	r3, [pc, #160]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013a4:	4a28      	ldr	r2, [pc, #160]	; (8001448 <MX_ADC1_Init+0xb8>)
 80013a6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a8:	4b26      	ldr	r3, [pc, #152]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013aa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80013ae:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013b0:	4b24      	ldr	r3, [pc, #144]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 80013b6:	4b23      	ldr	r3, [pc, #140]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013b8:	2201      	movs	r2, #1
 80013ba:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80013bc:	4b21      	ldr	r3, [pc, #132]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013be:	2201      	movs	r2, #1
 80013c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013c2:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013ca:	4b1e      	ldr	r3, [pc, #120]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013d0:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013d2:	4a1e      	ldr	r2, [pc, #120]	; (800144c <MX_ADC1_Init+0xbc>)
 80013d4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80013d6:	4b1b      	ldr	r3, [pc, #108]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013d8:	2200      	movs	r2, #0
 80013da:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013dc:	4b19      	ldr	r3, [pc, #100]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013de:	2202      	movs	r2, #2
 80013e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 80013e2:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013e4:	2201      	movs	r2, #1
 80013e6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013ea:	4b16      	ldr	r3, [pc, #88]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013ec:	2201      	movs	r2, #1
 80013ee:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013f0:	4814      	ldr	r0, [pc, #80]	; (8001444 <MX_ADC1_Init+0xb4>)
 80013f2:	f002 f9a9 	bl	8003748 <HAL_ADC_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80013fc:	f001 fefe 	bl	80031fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001400:	2300      	movs	r3, #0
 8001402:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001404:	2301      	movs	r3, #1
 8001406:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_56CYCLES;
 8001408:	2303      	movs	r3, #3
 800140a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800140c:	463b      	mov	r3, r7
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_ADC1_Init+0xb4>)
 8001412:	f002 faeb 	bl	80039ec <HAL_ADC_ConfigChannel>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800141c:	f001 feee 	bl	80031fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001420:	2301      	movs	r3, #1
 8001422:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001424:	2302      	movs	r3, #2
 8001426:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001428:	463b      	mov	r3, r7
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_ADC1_Init+0xb4>)
 800142e:	f002 fadd 	bl	80039ec <HAL_ADC_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8001438:	f001 fee0 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3710      	adds	r7, #16
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	2000009c 	.word	0x2000009c
 8001448:	40012000 	.word	0x40012000
 800144c:	0f000001 	.word	0x0f000001

08001450 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b092      	sub	sp, #72	; 0x48
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001456:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800145a:	2200      	movs	r2, #0
 800145c:	601a      	str	r2, [r3, #0]
 800145e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001460:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	615a      	str	r2, [r3, #20]
 8001472:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001474:	1d3b      	adds	r3, r7, #4
 8001476:	2220      	movs	r2, #32
 8001478:	2100      	movs	r1, #0
 800147a:	4618      	mov	r0, r3
 800147c:	f005 fc64 	bl	8006d48 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001480:	4b39      	ldr	r3, [pc, #228]	; (8001568 <MX_TIM1_Init+0x118>)
 8001482:	4a3a      	ldr	r2, [pc, #232]	; (800156c <MX_TIM1_Init+0x11c>)
 8001484:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 83;
 8001486:	4b38      	ldr	r3, [pc, #224]	; (8001568 <MX_TIM1_Init+0x118>)
 8001488:	2253      	movs	r2, #83	; 0x53
 800148a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148c:	4b36      	ldr	r3, [pc, #216]	; (8001568 <MX_TIM1_Init+0x118>)
 800148e:	2200      	movs	r2, #0
 8001490:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 9999;
 8001492:	4b35      	ldr	r3, [pc, #212]	; (8001568 <MX_TIM1_Init+0x118>)
 8001494:	f242 720f 	movw	r2, #9999	; 0x270f
 8001498:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800149a:	4b33      	ldr	r3, [pc, #204]	; (8001568 <MX_TIM1_Init+0x118>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80014a0:	4b31      	ldr	r3, [pc, #196]	; (8001568 <MX_TIM1_Init+0x118>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014a6:	4b30      	ldr	r3, [pc, #192]	; (8001568 <MX_TIM1_Init+0x118>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014ac:	482e      	ldr	r0, [pc, #184]	; (8001568 <MX_TIM1_Init+0x118>)
 80014ae:	f004 f8c7 	bl	8005640 <HAL_TIM_PWM_Init>
 80014b2:	4603      	mov	r3, r0
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d001      	beq.n	80014bc <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80014b8:	f001 fea0 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014bc:	2300      	movs	r3, #0
 80014be:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014c0:	2300      	movs	r3, #0
 80014c2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80014c8:	4619      	mov	r1, r3
 80014ca:	4827      	ldr	r0, [pc, #156]	; (8001568 <MX_TIM1_Init+0x118>)
 80014cc:	f005 f87c 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d001      	beq.n	80014da <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 80014d6:	f001 fe91 	bl	80031fc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014da:	2360      	movs	r3, #96	; 0x60
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80014de:	2300      	movs	r3, #0
 80014e0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014e2:	2300      	movs	r3, #0
 80014e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80014e6:	2300      	movs	r3, #0
 80014e8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014ea:	2300      	movs	r3, #0
 80014ec:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80014ee:	2300      	movs	r3, #0
 80014f0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80014f2:	2300      	movs	r3, #0
 80014f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014fa:	2200      	movs	r2, #0
 80014fc:	4619      	mov	r1, r3
 80014fe:	481a      	ldr	r0, [pc, #104]	; (8001568 <MX_TIM1_Init+0x118>)
 8001500:	f004 fbda 	bl	8005cb8 <HAL_TIM_PWM_ConfigChannel>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800150a:	f001 fe77 	bl	80031fc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001512:	2204      	movs	r2, #4
 8001514:	4619      	mov	r1, r3
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_TIM1_Init+0x118>)
 8001518:	f004 fbce 	bl	8005cb8 <HAL_TIM_PWM_ConfigChannel>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001522:	f001 fe6b 	bl	80031fc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800152a:	2300      	movs	r3, #0
 800152c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001536:	2300      	movs	r3, #0
 8001538:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800153a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800153e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001544:	1d3b      	adds	r3, r7, #4
 8001546:	4619      	mov	r1, r3
 8001548:	4807      	ldr	r0, [pc, #28]	; (8001568 <MX_TIM1_Init+0x118>)
 800154a:	f005 f8ab 	bl	80066a4 <HAL_TIMEx_ConfigBreakDeadTime>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 8001554:	f001 fe52 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001558:	4803      	ldr	r0, [pc, #12]	; (8001568 <MX_TIM1_Init+0x118>)
 800155a:	f001 ff87 	bl	800346c <HAL_TIM_MspPostInit>

}
 800155e:	bf00      	nop
 8001560:	3748      	adds	r7, #72	; 0x48
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000144 	.word	0x20000144
 800156c:	40010000 	.word	0x40010000

08001570 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001576:	f107 030c 	add.w	r3, r7, #12
 800157a:	2224      	movs	r2, #36	; 0x24
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f005 fbe2 	bl	8006d48 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158c:	4b20      	ldr	r3, [pc, #128]	; (8001610 <MX_TIM3_Init+0xa0>)
 800158e:	4a21      	ldr	r2, [pc, #132]	; (8001614 <MX_TIM3_Init+0xa4>)
 8001590:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001592:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <MX_TIM3_Init+0xa0>)
 8001594:	2200      	movs	r2, #0
 8001596:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <MX_TIM3_Init+0xa0>)
 800159a:	2200      	movs	r2, #0
 800159c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = QEI_PERIOD-1;
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a6:	4b1a      	ldr	r3, [pc, #104]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ac:	4b18      	ldr	r3, [pc, #96]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 80015b2:	2301      	movs	r3, #1
 80015b4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015ba:	2301      	movs	r3, #1
 80015bc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015be:	2300      	movs	r3, #0
 80015c0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015c6:	2300      	movs	r3, #0
 80015c8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015ca:	2301      	movs	r3, #1
 80015cc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ce:	2300      	movs	r3, #0
 80015d0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80015d2:	2300      	movs	r3, #0
 80015d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015d6:	f107 030c 	add.w	r3, r7, #12
 80015da:	4619      	mov	r1, r3
 80015dc:	480c      	ldr	r0, [pc, #48]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015de:	f004 f92f 	bl	8005840 <HAL_TIM_Encoder_Init>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015e8:	f001 fe08 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015ec:	2300      	movs	r3, #0
 80015ee:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015f4:	1d3b      	adds	r3, r7, #4
 80015f6:	4619      	mov	r1, r3
 80015f8:	4805      	ldr	r0, [pc, #20]	; (8001610 <MX_TIM3_Init+0xa0>)
 80015fa:	f004 ffe5 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001604:	f001 fdfa 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001608:	bf00      	nop
 800160a:	3730      	adds	r7, #48	; 0x30
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	2000018c 	.word	0x2000018c
 8001614:	40000400 	.word	0x40000400

08001618 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800161e:	f107 0308 	add.w	r3, r7, #8
 8001622:	2200      	movs	r2, #0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	605a      	str	r2, [r3, #4]
 8001628:	609a      	str	r2, [r3, #8]
 800162a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800162c:	463b      	mov	r3, r7
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001634:	4b1d      	ldr	r3, [pc, #116]	; (80016ac <MX_TIM5_Init+0x94>)
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <MX_TIM5_Init+0x98>)
 8001638:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 800163a:	4b1c      	ldr	r3, [pc, #112]	; (80016ac <MX_TIM5_Init+0x94>)
 800163c:	2253      	movs	r2, #83	; 0x53
 800163e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001640:	4b1a      	ldr	r3, [pc, #104]	; (80016ac <MX_TIM5_Init+0x94>)
 8001642:	2200      	movs	r2, #0
 8001644:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001646:	4b19      	ldr	r3, [pc, #100]	; (80016ac <MX_TIM5_Init+0x94>)
 8001648:	f04f 32ff 	mov.w	r2, #4294967295
 800164c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800164e:	4b17      	ldr	r3, [pc, #92]	; (80016ac <MX_TIM5_Init+0x94>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001654:	4b15      	ldr	r3, [pc, #84]	; (80016ac <MX_TIM5_Init+0x94>)
 8001656:	2200      	movs	r2, #0
 8001658:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800165a:	4814      	ldr	r0, [pc, #80]	; (80016ac <MX_TIM5_Init+0x94>)
 800165c:	f003 ff46 	bl	80054ec <HAL_TIM_Base_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001666:	f001 fdc9 	bl	80031fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800166a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800166e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001670:	f107 0308 	add.w	r3, r7, #8
 8001674:	4619      	mov	r1, r3
 8001676:	480d      	ldr	r0, [pc, #52]	; (80016ac <MX_TIM5_Init+0x94>)
 8001678:	f004 fbe0 	bl	8005e3c <HAL_TIM_ConfigClockSource>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001682:	f001 fdbb 	bl	80031fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800168e:	463b      	mov	r3, r7
 8001690:	4619      	mov	r1, r3
 8001692:	4806      	ldr	r0, [pc, #24]	; (80016ac <MX_TIM5_Init+0x94>)
 8001694:	f004 ff98 	bl	80065c8 <HAL_TIMEx_MasterConfigSynchronization>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800169e:	f001 fdad 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	3718      	adds	r7, #24
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200001d4 	.word	0x200001d4
 80016b0:	40000c00 	.word	0x40000c00

080016b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80016b8:	4b11      	ldr	r3, [pc, #68]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ba:	4a12      	ldr	r2, [pc, #72]	; (8001704 <MX_USART2_UART_Init+0x50>)
 80016bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80016be:	4b10      	ldr	r3, [pc, #64]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016cc:	4b0c      	ldr	r3, [pc, #48]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016d2:	4b0b      	ldr	r3, [pc, #44]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016d8:	4b09      	ldr	r3, [pc, #36]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016da:	220c      	movs	r2, #12
 80016dc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016de:	4b08      	ldr	r3, [pc, #32]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016ea:	4805      	ldr	r0, [pc, #20]	; (8001700 <MX_USART2_UART_Init+0x4c>)
 80016ec:	f005 f840 	bl	8006770 <HAL_UART_Init>
 80016f0:	4603      	mov	r3, r0
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d001      	beq.n	80016fa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016f6:	f001 fd81 	bl	80031fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000021c 	.word	0x2000021c
 8001704:	40004400 	.word	0x40004400

08001708 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800170e:	2300      	movs	r3, #0
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	4b0c      	ldr	r3, [pc, #48]	; (8001744 <MX_DMA_Init+0x3c>)
 8001714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001716:	4a0b      	ldr	r2, [pc, #44]	; (8001744 <MX_DMA_Init+0x3c>)
 8001718:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800171c:	6313      	str	r3, [r2, #48]	; 0x30
 800171e:	4b09      	ldr	r3, [pc, #36]	; (8001744 <MX_DMA_Init+0x3c>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	607b      	str	r3, [r7, #4]
 8001728:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800172a:	2200      	movs	r2, #0
 800172c:	2100      	movs	r1, #0
 800172e:	2038      	movs	r0, #56	; 0x38
 8001730:	f002 fce7 	bl	8004102 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001734:	2038      	movs	r0, #56	; 0x38
 8001736:	f002 fd00 	bl	800413a <HAL_NVIC_EnableIRQ>

}
 800173a:	bf00      	nop
 800173c:	3708      	adds	r7, #8
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b3b      	ldr	r3, [pc, #236]	; (8001850 <MX_GPIO_Init+0x108>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a3a      	ldr	r2, [pc, #232]	; (8001850 <MX_GPIO_Init+0x108>)
 8001768:	f043 0304 	orr.w	r3, r3, #4
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b38      	ldr	r3, [pc, #224]	; (8001850 <MX_GPIO_Init+0x108>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0304 	and.w	r3, r3, #4
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b34      	ldr	r3, [pc, #208]	; (8001850 <MX_GPIO_Init+0x108>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a33      	ldr	r2, [pc, #204]	; (8001850 <MX_GPIO_Init+0x108>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b31      	ldr	r3, [pc, #196]	; (8001850 <MX_GPIO_Init+0x108>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b2d      	ldr	r3, [pc, #180]	; (8001850 <MX_GPIO_Init+0x108>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a2c      	ldr	r2, [pc, #176]	; (8001850 <MX_GPIO_Init+0x108>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <MX_GPIO_Init+0x108>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b26      	ldr	r3, [pc, #152]	; (8001850 <MX_GPIO_Init+0x108>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a25      	ldr	r2, [pc, #148]	; (8001850 <MX_GPIO_Init+0x108>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b23      	ldr	r3, [pc, #140]	; (8001850 <MX_GPIO_Init+0x108>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_4, GPIO_PIN_RESET);
 80017ce:	2200      	movs	r2, #0
 80017d0:	f44f 6182 	mov.w	r1, #1040	; 0x410
 80017d4:	481f      	ldr	r0, [pc, #124]	; (8001854 <MX_GPIO_Init+0x10c>)
 80017d6:	f003 f9d7 	bl	8004b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4819      	ldr	r0, [pc, #100]	; (8001858 <MX_GPIO_Init+0x110>)
 80017f2:	f003 f82d 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_10;
 80017f6:	f44f 6386 	mov.w	r3, #1072	; 0x430
 80017fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017fc:	2300      	movs	r3, #0
 80017fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 0314 	add.w	r3, r7, #20
 8001808:	4619      	mov	r1, r3
 800180a:	4814      	ldr	r0, [pc, #80]	; (800185c <MX_GPIO_Init+0x114>)
 800180c:	f003 f820 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB5 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6;
 8001810:	2361      	movs	r3, #97	; 0x61
 8001812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001814:	2300      	movs	r3, #0
 8001816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001824:	f003 f814 	bl	8004850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_4;
 8001828:	f44f 6382 	mov.w	r3, #1040	; 0x410
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001836:	2300      	movs	r3, #0
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4804      	ldr	r0, [pc, #16]	; (8001854 <MX_GPIO_Init+0x10c>)
 8001842:	f003 f805 	bl	8004850 <HAL_GPIO_Init>

}
 8001846:	bf00      	nop
 8001848:	3728      	adds	r7, #40	; 0x28
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	40023800 	.word	0x40023800
 8001854:	40020400 	.word	0x40020400
 8001858:	40020800 	.word	0x40020800
 800185c:	40020000 	.word	0x40020000

08001860 <micros>:
	}
}


uint64_t micros()
{
 8001860:	b4b0      	push	{r4, r5, r7}
 8001862:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 8001864:	4b09      	ldr	r3, [pc, #36]	; (800188c <micros+0x2c>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186a:	2200      	movs	r2, #0
 800186c:	4618      	mov	r0, r3
 800186e:	4611      	mov	r1, r2
 8001870:	4b07      	ldr	r3, [pc, #28]	; (8001890 <micros+0x30>)
 8001872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001876:	1884      	adds	r4, r0, r2
 8001878:	eb41 0503 	adc.w	r5, r1, r3
 800187c:	4622      	mov	r2, r4
 800187e:	462b      	mov	r3, r5
}
 8001880:	4610      	mov	r0, r2
 8001882:	4619      	mov	r1, r3
 8001884:	46bd      	mov	sp, r7
 8001886:	bcb0      	pop	{r4, r5, r7}
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	200001d4 	.word	0x200001d4
 8001890:	20000268 	.word	0x20000268

08001894 <QEIEncoderPositionVelocity_Update>:


void QEIEncoderPositionVelocity_Update()
{
 8001894:	b5b0      	push	{r4, r5, r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
	QEIData.timestamp[0] = micros();
 800189a:	f7ff ffe1 	bl	8001860 <micros>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	492e      	ldr	r1, [pc, #184]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018a4:	e9c1 2302 	strd	r2, r3, [r1, #8]
	uint32_t counterPosition = __HAL_TIM_GET_COUNTER(&htim3);
 80018a8:	4b2d      	ldr	r3, [pc, #180]	; (8001960 <QEIEncoderPositionVelocity_Update+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	60bb      	str	r3, [r7, #8]
	QEIData.data[0] = counterPosition;
 80018b0:	4a2a      	ldr	r2, [pc, #168]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018b2:	68bb      	ldr	r3, [r7, #8]
 80018b4:	6013      	str	r3, [r2, #0]

	QEIData.QEIPosition = counterPosition % 1600;
 80018b6:	68ba      	ldr	r2, [r7, #8]
 80018b8:	4b2a      	ldr	r3, [pc, #168]	; (8001964 <QEIEncoderPositionVelocity_Update+0xd0>)
 80018ba:	fba3 1302 	umull	r1, r3, r3, r2
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 80018c4:	fb01 f303 	mul.w	r3, r1, r3
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	ee07 3a90 	vmov	s15, r3
 80018ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018d4:	edc3 7a06 	vstr	s15, [r3, #24]

	int32_t diffPosition = QEIData.data[0]-QEIData.data[1];
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b1f      	ldr	r3, [pc, #124]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	1ad3      	subs	r3, r2, r3
 80018e2:	60fb      	str	r3, [r7, #12]
	float difftime = (QEIData.timestamp[0]-QEIData.timestamp[1]);
 80018e4:	4b1d      	ldr	r3, [pc, #116]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018e6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80018ea:	4b1c      	ldr	r3, [pc, #112]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 80018ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80018f0:	1a84      	subs	r4, r0, r2
 80018f2:	eb61 0503 	sbc.w	r5, r1, r3
 80018f6:	4620      	mov	r0, r4
 80018f8:	4629      	mov	r1, r5
 80018fa:	f7ff fa19 	bl	8000d30 <__aeabi_ul2f>
 80018fe:	4603      	mov	r3, r0
 8001900:	607b      	str	r3, [r7, #4]

	if(diffPosition > QEI_PERIOD>>1) diffPosition -= QEI_PERIOD;
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001908:	dd03      	ble.n	8001912 <QEIEncoderPositionVelocity_Update+0x7e>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 8001910:	60fb      	str	r3, [r7, #12]
	if(diffPosition < -(QEI_PERIOD>>1)) diffPosition += QEI_PERIOD;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8001918:	da03      	bge.n	8001922 <QEIEncoderPositionVelocity_Update+0x8e>
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001920:	60fb      	str	r3, [r7, #12]

	QEIData.QEIVelocity = (diffPosition * 1000000)/difftime;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4a10      	ldr	r2, [pc, #64]	; (8001968 <QEIEncoderPositionVelocity_Update+0xd4>)
 8001926:	fb02 f303 	mul.w	r3, r2, r3
 800192a:	ee07 3a90 	vmov	s15, r3
 800192e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001932:	ed97 7a01 	vldr	s14, [r7, #4]
 8001936:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800193a:	4b08      	ldr	r3, [pc, #32]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 800193c:	edc3 7a07 	vstr	s15, [r3, #28]

	QEIData.data[1] = QEIData.data[0];
 8001940:	4b06      	ldr	r3, [pc, #24]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a05      	ldr	r2, [pc, #20]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001946:	6053      	str	r3, [r2, #4]
	QEIData.timestamp[1] = QEIData.timestamp[0];
 8001948:	4b04      	ldr	r3, [pc, #16]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 800194a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800194e:	4903      	ldr	r1, [pc, #12]	; (800195c <QEIEncoderPositionVelocity_Update+0xc8>)
 8001950:	e9c1 2304 	strd	r2, r3, [r1, #16]
}
 8001954:	bf00      	nop
 8001956:	3710      	adds	r7, #16
 8001958:	46bd      	mov	sp, r7
 800195a:	bdb0      	pop	{r4, r5, r7, pc}
 800195c:	20000278 	.word	0x20000278
 8001960:	2000018c 	.word	0x2000018c
 8001964:	51eb851f 	.word	0x51eb851f
 8001968:	000f4240 	.word	0x000f4240

0800196c <PIDcal>:

float PIDcal(int16_t setposition, int16_t position, int16_t setvelocity)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	80fb      	strh	r3, [r7, #6]
 8001976:	460b      	mov	r3, r1
 8001978:	80bb      	strh	r3, [r7, #4]
 800197a:	4613      	mov	r3, r2
 800197c:	807b      	strh	r3, [r7, #2]
	//position control
	errorposition = setposition - position;
 800197e:	88fa      	ldrh	r2, [r7, #6]
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	1ad3      	subs	r3, r2, r3
 8001984:	b29b      	uxth	r3, r3
 8001986:	b21a      	sxth	r2, r3
 8001988:	4b60      	ldr	r3, [pc, #384]	; (8001b0c <PIDcal+0x1a0>)
 800198a:	801a      	strh	r2, [r3, #0]

	integral_p = integral_p + errorposition;
 800198c:	4b60      	ldr	r3, [pc, #384]	; (8001b10 <PIDcal+0x1a4>)
 800198e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001992:	b29a      	uxth	r2, r3
 8001994:	4b5d      	ldr	r3, [pc, #372]	; (8001b0c <PIDcal+0x1a0>)
 8001996:	f9b3 3000 	ldrsh.w	r3, [r3]
 800199a:	b29b      	uxth	r3, r3
 800199c:	4413      	add	r3, r2
 800199e:	b29b      	uxth	r3, r3
 80019a0:	b21a      	sxth	r2, r3
 80019a2:	4b5b      	ldr	r3, [pc, #364]	; (8001b10 <PIDcal+0x1a4>)
 80019a4:	801a      	strh	r2, [r3, #0]
	derivative_p = errorposition - pre_errorposition;
 80019a6:	4b59      	ldr	r3, [pc, #356]	; (8001b0c <PIDcal+0x1a0>)
 80019a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ac:	b29a      	uxth	r2, r3
 80019ae:	4b59      	ldr	r3, [pc, #356]	; (8001b14 <PIDcal+0x1a8>)
 80019b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b4:	b29b      	uxth	r3, r3
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	b29b      	uxth	r3, r3
 80019ba:	b21a      	sxth	r2, r3
 80019bc:	4b56      	ldr	r3, [pc, #344]	; (8001b18 <PIDcal+0x1ac>)
 80019be:	801a      	strh	r2, [r3, #0]
	u_position = Kp_p*errorposition + Ki_p*integral_p + Kd_p*derivative_p;
 80019c0:	4b52      	ldr	r3, [pc, #328]	; (8001b0c <PIDcal+0x1a0>)
 80019c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019c6:	ee07 3a90 	vmov	s15, r3
 80019ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019ce:	4b53      	ldr	r3, [pc, #332]	; (8001b1c <PIDcal+0x1b0>)
 80019d0:	edd3 7a00 	vldr	s15, [r3]
 80019d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80019d8:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <PIDcal+0x1a4>)
 80019da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019de:	ee07 3a90 	vmov	s15, r3
 80019e2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80019e6:	4b4e      	ldr	r3, [pc, #312]	; (8001b20 <PIDcal+0x1b4>)
 80019e8:	edd3 7a00 	vldr	s15, [r3]
 80019ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80019f4:	4b48      	ldr	r3, [pc, #288]	; (8001b18 <PIDcal+0x1ac>)
 80019f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019fa:	ee07 3a90 	vmov	s15, r3
 80019fe:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a02:	4b48      	ldr	r3, [pc, #288]	; (8001b24 <PIDcal+0x1b8>)
 8001a04:	edd3 7a00 	vldr	s15, [r3]
 8001a08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a10:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a14:	ee17 3a90 	vmov	r3, s15
 8001a18:	b21a      	sxth	r2, r3
 8001a1a:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <PIDcal+0x1bc>)
 8001a1c:	801a      	strh	r2, [r3, #0]

	pre_errorposition = errorposition;
 8001a1e:	4b3b      	ldr	r3, [pc, #236]	; (8001b0c <PIDcal+0x1a0>)
 8001a20:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001a24:	4b3b      	ldr	r3, [pc, #236]	; (8001b14 <PIDcal+0x1a8>)
 8001a26:	801a      	strh	r2, [r3, #0]

	//velocity control
	sumsetvelocity = u_position + setvelocity;
 8001a28:	4b3f      	ldr	r3, [pc, #252]	; (8001b28 <PIDcal+0x1bc>)
 8001a2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a2e:	b29a      	uxth	r2, r3
 8001a30:	887b      	ldrh	r3, [r7, #2]
 8001a32:	4413      	add	r3, r2
 8001a34:	b29b      	uxth	r3, r3
 8001a36:	b21a      	sxth	r2, r3
 8001a38:	4b3c      	ldr	r3, [pc, #240]	; (8001b2c <PIDcal+0x1c0>)
 8001a3a:	801a      	strh	r2, [r3, #0]
	errorvelocity = sumsetvelocity - QEIData.QEIVelocity;
 8001a3c:	4b3b      	ldr	r3, [pc, #236]	; (8001b2c <PIDcal+0x1c0>)
 8001a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a42:	ee07 3a90 	vmov	s15, r3
 8001a46:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a4a:	4b39      	ldr	r3, [pc, #228]	; (8001b30 <PIDcal+0x1c4>)
 8001a4c:	edd3 7a07 	vldr	s15, [r3, #28]
 8001a50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a54:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a58:	ee17 3a90 	vmov	r3, s15
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	4b35      	ldr	r3, [pc, #212]	; (8001b34 <PIDcal+0x1c8>)
 8001a60:	801a      	strh	r2, [r3, #0]

	integral_v = integral_v + errorvelocity;
 8001a62:	4b35      	ldr	r3, [pc, #212]	; (8001b38 <PIDcal+0x1cc>)
 8001a64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	4b32      	ldr	r3, [pc, #200]	; (8001b34 <PIDcal+0x1c8>)
 8001a6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	4413      	add	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	b21a      	sxth	r2, r3
 8001a78:	4b2f      	ldr	r3, [pc, #188]	; (8001b38 <PIDcal+0x1cc>)
 8001a7a:	801a      	strh	r2, [r3, #0]
	derivative_v = errorvelocity - pre_errorvelocity;
 8001a7c:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <PIDcal+0x1c8>)
 8001a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a82:	b29a      	uxth	r2, r3
 8001a84:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <PIDcal+0x1d0>)
 8001a86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a8a:	b29b      	uxth	r3, r3
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	b29b      	uxth	r3, r3
 8001a90:	b21a      	sxth	r2, r3
 8001a92:	4b2b      	ldr	r3, [pc, #172]	; (8001b40 <PIDcal+0x1d4>)
 8001a94:	801a      	strh	r2, [r3, #0]
	duty = Kp_v*errorvelocity + Ki_v*integral_v + Kd_v*derivative_v;
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <PIDcal+0x1c8>)
 8001a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a9c:	ee07 3a90 	vmov	s15, r3
 8001aa0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa4:	4b27      	ldr	r3, [pc, #156]	; (8001b44 <PIDcal+0x1d8>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001aae:	4b22      	ldr	r3, [pc, #136]	; (8001b38 <PIDcal+0x1cc>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001abc:	4b22      	ldr	r3, [pc, #136]	; (8001b48 <PIDcal+0x1dc>)
 8001abe:	edd3 7a00 	vldr	s15, [r3]
 8001ac2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ac6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001aca:	4b1d      	ldr	r3, [pc, #116]	; (8001b40 <PIDcal+0x1d4>)
 8001acc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ad0:	ee07 3a90 	vmov	s15, r3
 8001ad4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001ad8:	4b1c      	ldr	r3, [pc, #112]	; (8001b4c <PIDcal+0x1e0>)
 8001ada:	edd3 7a00 	vldr	s15, [r3]
 8001ade:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ae2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ae6:	4b1a      	ldr	r3, [pc, #104]	; (8001b50 <PIDcal+0x1e4>)
 8001ae8:	edc3 7a00 	vstr	s15, [r3]

	pre_errorvelocity = errorvelocity;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <PIDcal+0x1c8>)
 8001aee:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001af2:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <PIDcal+0x1d0>)
 8001af4:	801a      	strh	r2, [r3, #0]

	return duty;
 8001af6:	4b16      	ldr	r3, [pc, #88]	; (8001b50 <PIDcal+0x1e4>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	ee07 3a90 	vmov	s15, r3
}
 8001afe:	eeb0 0a67 	vmov.f32	s0, s15
 8001b02:	370c      	adds	r7, #12
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	200002b8 	.word	0x200002b8
 8001b10:	200002c0 	.word	0x200002c0
 8001b14:	200002bc 	.word	0x200002bc
 8001b18:	200002c2 	.word	0x200002c2
 8001b1c:	200002d4 	.word	0x200002d4
 8001b20:	200002d8 	.word	0x200002d8
 8001b24:	200002dc 	.word	0x200002dc
 8001b28:	200002ba 	.word	0x200002ba
 8001b2c:	200002cc 	.word	0x200002cc
 8001b30:	20000278 	.word	0x20000278
 8001b34:	200002ce 	.word	0x200002ce
 8001b38:	200002c4 	.word	0x200002c4
 8001b3c:	200002be 	.word	0x200002be
 8001b40:	200002c6 	.word	0x200002c6
 8001b44:	200002e0 	.word	0x200002e0
 8001b48:	200002e4 	.word	0x200002e4
 8001b4c:	200002e8 	.word	0x200002e8
 8001b50:	20000298 	.word	0x20000298

08001b54 <JoystickPinUpdate>:

void JoystickPinUpdate()
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
	  GetPositionButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8001b58:	2140      	movs	r1, #64	; 0x40
 8001b5a:	4837      	ldr	r0, [pc, #220]	; (8001c38 <JoystickPinUpdate+0xe4>)
 8001b5c:	f002 fffc 	bl	8004b58 <HAL_GPIO_ReadPin>
 8001b60:	4603      	mov	r3, r0
 8001b62:	461a      	mov	r2, r3
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b66:	605a      	str	r2, [r3, #4]
	  if (GetPositionButton.last == 1 && GetPositionButton.current == 0)
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d107      	bne.n	8001b80 <JoystickPinUpdate+0x2c>
 8001b70:	4b32      	ldr	r3, [pc, #200]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d103      	bne.n	8001b80 <JoystickPinUpdate+0x2c>
	  {
		  GetPositionButton.flag = 1;
 8001b78:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	e002      	b.n	8001b86 <JoystickPinUpdate+0x32>
	  }
	  else
	  {
		  GetPositionButton.flag = 0;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
	  }
	  GetPositionButton.last = GetPositionButton.current;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b88:	685b      	ldr	r3, [r3, #4]
 8001b8a:	4a2c      	ldr	r2, [pc, #176]	; (8001c3c <JoystickPinUpdate+0xe8>)
 8001b8c:	6013      	str	r3, [r2, #0]

	  ResetButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8001b8e:	2120      	movs	r1, #32
 8001b90:	482b      	ldr	r0, [pc, #172]	; (8001c40 <JoystickPinUpdate+0xec>)
 8001b92:	f002 ffe1 	bl	8004b58 <HAL_GPIO_ReadPin>
 8001b96:	4603      	mov	r3, r0
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b2a      	ldr	r3, [pc, #168]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001b9c:	605a      	str	r2, [r3, #4]
	  if (ResetButton.last == 1 && ResetButton.current == 0)
 8001b9e:	4b29      	ldr	r3, [pc, #164]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	2b01      	cmp	r3, #1
 8001ba4:	d107      	bne.n	8001bb6 <JoystickPinUpdate+0x62>
 8001ba6:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d103      	bne.n	8001bb6 <JoystickPinUpdate+0x62>
	  {
		ResetButton.flag = 1;
 8001bae:	4b25      	ldr	r3, [pc, #148]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001bb0:	2201      	movs	r2, #1
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	e002      	b.n	8001bbc <JoystickPinUpdate+0x68>
	  }
	  else
	  {
		  ResetButton.flag = 0;
 8001bb6:	4b23      	ldr	r3, [pc, #140]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
	  }
	  ResetButton.last = ResetButton.current;
 8001bbc:	4b21      	ldr	r3, [pc, #132]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	4a20      	ldr	r2, [pc, #128]	; (8001c44 <JoystickPinUpdate+0xf0>)
 8001bc2:	6013      	str	r3, [r2, #0]

	  FineButton.current = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10);
 8001bc4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bc8:	481d      	ldr	r0, [pc, #116]	; (8001c40 <JoystickPinUpdate+0xec>)
 8001bca:	f002 ffc5 	bl	8004b58 <HAL_GPIO_ReadPin>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	461a      	mov	r2, r3
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001bd4:	605a      	str	r2, [r3, #4]
	  if (FineButton.last == 1 && FineButton.current == 0)
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	2b01      	cmp	r3, #1
 8001bdc:	d107      	bne.n	8001bee <JoystickPinUpdate+0x9a>
 8001bde:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d103      	bne.n	8001bee <JoystickPinUpdate+0x9a>
	  {
		  FineButton.flag = 1;
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001be8:	2201      	movs	r2, #1
 8001bea:	609a      	str	r2, [r3, #8]
 8001bec:	e002      	b.n	8001bf4 <JoystickPinUpdate+0xa0>
	  }
	  else
	  {
		  FineButton.flag = 0;
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	609a      	str	r2, [r3, #8]
	  }
	  FineButton.last = FineButton.current;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	4a13      	ldr	r2, [pc, #76]	; (8001c48 <JoystickPinUpdate+0xf4>)
 8001bfa:	6013      	str	r3, [r2, #0]

	  RoughButton.current = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8001bfc:	2120      	movs	r1, #32
 8001bfe:	480e      	ldr	r0, [pc, #56]	; (8001c38 <JoystickPinUpdate+0xe4>)
 8001c00:	f002 ffaa 	bl	8004b58 <HAL_GPIO_ReadPin>
 8001c04:	4603      	mov	r3, r0
 8001c06:	461a      	mov	r2, r3
 8001c08:	4b10      	ldr	r3, [pc, #64]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c0a:	605a      	str	r2, [r3, #4]
	  if (RoughButton.last == 1 && RoughButton.current == 0)
 8001c0c:	4b0f      	ldr	r3, [pc, #60]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	2b01      	cmp	r3, #1
 8001c12:	d107      	bne.n	8001c24 <JoystickPinUpdate+0xd0>
 8001c14:	4b0d      	ldr	r3, [pc, #52]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d103      	bne.n	8001c24 <JoystickPinUpdate+0xd0>
	  {
		  RoughButton.flag = 1;
 8001c1c:	4b0b      	ldr	r3, [pc, #44]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c1e:	2201      	movs	r2, #1
 8001c20:	609a      	str	r2, [r3, #8]
 8001c22:	e002      	b.n	8001c2a <JoystickPinUpdate+0xd6>
	  }
	  else
	  {
		  RoughButton.flag = 0;
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	609a      	str	r2, [r3, #8]
	  }
	  RoughButton.last = RoughButton.current;
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <JoystickPinUpdate+0xf8>)
 8001c30:	6013      	str	r3, [r2, #0]
}
 8001c32:	bf00      	nop
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40020400 	.word	0x40020400
 8001c3c:	200003a4 	.word	0x200003a4
 8001c40:	40020000 	.word	0x40020000
 8001c44:	200003b0 	.word	0x200003b0
 8001c48:	200003bc 	.word	0x200003bc
 8001c4c:	200003c8 	.word	0x200003c8

08001c50 <JoystickControl>:

void JoystickControl()
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
	static int JoySpeed = 0;

	if(RoughButton.flag == 1)
 8001c54:	4b37      	ldr	r3, [pc, #220]	; (8001d34 <JoystickControl+0xe4>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d106      	bne.n	8001c6a <JoystickControl+0x1a>
	{
		JoySpeed = 0;
 8001c5c:	4b36      	ldr	r3, [pc, #216]	; (8001d38 <JoystickControl+0xe8>)
 8001c5e:	2200      	movs	r2, #0
 8001c60:	601a      	str	r2, [r3, #0]
		RoughButton.flag = 0;
 8001c62:	4b34      	ldr	r3, [pc, #208]	; (8001d34 <JoystickControl+0xe4>)
 8001c64:	2200      	movs	r2, #0
 8001c66:	609a      	str	r2, [r3, #8]
 8001c68:	e009      	b.n	8001c7e <JoystickControl+0x2e>
	}
	else if(FineButton.flag == 1)
 8001c6a:	4b34      	ldr	r3, [pc, #208]	; (8001d3c <JoystickControl+0xec>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d105      	bne.n	8001c7e <JoystickControl+0x2e>
	{
		JoySpeed = 1;
 8001c72:	4b31      	ldr	r3, [pc, #196]	; (8001d38 <JoystickControl+0xe8>)
 8001c74:	2201      	movs	r2, #1
 8001c76:	601a      	str	r2, [r3, #0]
		FineButton.flag = 0;
 8001c78:	4b30      	ldr	r3, [pc, #192]	; (8001d3c <JoystickControl+0xec>)
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	609a      	str	r2, [r3, #8]
	}

	switch(JoySpeed)
 8001c7e:	4b2e      	ldr	r3, [pc, #184]	; (8001d38 <JoystickControl+0xe8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d002      	beq.n	8001c8c <JoystickControl+0x3c>
 8001c86:	2b01      	cmp	r3, #1
 8001c88:	d028      	beq.n	8001cdc <JoystickControl+0x8c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
		}
		break;
	}
}
 8001c8a:	e04d      	b.n	8001d28 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001c8c:	4b2c      	ldr	r3, [pc, #176]	; (8001d40 <JoystickControl+0xf0>)
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	f640 0266 	movw	r2, #2150	; 0x866
 8001c94:	4293      	cmp	r3, r2
 8001c96:	dd09      	ble.n	8001cac <JoystickControl+0x5c>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <JoystickControl+0xf4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001ca0:	4b28      	ldr	r3, [pc, #160]	; (8001d44 <JoystickControl+0xf4>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ca8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001caa:	e03d      	b.n	8001d28 <JoystickControl+0xd8>
		else if(XYSwitch[1] < 2000)
 8001cac:	4b24      	ldr	r3, [pc, #144]	; (8001d40 <JoystickControl+0xf0>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001cb4:	da09      	bge.n	8001cca <JoystickControl+0x7a>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001cb6:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <JoystickControl+0xf4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,1000);
 8001cbe:	4b21      	ldr	r3, [pc, #132]	; (8001d44 <JoystickControl+0xf4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001cc6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001cc8:	e02e      	b.n	8001d28 <JoystickControl+0xd8>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001cca:	4b1e      	ldr	r3, [pc, #120]	; (8001d44 <JoystickControl+0xf4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001cd2:	4b1c      	ldr	r3, [pc, #112]	; (8001d44 <JoystickControl+0xf4>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001cda:	e025      	b.n	8001d28 <JoystickControl+0xd8>
		if(XYSwitch[1] > 2150)
 8001cdc:	4b18      	ldr	r3, [pc, #96]	; (8001d40 <JoystickControl+0xf0>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f640 0266 	movw	r2, #2150	; 0x866
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	dd08      	ble.n	8001cfa <JoystickControl+0xaa>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001ce8:	4b16      	ldr	r3, [pc, #88]	; (8001d44 <JoystickControl+0xf4>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2200      	movs	r2, #0
 8001cee:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,250);
 8001cf0:	4b14      	ldr	r3, [pc, #80]	; (8001d44 <JoystickControl+0xf4>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	22fa      	movs	r2, #250	; 0xfa
 8001cf6:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001cf8:	e015      	b.n	8001d26 <JoystickControl+0xd6>
		else if(XYSwitch[1] < 2000)
 8001cfa:	4b11      	ldr	r3, [pc, #68]	; (8001d40 <JoystickControl+0xf0>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001d02:	da08      	bge.n	8001d16 <JoystickControl+0xc6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,250);
 8001d04:	4b0f      	ldr	r3, [pc, #60]	; (8001d44 <JoystickControl+0xf4>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	22fa      	movs	r2, #250	; 0xfa
 8001d0a:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d0c:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <JoystickControl+0xf4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	2200      	movs	r2, #0
 8001d12:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001d14:	e007      	b.n	8001d26 <JoystickControl+0xd6>
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_2,0);
 8001d16:	4b0b      	ldr	r3, [pc, #44]	; (8001d44 <JoystickControl+0xf4>)
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim1,TIM_CHANNEL_1,0);
 8001d1e:	4b09      	ldr	r3, [pc, #36]	; (8001d44 <JoystickControl+0xf4>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2200      	movs	r2, #0
 8001d24:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 8001d26:	bf00      	nop
}
 8001d28:	bf00      	nop
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr
 8001d32:	bf00      	nop
 8001d34:	200003c8 	.word	0x200003c8
 8001d38:	200003f0 	.word	0x200003f0
 8001d3c:	200003bc 	.word	0x200003bc
 8001d40:	200003d4 	.word	0x200003d4
 8001d44:	20000144 	.word	0x20000144

08001d48 <JoystickLocationState>:

void JoystickLocationState()
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	ed2d 8b02 	vpush	{d8}
 8001d4e:	af00      	add	r7, sp, #0
	static int state = 0;
	switch(state)
 8001d50:	4b1c      	ldr	r3, [pc, #112]	; (8001dc4 <JoystickLocationState+0x7c>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b04      	cmp	r3, #4
 8001d56:	f200 846e 	bhi.w	8002636 <JoystickLocationState+0x8ee>
 8001d5a:	a201      	add	r2, pc, #4	; (adr r2, 8001d60 <JoystickLocationState+0x18>)
 8001d5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d60:	08001d75 	.word	0x08001d75
 8001d64:	08001dd9 	.word	0x08001dd9
 8001d68:	080021bb 	.word	0x080021bb
 8001d6c:	08002229 	.word	0x08002229
 8001d70:	08002609 	.word	0x08002609
	{
	case 0:
		PickTray.L1[1] = 0;
 8001d74:	4b14      	ldr	r3, [pc, #80]	; (8001dc8 <JoystickLocationState+0x80>)
 8001d76:	f04f 0200 	mov.w	r2, #0
 8001d7a:	605a      	str	r2, [r3, #4]
		PickTray.L2[1] = 0;
 8001d7c:	4b12      	ldr	r3, [pc, #72]	; (8001dc8 <JoystickLocationState+0x80>)
 8001d7e:	f04f 0200 	mov.w	r2, #0
 8001d82:	60da      	str	r2, [r3, #12]
		PlaceTray.L1[1] = 0;
 8001d84:	4b11      	ldr	r3, [pc, #68]	; (8001dcc <JoystickLocationState+0x84>)
 8001d86:	f04f 0200 	mov.w	r2, #0
 8001d8a:	605a      	str	r2, [r3, #4]
		PlaceTray.L2[1] = 0;
 8001d8c:	4b0f      	ldr	r3, [pc, #60]	; (8001dcc <JoystickLocationState+0x84>)
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	60da      	str	r2, [r3, #12]
		if (GetPositionButton.flag == 1)
 8001d94:	4b0e      	ldr	r3, [pc, #56]	; (8001dd0 <JoystickLocationState+0x88>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	f040 8443 	bne.w	8002624 <JoystickLocationState+0x8dc>
		{
			PickTray.L1[1] = position;
 8001d9e:	4b0d      	ldr	r3, [pc, #52]	; (8001dd4 <JoystickLocationState+0x8c>)
 8001da0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001da4:	ee07 3a90 	vmov	s15, r3
 8001da8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001dac:	4b06      	ldr	r3, [pc, #24]	; (8001dc8 <JoystickLocationState+0x80>)
 8001dae:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 8001db2:	4b07      	ldr	r3, [pc, #28]	; (8001dd0 <JoystickLocationState+0x88>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	609a      	str	r2, [r3, #8]
			state = 1;
 8001db8:	4b02      	ldr	r3, [pc, #8]	; (8001dc4 <JoystickLocationState+0x7c>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
		}
		break;
 8001dbe:	f000 bc31 	b.w	8002624 <JoystickLocationState+0x8dc>
 8001dc2:	bf00      	nop
 8001dc4:	200003f4 	.word	0x200003f4
 8001dc8:	200002ec 	.word	0x200002ec
 8001dcc:	20000344 	.word	0x20000344
 8001dd0:	200003a4 	.word	0x200003a4
 8001dd4:	200002b4 	.word	0x200002b4
	case 1:
		if (GetPositionButton.flag == 1)
 8001dd8:	4bd6      	ldr	r3, [pc, #856]	; (8002134 <JoystickLocationState+0x3ec>)
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	f040 81e0 	bne.w	80021a2 <JoystickLocationState+0x45a>
		{
			PickTray.L2[1] = position;
 8001de2:	4bd5      	ldr	r3, [pc, #852]	; (8002138 <JoystickLocationState+0x3f0>)
 8001de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001de8:	ee07 3a90 	vmov	s15, r3
 8001dec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001df0:	4bd2      	ldr	r3, [pc, #840]	; (800213c <JoystickLocationState+0x3f4>)
 8001df2:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8001df6:	4bcf      	ldr	r3, [pc, #828]	; (8002134 <JoystickLocationState+0x3ec>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	609a      	str	r2, [r3, #8]
			cos_Theta = PickTray.L2[0]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001dfc:	4bcf      	ldr	r3, [pc, #828]	; (800213c <JoystickLocationState+0x3f4>)
 8001dfe:	ed93 8a02 	vldr	s16, [r3, #8]
 8001e02:	4bce      	ldr	r3, [pc, #824]	; (800213c <JoystickLocationState+0x3f4>)
 8001e04:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e08:	4bcc      	ldr	r3, [pc, #816]	; (800213c <JoystickLocationState+0x3f4>)
 8001e0a:	edd3 7a00 	vldr	s15, [r3]
 8001e0e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e12:	4bca      	ldr	r3, [pc, #808]	; (800213c <JoystickLocationState+0x3f4>)
 8001e14:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e18:	4bc8      	ldr	r3, [pc, #800]	; (800213c <JoystickLocationState+0x3f4>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e22:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e26:	4bc5      	ldr	r3, [pc, #788]	; (800213c <JoystickLocationState+0x3f4>)
 8001e28:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e2c:	4bc3      	ldr	r3, [pc, #780]	; (800213c <JoystickLocationState+0x3f4>)
 8001e2e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e36:	4bc1      	ldr	r3, [pc, #772]	; (800213c <JoystickLocationState+0x3f4>)
 8001e38:	ed93 6a03 	vldr	s12, [r3, #12]
 8001e3c:	4bbf      	ldr	r3, [pc, #764]	; (800213c <JoystickLocationState+0x3f4>)
 8001e3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e42:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e46:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001e52:	f004 ffad 	bl	8006db0 <sqrtf>
 8001e56:	eeb0 7a40 	vmov.f32	s14, s0
 8001e5a:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001e5e:	4bb8      	ldr	r3, [pc, #736]	; (8002140 <JoystickLocationState+0x3f8>)
 8001e60:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PickTray.L2[1]/(sqrtf(((PickTray.L2[0]-PickTray.L1[0])*(PickTray.L2[0]-PickTray.L1[0]))+((PickTray.L2[1]-PickTray.L1[1])*(PickTray.L2[1]-PickTray.L1[1]))));
 8001e64:	4bb5      	ldr	r3, [pc, #724]	; (800213c <JoystickLocationState+0x3f4>)
 8001e66:	ed93 8a03 	vldr	s16, [r3, #12]
 8001e6a:	4bb4      	ldr	r3, [pc, #720]	; (800213c <JoystickLocationState+0x3f4>)
 8001e6c:	ed93 7a02 	vldr	s14, [r3, #8]
 8001e70:	4bb2      	ldr	r3, [pc, #712]	; (800213c <JoystickLocationState+0x3f4>)
 8001e72:	edd3 7a00 	vldr	s15, [r3]
 8001e76:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e7a:	4bb0      	ldr	r3, [pc, #704]	; (800213c <JoystickLocationState+0x3f4>)
 8001e7c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001e80:	4bae      	ldr	r3, [pc, #696]	; (800213c <JoystickLocationState+0x3f4>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001e8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e8e:	4bab      	ldr	r3, [pc, #684]	; (800213c <JoystickLocationState+0x3f4>)
 8001e90:	edd3 6a03 	vldr	s13, [r3, #12]
 8001e94:	4ba9      	ldr	r3, [pc, #676]	; (800213c <JoystickLocationState+0x3f4>)
 8001e96:	edd3 7a01 	vldr	s15, [r3, #4]
 8001e9a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001e9e:	4ba7      	ldr	r3, [pc, #668]	; (800213c <JoystickLocationState+0x3f4>)
 8001ea0:	ed93 6a03 	vldr	s12, [r3, #12]
 8001ea4:	4ba5      	ldr	r3, [pc, #660]	; (800213c <JoystickLocationState+0x3f4>)
 8001ea6:	edd3 7a01 	vldr	s15, [r3, #4]
 8001eaa:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001eae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001eb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eb6:	eeb0 0a67 	vmov.f32	s0, s15
 8001eba:	f004 ff79 	bl	8006db0 <sqrtf>
 8001ebe:	eeb0 7a40 	vmov.f32	s14, s0
 8001ec2:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001ec6:	4b9f      	ldr	r3, [pc, #636]	; (8002144 <JoystickLocationState+0x3fc>)
 8001ec8:	edc3 7a00 	vstr	s15, [r3]

			PickTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 8001ecc:	4b9c      	ldr	r3, [pc, #624]	; (8002140 <JoystickLocationState+0x3f8>)
 8001ece:	edd3 7a00 	vldr	s15, [r3]
 8001ed2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ed6:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001eda:	4b9a      	ldr	r3, [pc, #616]	; (8002144 <JoystickLocationState+0x3fc>)
 8001edc:	edd3 7a00 	vldr	s15, [r3]
 8001ee0:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001ee4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ee8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eec:	4b93      	ldr	r3, [pc, #588]	; (800213c <JoystickLocationState+0x3f4>)
 8001eee:	edc3 7a04 	vstr	s15, [r3, #16]
			PickTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8001ef2:	4b94      	ldr	r3, [pc, #592]	; (8002144 <JoystickLocationState+0x3fc>)
 8001ef4:	edd3 7a00 	vldr	s15, [r3]
 8001ef8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001efc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f00:	4b8f      	ldr	r3, [pc, #572]	; (8002140 <JoystickLocationState+0x3f8>)
 8001f02:	edd3 7a00 	vldr	s15, [r3]
 8001f06:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001f0a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f12:	4b8a      	ldr	r3, [pc, #552]	; (800213c <JoystickLocationState+0x3f4>)
 8001f14:	edc3 7a05 	vstr	s15, [r3, #20]

			PickTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8001f18:	4b89      	ldr	r3, [pc, #548]	; (8002140 <JoystickLocationState+0x3f8>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f22:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f26:	4b87      	ldr	r3, [pc, #540]	; (8002144 <JoystickLocationState+0x3fc>)
 8001f28:	edd3 7a00 	vldr	s15, [r3]
 8001f2c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f38:	4b80      	ldr	r3, [pc, #512]	; (800213c <JoystickLocationState+0x3f4>)
 8001f3a:	edc3 7a06 	vstr	s15, [r3, #24]
			PickTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 8001f3e:	4b81      	ldr	r3, [pc, #516]	; (8002144 <JoystickLocationState+0x3fc>)
 8001f40:	edd3 7a00 	vldr	s15, [r3]
 8001f44:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001f48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f4c:	4b7c      	ldr	r3, [pc, #496]	; (8002140 <JoystickLocationState+0x3f8>)
 8001f4e:	edd3 7a00 	vldr	s15, [r3]
 8001f52:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001f56:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f5e:	4b77      	ldr	r3, [pc, #476]	; (800213c <JoystickLocationState+0x3f4>)
 8001f60:	edc3 7a07 	vstr	s15, [r3, #28]

			PickTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 8001f64:	4b76      	ldr	r3, [pc, #472]	; (8002140 <JoystickLocationState+0x3f8>)
 8001f66:	edd3 7a00 	vldr	s15, [r3]
 8001f6a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002150 <JoystickLocationState+0x408>
 8001f6e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f72:	4b74      	ldr	r3, [pc, #464]	; (8002144 <JoystickLocationState+0x3fc>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8001f7c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f84:	4b6d      	ldr	r3, [pc, #436]	; (800213c <JoystickLocationState+0x3f4>)
 8001f86:	edc3 7a08 	vstr	s15, [r3, #32]
			PickTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 8001f8a:	4b6e      	ldr	r3, [pc, #440]	; (8002144 <JoystickLocationState+0x3fc>)
 8001f8c:	edd3 7a00 	vldr	s15, [r3]
 8001f90:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8002150 <JoystickLocationState+0x408>
 8001f94:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001f98:	4b69      	ldr	r3, [pc, #420]	; (8002140 <JoystickLocationState+0x3f8>)
 8001f9a:	edd3 7a00 	vldr	s15, [r3]
 8001f9e:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8001fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fa6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001faa:	4b64      	ldr	r3, [pc, #400]	; (800213c <JoystickLocationState+0x3f4>)
 8001fac:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PickTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8001fb0:	4b63      	ldr	r3, [pc, #396]	; (8002140 <JoystickLocationState+0x3f8>)
 8001fb2:	edd3 7a00 	vldr	s15, [r3]
 8001fb6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fba:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fbe:	4b61      	ldr	r3, [pc, #388]	; (8002144 <JoystickLocationState+0x3fc>)
 8001fc0:	edd3 7a00 	vldr	s15, [r3]
 8001fc4:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8001fc8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001fcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fd0:	4b5a      	ldr	r3, [pc, #360]	; (800213c <JoystickLocationState+0x3f4>)
 8001fd2:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PickTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8001fd6:	4b5b      	ldr	r3, [pc, #364]	; (8002144 <JoystickLocationState+0x3fc>)
 8001fd8:	edd3 7a00 	vldr	s15, [r3]
 8001fdc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001fe0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001fe4:	4b56      	ldr	r3, [pc, #344]	; (8002140 <JoystickLocationState+0x3f8>)
 8001fe6:	edd3 7a00 	vldr	s15, [r3]
 8001fea:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8001fee:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8001ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ff6:	4b51      	ldr	r3, [pc, #324]	; (800213c <JoystickLocationState+0x3f4>)
 8001ff8:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PickTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 8001ffc:	4b50      	ldr	r3, [pc, #320]	; (8002140 <JoystickLocationState+0x3f8>)
 8001ffe:	edd3 7a00 	vldr	s15, [r3]
 8002002:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002006:	ee27 7a87 	vmul.f32	s14, s15, s14
 800200a:	4b4e      	ldr	r3, [pc, #312]	; (8002144 <JoystickLocationState+0x3fc>)
 800200c:	edd3 7a00 	vldr	s15, [r3]
 8002010:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002014:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002018:	ee77 7a27 	vadd.f32	s15, s14, s15
 800201c:	4b47      	ldr	r3, [pc, #284]	; (800213c <JoystickLocationState+0x3f4>)
 800201e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PickTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8002022:	4b48      	ldr	r3, [pc, #288]	; (8002144 <JoystickLocationState+0x3fc>)
 8002024:	edd3 7a00 	vldr	s15, [r3]
 8002028:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800202c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002030:	4b43      	ldr	r3, [pc, #268]	; (8002140 <JoystickLocationState+0x3f8>)
 8002032:	edd3 7a00 	vldr	s15, [r3]
 8002036:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800203a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800203e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002042:	4b3e      	ldr	r3, [pc, #248]	; (800213c <JoystickLocationState+0x3f4>)
 8002044:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PickTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8002048:	4b3d      	ldr	r3, [pc, #244]	; (8002140 <JoystickLocationState+0x3f8>)
 800204a:	edd3 7a00 	vldr	s15, [r3]
 800204e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8002150 <JoystickLocationState+0x408>
 8002052:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <JoystickLocationState+0x3fc>)
 8002058:	edd3 7a00 	vldr	s15, [r3]
 800205c:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002060:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002064:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002068:	4b34      	ldr	r3, [pc, #208]	; (800213c <JoystickLocationState+0x3f4>)
 800206a:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PickTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 800206e:	4b35      	ldr	r3, [pc, #212]	; (8002144 <JoystickLocationState+0x3fc>)
 8002070:	edd3 7a00 	vldr	s15, [r3]
 8002074:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002150 <JoystickLocationState+0x408>
 8002078:	ee27 7a87 	vmul.f32	s14, s15, s14
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <JoystickLocationState+0x3f8>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 8002086:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800208a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800208e:	4b2b      	ldr	r3, [pc, #172]	; (800213c <JoystickLocationState+0x3f4>)
 8002090:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PickTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <JoystickLocationState+0x3f8>)
 8002096:	edd3 7a00 	vldr	s15, [r3]
 800209a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800209e:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020a2:	4b28      	ldr	r3, [pc, #160]	; (8002144 <JoystickLocationState+0x3fc>)
 80020a4:	edd3 7a00 	vldr	s15, [r3]
 80020a8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002148 <JoystickLocationState+0x400>
 80020ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020b4:	4b21      	ldr	r3, [pc, #132]	; (800213c <JoystickLocationState+0x3f4>)
 80020b6:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PickTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 80020ba:	4b22      	ldr	r3, [pc, #136]	; (8002144 <JoystickLocationState+0x3fc>)
 80020bc:	edd3 7a00 	vldr	s15, [r3]
 80020c0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80020c4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020c8:	4b1d      	ldr	r3, [pc, #116]	; (8002140 <JoystickLocationState+0x3f8>)
 80020ca:	edd3 7a00 	vldr	s15, [r3]
 80020ce:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800214c <JoystickLocationState+0x404>
 80020d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020da:	4b18      	ldr	r3, [pc, #96]	; (800213c <JoystickLocationState+0x3f4>)
 80020dc:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PickTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 80020e0:	4b17      	ldr	r3, [pc, #92]	; (8002140 <JoystickLocationState+0x3f8>)
 80020e2:	edd3 7a00 	vldr	s15, [r3]
 80020e6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80020ea:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020ee:	4b15      	ldr	r3, [pc, #84]	; (8002144 <JoystickLocationState+0x3fc>)
 80020f0:	edd3 7a00 	vldr	s15, [r3]
 80020f4:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002148 <JoystickLocationState+0x400>
 80020f8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80020fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002100:	4b0e      	ldr	r3, [pc, #56]	; (800213c <JoystickLocationState+0x3f4>)
 8002102:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PickTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8002106:	4b0f      	ldr	r3, [pc, #60]	; (8002144 <JoystickLocationState+0x3fc>)
 8002108:	edd3 7a00 	vldr	s15, [r3]
 800210c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002110:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002114:	4b0a      	ldr	r3, [pc, #40]	; (8002140 <JoystickLocationState+0x3f8>)
 8002116:	edd3 7a00 	vldr	s15, [r3]
 800211a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800214c <JoystickLocationState+0x404>
 800211e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002122:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002126:	4b05      	ldr	r3, [pc, #20]	; (800213c <JoystickLocationState+0x3f4>)
 8002128:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PickTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 800212c:	4b04      	ldr	r3, [pc, #16]	; (8002140 <JoystickLocationState+0x3f8>)
 800212e:	edd3 7a00 	vldr	s15, [r3]
 8002132:	e00f      	b.n	8002154 <JoystickLocationState+0x40c>
 8002134:	200003a4 	.word	0x200003a4
 8002138:	200002b4 	.word	0x200002b4
 800213c:	200002ec 	.word	0x200002ec
 8002140:	2000039c 	.word	0x2000039c
 8002144:	200003a0 	.word	0x200003a0
 8002148:	42200000 	.word	0x42200000
 800214c:	c2200000 	.word	0xc2200000
 8002150:	42480000 	.word	0x42480000
 8002154:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 8002150 <JoystickLocationState+0x408>
 8002158:	ee27 7a87 	vmul.f32	s14, s15, s14
 800215c:	4b27      	ldr	r3, [pc, #156]	; (80021fc <JoystickLocationState+0x4b4>)
 800215e:	edd3 7a00 	vldr	s15, [r3]
 8002162:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002200 <JoystickLocationState+0x4b8>
 8002166:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800216a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800216e:	4b25      	ldr	r3, [pc, #148]	; (8002204 <JoystickLocationState+0x4bc>)
 8002170:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PickTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 8002174:	4b21      	ldr	r3, [pc, #132]	; (80021fc <JoystickLocationState+0x4b4>)
 8002176:	edd3 7a00 	vldr	s15, [r3]
 800217a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8002208 <JoystickLocationState+0x4c0>
 800217e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002182:	4b22      	ldr	r3, [pc, #136]	; (800220c <JoystickLocationState+0x4c4>)
 8002184:	edd3 7a00 	vldr	s15, [r3]
 8002188:	eddf 6a21 	vldr	s13, [pc, #132]	; 8002210 <JoystickLocationState+0x4c8>
 800218c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002190:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002194:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <JoystickLocationState+0x4bc>)
 8002196:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 2;
 800219a:	4b1e      	ldr	r3, [pc, #120]	; (8002214 <JoystickLocationState+0x4cc>)
 800219c:	2202      	movs	r2, #2
 800219e:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 80021a0:	e242      	b.n	8002628 <JoystickLocationState+0x8e0>
		else if (ResetButton.flag == 1)
 80021a2:	4b1d      	ldr	r3, [pc, #116]	; (8002218 <JoystickLocationState+0x4d0>)
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	f040 823e 	bne.w	8002628 <JoystickLocationState+0x8e0>
			ResetButton.flag = 0;
 80021ac:	4b1a      	ldr	r3, [pc, #104]	; (8002218 <JoystickLocationState+0x4d0>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	609a      	str	r2, [r3, #8]
			state = 0;
 80021b2:	4b18      	ldr	r3, [pc, #96]	; (8002214 <JoystickLocationState+0x4cc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	601a      	str	r2, [r3, #0]
		break;
 80021b8:	e236      	b.n	8002628 <JoystickLocationState+0x8e0>
	case 2:
		if (GetPositionButton.flag == 1)
 80021ba:	4b18      	ldr	r3, [pc, #96]	; (800221c <JoystickLocationState+0x4d4>)
 80021bc:	689b      	ldr	r3, [r3, #8]
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d110      	bne.n	80021e4 <JoystickLocationState+0x49c>
		{
			PlaceTray.L1[1] = position;
 80021c2:	4b17      	ldr	r3, [pc, #92]	; (8002220 <JoystickLocationState+0x4d8>)
 80021c4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021c8:	ee07 3a90 	vmov	s15, r3
 80021cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021d0:	4b14      	ldr	r3, [pc, #80]	; (8002224 <JoystickLocationState+0x4dc>)
 80021d2:	edc3 7a01 	vstr	s15, [r3, #4]
			GetPositionButton.flag = 0;
 80021d6:	4b11      	ldr	r3, [pc, #68]	; (800221c <JoystickLocationState+0x4d4>)
 80021d8:	2200      	movs	r2, #0
 80021da:	609a      	str	r2, [r3, #8]
			state = 3;
 80021dc:	4b0d      	ldr	r3, [pc, #52]	; (8002214 <JoystickLocationState+0x4cc>)
 80021de:	2203      	movs	r2, #3
 80021e0:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 80021e2:	e223      	b.n	800262c <JoystickLocationState+0x8e4>
		else if (ResetButton.flag == 1)
 80021e4:	4b0c      	ldr	r3, [pc, #48]	; (8002218 <JoystickLocationState+0x4d0>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	f040 821f 	bne.w	800262c <JoystickLocationState+0x8e4>
			ResetButton.flag = 0;
 80021ee:	4b0a      	ldr	r3, [pc, #40]	; (8002218 <JoystickLocationState+0x4d0>)
 80021f0:	2200      	movs	r2, #0
 80021f2:	609a      	str	r2, [r3, #8]
			state = 0;
 80021f4:	4b07      	ldr	r3, [pc, #28]	; (8002214 <JoystickLocationState+0x4cc>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	601a      	str	r2, [r3, #0]
		break;
 80021fa:	e217      	b.n	800262c <JoystickLocationState+0x8e4>
 80021fc:	200003a0 	.word	0x200003a0
 8002200:	42200000 	.word	0x42200000
 8002204:	200002ec 	.word	0x200002ec
 8002208:	42480000 	.word	0x42480000
 800220c:	2000039c 	.word	0x2000039c
 8002210:	c2200000 	.word	0xc2200000
 8002214:	200003f4 	.word	0x200003f4
 8002218:	200003b0 	.word	0x200003b0
 800221c:	200003a4 	.word	0x200003a4
 8002220:	200002b4 	.word	0x200002b4
 8002224:	20000344 	.word	0x20000344
	case 3:
		if (GetPositionButton.flag == 1)
 8002228:	4bd6      	ldr	r3, [pc, #856]	; (8002584 <JoystickLocationState+0x83c>)
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	2b01      	cmp	r3, #1
 800222e:	f040 81e0 	bne.w	80025f2 <JoystickLocationState+0x8aa>
		{
			PlaceTray.L2[1] = position;
 8002232:	4bd5      	ldr	r3, [pc, #852]	; (8002588 <JoystickLocationState+0x840>)
 8002234:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002238:	ee07 3a90 	vmov	s15, r3
 800223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002240:	4bd2      	ldr	r3, [pc, #840]	; (800258c <JoystickLocationState+0x844>)
 8002242:	edc3 7a03 	vstr	s15, [r3, #12]
			GetPositionButton.flag = 0;
 8002246:	4bcf      	ldr	r3, [pc, #828]	; (8002584 <JoystickLocationState+0x83c>)
 8002248:	2200      	movs	r2, #0
 800224a:	609a      	str	r2, [r3, #8]
			cos_Theta = PlaceTray.L2[0]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 800224c:	4bcf      	ldr	r3, [pc, #828]	; (800258c <JoystickLocationState+0x844>)
 800224e:	ed93 8a02 	vldr	s16, [r3, #8]
 8002252:	4bce      	ldr	r3, [pc, #824]	; (800258c <JoystickLocationState+0x844>)
 8002254:	ed93 7a02 	vldr	s14, [r3, #8]
 8002258:	4bcc      	ldr	r3, [pc, #816]	; (800258c <JoystickLocationState+0x844>)
 800225a:	edd3 7a00 	vldr	s15, [r3]
 800225e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002262:	4bca      	ldr	r3, [pc, #808]	; (800258c <JoystickLocationState+0x844>)
 8002264:	edd3 6a02 	vldr	s13, [r3, #8]
 8002268:	4bc8      	ldr	r3, [pc, #800]	; (800258c <JoystickLocationState+0x844>)
 800226a:	edd3 7a00 	vldr	s15, [r3]
 800226e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002272:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002276:	4bc5      	ldr	r3, [pc, #788]	; (800258c <JoystickLocationState+0x844>)
 8002278:	edd3 6a03 	vldr	s13, [r3, #12]
 800227c:	4bc3      	ldr	r3, [pc, #780]	; (800258c <JoystickLocationState+0x844>)
 800227e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002282:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002286:	4bc1      	ldr	r3, [pc, #772]	; (800258c <JoystickLocationState+0x844>)
 8002288:	ed93 6a03 	vldr	s12, [r3, #12]
 800228c:	4bbf      	ldr	r3, [pc, #764]	; (800258c <JoystickLocationState+0x844>)
 800228e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002292:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002296:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800229a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229e:	eeb0 0a67 	vmov.f32	s0, s15
 80022a2:	f004 fd85 	bl	8006db0 <sqrtf>
 80022a6:	eeb0 7a40 	vmov.f32	s14, s0
 80022aa:	eec8 7a07 	vdiv.f32	s15, s16, s14
 80022ae:	4bb8      	ldr	r3, [pc, #736]	; (8002590 <JoystickLocationState+0x848>)
 80022b0:	edc3 7a00 	vstr	s15, [r3]
			sin_Theta = PlaceTray.L2[1]/(sqrtf(((PlaceTray.L2[0]-PlaceTray.L1[0])*(PlaceTray.L2[0]-PlaceTray.L1[0]))+((PlaceTray.L2[1]-PlaceTray.L1[1])*(PlaceTray.L2[1]-PlaceTray.L1[1]))));
 80022b4:	4bb5      	ldr	r3, [pc, #724]	; (800258c <JoystickLocationState+0x844>)
 80022b6:	ed93 8a03 	vldr	s16, [r3, #12]
 80022ba:	4bb4      	ldr	r3, [pc, #720]	; (800258c <JoystickLocationState+0x844>)
 80022bc:	ed93 7a02 	vldr	s14, [r3, #8]
 80022c0:	4bb2      	ldr	r3, [pc, #712]	; (800258c <JoystickLocationState+0x844>)
 80022c2:	edd3 7a00 	vldr	s15, [r3]
 80022c6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022ca:	4bb0      	ldr	r3, [pc, #704]	; (800258c <JoystickLocationState+0x844>)
 80022cc:	edd3 6a02 	vldr	s13, [r3, #8]
 80022d0:	4bae      	ldr	r3, [pc, #696]	; (800258c <JoystickLocationState+0x844>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80022da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80022de:	4bab      	ldr	r3, [pc, #684]	; (800258c <JoystickLocationState+0x844>)
 80022e0:	edd3 6a03 	vldr	s13, [r3, #12]
 80022e4:	4ba9      	ldr	r3, [pc, #676]	; (800258c <JoystickLocationState+0x844>)
 80022e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80022ea:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80022ee:	4ba7      	ldr	r3, [pc, #668]	; (800258c <JoystickLocationState+0x844>)
 80022f0:	ed93 6a03 	vldr	s12, [r3, #12]
 80022f4:	4ba5      	ldr	r3, [pc, #660]	; (800258c <JoystickLocationState+0x844>)
 80022f6:	edd3 7a01 	vldr	s15, [r3, #4]
 80022fa:	ee76 7a67 	vsub.f32	s15, s12, s15
 80022fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002302:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002306:	eeb0 0a67 	vmov.f32	s0, s15
 800230a:	f004 fd51 	bl	8006db0 <sqrtf>
 800230e:	eeb0 7a40 	vmov.f32	s14, s0
 8002312:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8002316:	4b9f      	ldr	r3, [pc, #636]	; (8002594 <JoystickLocationState+0x84c>)
 8002318:	edc3 7a00 	vstr	s15, [r3]

			PlaceTray.hole_1[0] = (cos_Theta*10)+(-sin_Theta*-10);
 800231c:	4b9c      	ldr	r3, [pc, #624]	; (8002590 <JoystickLocationState+0x848>)
 800231e:	edd3 7a00 	vldr	s15, [r3]
 8002322:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002326:	ee27 7a87 	vmul.f32	s14, s15, s14
 800232a:	4b9a      	ldr	r3, [pc, #616]	; (8002594 <JoystickLocationState+0x84c>)
 800232c:	edd3 7a00 	vldr	s15, [r3]
 8002330:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002334:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002338:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233c:	4b93      	ldr	r3, [pc, #588]	; (800258c <JoystickLocationState+0x844>)
 800233e:	edc3 7a04 	vstr	s15, [r3, #16]
			PlaceTray.hole_1[1] = (sin_Theta*10)+(cos_Theta*-10);
 8002342:	4b94      	ldr	r3, [pc, #592]	; (8002594 <JoystickLocationState+0x84c>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800234c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002350:	4b8f      	ldr	r3, [pc, #572]	; (8002590 <JoystickLocationState+0x848>)
 8002352:	edd3 7a00 	vldr	s15, [r3]
 8002356:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 800235a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800235e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002362:	4b8a      	ldr	r3, [pc, #552]	; (800258c <JoystickLocationState+0x844>)
 8002364:	edc3 7a05 	vstr	s15, [r3, #20]

			PlaceTray.hole_2[0] = (cos_Theta*30)+(-sin_Theta*-10);
 8002368:	4b89      	ldr	r3, [pc, #548]	; (8002590 <JoystickLocationState+0x848>)
 800236a:	edd3 7a00 	vldr	s15, [r3]
 800236e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002372:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002376:	4b87      	ldr	r3, [pc, #540]	; (8002594 <JoystickLocationState+0x84c>)
 8002378:	edd3 7a00 	vldr	s15, [r3]
 800237c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8002380:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002384:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002388:	4b80      	ldr	r3, [pc, #512]	; (800258c <JoystickLocationState+0x844>)
 800238a:	edc3 7a06 	vstr	s15, [r3, #24]
			PlaceTray.hole_2[1] = (sin_Theta*30)+(cos_Theta*-10);
 800238e:	4b81      	ldr	r3, [pc, #516]	; (8002594 <JoystickLocationState+0x84c>)
 8002390:	edd3 7a00 	vldr	s15, [r3]
 8002394:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002398:	ee27 7a87 	vmul.f32	s14, s15, s14
 800239c:	4b7c      	ldr	r3, [pc, #496]	; (8002590 <JoystickLocationState+0x848>)
 800239e:	edd3 7a00 	vldr	s15, [r3]
 80023a2:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80023a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023ae:	4b77      	ldr	r3, [pc, #476]	; (800258c <JoystickLocationState+0x844>)
 80023b0:	edc3 7a07 	vstr	s15, [r3, #28]

			PlaceTray.hole_3[0] = (cos_Theta*50)+(-sin_Theta*-10);
 80023b4:	4b76      	ldr	r3, [pc, #472]	; (8002590 <JoystickLocationState+0x848>)
 80023b6:	edd3 7a00 	vldr	s15, [r3]
 80023ba:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80025a0 <JoystickLocationState+0x858>
 80023be:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023c2:	4b74      	ldr	r3, [pc, #464]	; (8002594 <JoystickLocationState+0x84c>)
 80023c4:	edd3 7a00 	vldr	s15, [r3]
 80023c8:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80023cc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023d4:	4b6d      	ldr	r3, [pc, #436]	; (800258c <JoystickLocationState+0x844>)
 80023d6:	edc3 7a08 	vstr	s15, [r3, #32]
			PlaceTray.hole_3[1] = (sin_Theta*50)+(cos_Theta*-10);
 80023da:	4b6e      	ldr	r3, [pc, #440]	; (8002594 <JoystickLocationState+0x84c>)
 80023dc:	edd3 7a00 	vldr	s15, [r3]
 80023e0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 80025a0 <JoystickLocationState+0x858>
 80023e4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80023e8:	4b69      	ldr	r3, [pc, #420]	; (8002590 <JoystickLocationState+0x848>)
 80023ea:	edd3 7a00 	vldr	s15, [r3]
 80023ee:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80023f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80023f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <JoystickLocationState+0x844>)
 80023fc:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

			PlaceTray.hole_4[0] = (cos_Theta*10)+(-sin_Theta*-25);
 8002400:	4b63      	ldr	r3, [pc, #396]	; (8002590 <JoystickLocationState+0x848>)
 8002402:	edd3 7a00 	vldr	s15, [r3]
 8002406:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800240a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800240e:	4b61      	ldr	r3, [pc, #388]	; (8002594 <JoystickLocationState+0x84c>)
 8002410:	edd3 7a00 	vldr	s15, [r3]
 8002414:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002418:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800241c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002420:	4b5a      	ldr	r3, [pc, #360]	; (800258c <JoystickLocationState+0x844>)
 8002422:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
			PlaceTray.hole_4[1] = (sin_Theta*10)+(cos_Theta*-25);
 8002426:	4b5b      	ldr	r3, [pc, #364]	; (8002594 <JoystickLocationState+0x84c>)
 8002428:	edd3 7a00 	vldr	s15, [r3]
 800242c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002430:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002434:	4b56      	ldr	r3, [pc, #344]	; (8002590 <JoystickLocationState+0x848>)
 8002436:	edd3 7a00 	vldr	s15, [r3]
 800243a:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800243e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002442:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002446:	4b51      	ldr	r3, [pc, #324]	; (800258c <JoystickLocationState+0x844>)
 8002448:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

			PlaceTray.hole_5[0] = (cos_Theta*30)+(-sin_Theta*-25);
 800244c:	4b50      	ldr	r3, [pc, #320]	; (8002590 <JoystickLocationState+0x848>)
 800244e:	edd3 7a00 	vldr	s15, [r3]
 8002452:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002456:	ee27 7a87 	vmul.f32	s14, s15, s14
 800245a:	4b4e      	ldr	r3, [pc, #312]	; (8002594 <JoystickLocationState+0x84c>)
 800245c:	edd3 7a00 	vldr	s15, [r3]
 8002460:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 8002464:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <JoystickLocationState+0x844>)
 800246e:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30
			PlaceTray.hole_5[1] = (sin_Theta*30)+(cos_Theta*-25);
 8002472:	4b48      	ldr	r3, [pc, #288]	; (8002594 <JoystickLocationState+0x84c>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800247c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002480:	4b43      	ldr	r3, [pc, #268]	; (8002590 <JoystickLocationState+0x848>)
 8002482:	edd3 7a00 	vldr	s15, [r3]
 8002486:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 800248a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800248e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <JoystickLocationState+0x844>)
 8002494:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34

			PlaceTray.hole_6[0] = (cos_Theta*50)+(-sin_Theta*-25);
 8002498:	4b3d      	ldr	r3, [pc, #244]	; (8002590 <JoystickLocationState+0x848>)
 800249a:	edd3 7a00 	vldr	s15, [r3]
 800249e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80025a0 <JoystickLocationState+0x858>
 80024a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024a6:	4b3b      	ldr	r3, [pc, #236]	; (8002594 <JoystickLocationState+0x84c>)
 80024a8:	edd3 7a00 	vldr	s15, [r3]
 80024ac:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0
 80024b0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024b8:	4b34      	ldr	r3, [pc, #208]	; (800258c <JoystickLocationState+0x844>)
 80024ba:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
			PlaceTray.hole_6[1] = (sin_Theta*50)+(cos_Theta*-25);
 80024be:	4b35      	ldr	r3, [pc, #212]	; (8002594 <JoystickLocationState+0x84c>)
 80024c0:	edd3 7a00 	vldr	s15, [r3]
 80024c4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80025a0 <JoystickLocationState+0x858>
 80024c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024cc:	4b30      	ldr	r3, [pc, #192]	; (8002590 <JoystickLocationState+0x848>)
 80024ce:	edd3 7a00 	vldr	s15, [r3]
 80024d2:	eefb 6a09 	vmov.f32	s13, #185	; 0xc1c80000 -25.0
 80024d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80024da:	ee77 7a27 	vadd.f32	s15, s14, s15
 80024de:	4b2b      	ldr	r3, [pc, #172]	; (800258c <JoystickLocationState+0x844>)
 80024e0:	edc3 7a0f 	vstr	s15, [r3, #60]	; 0x3c

			PlaceTray.hole_7[0] = (cos_Theta*10)+(-sin_Theta*-40);
 80024e4:	4b2a      	ldr	r3, [pc, #168]	; (8002590 <JoystickLocationState+0x848>)
 80024e6:	edd3 7a00 	vldr	s15, [r3]
 80024ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80024f2:	4b28      	ldr	r3, [pc, #160]	; (8002594 <JoystickLocationState+0x84c>)
 80024f4:	edd3 7a00 	vldr	s15, [r3]
 80024f8:	eddf 6a27 	vldr	s13, [pc, #156]	; 8002598 <JoystickLocationState+0x850>
 80024fc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002500:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002504:	4b21      	ldr	r3, [pc, #132]	; (800258c <JoystickLocationState+0x844>)
 8002506:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
			PlaceTray.hole_7[1] = (sin_Theta*10)+(cos_Theta*-40);
 800250a:	4b22      	ldr	r3, [pc, #136]	; (8002594 <JoystickLocationState+0x84c>)
 800250c:	edd3 7a00 	vldr	s15, [r3]
 8002510:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002514:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002518:	4b1d      	ldr	r3, [pc, #116]	; (8002590 <JoystickLocationState+0x848>)
 800251a:	edd3 7a00 	vldr	s15, [r3]
 800251e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800259c <JoystickLocationState+0x854>
 8002522:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002526:	ee77 7a27 	vadd.f32	s15, s14, s15
 800252a:	4b18      	ldr	r3, [pc, #96]	; (800258c <JoystickLocationState+0x844>)
 800252c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44

			PlaceTray.hole_8[0] = (cos_Theta*30)+(-sin_Theta*-40);
 8002530:	4b17      	ldr	r3, [pc, #92]	; (8002590 <JoystickLocationState+0x848>)
 8002532:	edd3 7a00 	vldr	s15, [r3]
 8002536:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800253a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <JoystickLocationState+0x84c>)
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	eddf 6a14 	vldr	s13, [pc, #80]	; 8002598 <JoystickLocationState+0x850>
 8002548:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800254c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <JoystickLocationState+0x844>)
 8002552:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
			PlaceTray.hole_8[1] = (sin_Theta*30)+(cos_Theta*-40);
 8002556:	4b0f      	ldr	r3, [pc, #60]	; (8002594 <JoystickLocationState+0x84c>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002560:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002564:	4b0a      	ldr	r3, [pc, #40]	; (8002590 <JoystickLocationState+0x848>)
 8002566:	edd3 7a00 	vldr	s15, [r3]
 800256a:	eddf 6a0c 	vldr	s13, [pc, #48]	; 800259c <JoystickLocationState+0x854>
 800256e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002572:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002576:	4b05      	ldr	r3, [pc, #20]	; (800258c <JoystickLocationState+0x844>)
 8002578:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c

			PlaceTray.hole_9[0] = (cos_Theta*50)+(-sin_Theta*-40);
 800257c:	4b04      	ldr	r3, [pc, #16]	; (8002590 <JoystickLocationState+0x848>)
 800257e:	edd3 7a00 	vldr	s15, [r3]
 8002582:	e00f      	b.n	80025a4 <JoystickLocationState+0x85c>
 8002584:	200003a4 	.word	0x200003a4
 8002588:	200002b4 	.word	0x200002b4
 800258c:	20000344 	.word	0x20000344
 8002590:	2000039c 	.word	0x2000039c
 8002594:	200003a0 	.word	0x200003a0
 8002598:	42200000 	.word	0x42200000
 800259c:	c2200000 	.word	0xc2200000
 80025a0:	42480000 	.word	0x42480000
 80025a4:	ed1f 7a02 	vldr	s14, [pc, #-8]	; 80025a0 <JoystickLocationState+0x858>
 80025a8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025ac:	4b24      	ldr	r3, [pc, #144]	; (8002640 <JoystickLocationState+0x8f8>)
 80025ae:	edd3 7a00 	vldr	s15, [r3]
 80025b2:	eddf 6a24 	vldr	s13, [pc, #144]	; 8002644 <JoystickLocationState+0x8fc>
 80025b6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025be:	4b22      	ldr	r3, [pc, #136]	; (8002648 <JoystickLocationState+0x900>)
 80025c0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			PlaceTray.hole_9[1] = (sin_Theta*50)+(cos_Theta*-40);
 80025c4:	4b1e      	ldr	r3, [pc, #120]	; (8002640 <JoystickLocationState+0x8f8>)
 80025c6:	edd3 7a00 	vldr	s15, [r3]
 80025ca:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800264c <JoystickLocationState+0x904>
 80025ce:	ee27 7a87 	vmul.f32	s14, s15, s14
 80025d2:	4b1f      	ldr	r3, [pc, #124]	; (8002650 <JoystickLocationState+0x908>)
 80025d4:	edd3 7a00 	vldr	s15, [r3]
 80025d8:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8002654 <JoystickLocationState+0x90c>
 80025dc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80025e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e4:	4b18      	ldr	r3, [pc, #96]	; (8002648 <JoystickLocationState+0x900>)
 80025e6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			state = 4;
 80025ea:	4b1b      	ldr	r3, [pc, #108]	; (8002658 <JoystickLocationState+0x910>)
 80025ec:	2204      	movs	r2, #4
 80025ee:	601a      	str	r2, [r3, #0]
		else if (ResetButton.flag == 1)
		{
			ResetButton.flag = 0;
			state = 0;
		}
		break;
 80025f0:	e01e      	b.n	8002630 <JoystickLocationState+0x8e8>
		else if (ResetButton.flag == 1)
 80025f2:	4b1a      	ldr	r3, [pc, #104]	; (800265c <JoystickLocationState+0x914>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2b01      	cmp	r3, #1
 80025f8:	d11a      	bne.n	8002630 <JoystickLocationState+0x8e8>
			ResetButton.flag = 0;
 80025fa:	4b18      	ldr	r3, [pc, #96]	; (800265c <JoystickLocationState+0x914>)
 80025fc:	2200      	movs	r2, #0
 80025fe:	609a      	str	r2, [r3, #8]
			state = 0;
 8002600:	4b15      	ldr	r3, [pc, #84]	; (8002658 <JoystickLocationState+0x910>)
 8002602:	2200      	movs	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
		break;
 8002606:	e013      	b.n	8002630 <JoystickLocationState+0x8e8>
	case 4:
		scheduler = 1;
 8002608:	4b15      	ldr	r3, [pc, #84]	; (8002660 <JoystickLocationState+0x918>)
 800260a:	2201      	movs	r2, #1
 800260c:	601a      	str	r2, [r3, #0]
		if (ResetButton.flag == 1)
 800260e:	4b13      	ldr	r3, [pc, #76]	; (800265c <JoystickLocationState+0x914>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b01      	cmp	r3, #1
 8002614:	d10e      	bne.n	8002634 <JoystickLocationState+0x8ec>
		{
			ResetButton.flag = 0;
 8002616:	4b11      	ldr	r3, [pc, #68]	; (800265c <JoystickLocationState+0x914>)
 8002618:	2200      	movs	r2, #0
 800261a:	609a      	str	r2, [r3, #8]
			state = 0;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <JoystickLocationState+0x910>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]
		}
		break;
 8002622:	e007      	b.n	8002634 <JoystickLocationState+0x8ec>
		break;
 8002624:	bf00      	nop
 8002626:	e006      	b.n	8002636 <JoystickLocationState+0x8ee>
		break;
 8002628:	bf00      	nop
 800262a:	e004      	b.n	8002636 <JoystickLocationState+0x8ee>
		break;
 800262c:	bf00      	nop
 800262e:	e002      	b.n	8002636 <JoystickLocationState+0x8ee>
		break;
 8002630:	bf00      	nop
 8002632:	e000      	b.n	8002636 <JoystickLocationState+0x8ee>
		break;
 8002634:	bf00      	nop
	}
}
 8002636:	bf00      	nop
 8002638:	46bd      	mov	sp, r7
 800263a:	ecbd 8b02 	vpop	{d8}
 800263e:	bd80      	pop	{r7, pc}
 8002640:	200003a0 	.word	0x200003a0
 8002644:	42200000 	.word	0x42200000
 8002648:	20000344 	.word	0x20000344
 800264c:	42480000 	.word	0x42480000
 8002650:	2000039c 	.word	0x2000039c
 8002654:	c2200000 	.word	0xc2200000
 8002658:	200003f4 	.word	0x200003f4
 800265c:	200003b0 	.word	0x200003b0
 8002660:	20000260 	.word	0x20000260

08002664 <TrajectoryGenerator>:

void TrajectoryGenerator()
{
 8002664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002668:	ed2d 8b02 	vpush	{d8}
 800266c:	b08a      	sub	sp, #40	; 0x28
 800266e:	af00      	add	r7, sp, #0
	switch(Trajectstate)
 8002670:	4ba2      	ldr	r3, [pc, #648]	; (80028fc <TrajectoryGenerator+0x298>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b02      	cmp	r3, #2
 8002676:	f000 8339 	beq.w	8002cec <TrajectoryGenerator+0x688>
 800267a:	2b02      	cmp	r3, #2
 800267c:	f300 85a8 	bgt.w	80031d0 <TrajectoryGenerator+0xb6c>
 8002680:	2b00      	cmp	r3, #0
 8002682:	d004      	beq.n	800268e <TrajectoryGenerator+0x2a>
 8002684:	2b01      	cmp	r3, #1
 8002686:	f000 8153 	beq.w	8002930 <TrajectoryGenerator+0x2cc>
	 else if(micros() > initime+tacc+tconst+tdec){
		 Trajectstate = 3;
	 }
	 break;
	}
}
 800268a:	f000 bda1 	b.w	80031d0 <TrajectoryGenerator+0xb6c>
		qi = position;
 800268e:	4b9c      	ldr	r3, [pc, #624]	; (8002900 <TrajectoryGenerator+0x29c>)
 8002690:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002694:	ee07 3a90 	vmov	s15, r3
 8002698:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800269c:	4b99      	ldr	r3, [pc, #612]	; (8002904 <TrajectoryGenerator+0x2a0>)
 800269e:	edc3 7a00 	vstr	s15, [r3]
		qf = 8000; //nonny
 80026a2:	4b99      	ldr	r3, [pc, #612]	; (8002908 <TrajectoryGenerator+0x2a4>)
 80026a4:	4a99      	ldr	r2, [pc, #612]	; (800290c <TrajectoryGenerator+0x2a8>)
 80026a6:	601a      	str	r2, [r3, #0]
		qdi = 0;
 80026a8:	4b99      	ldr	r3, [pc, #612]	; (8002910 <TrajectoryGenerator+0x2ac>)
 80026aa:	f04f 0200 	mov.w	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
		qd_max = 0.011; //pulse/us
 80026b0:	4b98      	ldr	r3, [pc, #608]	; (8002914 <TrajectoryGenerator+0x2b0>)
 80026b2:	4a99      	ldr	r2, [pc, #612]	; (8002918 <TrajectoryGenerator+0x2b4>)
 80026b4:	601a      	str	r2, [r3, #0]
		qdd_max = 0.008; //pulse/us2
 80026b6:	4b99      	ldr	r3, [pc, #612]	; (800291c <TrajectoryGenerator+0x2b8>)
 80026b8:	4a99      	ldr	r2, [pc, #612]	; (8002920 <TrajectoryGenerator+0x2bc>)
 80026ba:	601a      	str	r2, [r3, #0]
	  float qdi_1 = 0;
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	60fb      	str	r3, [r7, #12]
	  float qdi_2 = 0;
 80026c2:	f04f 0300 	mov.w	r3, #0
 80026c6:	617b      	str	r3, [r7, #20]
	  float qi_1 = 0;
 80026c8:	f04f 0300 	mov.w	r3, #0
 80026cc:	61fb      	str	r3, [r7, #28]
	  float qi_2 = 0;
 80026ce:	f04f 0300 	mov.w	r3, #0
 80026d2:	61bb      	str	r3, [r7, #24]
	  if(qf > qi)
 80026d4:	4b8c      	ldr	r3, [pc, #560]	; (8002908 <TrajectoryGenerator+0x2a4>)
 80026d6:	ed93 7a00 	vldr	s14, [r3]
 80026da:	4b8a      	ldr	r3, [pc, #552]	; (8002904 <TrajectoryGenerator+0x2a0>)
 80026dc:	edd3 7a00 	vldr	s15, [r3]
 80026e0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e8:	dd20      	ble.n	800272c <TrajectoryGenerator+0xc8>
		  t_half = sqrt((qf-qi)/qdd_max);
 80026ea:	4b87      	ldr	r3, [pc, #540]	; (8002908 <TrajectoryGenerator+0x2a4>)
 80026ec:	ed93 7a00 	vldr	s14, [r3]
 80026f0:	4b84      	ldr	r3, [pc, #528]	; (8002904 <TrajectoryGenerator+0x2a0>)
 80026f2:	edd3 7a00 	vldr	s15, [r3]
 80026f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80026fa:	4b88      	ldr	r3, [pc, #544]	; (800291c <TrajectoryGenerator+0x2b8>)
 80026fc:	edd3 7a00 	vldr	s15, [r3]
 8002700:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002704:	ee16 0a90 	vmov	r0, s13
 8002708:	f7fd feca 	bl	80004a0 <__aeabi_f2d>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	ec43 2b10 	vmov	d0, r2, r3
 8002714:	f004 fb20 	bl	8006d58 <sqrt>
 8002718:	ec53 2b10 	vmov	r2, r3, d0
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f7fe f9ee 	bl	8000b00 <__aeabi_d2f>
 8002724:	4603      	mov	r3, r0
 8002726:	4a7f      	ldr	r2, [pc, #508]	; (8002924 <TrajectoryGenerator+0x2c0>)
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	e02c      	b.n	8002786 <TrajectoryGenerator+0x122>
	  else if(qf < qi)
 800272c:	4b76      	ldr	r3, [pc, #472]	; (8002908 <TrajectoryGenerator+0x2a4>)
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	4b74      	ldr	r3, [pc, #464]	; (8002904 <TrajectoryGenerator+0x2a0>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800273c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002740:	d521      	bpl.n	8002786 <TrajectoryGenerator+0x122>
		  t_half = sqrt(-1*(qf-qi)/qdd_max);
 8002742:	4b71      	ldr	r3, [pc, #452]	; (8002908 <TrajectoryGenerator+0x2a4>)
 8002744:	ed93 7a00 	vldr	s14, [r3]
 8002748:	4b6e      	ldr	r3, [pc, #440]	; (8002904 <TrajectoryGenerator+0x2a0>)
 800274a:	edd3 7a00 	vldr	s15, [r3]
 800274e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002752:	eeb1 7a67 	vneg.f32	s14, s15
 8002756:	4b71      	ldr	r3, [pc, #452]	; (800291c <TrajectoryGenerator+0x2b8>)
 8002758:	edd3 7a00 	vldr	s15, [r3]
 800275c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002760:	ee16 0a90 	vmov	r0, s13
 8002764:	f7fd fe9c 	bl	80004a0 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	ec43 2b10 	vmov	d0, r2, r3
 8002770:	f004 faf2 	bl	8006d58 <sqrt>
 8002774:	ec53 2b10 	vmov	r2, r3, d0
 8002778:	4610      	mov	r0, r2
 800277a:	4619      	mov	r1, r3
 800277c:	f7fe f9c0 	bl	8000b00 <__aeabi_d2f>
 8002780:	4603      	mov	r3, r0
 8002782:	4a68      	ldr	r2, [pc, #416]	; (8002924 <TrajectoryGenerator+0x2c0>)
 8002784:	6013      	str	r3, [r2, #0]
	  if(qf-qi < 0)
 8002786:	4b60      	ldr	r3, [pc, #384]	; (8002908 <TrajectoryGenerator+0x2a4>)
 8002788:	ed93 7a00 	vldr	s14, [r3]
 800278c:	4b5d      	ldr	r3, [pc, #372]	; (8002904 <TrajectoryGenerator+0x2a0>)
 800278e:	edd3 7a00 	vldr	s15, [r3]
 8002792:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002796:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800279a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800279e:	d50f      	bpl.n	80027c0 <TrajectoryGenerator+0x15c>
		  qd_max = -1*qd_max;
 80027a0:	4b5c      	ldr	r3, [pc, #368]	; (8002914 <TrajectoryGenerator+0x2b0>)
 80027a2:	edd3 7a00 	vldr	s15, [r3]
 80027a6:	eef1 7a67 	vneg.f32	s15, s15
 80027aa:	4b5a      	ldr	r3, [pc, #360]	; (8002914 <TrajectoryGenerator+0x2b0>)
 80027ac:	edc3 7a00 	vstr	s15, [r3]
		  qdd_max = -1*qdd_max;
 80027b0:	4b5a      	ldr	r3, [pc, #360]	; (800291c <TrajectoryGenerator+0x2b8>)
 80027b2:	edd3 7a00 	vldr	s15, [r3]
 80027b6:	eef1 7a67 	vneg.f32	s15, s15
 80027ba:	4b58      	ldr	r3, [pc, #352]	; (800291c <TrajectoryGenerator+0x2b8>)
 80027bc:	edc3 7a00 	vstr	s15, [r3]
	  float tacc = (qd_max-qdi)/qdd_max;
 80027c0:	4b54      	ldr	r3, [pc, #336]	; (8002914 <TrajectoryGenerator+0x2b0>)
 80027c2:	ed93 7a00 	vldr	s14, [r3]
 80027c6:	4b52      	ldr	r3, [pc, #328]	; (8002910 <TrajectoryGenerator+0x2ac>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee77 6a67 	vsub.f32	s13, s14, s15
 80027d0:	4b52      	ldr	r3, [pc, #328]	; (800291c <TrajectoryGenerator+0x2b8>)
 80027d2:	ed93 7a00 	vldr	s14, [r3]
 80027d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027da:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	  float qacc = qdi*tacc + 0.5*qdd_max*tacc*tacc;
 80027de:	4b4c      	ldr	r3, [pc, #304]	; (8002910 <TrajectoryGenerator+0x2ac>)
 80027e0:	ed93 7a00 	vldr	s14, [r3]
 80027e4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ec:	ee17 0a90 	vmov	r0, s15
 80027f0:	f7fd fe56 	bl	80004a0 <__aeabi_f2d>
 80027f4:	4604      	mov	r4, r0
 80027f6:	460d      	mov	r5, r1
 80027f8:	4b48      	ldr	r3, [pc, #288]	; (800291c <TrajectoryGenerator+0x2b8>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd fe4f 	bl	80004a0 <__aeabi_f2d>
 8002802:	f04f 0200 	mov.w	r2, #0
 8002806:	4b48      	ldr	r3, [pc, #288]	; (8002928 <TrajectoryGenerator+0x2c4>)
 8002808:	f7fd fea2 	bl	8000550 <__aeabi_dmul>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4690      	mov	r8, r2
 8002812:	4699      	mov	r9, r3
 8002814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002816:	f7fd fe43 	bl	80004a0 <__aeabi_f2d>
 800281a:	4602      	mov	r2, r0
 800281c:	460b      	mov	r3, r1
 800281e:	4640      	mov	r0, r8
 8002820:	4649      	mov	r1, r9
 8002822:	f7fd fe95 	bl	8000550 <__aeabi_dmul>
 8002826:	4602      	mov	r2, r0
 8002828:	460b      	mov	r3, r1
 800282a:	4690      	mov	r8, r2
 800282c:	4699      	mov	r9, r3
 800282e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002830:	f7fd fe36 	bl	80004a0 <__aeabi_f2d>
 8002834:	4602      	mov	r2, r0
 8002836:	460b      	mov	r3, r1
 8002838:	4640      	mov	r0, r8
 800283a:	4649      	mov	r1, r9
 800283c:	f7fd fe88 	bl	8000550 <__aeabi_dmul>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4620      	mov	r0, r4
 8002846:	4629      	mov	r1, r5
 8002848:	f7fd fccc 	bl	80001e4 <__adddf3>
 800284c:	4602      	mov	r2, r0
 800284e:	460b      	mov	r3, r1
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	f7fe f954 	bl	8000b00 <__aeabi_d2f>
 8002858:	4603      	mov	r3, r0
 800285a:	60bb      	str	r3, [r7, #8]
	  float qdec = qacc;
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	607b      	str	r3, [r7, #4]
	  float tconst = ((qf-qi)-qacc-qdec)/qd_max;
 8002860:	4b29      	ldr	r3, [pc, #164]	; (8002908 <TrajectoryGenerator+0x2a4>)
 8002862:	ed93 7a00 	vldr	s14, [r3]
 8002866:	4b27      	ldr	r3, [pc, #156]	; (8002904 <TrajectoryGenerator+0x2a0>)
 8002868:	edd3 7a00 	vldr	s15, [r3]
 800286c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002870:	edd7 7a02 	vldr	s15, [r7, #8]
 8002874:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002878:	edd7 7a01 	vldr	s15, [r7, #4]
 800287c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002880:	4b24      	ldr	r3, [pc, #144]	; (8002914 <TrajectoryGenerator+0x2b0>)
 8002882:	ed93 7a00 	vldr	s14, [r3]
 8002886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800288a:	edc7 7a08 	vstr	s15, [r7, #32]
	  float tdec = tacc;
 800288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002890:	613b      	str	r3, [r7, #16]
	  if(qdi+qdd_max*t_half >= qd_max)
 8002892:	4b22      	ldr	r3, [pc, #136]	; (800291c <TrajectoryGenerator+0x2b8>)
 8002894:	ed93 7a00 	vldr	s14, [r3]
 8002898:	4b22      	ldr	r3, [pc, #136]	; (8002924 <TrajectoryGenerator+0x2c0>)
 800289a:	edd3 7a00 	vldr	s15, [r3]
 800289e:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028a2:	4b1b      	ldr	r3, [pc, #108]	; (8002910 <TrajectoryGenerator+0x2ac>)
 80028a4:	edd3 7a00 	vldr	s15, [r3]
 80028a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <TrajectoryGenerator+0x2b0>)
 80028ae:	edd3 7a00 	vldr	s15, [r3]
 80028b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ba:	db0f      	blt.n	80028dc <TrajectoryGenerator+0x278>
		  initime = micros();
 80028bc:	f7fe ffd0 	bl	8001860 <micros>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe fa32 	bl	8000d30 <__aeabi_ul2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a17      	ldr	r2, [pc, #92]	; (800292c <TrajectoryGenerator+0x2c8>)
 80028d0:	6013      	str	r3, [r2, #0]
		  Trajectstate = 2;
 80028d2:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <TrajectoryGenerator+0x298>)
 80028d4:	2202      	movs	r2, #2
 80028d6:	601a      	str	r2, [r3, #0]
	  break;
 80028d8:	f000 bc7a 	b.w	80031d0 <TrajectoryGenerator+0xb6c>
		  initime = micros();
 80028dc:	f7fe ffc0 	bl	8001860 <micros>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f7fe fa22 	bl	8000d30 <__aeabi_ul2f>
 80028ec:	4603      	mov	r3, r0
 80028ee:	4a0f      	ldr	r2, [pc, #60]	; (800292c <TrajectoryGenerator+0x2c8>)
 80028f0:	6013      	str	r3, [r2, #0]
		  Trajectstate = 1;
 80028f2:	4b02      	ldr	r3, [pc, #8]	; (80028fc <TrajectoryGenerator+0x298>)
 80028f4:	2201      	movs	r2, #1
 80028f6:	601a      	str	r2, [r3, #0]
	  break;
 80028f8:	f000 bc6a 	b.w	80031d0 <TrajectoryGenerator+0xb6c>
 80028fc:	2000029c 	.word	0x2000029c
 8002900:	200002b4 	.word	0x200002b4
 8002904:	200002a4 	.word	0x200002a4
 8002908:	200002a0 	.word	0x200002a0
 800290c:	45fa0000 	.word	0x45fa0000
 8002910:	200002a8 	.word	0x200002a8
 8002914:	20000008 	.word	0x20000008
 8002918:	3c343958 	.word	0x3c343958
 800291c:	2000000c 	.word	0x2000000c
 8002920:	3c03126f 	.word	0x3c03126f
 8002924:	200002b0 	.word	0x200002b0
 8002928:	3fe00000 	.word	0x3fe00000
 800292c:	200002ac 	.word	0x200002ac
	  if(micros() <= t_half + initime){
 8002930:	f7fe ff96 	bl	8001860 <micros>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4610      	mov	r0, r2
 800293a:	4619      	mov	r1, r3
 800293c:	f7fe f9f8 	bl	8000d30 <__aeabi_ul2f>
 8002940:	ee06 0a90 	vmov	s13, r0
 8002944:	4bdf      	ldr	r3, [pc, #892]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002946:	ed93 7a00 	vldr	s14, [r3]
 800294a:	4bdf      	ldr	r3, [pc, #892]	; (8002cc8 <TrajectoryGenerator+0x664>)
 800294c:	edd3 7a00 	vldr	s15, [r3]
 8002950:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002954:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800295c:	f200 80b5 	bhi.w	8002aca <TrajectoryGenerator+0x466>
	   setacc = qdd_max;
 8002960:	4bda      	ldr	r3, [pc, #872]	; (8002ccc <TrajectoryGenerator+0x668>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800296a:	ee17 3a90 	vmov	r3, s15
 800296e:	b21a      	sxth	r2, r3
 8002970:	4bd7      	ldr	r3, [pc, #860]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 8002972:	801a      	strh	r2, [r3, #0]
	   setvelocity = qdi + setacc*(micros()-initime);
 8002974:	4bd6      	ldr	r3, [pc, #856]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 8002976:	f9b3 3000 	ldrsh.w	r3, [r3]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002982:	f7fe ff6d 	bl	8001860 <micros>
 8002986:	4602      	mov	r2, r0
 8002988:	460b      	mov	r3, r1
 800298a:	4610      	mov	r0, r2
 800298c:	4619      	mov	r1, r3
 800298e:	f7fe f9cf 	bl	8000d30 <__aeabi_ul2f>
 8002992:	ee07 0a10 	vmov	s14, r0
 8002996:	4bcc      	ldr	r3, [pc, #816]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	ee28 7a27 	vmul.f32	s14, s16, s15
 80029a4:	4bcb      	ldr	r3, [pc, #812]	; (8002cd4 <TrajectoryGenerator+0x670>)
 80029a6:	edd3 7a00 	vldr	s15, [r3]
 80029aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029b2:	ee17 3a90 	vmov	r3, s15
 80029b6:	b21a      	sxth	r2, r3
 80029b8:	4bc7      	ldr	r3, [pc, #796]	; (8002cd8 <TrajectoryGenerator+0x674>)
 80029ba:	801a      	strh	r2, [r3, #0]
	   setposition = qi + qdi*(micros()-initime)+0.5*setacc*(micros()-initime)*(micros()-initime);
 80029bc:	f7fe ff50 	bl	8001860 <micros>
 80029c0:	4602      	mov	r2, r0
 80029c2:	460b      	mov	r3, r1
 80029c4:	4610      	mov	r0, r2
 80029c6:	4619      	mov	r1, r3
 80029c8:	f7fe f9b2 	bl	8000d30 <__aeabi_ul2f>
 80029cc:	ee07 0a10 	vmov	s14, r0
 80029d0:	4bbd      	ldr	r3, [pc, #756]	; (8002cc8 <TrajectoryGenerator+0x664>)
 80029d2:	edd3 7a00 	vldr	s15, [r3]
 80029d6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80029da:	4bbe      	ldr	r3, [pc, #760]	; (8002cd4 <TrajectoryGenerator+0x670>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029e4:	4bbd      	ldr	r3, [pc, #756]	; (8002cdc <TrajectoryGenerator+0x678>)
 80029e6:	edd3 7a00 	vldr	s15, [r3]
 80029ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029ee:	ee17 0a90 	vmov	r0, s15
 80029f2:	f7fd fd55 	bl	80004a0 <__aeabi_f2d>
 80029f6:	4604      	mov	r4, r0
 80029f8:	460d      	mov	r5, r1
 80029fa:	4bb5      	ldr	r3, [pc, #724]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 80029fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7fd fd3b 	bl	800047c <__aeabi_i2d>
 8002a06:	f04f 0200 	mov.w	r2, #0
 8002a0a:	4bb5      	ldr	r3, [pc, #724]	; (8002ce0 <TrajectoryGenerator+0x67c>)
 8002a0c:	f7fd fda0 	bl	8000550 <__aeabi_dmul>
 8002a10:	4602      	mov	r2, r0
 8002a12:	460b      	mov	r3, r1
 8002a14:	4690      	mov	r8, r2
 8002a16:	4699      	mov	r9, r3
 8002a18:	f7fe ff22 	bl	8001860 <micros>
 8002a1c:	4602      	mov	r2, r0
 8002a1e:	460b      	mov	r3, r1
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	f7fe f984 	bl	8000d30 <__aeabi_ul2f>
 8002a28:	ee07 0a10 	vmov	s14, r0
 8002a2c:	4ba6      	ldr	r3, [pc, #664]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002a2e:	edd3 7a00 	vldr	s15, [r3]
 8002a32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a36:	ee17 0a90 	vmov	r0, s15
 8002a3a:	f7fd fd31 	bl	80004a0 <__aeabi_f2d>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4640      	mov	r0, r8
 8002a44:	4649      	mov	r1, r9
 8002a46:	f7fd fd83 	bl	8000550 <__aeabi_dmul>
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4690      	mov	r8, r2
 8002a50:	4699      	mov	r9, r3
 8002a52:	f7fe ff05 	bl	8001860 <micros>
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	4610      	mov	r0, r2
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	f7fe f967 	bl	8000d30 <__aeabi_ul2f>
 8002a62:	ee07 0a10 	vmov	s14, r0
 8002a66:	4b98      	ldr	r3, [pc, #608]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002a68:	edd3 7a00 	vldr	s15, [r3]
 8002a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a70:	ee17 0a90 	vmov	r0, s15
 8002a74:	f7fd fd14 	bl	80004a0 <__aeabi_f2d>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	460b      	mov	r3, r1
 8002a7c:	4640      	mov	r0, r8
 8002a7e:	4649      	mov	r1, r9
 8002a80:	f7fd fd66 	bl	8000550 <__aeabi_dmul>
 8002a84:	4602      	mov	r2, r0
 8002a86:	460b      	mov	r3, r1
 8002a88:	4620      	mov	r0, r4
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	f7fd fbaa 	bl	80001e4 <__adddf3>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4610      	mov	r0, r2
 8002a96:	4619      	mov	r1, r3
 8002a98:	f7fe f80a 	bl	8000ab0 <__aeabi_d2iz>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	b21a      	sxth	r2, r3
 8002aa0:	4b90      	ldr	r3, [pc, #576]	; (8002ce4 <TrajectoryGenerator+0x680>)
 8002aa2:	801a      	strh	r2, [r3, #0]
	   qi_1 = setposition;
 8002aa4:	4b8f      	ldr	r3, [pc, #572]	; (8002ce4 <TrajectoryGenerator+0x680>)
 8002aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	edc7 7a07 	vstr	s15, [r7, #28]
	   qdi_1 = setvelocity;
 8002ab6:	4b88      	ldr	r3, [pc, #544]	; (8002cd8 <TrajectoryGenerator+0x674>)
 8002ab8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ac4:	edc7 7a03 	vstr	s15, [r7, #12]
	break;
 8002ac8:	e382      	b.n	80031d0 <TrajectoryGenerator+0xb6c>
	  else if(t_half + initime < micros() && micros() <= (2*t_half) + initime)
 8002aca:	4b7e      	ldr	r3, [pc, #504]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002acc:	ed93 7a00 	vldr	s14, [r3]
 8002ad0:	4b7d      	ldr	r3, [pc, #500]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002ad2:	edd3 7a00 	vldr	s15, [r3]
 8002ad6:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002ada:	f7fe fec1 	bl	8001860 <micros>
 8002ade:	4602      	mov	r2, r0
 8002ae0:	460b      	mov	r3, r1
 8002ae2:	4610      	mov	r0, r2
 8002ae4:	4619      	mov	r1, r3
 8002ae6:	f7fe f923 	bl	8000d30 <__aeabi_ul2f>
 8002aea:	ee07 0a90 	vmov	s15, r0
 8002aee:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002af2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af6:	f140 80c6 	bpl.w	8002c86 <TrajectoryGenerator+0x622>
 8002afa:	f7fe feb1 	bl	8001860 <micros>
 8002afe:	4602      	mov	r2, r0
 8002b00:	460b      	mov	r3, r1
 8002b02:	4610      	mov	r0, r2
 8002b04:	4619      	mov	r1, r3
 8002b06:	f7fe f913 	bl	8000d30 <__aeabi_ul2f>
 8002b0a:	ee06 0a90 	vmov	s13, r0
 8002b0e:	4b6d      	ldr	r3, [pc, #436]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002b18:	4b6b      	ldr	r3, [pc, #428]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002b1a:	edd3 7a00 	vldr	s15, [r3]
 8002b1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b22:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002b26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b2a:	f200 80ac 	bhi.w	8002c86 <TrajectoryGenerator+0x622>
		  setacc = -qdd_max;
 8002b2e:	4b67      	ldr	r3, [pc, #412]	; (8002ccc <TrajectoryGenerator+0x668>)
 8002b30:	edd3 7a00 	vldr	s15, [r3]
 8002b34:	eef1 7a67 	vneg.f32	s15, s15
 8002b38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b3c:	ee17 3a90 	vmov	r3, s15
 8002b40:	b21a      	sxth	r2, r3
 8002b42:	4b63      	ldr	r3, [pc, #396]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 8002b44:	801a      	strh	r2, [r3, #0]
		  setvelocity = qdi_1 + setacc*(micros()-initime-t_half);
 8002b46:	4b62      	ldr	r3, [pc, #392]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 8002b48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b4c:	ee07 3a90 	vmov	s15, r3
 8002b50:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002b54:	f7fe fe84 	bl	8001860 <micros>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	460b      	mov	r3, r1
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4619      	mov	r1, r3
 8002b60:	f7fe f8e6 	bl	8000d30 <__aeabi_ul2f>
 8002b64:	ee07 0a10 	vmov	s14, r0
 8002b68:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002b6a:	edd3 7a00 	vldr	s15, [r3]
 8002b6e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002b72:	4b54      	ldr	r3, [pc, #336]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002b74:	edd3 7a00 	vldr	s15, [r3]
 8002b78:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b7c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002b80:	edd7 7a03 	vldr	s15, [r7, #12]
 8002b84:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b8c:	ee17 3a90 	vmov	r3, s15
 8002b90:	b21a      	sxth	r2, r3
 8002b92:	4b51      	ldr	r3, [pc, #324]	; (8002cd8 <TrajectoryGenerator+0x674>)
 8002b94:	801a      	strh	r2, [r3, #0]
		  setposition = qi_1 + qdi_1*(micros()-initime-t_half)+0.5*setacc*(micros()-initime)*(micros()-initime);
 8002b96:	f7fe fe63 	bl	8001860 <micros>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	f7fe f8c5 	bl	8000d30 <__aeabi_ul2f>
 8002ba6:	ee07 0a10 	vmov	s14, r0
 8002baa:	4b47      	ldr	r3, [pc, #284]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002bac:	edd3 7a00 	vldr	s15, [r3]
 8002bb0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bb4:	4b43      	ldr	r3, [pc, #268]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002bb6:	edd3 7a00 	vldr	s15, [r3]
 8002bba:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002bbe:	edd7 7a03 	vldr	s15, [r7, #12]
 8002bc2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002bc6:	edd7 7a07 	vldr	s15, [r7, #28]
 8002bca:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bce:	ee17 0a90 	vmov	r0, s15
 8002bd2:	f7fd fc65 	bl	80004a0 <__aeabi_f2d>
 8002bd6:	4604      	mov	r4, r0
 8002bd8:	460d      	mov	r5, r1
 8002bda:	4b3d      	ldr	r3, [pc, #244]	; (8002cd0 <TrajectoryGenerator+0x66c>)
 8002bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7fd fc4b 	bl	800047c <__aeabi_i2d>
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	4b3d      	ldr	r3, [pc, #244]	; (8002ce0 <TrajectoryGenerator+0x67c>)
 8002bec:	f7fd fcb0 	bl	8000550 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4690      	mov	r8, r2
 8002bf6:	4699      	mov	r9, r3
 8002bf8:	f7fe fe32 	bl	8001860 <micros>
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	f7fe f894 	bl	8000d30 <__aeabi_ul2f>
 8002c08:	ee07 0a10 	vmov	s14, r0
 8002c0c:	4b2e      	ldr	r3, [pc, #184]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c16:	ee17 0a90 	vmov	r0, s15
 8002c1a:	f7fd fc41 	bl	80004a0 <__aeabi_f2d>
 8002c1e:	4602      	mov	r2, r0
 8002c20:	460b      	mov	r3, r1
 8002c22:	4640      	mov	r0, r8
 8002c24:	4649      	mov	r1, r9
 8002c26:	f7fd fc93 	bl	8000550 <__aeabi_dmul>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4690      	mov	r8, r2
 8002c30:	4699      	mov	r9, r3
 8002c32:	f7fe fe15 	bl	8001860 <micros>
 8002c36:	4602      	mov	r2, r0
 8002c38:	460b      	mov	r3, r1
 8002c3a:	4610      	mov	r0, r2
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f7fe f877 	bl	8000d30 <__aeabi_ul2f>
 8002c42:	ee07 0a10 	vmov	s14, r0
 8002c46:	4b20      	ldr	r3, [pc, #128]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c50:	ee17 0a90 	vmov	r0, s15
 8002c54:	f7fd fc24 	bl	80004a0 <__aeabi_f2d>
 8002c58:	4602      	mov	r2, r0
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	4640      	mov	r0, r8
 8002c5e:	4649      	mov	r1, r9
 8002c60:	f7fd fc76 	bl	8000550 <__aeabi_dmul>
 8002c64:	4602      	mov	r2, r0
 8002c66:	460b      	mov	r3, r1
 8002c68:	4620      	mov	r0, r4
 8002c6a:	4629      	mov	r1, r5
 8002c6c:	f7fd faba 	bl	80001e4 <__adddf3>
 8002c70:	4602      	mov	r2, r0
 8002c72:	460b      	mov	r3, r1
 8002c74:	4610      	mov	r0, r2
 8002c76:	4619      	mov	r1, r3
 8002c78:	f7fd ff1a 	bl	8000ab0 <__aeabi_d2iz>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	b21a      	sxth	r2, r3
 8002c80:	4b18      	ldr	r3, [pc, #96]	; (8002ce4 <TrajectoryGenerator+0x680>)
 8002c82:	801a      	strh	r2, [r3, #0]
	break;
 8002c84:	e2a4      	b.n	80031d0 <TrajectoryGenerator+0xb6c>
	  else if(micros()>(2*t_half) + initime)
 8002c86:	f7fe fdeb 	bl	8001860 <micros>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4610      	mov	r0, r2
 8002c90:	4619      	mov	r1, r3
 8002c92:	f7fe f84d 	bl	8000d30 <__aeabi_ul2f>
 8002c96:	ee06 0a90 	vmov	s13, r0
 8002c9a:	4b0a      	ldr	r3, [pc, #40]	; (8002cc4 <TrajectoryGenerator+0x660>)
 8002c9c:	edd3 7a00 	vldr	s15, [r3]
 8002ca0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002ca4:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <TrajectoryGenerator+0x664>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cae:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002cb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb6:	dc00      	bgt.n	8002cba <TrajectoryGenerator+0x656>
	break;
 8002cb8:	e28a      	b.n	80031d0 <TrajectoryGenerator+0xb6c>
		  Trajectstate = 3;
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <TrajectoryGenerator+0x684>)
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	601a      	str	r2, [r3, #0]
	break;
 8002cc0:	e286      	b.n	80031d0 <TrajectoryGenerator+0xb6c>
 8002cc2:	bf00      	nop
 8002cc4:	200002b0 	.word	0x200002b0
 8002cc8:	200002ac 	.word	0x200002ac
 8002ccc:	2000000c 	.word	0x2000000c
 8002cd0:	200002d0 	.word	0x200002d0
 8002cd4:	200002a8 	.word	0x200002a8
 8002cd8:	200002ca 	.word	0x200002ca
 8002cdc:	200002a4 	.word	0x200002a4
 8002ce0:	3fe00000 	.word	0x3fe00000
 8002ce4:	200002b6 	.word	0x200002b6
 8002ce8:	2000029c 	.word	0x2000029c
	 if(micros() <= tacc + initime)
 8002cec:	f7fe fdb8 	bl	8001860 <micros>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f7fe f81a 	bl	8000d30 <__aeabi_ul2f>
 8002cfc:	ee06 0a90 	vmov	s13, r0
 8002d00:	4b9a      	ldr	r3, [pc, #616]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002d02:	ed93 7a00 	vldr	s14, [r3]
 8002d06:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002d0a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d0e:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002d12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d16:	f200 80b5 	bhi.w	8002e84 <TrajectoryGenerator+0x820>
		 setacc = qdd_max;
 8002d1a:	4b95      	ldr	r3, [pc, #596]	; (8002f70 <TrajectoryGenerator+0x90c>)
 8002d1c:	edd3 7a00 	vldr	s15, [r3]
 8002d20:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d24:	ee17 3a90 	vmov	r3, s15
 8002d28:	b21a      	sxth	r2, r3
 8002d2a:	4b92      	ldr	r3, [pc, #584]	; (8002f74 <TrajectoryGenerator+0x910>)
 8002d2c:	801a      	strh	r2, [r3, #0]
		 setvelocity = qdi + setacc*(micros()-initime);
 8002d2e:	4b91      	ldr	r3, [pc, #580]	; (8002f74 <TrajectoryGenerator+0x910>)
 8002d30:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d34:	ee07 3a90 	vmov	s15, r3
 8002d38:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 8002d3c:	f7fe fd90 	bl	8001860 <micros>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4610      	mov	r0, r2
 8002d46:	4619      	mov	r1, r3
 8002d48:	f7fd fff2 	bl	8000d30 <__aeabi_ul2f>
 8002d4c:	ee07 0a10 	vmov	s14, r0
 8002d50:	4b86      	ldr	r3, [pc, #536]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002d52:	edd3 7a00 	vldr	s15, [r3]
 8002d56:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d5a:	ee28 7a27 	vmul.f32	s14, s16, s15
 8002d5e:	4b86      	ldr	r3, [pc, #536]	; (8002f78 <TrajectoryGenerator+0x914>)
 8002d60:	edd3 7a00 	vldr	s15, [r3]
 8002d64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d6c:	ee17 3a90 	vmov	r3, s15
 8002d70:	b21a      	sxth	r2, r3
 8002d72:	4b82      	ldr	r3, [pc, #520]	; (8002f7c <TrajectoryGenerator+0x918>)
 8002d74:	801a      	strh	r2, [r3, #0]
		 setposition = qi + qdi*(micros()-initime)+0.5*setacc*(micros()-initime)*(micros()-initime);
 8002d76:	f7fe fd73 	bl	8001860 <micros>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	460b      	mov	r3, r1
 8002d7e:	4610      	mov	r0, r2
 8002d80:	4619      	mov	r1, r3
 8002d82:	f7fd ffd5 	bl	8000d30 <__aeabi_ul2f>
 8002d86:	ee07 0a10 	vmov	s14, r0
 8002d8a:	4b78      	ldr	r3, [pc, #480]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002d94:	4b78      	ldr	r3, [pc, #480]	; (8002f78 <TrajectoryGenerator+0x914>)
 8002d96:	edd3 7a00 	vldr	s15, [r3]
 8002d9a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d9e:	4b78      	ldr	r3, [pc, #480]	; (8002f80 <TrajectoryGenerator+0x91c>)
 8002da0:	edd3 7a00 	vldr	s15, [r3]
 8002da4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002da8:	ee17 0a90 	vmov	r0, s15
 8002dac:	f7fd fb78 	bl	80004a0 <__aeabi_f2d>
 8002db0:	4604      	mov	r4, r0
 8002db2:	460d      	mov	r5, r1
 8002db4:	4b6f      	ldr	r3, [pc, #444]	; (8002f74 <TrajectoryGenerator+0x910>)
 8002db6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb5e 	bl	800047c <__aeabi_i2d>
 8002dc0:	f04f 0200 	mov.w	r2, #0
 8002dc4:	4b6f      	ldr	r3, [pc, #444]	; (8002f84 <TrajectoryGenerator+0x920>)
 8002dc6:	f7fd fbc3 	bl	8000550 <__aeabi_dmul>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	460b      	mov	r3, r1
 8002dce:	4690      	mov	r8, r2
 8002dd0:	4699      	mov	r9, r3
 8002dd2:	f7fe fd45 	bl	8001860 <micros>
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	4610      	mov	r0, r2
 8002ddc:	4619      	mov	r1, r3
 8002dde:	f7fd ffa7 	bl	8000d30 <__aeabi_ul2f>
 8002de2:	ee07 0a10 	vmov	s14, r0
 8002de6:	4b61      	ldr	r3, [pc, #388]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002de8:	edd3 7a00 	vldr	s15, [r3]
 8002dec:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002df0:	ee17 0a90 	vmov	r0, s15
 8002df4:	f7fd fb54 	bl	80004a0 <__aeabi_f2d>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	460b      	mov	r3, r1
 8002dfc:	4640      	mov	r0, r8
 8002dfe:	4649      	mov	r1, r9
 8002e00:	f7fd fba6 	bl	8000550 <__aeabi_dmul>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4690      	mov	r8, r2
 8002e0a:	4699      	mov	r9, r3
 8002e0c:	f7fe fd28 	bl	8001860 <micros>
 8002e10:	4602      	mov	r2, r0
 8002e12:	460b      	mov	r3, r1
 8002e14:	4610      	mov	r0, r2
 8002e16:	4619      	mov	r1, r3
 8002e18:	f7fd ff8a 	bl	8000d30 <__aeabi_ul2f>
 8002e1c:	ee07 0a10 	vmov	s14, r0
 8002e20:	4b52      	ldr	r3, [pc, #328]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002e22:	edd3 7a00 	vldr	s15, [r3]
 8002e26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e2a:	ee17 0a90 	vmov	r0, s15
 8002e2e:	f7fd fb37 	bl	80004a0 <__aeabi_f2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4640      	mov	r0, r8
 8002e38:	4649      	mov	r1, r9
 8002e3a:	f7fd fb89 	bl	8000550 <__aeabi_dmul>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4620      	mov	r0, r4
 8002e44:	4629      	mov	r1, r5
 8002e46:	f7fd f9cd 	bl	80001e4 <__adddf3>
 8002e4a:	4602      	mov	r2, r0
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4619      	mov	r1, r3
 8002e52:	f7fd fe2d 	bl	8000ab0 <__aeabi_d2iz>
 8002e56:	4603      	mov	r3, r0
 8002e58:	b21a      	sxth	r2, r3
 8002e5a:	4b4b      	ldr	r3, [pc, #300]	; (8002f88 <TrajectoryGenerator+0x924>)
 8002e5c:	801a      	strh	r2, [r3, #0]
		 qi_1 = setposition;
 8002e5e:	4b4a      	ldr	r3, [pc, #296]	; (8002f88 <TrajectoryGenerator+0x924>)
 8002e60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e64:	ee07 3a90 	vmov	s15, r3
 8002e68:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e6c:	edc7 7a07 	vstr	s15, [r7, #28]
		 qdi_1 = setvelocity;
 8002e70:	4b42      	ldr	r3, [pc, #264]	; (8002f7c <TrajectoryGenerator+0x918>)
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002e7e:	edc7 7a03 	vstr	s15, [r7, #12]
	 break;
 8002e82:	e1a4      	b.n	80031ce <TrajectoryGenerator+0xb6a>
	 else if(tacc+initime < micros() && micros() <= initime+tacc+tconst)
 8002e84:	4b39      	ldr	r3, [pc, #228]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002e86:	ed93 7a00 	vldr	s14, [r3]
 8002e8a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002e8e:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002e92:	f7fe fce5 	bl	8001860 <micros>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd ff47 	bl	8000d30 <__aeabi_ul2f>
 8002ea2:	ee07 0a90 	vmov	s15, r0
 8002ea6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002eaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eae:	d56f      	bpl.n	8002f90 <TrajectoryGenerator+0x92c>
 8002eb0:	f7fe fcd6 	bl	8001860 <micros>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4610      	mov	r0, r2
 8002eba:	4619      	mov	r1, r3
 8002ebc:	f7fd ff38 	bl	8000d30 <__aeabi_ul2f>
 8002ec0:	ee06 0a90 	vmov	s13, r0
 8002ec4:	4b29      	ldr	r3, [pc, #164]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002ec6:	ed93 7a00 	vldr	s14, [r3]
 8002eca:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002ece:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ed2:	edd7 7a08 	vldr	s15, [r7, #32]
 8002ed6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eda:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ee2:	d855      	bhi.n	8002f90 <TrajectoryGenerator+0x92c>
		 setacc = 0;
 8002ee4:	4b23      	ldr	r3, [pc, #140]	; (8002f74 <TrajectoryGenerator+0x910>)
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	801a      	strh	r2, [r3, #0]
		 setvelocity = qd_max;
 8002eea:	4b28      	ldr	r3, [pc, #160]	; (8002f8c <TrajectoryGenerator+0x928>)
 8002eec:	edd3 7a00 	vldr	s15, [r3]
 8002ef0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ef4:	ee17 3a90 	vmov	r3, s15
 8002ef8:	b21a      	sxth	r2, r3
 8002efa:	4b20      	ldr	r3, [pc, #128]	; (8002f7c <TrajectoryGenerator+0x918>)
 8002efc:	801a      	strh	r2, [r3, #0]
		 setposition = qi_1 + qd_max*(micros()-initime-tacc);
 8002efe:	f7fe fcaf 	bl	8001860 <micros>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4610      	mov	r0, r2
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f7fd ff11 	bl	8000d30 <__aeabi_ul2f>
 8002f0e:	ee07 0a10 	vmov	s14, r0
 8002f12:	4b16      	ldr	r3, [pc, #88]	; (8002f6c <TrajectoryGenerator+0x908>)
 8002f14:	edd3 7a00 	vldr	s15, [r3]
 8002f18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f1c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002f20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002f24:	4b19      	ldr	r3, [pc, #100]	; (8002f8c <TrajectoryGenerator+0x928>)
 8002f26:	edd3 7a00 	vldr	s15, [r3]
 8002f2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f2e:	edd7 7a07 	vldr	s15, [r7, #28]
 8002f32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f3a:	ee17 3a90 	vmov	r3, s15
 8002f3e:	b21a      	sxth	r2, r3
 8002f40:	4b11      	ldr	r3, [pc, #68]	; (8002f88 <TrajectoryGenerator+0x924>)
 8002f42:	801a      	strh	r2, [r3, #0]
		 qi_2 = setposition;
 8002f44:	4b10      	ldr	r3, [pc, #64]	; (8002f88 <TrajectoryGenerator+0x924>)
 8002f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f52:	edc7 7a06 	vstr	s15, [r7, #24]
		 qdi_2 = setvelocity;
 8002f56:	4b09      	ldr	r3, [pc, #36]	; (8002f7c <TrajectoryGenerator+0x918>)
 8002f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f5c:	ee07 3a90 	vmov	s15, r3
 8002f60:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f64:	edc7 7a05 	vstr	s15, [r7, #20]
 8002f68:	e131      	b.n	80031ce <TrajectoryGenerator+0xb6a>
 8002f6a:	bf00      	nop
 8002f6c:	200002ac 	.word	0x200002ac
 8002f70:	2000000c 	.word	0x2000000c
 8002f74:	200002d0 	.word	0x200002d0
 8002f78:	200002a8 	.word	0x200002a8
 8002f7c:	200002ca 	.word	0x200002ca
 8002f80:	200002a4 	.word	0x200002a4
 8002f84:	3fe00000 	.word	0x3fe00000
 8002f88:	200002b6 	.word	0x200002b6
 8002f8c:	20000008 	.word	0x20000008
	 else if(tacc+tconst+initime < micros() && micros() <= tacc+tconst+tdec+initime)
 8002f90:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002f94:	edd7 7a08 	vldr	s15, [r7, #32]
 8002f98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002f9c:	4b90      	ldr	r3, [pc, #576]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 8002f9e:	edd3 7a00 	vldr	s15, [r3]
 8002fa2:	ee37 8a27 	vadd.f32	s16, s14, s15
 8002fa6:	f7fe fc5b 	bl	8001860 <micros>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4610      	mov	r0, r2
 8002fb0:	4619      	mov	r1, r3
 8002fb2:	f7fd febd 	bl	8000d30 <__aeabi_ul2f>
 8002fb6:	ee07 0a90 	vmov	s15, r0
 8002fba:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8002fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fc2:	f140 80e1 	bpl.w	8003188 <TrajectoryGenerator+0xb24>
 8002fc6:	f7fe fc4b 	bl	8001860 <micros>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	460b      	mov	r3, r1
 8002fce:	4610      	mov	r0, r2
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f7fd fead 	bl	8000d30 <__aeabi_ul2f>
 8002fd6:	ee06 0a90 	vmov	s13, r0
 8002fda:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8002fde:	edd7 7a08 	vldr	s15, [r7, #32]
 8002fe2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fe6:	edd7 7a04 	vldr	s15, [r7, #16]
 8002fea:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002fee:	4b7c      	ldr	r3, [pc, #496]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 8002ff0:	edd3 7a00 	vldr	s15, [r3]
 8002ff4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ff8:	eef4 6ae7 	vcmpe.f32	s13, s15
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	f200 80c2 	bhi.w	8003188 <TrajectoryGenerator+0xb24>
		 setacc = -qdd_max;
 8003004:	4b77      	ldr	r3, [pc, #476]	; (80031e4 <TrajectoryGenerator+0xb80>)
 8003006:	edd3 7a00 	vldr	s15, [r3]
 800300a:	eef1 7a67 	vneg.f32	s15, s15
 800300e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003012:	ee17 3a90 	vmov	r3, s15
 8003016:	b21a      	sxth	r2, r3
 8003018:	4b73      	ldr	r3, [pc, #460]	; (80031e8 <TrajectoryGenerator+0xb84>)
 800301a:	801a      	strh	r2, [r3, #0]
		 setvelocity = qdi_2 + setacc*(micros()-initime-tacc-tconst);
 800301c:	4b72      	ldr	r3, [pc, #456]	; (80031e8 <TrajectoryGenerator+0xb84>)
 800301e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003022:	ee07 3a90 	vmov	s15, r3
 8003026:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800302a:	f7fe fc19 	bl	8001860 <micros>
 800302e:	4602      	mov	r2, r0
 8003030:	460b      	mov	r3, r1
 8003032:	4610      	mov	r0, r2
 8003034:	4619      	mov	r1, r3
 8003036:	f7fd fe7b 	bl	8000d30 <__aeabi_ul2f>
 800303a:	ee07 0a10 	vmov	s14, r0
 800303e:	4b68      	ldr	r3, [pc, #416]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 8003040:	edd3 7a00 	vldr	s15, [r3]
 8003044:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003048:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800304c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003050:	edd7 7a08 	vldr	s15, [r7, #32]
 8003054:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003058:	ee28 7a27 	vmul.f32	s14, s16, s15
 800305c:	edd7 7a05 	vldr	s15, [r7, #20]
 8003060:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003068:	ee17 3a90 	vmov	r3, s15
 800306c:	b21a      	sxth	r2, r3
 800306e:	4b5f      	ldr	r3, [pc, #380]	; (80031ec <TrajectoryGenerator+0xb88>)
 8003070:	801a      	strh	r2, [r3, #0]
		 setposition = qi_2 + qdi_2*(micros()-initime-tacc-tconst)+0.5*setacc*(micros()-initime-tacc-tconst)*(micros()-initime-tacc-tconst);
 8003072:	f7fe fbf5 	bl	8001860 <micros>
 8003076:	4602      	mov	r2, r0
 8003078:	460b      	mov	r3, r1
 800307a:	4610      	mov	r0, r2
 800307c:	4619      	mov	r1, r3
 800307e:	f7fd fe57 	bl	8000d30 <__aeabi_ul2f>
 8003082:	ee07 0a10 	vmov	s14, r0
 8003086:	4b56      	ldr	r3, [pc, #344]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 8003088:	edd3 7a00 	vldr	s15, [r3]
 800308c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003090:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003094:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003098:	edd7 7a08 	vldr	s15, [r7, #32]
 800309c:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030a0:	edd7 7a05 	vldr	s15, [r7, #20]
 80030a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80030a8:	edd7 7a06 	vldr	s15, [r7, #24]
 80030ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80030b0:	ee17 0a90 	vmov	r0, s15
 80030b4:	f7fd f9f4 	bl	80004a0 <__aeabi_f2d>
 80030b8:	4604      	mov	r4, r0
 80030ba:	460d      	mov	r5, r1
 80030bc:	4b4a      	ldr	r3, [pc, #296]	; (80031e8 <TrajectoryGenerator+0xb84>)
 80030be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f7fd f9da 	bl	800047c <__aeabi_i2d>
 80030c8:	f04f 0200 	mov.w	r2, #0
 80030cc:	4b48      	ldr	r3, [pc, #288]	; (80031f0 <TrajectoryGenerator+0xb8c>)
 80030ce:	f7fd fa3f 	bl	8000550 <__aeabi_dmul>
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4690      	mov	r8, r2
 80030d8:	4699      	mov	r9, r3
 80030da:	f7fe fbc1 	bl	8001860 <micros>
 80030de:	4602      	mov	r2, r0
 80030e0:	460b      	mov	r3, r1
 80030e2:	4610      	mov	r0, r2
 80030e4:	4619      	mov	r1, r3
 80030e6:	f7fd fe23 	bl	8000d30 <__aeabi_ul2f>
 80030ea:	ee07 0a10 	vmov	s14, r0
 80030ee:	4b3c      	ldr	r3, [pc, #240]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 80030f0:	edd3 7a00 	vldr	s15, [r3]
 80030f4:	ee37 7a67 	vsub.f32	s14, s14, s15
 80030f8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80030fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003100:	edd7 7a08 	vldr	s15, [r7, #32]
 8003104:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003108:	ee17 0a90 	vmov	r0, s15
 800310c:	f7fd f9c8 	bl	80004a0 <__aeabi_f2d>
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4640      	mov	r0, r8
 8003116:	4649      	mov	r1, r9
 8003118:	f7fd fa1a 	bl	8000550 <__aeabi_dmul>
 800311c:	4602      	mov	r2, r0
 800311e:	460b      	mov	r3, r1
 8003120:	4690      	mov	r8, r2
 8003122:	4699      	mov	r9, r3
 8003124:	f7fe fb9c 	bl	8001860 <micros>
 8003128:	4602      	mov	r2, r0
 800312a:	460b      	mov	r3, r1
 800312c:	4610      	mov	r0, r2
 800312e:	4619      	mov	r1, r3
 8003130:	f7fd fdfe 	bl	8000d30 <__aeabi_ul2f>
 8003134:	ee07 0a10 	vmov	s14, r0
 8003138:	4b29      	ldr	r3, [pc, #164]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003142:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8003146:	ee37 7a67 	vsub.f32	s14, s14, s15
 800314a:	edd7 7a08 	vldr	s15, [r7, #32]
 800314e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003152:	ee17 0a90 	vmov	r0, s15
 8003156:	f7fd f9a3 	bl	80004a0 <__aeabi_f2d>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4640      	mov	r0, r8
 8003160:	4649      	mov	r1, r9
 8003162:	f7fd f9f5 	bl	8000550 <__aeabi_dmul>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4620      	mov	r0, r4
 800316c:	4629      	mov	r1, r5
 800316e:	f7fd f839 	bl	80001e4 <__adddf3>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f7fd fc99 	bl	8000ab0 <__aeabi_d2iz>
 800317e:	4603      	mov	r3, r0
 8003180:	b21a      	sxth	r2, r3
 8003182:	4b1c      	ldr	r3, [pc, #112]	; (80031f4 <TrajectoryGenerator+0xb90>)
 8003184:	801a      	strh	r2, [r3, #0]
 8003186:	e022      	b.n	80031ce <TrajectoryGenerator+0xb6a>
	 else if(micros() > initime+tacc+tconst+tdec){
 8003188:	f7fe fb6a 	bl	8001860 <micros>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4610      	mov	r0, r2
 8003192:	4619      	mov	r1, r3
 8003194:	f7fd fdcc 	bl	8000d30 <__aeabi_ul2f>
 8003198:	ee06 0a90 	vmov	s13, r0
 800319c:	4b10      	ldr	r3, [pc, #64]	; (80031e0 <TrajectoryGenerator+0xb7c>)
 800319e:	ed93 7a00 	vldr	s14, [r3]
 80031a2:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80031a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031aa:	edd7 7a08 	vldr	s15, [r7, #32]
 80031ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80031b2:	edd7 7a04 	vldr	s15, [r7, #16]
 80031b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031ba:	eef4 6ae7 	vcmpe.f32	s13, s15
 80031be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031c2:	dc00      	bgt.n	80031c6 <TrajectoryGenerator+0xb62>
	 break;
 80031c4:	e003      	b.n	80031ce <TrajectoryGenerator+0xb6a>
		 Trajectstate = 3;
 80031c6:	4b0c      	ldr	r3, [pc, #48]	; (80031f8 <TrajectoryGenerator+0xb94>)
 80031c8:	2203      	movs	r2, #3
 80031ca:	601a      	str	r2, [r3, #0]
	 break;
 80031cc:	e7ff      	b.n	80031ce <TrajectoryGenerator+0xb6a>
 80031ce:	bf00      	nop
}
 80031d0:	bf00      	nop
 80031d2:	3728      	adds	r7, #40	; 0x28
 80031d4:	46bd      	mov	sp, r7
 80031d6:	ecbd 8b02 	vpop	{d8}
 80031da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80031de:	bf00      	nop
 80031e0:	200002ac 	.word	0x200002ac
 80031e4:	2000000c 	.word	0x2000000c
 80031e8:	200002d0 	.word	0x200002d0
 80031ec:	200002ca 	.word	0x200002ca
 80031f0:	3fe00000 	.word	0x3fe00000
 80031f4:	200002b6 	.word	0x200002b6
 80031f8:	2000029c 	.word	0x2000029c

080031fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003200:	b672      	cpsid	i
}
 8003202:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003204:	e7fe      	b.n	8003204 <Error_Handler+0x8>
	...

08003208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	607b      	str	r3, [r7, #4]
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_MspInit+0x4c>)
 8003214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003216:	4a0f      	ldr	r2, [pc, #60]	; (8003254 <HAL_MspInit+0x4c>)
 8003218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800321c:	6453      	str	r3, [r2, #68]	; 0x44
 800321e:	4b0d      	ldr	r3, [pc, #52]	; (8003254 <HAL_MspInit+0x4c>)
 8003220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003226:	607b      	str	r3, [r7, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	603b      	str	r3, [r7, #0]
 800322e:	4b09      	ldr	r3, [pc, #36]	; (8003254 <HAL_MspInit+0x4c>)
 8003230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003232:	4a08      	ldr	r2, [pc, #32]	; (8003254 <HAL_MspInit+0x4c>)
 8003234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003238:	6413      	str	r3, [r2, #64]	; 0x40
 800323a:	4b06      	ldr	r3, [pc, #24]	; (8003254 <HAL_MspInit+0x4c>)
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003246:	2007      	movs	r0, #7
 8003248:	f000 ff50 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800324c:	bf00      	nop
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	40023800 	.word	0x40023800

08003258 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b08a      	sub	sp, #40	; 0x28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003260:	f107 0314 	add.w	r3, r7, #20
 8003264:	2200      	movs	r2, #0
 8003266:	601a      	str	r2, [r3, #0]
 8003268:	605a      	str	r2, [r3, #4]
 800326a:	609a      	str	r2, [r3, #8]
 800326c:	60da      	str	r2, [r3, #12]
 800326e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <HAL_ADC_MspInit+0xdc>)
 8003276:	4293      	cmp	r3, r2
 8003278:	d157      	bne.n	800332a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800327a:	2300      	movs	r3, #0
 800327c:	613b      	str	r3, [r7, #16]
 800327e:	4b2e      	ldr	r3, [pc, #184]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 8003280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003282:	4a2d      	ldr	r2, [pc, #180]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 8003284:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003288:	6453      	str	r3, [r2, #68]	; 0x44
 800328a:	4b2b      	ldr	r3, [pc, #172]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 800328c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003292:	613b      	str	r3, [r7, #16]
 8003294:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b27      	ldr	r3, [pc, #156]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a26      	ldr	r2, [pc, #152]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 80032a0:	f043 0301 	orr.w	r3, r3, #1
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b24      	ldr	r3, [pc, #144]	; (8003338 <HAL_ADC_MspInit+0xe0>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0301 	and.w	r3, r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80032b2:	2303      	movs	r3, #3
 80032b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80032b6:	2303      	movs	r3, #3
 80032b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032be:	f107 0314 	add.w	r3, r7, #20
 80032c2:	4619      	mov	r1, r3
 80032c4:	481d      	ldr	r0, [pc, #116]	; (800333c <HAL_ADC_MspInit+0xe4>)
 80032c6:	f001 fac3 	bl	8004850 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80032ca:	4b1d      	ldr	r3, [pc, #116]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032cc:	4a1d      	ldr	r2, [pc, #116]	; (8003344 <HAL_ADC_MspInit+0xec>)
 80032ce:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80032d0:	4b1b      	ldr	r3, [pc, #108]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032d2:	2200      	movs	r2, #0
 80032d4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80032d6:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032d8:	2200      	movs	r2, #0
 80032da:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80032dc:	4b18      	ldr	r3, [pc, #96]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032de:	2200      	movs	r2, #0
 80032e0:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80032e2:	4b17      	ldr	r3, [pc, #92]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80032e8:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80032ea:	4b15      	ldr	r3, [pc, #84]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032f0:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80032f2:	4b13      	ldr	r3, [pc, #76]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032f4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80032f8:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80032fa:	4b11      	ldr	r3, [pc, #68]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 80032fc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003300:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8003302:	4b0f      	ldr	r3, [pc, #60]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 8003304:	2200      	movs	r2, #0
 8003306:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003308:	4b0d      	ldr	r3, [pc, #52]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 800330a:	2200      	movs	r2, #0
 800330c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800330e:	480c      	ldr	r0, [pc, #48]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 8003310:	f000 ff2e 	bl	8004170 <HAL_DMA_Init>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800331a:	f7ff ff6f 	bl	80031fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 8003322:	639a      	str	r2, [r3, #56]	; 0x38
 8003324:	4a06      	ldr	r2, [pc, #24]	; (8003340 <HAL_ADC_MspInit+0xe8>)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800332a:	bf00      	nop
 800332c:	3728      	adds	r7, #40	; 0x28
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40012000 	.word	0x40012000
 8003338:	40023800 	.word	0x40023800
 800333c:	40020000 	.word	0x40020000
 8003340:	200000e4 	.word	0x200000e4
 8003344:	40026410 	.word	0x40026410

08003348 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003348:	b480      	push	{r7}
 800334a:	b085      	sub	sp, #20
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a0b      	ldr	r2, [pc, #44]	; (8003384 <HAL_TIM_PWM_MspInit+0x3c>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d10d      	bne.n	8003376 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800335a:	2300      	movs	r3, #0
 800335c:	60fb      	str	r3, [r7, #12]
 800335e:	4b0a      	ldr	r3, [pc, #40]	; (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 8003360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003362:	4a09      	ldr	r2, [pc, #36]	; (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 8003364:	f043 0301 	orr.w	r3, r3, #1
 8003368:	6453      	str	r3, [r2, #68]	; 0x44
 800336a:	4b07      	ldr	r3, [pc, #28]	; (8003388 <HAL_TIM_PWM_MspInit+0x40>)
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f003 0301 	and.w	r3, r3, #1
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003376:	bf00      	nop
 8003378:	3714      	adds	r7, #20
 800337a:	46bd      	mov	sp, r7
 800337c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003380:	4770      	bx	lr
 8003382:	bf00      	nop
 8003384:	40010000 	.word	0x40010000
 8003388:	40023800 	.word	0x40023800

0800338c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b08a      	sub	sp, #40	; 0x28
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003394:	f107 0314 	add.w	r3, r7, #20
 8003398:	2200      	movs	r2, #0
 800339a:	601a      	str	r2, [r3, #0]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	609a      	str	r2, [r3, #8]
 80033a0:	60da      	str	r2, [r3, #12]
 80033a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	4a19      	ldr	r2, [pc, #100]	; (8003410 <HAL_TIM_Encoder_MspInit+0x84>)
 80033aa:	4293      	cmp	r3, r2
 80033ac:	d12b      	bne.n	8003406 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80033ae:	2300      	movs	r3, #0
 80033b0:	613b      	str	r3, [r7, #16]
 80033b2:	4b18      	ldr	r3, [pc, #96]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033b6:	4a17      	ldr	r2, [pc, #92]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033b8:	f043 0302 	orr.w	r3, r3, #2
 80033bc:	6413      	str	r3, [r2, #64]	; 0x40
 80033be:	4b15      	ldr	r3, [pc, #84]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c2:	f003 0302 	and.w	r3, r3, #2
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ca:	2300      	movs	r3, #0
 80033cc:	60fb      	str	r3, [r7, #12]
 80033ce:	4b11      	ldr	r3, [pc, #68]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a10      	ldr	r2, [pc, #64]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033d4:	f043 0301 	orr.w	r3, r3, #1
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b0e      	ldr	r3, [pc, #56]	; (8003414 <HAL_TIM_Encoder_MspInit+0x88>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	60fb      	str	r3, [r7, #12]
 80033e4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033e6:	23c0      	movs	r3, #192	; 0xc0
 80033e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ea:	2302      	movs	r3, #2
 80033ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033ee:	2300      	movs	r3, #0
 80033f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f2:	2300      	movs	r3, #0
 80033f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80033f6:	2302      	movs	r3, #2
 80033f8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80033fa:	f107 0314 	add.w	r3, r7, #20
 80033fe:	4619      	mov	r1, r3
 8003400:	4805      	ldr	r0, [pc, #20]	; (8003418 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003402:	f001 fa25 	bl	8004850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003406:	bf00      	nop
 8003408:	3728      	adds	r7, #40	; 0x28
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40000400 	.word	0x40000400
 8003414:	40023800 	.word	0x40023800
 8003418:	40020000 	.word	0x40020000

0800341c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b084      	sub	sp, #16
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM5)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a0e      	ldr	r2, [pc, #56]	; (8003464 <HAL_TIM_Base_MspInit+0x48>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d115      	bne.n	800345a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b0d      	ldr	r3, [pc, #52]	; (8003468 <HAL_TIM_Base_MspInit+0x4c>)
 8003434:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003436:	4a0c      	ldr	r2, [pc, #48]	; (8003468 <HAL_TIM_Base_MspInit+0x4c>)
 8003438:	f043 0308 	orr.w	r3, r3, #8
 800343c:	6413      	str	r3, [r2, #64]	; 0x40
 800343e:	4b0a      	ldr	r3, [pc, #40]	; (8003468 <HAL_TIM_Base_MspInit+0x4c>)
 8003440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003442:	f003 0308 	and.w	r3, r3, #8
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]
    /* TIM5 interrupt Init */
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800344a:	2200      	movs	r2, #0
 800344c:	2100      	movs	r1, #0
 800344e:	2032      	movs	r0, #50	; 0x32
 8003450:	f000 fe57 	bl	8004102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8003454:	2032      	movs	r0, #50	; 0x32
 8003456:	f000 fe70 	bl	800413a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800345a:	bf00      	nop
 800345c:	3710      	adds	r7, #16
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	40000c00 	.word	0x40000c00
 8003468:	40023800 	.word	0x40023800

0800346c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b088      	sub	sp, #32
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003474:	f107 030c 	add.w	r3, r7, #12
 8003478:	2200      	movs	r2, #0
 800347a:	601a      	str	r2, [r3, #0]
 800347c:	605a      	str	r2, [r3, #4]
 800347e:	609a      	str	r2, [r3, #8]
 8003480:	60da      	str	r2, [r3, #12]
 8003482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a12      	ldr	r2, [pc, #72]	; (80034d4 <HAL_TIM_MspPostInit+0x68>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d11e      	bne.n	80034cc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800348e:	2300      	movs	r3, #0
 8003490:	60bb      	str	r3, [r7, #8]
 8003492:	4b11      	ldr	r3, [pc, #68]	; (80034d8 <HAL_TIM_MspPostInit+0x6c>)
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <HAL_TIM_MspPostInit+0x6c>)
 8003498:	f043 0301 	orr.w	r3, r3, #1
 800349c:	6313      	str	r3, [r2, #48]	; 0x30
 800349e:	4b0e      	ldr	r3, [pc, #56]	; (80034d8 <HAL_TIM_MspPostInit+0x6c>)
 80034a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a2:	f003 0301 	and.w	r3, r3, #1
 80034a6:	60bb      	str	r3, [r7, #8]
 80034a8:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034ae:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034b0:	2302      	movs	r3, #2
 80034b2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034b8:	2300      	movs	r3, #0
 80034ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034bc:	2301      	movs	r3, #1
 80034be:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034c0:	f107 030c 	add.w	r3, r7, #12
 80034c4:	4619      	mov	r1, r3
 80034c6:	4805      	ldr	r0, [pc, #20]	; (80034dc <HAL_TIM_MspPostInit+0x70>)
 80034c8:	f001 f9c2 	bl	8004850 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80034cc:	bf00      	nop
 80034ce:	3720      	adds	r7, #32
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40010000 	.word	0x40010000
 80034d8:	40023800 	.word	0x40023800
 80034dc:	40020000 	.word	0x40020000

080034e0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b08a      	sub	sp, #40	; 0x28
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034e8:	f107 0314 	add.w	r3, r7, #20
 80034ec:	2200      	movs	r2, #0
 80034ee:	601a      	str	r2, [r3, #0]
 80034f0:	605a      	str	r2, [r3, #4]
 80034f2:	609a      	str	r2, [r3, #8]
 80034f4:	60da      	str	r2, [r3, #12]
 80034f6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a19      	ldr	r2, [pc, #100]	; (8003564 <HAL_UART_MspInit+0x84>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d12b      	bne.n	800355a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	613b      	str	r3, [r7, #16]
 8003506:	4b18      	ldr	r3, [pc, #96]	; (8003568 <HAL_UART_MspInit+0x88>)
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4a17      	ldr	r2, [pc, #92]	; (8003568 <HAL_UART_MspInit+0x88>)
 800350c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003510:	6413      	str	r3, [r2, #64]	; 0x40
 8003512:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_UART_MspInit+0x88>)
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800351a:	613b      	str	r3, [r7, #16]
 800351c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800351e:	2300      	movs	r3, #0
 8003520:	60fb      	str	r3, [r7, #12]
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_UART_MspInit+0x88>)
 8003524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_UART_MspInit+0x88>)
 8003528:	f043 0301 	orr.w	r3, r3, #1
 800352c:	6313      	str	r3, [r2, #48]	; 0x30
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_UART_MspInit+0x88>)
 8003530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003532:	f003 0301 	and.w	r3, r3, #1
 8003536:	60fb      	str	r3, [r7, #12]
 8003538:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800353a:	230c      	movs	r3, #12
 800353c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800353e:	2302      	movs	r3, #2
 8003540:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003542:	2300      	movs	r3, #0
 8003544:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003546:	2303      	movs	r3, #3
 8003548:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800354a:	2307      	movs	r3, #7
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800354e:	f107 0314 	add.w	r3, r7, #20
 8003552:	4619      	mov	r1, r3
 8003554:	4805      	ldr	r0, [pc, #20]	; (800356c <HAL_UART_MspInit+0x8c>)
 8003556:	f001 f97b 	bl	8004850 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800355a:	bf00      	nop
 800355c:	3728      	adds	r7, #40	; 0x28
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	40004400 	.word	0x40004400
 8003568:	40023800 	.word	0x40023800
 800356c:	40020000 	.word	0x40020000

08003570 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003574:	e7fe      	b.n	8003574 <NMI_Handler+0x4>

08003576 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003576:	b480      	push	{r7}
 8003578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800357a:	e7fe      	b.n	800357a <HardFault_Handler+0x4>

0800357c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800357c:	b480      	push	{r7}
 800357e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003580:	e7fe      	b.n	8003580 <MemManage_Handler+0x4>

08003582 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003582:	b480      	push	{r7}
 8003584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003586:	e7fe      	b.n	8003586 <BusFault_Handler+0x4>

08003588 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003588:	b480      	push	{r7}
 800358a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800358c:	e7fe      	b.n	800358c <UsageFault_Handler+0x4>

0800358e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800358e:	b480      	push	{r7}
 8003590:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003592:	bf00      	nop
 8003594:	46bd      	mov	sp, r7
 8003596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359a:	4770      	bx	lr

0800359c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80035a0:	bf00      	nop
 80035a2:	46bd      	mov	sp, r7
 80035a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a8:	4770      	bx	lr

080035aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80035aa:	b480      	push	{r7}
 80035ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80035ae:	bf00      	nop
 80035b0:	46bd      	mov	sp, r7
 80035b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b6:	4770      	bx	lr

080035b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80035bc:	f000 f8a4 	bl	8003708 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80035c0:	bf00      	nop
 80035c2:	bd80      	pop	{r7, pc}

080035c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80035c4:	b580      	push	{r7, lr}
 80035c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80035c8:	4802      	ldr	r0, [pc, #8]	; (80035d4 <TIM5_IRQHandler+0x10>)
 80035ca:	f002 fa6d 	bl	8005aa8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80035ce:	bf00      	nop
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200001d4 	.word	0x200001d4

080035d8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80035dc:	4802      	ldr	r0, [pc, #8]	; (80035e8 <DMA2_Stream0_IRQHandler+0x10>)
 80035de:	f000 fecd 	bl	800437c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	200000e4 	.word	0x200000e4

080035ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <SystemInit+0x20>)
 80035f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035f6:	4a05      	ldr	r2, [pc, #20]	; (800360c <SystemInit+0x20>)
 80035f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80035fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003600:	bf00      	nop
 8003602:	46bd      	mov	sp, r7
 8003604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003608:	4770      	bx	lr
 800360a:	bf00      	nop
 800360c:	e000ed00 	.word	0xe000ed00

08003610 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003610:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003648 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003614:	480d      	ldr	r0, [pc, #52]	; (800364c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003616:	490e      	ldr	r1, [pc, #56]	; (8003650 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003618:	4a0e      	ldr	r2, [pc, #56]	; (8003654 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800361a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800361c:	e002      	b.n	8003624 <LoopCopyDataInit>

0800361e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800361e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003620:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003622:	3304      	adds	r3, #4

08003624 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003624:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003626:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003628:	d3f9      	bcc.n	800361e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800362a:	4a0b      	ldr	r2, [pc, #44]	; (8003658 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800362c:	4c0b      	ldr	r4, [pc, #44]	; (800365c <LoopFillZerobss+0x26>)
  movs r3, #0
 800362e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003630:	e001      	b.n	8003636 <LoopFillZerobss>

08003632 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003632:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003634:	3204      	adds	r2, #4

08003636 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003636:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003638:	d3fb      	bcc.n	8003632 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800363a:	f7ff ffd7 	bl	80035ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800363e:	f003 fb5f 	bl	8006d00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003642:	f7fd fd3d 	bl	80010c0 <main>
  bx  lr    
 8003646:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003648:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800364c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003650:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8003654:	08006fa0 	.word	0x08006fa0
  ldr r2, =_sbss
 8003658:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 800365c:	200003fc 	.word	0x200003fc

08003660 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003660:	e7fe      	b.n	8003660 <ADC_IRQHandler>
	...

08003664 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003668:	4b0e      	ldr	r3, [pc, #56]	; (80036a4 <HAL_Init+0x40>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0d      	ldr	r2, [pc, #52]	; (80036a4 <HAL_Init+0x40>)
 800366e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003672:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003674:	4b0b      	ldr	r3, [pc, #44]	; (80036a4 <HAL_Init+0x40>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <HAL_Init+0x40>)
 800367a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800367e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003680:	4b08      	ldr	r3, [pc, #32]	; (80036a4 <HAL_Init+0x40>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a07      	ldr	r2, [pc, #28]	; (80036a4 <HAL_Init+0x40>)
 8003686:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800368a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800368c:	2003      	movs	r0, #3
 800368e:	f000 fd2d 	bl	80040ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003692:	2000      	movs	r0, #0
 8003694:	f000 f808 	bl	80036a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003698:	f7ff fdb6 	bl	8003208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	40023c00 	.word	0x40023c00

080036a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80036b0:	4b12      	ldr	r3, [pc, #72]	; (80036fc <HAL_InitTick+0x54>)
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	4b12      	ldr	r3, [pc, #72]	; (8003700 <HAL_InitTick+0x58>)
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	4619      	mov	r1, r3
 80036ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80036be:	fbb3 f3f1 	udiv	r3, r3, r1
 80036c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 fd45 	bl	8004156 <HAL_SYSTICK_Config>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e00e      	b.n	80036f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	2b0f      	cmp	r3, #15
 80036da:	d80a      	bhi.n	80036f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80036dc:	2200      	movs	r2, #0
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	f04f 30ff 	mov.w	r0, #4294967295
 80036e4:	f000 fd0d 	bl	8004102 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80036e8:	4a06      	ldr	r2, [pc, #24]	; (8003704 <HAL_InitTick+0x5c>)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80036ee:	2300      	movs	r3, #0
 80036f0:	e000      	b.n	80036f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3708      	adds	r7, #8
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	20000010 	.word	0x20000010
 8003700:	20000018 	.word	0x20000018
 8003704:	20000014 	.word	0x20000014

08003708 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800370c:	4b06      	ldr	r3, [pc, #24]	; (8003728 <HAL_IncTick+0x20>)
 800370e:	781b      	ldrb	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b06      	ldr	r3, [pc, #24]	; (800372c <HAL_IncTick+0x24>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4413      	add	r3, r2
 8003718:	4a04      	ldr	r2, [pc, #16]	; (800372c <HAL_IncTick+0x24>)
 800371a:	6013      	str	r3, [r2, #0]
}
 800371c:	bf00      	nop
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
 8003726:	bf00      	nop
 8003728:	20000018 	.word	0x20000018
 800372c:	200003f8 	.word	0x200003f8

08003730 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return uwTick;
 8003734:	4b03      	ldr	r3, [pc, #12]	; (8003744 <HAL_GetTick+0x14>)
 8003736:	681b      	ldr	r3, [r3, #0]
}
 8003738:	4618      	mov	r0, r3
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	200003f8 	.word	0x200003f8

08003748 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003750:	2300      	movs	r3, #0
 8003752:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d101      	bne.n	800375e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e033      	b.n	80037c6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	2b00      	cmp	r3, #0
 8003764:	d109      	bne.n	800377a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff fd76 	bl	8003258 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377e:	f003 0310 	and.w	r3, r3, #16
 8003782:	2b00      	cmp	r3, #0
 8003784:	d118      	bne.n	80037b8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800378e:	f023 0302 	bic.w	r3, r3, #2
 8003792:	f043 0202 	orr.w	r2, r3, #2
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 fa58 	bl	8003c50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	2200      	movs	r2, #0
 80037a4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037aa:	f023 0303 	bic.w	r3, r3, #3
 80037ae:	f043 0201 	orr.w	r2, r3, #1
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	641a      	str	r2, [r3, #64]	; 0x40
 80037b6:	e001      	b.n	80037bc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
	...

080037d0 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b086      	sub	sp, #24
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	60f8      	str	r0, [r7, #12]
 80037d8:	60b9      	str	r1, [r7, #8]
 80037da:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d101      	bne.n	80037ee <HAL_ADC_Start_DMA+0x1e>
 80037ea:	2302      	movs	r3, #2
 80037ec:	e0ce      	b.n	800398c <HAL_ADC_Start_DMA+0x1bc>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2201      	movs	r2, #1
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b01      	cmp	r3, #1
 8003802:	d018      	beq.n	8003836 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	689a      	ldr	r2, [r3, #8]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f042 0201 	orr.w	r2, r2, #1
 8003812:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003814:	4b5f      	ldr	r3, [pc, #380]	; (8003994 <HAL_ADC_Start_DMA+0x1c4>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a5f      	ldr	r2, [pc, #380]	; (8003998 <HAL_ADC_Start_DMA+0x1c8>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9a      	lsrs	r2, r3, #18
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003828:	e002      	b.n	8003830 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	3b01      	subs	r3, #1
 800382e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8003830:	693b      	ldr	r3, [r7, #16]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d1f9      	bne.n	800382a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003840:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003844:	d107      	bne.n	8003856 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	689a      	ldr	r2, [r3, #8]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003854:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0301 	and.w	r3, r3, #1
 8003860:	2b01      	cmp	r3, #1
 8003862:	f040 8086 	bne.w	8003972 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800386e:	f023 0301 	bic.w	r3, r3, #1
 8003872:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003884:	2b00      	cmp	r3, #0
 8003886:	d007      	beq.n	8003898 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800388c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003890:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80038a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038a4:	d106      	bne.n	80038b4 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038aa:	f023 0206 	bic.w	r2, r3, #6
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	645a      	str	r2, [r3, #68]	; 0x44
 80038b2:	e002      	b.n	80038ba <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038c2:	4b36      	ldr	r3, [pc, #216]	; (800399c <HAL_ADC_Start_DMA+0x1cc>)
 80038c4:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038ca:	4a35      	ldr	r2, [pc, #212]	; (80039a0 <HAL_ADC_Start_DMA+0x1d0>)
 80038cc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d2:	4a34      	ldr	r2, [pc, #208]	; (80039a4 <HAL_ADC_Start_DMA+0x1d4>)
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038da:	4a33      	ldr	r2, [pc, #204]	; (80039a8 <HAL_ADC_Start_DMA+0x1d8>)
 80038dc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80038e6:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	685a      	ldr	r2, [r3, #4]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80038f6:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	689a      	ldr	r2, [r3, #8]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003906:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	334c      	adds	r3, #76	; 0x4c
 8003912:	4619      	mov	r1, r3
 8003914:	68ba      	ldr	r2, [r7, #8]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f000 fcd8 	bl	80042cc <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10f      	bne.n	8003948 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d129      	bne.n	800398a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	e020      	b.n	800398a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a17      	ldr	r2, [pc, #92]	; (80039ac <HAL_ADC_Start_DMA+0x1dc>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d11b      	bne.n	800398a <HAL_ADC_Start_DMA+0x1ba>
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d114      	bne.n	800398a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689a      	ldr	r2, [r3, #8]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800396e:	609a      	str	r2, [r3, #8]
 8003970:	e00b      	b.n	800398a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f043 0210 	orr.w	r2, r3, #16
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003982:	f043 0201 	orr.w	r2, r3, #1
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3718      	adds	r7, #24
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}
 8003994:	20000010 	.word	0x20000010
 8003998:	431bde83 	.word	0x431bde83
 800399c:	40012300 	.word	0x40012300
 80039a0:	08003e49 	.word	0x08003e49
 80039a4:	08003f03 	.word	0x08003f03
 80039a8:	08003f1f 	.word	0x08003f1f
 80039ac:	40012000 	.word	0x40012000

080039b0 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b083      	sub	sp, #12
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80039b8:	bf00      	nop
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr

080039c4 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80039cc:	bf00      	nop
 80039ce:	370c      	adds	r7, #12
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr

080039d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80039d8:	b480      	push	{r7}
 80039da:	b083      	sub	sp, #12
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80039e0:	bf00      	nop
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d101      	bne.n	8003a08 <HAL_ADC_ConfigChannel+0x1c>
 8003a04:	2302      	movs	r3, #2
 8003a06:	e113      	b.n	8003c30 <HAL_ADC_ConfigChannel+0x244>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	2b09      	cmp	r3, #9
 8003a16:	d925      	bls.n	8003a64 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	68d9      	ldr	r1, [r3, #12]
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	b29b      	uxth	r3, r3
 8003a24:	461a      	mov	r2, r3
 8003a26:	4613      	mov	r3, r2
 8003a28:	005b      	lsls	r3, r3, #1
 8003a2a:	4413      	add	r3, r2
 8003a2c:	3b1e      	subs	r3, #30
 8003a2e:	2207      	movs	r2, #7
 8003a30:	fa02 f303 	lsl.w	r3, r2, r3
 8003a34:	43da      	mvns	r2, r3
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	400a      	ands	r2, r1
 8003a3c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68d9      	ldr	r1, [r3, #12]
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	4618      	mov	r0, r3
 8003a50:	4603      	mov	r3, r0
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	4403      	add	r3, r0
 8003a56:	3b1e      	subs	r3, #30
 8003a58:	409a      	lsls	r2, r3
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	430a      	orrs	r2, r1
 8003a60:	60da      	str	r2, [r3, #12]
 8003a62:	e022      	b.n	8003aaa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	6919      	ldr	r1, [r3, #16]
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	4613      	mov	r3, r2
 8003a74:	005b      	lsls	r3, r3, #1
 8003a76:	4413      	add	r3, r2
 8003a78:	2207      	movs	r2, #7
 8003a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7e:	43da      	mvns	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	400a      	ands	r2, r1
 8003a86:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6919      	ldr	r1, [r3, #16]
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	689a      	ldr	r2, [r3, #8]
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	4618      	mov	r0, r3
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	005b      	lsls	r3, r3, #1
 8003a9e:	4403      	add	r3, r0
 8003aa0:	409a      	lsls	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	2b06      	cmp	r3, #6
 8003ab0:	d824      	bhi.n	8003afc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	685a      	ldr	r2, [r3, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4413      	add	r3, r2
 8003ac2:	3b05      	subs	r3, #5
 8003ac4:	221f      	movs	r2, #31
 8003ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8003aca:	43da      	mvns	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	400a      	ands	r2, r1
 8003ad2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	b29b      	uxth	r3, r3
 8003ae0:	4618      	mov	r0, r3
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	685a      	ldr	r2, [r3, #4]
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4413      	add	r3, r2
 8003aec:	3b05      	subs	r3, #5
 8003aee:	fa00 f203 	lsl.w	r2, r0, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	430a      	orrs	r2, r1
 8003af8:	635a      	str	r2, [r3, #52]	; 0x34
 8003afa:	e04c      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	2b0c      	cmp	r3, #12
 8003b02:	d824      	bhi.n	8003b4e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	685a      	ldr	r2, [r3, #4]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	4413      	add	r3, r2
 8003b14:	3b23      	subs	r3, #35	; 0x23
 8003b16:	221f      	movs	r2, #31
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	43da      	mvns	r2, r3
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	400a      	ands	r2, r1
 8003b24:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	4618      	mov	r0, r3
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	685a      	ldr	r2, [r3, #4]
 8003b38:	4613      	mov	r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	4413      	add	r3, r2
 8003b3e:	3b23      	subs	r3, #35	; 0x23
 8003b40:	fa00 f203 	lsl.w	r2, r0, r3
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	430a      	orrs	r2, r1
 8003b4a:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4c:	e023      	b.n	8003b96 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	685a      	ldr	r2, [r3, #4]
 8003b58:	4613      	mov	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	3b41      	subs	r3, #65	; 0x41
 8003b60:	221f      	movs	r2, #31
 8003b62:	fa02 f303 	lsl.w	r3, r2, r3
 8003b66:	43da      	mvns	r2, r3
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	400a      	ands	r2, r1
 8003b6e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	b29b      	uxth	r3, r3
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685a      	ldr	r2, [r3, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	009b      	lsls	r3, r3, #2
 8003b86:	4413      	add	r3, r2
 8003b88:	3b41      	subs	r3, #65	; 0x41
 8003b8a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	430a      	orrs	r2, r1
 8003b94:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b96:	4b29      	ldr	r3, [pc, #164]	; (8003c3c <HAL_ADC_ConfigChannel+0x250>)
 8003b98:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a28      	ldr	r2, [pc, #160]	; (8003c40 <HAL_ADC_ConfigChannel+0x254>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d10f      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x1d8>
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2b12      	cmp	r3, #18
 8003baa:	d10b      	bne.n	8003bc4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	685b      	ldr	r3, [r3, #4]
 8003bbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_ADC_ConfigChannel+0x254>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d12b      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x23a>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	4a1c      	ldr	r2, [pc, #112]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <HAL_ADC_ConfigChannel+0x1f4>
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b11      	cmp	r3, #17
 8003bde:	d122      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a11      	ldr	r2, [pc, #68]	; (8003c44 <HAL_ADC_ConfigChannel+0x258>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d111      	bne.n	8003c26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003c02:	4b11      	ldr	r3, [pc, #68]	; (8003c48 <HAL_ADC_ConfigChannel+0x25c>)
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	4a11      	ldr	r2, [pc, #68]	; (8003c4c <HAL_ADC_ConfigChannel+0x260>)
 8003c08:	fba2 2303 	umull	r2, r3, r2, r3
 8003c0c:	0c9a      	lsrs	r2, r3, #18
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	005b      	lsls	r3, r3, #1
 8003c16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c18:	e002      	b.n	8003c20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f9      	bne.n	8003c1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003c2e:	2300      	movs	r3, #0
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3714      	adds	r7, #20
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr
 8003c3c:	40012300 	.word	0x40012300
 8003c40:	40012000 	.word	0x40012000
 8003c44:	10000012 	.word	0x10000012
 8003c48:	20000010 	.word	0x20000010
 8003c4c:	431bde83 	.word	0x431bde83

08003c50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b085      	sub	sp, #20
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003c58:	4b79      	ldr	r3, [pc, #484]	; (8003e40 <ADC_Init+0x1f0>)
 8003c5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	685a      	ldr	r2, [r3, #4]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	685a      	ldr	r2, [r3, #4]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	691b      	ldr	r3, [r3, #16]
 8003c90:	021a      	lsls	r2, r3, #8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	685a      	ldr	r2, [r3, #4]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003ca8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	689a      	ldr	r2, [r3, #8]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003cca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ce2:	4a58      	ldr	r2, [pc, #352]	; (8003e44 <ADC_Init+0x1f4>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d022      	beq.n	8003d2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689a      	ldr	r2, [r3, #8]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003cf6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	6899      	ldr	r1, [r3, #8]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	6899      	ldr	r1, [r3, #8]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	609a      	str	r2, [r3, #8]
 8003d2c:	e00f      	b.n	8003d4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	689a      	ldr	r2, [r3, #8]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	689a      	ldr	r2, [r3, #8]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003d4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	689a      	ldr	r2, [r3, #8]
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f022 0202 	bic.w	r2, r2, #2
 8003d5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	6899      	ldr	r1, [r3, #8]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	7e1b      	ldrb	r3, [r3, #24]
 8003d68:	005a      	lsls	r2, r3, #1
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	430a      	orrs	r2, r1
 8003d70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01b      	beq.n	8003db4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685a      	ldr	r2, [r3, #4]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	685a      	ldr	r2, [r3, #4]
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	6859      	ldr	r1, [r3, #4]
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da6:	3b01      	subs	r3, #1
 8003da8:	035a      	lsls	r2, r3, #13
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
 8003db2:	e007      	b.n	8003dc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	685a      	ldr	r2, [r3, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003dd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	69db      	ldr	r3, [r3, #28]
 8003dde:	3b01      	subs	r3, #1
 8003de0:	051a      	lsls	r2, r3, #20
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	430a      	orrs	r2, r1
 8003de8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689a      	ldr	r2, [r3, #8]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003df8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6899      	ldr	r1, [r3, #8]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003e06:	025a      	lsls	r2, r3, #9
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689a      	ldr	r2, [r3, #8]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6899      	ldr	r1, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	695b      	ldr	r3, [r3, #20]
 8003e2a:	029a      	lsls	r2, r3, #10
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	609a      	str	r2, [r3, #8]
}
 8003e34:	bf00      	nop
 8003e36:	3714      	adds	r7, #20
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40012300 	.word	0x40012300
 8003e44:	0f000001 	.word	0x0f000001

08003e48 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e54:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5a:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d13c      	bne.n	8003edc <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e66:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	689b      	ldr	r3, [r3, #8]
 8003e74:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d12b      	bne.n	8003ed4 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d127      	bne.n	8003ed4 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e8a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d006      	beq.n	8003ea0 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	689b      	ldr	r3, [r3, #8]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d119      	bne.n	8003ed4 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 0220 	bic.w	r2, r2, #32
 8003eae:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d105      	bne.n	8003ed4 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ecc:	f043 0201 	orr.w	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ed4:	68f8      	ldr	r0, [r7, #12]
 8003ed6:	f7ff fd6b 	bl	80039b0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003eda:	e00e      	b.n	8003efa <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d003      	beq.n	8003ef0 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f7ff fd75 	bl	80039d8 <HAL_ADC_ErrorCallback>
}
 8003eee:	e004      	b.n	8003efa <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	4798      	blx	r3
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f0e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f7ff fd57 	bl	80039c4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f16:	bf00      	nop
 8003f18:	3710      	adds	r7, #16
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}

08003f1e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003f1e:	b580      	push	{r7, lr}
 8003f20:	b084      	sub	sp, #16
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f2a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2240      	movs	r2, #64	; 0x40
 8003f30:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f36:	f043 0204 	orr.w	r2, r3, #4
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f3e:	68f8      	ldr	r0, [r7, #12]
 8003f40:	f7ff fd4a 	bl	80039d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f44:	bf00      	nop
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b085      	sub	sp, #20
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	f003 0307 	and.w	r3, r3, #7
 8003f5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003f68:	4013      	ands	r3, r2
 8003f6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003f74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003f78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003f7e:	4a04      	ldr	r2, [pc, #16]	; (8003f90 <__NVIC_SetPriorityGrouping+0x44>)
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	60d3      	str	r3, [r2, #12]
}
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	e000ed00 	.word	0xe000ed00

08003f94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003f98:	4b04      	ldr	r3, [pc, #16]	; (8003fac <__NVIC_GetPriorityGrouping+0x18>)
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	0a1b      	lsrs	r3, r3, #8
 8003f9e:	f003 0307 	and.w	r3, r3, #7
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr
 8003fac:	e000ed00 	.word	0xe000ed00

08003fb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b083      	sub	sp, #12
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	db0b      	blt.n	8003fda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003fc2:	79fb      	ldrb	r3, [r7, #7]
 8003fc4:	f003 021f 	and.w	r2, r3, #31
 8003fc8:	4907      	ldr	r1, [pc, #28]	; (8003fe8 <__NVIC_EnableIRQ+0x38>)
 8003fca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fce:	095b      	lsrs	r3, r3, #5
 8003fd0:	2001      	movs	r0, #1
 8003fd2:	fa00 f202 	lsl.w	r2, r0, r2
 8003fd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	e000e100 	.word	0xe000e100

08003fec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	4603      	mov	r3, r0
 8003ff4:	6039      	str	r1, [r7, #0]
 8003ff6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003ff8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	db0a      	blt.n	8004016 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	b2da      	uxtb	r2, r3
 8004004:	490c      	ldr	r1, [pc, #48]	; (8004038 <__NVIC_SetPriority+0x4c>)
 8004006:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800400a:	0112      	lsls	r2, r2, #4
 800400c:	b2d2      	uxtb	r2, r2
 800400e:	440b      	add	r3, r1
 8004010:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004014:	e00a      	b.n	800402c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	b2da      	uxtb	r2, r3
 800401a:	4908      	ldr	r1, [pc, #32]	; (800403c <__NVIC_SetPriority+0x50>)
 800401c:	79fb      	ldrb	r3, [r7, #7]
 800401e:	f003 030f 	and.w	r3, r3, #15
 8004022:	3b04      	subs	r3, #4
 8004024:	0112      	lsls	r2, r2, #4
 8004026:	b2d2      	uxtb	r2, r2
 8004028:	440b      	add	r3, r1
 800402a:	761a      	strb	r2, [r3, #24]
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr
 8004038:	e000e100 	.word	0xe000e100
 800403c:	e000ed00 	.word	0xe000ed00

08004040 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004040:	b480      	push	{r7}
 8004042:	b089      	sub	sp, #36	; 0x24
 8004044:	af00      	add	r7, sp, #0
 8004046:	60f8      	str	r0, [r7, #12]
 8004048:	60b9      	str	r1, [r7, #8]
 800404a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f003 0307 	and.w	r3, r3, #7
 8004052:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	f1c3 0307 	rsb	r3, r3, #7
 800405a:	2b04      	cmp	r3, #4
 800405c:	bf28      	it	cs
 800405e:	2304      	movcs	r3, #4
 8004060:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004062:	69fb      	ldr	r3, [r7, #28]
 8004064:	3304      	adds	r3, #4
 8004066:	2b06      	cmp	r3, #6
 8004068:	d902      	bls.n	8004070 <NVIC_EncodePriority+0x30>
 800406a:	69fb      	ldr	r3, [r7, #28]
 800406c:	3b03      	subs	r3, #3
 800406e:	e000      	b.n	8004072 <NVIC_EncodePriority+0x32>
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004074:	f04f 32ff 	mov.w	r2, #4294967295
 8004078:	69bb      	ldr	r3, [r7, #24]
 800407a:	fa02 f303 	lsl.w	r3, r2, r3
 800407e:	43da      	mvns	r2, r3
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	401a      	ands	r2, r3
 8004084:	697b      	ldr	r3, [r7, #20]
 8004086:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004088:	f04f 31ff 	mov.w	r1, #4294967295
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	fa01 f303 	lsl.w	r3, r1, r3
 8004092:	43d9      	mvns	r1, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004098:	4313      	orrs	r3, r2
         );
}
 800409a:	4618      	mov	r0, r3
 800409c:	3724      	adds	r7, #36	; 0x24
 800409e:	46bd      	mov	sp, r7
 80040a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a4:	4770      	bx	lr
	...

080040a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	3b01      	subs	r3, #1
 80040b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040b8:	d301      	bcc.n	80040be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80040ba:	2301      	movs	r3, #1
 80040bc:	e00f      	b.n	80040de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <SysTick_Config+0x40>)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	3b01      	subs	r3, #1
 80040c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80040c6:	210f      	movs	r1, #15
 80040c8:	f04f 30ff 	mov.w	r0, #4294967295
 80040cc:	f7ff ff8e 	bl	8003fec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80040d0:	4b05      	ldr	r3, [pc, #20]	; (80040e8 <SysTick_Config+0x40>)
 80040d2:	2200      	movs	r2, #0
 80040d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80040d6:	4b04      	ldr	r3, [pc, #16]	; (80040e8 <SysTick_Config+0x40>)
 80040d8:	2207      	movs	r2, #7
 80040da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	e000e010 	.word	0xe000e010

080040ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff ff29 	bl	8003f4c <__NVIC_SetPriorityGrouping>
}
 80040fa:	bf00      	nop
 80040fc:	3708      	adds	r7, #8
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004102:	b580      	push	{r7, lr}
 8004104:	b086      	sub	sp, #24
 8004106:	af00      	add	r7, sp, #0
 8004108:	4603      	mov	r3, r0
 800410a:	60b9      	str	r1, [r7, #8]
 800410c:	607a      	str	r2, [r7, #4]
 800410e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004110:	2300      	movs	r3, #0
 8004112:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004114:	f7ff ff3e 	bl	8003f94 <__NVIC_GetPriorityGrouping>
 8004118:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68b9      	ldr	r1, [r7, #8]
 800411e:	6978      	ldr	r0, [r7, #20]
 8004120:	f7ff ff8e 	bl	8004040 <NVIC_EncodePriority>
 8004124:	4602      	mov	r2, r0
 8004126:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800412a:	4611      	mov	r1, r2
 800412c:	4618      	mov	r0, r3
 800412e:	f7ff ff5d 	bl	8003fec <__NVIC_SetPriority>
}
 8004132:	bf00      	nop
 8004134:	3718      	adds	r7, #24
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800413a:	b580      	push	{r7, lr}
 800413c:	b082      	sub	sp, #8
 800413e:	af00      	add	r7, sp, #0
 8004140:	4603      	mov	r3, r0
 8004142:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004144:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff ff31 	bl	8003fb0 <__NVIC_EnableIRQ>
}
 800414e:	bf00      	nop
 8004150:	3708      	adds	r7, #8
 8004152:	46bd      	mov	sp, r7
 8004154:	bd80      	pop	{r7, pc}

08004156 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004156:	b580      	push	{r7, lr}
 8004158:	b082      	sub	sp, #8
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800415e:	6878      	ldr	r0, [r7, #4]
 8004160:	f7ff ffa2 	bl	80040a8 <SysTick_Config>
 8004164:	4603      	mov	r3, r0
}
 8004166:	4618      	mov	r0, r3
 8004168:	3708      	adds	r7, #8
 800416a:	46bd      	mov	sp, r7
 800416c:	bd80      	pop	{r7, pc}
	...

08004170 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004178:	2300      	movs	r3, #0
 800417a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800417c:	f7ff fad8 	bl	8003730 <HAL_GetTick>
 8004180:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e099      	b.n	80042c0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2202      	movs	r2, #2
 8004190:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2200      	movs	r2, #0
 8004198:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f022 0201 	bic.w	r2, r2, #1
 80041aa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ac:	e00f      	b.n	80041ce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041ae:	f7ff fabf 	bl	8003730 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b05      	cmp	r3, #5
 80041ba:	d908      	bls.n	80041ce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2203      	movs	r2, #3
 80041c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e078      	b.n	80042c0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f003 0301 	and.w	r3, r3, #1
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d1e8      	bne.n	80041ae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80041e4:	697a      	ldr	r2, [r7, #20]
 80041e6:	4b38      	ldr	r3, [pc, #224]	; (80042c8 <HAL_DMA_Init+0x158>)
 80041e8:	4013      	ands	r3, r2
 80041ea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685a      	ldr	r2, [r3, #4]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689b      	ldr	r3, [r3, #8]
 80041f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80041fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	691b      	ldr	r3, [r3, #16]
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	699b      	ldr	r3, [r3, #24]
 800420c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6a1b      	ldr	r3, [r3, #32]
 8004218:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004224:	2b04      	cmp	r3, #4
 8004226:	d107      	bne.n	8004238 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004230:	4313      	orrs	r3, r2
 8004232:	697a      	ldr	r2, [r7, #20]
 8004234:	4313      	orrs	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	697a      	ldr	r2, [r7, #20]
 800423e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0307 	bic.w	r3, r3, #7
 800424e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004254:	697a      	ldr	r2, [r7, #20]
 8004256:	4313      	orrs	r3, r2
 8004258:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b04      	cmp	r3, #4
 8004260:	d117      	bne.n	8004292 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004266:	697a      	ldr	r2, [r7, #20]
 8004268:	4313      	orrs	r3, r2
 800426a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00e      	beq.n	8004292 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f000 fa6f 	bl	8004758 <DMA_CheckFifoParam>
 800427a:	4603      	mov	r3, r0
 800427c:	2b00      	cmp	r3, #0
 800427e:	d008      	beq.n	8004292 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2240      	movs	r2, #64	; 0x40
 8004284:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2201      	movs	r2, #1
 800428a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800428e:	2301      	movs	r3, #1
 8004290:	e016      	b.n	80042c0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	697a      	ldr	r2, [r7, #20]
 8004298:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800429a:	6878      	ldr	r0, [r7, #4]
 800429c:	f000 fa26 	bl	80046ec <DMA_CalcBaseAndBitshift>
 80042a0:	4603      	mov	r3, r0
 80042a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042a8:	223f      	movs	r2, #63	; 0x3f
 80042aa:	409a      	lsls	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2200      	movs	r2, #0
 80042b4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	2201      	movs	r2, #1
 80042ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}
 80042c8:	f010803f 	.word	0xf010803f

080042cc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
 80042d8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042e2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042ea:	2b01      	cmp	r3, #1
 80042ec:	d101      	bne.n	80042f2 <HAL_DMA_Start_IT+0x26>
 80042ee:	2302      	movs	r3, #2
 80042f0:	e040      	b.n	8004374 <HAL_DMA_Start_IT+0xa8>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2201      	movs	r2, #1
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b01      	cmp	r3, #1
 8004304:	d12f      	bne.n	8004366 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2202      	movs	r2, #2
 800430a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	2200      	movs	r2, #0
 8004312:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	687a      	ldr	r2, [r7, #4]
 8004318:	68b9      	ldr	r1, [r7, #8]
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f000 f9b8 	bl	8004690 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004324:	223f      	movs	r2, #63	; 0x3f
 8004326:	409a      	lsls	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681a      	ldr	r2, [r3, #0]
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f042 0216 	orr.w	r2, r2, #22
 800433a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004340:	2b00      	cmp	r3, #0
 8004342:	d007      	beq.n	8004354 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0208 	orr.w	r2, r2, #8
 8004352:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
 8004364:	e005      	b.n	8004372 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800436e:	2302      	movs	r3, #2
 8004370:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3718      	adds	r7, #24
 8004378:	46bd      	mov	sp, r7
 800437a:	bd80      	pop	{r7, pc}

0800437c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b086      	sub	sp, #24
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004384:	2300      	movs	r3, #0
 8004386:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004388:	4b8e      	ldr	r3, [pc, #568]	; (80045c4 <HAL_DMA_IRQHandler+0x248>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a8e      	ldr	r2, [pc, #568]	; (80045c8 <HAL_DMA_IRQHandler+0x24c>)
 800438e:	fba2 2303 	umull	r2, r3, r2, r3
 8004392:	0a9b      	lsrs	r3, r3, #10
 8004394:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800439a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a6:	2208      	movs	r2, #8
 80043a8:	409a      	lsls	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	4013      	ands	r3, r2
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d01a      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f003 0304 	and.w	r3, r3, #4
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d013      	beq.n	80043e8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f022 0204 	bic.w	r2, r2, #4
 80043ce:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043d4:	2208      	movs	r2, #8
 80043d6:	409a      	lsls	r2, r3
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e0:	f043 0201 	orr.w	r2, r3, #1
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ec:	2201      	movs	r2, #1
 80043ee:	409a      	lsls	r2, r3
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	4013      	ands	r3, r2
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d012      	beq.n	800441e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	695b      	ldr	r3, [r3, #20]
 80043fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00b      	beq.n	800441e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800440a:	2201      	movs	r2, #1
 800440c:	409a      	lsls	r2, r3
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004422:	2204      	movs	r2, #4
 8004424:	409a      	lsls	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4013      	ands	r3, r2
 800442a:	2b00      	cmp	r3, #0
 800442c:	d012      	beq.n	8004454 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0302 	and.w	r3, r3, #2
 8004438:	2b00      	cmp	r3, #0
 800443a:	d00b      	beq.n	8004454 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	2204      	movs	r2, #4
 8004442:	409a      	lsls	r2, r3
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f043 0204 	orr.w	r2, r3, #4
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004458:	2210      	movs	r2, #16
 800445a:	409a      	lsls	r2, r3
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4013      	ands	r3, r2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d043      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d03c      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004476:	2210      	movs	r2, #16
 8004478:	409a      	lsls	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d018      	beq.n	80044be <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004496:	2b00      	cmp	r3, #0
 8004498:	d108      	bne.n	80044ac <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d024      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a6:	6878      	ldr	r0, [r7, #4]
 80044a8:	4798      	blx	r3
 80044aa:	e01f      	b.n	80044ec <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01b      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	4798      	blx	r3
 80044bc:	e016      	b.n	80044ec <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f022 0208 	bic.w	r2, r2, #8
 80044da:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d003      	beq.n	80044ec <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044f0:	2220      	movs	r2, #32
 80044f2:	409a      	lsls	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	4013      	ands	r3, r2
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 808f 	beq.w	800461c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f003 0310 	and.w	r3, r3, #16
 8004508:	2b00      	cmp	r3, #0
 800450a:	f000 8087 	beq.w	800461c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	2220      	movs	r2, #32
 8004514:	409a      	lsls	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004520:	b2db      	uxtb	r3, r3
 8004522:	2b05      	cmp	r3, #5
 8004524:	d136      	bne.n	8004594 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0216 	bic.w	r2, r2, #22
 8004534:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695a      	ldr	r2, [r3, #20]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004544:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454a:	2b00      	cmp	r3, #0
 800454c:	d103      	bne.n	8004556 <HAL_DMA_IRQHandler+0x1da>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f022 0208 	bic.w	r2, r2, #8
 8004564:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800456a:	223f      	movs	r2, #63	; 0x3f
 800456c:	409a      	lsls	r2, r3
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2201      	movs	r2, #1
 8004576:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2200      	movs	r2, #0
 800457e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004586:	2b00      	cmp	r3, #0
 8004588:	d07e      	beq.n	8004688 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	4798      	blx	r3
        }
        return;
 8004592:	e079      	b.n	8004688 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d01d      	beq.n	80045de <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d10d      	bne.n	80045cc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d031      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	4798      	blx	r3
 80045c0:	e02c      	b.n	800461c <HAL_DMA_IRQHandler+0x2a0>
 80045c2:	bf00      	nop
 80045c4:	20000010 	.word	0x20000010
 80045c8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d023      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	4798      	blx	r3
 80045dc:	e01e      	b.n	800461c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10f      	bne.n	800460c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 0210 	bic.w	r2, r2, #16
 80045fa:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2200      	movs	r2, #0
 8004608:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004610:	2b00      	cmp	r3, #0
 8004612:	d003      	beq.n	800461c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004618:	6878      	ldr	r0, [r7, #4]
 800461a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	2b00      	cmp	r3, #0
 8004622:	d032      	beq.n	800468a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004628:	f003 0301 	and.w	r3, r3, #1
 800462c:	2b00      	cmp	r3, #0
 800462e:	d022      	beq.n	8004676 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2205      	movs	r2, #5
 8004634:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f022 0201 	bic.w	r2, r2, #1
 8004646:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	3301      	adds	r3, #1
 800464c:	60bb      	str	r3, [r7, #8]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	429a      	cmp	r2, r3
 8004652:	d307      	bcc.n	8004664 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1f2      	bne.n	8004648 <HAL_DMA_IRQHandler+0x2cc>
 8004662:	e000      	b.n	8004666 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004664:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800467a:	2b00      	cmp	r3, #0
 800467c:	d005      	beq.n	800468a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004682:	6878      	ldr	r0, [r7, #4]
 8004684:	4798      	blx	r3
 8004686:	e000      	b.n	800468a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004688:	bf00      	nop
    }
  }
}
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004690:	b480      	push	{r7}
 8004692:	b085      	sub	sp, #20
 8004694:	af00      	add	r7, sp, #0
 8004696:	60f8      	str	r0, [r7, #12]
 8004698:	60b9      	str	r1, [r7, #8]
 800469a:	607a      	str	r2, [r7, #4]
 800469c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80046ac:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	2b40      	cmp	r3, #64	; 0x40
 80046bc:	d108      	bne.n	80046d0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68ba      	ldr	r2, [r7, #8]
 80046cc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80046ce:	e007      	b.n	80046e0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	68ba      	ldr	r2, [r7, #8]
 80046d6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]
}
 80046e0:	bf00      	nop
 80046e2:	3714      	adds	r7, #20
 80046e4:	46bd      	mov	sp, r7
 80046e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ea:	4770      	bx	lr

080046ec <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b085      	sub	sp, #20
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	3b10      	subs	r3, #16
 80046fc:	4a14      	ldr	r2, [pc, #80]	; (8004750 <DMA_CalcBaseAndBitshift+0x64>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	091b      	lsrs	r3, r3, #4
 8004704:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004706:	4a13      	ldr	r2, [pc, #76]	; (8004754 <DMA_CalcBaseAndBitshift+0x68>)
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	4413      	add	r3, r2
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	461a      	mov	r2, r3
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	2b03      	cmp	r3, #3
 8004718:	d909      	bls.n	800472e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004722:	f023 0303 	bic.w	r3, r3, #3
 8004726:	1d1a      	adds	r2, r3, #4
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	659a      	str	r2, [r3, #88]	; 0x58
 800472c:	e007      	b.n	800473e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004736:	f023 0303 	bic.w	r3, r3, #3
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004742:	4618      	mov	r0, r3
 8004744:	3714      	adds	r7, #20
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	aaaaaaab 	.word	0xaaaaaaab
 8004754:	08006f88 	.word	0x08006f88

08004758 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004758:	b480      	push	{r7}
 800475a:	b085      	sub	sp, #20
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004760:	2300      	movs	r3, #0
 8004762:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004768:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d11f      	bne.n	80047b2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004772:	68bb      	ldr	r3, [r7, #8]
 8004774:	2b03      	cmp	r3, #3
 8004776:	d856      	bhi.n	8004826 <DMA_CheckFifoParam+0xce>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <DMA_CheckFifoParam+0x28>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	08004791 	.word	0x08004791
 8004784:	080047a3 	.word	0x080047a3
 8004788:	08004791 	.word	0x08004791
 800478c:	08004827 	.word	0x08004827
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d046      	beq.n	800482a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047a0:	e043      	b.n	800482a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047aa:	d140      	bne.n	800482e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b0:	e03d      	b.n	800482e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	699b      	ldr	r3, [r3, #24]
 80047b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047ba:	d121      	bne.n	8004800 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80047bc:	68bb      	ldr	r3, [r7, #8]
 80047be:	2b03      	cmp	r3, #3
 80047c0:	d837      	bhi.n	8004832 <DMA_CheckFifoParam+0xda>
 80047c2:	a201      	add	r2, pc, #4	; (adr r2, 80047c8 <DMA_CheckFifoParam+0x70>)
 80047c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c8:	080047d9 	.word	0x080047d9
 80047cc:	080047df 	.word	0x080047df
 80047d0:	080047d9 	.word	0x080047d9
 80047d4:	080047f1 	.word	0x080047f1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	73fb      	strb	r3, [r7, #15]
      break;
 80047dc:	e030      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d025      	beq.n	8004836 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047ee:	e022      	b.n	8004836 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047f8:	d11f      	bne.n	800483a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047fe:	e01c      	b.n	800483a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	2b02      	cmp	r3, #2
 8004804:	d903      	bls.n	800480e <DMA_CheckFifoParam+0xb6>
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b03      	cmp	r3, #3
 800480a:	d003      	beq.n	8004814 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800480c:	e018      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
      break;
 8004812:	e015      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00e      	beq.n	800483e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
      break;
 8004824:	e00b      	b.n	800483e <DMA_CheckFifoParam+0xe6>
      break;
 8004826:	bf00      	nop
 8004828:	e00a      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;
 800482a:	bf00      	nop
 800482c:	e008      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;
 800482e:	bf00      	nop
 8004830:	e006      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;
 8004832:	bf00      	nop
 8004834:	e004      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;
 8004836:	bf00      	nop
 8004838:	e002      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;   
 800483a:	bf00      	nop
 800483c:	e000      	b.n	8004840 <DMA_CheckFifoParam+0xe8>
      break;
 800483e:	bf00      	nop
    }
  } 
  
  return status; 
 8004840:	7bfb      	ldrb	r3, [r7, #15]
}
 8004842:	4618      	mov	r0, r3
 8004844:	3714      	adds	r7, #20
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop

08004850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004850:	b480      	push	{r7}
 8004852:	b089      	sub	sp, #36	; 0x24
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
 8004858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800485a:	2300      	movs	r3, #0
 800485c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800485e:	2300      	movs	r3, #0
 8004860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004862:	2300      	movs	r3, #0
 8004864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
 800486a:	e159      	b.n	8004b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800486c:	2201      	movs	r2, #1
 800486e:	69fb      	ldr	r3, [r7, #28]
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	4013      	ands	r3, r2
 800487e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	429a      	cmp	r2, r3
 8004886:	f040 8148 	bne.w	8004b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	f003 0303 	and.w	r3, r3, #3
 8004892:	2b01      	cmp	r3, #1
 8004894:	d005      	beq.n	80048a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800489e:	2b02      	cmp	r3, #2
 80048a0:	d130      	bne.n	8004904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	689b      	ldr	r3, [r3, #8]
 80048a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80048a8:	69fb      	ldr	r3, [r7, #28]
 80048aa:	005b      	lsls	r3, r3, #1
 80048ac:	2203      	movs	r2, #3
 80048ae:	fa02 f303 	lsl.w	r3, r2, r3
 80048b2:	43db      	mvns	r3, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4013      	ands	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	68da      	ldr	r2, [r3, #12]
 80048be:	69fb      	ldr	r3, [r7, #28]
 80048c0:	005b      	lsls	r3, r3, #1
 80048c2:	fa02 f303 	lsl.w	r3, r2, r3
 80048c6:	69ba      	ldr	r2, [r7, #24]
 80048c8:	4313      	orrs	r3, r2
 80048ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	69ba      	ldr	r2, [r7, #24]
 80048d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80048d8:	2201      	movs	r2, #1
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	fa02 f303 	lsl.w	r3, r2, r3
 80048e0:	43db      	mvns	r3, r3
 80048e2:	69ba      	ldr	r2, [r7, #24]
 80048e4:	4013      	ands	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 0201 	and.w	r2, r3, #1
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b03      	cmp	r3, #3
 800490e:	d017      	beq.n	8004940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	2203      	movs	r2, #3
 800491c:	fa02 f303 	lsl.w	r3, r2, r3
 8004920:	43db      	mvns	r3, r3
 8004922:	69ba      	ldr	r2, [r7, #24]
 8004924:	4013      	ands	r3, r2
 8004926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	69fb      	ldr	r3, [r7, #28]
 800492e:	005b      	lsls	r3, r3, #1
 8004930:	fa02 f303 	lsl.w	r3, r2, r3
 8004934:	69ba      	ldr	r2, [r7, #24]
 8004936:	4313      	orrs	r3, r2
 8004938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	69ba      	ldr	r2, [r7, #24]
 800493e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f003 0303 	and.w	r3, r3, #3
 8004948:	2b02      	cmp	r3, #2
 800494a:	d123      	bne.n	8004994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800494c:	69fb      	ldr	r3, [r7, #28]
 800494e:	08da      	lsrs	r2, r3, #3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	3208      	adds	r2, #8
 8004954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f003 0307 	and.w	r3, r3, #7
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	220f      	movs	r2, #15
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	691a      	ldr	r2, [r3, #16]
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004986:	69fb      	ldr	r3, [r7, #28]
 8004988:	08da      	lsrs	r2, r3, #3
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	3208      	adds	r2, #8
 800498e:	69b9      	ldr	r1, [r7, #24]
 8004990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800499a:	69fb      	ldr	r3, [r7, #28]
 800499c:	005b      	lsls	r3, r3, #1
 800499e:	2203      	movs	r2, #3
 80049a0:	fa02 f303 	lsl.w	r3, r2, r3
 80049a4:	43db      	mvns	r3, r3
 80049a6:	69ba      	ldr	r2, [r7, #24]
 80049a8:	4013      	ands	r3, r2
 80049aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f003 0203 	and.w	r2, r3, #3
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	005b      	lsls	r3, r3, #1
 80049b8:	fa02 f303 	lsl.w	r3, r2, r3
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	4313      	orrs	r3, r2
 80049c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	f000 80a2 	beq.w	8004b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	4b57      	ldr	r3, [pc, #348]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 80049dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049de:	4a56      	ldr	r2, [pc, #344]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 80049e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049e4:	6453      	str	r3, [r2, #68]	; 0x44
 80049e6:	4b54      	ldr	r3, [pc, #336]	; (8004b38 <HAL_GPIO_Init+0x2e8>)
 80049e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049f2:	4a52      	ldr	r2, [pc, #328]	; (8004b3c <HAL_GPIO_Init+0x2ec>)
 80049f4:	69fb      	ldr	r3, [r7, #28]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	3302      	adds	r3, #2
 80049fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0303 	and.w	r3, r3, #3
 8004a06:	009b      	lsls	r3, r3, #2
 8004a08:	220f      	movs	r2, #15
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43db      	mvns	r3, r3
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	4013      	ands	r3, r2
 8004a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a49      	ldr	r2, [pc, #292]	; (8004b40 <HAL_GPIO_Init+0x2f0>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d019      	beq.n	8004a52 <HAL_GPIO_Init+0x202>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	4a48      	ldr	r2, [pc, #288]	; (8004b44 <HAL_GPIO_Init+0x2f4>)
 8004a22:	4293      	cmp	r3, r2
 8004a24:	d013      	beq.n	8004a4e <HAL_GPIO_Init+0x1fe>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4a47      	ldr	r2, [pc, #284]	; (8004b48 <HAL_GPIO_Init+0x2f8>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d00d      	beq.n	8004a4a <HAL_GPIO_Init+0x1fa>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	4a46      	ldr	r2, [pc, #280]	; (8004b4c <HAL_GPIO_Init+0x2fc>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d007      	beq.n	8004a46 <HAL_GPIO_Init+0x1f6>
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4a45      	ldr	r2, [pc, #276]	; (8004b50 <HAL_GPIO_Init+0x300>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d101      	bne.n	8004a42 <HAL_GPIO_Init+0x1f2>
 8004a3e:	2304      	movs	r3, #4
 8004a40:	e008      	b.n	8004a54 <HAL_GPIO_Init+0x204>
 8004a42:	2307      	movs	r3, #7
 8004a44:	e006      	b.n	8004a54 <HAL_GPIO_Init+0x204>
 8004a46:	2303      	movs	r3, #3
 8004a48:	e004      	b.n	8004a54 <HAL_GPIO_Init+0x204>
 8004a4a:	2302      	movs	r3, #2
 8004a4c:	e002      	b.n	8004a54 <HAL_GPIO_Init+0x204>
 8004a4e:	2301      	movs	r3, #1
 8004a50:	e000      	b.n	8004a54 <HAL_GPIO_Init+0x204>
 8004a52:	2300      	movs	r3, #0
 8004a54:	69fa      	ldr	r2, [r7, #28]
 8004a56:	f002 0203 	and.w	r2, r2, #3
 8004a5a:	0092      	lsls	r2, r2, #2
 8004a5c:	4093      	lsls	r3, r2
 8004a5e:	69ba      	ldr	r2, [r7, #24]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a64:	4935      	ldr	r1, [pc, #212]	; (8004b3c <HAL_GPIO_Init+0x2ec>)
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	3302      	adds	r3, #2
 8004a6c:	69ba      	ldr	r2, [r7, #24]
 8004a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a72:	4b38      	ldr	r3, [pc, #224]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004a74:	689b      	ldr	r3, [r3, #8]
 8004a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	43db      	mvns	r3, r3
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	4013      	ands	r3, r2
 8004a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d003      	beq.n	8004a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a96:	4a2f      	ldr	r2, [pc, #188]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004a98:	69bb      	ldr	r3, [r7, #24]
 8004a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a9c:	4b2d      	ldr	r3, [pc, #180]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d003      	beq.n	8004ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	4313      	orrs	r3, r2
 8004abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ac0:	4a24      	ldr	r2, [pc, #144]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004ac6:	4b23      	ldr	r3, [pc, #140]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	43db      	mvns	r3, r3
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	4013      	ands	r3, r2
 8004ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d003      	beq.n	8004aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004aea:	4a1a      	ldr	r2, [pc, #104]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004aec:	69bb      	ldr	r3, [r7, #24]
 8004aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004af0:	4b18      	ldr	r3, [pc, #96]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	43db      	mvns	r3, r3
 8004afa:	69ba      	ldr	r2, [r7, #24]
 8004afc:	4013      	ands	r3, r2
 8004afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d003      	beq.n	8004b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004b0c:	69ba      	ldr	r2, [r7, #24]
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	4313      	orrs	r3, r2
 8004b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004b14:	4a0f      	ldr	r2, [pc, #60]	; (8004b54 <HAL_GPIO_Init+0x304>)
 8004b16:	69bb      	ldr	r3, [r7, #24]
 8004b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b1a:	69fb      	ldr	r3, [r7, #28]
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	61fb      	str	r3, [r7, #28]
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	2b0f      	cmp	r3, #15
 8004b24:	f67f aea2 	bls.w	800486c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b28:	bf00      	nop
 8004b2a:	bf00      	nop
 8004b2c:	3724      	adds	r7, #36	; 0x24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b34:	4770      	bx	lr
 8004b36:	bf00      	nop
 8004b38:	40023800 	.word	0x40023800
 8004b3c:	40013800 	.word	0x40013800
 8004b40:	40020000 	.word	0x40020000
 8004b44:	40020400 	.word	0x40020400
 8004b48:	40020800 	.word	0x40020800
 8004b4c:	40020c00 	.word	0x40020c00
 8004b50:	40021000 	.word	0x40021000
 8004b54:	40013c00 	.word	0x40013c00

08004b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	b085      	sub	sp, #20
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
 8004b60:	460b      	mov	r3, r1
 8004b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	691a      	ldr	r2, [r3, #16]
 8004b68:	887b      	ldrh	r3, [r7, #2]
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d002      	beq.n	8004b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004b70:	2301      	movs	r3, #1
 8004b72:	73fb      	strb	r3, [r7, #15]
 8004b74:	e001      	b.n	8004b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004b76:	2300      	movs	r3, #0
 8004b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b083      	sub	sp, #12
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	460b      	mov	r3, r1
 8004b92:	807b      	strh	r3, [r7, #2]
 8004b94:	4613      	mov	r3, r2
 8004b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b98:	787b      	ldrb	r3, [r7, #1]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b9e:	887a      	ldrh	r2, [r7, #2]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ba4:	e003      	b.n	8004bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ba6:	887b      	ldrh	r3, [r7, #2]
 8004ba8:	041a      	lsls	r2, r3, #16
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	619a      	str	r2, [r3, #24]
}
 8004bae:	bf00      	nop
 8004bb0:	370c      	adds	r7, #12
 8004bb2:	46bd      	mov	sp, r7
 8004bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb8:	4770      	bx	lr
	...

08004bbc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b086      	sub	sp, #24
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e267      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d075      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bda:	4b88      	ldr	r3, [pc, #544]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 030c 	and.w	r3, r3, #12
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d00c      	beq.n	8004c00 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004be6:	4b85      	ldr	r3, [pc, #532]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004bee:	2b08      	cmp	r3, #8
 8004bf0:	d112      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bf2:	4b82      	ldr	r3, [pc, #520]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004bfe:	d10b      	bne.n	8004c18 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c00:	4b7e      	ldr	r3, [pc, #504]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d05b      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x108>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d157      	bne.n	8004cc4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004c14:	2301      	movs	r3, #1
 8004c16:	e242      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c20:	d106      	bne.n	8004c30 <HAL_RCC_OscConfig+0x74>
 8004c22:	4b76      	ldr	r3, [pc, #472]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4a75      	ldr	r2, [pc, #468]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c2c:	6013      	str	r3, [r2, #0]
 8004c2e:	e01d      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004c38:	d10c      	bne.n	8004c54 <HAL_RCC_OscConfig+0x98>
 8004c3a:	4b70      	ldr	r3, [pc, #448]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a6f      	ldr	r2, [pc, #444]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	4b6d      	ldr	r3, [pc, #436]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a6c      	ldr	r2, [pc, #432]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004c50:	6013      	str	r3, [r2, #0]
 8004c52:	e00b      	b.n	8004c6c <HAL_RCC_OscConfig+0xb0>
 8004c54:	4b69      	ldr	r3, [pc, #420]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a68      	ldr	r2, [pc, #416]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004c5e:	6013      	str	r3, [r2, #0]
 8004c60:	4b66      	ldr	r3, [pc, #408]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a65      	ldr	r2, [pc, #404]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004c6a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d013      	beq.n	8004c9c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c74:	f7fe fd5c 	bl	8003730 <HAL_GetTick>
 8004c78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c7a:	e008      	b.n	8004c8e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c7c:	f7fe fd58 	bl	8003730 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	2b64      	cmp	r3, #100	; 0x64
 8004c88:	d901      	bls.n	8004c8e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e207      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c8e:	4b5b      	ldr	r3, [pc, #364]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d0f0      	beq.n	8004c7c <HAL_RCC_OscConfig+0xc0>
 8004c9a:	e014      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c9c:	f7fe fd48 	bl	8003730 <HAL_GetTick>
 8004ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ca2:	e008      	b.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ca4:	f7fe fd44 	bl	8003730 <HAL_GetTick>
 8004ca8:	4602      	mov	r2, r0
 8004caa:	693b      	ldr	r3, [r7, #16]
 8004cac:	1ad3      	subs	r3, r2, r3
 8004cae:	2b64      	cmp	r3, #100	; 0x64
 8004cb0:	d901      	bls.n	8004cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004cb2:	2303      	movs	r3, #3
 8004cb4:	e1f3      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004cb6:	4b51      	ldr	r3, [pc, #324]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1f0      	bne.n	8004ca4 <HAL_RCC_OscConfig+0xe8>
 8004cc2:	e000      	b.n	8004cc6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004cc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d063      	beq.n	8004d9a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004cd2:	4b4a      	ldr	r3, [pc, #296]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cd4:	689b      	ldr	r3, [r3, #8]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00b      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cde:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004ce0:	689b      	ldr	r3, [r3, #8]
 8004ce2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ce6:	2b08      	cmp	r3, #8
 8004ce8:	d11c      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cea:	4b44      	ldr	r3, [pc, #272]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cf6:	4b41      	ldr	r3, [pc, #260]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d005      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	2b01      	cmp	r3, #1
 8004d08:	d001      	beq.n	8004d0e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e1c7      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	691b      	ldr	r3, [r3, #16]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4937      	ldr	r1, [pc, #220]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004d22:	e03a      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d020      	beq.n	8004d6e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004d2c:	4b34      	ldr	r3, [pc, #208]	; (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d32:	f7fe fcfd 	bl	8003730 <HAL_GetTick>
 8004d36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d38:	e008      	b.n	8004d4c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d3a:	f7fe fcf9 	bl	8003730 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d901      	bls.n	8004d4c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d48:	2303      	movs	r3, #3
 8004d4a:	e1a8      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4c:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0302 	and.w	r3, r3, #2
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0f0      	beq.n	8004d3a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d58:	4b28      	ldr	r3, [pc, #160]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	00db      	lsls	r3, r3, #3
 8004d66:	4925      	ldr	r1, [pc, #148]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	600b      	str	r3, [r1, #0]
 8004d6c:	e015      	b.n	8004d9a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d6e:	4b24      	ldr	r3, [pc, #144]	; (8004e00 <HAL_RCC_OscConfig+0x244>)
 8004d70:	2200      	movs	r2, #0
 8004d72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fe fcdc 	bl	8003730 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d7c:	f7fe fcd8 	bl	8003730 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e187      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d8e:	4b1b      	ldr	r3, [pc, #108]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0302 	and.w	r3, r3, #2
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d1f0      	bne.n	8004d7c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 0308 	and.w	r3, r3, #8
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d036      	beq.n	8004e14 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	695b      	ldr	r3, [r3, #20]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d016      	beq.n	8004ddc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004dae:	4b15      	ldr	r3, [pc, #84]	; (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004db0:	2201      	movs	r2, #1
 8004db2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004db4:	f7fe fcbc 	bl	8003730 <HAL_GetTick>
 8004db8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dba:	e008      	b.n	8004dce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dbc:	f7fe fcb8 	bl	8003730 <HAL_GetTick>
 8004dc0:	4602      	mov	r2, r0
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	1ad3      	subs	r3, r2, r3
 8004dc6:	2b02      	cmp	r3, #2
 8004dc8:	d901      	bls.n	8004dce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004dca:	2303      	movs	r3, #3
 8004dcc:	e167      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004dce:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_RCC_OscConfig+0x240>)
 8004dd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d0f0      	beq.n	8004dbc <HAL_RCC_OscConfig+0x200>
 8004dda:	e01b      	b.n	8004e14 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ddc:	4b09      	ldr	r3, [pc, #36]	; (8004e04 <HAL_RCC_OscConfig+0x248>)
 8004dde:	2200      	movs	r2, #0
 8004de0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004de2:	f7fe fca5 	bl	8003730 <HAL_GetTick>
 8004de6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004de8:	e00e      	b.n	8004e08 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004dea:	f7fe fca1 	bl	8003730 <HAL_GetTick>
 8004dee:	4602      	mov	r2, r0
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	1ad3      	subs	r3, r2, r3
 8004df4:	2b02      	cmp	r3, #2
 8004df6:	d907      	bls.n	8004e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004df8:	2303      	movs	r3, #3
 8004dfa:	e150      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	42470000 	.word	0x42470000
 8004e04:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e08:	4b88      	ldr	r3, [pc, #544]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e0c:	f003 0302 	and.w	r3, r3, #2
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d1ea      	bne.n	8004dea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0304 	and.w	r3, r3, #4
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	f000 8097 	beq.w	8004f50 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004e22:	2300      	movs	r3, #0
 8004e24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e26:	4b81      	ldr	r3, [pc, #516]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d10f      	bne.n	8004e52 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e32:	2300      	movs	r3, #0
 8004e34:	60bb      	str	r3, [r7, #8]
 8004e36:	4b7d      	ldr	r3, [pc, #500]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3a:	4a7c      	ldr	r2, [pc, #496]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e40:	6413      	str	r3, [r2, #64]	; 0x40
 8004e42:	4b7a      	ldr	r3, [pc, #488]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e4a:	60bb      	str	r3, [r7, #8]
 8004e4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e52:	4b77      	ldr	r3, [pc, #476]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d118      	bne.n	8004e90 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e5e:	4b74      	ldr	r3, [pc, #464]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a73      	ldr	r2, [pc, #460]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e6a:	f7fe fc61 	bl	8003730 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e72:	f7fe fc5d 	bl	8003730 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e10c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e84:	4b6a      	ldr	r3, [pc, #424]	; (8005030 <HAL_RCC_OscConfig+0x474>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b01      	cmp	r3, #1
 8004e96:	d106      	bne.n	8004ea6 <HAL_RCC_OscConfig+0x2ea>
 8004e98:	4b64      	ldr	r3, [pc, #400]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9c:	4a63      	ldr	r2, [pc, #396]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004e9e:	f043 0301 	orr.w	r3, r3, #1
 8004ea2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ea4:	e01c      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	689b      	ldr	r3, [r3, #8]
 8004eaa:	2b05      	cmp	r3, #5
 8004eac:	d10c      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x30c>
 8004eae:	4b5f      	ldr	r3, [pc, #380]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eb2:	4a5e      	ldr	r2, [pc, #376]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eb4:	f043 0304 	orr.w	r3, r3, #4
 8004eb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004eba:	4b5c      	ldr	r3, [pc, #368]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ebe:	4a5b      	ldr	r2, [pc, #364]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8004ec6:	e00b      	b.n	8004ee0 <HAL_RCC_OscConfig+0x324>
 8004ec8:	4b58      	ldr	r3, [pc, #352]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ecc:	4a57      	ldr	r2, [pc, #348]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ece:	f023 0301 	bic.w	r3, r3, #1
 8004ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8004ed4:	4b55      	ldr	r3, [pc, #340]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004ed6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ed8:	4a54      	ldr	r2, [pc, #336]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004eda:	f023 0304 	bic.w	r3, r3, #4
 8004ede:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d015      	beq.n	8004f14 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ee8:	f7fe fc22 	bl	8003730 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eee:	e00a      	b.n	8004f06 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ef0:	f7fe fc1e 	bl	8003730 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e0cb      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f06:	4b49      	ldr	r3, [pc, #292]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0ee      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x334>
 8004f12:	e014      	b.n	8004f3e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f14:	f7fe fc0c 	bl	8003730 <HAL_GetTick>
 8004f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f1a:	e00a      	b.n	8004f32 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f1c:	f7fe fc08 	bl	8003730 <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d901      	bls.n	8004f32 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004f2e:	2303      	movs	r3, #3
 8004f30:	e0b5      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f32:	4b3e      	ldr	r3, [pc, #248]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f36:	f003 0302 	and.w	r3, r3, #2
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d1ee      	bne.n	8004f1c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f3e:	7dfb      	ldrb	r3, [r7, #23]
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d105      	bne.n	8004f50 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f44:	4b39      	ldr	r3, [pc, #228]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f48:	4a38      	ldr	r2, [pc, #224]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f4a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f4e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	699b      	ldr	r3, [r3, #24]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 80a1 	beq.w	800509c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f5a:	4b34      	ldr	r3, [pc, #208]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f003 030c 	and.w	r3, r3, #12
 8004f62:	2b08      	cmp	r3, #8
 8004f64:	d05c      	beq.n	8005020 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	699b      	ldr	r3, [r3, #24]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d141      	bne.n	8004ff2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f6e:	4b31      	ldr	r3, [pc, #196]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004f70:	2200      	movs	r2, #0
 8004f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f74:	f7fe fbdc 	bl	8003730 <HAL_GetTick>
 8004f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f7a:	e008      	b.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f7c:	f7fe fbd8 	bl	8003730 <HAL_GetTick>
 8004f80:	4602      	mov	r2, r0
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	1ad3      	subs	r3, r2, r3
 8004f86:	2b02      	cmp	r3, #2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e087      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f8e:	4b27      	ldr	r3, [pc, #156]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1f0      	bne.n	8004f7c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	69da      	ldr	r2, [r3, #28]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a1b      	ldr	r3, [r3, #32]
 8004fa2:	431a      	orrs	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	019b      	lsls	r3, r3, #6
 8004faa:	431a      	orrs	r2, r3
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fb0:	085b      	lsrs	r3, r3, #1
 8004fb2:	3b01      	subs	r3, #1
 8004fb4:	041b      	lsls	r3, r3, #16
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fbc:	061b      	lsls	r3, r3, #24
 8004fbe:	491b      	ldr	r1, [pc, #108]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004fc0:	4313      	orrs	r3, r2
 8004fc2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fca:	f7fe fbb1 	bl	8003730 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004fd2:	f7fe fbad 	bl	8003730 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e05c      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fe4:	4b11      	ldr	r3, [pc, #68]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0x416>
 8004ff0:	e054      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <HAL_RCC_OscConfig+0x478>)
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ff8:	f7fe fb9a 	bl	8003730 <HAL_GetTick>
 8004ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ffe:	e008      	b.n	8005012 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005000:	f7fe fb96 	bl	8003730 <HAL_GetTick>
 8005004:	4602      	mov	r2, r0
 8005006:	693b      	ldr	r3, [r7, #16]
 8005008:	1ad3      	subs	r3, r2, r3
 800500a:	2b02      	cmp	r3, #2
 800500c:	d901      	bls.n	8005012 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800500e:	2303      	movs	r3, #3
 8005010:	e045      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	4b06      	ldr	r3, [pc, #24]	; (800502c <HAL_RCC_OscConfig+0x470>)
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1f0      	bne.n	8005000 <HAL_RCC_OscConfig+0x444>
 800501e:	e03d      	b.n	800509c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	699b      	ldr	r3, [r3, #24]
 8005024:	2b01      	cmp	r3, #1
 8005026:	d107      	bne.n	8005038 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005028:	2301      	movs	r3, #1
 800502a:	e038      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
 800502c:	40023800 	.word	0x40023800
 8005030:	40007000 	.word	0x40007000
 8005034:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005038:	4b1b      	ldr	r3, [pc, #108]	; (80050a8 <HAL_RCC_OscConfig+0x4ec>)
 800503a:	685b      	ldr	r3, [r3, #4]
 800503c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	2b01      	cmp	r3, #1
 8005044:	d028      	beq.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d121      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800505e:	429a      	cmp	r2, r3
 8005060:	d11a      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005062:	68fa      	ldr	r2, [r7, #12]
 8005064:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005068:	4013      	ands	r3, r2
 800506a:	687a      	ldr	r2, [r7, #4]
 800506c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800506e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005070:	4293      	cmp	r3, r2
 8005072:	d111      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507e:	085b      	lsrs	r3, r3, #1
 8005080:	3b01      	subs	r3, #1
 8005082:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005084:	429a      	cmp	r2, r3
 8005086:	d107      	bne.n	8005098 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005092:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005094:	429a      	cmp	r2, r3
 8005096:	d001      	beq.n	800509c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40023800 	.word	0x40023800

080050ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
 80050b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d101      	bne.n	80050c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80050bc:	2301      	movs	r3, #1
 80050be:	e0cc      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050c0:	4b68      	ldr	r3, [pc, #416]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0307 	and.w	r3, r3, #7
 80050c8:	683a      	ldr	r2, [r7, #0]
 80050ca:	429a      	cmp	r2, r3
 80050cc:	d90c      	bls.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ce:	4b65      	ldr	r3, [pc, #404]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d0:	683a      	ldr	r2, [r7, #0]
 80050d2:	b2d2      	uxtb	r2, r2
 80050d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050d6:	4b63      	ldr	r3, [pc, #396]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f003 0307 	and.w	r3, r3, #7
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d001      	beq.n	80050e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050e4:	2301      	movs	r3, #1
 80050e6:	e0b8      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f003 0302 	and.w	r3, r3, #2
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d020      	beq.n	8005136 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f003 0304 	and.w	r3, r3, #4
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d005      	beq.n	800510c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005100:	4b59      	ldr	r3, [pc, #356]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005102:	689b      	ldr	r3, [r3, #8]
 8005104:	4a58      	ldr	r2, [pc, #352]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005106:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800510a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 0308 	and.w	r3, r3, #8
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4b53      	ldr	r3, [pc, #332]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	4a52      	ldr	r2, [pc, #328]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800511e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005122:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005124:	4b50      	ldr	r3, [pc, #320]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005126:	689b      	ldr	r3, [r3, #8]
 8005128:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	494d      	ldr	r1, [pc, #308]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005132:	4313      	orrs	r3, r2
 8005134:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0301 	and.w	r3, r3, #1
 800513e:	2b00      	cmp	r3, #0
 8005140:	d044      	beq.n	80051cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d107      	bne.n	800515a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b47      	ldr	r3, [pc, #284]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d119      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e07f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	2b02      	cmp	r3, #2
 8005160:	d003      	beq.n	800516a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005166:	2b03      	cmp	r3, #3
 8005168:	d107      	bne.n	800517a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800516a:	4b3f      	ldr	r3, [pc, #252]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005172:	2b00      	cmp	r3, #0
 8005174:	d109      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	e06f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800517a:	4b3b      	ldr	r3, [pc, #236]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0302 	and.w	r3, r3, #2
 8005182:	2b00      	cmp	r3, #0
 8005184:	d101      	bne.n	800518a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005186:	2301      	movs	r3, #1
 8005188:	e067      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800518a:	4b37      	ldr	r3, [pc, #220]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800518c:	689b      	ldr	r3, [r3, #8]
 800518e:	f023 0203 	bic.w	r2, r3, #3
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	4934      	ldr	r1, [pc, #208]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005198:	4313      	orrs	r3, r2
 800519a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800519c:	f7fe fac8 	bl	8003730 <HAL_GetTick>
 80051a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051a2:	e00a      	b.n	80051ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80051a4:	f7fe fac4 	bl	8003730 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b2:	4293      	cmp	r3, r2
 80051b4:	d901      	bls.n	80051ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80051b6:	2303      	movs	r3, #3
 80051b8:	e04f      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80051ba:	4b2b      	ldr	r3, [pc, #172]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 80051bc:	689b      	ldr	r3, [r3, #8]
 80051be:	f003 020c 	and.w	r2, r3, #12
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	685b      	ldr	r3, [r3, #4]
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d1eb      	bne.n	80051a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80051cc:	4b25      	ldr	r3, [pc, #148]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 0307 	and.w	r3, r3, #7
 80051d4:	683a      	ldr	r2, [r7, #0]
 80051d6:	429a      	cmp	r2, r3
 80051d8:	d20c      	bcs.n	80051f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051da:	4b22      	ldr	r3, [pc, #136]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051dc:	683a      	ldr	r2, [r7, #0]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80051e2:	4b20      	ldr	r3, [pc, #128]	; (8005264 <HAL_RCC_ClockConfig+0x1b8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0307 	and.w	r3, r3, #7
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d001      	beq.n	80051f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051f0:	2301      	movs	r3, #1
 80051f2:	e032      	b.n	800525a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f003 0304 	and.w	r3, r3, #4
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d008      	beq.n	8005212 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005200:	4b19      	ldr	r3, [pc, #100]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	4916      	ldr	r1, [pc, #88]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800520e:	4313      	orrs	r3, r2
 8005210:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0308 	and.w	r3, r3, #8
 800521a:	2b00      	cmp	r3, #0
 800521c:	d009      	beq.n	8005232 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800521e:	4b12      	ldr	r3, [pc, #72]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	00db      	lsls	r3, r3, #3
 800522c:	490e      	ldr	r1, [pc, #56]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800522e:	4313      	orrs	r3, r2
 8005230:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005232:	f000 f821 	bl	8005278 <HAL_RCC_GetSysClockFreq>
 8005236:	4602      	mov	r2, r0
 8005238:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	091b      	lsrs	r3, r3, #4
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	490a      	ldr	r1, [pc, #40]	; (800526c <HAL_RCC_ClockConfig+0x1c0>)
 8005244:	5ccb      	ldrb	r3, [r1, r3]
 8005246:	fa22 f303 	lsr.w	r3, r2, r3
 800524a:	4a09      	ldr	r2, [pc, #36]	; (8005270 <HAL_RCC_ClockConfig+0x1c4>)
 800524c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800524e:	4b09      	ldr	r3, [pc, #36]	; (8005274 <HAL_RCC_ClockConfig+0x1c8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	4618      	mov	r0, r3
 8005254:	f7fe fa28 	bl	80036a8 <HAL_InitTick>

  return HAL_OK;
 8005258:	2300      	movs	r3, #0
}
 800525a:	4618      	mov	r0, r3
 800525c:	3710      	adds	r7, #16
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	40023c00 	.word	0x40023c00
 8005268:	40023800 	.word	0x40023800
 800526c:	08006f70 	.word	0x08006f70
 8005270:	20000010 	.word	0x20000010
 8005274:	20000014 	.word	0x20000014

08005278 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005278:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800527c:	b094      	sub	sp, #80	; 0x50
 800527e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005280:	2300      	movs	r3, #0
 8005282:	647b      	str	r3, [r7, #68]	; 0x44
 8005284:	2300      	movs	r3, #0
 8005286:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005288:	2300      	movs	r3, #0
 800528a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800528c:	2300      	movs	r3, #0
 800528e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005290:	4b79      	ldr	r3, [pc, #484]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005292:	689b      	ldr	r3, [r3, #8]
 8005294:	f003 030c 	and.w	r3, r3, #12
 8005298:	2b08      	cmp	r3, #8
 800529a:	d00d      	beq.n	80052b8 <HAL_RCC_GetSysClockFreq+0x40>
 800529c:	2b08      	cmp	r3, #8
 800529e:	f200 80e1 	bhi.w	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d002      	beq.n	80052ac <HAL_RCC_GetSysClockFreq+0x34>
 80052a6:	2b04      	cmp	r3, #4
 80052a8:	d003      	beq.n	80052b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80052aa:	e0db      	b.n	8005464 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80052ac:	4b73      	ldr	r3, [pc, #460]	; (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 80052ae:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80052b0:	e0db      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80052b2:	4b73      	ldr	r3, [pc, #460]	; (8005480 <HAL_RCC_GetSysClockFreq+0x208>)
 80052b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80052b6:	e0d8      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80052b8:	4b6f      	ldr	r3, [pc, #444]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80052c0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80052c2:	4b6d      	ldr	r3, [pc, #436]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052c4:	685b      	ldr	r3, [r3, #4]
 80052c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d063      	beq.n	8005396 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ce:	4b6a      	ldr	r3, [pc, #424]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	099b      	lsrs	r3, r3, #6
 80052d4:	2200      	movs	r2, #0
 80052d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052d8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80052da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052e0:	633b      	str	r3, [r7, #48]	; 0x30
 80052e2:	2300      	movs	r3, #0
 80052e4:	637b      	str	r3, [r7, #52]	; 0x34
 80052e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80052ea:	4622      	mov	r2, r4
 80052ec:	462b      	mov	r3, r5
 80052ee:	f04f 0000 	mov.w	r0, #0
 80052f2:	f04f 0100 	mov.w	r1, #0
 80052f6:	0159      	lsls	r1, r3, #5
 80052f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80052fc:	0150      	lsls	r0, r2, #5
 80052fe:	4602      	mov	r2, r0
 8005300:	460b      	mov	r3, r1
 8005302:	4621      	mov	r1, r4
 8005304:	1a51      	subs	r1, r2, r1
 8005306:	6139      	str	r1, [r7, #16]
 8005308:	4629      	mov	r1, r5
 800530a:	eb63 0301 	sbc.w	r3, r3, r1
 800530e:	617b      	str	r3, [r7, #20]
 8005310:	f04f 0200 	mov.w	r2, #0
 8005314:	f04f 0300 	mov.w	r3, #0
 8005318:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800531c:	4659      	mov	r1, fp
 800531e:	018b      	lsls	r3, r1, #6
 8005320:	4651      	mov	r1, sl
 8005322:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005326:	4651      	mov	r1, sl
 8005328:	018a      	lsls	r2, r1, #6
 800532a:	4651      	mov	r1, sl
 800532c:	ebb2 0801 	subs.w	r8, r2, r1
 8005330:	4659      	mov	r1, fp
 8005332:	eb63 0901 	sbc.w	r9, r3, r1
 8005336:	f04f 0200 	mov.w	r2, #0
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005342:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005346:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800534a:	4690      	mov	r8, r2
 800534c:	4699      	mov	r9, r3
 800534e:	4623      	mov	r3, r4
 8005350:	eb18 0303 	adds.w	r3, r8, r3
 8005354:	60bb      	str	r3, [r7, #8]
 8005356:	462b      	mov	r3, r5
 8005358:	eb49 0303 	adc.w	r3, r9, r3
 800535c:	60fb      	str	r3, [r7, #12]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800536a:	4629      	mov	r1, r5
 800536c:	024b      	lsls	r3, r1, #9
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005374:	4621      	mov	r1, r4
 8005376:	024a      	lsls	r2, r1, #9
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537e:	2200      	movs	r2, #0
 8005380:	62bb      	str	r3, [r7, #40]	; 0x28
 8005382:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005384:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005388:	f7fb fd18 	bl	8000dbc <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005394:	e058      	b.n	8005448 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005396:	4b38      	ldr	r3, [pc, #224]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 8005398:	685b      	ldr	r3, [r3, #4]
 800539a:	099b      	lsrs	r3, r3, #6
 800539c:	2200      	movs	r2, #0
 800539e:	4618      	mov	r0, r3
 80053a0:	4611      	mov	r1, r2
 80053a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80053a6:	623b      	str	r3, [r7, #32]
 80053a8:	2300      	movs	r3, #0
 80053aa:	627b      	str	r3, [r7, #36]	; 0x24
 80053ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	f04f 0000 	mov.w	r0, #0
 80053b8:	f04f 0100 	mov.w	r1, #0
 80053bc:	0159      	lsls	r1, r3, #5
 80053be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80053c2:	0150      	lsls	r0, r2, #5
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4641      	mov	r1, r8
 80053ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80053ce:	4649      	mov	r1, r9
 80053d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80053d4:	f04f 0200 	mov.w	r2, #0
 80053d8:	f04f 0300 	mov.w	r3, #0
 80053dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80053e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80053e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80053e8:	ebb2 040a 	subs.w	r4, r2, sl
 80053ec:	eb63 050b 	sbc.w	r5, r3, fp
 80053f0:	f04f 0200 	mov.w	r2, #0
 80053f4:	f04f 0300 	mov.w	r3, #0
 80053f8:	00eb      	lsls	r3, r5, #3
 80053fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80053fe:	00e2      	lsls	r2, r4, #3
 8005400:	4614      	mov	r4, r2
 8005402:	461d      	mov	r5, r3
 8005404:	4643      	mov	r3, r8
 8005406:	18e3      	adds	r3, r4, r3
 8005408:	603b      	str	r3, [r7, #0]
 800540a:	464b      	mov	r3, r9
 800540c:	eb45 0303 	adc.w	r3, r5, r3
 8005410:	607b      	str	r3, [r7, #4]
 8005412:	f04f 0200 	mov.w	r2, #0
 8005416:	f04f 0300 	mov.w	r3, #0
 800541a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800541e:	4629      	mov	r1, r5
 8005420:	028b      	lsls	r3, r1, #10
 8005422:	4621      	mov	r1, r4
 8005424:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005428:	4621      	mov	r1, r4
 800542a:	028a      	lsls	r2, r1, #10
 800542c:	4610      	mov	r0, r2
 800542e:	4619      	mov	r1, r3
 8005430:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005432:	2200      	movs	r2, #0
 8005434:	61bb      	str	r3, [r7, #24]
 8005436:	61fa      	str	r2, [r7, #28]
 8005438:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800543c:	f7fb fcbe 	bl	8000dbc <__aeabi_uldivmod>
 8005440:	4602      	mov	r2, r0
 8005442:	460b      	mov	r3, r1
 8005444:	4613      	mov	r3, r2
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005448:	4b0b      	ldr	r3, [pc, #44]	; (8005478 <HAL_RCC_GetSysClockFreq+0x200>)
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	0c1b      	lsrs	r3, r3, #16
 800544e:	f003 0303 	and.w	r3, r3, #3
 8005452:	3301      	adds	r3, #1
 8005454:	005b      	lsls	r3, r3, #1
 8005456:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005458:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800545a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005462:	e002      	b.n	800546a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005464:	4b05      	ldr	r3, [pc, #20]	; (800547c <HAL_RCC_GetSysClockFreq+0x204>)
 8005466:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005468:	bf00      	nop
    }
  }
  return sysclockfreq;
 800546a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800546c:	4618      	mov	r0, r3
 800546e:	3750      	adds	r7, #80	; 0x50
 8005470:	46bd      	mov	sp, r7
 8005472:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005476:	bf00      	nop
 8005478:	40023800 	.word	0x40023800
 800547c:	00f42400 	.word	0x00f42400
 8005480:	007a1200 	.word	0x007a1200

08005484 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005484:	b480      	push	{r7}
 8005486:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005488:	4b03      	ldr	r3, [pc, #12]	; (8005498 <HAL_RCC_GetHCLKFreq+0x14>)
 800548a:	681b      	ldr	r3, [r3, #0]
}
 800548c:	4618      	mov	r0, r3
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	20000010 	.word	0x20000010

0800549c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80054a0:	f7ff fff0 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054a4:	4602      	mov	r2, r0
 80054a6:	4b05      	ldr	r3, [pc, #20]	; (80054bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	0a9b      	lsrs	r3, r3, #10
 80054ac:	f003 0307 	and.w	r3, r3, #7
 80054b0:	4903      	ldr	r1, [pc, #12]	; (80054c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80054b2:	5ccb      	ldrb	r3, [r1, r3]
 80054b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	bd80      	pop	{r7, pc}
 80054bc:	40023800 	.word	0x40023800
 80054c0:	08006f80 	.word	0x08006f80

080054c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80054c8:	f7ff ffdc 	bl	8005484 <HAL_RCC_GetHCLKFreq>
 80054cc:	4602      	mov	r2, r0
 80054ce:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	0b5b      	lsrs	r3, r3, #13
 80054d4:	f003 0307 	and.w	r3, r3, #7
 80054d8:	4903      	ldr	r1, [pc, #12]	; (80054e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80054da:	5ccb      	ldrb	r3, [r1, r3]
 80054dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	bd80      	pop	{r7, pc}
 80054e4:	40023800 	.word	0x40023800
 80054e8:	08006f80 	.word	0x08006f80

080054ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e041      	b.n	8005582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005504:	b2db      	uxtb	r3, r3
 8005506:	2b00      	cmp	r3, #0
 8005508:	d106      	bne.n	8005518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7fd ff82 	bl	800341c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2202      	movs	r2, #2
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681a      	ldr	r2, [r3, #0]
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	3304      	adds	r3, #4
 8005528:	4619      	mov	r1, r3
 800552a:	4610      	mov	r0, r2
 800552c:	f000 fd80 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2201      	movs	r2, #1
 8005534:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2201      	movs	r2, #1
 8005544:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2201      	movs	r2, #1
 800554c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2201      	movs	r2, #1
 800555c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2201      	movs	r2, #1
 800556c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2201      	movs	r2, #1
 800557c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800558c:	b480      	push	{r7}
 800558e:	b085      	sub	sp, #20
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800559a:	b2db      	uxtb	r3, r3
 800559c:	2b01      	cmp	r3, #1
 800559e:	d001      	beq.n	80055a4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e03c      	b.n	800561e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a1e      	ldr	r2, [pc, #120]	; (800562c <HAL_TIM_Base_Start+0xa0>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d018      	beq.n	80055e8 <HAL_TIM_Base_Start+0x5c>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055be:	d013      	beq.n	80055e8 <HAL_TIM_Base_Start+0x5c>
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_TIM_Base_Start+0xa4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d00e      	beq.n	80055e8 <HAL_TIM_Base_Start+0x5c>
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	4a19      	ldr	r2, [pc, #100]	; (8005634 <HAL_TIM_Base_Start+0xa8>)
 80055d0:	4293      	cmp	r3, r2
 80055d2:	d009      	beq.n	80055e8 <HAL_TIM_Base_Start+0x5c>
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4a17      	ldr	r2, [pc, #92]	; (8005638 <HAL_TIM_Base_Start+0xac>)
 80055da:	4293      	cmp	r3, r2
 80055dc:	d004      	beq.n	80055e8 <HAL_TIM_Base_Start+0x5c>
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4a16      	ldr	r2, [pc, #88]	; (800563c <HAL_TIM_Base_Start+0xb0>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d111      	bne.n	800560c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	689b      	ldr	r3, [r3, #8]
 80055ee:	f003 0307 	and.w	r3, r3, #7
 80055f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2b06      	cmp	r3, #6
 80055f8:	d010      	beq.n	800561c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f042 0201 	orr.w	r2, r2, #1
 8005608:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800560a:	e007      	b.n	800561c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	681a      	ldr	r2, [r3, #0]
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f042 0201 	orr.w	r2, r2, #1
 800561a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800561c:	2300      	movs	r3, #0
}
 800561e:	4618      	mov	r0, r3
 8005620:	3714      	adds	r7, #20
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	40010000 	.word	0x40010000
 8005630:	40000400 	.word	0x40000400
 8005634:	40000800 	.word	0x40000800
 8005638:	40000c00 	.word	0x40000c00
 800563c:	40014000 	.word	0x40014000

08005640 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2b00      	cmp	r3, #0
 800564c:	d101      	bne.n	8005652 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e041      	b.n	80056d6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	d106      	bne.n	800566c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005666:	6878      	ldr	r0, [r7, #4]
 8005668:	f7fd fe6e 	bl	8003348 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2202      	movs	r2, #2
 8005670:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	3304      	adds	r3, #4
 800567c:	4619      	mov	r1, r3
 800567e:	4610      	mov	r0, r2
 8005680:	f000 fcd6 	bl	8006030 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2201      	movs	r2, #1
 8005688:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2201      	movs	r2, #1
 8005690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2201      	movs	r2, #1
 8005698:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2201      	movs	r2, #1
 80056a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2201      	movs	r2, #1
 80056a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056d4:	2300      	movs	r3, #0
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3708      	adds	r7, #8
 80056da:	46bd      	mov	sp, r7
 80056dc:	bd80      	pop	{r7, pc}
	...

080056e0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80056e0:	b580      	push	{r7, lr}
 80056e2:	b084      	sub	sp, #16
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
 80056e8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d109      	bne.n	8005704 <HAL_TIM_PWM_Start+0x24>
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80056f6:	b2db      	uxtb	r3, r3
 80056f8:	2b01      	cmp	r3, #1
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	e022      	b.n	800574a <HAL_TIM_PWM_Start+0x6a>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b04      	cmp	r3, #4
 8005708:	d109      	bne.n	800571e <HAL_TIM_PWM_Start+0x3e>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b01      	cmp	r3, #1
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	e015      	b.n	800574a <HAL_TIM_PWM_Start+0x6a>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2b08      	cmp	r3, #8
 8005722:	d109      	bne.n	8005738 <HAL_TIM_PWM_Start+0x58>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800572a:	b2db      	uxtb	r3, r3
 800572c:	2b01      	cmp	r3, #1
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	e008      	b.n	800574a <HAL_TIM_PWM_Start+0x6a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573e:	b2db      	uxtb	r3, r3
 8005740:	2b01      	cmp	r3, #1
 8005742:	bf14      	ite	ne
 8005744:	2301      	movne	r3, #1
 8005746:	2300      	moveq	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d001      	beq.n	8005752 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800574e:	2301      	movs	r3, #1
 8005750:	e068      	b.n	8005824 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d104      	bne.n	8005762 <HAL_TIM_PWM_Start+0x82>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2202      	movs	r2, #2
 800575c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005760:	e013      	b.n	800578a <HAL_TIM_PWM_Start+0xaa>
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d104      	bne.n	8005772 <HAL_TIM_PWM_Start+0x92>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2202      	movs	r2, #2
 800576c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005770:	e00b      	b.n	800578a <HAL_TIM_PWM_Start+0xaa>
 8005772:	683b      	ldr	r3, [r7, #0]
 8005774:	2b08      	cmp	r3, #8
 8005776:	d104      	bne.n	8005782 <HAL_TIM_PWM_Start+0xa2>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005780:	e003      	b.n	800578a <HAL_TIM_PWM_Start+0xaa>
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2202      	movs	r2, #2
 8005786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	2201      	movs	r2, #1
 8005790:	6839      	ldr	r1, [r7, #0]
 8005792:	4618      	mov	r0, r3
 8005794:	f000 fef2 	bl	800657c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4a23      	ldr	r2, [pc, #140]	; (800582c <HAL_TIM_PWM_Start+0x14c>)
 800579e:	4293      	cmp	r3, r2
 80057a0:	d107      	bne.n	80057b2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057b0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	4a1d      	ldr	r2, [pc, #116]	; (800582c <HAL_TIM_PWM_Start+0x14c>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d018      	beq.n	80057ee <HAL_TIM_PWM_Start+0x10e>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057c4:	d013      	beq.n	80057ee <HAL_TIM_PWM_Start+0x10e>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a19      	ldr	r2, [pc, #100]	; (8005830 <HAL_TIM_PWM_Start+0x150>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d00e      	beq.n	80057ee <HAL_TIM_PWM_Start+0x10e>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4a17      	ldr	r2, [pc, #92]	; (8005834 <HAL_TIM_PWM_Start+0x154>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d009      	beq.n	80057ee <HAL_TIM_PWM_Start+0x10e>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a16      	ldr	r2, [pc, #88]	; (8005838 <HAL_TIM_PWM_Start+0x158>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d004      	beq.n	80057ee <HAL_TIM_PWM_Start+0x10e>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a14      	ldr	r2, [pc, #80]	; (800583c <HAL_TIM_PWM_Start+0x15c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d111      	bne.n	8005812 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 0307 	and.w	r3, r3, #7
 80057f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	2b06      	cmp	r3, #6
 80057fe:	d010      	beq.n	8005822 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f042 0201 	orr.w	r2, r2, #1
 800580e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005810:	e007      	b.n	8005822 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f042 0201 	orr.w	r2, r2, #1
 8005820:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40010000 	.word	0x40010000
 8005830:	40000400 	.word	0x40000400
 8005834:	40000800 	.word	0x40000800
 8005838:	40000c00 	.word	0x40000c00
 800583c:	40014000 	.word	0x40014000

08005840 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
 8005848:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d101      	bne.n	8005854 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005850:	2301      	movs	r3, #1
 8005852:	e097      	b.n	8005984 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800585a:	b2db      	uxtb	r3, r3
 800585c:	2b00      	cmp	r3, #0
 800585e:	d106      	bne.n	800586e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005868:	6878      	ldr	r0, [r7, #4]
 800586a:	f7fd fd8f 	bl	800338c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2202      	movs	r2, #2
 8005872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	689b      	ldr	r3, [r3, #8]
 800587c:	687a      	ldr	r2, [r7, #4]
 800587e:	6812      	ldr	r2, [r2, #0]
 8005880:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005884:	f023 0307 	bic.w	r3, r3, #7
 8005888:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	3304      	adds	r3, #4
 8005892:	4619      	mov	r1, r3
 8005894:	4610      	mov	r0, r2
 8005896:	f000 fbcb 	bl	8006030 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	699b      	ldr	r3, [r3, #24]
 80058a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	4313      	orrs	r3, r2
 80058ba:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	f023 0303 	bic.w	r3, r3, #3
 80058c6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	021b      	lsls	r3, r3, #8
 80058d2:	4313      	orrs	r3, r2
 80058d4:	693a      	ldr	r2, [r7, #16]
 80058d6:	4313      	orrs	r3, r2
 80058d8:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058e0:	f023 030c 	bic.w	r3, r3, #12
 80058e4:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80058ec:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80058f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	68da      	ldr	r2, [r3, #12]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	4313      	orrs	r3, r2
 80058fe:	693a      	ldr	r2, [r7, #16]
 8005900:	4313      	orrs	r3, r2
 8005902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	011a      	lsls	r2, r3, #4
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	6a1b      	ldr	r3, [r3, #32]
 800590e:	031b      	lsls	r3, r3, #12
 8005910:	4313      	orrs	r3, r2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800591e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005926:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005928:	683b      	ldr	r3, [r7, #0]
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	695b      	ldr	r3, [r3, #20]
 8005930:	011b      	lsls	r3, r3, #4
 8005932:	4313      	orrs	r3, r2
 8005934:	68fa      	ldr	r2, [r7, #12]
 8005936:	4313      	orrs	r3, r2
 8005938:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	697a      	ldr	r2, [r7, #20]
 8005940:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	2201      	movs	r2, #1
 8005956:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2201      	movs	r2, #1
 800595e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2201      	movs	r2, #1
 8005966:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2201      	movs	r2, #1
 800596e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	2201      	movs	r2, #1
 8005976:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005982:	2300      	movs	r3, #0
}
 8005984:	4618      	mov	r0, r3
 8005986:	3718      	adds	r7, #24
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800599c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80059a4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80059ac:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80059b4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d110      	bne.n	80059de <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80059bc:	7bfb      	ldrb	r3, [r7, #15]
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d102      	bne.n	80059c8 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80059c2:	7b7b      	ldrb	r3, [r7, #13]
 80059c4:	2b01      	cmp	r3, #1
 80059c6:	d001      	beq.n	80059cc <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80059c8:	2301      	movs	r3, #1
 80059ca:	e069      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2202      	movs	r2, #2
 80059d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059dc:	e031      	b.n	8005a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	2b04      	cmp	r3, #4
 80059e2:	d110      	bne.n	8005a06 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80059e4:	7bbb      	ldrb	r3, [r7, #14]
 80059e6:	2b01      	cmp	r3, #1
 80059e8:	d102      	bne.n	80059f0 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80059ea:	7b3b      	ldrb	r3, [r7, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d001      	beq.n	80059f4 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e055      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2202      	movs	r2, #2
 8005a00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a04:	e01d      	b.n	8005a42 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a06:	7bfb      	ldrb	r3, [r7, #15]
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d108      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	2b01      	cmp	r3, #1
 8005a10:	d105      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005a12:	7b7b      	ldrb	r3, [r7, #13]
 8005a14:	2b01      	cmp	r3, #1
 8005a16:	d102      	bne.n	8005a1e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005a18:	7b3b      	ldrb	r3, [r7, #12]
 8005a1a:	2b01      	cmp	r3, #1
 8005a1c:	d001      	beq.n	8005a22 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e03e      	b.n	8005aa0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2202      	movs	r2, #2
 8005a26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2202      	movs	r2, #2
 8005a2e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2202      	movs	r2, #2
 8005a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2202      	movs	r2, #2
 8005a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <HAL_TIM_Encoder_Start+0xc4>
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	2b04      	cmp	r3, #4
 8005a4c:	d008      	beq.n	8005a60 <HAL_TIM_Encoder_Start+0xd4>
 8005a4e:	e00f      	b.n	8005a70 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	2201      	movs	r2, #1
 8005a56:	2100      	movs	r1, #0
 8005a58:	4618      	mov	r0, r3
 8005a5a:	f000 fd8f 	bl	800657c <TIM_CCxChannelCmd>
      break;
 8005a5e:	e016      	b.n	8005a8e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	2201      	movs	r2, #1
 8005a66:	2104      	movs	r1, #4
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f000 fd87 	bl	800657c <TIM_CCxChannelCmd>
      break;
 8005a6e:	e00e      	b.n	8005a8e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	2201      	movs	r2, #1
 8005a76:	2100      	movs	r1, #0
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fd7f 	bl	800657c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2201      	movs	r2, #1
 8005a84:	2104      	movs	r1, #4
 8005a86:	4618      	mov	r0, r3
 8005a88:	f000 fd78 	bl	800657c <TIM_CCxChannelCmd>
      break;
 8005a8c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	681a      	ldr	r2, [r3, #0]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f042 0201 	orr.w	r2, r2, #1
 8005a9c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b082      	sub	sp, #8
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691b      	ldr	r3, [r3, #16]
 8005ab6:	f003 0302 	and.w	r3, r3, #2
 8005aba:	2b02      	cmp	r3, #2
 8005abc:	d122      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d11b      	bne.n	8005b04 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f06f 0202 	mvn.w	r2, #2
 8005ad4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	699b      	ldr	r3, [r3, #24]
 8005ae2:	f003 0303 	and.w	r3, r3, #3
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d003      	beq.n	8005af2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa81 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005af0:	e005      	b.n	8005afe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f000 fa73 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fa84 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	f003 0304 	and.w	r3, r3, #4
 8005b0e:	2b04      	cmp	r3, #4
 8005b10:	d122      	bne.n	8005b58 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68db      	ldr	r3, [r3, #12]
 8005b18:	f003 0304 	and.w	r3, r3, #4
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d11b      	bne.n	8005b58 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f06f 0204 	mvn.w	r2, #4
 8005b28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d003      	beq.n	8005b46 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b3e:	6878      	ldr	r0, [r7, #4]
 8005b40:	f000 fa57 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005b44:	e005      	b.n	8005b52 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f000 fa49 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa5a 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2200      	movs	r2, #0
 8005b56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	691b      	ldr	r3, [r3, #16]
 8005b5e:	f003 0308 	and.w	r3, r3, #8
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d122      	bne.n	8005bac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68db      	ldr	r3, [r3, #12]
 8005b6c:	f003 0308 	and.w	r3, r3, #8
 8005b70:	2b08      	cmp	r3, #8
 8005b72:	d11b      	bne.n	8005bac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f06f 0208 	mvn.w	r2, #8
 8005b7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2204      	movs	r2, #4
 8005b82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	69db      	ldr	r3, [r3, #28]
 8005b8a:	f003 0303 	and.w	r3, r3, #3
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fa2d 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005b98:	e005      	b.n	8005ba6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fa1f 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fa30 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	691b      	ldr	r3, [r3, #16]
 8005bb2:	f003 0310 	and.w	r3, r3, #16
 8005bb6:	2b10      	cmp	r3, #16
 8005bb8:	d122      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f003 0310 	and.w	r3, r3, #16
 8005bc4:	2b10      	cmp	r3, #16
 8005bc6:	d11b      	bne.n	8005c00 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f06f 0210 	mvn.w	r2, #16
 8005bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2208      	movs	r2, #8
 8005bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	69db      	ldr	r3, [r3, #28]
 8005bde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d003      	beq.n	8005bee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 fa03 	bl	8005ff2 <HAL_TIM_IC_CaptureCallback>
 8005bec:	e005      	b.n	8005bfa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	f000 f9f5 	bl	8005fde <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005bf4:	6878      	ldr	r0, [r7, #4]
 8005bf6:	f000 fa06 	bl	8006006 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	691b      	ldr	r3, [r3, #16]
 8005c06:	f003 0301 	and.w	r3, r3, #1
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d10e      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	2b01      	cmp	r3, #1
 8005c1a:	d107      	bne.n	8005c2c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	f06f 0201 	mvn.w	r2, #1
 8005c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005c26:	6878      	ldr	r0, [r7, #4]
 8005c28:	f000 f9cf 	bl	8005fca <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	691b      	ldr	r3, [r3, #16]
 8005c32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c36:	2b80      	cmp	r3, #128	; 0x80
 8005c38:	d10e      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c44:	2b80      	cmp	r3, #128	; 0x80
 8005c46:	d107      	bne.n	8005c58 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005c52:	6878      	ldr	r0, [r7, #4]
 8005c54:	f000 fd82 	bl	800675c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c62:	2b40      	cmp	r3, #64	; 0x40
 8005c64:	d10e      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68db      	ldr	r3, [r3, #12]
 8005c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c70:	2b40      	cmp	r3, #64	; 0x40
 8005c72:	d107      	bne.n	8005c84 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005c7e:	6878      	ldr	r0, [r7, #4]
 8005c80:	f000 f9cb 	bl	800601a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	691b      	ldr	r3, [r3, #16]
 8005c8a:	f003 0320 	and.w	r3, r3, #32
 8005c8e:	2b20      	cmp	r3, #32
 8005c90:	d10e      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	68db      	ldr	r3, [r3, #12]
 8005c98:	f003 0320 	and.w	r3, r3, #32
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d107      	bne.n	8005cb0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f06f 0220 	mvn.w	r2, #32
 8005ca8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	f000 fd4c 	bl	8006748 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005cb0:	bf00      	nop
 8005cb2:	3708      	adds	r7, #8
 8005cb4:	46bd      	mov	sp, r7
 8005cb6:	bd80      	pop	{r7, pc}

08005cb8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b086      	sub	sp, #24
 8005cbc:	af00      	add	r7, sp, #0
 8005cbe:	60f8      	str	r0, [r7, #12]
 8005cc0:	60b9      	str	r1, [r7, #8]
 8005cc2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d101      	bne.n	8005cd6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005cd2:	2302      	movs	r3, #2
 8005cd4:	e0ae      	b.n	8005e34 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	2201      	movs	r2, #1
 8005cda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b0c      	cmp	r3, #12
 8005ce2:	f200 809f 	bhi.w	8005e24 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005ce6:	a201      	add	r2, pc, #4	; (adr r2, 8005cec <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005ce8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cec:	08005d21 	.word	0x08005d21
 8005cf0:	08005e25 	.word	0x08005e25
 8005cf4:	08005e25 	.word	0x08005e25
 8005cf8:	08005e25 	.word	0x08005e25
 8005cfc:	08005d61 	.word	0x08005d61
 8005d00:	08005e25 	.word	0x08005e25
 8005d04:	08005e25 	.word	0x08005e25
 8005d08:	08005e25 	.word	0x08005e25
 8005d0c:	08005da3 	.word	0x08005da3
 8005d10:	08005e25 	.word	0x08005e25
 8005d14:	08005e25 	.word	0x08005e25
 8005d18:	08005e25 	.word	0x08005e25
 8005d1c:	08005de3 	.word	0x08005de3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	68b9      	ldr	r1, [r7, #8]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fa02 	bl	8006130 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	699a      	ldr	r2, [r3, #24]
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f042 0208 	orr.w	r2, r2, #8
 8005d3a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699a      	ldr	r2, [r3, #24]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f022 0204 	bic.w	r2, r2, #4
 8005d4a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	6999      	ldr	r1, [r3, #24]
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	691a      	ldr	r2, [r3, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	619a      	str	r2, [r3, #24]
      break;
 8005d5e:	e064      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f000 fa48 	bl	80061fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	699a      	ldr	r2, [r3, #24]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d7a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	699a      	ldr	r2, [r3, #24]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6999      	ldr	r1, [r3, #24]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	691b      	ldr	r3, [r3, #16]
 8005d96:	021a      	lsls	r2, r3, #8
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	430a      	orrs	r2, r1
 8005d9e:	619a      	str	r2, [r3, #24]
      break;
 8005da0:	e043      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	68b9      	ldr	r1, [r7, #8]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f000 fa93 	bl	80062d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	69da      	ldr	r2, [r3, #28]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0208 	orr.w	r2, r2, #8
 8005dbc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	69da      	ldr	r2, [r3, #28]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f022 0204 	bic.w	r2, r2, #4
 8005dcc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	69d9      	ldr	r1, [r3, #28]
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	691a      	ldr	r2, [r3, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	430a      	orrs	r2, r1
 8005dde:	61da      	str	r2, [r3, #28]
      break;
 8005de0:	e023      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68b9      	ldr	r1, [r7, #8]
 8005de8:	4618      	mov	r0, r3
 8005dea:	f000 fadd 	bl	80063a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	69da      	ldr	r2, [r3, #28]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005dfc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	69da      	ldr	r2, [r3, #28]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e0c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	69d9      	ldr	r1, [r3, #28]
 8005e14:	68bb      	ldr	r3, [r7, #8]
 8005e16:	691b      	ldr	r3, [r3, #16]
 8005e18:	021a      	lsls	r2, r3, #8
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	430a      	orrs	r2, r1
 8005e20:	61da      	str	r2, [r3, #28]
      break;
 8005e22:	e002      	b.n	8005e2a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005e24:	2301      	movs	r3, #1
 8005e26:	75fb      	strb	r3, [r7, #23]
      break;
 8005e28:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005e32:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3718      	adds	r7, #24
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}

08005e3c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
 8005e44:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e46:	2300      	movs	r3, #0
 8005e48:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e50:	2b01      	cmp	r3, #1
 8005e52:	d101      	bne.n	8005e58 <HAL_TIM_ConfigClockSource+0x1c>
 8005e54:	2302      	movs	r3, #2
 8005e56:	e0b4      	b.n	8005fc2 <HAL_TIM_ConfigClockSource+0x186>
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689b      	ldr	r3, [r3, #8]
 8005e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005e76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e7e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e90:	d03e      	beq.n	8005f10 <HAL_TIM_ConfigClockSource+0xd4>
 8005e92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e96:	f200 8087 	bhi.w	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e9e:	f000 8086 	beq.w	8005fae <HAL_TIM_ConfigClockSource+0x172>
 8005ea2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ea6:	d87f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ea8:	2b70      	cmp	r3, #112	; 0x70
 8005eaa:	d01a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0xa6>
 8005eac:	2b70      	cmp	r3, #112	; 0x70
 8005eae:	d87b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb0:	2b60      	cmp	r3, #96	; 0x60
 8005eb2:	d050      	beq.n	8005f56 <HAL_TIM_ConfigClockSource+0x11a>
 8005eb4:	2b60      	cmp	r3, #96	; 0x60
 8005eb6:	d877      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005eb8:	2b50      	cmp	r3, #80	; 0x50
 8005eba:	d03c      	beq.n	8005f36 <HAL_TIM_ConfigClockSource+0xfa>
 8005ebc:	2b50      	cmp	r3, #80	; 0x50
 8005ebe:	d873      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	d058      	beq.n	8005f76 <HAL_TIM_ConfigClockSource+0x13a>
 8005ec4:	2b40      	cmp	r3, #64	; 0x40
 8005ec6:	d86f      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ec8:	2b30      	cmp	r3, #48	; 0x30
 8005eca:	d064      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ecc:	2b30      	cmp	r3, #48	; 0x30
 8005ece:	d86b      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed0:	2b20      	cmp	r3, #32
 8005ed2:	d060      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d867      	bhi.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d05c      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15a>
 8005edc:	2b10      	cmp	r3, #16
 8005ede:	d05a      	beq.n	8005f96 <HAL_TIM_ConfigClockSource+0x15a>
 8005ee0:	e062      	b.n	8005fa8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6818      	ldr	r0, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	6899      	ldr	r1, [r3, #8]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	685a      	ldr	r2, [r3, #4]
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	f000 fb23 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005f04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	609a      	str	r2, [r3, #8]
      break;
 8005f0e:	e04f      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	6899      	ldr	r1, [r3, #8]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	68db      	ldr	r3, [r3, #12]
 8005f20:	f000 fb0c 	bl	800653c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005f32:	609a      	str	r2, [r3, #8]
      break;
 8005f34:	e03c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	6818      	ldr	r0, [r3, #0]
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	6859      	ldr	r1, [r3, #4]
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	68db      	ldr	r3, [r3, #12]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f000 fa80 	bl	8006448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	2150      	movs	r1, #80	; 0x50
 8005f4e:	4618      	mov	r0, r3
 8005f50:	f000 fad9 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f54:	e02c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6818      	ldr	r0, [r3, #0]
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	68db      	ldr	r3, [r3, #12]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f000 fa9f 	bl	80064a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	2160      	movs	r1, #96	; 0x60
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f000 fac9 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f74:	e01c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6818      	ldr	r0, [r3, #0]
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	6859      	ldr	r1, [r3, #4]
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	68db      	ldr	r3, [r3, #12]
 8005f82:	461a      	mov	r2, r3
 8005f84:	f000 fa60 	bl	8006448 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	2140      	movs	r1, #64	; 0x40
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f000 fab9 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005f94:	e00c      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681a      	ldr	r2, [r3, #0]
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	4619      	mov	r1, r3
 8005fa0:	4610      	mov	r0, r2
 8005fa2:	f000 fab0 	bl	8006506 <TIM_ITRx_SetConfig>
      break;
 8005fa6:	e003      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005fa8:	2301      	movs	r3, #1
 8005faa:	73fb      	strb	r3, [r7, #15]
      break;
 8005fac:	e000      	b.n	8005fb0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005fae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc2:	4618      	mov	r0, r3
 8005fc4:	3710      	adds	r7, #16
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	bd80      	pop	{r7, pc}

08005fca <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	b083      	sub	sp, #12
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr

08005fde <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005fde:	b480      	push	{r7}
 8005fe0:	b083      	sub	sp, #12
 8005fe2:	af00      	add	r7, sp, #0
 8005fe4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005fe6:	bf00      	nop
 8005fe8:	370c      	adds	r7, #12
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr

08005ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ff2:	b480      	push	{r7}
 8005ff4:	b083      	sub	sp, #12
 8005ff6:	af00      	add	r7, sp, #0
 8005ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005ffa:	bf00      	nop
 8005ffc:	370c      	adds	r7, #12
 8005ffe:	46bd      	mov	sp, r7
 8006000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006004:	4770      	bx	lr

08006006 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006006:	b480      	push	{r7}
 8006008:	b083      	sub	sp, #12
 800600a:	af00      	add	r7, sp, #0
 800600c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800600e:	bf00      	nop
 8006010:	370c      	adds	r7, #12
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr

0800601a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800601a:	b480      	push	{r7}
 800601c:	b083      	sub	sp, #12
 800601e:	af00      	add	r7, sp, #0
 8006020:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006022:	bf00      	nop
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
	...

08006030 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
 8006038:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	4a34      	ldr	r2, [pc, #208]	; (8006114 <TIM_Base_SetConfig+0xe4>)
 8006044:	4293      	cmp	r3, r2
 8006046:	d00f      	beq.n	8006068 <TIM_Base_SetConfig+0x38>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604e:	d00b      	beq.n	8006068 <TIM_Base_SetConfig+0x38>
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	4a31      	ldr	r2, [pc, #196]	; (8006118 <TIM_Base_SetConfig+0xe8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d007      	beq.n	8006068 <TIM_Base_SetConfig+0x38>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	4a30      	ldr	r2, [pc, #192]	; (800611c <TIM_Base_SetConfig+0xec>)
 800605c:	4293      	cmp	r3, r2
 800605e:	d003      	beq.n	8006068 <TIM_Base_SetConfig+0x38>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	4a2f      	ldr	r2, [pc, #188]	; (8006120 <TIM_Base_SetConfig+0xf0>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800606e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a25      	ldr	r2, [pc, #148]	; (8006114 <TIM_Base_SetConfig+0xe4>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d01b      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006088:	d017      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	4a22      	ldr	r2, [pc, #136]	; (8006118 <TIM_Base_SetConfig+0xe8>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d013      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	4a21      	ldr	r2, [pc, #132]	; (800611c <TIM_Base_SetConfig+0xec>)
 8006096:	4293      	cmp	r3, r2
 8006098:	d00f      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4a20      	ldr	r2, [pc, #128]	; (8006120 <TIM_Base_SetConfig+0xf0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d00b      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	4a1f      	ldr	r2, [pc, #124]	; (8006124 <TIM_Base_SetConfig+0xf4>)
 80060a6:	4293      	cmp	r3, r2
 80060a8:	d007      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	; (8006128 <TIM_Base_SetConfig+0xf8>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d003      	beq.n	80060ba <TIM_Base_SetConfig+0x8a>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4a1d      	ldr	r2, [pc, #116]	; (800612c <TIM_Base_SetConfig+0xfc>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d108      	bne.n	80060cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80060c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	4313      	orrs	r3, r2
 80060ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
 80060d6:	4313      	orrs	r3, r2
 80060d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	68fa      	ldr	r2, [r7, #12]
 80060de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	689a      	ldr	r2, [r3, #8]
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a08      	ldr	r2, [pc, #32]	; (8006114 <TIM_Base_SetConfig+0xe4>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d103      	bne.n	8006100 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	691a      	ldr	r2, [r3, #16]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	2201      	movs	r2, #1
 8006104:	615a      	str	r2, [r3, #20]
}
 8006106:	bf00      	nop
 8006108:	3714      	adds	r7, #20
 800610a:	46bd      	mov	sp, r7
 800610c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006110:	4770      	bx	lr
 8006112:	bf00      	nop
 8006114:	40010000 	.word	0x40010000
 8006118:	40000400 	.word	0x40000400
 800611c:	40000800 	.word	0x40000800
 8006120:	40000c00 	.word	0x40000c00
 8006124:	40014000 	.word	0x40014000
 8006128:	40014400 	.word	0x40014400
 800612c:	40014800 	.word	0x40014800

08006130 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006130:	b480      	push	{r7}
 8006132:	b087      	sub	sp, #28
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
 8006138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6a1b      	ldr	r3, [r3, #32]
 800613e:	f023 0201 	bic.w	r2, r3, #1
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a1b      	ldr	r3, [r3, #32]
 800614a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	685b      	ldr	r3, [r3, #4]
 8006150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800615e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f023 0303 	bic.w	r3, r3, #3
 8006166:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	68fa      	ldr	r2, [r7, #12]
 800616e:	4313      	orrs	r3, r2
 8006170:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f023 0302 	bic.w	r3, r3, #2
 8006178:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	689b      	ldr	r3, [r3, #8]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	4313      	orrs	r3, r2
 8006182:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	4a1c      	ldr	r2, [pc, #112]	; (80061f8 <TIM_OC1_SetConfig+0xc8>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d10c      	bne.n	80061a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800618c:	697b      	ldr	r3, [r7, #20]
 800618e:	f023 0308 	bic.w	r3, r3, #8
 8006192:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	68db      	ldr	r3, [r3, #12]
 8006198:	697a      	ldr	r2, [r7, #20]
 800619a:	4313      	orrs	r3, r2
 800619c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	f023 0304 	bic.w	r3, r3, #4
 80061a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	4a13      	ldr	r2, [pc, #76]	; (80061f8 <TIM_OC1_SetConfig+0xc8>)
 80061aa:	4293      	cmp	r3, r2
 80061ac:	d111      	bne.n	80061d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80061ae:	693b      	ldr	r3, [r7, #16]
 80061b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80061bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80061be:	683b      	ldr	r3, [r7, #0]
 80061c0:	695b      	ldr	r3, [r3, #20]
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	693a      	ldr	r2, [r7, #16]
 80061ce:	4313      	orrs	r3, r2
 80061d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	68fa      	ldr	r2, [r7, #12]
 80061dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	697a      	ldr	r2, [r7, #20]
 80061ea:	621a      	str	r2, [r3, #32]
}
 80061ec:	bf00      	nop
 80061ee:	371c      	adds	r7, #28
 80061f0:	46bd      	mov	sp, r7
 80061f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f6:	4770      	bx	lr
 80061f8:	40010000 	.word	0x40010000

080061fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b087      	sub	sp, #28
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
 8006204:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6a1b      	ldr	r3, [r3, #32]
 800620a:	f023 0210 	bic.w	r2, r3, #16
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6a1b      	ldr	r3, [r3, #32]
 8006216:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	685b      	ldr	r3, [r3, #4]
 800621c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	699b      	ldr	r3, [r3, #24]
 8006222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800622a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006232:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	021b      	lsls	r3, r3, #8
 800623a:	68fa      	ldr	r2, [r7, #12]
 800623c:	4313      	orrs	r3, r2
 800623e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	f023 0320 	bic.w	r3, r3, #32
 8006246:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	689b      	ldr	r3, [r3, #8]
 800624c:	011b      	lsls	r3, r3, #4
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	4313      	orrs	r3, r2
 8006252:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	4a1e      	ldr	r2, [pc, #120]	; (80062d0 <TIM_OC2_SetConfig+0xd4>)
 8006258:	4293      	cmp	r3, r2
 800625a:	d10d      	bne.n	8006278 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	011b      	lsls	r3, r3, #4
 800626a:	697a      	ldr	r2, [r7, #20]
 800626c:	4313      	orrs	r3, r2
 800626e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006276:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <TIM_OC2_SetConfig+0xd4>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d113      	bne.n	80062a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006286:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006288:	693b      	ldr	r3, [r7, #16]
 800628a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800628e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	695b      	ldr	r3, [r3, #20]
 8006294:	009b      	lsls	r3, r3, #2
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	4313      	orrs	r3, r2
 800629a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	699b      	ldr	r3, [r3, #24]
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	693a      	ldr	r2, [r7, #16]
 80062a4:	4313      	orrs	r3, r2
 80062a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	68fa      	ldr	r2, [r7, #12]
 80062b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685a      	ldr	r2, [r3, #4]
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	697a      	ldr	r2, [r7, #20]
 80062c0:	621a      	str	r2, [r3, #32]
}
 80062c2:	bf00      	nop
 80062c4:	371c      	adds	r7, #28
 80062c6:	46bd      	mov	sp, r7
 80062c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062cc:	4770      	bx	lr
 80062ce:	bf00      	nop
 80062d0:	40010000 	.word	0x40010000

080062d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f023 0303 	bic.w	r3, r3, #3
 800630a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68fa      	ldr	r2, [r7, #12]
 8006312:	4313      	orrs	r3, r2
 8006314:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800631c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800631e:	683b      	ldr	r3, [r7, #0]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	021b      	lsls	r3, r3, #8
 8006324:	697a      	ldr	r2, [r7, #20]
 8006326:	4313      	orrs	r3, r2
 8006328:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a1d      	ldr	r2, [pc, #116]	; (80063a4 <TIM_OC3_SetConfig+0xd0>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d10d      	bne.n	800634e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006338:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68db      	ldr	r3, [r3, #12]
 800633e:	021b      	lsls	r3, r3, #8
 8006340:	697a      	ldr	r2, [r7, #20]
 8006342:	4313      	orrs	r3, r2
 8006344:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006346:	697b      	ldr	r3, [r7, #20]
 8006348:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800634c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	4a14      	ldr	r2, [pc, #80]	; (80063a4 <TIM_OC3_SetConfig+0xd0>)
 8006352:	4293      	cmp	r3, r2
 8006354:	d113      	bne.n	800637e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800635c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800635e:	693b      	ldr	r3, [r7, #16]
 8006360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	011b      	lsls	r3, r3, #4
 800636c:	693a      	ldr	r2, [r7, #16]
 800636e:	4313      	orrs	r3, r2
 8006370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	699b      	ldr	r3, [r3, #24]
 8006376:	011b      	lsls	r3, r3, #4
 8006378:	693a      	ldr	r2, [r7, #16]
 800637a:	4313      	orrs	r3, r2
 800637c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	693a      	ldr	r2, [r7, #16]
 8006382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	68fa      	ldr	r2, [r7, #12]
 8006388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	697a      	ldr	r2, [r7, #20]
 8006396:	621a      	str	r2, [r3, #32]
}
 8006398:	bf00      	nop
 800639a:	371c      	adds	r7, #28
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	40010000 	.word	0x40010000

080063a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6a1b      	ldr	r3, [r3, #32]
 80063c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	69db      	ldr	r3, [r3, #28]
 80063ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063e0:	683b      	ldr	r3, [r7, #0]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	021b      	lsls	r3, r3, #8
 80063e6:	68fa      	ldr	r2, [r7, #12]
 80063e8:	4313      	orrs	r3, r2
 80063ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	031b      	lsls	r3, r3, #12
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a10      	ldr	r2, [pc, #64]	; (8006444 <TIM_OC4_SetConfig+0x9c>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d109      	bne.n	800641c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800640e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	695b      	ldr	r3, [r3, #20]
 8006414:	019b      	lsls	r3, r3, #6
 8006416:	697a      	ldr	r2, [r7, #20]
 8006418:	4313      	orrs	r3, r2
 800641a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	697a      	ldr	r2, [r7, #20]
 8006420:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	685a      	ldr	r2, [r3, #4]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	693a      	ldr	r2, [r7, #16]
 8006434:	621a      	str	r2, [r3, #32]
}
 8006436:	bf00      	nop
 8006438:	371c      	adds	r7, #28
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr
 8006442:	bf00      	nop
 8006444:	40010000 	.word	0x40010000

08006448 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006448:	b480      	push	{r7}
 800644a:	b087      	sub	sp, #28
 800644c:	af00      	add	r7, sp, #0
 800644e:	60f8      	str	r0, [r7, #12]
 8006450:	60b9      	str	r1, [r7, #8]
 8006452:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6a1b      	ldr	r3, [r3, #32]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	699b      	ldr	r3, [r3, #24]
 800646a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006472:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	011b      	lsls	r3, r3, #4
 8006478:	693a      	ldr	r2, [r7, #16]
 800647a:	4313      	orrs	r3, r2
 800647c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800647e:	697b      	ldr	r3, [r7, #20]
 8006480:	f023 030a 	bic.w	r3, r3, #10
 8006484:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006486:	697a      	ldr	r2, [r7, #20]
 8006488:	68bb      	ldr	r3, [r7, #8]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	693a      	ldr	r2, [r7, #16]
 8006492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	697a      	ldr	r2, [r7, #20]
 8006498:	621a      	str	r2, [r3, #32]
}
 800649a:	bf00      	nop
 800649c:	371c      	adds	r7, #28
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr

080064a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80064a6:	b480      	push	{r7}
 80064a8:	b087      	sub	sp, #28
 80064aa:	af00      	add	r7, sp, #0
 80064ac:	60f8      	str	r0, [r7, #12]
 80064ae:	60b9      	str	r1, [r7, #8]
 80064b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 0210 	bic.w	r2, r3, #16
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	699b      	ldr	r3, [r3, #24]
 80064c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	6a1b      	ldr	r3, [r3, #32]
 80064c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80064d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	031b      	lsls	r3, r3, #12
 80064d6:	697a      	ldr	r2, [r7, #20]
 80064d8:	4313      	orrs	r3, r2
 80064da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80064dc:	693b      	ldr	r3, [r7, #16]
 80064de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80064e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80064e4:	68bb      	ldr	r3, [r7, #8]
 80064e6:	011b      	lsls	r3, r3, #4
 80064e8:	693a      	ldr	r2, [r7, #16]
 80064ea:	4313      	orrs	r3, r2
 80064ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	693a      	ldr	r2, [r7, #16]
 80064f8:	621a      	str	r2, [r3, #32]
}
 80064fa:	bf00      	nop
 80064fc:	371c      	adds	r7, #28
 80064fe:	46bd      	mov	sp, r7
 8006500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006504:	4770      	bx	lr

08006506 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006506:	b480      	push	{r7}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
 800650e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800651c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800651e:	683a      	ldr	r2, [r7, #0]
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4313      	orrs	r3, r2
 8006524:	f043 0307 	orr.w	r3, r3, #7
 8006528:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68fa      	ldr	r2, [r7, #12]
 800652e:	609a      	str	r2, [r3, #8]
}
 8006530:	bf00      	nop
 8006532:	3714      	adds	r7, #20
 8006534:	46bd      	mov	sp, r7
 8006536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800653a:	4770      	bx	lr

0800653c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800653c:	b480      	push	{r7}
 800653e:	b087      	sub	sp, #28
 8006540:	af00      	add	r7, sp, #0
 8006542:	60f8      	str	r0, [r7, #12]
 8006544:	60b9      	str	r1, [r7, #8]
 8006546:	607a      	str	r2, [r7, #4]
 8006548:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006550:	697b      	ldr	r3, [r7, #20]
 8006552:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006556:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	021a      	lsls	r2, r3, #8
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	431a      	orrs	r2, r3
 8006560:	68bb      	ldr	r3, [r7, #8]
 8006562:	4313      	orrs	r3, r2
 8006564:	697a      	ldr	r2, [r7, #20]
 8006566:	4313      	orrs	r3, r2
 8006568:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	697a      	ldr	r2, [r7, #20]
 800656e:	609a      	str	r2, [r3, #8]
}
 8006570:	bf00      	nop
 8006572:	371c      	adds	r7, #28
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800657c:	b480      	push	{r7}
 800657e:	b087      	sub	sp, #28
 8006580:	af00      	add	r7, sp, #0
 8006582:	60f8      	str	r0, [r7, #12]
 8006584:	60b9      	str	r1, [r7, #8]
 8006586:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	f003 031f 	and.w	r3, r3, #31
 800658e:	2201      	movs	r2, #1
 8006590:	fa02 f303 	lsl.w	r3, r2, r3
 8006594:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6a1a      	ldr	r2, [r3, #32]
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	43db      	mvns	r3, r3
 800659e:	401a      	ands	r2, r3
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	6a1a      	ldr	r2, [r3, #32]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	f003 031f 	and.w	r3, r3, #31
 80065ae:	6879      	ldr	r1, [r7, #4]
 80065b0:	fa01 f303 	lsl.w	r3, r1, r3
 80065b4:	431a      	orrs	r2, r3
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
	...

080065c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b085      	sub	sp, #20
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
 80065d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065d8:	2b01      	cmp	r3, #1
 80065da:	d101      	bne.n	80065e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80065dc:	2302      	movs	r3, #2
 80065de:	e050      	b.n	8006682 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2201      	movs	r2, #1
 80065e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2202      	movs	r2, #2
 80065ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	685b      	ldr	r3, [r3, #4]
 80065f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	689b      	ldr	r3, [r3, #8]
 80065fe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006606:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	68fa      	ldr	r2, [r7, #12]
 800660e:	4313      	orrs	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a1c      	ldr	r2, [pc, #112]	; (8006690 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006620:	4293      	cmp	r3, r2
 8006622:	d018      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800662c:	d013      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	4a18      	ldr	r2, [pc, #96]	; (8006694 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00e      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	4a16      	ldr	r2, [pc, #88]	; (8006698 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800663e:	4293      	cmp	r3, r2
 8006640:	d009      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	4a15      	ldr	r2, [pc, #84]	; (800669c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006648:	4293      	cmp	r3, r2
 800664a:	d004      	beq.n	8006656 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	4a13      	ldr	r2, [pc, #76]	; (80066a0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006652:	4293      	cmp	r3, r2
 8006654:	d10c      	bne.n	8006670 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006656:	68bb      	ldr	r3, [r7, #8]
 8006658:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800665c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	68ba      	ldr	r2, [r7, #8]
 8006664:	4313      	orrs	r3, r2
 8006666:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68ba      	ldr	r2, [r7, #8]
 800666e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006680:	2300      	movs	r3, #0
}
 8006682:	4618      	mov	r0, r3
 8006684:	3714      	adds	r7, #20
 8006686:	46bd      	mov	sp, r7
 8006688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668c:	4770      	bx	lr
 800668e:	bf00      	nop
 8006690:	40010000 	.word	0x40010000
 8006694:	40000400 	.word	0x40000400
 8006698:	40000800 	.word	0x40000800
 800669c:	40000c00 	.word	0x40000c00
 80066a0:	40014000 	.word	0x40014000

080066a4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80066a4:	b480      	push	{r7}
 80066a6:	b085      	sub	sp, #20
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80066bc:	2302      	movs	r3, #2
 80066be:	e03d      	b.n	800673c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	689b      	ldr	r3, [r3, #8]
 80066e0:	4313      	orrs	r3, r2
 80066e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80066ea:	683b      	ldr	r3, [r7, #0]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	4313      	orrs	r3, r2
 80066f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	4313      	orrs	r3, r2
 80066fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	691b      	ldr	r3, [r3, #16]
 800670a:	4313      	orrs	r3, r2
 800670c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	695b      	ldr	r3, [r3, #20]
 8006718:	4313      	orrs	r3, r2
 800671a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	69db      	ldr	r3, [r3, #28]
 8006726:	4313      	orrs	r3, r2
 8006728:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2200      	movs	r2, #0
 8006736:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3714      	adds	r7, #20
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr

08006748 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006748:	b480      	push	{r7}
 800674a:	b083      	sub	sp, #12
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006750:	bf00      	nop
 8006752:	370c      	adds	r7, #12
 8006754:	46bd      	mov	sp, r7
 8006756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675a:	4770      	bx	lr

0800675c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006764:	bf00      	nop
 8006766:	370c      	adds	r7, #12
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b082      	sub	sp, #8
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d101      	bne.n	8006782 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800677e:	2301      	movs	r3, #1
 8006780:	e03f      	b.n	8006802 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006796:	6878      	ldr	r0, [r7, #4]
 8006798:	f7fc fea2 	bl	80034e0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2224      	movs	r2, #36	; 0x24
 80067a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	68da      	ldr	r2, [r3, #12]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80067b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f829 	bl	800680c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	691a      	ldr	r2, [r3, #16]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80067c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	695a      	ldr	r2, [r3, #20]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80067d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	68da      	ldr	r2, [r3, #12]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80067e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2200      	movs	r2, #0
 80067ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2220      	movs	r2, #32
 80067fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006800:	2300      	movs	r3, #0
}
 8006802:	4618      	mov	r0, r3
 8006804:	3708      	adds	r7, #8
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}
	...

0800680c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800680c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006810:	b0c0      	sub	sp, #256	; 0x100
 8006812:	af00      	add	r7, sp, #0
 8006814:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	691b      	ldr	r3, [r3, #16]
 8006820:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006828:	68d9      	ldr	r1, [r3, #12]
 800682a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800682e:	681a      	ldr	r2, [r3, #0]
 8006830:	ea40 0301 	orr.w	r3, r0, r1
 8006834:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006840:	691b      	ldr	r3, [r3, #16]
 8006842:	431a      	orrs	r2, r3
 8006844:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006848:	695b      	ldr	r3, [r3, #20]
 800684a:	431a      	orrs	r2, r3
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	69db      	ldr	r3, [r3, #28]
 8006852:	4313      	orrs	r3, r2
 8006854:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	68db      	ldr	r3, [r3, #12]
 8006860:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006864:	f021 010c 	bic.w	r1, r1, #12
 8006868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006872:	430b      	orrs	r3, r1
 8006874:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	695b      	ldr	r3, [r3, #20]
 800687e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	6999      	ldr	r1, [r3, #24]
 8006888:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800688c:	681a      	ldr	r2, [r3, #0]
 800688e:	ea40 0301 	orr.w	r3, r0, r1
 8006892:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b8f      	ldr	r3, [pc, #572]	; (8006ad8 <UART_SetConfig+0x2cc>)
 800689c:	429a      	cmp	r2, r3
 800689e:	d005      	beq.n	80068ac <UART_SetConfig+0xa0>
 80068a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	4b8d      	ldr	r3, [pc, #564]	; (8006adc <UART_SetConfig+0x2d0>)
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d104      	bne.n	80068b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80068ac:	f7fe fe0a 	bl	80054c4 <HAL_RCC_GetPCLK2Freq>
 80068b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80068b4:	e003      	b.n	80068be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068b6:	f7fe fdf1 	bl	800549c <HAL_RCC_GetPCLK1Freq>
 80068ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80068be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80068c8:	f040 810c 	bne.w	8006ae4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80068d0:	2200      	movs	r2, #0
 80068d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80068d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80068da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068de:	4622      	mov	r2, r4
 80068e0:	462b      	mov	r3, r5
 80068e2:	1891      	adds	r1, r2, r2
 80068e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80068e6:	415b      	adcs	r3, r3
 80068e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068ee:	4621      	mov	r1, r4
 80068f0:	eb12 0801 	adds.w	r8, r2, r1
 80068f4:	4629      	mov	r1, r5
 80068f6:	eb43 0901 	adc.w	r9, r3, r1
 80068fa:	f04f 0200 	mov.w	r2, #0
 80068fe:	f04f 0300 	mov.w	r3, #0
 8006902:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006906:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800690a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800690e:	4690      	mov	r8, r2
 8006910:	4699      	mov	r9, r3
 8006912:	4623      	mov	r3, r4
 8006914:	eb18 0303 	adds.w	r3, r8, r3
 8006918:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800691c:	462b      	mov	r3, r5
 800691e:	eb49 0303 	adc.w	r3, r9, r3
 8006922:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692a:	685b      	ldr	r3, [r3, #4]
 800692c:	2200      	movs	r2, #0
 800692e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006932:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006936:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800693a:	460b      	mov	r3, r1
 800693c:	18db      	adds	r3, r3, r3
 800693e:	653b      	str	r3, [r7, #80]	; 0x50
 8006940:	4613      	mov	r3, r2
 8006942:	eb42 0303 	adc.w	r3, r2, r3
 8006946:	657b      	str	r3, [r7, #84]	; 0x54
 8006948:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800694c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006950:	f7fa fa34 	bl	8000dbc <__aeabi_uldivmod>
 8006954:	4602      	mov	r2, r0
 8006956:	460b      	mov	r3, r1
 8006958:	4b61      	ldr	r3, [pc, #388]	; (8006ae0 <UART_SetConfig+0x2d4>)
 800695a:	fba3 2302 	umull	r2, r3, r3, r2
 800695e:	095b      	lsrs	r3, r3, #5
 8006960:	011c      	lsls	r4, r3, #4
 8006962:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006966:	2200      	movs	r2, #0
 8006968:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800696c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006970:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006974:	4642      	mov	r2, r8
 8006976:	464b      	mov	r3, r9
 8006978:	1891      	adds	r1, r2, r2
 800697a:	64b9      	str	r1, [r7, #72]	; 0x48
 800697c:	415b      	adcs	r3, r3
 800697e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006980:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006984:	4641      	mov	r1, r8
 8006986:	eb12 0a01 	adds.w	sl, r2, r1
 800698a:	4649      	mov	r1, r9
 800698c:	eb43 0b01 	adc.w	fp, r3, r1
 8006990:	f04f 0200 	mov.w	r2, #0
 8006994:	f04f 0300 	mov.w	r3, #0
 8006998:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800699c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80069a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a4:	4692      	mov	sl, r2
 80069a6:	469b      	mov	fp, r3
 80069a8:	4643      	mov	r3, r8
 80069aa:	eb1a 0303 	adds.w	r3, sl, r3
 80069ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069b2:	464b      	mov	r3, r9
 80069b4:	eb4b 0303 	adc.w	r3, fp, r3
 80069b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80069c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80069cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80069d0:	460b      	mov	r3, r1
 80069d2:	18db      	adds	r3, r3, r3
 80069d4:	643b      	str	r3, [r7, #64]	; 0x40
 80069d6:	4613      	mov	r3, r2
 80069d8:	eb42 0303 	adc.w	r3, r2, r3
 80069dc:	647b      	str	r3, [r7, #68]	; 0x44
 80069de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069e6:	f7fa f9e9 	bl	8000dbc <__aeabi_uldivmod>
 80069ea:	4602      	mov	r2, r0
 80069ec:	460b      	mov	r3, r1
 80069ee:	4611      	mov	r1, r2
 80069f0:	4b3b      	ldr	r3, [pc, #236]	; (8006ae0 <UART_SetConfig+0x2d4>)
 80069f2:	fba3 2301 	umull	r2, r3, r3, r1
 80069f6:	095b      	lsrs	r3, r3, #5
 80069f8:	2264      	movs	r2, #100	; 0x64
 80069fa:	fb02 f303 	mul.w	r3, r2, r3
 80069fe:	1acb      	subs	r3, r1, r3
 8006a00:	00db      	lsls	r3, r3, #3
 8006a02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006a06:	4b36      	ldr	r3, [pc, #216]	; (8006ae0 <UART_SetConfig+0x2d4>)
 8006a08:	fba3 2302 	umull	r2, r3, r3, r2
 8006a0c:	095b      	lsrs	r3, r3, #5
 8006a0e:	005b      	lsls	r3, r3, #1
 8006a10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006a14:	441c      	add	r4, r3
 8006a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006a20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006a24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	1891      	adds	r1, r2, r2
 8006a2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006a30:	415b      	adcs	r3, r3
 8006a32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006a34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006a38:	4641      	mov	r1, r8
 8006a3a:	1851      	adds	r1, r2, r1
 8006a3c:	6339      	str	r1, [r7, #48]	; 0x30
 8006a3e:	4649      	mov	r1, r9
 8006a40:	414b      	adcs	r3, r1
 8006a42:	637b      	str	r3, [r7, #52]	; 0x34
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a50:	4659      	mov	r1, fp
 8006a52:	00cb      	lsls	r3, r1, #3
 8006a54:	4651      	mov	r1, sl
 8006a56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a5a:	4651      	mov	r1, sl
 8006a5c:	00ca      	lsls	r2, r1, #3
 8006a5e:	4610      	mov	r0, r2
 8006a60:	4619      	mov	r1, r3
 8006a62:	4603      	mov	r3, r0
 8006a64:	4642      	mov	r2, r8
 8006a66:	189b      	adds	r3, r3, r2
 8006a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a6c:	464b      	mov	r3, r9
 8006a6e:	460a      	mov	r2, r1
 8006a70:	eb42 0303 	adc.w	r3, r2, r3
 8006a74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a7c:	685b      	ldr	r3, [r3, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a8c:	460b      	mov	r3, r1
 8006a8e:	18db      	adds	r3, r3, r3
 8006a90:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a92:	4613      	mov	r3, r2
 8006a94:	eb42 0303 	adc.w	r3, r2, r3
 8006a98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006aa2:	f7fa f98b 	bl	8000dbc <__aeabi_uldivmod>
 8006aa6:	4602      	mov	r2, r0
 8006aa8:	460b      	mov	r3, r1
 8006aaa:	4b0d      	ldr	r3, [pc, #52]	; (8006ae0 <UART_SetConfig+0x2d4>)
 8006aac:	fba3 1302 	umull	r1, r3, r3, r2
 8006ab0:	095b      	lsrs	r3, r3, #5
 8006ab2:	2164      	movs	r1, #100	; 0x64
 8006ab4:	fb01 f303 	mul.w	r3, r1, r3
 8006ab8:	1ad3      	subs	r3, r2, r3
 8006aba:	00db      	lsls	r3, r3, #3
 8006abc:	3332      	adds	r3, #50	; 0x32
 8006abe:	4a08      	ldr	r2, [pc, #32]	; (8006ae0 <UART_SetConfig+0x2d4>)
 8006ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ac4:	095b      	lsrs	r3, r3, #5
 8006ac6:	f003 0207 	and.w	r2, r3, #7
 8006aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4422      	add	r2, r4
 8006ad2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006ad4:	e105      	b.n	8006ce2 <UART_SetConfig+0x4d6>
 8006ad6:	bf00      	nop
 8006ad8:	40011000 	.word	0x40011000
 8006adc:	40011400 	.word	0x40011400
 8006ae0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006ae4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006aee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006af2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006af6:	4642      	mov	r2, r8
 8006af8:	464b      	mov	r3, r9
 8006afa:	1891      	adds	r1, r2, r2
 8006afc:	6239      	str	r1, [r7, #32]
 8006afe:	415b      	adcs	r3, r3
 8006b00:	627b      	str	r3, [r7, #36]	; 0x24
 8006b02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b06:	4641      	mov	r1, r8
 8006b08:	1854      	adds	r4, r2, r1
 8006b0a:	4649      	mov	r1, r9
 8006b0c:	eb43 0501 	adc.w	r5, r3, r1
 8006b10:	f04f 0200 	mov.w	r2, #0
 8006b14:	f04f 0300 	mov.w	r3, #0
 8006b18:	00eb      	lsls	r3, r5, #3
 8006b1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006b1e:	00e2      	lsls	r2, r4, #3
 8006b20:	4614      	mov	r4, r2
 8006b22:	461d      	mov	r5, r3
 8006b24:	4643      	mov	r3, r8
 8006b26:	18e3      	adds	r3, r4, r3
 8006b28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006b2c:	464b      	mov	r3, r9
 8006b2e:	eb45 0303 	adc.w	r3, r5, r3
 8006b32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	2200      	movs	r2, #0
 8006b3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b46:	f04f 0200 	mov.w	r2, #0
 8006b4a:	f04f 0300 	mov.w	r3, #0
 8006b4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b52:	4629      	mov	r1, r5
 8006b54:	008b      	lsls	r3, r1, #2
 8006b56:	4621      	mov	r1, r4
 8006b58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b5c:	4621      	mov	r1, r4
 8006b5e:	008a      	lsls	r2, r1, #2
 8006b60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b64:	f7fa f92a 	bl	8000dbc <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4b60      	ldr	r3, [pc, #384]	; (8006cf0 <UART_SetConfig+0x4e4>)
 8006b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	011c      	lsls	r4, r3, #4
 8006b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b88:	4642      	mov	r2, r8
 8006b8a:	464b      	mov	r3, r9
 8006b8c:	1891      	adds	r1, r2, r2
 8006b8e:	61b9      	str	r1, [r7, #24]
 8006b90:	415b      	adcs	r3, r3
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b98:	4641      	mov	r1, r8
 8006b9a:	1851      	adds	r1, r2, r1
 8006b9c:	6139      	str	r1, [r7, #16]
 8006b9e:	4649      	mov	r1, r9
 8006ba0:	414b      	adcs	r3, r1
 8006ba2:	617b      	str	r3, [r7, #20]
 8006ba4:	f04f 0200 	mov.w	r2, #0
 8006ba8:	f04f 0300 	mov.w	r3, #0
 8006bac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006bb0:	4659      	mov	r1, fp
 8006bb2:	00cb      	lsls	r3, r1, #3
 8006bb4:	4651      	mov	r1, sl
 8006bb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bba:	4651      	mov	r1, sl
 8006bbc:	00ca      	lsls	r2, r1, #3
 8006bbe:	4610      	mov	r0, r2
 8006bc0:	4619      	mov	r1, r3
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	4642      	mov	r2, r8
 8006bc6:	189b      	adds	r3, r3, r2
 8006bc8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006bcc:	464b      	mov	r3, r9
 8006bce:	460a      	mov	r2, r1
 8006bd0:	eb42 0303 	adc.w	r3, r2, r3
 8006bd4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bdc:	685b      	ldr	r3, [r3, #4]
 8006bde:	2200      	movs	r2, #0
 8006be0:	67bb      	str	r3, [r7, #120]	; 0x78
 8006be2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006be4:	f04f 0200 	mov.w	r2, #0
 8006be8:	f04f 0300 	mov.w	r3, #0
 8006bec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bf0:	4649      	mov	r1, r9
 8006bf2:	008b      	lsls	r3, r1, #2
 8006bf4:	4641      	mov	r1, r8
 8006bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bfa:	4641      	mov	r1, r8
 8006bfc:	008a      	lsls	r2, r1, #2
 8006bfe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006c02:	f7fa f8db 	bl	8000dbc <__aeabi_uldivmod>
 8006c06:	4602      	mov	r2, r0
 8006c08:	460b      	mov	r3, r1
 8006c0a:	4b39      	ldr	r3, [pc, #228]	; (8006cf0 <UART_SetConfig+0x4e4>)
 8006c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	2164      	movs	r1, #100	; 0x64
 8006c14:	fb01 f303 	mul.w	r3, r1, r3
 8006c18:	1ad3      	subs	r3, r2, r3
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	3332      	adds	r3, #50	; 0x32
 8006c1e:	4a34      	ldr	r2, [pc, #208]	; (8006cf0 <UART_SetConfig+0x4e4>)
 8006c20:	fba2 2303 	umull	r2, r3, r2, r3
 8006c24:	095b      	lsrs	r3, r3, #5
 8006c26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006c2a:	441c      	add	r4, r3
 8006c2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c30:	2200      	movs	r2, #0
 8006c32:	673b      	str	r3, [r7, #112]	; 0x70
 8006c34:	677a      	str	r2, [r7, #116]	; 0x74
 8006c36:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	464b      	mov	r3, r9
 8006c3e:	1891      	adds	r1, r2, r2
 8006c40:	60b9      	str	r1, [r7, #8]
 8006c42:	415b      	adcs	r3, r3
 8006c44:	60fb      	str	r3, [r7, #12]
 8006c46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c4a:	4641      	mov	r1, r8
 8006c4c:	1851      	adds	r1, r2, r1
 8006c4e:	6039      	str	r1, [r7, #0]
 8006c50:	4649      	mov	r1, r9
 8006c52:	414b      	adcs	r3, r1
 8006c54:	607b      	str	r3, [r7, #4]
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c62:	4659      	mov	r1, fp
 8006c64:	00cb      	lsls	r3, r1, #3
 8006c66:	4651      	mov	r1, sl
 8006c68:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6c:	4651      	mov	r1, sl
 8006c6e:	00ca      	lsls	r2, r1, #3
 8006c70:	4610      	mov	r0, r2
 8006c72:	4619      	mov	r1, r3
 8006c74:	4603      	mov	r3, r0
 8006c76:	4642      	mov	r2, r8
 8006c78:	189b      	adds	r3, r3, r2
 8006c7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c7c:	464b      	mov	r3, r9
 8006c7e:	460a      	mov	r2, r1
 8006c80:	eb42 0303 	adc.w	r3, r2, r3
 8006c84:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	663b      	str	r3, [r7, #96]	; 0x60
 8006c90:	667a      	str	r2, [r7, #100]	; 0x64
 8006c92:	f04f 0200 	mov.w	r2, #0
 8006c96:	f04f 0300 	mov.w	r3, #0
 8006c9a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c9e:	4649      	mov	r1, r9
 8006ca0:	008b      	lsls	r3, r1, #2
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca8:	4641      	mov	r1, r8
 8006caa:	008a      	lsls	r2, r1, #2
 8006cac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006cb0:	f7fa f884 	bl	8000dbc <__aeabi_uldivmod>
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	460b      	mov	r3, r1
 8006cb8:	4b0d      	ldr	r3, [pc, #52]	; (8006cf0 <UART_SetConfig+0x4e4>)
 8006cba:	fba3 1302 	umull	r1, r3, r3, r2
 8006cbe:	095b      	lsrs	r3, r3, #5
 8006cc0:	2164      	movs	r1, #100	; 0x64
 8006cc2:	fb01 f303 	mul.w	r3, r1, r3
 8006cc6:	1ad3      	subs	r3, r2, r3
 8006cc8:	011b      	lsls	r3, r3, #4
 8006cca:	3332      	adds	r3, #50	; 0x32
 8006ccc:	4a08      	ldr	r2, [pc, #32]	; (8006cf0 <UART_SetConfig+0x4e4>)
 8006cce:	fba2 2303 	umull	r2, r3, r2, r3
 8006cd2:	095b      	lsrs	r3, r3, #5
 8006cd4:	f003 020f 	and.w	r2, r3, #15
 8006cd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4422      	add	r2, r4
 8006ce0:	609a      	str	r2, [r3, #8]
}
 8006ce2:	bf00      	nop
 8006ce4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cee:	bf00      	nop
 8006cf0:	51eb851f 	.word	0x51eb851f

08006cf4 <__errno>:
 8006cf4:	4b01      	ldr	r3, [pc, #4]	; (8006cfc <__errno+0x8>)
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	4770      	bx	lr
 8006cfa:	bf00      	nop
 8006cfc:	2000001c 	.word	0x2000001c

08006d00 <__libc_init_array>:
 8006d00:	b570      	push	{r4, r5, r6, lr}
 8006d02:	4d0d      	ldr	r5, [pc, #52]	; (8006d38 <__libc_init_array+0x38>)
 8006d04:	4c0d      	ldr	r4, [pc, #52]	; (8006d3c <__libc_init_array+0x3c>)
 8006d06:	1b64      	subs	r4, r4, r5
 8006d08:	10a4      	asrs	r4, r4, #2
 8006d0a:	2600      	movs	r6, #0
 8006d0c:	42a6      	cmp	r6, r4
 8006d0e:	d109      	bne.n	8006d24 <__libc_init_array+0x24>
 8006d10:	4d0b      	ldr	r5, [pc, #44]	; (8006d40 <__libc_init_array+0x40>)
 8006d12:	4c0c      	ldr	r4, [pc, #48]	; (8006d44 <__libc_init_array+0x44>)
 8006d14:	f000 f920 	bl	8006f58 <_init>
 8006d18:	1b64      	subs	r4, r4, r5
 8006d1a:	10a4      	asrs	r4, r4, #2
 8006d1c:	2600      	movs	r6, #0
 8006d1e:	42a6      	cmp	r6, r4
 8006d20:	d105      	bne.n	8006d2e <__libc_init_array+0x2e>
 8006d22:	bd70      	pop	{r4, r5, r6, pc}
 8006d24:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d28:	4798      	blx	r3
 8006d2a:	3601      	adds	r6, #1
 8006d2c:	e7ee      	b.n	8006d0c <__libc_init_array+0xc>
 8006d2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d32:	4798      	blx	r3
 8006d34:	3601      	adds	r6, #1
 8006d36:	e7f2      	b.n	8006d1e <__libc_init_array+0x1e>
 8006d38:	08006f98 	.word	0x08006f98
 8006d3c:	08006f98 	.word	0x08006f98
 8006d40:	08006f98 	.word	0x08006f98
 8006d44:	08006f9c 	.word	0x08006f9c

08006d48 <memset>:
 8006d48:	4402      	add	r2, r0
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	4293      	cmp	r3, r2
 8006d4e:	d100      	bne.n	8006d52 <memset+0xa>
 8006d50:	4770      	bx	lr
 8006d52:	f803 1b01 	strb.w	r1, [r3], #1
 8006d56:	e7f9      	b.n	8006d4c <memset+0x4>

08006d58 <sqrt>:
 8006d58:	b538      	push	{r3, r4, r5, lr}
 8006d5a:	ed2d 8b02 	vpush	{d8}
 8006d5e:	ec55 4b10 	vmov	r4, r5, d0
 8006d62:	f000 f843 	bl	8006dec <__ieee754_sqrt>
 8006d66:	4622      	mov	r2, r4
 8006d68:	462b      	mov	r3, r5
 8006d6a:	4620      	mov	r0, r4
 8006d6c:	4629      	mov	r1, r5
 8006d6e:	eeb0 8a40 	vmov.f32	s16, s0
 8006d72:	eef0 8a60 	vmov.f32	s17, s1
 8006d76:	f7f9 fe85 	bl	8000a84 <__aeabi_dcmpun>
 8006d7a:	b990      	cbnz	r0, 8006da2 <sqrt+0x4a>
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	2300      	movs	r3, #0
 8006d80:	4620      	mov	r0, r4
 8006d82:	4629      	mov	r1, r5
 8006d84:	f7f9 fe56 	bl	8000a34 <__aeabi_dcmplt>
 8006d88:	b158      	cbz	r0, 8006da2 <sqrt+0x4a>
 8006d8a:	f7ff ffb3 	bl	8006cf4 <__errno>
 8006d8e:	2321      	movs	r3, #33	; 0x21
 8006d90:	6003      	str	r3, [r0, #0]
 8006d92:	2200      	movs	r2, #0
 8006d94:	2300      	movs	r3, #0
 8006d96:	4610      	mov	r0, r2
 8006d98:	4619      	mov	r1, r3
 8006d9a:	f7f9 fd03 	bl	80007a4 <__aeabi_ddiv>
 8006d9e:	ec41 0b18 	vmov	d8, r0, r1
 8006da2:	eeb0 0a48 	vmov.f32	s0, s16
 8006da6:	eef0 0a68 	vmov.f32	s1, s17
 8006daa:	ecbd 8b02 	vpop	{d8}
 8006dae:	bd38      	pop	{r3, r4, r5, pc}

08006db0 <sqrtf>:
 8006db0:	b508      	push	{r3, lr}
 8006db2:	ed2d 8b02 	vpush	{d8}
 8006db6:	eeb0 8a40 	vmov.f32	s16, s0
 8006dba:	f000 f8c9 	bl	8006f50 <__ieee754_sqrtf>
 8006dbe:	eeb4 8a48 	vcmp.f32	s16, s16
 8006dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dc6:	d60c      	bvs.n	8006de2 <sqrtf+0x32>
 8006dc8:	eddf 8a07 	vldr	s17, [pc, #28]	; 8006de8 <sqrtf+0x38>
 8006dcc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006dd4:	d505      	bpl.n	8006de2 <sqrtf+0x32>
 8006dd6:	f7ff ff8d 	bl	8006cf4 <__errno>
 8006dda:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006dde:	2321      	movs	r3, #33	; 0x21
 8006de0:	6003      	str	r3, [r0, #0]
 8006de2:	ecbd 8b02 	vpop	{d8}
 8006de6:	bd08      	pop	{r3, pc}
 8006de8:	00000000 	.word	0x00000000

08006dec <__ieee754_sqrt>:
 8006dec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006df0:	ec55 4b10 	vmov	r4, r5, d0
 8006df4:	4e55      	ldr	r6, [pc, #340]	; (8006f4c <__ieee754_sqrt+0x160>)
 8006df6:	43ae      	bics	r6, r5
 8006df8:	ee10 0a10 	vmov	r0, s0
 8006dfc:	ee10 3a10 	vmov	r3, s0
 8006e00:	462a      	mov	r2, r5
 8006e02:	4629      	mov	r1, r5
 8006e04:	d110      	bne.n	8006e28 <__ieee754_sqrt+0x3c>
 8006e06:	ee10 2a10 	vmov	r2, s0
 8006e0a:	462b      	mov	r3, r5
 8006e0c:	f7f9 fba0 	bl	8000550 <__aeabi_dmul>
 8006e10:	4602      	mov	r2, r0
 8006e12:	460b      	mov	r3, r1
 8006e14:	4620      	mov	r0, r4
 8006e16:	4629      	mov	r1, r5
 8006e18:	f7f9 f9e4 	bl	80001e4 <__adddf3>
 8006e1c:	4604      	mov	r4, r0
 8006e1e:	460d      	mov	r5, r1
 8006e20:	ec45 4b10 	vmov	d0, r4, r5
 8006e24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e28:	2d00      	cmp	r5, #0
 8006e2a:	dc10      	bgt.n	8006e4e <__ieee754_sqrt+0x62>
 8006e2c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8006e30:	4330      	orrs	r0, r6
 8006e32:	d0f5      	beq.n	8006e20 <__ieee754_sqrt+0x34>
 8006e34:	b15d      	cbz	r5, 8006e4e <__ieee754_sqrt+0x62>
 8006e36:	ee10 2a10 	vmov	r2, s0
 8006e3a:	462b      	mov	r3, r5
 8006e3c:	ee10 0a10 	vmov	r0, s0
 8006e40:	f7f9 f9ce 	bl	80001e0 <__aeabi_dsub>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	f7f9 fcac 	bl	80007a4 <__aeabi_ddiv>
 8006e4c:	e7e6      	b.n	8006e1c <__ieee754_sqrt+0x30>
 8006e4e:	1512      	asrs	r2, r2, #20
 8006e50:	d074      	beq.n	8006f3c <__ieee754_sqrt+0x150>
 8006e52:	07d4      	lsls	r4, r2, #31
 8006e54:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8006e58:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8006e5c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006e60:	bf5e      	ittt	pl
 8006e62:	0fda      	lsrpl	r2, r3, #31
 8006e64:	005b      	lslpl	r3, r3, #1
 8006e66:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8006e6a:	2400      	movs	r4, #0
 8006e6c:	0fda      	lsrs	r2, r3, #31
 8006e6e:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8006e72:	107f      	asrs	r7, r7, #1
 8006e74:	005b      	lsls	r3, r3, #1
 8006e76:	2516      	movs	r5, #22
 8006e78:	4620      	mov	r0, r4
 8006e7a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006e7e:	1886      	adds	r6, r0, r2
 8006e80:	428e      	cmp	r6, r1
 8006e82:	bfde      	ittt	le
 8006e84:	1b89      	suble	r1, r1, r6
 8006e86:	18b0      	addle	r0, r6, r2
 8006e88:	18a4      	addle	r4, r4, r2
 8006e8a:	0049      	lsls	r1, r1, #1
 8006e8c:	3d01      	subs	r5, #1
 8006e8e:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8006e92:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8006e96:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006e9a:	d1f0      	bne.n	8006e7e <__ieee754_sqrt+0x92>
 8006e9c:	462a      	mov	r2, r5
 8006e9e:	f04f 0e20 	mov.w	lr, #32
 8006ea2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8006ea6:	4281      	cmp	r1, r0
 8006ea8:	eb06 0c05 	add.w	ip, r6, r5
 8006eac:	dc02      	bgt.n	8006eb4 <__ieee754_sqrt+0xc8>
 8006eae:	d113      	bne.n	8006ed8 <__ieee754_sqrt+0xec>
 8006eb0:	459c      	cmp	ip, r3
 8006eb2:	d811      	bhi.n	8006ed8 <__ieee754_sqrt+0xec>
 8006eb4:	f1bc 0f00 	cmp.w	ip, #0
 8006eb8:	eb0c 0506 	add.w	r5, ip, r6
 8006ebc:	da43      	bge.n	8006f46 <__ieee754_sqrt+0x15a>
 8006ebe:	2d00      	cmp	r5, #0
 8006ec0:	db41      	blt.n	8006f46 <__ieee754_sqrt+0x15a>
 8006ec2:	f100 0801 	add.w	r8, r0, #1
 8006ec6:	1a09      	subs	r1, r1, r0
 8006ec8:	459c      	cmp	ip, r3
 8006eca:	bf88      	it	hi
 8006ecc:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8006ed0:	eba3 030c 	sub.w	r3, r3, ip
 8006ed4:	4432      	add	r2, r6
 8006ed6:	4640      	mov	r0, r8
 8006ed8:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8006edc:	f1be 0e01 	subs.w	lr, lr, #1
 8006ee0:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8006ee4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8006ee8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8006eec:	d1db      	bne.n	8006ea6 <__ieee754_sqrt+0xba>
 8006eee:	430b      	orrs	r3, r1
 8006ef0:	d006      	beq.n	8006f00 <__ieee754_sqrt+0x114>
 8006ef2:	1c50      	adds	r0, r2, #1
 8006ef4:	bf13      	iteet	ne
 8006ef6:	3201      	addne	r2, #1
 8006ef8:	3401      	addeq	r4, #1
 8006efa:	4672      	moveq	r2, lr
 8006efc:	f022 0201 	bicne.w	r2, r2, #1
 8006f00:	1063      	asrs	r3, r4, #1
 8006f02:	0852      	lsrs	r2, r2, #1
 8006f04:	07e1      	lsls	r1, r4, #31
 8006f06:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8006f0a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8006f0e:	bf48      	it	mi
 8006f10:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8006f14:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8006f18:	4614      	mov	r4, r2
 8006f1a:	e781      	b.n	8006e20 <__ieee754_sqrt+0x34>
 8006f1c:	0ad9      	lsrs	r1, r3, #11
 8006f1e:	3815      	subs	r0, #21
 8006f20:	055b      	lsls	r3, r3, #21
 8006f22:	2900      	cmp	r1, #0
 8006f24:	d0fa      	beq.n	8006f1c <__ieee754_sqrt+0x130>
 8006f26:	02cd      	lsls	r5, r1, #11
 8006f28:	d50a      	bpl.n	8006f40 <__ieee754_sqrt+0x154>
 8006f2a:	f1c2 0420 	rsb	r4, r2, #32
 8006f2e:	fa23 f404 	lsr.w	r4, r3, r4
 8006f32:	1e55      	subs	r5, r2, #1
 8006f34:	4093      	lsls	r3, r2
 8006f36:	4321      	orrs	r1, r4
 8006f38:	1b42      	subs	r2, r0, r5
 8006f3a:	e78a      	b.n	8006e52 <__ieee754_sqrt+0x66>
 8006f3c:	4610      	mov	r0, r2
 8006f3e:	e7f0      	b.n	8006f22 <__ieee754_sqrt+0x136>
 8006f40:	0049      	lsls	r1, r1, #1
 8006f42:	3201      	adds	r2, #1
 8006f44:	e7ef      	b.n	8006f26 <__ieee754_sqrt+0x13a>
 8006f46:	4680      	mov	r8, r0
 8006f48:	e7bd      	b.n	8006ec6 <__ieee754_sqrt+0xda>
 8006f4a:	bf00      	nop
 8006f4c:	7ff00000 	.word	0x7ff00000

08006f50 <__ieee754_sqrtf>:
 8006f50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8006f54:	4770      	bx	lr
	...

08006f58 <_init>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	bf00      	nop
 8006f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f5e:	bc08      	pop	{r3}
 8006f60:	469e      	mov	lr, r3
 8006f62:	4770      	bx	lr

08006f64 <_fini>:
 8006f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f66:	bf00      	nop
 8006f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f6a:	bc08      	pop	{r3}
 8006f6c:	469e      	mov	lr, r3
 8006f6e:	4770      	bx	lr
